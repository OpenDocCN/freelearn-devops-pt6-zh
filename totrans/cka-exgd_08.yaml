- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Monitoring and Logging Kubernetes Clusters and Applications
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控和记录 Kubernetes 集群及应用
- en: This chapter describes how to monitor Kubernetes cluster components and applications
    and get infrastructure-level, system-level, and application-level logs to serve
    as a source for log analytics or further troubleshooting. Together with the next
    two chapters about troubleshooting cluster components and applications and troubleshooting
    Kubernetes security and networking, it covers 30% of the CKA exam content.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章描述了如何监控 Kubernetes 集群组件和应用程序，并获取基础设施级、系统级和应用级日志，以供日志分析或进一步排查故障。结合接下来的两章，关于排查集群组件和应用程序故障以及排查
    Kubernetes 安全性和网络问题，它覆盖了 CKA 考试内容的 30%。
- en: 'In this chapter, we’re going to cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Monitoring on a cluster node
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在集群节点上进行监控
- en: Monitoring applications on a Kubernetes cluster
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Kubernetes 集群上监控应用
- en: Managing logs at the cluster node and pod levels
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在集群节点和 Pod 级别管理日志
- en: Managing container `stdout` and `stderr` logs
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理容器 `stdout` 和 `stderr` 日志
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To get started, you need to make sure your local machine meets the following
    technical requirements:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，您需要确保本地机器符合以下技术要求：
- en: A compatible Linux host. We recommend a Debian-based Linux distribution such
    as Ubuntu 18.04 or later.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个兼容的 Linux 主机。我们推荐基于 Debian 的 Linux 发行版，如 Ubuntu 18.04 或更高版本。
- en: Make sure your host machine has at least 2 GB of RAM, 2 CPU cores, and about
    20 GB of free disk space.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保您的主机机器至少有 2 GB 的 RAM、2 个 CPU 核心，以及大约 20 GB 的空闲磁盘空间。
- en: Monitoring on a cluster node
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在集群节点上进行监控
- en: Monitoring is essential for Kubernetes administrators when it comes to getting
    a clear understanding of what’s going on in your Kubernetes cluster. You need
    to know all of the different metrics to help you get on track in terms of the
    health of your Kubernetes cluster components. You also need to make sure that
    your components are operating as expected and that all workloads that are deployed
    on your worker nodes are functional and have enough resources, such as CPU, memory,
    and storage. Moreover, you should also check whether any worker nodes are available
    and have sufficient resources to scale or schedule more workloads.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 监控对 Kubernetes 管理员至关重要，能够清晰地了解 Kubernetes 集群中的情况。您需要了解所有不同的指标，以帮助您评估集群组件的健康状况。您还需要确保组件按预期运行，并且部署在工作节点上的所有工作负载都能正常运行并具有足够的资源，如
    CPU、内存和存储。此外，您还应该检查是否有任何工作节点可用，并且拥有足够的资源来扩展或调度更多工作负载。
- en: 'In Kubernetes, Metrics Server collects CPU/memory metrics and to some extent
    adjusts the resources needed by containers automatically. Metrics Server collects
    those metrics every 15 seconds from the kubelet agent and then exposes them in
    the API server of the Kubernetes master via the Metrics API. This process is described
    in the following figure:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 中，Metrics Server 收集 CPU/内存指标，并在某种程度上自动调整容器所需的资源。Metrics Server
    每 15 秒从 kubelet 代理收集这些指标，然后通过 Metrics API 将它们暴露在 Kubernetes 主节点的 API 服务器中。此过程在以下图中描述：
- en: '![Figure 8.1 – How Metrics Server works in a Kubernetes cluster ](img/Figure_8.01_B18201.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.1 – Metrics Server 在 Kubernetes 集群中的工作原理](img/Figure_8.01_B18201.jpg)'
- en: Figure 8.1 – How Metrics Server works in a Kubernetes cluster
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.1 – Metrics Server 在 Kubernetes 集群中的工作原理
- en: 'Users can use the `kubectl top` command to access metrics collected by Metrics
    Server. At the time of writing this chapter, Metrics Server supports scaling up
    to 5,000 Kubernetes worker nodes, which is the maximum number of nodes that Kubernetes
    currently supports (Kubernetes v1.24 supports clusters with up to 5,000 nodes).
    For more details about large Kubernetes clusters, check out this official article:
    [https://kubernetes.io/docs/setup/best-practices/cluster-large/](https://kubernetes.io/docs/setup/best-practices/cluster-large/).'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以使用 `kubectl top` 命令访问 Metrics Server 收集的指标。在撰写本章时，Metrics Server 支持扩展至 5,000
    个 Kubernetes 工作节点，这是 Kubernetes 当前支持的最大节点数（Kubernetes v1.24 支持最多 5,000 个节点的集群）。有关大型
    Kubernetes 集群的更多详情，请参阅此官方文章：[https://kubernetes.io/docs/setup/best-practices/cluster-large/](https://kubernetes.io/docs/setup/best-practices/cluster-large/)。
- en: Checking whether Metrics Server is installed
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查是否安装了 Metrics Server
- en: 'From your Kubernetes cluster, you can take the following steps to check whether
    you have Metrics Server available in your current cluster. You can start by setting
    up an alias for kubectl using the `alias k=kubectl` command and then use the `k
    get` command, as follows, to check out the worker nodes that are currently available:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 从您的Kubernetes集群开始，您可以采取以下步骤来检查您当前集群中是否可用Metrics Server。您可以通过使用`alias k=kubectl`命令设置kubectl的别名，然后使用`k
    get`命令，如下所示，查看当前可用的工作节点：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding command will show the available worker nodes of your current
    cluster. The output is similar to the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将显示当前集群中可用的工作节点。输出类似于以下内容：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can use the `k top node` command to check the metrics for the worker node
    called `minikube`, as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`k top node`命令来检查名为`minikube`的工作节点的指标，如下所示：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The output of the preceding command will show the resource usage of the `minikube`
    node if you have Metrics Server installed. Alternatively, you will see the following,
    which only appears when Metrics Server is not available in your current Kubernetes
    cluster, which means you need to install Metrics Server:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果已安装Metrics Server，上述命令的输出将显示`minikube`节点的资源使用情况。或者，您将看到以下内容，这仅在您当前的Kubernetes集群中没有Metrics
    Server可用时出现，这意味着您需要安装Metrics Server：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Alternatively, you can use the following command directly to see whether there
    will be any output:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以直接使用以下命令来查看是否会有任何输出：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The CKA exam will usually have Metrics Server pre-installed, so you could jump
    to *step 3* to check out the use cases for the `kubectl top` command.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: CKA考试通常会预先安装Metrics Server，因此您可以跳到*步骤3*，查看`kubectl top`命令的用例。
- en: Installing Metrics Server in your current Kubernetes cluster
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在您当前的Kubernetes集群中安装Metrics Server
- en: 'If you’re on a vanilla Kubernetes cluster, you can install Metrics Server by
    deploying a YAML definition or through Helm charts; the latter will require Helm
    to be installed. To get the latest release and instructions, you can go to their
    GitHub repo: [https://github.com/kubernetes-sigs/metrics-server](https://github.com/kubernetes-sigs/metrics-server).'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是纯净的Kubernetes集群，可以通过部署YAML定义或使用Helm图表来安装Metrics Server；后者需要安装Helm。要获取最新的发布版本和说明，请访问它们的GitHub库：[https://github.com/kubernetes-sigs/metrics-server](https://github.com/kubernetes-sigs/metrics-server)。
- en: Using a YAML manifest file
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用YAML清单文件
- en: 'You can use the `kubectl apply -f` command to deploy Metrics Server using the
    official YAML manifest file as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`kubectl apply -f`命令，通过官方YAML清单文件部署Metrics Server，如下所示：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Starting from the end of February 2022, there’s also a **high-availability**
    (**HA**) version that bumps up the replica count from one to two for Metrics Server.
    If you’re on a cluster with at least two nodes, you can use the following file:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 从2022年2月底开始，还有一个**高可用性**（**HA**）版本，将Metrics Server的副本数从一个增加到两个。如果您在至少两个节点的集群上，可以使用以下文件：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can get more information about Metrics Server here: [https://github.com/kubernetes-sigs/metrics-server/releases](https://github.com/kubernetes-sigs/metrics-server/releases)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在这里获取有关Metrics Server的更多信息：[https://github.com/kubernetes-sigs/metrics-server/releases](https://github.com/kubernetes-sigs/metrics-server/releases)
- en: Using Helm charts
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Helm图表
- en: To install Metrics Server using Helm charts, you can go to Artifact Hub and
    then find the Metrics Server Helm charts at [https://artifacthub.io/packages/helm/metrics-server/metrics-server](https://artifacthub.io/packages/helm/metrics-server/metrics-server)
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Helm图表安装Metrics Server，您可以前往Artifact Hub，然后在[https://artifacthub.io/packages/helm/metrics-server/metrics-server](https://artifacthub.io/packages/helm/metrics-server/metrics-server)找到Metrics
    Server Helm图表。
- en: 'Since Helm 3 is widely used nowadays, you will need to add the Metrics Server
    Helm charts repo to Helm:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 由于现在广泛使用Helm 3，您需要将Metrics Server Helm图表存储库添加到Helm中：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'It will show the following to confirm that the repo has been added successfully:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 它将显示以下内容以确认已成功添加存储库：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'After adding the repo, you can install the Helm charts through the following
    command:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 添加存储库后，您可以通过以下命令安装Helm图表：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The output of the preceding command will show you whether it’s been installed
    successfully.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出将显示安装是否成功。
- en: Using minikube add-ons
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用minikube插件
- en: 'If you’re using a minikube cluster, Metrics Server comes in the form of a built-in
    add-on that can be enabled and disabled via the `minikube addons` command. You
    can use the following to list the currently supported add-ons:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用minikube集群，则Metrics Server以内置插件的形式提供，可以通过`minikube addons`命令启用和禁用。您可以使用以下命令列出当前支持的插件：
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output is similar to what is shown in the following screenshot:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 输出与以下截图中的内容类似：
- en: '![Figure 8.2 – minikube add-ons list  ](img/Figure_8.02_B18201.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.2 – minikube 插件列表](img/Figure_8.02_B18201.jpg)'
- en: Figure 8.2 – minikube add-ons list
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.2 – minikube 插件列表
- en: 'From the preceding screenshot, we can see the `metrics-server` add-on is `disabled`.
    You canalso use the following command to get a clearer view:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的截图中，我们可以看到`metrics-server`插件已被`禁用`。你也可以使用以下命令来获得更清晰的视图：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The following output shows that currently, the minikube add-on is `disabled`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下输出显示当前 minikube 插件已`禁用`：
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You can use the `minikube addon enable` command to enable Metrics Server:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `minikube addon enable` 命令来启用 Metrics Server：
- en: '[PRE13]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The following output shows that the Metrics Server add-on was successfully
    enabled:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 以下输出显示 Metrics Server 插件已成功启用：
- en: '[PRE14]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now if you use the `kubectl get` command, you’ll see that the Pods and Services
    related to Metrics Server are up and running in the `kube-system` namespace:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你使用`kubectl get`命令，你会看到与 Metrics Server 相关的 Pods 和 Services 在 `kube-system`
    命名空间中已启动并运行：
- en: '[PRE15]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The output should look like the following:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '![Figure 8.3 – Metrics Server Pods and Services in the kube-system namespace  ](img/Figure_8.03_B18201.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.3 – kube-system 命名空间中的 Metrics Server Pods 和服务](img/Figure_8.03_B18201.jpg)'
- en: Figure 8.3 – Metrics Server Pods and Services in the kube-system namespace
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.3 – kube-system 命名空间中的 Metrics Server Pods 和服务
- en: 'Another command you can use is the following:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用的另一个命令如下：
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The output should look like the following:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '[PRE17]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As you can see from the output, the Metrics Server pod is up and running, which
    means you can now use the `kubectl top` command. Let’s now take a look at what
    it does.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 从输出中可以看到，Metrics Server Pod 已启动并运行，这意味着你现在可以使用 `kubectl top` 命令。现在让我们看看它是如何工作的。
- en: Checking out CPU/memory metrics
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看 CPU/内存指标
- en: 'You can use the `kubectl top` command to top the worker node that you want
    to get metrics details from. The following is an example where we top a worker
    node called `minikube`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `kubectl top` 命令来查看你希望获取指标详情的工作节点。以下是一个例子，其中我们查看名为 `minikube` 的工作节点：
- en: '[PRE18]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The output is as follows, where we can see the number of CPU cores and the
    amount of memory used:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下所示，我们可以看到 CPU 核心数和使用的内存量：
- en: '[PRE19]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This also applies to the use case where your Kubernetes cluster has multiple
    worker nodes. Using the `kubectl top node` `<node name>` command will help you
    see the resource usage of that specific node.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这同样适用于你的 Kubernetes 集群拥有多个工作节点的情况。使用 `kubectl top node` `<节点名称>` 命令将帮助你查看该特定节点的资源使用情况。
- en: Monitoring applications on a Kubernetes cluster
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Kubernetes 集群上监控应用程序
- en: A standard end-to-end monitoring solution covers infrastructure monitoring and
    application monitoring. In Kubernetes, Metrics Server is not only used to monitor
    the Kubernetes worker nodes but also Kubernetes Pods and containers.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 一个标准的端到端监控解决方案涵盖了基础设施监控和应用监控。在 Kubernetes 中，Metrics Server 不仅用于监控 Kubernetes
    工作节点，还用于监控 Kubernetes Pods 和容器。
- en: 'We can test out application monitoring by deploying a new pod in the default
    namespace as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在默认命名空间中部署一个新 Pod 来测试应用监控，如下所示：
- en: '[PRE20]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: After executing the preceding command, make sure that your `nginx` pod is up
    and running before going to the next section. To check out the status of the pod,
    you can use the `kubectl get pod nginx` command.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 执行上述命令后，在进入下一节之前，请确保你的 `nginx` Pod 已启动并运行。要查看 Pod 的状态，可以使用 `kubectl get pod
    nginx` 命令。
- en: Monitoring the resource usage of an application
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 监控应用程序的资源使用情况
- en: 'You can use the `kubectl top pod <podname>` command to check out the metrics
    collected for that pod, including the resource consumption of the pod:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `kubectl top pod <podname>` 命令查看该 Pod 收集的指标，包括 Pod 的资源消耗：
- en: '[PRE21]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The output should look as follows, where you can see the CPU and memory usage
    of the pod:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示，你可以看到 Pod 的 CPU 和内存使用情况：
- en: '[PRE22]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In our case, we deployed a single-container pod, but it’s important to know
    that we could also check out the CPU and memory usage for a multi-container pod
    by using the following command:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，我们部署了一个单容器 Pod，但需要注意的是，我们也可以通过以下命令查看多容器 Pod 的 CPU 和内存使用情况：
- en: '[PRE23]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Let’s use the same `kubectl top` command to show the metrics for the `nginx`
    pod and all its containers:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用相同的 `kubectl top` 命令来显示 `nginx` Pod 及其所有容器的指标：
- en: '[PRE24]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The output should look like the following as it’s a single-container pod:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示，因为这是一个单容器 Pod：
- en: '[PRE25]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: If there are multiple containers, it will list the name of the containers in
    that pod and show their CPU and memory usage respectively.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有多个容器，它将列出该 Pod 中容器的名称，并分别显示它们的 CPU 和内存使用情况。
- en: 'With that in mind, we could use `kubectl top pod`, adding the `-A` flag or
    `–all-namespaces`, to show all the metrics of all the Pods across different namespaces.
    The following command is used in this case:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 牢记这一点，我们可以使用`kubectl top pod`，并添加`-A`标志或`–all-namespaces`，以显示跨不同命名空间的所有 Pod
    的所有指标。以下命令即为此场景下的使用：
- en: '[PRE26]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Alternatively, you can also use the full flag as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你也可以使用完整的标志，如下所示：
- en: '[PRE27]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The output should look like the following, where you have all the Pods listed
    along with their CPU and memory usage respectively:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示，列出所有 Pod，并分别显示它们的 CPU 和内存使用情况：
- en: '[PRE28]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'There’s a good chance that the CKA exam will ask you what pod consumes the
    most compute resources in a list of pods, or any other task of this nature – that’s
    where the `–sort-by` flag comes into play. The `--sort-by` flag accepts either
    `cpu` or `memory` as a value, and as a result it will return the result `asc`
    or `desc`. The command looks as in the following examples:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: CKA 考试很可能会问你在多个 Pod 中，哪个 Pod 消耗的计算资源最多，或者类似的任务——这时`–sort-by`标志就派上用场了。`--sort-by`标志接受`cpu`或`memory`作为值，结果将按`asc`或`desc`排序。该命令如下所示：
- en: '[PRE29]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'It makes more sense when we have a large list of pods and you have requested
    to sort them by the memory or CPU resources consumed, from most to least. We can
    use the following command to do this:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们有大量 Pod 并且要求按内存或 CPU 使用资源从最多到最少进行排序时，这会更有意义。我们可以使用以下命令来实现：
- en: '[PRE30]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The output should look as follows, with all the pods across all the namespaces
    in your current Kubernetes cluster listed according to resource usage:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示，显示你当前 Kubernetes 集群中所有命名空间下的所有 Pod，并按资源使用情况进行排序：
- en: '[PRE31]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This command works in a similar way when using `–sort-by cpu` flag. The output
    lists the pods in the order of most CPU consumed to least.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`–sort-by cpu`标志时，该命令的工作方式类似。输出将按 CPU 使用量从高到低列出 Pod。
- en: Checking application details
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查应用程序详情
- en: 'You can use the `kubectl describe pod <podname>` command to find out status
    information regarding the allocated CPUs and memory usage and some other information,
    such as runtime versions, system information, capacity, labels, and annotations:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`kubectl describe pod <podname>`命令来查找关于分配的 CPU 和内存使用情况以及其他一些信息，如运行时版本、系统信息、容量、标签和注解：
- en: '[PRE32]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The output should look like the following:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '![Figure 8.4 – kubectl describe pod nginx ](img/Figure_8.04_B18201.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.4 – kubectl describe pod nginx](img/Figure_8.04_B18201.jpg)'
- en: Figure 8.4 – kubectl describe pod nginx
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.4 – kubectl describe pod nginx
- en: 'Note that there’s an `Events` section at the bottom of the preceding screenshot
    that shows a log of recent events related to this pod. We’ll take a closer look
    at the `Events` section:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在前面的截图底部有一个`Events`部分，显示了与此 Pod 相关的最近事件日志。我们将进一步查看`Events`部分：
- en: '![Figure 8.5 – Events of the nginx pod ](img/Figure_8.05_B18201.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.5 – nginx Pod 的事件](img/Figure_8.05_B18201.jpg)'
- en: Figure 8.5 – Events of the nginx pod
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.5 – nginx Pod 的事件
- en: 'The events here include a series of events in Kubernetes, such as these:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的事件包括 Kubernetes 中的一系列事件，例如这些：
- en: The pod gets scheduled to the worker node called `minikube`.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Pod 被调度到名为`minikube`的工作节点。
- en: The container image is pulled from the container registry.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 容器镜像从容器注册表中拉取。
- en: The kubelet agent provisions the pod containing an `nginx` container.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: kubelet 代理为包含`nginx`容器的 Pod 提供配置。
- en: Kubelet starts the pod and the `nginx` container starts to accept traffic.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Kubelet 启动了 Pod，`nginx`容器开始接受流量。
- en: Analyzing those events helps us to understand what’s going on during the pod
    provisioning process, and it could give us clues as to whether any exceptions
    happened and why, allowing us to come up with potential solutions. We’ll take
    a closer look at the events in the next section of this chapter.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 分析这些事件有助于我们理解在 Pod 配置过程中发生了什么，并且它能给我们提供线索，帮助我们了解是否发生了任何异常，以及异常发生的原因，从而为我们提供潜在的解决方案。在本章的下一节，我们将更详细地查看这些事件。
- en: 'If a pod is in a namespace other than the default namespace, you can specify
    the `-n` flag in the `kubectl describe` command to add the namespace. The following
    is an example using this command to describe a pod named `coredns-64897985d-brqfl`
    in the `kube-system` namespace:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 pod 位于默认命名空间之外，你可以在`kubectl describe`命令中指定`-n`标志来添加命名空间。以下是使用该命令描述位于`kube-system`命名空间中的`coredns-64897985d-brqfl`
    pod的示例：
- en: '[PRE33]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The output should look like the following:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该如下所示：
- en: '![Figure 8.6 – kubectl describe coredns pod in the kube-system namespace  ](img/Figure_8.06_B18201.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.6 – kubectl 描述 kube-system 命名空间中的 coredns pod](img/Figure_8.06_B18201.jpg)'
- en: Figure 8.6 – kubectl describe coredns pod in the kube-system namespace
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.6 – kubectl 描述 kube-system 命名空间中的 coredns pod
- en: 'Even though the preceding screenshots contain similar chunks of information,
    the details differ from pod to pod. You could add `> mypod.yaml` to the end of
    the command to export the pod information for further analysis:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管前面的截图包含了类似的信息块，但每个 pod 的细节是不同的。你可以在命令末尾添加`> mypod.yaml`来导出 pod 信息以供进一步分析：
- en: '[PRE34]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: You will get a YAML file called `mypod.yaml` containing critical pod information.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 你将得到一个名为`mypod.yaml`的 YAML 文件，包含关键的 pod 信息。
- en: Monitoring cluster events
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 监控集群事件
- en: 'We can get Kubernetes events by using the following command:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令来获取 Kubernetes 事件：
- en: '[PRE35]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'We can get events logged in the current cluster, which includes events logged
    previously in the `Events` section, when we use the `kubectl describe pod` command.
    The following is a sample output after running the `kubectl get events` command:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以获取当前集群中记录的事件，包括在`Events`部分中之前记录的事件，当我们使用`kubectl describe pod`命令时。以下是运行`kubectl
    get events`命令后的示例输出：
- en: '![Figure 8.7 – kubectl get events ](img/Figure_8.07_B18201.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.7 – kubectl 获取事件](img/Figure_8.07_B18201.jpg)'
- en: Figure 8.7 – kubectl get events
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.7 – kubectl 获取事件
- en: 'You can use the following command to list the events sorted by timestamp:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下命令按时间戳列出事件：
- en: '[PRE36]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'If you want to collect the events during a deployment, you can run the following
    command on the side:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想收集部署过程中的事件，可以在一旁运行以下命令：
- en: '[PRE37]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The commands will give you a good idea of what’s going on during the deployment
    process if you’re not using Kubernetes Dashboard or any third-party monitoring
    frameworks such as Prometheus with Grafana Dashboard. Knowing about what happens
    at the application level by monitoring sometimes comes in handy, especially when
    it comes to troubleshooting. Often we get a better understanding by analyzing
    logs and tracking exceptions. Let’s take a look at how to manage logs at the cluster
    node and pod levels.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有使用 Kubernetes Dashboard 或者像 Prometheus 与 Grafana Dashboard 这样的第三方监控框架，以上命令将帮助你更好地了解部署过程中的情况。通过监控应用层发生的事情，有时对于故障排除非常有帮助。通常我们通过分析日志和追踪异常来更好地理解问题。接下来我们来看看如何在集群节点和
    pod 层级管理日志。
- en: Managing logs at the cluster node and Pod levels
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理集群节点和 Pod 层级的日志
- en: Logs are very handy when it comes to troubleshooting issues. The information
    collected in a log is usually helpful in understanding what has happened, figuring
    out why certain issues happened, and finding remediations to prevent them from
    happening again later on.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在故障排除问题时，日志非常有用。日志中收集的信息通常有助于理解发生了什么，弄清楚为什么会发生某些问题，并找到解决办法防止它们在未来再次发生。
- en: Cluster-level logging
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集群级别日志
- en: In Kubernetes, the notion of cluster-level logging is widely recognized. This
    means logs are meant to be stored in a separate backend, so the lifecycles of
    those logs are independent of what’s been logged down to the worker node, pod,
    or even container level.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 中，集群级别日志的概念已广泛认可。这意味着日志应该存储在一个独立的后端中，因此这些日志的生命周期独立于记录到工作节点、pod，甚至容器层级的内容。
- en: Kubernetes itself does not provide a comprehensive native logging framework,
    but it can be integrated with lots of third-party open source logging solutions
    in the community, such as Grafana Loki or the EFK stack, which includes Elasticsearch,
    Fluentd, and Kibana for log searching, querying, and tracing.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 本身并不提供一个全面的原生日志框架，但它可以与社区中许多第三方开源日志解决方案集成，如 Grafana Loki 或 EFK 堆栈，该堆栈包括
    Elasticsearch、Fluentd 和 Kibana，用于日志搜索、查询和追踪。
- en: 'Logging in Kubernetes involves a set of patterns that are implemented by the
    community with different open source solutions. There are the following three
    patterns:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 中的日志记录涉及一组由社区通过不同开源解决方案实现的模式。主要有以下三种模式：
- en: '**Using a node-level logging agent that runs on every node**: The agent is
    often in a DaemonSet so it will be evenly distributed on each node, and this agent
    pushes the logs to a backend. In this case, there are no code changes for the
    application.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用在每个节点上运行的节点级日志代理**：该代理通常在 DaemonSet 中，因此它会均匀地分布在每个节点上，且该代理会将日志推送到后端。在这种情况下，应用程序无需进行代码更改。'
- en: '**Using a dedicated sidecar container to log information from the application
    in the same Pod**: This case can be in conjunction with a logging agent running
    on the node or streaming the logs out, and it is usually recommended to write
    log entries with the same formats to the same log stream for convenient processing.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用专用的侧车容器从同一 Pod 中的应用程序记录信息**：这种情况可以与运行在节点上的日志代理或将日志流式传输出去一起使用，通常建议将日志条目以相同格式写入相同的日志流，方便处理。'
- en: '**Directly streaming the logs from the application to an external backend**:
    This can work with external object storage, as such storage supports lifecycle
    policies, which allows the setup of data retention policies and the archiving
    of old logs based on the policy. Most object storage also works with a search
    framework, where logs are indexed and so are easy to search and query.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**直接将日志从应用程序流式传输到外部后端**：这可以与外部对象存储一起使用，因为这种存储支持生命周期策略，可以根据策略设置数据保留政策并归档旧日志。大多数对象存储还支持搜索框架，日志会被索引，因此容易进行搜索和查询。'
- en: 'To learn more about the Kubernetes logging architecture, check this article
    out: [https://kubernetes.io/docs/concepts/cluster-administration/logging/](https://kubernetes.io/docs/concepts/cluster-administration/logging/)'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 若要了解更多关于 Kubernetes 日志架构的信息，可以查看这篇文章：[https://kubernetes.io/docs/concepts/cluster-administration/logging/](https://kubernetes.io/docs/concepts/cluster-administration/logging/)
- en: Checking out the node details
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看节点详情
- en: 'With native Kubernetes, you can use the `kubectl describe node <nodename>`
    command to find out the status information regarding the allocated CPUs and memory
    usage as well as some other information, such as runtime versions, system information,
    capacity, labels, and annotations. We can use the following command to describe
    a worker node named `minikube`:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 使用原生 Kubernetes，您可以使用 `kubectl describe node <nodename>` 命令来查找有关分配的 CPU 和内存使用情况以及其他信息，例如运行时版本、系统信息、容量、标签和注释。我们可以使用以下命令来描述名为
    `minikube` 的工作节点：
- en: '[PRE38]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The output is similar to the following:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 输出类似于以下内容：
- en: '![Figure 8.8 – kubectl describe node minikube ](img/Figure_8.08_B18201.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.8 – kubectl 描述节点 minikube](img/Figure_8.08_B18201.jpg)'
- en: Figure 8.8 – kubectl describe node minikube
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.8 – kubectl 描述节点 minikube
- en: Gettting to know the node specification will give you an understanding of how
    your node was previously configured. Let’s now take a look at how to get some
    quick but handy information using the `kubectl describe node` command.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 了解节点规格将帮助您理解节点的先前配置情况。现在，让我们来看一下如何使用 `kubectl describe node` 命令获取一些快捷而有用的信息。
- en: Checking the node status
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查节点状态
- en: 'With the `kubectl describe` command, we get some general information about
    a node. Notice that it also contains an `events` section that usually logs node
    events. To get more status information from a node, we usually use the following
    command, taking a node named `minikube` as an example:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `kubectl describe` 命令，我们可以获得关于节点的一些常规信息。注意，它还包含一个 `events` 部分，通常记录节点事件。为了获取更多节点状态信息，通常使用以下命令，以名为
    `minikube` 的节点为例：
- en: '[PRE39]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The output is similar to the following:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 输出类似于以下内容：
- en: '![Figure 8.9 – kubectl get node output ](img/Figure_8.09_B18201.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.9 – kubectl 获取节点输出](img/Figure_8.09_B18201.jpg)'
- en: Figure 8.9 – kubectl get node output
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.9 – kubectl 获取节点输出
- en: From the preceding screenshot, if you compare the `kubectl get node` command
    with the one with the `-o wide` flag, you’ll see that it gives extra information
    about the image and kernel version as well as the container runtime, which is
    quite handy when we need to get information quickly.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的截图中，如果将 `kubectl get node` 命令与带有 `-o wide` 标志的命令进行比较，您会发现它提供了有关镜像、内核版本以及容器运行时的额外信息，这在我们需要快速获取信息时非常方便。
- en: Managing container stdout and stderr logs
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理容器的标准输出（stdout）和标准错误（stderr）日志
- en: In the Unix and Linux OSs, there are three I/O streams, called `STDIN`, `STDOUT`,
    and `STDERR`. Here, we’ll talk about `STDOUT` and `STERR` in Linux containers,
    which are typically what the `kubectl logs` command shows to us.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Unix 和 Linux 操作系统中，有三种 I/O 流，分别为 `STDIN`、`STDOUT` 和 `STDERR`。在这里，我们将讨论 Linux
    容器中的 `STDOUT` 和 `STDERR`，这通常是 `kubectl logs` 命令向我们展示的内容。
- en: '`STDOUT` is usually a command’s normal output, and `STDERR` is typically used
    to output error messages. Kubernetes uses the `kubectl logs <podname>` command
    to log `STDOUT` and `STDERR`. It looks like the following when we use the command
    to log the `nginx` pod that we deployed in this chapter:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`STDOUT` 通常是命令的正常输出，而 `STDERR` 则通常用于输出错误消息。Kubernetes 使用 `kubectl logs <podname>`
    命令记录 `STDOUT` 和 `STDERR`。当我们使用该命令记录本章部署的 `nginx` Pod 时，输出如下所示：'
- en: '[PRE40]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The output should look like the following:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '![Figure 8.10 – kubectl logs nginx pod ](img/Figure_8.10_B18201.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.10 – kubectl logs nginx pod ](img/Figure_8.10_B18201.jpg)'
- en: Figure 8.10 – kubectl logs nginx pod
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.10 – kubectl logs nginx pod
- en: 'Now, we’ll use a container to write text to the standard output stream with
    a frequency of once per second. We can do this by deploying a new pod. The following
    is an example of a YAML manifest for this pod:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用容器每秒写一次文本到标准输出流的频率。我们可以通过部署一个新的 Pod 来实现这一点。以下是此 Pod 的 YAML 配置文件示例：
- en: '[PRE41]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'You can use the `kubectl logs` command to retrieve the logs from the `logger`
    Pod as follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `kubectl logs` 命令从 `logger` Pod 中检索日志，方法如下：
- en: '[PRE42]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The log would look as follows:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 日志如下所示：
- en: '[PRE43]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'We can get into the pod to retrieve the specific container log by using the
    `-c` flag. Let’s check out the log for a container called `packt` in the `logger`
    pod using the following command:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `-c` 标志进入 Pod，检索特定容器的日志。让我们使用以下命令查看 `logger` Pod 中名为 `packt` 的容器日志：
- en: '[PRE44]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The following output is the logs retrieved from the `packt` container:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 以下输出是从 `packt` 容器检索到的日志：
- en: '![Figure 8.11 – Logs from the packt container ](img/Figure_8.11_B18201.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.11 – 来自 packt 容器的日志 ](img/Figure_8.11_B18201.jpg)'
- en: Figure 8.11 – Logs from the packt container
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.11 – 来自 packt 容器的日志
- en: 'If you want to stream the logs, you can use the `kubectl logs -f` command,
    as follows:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要实时查看日志，可以使用 `kubectl logs -f` 命令，如下所示：
- en: '[PRE45]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'You should be able to see an output like the following:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该能够看到类似以下的输出：
- en: '![](img/Figure_8.12_B18201.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_8.12_B18201.jpg)'
- en: Figure 8.12 – kubectl logs for the nginx pod
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.12 – kubectl logs for the nginx pod
- en: 'Use the following command if you want to return logs newer than a certain duration,
    such as within 1 hour:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想返回某段时间内（例如1小时内）更新的日志，请使用以下命令：
- en: '[PRE46]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: You can modify the value after the `–since` flag as per your requirements.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以根据需要修改 `–since` 标志后面的值。
- en: Summary
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter covered monitoring and logging for Kubernetes on three levels –
    cluster, node, and pod. This chapter laid the groundwork for the next two chapters,
    where we will focus on troubleshooting cluster components and application failures,
    as well as exploring some other challenges around Kubernetes security restrictions
    and container networking by providing more specific troubleshooting use cases
    and end-to-end troubleshooting scenarios. Stay tuned!
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了 Kubernetes 的监控和日志记录，涵盖了集群、节点和 Pod 三个级别。这章为接下来的两章奠定了基础，我们将专注于故障排除集群组件和应用程序故障，以及探索
    Kubernetes 安全限制和容器网络的挑战，提供更具体的故障排除用例和端到端的故障排除场景。请继续关注！
- en: Mock CKA scenario-based practice test
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模拟 CKA 场景练习测试
- en: 'You have two virtual machines, `master-0` and `worker-0`: please complete the
    following mock scenarios.'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 您有两台虚拟机，分别为 `master-0` 和 `worker-0`：请完成以下模拟场景。
- en: Scenario 1
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 场景 1
- en: List all the available Pods in your current cluster, identify the ones with
    the highest CPU consumption, and write their names to a `max-cpu.txt` file.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 列出当前集群中所有可用的 Pod，标识 CPU 消耗最高的 Pod，并将它们的名称写入 `max-cpu.txt` 文件。
- en: You can find all the scenario resolutions in [*Appendix*](B18201_Appendix_A.xhtml#_idTextAnchor386)
    *- Mock CKA scenario-based practice test resolutions* of this book.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在本书的 [*附录*](B18201_Appendix_A.xhtml#_idTextAnchor386) *- 模拟 CKA 场景练习测试的解答*
    中找到所有场景的解决方案。
- en: FAQs
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见问题
- en: '*Where can I find out about the latest updates on Kubernetes Metrics Server?*'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*我在哪里可以找到有关 Kubernetes Metrics Server 最新更新的信息？*'
- en: Kubernetes Metrics Server has a GitHub repository at [https://github.com/kubernetes-sigs/metrics-server](https://github.com/kubernetes-sigs/metrics-server).
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes Metrics Server 在 GitHub 上有一个仓库，网址为 [https://github.com/kubernetes-sigs/metrics-server](https://github.com/kubernetes-sigs/metrics-server)。
- en: '*Where can I find the latest information on Kubernetes cluster logging architecture?*'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*我在哪里可以找到关于 Kubernetes 集群日志架构的最新信息？*'
- en: Go to the official Kubernetes documentation at [https://kubernetes.io/docs/concepts/cluster-administration/logging/](https://kubernetes.io/docs/concepts/cluster-administration/logging/).
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 访问官方 Kubernetes 文档：[https://kubernetes.io/docs/concepts/cluster-administration/logging/](https://kubernetes.io/docs/concepts/cluster-administration/logging/)。
- en: '*Where can I find the metrics for Kubernetes system components?*'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*我在哪里可以找到 Kubernetes 系统组件的指标？*'
- en: 'You can bookmark this page to get more information: [https://kubernetes.io/docs/concepts/cluster-administration/system-metrics/](https://kubernetes.io/docs/concepts/cluster-administration/system-metrics/).'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以收藏此页面以获取更多信息：[https://kubernetes.io/docs/concepts/cluster-administration/system-metrics/](https://kubernetes.io/docs/concepts/cluster-administration/system-metrics/)。

- en: '14'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '14'
- en: Supporting DevOps Processes with Observability
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用可观察性支持 DevOps 流程
- en: This chapter will discuss the use of Grafana in two different aspects of the
    technology industry – **software delivery** and **platform operations**.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将讨论 Grafana 在技术行业的两个不同方面的应用——**软件交付**和**平台操作**。
- en: We will briefly introduce you to the **DevOps life cycle** as valuable foundational
    knowledge. Using this framework, we will guide you through the value of Grafana
    in each phase to enrich the software development process in your organization.
    We encourage you to spend time understanding where bottlenecks are in this process
    and focus resources on the most appropriate phase for your team or organization.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将简要介绍**DevOps 生命周期**，作为宝贵的基础知识。使用这一框架，我们将引导你了解 Grafana 在每个阶段的价值，从而丰富你组织中的软件开发过程。我们鼓励你花时间理解在这个过程中瓶颈所在，并将资源集中在最适合你团队或组织的阶段。
- en: Platform operations are typified by using third-party applications. This removes
    about half of the DevOps life cycle, as those stages are conducted by a third
    party. You will be introduced to the considerations you should make for using
    Grafana during the deployment and operation of several types of platforms. We
    will look at collecting data from data collection tools in an observability platform
    and consider best practices around disaster planning for the failure of this business-critical
    system. We will look at the particular needs of the operators and users of platforms
    that provide **continuous integration** (**CI**) or **continuous delivery/deployment**
    (**CD**) capabilities to an organization, as monitoring these platforms can be
    challenging. We will discuss resources available to monitor databases, in-memory
    data stores, message buses, and web servers, covering how to install them efficiently
    and how these common tools have publicly available dashboards in Grafana to use.
    Finally, we will have a quick look at how this same pattern of monitoring platforms
    is applicable for some security tools.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 平台操作的典型特点是使用第三方应用程序。这去除了约一半的 DevOps 生命周期，因为这些阶段是由第三方完成的。我们将介绍在部署和操作几种平台时，使用
    Grafana 时应考虑的事项。我们将探讨如何从可观察性平台中的数据采集工具收集数据，并考虑在这一业务关键系统发生故障时的灾难规划最佳实践。我们还将关注那些为组织提供**持续集成**（**CI**）或**持续交付/部署**（**CD**）能力的平台的运营者和用户的特殊需求，因为监控这些平台可能具有挑战性。我们将讨论用于监控数据库、内存数据存储、消息总线和
    Web 服务器的资源，涵盖如何高效安装这些工具，以及这些常见工具如何在 Grafana 中提供公开可用的仪表盘供使用。最后，我们将简要介绍这种监控平台模式如何适用于某些安全工具。
- en: This chapter will handle technical concepts but there are no requirements to
    have experience with individual tools, and the chapter should be accessible to
    anyone, regardless of background.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涉及技术概念，但并不要求具备单一工具的使用经验，本章应当对任何人都易于理解，无论其背景如何。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主要主题：
- en: Introducing the DevOps life cycle
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍 DevOps 生命周期
- en: Using Grafana for fast feedback during the development life cycle
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在开发生命周期中使用 Grafana 进行快速反馈
- en: Using Grafana to monitor infrastructure and platforms
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Grafana 监控基础设施和平台
- en: Introducing the DevOps life cycle
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 DevOps 生命周期
- en: Before we explain what the DevOps life cycle is, let’s consider the history
    of Agile, DevOps, DevSecOps, and platform engineering a little.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们解释什么是 DevOps 生命周期之前，先来了解一下敏捷、DevOps、DevSecOps 和平台工程的历史。
- en: 'Iterative development practices were used as early as the late 1950s, but in
    the 1990s, several development methods were introduced as a reaction to development
    practices that were seen as heavyweight, micromanaged, highly regulated, and with
    a high risk of project failure. These new methods included **rapid application
    development** (**RAD**), **Scrum**, **extreme programming**, and **feature-driven
    design** (**FDD**). These all originated before the Agile Manifesto, but they
    are now known as agile practices. According to the Agile Manifesto, published
    in 2001, we prefer the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代开发实践早在1950年代末期就已使用，但在1990年代，几种开发方法应运而生，作为对那些被视为繁重、微观管理、高度规范化且具有较高项目失败风险的开发实践的反应。这些新方法包括**快速应用程序开发**（**RAD**）、**Scrum**、**极限编程**和**特征驱动设计**（**FDD**）。这些方法都出现在敏捷宣言之前，但现在被视为敏捷实践。根据2001年发布的《敏捷宣言》，我们更倾向于以下做法：
- en: Individuals and interactions over processes and tools
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 个人与互动优于流程与工具
- en: Working software over comprehensive documentation
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作软件重于全面文档
- en: Customer collaboration over contract negotiation
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户协作重于合同谈判
- en: Responding to change over following a plan
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应变化重于遵循计划
- en: This indicates that, while there is value in the items on the right, we value
    the items on the left more.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，虽然右侧的内容有其价值，但我们更看重左侧的内容。
- en: Agile practices evolved from development practices, and they are focused on
    development teams, although there are a lot of crossovers with operational practices.
    These manifesto notions drove a lot of interest in practices such as test-driven
    development, CI, CD, and many others.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷实践源于开发实践，虽然它们主要聚焦于开发团队，但与运营实践也有很多交集。这些宣言理念激发了对测试驱动开发、持续集成（CI）、持续交付（CD）等实践的浓厚兴趣。
- en: In the early 2000s, concerns around the separation of development practices
    and operational practices were highlighted (although these concerns were also
    raised through the 1980s and 1990s). These concerns coalesced in 2009 with the
    first *DevOps Days* conference. DevOps does not articulate a central philosophy
    such as Agile, but it suggests practices and measures that are intended to speed
    the delivery of working software to customers. A lot of these practices revolve
    around having developers, testers, and operators collaborate more closely, often
    by bringing them together in the same team. Similarly, development practices such
    as using version control systems (for example, Git) are adopted so operational
    concerns such as system configuration can become part of the shared understanding
    of a whole software system.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在2000年代初，开发实践与运营实践分离的问题受到关注（尽管这些问题在1980年代和1990年代也曾提出）。这些关注点在2009年通过第一次*DevOps
    Days*大会得到了汇聚。DevOps并没有像敏捷一样提出一个中央哲学，但它提出了旨在加速工作软件交付给客户的实践和措施。许多这些实践围绕着让开发人员、测试人员和运营人员更紧密地合作，通常通过将他们聚集在同一个团队中来实现。类似地，采用开发实践，比如使用版本控制系统（例如Git），使得系统配置等运营问题能够成为整个软件系统共同理解的一部分。
- en: 'DevOps has several branches, extensions, and concepts. Here are some of them
    for those who are interested in reading further: **ArchOps**, **site reliability
    engineering** (**SRE**), **DevSecOps**, **DataOps**, **12-factor apps** or **15-factor
    apps**, **infrastructure as code** (**IaC**), **configuration as code** (**CaC**),
    and **GitOps**.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps有多个分支、扩展和概念。对于那些有兴趣进一步阅读的人，以下是其中的一些：**ArchOps**、**站点可靠性工程**（**SRE**）、**DevSecOps**、**DataOps**、**12因子应用**或**15因子应用**、**基础设施即代码**（**IaC**）、**配置即代码**（**CaC**）以及**GitOps**。
- en: 'A quote from Amazon CTO Werner Vogels back in 2006 became a bit of a rallying
    cry for the DevOps movement: “*You build it, you run it*.” This has a lot of merit.
    Having the team who designed and wrote a product also be responsible for its operation
    should mean that incidents are resolved quicker and customer feedback can be heard
    and responded to. Teams can be more agile! When managed well and in the right
    organization, this can be a very effective way to operate. However, as the analysis
    by Matthew Skelton and Manuel Pais in *Team Topologies* ([https://web.devopstopologies.com/index.html#anti-types](https://web.devopstopologies.com/index.html#anti-types))
    shows, many anti-patterns can appear and lead to dysfunction in an organization.
    This approach can also lead to a significant cognitive load for development teams,
    which makes organizations less able to respond to change.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊首席技术官Werner Vogels在2006年的一句话成为DevOps运动的口号：“*你构建它，你就运行它*。”这句话非常有道理。让设计和开发产品的团队也负责其运维，意味着事件能够更快得到解决，客户反馈能够被及时听取并回应。团队能够更加敏捷！当管理得当并且组织结构合适时，这是一种非常有效的运作方式。然而，正如Matthew
    Skelton和Manuel Pais在《团队拓扑学》一书中的分析所示（[https://web.devopstopologies.com/index.html#anti-types](https://web.devopstopologies.com/index.html#anti-types)），许多反模式可能会出现，并导致组织内的功能失调。这种方法也可能会给开发团队带来巨大的认知负担，使得组织更难应对变化。
- en: 'You might ask why we include this history when we are explaining what the DevOps
    life cycle is. The reason is to caution you that this life cycle is a tool and,
    in most organizations, a collection of processes; while they do have value, they
    should not be valued more than individuals and interactions. The way that teams
    tasked with managing a customer-facing software system will interact with an observability
    platform will differ significantly from a team tasked with managing the platform
    in support of the organization’s goals. With this caution given, let’s look at
    the DevOps life cycle as it gives us a good framework to discuss the many aspects
    of using an observability platform through the life cycle:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会问，为什么我们在解释 DevOps 生命周期是什么时，还要包括这段历史。原因是要提醒你，DevOps 生命周期是一个工具，在大多数组织中，它是多个流程的集合；虽然它们有价值，但不应该比个体和互动更有价值。负责管理面向客户的软件系统的团队，与负责管理平台以支持组织目标的团队，在与可观测性平台的互动方式上会有显著差异。考虑到这一点，让我们看一下
    DevOps 生命周期，它为我们提供了一个很好的框架，通过这个框架，我们可以讨论在生命周期中使用可观测性平台的许多方面：
- en: '![Figure 14.1 – The DevOps life cycle](img/B18277_14_1.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图14.1 – DevOps 生命周期](img/B18277_14_1.jpg)'
- en: Figure 14.1 – The DevOps life cycle
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.1 – DevOps 生命周期
- en: Important note
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: There’s isn’t a clear definition of DevOps or DevSecOps. The DevOps life cyle
    itself covers development and operations while the security aspect wraps around
    all of that (and more), as shown in *Figure 14**.1*.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 或 DevSecOps 没有明确的定义。DevOps 生命周期本身涵盖了开发和运维，而安全性则包裹在所有这些过程之中（以及更多），如 *图14.1*
    所示。
- en: 'Let’s walk through each phase of this life cycle:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐个了解这个生命周期的每个阶段：
- en: '**Code**: This is where new code is written in line with the specification
    given during the planning phase'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码**：这是根据规划阶段提供的规范编写新代码的地方。'
- en: '**Build**: This phase is where new code is built'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建**：这一阶段是新代码的构建阶段。'
- en: '**Test**: New code is tested in various ways during this phase'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试**：在这一阶段，新代码会以各种方式进行测试。'
- en: '**Release**: The code is verified as ready to be deployed to production in
    this phase; any final checks or assurances will be performed here'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发布**：在此阶段，代码会被验证为可以部署到生产环境；任何最终的检查或确认都会在这里进行。'
- en: '**Deploy**: The code is deployed to a production environment'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署**：代码被部署到生产环境。'
- en: '**Operate**: This phase is a continuous phase; the latest deployed release
    is run in a production environment'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行**：这一阶段是一个持续的阶段；最新发布的版本会在生产环境中运行。'
- en: '**Monitor**: Any data collected from the release that is currently operating
    in production is gathered, as well as any feedback or user research, and is collated
    together to be used in the next planning phase'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控**：从当前在生产环境中运行的发布版本中收集的所有数据，以及任何反馈或用户研究，都被收集并汇总，以便在下一阶段的规划中使用。'
- en: '**Plan**: During this phase, the team plans what future iterations of the product
    will contain'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**规划**：在此阶段，团队规划产品未来的迭代将包含哪些内容。'
- en: '**Security**: This is a continuous concern for the team in a DevSecOps approach
    and is the responsibility of all members of the team'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全**：这是 DevSecOps 方法中团队的持续关注点，所有团队成员都要对其负责。'
- en: Now that we have seen the DevOps life cycle, let’s consider how we can use Grafana
    tools during each phase of this cycle.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了 DevOps 生命周期，让我们考虑如何在这个生命周期的每个阶段使用 Grafana 工具。
- en: Using Grafana for fast feedback during the development life cycle
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在开发生命周期中使用 Grafana 快速反馈
- en: In this section, we will consider how to use Grafana tools through each stage
    of the DevOps life cycle. Developing software can be risky and expensive, and
    observability platforms can also be expensive. Therefore, using the data from
    an observability platform to reduce the risks and expense of developing software
    is a great investment. We’ll start with the *code* phase of the life cycle.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将考虑如何在 DevOps 生命周期的每个阶段使用 Grafana 工具。软件开发可能是有风险和昂贵的，可观测性平台也可能很昂贵。因此，利用可观测性平台的数据来降低软件开发的风险和成本，是一项很好的投资。我们将从生命周期的
    *代码* 阶段开始。
- en: Code
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码
- en: 'To use Grafana in the DevOps life cycle, the system must produce useful data
    that can be used to understand the state of the system. To that end, the first
    act during the *code* phase of the life cycle is to *instrument* the system. Depending
    on the type of system we are working on, the method of producing data may look
    different:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 DevOps 生命周期中使用 Grafana，系统必须产生有用的数据，这些数据可以帮助理解系统的状态。为此，生命周期中的第一个动作是在 *代码*
    阶段对系统进行 *监控*。根据我们所处理的系统类型，生成数据的方法可能会有所不同：
- en: A **software application** would be instrumented by adding libraries or SDKs
    that produce data in a format agreed with the team(s) who collects this data.
    In some situations, this can even be achieved by the injection of instrumentation
    into the application, which can happen during the *deploy* stage of the life cycle.
    Organizations need to be clear on where this responsibility lies.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**软件应用程序**通过添加库或SDK来进行仪器化，这些库或SDK会产生与收集数据的团队商定格式的数据。在某些情况下，这甚至可以通过在应用程序中注入仪器化代码来实现，这可能发生在生命周期的*部署*阶段。组织需要明确这种责任归属。'
- en: A **cloud infrastructure** or **cloud platform** component would be instrumented
    by collecting data from the vendor.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**云基础设施**或**云平台**组件将通过收集来自供应商的数据来进行仪器化。'
- en: A **local infrastructure** or **local platform** component would be instrumented
    by collecting data in a format supported by the vendor of the component.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**本地基础设施**或**本地平台**组件将通过收集由组件供应商支持的格式的数据来进行仪器化。'
- en: For a lot of systems, this may be all that is needed. However, there are times
    when an organization needs custom data from a system. Adding such instrumentation
    falls squarely in the *code* phase of the life cycle. However, when considering
    such activities, it is important to also ensure that the *plan* and *test* phases
    are considered. This can be achieved through activities such as agreeing on a
    data format and field definitions and implementing the code in a way that it can
    be tested in future iterations of the product (for example, domain-orientated
    observability).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 对于许多系统来说，这可能是所需的一切。然而，也有时组织需要来自系统的自定义数据。添加这样的仪器化操作恰恰属于生命周期中的*编码*阶段。然而，在考虑此类活动时，重要的是要确保同时考虑*规划*和*测试*阶段。这可以通过一些活动来实现，例如达成数据格式和字段定义的一致，并以一种可以在产品未来版本中进行测试的方式实现代码（例如，面向领域的可观察性）。
- en: The final area in which Grafana can help during the coding process is by being
    run directly against code as it is developed. Most, if not all developers, will
    run their code locally before it is committed to a version control repository.
    As Grafana is open source, it is very easy to implement a local development environment
    that produces and collects observability telemetry; we provided an example of
    this kind of environment when we explored live data in *Chapters 3*, *4*, *5,*
    and *6*. This wealth of information can feed directly back into the coding process
    as it happens.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Grafana在编码过程中提供的最终帮助是通过直接在开发中的代码上运行。大多数开发者（如果不是所有开发者）会在提交到版本控制仓库之前先在本地运行代码。由于Grafana是开源的，非常容易实现一个本地开发环境，该环境可以生成和收集可观察性遥测数据；我们在*第3章*、*第4章*、*第5章*和*第6章*中探讨实时数据时提供了这种环境的示例。这些丰富的信息可以直接反馈到正在进行的编码过程中。
- en: The next phase of the life cycle is the *build* phase. We will skip over this
    as we deal with monitoring builds in a lot more detail when we talk about monitoring
    CI/CD platforms in the next section of this chapter. Let’s talk about the *test*
    phase next.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 生命周期的下一个阶段是*构建*阶段。我们将在接下来的章节中详细讨论如何监控构建，因此这里跳过这一部分。接下来让我们讨论*测试*阶段。
- en: Test
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试
- en: The *test* phase can cover a lot of different test types. While tests are typically
    managed by the CI/CD platform, such as the use of a testing framework or static
    analysis tools, the most common form of feedback in Grafana is to monitor the
    CI/CD platform itself. An additional approach for organizations or teams who want
    to track more information is to output time series data from the CI/CD platform
    into a **time series database** (**TSDB**). These kinds of custom approaches can
    often become like a complex Rube Goldberg machine, so we would caution you to
    be very mindful of what the value is to the organization, and we recommend that
    you research the market in case a more suitable product is available.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*测试*阶段可以涵盖许多不同类型的测试。虽然测试通常由CI/CD平台管理，例如使用测试框架或静态分析工具，但Grafana中最常见的反馈形式是监控CI/CD平台本身。对于那些希望追踪更多信息的组织或团队，另一种方法是将CI/CD平台的时间序列数据输出到**时间序列数据库**（**TSDB**）中。这些自定义方法往往像复杂的鲁布·戈德堡机器，因此我们提醒您要非常谨慎地评估它对组织的价值，并建议您研究市场，以便了解是否有更合适的产品。'
- en: As the *test* phase moves into end-to-end tests, tools such as k6 really come
    into play (we discussed this in [*Chapter 13*](B18277_13.xhtml#_idTextAnchor239)).
    Writing great repeatable tests for tools in this space can also offer a very valuable
    ability to run them during the *deploy* phase of the life cycle to confirm that
    the new code has been successfully deployed.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 随着*测试*阶段进入端到端测试，像k6这样的工具开始发挥重要作用（我们在[*第13章*](B18277_13.xhtml#_idTextAnchor239)中讨论了这一点）。为这一领域的工具编写出色的可重复测试，亦可为在生命周期的*部署*阶段运行这些测试提供极具价值的能力，以确认新代码已成功部署。
- en: The *release* phase encompasses everything between completing testing and releasing
    code to customers. This often covers activities such as gaining approvals for
    the deployment from stakeholders or assurance teams. Let’s have a look at how
    Grafana can help.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '*发布*阶段涵盖了从完成测试到将代码发布给客户之间的所有内容。通常，这个阶段包括如获得来自利益相关者或保障团队的部署批准等活动。让我们看看Grafana如何提供帮助。'
- en: Release
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发布
- en: 'Let’s start discussing using Grafana for the *release* phase with a brief warning:
    many tools on the market may offer a better fit for organizations and teams, so
    we recommend that organizations do some research if they are having problems with
    their release processes.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论使用Grafana进行*发布*阶段之前，我们先做一个简短的警告：市场上的许多工具可能更适合某些组织和团队，因此我们建议组织在遇到发布流程问题时，进行一些研究。
- en: Perhaps the biggest feature of Grafana that enables a smooth release step is
    the ability to show whether a new iteration of a product complies with the **service-level
    objectives** (**SLOs**) and **service-level agreements** (**SLAs**) for the product.
    Showing these metrics from a new iteration, especially when the product has been
    put under load by a tool such as k6, is a very powerful way to say that the new
    iteration behaves as expected.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Grafana的最大特点之一，是能够显示产品的新迭代是否符合**服务水平目标**（**SLOs**）和**服务水平协议**（**SLAs**）。展示这些来自新迭代的指标，尤其是当产品通过如k6之类的工具进行负载测试时，是证明新迭代按预期运行的非常有效方式。
- en: The other feature that may be of interest to some teams is the ability to automatically
    build dashboards that contain HTML widgets. This can be used to automatically
    assemble a release dashboard with links to various artifacts such as test reports,
    tickets for included features, and similar.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个可能对某些团队有用的特性，是自动构建包含HTML小部件的仪表盘。这可以用于自动生成一个发布仪表盘，并链接到各种工件，例如测试报告、包含功能的工单等。
- en: The operational phases of the life cycle are the most associated with Grafana.
    Let’s start looking at these with the *deploy* phase, in which code is deployed
    into a production environment ready for customers to access.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 生命周期的操作阶段与Grafana最为相关。我们首先来看一下*部署*阶段，在此阶段，代码被部署到生产环境中，供客户访问。
- en: Deploy
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署
- en: 'The *deploy* phase will see a lot of changes occur, and the details of using
    Grafana will differ depending on how the system is deployed:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '*部署*阶段会发生许多变化，具体使用Grafana的方式将取决于系统的部署方式：'
- en: Where an application is deployed to a Kubernetes cluster, Pods will be scheduled
    for termination, while new Pods using the newer version will be started. We might
    see Pods responsible for database updates scheduled, and various other aspects.
    When used as the repository for all telemetry from a Kubernetes cluster, Grafana
    can be used to visualize the deployment process in a way that suits the deployment
    team, from prebuilt dashboards to a custom dashboard specifically designed for
    a specific application deployment.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当应用程序部署到Kubernetes集群时，Pods将被安排终止，同时将启动使用新版本的Pods。我们可能会看到负责数据库更新的Pods被安排终止，以及其他各种方面。当Grafana作为Kubernetes集群所有遥测数据的存储库时，它可以用于以适合部署团队的方式可视化部署过程，从预建仪表盘到专门为某个应用部署量身定制的仪表盘。
- en: Where applications are deployed directly to an operating system rather than
    a containerized environment, Grafana still offers detailed monitoring, with prebuilt
    dashboards for operating systems, common languages, web servers, databases, in-memory
    data stores, and many other tools.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当应用程序直接部署到操作系统而非容器化环境时，Grafana仍提供详细的监控，具有预建的操作系统仪表盘，涵盖常见语言、Web服务器、数据库、内存数据存储及许多其他工具。
- en: These approaches provide **white box monitoring** of a deployment; a lot of
    organizations will also implement **black box monitoring** of the application
    during a deployment. Grafana can help here as well. By using **Grafana OnCall**
    to receive messages from an availability monitoring tool such as the Prometheus
    blackbox exporter, k6, or Pingdom, this stream of data can also be monitored during
    a deployment.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法提供了**白盒监控**的部署；许多组织还会在部署期间实施**黑盒监控**。Grafana在这里也能提供帮助。通过使用**Grafana OnCall**接收来自可用性监控工具（如Prometheus黑盒出口、k6或Pingdom）的消息，在部署期间也可以监控这条数据流。
- en: 'It is best practice to generate annotations when a deployment happens, which
    can be done via the API. Here is an example of an annotation added to a deployment
    of the OpenTelemetry Collector that caused an incident:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 最好的做法是在部署发生时生成注释，这可以通过API完成。以下是添加到OpenTelemetry Collector部署中并导致事故的注释示例：
- en: '![Figure 14.2 – Annotations in action](img/B18277_14_2.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.2 – 注释的实际应用](img/B18277_14_2.jpg)'
- en: Figure 14.2 – Annotations in action
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.2 – 注释的实际应用
- en: As the screenshot shows, Grafana will display contextual information about deployments
    on any visualization that has the option switched on. Annotations appear as a
    line on the chart and show information when hovered over; this contextual information
    can be tagged.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如截图所示，Grafana将在任何启用了此选项的可视化图表上显示有关部署的上下文信息。注释以线条的形式出现在图表上，当鼠标悬停时会显示信息；这些上下文信息可以被标记。
- en: 'At their heart, CD platforms are code execution platforms, which means that
    any action that can be coded can be performed by a CD platform. We just talked
    about monitoring a deployment visually using a dashboard. This approach is great
    when deployments happen infrequently. When deployments occur much more frequently,
    it can be valuable to invest time in writing stages of a deployment where the
    state of the application being deployed is monitored. Loki, Mimir, and Tempo all
    offer query endpoints, which can be used to run queries as part of the scripted
    CD job. Effectively, this offloads the need to watch a dashboard to the CD pipeline,
    and rollback steps can be defined if the deployment fails. Some common examples
    of this use are as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，CD平台是代码执行平台，这意味着任何可以编写的操作都可以由CD平台执行。我们刚刚讨论了使用仪表盘可视化监控部署。这种方法在部署发生不频繁时效果很好。但当部署变得更为频繁时，投入时间编写部署的各个阶段，监控正在部署的应用程序状态会非常有价值。Loki、Mimir和Tempo都提供查询端点，可以在脚本化的CD任务中运行查询。实际上，这将监控仪表盘的工作交给了CD管道，如果部署失败，还可以定义回滚步骤。一些常见的使用示例如下：
- en: Monitoring the error rate seen in the application logs.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控应用程序日志中看到的错误率。
- en: Checking whether login actions are successful. This would usually be tied to
    a smoke test to ensure that login events occur.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查登录操作是否成功。这通常会与冒烟测试相关联，以确保登录事件的发生。
- en: Checking whether communication with downstream services is affected.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查是否与下游服务的通信受到影响。
- en: If these checks were to fail, the deployment could be quickly rolled back using
    automated procedures. This approach significantly reduces the **mean time to recovery**
    (**MTTR**) for such common issues and ensures that engineers can be focused on
    more valuable tasks during a deployment.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这些检查失败，可以通过自动化流程快速回滚部署。这种方法大大减少了**平均恢复时间**（**MTTR**），确保工程师能够在部署期间专注于更有价值的任务。
- en: The gold standard for leveraging the tools provided by Grafana is to also deploy
    any updates to the dashboards used for a service with Terraform during the same
    deployment window as the code deployment. Adopting this practice allows for an
    easily repeatable process, moving from local development work through testing
    and into a production environment.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 利用Grafana提供的工具的黄金标准是，在与代码部署相同的部署窗口内，通过Terraform部署用于服务的仪表盘的任何更新。采用这种做法可以实现一个容易重复的过程，从本地开发工作通过测试再到生产环境。
- en: While exciting, the *deploy* phase is not the phase where code is in *normal*
    operation; that phase is the *operate* phase. Let’s look at this phase next.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然令人兴奋，*部署*阶段并不是代码处于*正常*运行状态的阶段；那个阶段是*运行*阶段。我们接下来来看看这个阶段。
- en: Operate
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行
- en: The *operate* phase is where the product is live in front of customers. The
    most important aspect of this phase is ensuring customers are getting a great
    service. This can be achieved by monitoring SLOs and SLAs, checking errors that
    may occur, responding to incidents, and helping customers in their use of the
    product. Grafana is primarily a tool that is used through the *operate* phase
    of the life cycle, so most tools in Grafana are targeted toward this phase. Some
    key components that will be used by all teams who use Grafana are **dashboards**
    and **alerts**. The ability to see how a user is interacting with a product is
    also very valuable to operational teams, such as customer experience or customer
    support teams.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*操作*阶段是产品在客户面前上线的阶段。这个阶段最重要的方面是确保客户得到优质的服务。通过监控SLO和SLA，检查可能发生的错误，响应事件，并帮助客户使用产品，可以实现这一目标。Grafana主要是一个在*操作*阶段使用的工具，因此Grafana中的大多数工具都面向这个阶段。所有使用Grafana的团队都会使用一些关键组件，如**仪表盘**和**警报**。能够看到用户如何与产品互动对运营团队（如客户体验或客户支持团队）也是非常有价值的。'
- en: We discussed in [*Chapter 9*](B18277_09.xhtml#_idTextAnchor183) how **Grafana
    Alerting** and **Grafana Incident** can integrate with many systems. This capability
    is very helpful in creating a detailed incident response system – for example,
    by linking Grafana with ServiceNow so the creation, updating, and closing of incident
    tickets can be partially or fully automated, even with capabilities to collect
    chat communications to reduce the time needed to write up what happened during
    an incident for reporting.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[*第9章*](B18277_09.xhtml#_idTextAnchor183)中讨论了如何通过**Grafana告警**和**Grafana事件**与许多系统集成。这一功能在创建详细的事件响应系统时非常有帮助——例如，通过将Grafana与ServiceNow集成，可以部分或完全自动化事件工单的创建、更新和关闭，甚至可以收集聊天通信，以减少在事件报告中撰写发生情况所需的时间。
- en: We talked about using **Grafana Frontend Observability** in [*Chapter 12*](B18277_12.xhtml#_idTextAnchor231);
    when correctly implemented with distributed tracing, this tool allows customer-facing
    teams to reconstruct an individual user’s session. This allows these teams to
    work quickly with the customer to understand the frontend problem they are experiencing
    and translate that into a trace path through the system to identify the source
    of the issue and get it to the right team quickly, with easy-to-digest information
    on what happened.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[*第12章*](B18277_12.xhtml#_idTextAnchor231)中讨论了如何使用**Grafana前端可观察性**；当与分布式追踪正确实现时，该工具可以让面向客户的团队重建单个用户的会话。这使得这些团队能够快速与客户合作，了解他们遇到的前端问题，并将其转化为系统中的追踪路径，以便快速找到问题的根源并将其传递给正确的团队，同时提供易于理解的事件发生信息。
- en: Let’s consider how to use Grafana to monitor the system.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑如何使用Grafana来监控系统。
- en: Monitor
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 监控
- en: 'Like the *operate* phase. the *monitor* phase is the phase in which using Grafana
    can really shine. The two biggest challenges are knowing what telemetry to use
    to answer a question about the product and whether the telemetry is being made
    available. While it would be impossible to list every potential question, here
    are some common questions, linked with the telemetry type that would be best suited
    to answer them:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 和*操作*阶段一样，*监控*阶段是使用Grafana真正展现其优势的阶段。最大的两个挑战是知道应该使用哪些遥测数据来回答关于产品的问题，以及是否有提供这些遥测数据。虽然列出所有潜在的问题是不可能的，但以下是一些常见的问题，并与最适合回答这些问题的遥测类型进行了关联：
- en: How are my customers interacting with my product?
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我的客户如何与我的产品互动？
- en: This is best answered by using real user monitoring, which we discussed in [*Chapter
    12*](B18277_12.xhtml#_idTextAnchor231). This question could cover many similar
    questions such as what the uptake of a new feature is, and whether there are unvisited
    pages or features in the system.
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最好的回答方式是使用真实用户监控，我们在[*第12章*](B18277_12.xhtml#_idTextAnchor231)中讨论过。这个问题可以涵盖许多类似的问题，比如新功能的采用情况，或者系统中是否有未访问的页面或功能。
- en: Are there particular functions that are slow?
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否有特定功能比较慢？
- en: This can be answered by combining the timing information for requests from metrics
    with the detailed application information produced in logs. We discussed these
    in *Chapters 4* and *5*. For applications with downstream dependencies, this information
    can also be complemented with trace data, as discussed in [*Chapter 6*](B18277_06.xhtml#_idTextAnchor134).
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个问题可以通过结合来自度量的请求时间信息与日志中生成的详细应用信息来回答。我们在*第4章*和*第5章*中讨论了这些内容。对于有下游依赖关系的应用，这些信息还可以通过追踪数据来补充，正如在[*第6章*](B18277_06.xhtml#_idTextAnchor134)中讨论的那样。
- en: Why is a particular function slow?
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么某个特定功能变慢了？
- en: Often, this question will be answered through local testing, but this process
    may be significantly aided by using continuous profiling against a system with
    real or replayed requests. [*Chapter 13*](B18277_13.xhtml#_idTextAnchor239) discussed
    continuous profiling in more detail.
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个问题通常会通过本地测试来回答，但使用对系统进行持续分析的方式，结合实际或重播的请求，可以显著帮助这一过程。[*第13章*](B18277_13.xhtml#_idTextAnchor239)详细讨论了持续分析。
- en: Is my application behaving as expected?
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我的应用程序是否按预期运行？
- en: This is best addressed by establishing clear **service-level indicators** (**SLIs**)
    and SLOs for the application; we outlined how to do this in [*Chapter 9*](B18277_09.xhtml#_idTextAnchor183).
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最好的解决方法是为应用建立明确的**服务级指标**（**SLIs**）和SLOs；我们在[*第9章*](B18277_09.xhtml#_idTextAnchor183)中概述了如何进行此操作。
- en: Is the service compliant with the SLOs/SLAs?
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务是否符合SLOs/SLAs？
- en: This is typically answered by using metrics data. However, some indicators may
    be metrics derived from logs or tracing data – for example, creating a metric
    from logs of the number of errors seen.
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通常，通过使用度量数据来回答这个问题。然而，一些指标可能是从日志或追踪数据派生的度量——例如，通过日志中看到的错误数量创建一个度量。
- en: Is my infrastructure scaled correctly?
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我的基础设施是否正确扩展？
- en: 'This would be answered by collecting data from the infrastructure. How that
    is done may differ depending on the type of infrastructure:'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个问题将通过从基础设施收集数据来回答。收集方式可能会根据基础设施的类型而有所不同：
- en: For cloud infrastructure, this is done via an integration that provides logs,
    metrics, and sometimes tracing data
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于云基础设施，这是通过提供日志、度量，有时还提供追踪数据的集成来完成的。
- en: For on-premises infrastructure, the collection methods will vary
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于本地基础设施，收集方法会有所不同。
- en: We discussed this topic in more detail in [*Chapter 7*](B18277_07.xhtml#_idTextAnchor147).
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们在[*第7章*](B18277_07.xhtml#_idTextAnchor147)中更详细地讨论了这个话题。
- en: What is the long-term trend for something?
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 某件事的长期趋势如何？
- en: The best telemetry type for long-term trending is metrics as they provide a
    default 13-month retention period. This means the best practice for such analysis
    is to produce a metric from the data you wish to track.
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 长期趋势分析的最佳遥测类型是度量，因为它们提供了默认的13个月保留期。这意味着此类分析的最佳实践是从你希望跟踪的数据中生成一个度量。
- en: Another approach would be to load data from Grafana into some form of data warehouse,
    but this is outside the scope of this book.
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另一种方法是将数据从Grafana加载到某种形式的数据仓库中，但这超出了本书的范围。
- en: The real difference between the *operate* phase and the *monitor* phase is the
    aim of the use of Grafana. In the *operate* phase, the goal is to ensure that
    the system is functioning correctly for customers of the system. In the *monitor*
    phase, the goal is to understand and document how the system is functioning to
    feed into the *plan* phase to improve the system. Let’s finish discussing the
    DevOps life cycle with the *plan* phase.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '*操作*阶段和*监控*阶段之间的真正区别在于使用Grafana的目标。在*操作*阶段，目标是确保系统对客户正常运行。在*监控*阶段，目标是了解并记录系统的运行情况，以便为*计划*阶段提供输入，从而改进系统。让我们以*计划*阶段来结束对DevOps生命周期的讨论。'
- en: Plan
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计划
- en: 'The *plan* phase takes input from many sources to help a team decide what the
    next priority for work is. The questions asked in the *monitor* phase, and any
    incidents or SLO breaches from the *operate* phase, are some of those sources.
    To help prioritize, it is common to consider things such as the following:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '*计划*阶段从多个来源获取输入，以帮助团队决定下一个工作的优先级。在*监控*阶段提出的问题，以及*操作*阶段中的任何事件或SLO违约，都是这些来源的一部分。为了帮助优先排序，通常会考虑以下内容：'
- en: How many customers are affected by a particular incident or potential improvement?
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个特定事件或潜在改进会影响多少客户？
- en: The logs, metrics, and traces in Grafana can collect the data needed to answer
    this. This is true even for changes that have been sourced from other places such
    as user feedback.
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Grafana中的日志、度量和追踪可以收集回答此问题所需的数据。这对于那些来自其他地方（如用户反馈）的变更也是适用的。
- en: How close to capacity is a component of the system, or how much time is there
    to address a bottleneck before it begins creating incidents or performance degradation?
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统中某个组件的容量接近极限时，或者在瓶颈开始引发故障或性能下降之前，还有多少时间可以解决这个问题？
- en: Identifying bottlenecks before they become critical can be done by using k6
    to load test the system with spike testing, stress testing, or even testing it
    to breakpoint.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用k6进行负载测试，可以在瓶颈变得关键之前，通过突发测试、压力测试，甚至是测试到断点，来识别瓶颈。
- en: The DevOps life cycle is very focused on teams who are developing software.
    It’s common for organizations to use software provided by third parties to provide
    internal platforms. There is a lot of crossover with the *deploy*, *operate*,
    and *monitor* phases, but let’s take a more detailed look at using observability
    with some of these platforms.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 生命周期非常专注于开发软件的团队。组织通常会使用第三方提供的软件来提供内部平台。这与*部署*、*运营*和*监控*阶段有很多重叠，但让我们更详细地看一下在这些平台中使用可观察性。
- en: Using Grafana to monitor infrastructure and platforms
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Grafana监控基础设施和平台
- en: Teams who work with third-party infrastructure and platforms are well supported
    by the tools from Grafana and OpenTelemetry. We’ll consider a few major types
    of platforms; observability, CI, CD, infrastructure and resource, and finally,
    security platforms. The *deploy*, *operate*, *monitor*, and *plan* phases should
    all be understood for these platforms and the points made in the previous section
    for these phases are relevant to these kinds of platform products. Let’s start
    by considering observability platforms.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 与第三方基础设施和平台合作的团队得到Grafana和OpenTelemetry工具的良好支持。我们将考虑几种主要类型的平台：可观察性、CI、CD、基础设施与资源，以及最后的安全平台。这些平台的*部署*、*运营*、*监控*和*计划*阶段应该被理解，前一部分提到的这些阶段的要点也适用于这些平台产品。让我们从考虑可观察性平台开始。
- en: Observability platforms
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可观察性平台
- en: Teams who manage observability platforms have a responsibility to offer a platform
    that demonstrates best practices by having well-documented SLIs and SLOs, easy-to-find
    dashboards, and a dependable incident management process.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 管理可观察性平台的团队有责任提供一个能够展示最佳实践的平台，包括有良好文档的SLI和SLO，易于查找的仪表板，以及可靠的事件管理过程。
- en: Helpfully, there are dashboards available through the Grafana Dashboards community
    portal that provide very detailed views of the OpenTelemetry Collector and the
    data flows as they pass through the Collector. Deciding what aspects of the Collector
    are most important to your organization and publishing them is a step that should
    be taken by any team that manages observability collection.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 有帮助的是，Grafana Dashboards社区门户提供了许多仪表板，这些仪表板可以非常详细地展示OpenTelemetry Collector以及数据如何通过Collector流动。决定哪些Collector的方面对你的组织最重要，并将其发布，是任何管理可观察性收集的团队都应该采取的步骤。
- en: An important consideration for managing an observability platform is the disaster
    management process for the loss of the platform. While this scenario is unlikely,
    it is much better to have a tested plan than to try to come up with one when the
    platform is on fire – this is advised after a very painful experience. Usually,
    such a disaster plan can be simple – for instance, the ability to create a Prometheus
    instance or even a full Grafana stack in each cluster will give organizations
    the capability to continue operating in the event of the **software-as-a-service**
    (**SaaS**) platform they use being down.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 管理可观察性平台时，一个重要的考虑因素是平台丧失时的灾难管理过程。虽然这种情况不太可能发生，但拥有经过测试的计划总比在平台出现故障时临时想出一个方案要好——这是经过一次非常痛苦的经历后得到的建议。通常，灾难恢复计划可以很简单——例如，在每个集群中创建一个
    Prometheus 实例，甚至一个完整的 Grafana 堆栈，将使组织在他们使用的**软件即服务**（**SaaS**）平台出现故障时，仍然能够继续运营。
- en: A related plan that should exist is how noisy data sources are controlled. Compartmentalization
    of production data from other sources is a best practice. Sometimes, the financial
    or capacity cost of a noisy data source could be a business interruption. These
    risks can be managed in several ways, such as revoking API keys, adding filtering
    to collectors, or even more extreme measures such as switching off the data source.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 相关的计划应该包括如何控制嘈杂的数据源。将生产数据与其他数据源隔离是最佳实践。有时，嘈杂的数据源的财务或容量成本可能会导致业务中断。这些风险可以通过几种方式来管理，例如撤销API密钥、为收集器添加过滤器，甚至采取更极端的措施，如关闭数据源。
- en: Let’s consider CI platforms next.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们考虑CI平台。
- en: CI platforms
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CI平台
- en: CI platforms cover a lot of different tools, such as Github Actions, GitLab
    CI/CD, Jenkins, Azure DevOps, Google Cloud Build, and similar. We believe the
    most common question asked of CI platforms is “*Why did my build fail?*”. Giving
    engineers tools to debug their builds is very important for such a platform. Often,
    this feedback can be seen in the CI platform itself. However, for some types of
    failures, it may not be obvious, such as a runner that failed, a noisy neighbor,
    or some other issue. In these cases, having data collected from the CI platform
    itself can be very useful.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: CI 平台涉及许多不同的工具，例如 Github Actions、GitLab CI/CD、Jenkins、Azure DevOps、Google Cloud
    Build 等等。我们认为，CI 平台上最常见的问题是“*为什么我的构建失败了？*”。为工程师提供调试构建的工具对于这样的平台至关重要。通常，CI 平台本身可以看到这些反馈。然而，对于某些类型的失败，这些反馈可能并不明显，例如一个失败的运行者、一个“吵闹的邻居”或其他问题。在这些情况下，从
    CI 平台本身收集的数据非常有用。
- en: 'Due to the nature of the CI platform, data collection usually needs to be tailored
    to the platform:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 CI 平台的性质，数据收集通常需要针对平台进行定制：
- en: Platforms provided by cloud vendors would usually be instrumented by collecting
    the logs and metrics from the platform in the vendor’s own tooling (for example,
    AWS CloudWatch, GCP Operations Suite, or Azure Monitor) and then sending them
    on to a Grafana instance if appropriate.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云供应商提供的平台通常会通过收集来自平台的日志和指标，并使用供应商自己提供的工具（例如，AWS CloudWatch、GCP Operations Suite
    或 Azure Monitor）进行处理，然后在适当的情况下将它们发送到 Grafana 实例。
- en: Other platforms will probably need to have an agent installed. We discussed
    this process in [*Chapter 13*](B18277_13.xhtml#_idTextAnchor239). For reference,
    the OpenTelemetry Collector is provided via a Docker image, Alpine image (APK),
    Debian image (`.deb`), Enterprise Linux image (`.rpm`), and as a general image
    (`.tar.gz`), which includes executables for macOS (Intel and ARM) and Windows.
    The Grafana Agent is provided as a Docker image, Debian image (`.deb`), Enterprise
    Linux image (`.rpm`), SUSE image, macOS image (via Homebrew for Intel and ARM),
    and Windows Installer (`.exe`).
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他平台可能需要安装代理。我们在[*第13章*](B18277_13.xhtml#_idTextAnchor239)中讨论了这一过程。作为参考，OpenTelemetry
    Collector 提供了多种格式，包括 Docker 镜像、Alpine 镜像（APK）、Debian 镜像（`.deb`）、Enterprise Linux
    镜像（`.rpm`）以及通用镜像（`.tar.gz`），这些都包括适用于 macOS（Intel 和 ARM）和 Windows 的可执行文件。Grafana
    Agent 提供了 Docker 镜像、Debian 镜像（`.deb`）、Enterprise Linux 镜像（`.rpm`）、SUSE 镜像、macOS
    镜像（通过 Homebrew 支持 Intel 和 ARM）、以及 Windows 安装程序（`.exe`）。
- en: Once an agent is installed, the configuration should be managed to give the
    best support for the nature of the integration work that is carried out on the
    platform. We recommend using one of the automation tools discussed in [*Chapter
    10*](B18277_10.xhtml#_idTextAnchor204) to manage this.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 安装代理后，应该管理配置，以便为平台上进行的集成工作提供最佳支持。我们建议使用在[*第10章*](B18277_10.xhtml#_idTextAnchor204)中讨论的自动化工具之一来管理此配置。
- en: Logs and metrics are the prime data components to capture, as CI platforms do
    not typically need distributed tracing. One thing to consider as a team adds observability
    to a CI platform is whether the leadership team wishes to track higher-level business
    metrics – for example, lead time for changes, defect counts, or similar. For those
    of you who want to look further into these ideas, we recommend looking at Google’s
    **DevOps Research and Assessment** (**DORA**) team reports ([https://cloud.google.com/devops/state-of-devops/](https://cloud.google.com/devops/state-of-devops/)).
    These kinds of considerations would usually need to be agreed upon across several
    teams, so having a clearly documented definition of how they are calculated and
    collected is vital. This kind of data collection may or may not be done in the
    observability tooling. It is best practice to separate the data from CI platforms
    from business-critical workloads. This can easily be achieved by dedicating a
    separate Grafana stack for CI workloads. There are publicly available dashboards
    for these systems as well.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 日志和指标是主要需要捕获的数据组件，因为 CI 平台通常不需要分布式追踪。团队在向 CI 平台添加可观察性时需要考虑的一件事是，领导团队是否希望跟踪更高层次的业务指标——例如，变更的提前期、缺陷数或类似指标。对于那些想要深入了解这些理念的人，我们建议查看谷歌的**DevOps
    研究与评估**（**DORA**）团队报告（[https://cloud.google.com/devops/state-of-devops/](https://cloud.google.com/devops/state-of-devops/)）。这类考虑通常需要跨多个团队达成一致，因此清晰记录它们的计算和收集方式至关重要。这类数据收集可能会在可观察性工具中进行，也可能不会。最佳实践是将
    CI 平台的数据与业务关键工作负载分开。这可以通过专门为 CI 工作负载配置一个独立的 Grafana 堆栈来轻松实现。对于这些系统，也有公开的仪表板可供使用。
- en: Now that we’ve seen how to monitor a CI platform, let’s consider the deployment
    platform.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到如何监控 CI 平台，接下来让我们考虑部署平台。
- en: CD platforms
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CD 平台
- en: 'CD platforms often have crossover with CI platforms; we’re considering them
    separate as they are different aspects of the overall system. These platforms
    use tools such as Jenkins, GitLab CI/CD, AWS CodeDeploy, ArgoCD, FluxCD, and similar.
    For infrastructure deployment, they may also include tools such as Terraform Cloud,
    Atlantis, or Spacelift. There are two main groups of CD tools: **push systems**
    and **pull systems**. We’ll discuss them separately in this way as the data collection
    processes differ. With either deployment method, a very important aspect of integrating
    with Grafana well is to record an annotation in Grafana. We discussed this in
    more detail when we talked about the *deploy* phase of the DevOps life cycle,
    but this contextual information can save huge amounts of time during troubleshooting,
    and ultimately, provide a better customer experience.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: CD 平台通常与 CI 平台有交集；我们将它们视为独立的，因为它们是整体系统的不同方面。这些平台使用像 Jenkins、GitLab CI/CD、AWS
    CodeDeploy、ArgoCD、FluxCD 等类似的工具进行操作。对于基础设施部署，它们可能还包括 Terraform Cloud、Atlantis
    或 Spacelift 等工具。有两类主要的 CD 工具：**推送系统**和**拉取系统**。我们将分别讨论它们，因为数据收集过程有所不同。无论使用哪种部署方法，良好集成
    Grafana 的一个非常重要的方面是记录 Grafana 中的注释。我们在讨论 DevOps 生命周期的*部署*阶段时曾详细探讨过这个问题，但这些上下文信息在故障排除时可以节省大量时间，并最终提供更好的客户体验。
- en: Pull systems in Kubernetes also use the term *GitOps*; such systems typically
    use tools such as **ArgoCD** or **FluxCD**. As these tools are deployed into an
    existing Kubernetes cluster, the observability stance is very simple, in that
    the service will have data collected by the existing collection infrastructure
    in the cluster. ArgoCD provides metrics in Prometheus format, and there are several
    dashboards publicly available. It’s also possible to extend the data collection
    via other tools in the Argo group of tools. FluxCD provides Prometheus metrics
    that can be extended with kube-state-metrics as well. The tool also provides logs
    and produces Kubernetes events as well. There are other pull systems outside of
    Kubernetes, such as **Chef** and **ansible-pull**, but due to the low prevalence
    of these tools, we’ll not discuss them here.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 中的拉取系统也使用*GitOps*这一术语；这类系统通常使用 **ArgoCD** 或 **FluxCD** 等工具。由于这些工具被部署到现有的
    Kubernetes 集群中，因此可观察性姿态非常简单，因为服务将由集群中现有的收集基础设施进行数据收集。ArgoCD 提供 Prometheus 格式的度量指标，并且有几个公开的仪表板可供使用。还可以通过
    Argo 工具组中的其他工具扩展数据收集。FluxCD 也提供 Prometheus 度量指标，并且可以与 kube-state-metrics 一起扩展。该工具还提供日志并生成
    Kubernetes 事件。除了 Kubernetes 外，还有其他拉取系统，如 **Chef** 和 **ansible-pull**，但由于这些工具的普及度较低，我们在此不讨论它们。
- en: Push-based CD platforms have one or more central systems that connect to the
    deployment target and run the deployment process. Jenkins is perhaps the classic
    example here, but systems such as GitHub Actions and GitLab CI/CD also fall into
    this category. You may notice that these tools were also mentioned previously
    when we considered the CI platform. Unsurprisingly, these tools are monitored
    in the same way, whether they are used for integration tasks or delivery/deployment
    tasks. When the use of these tools has a mix of integration and delivery/deployment
    tasks, monitoring the actions of the platform is very important from a security
    perspective as these systems will often consume third-party libraries during the
    integration phase, which opens the system to supply chain attacks. Combining such
    an attack with high-level access to production on a single system is a very real
    threat to organizations.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 基于推送的 CD 平台有一个或多个中央系统连接到部署目标并运行部署过程。Jenkins 可能是这里的经典例子，但像 GitHub Actions 和 GitLab
    CI/CD 这样的系统也属于这一类。你可能会注意到，这些工具在我们考虑 CI 平台时也曾提到过。毫不奇怪，这些工具的监控方式是一样的，无论它们是用于集成任务还是交付/部署任务。当这些工具的使用既包括集成任务又包括交付/部署任务时，从安全角度监控平台的行为非常重要，因为这些系统在集成阶段通常会使用第三方库，从而使系统暴露于供应链攻击的风险中。将这种攻击与对生产环境的高级访问结合在一起，可能对组织构成非常真实的威胁。
- en: We’ve now considered how to monitor the platforms that build and deploy software.
    Let’s consider a wider group of systems next. We’ll consider data storage and
    message queue systems in this next section.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经考虑了如何监控构建和部署软件的平台。接下来让我们考虑一个更广泛的系统群体。我们将在下一部分中讨论数据存储和消息队列系统。
- en: Resource platforms
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 资源平台
- en: We’re using the term *resource platform* to describe the types of backend systems
    that an application may depend on. These might include databases, in-memory data
    stores, message buses, web servers, or similar. These platforms are an odd case,
    as the responsibility for the system can reside in many different areas of the
    organization. Commonly, either a software delivery team would be responsible,
    or sometimes a centralized team would be responsible. We will attempt to ignore
    this complexity by talking in general terms about how to ensure these tools are
    observable.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用*资源平台*这个术语来描述一个应用程序可能依赖的后端系统类型。这些可能包括数据库、内存数据存储、消息总线、Web 服务器或类似的系统。这些平台是一个特殊的案例，因为系统的责任可能分布在组织的不同领域。通常，由软件交付团队负责，或者有时由一个集中式团队负责。我们将尽量通过一般性讨论这些工具如何确保可观察性来忽略这种复杂性。
- en: 'There are a few places to start looking at monitoring these systems:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些地方可以开始查看如何监控这些系统：
- en: '**OpenTelemetry Collector contributed receivers**: There are contributed receiver
    modules for a vast array of resource platforms. Deploying these receivers is very
    simple:'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OpenTelemetry Collector 贡献的接收器**：有很多为各种资源平台提供的贡献接收器模块。部署这些接收器非常简单：'
- en: In Kubernetes, the collector can be deployed as a sidecar to the service, or
    as a dedicated agent in the cluster or namespace that forwards telemetry on to
    a gateway. An example of a dedicated agent is shown in *Figure 11.5* in [*Chapter
    11*](B18277_11.xhtml#_idTextAnchor218) where the agent is used to collect metrics
    from the Kubernetes cluster.
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Kubernetes 中，收集器可以作为服务的旁车部署，或者作为集群或命名空间中的专用代理，负责将遥测数据转发到网关。*图 11.5* 中展示了一个专用代理的示例，位于
    [*第 11 章*](B18277_11.xhtml#_idTextAnchor218)，该代理用于从 Kubernetes 集群收集指标。
- en: In a virtual or bare metal installation, a dedicated OpenTelemetry Collector
    needs to be deployed, although this can often be done on the instance being monitored
    with no performance degradation.
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在虚拟化或裸金属安装中，需要部署专用的 OpenTelemetry Collector，尽管通常可以在被监控的实例上完成这项部署，并且不会造成性能下降。
- en: '**Prometheus modules**: These are modules that allow Prometheus to scrape data
    from a lot of resource platforms. These can simply be deployed to a Prometheus
    instance and configured to connect to the platform that needs to be monitored.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Prometheus 模块**：这些是允许 Prometheus 从许多资源平台抓取数据的模块。只需将它们部署到 Prometheus 实例，并配置连接到需要监控的平台即可。'
- en: Once metrics are collected from these systems, Grafana offers a wide range of
    prebuilt public dashboards for them. The wide availability of these dashboards
    means the time to value is very good.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦从这些系统收集了指标，Grafana 提供了广泛的预构建公共仪表板。这些仪表板的广泛可用性意味着它的价值实现时间非常好。
- en: One thing to highlight to prevent confusion with these systems is that this
    type of data collection is not the same as using the system as a data source in
    Grafana. A lot of these systems, especially databases such as MySQL, PostgreSQL,
    and MongoDB, can be used as a Grafana data source. A data source connects to the
    system and allows users to query the data in the system. The tools we are discussing
    here connect to the system and query operational metrics from it. These metrics
    can then be used to provide SLOs and transparency of the operation of the system
    to other teams.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 需要特别强调的是，为了避免混淆，这种类型的数据收集与将系统用作 Grafana 数据源是不同的。许多这些系统，特别是像 MySQL、PostgreSQL
    和 MongoDB 这样的数据库，可以作为 Grafana 的数据源。数据源连接到系统并允许用户查询系统中的数据。而我们在这里讨论的工具连接到系统并从中查询操作性指标。这些指标可以用来提供服务水平目标（SLO）并向其他团队展示系统的运行情况。
- en: Security platforms
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全平台
- en: We will not delve too deeply into **security platforms** as they could fill
    an entire book on their own. However, it’s worth noting that several tools, such
    as **Falco**, **Open Policy Agent**, **kube-bench**, **Trivy,** and others, have
    methods of exposing metrics related to their operation, which can be consumed
    by Grafana in some way.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会深入探讨**安全平台**，因为它们本身就足以写成一本书。然而，值得注意的是，一些工具，如**Falco**、**Open Policy Agent**、**kube-bench**、**Trivy**
    等，提供了暴露与其操作相关的指标的方法，这些指标可以以某种方式被 Grafana 消耗。
- en: There is also a very big crossover of concerns of observability platforms with
    cyber security platforms. Both platforms consume log data, which can lead to the
    running of multiple agents to collect this data. A more cost-effective solution
    could be for these teams to work together on a shared pipeline of this data that
    supports both teams’ operations. Such a pipeline should be monitored closely as
    it could present a significant risk to the organization.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 可观测平台和网络安全平台存在非常大的交叉关注点。这两个平台都使用日志数据，这可能导致运行多个代理以收集这些数据。更具成本效益的解决方案可能是这些团队共同开发支持双方操作的数据管道。这样的管道应该被密切监控，因为它可能对组织构成重大风险。
- en: We’ve now considered using Grafana both in the software application life cycle
    and for the management of infrastructure and platforms.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在考虑在软件应用程序生命周期和基础设施及平台管理中使用Grafana。
- en: Summary
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概要
- en: In this chapter, we have considered how you can use Grafana through the DevOps
    life cycle. You learned about deploying Grafana in a local environment to speed
    up development time by getting instant feedback on the performance of the code.
    We looked at the testing phase, and you learned how using tools such as k6 can
    provide great repeatable tests that can even be used as an application is deployed.
    During the release phase, Grafana can be used to demonstrate various aspects of
    an application to the stakeholders who approve your releases. We saw how deployments
    can have their risks reduced by leveraging SLOs and black box monitoring. We also
    saw how using Grafana annotations can improve the visibility of deployments occurring.
    The *operate* and *monitor* phases use Grafana in very similar ways, which have
    been covered in this book. You were introduced to the difference in the aim of
    these two phases, with the *operate* phase being concerned with the correct functioning
    and the *monitor* phase being concerned with how to improve the customer experience.
    Finally, we talked about how Grafana can be used to have a data-driven discussion
    during the planning phase of a software tool.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们考虑了如何在DevOps生命周期中使用Grafana。您了解了如何在本地环境中部署Grafana，以加快开发时间，通过即时反馈了解代码性能。我们讨论了测试阶段，您了解了如何使用k6等工具提供可重复的优秀测试，甚至可以在应用程序部署时使用。在发布阶段，可以使用Grafana向批准您的发布的利益相关者展示应用程序的各个方面。我们看到如何通过利用SLO和黑盒监控来降低部署风险。我们还看到了如何使用Grafana注释来改善部署的可见性。*操作*和*监控*阶段在本书中使用Grafana的方式非常相似。您了解了这两个阶段目标的不同之处，*操作*阶段关注正确的功能，而*监控*阶段关注如何改善客户体验。最后，我们讨论了如何在软件工具规划阶段使用Grafana进行基于数据的讨论。
- en: We then considered how Grafana can also be used with various types of platforms.
    We introduced you to using Grafana to monitor your observability platform, effectively
    demonstrating the principle of using your own product or “*eating your own dog
    food*,” and acting as an example of best practice to an organization. You saw
    how to use Grafana with your CI/CD platforms, so engineers in an organization
    have a lot of data to understand how their builds and deployments are working.
    We then discussed how to get operational data from many systems used across the
    industry, such as databases, in-memory data stores, message buses, and web servers.
    You learned that the best approach is to look for available data collection tooling
    and publicly available dashboards. The final kind of platform we looked at was
    a security platform, where you saw that some tools also surface data in Prometheus
    or OpenTelemetry format, which can be consumed by Grafana. Where this is available,
    prebuilt Grafana dashboards are also available, which significantly reduces the
    time to value for using these tools.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们考虑了Grafana如何与各种类型的平台一起使用。我们向您介绍了如何使用Grafana监控您的可观测性平台，有效地演示使用自己的产品或“*dogfooding*”原则，并作为组织最佳实践的示例。您了解了如何将Grafana与CI/CD平台配合使用，以便组织中的工程师了解其构建和部署的大量数据。然后，我们讨论了如何从行业中使用的许多系统中获取操作数据，例如数据库、内存数据存储、消息总线和Web服务器。您了解到最佳方法是寻找可用的数据收集工具和公开可用的仪表板。我们还看了安全平台，您了解到一些工具还以Prometheus或OpenTelemetry格式呈现数据，这些数据可以被Grafana消费。在这种情况下，还提供预构建的Grafana仪表板，大大缩短了使用这些工具的价值时间。
- en: We have nearly reached the end of the book. The next chapter will cover best
    practices and troubleshooting techniques. You will look at some specific items
    around data collection and the Grafana stack as well as general guidance on common
    pitfalls in observability. We will also discuss interesting future trends.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经接近本书的尾声。下一章将介绍最佳实践和故障排除技巧。你将了解数据收集和Grafana技术栈的一些具体内容，以及关于可观察性中常见陷阱的通用指导。我们还将讨论一些有趣的未来趋势。

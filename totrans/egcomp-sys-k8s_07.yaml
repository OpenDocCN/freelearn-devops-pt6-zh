- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: GitOps with Flux for Edge Applications
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于 Flux 的 GitOps 用于边缘应用
- en: Previous chapters have already covered the basics of building your home lab
    using K3s. It’s time to implement simple use cases that you can use in edge computing.
    This chapter covers how to implement GitOps for your applications using Flux in
    edge computing environments, starting with the basic theory of GitOps and the
    necessary tools to manage a Git repository for deployments. Then, we will look
    at how to install Flux to implement a basic GitOps workflow for a demo application.
    This chapter includes how to automate an application deployment using a **mono
    repository** (**monorepo**) configuration, the Helm operator, and the image updater
    feature of Flux. Finally, we will end the chapter with the installation of basic
    monitoring dashboards in Flux, essential troubleshooting commands for Flux, and
    how to uninstall Flux.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的章节已经介绍了如何使用 K3s 构建家庭实验室的基础知识。现在是时候实现一些简单的使用案例，帮助你在边缘计算中使用了。这一章将介绍如何在边缘计算环境中使用
    Flux 实现应用的 GitOps，从 GitOps 的基本理论以及管理部署 Git 仓库所需的工具开始。接着，我们将介绍如何安装 Flux，实施一个基本的
    GitOps 工作流来演示应用。此章节还包括如何使用 **单一仓库** (**monorepo**) 配置、Helm 操作符和 Flux 的镜像更新功能来自动化应用的部署。最后，我们将在章节结束时介绍如何在
    Flux 中安装基本的监控仪表盘、Flux 的常用故障排除命令以及如何卸载 Flux。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Implementing GitOps for edge computing
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现边缘计算中的 GitOps
- en: Flux and its architecture
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Flux 及其架构
- en: Designing GitOps with Flux for edge applications
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为边缘应用设计基于 Flux 的 GitOps
- en: Building your container image with GitHub Actions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 GitHub Actions 构建你的容器镜像
- en: Installing and configuring Flux for GitOps
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装并配置 Flux 以实现 GitOps
- en: Troubleshooting Flux installations
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 故障排除 Flux 安装问题
- en: Installing Flux monitoring dashboards
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Flux 监控仪表盘
- en: Uninstalling Flux
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 卸载 Flux
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In this chapter, to implement GitOps using Flux, you will need the following:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，要实现基于 Flux 的 GitOps，你将需要以下内容：
- en: Three single node K3s clusters using a device with an **ARM** processor such
    as a Raspberry Pi.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用具有 **ARM** 处理器的设备（例如 Raspberry Pi）构建三个单节点的 K3s 集群。
- en: Previous experience with Git.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有 Git 的使用经验。
- en: GitHub repository and its token; you also need some basic experience using Git.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub 仓库及其令牌；你还需要一些使用 Git 的基本经验。
- en: Docker Hub account to push new image releases of your application.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Hub 账户，用于推送应用的新镜像版本。
- en: With this, you are ready for this first use case to implement GitOps at the
    edge using Flux. So, let’s get started.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，你就可以准备好实施这个边缘使用案例，通过 Flux 来实现 GitOps。那么，我们开始吧。
- en: 'For more detail and code snippets, check out this resource on GitHub: [https://github.com/PacktPublishing/Edge-Computing-Systems-with-Kubernetes/tree/main/ch7](https://github.com/PacktPublishing/Edge-Computing-Systems-with-Kubernetes/tree/main/ch7)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 详情和代码片段请查看 GitHub 上的资源：[https://github.com/PacktPublishing/Edge-Computing-Systems-with-Kubernetes/tree/main/ch7](https://github.com/PacktPublishing/Edge-Computing-Systems-with-Kubernetes/tree/main/ch7)
- en: Implementing GitOps for edge computing
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现边缘计算中的 GitOps
- en: 'To start this topic, let’s get started with the concept of GitOps. The [https://www.gitops.tech/](https://www.gitops.tech/)
    website states: “*GitOps is a way of implementing Continuous Deployment for cloud
    native applications. It focuses on a developer-centric experience when operating
    infrastructure, by using tools developers are already familiar with, including
    Git and Continuous Deployment tools*.” This means that GitOps helps you with your
    **continuous deployment** (**CD**) in general. In software engineering, it is
    common to refer to continuous deployment and continuous delivery with the CD acronym.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始这个话题，我们先从 GitOps 的概念入手。[https://www.gitops.tech/](https://www.gitops.tech/)
    网站中提到：“*GitOps 是实现云原生应用持续部署的一种方式。它关注的是开发者为基础设施操作提供的以开发者为中心的体验，使用开发者已经熟悉的工具，包括
    Git 和持续部署工具*。” 这意味着 GitOps 可以帮助你进行 **持续部署** (**CD**) 。在软件工程中，通常使用 CD 缩写来指代持续部署和持续交付。
- en: 'Also, the GitLab page [https://about.gitlab.com/topics/gitops](https://about.gitlab.com/topics/gitops)
    mentions that GitOps contains the following basic components:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，GitLab 页面 [https://about.gitlab.com/topics/gitops](https://about.gitlab.com/topics/gitops)
    也提到，GitOps 包含以下基本组件：
- en: '**Infrastructure as code** (**IaC**): This refers to a declarative way to provide
    infrastructure or deployments for your applications.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基础设施即代码** (**IaC**)：这指的是为你的应用提供基础设施或部署的声明性方式。'
- en: '**Merge requests or pull requests** (**PRs**): A way to manage infrastructure
    or application code updates across multiple changes and collaborators.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**合并请求或拉取请求** (**PRs**)：管理跨多个更改和协作者的基础设施或应用程序代码更新的一种方式。'
- en: '**Source code management** (**SCM**): Systems such as Git enable merge request-
    or pull request-based workflows and a mechanism to manage this, usually using
    a Git repository. In this way, a team can have an approval-and-review mechanism
    to apply changes.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**源代码管理** (**SCM**)：像 Git 这样的系统可以启用基于合并请求（merge request）或拉取请求（pull request）的工作流，并提供一种机制来管理这些工作流，通常是通过
    Git 仓库来实现。通过这种方式，团队可以拥有一个批准和审查机制来应用更改。'
- en: '**Continuous integration and continuous delivery** (**CI/CD**): CI and CD include,
    by nature, all the processes of building, checking, and deploying applications
    and changes to those software applications. GitOps is used to automate CD for
    a cloud native application.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续集成和持续交付** (**CI/CD**)：CI 和 CD 本质上包括了构建、检查以及将应用程序和变更部署到软件应用程序的所有过程。GitOps
    用于自动化云原生应用程序的 CD。'
- en: 'In this chapter, you will find tools that provide mechanisms for CI/CD automation
    pipelines. Let’s pay attention to the following diagram that shows a summary of
    how GitOps works:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将找到提供 CI/CD 自动化管道机制的工具。让我们关注下面的图表，展示 GitOps 工作原理的总结：
- en: '![Figure 7.1 – GitOps'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.1 – GitOps'
- en: '](img/B16945_07_01.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_07_01.jpg)'
- en: Figure 7.1 – GitOps
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.1 – GitOps
- en: 'The basics of starting with GitOps are outlined here, as depicted in *Figure
    7.1*:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 启动 GitOps 的基础内容在这里列出，如 *图 7.1* 所示：
- en: '**Commit code to the source**: Here, a developer makes changes and pushes their
    changes to a source or repository—for example, a Git repository hosted at GitHub.'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**提交代码到源代码**：在这里，开发者进行更改并将更改推送到源代码或仓库——例如，托管在 GitHub 上的 Git 仓库。'
- en: '**Synchronize changes**: A GitOps tool such as, for example, Flux periodically
    detects changes in the source.'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**同步更改**：GitOps 工具，如 Flux，会定期检测源代码中的更改。'
- en: '**Provision or reconcile changes**: Once the GitOps tool detects changes, it
    aims to automate the process of updating a deployment based on the declarative
    configuration changes found. This could include processes to modify, such as changing
    configurations, updating the container image for an application using containers,
    and so on. Sometimes, if a resource or deployment doesn’t exist, you have to provision
    resources or reconcile these, comparing changes. This means that a GitOps tool
    regularly works with declarative definitions to reflect the state of your infrastructure
    or application.'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**提供或调和更改**：一旦 GitOps 工具检测到更改，它的目标是自动化基于声明性配置更改的部署更新过程。这可能包括修改过程，比如更改配置、更新使用容器的应用程序的容器镜像等。有时，如果资源或部署不存在，你需要提供资源或调和这些资源，比较更改。这意味着
    GitOps 工具定期与声明性定义一起工作，以反映基础设施或应用程序的状态。'
- en: Finally, the user will see changes when accessing their application, and you
    can also add some additional processes such as notifications if a process was
    finalized, or an alert if something fails.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，用户在访问他们的应用程序时将看到更改，你还可以添加一些额外的过程，例如在某个过程完成时的通知，或者在某个过程失败时的警报。
- en: In general, this is how a GitOps process works and how a GitOps tool operates.
    In this chapter, we are going to focus on Flux as our GitOps tool, to implement
    GitOps processes to automate our applications’ deployments and updates.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，这就是 GitOps 过程的工作方式，以及 GitOps 工具的运作方式。在本章中，我们将重点介绍 Flux 作为我们的 GitOps 工具，来实现
    GitOps 流程，自动化我们的应用程序部署和更新。
- en: GitOps principles
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GitOps 原则
- en: 'There are some principles that you have to follow if you are using GitOps to
    automate your CD pipelines. Based on *Weaveworks*, these principles are as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用 GitOps 来自动化 CD 管道，有一些原则是必须遵循的。基于 *Weaveworks*，这些原则如下：
- en: '**Declarative definitions**: You can often find these definitions using **YAML**
    files, but they could also be found in other formats such as **JSON**.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**声明性定义**：你可以经常通过 **YAML** 文件找到这些定义，但它们也可以以其他格式出现，例如 **JSON**。'
- en: '**State of your applications versioned with Git**: GitOps tools use Git repositories
    to store changes and states for applications.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序的状态版本化存储于 Git 中**：GitOps 工具使用 Git 仓库来存储应用程序的更改和状态。'
- en: '**Approve changes that can be applied automatically to your resources**: Git
    repositories or services provide ways to automate a trigger tool when some changes
    or merges are detected.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**批准可以自动应用到资源的更改**：Git 仓库或服务提供方式来自动触发工具，当检测到某些更改或合并时。'
- en: '**Software agents listening to changes notifying or alerting**: GitOps tools
    also have daemons listening to changes in a ready-to-launch action, such as changing
    a repository with a new image tag in the case of applications using containers.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监听变更的软硬件代理，进行通知或警报**：GitOps 工具还具有守护进程，监听准备启动的动作中的变化，例如在使用容器的应用程序中，改变一个包含新镜像标签的代码库。'
- en: GitOps benefits
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GitOps 的好处
- en: Now you know how a GitOps tool works and how GitOps processes help you to automate
    your CD pipeline, it’s time to find out about the benefits of GitOps.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道了 GitOps 工具如何工作以及 GitOps 流程如何帮助你自动化 CD 管道，接下来让我们了解一下 GitOps 的好处。
- en: 'Based on *Weaveworks*, these are as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 基于*Weaveworks*，其内容如下：
- en: '**Increased productivity**: An automated process reduces the execution time;
    in this case, more changes and updates made for your applications in less time.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提高生产力**：自动化过程减少了执行时间；在这种情况下，你可以在更短的时间内对应用进行更多的变更和更新。'
- en: '**Enhanced developer experience**: GitOps tools usually launch automated processes
    on your Git repository, and these will be launched automatically without knowing
    the internals of how it works—for example, for applications using Kubernetes,
    a developer doesn’t have to know Kubernetes in some cases. However, this depends
    on how your application is structured.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**增强的开发者体验**：GitOps 工具通常会在你的 Git 仓库上启动自动化流程，并且这些流程会自动启动，无需了解其内部工作原理——例如，对于使用
    Kubernetes 的应用，开发者在某些情况下无需了解 Kubernetes。然而，这取决于你的应用程序结构。'
- en: '**Improved stability**: Logs of GitOps tools are included by default, which
    helps to meet some security and monitoring features.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提高稳定性**：GitOps 工具的日志默认包含在内，有助于满足一些安全性和监控功能。'
- en: '**Higher reliability**: GitOps tools give you the ability to implement rollback
    mechanisms, reducing downtime for your applications if a change has an impact
    on the operation of your system.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更高的可靠性**：GitOps 工具让你能够实施回滚机制，减少应用程序在变更影响系统运行时的停机时间。'
- en: '**Consistency and standardization**: GitOps tools have structures to define
    your applications, and give you best practices for your applications’ definitions,
    pipelines, or updates.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一致性和标准化**：GitOps 工具具有定义应用程序的结构，并为应用程序的定义、管道或更新提供最佳实践。'
- en: '**Stronger security guarantees**: GitOps tools have security features such
    as cryptography for secrets, and tracking and managing changes. This brings a
    way to secure your applications.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更强的安全保障**：GitOps 工具具备安全功能，如针对机密的加密技术、以及跟踪和管理变更的能力。这为保护你的应用提供了一种方式。'
- en: Now, let’s move on to understand how GitOps works in a cloud native context.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续了解 GitOps 在云原生环境中的工作原理。
- en: GitOps, cloud native, and edge computing
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GitOps、云原生与边缘计算
- en: As we know, **cloud native** refers to the use of applications using technologies
    such as containers, microservices, and CI/CD in the context of a **development-operations**
    (**DevOps**) culture. So, you can find an intersection for this concept when a
    GitOps tool is designed to run on cloud native environments—for example, Kubernetes
    clusters.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所知，**云原生**指的是在**开发运维**（**DevOps**）文化中，使用容器、微服务和 CI/CD 等技术的应用。因此，当一个 GitOps
    工具被设计为在云原生环境中运行时——例如 Kubernetes 集群——你就可以找到该概念的交集。
- en: A GitOps tool can help you to automate the CD process for your Kubernetes applications.
    Tools such as Argo CD or Flux can help you to implement GitOps for your applications.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: GitOps 工具可以帮助你自动化 Kubernetes 应用程序的持续交付过程。像 Argo CD 或 Flux 这样的工具可以帮助你为你的应用实现
    GitOps。
- en: But in this chapter, we are going to focus more on applications that run in
    low-resource environments using ARM processors. In this case, Flux has support
    for ARM while Argo CD doesn’t. This chapter focuses on implementing GitOps with
    Flux using ARM devices. So, let’s get started with a brief introduction to Flux
    in the next section.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 但在本章中，我们将更侧重于运行在低资源环境下、使用 ARM 处理器的应用。在这种情况下，Flux 支持 ARM，而 Argo CD 不支持。本章将重点介绍如何在
    ARM 设备上使用 Flux 实现 GitOps。因此，让我们在下一节开始时简要介绍 Flux。
- en: Flux and its architecture
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Flux 及其架构
- en: 'The Flux website, [https://fluxcd.io](https://fluxcd.io), says: “*Flux is a
    set of continuous and progressive delivery solutions for Kubernetes that are open
    and extensible*.” Flux gives you the ability to have your Kubernetes clusters
    in sync with the source that contains declarative definitions of your applications,
    commonly stored in Git repositories.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Flux 网站 [https://fluxcd.io](https://fluxcd.io) 上写道：“*Flux 是一组针对 Kubernetes 的持续和渐进交付解决方案，它是开放和可扩展的*。”
    Flux 使您能够将 Kubernetes 集群与包含应用程序声明式定义的源保持同步，这些定义通常存储在 Git 仓库中。
- en: 'Flux also uses the Kubernetes API to manage its objects. It also uses its own
    GitOps Toolkit, which gives you the tools to build a CD system on top of Kubernetes.
    You can see how Flux works in the following diagram:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Flux 还使用 Kubernetes API 来管理其对象。它还使用自己的 GitOps 工具包，为您提供构建 Kubernetes 上 CD 系统的工具。您可以在以下图中看到
    Flux 是如何工作的：
- en: '![Figure 7.2 – Flux architecture'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.2 – Flux 架构'
- en: '](img/B16945_07_02.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_07_02.jpg)'
- en: Figure 7.2 – Flux architecture
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.2 – Flux 架构
- en: This diagram reflects a typical workflow for GitOps, starting with a commit
    and a GitOps tool that is constantly checking for changes in the application’s
    definitions—in this case, YAML files. When Flux detects this change, it automatically
    provisions for the reconciliation of your applications, based on declarative definitions.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 该图反映了 GitOps 的典型工作流，从提交开始，GitOps 工具不断检查应用程序定义的变化——在这种情况下是 YAML 文件。当 Flux 检测到此变化时，它会自动根据声明式定义为您的应用程序进行协调配置。
- en: 'To bring essential functionalities to GitOps, Flux provides the following main
    features:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为 GitOps 提供必要的功能，Flux 提供以下主要特性：
- en: Support for Git repositories of multiple providers
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持多个提供商的 Git 仓库
- en: Supported integrations for tools such as Kustomize and Helm
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持 Kustomize 和 Helm 等工具的集成
- en: Event-triggered and periodic reconciliation
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件触发和周期性协调
- en: Integration with Kubernetes **role-based access control** (**RBAC**)
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 Kubernetes **基于角色的访问控制** (**RBAC**) 集成
- en: Alerting external systems (webhook senders)
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 警报外部系统（Webhook 发送器）
- en: External events handling (webhook receivers)
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部事件处理（Webhook 接收器）
- en: Automated container image updates to Git (image scanning and patching)
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动容器镜像更新到 Git（图像扫描和修补）
- en: As a GitOps tool for Kubernetes, Flux could be installed on ARM devices. In
    this way, Flux could be a good match for edge computing. But first, let’s look
    at how Flux matches edge computing requirements.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 Kubernetes 的 GitOps 工具，Flux 可以安装在 ARM 设备上。这样，Flux 可以很好地与边缘计算匹配。但首先，让我们看看
    Flux 如何满足边缘计算要求。
- en: 'Flux matches edge computing requirements for the following reasons:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Flux 满足边缘计算要求的原因如下：
- en: Has less complexity for GitOps compared with tools such as Argo CD, Tekton,
    and others
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 Argo CD、Tekton 等工具相比，GitOps 的复杂性较低
- en: Can be installed on ARM devices for low-resource environments
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以安装在低资源环境的 ARM 设备上
- en: Requires low resource consumption to operate
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作时消耗较低资源
- en: This is how Flux works and how it matches edge computing requirements. Now,
    let’s see how we are going to organize our applications to implement GitOps for
    the edge using Flux in the next section.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 Flux 如何工作以及它如何满足边缘计算要求。现在，让我们看看如何组织我们的应用程序，在下一节中使用 Flux 实现边缘计算的 GitOps。
- en: Designing GitOps with Flux for edge applications
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Flux 为边缘应用程序设计 GitOps
- en: 'We are going to implement GitOps for edge computing with Flux, but first, we
    have to explain the whole workflow and the main parts of this implementation.
    For this, let’s explore the following diagram, which explains the components and
    workflow of GitOps, implementing an image automation updater for your applications:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Flux 为边缘计算实现 GitOps，但首先，我们需要解释整个工作流和这一实现的主要部分。为此，让我们探索以下图表，它解释了 GitOps
    的组件和工作流，为您的应用程序实现图像自动化更新器：
- en: '![Figure 7.3 – Flux GitOps implementation using image updater feature](img/B16945_07_03.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.3 – 使用图像更新器功能实现 Flux GitOps](img/B16945_07_03.jpg)'
- en: Figure 7.3 – Flux GitOps implementation using image updater feature
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.3 – 使用图像更新器功能实现 Flux GitOps
- en: 'Our GitOps workflow implementation has the following steps:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 GitOps 工作流实现有以下步骤：
- en: A developer changes the application and submits changes with a PR to be merged
    into the main branch. You could make changes and push them directly to the main
    branch, but this is not a good practice since you may have submitted broken or
    unreviewed changes. In later examples of this chapter, we use GitHub to host our
    Git repository.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开发者更改应用程序并提交变更，通过 PR 将变更合并到主分支。你可以直接更改并推送到主分支，但这不是一个好的实践，因为你可能提交了破坏性或未经审查的更改。在本章后面的示例中，我们使用
    GitHub 来托管我们的 Git 仓库。
- en: The repository has activated GitHub Actions and triggered a small pipeline just
    to build an image.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仓库已启用 GitHub Actions，并触发了一个简单的管道，仅用于构建镜像。
- en: An image is built in the pipeline and tagged with a new version, then it is
    pushed to the public Docker registry. In most business scenarios, you have to
    use private repositories in the cloud or on-premises.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 镜像会在管道中构建并标记为新版本，然后推送到公共 Docker 注册表。在大多数业务场景中，你必须使用云端或本地的私有仓库。
- en: The image updater feature checks for new changes and tags for previous newly
    generated images that your application is going to use.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 镜像更新器功能会检查新更改和为先前生成的镜像标签进行标记，以便你的应用程序使用这些镜像。
- en: Once Flux detects the new image, it looks for files configured to be updated
    with the new image tag. Once Flux updates the files’ definitions with the new
    tag, the changes are pushed to the repository.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦 Flux 检测到新镜像，它会查找配置为使用新镜像标签更新的文件。一旦 Flux 使用新标签更新了文件定义，变更将被推送到仓库。
- en: Flux detects changes in the definition of files that were updated with the new
    image tag. Then, Flux triggers a reconciliation process to update your applications.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Flux 检测到已更新的新镜像标签的文件定义的更改。然后，Flux 会触发协调过程以更新你的应用程序。
- en: Objects in the Kubernetes cluster associated with the definition files are updated.
    Then, your application will run with the new image.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Kubernetes 集群中与定义文件相关联的对象会被更新。然后，应用程序将使用新镜像运行。
- en: 'To implement the GitOps workflow just described, we are assuming the next networking
    and GitHub configurations:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现刚才描述的 GitOps 工作流，我们假设以下网络和 GitHub 配置：
- en: Single node K3s clusters using the `192.168.0.0/24` network so that they can
    access the same network. You can use a different private network such as the `172.16.0.0/16`
    or `10.0.0.0/8` networks, for example.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `192.168.0.0/24` 网络的单节点 K3s 集群，使它们能够访问同一网络。你也可以使用其他私有网络，例如 `172.16.0.0/16`
    或 `10.0.0.0/8` 网络。
- en: Each cluster is using MetalLB as the bare metal load balancer service, using
    different IP ranges for load balancing. Cluster 1 is using IP addresses in the
    range of `192.168.0.51-60`, cluster 2 is using `192.168.0.61-70`, and cluster
    3 is using `192.168.0.71-80` to do some basic IP address distribution for this
    network. The first addresses are typically used by the default load balancer of
    Traefik, so this IP address could be different in your network. Take a look at
    [*Chapter 5*](B16945_05_Final_PG.xhtml#_idTextAnchor097), *K3s Homelab for Edge
    Computing Experiments*, to configure MetalLB using the same or similar IP ranges.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个集群都使用 MetalLB 作为裸金属负载均衡服务，使用不同的 IP 范围进行负载均衡。集群 1 使用 `192.168.0.51-60` 范围的
    IP 地址，集群 2 使用 `192.168.0.61-70`，集群 3 使用 `192.168.0.71-80` 来进行此网络的基本 IP 地址分配。前几个地址通常由
    Traefik 的默认负载均衡器使用，因此在你的网络中，这些 IP 地址可能会不同。请参考 [*第 5 章*](B16945_05_Final_PG.xhtml#_idTextAnchor097)，*用于边缘计算实验的
    K3s 家庭实验室*，以使用相同或类似的 IP 范围配置 MetalLB。
- en: 'You have a GitHub account and a token to access or create repositories in your
    account. Here’s what we’re doing:'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你有一个 GitHub 账户和一个令牌，可以访问或创建你账户中的仓库。我们正在做的是：
- en: We are using the https://github.com/sergioarmgpl/fluxappdemo GitHub repository,
    which contains a basic Helm chart to deploy in our clusters. You can find more
    details about the application in the repository link.
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用 https://github.com/sergioarmgpl/fluxappdemo GitHub 仓库，该仓库包含一个基本的 Helm chart
    用于在我们的集群中部署。你可以在仓库链接中找到更多关于该应用程序的详细信息。
- en: With this, we are ready to start implementing this scenario in the next section.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 至此，我们已经准备好在下一部分开始实现这个场景。
- en: Creating a simple monorepo for GitOps
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为 GitOps 创建一个简单的单仓库
- en: 'For our GitOps implementation, we are going to use a monorepo. We have chosen
    to do this to reduce the management of many repositories and centralize all work
    in a single repository. For this use case, we are going to organize our cluster
    configurations and applications’ definitions in a single repository. Let’s explore
    the following screenshot to understand how our new repository will be organized:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的GitOps实现，我们将使用单一代码库（monorepo）。我们选择这样做是为了减少管理多个仓库，并将所有工作集中在一个仓库中。对于这个用例，我们将把集群配置和应用程序定义组织在一个仓库中。让我们通过以下截图来了解我们的新仓库将如何组织：
- en: '![Figure 7.4 – Monorepo structure'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.4 – 单一代码库结构'
- en: '](img/B16945_07_04.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_07_04.jpg)'
- en: Figure 7.4 – Monorepo structure
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.4 – 单一代码库结构
- en: 'Now let’s describe what each directory and file does, as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们描述一下每个目录和文件的作用，如下所示：
- en: '`clusters`: This is the main directory that contains all the configuration
    of Flux and deployments in separated directories.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clusters`：这是包含所有Flux配置和部署的主目录，配置分布在不同的子目录中。'
- en: '`cluster1`-`cluster3`: Inside these folders, the definitions of Flux and your
    applications are organized. `cluster1` will be the cluster in charge of updating
    YAML definitions for the application for all clusters. So, `cluster2` and `cluster3`
    don’t need the image updater components in their installations.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cluster1`-`cluster3`：这些文件夹内部，Flux和您的应用程序的定义被组织起来。`cluster1`将负责更新所有集群的应用程序的YAML定义。因此，`cluster2`和`cluster3`在其安装中不需要镜像更新组件。'
- en: '`flux-system`: Contains Flux definitions to deploy it. Includes the `gotk-components.yaml`,
    `gotk-sync.yaml`, and `kustomization.yaml` files, which configure different components
    to implement our image updater GitOps workflow.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flux-system`：包含部署Flux的Flux定义。包括`gotk-components.yaml`、`gotk-sync.yaml`和`kustomization.yaml`文件，这些文件配置不同的组件，以实施我们的镜像更新GitOps工作流。'
- en: '`manifests`: Contains the necessary definitions to deploy your application.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`manifests`：包含部署您的应用程序所需的定义。'
- en: '`namespace.yaml`: Creates a production namespace for your application.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`namespace.yaml`：为您的应用程序创建一个生产命名空间。'
- en: '`helm-charts.yaml`: A definition to access your Helm chart.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`helm-charts.yaml`：用于访问您的Helm图表的定义。'
- en: '`helm-release.yaml`: Includes a definition and values to deploy your application
    using the Helm chart defined in `helm-charts.yaml`.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`helm-release.yaml`：包含使用`helm-charts.yaml`中定义的Helm图表部署应用程序的定义和值。'
- en: '`app-demo-registry.yaml`: Contains an image to scan on Docker Hub.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app-demo-registry.yaml`：包含一个在Docker Hub上扫描的镜像。'
- en: '`app-demo-policy.yaml`: Contains an expression to check inside files where
    you want to update the container image.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app-demo-policy.yaml`：包含一个表达式，用于检查您希望更新容器镜像的文件。'
- en: '`flux-system-automation.yaml`: Looks for a folder to update changes.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flux-system-automation.yaml`：查找文件夹以更新更改。'
- en: This repository is designed for your applications. It is a monorepo for a production
    environment with different clusters. You can do more complex configurations using
    Kustomize, but that is out of the scope of this chapter.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这个仓库是为您的应用程序设计的。它是一个用于生产环境的单一代码库，包含多个集群。您可以使用Kustomize进行更复杂的配置，但那超出了本章的范围。
- en: Important Note
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'You can also find some approaches to how to organize your repositories on the
    Flux website. For more information, check out the following link: [https://fluxcd.io/docs/guides/repository-structure](https://fluxcd.io/docs/guides/repository-structure).'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在Flux网站上找到有关如何组织仓库的一些方法。更多信息，请访问以下链接：[https://fluxcd.io/docs/guides/repository-structure](https://fluxcd.io/docs/guides/repository-structure)。
- en: Now, it’s time to see the workflow that we are going to implement in our GitOps
    use case for edge computing.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候查看我们将在边缘计算的GitOps用例中实施的工作流了。
- en: Understanding the application and GitHub Actions
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解应用程序和GitHub Actions
- en: 'To start implementing GitOps with Flux, we have to set a small pipeline that
    creates a container image every time we modify the source code of our application.
    To simplify our work, this configuration will be based on the [https://github.com/sergioarmgpl/fluxappdemo](https://github.com/sergioarmgpl/fluxappdemo)
    repository, which contains a simple Python application using Flask. This application
    has two directories: `src` and `.github/workflows`. The `src` directory contains
    the source of the application, while the `workflows` folder has the GitHub Actions
    configuration.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用 Flux 实现 GitOps，我们必须设置一个小型流水线，每当修改我们应用程序的源代码时就创建一个容器镜像。为了简化我们的工作，此配置将基于
    [https://github.com/sergioarmgpl/fluxappdemo](https://github.com/sergioarmgpl/fluxappdemo)
    仓库，该仓库包含一个使用 Flask 的简单 Python 应用程序。此应用程序有两个目录：`src` 和 `.github/workflows`。`src`
    目录包含应用程序的源代码，而 `workflows` 文件夹包含 GitHub Actions 配置。
- en: 'So, let’s first explore the `src` directory. You can see an overview of the
    repository in the following screenshot:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们首先探索 `src` 目录。你可以在以下截图中看到仓库的概述：
- en: '![Figure 7.5 – fluxappdemo repository'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.5 – fluxappdemo 仓库'
- en: '](img/B16945_07_05.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_07_05.jpg)'
- en: Figure 7.5 – fluxappdemo repository
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.5 – fluxappdemo 仓库
- en: 'The `src` directory contains the following files:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`src` 目录包含以下文件：'
- en: '`Dockerfile`: This has the configuration to build a Docker image; it also calls
    a small unit test included in `tests.py`.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Dockerfile`: 这个文件包含了构建 Docker 镜像的配置；它还调用了 `tests.py` 中包含的一个小单元测试。'
- en: '`Operations.py`: This has a class called `Operations` that contains a `runningInfo`
    method. This function receives two parameters: `msg1` and `msg2`. With these parameters,
    it returns the following message: `Running app <msg1> in namespace <msg2>`.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Operations.py`: 这个文件有一个名为 `Operations` 的类，其中包含一个名为 `runningInfo` 的方法。此函数接收两个参数：`msg1`
    和 `msg2`。通过这些参数，它返回以下消息：`Running app <msg1> in namespace <msg2>`。'
- en: '`build_push.sh`: This is a sample script to build an image manually. It receives
    two parameters; the first one is your Docker username and the second is a tag
    for the image. You can run it as follows:'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`build_push.sh`: 这是一个手动构建镜像的示例脚本。它接收两个参数；第一个是你的 Docker 用户名，第二个是镜像的标签。你可以如下运行它：'
- en: '[PRE0]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`index.py`: This is the main Python file to run our application. It has a function
    called `hello_world` that gets the `MESSAGE` and `NAMESPACE` environment variables
    and then calls the `runningInfo` function to return the following message: `Running
    app <MESSAGE> in namespace <NAMESPACE>`. So, every time you call the application
    in `route /` and port `5000`, it will show the message, then `route /_health return
    Running message, /_version a custom message`. You could use this route to explore
    the application. To take a look at the code, check out the following link: [https://github.com/sergioarmgpl/fluxappdemo/blob/main/src/index.py](https://github.com/sergioarmgpl/fluxappdemo/blob/main/src/index.py).'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index.py`: 这是运行我们应用程序的主要 Python 文件。它有一个名为 `hello_world` 的函数，获取 `MESSAGE` 和
    `NAMESPACE` 环境变量，然后调用 `runningInfo` 函数返回以下消息：`Running app <MESSAGE> in namespace
    <NAMESPACE>`。因此，每当你在 `route /` 和端口 `5000` 调用应用程序时，它将显示该消息，然后 `/ _health` 路由返回运行消息，`/
    _version` 返回一个自定义消息。你可以使用这个路由来探索应用程序。要查看代码，请访问以下链接：[https://github.com/sergioarmgpl/fluxappdemo/blob/main/src/index.py](https://github.com/sergioarmgpl/fluxappdemo/blob/main/src/index.py)。'
- en: '`requirements.txt`: Includes all the necessary libraries to run the code.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`requirements.txt`: 包含运行代码所需的所有库。'
- en: '`tests.py`: This file includes a small test for the `runningInfo` function
    inside the `Operations` class.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tests.py`: 这个文件包含了 `Operations` 类中 `runningInfo` 函数的一个小测试。'
- en: 'You can see an overview of the `src` directory in the following screenshot:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下截图中看到 `src` 目录的概述：
- en: '![Figure 7.6 – src directory with source code'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.6 – 包含源代码的 src 目录'
- en: '](img/B16945_07_06.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_07_06.jpg)'
- en: Figure 7.6 – src directory with source code
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.6 – 包含源代码的 src 目录
- en: '`.github/workflows` contains a `github-actions-fluxappdemo.yml` file. This
    file contains a CI pipeline definition that builds and pushes your container ARM
    image using the following name and tag format: `<DOCKER_USER>/fluxappdemo:RELEASE.YEAR-MONTH-DAYT-HOUR-MINUTE-SECONDZ`.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`.github/workflows` 包含一个 `github-actions-fluxappdemo.yml` 文件。该文件包含了一个 CI 管道的定义，用于构建和推送你的容器
    ARM 镜像，使用以下名称和标签格式：`<DOCKER_USER>/fluxappdemo:RELEASE.YEAR-MONTH-DAYT-HOUR-MINUTE-SECONDZ`。'
- en: '`DOCKER_USER` is your Docker username.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`DOCKER_USER` 是你的 Docker 用户名。'
- en: 'You can see this file in the following screenshot:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下截图中看到这个文件：
- en: '![Figure 7.7 – GitHub Actions workflows file'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.7 – GitHub Actions workflows 文件'
- en: '](img/B16945_07_07.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_07_07.jpg)'
- en: Figure 7.7 – GitHub Actions workflows file
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.7 – GitHub Actions workflows 文件
- en: With this brief explanation, let’s move on to configure your own pipeline to
    build and push your container image.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个简要说明，我们继续配置你自己的流水线来构建并推送你的容器镜像。
- en: Building your container image with GitHub Actions
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 GitHub Actions 构建容器镜像
- en: 'To build and push your image with GitHub Actions, you should follow the given
    steps:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 GitHub Actions 构建并推送你的镜像，应该按照以下步骤进行：
- en: Fork the [https://github.com/sergioarmgpl/fluxappdemo](https://github.com/sergioarmgpl/fluxappdemo)
    repository. This is going to create a repository named `https://github.com/<GITHUB_USER>/fluxappdemo`.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Fork [https://github.com/sergioarmgpl/fluxappdemo](https://github.com/sergioarmgpl/fluxappdemo)
    仓库。这将创建一个名为 `https://github.com/<GITHUB_USER>/fluxappdemo` 的仓库。
- en: '`GITHUB_USER` is the username of your GitHub account. Replace it with your
    own username.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`GITHUB_USER` 是你的 GitHub 账户的用户名。用你自己的用户名替换它。'
- en: 'Create `DOCKERHUB_USERNAME` and `DOCKERHUB_TOKEN` secrets for your repository.
    These will be created as encrypted secrets for a repository. To create the secrets,
    open the following page in the browser: `https://github.com/<GITHUB_USER>/fluxappdemo/settings/secrets/actions`.'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为你的仓库创建`DOCKERHUB_USERNAME`和`DOCKERHUB_TOKEN`密钥。这些将作为加密的密钥为仓库创建。要创建这些密钥，请在浏览器中打开以下页面：`https://github.com/<GITHUB_USER>/fluxappdemo/settings/secrets/actions`。
- en: 'After adding the variables, your repository will look like this:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 添加变量后，你的仓库将如下所示：
- en: '![Figure 7.8 – GitHub repository secrets'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.8 – GitHub 仓库密钥'
- en: '](img/B16945_07_08.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_07_08.jpg)'
- en: Figure 7.8 – GitHub repository secrets
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.8 – GitHub 仓库密钥
- en: 'Modify the `.github/workflows/github-actions-fluxappdemo.yml` file in the last
    line in the `tags` section with your user. It will look like this:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `.github/workflows/github-actions-fluxappdemo.yml` 文件中的最后一行，在 `tags` 部分替换为你的用户名。它将如下所示：
- en: '[PRE1]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, `DOCKER_USER` is your Docker Hub username.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`DOCKER_USER` 是你的 Docker Hub 用户名。
- en: Commit and push the changes.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交并推送更改。
- en: '(*Optional*) To check whether your GitHub action is running, you can check
    out the following link: `https://github.com/<GITHUB_USER>/fluxappdemo/actions`.
    The following screenshot provides an example of how this should look:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (*可选*) 要检查你的 GitHub action 是否在运行，可以访问以下链接：`https://github.com/<GITHUB_USER>/fluxappdemo/actions`。以下截图提供了该页面的示例：
- en: '![Figure 7.9 – GitHub Actions showing current workflows'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.9 – GitHub Actions 显示当前工作流'
- en: '](img/B16945_07_09.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_07_09.jpg)'
- en: Figure 7.9 – GitHub Actions showing current workflows
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.9 – GitHub Actions 显示当前工作流
- en: '(*Optional*) To check new container tags created for your account, check out
    the following link: `https://hub.docker.com/repository/docker/<DOCKERHUB_USERNAME>/fluxappdemo/tags`.
    The following screenshot provides an example of how this should look:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (*可选*) 要查看为你的账户创建的新容器标签，请访问以下链接：`https://hub.docker.com/repository/docker/<DOCKERHUB_USERNAME>/fluxappdemo/tags`。以下截图提供了该页面的示例：
- en: '![Figure 7.10 – Docker Hub tags for a repository'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.10 – 仓库的 Docker Hub 标签'
- en: '](img/B16945_07_10.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_07_10.jpg)'
- en: Figure 7.10 – Docker Hub tags for a repository
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.10 – 仓库的 Docker Hub 标签
- en: (*Optional*) To test whether your GitHub Actions pipeline works, modify the
    source code of the application inside the `src` directory and commit and push
    the changes. Then, a new workflow will be running.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (*可选*) 为了测试你的 GitHub Actions 流水线是否正常工作，修改 `src` 目录中的应用源代码并提交和推送更改。然后，新的工作流将开始运行。
- en: Important Note
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'For more information about creating encrypted secrets for a repository, check
    out the following link: [https://docs.github.com/en/actions/security-guides/encrypted-secrets](https://docs.github.com/en/actions/security-guides/encrypted-secrets).
    To create a token to access your Docker Hub account to push new images, check
    out this link: [https://docs.docker.com/docker-hub/access-tokens](https://docs.docker.com/docker-hub/access-tokens).
    Finally, to fork a repository, check out the following link: [https://docs.github.com/en/get-started/quickstart/fork-a-repo](https://docs.github.com/en/get-started/quickstart/fork-a-repo).'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解有关为仓库创建加密密钥的更多信息，请访问以下链接：[https://docs.github.com/en/actions/security-guides/encrypted-secrets](https://docs.github.com/en/actions/security-guides/encrypted-secrets)。要创建一个访问
    Docker Hub 账户的令牌以推送新镜像，请访问此链接：[https://docs.docker.com/docker-hub/access-tokens](https://docs.docker.com/docker-hub/access-tokens)。最后，要
    fork 一个仓库，请查看以下链接：[https://docs.github.com/en/get-started/quickstart/fork-a-repo](https://docs.github.com/en/get-started/quickstart/fork-a-repo)。
- en: Now that we have configured a GitHub Actions pipeline to automate the creation
    of a container image with its tags, it’s time to start configuring Flux to complete
    our GitOps workflow in the next section.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经配置了 GitHub Actions 流水线来自动创建带有标签的容器镜像，接下来是配置 Flux 以完成我们的 GitOps 工作流。
- en: Installing and configuring Flux for GitOps
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装并配置 Flux 以进行 GitOps
- en: 'Before configuring Flux, let’s understand what we are going to install in this
    section. In this section, we are going to install Flux and its components that
    detect new image tags for your container. Once new images are detected, Flux modifies
    the `HelmRelease` definition file inside your deployment repository. Then, Flux
    will automatically reconcile changes, updating the application deployment defined
    in this `HelmRelease` file that is using the Helm chart published at [https://sergiops.xyz/helm-charts](https://sergiops.xyz/helm-charts).
    Together with the GitHub Actions workflow defined in the *Building your container
    image with GitHub Actions* section, the complete workflow is going to work like
    this:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置 Flux 之前，先了解我们将在本节中安装什么。在本节中，我们将安装 Flux 及其组件，这些组件会检测容器的最新镜像标签。一旦检测到新镜像，Flux
    会修改您部署仓库中 `HelmRelease` 的定义文件。然后，Flux 会自动协调更改，更新在该 `HelmRelease` 文件中定义的应用程序部署，该文件使用的是发布于
    [https://sergiops.xyz/helm-charts](https://sergiops.xyz/helm-charts) 的 Helm 图表。与在
    *使用 GitHub Actions 构建容器镜像* 部分中定义的 GitHub Actions 工作流一起，完整的工作流将像这样运行：
- en: The user pushes changes from its local repository copy to the original source
    code repository located at `https://github.com/<GITHUB_USER>/fluxappdemo`.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户将本地仓库的更改推送到位于 `https://github.com/<GITHUB_USER>/fluxappdemo` 的原始源代码仓库。
- en: GitHub Actions builds and pushes the image to Docker Hub at `https://hub.docker.com/repository/docker/<DOCKER_USER>/fluxappdemo`.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: GitHub Actions 会在 `https://hub.docker.com/repository/docker/<DOCKER_USER>/fluxappdemo`
    将镜像构建并推送到 Docker Hub。
- en: Flux detects the new tag generated when the image was updated.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Flux 会检测到更新镜像时生成的新标签。
- en: Flux replaces the `HelmRelease` definition with the new tag. For this, Flux
    modifies, commits, and pushes the changes to the repository with your deployment
    definitions at `https://github.com/<GITHUB_USER>/fluxdemo-production.git`.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Flux 会用新的标签替换 `HelmRelease` 定义。为此，Flux 会修改、提交并将更改推送到位于 `https://github.com/<GITHUB_USER>/fluxdemo-production.git`
    的部署定义仓库。
- en: Flux reconciles the changes, and the application is updated with the new image
    tag.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Flux 会协调更改，应用程序将使用新的镜像标签进行更新。
- en: Note
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The `<GITHUB_USER>` and `<DOCKER_USER>` values have to be replaced with your
    GitHub and Docker users.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '`<GITHUB_USER>` 和 `<DOCKER_USER>` 值必须替换为您的 GitHub 和 Docker 用户。'
- en: 'To start building this use case scenario with Flux, you have to install the
    Flux **CLI**. Here’s how to do it:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用 Flux 构建此用例场景，您必须安装 Flux **CLI**。以下是操作方法：
- en: 'To install the Flux CLI on Linux, run the following command:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在 Linux 上安装 Flux CLI，请运行以下命令：
- en: '[PRE2]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Or, if you have macOS, you can install Flux with Homebrew using the following
    command:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 或者，如果您使用 macOS，您可以使用以下命令通过 Homebrew 安装 Flux：
- en: '[PRE3]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Important Note
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: You can check for alternative installation at the official website, [https://fluxcd.io](https://fluxcd.io).
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在官方网站 [https://fluxcd.io](https://fluxcd.io) 查找替代安装方法。
- en: 'Now, you have to install the Flux image updater feature, necessary to automate
    the CD process every time that a new image tag is detected. To install Flux and
    all necessary components, follow the given steps on each cluster:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您需要安装 Flux 图像更新器功能，这对于每次检测到新的镜像标签时自动化 CD 过程是必要的。要安装 Flux 和所有必要的组件，请按照每个集群上给定的步骤操作：
- en: 'Set your environment variables; in this case, we need to set our GitHub user
    and the token of our GitHub account, as follows:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置您的环境变量；在此情况下，我们需要设置我们的 GitHub 用户和 GitHub 账户的令牌，如下所示：
- en: '[PRE4]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'Check out the following link to create a token for your GitHub account: [https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token).'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下链接以为您的 GitHub 账户创建令牌：[https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token)。
- en: 'Let’s set the email address and username associated with your GitHub account.
    For this, run the following commands:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们设置与您的 GitHub 账户相关联的电子邮件地址和用户名。为此，请运行以下命令：
- en: '[PRE5]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, install Flux and all the necessary components for image updater implementation.
    For this, run the following commands:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，安装 Flux 和所有必要的组件以实现图像更新器功能。为此，运行以下命令：
- en: '[PRE6]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `repository` parameter is the name of the GitHub repository to create— for
    example, `fluxdemo-production`.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`repository` 参数是要创建的 GitHub 仓库的名称——例如，`fluxdemo-production`。'
- en: '`CLUSTER_N` is an environment variable with the number of the cluster where
    you are installing Flux—for example, `CLUSTER_1`. The YAML files used to install
    Flux will be stored inside the `clusters/production/<CLUSTER_N>` directory.'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`CLUSTER_N` 是一个环境变量，表示您安装 Flux 的集群编号，例如 `CLUSTER_1`。用于安装 Flux 的 YAML 文件将存储在
    `clusters/production/<CLUSTER_N>` 目录中。'
- en: The process will show the message **waiting for Kustomization “flux-system/flux-system”
    to be reconciled**. Once Flux is installed, you will see the message **all components
    are healthy**.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 该过程将显示消息 **等待 Kustomization "flux-system/flux-system" 被调和**。一旦 Flux 安装完成，您将看到消息
    **所有组件都正常**。
- en: This command is going to create a repository with your user account. The link
    to access this repository will be `https://github.com/<GITHUB_USER>/fluxdemo-production.git`.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将创建一个与您的用户帐户关联的仓库。访问该仓库的链接将是 `https://github.com/<GITHUB_USER>/fluxdemo-production.git`。
- en: '`GITHUB_USER` is the name of your GitHub username. Replace this value in the
    link with your own.'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`GITHUB_USER` 是您的 GitHub 用户名。请将此值替换为您自己的用户名。'
- en: Important Note
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Omit the `--components-extra=image-reflector-controller,image-automation-controller`
    line for `cluster2` and `cluster3`. `cluster1` is in charge of updating the application
    definitions for all clusters. Also refer to the help for this command by running
    `flux bootstrap github --help` for more options, especially if you are using an
    organization or enterprise or another versioning tool.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `cluster2` 和 `cluster3`，省略 `--components-extra=image-reflector-controller,image-automation-controller`
    这一行。`cluster1` 负责更新所有集群的应用定义。如果您使用的是组织、企业或其他版本控制工具，运行 `flux bootstrap github --help`
    可以查看该命令的帮助文档，获取更多选项。
- en: 'Clone the new repository and change it into this directory:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 克隆新的仓库并将其切换到此目录：
- en: '[PRE7]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This is going to ask you to enter your username and password to clone your
    repository. This will be used in the next steps to customize and create deployment
    definitions. Proceed as follows:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这将要求您输入用户名和密码来克隆您的仓库。在接下来的步骤中，这些将用于自定义和创建部署定义。按照以下步骤进行：
- en: 'Create a namespace for your application inside a directory called `clusters/<clusterN>/manifests`.
    For this, run the following commands:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在名为 `clusters/<clusterN>/manifests` 的目录中为您的应用程序创建一个命名空间。为此，运行以下命令：
- en: '[PRE8]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create a Helm chart source Flux object to point to your own Helm chart, as
    follows:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个指向您自己 Helm 图表的 Helm chart 源 Flux 对象，如下所示：
- en: '[PRE9]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In this example, we are using a Helm chart with a sample application in [https://sergiops.xyz/helm-charts](https://sergiops.xyz/helm-charts).
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们使用的是位于 [https://sergiops.xyz/helm-charts](https://sergiops.xyz/helm-charts)
    的示例应用程序 Helm 图表。
- en: 'Create a Flux `HelmRelease` object to create a YAML definition for your application
    deployment, as follows:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 Flux `HelmRelease` 对象，为您的应用程序部署创建 YAML 定义，如下所示：
- en: '[PRE10]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let’s add a section called `values` to the file by running the following command:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行以下命令，我们将向文件中添加一个名为`values`的部分：
- en: '[PRE11]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Pay attention to the commented line `# {"$imagepolicy": "flux-system:app-demo"}`.'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '请注意注释行 `# {"$imagepolicy": "flux-system:app-demo"}`。'
- en: 'This part tells Flux to find where to replace the image with the new tag. Finally,
    the file will look like this:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分告诉 Flux 去寻找替换图像的新标签。最终，文件将如下所示：
- en: '[PRE12]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This `HelmRelease` object provided with the Flux installation provides a declarative
    way to parametrize a deployment. In this case, the values inside the `values`
    section correspond to the different parameters that you can send to our Helm chart.
    The creation of Helm charts is out of the scope of this book, but you can find
    good resources at the end of the chapter in the *Further reading* section.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 这个通过 Flux 安装提供的 `HelmRelease` 对象提供了一种声明性方法来参数化部署。在这种情况下，`values` 部分中的值对应于您可以传递给我们
    Helm 图表的不同参数。Helm 图表的创建超出了本书的范围，但您可以在本章结尾的 *进一步阅读* 部分找到相关资源。
- en: Note
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: You can check the repository at [https://github.com/sergioarmgpl/fluxdemo-production](https://github.com/sergioarmgpl/fluxdemo-production)
    to see the final results of creating and modifying configuration files for your
    demo application with the previous commands.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以访问 [https://github.com/sergioarmgpl/fluxdemo-production](https://github.com/sergioarmgpl/fluxdemo-production)
    仓库，查看使用前述命令创建和修改演示应用程序配置文件的最终结果。
- en: This `HelmRelease` object is stored in a file and is the object that you need
    to modify, commit, and push your changes to your repository. After this, Flux
    detects the changes and updates your application. This file is inside of your
    repository in the `clusters/cluster$CLUSTER_N/manifests/helm-release.yaml` path.
    In this way, you can test how Flux updates your application, where the `CLUSTER_N`
    variable is the cluster number that you are modifying.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `HelmRelease` 对象存储在一个文件中，你需要修改它、提交并推送你的更改到你的仓库。之后，Flux 会检测到更改并更新你的应用程序。这个文件位于你的仓库路径
    `clusters/cluster$CLUSTER_N/manifests/helm-release.yaml` 中。通过这种方式，你可以测试 Flux 如何更新你的应用程序，其中
    `CLUSTER_N` 变量是你正在修改的集群编号。
- en: Important Note
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: If you want to create your own Helm chart repository, you can check out [https://helm.sh/docs/topics/chart_repository](https://helm.sh/docs/topics/chart_repository)
    and go to the *GitHub Pages e*[*xample* section. In this example,](https://sergiops.xyz/helm-charts)
    we are using the charts located at [https://sergiops.xyz/helm-charts](https://sergiops.xyz/helm-charts)
    and [https://github.com/sergioarmgpl/helm-charts/tree/gh-pages](https://github.com/sergioarmgpl/helm-charts/tree/gh-pages).
    You can check or clone this repository to create your own.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想创建自己的 Helm chart 仓库，可以查看 [https://helm.sh/docs/topics/chart_repository](https://helm.sh/docs/topics/chart_repository)，并进入
    *GitHub Pages 示例*[*部分*](https://sergiops.xyz/helm-charts)。在这个例子中，我们使用的是位于 [https://sergiops.xyz/helm-charts](https://sergiops.xyz/helm-charts)
    和 [https://github.com/sergioarmgpl/helm-charts/tree/gh-pages](https://github.com/sergioarmgpl/helm-charts/tree/gh-pages)
    的 charts。你可以检查或克隆这个仓库来创建你自己的。
- en: '*You can omit Steps 11-13 if you are configuring cluster2 and cluster3 because
    cluster1 will be in charge of updating all the deployments’ definitions.*'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你正在配置 cluster2 和 cluster3，你可以省略步骤 11-13，因为 cluster1 会负责更新所有部署的定义。*'
- en: '(*Optional*) Create an image repository to detect new releases or tags for
    your image, as follows:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (*可选*) 创建一个镜像仓库来检测你的镜像的新版本或标签，如下所示：
- en: '[PRE13]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '(*Optional*) Create an image policy to define an expression to match to detect
    new image tags or releases from your image registry. This use case is going to
    use the following format to tag the new Docker images:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (*可选*) 创建一个镜像策略，定义一个表达式来匹配并检测来自你的镜像仓库的新镜像标签或版本。此用例将使用以下格式来标记新的 Docker 镜像：
- en: '`RELEASE.YEAR-MONTH-DAYT-HOUR-MINUTE-SECONDZ`'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '`RELEASE.YEAR-MONTH-DAYT-HOUR-MINUTE-SECONDZ`'
- en: 'This convention is based on RFC3339 and ISO 7601, which refers to the standards
    for date and time on the internet:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 这个约定基于 RFC3339 和 ISO 7601，它们是互联网上日期和时间的标准：
- en: '[PRE14]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '(*Optional*) Now, it’s time to put all the pieces together. For this, you have
    to create an `ImageUpdateAutomation` object, which is going to detect new releases
    and update the images in your deployments’ YAML definitions. In the following
    case, it’s going to check the folder clusters to update all the YAML definitions:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (*可选*) 现在，到了将所有部分结合起来的时候。为此，你需要创建一个 `ImageUpdateAutomation` 对象，它将检测新的版本并更新你部署
    YAML 定义中的镜像。在以下案例中，它将检查 clusters 文件夹以更新所有的 YAML 定义：
- en: '[PRE15]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: You have to change the `<AUTHOR_NAME>` and `<AUTHOR_EMAIL>` tags with your own
    values. This will appear as the commit author when Flux pushes changes for image
    tags.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要将 `<AUTHOR_NAME>` 和 `<AUTHOR_EMAIL>` 标签替换为你自己的值。这将在 Flux 推送镜像标签更改时显示为提交作者。
- en: 'Commit and push the changes to the repository with the following commands:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令提交并推送更改到仓库：
- en: '[PRE16]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `push` command is going to ask you for the user and the token that you previously
    created, to access your GitHub account.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '`push` 命令将要求你输入你之前创建的用户和令牌，以访问你的 GitHub 账户。'
- en: Now, you can build a new image, and you can wait for Flux to automatically update
    your `HelmRelease` file with the new image detected. After 1 minute or more, you
    can expect the change to have been made. You will expect to see a commit in your
    repository made by Flux with the new tag detected, to troubleshoot whether the
    image updater is working.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以构建一个新的镜像，并等待 Flux 自动更新你的 `HelmRelease` 文件，检测到新的镜像。1 分钟或更长时间后，你应该会看到变更已生效。你可以预期看到
    Flux 在你的仓库中提交了新的标签检测记录，以帮助排查镜像更新器是否正常工作。
- en: '(*Optional*) You can force Flux to apply this configuration by running the
    Flux reconciliation process with the following command:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (*可选*) 你可以通过运行以下命令强制 Flux 应用此配置，启动 Flux 的协调过程：
- en: '[PRE17]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The Helm chart is going to provision a `LoadBalancer` service type. To find
    the provisioned IP address, run the following command:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Helm chart 将配置一个 `LoadBalancer` 服务类型。要查找配置的 IP 地址，请运行以下命令：
- en: '[PRE18]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Here, the `IP_LOADBALANCER` variable contains the IP of the load balancer created
    by the `HelmRelease` definition, which is the endpoint for your application in
    this cluster. You can check the value by running the following command:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`IP_LOADBALANCER` 变量包含由 `HelmRelease` 定义创建的负载均衡器的 IP 地址，这是你在该集群中应用程序的端点。你可以通过运行以下命令来检查其值：
- en: '[PRE19]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Using *Figure 7.4* as a reference, you will expect to see an IP address such
    as `192.168.0.52`.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 以*图 7.4*为参考，你应该会看到一个类似 `192.168.0.52` 的 IP 地址。
- en: 'Let’s say that, for example, the returned IP is `192.168.0.52`. You can access
    your application with the following URL: `http://192.168.0.52:5000`. You can test
    to access other routes—for example, `/_version` or `/_health`.'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设返回的 IP 是 `192.168.0.52`，你可以通过以下 URL 访问你的应用程序：`http://192.168.0.52:5000`。你可以测试访问其他路由，例如
    `/_version` 或 `/_health`。
- en: Now that you have installed Flux, you can start testing the auto-reconciliation
    to update your files by committing and pushing the changes of your `HelmRelease`
    files. The auto-reconciliation updates everything Flux detects in new image tags
    of your applications. This process is described in the previous section, *Designing
    GitOps with Flux for edge applications*. After this, you can continue with the
    next section to learn how to troubleshoot your installation.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经安装了 Flux，可以开始测试自动协调，通过提交和推送 `HelmRelease` 文件的更改来更新你的文件。自动协调会更新 Flux 检测到的所有应用程序的新镜像标签。此过程在前一节中已有描述，*使用
    Flux 为边缘应用程序设计 GitOps*。之后，你可以继续下一节，学习如何排查安装问题。
- en: Troubleshooting Flux installations
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 排查 Flux 安装问题
- en: 'There are a few useful commands that can help you to troubleshoot your installation;
    in this section, we’re going to find out what these are. So, let’s proceed as
    follows:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些有用的命令可以帮助你排查安装问题；在本节中，我们将了解这些命令。接下来，让我们按照以下步骤进行：
- en: 'To reconcile Flux changes in Flux, run the following command:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要协调 Flux 中的变更，请运行以下命令：
- en: '[PRE20]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This command is going to show new tags detected for your container, and how
    these new tags are set up in your `HelmRelease` YAML definition file.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将显示为你的容器检测到的新标签，以及这些新标签是如何在 `HelmRelease` YAML 定义文件中设置的。
- en: 'To check the image repositories in Flux, run the following command:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要检查 Flux 中的镜像仓库，请运行以下命令：
- en: '[PRE21]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'To check the current policy in your cluster, run the following command:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要检查集群中当前的策略，请运行以下命令：
- en: '[PRE22]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'To get all images configured in your Flux installation, run the following command:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要获取在 Flux 安装中配置的所有镜像，请运行以下命令：
- en: '[PRE23]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'To reconcile YAML definition changes in your cluster, run the following command:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要协调集群中 YAML 定义的更改，请运行以下命令：
- en: '[PRE24]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'To watch in real time how image detection and updates to your repositories
    are running, run the following command:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要实时查看镜像检测以及如何更新你的仓库，请运行以下命令：
- en: '[PRE25]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'To check your application deployments, run the following command:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要检查你的应用程序部署情况，请运行以下命令：
- en: '[PRE26]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'To check your Pods, run the following command:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要检查你的 Pods，请运行以下命令：
- en: '[PRE27]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: You have now learned these essential commands to troubleshoot your Flux system.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经掌握了这些关键命令，用于排查你的 Flux 系统问题。
- en: In the next section, we are going to explore Flux monitoring dashboards.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探索 Flux 监控仪表板。
- en: Installing Flux monitoring dashboards
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Flux 监控仪表板
- en: 'Flux itself doesn’t include a graphical user interface for management but integrates
    some useful dashboards using Prometheus and Grafana to visualize the state of
    your deployments. These dashboards have to be installed on each cluster. To install
    this feature, follow the next steps:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: Flux 本身不包含用于管理的图形用户界面，但它集成了一些有用的仪表板，利用 Prometheus 和 Grafana 来可视化你的部署状态。这些仪表板需要在每个集群上安装。要安装此功能，请按照以下步骤进行：
- en: 'Configure the Git repository that contains monitoring stack definitions for
    its installation. The configuration will listen for changes every 30 minutes.
    The code is illustrated here:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置包含监控堆栈定义的 Git 仓库进行安装。该配置将每 30 分钟监听一次更改。代码如下所示：
- en: '[PRE28]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Install `kube-prometheus-stack`, which is going to be used to configure Prometheus
    for your dashboards. This stack will be installed in the `monitoring` namespace.
    The code is illustrated in the following snippet:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 `kube-prometheus-stack`，它将用于为你的仪表板配置 Prometheus。这个堆栈将安装在 `monitoring` 命名空间中。代码如下所示：
- en: '[PRE29]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Install Grafana and configure your Flux dashboards, storing data in Prometheus
    and visualizing this across preconfigured dashboards in Grafana. The code is illustrated
    in the following snippet:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 Grafana 并配置你的 Flux 仪表板，将数据存储在 Prometheus 中，并在 Grafana 中通过预配置的仪表板进行可视化。代码如下所示：
- en: '[PRE30]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Access the dashboards using the next command:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用下列命令访问仪表板：
- en: '[PRE31]'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This is going to open port `3000` of your dashboard. Remember that the IP address
    that you have to access is the IP of the node where you are accessing this dashboard.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开你的仪表板的`3000`端口。记住，你需要访问的 IP 地址是你访问该仪表板的节点的 IP 地址。
- en: 'Access the dashboard using the following URL: `http://<NODE_IP_ADDRESS>:3000/d/flux-control-plane`.'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下 URL 访问仪表板：`http://<NODE_IP_ADDRESS>:3000/d/flux-control-plane`。
- en: '`NODE_IP_ADDRESS` is the IP address cluster node where you are running the
    command shown in this step.'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '`NODE_IP_ADDRESS` 是你运行此步骤中命令的集群节点的 IP 地址。'
- en: 'To access the dashboard, use the next credentials:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要访问仪表板，请使用以下凭据：
- en: 'Username: `admin`'
  id: totrans-277
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户名：`admin`
- en: 'Password: `prom-operator`'
  id: totrans-278
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密码：`prom-operator`
- en: 'The login screen will look like this:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 登录页面将如下所示：
- en: '![Figure 7.11 – Grafana login form'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.11 – Grafana 登录表单'
- en: '](img/B16945_07_11.jpg)'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_07_11.jpg)'
- en: Figure 7.11 – Grafana login form
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.11 – Grafana 登录表单
- en: Once you are logged in, you will be redirected to the dashboard URL previously
    mentioned.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 登录后，你将被重定向到之前提到的仪表板 URL。
- en: 'Once the dashboard is opened, it will look like this:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦仪表板打开，它将显示如下：
- en: '![Figure 7.12 – Grafana Flux control plane dashboard'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.12 – Grafana Flux 控制平面仪表板'
- en: '](img/B16945_07_12.jpg)'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_07_12.jpg)'
- en: Figure 7.12 – Grafana Flux control plane dashboard
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.12 – Grafana Flux 控制平面仪表板
- en: Important Note
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: 'Remember that you can customize this dashboard and create your own dashboards.
    For more information about this dashboard, you can visit the following link: [https://fluxcd.io/docs/guides/monitoring](https://fluxcd.io/docs/guides/monitoring).'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，你可以自定义此仪表板并创建自己的仪表板。有关此仪表板的更多信息，请访问以下链接：[https://fluxcd.io/docs/guides/monitoring](https://fluxcd.io/docs/guides/monitoring)。
- en: Your Grafana dashboards are now installed successfully, and you can see the
    state of your deployments. Now, it’s time to learn how to uninstall Flux in the
    next section.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 你的 Grafana 仪表板现在已成功安装，你可以查看部署的状态。现在，是时候在下一部分学习如何卸载 Flux 了。
- en: Uninstalling Flux
  id: totrans-291
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 卸载 Flux
- en: 'Once you don’t need the Flux installation anymore, you can run the following
    command:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你不再需要 Flux 安装，可以运行以下命令：
- en: '[PRE32]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This is going to uninstall Flux from your Kubernetes cluster. Now, it’s time
    to finish the chapter.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 这将从你的 Kubernetes 集群中卸载 Flux。现在，是时候结束本章了。
- en: Summary
  id: totrans-295
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how GitOps works and how you can implement GitOps
    using GitHub Actions and Flux. Flux could be useful to automate your deployments
    on an edge environment, using a single Git repository. For this, we learned how
    Flux can implement GitOps to update your applications at the edge using the HelmRelease
    object and the image updater feature. Flux can manage your application cluster
    without using an external way to expose the Kubernetes API of your cluster, which
    is the case with tools such as Argo CD. This can be translated into cost savings
    and a more effective tool for edge environments using ARM devices. Argo CD, on
    the other hand, doesn’t support ARM and needs a way to expose your Kubernetes
    API from your cluster to connect the cluster to Argo CD using a public load balancer
    or a virtual machine on the internet. In the next chapter, we are going to learn
    how to add basic observability and traffic splitting to your applications using
    Linkerd.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了 GitOps 的工作原理，以及如何使用 GitHub Actions 和 Flux 实现 GitOps。Flux 可以帮助你自动化边缘环境中的部署，使用单一的
    Git 仓库。为此，我们学习了 Flux 如何使用 HelmRelease 对象和镜像更新功能，在边缘更新应用程序，进而实现 GitOps。Flux 可以在不使用外部方式暴露
    Kubernetes 集群 API 的情况下管理你的应用集群，这与 Argo CD 等工具的做法不同。这样可以节省成本，并为使用 ARM 设备的边缘环境提供更有效的工具。另一方面，Argo
    CD 不支持 ARM，需要通过公共负载均衡器或互联网上的虚拟机暴露 Kubernetes API，才能将集群连接到 Argo CD。在下一章中，我们将学习如何使用
    Linkerd 为你的应用程序添加基本的可观察性和流量分配。
- en: Questions
  id: totrans-297
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Here are a few questions to validate your new knowledge:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些问题来验证你新学到的知识：
- en: How can GitHub Actions help me to implement GitOps at the edge?
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub Actions 如何帮助我在边缘实现 GitOps？
- en: How can I implement GitOps using Flux?
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我如何使用 Flux 实现 GitOps？
- en: Which other features does Flux have that can help me to implement GitOps?
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Flux 还有哪些其他功能可以帮助我实现 GitOps？
- en: How can I troubleshoot my Helm releases with Flux?
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 Flux 排查我的 Helm 发布问题？
- en: How can I apply this simple use case in my edge computing scenarios?
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将这个简单的用例应用到我的边缘计算场景中？
- en: How can I structure my repositories for GitOps?
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我如何为 GitOps 构建我的仓库结构？
- en: Further reading
  id: totrans-305
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'You can refer to the following references for more information on the topics
    covered in this chapter:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以参考以下文献，获取本章所涉及主题的更多信息：
- en: '*What is GitOps?*: [https://www.gitops.tech](https://www.gitops.tech)'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*什么是 GitOps?*： [https://www.gitops.tech](https://www.gitops.tech)'
- en: '*Dev Leaders Compare Continuous Delivery vs Continuous Deployment vs Continuous
    Integration*: [https://stackify.com/continuous-delivery-vs-continuous-deployment-vs-continuous-integration](https://stackify.com/continuous-delivery-vs-continuous-deployment-vs-continuous-integration)'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*开发领导者比较持续交付、持续部署与持续集成*： [https://stackify.com/continuous-delivery-vs-continuous-deployment-vs-continuous-integration](https://stackify.com/continuous-delivery-vs-continuous-deployment-vs-continuous-integration)'
- en: 'Quickstart on using GitHub: [https://docs.github.com/en/get-started/quickstart](https://docs.github.com/en/get-started/quickstart)'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub 快速入门： [https://docs.github.com/en/get-started/quickstart](https://docs.github.com/en/get-started/quickstart)
- en: 'GitHub Actions to build container images: [https://github.com/docker/build-push-action](https://github.com/docker/build-push-action)'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 GitHub Actions 构建容器镜像： [https://github.com/docker/build-push-action](https://github.com/docker/build-push-action)
- en: 'Docker Hub: [https://hub.docker.com](https://hub.docker.com)'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Docker Hub: [https://hub.docker.com](https://hub.docker.com)'
- en: 'Creating secrets on GitHub Actions: [https://docs.github.com/en/actions/security-guides/encrypted-secrets](https://docs.github.com/en/actions/security-guides/encrypted-secrets)'
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 GitHub Actions 上创建密钥： [https://docs.github.com/en/actions/security-guides/encrypted-secrets](https://docs.github.com/en/actions/security-guides/encrypted-secrets)
- en: 'Date and time internet standard: [https://datatracker.ietf.org/doc/html/rfc3339](https://datatracker.ietf.org/doc/html/rfc3339)'
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日期和时间互联网标准： [https://datatracker.ietf.org/doc/html/rfc3339](https://datatracker.ietf.org/doc/html/rfc3339)
- en: 'Creating a public Helm chart with GitHub Pages: [https://medium.com/@mattiaperi/create-a-public-helm-chart-repository-with-github-pages-49b180dbb417](mailto:https://medium.com/@mattiaperi/create-a-public-helm-chart-repository-with-github-pages-49b180dbb417)'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 GitHub Pages 创建公共 Helm Chart： [https://medium.com/@mattiaperi/create-a-public-helm-chart-repository-with-github-pages-49b180dbb417](mailto:https://medium.com/@mattiaperi/create-a-public-helm-chart-repository-with-github-pages-49b180dbb417)
- en: 'Creating a Helm chart repository: [https://harness.io/blog/helm-chart-repo](https://harness.io/blog/helm-chart-repo
    )'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 Helm Chart 仓库： [https://harness.io/blog/helm-chart-repo](https://harness.io/blog/helm-chart-repo)
- en: 'How to structure your Flux repositories: [https://fluxcd.io/docs/guides/repository-structure](https://fluxcd.io/docs/guides/repository-structure)'
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何构建你的 Flux 仓库： [https://fluxcd.io/docs/guides/repository-structure](https://fluxcd.io/docs/guides/repository-structure)
- en: '*Flux Documentation*: [https://fluxcd.io/docs](https://fluxcd.io/docs)'
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Flux 文档*： [https://fluxcd.io/docs](https://fluxcd.io/docs)'
- en: 'Flux Helm releases: [https://fluxcd.io/docs/guides/helmreleases](https://fluxcd.io/docs/guides/helmreleases)'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Flux Helm 发布： [https://fluxcd.io/docs/guides/helmreleases](https://fluxcd.io/docs/guides/helmreleases)
- en: 'Flux, Kustomize, and Helm example: [https://github.com/fluxcd/flux2-kustomize-helm-example](https://github.com/fluxcd/flux2-kustomize-helm-example)'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Flux、Kustomize 和 Helm 示例： [https://github.com/fluxcd/flux2-kustomize-helm-example](https://github.com/fluxcd/flux2-kustomize-helm-example)

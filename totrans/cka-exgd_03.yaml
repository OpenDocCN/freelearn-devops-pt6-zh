- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Maintaining Kubernetes Clusters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kubernetes has been the most vibrant platform in the community over the past
    few years and it has maintained a good release cadence, which makes Kubernetes
    maintenance important in order to enable organizations that work with Kubernetes
    to take advantage of its latest features. This chapter introduces different approaches
    for maintaining a Kubernetes cluster while providing practical lessons on performing
    upgrades for Kubernetes clusters, etcd backup, and etcd restore. It covers 25%
    of the CKA exam content.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Demystifying Kubernetes cluster maintenance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing a version upgrade on a Kubernetes cluster using kubeadm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with etcd
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backing up and restoring etcd
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Demystifying Kubernetes cluster maintenance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before April 2021, Kubernetes had maintained quite a steady and sound cadence
    of quarterly releases throughout the year. Despite the strong growth and incredible
    popularity in the community, this was reduced to three releases per year. Fewer
    releases still mean that a regular maintenance window should be scheduled within
    the organization for the upgrade of security patches, and to take full advantage
    of enhancements and new features.
  prefs: []
  type: TYPE_NORMAL
- en: 'A general maintenance window contains the upgraded Kubernetes cluster version.
    We can easily break the task to be performed into two parts:'
  prefs: []
  type: TYPE_NORMAL
- en: Upgrading the master node, which contains the control plane
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrading the worker node
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrading the master node is simple if you have only one master node. However,
    most enterprise-grade customers may have a couple of master nodes for better resilience.
    We should be aware that working with an organization as a Kubernetes administrator
    is sometimes more challenging than working with other ones. A general reference
    of master node management would be the two typologies of high availability mentioned
    in [*Chapter 2*](B18201_02.xhtml#_idTextAnchor035), *Installing and Configuring
    Kubernetes Clusters*. The conventional way to upgrade the master node is to upgrade
    one at a time regardless of the number of master nodes in your current cluster.
    You will need to upgrade the kubeadm and kubectl versions.
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to worker node upgrade, as we mentioned in the previous chapter,
    the worker node is where your workloads are actually running; therefore, you need
    to upgrade both the kubeadm and kubelet versions. Keep in mind that you need to
    upgrade one at a time when it comes to multiple worker nodes available in the
    current Kubernetes cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have a separate etcd cluster set up, you will need to upgrade the etcd
    store version, which is not covered in the CKA exam. In general, you need to check
    out the official documentation to know more about Kubernetes components and version
    compatibility here: [https://kubernetes.io/releases/version-skew-policy/](https://kubernetes.io/releases/version-skew-policy/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Another general task for Kubernetes cluster maintenance is backup and restore
    with the etcd store. The etcd stores cluster data that includes cluster state
    information such as pod state data, node state data, and the configurations critical
    for Kubernetes. In most cases, as a Kubernetes administrator, you will need to
    perform the following two key tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Back up the etcd store regularly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restore the etcd from cluster failure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The following section will firstly walk you through the general process of upgrading
    the Kubernetes cluster with kubeadm. This is one of the most time-consuming questions
    in the actual CKA exam. Make sure you practice it a few times until you master
    the general upgrade process as well as how to perform upgrade tasks by following
    the official Kubernetes documentation. Note that update policies vary for managed
    Kubernetes distributions by cloud vendors. Please check their respective official
    documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, we’ll take a look at how to back up and restore an etcd cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Upgrading a Kubernetes cluster using kubeadm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Kubernetes versions follow semantic versioning, and are expressed in three
    parts:'
  prefs: []
  type: TYPE_NORMAL
- en: Major version
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Minor version
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Patch version
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For example, Kubernetes version 1.23.3 means that it is Kubernetes 1.23 minor
    version with patch number 3\. Similarly, 1.22 and 1.21 are both minor versions
    like 1.23.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing this book, Kubernetes 1.19+ has one year of path support.
    That means for Kubernetes 1.23, released in January 2022, the end of support will
    be February 2023\. For Kubernetes 1.8 and older, the support patch was shortened
    to roughly 9 months instead. **Special interest group** (**SIG**) releases manage
    the Kubernetes release cycle, and the best way to keep track of the release schedule
    is to follow them at [https://github.com/kubernetes/sig-release/tree/master/releases](https://github.com/kubernetes/sig-release/tree/master/releases)
    and read the change log at [https://github.com/kubernetes/kubernetes/tree/master/CHANGELOG](https://github.com/kubernetes/kubernetes/tree/master/CHANGELOG)
    to keep up to date.
  prefs: []
  type: TYPE_NORMAL
- en: If you would like to upgrade a cluster to a targeted version, check out supported
    versions at [https://kubernetes.io/releases/version-skew-policy/#supported-versions](https://kubernetes.io/releases/version-skew-policy/#supported-versions).
  prefs: []
  type: TYPE_NORMAL
- en: Upgrading the master node
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before you upgrade the master node, make sure you know the purpose of your
    upgrade and have backed up any important components. It is recommended that you
    start with checking out the current version and then determining which version
    to upgrade to. Once decided, we’ll perform the following actions to upgrade the
    master node as depicted in *Figure 2.1*, including upgrading with kubeadm and
    interacting with Kubernetes nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1 – Master node upgrade process  ](img/Figure_3.01_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.1 – Master node upgrade process
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by checking out the current version with the following commands
    once we’re in the master node:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'From the output, we know that we are currently on Kubernetes 2.23.2:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s check out the latest versions available with the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we know the latest versions available:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.2 – Available versions   ](img/Figure_3.02_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.2 – Available versions
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have made up our mind about which version we want to upgrade to, let’s
    start prepping for the upgrade process:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start by upgrading kubeadm where we will need to use the following
    command to replace *x* in 1.23.x-00 with the latest patch version, which is 1.23.3
    in our case:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the `apt-mark` command is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can check the version of kubeadm with the `kubeadm version` command
    and see whether it’s 1.23.3:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We use the `kubeadm upgrade plan` command to check whether the current cluster
    can be upgraded and the available versions that it can be upgraded to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'As shown in *Figure 3.3*, I can upgrade the kubelet and control plane components
    such as the API server, scheduler, and controller manager from 1.23.2 to 1.23.3:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.3 – kubeadm upgrade plan  ](img/Figure_3.03_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.3 – kubeadm upgrade plan
  prefs: []
  type: TYPE_NORMAL
- en: 'If we decide to take action to upgrade the current cluster from 1.23.2 to 1.23.3,
    we can use the following command. Note that after `apply`, you just replace 1.23.3
    for any future available versions that you wish to upgrade to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: To perform the upgrade operation smoothly, we recommend you get root permission
    in the exam by running the `sudo su` command.
  prefs: []
  type: TYPE_NORMAL
- en: In your daily upgrade task, you can use `sudo` and input your password to perform
    this operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have given the command, you will get a message stating that the upgrade
    was a success:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.4 – Control plane successfully upgraded ](img/Figure_3.04_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.4 – Control plane successfully upgraded
  prefs: []
  type: TYPE_NORMAL
- en: 'We then need to cordon the node, so we drain the workloads to prepare the node
    for maintenance. We cordon a node called `cloudmelonplaysrv` with the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'It will display a bunch of pods being evicted, which means those pods are being
    eliminated from the cordoned worker nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.5 – Draining workloads on the node ](img/Figure_3.05_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.5 – Draining workloads on the node
  prefs: []
  type: TYPE_NORMAL
- en: If you’re using the `kubectl get no` command, the node will be marked as `schedulingDisabled`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We use the following command to upgrade the kubelet and kubectl:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Restart the kubelet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can uncordon the node and it will make the workloads schedulable again
    on the node that’s being upgraded, called `cloudmelonplaysrv`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This command will return the node that is now shown as `uncordoned`.
  prefs: []
  type: TYPE_NORMAL
- en: Upgrading the worker node
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Since the worker node is where your workloads are actually up and running,
    we need to perform an upgrade one at a time and then replicate the same operation
    to all the other worker nodes available in the current Kubernetes cluster. *Figure
    3.6* depicts the general upgrade workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.6 – Draining workloads on the node ](img/Figure_3.06_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.6 – Draining workloads on the node
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start with upgrading the kubeadm from 1.23.2 to 1.23.3 with the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'For a worker node, we upgrade the kubelet, which also upgrades the local kubelet
    configuration, with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, we need to cordon the node so we drain the workloads to prepare
    the node for maintenance. Here, we are cordoning a node called `cloudmelonplayclient`
    using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: We can then use the `kubectl get no` command to check the node status. It will
    be marked as `schedulingDisabled`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We use the following command to upgrade the kubelet and kubectl just as we
    did for the master node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Restart the kubelet for the changes to take effect:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we can `uncordon` the node and it will make the workloads schedulable
    again on the node called `cloudmelonplayclient`. It will return the node that
    is now shown as `uncordoned`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: We have now concluded the upgrade process for worker nodes. After the upgrade
    process, please make sure you use the `kubectl get nodes` command to make sure
    all the nodes have the `ready` status.
  prefs: []
  type: TYPE_NORMAL
- en: Working with etcd
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cluster data is stored in a key-value store in a Kubernetes cluster called etcd.
    The cluster data includes cluster state information such as pod state data, node
    state data, and configurations. As this data is critical for Kubernetes to orchestrate
    the workloads to the desired state, it stands to reason that it should be backed
    up periodically.
  prefs: []
  type: TYPE_NORMAL
- en: 'To access the etcd cluster inside the Kubernetes cluster, we can run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This will list all the pods currently running in the `kube-system` namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.7 – Check the current etcd pod status ](img/Figure_3.07_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.7 – Check the current etcd pod status
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections, we’ll take a closer look at the etcd cluster pod
    and learn all the related information that will be useful in the actual CKA exam.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the ETCD cluster pod
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get a closer look at the etcd pod that we have, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, to get detailed information for an etcd pod called `etcd-cloudmelonplaysrv`,
    the command would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'It returns the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.8 – Check the current etcd pod  ](img/Figure_3.08_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.8 – Check the current etcd pod
  prefs: []
  type: TYPE_NORMAL
- en: 'In the figure, you can see the following important information about etcd:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Among all the configurable parameters, the following will come in handy in
    your daily work with etcd:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--advertise-client-urls` tells etcd to accept incoming requests from the clients.
    It accepts a list of URLs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--cert-file` is where we specify the client server `TLS cert` file path.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--key-file` is where we specify the client server `TLS key` file path.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`- -trusted-ca-file` is where we specify the client server `TLS trusted CA
    cert` file path.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are key flags that will authenticate your request from the client with
    secure communication. You will need them to check the etcd status, backup, and
    restore etcd cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: Access to etcd is equivalent to getting root permission in the cluster. We make
    sure the authentication request is only going through the API server.
  prefs: []
  type: TYPE_NORMAL
- en: To know more about other configurable parameters, please check out [https://etcd.io/docs/v3.5/op-guide/configuration/](https://etcd.io/docs/v3.5/op-guide/configuration/).
  prefs: []
  type: TYPE_NORMAL
- en: Listing etcd cluster members
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the information that we acquired from the `kubectl describe pod` command,
    we can list the members of the etcd cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'It returns the information about members. In our case, we have only one result
    because we are working with a single master node. Our command will look like the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The output describes columns such as `ID` and `Status` of the etcd cluster,
    the etcd cluster name, and the peer and client address.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can form the output automatically in tabular form with `--write-out=table`.
    It will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.9 – The current etcd member list  ](img/Figure_3.09_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.9 – The current etcd member list
  prefs: []
  type: TYPE_NORMAL
- en: Notice that the client address is the same as the value of the `--advertise-client-urls`
    URL in the output of `kubectl describe pod`.
  prefs: []
  type: TYPE_NORMAL
- en: Checking the etcd cluster status
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can use the following command to check the etcd cluster status and write
    the output in tabular form. Note that using the correct etcdctl API version, we’re
    on API version 3 in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The following command is used to access an etcd pod from the Kubernetes cluster
    and check out the status of the etcd pod in the multi-node etcd cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use the information that you acquired from `etcdctl member list` in
    this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ETCDCTL_API` is the etcdctl version.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`- - endpoints` are the client addresses of your etcd members if you have multiple
    master nodes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this chapter, however, we are showing off a single master node and it contains
    only one etcd member. Therefore, this command to access an etcd pod called `etcd-cloudmelonplaysrv`
    from the Kubernetes cluster and check out the status of the etcd pod will look
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'It will look like the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.10 – The current etcd member list  ](img/Figure_3.10_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.10 – The current etcd member list
  prefs: []
  type: TYPE_NORMAL
- en: 'From the output of `kubectl describe pod < etcd-podname>`, we also learn that
    we have two `listen client` IPs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'As we’re checking the etcd cluster status inside the Kubernetes cluster, we
    can also use the internal endpoint address `https://127.0.0.1:2379` to check the
    etcd cluster status. The following command can be used to access an etcd pod named
    `etcd-cloudmelonplaysrv` from the Kubernetes cluster and check out the status
    of the etcd pod with the internal endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'And it returns the information regarding the etcd cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.11 – The current etcd member list  ](img/Figure_3.11_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.11 – The current etcd member list
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we’ll explore interacting with the etcd cluster from
    the client outside of the Kubernetes cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Installing etcd
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To access etcd outside of the Kubernetes cluster, you will need to install etcdctl.
    You can do so by following the instructions in this section. Please note, however,
    that this is not part of the CKA exam.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, we’ll need to get the etcd binary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you finish the installation, you can use the following command to verify
    the current version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The command returns the current etcdctl client version and the API version
    in the following manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.12 – Check the current etcdctl version outside of the Kubernetes
    cluster ](img/Figure_3.12_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.12 – Check the current etcdctl version outside of the Kubernetes cluster
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, you can use the following command to check the kubectl version in
    the Kubernetes cluster. When you’re using the `kubectl exec` command, it executes
    directly on the pod named `etcd-cloudmelonplaysrv` located in the `kube-system`
    namespace. We can use the following command to execute the `etcdctl version` Bash
    command to get the version of the etcd store:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The returned result is similar to the etcdctl client version and the API version:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.13 – Check the current etcdctl version in the Kubernetes cluster
    ](img/Figure_3.13_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.13 – Check the current etcdctl version in the Kubernetes cluster
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, once you have etcdctl installed, you can check the etcd store status
    by running the following command and you’ll get the endpoint status:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Backing up etcd
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With all the groundwork we have laid out in the previous sections, we can generalize
    the backup etcd process as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: SSH to the etcd cluster node. It could be a separate node or the same as the
    master node. In the CKA exam, it’s likely you’ll be starting in the master node,
    where etcdctl is installed; thus, this step is optional.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check out the etcd status. You could acquire the necessary information from
    the `kubectl describe <etcd-podname>` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Perform the etcd backup.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exit the master node. This may not be necessary in the actual CKA exam.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The general process is captured in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.14 – Backup etcd process ](img/Figure_3.14_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.14 – Backup etcd process
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s look at the detailed process of how to back up etcd:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you need to connect to the master node or the etcd cluster node, you can
    use the `ssh master-0` command or the `ssh username@<nodeIP>` command. Please
    note that this step is optional. Following is an example of a user named `packtuser`
    using `ssh` to connect to a node with the IP address `10.10.11.20`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Check the etcd status using the following command from outside the cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The output returned will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.15 – Check the etcd status from outside of the cluster ](img/Figure_3.15_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.15 – Check the etcd status from outside of the cluster
  prefs: []
  type: TYPE_NORMAL
- en: 'Back up the etcd cluster using the `etcdctl snapshot save` command. It will
    look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'You will need to authenticate from the API server with secure communication
    as you’re backing up from outside the Kubernetes cluster. For this, you can use
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The returned output shows that you have backed up the etcd store successfully:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.16 – Backup etcd store ](img/Figure_3.16_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.16 – Backup etcd store
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify the snapshot via the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The following figure shows the status of the etcd cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.17 – Check the etcd store with the snapshot backup ](img/Figure_3.17_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.17 – Check the etcd store with the snapshot backup
  prefs: []
  type: TYPE_NORMAL
- en: Restoring etcd
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To restore etcd clusters, you can follow the process depicted in *Figure 3.18*.
    Note that if you have any API server instances running, you need to stop them
    before performing the restore operation. You may restart the API server instances
    after the etcd is restored:'
  prefs: []
  type: TYPE_NORMAL
- en: SSH to the etcd cluster node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the etcd status.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Restore the etcd backup.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Exit the master node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.18 – Restore etcd process ](img/Figure_3.18_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.18 – Restore etcd process
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have a snapshot present, you can restore etcd from the previous backup
    operation using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The returned output shows that the etcd store has been restored successfully:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.19 – Restored etcd store with an existing snapshot ](img/Figure_3.19_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.19 – Restored etcd store with an existing snapshot
  prefs: []
  type: TYPE_NORMAL
- en: You have now completed the etcd restore process.
  prefs: []
  type: TYPE_NORMAL
- en: Note that this approach can be used if you want to restore the etcd cluster
    from a different patch version. It is important to back up etcd regularly, then
    perform the restore operation to recover the cluster data from a failed cluster.
    To learn more about etcd cluster backup and restore for Kubernetes, please check
    out [https://kubernetes.io/docs/tasks/administer-cluster/configure-upgrade-etcd/](https://kubernetes.io/docs/tasks/administer-cluster/configure-upgrade-etcd/).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covers one of the most common jobs of a Kubernetes administrator
    – that is, maintaining and upgrading Kubernetes clusters. Similar to cluster installation,
    this is also one of the most time-consuming tasks in the CKA exam. Again, practice
    makes perfect. The HA topology for a Kubernetes cluster in [*Chapter 2*](B18201_02.xhtml#_idTextAnchor035)*,
    Installing and Configuring Kubernetes Cluster,* helps you understand what you
    are going to upgrade and how to do it. If needed, go back to [*Chapter 1*](B18201_01.xhtml#_idTextAnchor015)*,
    Kubernetes Overview*, and make sure that you have a good understanding of the
    Kubernetes components. This way, you will know how and what’s needed to upgrade
    the control plane and worker nodes.
  prefs: []
  type: TYPE_NORMAL
- en: Compared to cluster upgrades, backup and restore etcd is one of the best-in-value
    questions in the CKA exam as it is simple to answer with a high-value score. Thoroughly
    practicing what we’ve learned in this chapter will help you overcome any challenges
    in the exam.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll talk about application scheduling and life cycle
    management, where we will revisit some important Kubernetes objects and concepts,
    and touch upon how they play out both in the CKA exam and in real life. Stay tuned!
  prefs: []
  type: TYPE_NORMAL
- en: Mock CKA scenario-based practice test
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You have two virtual machines, `master-0` and `worker-0`. Please complete the
    following mock scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scenario 1**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SSH to the `master-0` node, check the current kubeadm version, and upgrade to
    the latest kubeadm version. Check out the current kubectl version, and upgrade
    to the latest kubectl version.
  prefs: []
  type: TYPE_NORMAL
- en: '**Scenario 2**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SSH to `worker-0` node, check out the current kubeadm version, and upgrade to
    the latest kubeadm version. Check out the current kubelet version, and upgrade
    to the latest kubelet version.
  prefs: []
  type: TYPE_NORMAL
- en: '**Scenario 3**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SSH to the `master-0` node and back up the etcd store.
  prefs: []
  type: TYPE_NORMAL
- en: '**Scenario 4**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SSH to the `master-0` node and restore the etcd store to the previous backup.
  prefs: []
  type: TYPE_NORMAL
- en: You can find all the scenario resolutions in [*Appendix*](B18201_Appendix_A.xhtml#_idTextAnchor386)
    *- Mock CKA scenario-based practice test resolutions* of this book.
  prefs: []
  type: TYPE_NORMAL
- en: FAQs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Where can I find out about the compatible version of Kubernetes components
    with each release?*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to the Kubernetes official documentation to learn about the version skew
    policy: [https://kubernetes.io/releases/version-skew-policy/](https://kubernetes.io/releases/version-skew-policy/).'
  prefs: []
  type: TYPE_NORMAL
- en: '*Where can I learn about the latest developments of the etcd store?*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to [https://etcd.io/](https://etcd.io/), where you will find the latest
    developments of the etcd store. For daemons and guidance on how to get started
    with etcd, please go to the official documentation: [https://etcd.io/docs/](https://etcd.io/docs/).'
  prefs: []
  type: TYPE_NORMAL
- en: '*What is a recommended official Kubernetes article for upgrading a Kubernetes
    cluster?*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'I recommend bookmarking the article *Upgrading the kubeadm*, where you will
    find most key commands and processes: [https://kubernetes.io/docs/tasks/administer-cluster/kubeadm/kubeadm-upgrade/](https://kubernetes.io/docs/tasks/administer-cluster/kubeadm/kubeadm-upgrade/).'
  prefs: []
  type: TYPE_NORMAL
- en: '*What is a recommended official Kubernetes article for backup and restore etcd?*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'I recommend bookmarking the article *Operating etcd clusters for Kubernetes*,
    where you will find all the key commands for etcd backup and restore: [https://kubernetes.io/docs/tasks/administer-cluster/configure-upgrade-etcd/](https://kubernetes.io/docs/tasks/administer-cluster/configure-upgrade-etcd/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 2: Managing Kubernetes'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This part describes how to manage workloads deployed on top of Kubernetes, and
    how to manage the security and networking of Kubernetes clusters to fulfil enterprise
    requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part of the book comprises the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B18201_04.xhtml#_idTextAnchor080)*, Application Scheduling and
    Lifecycle Management*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B18201_05.xhtml#_idTextAnchor149)*, Demystifying Kubernetes Storage*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B18201_06.xhtml#_idTextAnchor192)*, Securing Kubernetes*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B18201_07.xhtml#_idTextAnchor235)*, Demystifying Kubernetes Networking*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL

- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Scaffolding a New Helm Chart
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 搭建一个新的 Helm Chart
- en: In the previous chapter, you learned how to use Helm from an end user perspective,
    leveraging it as a package manager to install applications to Kubernetes. Leveraging
    Helm in this fashion required you to understand how to use the Helm life cycle
    commands (`install`, `upgrade`, `rollback`, and `uninstall`), but it did not require
    you to understand how the Helm chart itself was built. While an understanding
    of the Helm CLI commands is necessary to install and manage applications installed
    by Helm, that level of knowledge alone will not allow you to package your own
    applications into Helm charts.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你从最终用户的角度学习了如何使用 Helm，利用它作为包管理器将应用程序安装到 Kubernetes 中。以这种方式使用 Helm 需要你理解如何使用
    Helm 生命周期命令（`install`、`upgrade`、`rollback` 和 `uninstall`），但并不需要你理解 Helm chart
    本身是如何构建的。虽然理解 Helm CLI 命令对于安装和管理由 Helm 安装的应用程序是必要的，但仅凭这些知识并不足以让你将自己的应用程序打包成 Helm
    charts。
- en: In the second part of this book, starting with this chapter, we will switch
    gears away from being a Helm chart end user and transition into becoming a Helm
    chart developer. We will accomplish this by building a Helm chart from scratch
    over the next few chapters that deploys an instance of the Guestbook application,
    a commonly used sample application within the Kubernetes community. By the end
    of the second part, you will have an understanding of the concepts and experience
    required to write robust Helm charts.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的第二部分，从本章开始，我们将不再作为 Helm chart 的最终用户，而是转向成为 Helm chart 的开发者。我们将通过在接下来的几章中从零开始构建一个
    Helm chart 来完成这一目标，部署一个 Guestbook 应用程序实例，这是 Kubernetes 社区中常用的示例应用程序。到第二部分结束时，你将理解编写稳健的
    Helm charts 所需的概念和经验。
- en: 'In this chapter, we will begin to explore Helm chart development by discussing
    the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将开始探索 Helm chart 开发，讨论以下主题：
- en: Understanding the Guestbook application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 Guestbook 应用程序
- en: Understanding the YAML format
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 YAML 格式
- en: Using `helm create` to scaffold a new Helm chart
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `helm create` 来搭建一个新的 Helm chart
- en: Deploying the scaffolded Guestbook chart
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署搭建好的 Guestbook chart
- en: Exploring the `Chart.yaml` file
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索 `Chart.yaml` 文件
- en: Updating the `Chart.yaml` file
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新 `Chart.yaml` 文件
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This section requires the `minikube` and `helm` binaries to be installed on
    your local machine. The installation and configuration of these tools are covered
    in [*Chapter 2*](B17979_02.xhtml#_idTextAnchor038), *Preparing a Kubernetes and
    Helm Environment*.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本节需要在本地机器上安装 `minikube` 和 `helm` 二进制文件。这些工具的安装和配置可以在 [*第二章*](B17979_02.xhtml#_idTextAnchor038)，*准备
    Kubernetes 和 Helm 环境* 中找到。
- en: Understanding the Guestbook application
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Guestbook 应用程序
- en: Since the second part of this book will be centered around developing a Helm
    chart to deploy the Guestbook application, let’s first understand what this application
    does and what its architecture looks like.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本书的第二部分将集中于开发 Helm chart 来部署 Guestbook 应用程序，首先让我们了解一下这个应用程序的功能以及它的架构。
- en: 'The Guestbook application is a simple **PHP: Hypertext Preprocessor** (**PHP**)
    frontend designed to persist messages to a Redis backend. The frontend consists
    of a dialog box and a **Submit** button, as illustrated in the following screenshot:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 'Guestbook 应用程序是一个简单的 **PHP: 超文本预处理器**（**PHP**）前端，旨在将消息持久化到 Redis 后端。前端由一个对话框和一个
    **提交** 按钮组成，如下图所示：'
- en: '![Figure 4.1 – The Guestbook PHP frontend'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.1 – Guestbook PHP 前端'
- en: '](img/Figure_4.1_B17979.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.1_B17979.jpg)'
- en: Figure 4.1 – The Guestbook PHP frontend
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.1 – Guestbook PHP 前端
- en: 'To interact with this application, users can follow these steps:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要与该应用程序交互，用户可以按照以下步骤操作：
- en: Type a message in the **Messages** dialog box.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **消息** 对话框中输入一条消息。
- en: Click the **Submit** button.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **提交** 按钮。
- en: 'When the **Submit** button is clicked, the message will be saved to the Redis
    database and displayed at the bottom of the page, as shown in the following screenshot:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当点击 **提交** 按钮时，消息将被保存到 Redis 数据库并显示在页面底部，如下图所示：
- en: '![Figure 4.2 – The Guestbook frontend after a new message has been submitted'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.2 – 提交新消息后，Guestbook 前端界面'
- en: '](img/Figure_4.2_B17979.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.2_B17979.jpg)'
- en: Figure 4.2 – The Guestbook frontend after a new message has been submitted
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.2 – 提交新消息后，Guestbook 前端界面
- en: Redis is an in-memory, key-value data store that, for our Helm chart, will be
    clustered to provide data replication. The cluster will consist of one leader
    node that the Guestbook frontend writes to. Once data is persisted, the leader
    will replicate across each of the follower nodes, from which Guestbook replicas
    will read, to retrieve and display the list of previously submitted messages.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Redis 是一个内存中的键值数据存储，在我们的 Helm 图表中，它将被集群化以提供数据复制。该集群将由一个领导节点组成，Guestbook 前端将向该节点写入数据。数据持久化后，领导节点会在每个跟随节点之间进行复制，Guestbook
    副本将从这些节点读取数据，以检索并显示之前提交的消息列表。
- en: 'The following diagram describes how the frontend interacts with Redis:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示说明了前端与 Redis 的交互方式：
- en: '![Figure 4.3 – Guestbook frontend and Redis interaction'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.3 – Guestbook 前端与 Redis 的交互'
- en: '](img/Figure_4.3_B17979.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.3_B17979.jpg)'
- en: Figure 4.3 – Guestbook frontend and Redis interaction
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.3 – Guestbook 前端与 Redis 的交互
- en: With an understanding of how this application works, let’s focus on starting
    our Guestbook Helm chart. We’ll begin with a primer on the YAML format, since
    this format is ubiquitous among the files you will interact with as a Helm chart
    developer.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解应用程序如何工作后，让我们专注于启动我们的 Guestbook Helm 图表。我们将从 YAML 格式的入门开始，因为作为 Helm 图表开发人员，你将与许多使用这种格式的文件交互。
- en: Understanding the YAML format
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 YAML 格式
- en: '**YAML Ain’t Markup Language** (**YAML**) is a file format used to create human-readable
    configuration. It is the file format most used to configure Kubernetes resources
    and is also the format used for many of the files in Helm charts.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**YAML 不是标记语言**（**YAML**）是一种用于创建人类可读配置的文件格式。它是配置 Kubernetes 资源时最常用的文件格式，也是
    Helm 图表中许多文件使用的格式。'
- en: YAML files follow a **key-value** format to declare configuration. Let’s explore
    the YAML key-value construct.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: YAML 文件遵循**键值对**格式来声明配置。让我们来探讨一下 YAML 的键值构造。
- en: Defining key-value pairs
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义键值对
- en: 'One of the most basic examples of a YAML key-value pair is shown here:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一个最基本的 YAML 键值对示例如下所示：
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the preceding example, the `name` key is given a `LearnHelm` value. In YAML,
    keys and values are separated by a colon (`:`). Characters written to the left
    of the colon represent the key, while characters written to the right of the colon
    represent the value.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，`name` 键被赋予了 `LearnHelm` 的值。在 YAML 中，键和值通过冒号（`:`）分隔。冒号左边的字符代表键，冒号右边的字符代表值。
- en: 'Spacing matters in YAML format. The following line does not constitute a valid
    key-value pair:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在 YAML 格式中，空格非常重要。以下行不是一个有效的键值对：
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note that a space is missing between the colon and the `LearnHelm` string. This
    would result in a parsing error. A space must exist between the colon and the
    value.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，冒号和 `LearnHelm` 字符串之间缺少空格。这将导致解析错误。冒号和值之间必须有空格。
- en: 'While the preceding example represents a simple key-value pair, YAML allows
    users to configure more complex pairings with nested elements, called maps. An
    example is shown here:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然前面的示例展示了一个简单的键值对，但 YAML 允许用户配置更复杂的配对，这些配对包含嵌套元素，称为映射。下面是一个示例：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The preceding example demonstrates a `resources` object containing a map of
    two key-value pairs:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的示例展示了一个包含两个键值对的 `resources` 对象：
- en: '| **Key** | **Value** |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| **键** | **值** |'
- en: '| `resources.limits.cpu` | `100m` |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `resources.limits.cpu` | `100m` |'
- en: '| `resources.limits.memory` | `512Mi` |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `resources.limits.memory` | `512Mi` |'
- en: Keys are determined by following the indentation under a YAML block. Each indentation
    adds a dot (`.`) separator to the name of the key. The value of the key has been
    reached when there are no longer any indentations remaining in the YAML block.
    By common practice, indentations in YAML should use two spaces, but users can
    provide as many spaces as they desire as long as the spacing is consistent throughout
    the document.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 键是通过在 YAML 块中遵循缩进来确定的。每次缩进都会在键的名称中添加一个点（`.`）分隔符。当 YAML 块中不再有任何缩进时，即表示已经到达了键的值。根据常规做法，YAML
    中的缩进应使用两个空格，但用户可以根据需要使用任意数量的空格，只要文档中的缩进一致即可。
- en: Important Note
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: '**Tabs** are not supported by YAML, and their use will result in a parsing
    error.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**制表符**在 YAML 中不受支持，使用它会导致解析错误。'
- en: With an understanding of YAML key-value pairs, let’s now explore some of the
    common types that values can be defined as.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 了解了 YAML 键值对后，让我们现在来探索一下值可以定义为的常见类型。
- en: Value types
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 值类型
- en: 'Values in a YAML file can be of different types. The most common type is a
    string, which is a text value. Strings can be declared by wrapping a value in
    quotation marks, but this is not always required. If a value contains at least
    one alphabetical letter or special character, the value is considered a string,
    with or without quotation marks. Multiline strings can be set by using the pipe
    (`|`) symbol, as shown:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: YAML 文件中的值可以是不同类型的。最常见的类型是字符串，它是文本值。字符串可以通过将值用引号括起来来声明，但这并不总是必要的。如果一个值包含至少一个字母或特殊字符，那么这个值被认为是字符串，无论是否用引号括起来。多行字符串可以通过使用管道符号（`|`）来设置，如下所示：
- en: '[PRE3]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Values can also be integers. A value is an integer when it is a numeric character
    that is not wrapped in quotations. The following YAML declares an integer value:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 值也可以是整数。当一个值是数字字符并且没有用引号括起来时，它就是整数。以下 YAML 声明了一个整数值：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Compare this to the following YAML, which assigns `replicas` to a string value:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 将此与以下 YAML 进行比较，该 YAML 将 `replicas` 设置为字符串值：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Boolean values are often used as well, which can be declared with either `true`
    or `false`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔值也常常被使用，可以通过 `true` 或 `false` 来声明：
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This YAML sets `ingress.enable` to the `true` Boolean value. Other acceptable
    Boolean values are `yes`, `no`, `on`, `off`, `y`, `n`, `Y`, and `N`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 YAML 将 `ingress.enable` 设置为 `true` 布尔值。其他可接受的布尔值包括 `yes`、`no`、`on`、`off`、`y`、`n`、`Y`
    和 `N`。
- en: Values can also be set to more complex types, such as lists. Items in a list
    in YAML are identified by the dash (`-`) symbol.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 值也可以设置为更复杂的类型，例如列表。YAML 中列表的项通过破折号（`-`）符号来标识。
- en: 'The following demonstrates a YAML list:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 以下演示了一个 YAML 列表：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This YAML sets `servicePorts` to a list of integers (such as `8080` and `8443`).
    This syntax can also be used to describe a list of objects:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 YAML 将 `servicePorts` 设置为整数列表（例如 `8080` 和 `8443`）。这种语法也可以用来描述一个对象列表：
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this case, `env` is set to a list of objects containing the `name` and `value`
    fields. Lists are often used in both Kubernetes and Helm configuration, and understanding
    them is valuable to using Helm to its fullest potential.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`env` 设置为一个包含 `name` 和 `value` 字段的对象列表。列表在 Kubernetes 和 Helm 配置中经常使用，理解它们对于充分利用
    Helm 非常有价值。
- en: While YAML is more commonly used in the worlds of Kubernetes and Helm for its
    ease of readability, the **JavaScript Object Notation** (**JSON**) format can
    be used as well. Let’s briefly describe this format.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 YAML 因其易于阅读在 Kubernetes 和 Helm 的世界中更为常见，但 **JavaScript 对象表示法**（**JSON**）格式也可以使用。让我们简要描述一下这个格式。
- en: The JSON format
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JSON 格式
- en: YAML is a superset of another widely used format—JSON. This is a string of key-value
    pairs, similar to YAML. The key difference is that while YAML relies on spacing
    and indentation to properly configure key-value pairs, JSON relies on braces and
    brackets.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: YAML 是另一种广泛使用格式——JSON 的超集。这是一串键值对，类似于 YAML。主要的区别是，YAML 依赖于空格和缩进来正确配置键值对，而 JSON
    则依赖于大括号和方括号。
- en: 'The following example converts the previous YAML example into the JSON format:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例将之前的 YAML 示例转换为 JSON 格式：
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'All the keys in JSON are wrapped in quotation marks and positioned before a
    colon:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: JSON 中的所有键都被引号括起来，并且位于冒号之前：
- en: Curly braces (`{`) denote a block in a similar way to how indentations denote
    a block in YAML.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 花括号（`{`）表示一个块，类似于 YAML 中缩进表示块的方式。
- en: Square brackets (`[`) denote a list in a similar way to how dashes denote a
    list in YAML.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方括号（`[`）表示一个列表，类似于破折号在 YAML 中表示列表的方式。
- en: There are many more constructs to the YAML and JSON formats, but this introduction
    provides more than enough information to understand how they can be used in Helm
    charts.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: YAML 和 JSON 格式有更多的构造，但这个介绍提供了足够的信息，帮助理解它们如何在 Helm 图表中使用。
- en: In the next section, we will begin to develop our Guestbook Helm chart by first
    learning how to scaffold Helm charts.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将开始开发我们的 Guestbook Helm 图表，首先学习如何构建 Helm 图表。
- en: Scaffolding the Guestbook Helm chart
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建 Guestbook Helm 图表
- en: 'When developing a new Helm chart from scratch, it is often useful to start
    by running the `helm create` command, which has the following syntax:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在从头开始开发一个新的 Helm 图表时，通常有用的是运行 `helm create` 命令，语法如下：
- en: '[PRE10]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `helm create` command provides a new project folder for your Helm chart.
    Inside, the folder contains a basic Helm chart scaffolding that you can use to
    begin developing your chart.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`helm create` 命令为你的 Helm 图表提供一个新的项目文件夹。在这个文件夹中，包含了一个基本的 Helm 图表骨架，你可以用它开始开发你的图表。'
- en: 'Let’s run the `helm create` command to scaffold our Guestbook Helm chart:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行 `helm create` 命令来构建我们的 Guestbook Helm 图表：
- en: 'In your terminal, within a directory where you would like to store Helm charts,
    run the `helm create` command:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中，进入您希望存储 Helm charts 的目录，然后运行 `helm create` 命令：
- en: '[PRE11]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Review the list of files that have been created:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看已创建的文件列表：
- en: '[PRE12]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As you can see, the `helm create` command generated a new folder for you called
    `guestbook`, which represents the name of the Helm chart. It is not necessarily
    required to call this folder `guestbook`, but since this is the name of the Helm
    chart we are creating, it is a good idea to make sure the folder name matches.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`helm create` 命令为您生成了一个名为 `guestbook` 的新文件夹，代表了 Helm chart 的名称。这个文件夹不一定非得叫做
    `guestbook`，但由于这是我们要创建的 Helm chart 的名称，所以确保文件夹名称与之匹配是个好主意。
- en: Under the `guestbook` folder, there are several different files and folders
    that make up your Helm chart. This may appear overwhelming at first, but we will
    dive deeper into each component as we develop the Guestbook chart over the next
    few chapters. By the end of the second part, each of these files will become clearer,
    and you will be able to jump into your next Helm chart with ease!
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `guestbook` 文件夹下，有几个不同的文件和文件夹组成了您的 Helm chart。刚开始时可能会让人感觉有些复杂，但随着我们在接下来的章节中逐步开发
    Guestbook chart，您会更深入地了解每个组件。到第二部分结束时，这些文件将变得更加清晰，您将能够轻松地开始下一个 Helm chart 的开发！
- en: 'For now, let’s take a high-level look at each of the files that `helm create`
    generated for us. As you’ll see in the following table, some of the files are
    not strictly required for a new Helm chart, but `helm create` provided them for
    us as a best practice:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们从高层次了解一下 `helm create` 为我们生成的每个文件。正如您将在下表中看到的那样，虽然一些文件在新建 Helm chart 时并不是严格要求的，但
    `helm create` 为我们提供了它们作为最佳实践：
- en: '| **File/Directory** | **Definition** | **Required?** |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| **文件/目录** | **定义** | **是否必需？** |'
- en: '| `charts/` | A directory that contains dependencies or Helm charts that the
    parent chart depends on. | No |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| `charts/` | 一个包含父 chart 所依赖的依赖项或 Helm charts 的目录。 | 否 |'
- en: '| `Chart.yaml` | A file that contains metadata about the Helm chart. | Yes
    |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `Chart.yaml` | 包含 Helm chart 元数据的文件。 | 是的 |'
- en: '| `.helmignore` | A file that contains a list of files and directories that
    should be omitted from the Helm chart’s packaging. | No |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `.helmignore` | 包含应该从 Helm chart 打包中排除的文件和目录的文件。 | 否 |'
- en: '| `templates/` | A directory that contains Golang templates, which are primarily
    used for generating Kubernetes resources. | Yes, unless the chart contains dependencies
    |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| `templates/` | 一个包含 Golang 模板的目录，主要用于生成 Kubernetes 资源。 | 是的，除非 chart 包含依赖项
    |'
- en: '| `templates/*.yaml` | A template file used to generate a Kubernetes resource.
    | Yes, unless the chart contains dependencies |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| `templates/*.yaml` | 用于生成 Kubernetes 资源的模板文件。 | 是的，除非 chart 包含依赖项 |'
- en: '| `templates/_*.tpl` | A file that contains boilerplate helper templates. |
    No |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| `templates/_*.tpl` | 包含模板助手的文件。 | 否 |'
- en: '| `templates/NOTES.txt` | A template file that is used to generate usage instructions
    after chart installation. | No |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| `templates/NOTES.txt` | 用于在 chart 安装后生成使用说明的模板文件。 | 否 |'
- en: '| `templates/tests/ (or more generically, templates/*/)` | A folder used for
    grouping different templates. This is strictly for aesthetics and has no effect
    on how the Helm chart operates – for example, `templates/tests` is used to group
    templates that are used for testing. | No |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| `templates/tests/（或更通用地，templates/*/）` | 用于分组不同模板的文件夹。这个目录纯粹是为了美观，不会影响 Helm
    chart 的运行方式——例如，`templates/tests` 用于分组用于测试的模板。 | 否 |'
- en: '| `values.yaml` | A file that contains the chart’s default values. | No, but
    every chart should contain this file as a best practice |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| `values.yaml` | 包含 chart 默认值的文件。 | 否，但每个 chart 应该包含此文件作为最佳实践 |'
- en: Table 4.2 – Files created with the “helm create” command
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 表 4.2 – 使用“helm create”命令创建的文件
- en: 'In addition to the files listed in the preceding table, there are a few other
    files that a Helm chart can contain that `helm create` did not include for us.
    Let’s take a high-level look at these files in the following table:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 除了前面表格中列出的文件外，Helm chart 还可以包含一些 `helm create` 没有为我们包含的其他文件。让我们在以下表格中高层次地了解这些文件：
- en: '| **File/Directory** | **Definition** | **Required?** |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| **文件/目录** | **定义** | **是否必需？** |'
- en: '| `Chart.lock` | A file used to save, or *lock in*, the previously applied
    dependency versions. | No |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| `Chart.lock` | 用于保存或 *锁定* 先前应用的依赖项版本的文件。 | 否 |'
- en: '| `crds/` | A directory that contains `templates/`. | No |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| `crds/` | 一个包含 `templates/` 的目录。 | 否 |'
- en: '| `README.md` | A file that contains installation and usage information about
    the Helm chart. | No, but every Helm chart should contain this file as a best
    practice |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| `README.md` | 一个包含Helm chart安装和使用信息的文件。 | 不是，但每个Helm chart都应该包含这个文件作为最佳实践
    |'
- en: '| `LICENSE` | A file that contains the chart’s license, which provides information
    about usage and redistribution rights. | No |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| `LICENSE` | 一个包含chart许可证的文件，提供有关使用和再分发权的信息。 | 否 |'
- en: '| `values.schema.json` | A file that contains the chart’s values schema in
    the JSON format. Used to provide input validation. | No |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| `values.schema.json` | 一个包含chart值模式的JSON格式文件，用于提供输入验证。 | 否 |'
- en: Table 4.3– Additional Helm chart files
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 表4.3– 其他Helm chart文件
- en: Again, we will explore each of these files in greater detail when they become
    relevant to the topics we will discuss later in this chapter and over the next
    few chapters.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们将在本章及接下来的几章中，当这些文件变得与我们的讨论主题相关时，深入探讨每个文件的详细内容。
- en: For now, let’s focus on the content in the `guestbook` directory that `helm
    create` generated for us. You may be surprised to know that, upon running `helm
    create`, you already have a fully functional Helm chart contained within your
    `guestbook` folder! Let’s install the Guestbook chart in its current state to
    see what gets deployed.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们专注于`helm create`为我们生成的`guestbook`目录中的内容。你可能会感到惊讶的是，运行`helm create`后，你已经在`guestbook`文件夹中拥有一个完全可用的Helm
    chart！让我们以当前状态安装Guestbook chart，看看它部署了什么。
- en: Deploying the scaffolded Guestbook chart
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署生成的Guestbook chart
- en: 'Before we install the chart, let’s set up your Kubernetes environment by following
    these steps:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装chart之前，让我们按照以下步骤设置你的Kubernetes环境：
- en: 'Start Minikube by running the `minikube start` command:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行`minikube start`命令启动Minikube：
- en: '[PRE13]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create a new namespace called `chapter4`:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`chapter4`的新命名空间：
- en: '[PRE14]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now, let’s proceed by installing your scaffolded chart and reviewing the deployed
    resources. In [*Chapter 3*](B17979_03.xhtml#_idTextAnchor083), *Installing Your
    First App With Helm*, we installed a Helm chart from a remote repository by providing
    the name `bitnami/wordpress`, which references the name of the remote repository
    and the chart contained within this repository. Alternatively, you can also install
    a chart by providing the local path to a valid Helm chart project folder. This
    makes it easy to test your Helm charts and see your progress without needing to
    publish the chart to a repository first.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续安装你生成的chart，并查看已部署的资源。在[*第3章*](B17979_03.xhtml#_idTextAnchor083)，*使用Helm安装你的第一个应用*中，我们通过提供`bitnami/wordpress`这个名称安装了一个远程仓库中的Helm
    chart，这个名称引用了远程仓库和其中包含的chart。或者，你也可以通过提供一个有效的Helm chart项目文件夹的本地路径来安装一个chart。这使得你可以轻松测试你的Helm
    charts并查看进展，而无需先将chart发布到仓库中。
- en: 'Let’s install your chart by running the following command, where `./guestbook`
    represents the folder generated by `helm create`:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令安装你的chart，其中`./guestbook`表示由`helm create`生成的文件夹：
- en: '[PRE15]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Run `helm get manifest` to review the resources that were deployed:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`helm get manifest`来查看已部署的资源：
- en: '[PRE16]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'As denoted in the output, your scaffolded Guestbook chart (with the default
    values applied) contains one service account, one service, and one deployment.
    If you look carefully at the deployment, you’ll find something interesting about
    the image that was deployed:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如输出所示，你生成的Guestbook chart（应用了默认值）包含一个服务账户、一个服务和一个部署。如果仔细查看部署，你会发现有关已部署的镜像有些有趣的地方：
- en: '[PRE17]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Sure enough, a new Helm chart that was scaffolded using `helm create` begins
    as a basic NGINX chart. **NGINX** is a popular open source web server and reverse
    proxy. Because its installation requires many of the same resources as many other
    Kubernetes applications, it serves as a great starting point when writing new
    Helm charts.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 确实，使用`helm create`生成的新的Helm chart从一个基本的NGINX chart开始。**NGINX**是一个流行的开源Web服务器和反向代理。由于它的安装需要许多与其他Kubernetes应用程序相同的资源，它是编写新Helm
    charts时的一个很好的起点。
- en: Let’s continue by accessing the NGINX application to verify it was installed
    properly.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 继续访问NGINX应用程序，以验证它是否正确安装。
- en: 'Since the Helm chart created a `ClusterIP` service, let’s run `kubectl port-forward`
    so that we can access the NGINX pod. Keep in mind that, although our Guestbook
    chart has installed NGINX, the deployed resources are still called `guestbook`,
    since that is the name of our chart:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于Helm chart创建了一个`ClusterIP`服务，让我们运行`kubectl port-forward`，以便我们可以访问NGINX pod。请记住，尽管我们的Guestbook
    chart已安装NGINX，但部署的资源仍被称为`guestbook`，因为那是我们chart的名称：
- en: '[PRE18]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In a new terminal window (since the current one will block while the `kubectl
    port-forward` command is active), use the `curl` command to reach NGINX:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新的终端窗口中（因为当前窗口会在 `kubectl port-forward` 命令激活时阻塞），使用 `curl` 命令访问 NGINX：
- en: '[PRE19]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: As you can see, we are able to reach NGINX successfully. Now, let’s continue
    by cleaning up this Helm release.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们已经成功访问了 NGINX。现在，让我们继续清理这个 Helm 发布。
- en: Press *Ctrl* + *c* in the terminal window running the `kubectl port-forward`
    command. Alternatively, you can close the window.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行 `kubectl port-forward` 命令的终端窗口中，按 *Ctrl* + *c*。或者，你可以关闭窗口。
- en: 'Uninstall the `guestbook` Helm release:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 卸载 `guestbook` Helm 发布：
- en: '[PRE20]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Next, you can delete the `chapter4` namespace, since we won’t need it for the
    remainder of the chapter:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，你可以删除 `chapter4` 命名空间，因为在本章余下部分我们不再需要它：
- en: '[PRE21]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Finally, you can shut down your `minikube` cluster:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，你可以关闭你的 `minikube` 集群：
- en: '[PRE22]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: You may realize after this exercise that our Guestbook chart doesn’t resemble
    the architecture we presented at the beginning of this chapter very much. However,
    by providing a scaffold that we will use as a starting point, we have already
    made great progress toward creating a Helm chart for deploying the desired architecture.
    We will continue making progress on our Guestbook chart in the next chapter when
    we learn about dependencies. At that time, we will declare a dependency to install
    Redis and the backend of our Guestbook architecture.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会在完成这项练习后发现，我们的 Guestbook 图表与本章开始时展示的架构并不完全相符。然而，通过提供一个我们将用作起点的框架，我们已经在为部署所需架构创建
    Helm 图表的过程中迈出了重要一步。在下一章，我们将继续完善我们的 Guestbook 图表，并学习如何管理依赖关系。届时，我们将声明一个依赖关系来安装
    Redis 以及 Guestbook 架构的后端。
- en: In the next section, we’ll take a deeper dive into one of the most important
    Helm chart files, `Chart.yaml`. Then, at the end of the chapter, we will update
    this file to provide new settings that align with our Guestbook chart.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将深入探讨 Helm 图表中最重要的文件之一，`Chart.yaml`。然后，在本章末尾，我们将更新此文件，以提供与我们的 Guestbook
    图表对齐的新设置。
- en: Understanding the Chart.yaml file
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Chart.yaml 文件
- en: 'The `Chart.yaml` file, also referred to as the **chart definition**, is used
    for storing different pieces of metadata about a Helm chart. This file is required,
    and if it is not included within a chart, you’ll receive the following error:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`Chart.yaml` 文件，也称为**图表定义文件**，用于存储有关 Helm 图表的不同元数据。此文件是必需的，如果图表中没有包含它，你将收到以下错误：'
- en: '[PRE23]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'A `Chart.yaml` file was created for you earlier when you ran `helm create`.
    Let’s review this file by running the following command:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行 `helm create` 时，系统会为你创建一个 `Chart.yaml` 文件。我们可以通过运行以下命令来查看此文件：
- en: '[PRE24]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'An output like the following will be displayed:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 将显示如下输出：
- en: '![Figure 4.4 – The Guestbook Chart.yaml file'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.4 – Guestbook Chart.yaml 文件'
- en: '](img/Figure_4.4_B17979.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.4_B17979.jpg)'
- en: Figure 4.4 – The Guestbook Chart.yaml file
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.4 – Guestbook Chart.yaml 文件
- en: A `Chart.yaml` file can contain many different fields, some of which are required,
    while most other fields are optional. Let’s take a closer look at each of the
    fields provided in our Guestbook chart’s `Chart.yaml` file.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 `Chart.yaml` 文件可以包含许多不同的字段，其中一些是必需的，而大多数其他字段是可选的。让我们仔细看看我们 Guestbook 图表的
    `Chart.yaml` 文件中提供的每个字段。
- en: '| **Field** | **Description** | **Required?** |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| **字段** | **描述** | **是否必需** |'
- en: '| `apiVersion` | The chart API version | Yes |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| `apiVersion` | 图表的 API 版本 | 是 |'
- en: '| `name` | The name of the Helm chart | Yes |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| `name` | Helm 图表的名称 | 是 |'
- en: '| `description` | A brief description of the Helm chart | No |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| `description` | Helm 图表的简短描述 | 否 |'
- en: '| `type` | The type of Helm chart (either `Application` or `Library`) | No
    |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| `type` | Helm 图表的类型（可以是 `Application` 或 `Library`） | 否 |'
- en: '| `version` | The version of the Helm chart, in SemVer format. | Yes |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| `version` | Helm 图表的版本，使用 SemVer 格式。 | 是 |'
- en: '| `appVersion` | The version of the application that the Helm chart deploys.
    This does not need to be in the SemVer format. | No |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| `appVersion` | Helm 图表部署的应用程序版本。无需使用 SemVer 格式。 | 否 |'
- en: Table 4.4 – Fields from the generated Chart.yaml file
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 表 4.4 – 从生成的 Chart.yaml 文件中提取的字段
- en: As you can see from Guestbook’s chart definition, the `apiVersion` value for
    our chart is set to `v2`. Charts with an `apiVersion` value of `v2` are only compatible
    with Helm 3\. The other possible `apiVersion` value is `v1`, but this is a legacy
    version that was geared towards Helm 2\. Charts with an `apiVersion` value of
    `v1` handled dependencies differently and did not support library charts (topics
    that we will discuss in greater detail later in this book). Helm 3 is in fact
    backward-compatible with `apiVersion v1`, but in order to leverage Helm’s latest
    features and to avoid deprecations, new Helm charts should be created using `apiVersion
    v2`.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你从 Guestbook 的 chart 定义中看到的那样，我们的 chart 的 `apiVersion` 值设置为 `v2`。`apiVersion`
    为 `v2` 的 chart 仅与 Helm 3 兼容。另一个可能的 `apiVersion` 值是 `v1`，但这是针对 Helm 2 的旧版本。`apiVersion`
    为 `v1` 的 chart 在处理依赖项时方式不同，且不支持 library charts（我们将在本书后面更详细地讨论这些话题）。Helm 3 事实上与
    `apiVersion v1` 向后兼容，但为了利用 Helm 的最新功能并避免弃用，新的 Helm chart 应使用 `apiVersion v2` 创建。
- en: The type of Helm chart we have scaffolded, according to the `Chart.yaml` file,
    is an `application` chart. A Helm chart can be either an `application` chart or
    a `library` chart. An application chart is used to deploy an application to Kubernetes,
    while a library chart is used to provide reusable helper templates. We will discuss
    library charts in greater detail in [*Chapter 6*](B17979_06.xhtml#_idTextAnchor167),
    *Understanding Helm Templates* . The `type` field in the `Chart.yaml` file is
    optional and defaults to `application`.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 `Chart.yaml` 文件，我们搭建的 Helm chart 类型是 `application` chart。Helm chart 可以是 `application`
    chart 或 `library` chart。`application` chart 用于将应用部署到 Kubernetes，而 `library` chart
    用于提供可重用的帮助模板。我们将在[*第六章*](B17979_06.xhtml#_idTextAnchor167)《理解 Helm 模板》中详细讨论 library
    charts。`Chart.yaml` 文件中的 `type` 字段是可选的，默认值为 `application`。
- en: 'The other fields in our chart definition, `name`, `description`, `version`,
    and `appVersion`, are used to provide metadata that identifies our chart. As an
    example, think back to [*Chapter 3*](B17979_03.xhtml#_idTextAnchor083), *Installing
    Your First App with Helm, w*hen we searched Artifact Hub from the command line
    for WordPress charts. We ran the `helm search hub wordpress` command and saw an
    output like the following:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 chart 定义中，`name`、`description`、`version` 和 `appVersion` 字段用于提供标识我们 chart
    的元数据。例如，回想一下在 [*第三章*](B17979_03.xhtml#_idTextAnchor083)《用 Helm 安装你的第一个应用》中，我们从命令行使用
    Artifact Hub 搜索 WordPress charts。我们运行了 `helm search hub wordpress` 命令，并看到了如下输出：
- en: '![Figure 4.5 – An example of name, version, appVersion, and description'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.5 – 名称、版本、appVersion 和描述的示例'
- en: '](img/Figure_4.5_B17979.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.5_B17979.jpg)'
- en: Figure 4.5 – An example of name, version, appVersion, and description
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.5 – 名称、版本、appVersion 和描述的示例
- en: These fields are acquired from their corresponding fields in `Chart.yaml`. Note
    that you can also see this information on any chart’s Artifact Hub page.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 这些字段来自于 `Chart.yaml` 文件中的对应字段。请注意，你也可以在任何 chart 的 Artifact Hub 页面上查看这些信息。
- en: 'In addition to the fields included in our scaffolded `Chart.yaml` file, there
    are many other fields used to describe your chart, as shown in the following table:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们搭建的 `Chart.yaml` 文件中包含的字段外，还有许多其他字段用于描述你的 chart，如下表所示：
- en: '| **Field** | **Description** | **Required?** |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| **字段** | **描述** | **是否必填？** |'
- en: '| `kubeVersion` | A range of compatible Kubernetes versions in the SemVer format.
    | No |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| `kubeVersion` | 兼容的 Kubernetes 版本范围，采用 SemVer 格式。 | 否 |'
- en: '| `keywords` | A list of keywords used to describe the Helm chart. Keywords
    are also used to provide search terms for the `helm search` command. | No |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| `keywords` | 描述 Helm chart 的关键词列表。关键词也用于为 `helm search` 命令提供搜索词。 | 否 |'
- en: '| `home` | The URL to the Helm chart’s home page. | No |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| `home` | Helm chart 的主页 URL。 | 否 |'
- en: '| `sources` | A list of URLs that link to source code used by the Helm chart.
    | No |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| `sources` | 一个 URL 列表，指向 Helm chart 使用的源代码。 | 否 |'
- en: '| `dependencies` | A list of charts that your Helm chart is reliant on. | No
    |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| `dependencies` | 列出你的 Helm chart 所依赖的其他 chart。 | 否 |'
- en: '| `maintainers` | A list of Helm chart maintainers. | No |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| `maintainers` | Helm chart 的维护者列表。 | 否 |'
- en: '| `icon` | An icon in SVG or PNG format used to represent the Helm chart. Displayed
    on the chart’s Artifact Hub page. | No |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| `icon` | 用于表示 Helm chart 的图标，格式可以是 SVG 或 PNG。会在 chart 的 Artifact Hub 页面上显示。
    | 否 |'
- en: '| `deprecated` | Indicates whether the Helm chart has been deprecated. | No
    |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| `deprecated` | 表示该 Helm chart 是否已被弃用。 | 否 |'
- en: '| `annotations` | A list of annotations used to provide custom metadata. |
    No |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| `annotations` | 用于提供自定义元数据的注释列表。 | 否 |'
- en: Table 4.5 – Additional Chart.yaml fields
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 表 4.5 – 其他 Chart.yaml 字段
- en: The `kubeVersion` field is used to provide validation against the target Kubernetes
    cluster version. This is useful if your Helm chart uses resources that are only
    compatible with certain versions of Kubernetes. You could set `kubeVersion` to
    a string such as `>= 1.18.0 < 1.20.0`, and Helm will ensure that the chart is
    installed only if Kubernetes is greater than or equal to version `1.18.0` and
    less than (exclusive) `1.20.0`. You can also use the `OR` (`||`) operator, as
    in `>= 1.15.0 <= 1.17.0 || >= 1.18.0 < 1.20.0`.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: The `dependencies` field is the most functional of these optional fields. Charts
    added under the `dependencies` field will be installed alongside your Helm chart’s
    resources. We will explore dependencies more in the next chapter.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown earlier with the `name`, `version`, `appVersion`, and `description`
    fields, each of the other `Chart.yaml` properties also have an impact on how a
    Helm chart is displayed in Artifact Hub. Look at the following screenshot, taken
    from Bitnami’s WordPress page in Artifact Hub:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.6 – Chart.yaml metadata displayed on Artifact Hub'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.6_B17979.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.6 – Chart.yaml metadata displayed on Artifact Hub
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s compare this to WordPress’s `Chart.yaml` file, retrieved by running `helm
    show values bitnami/wordpress`:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.7 – The Bitnami/WordPress Chart.yaml file'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.7_B17979.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.7 – The Bitnami/WordPress Chart.yaml file
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: Note how `home`, `sources`, `maintainers`, `dependencies`, and `keywords` from
    `Chart.yaml` are also displayed in Artifact Hub.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: It is not required to provide all the `Chart.yaml` fields in full, but it is
    a good thing to do if you are publishing your charts to Artifact Hub or another
    repository that can display chart metadata. Otherwise, feel free to use your discretion
    and provide the fields that you find relevant and necessary. Besides `apiVersion`,
    `name`, and `version`, we recommend providing at least `appVersion` and `description`,
    since these fields provide a good high-level glance at the application your Helm
    chart is packaging. If you are writing a Helm chart for public use, you should
    consider also adding `maintainers`, `home`, and `sources`, and if you are publishing
    to Artifact Hub, you should also include `keywords` so that the chart can be easily
    discovered.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: With an understanding of the `Chart.yaml` fields, let’s finish this chapter
    by updating our scaffolded chart definition to better suit our Guestbook application.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: Updating the Guestbook Chart.yaml file
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The scaffolded `Chart.yaml` file that `helm create` generated is catered around
    NGINX and not Guestbook as we would desire. Let’s make a couple of quick changes
    to improve the content:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s update the chart description to better describe the application
    our chart will deploy. Update the `description` field of `Chart.yaml` to the following
    (or feel free to provide your own):'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Next, let’s provide a more appropriate `appVersion` setting that better suits
    the version of Guestbook that our chart will deploy. The latest version of Guestbook
    is `v5`, so let’s use this as our `appVersion`:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们提供一个更合适的`appVersion`设置，以更好地适应我们的chart将要部署的Guestbook版本。Guestbook的最新版本是`v5`，所以我们将这个版本作为我们的`appVersion`：
- en: '[PRE26]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Our `Chart.yaml` file should now look like this (with the comments removed):'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`Chart.yaml`文件现在应该像这样（去除了注释）：
- en: '![Figure 4.8 – The updated Chart.yaml file for Guestbook'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.8 – 更新后的Guestbook Chart.yaml文件'
- en: '](img/Figure_4.8_B17979.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.8_B17979.jpg)'
- en: Figure 4.8 – The updated Chart.yaml file for Guestbook
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.8 – 更新后的Guestbook Chart.yaml文件
- en: Feel free to add any of the other `Chart.yaml` fields as well, but these changes,
    at a minimum, will put us in a good state where the `Chart.yaml` metadata accurately
    reflects the application that we will deploy.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎添加其他的`Chart.yaml`字段，但这些更改至少能让我们处于一个良好的状态，其中`Chart.yaml`元数据准确地反映了我们将要部署的应用程序。
- en: We will revisit the `Chart.yaml` field in the next chapter when we add a chart
    dependency for deploying Redis.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一章中重新审视`Chart.yaml`字段，当我们添加一个用于部署Redis的chart依赖时。
- en: Summary
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we began to peek into the world of Helm chart development by
    introducing the Helm chart and chart definition structure. A Helm chart consists
    of a chart definition (a `Chart.yaml` file) and template files used for generating
    Kubernetes resources. A chart definition is used to provide an identity around
    the chart, including metadata such as the chart name, version, description, and
    the application version that the chart deploys.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们开始窥探Helm chart开发的世界，通过介绍Helm chart和chart定义结构。一个Helm chart由chart定义（一个`Chart.yaml`文件）和用于生成Kubernetes资源的模板文件组成。chart定义用于为chart提供身份信息，包括元数据，如chart名称、版本、描述以及chart所部署的应用程序版本。
- en: We also introduced an application called Guestbook, and we began writing a Helm
    chart that will be used to deploy this application. We ran the `helm create` command
    to scaffold a new Helm chart, and we updated the `Chart.yaml` file to better reflect
    the application that our chart will deploy. In the next chapter, we will return
    to the `Chart.yaml` file when we add a dependency for installing Redis, the backend
    service that our Guestbook frontend relies on.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还介绍了一个名为Guestbook的应用程序，并开始编写一个Helm chart，用于部署此应用程序。我们运行了`helm create`命令来生成一个新的Helm
    chart，并更新了`Chart.yaml`文件，以更好地反映我们将要部署的应用程序。在下一章中，当我们为安装Redis（我们的Guestbook前端依赖的后端服务）添加依赖项时，我们将再次回到`Chart.yaml`文件。
- en: Further reading
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: To learn more about Helm chart structure and `Chart.yaml` files, visit the Helm
    documentation at [https://helm.sh/docs/topics/charts/](https://helm.sh/docs/topics/charts/).
    For more information on the Guestbook application, visit [https://kubernetes.io/docs/tutorials/stateless-application/guestbook/](https://kubernetes.io/docs/tutorials/stateless-application/guestbook/).
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于Helm chart结构和`Chart.yaml`文件的信息，请访问Helm文档：[https://helm.sh/docs/topics/charts/](https://helm.sh/docs/topics/charts/)。有关Guestbook应用程序的更多信息，请访问[https://kubernetes.io/docs/tutorials/stateless-application/guestbook/](https://kubernetes.io/docs/tutorials/stateless-application/guestbook/)。
- en: Questions
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the file format most used in Kubernetes and Helm?
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Kubernetes和Helm中最常用的文件格式是什么？
- en: What is the command used to scaffold a new Helm chart?
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用于生成新Helm chart的命令是什么？
- en: Where is the Helm chart name and version defined?
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Helm chart的名称和版本在哪里定义？
- en: What are the three required fields in the `Chart.yaml` file?
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Chart.yaml`文件中需要的三个必填字段是什么？'
- en: Helm charts can be made up of many different files. Which files are required?
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Helm charts可以由许多不同的文件组成。哪些文件是必需的？
- en: Which folder of a Helm chart is used to contain Kubernetes resource templates?
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个Helm chart文件夹用于包含Kubernetes资源模板？
- en: Which `Chart.yaml` field is used to describe the application version that a
    Helm chart deploys?
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个`Chart.yaml`字段用于描述Helm chart所部署的应用程序版本？

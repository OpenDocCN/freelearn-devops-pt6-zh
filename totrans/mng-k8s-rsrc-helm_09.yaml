- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Testing Helm Charts
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试Helm Charts
- en: Testing is a common task that engineers must perform during software development.
    Testing is performed to validate the functionality of a product, as well as to
    prevent regressions as a product evolves. Well-tested software is easier to maintain
    and allows developers to confidently provide new releases to end users.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 测试是工程师在软件开发过程中必须执行的常见任务。测试用于验证产品的功能，并防止产品在演进过程中出现回归问题。经过充分测试的软件更易于维护，并且使开发人员能够自信地向最终用户提供新版本。
- en: A Helm chart should be tested properly to ensure that it delivers its features
    to the level of quality expected. In this chapter, we will discuss the ways that
    testing can be applied to Helm charts to verify the expected capabilities.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 应该适当地测试Helm chart，以确保它提供的功能达到预期的质量标准。在本章中，我们将讨论如何将测试应用于Helm charts，以验证预期的能力。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Setting up your environment
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置您的环境
- en: Verifying Helm templating
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证Helm模板
- en: Testing in a live cluster
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在实时集群中进行测试
- en: Improving chart tests with the Chart Testing tool
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Chart Testing工具改进chart测试
- en: Cleaning up
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清理
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For this chapter, you will need the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，您将需要以下内容：
- en: '`minikube`'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`minikube`'
- en: '`kubectl`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubectl`'
- en: '`helm`'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`helm`'
- en: '`git`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git`'
- en: '`yamllint`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`yamllint`'
- en: '`yamale`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`yamale`'
- en: '`ct` (chart-testing)'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ct` (chart-testing)'
- en: 'Additionally, you should clone the Packt GitHub repository locally: $ git clone
    [https://github.com/PacktPublishing/Managing-Kubernetes-Resources-using-Helm.git](https://github.com/PacktPublishing/Managing-Kubernetes-Resources-using-Helm.git).'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您应该在本地克隆Packt的GitHub仓库：$ git clone [https://github.com/PacktPublishing/Managing-Kubernetes-Resources-using-Helm.git](https://github.com/PacktPublishing/Managing-Kubernetes-Resources-using-Helm.git)。
- en: In this chapter, we will use our `minikube` environment extensively throughout
    the scenarios. In the next section, you will set up the environment.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将广泛使用`minikube`环境。在下一节中，您将设置该环境。
- en: Setting up your environment
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置您的环境
- en: 'Run the following steps to set up your `minikube` environment:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤来设置您的`minikube`环境：
- en: 'Start `minikube` by running the `minikube start` command:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行`minikube start`命令来启动`minikube`：
- en: '[PRE0]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, create a new namespace called `chapter9`:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，创建一个名为`chapter9`的新命名空间：
- en: '[PRE1]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: With your `minikube` environment ready, let’s begin by discussing how Helm charts
    can be tested. We will begin the discussion by outlining the methods you can use
    to verify your Helm templates.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在准备好`minikube`环境后，让我们首先讨论如何测试Helm charts。我们将从概述您可以使用的方法来验证Helm模板开始。
- en: Verifying Helm templating
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证Helm模板
- en: One of the primary purposes of Helm is to create **Kubernetes** resources. As
    a result, when developing and testing a Helm chart, you should ensure that your
    resources are being generated properly. This can be accomplished using a variety
    of methods. We will discuss these in the next section.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Helm的主要用途之一是创建**Kubernetes**资源。因此，在开发和测试Helm chart时，您应该确保资源正确生成。我们将在下一节中讨论实现这一目标的多种方法。
- en: Validating template generation locally with helm template
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用helm template在本地验证模板生成
- en: The first way to validate the templating of your chart is to use the `helm template`
    command. We first introduced this command in [*Chapter 6*](B17979_06.xhtml#_idTextAnchor167),
    *Understanding Helm Templates*. In this chapter, we will describe using the `helm
    template` command to render a chart’s templates locally.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 验证chart模板的第一种方法是使用`helm template`命令。我们在[*第六章*](B17979_06.xhtml#_idTextAnchor167)中首次介绍了此命令，*理解Helm模板*。在本章中，我们将描述如何使用`helm
    template`命令在本地渲染chart模板。
- en: 'The `helm template` command has the following syntax:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`helm template`命令的语法如下：'
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can see this command in action by demonstrating it against the Helm chart
    located in `chapter9/guestbook` in the Packt repository:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过演示以下命令来查看其实际效果，该命令适用于Packt仓库中`chapter9/guestbook`目录下的Helm chart：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The result of this command will display each of the Kubernetes resources that
    would be created if they were applied to the cluster, as shown here:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令的结果将显示如果将它们应用于集群，将创建的每个Kubernetes资源，如下所示：
- en: '![Figure 9.1 – The helm template output'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.1 – helm模板输出'
- en: '](img/Figure_9.01_B17979.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.01_B17979.jpg)'
- en: Figure 9.1 – The helm template output
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.1 – helm模板输出
- en: The preceding output displays the beginning portion of the `helm template` output.
    As you can see, a fully rendered `ServiceAccount` is shown, along with the beginning
    of another `ServiceAccount` that would be created with a release. Rendering these
    resources allows you to understand how the resources would be created if the release
    was installed against a Kubernetes cluster.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 上述输出显示了`helm template`输出的开始部分。如您所见，显示了一个完全渲染的`ServiceAccount`，以及另一个将在发布时创建的`ServiceAccount`的开头部分。渲染这些资源使您能够了解如果在Kubernetes集群中安装发布时，资源将如何被创建。
- en: During chart development, you may want to use the `helm template` command regularly
    to validate that your Kubernetes resources are being generated properly.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在图表开发过程中，您可能需要定期使用`helm template`命令验证Kubernetes资源是否正确生成。
- en: 'Some common aspects of chart development that you may want to validate throughout
    are as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是您可能希望在整个过程中验证的一些常见图表开发方面：
- en: Parameterized fields are successfully replaced by default or overridden values
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数化字段已成功替换为默认值或覆盖值
- en: Control structures such as `if`, `range`, and `with` successfully generate YAML
    based on the provided values.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制结构如`if`、`range`和`with`成功地根据提供的值生成YAML。
- en: Resources contain proper spacing and indentation.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源包含适当的空格和缩进。
- en: Functions and pipelines are used correctly to properly format and manipulate
    YAML.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数和管道被正确使用，以正确格式化和操作YAML。
- en: Input validation mechanisms such as the `required` and `fail` functions or the
    `values.schema.json` file properly validate values based on user input.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入验证机制，如`required`和`fail`函数或`values.schema.json`文件，能够根据用户输入正确验证值。
- en: Dependencies have been declared properly and their resource definitions appear
    in the `helm template` output.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖项已正确声明，并且它们的资源定义出现在`helm template`输出中。
- en: In the next section, we will discuss how server-side validation can be enabled
    when rendering your resources with `helm template`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一部分中，我们将讨论如何在使用`helm template`渲染资源时启用服务器端验证。
- en: Adding server-side validation to chart rendering
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为图表渲染添加服务器端验证
- en: 'While the `helm template` command is important to the chart development process
    and should be used frequently to verify your chart rendering, it does have a key
    limitation. The main purpose of the `helm template` command is to provide client-side
    rendering, meaning it does not communicate with the Kubernetes API server to provide
    resource validation. If you would like to ensure that your resources are valid
    after they have been generated, you can use the `--validate` flag to instruct
    `helm template` to communicate with the Kubernetes API server:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`helm template`命令在图表开发过程中非常重要，应该经常使用来验证图表渲染效果，但它也有一个关键的限制。`helm template`命令的主要目的是提供客户端渲染，这意味着它不会与Kubernetes
    API服务器通信以进行资源验证。如果您希望在生成资源后确保它们有效，可以使用`--validate`标志指示`helm template`与Kubernetes
    API服务器进行通信：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'With the `--validate` flag specified, any generated template that does not
    produce a valid Kubernetes resource emits an error message. Imagine, for example,
    a deployment template was used with the incorrect `apiVersion`. What may appear
    to be valid locally would be incorrect when applying the `--validate` flag. Here’s
    an example error message that Kubernetes could throw with invalid content that
    was triggered through the use of the `--validate` flag:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`--validate`标志时，任何生成的模板如果没有生成有效的Kubernetes资源，都会输出错误信息。例如，假设使用了一个错误的`apiVersion`的部署模板。看起来在本地是有效的，但应用`--validate`标志后会被认为是无效的。以下是Kubernetes在遇到无效内容时，通过`--validate`标志触发的示例错误消息：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'While `helm template` does provide server-side validation capabilities with
    the `--validate` flag, it is not the only way to determine if your chart is generating
    valid Kubernetes resources. As an alternative approach, you can apply the `--dry-run`
    flag against the `install`, `upgrade`, `rollback`, and `uninstall` commands. Here
    is an example of using this flag with the `install` command:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`helm template`确实提供了通过`--validate`标志进行服务器端验证的功能，但这并不是判断图表是否生成有效Kubernetes资源的唯一方法。作为替代方法，您可以在`install`、`upgrade`、`rollback`和`uninstall`命令中使用`--dry-run`标志。以下是使用此标志与`install`命令的示例：
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `--dry-run` flag is primarily used by end users to perform a sanity check
    before running an installation. This helps ensure that values have been provided
    properly and that the installation will produce the desired results. It is a good
    *last line of defense* that can be used to verify that errors will not be thrown
    before you execute the associated command.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`--dry-run` 标志主要供最终用户在执行安装之前进行检查，以确保提供了正确的值，并且安装会产生预期的结果。这是一个很好的*最后一道防线*，可以用来验证在执行相关命令之前不会抛出错误。'
- en: While it is necessary to verify that templates are generated the way you intend,
    it is also important to perform linting to ensure that Helm charts and generated
    resources follow best formatting practices. There are a couple of ways to accomplish
    this goal. Let’s take a look.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然验证模板是否按预期生成是必要的，但执行代码检查（linting）以确保 Helm 图表和生成的资源遵循最佳格式化实践也同样重要。有几种方法可以实现这一目标。我们来看看。
- en: Linting Helm charts and templates
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对 Helm 图表和模板进行 linting
- en: 'Linting a Helm chart involves two high-level steps:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 对 Helm 图表进行 linting 包括两个高层步骤：
- en: Ensuring that a Helm chart is valid
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保 Helm 图表有效
- en: Ensuring that a Helm chart follows consistent formatting practices
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保 Helm 图表遵循一致的格式化实践
- en: 'To ensure that a Helm chart is valid, we can use the `helm lint` command, which
    has the following syntax:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保 Helm 图表有效，我们可以使用`helm lint`命令，其语法如下：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `helm lint` command is used to validate the `Chart.yaml` file and ensure
    that the Helm chart does not contain any breaking issues. Note that this command
    does not validate rendered resources or perform YAML style linting.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`helm lint`命令用于验证 `Chart.yaml` 文件，确保 Helm 图表不包含任何重大问题。请注意，该命令不会验证渲染的资源或执行 YAML
    风格的 linting。'
- en: 'You can run the `helm lint` command against the `guestbook` chart located in
    the Packt repository, as shown here:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以对位于 Packt 仓库中的 `guestbook` 图表运行 `helm lint` 命令，如下所示：
- en: '[PRE8]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The preceding output shows that the chart is valid, noted by the `0 chart(s)
    failed` message. The `[INFO]` message reported that the icon field in the `Chart.yaml`
    file is recommended, but not required. Other types of messages include `[WARNING]`,
    which indicates that the chart breaks conventions, and `[ERROR]`, which indicates
    that the chart will fail at installation.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 上述输出显示该图表有效，`0 chart(s) failed`消息说明了这一点。[INFO] 消息报告指出 `Chart.yaml` 文件中的图标字段是推荐的，但不是必需的。其他类型的消息包括
    `[WARNING]`，表示图表不符合约定，以及 `[ERROR]`，表示图表在安装时会失败。
- en: 'Let’s run through several examples to illustrate each potential outcome. Consider
    the chart in `chapter9/no-chart-yaml`, which contains the following file structure:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过几个例子来演示每种可能的结果。考虑位于`chapter9/no-chart-yaml`中的图表，它包含以下文件结构：
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As you can probably guess from the name, this chart is missing a `Chart.yaml`
    definition file. When we run `helm lint` over this chart, we get an error:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能从名称中猜到的，这个图表缺少一个`Chart.yaml`定义文件。当我们对这个图表运行`helm lint`时，会出现一个错误：
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This error indicates that Helm cannot find the `Chart.yaml` file, resulting
    in an invalid chart.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这个错误表明 Helm 找不到`Chart.yaml`文件，导致图表无效。
- en: 'We can see different errors if we add an empty `Chart.yaml` file. Let’s run
    `helm lint` on the `chapter9/empty-chart-yaml` chart:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们添加一个空的 `Chart.yaml` 文件，可以看到不同的错误。让我们在 `chapter9/empty-chart-yaml` 图表上运行
    `helm lint`：
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The output lists each of the required fields that are missing from the `Chart.yaml`
    file.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 输出会列出 `Chart.yaml` 文件中缺少的所有必需字段。
- en: The linter will also check for the existence of other files, such as the `values.yaml`
    file and the `templates` directory. It also ensures that files under the `templates`
    directory have valid `.yaml`, `.yml`, `.tpl`, or `.txt` file extensions.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Linter 还会检查其他文件的存在，如 `values.yaml` 文件和 `templates` 目录。它还确保 `templates` 目录下的文件具有有效的
    `.yaml`、`.yml`、`.tpl` 或 `.txt` 文件扩展名。
- en: 'The `helm lint` command is great for checking whether your chart contains the
    appropriate contents, but it does not carry out exhaustive linting of your chart’s
    YAML style. To perform this type of linting, you can use another tool called `yamllint`,
    which can be found at [https://github.com/adrienverge/yamllint](https://github.com/adrienverge/yamllint).
    This tool can be installed using the `pip3 (or pip)` package manager across a
    range of operating systems by using the following command:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`helm lint`命令非常适合检查您的图表是否包含适当的内容，但它并不会对您的图表的 YAML 格式进行全面的语法检查。要执行此类语法检查，您可以使用另一种工具`yamllint`，它可以在[https://github.com/adrienverge/yamllint](https://github.com/adrienverge/yamllint)找到。该工具可以通过`pip3（或
    pip）`包管理器在多个操作系统上安装，使用以下命令：'
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: It can also be installed with your system’s package manager, as described in
    the `yamllint` quick-start instructions at [https://yamllint.readthedocs.io/en/stable/quickstart.html](https://yamllint.readthedocs.io/en/stable/quickstart.html).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 它也可以通过您系统的包管理器安装，详细信息可以参考`yamllint`快速入门指南：[https://yamllint.readthedocs.io/en/stable/quickstart.html](https://yamllint.readthedocs.io/en/stable/quickstart.html)。
- en: 'To use `yamllint` on your chart’s resources, you must use it in combination
    with the `helm template` command to feed the output of the rendered templates
    as input to `yamllint`. Let’s run `yamllint` against the `chapter9/guestbook`
    Helm chart:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要在您的图表资源上使用`yamllint`，您必须将其与`helm template`命令结合使用，将渲染模板的输出作为输入传递给`yamllint`。让我们对`chapter9/guestbook`
    Helm 图表运行`yamllint`：
- en: '[PRE13]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'A snippet of the result is shown here:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这里展示了部分结果：
- en: '![Figure 9.2 – yamllint output'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.2 – yamllint 输出'
- en: '](img/Figure_9.02_B17979.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.02_B17979.jpg)'
- en: Figure 9.2 – yamllint output
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.2 – yamllint 输出
- en: 'The line numbers provided to the left reflect the entirety of the `helm template`
    output, which can make it difficult to determine which line from the `yamllint`
    output corresponds with which line from your template files. You can simplify
    this by redirecting the `helm template` output to determine its line numbers:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧提供的行号反映了整个`helm template`的输出，这可能使得确定`yamllint`输出中的哪一行对应于模板文件中的哪一行变得困难。您可以通过将`helm
    template`输出重定向来简化这一点，以确定其行号：
- en: '[PRE14]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `yamllint` tool performs linting against many different rules, including
    the following:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`yamllint`工具根据许多不同的规则进行语法检查，包括以下内容：'
- en: Indentation
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缩进
- en: Line length
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 行长度
- en: Trailing spaces
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 行尾空格
- en: Empty lines
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空行
- en: Comment format
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注释格式
- en: 'You can define your own rules by authoring them in one of the following files:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在以下文件之一中编写规则来定义自己的规则：
- en: '`.yamllint`, `.yamllint.yaml`, or `.yamllint.yml` in the current working directory'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前工作目录中的`.yamllint`、`.yamllint.yaml`或`.yamllint.yml`
- en: '`$XDG_CONFIG_HOME/yamllint/config`'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$XDG_CONFIG_HOME/yamllint/config`'
- en: '`~/.config/yamllint/config`'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`~/.config/yamllint/config`'
- en: 'An example `.yamllint.yaml` file can be found in `chapter9/yamllint-override`.
    Here, we have defined the following contents:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 一个示例的`.yamllint.yaml`文件可以在`chapter9/yamllint-override`中找到。在这里，我们定义了以下内容：
- en: '[PRE15]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This sample creates one rule that instructs `yamllint` not to enforce any particular
    method of indentation.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例创建了一个规则，指示`yamllint`不强制执行任何特定的缩进方法。
- en: 'A deep dive into configuring `yamllint` rules is beyond the scope of this chapter,
    but you can refer to the `yamllint` documentation on the topic of rules to learn
    more: [https://yamllint.readthedocs.io/en/stable/rules.html](https://yamllint.readthedocs.io/en/stable/rules.html).'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 深入配置`yamllint`规则的内容超出了本章的范围，但您可以参考`yamllint`文档中的规则部分，了解更多信息：[https://yamllint.readthedocs.io/en/stable/rules.html](https://yamllint.readthedocs.io/en/stable/rules.html)。
- en: In this section, we discussed how you can validate the local rendering of your
    Helm charts by using the `helm template`, `helm lint`, and `yamllint` commands.
    This, however, does not verify your chart’s functionality or the application’s
    ability to run properly. In the next section, we will address this topic by learning
    how to create tests in a live Kubernetes cluster.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了如何通过使用`helm template`、`helm lint`和`yamllint`命令验证您 Helm 图表的本地渲染。然而，这并不能验证您的图表功能或应用程序是否能正常运行。在下一节中，我们将通过学习如何在实时
    Kubernetes 集群中创建测试来解决这个问题。
- en: Testing in a live cluster
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在实时集群中进行测试
- en: Understanding how to perform tests in a live Kubernetes cluster is an essential
    part of developing and maintaining a Helm chart. Live testing helps ensure your
    chart is functioning as intended and can be used to help prevent regressions as
    new additions are introduced to your chart over time.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 了解如何在实时Kubernetes集群中执行测试是开发和维护Helm图表的重要组成部分。实时测试有助于确保你的图表按预期功能运行，并能帮助防止随着图表中新增内容而引入的回归问题。
- en: 'Testing can involve, but is not limited to, the following two different constructs:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 测试可能涉及但不限于以下两种不同的结构：
- en: Readiness probes and the `helm install --wait` command
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 就绪探针和`helm install --wait`命令
- en: Test hooks and the `helm test` command
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试钩子和`helm test`命令
- en: 'A readiness probe is a type of health check in Kubernetes that, upon success,
    marks a pod as `Ready` and makes the pod eligible to receive ingress traffic.
    An example of a readiness probe is located at `chapter9/guestbook/templates/deployment.yaml`:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 就绪探针是一种Kubernetes中的健康检查类型，在成功时，会将Pod标记为`Ready`，使其能够接收入口流量。一个就绪探针的示例位于`chapter9/guestbook/templates/deployment.yaml`中：
- en: '[PRE16]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This readiness probe will mark the pod as `Ready` when an HTTP `GET` request
    succeeds against the `/` path.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 当HTTP `GET`请求成功访问`/`路径时，这个就绪探针将把Pod标记为`Ready`。
- en: Readiness probes can be used alongside the `–wait` flag, which forces Helm to
    return successfully only when the probe passes. If the readiness probe times out,
    Helm will return exit code `1`, indicating that the installation was not successful.
    A timeout occurs 5 minutes after the installation begins, by default. This can
    be configured with the `--timeout` flag.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 就绪探针可以与`--wait`标志一起使用，该标志强制Helm仅在探针通过时才返回成功。如果就绪探针超时，Helm将返回退出代码`1`，表示安装未成功。默认情况下，超时发生在安装开始后的5分钟内。这个超时时间可以通过`--timeout`标志进行配置。
- en: 'The following is an example of invoking `helm install` with the `--wait` flag:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用`--wait`标志调用`helm install`的示例：
- en: '[PRE17]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Other commands that also support the `--wait` flag include `upgrade`, `rollback`,
    and `uninstall`. However, when used with `uninstall`, Helm waits for each resource
    to be deleted instead.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 其他也支持`--wait`标志的命令包括`upgrade`、`rollback`和`uninstall`。但是，当与`uninstall`一起使用时，Helm会等待每个资源被删除。
- en: 'Besides readiness probes, testing in Helm can also be performed by using test
    hooks and the `helm test` command. Test hooks are pods that perform custom tests
    after the Helm chart is installed to confirm they execute successfully. They are
    defined under the `templates` directory and contain the `helm.sh/hook: test` annotation.
    When the `helm test` command is run, templates with the test annotation are created
    and execute their defined functions.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '除了就绪探针，Helm中的测试还可以通过使用测试钩子和`helm test`命令来执行。测试钩子是安装Helm图表后执行自定义测试的Pod，以确认它们成功执行。它们定义在`templates`目录下，并包含`helm.sh/hook:
    test`注解。当运行`helm test`命令时，带有测试注解的模板会被创建并执行它们定义的函数。'
- en: 'We can see an example test in `chapter9/guestbook/templates/tests/test-connection.yaml`:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在`chapter9/guestbook/templates/tests/test-connection.yaml`中看到一个示例测试：
- en: '[PRE18]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As we can see, this test attempts to make a call to the guestbook frontend.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，这个测试尝试向guestbook前端发起请求。
- en: Let’s work on running this Helm test in our `minikube` environment.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在我们的`minikube`环境中运行这个Helm测试。
- en: Running the chart test
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行图表测试
- en: 'To run a chart’s tests, the chart must be installed in a Kubernetes environment
    using the `helm install` command. Because the `guestbook` chart contains readiness
    probes for the frontend and Redis instances (provided by the Redis dependency),
    we can add the `--wait` flag to our `helm` command to block until all pods are
    ready. Run the following command to install the `guestbook` chart:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行图表的测试，必须使用`helm install`命令将图表安装到Kubernetes环境中。因为`guestbook`图表包含前端和Redis实例的就绪探针（由Redis依赖提供），我们可以在`helm`命令中添加`--wait`标志，以阻止直到所有Pod准备就绪。运行以下命令以安装`guestbook`图表：
- en: '[PRE19]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Once the chart has been installed, you can use the `helm test` command to execute
    the test life cycle hook. The syntax for the `helm test` command is as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦图表安装完成，你可以使用`helm test`命令来执行测试生命周期钩子。`helm test`命令的语法如下：
- en: '[PRE20]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Run the `helm test` command against the `guestbook` release:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`helm test`命令对`guestbook`发布进行测试：
- en: '[PRE21]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'If your test is successful, you will see the following results in the output:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的测试成功，你将在输出中看到以下结果：
- en: '[PRE22]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'When running your tests, you can also use the `--logs` flag to display the
    logs from your test pods. Let’s run the test again and inspect the logs by including
    the `--logs` flag:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行测试时，你还可以使用`--logs`标志显示测试 pod 的日志。让我们再次运行测试，并通过添加`--logs`标志来检查日志：
- en: '[PRE23]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'As evidenced by the logs from our test pod, our application is up and running!
    As a final step, you can delete your release with `helm uninstall`:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们测试 pod 的日志中可以看出，我们的应用程序已成功启动并运行！作为最后一步，你可以使用`helm uninstall`删除你的发布版本：
- en: '[PRE24]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In this section, we ran a test hook that served as a smoke test for our chart
    installation. In the next section, we will discuss how the testing process can
    be improved by leveraging a tool called **ct**.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们运行了一个测试钩子，作为对 chart 安装的冒烟测试。在下一部分，我们将讨论如何通过利用一个名为**ct**的工具来改进测试过程。
- en: Improving chart tests with the Chart Testing tool
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Chart Testing 工具改进 chart 测试
- en: The testing methods described in the previous section are sufficient enough
    to determine whether a Helm chart can be successfully installed. However, some
    key limitations are inherent to the standard Helm testing process and need to
    be discussed.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 上一部分描述的测试方法足够确定 Helm chart 是否可以成功安装。然而，标准的 Helm 测试过程固有的一些关键限制仍然需要讨论。
- en: 'The first limitation to consider is the difficulty of testing different permutations
    that can occur within a chart’s values. Because the `helm test` command does not
    provide the ability to modify a release’s values beyond those set at the time
    of an installation or upgrade, the following workflow must be followed when running
    `helm test` against different values:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个需要考虑的限制是测试 chart 值中可能出现的不同组合的难度。因为`helm test`命令不提供修改发布版本的值的功能，超出安装或升级时设置的值，因此在对不同值运行`helm
    test`时，必须遵循以下工作流程：
- en: Install your chart with an initial set of values.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用初始值集安装你的 chart。
- en: Run `helm test` against your release.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对你的发布版本运行`helm test`。
- en: Delete your release.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除你的发布版本。
- en: Install the chart with a different set of values.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用不同的值集安装 chart。
- en: Repeat *Step 2* through *Step 4* until a significant amount of value possibilities
    have been tested.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复*第 2 步*到*第 4 步*，直到测试了大量的值组合。
- en: Each of these manual steps poses the risk of errors.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 每一个手动步骤都存在出错的风险。
- en: 'In addition to testing different value permutations, you should also make sure
    regressions do not occur when making modifications to your charts. The best way
    to prevent regressions is to include the usage of `helm upgrade` in your testing
    workflow:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 除了测试不同的值组合外，你还应该确保在修改 chart 时不会发生回归。防止回归的最佳方法是将`helm upgrade`的使用纳入你的测试工作流程：
- en: Install the previous chart version.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装之前的 chart 版本。
- en: Upgrade your release to the newer chart version.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的发布版本升级到更新的 chart 版本。
- en: Delete the release.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除发布版本。
- en: Install the newer chart version.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装更新的 chart 版本。
- en: This workflow should be repeated against each set of values to ensure that there
    are no regressions or unintended breaking changes.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 应该针对每一组值重复此工作流程，以确保没有回归或无意的破坏性变化。
- en: These processes sound tedious but imagine the additional strain chart developers
    face when maintaining Helm chart **monorepos**, where multiple charts need to
    be tested and maintained at the same time. A repository is considered a monorepo
    when multiple different artifacts or modules are contained in the same repository.
    A monorepo design is the most common way for a chart developer or an organization
    to develop and maintain its charts.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这些过程听起来可能很繁琐，但想象一下在维护 Helm chart **单一仓库**时，chart 开发者所面临的额外压力，因为多个 chart 需要同时进行测试和维护。当多个不同的工件或模块包含在同一个仓库中时，仓库就被认为是单一仓库。单一仓库设计是
    chart 开发者或组织开发和维护其 chart 的最常见方式。
- en: 'A Helm chart monorepo could have the following file structure:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 Helm chart 单一仓库可能具有以下文件结构：
- en: '[PRE25]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Helm charts in a well-maintained monorepo should adhere to proper `MAJOR.MINOR.PATCH`
    version format. Use the following list as a guideline on how to increase a SemVer
    version:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个维护良好的单一仓库中的 Helm chart 应遵循适当的`MAJOR.MINOR.PATCH`版本格式。使用以下列表作为如何增加 SemVer
    版本的指南：
- en: Increment the `MAJOR` version if you are making a breaking change to your chart.
    A breaking change is a change that is not backward compatible with the previous
    chart version.
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你对 chart 做了破坏性修改，应该增加`MAJOR`版本。破坏性修改指的是与先前的 chart 版本不兼容的修改。
- en: Increment the `MINOR` version if you are adding a feature but you are not making
    a breaking change. You should increment this version if the change you are making
    is backward compatible with the previous chart version.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你正在添加功能但不进行破坏性更改，则应增加 `MINOR` 版本。如果你所做的更改与以前的 chart 版本向后兼容，则应增加此版本。
- en: Increment the `PATCH` version if you are making a bug fix or addressing a security
    vulnerability that will not result in a breaking change. This version should be
    incremented if the change is backward-compatible with the previous chart version.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你正在修复 bug 或解决安全漏洞，而这些更改不会导致破坏性更改，则应增加 `PATCH` 版本。如果该更改与之前的 chart 版本向后兼容，则应增加此版本。
- en: With the responsibilities of chart testing and versioning, it can become increasingly
    difficult for a Helm chart maintainer to ensure that charts are properly tested,
    and their versions are incremented, especially if maintaining a monorepo with
    multiple Helm charts. This challenge prompted the Helm community to create a tool
    called ct to provide structure and automation around the testing and maintenance
    of Helm charts. We will discuss this tool next.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 chart 测试和版本管理的责任，Helm chart 的维护者可能会发现，确保 charts 正确测试并按时增加版本越来越困难，特别是当维护一个包含多个
    Helm charts 的 monorepo 时。这个挑战促使 Helm 社区创建了一个名为 ct 的工具，以便为 Helm charts 的测试和维护提供结构化和自动化的支持。接下来我们将讨论这个工具。
- en: Introducing the Chart Testing project
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍 Chart Testing 项目
- en: The Chart Testing project, which can be found at [https://github.com/helm/chart-testing](https://github.com/helm/chart-testing),
    is designed to be used against charts in a Git monorepo to perform automated linting,
    validation, and testing. This automated testing is achieved by using Git to detect
    when charts have changed against a specified branch. Charts that have changed
    should undergo testing, while charts that were unchanged do not need to be tested.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: Chart Testing 项目可以在 [https://github.com/helm/chart-testing](https://github.com/helm/chart-testing)
    找到，旨在用于 Git monorepo 中的 charts，执行自动化的 lint 检查、验证和测试。这个自动化测试是通过 Git 来检测 charts
    相对于指定分支的变化来实现的。已更改的 charts 应该进行测试，而未更改的 charts 不需要测试。
- en: 'The project’s **Command-Line Interface** (**CLI**), ct, provides four primary
    commands:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目的 **命令行界面** (**CLI**)，ct，提供了四个主要命令：
- en: '`lint`: Lints and validates charts that have been modified'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lint`：对已修改的 charts 进行 lint 检查和验证'
- en: '`install`: Installs the chart in a running Kubernetes cluster and runs test
    hooks against charts that have been modified'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`install`：在运行的 Kubernetes 集群中安装 chart，并对已修改的 charts 运行测试钩子'
- en: '`lint-and-install`: Combines the `lint` and `install` commands'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lint-and-install`：结合了 `lint` 和 `install` 命令'
- en: '`list-changed`: Lists charts that have been modified'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list-changed`：列出已修改的 charts'
- en: The `lint-and-install` command is the primary function of ct. It performs linting,
    installs charts in your Kubernetes cluster, and runs any test hooks that are present.
    It also checks whether you have increased the charts’ `version` fields in `Chart.yaml`
    for any chart that has been modified. This validation helps maintainers enforce
    proper versioning of their Helm charts.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`lint-and-install` 命令是 ct 的主要功能。它执行 lint 检查，安装你 Kubernetes 集群中的 charts，并运行任何存在的测试钩子。它还会检查你是否在
    `Chart.yaml` 文件中增加了已修改 chart 的 `version` 字段。此验证帮助维护者强制执行 Helm charts 的适当版本控制。'
- en: 'The ct tool also lets you test Helm charts against multiple different values
    files. During the invocation of the `lint`, `install`, and `lint-and-install`
    commands, ct loops through each test `values` file and performs linting and testing
    based on the different permutations of values provided. Test `values` files for
    use by ct are written under a folder called `ci/` and end with the `values.yaml`
    format. The following is an example Helm chart structure that includes the `ci`
    folder:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: ct 工具还允许你对多个不同的 values 文件进行 Helm charts 测试。在执行 `lint`、`install` 和 `lint-and-install`
    命令时，ct 会遍历每个测试 `values` 文件，并根据提供的不同 values 组合进行 lint 检查和测试。ct 使用的测试 `values` 文件位于
    `ci/` 文件夹下，并以 `values.yaml` 格式结尾。以下是包含 `ci` 文件夹的 Helm chart 结构示例：
- en: '[PRE26]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Each `values` file under `ci/` should be named appropriately to determine the
    function that the values are testing. For example, `nodeport-service-values.yaml`
    might be used to ensure that `ingress-values.yaml` would test Ingress.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`ci/` 下的每个 `values` 文件应根据其测试功能命名。例如，`nodeport-service-values.yaml` 可能用于确保 `ingress-values.yaml`
    会测试 Ingress。'
- en: 'The most common ct command you are likely to use is the `lint-and-install`
    command. When this command is running, a series of steps are executed:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 你最常使用的 ct 命令可能是`lint-and-install`命令。当这个命令运行时，会执行一系列步骤：
- en: Detect the charts that have been modified within the Git monorepo. Ensure that
    the charts’ versions have been incremented.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检测在 Git 单一仓库中已修改的图表。确保图表的版本已递增。
- en: For each chart that has been modified, lint the chart and each `values` file
    under the `ci/` folder.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个已修改的图表，检查图表及`ci/`文件夹下的每个`values`文件。
- en: For each chart that has been modified, install the chart in the Kubernetes cluster
    and wait for the readiness probes to pass. Once the probes have passed, run test
    hooks, if present. Repeat *Step 3* for each `values` file in the `ci/` folder.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个已修改的图表，在 Kubernetes 集群中安装该图表并等待就绪探针通过。一旦探针通过，运行测试钩子（如果存在）。对于`ci/`文件夹中的每个`values`文件，重复*第
    3 步*。
- en: Uninstall the Helm release.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 卸载 Helm 发布。
- en: As you can see, this command performs a variety of steps to ensure your charts
    are properly linted and tested. However, by default, the `lint-and-install` command
    does not check for backward compatibility. This feature can be enabled by adding
    the `--upgrade` flag.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这个命令执行了多种步骤，以确保你的图表已正确检查和测试。然而，默认情况下，`lint-and-install`命令不会检查向后兼容性。通过添加`--upgrade`标志，可以启用此功能。
- en: When the `--upgrade` flag is provided, ct checks if the `MAJOR` version number
    of the chart’s version has been incremented. If a breaking change is not expected,
    then ct deploys the previous chart version first and then upgrades to the new
    version. This helps ensure that regressions have not occurred. Then, ct installs
    the new version directly using a standard release. We recommend adding the `--upgrade`
    flag when using the `lint-and-install` command.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 当提供`--upgrade`标志时，ct 会检查图表版本的`MAJOR`版本号是否已递增。如果不期望出现重大更改，ct 会先部署先前的图表版本，然后升级到新版本。这有助于确保没有回归问题。接着，ct
    会直接使用标准发布安装新版本。我们建议在使用`lint-and-install`命令时添加`--upgrade`标志。
- en: Let’s continue by installing ct and its dependencies locally. Then, we will
    look at an example of how ct can be used.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续在本地安装 ct 及其依赖项。然后，我们将看一个如何使用 ct 的示例。
- en: Installing the Chart Testing tools
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Chart Testing 工具
- en: 'To use ct, you must have the following tools installed on your local machine:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 ct，你必须在本地机器上安装以下工具：
- en: '`helm`'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`helm`'
- en: '`git` (version 2.17.0 or later)'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git`（版本 2.17.0 或更高）'
- en: '`yamllint`'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`yamllint`'
- en: '`yamale`'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`yamale`'
- en: '`kubectl`'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubectl`'
- en: Instructions for installing `helm` and `kubectl` were provided in [*Chapter
    2*](B17979_02.xhtml#_idTextAnchor038), *Preparing a Kubernetes and Helm Environment*,
    while `yamllint` was installed earlier in this chapter. Now, we’ll install `yamale`,
    which is a tool for validating YAML schemas. It is used by ct to validate the
    `Chart.yaml` file.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 安装`helm`和`kubectl`的说明已在[*第 2 章*](B17979_02.xhtml#_idTextAnchor038)《准备 Kubernetes
    和 Helm 环境》中提供，而`yamllint`在本章前面已经安装。现在，我们将安装`yamale`，这是一款用于验证 YAML 模式的工具。ct 使用它来验证`Chart.yaml`文件。
- en: '`yamale` can be installed with the `pip3` package manager, as shown here:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`yamale`可以通过`pip3`包管理器安装，如下所示：'
- en: '[PRE27]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'You can also install Yamale manually by downloading an archive from [https://github.com/23andMe/Yamale/archive/master.zip](https://github.com/23andMe/Yamale/archive/master.zip).
    Once downloaded, unzip the archive and run the `setup.py` script:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过从[https://github.com/23andMe/Yamale/archive/master.zip](https://github.com/23andMe/Yamale/archive/master.zip)下载档案手动安装
    Yamale。下载后，解压档案并运行`setup.py`脚本：
- en: '[PRE28]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Once you have the prerequisite tooling installed, you should download ct from
    the project’s GitHub releases page at [https://github.com/helm/chart-testing/releases](https://github.com/helm/chart-testing/releases).
    Each release contains an *Assets* section with a list of archives associated with
    each release.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你安装了必要的工具，应该从项目的 GitHub 发布页面下载 ct，地址是[https://github.com/helm/chart-testing/releases](https://github.com/helm/chart-testing/releases)。每个发布版本都包含一个*Assets*部分，其中列出了与每个发布版本相关的档案。
- en: 'Download the archive that corresponds with the platform type of your local
    machine. Version **v3.5.1** was the version that was used for this publication:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 下载与本地机器平台类型对应的档案。**v3.5.1** 版本是本书使用的版本：
- en: '![Figure 9.3 – The Helm releases page on GitHub'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.3 – GitHub 上的 Helm 发布页面'
- en: '](img/Figure_9.03_B17979.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.03_B17979.jpg)'
- en: Figure 9.3 – The Helm releases page on GitHub
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.3 – GitHub 上的 Helm 发布页面
- en: 'Unarchive the release once you have downloaded the appropriate archive from
    the GitHub releases page. Once unarchived, you will see the following contents:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 从 GitHub 发布页面下载适当的压缩包后，解压该发布包。一旦解压，你会看到以下内容：
- en: '[PRE29]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The `LICENSE` and `README.md` files can be removed as they are not needed.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '`LICENSE` 和 `README.md` 文件可以删除，因为它们不需要。'
- en: The `etc/chart_schema.yaml` and `etc/lintconf.yaml` files can be moved to either
    the `$HOME/.ct/` or `/etc/ct/` location on your local machine. These files provide
    `yamllint` and `yamale` rules for linting and schema validation. When moved to
    the suggested locations, they provide default rules for any invocation of ct,
    regardless of their location on the filesystem.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`etc/chart_schema.yaml` 和 `etc/lintconf.yaml` 文件可以移动到本地机器上的 `$HOME/.ct/` 或
    `/etc/ct/` 位置。这些文件提供了用于 lint 检查和模式验证的 `yamllint` 和 `yamale` 规则。将其移动到建议位置后，它们为任何
    ct 调用提供默认规则，无论它们在文件系统中的位置如何。'
- en: 'You should also move ct to a location that is included in your system’s `PATH`
    variable. Moving ct as well as the files located under `etc` can be done with
    the following commands:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应该将 ct 移动到系统的 `PATH` 变量中包含的位置。可以通过以下命令移动 ct 以及位于 `etc` 目录下的文件：
- en: '[PRE30]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now that all of the required tools have been installed, let’s clone the Packt
    repository – that is, if you did not clone it previously. We will interact with
    this repository to demonstrate the use of ct:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 现在所有必需的工具已经安装好，让我们克隆 Packt 仓库——如果你之前没有克隆过的话。我们将与这个仓库交互，演示如何使用 ct：
- en: '[PRE31]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Once cloned, you will notice that this repository contains several ct-related
    files:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 克隆完成后，你会注意到这个仓库包含了几个与 ct 相关的文件：
- en: '`lintconf.yaml`: This is a copy of the same file that was included in the ct
    archive. When added to a repository, ct uses this local reference instead of the
    default file located at `$HOME/.ct/`.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lintconf.yaml`：这是与 ct 压缩包中包含的相同文件的副本。添加到仓库后，ct 使用此本地引用，而不是位于 `$HOME/.ct/`
    的默认文件。'
- en: '`chart_schema.yaml`: This is also a copy of the same file that was included
    in the ct archive. When added to a repository, ct uses this local reference instead
    of the default file located at `$HOME/.ct/`.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chart_schema.yaml`：这是与 ct 压缩包中包含的相同文件的副本。添加到仓库后，ct 使用此本地引用，而不是位于 `$HOME/.ct/`
    的默认文件。'
- en: '`ct.yaml`: This file contains the configuration for ct.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ct.yaml`：此文件包含 ct 的配置。'
- en: 'The following are a couple of the configurations that are included in the `ct.yaml`
    file:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是包含在 `ct.yaml` 文件中的几个配置：
- en: '[PRE32]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The `chart-dirs` field indicates that the `helm-charts/charts` directory relative
    to `ct.yaml` is the root of the Helm chart monorepo. The `chart-repos` field provides
    a list of repositories that ct should add to download dependencies. A variety
    of other configurations can be added to this file to customize the execution of
    ct. The full list of available options can be reviewed in the Chart Testing documentation
    at [https://github.com/helm/chart-testing](https://github.com/helm/chart-testing).
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`chart-dirs` 字段表示相对于 `ct.yaml` 文件的 `helm-charts/charts` 目录是 Helm 图表单仓库的根目录。`chart-repos`
    字段提供了 ct 应该添加以下载依赖项的仓库列表。可以向此文件添加多种其他配置，以自定义 ct 的执行。可用选项的完整列表可以在 [https://github.com/helm/chart-testing](https://github.com/helm/chart-testing)
    上的 Chart Testing 文档中查看。'
- en: Now, let’s see ct in action by running the `lint-and-install` command.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过运行 `lint-and-install` 命令来看看 ct 的实际效果。
- en: Running the lint-and-install command
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行 lint-and-install 命令
- en: 'In the `helm-charts/charts` folder, which is the location of our Helm charts
    monorepo, we have two charts:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `helm-charts/charts` 文件夹中，这是我们 Helm 图表单仓库的位置，我们有两个图表：
- en: '`guestbook` chart that we wrote in *Part 2* of this book.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 *第 2 部分* 中我们编写的 `guestbook` 图表。
- en: '`helm create` and is used to deploy an `nginx` reverse proxy.'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`helm create` 用于部署 `nginx` 反向代理。'
- en: 'The `guestbook` and `nginx` Helm charts are the charts that will be tested
    with ct. First, let’s navigate to the top level of the Git repository:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`guestbook` 和 `nginx` Helm 图表是将与 ct 一起测试的图表。首先，让我们导航到 Git 仓库的顶层：'
- en: '[PRE33]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Since ct should run in the same folder as the `ct.yaml` file, we can simply
    run `ct lint-and-install` from the top level of the repository:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 ct 应该在与 `ct.yaml` 文件相同的文件夹中运行，我们可以简单地从仓库的顶层运行 `ct lint-and-install`：
- en: '[PRE34]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'After running this command, you should see the following message:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令后，你应该会看到以下消息：
- en: '[PRE35]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Since none of the charts were modified, ct did not perform any testing on your
    charts. We should modify at least one chart in the `helm-charts/charts` directory
    to allow for testing to take place. Since normal development would likely involve
    feature branches, let’s create a new Git branch where we will make modifications.
    Create a new branch called `chart-testing-example` by running the following command:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 由于没有修改任何图表，ct 并未对您的图表进行任何测试。我们应该至少修改 `helm-charts/charts` 目录中的一个图表，以便进行测试。由于正常的开发流程可能涉及功能分支，让我们创建一个新的
    Git 分支，在该分支上进行修改。通过运行以下命令创建一个名为 `chart-testing-example` 的新分支：
- en: '[PRE36]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The modifications can be of any size and type, so for this example, we will
    simply modify the `nginx` chart’s `Chart.yaml` file. Modify the description fields
    of the `helm-charts/charts/nginx/Chart.yaml` file so that they read as follows:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 修改可以是任何大小和类型，因此在本例中，我们将仅修改 `nginx` 图表的 `Chart.yaml` 文件。修改 `helm-charts/charts/nginx/Chart.yaml`
    文件中的描述字段，使其如下所示：
- en: '[PRE37]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Previously, this value was `A Helm chart for Kubernetes`. Verify that the `nginx`
    chart has been modified by running the `git status` command:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，该值为 `A Helm chart for Kubernetes`。通过运行 `git status` 命令验证 `nginx` 图表是否已被修改：
- en: '[PRE38]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'You should see an output similar to the following:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到类似以下的输出：
- en: '![Figure 9.4 – Git status, displaying a change in Chart.yaml'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.4 – Git 状态，显示了 `Chart.yaml` 的变化'
- en: '](img/Figure_9.04_B17979.jpg)'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.04_B17979.jpg)'
- en: Figure 9.4 – Git status, displaying a change in Chart.yaml
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.4 – Git 状态，显示了 `Chart.yaml` 的变化
- en: 'Now, try to run the `lint-and-install` command again:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，尝试再次运行 `lint-and-install` 命令：
- en: '[PRE39]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'This time, ct displays the charts from the monorepo that have changed:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，ct 显示了在 monorepo 中发生变化的图表：
- en: '[PRE40]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The process, however, fails later on because the `nginx` chart version was
    not modified:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，过程稍后失败，因为 `nginx` 图表版本没有被修改：
- en: '![Figure 9.5 – ct output when chart versions are not updated'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.5 – 当图表版本未更新时，ct 输出'
- en: '](img/Figure_9.05_B17979.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.05_B17979.jpg)'
- en: Figure 9.5 – ct output when chart versions are not updated
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.5 – 当图表版本未更新时，ct 输出
- en: 'This can be fixed by incrementing the version of the `nginx` chart. Since this
    change does not introduce new features, we will increment the `PATCH` version.
    Modify the `nginx` chart version to `1.0.1` in the `Chart.yaml` file:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过递增 `nginx` 图表的版本来修复。由于此更改并未引入新特性，我们将递增 `PATCH` 版本。在 `Chart.yaml` 文件中将 `nginx`
    图表的版本修改为 `1.0.1`：
- en: '[PRE41]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Once the version is updated, run the `lint-and-install` command again:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦版本更新，重新运行 `lint-and-install` 命令：
- en: '[PRE42]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Now that the chart version has been incremented, the `lint-and-install` command
    will follow the full testing workflow. You will see that the `nginx` chart has
    been linted and deployed to an automatically created namespace (though a specific
    namespace can be targeted by using the `--namespace` flag). Once the deployed
    pods are reported as ready, ct will automatically run the test hooks denoted by
    resources with the `helm.sh/hook test` annotation. ct will also print the logs
    of each test pod, as well as the namespace events.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，图表版本已经递增，`lint-and-install` 命令将按照完整的测试流程进行。您将看到 `nginx` 图表已被 lint 检查并部署到自动创建的命名空间（尽管可以通过使用
    `--namespace` 标志来指定特定的命名空间）。一旦部署的 Pod 被报告为已准备好，ct 将自动运行由带有 `helm.sh/hook test`
    注解的资源表示的测试钩子。ct 还将打印每个测试 Pod 的日志以及命名空间事件。
- en: 'You may notice that the `nginx` chart was deployed multiple times. This is
    because the `nginx` chart contains a `ci/` folder, located within the `helm-charts/charts/nginx/ci`
    directory. This folder contains two different values files, so the `nginx` Helm
    chart was installed two different times to test both sets of values. This can
    be observed throughout the output of `lint-and-install`:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会注意到 `nginx` 图表被多次部署。这是因为 `nginx` 图表包含一个 `ci/` 文件夹，该文件夹位于 `helm-charts/charts/nginx/ci`
    目录中。该文件夹包含两个不同的值文件，因此 `nginx` Helm 图表被安装了两次，以测试这两组值。这可以从 `lint-and-install` 的输出中看到：
- en: '[PRE43]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'While this process was useful for testing the functionality of updated charts,
    it did not validate whether upgrades to the newer version will be successful.
    To do this, we need to provide the `--upgrade` flag. Run `lint-and-install` again,
    but this time, let’s add the `--upgrade` flag:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个过程对测试更新后的图表功能非常有用，但它并未验证升级到新版本是否会成功。要进行此验证，我们需要提供 `--upgrade` 标志。再次运行 `lint-and-install`
    命令，但这次我们将添加 `--upgrade` 标志：
- en: '[PRE44]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'This time, an in-place upgrade will occur for each `values` file under the
    `ci/` directory. This can be seen in the following output:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，将对 `ci/` 目录下的每个 `values` 文件进行就地升级。这可以从以下输出中看到：
- en: '[PRE45]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Recall that an in-place upgrade will only be tested if the `MAJOR` version
    between versions is the same. If the `--upgrade` flag was specified and the `MAJOR`
    version was changed, you would see a message similar to the following:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，只有当版本之间的`MAJOR`版本相同，才会测试就地升级。如果指定了`--upgrade`标志并且`MAJOR`版本发生了变化，你将看到类似以下的消息：
- en: '[PRE46]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Now that you have an understanding of how to test your Helm charts robustly,
    we will conclude by cleaning up the `minikube` environment.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了如何稳健地测试Helm图表，接下来我们将通过清理`minikube`环境来结束。
- en: Cleaning up
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 清理
- en: 'If you have finished with the examples in this chapter, you can remove the
    `chapter9` namespace from your `minikube` cluster:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经完成本章中的示例，你可以从`minikube`集群中删除`chapter9`命名空间：
- en: '[PRE47]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Finally, shut down your `minikube` cluster by running `minikube stop`.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，通过运行`minikube stop`来关闭你的`minikube`集群。
- en: Summary
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about different methods you can apply to test your
    Helm charts. The most basic way to test a chart is to run the `helm template`
    command against a local chart directory and determine whether its resources were
    generated. You can also use the `helm lint` command to ensure that your chart
    follows the correct formatting for Helm resources, and you can use the `yamllint`
    command to lint the YAML style that’s used in your chart.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了不同的方法来测试你的Helm图表。测试图表的最基本方式是使用`helm template`命令针对本地图表目录运行，并确定是否生成了相应的资源。你还可以使用`helm
    lint`命令来确保图表遵循Helm资源的正确格式，并且可以使用`yamllint`命令来检查图表中使用的YAML格式。
- en: Apart from local templating and linting, you can also perform live tests on
    a Kubernetes environment with the `helm test` command and the ct tool. In addition
    to performing basic chart testing capabilities, ct also provides features that
    make it easier to maintain Helm charts in a monorepo.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 除了本地模板化和代码检查外，你还可以使用`helm test`命令和ct工具在Kubernetes环境中执行实时测试。除了执行基本的图表测试功能外，ct还提供了一些功能，使得在单一代码库中维护Helm图表变得更加容易。
- en: In the next chapter, you will learn how Helm can be used within a **continuous
    delivery** (**CD**) and GitOps setting.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章节中，你将学习如何在**持续交付**（**CD**）和GitOps环境中使用Helm。
- en: Further reading
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'For additional information on the `helm template` and `helm lint` commands,
    please refer to the following resources:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`helm template`和`helm lint`命令的更多信息，请参考以下资源：
- en: '`helm template`: [https://helm.sh/docs/helm/helm_template/](https://helm.sh/docs/helm/helm_template/)'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`helm template`: [https://helm.sh/docs/helm/helm_template/](https://helm.sh/docs/helm/helm_template/)'
- en: '`helm lint`: [https://helm.sh/docs/helm/helm_lint/](https://helm.sh/docs/helm/helm_lint/)'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`helm lint`: [https://helm.sh/docs/helm/helm_lint/](https://helm.sh/docs/helm/helm_lint/)'
- en: 'The following pages from the Helm documentation discuss chart tests and the
    `helm test` command:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Helm文档中讨论图表测试和`helm test`命令的相关页面：
- en: 'Chart tests: [https://helm.sh/docs/topics/chart_tests/](https://helm.sh/docs/topics/chart_tests/)'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图表测试： [https://helm.sh/docs/topics/chart_tests/](https://helm.sh/docs/helm/topics/chart_tests/)
- en: 'The `helm test` command: [https://helm.sh/docs/helm/helm_test/](https://helm.sh/docs/helm/helm_test/)'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`helm test`命令：[https://helm.sh/docs/helm/helm_test/](https://helm.sh/docs/helm/helm_test/)'
- en: 'Finally, see the Chart Testing GitHub repository for more information about
    the ct CLI: [https://github.com/helm/chart-testing](https://github.com/helm/chart-testing).'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，查看Chart Testing GitHub仓库，获取关于ct CLI的更多信息：[https://github.com/helm/chart-testing](https://github.com/helm/chart-testing)
- en: Questions
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Answer the following questions to test your knowledge of this chapter:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 回答以下问题以测试你对本章内容的理解：
- en: What is the purpose of the `helm template` command? How does it differ from
    the `helm lint` command?
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`helm template`命令的目的是什么？它与`helm lint`命令有何不同？'
- en: What tool can be leveraged to lint the YAML style of rendered Helm templates?
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以利用什么工具来检查渲染后的Helm模板的YAML格式？
- en: How is a chart test created? How is a chart test executed?
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何创建图表测试？如何执行图表测试？
- en: What is the difference between `helm test` and `ct lint-and-install`?
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`helm test`和`ct lint-and-install`之间有什么区别？'
- en: What is the purpose of the `ci/` folder when used with the ct tool?
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当与ct工具一起使用时，`ci/`文件夹的目的是什么？
- en: How does the `--upgrade` flag change the behavior of the `ct lint-and-install`
    command?
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`--upgrade`标志如何改变`ct lint-and-install`命令的行为？'
- en: 'Part 3: Advanced Deployment Patterns'
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3部分：高级部署模式
- en: The Helm **command-line interface** (**CLI**) is a robust toolkit, but efficiency
    can be further increased with automation. In *Part 3*, you will learn about incorporating
    Helm into industry-standard deployment methodologies. You will also take a deep
    dive into important security considerations throughout day-to-day Helm usage.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: Helm **命令行界面** (**CLI**) 是一个强大的工具包，但通过自动化可以进一步提高效率。在 *第3部分* 中，您将学习如何将 Helm 融入行业标准的部署方法。您还将深入了解在日常
    Helm 使用过程中需要考虑的重要安全因素。
- en: 'In this part, we will cover the following topics:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在本部分中，我们将涵盖以下主题：
- en: '[*Chapter 10*](B17979_10.xhtml#_idTextAnchor241)*, Automating Helm with CD
    and GitOps*'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第10章*](B17979_10.xhtml#_idTextAnchor241)*，使用 CD 和 GitOps 自动化 Helm*'
- en: '[*Chapter 11*](B17979_11.xhtml#_idTextAnchor255)*, Using Helm with the Operator
    Framework*'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第11章*](B17979_11.xhtml#_idTextAnchor255)*，使用 Helm 与 Operator 框架*'
- en: '[*Chapter 12*](B17979_12.xhtml#_idTextAnchor270)*, Helm Security Considerations*'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第12章*](B17979_12.xhtml#_idTextAnchor270)*，Helm 安全性考虑*'

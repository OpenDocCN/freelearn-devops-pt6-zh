- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Edge Computing with Kubernetes
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Kubernetes进行边缘计算
- en: Edge computing is an emerging paradigm of distributed systems where the units
    that compute information are close to the origin of that information. The benefit
    of this paradigm is that it helps your system to reduce network outages and reduces
    the delays when you process across the cloud. This means you get a better interactive
    experience with your machine learning or **Internet of Things** (**IoT**) applications.
    This chapter covers the basics and the importance of edge computing and how Kubernetes
    can be used for it. It also covers different scenarios and basic architectures
    using low-power devices, which can use private and public clouds to exchange data.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 边缘计算是一种新兴的分布式系统范式，其中计算信息的单元靠近该信息的来源。该范式的好处是，它帮助您的系统减少网络中断，并减少通过云进行处理时的延迟。这意味着您可以获得更好的交互体验，尤其是在机器学习或**物联网**（**IoT**）应用程序中。本章介绍了边缘计算的基础知识和重要性，以及Kubernetes如何用于边缘计算。它还涵盖了使用低功耗设备的不同场景和基本架构，这些设备可以使用私有云和公共云来交换数据。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将覆盖以下主要主题：
- en: Edge data centers using K3s and basic edge computing concepts
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用K3s的边缘数据中心和基本的边缘计算概念
- en: Basic edge computing architectures with K3s
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于K3s的基本边缘计算架构
- en: Adapting your software to run at the edge
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将软件适配到边缘运行
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this chapter, we are going to run our edge computing on an edge device (such
    as a **Raspberry Pi**), so we need to set up a cross-compiling toolchain for **Advanced
    RISC Machines** (**ARM**).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将会在边缘设备上运行我们的边缘计算（例如**树莓派**），因此我们需要为**先进的RISC机器**（**ARM**）设置一个交叉编译工具链。
- en: 'For this, you need one of the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，您需要以下设备之一：
- en: A Mac with terminal access
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一台可以访问终端的Mac
- en: A PC with Ubuntu installed with terminal access
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装了Ubuntu的PC，并且可以通过终端访问
- en: A virtual machine with Ubuntu installed with terminal access
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装了Ubuntu的虚拟机，并且可以通过终端访问
- en: 'For more detail and code snippets, check out this resource on GitHub: [https://github.com/PacktPublishing/Edge-Computing-Systems-with-Kubernetes/tree/main/ch1](https://github.com/PacktPublishing/Edge-Computing-Systems-with-Kubernetes/tree/main/ch1).'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多详细信息和代码片段，请查看GitHub上的这个资源：[https://github.com/PacktPublishing/Edge-Computing-Systems-with-Kubernetes/tree/main/ch1](https://github.com/PacktPublishing/Edge-Computing-Systems-with-Kubernetes/tree/main/ch1)。
- en: Edge data centers using K3s and basic edge computing concepts
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用K3s的边缘数据中心和基本的边缘计算概念
- en: With the evolution of the cloud, companies and organizations are starting to
    migrate their processing tasks to edge computing devices, with the goal to reduce
    costs and get more benefits for the infrastructure that they are paying for. As
    a part of the introductory content in this book, we must learn about the basic
    concepts related to edge computing and understand why we use K3s for edge computing.
    So, let’s get started with the basic concepts.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 随着云计算的发展，企业和组织开始将处理任务迁移到边缘计算设备上，目的是降低成本，并从他们支付的基础设施中获得更多的好处。作为本书的入门内容，我们需要了解与边缘计算相关的基本概念，并理解为何我们要使用K3s进行边缘计算。那么，让我们从基本概念开始吧。
- en: The edge and edge computing
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 边缘和边缘计算
- en: According to the Qualcomm and Cisco companies, the edge can be defined as *“anywhere
    where data is processed before it crosses the Wide Area Network (WAN)”*; this
    is the edge, but what is edge computing? A post by Eric Hamilton from Cloudwards.net
    defines edge computing as *“the processing and analyzing of data along a network
    edge, closest to the point of its collection, so that data becomes actionable.”*
    In other words, edge computing refers to processing your data near to the source
    and distributing the computation in different places, using devices that are close
    to the source of data.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 根据高通和思科公司的定义，边缘可以被描述为*“数据在跨越广域网（WAN）之前进行处理的任何地方”*；这就是边缘，但什么是边缘计算呢？Cloudwards.net的Eric
    Hamilton在一篇文章中将边缘计算定义为*“沿着网络边缘处理和分析数据，尽可能靠近数据收集的源头，以便使数据变得可操作。”* 换句话说，边缘计算是指将数据处理靠近源头，并将计算分布在不同的地方，使用靠近数据源的设备进行处理。
- en: 'To add more context, let’s explore the next figure:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供更多背景信息，我们来看看下一个图示：
- en: '![Figure 1.1 – Components of edge layers](img/B16945_Figure_1.1.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图1.1 – 边缘层的组件](img/B16945_Figure_1.1.jpg)'
- en: Figure 1.1 – Components of edge layers
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1 – 边缘层的组件
- en: 'This figure shows how the data is processed in different contexts; these contexts
    are the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这个图示展示了数据在不同上下文中的处理方式，这些上下文包括以下几种：
- en: '**Cloud layer**: In this layer, you can find the cloud providers, such as AWS,
    Azure, GCP, and more.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**云层**：在这一层，你可以找到云服务提供商，如 AWS、Azure、GCP 等。'
- en: '**Near edge**: In this layer, you can find telecommunications infrastructure
    and devices, such as 5G networks, radio virtual devices, and similar devices.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**近端边缘**：在这一层，你可以找到电信基础设施和设备，如 5G 网络、无线虚拟设备等类似设备。'
- en: '**Far edge**: In this layer, you will find edge clusters, such as K3s clusters
    or devices that exchange data between the cloud and edge layer, but this layer
    can be subdivided into the tiny edge layer.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**远端边缘**：在这一层，你会找到边缘集群，如 K3s 集群或在云与边缘层之间交换数据的设备，但这一层可以细分为微型边缘层。'
- en: '**Tiny edge**: In this layer, you will find sensors, end-user devices that
    exchange data with a processing device, and edge clusters on the far edge.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**微型边缘**：在这一层，你会找到传感器、终端设备，它们与处理设备交换数据，以及远端边缘的边缘集群。'
- en: Important Note
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Remember that edge computing refers to data that is processed on edge devices
    before the result goes to its destination, which could be on a public or private
    cloud.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，边缘计算指的是数据在到达目标地点之前先在边缘设备上进行处理，这些目标地点可以是公有云或私有云。
- en: 'Other important concepts to consider for building edge clusters are the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 建设边缘集群时，还需要考虑其他重要概念，包括以下内容：
- en: '**Fog computing**: An architecture of cloud services that distribute the system
    across near edge and far edge devices; these devices can be geographically dispersed.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**雾计算**：一种将系统分布在近端边缘和远端边缘设备之间的云服务架构；这些设备可以地理上分布在不同区域。'
- en: '**Multi-Access Edge Computing** (**MEC**): This distributes the computing at
    the edge of larger networks, with low latency and high bandwidth, and is the predecessor
    of mobile edge computing; in other words, the processing uses telecom networks
    and mobile devices.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多接入边缘计算**（**MEC**）：这将计算分布到大规模网络的边缘，具备低延迟和高带宽，是移动边缘计算的前身；换句话说，处理过程使用电信网络和移动设备。'
- en: '**Cloudlets**: This is a small-scale cloud data center, which could be used
    for resource-intensive use cases, such as data analytics, **Machine Learning**
    (**ML**) and so on.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**云小型数据中心**：这是一个小规模的云数据中心，通常用于资源密集型的使用场景，如数据分析、**机器学习**（**ML**）等。'
- en: Benefits of edge computing
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 边缘计算的好处
- en: 'With this short explanation, let’s move on to understand the main benefits
    of edge computing; some of these include the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 简单介绍完毕，接下来我们来了解边缘计算的主要优势，其中包括以下几点：
- en: '**Reducing latency**: Edge computing can process heavy compute processes on
    edge devices, reducing the latency to bring this information.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**减少延迟**：边缘计算可以在边缘设备上处理大量计算任务，从而减少将信息传输到目的地的延迟。'
- en: '**Reducing bandwidth**: Edge computing can reduce the used bandwidth while
    taking part of the data on the edge devices, reducing the traffic on the network.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**减少带宽**：边缘计算可以减少所用带宽，通过将部分数据处理放在边缘设备上，从而减少网络流量。'
- en: '**Reducing costs**: Reducing latency and bandwidth translates to the reduction
    of operational costs, which is one of the most important benefits of edge computing.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**降低成本**：减少延迟和带宽意味着降低运营成本，这是边缘计算的最重要优势之一。'
- en: '**Improving security**: Edge computing uses data aggregation and data encryption
    algorithms to improve the security of data access.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提高安全性**：边缘计算使用数据聚合和数据加密算法来提高数据访问的安全性。'
- en: Let’s now discuss containers, Docker, and containerd.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们讨论容器、Docker 和 containerd。
- en: Containers, Docker, and containerd for edge computing
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 边缘计算中的容器、Docker 和 containerd
- en: 'In the last few years, container adoption has been increasing because of the
    success of Docker. Docker has been the most popular container engine for the last
    few years. Container technology gives businesses a way to design applications
    using microservices architecture. This way, companies speed up their development
    and strategies for scaling their applications. So, to begin with a basic concept:
    *A container is a small runtime environment that packages your application with
    all the dependencies needed for it to run.* This concept is not new, but Docker,
    a container engine, popularized this concept. In simple words, Docker uses small
    operating system images with the necessary dependencies to run your software.
    This can be called operating system virtualization. What this does is use the
    **cgroups** kernel feature of Linux to limit CPU, memory, network, I/O, and so
    on for your processes. Other operating systems, such as Windows or FreeBSD, use
    similar features to insulate and create this type of virtualization. Let’s see
    the next figure to represent these concepts:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去几年里，由于 Docker 的成功，容器技术的采用一直在增加。Docker 在过去几年一直是最受欢迎的容器引擎。容器技术为企业提供了一种使用微服务架构设计应用程序的方法。通过这种方式，公司加速了其开发进程，并在扩展应用程序方面制定了战略。因此，首先需要理解一个基本概念：*容器是一个小型的运行时环境，它将你的应用程序与其运行所需的所有依赖项打包在一起*。这个概念并不新鲜，但
    Docker，这个容器引擎，使得这个概念变得广为人知。简单来说，Docker 使用带有必要依赖项的小型操作系统镜像来运行你的软件。这可以称为操作系统虚拟化。其作用是利用
    Linux 的 **cgroups** 内核功能，限制进程的 CPU、内存、网络、I/O 等资源。其他操作系统，如 Windows 或 FreeBSD，也使用类似的功能来进行隔离并创建这种虚拟化类型。让我们来看下一个图来表示这些概念：
- en: '![Figure 1.2 – Containerized applications inside the OS'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.2 – 操作系统内部的容器化应用程序'
- en: '](img/B16945_Figure_1.2.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_Figure_1.2.jpg)'
- en: Figure 1.2 – Containerized applications inside the OS
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2 – 操作系统内部的容器化应用程序
- en: This figure shows that a container doesn’t depend on special features, such
    as a hypervisor that is commonly seen in hardware virtualization used by VMware,
    Hyper-V, and Xen; instead of that, the application runs as a binary inside the
    container and reuses the host kernel. Let’s say that running a container is almost
    like running a binary program inside a directory but adds some resource limits,
    using cgroups in the case of Linux containers.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 该图展示了容器不依赖于特殊功能，如 VMware、Hyper-V 和 Xen 等硬件虚拟化中常见的虚拟机管理程序；相反，应用程序作为二进制文件运行在容器内部，并重用主机的内核。可以说，运行容器几乎就像在一个目录中运行一个二进制程序，但它添加了一些资源限制，在
    Linux 容器的情况下，使用 cgroups。
- en: Docker implements all these abstractions. It is a popular container toolchain
    that adds some versioning features, such as Git. That was the main reason it became
    very popular, and it features easy portability and versioning at the operating
    system level. At the moment, containerd is the container runtime used by Docker
    and Kubernetes to create containers. In general, with containerd, you can create
    containers without extra features; it’s very optimized. With the explosion of
    edge computing, containerd has become an important piece of software to run containers
    in low-resource environments.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 实现了所有这些抽象。它是一个流行的容器工具链，增加了一些版本控制功能，类似于 Git。这也是它变得非常受欢迎的主要原因，并且它具有操作系统级别的易于移植性和版本控制功能。目前，containerd
    是 Docker 和 Kubernetes 用于创建容器的容器运行时。一般来说，使用 containerd，你可以创建没有额外功能的容器；它非常优化。随着边缘计算的爆炸性增长，containerd
    已经成为在低资源环境中运行容器的重要软件。
- en: 'In general, with all these technologies you can do the following:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，使用这些技术，你可以做到以下几点：
- en: Standardize how to package your software.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准化如何打包你的软件。
- en: Bring portability to your software.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让你的软件具有可移植性。
- en: Maintain your software in an easier way.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以更简单的方式维护你的软件。
- en: Run applications in low-resource environments.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在低资源环境中运行应用程序。
- en: So, Docker must be taken into consideration as an important software piece to
    build edge computing and low-resource environments.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，Docker 必须被视为构建边缘计算和低资源环境中的重要软件组件。
- en: Distributed systems, edge computing, and Kubernetes
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分布式系统、边缘计算和 Kubernetes
- en: In the last decade, distributed systems evolved from multi-node clusters with
    applications using monolithic architectures to multi-node clusters with microservices
    architectures. One of the first options to start building microservices is to
    use containers, but once the system needs to scale, it is necessary to use an
    orchestrator. This is where Kubernetes comes into the game.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去十年里，分布式系统从使用单体架构的多节点集群发展到使用微服务架构的多节点集群。构建微服务的第一步通常是使用容器，但一旦系统需要扩展，就有必要使用编排工具。这就是
    Kubernetes 发挥作用的地方。
- en: As an example, let’s imagine an orchestra with lots of musicians. You can find
    musicians playing the piano, trumpets, and so on. But if the orchestra was disorganized,
    what would you need to have to organize all the musicians? The answer is an orchestra
    director or an orchestrator. Here is when Kubernetes appears; each musician is
    a container that needs to communicate or listen to other musicians and, of course,
    follow the instructions of the orchestra director or orchestrator. In this way,
    all the musicians can play their instruments at the right time and can sound beautiful.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，假设有一个乐团，里面有很多音乐家。你可以看到有音乐家在演奏钢琴、小号等等。但如果乐团没有组织好，你需要什么来组织所有的音乐家？答案是一个指挥或者编排者。这时
    Kubernetes 就登场了；每个音乐家就是一个容器，需要与其他音乐家沟通或聆听，当然，还需要听从指挥或编排者的指示。通过这种方式，所有音乐家可以在正确的时机演奏乐器，并且能够发出美妙的音响。
- en: This is what Kubernetes does; it is an orchestrator of containers, but at the
    same time it is a platform with all the necessary prebuilt pieces to build your
    own distributed system, ready to scale and designed with best practices that can
    help you to implement agile development and a DevOps culture. Depending on your
    use case, sometimes it’s better to use something small such as Docker or containerd,
    but for complex or demanding scenarios, it’s better to use Kubernetes.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是 Kubernetes 所做的；它是一个容器的编排器，但同时它也是一个平台，拥有构建分布式系统所需的所有预构建模块，随时可以扩展，并且设计了最佳实践，帮助你实施敏捷开发和
    DevOps 文化。根据你的使用场景，有时候使用 Docker 或 containerd 等小型工具可能更好，但对于复杂或高需求的场景，使用 Kubernetes
    会更合适。
- en: Edge clusters using K3s – a lightweight Kubernetes
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 K3s 构建的边缘集群——一个轻量级的 Kubernetes
- en: Now, the big question is how to start building edge computing systems. Let’s
    get started with K3s. K3s is a Kubernetes-certified distribution created by Rancher
    Labs. K3s doesn’t include by default extra features that are not vital to be used
    on Kubernetes, but they can be added later. K3s uses containerd as its container
    engine, which gives K3s the ability to run on low-resource environments using
    ARM devices. For example, you can also run K3s on x86_64 devices in production
    environments. However, for the purpose of this book, we will use K3s as our main
    piece of software to build edge computing systems using ARM devices.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，大问题是如何开始构建边缘计算系统。让我们从 K3s 开始。K3s 是由 Rancher Labs 创建的经过 Kubernetes 认证的发行版。K3s
    默认不包含一些非必需的额外功能，这些功能在 Kubernetes 中并不是必须的，但可以在后期添加。K3s 使用 containerd 作为其容器引擎，这使得
    K3s 可以在使用 ARM 设备的低资源环境中运行。例如，你还可以在生产环境中在 x86_64 设备上运行 K3s。然而，对于本书的目的，我们将使用 K3s
    作为构建边缘计算系统的主要软件，并且使用 ARM 设备。
- en: Talking about clusters at the edge, K3s offers the same power as Kubernetes
    but in a small package and in an optimized way, plus some features designed especially
    for edge computing systems. K3s is very easy to use, compared with other Kubernetes
    distributions. It’s a lightweight Kubernetes that can be used for edge computing,
    sandbox environments, or whatever you want, depending on the use case.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 说到边缘集群，K3s 提供了与 Kubernetes 相同的强大功能，但它以一个小巧和优化的方式提供，同时还设计了一些特别适用于边缘计算系统的功能。与其他
    Kubernetes 发行版相比，K3s 非常容易使用。它是一个轻量级的 Kubernetes，可以用于边缘计算、沙箱环境或任何你想要的用途，具体取决于使用场景。
- en: Edge devices using ARM processors and micro data centers
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 ARM 处理器和微型数据中心的边缘设备
- en: Now, it’s time to talk about edge devices and ARM processors, so let’s begin
    with edge devices. Edge devices are designed to process and analyze information
    near to the data source location; this is where the *edge* computing mindset comes
    from. Talking about low-energy consumption devices, x86 or Intel processors consume
    more energy and get warmer than ARM processors. This means more power and more
    cooling; in other words, you will pay more money for x86_64 processors. On the
    other hand, ARM processors have less computational power and consume less energy.
    That’s the reason for the success of ARM processors on smartphone devices; they
    give you better cost and benefit between processing and energy consumption compared
    to Intel processors.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候谈论边缘设备和 ARM 处理器了，我们先从边缘设备开始。边缘设备被设计用来处理和分析接近数据源位置的信息；这正是*边缘*计算理念的来源。谈到低能耗设备时，x86
    或 Intel 处理器比 ARM 处理器消耗更多的能源并且发热更高。这意味着需要更多的电力和更多的散热；换句话说，你需要为 x86_64 处理器支付更多的费用。另一方面，ARM
    处理器计算能力较低，且能耗更低。这就是 ARM 处理器在智能手机设备上成功的原因；它们在处理和能耗之间提供了比 Intel 处理器更好的性价比。
- en: Because of that, companies are interested in designing micro data centers using
    ARM processors in their servers. For the same reason, companies are starting to
    migrate their workloads to be processed by devices using ARM processors. One example
    is the AWS Graviton2, which is a service that offers cloud instances using ARM
    processors.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，企业有兴趣设计使用 ARM 处理器的微型数据中心以供服务器使用。出于同样的原因，企业也开始将工作负载迁移到使用 ARM 处理器的设备上进行处理。一个例子是
    AWS Graviton2，它是一项提供使用 ARM 处理器的云实例的服务。
- en: Edge computing diagrams to build your system
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 边缘计算图示以构建你的系统
- en: Right now, with all the basic concepts of containers, orchestrators, and edge
    computing and its layers, we can focus on the five basic diagrams of edge computing
    configurations that you can use to design this kind of system. So, let’s use K3s
    as our main platform for edge computing for the next diagrams.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，掌握了容器、编排器、边缘计算及其各层的基本概念后，我们可以专注于五种基本的边缘计算配置图示，这些图示可以用来设计这种系统。所以，让我们以 K3s
    作为接下来图示中边缘计算的主要平台。
- en: Edge cluster and public cloud
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 边缘集群与公共云
- en: 'This configuration shares and processes data between the public or private
    cloud with edge layers, but let’s explain its different layers:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配置在公共云或私有云与边缘层之间共享和处理数据，但让我们来解释它的不同层次：
- en: '**Cloud layer**: This layer is in the public cloud and its provider, such as
    AWS, Azure, or GCP. This provider can offer instances using Intel or ARM processors.
    For example, AWS offers the AWS Graviton2 instance if you need an ARM processor.
    As a complement, the public cloud can offer managed services to store data such
    as databases, storage, and so on. The private cloud could be in this layer too.
    You can find software such as VMware ESXi or OpenStack to provide this kind of
    service or instance locally. You can even choose a hybrid approach using the public
    and the private cloud. In general, this layer supports your far and tiny edge
    layers for storage or data processing.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**云层**：这一层位于公共云及其提供商处，如 AWS、Azure 或 GCP。该提供商可以提供使用 Intel 或 ARM 处理器的实例。例如，如果你需要
    ARM 处理器，AWS 提供了 AWS Graviton2 实例。作为补充，公共云可以提供管理服务来存储数据，如数据库、存储等。私有云也可以处于这一层。你可以找到如
    VMware ESXi 或 OpenStack 等软件来本地提供此类服务或实例。你甚至可以选择采用公共云和私有云的混合方法。一般来说，这一层支持你的远端和微型边缘层进行存储或数据处理。'
- en: '**Near edge**: In this layer, you can find network devices to move all the
    data between the cloud layer and the far layer. Typically, these include telco
    devices, 5G networks, and so on.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**近端边缘**：在这一层，你可以找到用于在云层和远端层之间传输所有数据的网络设备。通常，这些设备包括电信设备、5G 网络等。'
- en: '**Far edge**: In this layer, you can find K3s clusters, similar lightweight
    clusters such as KubeEdge, and software such as Docker or containerd. In general,
    this is your local processing layer.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**远端边缘**：在这一层，你可以找到 K3s 集群、类似的轻量级集群如 KubeEdge，以及 Docker 或 containerd 等软件。一般来说，这是你的本地处理层。'
- en: '**Tiny edge**: This is a layer inside the far edge, where you can find edge
    devices such as smartwatches, IoT devices, and so on, which send data to the far
    edge.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**微型边缘**：这是远端边缘内部的一层，你可以找到像智能手表、物联网设备等边缘设备，它们将数据发送到远端边缘。'
- en: '![Figure 1.3 – Edge cluster and public cloud'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.3 – 边缘集群与公共云](img/B16945_Figure_1.3.jpg)'
- en: '](img/B16945_Figure_1.3.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_Figure_1.3.jpg)'
- en: Figure 1.3 – Edge cluster and public cloud
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3 – 边缘集群与公共云
- en: 'Use cases include the following:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 用例包括以下内容：
- en: Scenarios where you must share data between different systems across the internet
    or a private cloud
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要在互联网上或私有云之间共享数据的场景
- en: Distribute data processing between your cloud and the edge, such as a machine
    learning model generation or predictions
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在云端与边缘之间分发数据处理，如生成机器学习模型或进行预测
- en: Scenarios where you must scale IoT applications, and the response time of the
    application is critical
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要扩展物联网应用程序，并且应用响应时间至关重要的场景
- en: Scenarios where you want to secure your data using the aggregation strategy
    of distributing data and encryption across the system
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要通过数据聚合策略分发数据并在系统中进行加密来保护数据的场景
- en: Regional edge clusters and public cloud
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 区域边缘集群和公共云
- en: 'This configuration is focused on distributing the processing strategy across
    different regions and sharing data across a public cloud. Let’s explain the different
    layers:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 该配置专注于在不同区域分布处理策略，并通过公共云共享数据。让我们来解释不同的层级：
- en: '**Cloud layer**: This layer contains managed services such as databases to
    distribute the data across different regions.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**云层**：这一层包含托管服务，如数据库，用于在不同区域分发数据。'
- en: '**Near edge**: In this layer, you can find network devices to move all the
    data between the cloud layer and the far layer. Typically, this includes telco
    devices, 5G networks, and so on.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**近端边缘**：在这一层，你可以找到网络设备，用于在云层和远端层之间移动所有数据。通常包括电信设备、5G 网络等。'
- en: '**Far edge**: In this layer, you can find K3s clusters across different regions.
    These clusters or nodes can share or update the data stored in a public cloud.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**远端边缘**：在这一层，你可以找到跨不同区域的 K3s 集群。这些集群或节点可以共享或更新存储在公共云中的数据。'
- en: '**Tiny edge**: Here, you can find different edge devices close to each region
    where the far edge clusters process the information because of this distributed
    configuration.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**微型边缘**：在这里，你可以找到接近每个区域的不同边缘设备，因为远端边缘集群会根据这种分布式配置处理信息。'
- en: '![Figure 1.4 – Regional edge cluster and public cloud'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.4 – 区域边缘集群和公共云'
- en: '](img/B16945_Figure_1.4.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_Figure_1.4.jpg)'
- en: Figure 1.4 – Regional edge cluster and public cloud
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4 – 区域边缘集群和公共云
- en: 'Use cases include the following:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 使用案例包括以下内容：
- en: Different cluster configurations across different regions
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨不同区域的不同集群配置
- en: Reducing application response time, choosing the closest data, or processing
    node location, which is critical in IoT applications
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减少应用程序响应时间，选择最近的数据或处理节点位置，这在物联网应用程序中至关重要
- en: Sharing data across different regions
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨不同区域共享数据
- en: Distributing processing across different regions
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在不同区域分配处理
- en: Single node cluster and public/private cloud
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单节点集群和公共/私有云
- en: 'This is a basic configuration where a single computer processes all the information
    captured on tiny edge devices. Let’s explain the different layers:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个基本配置，单个计算机处理所有从小型边缘设备捕获的信息。让我们来解释不同的层级：
- en: '**Cloud layer**: In this layer, you can find the data storage for the system.
    It could be placed on the public or private cloud.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**云层**：在这一层，你可以找到系统的数据存储。它可以放置在公共云或私有云中。'
- en: '**Near edge**: In this layer, you can find network devices to move all the
    data between the cloud layer and the far layer. Typically, this includes telco
    devices, 5G networks, and so on.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**近端边缘**：在这一层，你可以找到网络设备，用于在云层和远端层之间移动所有数据。通常包括电信设备、5G 网络等。'
- en: '**Far edge**: In this layer, you can find a single node K3s cluster that recollects
    data from tiny edge devices.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**远端边缘**：在这一层，你可以找到一个单节点 K3s 集群，从小型边缘设备中收集数据。'
- en: '**Tiny edge**: Devices that capture data, such as smartwatches, tablets, cameras,
    sensors, and so on. This kind of configuration is more for processing locally
    or on a small scale.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**微型边缘**：用于捕获数据的设备，如智能手表、平板电脑、摄像头、传感器等。这种配置更适合本地或小规模处理。'
- en: '![Figure 1.5 – Single node cluster and public/private cloud'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.5 – 单节点集群和公共/私有云'
- en: '](img/B16945_Figure_1.5.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_Figure_1.5.jpg)'
- en: Figure 1.5 – Single node cluster and public/private cloud
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5 – 单节点集群和公共/私有云
- en: 'Use cases include the following:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 使用案例包括以下内容：
- en: Low-cost and low-energy consumption environments
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 低成本和低能耗环境
- en: Green edge applications that can be powered by solar panels or wind turbines
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以由太阳能电池板或风力涡轮机提供电力的绿色边缘应用
- en: Small processes or use cases, such as analyzing health records or autonomous
    house systems that need something local or not too complicated
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小型处理或使用案例，如分析健康记录或需要本地处理或不太复杂的自主房屋系统
- en: Let’s now adapt the software to run at the edge.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将软件适配以在边缘运行。
- en: Adapting your software to run at the edge
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让您的软件适应边缘运行
- en: Something important while designing an edge computing system is to choose the
    processor architecture to build your software. One popular architecture because
    of the lower consumption for computing is ARM, but if ARM is the selected architecture,
    it is necessary to transform your current code in most of the cases from x86_64
    (Intel) to ARM (ARMv7 such as RI and ARM such as AWS Graviton2 instances). The
    following subsections include short guides to perform the process to convert from
    one platform to another; this process is called cross-compiling. With this, you
    will be able to run your software on ARM devices using Go, Python, Rust, and Java.
    So, let’s get started.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计边缘计算系统时，一个重要的方面是选择处理器架构来构建您的软件。由于计算消耗较低，ARM 是一种受欢迎的架构，但如果选择 ARM 作为架构，通常需要将现有代码从
    x86_64（Intel）转换为 ARM（如 RI 和 AWS Graviton2 实例上的 ARMv7）。以下小节包含了将平台从一个转换到另一个的简短指南；这一过程叫做交叉编译。通过这个过程，您将能够在
    ARM 设备上使用 Go、Python、Rust 和 Java 运行您的软件。接下来，让我们开始。
- en: Adapting Go to run on ARM
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 让 Go 在 ARM 上运行
- en: First, it’s necessary to install Go on your system. Here are a couple of ways
    to install Go.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，必须在系统上安装 Go。以下是几种安装 Go 的方法。
- en: Installing Go on Linux
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 Linux 上安装 Go
- en: 'To install Go on Linux, execute the following steps:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 上安装 Go，请执行以下步骤：
- en: 'Download and untar the Go official binaries:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并解压 Go 官方二进制文件：
- en: '[PRE0]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Set the environment variables to run Go:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置运行 Go 的环境变量：
- en: '[PRE1]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Set your `GOPATH` in the configuration file of your terminal with the following
    lines. `~/.profile` is a common file to set these environment variables; let’s
    modify the `.profile` file:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端的配置文件中设置您的 `GOPATH`，请使用以下行。`~/.profile` 是常见的设置环境变量的文件；让我们修改 `.profile` 文件：
- en: '[PRE2]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Load the new configuration using the following command:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令加载新配置：
- en: '[PRE3]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '(*Optional*). If you want to, you can set these environment variables temporarily
    in your terminal using the following commands:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: （*可选*）。如果您愿意，您可以使用以下命令在终端中临时设置这些环境变量：
- en: '[PRE4]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To check whether `GOPATH` is configured, run the following command:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要检查是否已配置 `GOPATH`，请运行以下命令：
- en: '[PRE5]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, you are ready to use Go on Linux. Let’s move to this installation using
    a Mac.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经准备好在 Linux 上使用 Go。让我们继续使用 Mac 进行安装。
- en: Installing Go on a Mac
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 Mac 上安装 Go
- en: 'To install Go on a Mac, execute the following steps:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Mac 上安装 Go，请执行以下步骤：
- en: 'Install Homebrew (called `brew`) with the following command:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令安装 Homebrew（简称 `brew`）：
- en: '[PRE6]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Once it is installed, install Go with `brew`:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，使用 `brew` 安装 Go：
- en: '[PRE7]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Important Note
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: To find out how to install `brew`, you can check the official page at [https://brew.sh](https://brew.sh).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何安装`brew`，您可以查看[https://brew.sh](https://brew.sh)的官方页面。
- en: Cross-compiling from x86_64 to ARM with Go
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Go 从 x86_64 交叉编译到 ARM
- en: 'To cross-compile from x86_64 to ARM, execute the following steps:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 从 x86_64 交叉编译到 ARM，请执行以下步骤：
- en: 'Create a folder to store your code:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个文件夹来存储您的代码：
- en: '[PRE8]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create an initial Go configuration to install external Go libraries outside
    the `GOPATH` command; for this, execute the next command:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个初始的 Go 配置，以便在 `GOPATH` 命令之外安装外部 Go 库；为此，请执行以下命令：
- en: '[PRE9]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Create the `example.go` file with `Hello World` as its contents:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个内容为 `Hello World` 的 `example.go` 文件：
- en: '[PRE10]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Assuming that your environment is under x86_64 and you want to cross-compile
    for ARMv7 support, execute the following commands:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设您的环境是 x86_64，并且您希望进行针对 ARMv7 的交叉编译，请执行以下命令：
- en: '[PRE11]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Use the next line for ARMv8 64-bit support:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令行以支持 ARMv8 64 位：
- en: '[PRE12]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Important Note
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: If you want to see other options for cross-compiling, see [https://github.com/golang/go/wiki/GoArm](https://github.com/golang/go/wiki/GoArm).
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想查看其他交叉编译的选项，请参见[https://github.com/golang/go/wiki/GoArm](https://github.com/golang/go/wiki/GoArm)。
- en: 'Set the execution permissions for the generated binary:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 设置生成的二进制文件的执行权限：
- en: '[PRE13]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Copy the generated binary to your ARM device and test if it works.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将生成的二进制文件复制到您的 ARM 设备并测试其是否正常工作。
- en: In the next section, we will learn how to adapt Rust to run on ARM.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何让 Rust 在 ARM 上运行。
- en: Adapting Rust to run on ARM
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 让 Rust 在 ARM 上运行
- en: First, it’s necessary to install Rust on your system. Here are a couple of ways
    to install Rust.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，必须在系统上安装 Rust。以下是几种安装 Rust 的方法。
- en: Installing Rust on Linux
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 Linux 上安装 Rust
- en: 'To install Rust on Linux, execute the following steps:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 上安装 Rust，请执行以下步骤：
- en: 'Install Rust by executing the following command in the terminal:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中执行以下命令来安装Rust：
- en: '[PRE14]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Set the path for Rust in the configuration file of your terminal. For example,
    if you are using Bash, add the following line to your `.bashrc`:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端配置文件中设置Rust的路径。例如，如果您使用的是Bash，请将以下行添加到您的`.bashrc`中：
- en: '[PRE15]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Installing Rust on a Mac
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Mac上安装Rust
- en: 'To install Rust on a Mac, execute the following steps:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在Mac上安装Rust，请执行以下步骤：
- en: 'Install Homebrew with the following command:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令安装Homebrew：
- en: '[PRE16]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Once it is installed, install `rustup` with `brew`:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，使用`brew`安装`rustup`：
- en: '[PRE17]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Run the `rustup` command to install Rust and all the necessary tools for Rust
    with the following command:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`rustup`命令来安装Rust及其所需的工具，使用以下命令：
- en: '[PRE18]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Set your terminal environment variables by adding the following line to your
    terminal configuration file:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将以下行添加到终端配置文件中来设置终端环境变量：
- en: '[PRE19]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Important Note
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Mac users often use the ZSH terminal, so they have to use `.zshrc`. If you are
    using another terminal, look for the proper configuration file or the generic
    `/etc/profile`.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: Mac用户通常使用ZSH终端，因此他们需要使用`.zshrc`。如果您使用其他终端，请寻找正确的配置文件或通用的`/etc/profile`。
- en: Cross-compiling from x86_64 to ARMv7 with Rust on a Mac
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Mac上使用Rust从x86_64交叉编译到ARMv7
- en: 'To cross-compile from x86_64 to ARM, execute the following steps:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 从x86_64交叉编译到ARM，请执行以下步骤：
- en: 'Install the complements to match the compiler and environment variables for
    ARMv7 architecture on your Mac; for this, execute the following command:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的Mac上安装与ARMv7架构匹配的编译器和环境变量补充程序；为此，请执行以下命令：
- en: '[PRE20]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Download the support for ARMv7 for cross-compiling by executing the following
    command:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行以下命令下载用于交叉编译的ARMv7支持：
- en: '[PRE21]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now set the environment variables:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在设置环境变量：
- en: '[PRE22]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Create a folder to store your code:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个文件夹以存储您的代码：
- en: '[PRE23]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Create an initial `Hello World` project with Rust:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Rust创建一个初始的`Hello World`项目：
- en: '[PRE24]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The generated Rust code will look like this:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的Rust代码将如下所示：
- en: '[PRE25]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The source code will be located at `src/main.rs`.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码将位于`src/main.rs`。
- en: 'Add the support for ARMv7:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加对ARMv7的支持：
- en: '[PRE26]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Build your software:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建您的软件：
- en: '[PRE27]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Copy the binary file into your device and test whether it works:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将二进制文件复制到您的设备中并测试其是否工作：
- en: '[PRE28]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The generated binary will be inside the `target/armv7-unknown-linux-gnueabi/hello-rust`
    folder.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成的二进制文件将位于`target/armv7-unknown-linux-gnueabi/hello-rust`文件夹中。
- en: Now copy your binary into your device and test whether it works.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在将您的二进制文件复制到设备中并测试它是否工作。
- en: Important Note
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: For more options for cross-compiling with Rust, check out [https://doc.rust-lang.org/nightly/rustc/platform-support.html](https://doc.rust-lang.org/nightly/rustc/platform-support.html)
    and [https://rust-lang.github.io/rustup/cross-compilation.html](https://rust-lang.github.io/rustup/cross-compilation.html).
    For the toolchain for Mac and AArch64 (64-bit ARMv8), check out `aarch64-unknown-linux-gnu`
    inside the repository at [https://github.com/messense/homebrew-macos-cross-toolchains](https://github.com/messense/homebrew-macos-cross-toolchains).
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Rust交叉编译的更多选项，请查看[https://doc.rust-lang.org/nightly/rustc/platform-support.html](https://doc.rust-lang.org/nightly/rustc/platform-support.html)和[https://rust-lang.github.io/rustup/cross-compilation.html](https://rust-lang.github.io/rustup/cross-compilation.html)。有关Mac和AArch64（64位ARMv8）工具链的更多信息，请查看`aarch64-unknown-linux-gnu`，它位于[https://github.com/messense/homebrew-macos-cross-toolchains](https://github.com/messense/homebrew-macos-cross-toolchains)仓库中。
- en: Adapting Python to run on ARM
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使Python能够在ARM上运行
- en: First, it is necessary to install Python on your system. There are a couple
    of ways of doing this.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，需要在系统上安装Python。可以通过几种方式进行安装。
- en: Installing Python on Linux
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Linux上安装Python
- en: 'To install Python, execute the following steps:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Python，请执行以下步骤：
- en: 'Update your repositories:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新您的软件仓库：
- en: '[PRE29]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Install Python 3:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Python 3：
- en: '[PRE30]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Install Python on a Mac
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Mac上安装Python
- en: 'To install Python on a Mac using Homebrew, execute the following steps:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Homebrew在Mac上安装Python，请执行以下步骤：
- en: 'Check for your desired Python version on brew’s available version list:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在brew的可用版本列表中检查您所需的Python版本：
- en: '[PRE31]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Let’s say that you choose Python 3.8; you have to install it by executing the
    following command:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设您选择了Python 3.8，您需要执行以下命令来安装它：
- en: '[PRE32]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Test your installation:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试您的安装：
- en: '[PRE33]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Cross-compiling from x86_64 to ARM with Python
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Python从x86_64交叉编译到ARM
- en: Python is very important and one of the most popular languages now, and it is
    commonly used for AI and ML applications. Python is an interpreted language; it
    needs a runtime environment (such as Java) to run the code. In this case, you
    must install Python as the runtime environment. It has similar challenges running
    code as Java but has other challenges too. Sometimes, you need to compile libraries
    from scratch to use it. The standard Python libraries currently support ARM, but
    the issue is when you want something outside those standard libraries.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: Python是目前非常重要且流行的编程语言，它通常用于AI和机器学习应用。Python是一种解释型语言，需要运行时环境（如Java）来运行代码。在这种情况下，你必须安装Python作为运行时环境。它在运行代码时面临与Java类似的挑战，但也有其他挑战。有时，你需要从头开始编译库才能使用它。当前标准的Python库支持ARM架构，但问题出在当你需要使用非标准库时。
- en: 'As a basic example, let’s run Python code across different platforms by executing
    the following steps:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 作为基本示例，让我们通过执行以下步骤在不同平台上运行Python代码：
- en: 'Create a basic file called `example.py`:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`example.py`的基本文件：
- en: '[PRE34]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Copy `example.py` to your ARM device.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`example.py`复制到你的ARM设备。
- en: 'Install Python 3 on your ARM device by running the following command:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的ARM设备上通过运行以下命令安装Python 3：
- en: '[PRE35]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Run your code:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行你的代码：
- en: '[PRE36]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Adapting Java to run on ARM
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使Java适配ARM平台
- en: When talking about Java to run on ARM devices, it is a little bit different.
    Java uses a hybrid compiler – in other words, a two-phase compiler. This means
    that it generates an intermediate code called bytecode and is interpreted by a
    **Java Virtual Machine** (**JVM)**. This bytecode is a cross-platform code and,
    following the Java philosophy of *compile once and run everywhere*, it means that
    you can compile using the platform you want, and it will run on any other platform
    without modifications. So, let’s see how to perform cross-compiling for a basic
    Java program that can run on an ARMv7 and an ARMv8 64-bit device.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 当谈到在ARM设备上运行Java时，它略有不同。Java使用的是一种混合编译器，换句话说，是一种两阶段编译器。这意味着它会生成一种中间代码，称为字节码，并由**Java虚拟机**（**JVM**）解释执行。字节码是跨平台的代码，并且遵循Java的理念——*一次编译，处处运行*，意味着你可以在任何平台上编译，且无需修改即可在任何其他平台上运行。那么，让我们看看如何进行跨平台编译，以便让一个基本的Java程序在ARMv7和ARMv8
    64位设备上运行。
- en: Installing Java JDK on Linux
  id: totrans-224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Linux上安装Java JDK
- en: 'To install Java on Linux, execute the following commands:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux上安装Java，请执行以下命令：
- en: 'Update the current repositories of Ubuntu:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新Ubuntu的当前软件库：
- en: '[PRE37]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Install the official JDK 8:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装官方的JDK 8：
- en: '[PRE38]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Test whether `javac` runs:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试`javac`是否可以运行：
- en: '[PRE39]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Installing Java JDK on a Mac
  id: totrans-232
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Mac上安装Java JDK
- en: 'If you don’t have Java installed on your Mac, follow the next steps:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的Mac上没有安装Java，请按照以下步骤操作：
- en: '(*Optional*) Download Java JDK from the following link and choose the architecture
    that you need, such as Linux, Mac, or Windows: [https://www.oracle.com/java/technologies/javase-downloads.html](https://www.oracle.com/java/technologies/javase-downloads.html).'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: （*可选*）从以下链接下载Java JDK，并选择你需要的架构，如Linux、Mac或Windows：[https://www.oracle.com/java/technologies/javase-downloads.html](https://www.oracle.com/java/technologies/javase-downloads.html)。
- en: (*Optional*) Download and run the installer.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: （*可选*）下载并运行安装程序。
- en: 'To test whether Java exists or whether it was installed correctly, run the
    following command:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试Java是否存在或者是否正确安装，请执行以下命令：
- en: '[PRE40]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Test whether the compiler is installed by executing the following command:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行以下命令测试编译器是否已安装：
- en: '[PRE41]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Cross-compiling from x86_64 to ARM with Java
  id: totrans-240
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从x86_64到ARM的Java跨平台编译
- en: 'Java is a language that generates an intermediate code called bytecode, which
    runs on the JVM. Let’s say that you have a basic code in a file called `Example.java`:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: Java是一种生成名为字节码的中间代码的语言，字节码可以在JVM上运行。假设你有一个名为`Example.java`的基本代码文件：
- en: '[PRE42]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'To execute your code, follow these steps:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行你的代码，请按照以下步骤操作：
- en: 'To compile it, use the following command:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要进行编译，请使用以下命令：
- en: '[PRE43]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: This will generate the intermediate code in a file called `Example.class`, which
    can be executed by the JVM. Let’s do this in the next step.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成一个中间代码文件`Example.class`，该文件可以由JVM执行。我们将在下一步进行操作。
- en: 'To run the bytecode, execute the following command:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行字节码，请执行以下命令：
- en: '[PRE44]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Now, copy `Example.class` to another device and run it with the proper JVM using
    the `java` command.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将`Example.class`复制到另一台设备，并使用合适的JVM通过`java`命令运行它。
- en: Summary
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter explained all the basic concepts about edge computing and how it
    relates to other concepts, such as fog computing, MEC, and cloudlets. It also
    explained how containers and orchestrators such as Docker, containerd, and Kubernetes
    can help you to build your own edge computing system, using different configurations,
    depending on your own use case. At the end of the chapter, we covered how you
    can run and compile your software on edge devices using ARM processors, using
    the cross-compiling technique with Go, Python, Rust, and Java languages.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 本章解释了关于边缘计算的所有基本概念，以及它与其他概念（如雾计算、MEC 和云计算）之间的关系。还解释了如何使用 Docker、containerd 和
    Kubernetes 等容器和编排器来帮助你根据自己的用例构建边缘计算系统。最后，本章还介绍了如何使用 Go、Python、Rust 和 Java 等语言的交叉编译技术，在
    ARM 处理器的边缘设备上运行和编译你的软件。
- en: Questions
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Here are a few questions to test your new knowledge:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些问题，用来检验你新的知识：
- en: What is the difference between the edge and edge computing?
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 边缘和边缘计算之间有什么区别？
- en: What infrastructure configurations can you use to build an edge computing system?
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以使用什么基础设施配置来构建边缘计算系统？
- en: How can containers and orchestrators help you to build edge computing systems?
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 容器和编排器如何帮助你构建边缘计算系统？
- en: What is cross-compiling and how can you use it to run your software on ARM devices?
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是交叉编译，如何使用它在 ARM 设备上运行你的软件？
- en: Further reading
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入阅读
- en: 'Here are some additional resources that you can check out to learn more about
    edge computing:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些额外的资源，您可以查看以了解更多有关边缘计算的信息：
- en: '*Near, Far or Tiny: Defining and Managing Edge Computing in a Cloud Native
    World*, *Keith Basil*: [https://vmblog.com/archive/2021/04/27/near-far-or-tiny-defining-and-managing-edge-computing-in-a-cloud-native-world.aspx](https://vmblog.com/archive/2021/04/27/near-far-or-tiny-defining-and-managing-edge-computing-in-a-cloud-native-world.aspx
    )'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*近、远或微小：在云原生世界中定义和管理边缘计算*，*Keith Basil*：[https://vmblog.com/archive/2021/04/27/near-far-or-tiny-defining-and-managing-edge-computing-in-a-cloud-native-world.aspx](https://vmblog.com/archive/2021/04/27/near-far-or-tiny-defining-and-managing-edge-computing-in-a-cloud-native-world.aspx)'
- en: '*What is Edge Computing: The Network Edge Explained*, *Eric Hamilton*:, *Cloudwards*
    (2018): [https://www.cloudwards.net/what-is-edge-computing](https://www.cloudwards.net/what-is-edge-computing
    )'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*什么是边缘计算：网络边缘解析*，*Eric Hamilton*：*Cloudwards*（2018）：[https://www.cloudwards.net/what-is-edge-computing](https://www.cloudwards.net/what-is-edge-computing)'
- en: '*IoT and Edge Computing for Architects* – *Second Edition*, *Perry Lea*, *Packt
    Publishing* (2020)'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*建筑师的物联网与边缘计算* – *第二版*，*Perry Lea*，*Packt Publishing*（2020）'
- en: '*The IoT blog of Cisco*: [https://blogs.cisco.com/internet-of-things](https://blogs.cisco.com/internet-of-things
    )'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*思科物联网博客*：[https://blogs.cisco.com/internet-of-things](https://blogs.cisco.com/internet-of-things)'
- en: '*A secure data aggregation protocol for fog computing based smart grids*: [https://www.researchgate.net/publication/325638338_A_secure_data_aggregation_protocol_for_fog_computing_based_smart_grids.ng](https://www.researchgate.net/publication/325638338_A_secure_data_aggregation_protocol_for_fog_computing_based_smart_grids.ng
    )'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*一种用于雾计算基础智能电网的安全数据聚合协议*: [https://www.researchgate.net/publication/325638338_A_secure_data_aggregation_protocol_for_fog_computing_based_smart_grids.ng](https://www.researchgate.net/publication/325638338_A_secure_data_aggregation_protocol_for_fog_computing_based_smart_grids.ng)'
- en: '*HarmonyCloud promotes edge computing implementation*: [https://www.cncf.io/blog/2021/08/31/harmonycloud-promotes-edge-computing-implementation](https://www.cncf.io/blog/2021/08/31/harmonycloud-promotes-edge-computing-implementation
    )'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HarmonyCloud 推动边缘计算实施*: [https://www.cncf.io/blog/2021/08/31/harmonycloud-promotes-edge-computing-implementation](https://www.cncf.io/blog/2021/08/31/harmonycloud-promotes-edge-computing-implementation)'
- en: '*Kubernetes – Bridging the Gap between 5G and Intelligent Edge Computing*:
    [https://www.cncf.io/blog/2021/03/01/kubernetes-bridging-the-gap-between-5g-and-intelligent-edge-computing](https://www.cncf.io/blog/2021/03/01/kubernetes-bridging-the-gap-between-5g-and-intelligent-edge-computing
    )'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Kubernetes – 弥合 5G 和智能边缘计算之间的鸿沟*: [https://www.cncf.io/blog/2021/03/01/kubernetes-bridging-the-gap-between-5g-and-intelligent-edge-computing](https://www.cncf.io/blog/2021/03/01/kubernetes-bridging-the-gap-between-5g-and-intelligent-edge-computing)'
- en: '*CNCF YouTube video list of Kubernetes on Edge Day 2021*: [https://www.youtube.com/watch?v=W1v2Gb6URsk&list=PLj6h78yzYM2PuR1pP14DBLW7aku1Ia520](https://www.youtube.com/watch?v=W1v2Gb6URsk&list=PLj6h78yzYM2PuR1pP14DBLW7aku1Ia520
    )'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*CNCF YouTube 视频列表：2021年 Kubernetes 在边缘日*: [https://www.youtube.com/watch?v=W1v2Gb6URsk&list=PLj6h78yzYM2PuR1pP14DBLW7aku1Ia520](https://www.youtube.com/watch?v=W1v2Gb6URsk&list=PLj6h78yzYM2PuR1pP14DBLW7aku1Ia520)'
- en: '*Cross-Compiling using Rust for Mac*: [https://github.com/messense/homebrew-macos-cross-toolchains](https://github.com/messense/homebrew-macos-cross-toolchains
    )'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 Rust 在 Mac 上进行交叉编译*: [https://github.com/messense/homebrew-macos-cross-toolchains](https://github.com/messense/homebrew-macos-cross-toolchains)'
- en: '*Cross-Compiling with Python*: [https://crossenv.readthedocs.io/en/latest/quickstart.html](https://crossenv.readthedocs.io/en/latest/quickstart.html
    )'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 Python 进行交叉编译*: [https://crossenv.readthedocs.io/en/latest/quickstart.html](https://crossenv.readthedocs.io/en/latest/quickstart.html)'
- en: '*For instructions to download and install OpenJDK*: [https://openjdk.java.net/install](https://openjdk.java.net/install)'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*下载和安装 OpenJDK 的说明*: [https://openjdk.java.net/install](https://openjdk.java.net/install)'

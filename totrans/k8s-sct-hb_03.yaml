- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Encrypting Secrets the Kubernetes-Native Way
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Kubernetes原生方式加密Secrets
- en: In the previous two chapters, we have reviewed together the foundational knowledge
    regarding the architecture, implementation, and usage of `Secret` objects within
    the Kubernetes architecture and design. We also established that `Secret` objects
    are not safe as-is within Kubernetes platforms due to their unencrypted nature,
    both in terms of key-value pair and the etcd data file, resulting in major security
    exposures for your business.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在前两章中，我们一起回顾了关于Kubernetes架构和设计中`Secret`对象的基础知识，包括其架构、实现和使用方式。我们还明确了，`Secret`对象由于其未加密的特性，无论是键值对还是etcd数据文件，都在Kubernetes平台中不安全，这给您的业务带来了严重的安全隐患。
- en: In this chapter, we will get closer to both Kubernetes and etcd, understanding
    their associated security weaknesses and how we can mitigate or reduce them. While
    these responses could be considered tightly coupled with the container platform
    deployment, thanks to the open source nature of the operating system and Kubernetes
    distribution, most if not all can be applied widely.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入了解Kubernetes和etcd，理解它们相关的安全漏洞以及如何缓解或减少这些漏洞。虽然这些解决方案可能被认为与容器平台的部署紧密相关，但由于操作系统和Kubernetes分发版的开源特性，几乎所有的内容都可以广泛应用。
- en: This chapter focuses on an in-platform approach, starting with the Kubernetes-native
    encryption design, including the possibility to connect with a **Key Management
    Service** (**KMS**), and concluding with an etcd hardening overview.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点介绍一种平台内方法，首先介绍Kubernetes原生加密设计，包括与**密钥管理服务**（**KMS**）连接的可能性，并以etcd硬化概述作为结尾。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Native encryption without any external components
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无需任何外部组件的原生加密
- en: Native encryption with an external component
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用外部组件的原生加密
- en: Encryption at rest of etcd and other components
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: etcd及其他组件的静态加密
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To link concepts with hands-on examples, we are leveraging a series of tools
    and platforms commonly used to interact with containers, Kubernetes, and Secrets
    management. For this chapter, we are continuing with the same set of tools used
    in the earlier chapters:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将概念与实际操作示例相结合，我们利用了一系列常用的工具和平台来与容器、Kubernetes和密钥管理进行交互。在本章中，我们将继续使用在前面章节中使用的相同工具集：
- en: '`systemd` at the user level to autostart containers/Pods.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在用户层面使用`systemd`自动启动容器/Pods。
- en: '**Podman Desktop** ([https://podman-desktop.io](https://podman-desktop.io))
    is an open source software providing a graphical user interface to build, start,
    and debug containers, run local Kubernetes instances, ease the migration from
    container to Pod, and even connect with remote platforms such as Red Hat OpenShift,
    Azure Kubernetes Engine, and more.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Podman Desktop** ([https://podman-desktop.io](https://podman-desktop.io))
    是一个开源软件，提供图形用户界面，用于构建、启动和调试容器，运行本地Kubernetes实例，简化从容器到Pod的迁移，甚至连接远程平台，如Red Hat
    OpenShift、Azure Kubernetes Engine等。'
- en: '**Golang** ([https://go.dev](https://go.dev)) or Go is a programming language
    used within our examples. Note that Kubernetes and most of its third-party components
    are written in Go.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Golang** ([https://go.dev](https://go.dev)) 或Go是一种在我们的示例中使用的编程语言。请注意，Kubernetes及其大多数第三方组件都是用Go编写的。'
- en: '**Git** ([https://git-scm.com](https://git-scm.com)) is a version control system
    that we will be using to recover the book examples and also leverage in our discovery
    of Secrets management solutions.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Git** ([https://git-scm.com](https://git-scm.com)) 是一种版本控制系统，我们将使用它来恢复书中的示例，并在探索Secrets管理解决方案时加以利用。'
- en: 'In addition, the following tools will be looked at:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，以下工具也将被介绍：
- en: '**HashiCorp Vault** ([https://www.vaultproject.io/community](https://www.vaultproject.io/community))
    is a community vault with an enterprise offering to safely store credentials,
    tokens, and more'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HashiCorp Vault** ([https://www.vaultproject.io/community](https://www.vaultproject.io/community))
    是一个社区版的Vault，提供企业级服务，用于安全存储凭证、令牌等。'
- en: '**Trousseau** ([https://trousseau.io](https://trousseau.io)) is a KMS provider
    plugin to leverage external KMSs such as HashiCorp Vault, Azure Key Vault, or
    an AWS equivalent'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Trousseau** ([https://trousseau.io](https://trousseau.io)) 是一个KMS提供程序插件，用于利用外部KMS，例如HashiCorp
    Vault、Azure Key Vault或AWS等效服务'
- en: 'The following link gives you access to the digital material linked to this
    book:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下链接将为您提供与本书相关的数字材料：
- en: 'The GitHub repository: [https://github.com/PacktPublishing/Kubernetes-Secrets-Handbook](https://github.com/PacktPublishing/Kubernetes-Secrets-Handbook)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub 仓库：[https://github.com/PacktPublishing/Kubernetes-Secrets-Handbook](https://github.com/PacktPublishing/Kubernetes-Secrets-Handbook)
- en: Kubernetes-native encryption
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes 原生加密
- en: '*Data in payloads written in etcd is not encrypted but encoded in base64, which
    is almost equivalent to clear text. Encrypting the data contained in the payload
    will protect from the aforementioned protection mechanisms, but not* *replace
    them!*'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*在 etcd 中写入的有效负载数据未加密，而是以 base64 编码，几乎等同于明文。加密有效负载中的数据将防护上述保护机制，但不会* *取代它们！*'
- en: Interestingly enough, we have established that our Kubernetes key-value store,
    also known as etcd, does not provide any encryption capabilities except for the
    networking part, nor does Kubernetes provide advanced KMS capabilities as HashiCorp
    Vault or Azure Key Vault would.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，我们已经确认 Kubernetes 键值存储（也称为 etcd）除了网络部分外，并未提供任何加密功能，Kubernetes 也不提供像 HashiCorp
    Vault 或 Azure Key Vault 那样的高级 KMS 功能
- en: 'However, the Kubernetes project has designed a KMS framework within `kube-apiserver`,
    the service validating and configuring data for the API objects, to leverage one
    of the following encryption providers:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Kubernetes 项目在 `kube-apiserver` 中设计了一个 KMS 框架，该服务用于验证和配置 API 对象的数据，以利用以下加密提供者之一：
- en: The `identity` provider is the default configuration, meaning no encryption
    is applied to the data field encoded in base64
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`identity` 提供者是默认配置，这意味着不会对以 base64 编码的数据字段进行加密'
- en: The `aes` provider, with two options being `aesgcm` or `aescbc`, leverages the
    local encryption capabilities with a random encryption key generated by the user
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`aes` 提供者，具有两个选项 `aesgcm` 或 `aescbc`，利用用户生成的随机加密密钥进行本地加密'
- en: The `kms` provider plugin connects `kube-apiserver` with an external KMS to
    leverage an envelope encryption principle
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kms` 提供者插件将 `kube-apiserver` 连接到外部 KMS，以利用封装加密原理'
- en: The way the KMS provider framework is configured is by enabling its capability
    at the `kube-apiserver` Pod’s (re)start time.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 配置 KMS 提供者框架的方式是通过在 `kube-apiserver` Pod（重新）启动时启用其功能
- en: 'We enable `kube-apiserver` with this capability as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过以下方式启用 `kube-apiserver` 的此功能：
- en: We reference `kube-apiserver` with two configuration flags; one to enable the
    capability and reference a configuration file, and one to enable auto-reload when
    the changes are applied to the configuration file
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们通过两个配置标志引用 `kube-apiserver`；一个是启用此功能并引用配置文件，另一个是启用当配置文件发生更改时自动重新加载
- en: A configuration file is to be deployed on every control plane node where the
    path and the name are defined within the configuration flag itself
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置文件需要部署在每个控制平面节点上，路径和名称在配置标志中定义
- en: 'Let’s start with the configuration file, which is based on a YAML manifest
    referencing the `EncryptionConfiguration` API object and looks like this:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从配置文件开始，该文件基于引用 `EncryptionConfiguration` API 对象的 YAML 清单，内容如下：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This YAML manifest is an actual explicit version of what `kube-apiserver` is
    configured with by default, even when the capability is disabled. The manifest
    can be read as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 YAML 清单是 `kube-apiserver` 默认配置的实际显式版本，即使在该功能被禁用时也是如此。该清单可以按如下方式阅读：
- en: The `resources` list; a reference to the Kubernetes API objects to encrypt being
    either `Secrets`, `ConfigMap`, or custom resources starting within Kubernetes
    version 1.25
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resources` 列表；引用要加密的 Kubernetes API 对象，可以是 `Secrets`、`ConfigMap` 或自定义资源，从
    Kubernetes 版本 1.25 开始'
- en: The `providers` list with precedence; a reference to the encryption mechanism
    being either `identity`, `aesgcm`, `aescbc`, or `kms`
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`providers` 列表的优先级；引用加密机制，可以是 `identity`、`aesgcm`、`aescbc` 或 `kms`'
- en: As mentioned, the `providers` list has a precedence construct. This means that
    `kube-apiserver` will parse the list in a sequential way, which could have an
    impact on your operations. This will be illustrated within the hands-on examples.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`providers` 列表具有优先级结构。这意味着 `kube-apiserver` 会按顺序解析列表，这可能会影响您的操作。将在实际操作示例中展示这一点
- en: The easiest way, to begin with, is to use the preceding default definition to
    set up our first `EncryptionConfiguration` file and to make sure that it is properly
    deployed on every control plane node.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的方式是使用前面的默认定义来设置我们的第一个 `EncryptionConfiguration` 文件，并确保它在每个控制平面节点上都正确部署
- en: Important note
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: This deployment, apart from the location and method, is heavily dependent on
    your Kubernetes distribution and we strongly invite you to verify the respective
    project/vendor documentation.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 此部署，除了位置和方法外，严重依赖于您的 Kubernetes 发行版，强烈建议您查阅相应的项目/供应商文档。
- en: When using Kind from the Kubernetes projects, it can be simply referenced with
    an extra volume definition that we will illustrate within the hands-on examples.
    To ease this process, the file will be called `configuration.yaml` and deployed
    within the `/``etc/kubernetes/encryption` folder.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用来自 Kubernetes 项目的 Kind 时，它可以通过一个额外的卷定义进行简单引用，具体细节将在实践示例中展示。为了简化此过程，文件将被命名为
    `configuration.yaml` 并部署在 `/etc/kubernetes/encryption` 文件夹中。
- en: Now that we’ve had a look at the `EncryptionConfiguration` file, let’s have
    a look at the flags to enable `kube-apiserver` with the provider(s) referenced
    within our configuration file.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经查看了 `EncryptionConfiguration` 文件，让我们来看看启用 `kube-apiserver` 并参考我们配置文件中提到的提供程序所需的标志。
- en: 'Here is an overview of the flags to enable the `kube-apiserver` Pod with encryption
    capabilities:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是启用 `kube-apiserver` Pod 加密功能的标志概览：
- en: 'The flag to enable and reference the configuration file is as follows:'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用并引用配置文件的标志如下：
- en: '[PRE1]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The flag, available since Kubernetes 1.26, to automatically reload the changes
    applied to the configuration file without restarting `kube-apiserver` is as follows:'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自 Kubernetes 1.26 起，自动重载配置文件更改的标志如下：
- en: '[PRE2]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following Pod definition snippet shows where to place these two flags:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 Pod 定义代码片段显示了如何放置这两个标志：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now that we have taken a look at how to enable these capabilities, let’s deep
    dive into the provider options.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了如何启用这些功能，让我们深入探讨提供程序选项。
- en: Standalone native encryption
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 独立的本地加密。
- en: The native encryption can be enabled without the need for any additional software,
    either on the control plane or externally to the Kubernetes cluster.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 本地加密可以在无需任何额外软件的情况下启用，无论是在控制平面还是在 Kubernetes 集群之外。
- en: identity
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: identity
- en: This provider is the default `kube-apiserver` configuration, which is equivalent
    to not transforming any data field payload to an encrypted one before storing
    it within etcd.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 该提供程序是默认的 `kube-apiserver` 配置，相当于在将数据字段有效负载存储到 etcd 中之前不进行加密处理。
- en: 'The following diagram provides an overview of the encryption workflow:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示提供了加密工作流的概览：
- en: '![Figure 3.1 – Kubernetes workflow for the KMS identity provider](img/B20970_03_01.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.1 – Kubernetes KMS 身份提供程序工作流](img/B20970_03_01.jpg)'
- en: Figure 3.1 – Kubernetes workflow for the KMS identity provider
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1 – Kubernetes KMS 身份提供程序工作流
- en: 'The diagram flow can be read as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图示流程可以按以下方式解读：
- en: A user creates a `Secret` object.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户创建一个 `Secret` 对象。
- en: '`kube-apiserver` checks the `EncryptionConfiguration` provider list.'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`kube-apiserver` 检查 `EncryptionConfiguration` 提供程序列表。'
- en: The provider refers to `identity`.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该提供程序指的是 `identity`。
- en: '`kube-apiserver` stores the base64-encoded `Secret` in etcd.'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`kube-apiserver` 将 base64 编码的 `Secret` 存储在 etcd 中。'
- en: This provider doesn’t encrypt any of the `Secret` data field payload and is
    the default Kubernetes behavior at installation time. It can also be used to replace
    any encrypted Secrets with the following providers if needed.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 该提供程序不加密任何 `Secret` 数据字段有效负载，并且是 Kubernetes 安装时的默认行为。如果需要，它也可以用于用以下提供程序替换任何加密的
    Secret。
- en: aesgcm and aescbc
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: aesgcm 和 aescbc。
- en: This provider uses the Golang AES encryption libraries to transform the data
    field payload of the listed resources to an encrypted one.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 该提供程序使用 Golang AES 加密库将列出资源的数据字段有效负载转换为加密格式。
- en: 'The provider leverages the **Advanced Encryption Standard** (**AES**) and offers
    two modes:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 该提供程序使用 **高级加密标准**（**AES**）并提供两种模式：
- en: CBC, considered weak but fast
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CBC，虽然被认为较弱但速度较快。
- en: GCM, considered faster and less weak when key rotation is implemented
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GCM，被认为在启用密钥轮换时更快且不那么弱。
- en: 'From an implementation perspective, we follow the same principles with both:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 从实现角度来看，我们对两者遵循相同的原则：
- en: Generate a 32-byte (or more) random encryption key encoded in base64
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成一个 32 字节（或更多）随机加密密钥，并以 base64 编码。
- en: Set up the provider of your choice, `aescbc` or `aesgcm`
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置您选择的提供程序，`aescbc` 或 `aesgcm`。
- en: Reference the key within the `EncryptionConfiguration` configuration file
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `EncryptionConfiguration` 配置文件中引用密钥。
- en: Restart `kube-apiserver` if auto-reload is not enabled
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果未启用自动重载，请重启 `kube-apiserver`。
- en: 'This is fairly simple, both from a process and a `configuration.yaml` perspective:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当简单，无论是从流程还是 `configuration.yaml` 的角度来看：
- en: '[PRE4]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following diagram provides an overview of the encryption workflow when
    a new `Secret` object is being created:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表概述了在创建新 `Secret` 对象时的加密工作流：
- en: '![Figure 3.2 – Kubernetes workflow for the KMS aesgcm/aescbc provider](img/B20970_03_02.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.2 – KMS aesgcm/aescbc 提供者的 Kubernetes 工作流](img/B20970_03_02.jpg)'
- en: Figure 3.2 – Kubernetes workflow for the KMS aesgcm/aescbc provider
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.2 – KMS aesgcm/aescbc 提供者的 Kubernetes 工作流
- en: 'The diagram flow can be read as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图表流程可以按以下方式解读：
- en: A user creates a `Secret` object.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户创建一个 `Secret` 对象。
- en: '`kube-apiserver` checks the `EncryptionConfiguration` provider list.'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`kube-apiserver` 检查 `EncryptionConfiguration` 提供者列表。'
- en: The provider refers to `aesgcm`.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该提供者指的是 `aesgcm`。
- en: '`kube-apiserver` encrypts the data field payload with the provided key within
    the provider definition.'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`kube-apiserver` 使用提供的密钥对数据字段负载进行加密，按照提供者定义的方式。'
- en: '`kube-apiserver` stores the encrypted `Secret` object in etcd.'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`kube-apiserver` 将加密的 `Secret` 对象存储在 etcd 中。'
- en: The `aesgcm` and `aescbc` providers are easy-to-implement solutions to encrypt
    the data field payload from the listed resources.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`aesgcm` 和 `aescbc` 提供者是易于实现的解决方案，用于加密来自已列出资源的数据字段负载。'
- en: However, this simplicity comes with a trade-off; this solution leverages an
    encryption key that is again encoded in base64, referenced in a YAML manifest
    file, and stored on the local filesystem of each control plane node. With a system
    or a disk/filesystem breach, a malicious hacker can retrieve the encryption key
    and decrypt the payloads within the etcd data file.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种简单性是有权衡的；此解决方案使用的加密密钥再次以 base64 编码，引用在 YAML 清单文件中，并存储在每个控制平面节点的本地文件系统上。如果系统或磁盘/文件系统遭到破坏，恶意黑客可以检索加密密钥并解密在
    etcd 数据文件中的负载。
- en: Finally, these providers are subject to multiple vulnerabilities, ranging from
    padding oracle attacks to birthday attacks or the ability to *guess* encryption
    keys based on the number of times that keys have been used to write encrypted
    payloads, enhancing the need for a proper automated key rotation strategy.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这些提供者面临多种漏洞，从填充 oracle 攻击到生日攻击，或者根据密钥使用的次数*猜测*加密密钥，这增加了对适当自动化密钥轮换策略的需求。
- en: Native encryption with an external component
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与外部组件的原生加密
- en: The native encryption can be enabled by leveraging additional software, either
    on the control plane or externally to the Kubernetes cluster.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 原生加密可以通过利用额外的软件来启用，无论是在控制平面上还是在 Kubernetes 集群外部。
- en: kms
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: kms
- en: 'The Kubernetes `kms` provider is a response to the security key exposure from
    the previous `aescbc` and `aesgcm` encryption providers by calling for the following:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes `kms` 提供者是针对前述 `aescbc` 和 `aesgcm` 加密提供者的安全密钥暴露问题而提出的，提出了以下要求：
- en: An external KMS, such as Azure Key Vault, HashiCorp Vault, or AWS Vault, to
    leverage the construct of the envelope encryption scheme.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部 KMS，如 Azure Key Vault、HashiCorp Vault 或 AWS Vault，用于利用信封加密方案的构造。
- en: A plugin, called Kubernetes KMS provider plugin, to interconnect `kube-apiserver`
    with one or multiple external KMSs. This approach reduces the `kube-apiserver`
    development, integration, and maintenance that would be required to support every
    KMS vendor.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个插件，称为 Kubernetes KMS 提供者插件，用于将 `kube-apiserver` 与一个或多个外部 KMS 相连接。这种方法减少了为了支持每个
    KMS 供应商所需的 `kube-apiserver` 开发、集成和维护。
- en: 'The KMS encryption is designed with an envelope encryption scheme using a two-key
    approach:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: KMS 加密设计采用信封加密方案，使用两把密钥的方式：
- en: A `kube-apiserver` and linked to the Kubernetes clusters.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 `kube-apiserver` 与 Kubernetes 集群相连接。
- en: A **key encryption key**, also known as a **KEK**, to encrypt the DEK. A KEK
    is generated and hosted remotely on the KMS.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**密钥加密密钥**，也称为 **KEK**，用于加密 DEK。KEK 在 KMS 上生成并远程托管。'
- en: Important notes
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: While it is possible to have a single KEK hosted on a remote KMS to address
    multiple Kubernetes clusters, this is not recommended as it would become a single
    point of failure and security exposure if the remote KMS was compromised. It is
    advised to consider one dedicated KEK per Kubernetes cluster and potentially multiple
    remote KMSs.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然可以将一个单独的KEK托管在远程KMS上以服务多个Kubernetes集群，但不推荐这样做，因为如果远程KMS遭到入侵，它将成为单点故障和安全暴露的风险。建议为每个Kubernetes集群考虑一个专用的KEK，并可能使用多个远程KMS。
- en: Thinking about the multi-tenancy requirement, it would make sense to even have
    a dedicated KEK per tenant, a feature that is currently not (yet) implemented
    at the time of writing.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到多租户需求，为每个租户拥有一个专用的KEK也是有意义的，这是一个在撰写本文时尚未实现的功能。
- en: At the time of writing, the Kubernetes project has introduced KMSv2, the latest
    implementation of the KMS provider for `kube-apiserver`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文写作时，Kubernetes项目已经推出了KMSv2，这是`kube-apiserver`的最新KMS提供者实现。
- en: 'While the high-level functional purpose is identical, the design and implementation
    are slightly different. These differences could be impacting your compliance and
    regulation needs:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然高层次的功能目标相同，但设计和实现上略有不同。这些差异可能会影响你的合规性和监管需求：
- en: In KMSv1, each `Secret` object creation generates a dedicated DEK during the
    transaction with each DEK being encrypted with the KEK calling the KMS, which
    impacts the performance when operating a large Kubernetes cluster environment.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在KMSv1中，每创建一个`Secret`对象就会在事务过程中生成一个专用的DEK，每个DEK都通过调用KMS使用KEK加密，这会影响在大型Kubernetes集群环境中操作时的性能。
- en: In KMSv2, `kube-apiserver` generates a DEK at startup (or at the `EncryptionConfiguration`
    reload time), calls the KMS plugin to encrypt it using the remote KEK from the
    KMS server, caches the DEK, performs the encryption and decryption from memory,
    and will call the KMS for encryption only at restart or during key rotation. This
    redesign greatly improves the performance and resilience at a large scale.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在KMSv2中，`kube-apiserver`在启动时（或在`EncryptionConfiguration`重新加载时）生成一个DEK，调用KMS插件使用KMS服务器的远程KEK加密它，缓存DEK，从内存中执行加密和解密，并且仅在重启或密钥轮换期间才会调用KMS进行加密。这种重新设计大大提高了大规模环境下的性能和弹性。
- en: 'The following diagram provides an overview of the encryption workflow for KMSv1:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 下图提供了KMSv1加密工作流的概述：
- en: '![Figure 3.3 – Kubernetes workflow for the KMS plugin v1 provider](img/B20970_03_03.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.3 – KMS插件v1提供者的Kubernetes工作流](img/B20970_03_03.jpg)'
- en: Figure 3.3 – Kubernetes workflow for the KMS plugin v1 provider
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.3 – KMS插件v1提供者的Kubernetes工作流
- en: 'The diagram flow can be read as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图表流程可以按如下方式解读：
- en: A user creates a `Secret` object.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户创建一个`Secret`对象。
- en: '`kube-apiserver` checks the `EncryptionConfiguration` provider list.'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`kube-apiserver`检查`EncryptionConfiguration`提供者列表。'
- en: The provider refers to KMSv1.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供者指的是KMSv1。
- en: '`kube-apiserver` generates a DEK.'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`kube-apiserver`生成一个DEK。'
- en: '`kube-apiserver` encrypts the data field payload with the DEK.'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`kube-apiserver`使用DEK加密数据字段负载。'
- en: '`kube-apiserver` requests the DEK encryption to the KMS plugin.'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`kube-apiserver`请求KMS插件进行DEK加密。'
- en: The KMS plugin requests the KMS to encrypt the DEK with the KEK.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: KMS插件请求KMS使用KEK加密DEK。
- en: The KMS encrypts the DEK with the KEK.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: KMS使用KEK加密DEK。
- en: The KMS plugin returns the encrypted DEK to `kube-apiserver`.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: KMS插件将加密后的DEK返回给`kube-apiserver`。
- en: '`kube-apiserver` stores the encrypted `Secret` and DEK in etcd.'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`kube-apiserver`将加密后的`Secret`和DEK存储在etcd中。'
- en: 'The following diagram provides an overview of the encryption workflow for KMSv2:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 下图提供了KMSv2加密工作流的概述：
- en: '![Figure 3.4 – Kubernetes workflow for the KMS plugin v2 provider](img/B20970_03_04.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.4 – KMS插件v2提供者的Kubernetes工作流](img/B20970_03_04.jpg)'
- en: Figure 3.4 – Kubernetes workflow for the KMS plugin v2 provider
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.4 – KMS插件v2提供者的Kubernetes工作流
- en: 'The diagram flow can be read as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图表流程可以按如下方式解读：
- en: A user creates a `Secret` object.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户创建一个`Secret`对象。
- en: '`kube-apiserver` checks the `EncryptionConfiguration` provider list.'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`kube-apiserver`检查`EncryptionConfiguration`提供者列表。'
- en: The provider refers to KMSv2.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供者指的是KMSv2。
- en: If there is no existing DEK, `kube-apiserver` will generate one.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果没有现有的DEK，`kube-apiserver`将生成一个。
- en: If a DEK was generated, `kube-apiserver` requests the DEK encryption to the
    KMS plugin.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果生成了DEK，`kube-apiserver`将请求KMS插件进行DEK加密。
- en: The KMS plugin requests the KMS to encrypt the DEK with the KEK.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: KMS插件请求KMS使用KEK加密DEK。
- en: The KMS encrypts the DEK with the KEK.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: KMS使用KEK加密DEK。
- en: The KMS plugin returns the encrypted DEK to `kube-apiserver`.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: KMS插件将加密后的DEK返回给`kube-apiserver`。
- en: '`kube-apiserver` stores the encrypted DEK in etcd.'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`kube-apiserver`将加密后的DEK存储在etcd中。'
- en: '`kube-apiserver` encrypts the data field payload with the DEK.'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`kube-apiserver`使用DEK加密数据字段负载。'
- en: '`kube-apiserver` stores the encrypted `Secret` in etcd.'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`kube-apiserver`将加密后的`Secret`存储在etcd中。'
- en: The `kms` provider adds complexity in terms of configuration. This method complies
    with all regulations requiring external key management while addressing most if
    not all of our onion layers.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`kms`提供者在配置方面增加了复杂性。此方法符合所有需要外部密钥管理的法规，同时解决了我们的大多数（如果不是全部）洋葱层次。'
- en: KMS provider plugin example
  id: totrans-133
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: KMS提供者插件示例
- en: As described earlier, the `kms` provider requires an additional third-party
    software called a `kms` provider plugin to connect `kube-apiserver` with an external
    KMS, such as HashiCorp Vault or any other KMS supported by the plugin being used.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面所述，`kms`提供程序需要额外的第三方软件，称为`kms`提供程序插件，以连接`kube-apiserver`与外部 KMS，如 HashiCorp
    Vault 或插件使用的任何其他受支持的 KMS。
- en: The plugin will be deployed on the control plane nodes as a local UNIX socket
    to interact directly with `kube-apiserver` without going through the network,
    which could be a potential security exposure.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 该插件将部署在控制平面节点上，作为一个本地 UNIX 套接字，直接与`kube-apiserver`进行交互，而无需通过可能存在安全风险的网络传输。
- en: A community project such as *Trousseau* ([https://trousseau.io](https://trousseau.io)),
    among others, provides this capability to extend the `kube-apiserver` capabilities
    with HashiCorp Vault, Azure Key Vault, and AWS KMS.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 诸如*Trousseau* ([https://trousseau.io](https://trousseau.io))等的社区项目提供了这种能力，可以通过
    HashiCorp Vault、Azure Key Vault 和 AWS KMS 扩展`kube-apiserver`的功能。
- en: Getting hands-on with key-value data
  id: totrans-137
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 通过键值数据进行实际操作
- en: Within the Git repository, in the `ch03` folder, you will find a walkthrough
    to deploy a new Kind cluster using Podman or Docker, using a specific cluster
    configuration file to get a ready-to-use instance with the default `EncryptionConfiguration`
    configuration.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Git 仓库中的`ch03`文件夹中，您将找到一个使用 Podman 或 Docker 部署新 Kind 集群的步骤说明，使用特定的集群配置文件可获得一个默认`EncryptionConfiguration`配置的可用实例。
- en: The how-to includes a quick intro to the Kind configuration file allowing us
    to enable specific flags for `kube-apiserver`, and explains how to mount a specific
    folder to the Pod with a configuration file. This will help you in the future
    to interact with other Kubernetes distributions leveraging the same principles.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 操作指南包括一个简短的 Kind 配置文件介绍，允许我们为`kube-apiserver`启用特定标志，并解释如何通过配置文件将特定文件夹挂载到 Pod
    中。这将帮助您未来与利用相同原则的其他 Kubernetes 发行版进行交互。
- en: From there, you will have a chance to implement each provider and create and
    replace `Secret` objects with their new revisions being encrypted with the provider
    in question. This approach will highlight the capability to move from one provider
    to another without a major operational burden.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 从那里开始，您将有机会实施每个提供程序，并创建和替换使用该提供程序加密的新修订版`Secret`对象。这种方法将突显从一个提供程序转移到另一个提供程序而不带来主要操作负担的能力。
- en: Finally, the hands-on examples will help you to verify that each `Secret` object
    has been encrypted with the appropriate combination of provider, key, and version
    if applied by dumping the entries directly from the etcd data store.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，实际操作示例将帮助您验证每个`Secret`对象是否已使用适当的提供程序、密钥和版本加密，如果适用，可以直接从 etcd 数据存储中转储条目进行查看。
- en: Precedence
  id: totrans-142
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 优先级
- en: 'As previously mentioned, the provider list has a precedence evaluation or,
    in other words, a sequential order to consider during implementation:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，提供程序列表具有优先级评估或者说在实施过程中要考虑的顺序：
- en: When creating a new `Secret`, `kube-apiserver` will use the first provider listed
    to encrypt or not, if the provider is `identity`, the data field payload for the
    listed resources.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建新的`Secret`时，`kube-apiserver`将使用列出的第一个提供程序来加密指定资源的数据字段有效负载。
- en: 'When reading an existing `Secret`, `kube-apiserver` will check the Secret header
    to define the KMS provider, its version, and the associated key:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 读取现有的`Secret`时，`kube-apiserver`将检查 Secret 头以定义 KMS 提供程序、其版本和相关联的密钥：
- en: If there is a match, it will try to decrypt the `Secret` data field payload
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果有匹配项，将尝试解密`Secret`数据字段的有效负载。
- en: If there is no match, an error will be returned
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果没有匹配项，将返回错误。
- en: All existing Secrets could be replaced with a newer revision by changing the
    provider list order. The most common example would be to introduce a new KMS provider,
    such as `aesgcm`, and replace all unencrypted Secrets with a newer revision that
    will be encrypted with the `aesgcm` provider. This particular case is illustrated
    within the hands-on example.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有现有的 Secrets 可以通过更改提供程序列表顺序来替换为更新的修订版。最常见的例子是引入一个新的 KMS 提供程序，如`aesgcm`，并用新的修订版替换所有未加密的
    Secrets，这将使用`aesgcm`提供程序进行加密。此特定案例在实际操作示例中有所说明。
- en: This implementation example of a `kms` provider showcases the usage of an external
    KMS service. Note that the `kms` v1 provider is deprecated with version 1.28 of
    Kubernetes in favor of a more resilient `kms` v2 that’s capable of sustaining
    network partitioning.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`kms`提供程序的实现示例展示了如何使用外部KMS服务。请注意，`kms` v1提供程序在Kubernetes 1.28版本中已被弃用，取而代之的是更具韧性的`kms`
    v2，它能够承受网络分区。
- en: Going further with securing etcd
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入了解如何保护etcd
- en: The previous section described the native encryption capabilities provided by
    Kubernetes at the application layer or, in other words, how to secure sensitive
    data from `Secret` and `ConfigMap` objects being processed by the Kubernetes API
    server.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 上一节描述了Kubernetes在应用层提供的原生加密功能，换句话说，就是如何保护敏感数据，以防`Secret`和`ConfigMap`对象在Kubernetes
    API服务器处理中被暴露。
- en: 'Depending on the deployment type, whether on-premises or in the cloud, other
    layers can benefit from encryption to avoid or reduce security exposures:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 根据部署类型，是否是本地部署还是云端部署，其他层级也可以通过加密受益，以避免或减少安全暴露：
- en: When self-deploying on-premises or in the cloud using physical or virtual machines,
    the Kubernetes `EncryptionConfiguration` API object is stored as a file on disk;
    accessing this configuration file, as well as the etcd data file, will compromise
    all sensitive data recorded as part of the API objects in etcd.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在本地或云端使用物理或虚拟机进行自部署时，Kubernetes的`EncryptionConfiguration` API对象以文件形式存储在磁盘上；访问此配置文件以及etcd数据文件，将导致所有在etcd中记录的敏感数据遭到泄露。
- en: When consuming a managed Kubernetes instance from a cloud provider, the control
    plane becomes their responsibility. However, not all services are equal and some
    require a thorough review of the configuration to ensure that the cloud provider
    you are selecting is handling the encryption at rest on its infrastructure level
    and allows you to enable the Kubernetes native encryption.
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在使用云服务提供商的托管Kubernetes实例时，控制平面成为他们的责任。然而，并不是所有服务都是一样的，一些服务需要仔细检查配置，以确保您选择的云服务提供商在其基础设施层面处理了静态加密，并允许您启用Kubernetes的原生加密。
- en: 'Considering the following onion diagram, we can list the illustrated components
    as potential exposure points to be addressed to mitigate unauthorized access to
    the data within etcd, including Secrets and ConfigMaps. This section provides
    you with an analysis of each component in terms of security risk and related mitigation(s):'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到以下的洋葱图，我们可以将图示的组件列为潜在的暴露点，以应对未授权访问etcd中的数据，包括Secrets和ConfigMaps。本节为您提供了关于每个组件的安全风险分析及相关的缓解措施：
- en: '![Figure 3.5 – The etcd security exposure presented as onion layers](img/B20970_03_05.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图3.5 – 将etcd安全暴露呈现为洋葱层](img/B20970_03_05.jpg)'
- en: Figure 3.5 – The etcd security exposure presented as onion layers
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.5 – 将etcd安全暴露呈现为洋葱层
- en: 'Due to the numerous combinations of Linux and Kubernetes distributions, not
    to even mention the extensive cloud provider offerings, this chapter provides
    an extensive hands-on section on the key-value data while sharing guidance on
    all other components, for which the following references will help you with implementing
    a security and hardening profile for your systems:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Linux和Kubernetes发行版的组合非常多，更不用说各种云服务提供商的选择，本章提供了一个关于关键值数据的广泛实践部分，并分享了其他组件的指南，以下参考资料将帮助您为系统实施安全和加固配置：
- en: 'Tevault, Donald A. (2023). *Mastering Linux Security and Hardening: A Practical
    Guide to Protecting Your Linux System from Cyber Attacks* by *Packt Publishing*.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tevault, Donald A. (2023). *精通Linux安全与加固：保护您的Linux系统免受网络攻击的实用指南*，由*Packt Publishing*出版。
- en: 'Kalsi, Tajinder. (2018). *Practical Linux Security Cookbook: Secure Your Linux
    Environment from Modern-Day Attacks with Practical Recipes* by *Packt Publishing*.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kalsi, Tajinder. (2018). *实用Linux安全食谱：使用实用的配方保护您的Linux环境免受现代攻击*，由*Packt Publishing*出版。
- en: It is also worth noting that cloud providers are doing most of the heavy lifting
    to encrypt at-rest disks and filesystems to mitigate related attack vectors. However,
    all of them advise leveraging the Kubernetes `EncryptionConfiguration` API server
    configuration for end-to-end encryption.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 还值得注意的是，云服务提供商已经做了大部分的工作，负责加密静态磁盘和文件系统，以减轻相关的攻击向量。然而，他们都建议利用Kubernetes的`EncryptionConfiguration`
    API服务器配置进行端到端加密。
- en: Linux system hardening
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linux系统加固
- en: '*The art of operating system hardening is to reduce the access breach exploits
    to zero. From our context, it means no remote access via the operating system
    to the etcd* *data file.*'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '*操作系统加固的艺术在于将访问漏洞的利用降到零。在我们的背景下，这意味着操作系统不允许远程访问到 etcd* *数据文件。*'
- en: It is important to appreciate the effort from Linux distributions to include
    the concept of security profiles, leveraging standards such as SCAP at the early
    stage of system installation, and helping with relevant and consistent hardening
    based on your organization’s needs. A series of industry-specific profiles, such
    as CIS Benchmarking and NIST, are offered at the deployment time, helping to configure
    the operating system with the necessary rules to comply with the chosen regulation.
    These rules are explained when using the graphical user interface or can be found
    within the vendor documentation. No matter your preferred installation method
    – text, graphical, or kickstart – all can benefit from such hardening automation.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要理解 Linux 发行版在系统安装的早期阶段就已包含安全配置文件的概念，利用像 SCAP 这样的标准，并根据你组织的需求帮助进行相关和一致的加固。部署时提供了一系列行业特定的配置文件，例如
    CIS 基准和 NIST，帮助配置操作系统，使其符合所选的规定。这些规则在使用图形用户界面时会进行说明，或者可以在供应商文档中找到。无论你偏好的安装方式是文本、图形还是
    kickstart，都可以从这种加固自动化中受益。
- en: This approach helps to reduce the pressure on the Ops team. By automating the
    relevant 100+ specific configuration rules, complying with a regulatory profile
    such as PCI-DSS can easily be achieved without reading its 360 pages of requirements.
    This would complement the 190+ pages of the Red Hat Security Hardening reference
    guide.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法有助于减轻运维团队的压力。通过自动化相关的 100 多条具体配置规则，遵循像 PCI-DSS 这样的合规配置文件变得简单，而无需阅读其 360
    页的要求。这将与 Red Hat 安全加固参考指南中的 190 多页内容相辅相成。
- en: 'Once the system has been deployed with the appropriate security policy relevant
    to your organization’s industry, the OpenSCAP bench toolset can be used to scan
    your entire install base to provide you with the following:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦系统部署了与你组织所在行业相关的适当安全策略，OpenSCAP 工具集可以用来扫描整个安装基础，为你提供以下内容：
- en: A tailor-fit audit per Linux distribution
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个 Linux 发行版的量身定制审计
- en: A shareable audit file including a risk-scoring system
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个可共享的审计文件，包含风险评分系统
- en: A mitigation strategy with the most common toolsets (Shell script, Puppet, Ansible,
    and so on)
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一项缓解策略，涵盖最常见的工具集（Shell 脚本、Puppet、Ansible 等）
- en: 'See the following for reference:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 参见以下内容作为参考：
- en: 'OpenSCAP: [https://www.open-scap.org/](https://www.open-scap.org/)'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'OpenSCAP: [https://www.open-scap.org/](https://www.open-scap.org/)'
- en: 'OpenSCAP PCI-DSS rules: [http://static.open-scap.org/ssg-guides/ssg-rhel9-guide-pci-dss.html](http://static.open-scap.org/ssg-guides/ssg-rhel9-guide-pci-dss.html)'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'OpenSCAP PCI-DSS 规则: [http://static.open-scap.org/ssg-guides/ssg-rhel9-guide-pci-dss.html](http://static.open-scap.org/ssg-guides/ssg-rhel9-guide-pci-dss.html)'
- en: 'Red Hat Enterprise Linux security hardening: [https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/security_hardening](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/security_hardening)'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Red Hat Enterprise Linux 安全加固: [https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/security_hardening](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/security_hardening)'
- en: Hardening a Linux system includes tasks pre- and post-installation. To avoid
    redeploying your operating system, enable the appropriate security profile and
    disk encryption during the installation process. Most Linux distributions, such
    as the Red Hat Enterprise Linux 9, have a graphical user interface to set a specific
    security profile and provide you with a list of mandatory configuration changes
    to comply with the chosen profile.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 加固 Linux 系统包括安装前和安装后的任务。为了避免重新部署操作系统，请在安装过程中启用适当的安全配置文件和磁盘加密。大多数 Linux 发行版，例如
    Red Hat Enterprise Linux 9，都提供图形用户界面来设置特定的安全配置文件，并为你提供一份强制性的配置更改列表，以确保符合所选的配置文件。
- en: The GitHub repository has two examples within the `ch03` folder demonstrating
    the hardening of a Linux system using the installer graphical interface and a
    kickstart file.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 仓库在 `ch03` 文件夹中提供了两个示例，演示了使用安装程序图形界面和 kickstart 文件加固 Linux 系统。
- en: Linux data encryption
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linux 数据加密
- en: '*Stealing a disk or a server is a serious concern, and it happens more often
    than we could believe. But it is not only for on-premises infrastructure; cloud
    virtual disks could be stolen too thanks to hypervisor exploits that could leak
    the disk file, which means all your business-critical systems have their credentials*
    *leaked too.*'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '*盗窃磁盘或服务器是一个严重问题，且发生的频率比我们想象的还要高。但这不仅仅是针对本地基础设施；云虚拟磁盘也可能被盗，原因是虚拟化程序的漏洞可能泄露磁盘文件，这意味着所有与你的业务关键系统相关的凭证*
    *也会被泄露*。'
- en: Since etcd does not offer any encryption capabilities (at the time of writing),
    the data file that will be stored on the control plane node filesystem can be
    accessed and easily read to recover our `Secret` object payload, as shown in [*Chapter
    1*](B20970_01.xhtml#_idTextAnchor015), *Understanding Kubernetes Secrets Management*.
    This means that any physical deployment scenarios colocated on-premises and with
    edge computing would result in security exposures when an attacker steals the
    disk(s) or node(s).
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 etcd（截至本文撰写时）不提供任何加密功能，因此将存储在控制平面节点文件系统中的数据文件可以被访问并轻松读取，从而恢复我们的 `Secret`
    对象负载，详见 [*第 1 章*](B20970_01.xhtml#_idTextAnchor015)，*理解 Kubernetes 秘密管理*。这意味着任何本地部署和边缘计算的物理场景，都会在攻击者盗取磁盘或节点时导致安全漏洞。
- en: To address this concern, the disk and filesystem will need to be encrypted.
    Why both, you ask? While a `Secret` objects used to access your cloud, application,
    and storage accounts.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，磁盘和文件系统需要加密。你可能会问，为什么两者都要加密？因为 `Secret` 对象用于访问你的云、应用程序和存储账户。
- en: Disk encryption
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 磁盘加密
- en: FDE, sometimes referred to as **self-encrypting disk** (**SED**), is an interesting
    starting point to provide a fully offloaded encryption process from the host,
    reducing the attack surface. It is transparent to both the operating system and
    the applications (no drivers or libraries to maintain). FDE guarantees a high
    level of compatibility, supportability, and portability across different hardware
    and software combinations.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: FDE，有时称为**自加密磁盘**（**SED**），是一个有趣的起点，可以提供完全从主机卸载的加密过程，从而减少攻击面。它对操作系统和应用程序透明（无需维护驱动程序或库）。FDE
    保证了在不同硬件和软件组合下的高兼容性、可支持性和可移植性。
- en: All FDE/SED disks are delivered with a zero-length authentication key/password
    to ease the initial setup, especially if there is no user requirement to do so.
    When defining an authentication key or password, the DEK is stored on the disk
    and protected with the defined custom user key.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 FDE/SED 磁盘都配有零长度认证密钥/密码，以便简化初始设置，尤其是在没有用户需求的情况下。定义认证密钥或密码时，DEK 会存储在磁盘上，并通过定义的自定义用户密钥进行保护。
- en: 'The benefits of this workflow are as follows:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 该工作流程的好处如下：
- en: Protection from physical theft of the disk(s)
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防止磁盘被物理盗窃
- en: Protecting the data even before boot time
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在启动之前就保护数据
- en: Enabling re-key options for compelling events and compliance purposes
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用重新密钥选项以应对紧急事件和合规需求
- en: 'The pitfalls are the following:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 陷阱如下：
- en: Booting requires user interaction to input the authentication key
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动时需要用户交互以输入认证密钥
- en: Losing the key means losing the data
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 丢失密钥意味着丢失数据
- en: Hacking is still a possibility
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 黑客攻击仍然是可能的
- en: 'Indeed, the effectiveness of these disks could be challenged, with different
    approaches demonstrating how to access and compromise the data on these disks
    provided by these two references:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 确实，这些磁盘的有效性可能受到挑战，不同的方法展示了如何访问并破坏这些磁盘上的数据，以下两个参考文献提供了相关信息：
- en: '*Hardware-based Full Disk Encryption (In)Security* by Tilo Müller, Tobias Latzo,
    and Felix C. Freilling from System Security Group at Friedrich-Alexander Universität:
    [https://www.cs1.tf.fau.de/research/system-security-group/sed-insecurity/](https://www.cs1.tf.fau.de/research/system-security-group/sed-insecurity/)'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由 Tilo Müller、Tobias Latzo 和 Felix C. Freilling（来自弗里德里希-亚历山大大学系统安全小组）编写的《*硬件基础的全磁盘加密（不）安全性*》：[https://www.cs1.tf.fau.de/research/system-security-group/sed-insecurity/](https://www.cs1.tf.fau.de/research/system-security-group/sed-insecurity/)
- en: 'Perform an internet search with the following terms: `NSA disk` `firmware hack`'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下术语进行互联网搜索：`NSA 磁盘` `固件黑客`
- en: Note that most professional-grade disks (mechanical or chip-based) offered in
    servers and storage arrays are delivered with such technology. This is the first
    hardware layer of protection to consider.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，大多数在服务器和存储阵列中提供的专业级磁盘（无论是机械磁盘还是基于芯片的）都配有此类技术。这是要考虑的第一层硬件保护。
- en: Filesystem encryption
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文件系统加密
- en: When it comes to encrypting a Linux filesystem, multiple approaches could be
    considered, including both open source and proprietary options. For this section,
    we will have a look at three open source solutions, from easy to complex, from
    the perspective of requirements.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在加密 Linux 文件系统时，可以考虑多种方法，包括开源和专有选项。在本节中，我们将从需求的角度出发，探讨三种从简单到复杂的开源解决方案。
- en: Plain device-mapper encryption
  id: totrans-197
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 普通设备映射加密
- en: The usage of device-mapper encryption with `dm-crypt` is an obvious and simple
    choice as it performs a block-level encryption on an unpartitioned disk. This
    technique provides disk-level encryption that could be accessible with a so-called
    garbage random data introducing a deniable encryption method.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `dm-crypt` 进行设备映射加密是一个明显且简单的选择，因为它对未分区的磁盘进行块级加密。该技术提供了磁盘级加密，并且可以通过所谓的垃圾随机数据访问，从而引入一种可否认的加密方法。
- en: 'The benefits of using device-mapper encryption are as follows:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 使用设备映射加密的好处如下：
- en: Full disk encryption is provided
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供全磁盘加密
- en: No partition tables are exposed, nor are the UUID or LABEL
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不会暴露分区表，也不会暴露 UUID 或标签
- en: It provides a robust solution in case of a disaster (in a LUKS setup, if the
    header is destroyed, the data is lost)
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在灾难发生时提供强大的解决方案（在 LUKS 设置中，如果头部被销毁，数据将丢失）
- en: 'The pitfalls are the following:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 存在以下问题：
- en: A high level of mastery of device mapping is required to ensure proper configurations
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要较高的设备映射掌握程度，以确保正确的配置
- en: A single passphrase with no key rotation is a potential issue with specific
    compliance/regulation requirements
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单一密码短语且没有密钥轮换，可能会在特定的合规/监管要求中产生潜在问题
- en: There is no key derivation function that would reduce the vulnerability to brute-force
    attacks when passphrases are generated with a lack of entropy
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有密钥派生功能，这会降低在生成缺乏熵的密码短语时抵抗暴力破解攻击的能力
- en: There is no support for the TRIM command on solid-state drives
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不支持固态硬盘上的 TRIM 命令
- en: 'See the following for reference:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 参考以下内容：
- en: 'Project: [https://www.kernel.org/doc/html/latest/admin-guide/device-mapper/dm-crypt.html](https://www.kernel.org/doc/html/latest/admin-guide/device-mapper/dm-crypt.html)'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目：[https://www.kernel.org/doc/html/latest/admin-guide/device-mapper/dm-crypt.html](https://www.kernel.org/doc/html/latest/admin-guide/device-mapper/dm-crypt.html)
- en: 'Implementation on Arch Linux: [https://wiki.archlinux.org/title/Dm-crypt](https://wiki.archlinux.org/title/Dm-crypt)'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Arch Linux 上的实现：[https://wiki.archlinux.org/title/Dm-crypt](https://wiki.archlinux.org/title/Dm-crypt)
- en: Linux Unified Key Setup (LUKS)
  id: totrans-211
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Linux 统一密钥设置（LUKS）
- en: 'LUKS can be considered as a universal disk encryption software with secure
    password management implemented in its core. This allows us to overcome some if
    not all of the pitfalls linked to key derivation, rotation, and multiple passphrase
    capabilities. Along with these, LUKS is compatible with the **logical volume management**
    (**LVM**) and software RAID scenario for interesting solutions that would address
    different needs and compliance/regulation requirements. Here are a few examples
    where LUKS can be integrated with other solutions:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: LUKS 可以被认为是一款通用的磁盘加密软件，其核心实现了安全的密码管理。这使我们能够克服与密钥派生、轮换和多重密码功能相关的一些（如果不是全部的话）难题。除此之外，LUKS
    与**逻辑卷管理**（**LVM**）和软件 RAID 场景兼容，适用于应对不同需求以及合规/监管要求的有趣解决方案。以下是一些可以将 LUKS 与其他解决方案集成的示例：
- en: LUKS on a partition
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在分区上使用 LUKS
- en: LVM on LUKS
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 LUKS 上使用 LVM
- en: LUKS on LVM
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 LVM 上使用 LUKS
- en: LUKS with software RAID
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在软件 RAID 上使用 LUKS
- en: LUKS can also be complementary to other solutions to provide additional security
    responses. A plain device mapper and a headerless LUKS implementation would set
    up a deniable encrypted device (no header). This method would also address the
    key rotation requirement with capabilites for key derivation and multiple passphrases.
    This could be the best of both worlds, a solution that I would appreciate the
    most when no external KMS is required.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: LUKS 还可以与其他解决方案互补，以提供额外的安全应对措施。一个普通的设备映射器和一个没有头部的 LUKS 实现将建立一个可否认的加密设备（没有头部）。这种方法也能满足密钥轮换要求，并具备密钥派生和多重密码功能。这可能是两全其美的解决方案，是我在不需要外部
    KMS 的情况下最为青睐的选择。
- en: 'See the following for reference:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 参考以下内容：
- en: 'Project: [https://gitlab.com/cryptsetup/cryptsetup/blob/master/README.md](https://gitlab.com/cryptsetup/cryptsetup/blob/master/README.md)'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目：[https://gitlab.com/cryptsetup/cryptsetup/blob/master/README.md](https://gitlab.com/cryptsetup/cryptsetup/blob/master/README.md)
- en: 'Implementation on Red Hat Enterprise Linux: [https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/security_hardening/encrypting-block-devices-using-luks_security-hardening](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/security_hardening/encrypting-block-devices-using-luks_security-hardening)'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Red Hat Enterprise Linux 上的实现： [https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/security_hardening/encrypting-block-devices-using-luks_security-hardening](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/security_hardening/encrypting-block-devices-using-luks_security-hardening)
- en: Device mapper with LVM and LUKS
  id: totrans-221
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 设备映射器与 LVM 和 LUKS
- en: 'As listed in the LUKS section, there are multiple combinations to implement
    disk encryption using LUKS. However, each setup comes with benefits and trade-offs,
    sometimes major ones, such as the following:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 如 LUKS 部分所列，使用 LUKS 实现磁盘加密有多种组合。然而，每种设置都有优点和折衷，甚至可能是重大的，比如以下几点：
- en: LVM on LUKS would ease the partitioning and protect the volume layout when locked,
    but relies on a single encryption key with all volumes being encrypted
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LVM 在 LUKS 上简化了分区操作，并在加密时保护卷的布局，但它依赖于一个单一的加密密钥，所有卷都会被加密。
- en: LUKS on LVM provides flexibility to support un/encrypted volumes while being
    complex to maintain and less secure by exposing the volume layout
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LUKS 在 LVM 上提供了灵活性，可以支持加密和未加密的卷，但由于暴露了卷的布局，它的维护复杂且安全性较低。
- en: For both the device mapper and LUKS solutions, the usage of TRIM with solid-state
    drives could be a security exposure or a security response.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 对于设备映射器和 LUKS 解决方案，使用 TRIM 配合固态硬盘可能会带来安全风险或作为一种安全响应。
- en: With a plain mode `dm-crypt`, if TRIM is enabled, it will eventually expose
    the encryption and could leak enough data from freed blocks to discover the encryption
    pattern. However, if there is no hard requirement for both data and deniable encryption,
    then it can be safely enabled as there will be a significant performance improvement.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在普通模式下使用 `dm-crypt`，如果启用了 TRIM，它最终会暴露加密方式，并可能泄露从已释放的块中获得的数据，进而发现加密模式。然而，如果没有对数据和不可否认加密的硬性要求，那么可以安全启用
    TRIM，因为这样会显著提高性能。
- en: With LUKS, the header is stored at the beginning of the device. If there is
    a passphrase rotation, the previous one will be revoked and TRIM will help to
    free the blocks. If not, then an attacker could research the device to get the
    old header and decrypt the disk.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 LUKS 时，头文件存储在设备的开始部分。如果需要更换密码，之前的密码将被撤销，TRIM 会帮助释放这些块。如果没有更换密码，攻击者可能会研究设备，获取旧的头文件并解密磁盘。
- en: For increased security with LUKS, the usage of a (virtual) **Trusted Platform
    Module** (**TPM**) can be leveraged to store and handle the automatic unlocking
    of the drives while booting. This removes the manual typing of the passphrase
    but could expose the key and thus the data if the server is stolen.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提高 LUKS 的安全性，可以使用（虚拟）**受信平台模块**（**TPM**）来存储并处理驱动器的自动解锁，从而在启动时避免手动输入密码。然而，如果服务器被盗，这可能会暴露密钥，进而暴露数据。
- en: To avoid complexity, rely on the risk analysis approach to define the needs
    regarding your specific environment and how to comply with your regulations. Then,
    select a filesystem encryption method that addresses your requirements and the
    operational team’s skills.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免复杂性，可以依赖风险分析方法来定义在特定环境中的需求，并确保符合相关法规要求。然后，选择一种能够满足需求且与运营团队技能匹配的文件系统加密方法。
- en: Network-bound disk encryption (NBDE)
  id: totrans-230
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 网络绑定磁盘加密（NBDE）
- en: Key management services, also called key escrow in this context, offload the
    encryption key to a remote service to avoid some of the pitfalls listed in the
    previous solutions. Keys are stored in a vault-like data store and thus require
    high availability and backup strategies to guarantee the availability and survival
    of the encryption keys. If not, the data on the disk will be lost forever. Note
    that backups also need to be secured to avoid any key leaks from side channels
    or opportunistic hacks.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 密钥管理服务，也称为密钥托管，在此背景下将加密密钥转移到远程服务，以避免之前解决方案中列出的一些陷阱。密钥存储在类似金库的数据存储中，因此需要高可用性和备份策略，以保证加密密钥的可用性和生存性。如果没有，磁盘上的数据将永远丢失。需要注意的是，备份也必须受到保护，以避免通过旁道或机会性攻击泄漏密钥。
- en: 'The **network-bound disk encryption** (**NBDE**) solution solves these challenges
    by introducing a multilayering of security:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '**网络绑定磁盘加密**（**NBDE**）解决方案通过引入多层安全性来解决这些挑战：'
- en: It uses the HTTP/HTTPS protocol to ease the network configuration.
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用 HTTP/HTTPS 协议简化网络配置。
- en: A set of servers created with a predefined quorum to provide encryption/decryption
    capabilities. If the quorum is not met, the decryption will not happen until that
    instance is back online. This creates the notion of network dependencies, or the
    network on which the disk should be connected to access all NBDE servers before
    allowing the exposure of its content.
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一组具有预定义法定人数的服务器，用于提供加密/解密功能。如果未满足法定人数，则不会发生解密，直到该实例重新上线。这就创建了网络依赖关系的概念，即磁盘必须连接到网络上，才能访问所有NBDE服务器，从而允许其内容的暴露。
- en: Symmetric encryption keys being split across all the NBDE servers with an easy-to-(re)distribute
    public key.
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对称加密密钥被分割到所有NBDE服务器上，并通过易于（重新）分发的公钥进行管理。
- en: Reduce key management, no vault, and no high availability and backup necessary.
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减少密钥管理，无需保险库，也不需要高可用性和备份。
- en: Allow transparent reboot when all conditions are met.
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当所有条件满足时，允许透明重启。
- en: Protect against a disk or server and its disks being stolen, unless the entire
    NBDE setup is stolen.
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防止磁盘或服务器及其磁盘被盗，除非整个NBDE设置被盗。
- en: This solution is not as hard as it sounds to implement. Such implementation
    can be put in place in no time while addressing the most rigid compliance and
    regulation requirements.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 该解决方案的实施并不像听起来那么困难。这样的实施可以在短时间内完成，同时满足最严格的合规性和监管要求。
- en: 'See the following for reference:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见以下参考资料：
- en: 'Example of a project for a resilient KMS for NBDE: [https://github.com/latchset/tang](https://github.com/latchset/tang)'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个为NBDE设计的强韧KMS项目示例：[https://github.com/latchset/tang](https://github.com/latchset/tang)
- en: 'Example of an NBDE implementation on Red Hat Enterprise Linux: [https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/security_hardening/configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption_security-hardening](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/security_hardening/configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption_security-hardening)'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Red Hat Enterprise Linux上NBDE实施的示例：[https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/security_hardening/configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption_security-hardening](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/security_hardening/configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption_security-hardening)
- en: 'Example of NBDE with Tang server implementation on Red Hat OpenShift: [https://docs.openshift.com/container-platform/4.13/security/network_bound_disk_encryption/nbde-about-disk-encryption-technology.html](https://docs.openshift.com/container-platform/4.13/security/network_bound_disk_encryption/nbde-about-disk-encryption-technology.html)'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Red Hat OpenShift上使用Tang服务器实施的NBDE示例：[https://docs.openshift.com/container-platform/4.13/security/network_bound_disk_encryption/nbde-about-disk-encryption-technology.html](https://docs.openshift.com/container-platform/4.13/security/network_bound_disk_encryption/nbde-about-disk-encryption-technology.html)
- en: Transport
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 传输
- en: '*The entire Kubernetes design is based on API-driven architecture. This means
    that any exchange of payloads needs to be done through a secure channel using
    Transport Layer Security (TLS). If not, exchanges with etcd will be readable from
    the wire, including sensitive data from* *the Secrets.*'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '*整个Kubernetes设计基于API驱动的架构。这意味着任何有效负载的交换都需要通过安全通道（使用传输层安全性TLS）进行。如果没有，交换到etcd的数据将会从网络中可读，包括来自*
    *Secrets* 的敏感数据。*'
- en: Most Kubernetes distributions have TLS enabled by default and provide Ops with
    TLS security profile options to guarantee compatibility between services and applications
    interacting with each other. In Red Hat OpenShift, a granular approach allows
    the Ops to configure a specific TLS security profile for the ingress, the kubelet,
    and the control plane components, the latter including etcd.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Kubernetes发行版默认启用TLS，并为操作员提供TLS安全配置文件选项，以确保相互交互的服务和应用程序之间的兼容性。在Red Hat OpenShift中，精细化的配置方法允许操作员为入口、kubelet和控制平面组件（后者包括etcd）配置特定的TLS安全配置文件。
- en: Note that the service endpoint could also be enforced with a TLS termination
    handled by external network equipment or software, such as a load balancer. While
    this approach would secure network flow from the end user accessing the API server
    with a fully qualified domain name, this will not protect the internal Kubernetes
    network flow if left without any TLS termination. Both should be considered to
    guarantee an improved security posture.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，服务端点也可以通过由外部网络设备或软件（如负载均衡器）处理的TLS终止来强制执行。虽然这种方法可以确保从最终用户通过完全限定域名访问API服务器时的网络流安全，但如果内部Kubernetes网络流没有任何TLS终止，它将无法保护。因此，应该同时考虑这两者，以确保提高的安全态势。
- en: 'See the following for reference:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅以下内容作为参考：
- en: 'etcd transport security model: [https://etcd.io/docs/v3.5/op-guide/security/](https://etcd.io/docs/v3.5/op-guide/security/)'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: etcd 传输安全模型： [https://etcd.io/docs/v3.5/op-guide/security/](https://etcd.io/docs/v3.5/op-guide/security/)
- en: 'Red Hat OpenShift: [https://docs.openshift.com/container-platform/4.13/security/tls-security-profiles.html#tls-profiles-kubernetes-configuring_tls-security-profiles](https://docs.openshift.com/container-platform/4.13/security/tls-security-profiles.html#tls-profiles-kubernetes-configuring_tls-security-profiles)'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Red Hat OpenShift: [https://docs.openshift.com/container-platform/4.13/security/tls-security-profiles.html#tls-profiles-kubernetes-configuring_tls-security-profiles](https://docs.openshift.com/container-platform/4.13/security/tls-security-profiles.html#tls-profiles-kubernetes-configuring_tls-security-profiles)'
- en: Summary
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: While security measures depend on the organization’s compliance and regulation
    requirements, a risk-based assessment will define the appropriate actions to harden
    your information systems. However, securing Kubernetes Secrets is not optional
    but a must.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然安全措施取决于组织的合规性和监管要求，但基于风险的评估将定义适当的行动，以加固您的信息系统。然而，保护 Kubernetes Secrets 不是可选的，而是必须的。
- en: Given the current trend of adopting hybrid multi-cloud patterns, having one
    cluster’s etcd compromised, whether it is on the cloud or self-managed, could
    lead to compromising the entire environment. These types of attack leverage in-cluster
    network connections or a fleet management tool for which the token would be recorded
    within the compromised etcd. Such a scenario would lead to a viral attack infecting
    every connected endpoint.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于当前采用混合多云模式的趋势，无论是云端还是自管理的集群，一旦其中一个集群的 etcd 被攻破，可能会导致整个环境的安全受损。这类攻击利用集群内部的网络连接或一个集群管理工具，令令牌被记录在被攻破的
    etcd 中。这样的场景将导致病毒式攻击，感染每一个连接的终端。
- en: As a remediation, the native Kubernetes encryption – more specifically, the
    `kms` provider – is a best practice security pattern supported by all the major
    cloud and software providers.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 作为修复措施，原生 Kubernetes 加密——更具体地说，`kms` 提供程序——是所有主要云和软件提供商支持的最佳实践安全模式。
- en: Remember, security is not a finite game but a continuous effort. Regular audits
    and scans of your ever-changing environment will provide you with the most current
    state of compliance. They will also help to build a backlog of tasks to mitigate
    known vulnerabilities and misconfigurations.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，安全性不是一个有限的游戏，而是一个持续的努力。定期对您不断变化的环境进行审计和扫描，将为您提供最新的合规状态。它们还将帮助您建立一个任务积压列表，以减轻已知的漏洞和配置错误。
- en: In the next chapter, we will look at the debugging and troubleshooting techniques
    to analyze unexpected behaviors when configuring and consuming Kubernetes Secrets.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论调试和故障排除技术，以分析在配置和使用 Kubernetes Secrets 时遇到的意外行为。

["```\n#export AZURE_SUBSCRIPTION_ID=\"<SubscriptionId>\"\n# Initialize Azure Service Principal credentials and Azure related config below\nexport AZURE_TENANT_ID=\"<Tenant>\"\nexport AZURE_CLIENT_ID=\"<AppId>\"\nexport AZURE_CLIENT_SECRET=\"<Password>\"\nexport AZURE_SUBSCRIPTION_ID=\"<SubscriptionId>\"\n# Define the names and namespace for AzureClusterIdentity resources\nexport AZURE_CLUSTER_IDENTITY_SECRET_NAME=\"cluster-identity-secret\"\nexport CLUSTER_IDENTITY_NAME=\"cluster-identity\"\nexport AZURE_CLUSTER_IDENTITY_SECRET_NAMESPACE=\"default\"\n# Convert credentials to Base64 for secure storage\nexport AZURE_SUBSCRIPTION_ID_B64=\"$(echo -n \"$AZURE_SUBSCRIPTION_ID\" | base64 | tr -d '\\n')\"\nexport AZURE_TENANT_ID_B64=\"$(echo -n \"$AZURE_TENANT_ID\" | base64 | tr -d '\\n')\"\nexport AZURE_CLIENT_ID_B64=\"$(echo -n \"$AZURE_CLIENT_ID\" | base64 | tr -d '\\n')\"\nexport AZURE_CLIENT_SECRET_B64=\"$(echo -n \"$AZURE_CLIENT_SECRET\" | base64 | tr -d '\\n')\"\n# Construct a Kubernetes secret for Azure Service Principal, to be used by AzureCluster\n# This step secures the Service Principal's password within the Kubernetes environment\nkubectl create secret generic \"${AZURE_CLUSTER_IDENTITY_SECRET_NAME}\" –from-literal=clientSecret=\"${AZURE_CLIENT_SECRET}\" –namespace \"${AZURE_CLUSTER_IDENTITY_SECRET_NAMESPACE}\"\n# Begin the setup of the management cluster with Cluster API for Azure\nclusterctl init --infrastructure azure\n```", "```\nFetching providers\nSkipping installing cert-manager as it is already installed.\nInstalling Provider=\"cluster-api\" Version=\"v1.6.0\" TargetNamespace=\"capi-system\"\nInstalling Provider=\"bootstrap-kubeadm\" Version=\"v1.6.0\" TargetNamespace=\"capi-kubeadm-bootstrap-system\"\nInstalling Provider=\"control-plane-kubeadm\" Version=\"v1.6.0\" TargetNamespace=\"capi-kubeadm-control-plane-system\"\nInstalling Provider=\"infrastructure-azure\" Version=\"v1.12.1\" TargetNamespace=\"capz-system\"\nYour management cluster has been initialized successfully!\nYou can now create your first workload cluster by running the following:\n  clusterctl generate cluster [name] --kubernetes-version [version] | kubectl apply -f -\n```", "```\n# Specify the Virtual Machine sizes for the control plane and nodes.\nexport AZURE_CONTROL_PLANE_MACHINE_TYPE=\"Standard_D2s_v3\"\nexport AZURE_NODE_MACHINE_TYPE=\"Standard_D2s_v3\"\n# Define the Azure region for resource deployment. Modify to match your preferred region\nexport AZURE_LOCATION=\"centralus\"\n```", "```\nclusterctl generate cluster capi-quickstart \\\n    --kubernetes-version v1.29.0 \\\n    --control-plane-machine-count=1 \\\n    --worker-machine-count=3 \\\n    > capi-quickstart.yaml\n```", "```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: capi-capz-quickstart\nspec:\n  destination:\n    name: ''\n    namespace: capi-capz-quickstart\n    server: 'https://kubernetes.default.svc'\n  source:\n    path: >-\n      ./chapter-6-gitops-architectural-designs-and-operational-control/chapter-6-centralized-kubernetes-cluster-creation/\n    repoURL: git@github.com:PacktPublishing/Implementing-GitOps-with-Kubernetes.git\n    targetRevision: HEAD\n  sources: []\n  project: default\n  syncPolicy:\n    automated:\n      prune: false\n      selfHeal: true\n    syncOptions:\n      - CreateNamespace=true\n      - Validate=false\n```", "```\nkubectl get cluster\n#Output like:\nNAME              CLUSTERCLASS   PHASE          AGE   VERSION\ncapi-quickstart                  Provisioning   2m\n```", "```\nclusterctl describe cluster capi-quickstart\n#Output like:\nNAME                                                                READY\nCluster/capi-quickstart                                             True\n├─ClusterInfrastructure - AzureCluster/capi-quickstart               True\n├─ControlPlane - KubeadmControlPlane/capi-quickstart-control-plane  True\n│ └─Machine/capi-quickstart-control-plane-dct9z                     True\n└─Workers\n  └─MachineDeployment/capi-quickstart-md-0\n    └─3 Machines...\n```", "```\n    clusterctl get kubeconfig capi-quickstart > capi-quickstart.kubeconfig\n    ```", "```\n    helm repo add projectcalico https://docs.tigera.io/calico/charts --kubeconfig=./capi-quickstart.kubeconfig && \\\n    provisioned, and you gain access to the nodes:\n\n    ```", "```\n\n    ```"]
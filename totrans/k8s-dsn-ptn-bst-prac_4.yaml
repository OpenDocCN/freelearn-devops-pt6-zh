- en: Solutions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section contains the worked-out answers for the activities present in each
    lesson. Note that in case of descriptive questions, your answers might not match
    the ones provided in this section completely. As long as the essence of the answers
    remain the same, you can consider them correct.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 1: Kubernetes Design Patterns'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Following are the activity solutions for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity: Running a Web Server with Synchronization'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the `sidecar.yaml` file, pod definition with two containers, namely `server`
    and `sync`, is provided. In the server container, httpd serves the source volume
    on port 80\. In the sync container, git runs with every 30 seconds to synchronize
    the source volume. These two containers work independently; however, they are
    sharing the source volume to achieve file synchronization:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Follow these steps to get the solution:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the pod with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Check whether the pod is ready with the name sidecar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'When the pod is ready, check the logs of synchronization sidecar container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Forward the server port of the pod to localhost with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Open `localhost:8000` in the browser. It is expected to see a 2048 game.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Activity: Running a Web Server after Content Preparation'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the `init-container.yaml` file, pod definition with one initialization and
    one main container, namely `content` and `server`, is provided. In the content
    container, `"Welcome from Packt"` is written into the index file. In the server
    container, nginx serves the source volume on port 80\. These two containers work
    independently; however, they are sharing the `workdir` volume to achieve file
    preparation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Follow these steps to get the solution:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the pod with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Check the state of the initialization container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'When the pod is running, forward the server port of the pod to localhost with
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In another terminal, check the content of the server with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command for cleanup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Activity: Injecting Data into Applications'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the `inject.yaml` file, there is a pod definition with one container that
    logs its runtime information in every 10 seconds. Resource requests and limits
    are defined for memory and cpu for utilization and performance information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Environment variables are defined with `valueFrom` blocks which shows that
    values are filled during runtime:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to get the solution:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the pod with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Check whether the inject pod is ready:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'When the pod is ready, check the logs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Chapter 2: Kubernetes Client Libraries'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Following are the activity solutions for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity: Using the Kubernetes Go Client inside the Cluster'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a deployment with the Docker image of the example client from the previous
    exercise:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Wait until the pod is running by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Get the logs of the deployment pod with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE

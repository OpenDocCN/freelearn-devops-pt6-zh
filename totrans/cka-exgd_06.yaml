- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Securing Kubernetes
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护Kubernetes安全
- en: This chapter will cover how Kubernetes authentication and authorization patterns
    work and dive into Kubernetes **role-based access control** (**RBAC**). We’ll
    also learn about managing the security of applications deployed on Kubernetes.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍Kubernetes认证和授权模式的工作原理，并深入探讨Kubernetes的**基于角色的访问控制**（**RBAC**）。我们还将了解如何管理在Kubernetes上部署的应用的安全性。
- en: Since most of the Kubernetes security-related content released prior to November
    2020 has gradually moved to the **Certified Kubernetes Security Specialist** (**CKS**)
    exam instead, this chapter will just cover the essentials to help you to learn
    about Kubernetes security. We’ll specifically focus on Kubernetes RBAC since it
    is close to 5% of the CKA exam content.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在2020年11月之前发布的大多数Kubernetes安全相关内容已经逐渐转移到**认证Kubernetes安全专家**（**CKS**）考试中，本章将只介绍一些必要的内容，帮助你学习Kubernetes安全。我们将特别关注Kubernetes
    RBAC，因为它接近CKA考试内容的5%。
- en: Nonetheless, a good understanding of the Kubernetes security fundamentals will
    be a great help for the CKA exam and prepare you for further development in the
    Kubernetes space.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，深入理解Kubernetes安全基础知识将对CKA考试有很大帮助，并为你在Kubernetes领域的进一步发展做好准备。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要内容：
- en: Securing Kubernetes in layers
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分层保护Kubernetes
- en: Kubernetes authentication and authorization
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes认证和授权
- en: Kubernetes RBAC
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes RBAC
- en: Managing the security of Kubernetes applications
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理Kubernetes应用的安全
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To get started, you will need to make sure that your local machine meets the
    technical requirements described as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始，你需要确保你的本地机器满足以下技术要求：
- en: A compatible Linux host – we recommend a Debian-based Linux distribution such
    as Ubuntu 18.04 or later.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个兼容的Linux主机——我们推荐基于Debian的Linux发行版，如Ubuntu 18.04或更高版本。
- en: Make sure that your host machine has at least 2 GB of RAM, 2 CPU cores, and
    about 20 GB of free disk space.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保你的主机至少有2GB的内存、2个CPU核心和约20GB的空闲磁盘空间。
- en: Securing Kubernetes in layers
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分层保护Kubernetes
- en: 'Kubernetes security is a broad topic due to the sophistication of the platform.
    It includes secure Kubernetes nodes, networks, and Kubernetes objects such as
    Pods. The **Cloud Native Computing Foundation** (**CNCF**) defines Kubernetes
    security in layers, which they call the *four Cs* of cloud-native security, taking
    the topic of security beyond Kubernetes and its ecosystem. The four Cs stand for
    **Cloud**, **Cluster**, **Container**, and **Code**, as shown in the following
    diagram:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 由于平台的复杂性，Kubernetes安全是一个广泛的话题。它包括安全的Kubernetes节点、网络以及Kubernetes对象，如Pods。**云原生计算基金会**（**CNCF**）将Kubernetes安全定义为分层的，他们称之为*云原生安全的四个C*，将安全话题扩展到Kubernetes及其生态系统之外。这四个C分别代表**云**、**集群**、**容器**和**代码**，如以下图所示：
- en: '![Figure 6.1 – The different layers in Kubernetes ](img/Figure_6.1_B18201.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![图6.1 – Kubernetes中的不同层](img/Figure_6.1_B18201.jpg)'
- en: Figure 6.1 – The different layers in Kubernetes
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1 – Kubernetes中的不同层
- en: 'From the preceding diagram, we can see the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的图示中，我们可以看到以下内容：
- en: The **Cloud** layer is based on the underlying infrastructure where the Kubernetes
    cluster is deployed – it is managed by the cloud provider when it is in the cloud
    or by the organization when it comes to a private data center.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**云**层基于Kubernetes集群部署的底层基础设施——当它在云中时由云服务提供商管理，或者在私有数据中心时由组织管理。'
- en: The **Cluster** layer is more about securing the Kubernetes cluster components,
    ensuring each component is secured and conjured correctly. Looking back at [*Chapter
    1*](B18201_01.xhtml#_idTextAnchor015), *Kubernetes Overview*, will help you understand
    how those components work together.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集群**层更多地关注如何保护Kubernetes集群组件，确保每个组件都安全且正确地构建。回顾[*第一章*](B18201_01.xhtml#_idTextAnchor015)，*Kubernetes概述*，有助于你理解这些组件是如何协同工作的。'
- en: The **Container** layer includes container vulnerability scanning, hosted OS
    scaling, and container privileged users.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器**层包括容器漏洞扫描、托管操作系统扩展和容器特权用户。'
- en: The **Code** layer is focused on the application code. Different from traditional
    application security approaches, it now works with DevSecOps and vulnerability
    assessment tools. This layer is relevant but outside of the scope of Kubernetes
    security.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码**层关注的是应用代码。与传统的应用安全方法不同，它现在与DevSecOps和漏洞评估工具配合使用。这个层次虽然相关，但不在Kubernetes安全的范围之内。'
- en: 'Cloud-native security or, more specifically, Kubernetes security requires organizations
    to address each layer. In this chapter, we’ll focus on the following topics:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 云原生安全，或者更具体地说，Kubernetes 安全，要求组织在每一层次上解决相关问题。在本章中，我们将重点讨论以下话题：
- en: Kubernetes API security with an admission controller
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes API 安全性与准入控制器
- en: Kubernetes authentication and authorization with RBAC, **Attribute-Based Access
    Control** (**ABAC**), and node authorization
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 的认证与授权，包括 RBAC、**基于属性的访问控制**（**ABAC**）以及节点授权
- en: Managing the security of Kubernetes applications with security contexts
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用安全上下文管理 Kubernetes 应用的安全性
- en: The preceding topics are either part of cluster-layer or container-layer security,
    and they help us run our Kubernetes application securely. We’ll cover Kubernetes
    network security and dive deeper into network policies in [*Chapter 7*](B18201_07.xhtml#_idTextAnchor235),
    *Demystifying Kubernetes Networking*.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 上述话题属于集群层或容器层的安全，它们帮助我们安全地运行 Kubernetes 应用。我们将在 [*第7章*](B18201_07.xhtml#_idTextAnchor235)《解密
    Kubernetes 网络》部分，深入讨论 Kubernetes 网络安全和网络策略。
- en: Kubernetes authentication and authorization
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes 的认证与授权
- en: 'In [*Chapter 1*](B18201_01.xhtml#_idTextAnchor015), *Kubernetes Overview*,
    we talked about a typical workflow of Kubernetes components collaborating with
    each other. In this workflow, when a request comes through the Kubernetes API
    server, it invokes an API call. This API request now needs to be authenticated
    and authorized by the API server before a request is made to a Kubernetes API
    resource. As a result, the request can either be *allowed* or *denied*. The authentication
    process can be depicted as in *Figure 6.2*:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第1章*](B18201_01.xhtml#_idTextAnchor015)《Kubernetes 概览》中，我们讨论了 Kubernetes
    组件之间协同工作的典型工作流程。在这个流程中，当请求通过 Kubernetes API 服务器时，它会触发一个 API 调用。此时，API 请求需要通过 API
    服务器进行认证和授权，才会发起对 Kubernetes API 资源的请求。因此，该请求要么被*允许*，要么被*拒绝*。认证过程可以如 *图 6.2* 所示：
- en: '![Figure 6.2 – API Kubernetes authentication  ](img/Figure_6.2_B18201.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.2 – API Kubernetes 认证](img/Figure_6.2_B18201.jpg)'
- en: Figure 6.2 – API Kubernetes authentication
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.2 – API Kubernetes 认证
- en: 'You can refer to the following article to get an overview of how the Kubernetes
    authentication process works: [https://kubernetes.io/docs/reference/access-authn-authz/authentication/](https://kubernetes.io/docs/reference/access-authn-authz/authentication/).'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以参考以下文章，概览 Kubernetes 认证过程是如何工作的：[https://kubernetes.io/docs/reference/access-authn-authz/authentication/](https://kubernetes.io/docs/reference/access-authn-authz/authentication/)。
- en: Before getting into authentication and authorization, let’s take a look at the
    user accounts and service accounts in Kubernetes.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论认证和授权之前，首先让我们了解一下 Kubernetes 中的用户账户和服务账户。
- en: Service accounts versus user accounts
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务账户与用户账户的区别
- en: 'In Kubernetes, we have a distinction between normal user accounts and service
    accounts managed by Kubernetes. An account represents an identity for a user or
    a service process. The main difference between a user account and a service account
    is as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 中，我们区分正常用户账户和由 Kubernetes 管理的服务账户。账户代表用户或服务进程的身份。用户账户和服务账户之间的主要区别如下：
- en: '**User accounts** are for normal human users. In Kubernetes, the RBAC subsystem
    is used to determine whether the user is authorized to perform a specific operation
    on a specific scope. We’ll look into this further in the *Kubernetes RBAC* section
    later in this chapter.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户账户**是针对普通人类用户的。在 Kubernetes 中，RBAC 子系统用于判断用户是否有权在特定范围内执行特定操作。我们将在本章稍后的*Kubernetes
    RBAC*部分进一步探讨这一点。'
- en: '**Service accounts** are for services or processes running in a Pod in the
    Kubernetes cluster. The service accounts are users managed by the Kubernetes API.
    In Kubernetes, it is possible to use client certificates, bearer tokens, or even
    an authenticating proxy to authenticate API requests through an API server.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务账户**是为在 Kubernetes 集群中运行的 Pod 内的服务或进程提供的。服务账户是由 Kubernetes API 管理的用户。在
    Kubernetes 中，可以使用客户端证书、承载令牌，甚至认证代理来通过 API 服务器进行 API 请求的认证。'
- en: 'We’ll take a closer look at the following things from hereon:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们将重点讲解以下内容：
- en: Kubernetes service accounts and how to work with them
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 服务账户及其使用方式
- en: How to organize cluster access using `kubeconfig` as a Kubernetes user
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 `kubeconfig` 作为 Kubernetes 用户组织集群访问
- en: How to configure access to multiple clusters as a Kubernetes user
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何配置 Kubernetes 用户访问多个集群
- en: Let’s take a look at the Kubernetes service account first.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先来看看 Kubernetes 服务账户。
- en: Kubernetes service accounts
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubernetes服务账户
- en: Back in the previous chapter, we created a new Pod with `kubectl`, although
    there is a default service account in the `default` namespace, which the Pod was
    actually automatically assigned to. Now, let’s have a look at how to work with
    a service account in Kubernetes.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中，我们使用`kubectl`创建了一个新的Pod，虽然`default`命名空间中有一个默认的服务账户，Pod实际上是自动分配给这个账户的。现在，让我们来看一下如何在Kubernetes中使用服务账户。
- en: Managing service accounts
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 管理服务账户
- en: 'You can use the following command to get the current service account in the
    `default` namespace:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下命令来获取`default`命名空间中的当前服务账户：
- en: '[PRE0]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Alternatively, you can simply use the shortcut command as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以简单地使用以下快捷命令：
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output will return the default service account in the `default` namespace:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将返回`default`命名空间中的默认服务账户：
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The service account is a namespaced resource – you can use the following command
    to check out all the service accounts in the current cluster:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 服务账户是一个命名空间资源——你可以使用以下命令查看当前集群中所有的服务账户：
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Alternatively, you can use the complete command as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以使用完整的命令，如下所示：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The output of the preceding commands will list the service account information
    by namespace, similar to the following in *Figure 6.3*:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 前面命令的输出将按命名空间列出服务账户信息，类似于*图 6.3*所示：
- en: '![Figure 6.3 – The service account information by namespace ](img/Figure_6.3_B18201.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.3 – 按命名空间显示的服务账户信息](img/Figure_6.3_B18201.jpg)'
- en: Figure 6.3 – The service account information by namespace
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.3 – 按命名空间显示的服务账户信息
- en: This also means we can get the service account information by namespace using
    the `kubectl get sa` command and then by specifying the `-n` flag with `namespace
    name` to get the service account with that particular namespace. For example,
    using `kubectl get sa -n` with `kube-system` will only return the service account
    in the `kube-system` namespace.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这也意味着我们可以使用`kubectl get sa`命令按命名空间获取服务账户信息，然后通过指定`-n`标志和`namespace name`来获取特定命名空间的服务账户。例如，使用`kubectl
    get sa -n`和`kube-system`将只返回`kube-system`命名空间中的服务账户。
- en: The kubectl create sa command
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: kubectl create sa命令
- en: 'You can use the `kubectl create` command to create a new service account, the
    following being an example:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`kubectl create`命令来创建一个新的服务账户，以下是一个示例：
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following output will show that the service account is created successfully:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 以下输出将显示服务账户已成功创建：
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We can also create the service account in a different namespace using the `kubectl
    create` command by specifying the `-n` flag. Additionally, we also need to make
    sure that the namespace exists prior to creating a service account in that namespace.
    The following is an example of using a `kubectl create` command to create a service
    account named `melonsa` in a namespace called `melon-ns`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`kubectl create`命令在不同的命名空间中创建服务账户，方法是指定`-n`标志。此外，我们还需要确保命名空间在创建服务账户之前已经存在。以下是使用`kubectl
    create`命令在名为`melon-ns`的命名空间中创建一个名为`melonsa`的服务账户的示例：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The preceding output displays that you have created the service account successfully.
    You can also use the following command to check that the service account has just
    been created:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的输出显示你已经成功创建了服务账户。你也可以使用以下命令来检查服务账户是否刚刚创建：
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following output lists the service account and how long it’s been created:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 以下输出列出了服务账户以及它的创建时间：
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Similarly, if you want to check out the service account in another namespace,
    you can use the `kubectl get sa <service account name>` command and then add the
    `-n` flag, for example, `k get sa melonsa -n melon-ns`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，如果你想查看另一个命名空间中的服务账户，可以使用`kubectl get sa <service account name>`命令，然后添加`-n`标志，例如，`k
    get sa melonsa -n melon-ns`。
- en: Assigning a service account to a Pod
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将服务账户分配给Pod
- en: 'The purpose of having a service account is to provide an identity to serve
    the process running in the Pod. To determine the service account that a Pod will
    use, you can specify a `serviceAccountName` field in the Pod YAML specification
    called `sa-pod.yaml`, as shown here:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 创建服务账户的目的是为Pod中运行的进程提供身份验证。要确定Pod将使用哪个服务账户，可以在Pod YAML规格文件`sa-pod.yaml`中指定`serviceAccountName`字段，如下所示：
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Then, when we use the `kubectl apply -f sa-pod.yaml` command to deploy this
    YAML file, we’ll be able to see a Pod spinning up.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，当我们使用`kubectl apply -f sa-pod.yaml`命令来部署这个YAML文件时，我们将能看到一个Pod启动。
- en: The kubectl delete sa command
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: kubectl delete sa命令
- en: 'You can delete a service account using the `kubectl delete sa <account name
    >` command:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `kubectl delete sa <account name>` 命令删除服务账户：
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The output comes back showing that the service account was deleted:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的输出显示该服务账户已被删除：
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Hopefully, you now have a better idea of how to work with a Kubernetes service
    account using what you learned in this section. Now, let’s take a look at how
    to organize the cluster access using `kubeconfig`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你现在对如何使用本节内容操作 Kubernetes 服务账户有了更好的了解。接下来，让我们看看如何使用 `kubeconfig` 来组织集群访问。
- en: Organizing the cluster access using kubeconfig
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 kubeconfig 组织集群访问
- en: 'As a Kubernetes user, when you deploy the Kubernetes cluster with `kubeadm`,
    you will find a file called `config` in the `$HOME/.kube` directory:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 Kubernetes 用户，当你使用 `kubeadm` 部署 Kubernetes 集群时，你会在 `$HOME/.kube` 目录中找到一个名为
    `config` 的文件：
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In other cases, this `kubeconfig` file can be set up as a KUBECONFIG environment
    variable or a `--kubeconfig` flag. You can find detailed instructions in the official
    documentation: [https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/](https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/).'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他情况下，`kubeconfig` 文件可以作为 KUBECONFIG 环境变量或 `--kubeconfig` 标志来设置。你可以在官方文档中找到详细的说明：[https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/](https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/)。
- en: The `kubeconfig` files help organize information clusters, users, and namespaces.
    From the `kubectl` utility point of view, it reads `kubeconfig` files to locate
    the information of the cluster and communicate with the API server of that Kubernetes
    cluster.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`kubeconfig` 文件帮助组织集群、用户和命名空间信息。从 `kubectl` 工具的角度来看，它读取 `kubeconfig` 文件来定位集群信息，并与该
    Kubernetes 集群的 API 服务器进行通信。'
- en: 'The following is an example of a `kubeconfig` file:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个 `kubeconfig` 文件的示例：
- en: '[PRE14]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You can see `config` by using the following command:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下命令查看 `config`：
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The output should look as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该如下所示：
- en: '![Figure 6.4 – The kubectl config view output ](img/Figure_6.4_B18201.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.4 – kubectl config view 输出](img/Figure_6.4_B18201.jpg)'
- en: Figure 6.4 – The kubectl config view output
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.4 – kubectl config view 输出
- en: 'You can use the `kubectl config` command to display `current-context`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `kubectl config` 命令来显示 `current-context`：
- en: '[PRE16]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The returned output will be the current context – in my case, it is `minikube`.
    You may notice that it is the same as `current-context` shown in the aforementioned
    `config` file:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的输出将是当前上下文——在我的例子中是 `minikube`。你可能会注意到它与前面提到的 `config` 文件中的 `current-context`
    相同：
- en: '[PRE17]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'To know more about how to organize the cluster access using `kubeconfig`, refer
    to the official article to learn more:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于如何使用 `kubeconfig` 组织集群访问的内容，请参考官方文章了解更多信息：
- en: '[https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/)'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/)'
- en: Configuring access to multiple clusters
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置访问多个集群
- en: 'As a Kubernetes user, when it comes to multiple clusters, we can also use the
    `kubectl config` command to configure the current context to switch between different
    Kubernetes clusters. To find all the commands provided by `kubectl config`, use
    this command:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 Kubernetes 用户，当涉及到多个集群时，我们还可以使用 `kubectl config` 命令来配置当前上下文，以便在不同的 Kubernetes
    集群之间切换。要查看 `kubectl config` 提供的所有命令，可以使用以下命令：
- en: '[PRE18]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The following is an example of how `kubeconfig` contains the access information
    of two different Kubernetes clusters:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个 `kubeconfig` 文件的示例，它包含了两个不同 Kubernetes 集群的访问信息：
- en: '[PRE19]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We could use the `kubectl config current-context` command to see the cluster
    that I am working on and it would be displayed as the following:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `kubectl config current-context` 命令来查看当前正在使用的集群，输出将如下所示：
- en: '[PRE20]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The preceding output indicates that I am on a Kubernetes cluster called `gke-cluster`
    and that I am using the following command to switch my default context to another
    Kubernetes cluster called `akscluster`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 上述输出表明我所在的 Kubernetes 集群是 `gke-cluster`，并且我正在使用以下命令将我的默认上下文切换到另一个 Kubernetes
    集群 `akscluster`：
- en: '[PRE21]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We could use the `kubectl config current-context` command to check my current
    working Kubernetes cluster and it would be displayed as the following:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `kubectl config current-context` 命令来检查我当前工作的 Kubernetes 集群，输出将如下所示：
- en: '[PRE22]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Switching context is an important technique that you can apply during your actual
    CKA exam and it’s important to perform tasks in the targeting Kubernetes cluster
    so that you’ll be scored accurately. It also comes in handy in your real life
    working as a Kubernetes administrator, as often, you’ll be working on multiple
    Kubernetes clusters.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 切换上下文是你在实际CKA考试中可以应用的一项重要技巧，执行任务时务必在目标Kubernetes集群中进行，这样你的得分才会准确。这项技能在你作为Kubernetes管理员工作时也非常有用，因为你通常需要在多个Kubernetes集群上进行工作。
- en: 'To know more about how to configure access to multiple clusters, check the
    official article: [https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/](https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/)'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何配置对多个集群的访问，可以查看官方文章：[https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/](https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/)
- en: Kubernetes authorization
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubernetes授权
- en: In Kubernetes, a request must be authenticated before it can be authorized with
    permissions granted to access the Kubernetes cluster resources.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kubernetes中，必须先对请求进行身份验证，才能授权并授予访问Kubernetes集群资源的权限。
- en: 'There are four authorization modes in Kubernetes:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes中有四种授权模式：
- en: '**RBAC authorization**: Kubernetes RBAC is more about regulating access to
    Kubernetes resources according to the roles with specific permissions to perform
    a specific task, such as reading, creating, or modifying through an API request.
    We’ll focus on Kubernetes RBAC in this section.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RBAC授权**：Kubernetes的RBAC更多的是根据具有特定权限的角色来规范对Kubernetes资源的访问，以执行特定任务，例如通过API请求读取、创建或修改。我们将在本节中重点介绍Kubernetes
    RBAC。'
- en: '`kubelets agent`. This is a special - purpose authorization mode not covered
    in the CKA exam. You can check out the official documentation about node authorization
    to find out more: [https://kubernetes.io/docs/reference/access-authn-authz/node/](https://kubernetes.io/docs/reference/access-authn-authz/node/).'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubelets agent`。这是一种特殊的授权模式，CKA考试中未涉及。你可以查看关于节点授权的官方文档，了解更多信息：[https://kubernetes.io/docs/reference/access-authn-authz/node/](https://kubernetes.io/docs/reference/access-authn-authz/node/)。'
- en: '**ABAC authorization**: ABAC is an access control granted to users by policies
    and attributes such as user attributes, resource attributes, and objects. This
    topic is not covered in the current CKA exam. If you want to learn more about
    using the ABAC mode, you can refer to the official article: [https://kubernetes.io/docs/reference/access-authn-authz/abac/](https://kubernetes.io/docs/reference/access-authn-authz/abac/).'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ABAC授权**：ABAC是一种通过策略和属性（如用户属性、资源属性和对象）授予用户的访问控制。这一主题未在当前的CKA考试中涉及。如果你想了解更多关于使用ABAC模式的信息，可以参考官方文章：[https://kubernetes.io/docs/reference/access-authn-authz/abac/](https://kubernetes.io/docs/reference/access-authn-authz/abac/)。'
- en: '**Webhook authorization**: Webhook authorization through WebHooks is an HTTP
    POST triggered by an event. An example of this is that the Webhook will react
    to a URL when triggered by certain actions. This topic is not covered in the current
    CKA exam. You can explore the following article if you want to know more about
    it: [https://kubernetes.io/docs/reference/access-authn-authz/webhook/](https://kubernetes.io/docs/reference/access-authn-authz/webhook/).'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Webhook授权**：通过WebHooks的Webhook授权是一种由事件触发的HTTP POST请求。例如，Webhook将在某些操作触发时对URL作出反应。本主题未在当前的CKA考试中涉及。如果你想了解更多关于它的内容，可以参考以下文章：[https://kubernetes.io/docs/reference/access-authn-authz/webhook/](https://kubernetes.io/docs/reference/access-authn-authz/webhook/)。'
- en: Let’s take a look at what the key areas covered in the CKA exam are, starting
    with Kubernetes RBAC.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看CKA考试中涵盖的关键领域，从Kubernetes RBAC开始。
- en: Kubernetes RBAC
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes RBAC
- en: Kubernetes RBAC aims to regulate access to Kubernetes resources according to
    the roles with specific permissions to perform a specific task.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes RBAC旨在根据具有特定权限的角色来规范对Kubernetes资源的访问，以执行特定任务。
- en: Once specified, RBAC checks the `rbac.authorization.k8s.io` API group membership
    to see whether it is allowed through the Kubernetes API.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦指定，RBAC将检查`rbac.authorization.k8s.io` API组成员资格，以查看是否允许通过Kubernetes API。
- en: Let’s take a look at the different Roles and RoleBindings in Kubernetes.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下Kubernetes中的不同角色和角色绑定。
- en: Roles versus ClusterRoles and their RoleBindings
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 角色与集群角色及其角色绑定
- en: 'In Kubernetes, we have Roles and ClusterRoles. A Kubernetes RBAC Role or ClusterRole
    represents a role with a set of permissions. In a nutshell, they differ by the
    scope of these permissions:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kubernetes中，我们有Roles和ClusterRoles。Kubernetes RBAC中的Role或ClusterRole表示具有一组权限的角色。简而言之，它们通过这些权限的范围有所不同：
- en: A **Role** represents permissions within a particular namespace
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Role**表示在特定命名空间中的权限'
- en: A **ClusterRole** represents permissions within the cluster – it could be cluster-wide,
    across multiple namespaces, or individual namespaces
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ClusterRole**表示集群中的权限——它可以是全局的、跨多个命名空间的，也可以是单个命名空间的'
- en: 'With Roles and ClusterRoles, we have the concept of **RoleBinding** and **ClusterRoleBinding**.
    The bindings bind the role to a list of subjects such as users, groups, or service
    accounts, as can be seen in the following figure:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Roles和ClusterRoles时，我们有**RoleBinding**和**ClusterRoleBinding**的概念。绑定将角色与用户、组或服务账户等一组主体关联，正如以下图所示：
- en: '![Figure 6.5 – Kubernetes RBAC  ](img/Figure_6.5_B18201.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图6.5 – Kubernetes RBAC](img/Figure_6.5_B18201.jpg)'
- en: Figure 6.5 – Kubernetes RBAC
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.5 – Kubernetes RBAC
- en: 'Let’s define a new role called `dev-user` in a namespace called `dev`. We can
    use the following command to do this:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在名为`dev`的命名空间中定义一个新的角色，名为`dev-user`。我们可以使用以下命令来做到这一点：
- en: '[PRE23]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The preceding command is the same as the following YAML definition:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令与以下YAML定义相同：
- en: '[PRE24]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The output of the preceding command is the following:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出如下：
- en: '[PRE25]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Then, we can use the `kubectl get role` command to check the role that we have
    just created:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用`kubectl get role`命令检查我们刚刚创建的角色：
- en: '[PRE26]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We then need to create the RoleBinding to bind this role to the subjects as
    follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要创建RoleBinding，将此角色绑定到主体，如下所示：
- en: '[PRE27]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Alternatively, we could also use the following YAML file:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，我们还可以使用以下YAML文件：
- en: '[PRE28]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Let’s define a new ClusterRole called `secret-reader` – note that the ClusterRole
    is not namespaced. We could use the following YAML definition:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义一个新的ClusterRole，名为`secret-reader`——请注意，ClusterRole不是基于命名空间的。我们可以使用以下YAML定义：
- en: '[PRE29]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Then, we need to create the RoleBinding to bind this role to the subjects,
    as shown in the following YAML definition:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要创建RoleBinding，将此角色绑定到主体，如以下YAML定义所示：
- en: '[PRE30]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We can use the following command to get all the roles across all the namespaces:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令获取所有命名空间中的所有角色：
- en: '[PRE31]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We can use the following command to get all the RoleBindings across all the
    namespaces:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令获取所有命名空间中的所有RoleBindings：
- en: '[PRE32]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Knowing the ways that Roles and RoleBindings work in Kubernetes, let’s now take
    a look at how to implement your own Kubernetes RBAC Roles and RoleBindings.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 了解Roles和RoleBindings在Kubernetes中的工作方式后，让我们看看如何实现您自己的Kubernetes RBAC角色和RoleBindings。
- en: Implementing Kubernetes RBAC
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实现Kubernetes RBAC
- en: 'To enable RBAC, set `apiserver –authorization-mode` to RBAC, which defaults
    to `AlwaysAllow`. The other possible values include `node`, `ABAC`, `Always deny,`
    and `webhook`. In the following command, we’re showing an example of setting it
    to use Kubernetes RBAC:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用RBAC，请将`apiserver --authorization-mode`设置为RBAC，默认值为`AlwaysAllow`。其他可能的值包括`node`、`ABAC`、`Always
    deny`和`webhook`。在以下命令中，我们展示了将其设置为使用Kubernetes RBAC的示例：
- en: '[PRE33]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'To know more about how to set up authorization mode, visit the following link:
    [https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/](https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/)'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于如何设置授权模式的信息，请访问以下链接：[https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/](https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/)
- en: 'Let’s start by creating a new deployment using our current context, which is
    `minikube`:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建一个新的部署，使用当前上下文`minikube`：
- en: '[PRE34]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Then, switch to the context for `dev-user`:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，切换到`dev-user`的上下文：
- en: '[PRE35]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'As our `dev-user` only has `list` and `get` permissions, let’s try to use this
    profile to delete the deployment:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的`dev-user`仅具有`list`和`get`权限，让我们尝试使用此配置文件删除部署：
- en: '[PRE36]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Now that we have learned how to manage our own Kubernetes RBAC roles, let’s
    take a look at how to manage the security of Kubernetes applications.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学会了如何管理自己的Kubernetes RBAC角色，让我们看看如何管理Kubernetes应用程序的安全性。
- en: Managing the security of Kubernetes applications
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理Kubernetes应用程序的安全性
- en: A `securityContext` field defines the privilege and access control settings
    for a Pod in the Pod YAML specification. We need to configure the security context
    in case a Pod or container needs to interact with the security mechanisms of the
    underlying operating system unconventionally, and in this section, we’ll introduce
    how to configure a security context for a Pod or container.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`securityContext` 字段定义了在 Pod YAML 规范中 Pod 的特权和访问控制设置。如果 Pod 或容器需要以非常规方式与底层操作系统的安全机制交互，我们需要配置安全上下文。在这一节中，我们将介绍如何为
    Pod 或容器配置安全上下文。'
- en: 'As a part of your prep work, you can create a new user and a new group as shown
    in the following:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 作为准备工作的一部分，你可以创建一个新用户和一个新组，如下所示：
- en: '[PRE37]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'We will now log in to the worker node and create a new `.txt` file called `message.txt`:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将登录到工作节点并创建一个名为 `message.txt` 的新 `.txt` 文件：
- en: '[PRE38]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'From here, you’ll see the message that we input from the terminal:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，你将看到我们从终端输入的消息：
- en: '[PRE39]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Now, we need to adjust the permission to limit the permission for testing purposes,
    which is shown as the following:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要调整权限以限制测试目的的权限，具体如下所示：
- en: '[PRE40]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Finally, we could deploy a new Pod in our current Kubernetes cluster to test
    it out. The `securityContext` field is defined as part of a Pod’s YAML spec called
    `pod-permission.yaml`. With a section called `securityContext`, we can specify
    the security permissions information, as in the following YAML file:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以在当前的 Kubernetes 集群中部署一个新 Pod 来进行测试。`securityContext` 字段作为 Pod YAML 规范的一部分，定义在
    `pod-permission.yaml` 中。通过名为 `securityContext` 的部分，我们可以指定安全权限信息，如以下 YAML 文件所示：
- en: '[PRE41]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: In the preceding YAML definition file, the `runAsUser` field means that for
    any container in this Pod, all processes run with a user ID of `2000`. The `fsGroup`
    field is `2000`, which means that all the processes of the container are also
    part of the supplementary group, `ID 2000`. The owner for volume/message and any
    files created in that volume will be the `ID 2000` group.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的 YAML 定义文件中，`runAsUser` 字段表示对于该 Pod 中的任何容器，所有进程都将以 `2000` 的用户 ID 运行。`fsGroup`
    字段为 `2000`，这意味着容器的所有进程也是 `ID 2000` 补充组的一部分。在该卷中创建的所有文件以及卷/消息的所有者将是 `ID 2000` 组。
- en: 'Let’s go ahead and deploy this YAML file as follows:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续按照以下步骤部署这个 YAML 文件：
- en: '[PRE42]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Then, we’ll see the Pod is spinning up but will quickly encounter the following
    error:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将看到 Pod 正在启动，但会很快遇到以下错误：
- en: '[PRE43]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'From the preceding example, we can see the Pod is `BackOff` due to the lack
    of permission. Now, let’s pull a similar example to see whether we can fix this.
    Let’s configure a YAML file with a similar configuration to the following:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的示例中，我们可以看到 Pod 因缺少权限而处于 `BackOff` 状态。现在，让我们拉取一个类似的示例，看看我们能否解决这个问题。让我们配置一个与以下类似的
    YAML 文件：
- en: '[PRE44]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Let’s deploy this using the following YAML example:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用以下 YAML 示例来部署它：
- en: '[PRE45]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'We can see this example is now up and running in my local Kubernetes cluster:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到这个示例现在已经在我的本地 Kubernetes 集群中运行：
- en: '[PRE46]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Let’s get inside this running pod:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进入这个正在运行的 Pod：
- en: '[PRE47]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Then, we’ll get into the interactive shell, input `id`, and we’ll get the following
    output:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将进入交互式 shell，输入 `id`，并得到以下输出：
- en: '[PRE48]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: From the output, we can see that `uid` is `1000`, the same as the `runAsUser`
    field; the `gid` is `3000`, the same as the `runAsGroup` field; and the `fsGroup`
    is `2000`.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 从输出中，我们可以看到 `uid` 为 `1000`，与 `runAsUser` 字段相同；`gid` 为 `3000`，与 `runAsGroup`
    字段相同；`fsGroup` 为 `2000`。
- en: 'To learn more about the security context, check out the official documentation
    here: [https://kubernetes.io/docs/tasks/configure-pod-container/security-context/](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于安全上下文的信息，请查阅官方文档：[https://kubernetes.io/docs/tasks/configure-pod-container/security-context/](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)
- en: Summary
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter gave an overview of Kubernetes security with a focus on three key
    topics about container security, RBAC, and the security context. You can use this
    chapter to assist you with laying the foundations for your CKS exam. With the
    addition of the next chapter, *Demystifying Kubernetes Networking*, you will get
    a complete view of working with Kubernetes networking security-related concepts
    and practice examples to help in your daily work as a Kubernetes administrator,
    and this will all cover 20% of the CKA exam content. Let’s stay tuned!
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 本章概述了Kubernetes安全性，重点讨论了容器安全、RBAC和安全上下文三个关键主题。你可以利用本章内容为你的CKS考试打下基础。接下来的章节《揭开Kubernetes网络的神秘面纱》，将帮助你全面了解与Kubernetes网络安全相关的概念和实践示例，帮助你作为Kubernetes管理员在日常工作中应用这些知识，并且这将覆盖CKA考试内容的20%。让我们拭目以待！
- en: Mock CKA scenario-based practice test
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模拟CKA场景练习测试
- en: You have two virtual machines, `master-0` and `worker-0` – please complete the
    following mock scenarios.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 你有两台虚拟机，`master-0`和`worker-0`—请完成以下模拟场景。
- en: Scenario 1
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 场景1
- en: Create a new service account named `packt-sa` in a new namespace called `packt-ns`.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在名为`packt-ns`的新命名空间中创建一个名为`packt-sa`的新服务账户。
- en: Scenario 2
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 场景2
- en: Create a Role named `packtrole` and bind it with the RoleBinding `packt-clusterbinding`.
    Map the `packt-sa` service account with `list` and `get` permissions.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`packtrole`的Role，并将其与RoleBinding `packt-clusterbinding`绑定。将`packt-sa`服务账户映射为`list`和`get`权限。
- en: Scenario 3
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 场景3
- en: Create a new pod named `packt-pod` with the `busybox:1.28` image in the `packt-ns`
    namespace. Expose port `80`. Then, assign the `packt-sa` service account to the
    Pod.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在`packt-ns`命名空间中，创建一个名为`packt-pod`的Pod，使用`busybox:1.28`镜像，并暴露端口`80`。然后，将`packt-sa`服务账户分配给该Pod。
- en: You can find all the scenario resolutions in [*Appendix*](B18201_Appendix_A.xhtml#_idTextAnchor386)
    *- Mock CKA scenario-based practice test resolutions* of this book.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在本书的[*附录*](B18201_Appendix_A.xhtml#_idTextAnchor386) *- 模拟CKA场景练习题解答*中找到所有场景的解决方案。
- en: FAQs
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见问题解答
- en: '*Where can I find the latest updates about Kubernetes security while working
    with Kubernetes?*'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在使用Kubernetes时，我可以在哪里找到关于Kubernetes安全性的最新更新？*'
- en: 'The Kubernetes Security **Special Interest Group** (**SIG**) has a GitHub repository,
    which you can find here: [https://github.com/kubernetes/community/tree/master/sig-security](https://github.com/kubernetes/community/tree/master/sig-security).'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes安全**特别兴趣小组**（**SIG**）有一个GitHub仓库，你可以在这里找到：[https://github.com/kubernetes/community/tree/master/sig-security](https://github.com/kubernetes/community/tree/master/sig-security)。
- en: '*What is the recommended Kubernetes official article for configuring the ephemeral
    storage?*'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*推荐的Kubernetes官方文章在哪里可以找到，用于配置临时存储？*'
- en: 'I recommend bookmarking the official documentation about Kubernetes RBAC, which
    you can find here: [https://kubernetes.io/docs/reference/access-authn-authz/rbac/](https://kubernetes.io/docs/reference/access-authn-authz/rbac/).'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 我推荐将有关Kubernetes RBAC的官方文档添加书签，你可以在这里找到：[https://kubernetes.io/docs/reference/access-authn-authz/rbac/](https://kubernetes.io/docs/reference/access-authn-authz/rbac/)。

["```\n    terraform {\n      required_version = \"~> 0.14.5\"\n    }\n    ```", "```\n    provider \"aws\" {\n      region = var.aws_region\n      version = \"~> 3.27.0\"\n    }\n    ```", "```\n    aws_region            = \"us-east-1\"\n    clusters_name_prefix = \"packtclusters\"\n    ```", "```\n    variable \"aws_region\" {\n      type = string\n    }\n    variable \"clusters_name_prefix\" {\n      type = string\n    }\n    ```", "```\n    resource \"aws_s3_bucket\" \"clusters_tf_state_s3_bucket\" {\n      bucket = \"${var.clusters_name_prefix}-terraform-state\"\n      acl    = \"private\"\n      versioning {\n        enabled = true\n      }\n      lifecycle {\n        prevent_destroy = true\n      }\n      tags = {\n        Name      = \"${var.clusters_name_prefix} S3 Remote Terraform State Store\"\n        ManagedBy = \"terraform\"\n      }\n    }\n    ```", "```\n    resource \"aws_s3_bucket\" \"clusters_vpc_tf_state_s3_bucket\" {\n      bucket = \"${var.clusters_name_prefix}-vpc-terraform-state\"\n      acl    = \"private\"\n      versioning {\n        enabled = true\n      }\n      lifecycle {\n        prevent_destroy = true\n      }\n      tags = {\n        Name      = \"${var.clusters_name_prefix} VPC S3 Remote Terraform State Store\"\n        ManagedBy = \"terraform\"\n      }\n    }\n    ```", "```\n    resource \"aws_dynamodb_table\" \"clusters_dynamodb_tf_state_lock\" {\n      name           = \"${var.clusters_name_prefix}-terraform-state-lock-dynamodb\"\n      hash_key       = \"LockID\"\n      read_capacity  = 20\n      write_capacity = 20\n      attribute {\n        name = \"LockID\"\n        type = \"S\"\n      }\n    }\n    ```", "```\n    resource \"aws_dynamodb_table\" \"clusters_vpc_dynamodb_tf_state_lock\" {\n      name           = \"${var.clusters_name_prefix}-vpc-terraform-state-lock-dynamodb\"\n      hash_key       = \"LockID\"\n      read_capacity = 20\n      write_capacity = 20\n      attribute {\n        name = \"LockID\"\n        type = \"S\"\n      }\n    }\n    ```", "```\n    $ cd Chapter03/terraform/shared-state\n    $ terraform init\n    Initializing modules...\n    Initializing the backend...\n    Initializing provider plugins...\n    - Checking for available provider plugins...\n    - Downloading plugin for provider \"aws\" (hashicorp/aws) 3.27.0...\n    Terraform has been successfully initialized!\n    You may now begin working with Terraform. Try running \"terraform plan\" to see\n    any changes that are required for your infrastructure. All Terraform commands\n    should now work.\n    If you ever set or change modules or backend configuration for Terraform,\n    rerun this command to reinitialize your working directory. If you forget, other\n    commands will detect it and remind you to do so if necessary.\n    ```", "```\n    $ terraform plan\n    ```", "```\n    $ terraform apply\n    ```", "```\n$ terraform workspace new cluster1\nCreated and switched to workspace \"cluster1\"!\nYou're now on a new, empty workspace. Workspaces isolate their state,\nso if you run \"terraform plan\" Terraform will not see any existing state\nfor this configuration.\n$ terraform apply \n<apply outputs>\n```", "```\n$ terraform workspace new clusterN\nCreated and switched to workspace \"clusterN\"!\nYou're now on a new, empty workspace. Workspaces isolate their state,\nso if you run \"terraform plan\" Terraform will not see any existing state\nfor this configuration.\n$ terraform apply \n<apply outputs>\n```", "```\nvariable \"eks_vpc_block\" {\n  type = string\n}\nvariable \"eks_private_subnets_prefix_list\" {\n  type = list(string)\n}\nvariable \"eks_public_subnets_prefix_list\" {\n  type = list(string)\n}\nvariable \"clusters_name_prefix\" {\n  type = string\n}\nvariable \"common_tags\" {\n  type = map(string)\n}\n```", "```\nresource \"aws_vpc\" \"eks_vpc\" {\n  cidr_block           = var.eks_vpc_block\n  enable_dns_hostnames = true\n  tags = merge(\n    var.common_tags,\n    {\n      Name = \"${var.clusters_name_prefix}-vpc\"\n    },\n  )\n  lifecycle {\n    ignore_changes = [\n      tags\n    ]\n  }\n}\ndata \"aws_availability_zones\" \"availability_zones\" {\n}\n```", "```\nresource \"aws_subnet\" \"eks_private_subnets\" {\n  count             = length(var.eks_private_subnets_prefix_list)\n  cidr_block        = element(var.eks_private_subnets_prefix_list, count.index)\n  vpc_id            = aws_vpc.eks_vpc.id\n  availability_zone = data.aws_availability_zones.availability_zones.names[count.index]\n  tags = merge(\n    var.common_tags,\n    {\n      Name = \"eks-private-${var.clusters_name_prefix}-${data.aws_availability_zones.availability_zones.names[count.index]}\"\n    },\n  )\n  lifecycle {\n    ignore_changes = [\n      tags\n    ]\n  }\n}\n```", "```\noutput \"eks_cluster_vpc_id\" {\n  value = aws_vpc.eks_vpc.id\n}\noutput \"eks_private_subnet_ids\" {\n  value = aws_subnet.eks_private_subnets.*.id\n}\noutput \"eks_public_subnet_ids\" {\n  value = aws_subnet.eks_public_subnets.*.id\n}\noutput \"eks_nat_ips\" {\n  value = aws_eip.eks_nat_ips.*.public_ip\n}\n```", "```\nterraform {\n  backend \"s3\" {\n    bucket         = \"packtclusters-vpc-terraform-state\"\n    key            = \"packtclusters-vpc.tfstate\"\n    region         = \"us-east-1\"\n    dynamodb_table = \"packtclusters-vpc-terraform-state-lock-dynamodb\"\n  }\n  required_version = \"~> 0.14.5\"\n  required_providers {\n    aws = \"~> 3.27\"\n  }\n}\nprovider \"aws\" {\n  region  = var.aws_region\n  version = \"~> 3.27\"\n}\n```", "```\naws_region           = \"us-east-1\"\nclusters_name_prefix = \"packtclusters\"\nvpc_block            = \"10.40.0.0/17\"\npublic_subnets_prefix_list = [\n  \"10.40.0.0/20\",\n  \"10.40.16.0/20\",\n  \"10.40.32.0/20\",\n]\nprivate_subnets_prefix_list = [\n  \"10.40.64.0/20\",\n  \"10.40.80.0/20\",\n  \"10.40.96.0/20\",\n]\n```", "```\nlocals {\n  common_tags = {\n    ManagedBy = \"terraform\"\n  }\n}\nmodule \"vpc\" {\n  source                          = \"../modules/eks-vpc\"\n  clusters_name_prefix            = var.clusters_name_prefix\n  eks_vpc_block                   = var.vpc_block\n  eks_public_subnets_prefix_list  = var.public_subnets_prefix_list\n  eks_private_subnets_prefix_list = var.private_subnets_prefix_list\n  common_tags                     = local.common_tags\n}\n```", "```\noutput \"vpc_id\" {\n  value = module.vpc.eks_cluster_vpc_id\n}\noutput \"private_subnet_ids\" {\n  value = module.vpc.eks_private_subnet_ids\n}\noutput \"public_subnet_ids\" {\n  value = module.vpc.eks_public_subnet_ids\n}\n```", "```\n    $ cd Chapter03/terraform/packtclusters-vpc\n    $ terraform init\n    Initializing modules...\n    - vpc in ../../modules/eks-vpc\n    Initializing the backend...\n    Initializing provider plugins...\n    - Checking for available provider plugins...\n    - Downloading plugin for provider \"aws\" (hashicorp/aws) 3.27.0...\n    Terraform has been successfully initialized!\n    You may now begin working with Terraform. Try running \"terraform plan\" to see\n    any changes that are required for your infrastructure. All Terraform commands\n    should now work.\n    If you ever set or change modules or backend configuration for Terraform,\n    rerun this command to reinitialize your working directory. If you forget, other\n    commands will detect it and remind you to do so if necessary.\n    ```", "```\n    terraform plan command. There are 28 resources in the Terraform plan, and when you execute the terraform apply command, these 28 resources will be created in your AWS account:![Figure 3.5 – The terraform plan command output\n    ](img/B16192_03_005.jpg)Figure 3.5 – The terraform plan command output\n    ```", "```\n    $ cd Chapter03/terraform/packtclusters-vpc\n    $ terraform apply\n    ```", "```\nresource \"aws_eks_cluster\" \"eks_cluster\" {\n  name     = var.cluster_full_name\n  version  = var.cluster_version\n  role_arn = aws_iam_role.eks_cluster_role.arn\n  vpc_config {\n    security_group_ids = [aws_security_group.eks_cluster_sg.id]\n    subnet_ids         = concat(var.private_subnets, var.public_subnets)\n  }\n  depends_on = [\n    aws_iam_role_policy_attachment.eks_clusterrole_policy_attachment,\n    aws_iam_role_policy_attachment.eks_servicerole_policy_attachment,\n  ]\n}\n```", "```\nresource \"aws_security_group\" \"eks_cluster_sg\" {\n  name        = \"${var.cluster_full_name}-cluster\"\n  description = \"EKS cluster Security group\"\n  vpc_id      = var.vpc_id\n  tags = merge(\n    var.common_tags,\n    {\n      Name                                             = \"${var.cluster_full_name}-cluster-sg\"\n      \"kubernetes.io/cluster/${var.cluster_full_name}\" = \"owned\"\n    },\n  )\n}\n```", "```\nresource \"aws_iam_role\" \"eks_cluster_role\" {\n  name = \"${var.cluster_full_name}-cluster-role\"\n  assume_role_policy = <<POLICY\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"Service\": \"eks.amazonaws.com\"\n      },\n      \"Action\": \"sts:AssumeRole\"\n    }\n  ]\n}\nPOLICY\n  tags = var.common_tags\n}\n```", "```\ndata \"aws_iam_policy\" \"AmazonEKSClusterPolicy\" {\n  arn = \"arn:aws:iam::aws:policy/AmazonEKSClusterPolicy\"\n}\ndata \"aws_iam_policy\" \"AmazonEKSServicePolicy\" {\n  arn = \"arn:aws:iam::aws:policy/AmazonEKSServicePolicy\"\n}\nresource \"aws_iam_role_policy_attachment\" \"eks_clusterrole_policy_attachment\" {\n  policy_arn = data.aws_iam_policy.AmazonEKSClusterPolicy.arn\n  role       = aws_iam_role.eks_cluster_role.name\n  depends_on = [data.aws_iam_policy.AmazonEKSClusterPolicy]\n}\nresource \"aws_iam_role_policy_attachment\" \"eks_servicerole_policy_attachment\" {\n  policy_arn = data.aws_iam_policy.AmazonEKSServicePolicy.arn\n  role       = aws_iam_role.eks_cluster_role.name\n  depends_on = [data.aws_iam_policy.AmazonEKSServicePolicy]\n}\n```", "```\noutput \"security_group\" {\n  value = aws_security_group.eks_cluster_sg.id\n}\noutput \"kubeconfig\" {\n  value = local.kubeconfig\n}\noutput \"ca\" {\n  value = aws_eks_cluster.eks_cluster.certificate_authority[0].data\n}\noutput \"endpoint\" {\n  value = aws_eks_cluster.eks_cluster.endpoint\n}\n```", "```\nvariable \"workers_ami_id\" {\n  type = string\n}\nvariable \"workers_instance_type\" {\n  type = string\n}\nvariable \"workers_storage_size\" {\n  type = string\n}\n```", "```\nresource \"aws_autoscaling_group\" \"workers\" {\n  name                = \"${var.cluster_full_name}-workers-asg-${var.workers_instance_type}\"\n  max_size            = var.workers_number_max\n  min_size            = var.workers_number_min\n  vpc_zone_identifier = var.private_subnet_ids\n  launch_template {\n    id      = aws_launch_template.workers.id\n    version = \"$Latest\"\n  }\n}\n```", "```\nresource \"aws_security_group\" \"workers\" {\n  name        = \"${var.cluster_full_name}-workers\"\n  description = \"Security group for all nodes in the ${var.cluster_full_name} cluster\"\n  vpc_id      = var.vpc_id\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n}\n```", "```\nresource \"aws_iam_role\" \"workers\" {\n  name               = \"${var.cluster_full_name}-workers\"\n  assume_role_policy = <<POLICY\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"Service\": \"ec2.amazonaws.com\"\n      },\n      \"Action\": \"sts:AssumeRole\"\n    }\n  ]\n}\nPOLICY\n}\n```", "```\nresource \"aws_iam_role_policy_attachment\" \"AmazonEKSWorkerNodePolicy\" {\n  policy_arn = \"arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy\"\n  role       = aws_iam_role.workers.name\n}\nresource \"aws_iam_role_policy_attachment\" \"AmazonEKS_CNI_Policy\" {\n  policy_arn = \"arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy\"\n  role       = aws_iam_role.workers.name\n}\nresource \"aws_iam_role_policy_attachment\" \"AmazonEC2ContainerRegistryReadOnly\" {\n  policy_arn = \"arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly\"\n  role       = aws_iam_role.workers.name\n}\nresource \"aws_iam_role_policy_attachment\" \"CloudWatchAgentServerPolicy\" {\n  policy_arn = \"arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy\"\n  role       = aws_iam_role.workers.name\n}\nresource \"aws_iam_instance_profile\" \"workers\" {\n  name = \"${var.cluster_full_name}-workers\"\n  role = aws_iam_role.workers.name\n}\n```", "```\nlocals {\n  kubelet_extra_args = <<ARGS\n--v=3 \\\nARGS\n  userdata = <<USERDATA\n#!/bin/bash\nset -o xtrace\n/etc/eks/bootstrap.sh --b64-cluster-ca \"${var.cluster_ca}\" --apiserver-endpoint \"${var.cluster_endpoint}\" \\\nUSERDATA\n  workers_userdata = \"${local.userdata} --kubelet-extra-args \\\"${local.kubelet_extra_args}\\\"  \\\"${var.cluster_full_name}\\\"\"\n}\n```", "```\nlocals {\n  authconfig = <<AUTHCONFIG\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: aws-auth\n  namespace: kube-system\ndata:\n  mapRoles: |\n    - rolearn: \"${aws_iam_role.workers.arn}\"\n      username: system:node:{{EC2PrivateDNSName}}\n      groups:\n        - system:bootstrappers\n        - system:nodes\nAUTHCONFIG\n}\n```", "```\nmodule \"eks\" {\n  source            = \"../eks-cp\"\n  vpc_id            = var.vpc_id\n  private_subnets   = var.private_subnets\n  public_subnets    = var.public_subnets\n  cluster_full_name = var.cluster_full_name\n  cluster_version   = var.cluster_version\n  common_tags       = var.common_tags\n}\n```", "```\nmodule \"workers\" {\n  source                 = \"../eks-workers\"\n  vpc_id                 = var.vpc_id\n  private_subnet_ids     = var.private_subnets\n  cluster_full_name      = var.cluster_full_name\n  cluster_endpoint       = module.eks.endpoint\n  cluster_ca             = module.eks.ca\n  cluster_security_group = module.eks.security_group\n  workers_ami_id         = var.workers_ami_id\n  workers_instance_type  = var.workers_instance_type\n  workers_number_max     = var.workers_number_max\n  workers_number_min     = var.workers_number_min\n  workers_storage_size   = var.workers_storage_size\n  common_tags            = var.common_tags\n}\n```", "```\n$ cd Chapter03/terraform/packtclusters-vpc\n$ terraform output\n```", "```\naws_region = \"us-east-1\"\nprivate_subnet_ids = [\n  \"subnet-xxxxxxxx\",\n  \"subnet-xxxxxxxx\",\n  \"subnet-xxxxxxxx\",\n]\npublic_subnet_ids = [\n  \"subnet-xxxxxxxx\",\n  \"subnet-xxxxxxxx\",\n  \"subnet-xxxxxxxx\",\n] \nvpc_id                = \"vpc-xxxxxxxxxx\"\nclusters_name_prefix  = \"packtclusters\"\ncluster_version       = \"1.16\"\nworkers_instance_type = \"t3.medium\"\nworkers_number_min    = 1\nworkers_number_max    = 3\nworkers_storage_size  = 10\n```", "```\nmodule \"packtcluster\" {\n  source                = \"../modules/cluster\"\n  vpc_id                = var.vpc_id\n  public_subnets        = var.public_subnet_ids\n  private_subnets       = var.private_subnet_ids\n  cluster_full_name     = \"${var.clusters_name_prefix}-${terraform.workspace}\"\n  cluster_version       = var.cluster_version\n  workers_instance_type = var.workers_instance_type\n  workers_ami_id        = data.aws_ssm_parameter.workers_ami_id.value\n  workers_number_min    = var.workers_number_min\n  workers_number_max    = var.workers_number_max\n  workers_storage_size  = var.workers_storage_size\n  common_tags           = local.common_tags\n  aws_region            = var.aws_region\n}\n```", "```\n    $ cd Chapter03/terraform/packtclusters\n    $ terraform init\n    ```", "```\n    $ terraform workspace new prod1\n    ```", "```\n    $ terraform plan\n    ```", "```\n    $ terraform apply\n    ```", "```\n    $ aws eks --region $(terraform output aws_region) update-kubeconfig --name $(terraform output cluster_full_name)\n    Added new context arn:aws:eks:us-east-1:698782116220:cluster/packtclusters-prod1 to ~/.kube/config\n    ```", "```\n    $ terraform output authconfig | kubectl -n kube-system create -f –\n    configmap/aws-auth created\n    ```", "```\n    $ kubectl get nodes\n    NAME\t\t\t   STATUS\tROLES\t AGE\t VERSION\n    ip-10-40-98-176.ec2.internal\tReady\t<none>\t 90s\tv1.15.10-eks-bac369\n    ```", "```\n    $ cd Chapter03/terraform/packtclusters\n    $ terraform init\n    ```", "```\n    $ terraform destroy\n    ```", "```\n    $ cd Chapter03/terraform/packtclusters-vpc\n    $ terraform init\n    ```", "```\n    $ terraform destroy\n    ```", "```\n    $ aws s3 rm s3://packtclusters-terraform-state --recursive\n    $ aws s3 rm s3://packtclusters-vpc-terraform-state --recursive\n    $ aws s3 rb s3://packtclusters-terraform-state --force\n    $ aws s3 rb s3://packtclusters-vpc-terraform-state --force\n    ```", "```\n    $ cd Chapter03/terraform/shared-state\n    $ terraform init\n    ```", "```\n    $ terraform destroy\n    ```"]
["```\n    brew install kubectl\n    ```", "```\n    curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"\n    ```", "```\n    choco install kubernetes-cli\n    ```", "```\nkubectl version –client –output=yaml\n```", "```\n    brew install kind\n    ```", "```\n    $ [ $(uname -m) = x86_64 ] && curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64\n    $ chmod +x ./kind\n    $ sudo mv ./kind /usr/local/bin/kind\n    ```", "```\n    choco install kind\n    ```", "```\nkind version\n```", "```\nkind create cluster\n```", "```\nkubectl cluster-info\n```", "```\npip3 install awscli\n```", "```\naws configure\n```", "```\neksctl version\n```", "```\neksctl create cluster \\\n    --managed --alb-ingress-access \\\n    --node-private-networking --full-ecr-access \\\n    --name=studycluster \\\n    --instance-types=m6i.xlarge \\\n    --region=us-east-1 \\\n    --nodes-min=2 --nodes-max=4 \\\n    --nodegroup-name=ng-studycluster\n```", "```\neksctl get cluster --name studycluster --region us-east-1\n```", "```\nwget https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.tar.gz\n```", "```\ntar -xzf google-cloud-sdk.tar.gz\n```", "```\n./google-cloud-sdk/install.sh\n```", "```\nbrew install --cask google-cloud-sdk\n```", "```\ngcloud --version\n```", "```\ngcloud init\n```", "```\ngcloud projects create [PROJECT_ID]\ngcloud config set project [PROJECT_ID]\n```", "```\ngcloud config set compute/zone us-central1-a\n```", "```\ngcloud container clusters create studycluster --num-nodes=2\n```", "```\ngcloud container clusters get-credentials studycluster\n```", "```\nkubectl cluster-info\n```", "```\naz group create --name myResourceGroup --location eastus\n```", "```\naz aks create --resource-group myResourceGroup --name studycluster--node-count 2 --generate-ssh-keys\n```", "```\nkubectl get nodes\n```", "```\n    docker login\n    docker build –t <USERNAME>/jokeapi:v1 .\n    ```", "```\n    docker build --platform linux/amd64 –t <USERNAME>/jokeapi:v1 .\n    ```", "```\n    docker push <USERNAME>/jokeapi:v1\n    ```", "```\n    apiVersion: apps/v1\n    kind: Deployment\n    metadata:\n        name: jokeapi\n    spec:\n        replicas: 2\n        selector:\n        matchLabels:\n          app: jokeapi\n        template:\n        metadata:\n          labels:\n            app: jokeapi\n        spec:\n          containers:\n          - name: jokeapi\n            image: <USERNAME>/jokeapi:v1\n            imagePullPolicy: Always\n            ports:\n            - containerPort: 8087\n    ```", "```\n    kubectl create namespace jokeapi\n    kubectl apply -f deployment_api.yaml -n jokeapi\n    ```", "```\n    kubectl get deployments -n jokeapi\n    ```", "```\n    NAME      READY   UP-TO-DATE    AVAILABLE      AGE\n    jokeapi    0/2        2              0          2s\n    ```", "```\n    kubectl get pods -n jokeapi\n    ```", "```\n    NAME                       READY   STATUS    RESTARTS\n    jokeapi-7d9877598d-bsj5b    1/1     Running    0\n    jokeapi-7d9877598d-qb8vs    1/1     Running    0\n    ```", "```\n    apiVersion: v1\n    kind: Service\n    metadata:\n        name: jokeapi\n    spec:\n        selector:\n        app: jokeapi\n        ports:\n        - protocol: TCP\n          port: 80\n          targetPort: 8087\n    ```", "```\n    apiVersion: v1\n    kind: Service\n    metadata:\n        name: jokeapi\n    spec:\n        selector:\n        app: jokeapi\n        type: LoadBalancer\n        ports:\n        - protocol: TCP\n          port: 80\n          targetPort: 8087\n    ```", "```\n    kubectl apply -f lb_api.yaml -n jokeapi\n    ```", "```\n    kubectl get services -n jokeapi\n    ```", "```\n    NAME      TYPE          CLUSTER-IP      EXTERNAL-IP\n    jokeapi  LoadBalancer  10.100.251.249  <DNS>.amazonaws.com\n    ```", "```\n    {\"joke\":\"Have you heard about the chocolate record player? It sounds pretty sweet.\"}\n    ```", "```\n    kubectl create namespace ingress-nginx\n    kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.1.3/deploy/static/provider/baremetal/deploy.yaml -n ingress-nginx\n    ```", "```\n    kubectl edit service ingress-nginx-controller -n ingress-nginx\n    ```", "```\n    kubectl get services -n ingress-nginx\n    ```", "```\n    apiVersion: networking.k8s.io/v1\n    kind: Ingress\n    metadata:\n        name: jokeapi-ingress\n    spec:\n        rules:\n        - http:\n          paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name: jokeapi\n                port:\n                  number: 80\n    ```", "```\n    kubectl get services –n ingress-nginx\n    ```", "```\n    {\"joke\":\"What do you call a fish wearing a bowtie? Sofishticated.\"}\n    ```", "```\ndocker build --platform linux/amd64 –f Dockerfile_job –t <USERNAME>/dataprocessingjob:v1 .\ndocker push <USERNAME>/dataprocessingjob:v1\n```", "```\napiVersion: batch/v1\nkind: Job\nmetadata:\n    name: dataprocessingjob\nspec:\n    template:\n    spec:\n      containers:\n      - name: dataprocessingjob\n        image: <USERNAME>/dataprocessingjob:v1\n      restartPolicy: Never\n    backoffLimit: 4\n```", "```\nkubectl create namespace datajob\nkubectl apply -f job.yaml -n datajob\n```", "```\nkubectl get jobs –n datajob\n```", "```\nNAME                COMPLETIONS    DURATION      AGE\ndataprocessingjob      1/1           8s          11s\n```", "```\nkubectl get pods -n datajob\nkubectl logs <NAMEOFTHEPOD> -n datajob\n```", "```\nkubectl logs dataprocessingjob-g8lkm -n datajob\n```", "```\nIndex([0, 1, 2, 3, 4, 5, 6, 7, 8, 'newcolumn'], dtype='object')\n   0    1   2   3    4     5      6   7  8    newcolumn\n0  6  148  72  35    0  33.6  0.627  50  1       67.2\n1  1   85  66  29    0  26.6  0.351  31  0       53.2\n2  8  183  64   0    0  23.3  0.672  32  1       46.6\n3  1   89  66  23   94  28.1  0.167  21  0       56.2\n4  0  137  40  35  168  43.1  2.288  33  1       86.2\n(768, 10)\n```"]
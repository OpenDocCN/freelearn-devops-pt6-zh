- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Developing Cloud-Native Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A common problem across large enterprises is technology sprawl. When starting
    a new development endeavor, considerable day-0 cycles are wasted choosing the
    right technology and bad decisions can lead to ongoing operational headaches for
    many years.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will first focus on **Application Accelerator for VMware Tanzu**,
    or *App Accelerator* for short, a tool that addresses the day-0 problem of standing
    up a new project. It allows developers to pull down preconfigured application
    templates that already pass muster with enterprise architecture, have all the
    corporate security opinions and safeguards built in, include all the corporate
    standard libraries, use a corporate-standard format and layout, and allow for
    the configuration of common properties (Git repos, databases, API schemas, etc.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we’ll touch on a couple of development frameworks that currently make
    up a significant portion of software running in the enterprise: **Spring Boot**
    and **.NET Core** **with Steeltoe**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The business needs addressed by *App Accelerator*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overview of *App Accelerator*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started with *App Accelerator*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advanced topics on *App Accelerator*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Day-2 operations with *App Accelerator*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud-native development frameworks under the *Tanzu* umbrella
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The business needs addressed by App Accelerator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we jump into the actual product installation, let’s take a moment to
    think about the life of an enterprise application developer. Let’s assume *Cody*
    is a developer in our organization.
  prefs: []
  type: TYPE_NORMAL
- en: 'Today, Cody has been tasked with kicking off a new service that is expected
    to generate significant revenue for the company. If we were to ask him to list
    a few of the things that could hamper his ability to deliver that service, we
    might get a list such as this:'
  prefs: []
  type: TYPE_NORMAL
- en: Finding the right application framework for the task at hand
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing the necessary libraries into that framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing all the corporate-mandated libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resolving any version incompatibilities introduced in the previous two points
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attesting that all of the corporate security standards are being adhered to
    in this project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making all the imported libraries work together
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Researching and importing all the corporate coding conventions, project structure,
    documentation layout, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Waiting for review to ensure that all the standards have been interpreted and
    implemented correctly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As a software developer, maybe you relate to some of Cody’s concerns:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – Cody the developer](img/B18145_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 – Cody the developer
  prefs: []
  type: TYPE_NORMAL
- en: This is an enormous burden on Cody and even more so for a new developer onboarding
    onto a project. Much of this work must be repeated every time a new project gets
    created, it will inevitably result in configuration drift as different developers
    interpret standards differently, and it constitutes a considerable expenditure
    of time and effort before a single line of value-delivering code gets written.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s shift our perspective to that of an enterprise architect. Let’s
    call her *Alana*. She’s tasked with optimizing the time to value for developers,
    setting the technical direction, and creating and enforcing a set of standards
    that balances consistency and security with developer productivity and satisfaction.
    She has a very similar list of hindrances that prevent her from maximizing her
    developers’ performance:'
  prefs: []
  type: TYPE_NORMAL
- en: New developers must learn about the quirks of each project before they can become
    productive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The process of manually reviewing each component to ensure that all the corporate
    standards are being adhered to becomes a bottleneck
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developers gloss over or ignore standards that they don’t understand or choose
    not to implement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developers use outdated and unpatched libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developers use unvetted and unapproved technologies and frameworks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Job satisfaction for developers suffers due to repetitive, tedious, and error-prone
    steps in the **Software Development** **Lifecycle** (**SDLC**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are few, if any, assumptions she can make about the entire portfolio such
    that it can be centrally managed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attempts at cross-project concerns such as automated scanning, deployment, or
    backups are hindered by the heterogeneity of the portfolio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you’re focused more on the *Ops* in *DevOps*, perhaps some of Alana’s concerns
    in this visualization resonate with you:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – Alana, our enterprise architect](img/B18145_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2 – Alana, our enterprise architect
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know why we’re here, let’s dig into the details of App Accelerator
    and start addressing Cody’s and Alana’s pain points.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: App Accelerator is a subcomponent of **Tanzu Application Platform** (**TAP**),
    which is covered in [*Chapter 8*](B18145_08.xhtml#_idTextAnchor150), *Enhancing
    Developer Productivity with Tanzu Application Platform*. To get started with App
    Accelerator, we’ll first need to install a Kubernetes cluster and then layer TAP
    over that. You’re free to use whichever Kubernetes distribution you prefer. If
    you’d like some guidance around standing up a cluster, the appendix at the end
    of the book gives several options for getting Kubernetes up and running.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have a running Kubernetes cluster, you’ll need to jump briefly to [*Chapter
    8*](B18145_08.xhtml#_idTextAnchor150), *Enhancing Developer Productivity with
    Tanzu Application Platform*, where we walk through the installation of TAP. That
    chapter walks through a more complex end-to-end use case, while this chapter focuses
    solely on the Application Accelerator component.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on your Kubernetes cluster, your TAP GUI may be at a local address
    such as `http://localhost:8081`, or possibly at an ingress domain you set up such
    as `http://tap-gui.example.com`.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you open a browser to the TAP GUI, you should see something similar to
    this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3 – Screenshot of the Tanzu Application Platform GUI](img/B18145_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.3 – Screenshot of the Tanzu Application Platform GUI
  prefs: []
  type: TYPE_NORMAL
- en: 'When you click on the **Create** link in the left-hand menu bar, you’ll see
    the default application accelerators that ship with the TAP GUI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.4 – Screenshot of the empty Create section](img/B18145_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.4 – Screenshot of the empty Create section
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! If you’ve made it this far, you are ready to start using App
    Accelerator!
  prefs: []
  type: TYPE_NORMAL
- en: Overview of App Accelerator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: App Accelerator is a tool that Alana uses to provide Cody and his peers with
    a vetted, approved, preconfigured jumping-off point in their language or framework
    of choice. With App Accelerator, Alana can handle repetitive, low-value tasks
    such as choosing a technology and ensuring its interoperability and compatibility
    with other apps and enterprise standards. This frees up Cody and his developer
    peers to deliver business value with great software.
  prefs: []
  type: TYPE_NORMAL
- en: 'App Accelerator consists of several APIs and interfaces geared specifically
    to either Alana the architect’s or Cody the coder’s persona:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.5 – App Accelerator architecture](img/B18145_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.5 – App Accelerator architecture
  prefs: []
  type: TYPE_NORMAL
- en: 'Alana starts with a Git repo containing the skeleton of a project. In addition
    to boilerplate code, pre-approved libraries, and standardized documentation and
    testing structure, this project contains a special YAML file called, by convention,
    `accelerator.yaml`. This file contains the details of how consumers of the template
    application (called an *accelerator*) can customize the app template. Running
    inside Alana and Cody’s Kubernetes cluster is a controller for a `accelerator.apps.tanzu.vmware.com/v1alpha1`.
    Alana deploys an instance of the `accelerator` custom resource, and the controller
    becomes aware of Alana’s Git repo, making it available to Cody:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.6 – Accelerator CRDs](img/B18145_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.6 – Accelerator CRDs
  prefs: []
  type: TYPE_NORMAL
- en: App Accelerator presents a different view to Cody. He opens up a UI containing
    details of all of the accelerators available to him. Alana has provided a wide
    array of languages and frameworks to give developers the flexibility to use the
    right tool for the job without having to reinvent the wheel with regard to choosing
    libraries, ensuring compatibility, and navigating the maze of corporate governance.
  prefs: []
  type: TYPE_NORMAL
- en: Cody can search by tags and preview the contents of the various accelerators.
    Many accelerators will prompt Cody for certain inputs and customize the project
    accordingly. This is done via the **Template Engine** component in the preceding
    architectural diagram. App Accelerator provides a rich set of transformations
    so that a small piece of input from Cody, *what sort of database do you want to
    use?*, for example, can result in complex configuration options and libraries
    being preconfigured. The idea is to abstract as much complexity as possible away
    from the developer to maximize reuse and developer productivity.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand how App Accelerator works, let’s get started with our
    own installation.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with App Accelerator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you worked through the Technical Requirements section at the beginning of
    this chapter, you should have a running instance of Tanzu Application Platform
    and you're ready to begin exploring App Accelerator.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring App Accelerator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When we installed App Accelerator, we got a set of out-of-the-box accelerators
    that enable developers to hit the ground running with enterprise-ready application
    templates, like the ones shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 2.7 – Application \uFEFFaccelerators installed](img/B18145_02_07.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 2.7 – Application accelerators installed
  prefs: []
  type: TYPE_NORMAL
- en: You can click on the **CHOOSE** button for any of these accelerators and you’ll
    navigate to a page where you can supply any of the required parameters, as well
    as explore the project template and preview its files. Once you’ve chosen the
    accelerator that meets your needs, you can fill in the required parameters and
    click on **Next Step** and **Create**. At that point, you’ll be able to download
    a ZIP file containing the beginnings of your next great app with all your company’s
    conventions and best practices baked in!
  prefs: []
  type: TYPE_NORMAL
- en: Downloading, configuring, and running App Accelerator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From the TAP GUI’s `hello-fun-tanzu-devsecops` and make sure **Kubernetes deployment
    and service** is selected under **deploymentType**. Then, we click **Next Step**
    | **Create** | **Download Zip File**. This will download a ZIP file that you can
    unzip, run locally, and deploy to your Kubernetes cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Use your favorite zip tool to unzip the archive and then open the project in
    your favorite IDE. From there, you can follow the instructions in `README.md`
    to run the app locally and deploy it to Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: Once you are comfortable downloading, configuring, and running the accelerator,
    you’re ready to move to some more advanced tasks and topics.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced topics on App Accelerator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s say you’re one of the aforementioned enterprise architects or security
    engineers who wants to delight your developer colleagues with a panoply of choices
    from the latest and greatest technologies while baking in all your hard-learned
    lessons around tech longevity, best practices, and security. How would you go
    about creating your own app accelerator? Let’s do that next. Let’s implement a
    custom app accelerator.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start by logging into GitHub and forking this book’s GitHub project. Visit
    [https://github.com/PacktPublishing/DevSecOps-in-Practice-with-VMware-Tanzu](https://github.com/PacktPublishing/DevSecOps-in-Practice-with-VMware-Tanzu)
    and click `https://github.com/<your-username>/DevSecOps-in-Practice-with-VMware-Tanzu/tree/main/chapter-02/openapi-accelerator`.
  prefs: []
  type: TYPE_NORMAL
- en: This accelerator takes as input an OpenAPI 3.0 specification. It then outputs
    a project capable of building an entire API skeleton around that specification
    and a SwaggerUI frontend to test it out with. How’s that for best practices?
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you’ve forked the accelerator project, let’s tell the controller running
    in Kubernetes that we have another app accelerator that we’d like to make available.
    Let’s clone the accelerator locally:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, navigate to the project and open the `chapter-02/openapi-accelerator/accelerator-k8s-resource.yaml`
    file in a text editor. Modify the `spec.git.url` (highlighted) property to point
    to your fork of the project, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.8 – accelerator-k8s-resource.yaml (point it to your fork of the
    Git repo)](img/B18145_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.8 – accelerator-k8s-resource.yaml (point it to your fork of the Git
    repo)
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, you can tell the App Accelerator controller about your new accelerator
    by applying `accelerator-k8s-resource.yaml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you should be able to return to the TAP GUI’s **Create** page, refresh
    it, and see your OpenAPI 3.0 Spring Boot accelerator ready to go:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.9 – Custom OpenAPI 3.0 Spring Boot accelerator in the TAP GUI](img/B18145_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.9 – Custom OpenAPI 3.0 Spring Boot accelerator in the TAP GUI
  prefs: []
  type: TYPE_NORMAL
- en: 'From here, you could use the accelerator to generate a Spring Boot project
    customized with your own OpenApi 3.0 specification:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the accelerator’s **CHOOSE** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give it a clever name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the default (provided) *OpenApi spec* or paste in one of your own. There’s
    a good one here: [https://raw.githubusercontent.com/PacktPublishing/DevSecOps-in-Practice-with-VMware-Tanzu/main/chapter-02/petstore.yaml](https://raw.githubusercontent.com/PacktPublishing/DevSecOps-in-Practice-with-VMware-Tanzu/main/chapter-02/petstore.yaml):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.10 – Exploring our accelerator after plugging in a custom API spec](img/B18145_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.10 – Exploring our accelerator after plugging in a custom API spec
  prefs: []
  type: TYPE_NORMAL
- en: Click **Next Step**, **Create**, and **Download** **Zip File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unzip the project and navigate to that directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Build the Spring Boot project and run the app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Point your browser to `http://localhost:8080`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.11 – Our custom OpenAPI 3.0 API in Swagger UI](img/B18145_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.11 – Our custom OpenAPI 3.0 API in Swagger UI
  prefs: []
  type: TYPE_NORMAL
- en: And voila! With a simple download, we have a fully functional REST API and Swagger
    UI ready for us to start implementing business logic. We can start delivering
    value immediately because all our corporate governance, libraries, and opinions
    are conveniently baked into the project from its inception.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! If you’ve made it this far, you’ve put pre-vetted, pre-audited,
    secure software frameworks in front of your developers, allowing them to skip
    over the tedious administrative work and get right down to delivering real value
    with their software.
  prefs: []
  type: TYPE_NORMAL
- en: However, the software is always changing and a software framework that was last
    week’s up-to-date, rock-solid building block is this week’s **Critical Vulnerability
    and** **Exposure** (**CVE**).
  prefs: []
  type: TYPE_NORMAL
- en: Let’s move on to some day-2 operations now and look at how we keep our app accelerators
    patched and up to date.
  prefs: []
  type: TYPE_NORMAL
- en: Day-2 operations with App Accelerator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In software development, getting something deployed into production is often
    the easy part. Keeping that software up to date and patched with minimal user
    disruption is where most of your time will be spent. App Accelerator was designed
    with day 2 in mind.
  prefs: []
  type: TYPE_NORMAL
- en: As it turns out, the component versions in our OpenAPI application accelerator
    have already gone out of date. Let’s quickly update and patch our accelerator.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s find our local copy of the `openapi-accelerator` project. Open
    `build.gradle` in your favorite editor. Notice the `org.springframework.boot`
    and `org.openapi.generator` dependencies are not the most recent and could therefore
    contain bugs or even known vulnerabilities. Notice that `org.springframework.boot`
    is at `2.5.6` and `org.openapi.generator` is at `5.2.1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.12 – Our build.gradle file with out-of-date versions of Spring Boot
    and OpenAPI Generator](img/B18145_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.12 – Our build.gradle file with out-of-date versions of Spring Boot
    and OpenAPI Generator
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s visit [https://start.spring.io](https://start.spring.io) to find
    out what the latest release version of Spring Boot is. At the time of writing,
    it’s 2.6.2:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.13 – Latest Spring Boot version from start.spring.io](img/B18145_02_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.13 – Latest Spring Boot version from start.spring.io
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also grab the latest version of the `openapi` plugin from [https://plugins.gradle.org/plugin/org.openapi.generator](https://plugins.gradle.org/plugin/org.openapi.generator).
    As you can see in the following screenshot, it’s **5.3.1** at the time of writing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.14 – The latest release version of the org.openapi.generator plugin
    (5.3.1)](img/B18145_02_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.14 – The latest release version of the org.openapi.generator plugin
    (5.3.1)
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have our up-to-date version numbers, let’s update our `build.grade`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.15 – Updating the plugins block in build.gradle with the latest
    versions](img/B18145_02_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.15 – Updating the plugins block in build.gradle with the latest versions
  prefs: []
  type: TYPE_NORMAL
- en: Then, we simply *git-push* our updated accelerator and after a few minutes,
    we can explore it in the UI and see our updated dependencies. Anyone who uses
    this accelerator in the future will get the latest versions of the `openapi` plugin
    and Spring Boot.
  prefs: []
  type: TYPE_NORMAL
- en: Now, it’s time to switch gears. App Accelerator can help you get off to a great
    start in any number of popular development frameworks, but what are those frameworks?
    Are some better suited than others for the enterprise? The next section will cover
    two development frameworks especially well-suited to enterprise applications.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud-native development frameworks under the Tanzu umbrella
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned in previous sections and chapters, the Tanzu portfolio didn’t materialize
    out of thin air. Rather, it is the thoughtful natural expression of many years
    of work and has helped some of the world’s largest and most notable companies
    cultivate their software competency. One outcome of that experience is learning
    which development frameworks maximize developer productivity while minimizing
    toil, tedium, and bad practice.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we’ve successfully deployed, updated, downloaded, and implemented
    a simple API based on an application accelerator. Our example used Spring Boot.
    How did we arrive at Spring Boot as the underlying application framework for our
    API?
  prefs: []
  type: TYPE_NORMAL
- en: The Spring Framework and Spring Boot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The framework of choice for many of the most successful Tanzu customers has
    been the Spring Framework. This is proven by the millions of applications started
    with Spring Initializr at [https://start.spring.io](https://start.spring.io),
    and enterprise surveys such as the Snyk JVM Ecosystem Report 2020 showing fully
    60% of the enterprise running Spring Boot ([https://snyk.io/blog/spring-dominates-the-java-ecosystem-with-60-using-it-for-their-main-applications/](https://snyk.io/blog/spring-dominates-the-java-ecosystem-with-60-using-it-for-their-main-applications/)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a screenshot showing some of the things Spring gives you right out of
    the box:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.16 – What Spring can do (spring.io)](img/B18145_02_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.16 – What Spring can do (spring.io)
  prefs: []
  type: TYPE_NORMAL
- en: 'The Spring Framework is very flexible in how it can be deployed. Spring Boot
    is an opinionated way to run Spring Framework applications so that they are self-contained
    and *just run*. Spring Boot gives a Spring Framework developer some very useful
    tools to run self-contained applications so that they’re ideal for microservices.
    It also builds in sensible defaults and opinions that work for the most common
    scenarios. Spring Boot gives you the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Several best-of-breed web frameworks to choose from
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Standalone runnable applications, perfect for containers and Kubernetes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Opinionated *starters* for common use cases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Autoconfiguration of all libraries wherever it’s possible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Real-world production features such as metrics and Kubernetes health checks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are entire books written about the Spring Framework and Spring Boot,
    so we can’t do it justice in this chapter. Instead, I’ll give you some links for
    further exploration:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Mark Heckler’s *Spring Boot: Up and* *Running*: [https://www.oreilly.com/library/view/spring-boot-up/9781492076971/](https://www.oreilly.com/library/view/spring-boot-up/9781492076971/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Spring developer quickstarts: [https://spring.io/quickstart](https://spring.io/quickstart)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Spring guides and tutorials: [https://spring.io/guides](https://spring.io/guides)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Josh Long’s *A Bootiful* *Podcast*: [https://soundcloud.com/a-bootiful-podcast](https://soundcloud.com/a-bootiful-podcast)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SpringDeveloper YouTube channel: [https://www.youtube.com/user/SpringSourceDev](https://www.youtube.com/user/SpringSourceDev)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Perhaps you’re asking yourself, *what does the open source Spring Framework
    have to do with Tanzu?* Excellent question! Among other things, many products
    in the Tanzu portfolio are enterprise versions of open source Spring projects.
    They include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Spring Cloud Gateway ([https://spring.io/projects/spring-cloud-gateway](https://spring.io/projects/spring-cloud-gateway))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Cloud Data Flow ([https://spring.io/projects/spring-cloud-dataflow](https://spring.io/projects/spring-cloud-dataflow))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Cloud ([https://spring.io/projects/spring-cloud](https://spring.io/projects/spring-cloud))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are also partnerships with cloud providers to bring an end-to-end, vertically
    integrated Spring platform such as Azure Spring Cloud ([https://tanzu.vmware.com/azure-spring-cloud](https://tanzu.vmware.com/azure-spring-cloud)).
  prefs: []
  type: TYPE_NORMAL
- en: As amazing and rich as the Spring Framework is, it is geared toward Java developers.
    What if you’re a developer with a background in the Microsoft technology stack?
    We’ll discuss that next.
  prefs: []
  type: TYPE_NORMAL
- en: Steeltoe framework
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Of course, not every enterprise software shop has career Java developers. Many
    millions of lines of code currently running the modern world are written on the
    Microsoft .NET stack. *Steeltoe* is a set of libraries, very much in the spirit
    of Spring Boot, that allow .NET developers to deliver cloud-native microservice
    applications reliably and efficiently. If you have an interest in maximizing the
    productivity of developers delivering enterprise software on .NET, I’d highly
    recommend you try it out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://old.dotnetfoundation.org/projects/steeltoe](https://old.dotnetfoundation.org/projects/steeltoe)'
  prefs: []
  type: TYPE_NORMAL
- en: And there you have it! With Spring and Project Steeltoe, we’ve covered application
    frameworks and toolsets that will appeal to the vast majority of enterprise developers,
    making them more productive, less prone to technical debt and bad decision-making,
    and most importantly, happier with their job, delivering economic value with software.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the ongoing quest to maximize our productivity as developers or to maximize
    our teams’ productivity as tech leaders or architects, we need to get *day 0*
    exactly right. Bad decisions or development mistakes made on day 0 will continue
    to bear their bitter, rotten fruit year after year.
  prefs: []
  type: TYPE_NORMAL
- en: The best way to avoid these costly day-0 mistakes is to begin from a starting
    point that we know has been successful in the past and use it as a jumping-off
    point for future development. Application Accelerator for VMware Tanzu, Spring
    Boot, and the Steeltoe framework provide a simple, repeatable baseline for codifying
    these starting points and making teams successful from the outset.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, production-grade, enterprise-ready development frameworks don’t
    appear overnight. Frameworks such as Spring and .NET + Steeltoe are battle-hardened
    based on decades of lessons learned. The best app accelerators use the best underlying
    frameworks and they’re all part of the Tanzu portfolio.
  prefs: []
  type: TYPE_NORMAL
- en: Having worked through this chapter, you now have the skills to deploy and consume
    application accelerators that allow you to get day 0 exactly right – and furthermore,
    you’re off to a great start with industry-standard application frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve solved the problem of getting out of the gate with a great application,
    let’s learn about getting that application into a format that will run on a container
    platform such as Kubernetes next. Just as day-0 project inception is fraught with
    hazards, creating lean, secure, and repeatable container images presents another
    class of problems. Those problems are exactly what we’ll cover in the next chapter
    when we discuss *Tanzu* *Build Service.*
  prefs: []
  type: TYPE_NORMAL

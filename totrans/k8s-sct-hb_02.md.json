["```\napiVersion: apps/v1 #version of Kubernetes api\nkind: Deployment    #type of Object\nmetadata:           #metadata information\n  name: example-deployment\nspec:               #the state the object should be\n```", "```\n$ kubectl create secret generic opaque-example-from-literals --from-literal=literal1=text-for-literal-1\n$ kubectl get secret opaque-example-from-literals -o yaml\napiVersion: v1\ndata:\n  literal1: dGV4dC1mb3ItbGl0ZXJhbC0x\nkind: Secret\n...\ntype: Opaque\n```", "```\n$ kubectl create secret generic opaque-example-from-literals --from-literal=literal1=text-for-literal-1\n$ kubectl create secret generic secretfile --from-file=secret-file.txt=./secret.file.txt\nkubectl get secret secretfile -o yaml\napiVersion: v1\ndata:\n  secret-file.txt: QSBmaWxlIHdpdGggc2Vuc2l0aXZlIGRhdGE=\nkind: Secret\nmetadata:\n...\ntype: Opaque\n```", "```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: service-account-secret\n  annotations:\n    kubernetes.io/service-account.name: example-service-account\ntype: kubernetes.io/service-account-token\n```", "```\n$ kubectl create sa example-service-account\nkubectl apply -f service-account-secret.yaml\nkubectl get secret service-account-secret -o yaml\napiVersion: v1\ndata:\n  ca.crt: ...==\n  namespace: default\n  token: eyJhbGxffQ.eyJhdWQ3RlbTpdW50In0.0LyJWAc2M9SdA3g\nkind: Secret\nmetadata:\n  annotations:\n...\ntype: kubernetes.io/service-account-token\n```", "```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: example-service-account\n---\napiVersion: v1\nkind: Pod\n...\nspec:\n  ...\n  serviceAccountName: example-service-account\n```", "```\n$ kubectl exec -it busybox -- cat /var/run/secrets/kubernetes.io/serviceaccount/token\neyJhbGdkxfTlUifQ.eyJhdWQidwid3RlbTpdW50In0.0LyJWAc2M9SdA3g\n```", "```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: registry-docker-config\ntype: kubernetes.io/dockercfg\ndata:\n  .dockercfg: |\n     REPLACE_WITH_BASE64\n```", "```\n{\n  \"auths\": {\n    \"https://index.docker.io/v1/\": {}\n  }\n}\n```", "```\n$ docker --config ./ login --username=dockerhub-username --password=dockerhub-password\n```", "```\n{\n...\n    \"auth\": \"token\"\n...\n}\n```", "```\n$ DOCKER_CONFIG=$(cat ./config.json|base64)\n$ cat docker-credentials-template.yaml|sed \"s/REPLACE_WITH_BASE64/$DOCKER_CONFIG/\" > docker-credentials.yaml\n```", "```\n$ kubectl apply -f docker-credentials.yaml\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx\nspec:\n  containers:\n  - name: nginx\n    image: nginx:1.14.2\n    ports:\n    - containerPort: 80\n  imagePullSecrets:\n  - name: docker-credentials\n```", "```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: basic-auth-secret\ntype: kubernetes.io/basic-auth\nstringData:\n  username: a-user\n  password: a-password\n```", "```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: ingress-tls\ntype: kubernetes.io/tls\ndata:\n  tls.crt: CRT\n  tls.key: KEY\n```", "```\napiVersion: networking.k8s.io/v1\nkind: Ingress\n...\nspec:\n  tls:\n  - secretName: ingress-tls\n    hosts:\n      - webpage.your.hostname\n  rules:\n  - host: webpage.your.hostname\n...\n```", "```\n$ minikube addons enable ingress\n```", "```\n$ kubectl get ing\nNAME           CLASS   HOSTS             ADDRESS        PORTS     AGE\nwebpage-ingress   nginx   webpage.your.hostname   192.168.49.2   80, 443   79s\n```", "```\n$ minikube tunnel\n```", "```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: plain-text\ntype: Opaque\nstringData:\n  value: non-base64\n```", "```\n$ kubectl apply -f plain-text.yaml\n$ kubectl get secret plain-text -o yaml|grep value\n  value: bm9uLWJhc2U2NA==\n```", "```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: base64-encoded\ntype: Opaque\ndata:\n  value: bm9uLWJhc2U2NA==\n```", "```\n$ kubectl edit secret plain-text\n```", "```\n$ kubectl edit secret plain-text --record=true\n$ kubectl get secret plain-text -o yaml\n...\n    kubernetes.io/change-cause: kubectl edit secret plain-text --record=true\n...\n```", "```\n$ kubectl edit secret plain-text --save-config=true\n$ kubectl get secret plain-text -o yaml\n...\nkubectl.kubernetes.io/last-applied-configuration: |\n      {\"apiVersion....\"type\":\"Opaque\"}\n...\n```", "```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: immutable-secret\ntype: Opaque\nstringData:\n  value: non-base64\nimmutable: true\n```", "```\ndata: Forbidden: field is immutable when `immutable`is set\n```", "```\nkubectl delete secret immutable-secret\n```", "```\nkubectl get secret immutable-secret –o yaml\n```", "```\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  namespace: default\n  name: secret-viewer\nrules:\n- apiGroups: [\"\"]\n  resources: [\"secrets\"]\n  verbs: [\"get\",\"list\",\"watch\"]\n```", "```\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: secret-viewer-binding\n  namespace: default\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: secret-viewer\nsubjects:\n- kind: ServiceAccount\n  name: secret-viewer\n  namespace: default\n```", "```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: secret-admin-cluster\nrules:\n- apiGroups: [\"\"]\n  resources: [\"secrets\"]\n  verbs: [\"*\"]\n```", "```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: secret-admin-cluster-binding\nsubjects:\n- kind: ServiceAccount\n  name: secret-admin\n  namespace: default\nroleRef:\n  kind: ClusterRole\n  name: secret-admin-cluster\n  apiGroup: rbac.authorization.k8s.io\n```", "```\n$ kubectl api-resources -o wide|grep secrets\nsecrets v1 true Secret [create delete deletecollection get list patch update watch]\n```", "```\n$ kubectl create sa secret-admin\n$ kubectl apply -f ./secret-admin-cluster.yaml\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: kubectl-create-secret\nspec:\n  containers:\n  - name: kubectl\n    image: bitnami/kubectl:latest\n    args:\n    - create\n    - secret\n    - generic\n    - test\n    - --from-literal=literal1=text-for-literal-1\n  serviceAccount: secret-admin\n  serviceAccountName: secret-admin\n```", "```\nsecret/test created\n```", "```\n$ kubectl create sa secret-viewer\n$ kubectl apply -f ./secret-viewer.yaml\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: kubectl-get-secrets\nspec:\n  containers:\n  - name: kubectl\n    image: bitnami/kubectl:latest\n    args:\n    - get\n    - secret\n    - secret-toview\n  serviceAccount: secret-viewer\n  serviceAccountName: secret-viewer\n```", "```\napiVersion: audit.k8s.io/v1\nkind: Policy\nomitStages:\n  - \"RequestReceived\"\nrules:\n  - level: Metadata\n    resources:\n    - group: \"\"\n      resources: [\"secrets\"]\n```", "```\nkube-apiserver --audit-policy-file=/path/to/audit-policy.yaml\n```", "```\nminikube start \\\n  --extra-config=apiserver.audit-policy-file=/etc/ssl/certs/audit-policy.yaml \\\n  --extra-config=apiserver.audit-log-path=-\n```", "```\n$ kubectl logs -f kube-apiserver-minikube -n kube-system | grep audit.k8s.io/v1\n```", "```\n$ kubectl get secret\n```", "```\n{\"kind\":\"Event\",...,\"verb\":\"list\",\"user\":{\"username\":\"minikube-user\",\"groups\":[\"system:masters\",\"system:authenticated\"]},\"sourceIPs\":[\"192.168.49.1\"],\"...,\"responseStatus\":{\"metadata\":{},\"code\":200},...}\n```"]
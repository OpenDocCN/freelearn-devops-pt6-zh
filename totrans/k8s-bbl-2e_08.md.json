["```\n# new-nginx-pod.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: new-nginx-pod\nspec:\n  containers:\n  - image: nginx:1.17\n    name: new-nginx-container\n    ports:\n    - containerPort: 80 \n```", "```\n$ kubectl apply -f new-nginx-pod.yaml\npod/new-nginx-pod.yaml created \n```", "```\n-o wide option, which will display the IP address as part of the output:\n```", "```\n$  kubectl get po -o wide\nNAME            READY   STATUS    RESTARTS   AGE   IP             NODE       NOMINATED NODE   READINESS GATES\nnew-nginx-pod   1/1     Running   0          99s   10.244.0.109   minikube   <none>           <none> \n```", "```\n$ kubectl delete -f new-nginx-pod.yaml\npod/new-nginx-pod.yaml deleted\n$ kubectl apply -f new-nginx-pod.yaml\npod/new-nginx-pod.yaml created \n```", "```\n$ kubectl get pods -o wide\nNAME            READY   STATUS    RESTARTS   AGE   IP             NODE       NOMINATED NODE   READINESS GATES\nnew-nginx-pod   1/1     Running   0          97s   10.244.0.110   minikube   <none>           <none> \n```", "```\n$ kubectl run nginx --image nginx --expose=true --port=80\nservice/nginx created\npod/nginx created \n```", "```\n$ kubectl get po,svc nginx\nNAME        READY   STATUS    RESTARTS   AGE\npod/nginx   1/1     Running   0          24s\nNAME            TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE\nservice/nginx   ClusterIP   10.111.12.100   <none>        80/TCP    24s \n```", "```\n--show-labels parameter, which will display the labels as part of the output:\n```", "```\n$  kubectl get po nginx --show-labels\nNAME    READY   STATUS    RESTARTS   AGE   LABELS\nnginx   1/1     Running   0          51s   run=nginx \n```", "```\n$ kubectl describe svc nginx\nName:              nginx\nNamespace:         default\nLabels:            <none>\nAnnotations:       <none>\nSelector:          run=nginx\nType:              ClusterIP\nIP Family Policy:  SingleStack\nIP Families:       IPv4\nIP:                10.111.12.100\nIPs:               10.111.12.100\nPort:              <unset>  80/TCP\nTargetPort:        80/TCP\nEndpoints:         10.244.0.9:80\nSession Affinity:  None\nEvents:            <none> \n```", "```\n$ kubectl port-forward pod/nginx 8080:80\nForwarding from 127.0.0.1:8080 -> 80\nForwarding from [::1]:8080 -> 80 \n```", "```\n$ curl 127.0.0.1:8080\n<!DOCTYPE html>\n<html>\n...<removed for brevity>... \n```", "```\n# k8sutils.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: k8sutils\n  namespace: default\nspec:\n  containers:\n    - name: k8sutils\n      image: **quay.io/iamgini/k8sutils:debian12**\n      command:\n        - sleep\n        - \"infinity\"\n      # imagePullPolicy: IfNotPresent\n  restartPolicy: Always \n```", "```\n$ kubectl apply -f k8sutils.yaml\npod/k8sutils created \n```", "```\n$ kubectl get po k8sutils\nNAME       READY   STATUS    RESTARTS   AGE\nk8sutils   1/1     Running   0          13m \n```", "```\n$ kubectl exec -it k8sutils -- nslookup nginx.default.svc.cluster.local\nServer:         10.96.0.10\nAddress:        10.96.0.10#53\nName:   nginx.default.svc.cluster.local\nAddress: 10.106.124.200 \n```", "```\n$ kubectl exec -it k8sutils -- curl nginx.default.svc.cluster.local\n...<removed for brevity>....\n<body>\n<h1>Welcome to nginx!</h1>\n<p>If you see this page, the nginx web server is successfully installed and\nworking. Further configuration is required.</p>\n...<removed for brevity>... \n```", "```\n$ kubectl run whoami1 --image=containous/whoami --port 80 --labels=\"app=whoami\"\npod/whoami1 created\n$ kubectl run whoami2 --image=containous/whoami --port 80 --labels=\"app=whoami\"\npod/whoami2 created \n```", "```\n$ kubectl get pods --show-labels\nNAME      READY   STATUS    RESTARTS   AGE    LABELS\nwhoami1   1/1     Running   0          3m5s   app=whoami\nwhoami2   1/1     Running   0          3m     app=whoami \n```", "```\n# ~/nodeport-whoami.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: nodeport-whoami\nspec:\n  type: NodePort\n  selector:\n    app: whoami\n  ports:\n  - nodePort: 30001\n    port: 80\n    targetPort: 80 \n```", "```\n$ kubectl apply -f nodeport-whoami.yaml\nservice/nodeport-whoami created\n$ kubectl get service nodeport-whoami\nNAME              TYPE       CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE\nnodeport-whoami   NodePort   10.98.160.98   <none>        80:30001/TCP   14s \n```", "```\n$ minikube ip\n192.168.64.2\nOr you can access the full URL as follows.\n$ minikube service --url nodeport-whoami\nhttp://192.168.49.2:30001 \n```", "```\n$ kubectl get service\nNAME              TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE\nexample-service   ClusterIP   10.106.224.122   <none>        80/TCP         26d\nkubernetes        ClusterIP   10.96.0.1        <none>        443/TCP        26d\nnodeport-whoami   NodePort    10.100.85.171    <none>        80:30001/TCP   21s \n```", "```\n$ kubectl describe Service nodeport-whoami:\nName:                     nodeport-whoami\n...<removed for brevity>...\n**Selector:                 app=whoami**\nType:                     NodePort\nIP Family Policy:         SingleStack\nIP Families:              IPv4\n**IP:                       10.98.160.98**\nIPs:                      10.98.160.98\nPort:                     <unset>  80/TCP\nTargetPort:               80/TCP\nNodePort:                 <unset>  30001/TCP\n**Endpoints:                10.244.0.16:80,10.244.0.17:80**\n...<removed for brevity>... \n```", "```\n$ kubectl delete svc/nodeport-whoami\nservice \"nodeport-whoami\" deleted \n```", "```\n$ kubectl get svc \n```", "```\n$ kubectl run nginx-clusterip --image nginx --expose=true --port=80\nservice/nginx-clusterip created\npod/nginx-clusterip created \n```", "```\n$ kubectl describe svc/nginx-clusterip\nName:              nginx-clusterip\nNamespace:         default\nLabels:            <none>\nAnnotations:       <none>\n**Selector:          run=nginx-clusterip**\nType:              ClusterIP\nIP Family Policy:  SingleStack\nIP Families:       IPv4\nIP:                10.101.229.225\nIPs:               10.101.229.225\nPort:              <unset>  80/TCP\nTargetPort:        80/TCP\nEndpoints:         10.244.0.10:80\nSession Affinity:  None\nEvents:            <none> \n```", "```\n$ kubectl get pods/nginx-clusterip --show-labels\nNAME              READY   STATUS    RESTARTS   AGE   LABELS\nnginx-clusterip   1/1     Running   0          76s   **run=nginx-clusterip** \n```", "```\n$ kubectl exec k8sutils -- curl nginx-clusterip.default.svc.cluster.local\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0<!DOCTYPE ...<removed for brevity>...\n<body>\n<h1>Welcome to nginx!</h1>\n<p>If you see this page, the nginx web server is successfully installed and\nworking. Further configuration is required.</p>\n ...<removed for brevity>... \n```", "```\n# clusterip-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: nginx-clusterip\nspec:\n  type: ClusterIP # Indicates that the service is a ClusterIP\n  ports:\n    - port: 80 # The port exposed by the service\n      protocol: TCP\n      targetPort: 80 # The destination port on the pods\n  selector:\n    run: nginx-clusterip \n```", "```\n$ kubectl delete  svc nginx-clusterip\nservice \"nginx-clusterip\" deleted \n```", "```\n# clusterip-headless.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: nginx-clusterip-headless\nspec:\n  clusterIP: None\n  type: ClusterIP # Indicates that the service is a ClusterIP\n  ports:\n  - port: 80 # The port exposed by the service\n    protocol: TCP\n    targetPort: 80 # The destination port on the pods\n  selector:\n    run: nginx-clusterip \n```", "```\nExternalName type Service YAML definition:\n```", "```\n# externalname-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: mysql-db\n  namespace: prod\nspec:\n  type: ExternalName\n  externalName: app-db.database.example.com \n```", "```\n# nginx-pod-with-readiness-http.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-pod-with-readiness-http\nspec:\n  containers:\n    - name: nginx-pod-with-readiness-http\n      image: nginx\n      readinessProbe:\n        initialDelaySeconds: 5\n        periodSeconds: 5\n        httpGet:\n          path: /ready\n          port: 80 \n```", "```\n# nginx-pod-with-liveness-http.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-pod-with-liveness-http\nspec:\n  containers:\n    - name: nginx-pod-with-liveness-http\n      image: nginx\n      livenessProbe:\n        initialDelaySeconds: 5\n        periodSeconds: 5\n        httpGet:\n          path: /healthcheck\n          port: 80\n          httpHeaders:\n            - name: My-Custom-Header\n              value: My-Custom-Header-Value \n```", "```\n# nginx-pod-with-liveness-command.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-pod-with-liveness-command\nspec:\n  containers:\n    - name: nginx-pod-with-liveness-command\n      image: nginx\n      livenessProbe:\n        initialDelaySeconds: 5\n        periodSeconds: 5\n        exec:\n          command:\n            - cat\n            - /hello/world \n```", "```\n# nginx-pod-with-liveness-tcp.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-pod-with-liveness-tcp\nspec:\n  containers:\n    - name: nginx-pod-with-liveness-tcp\n      image: nginx\n      livenessProbe:\n        initialDelaySeconds: 5\n        periodSeconds: 5\n        tcpSocket:\n          port: 80 \n```", "```\n# nginx-pod-with-liveness-http-named-port.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-pod-with-liveness-http-named-port\nspec:\n  containers:\n    - name: nginx-pod-with-liveness-http-named-port\n      image: nginx\n      ports:\n        - name: liveness-port\n          containerPort: 8080\n          hostPort: 8080\n      livenessProbe:\n        initialDelaySeconds: 5\n        periodSeconds: 5\n        httpGet:\n          path: /healthcheck\n          port: liveness-port \n```", "```\n# nginx-pod-with-startupprobe.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-pod-with-startupprobe\nspec:\n  containers:\n    - name: nginx-pod-with-startupprobe\n      image: nginx\n      ports:\n        - name: liveness-port\n          containerPort: 8080\n          hostPort: 8080\n      livenessProbe:\n        initialDelaySeconds: 5\n        periodSeconds: 5\n        httpGet:\n          path: /healthcheck\n          port: liveness-port\n      startupProbe:\n        httpGet:\n          path: /healthz\n          port: liveness-port\n        failureThreshold: 30\n        periodSeconds: 10 \n```"]
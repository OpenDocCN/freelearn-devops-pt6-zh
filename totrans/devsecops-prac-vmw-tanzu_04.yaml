- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Provisioning Backing Services for Applications
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为应用程序提供后端服务
- en: In the previous chapter, we saw how to build application container images with
    ample security and without much operational overhead using **Tanzu Build Service**
    (**TBS**). These container images are the essential building blocks to run our
    cloud-native applications on container orchestration platforms such as **Kubernetes**.
    We can deploy those container images on a Kubernetes cluster and run our applications.
    However, in real life, things are not that straightforward. In the majority of
    cases, business applications depend on backing services such as databases, queues,
    caches, and others. Additionally, there is an increasing trend to also deploy
    such off-the-shelf backing services as containers on Kubernetes-like platforms
    for various good reasons.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们看到如何使用**Tanzu构建服务**（**TBS**）以充分的安全性和较少的操作开销构建应用程序容器镜像。这些容器镜像是运行我们云原生应用程序的基本构建模块，可以在**Kubernetes**等容器编排平台上运行。我们可以将这些容器镜像部署到Kubernetes集群中，并运行我们的应用程序。然而，在实际情况中，事情并不像看起来那么简单。在大多数情况下，业务应用程序依赖于数据库、队列、缓存等后端服务。此外，还有一个日益增长的趋势是将这些现成的后端服务也作为容器部署到类似Kubernetes的平台上，出于各种原因。
- en: 'In this chapter, we will take a deep dive into **VMware Application Catalog**
    (**VAC**), which provides a secure, fast, and reliable way to use such open source
    backing services in a containerized environment. We will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入探讨**VMware应用目录**（**VAC**），它提供了一种安全、快速和可靠的方式，在容器化环境中使用这种开源后端服务。我们将覆盖以下主题：
- en: Why VMware Application Catalog?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么选择VMware应用目录？
- en: What VMware Application Catalog is
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是VMware应用目录
- en: Getting started with VMware Application Catalog
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用VMware应用目录
- en: Common day-two activities with VMware Application Catalog
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用VMware应用目录的常见第二天活动
- en: We have a lot of ground to cover. So, let’s get started exploring what business
    and technical challenges are addressed by VAC.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有很多内容需要覆盖。所以，让我们开始探索VAC解决了哪些业务和技术挑战。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: There are some technical requirements that need to be fulfilled before we start
    using VAC. These requirements are covered later in this chapter, at the beginning
    of the *Getting started with VMware Application Catalog* section. However, you
    may not need them to understand the application and the details of this tool.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始使用VAC之前，有一些技术要求需要满足。这些要求将在本章后面*开始使用VMware应用目录*部分的开头介绍。然而，您可能不需要这些要求就能理解该应用程序和工具的细节。
- en: Why VMware Application Catalog?
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择VMware应用目录？
- en: The following are the key areas where VAC addresses detailed challenges with
    its capabilities for delivering better developer productivity, security, and operational
    practices when it comes to providing a way to consume popular **open source software**
    (**OSS**) and deploy it as running containers.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是VAC通过其能力解决的关键领域，能够为开发者生产力、安全性和操作实践带来改善，特别是在提供一种消费流行的**开源软件**（**OSS**）并将其部署为运行中的容器方面。
- en: Using the right tool for the right purpose with the flexibility of choice
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用合适的工具实现合适的目的，同时保留选择的灵活性
- en: 'As we discussed previously, most business applications depend on one or more
    backing services, and depending on the nature of the application, the need for
    such backing services can be different. We have seen that using a relational database
    as a backend data store has been the most common backing service for the past
    several years. But some modern cloud-native applications could perform better
    with other data stores such as NoSQL. Similarly, if an application needs a queue
    as a backing service, we can use either Kafka or RabbitMQ. But both Kafka and
    RabbitMQ have their own niche use cases where one might be a better option than
    the other depending on the application’s needs. Similarly, such options exist
    for tools such as caches, logging, **continuous integration/continuous deployment**
    (**CI/CD**) automation, and many other aspects of running cloud-native applications.
    For these use cases, there are strong and mature open source software solutions
    available today that are very popular and widely adopted. *Figure 4**.1* shows
    how OSS tools have become more popular than proprietary tools in the recent past:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前讨论的，大多数业务应用程序依赖于一个或多个后端服务，且根据应用程序的性质，这些后端服务的需求可能会有所不同。我们已经看到，使用关系型数据库作为后端数据存储在过去几年里是最常见的后端服务。但一些现代云原生应用程序可能会通过其他数据存储（如
    NoSQL）表现得更好。类似地，如果应用程序需要队列作为后端服务，我们可以选择 Kafka 或 RabbitMQ。但 Kafka 和 RabbitMQ 都有各自独特的使用场景，根据应用程序的需求，其中一个可能比另一个更适合。类似的选项也存在于缓存、日志记录、**持续集成/持续部署**（**CI/CD**）自动化等工具中，以及运行云原生应用程序的其他多个方面。对于这些用例，今天有许多强大且成熟的开源软件解决方案，这些解决方案非常流行且被广泛采用。*图
    4.1* 显示了开源软件工具在最近的过去如何超过专有工具：
- en: '![Figure 4.1 – The increasing trend of open source data store popularity](img/B18145_04_01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.1 – 开源数据存储受欢迎度的上升趋势](img/B18145_04_01.jpg)'
- en: Figure 4.1 – The increasing trend of open source data store popularity
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.1 – 开源数据存储受欢迎度的上升趋势
- en: Despite the vast choice and proven track record, providing the required freedom
    to adopt such OSS tools internally to application teams is often challenging.
    There are two possible reasons for this. Firstly, it takes a lot of operational
    overhead to get such tools approved for usage and create a secure supply chain
    of container images for these tools. And secondly, the fact that their respective
    container images are available on public container repositories means that they
    are not always trustworthy. Because of that, development teams suffer either because
    of a lack of choice or the loss of productivity results in wait times.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有大量的选择和经过验证的良好记录，但为应用团队提供采用这些开源工具的自由往往是具有挑战性的。这有两个可能的原因。首先，批准这些工具的使用并创建一个安全的容器镜像供应链需要大量的操作开销。其次，鉴于它们各自的容器镜像是公开存储在容器仓库中的，这意味着它们并不总是值得信赖。因此，开发团队要么因为缺乏选择而受到困扰，要么因为生产力损失而导致等待时间增加。
- en: VAC addresses this challenge by providing a huge catalog of OSS tools that enterprises
    can select from. Once a custom catalog of OSS tools is prepared, the VAC service
    creates an automated supply chain to stream container images and Helm charts of
    those selected tools and delivers them to a targeted container registry that is
    deployed either internally or externally, such as **Google Container Registry**
    (**GCR**). Later, we would keep getting the newer versions of those OSS tools
    in the form of their newer container images and Helm charts. These can all be
    configured with minimal operational overhead and provide a lot of choices for
    application teams. Once we start getting the artifacts, container images, and
    Helm charts for our catalog items, we can expose that catalog for internal consumption.
    Then, the authorized internal members may use the catalog to provision those OSS
    tools on Kubernetes within minutes. Such flexibility of choice without the operational
    overhead to developers should encourage the usage of the right backing services
    for the right use case without affecting the productivity of their users.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: VAC 通过提供大量开源工具目录来解决这一挑战，企业可以从中选择。一旦准备好自定义的开源工具目录，VAC 服务会创建一个自动化供应链，将所选工具的容器镜像和
    Helm charts 流式传输并交付到目标容器注册中心，该注册中心可以是内部部署的，也可以是外部部署的，如 **Google Container Registry**（**GCR**）。随后，我们将不断获得这些开源工具的新版本，它们以更新的容器镜像和
    Helm charts 形式提供。这些可以通过最小的操作开销进行配置，并为应用团队提供丰富的选择。一旦开始获取我们目录项目的工件、容器镜像和 Helm charts，我们可以将该目录暴露给内部使用。然后，经过授权的内部成员可以使用该目录，在几分钟内在
    Kubernetes 上部署这些开源工具。这种选择的灵活性，且没有操作开销，应该能够鼓励在不影响用户生产力的情况下为正确的用例使用合适的后台服务。
- en: Enhanced security and transparency
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 增强的安全性和透明度
- en: 'Using OSS deployment on container platforms is very quick, easy, and becoming
    popular. All major public container repositories such as Docker Hub and GCR have
    the container images for all major OSS. We can simply provide the name of the
    container image and download it in seconds. However, despite several benefits
    of pulling container images from such public container repositories, almost all
    enterprises, with some level of mature security practices, would not allow this.
    The following are a few reasons for this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在容器平台上使用开源软件（OSS）部署非常快捷、简单，并且正在变得越来越流行。所有主要的公共容器仓库，如 Docker Hub 和 GCR，都有所有主要开源软件的容器镜像。我们只需提供容器镜像的名称，几秒钟内就能下载。然而，尽管从这些公共容器仓库拉取容器镜像有许多好处，几乎所有具有一定安全实践的企业都不允许这么做。以下是其中几个原因：
- en: It is difficult to determine which container images on public repositories are
    hosted by legitimate sources. You may find several different container images
    for the same software hosted by different organizations or common users. In this
    case, it would be very difficult to create a whitelist of authenticated sources
    to pull the images hosted by them.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 很难确定公共仓库中哪些容器镜像是由合法来源托管的。你可能会发现多个由不同组织或普通用户托管的相同软件的容器镜像。在这种情况下，创建一个认证来源的白名单来拉取这些托管镜像将非常困难。
- en: Even if there is a way to find the authenticated sources whose container images
    can be used, it is very difficult to create a governance model around it to restrict
    the usage of the container images hosted by unknown sources.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即使有办法找到可以使用的认证来源及其容器镜像，围绕它创建一个治理模型来限制未知来源托管的容器镜像的使用也是非常困难的。
- en: It is also very difficult to get a **bill of material** (**BOM**) to know what
    such externally provided container images contain. Such third-party images often
    act as black boxes for enterprises to obtain the required confidence to allow
    using them in any environment. Auditing the environments running such black-box
    container images would be very difficult.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同时，也很难获得**物料清单**（**BOM**），以了解这些外部提供的容器镜像包含了什么。这些第三方镜像往往充当黑盒，企业难以获得所需的信心来允许在任何环境中使用它们。审核运行这些黑盒容器镜像的环境也将非常困难。
- en: Any reasonably mature organization has a standard set of **operating systems**
    (**OSes**) that they allow in their infrastructure. These OS requirements are
    often applicable to container images too. However, there are no controls and enough
    choices for selecting the OS when it comes to the container images provided by
    third parties. This could be a single significant reason that corporates disapprove
    of the use of the container images of OSS tools hosted on public container registries.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何一个成熟的组织都有一套标准的**操作系统**（**OSes**），这些操作系统会被允许在其基础设施中使用。这些操作系统要求通常也适用于容器镜像。然而，对于第三方提供的容器镜像来说，往往没有足够的控制选项来选择操作系统。这可能是企业不赞成使用托管在公共容器注册表上的开源工具容器镜像的一个主要原因。
- en: There are several audit and compliance requirements when it comes to information
    security standards for a security-first mindset organization. To achieve the required
    confidence to run an OSS container in the production environment of a corporate
    entity, there should be several details available, including **Common Vulnerabilities
    and Exposures** (**CVE**) scan reports, test results, anti-virus scans, and other
    details for all the workloads deployed.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于一个以安全为首要思想的组织，涉及信息安全标准时，通常会有几个审计和合规要求。为了获得在企业生产环境中运行OSS容器所需的信心，应该提供多个详细信息，包括**常见漏洞和暴露**（**CVE**）扫描报告、测试结果、病毒扫描和其他有关已部署工作负载的细节。
- en: 'To meet these requirements, companies usually take control of curating their
    own OSS container image-building process. And when they add more OSS into their
    catalog of the in-house image curation process, they often later realize that
    such efforts are not very scalable, fast enough to fulfill the demand, efficient,
    or secure. Here are a few reasons for this: when there are new OSS tools required
    to be added to the internally managed catalog, it requires building a new automation
    pipeline, test cases, infrastructure capacity, and more:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了满足这些要求，公司通常会控制自己的开源软件（OSS）容器镜像构建过程。当他们将更多的开源软件添加到内部镜像编排过程中时，往往会意识到这种做法并不具备很好的可扩展性、速度不足以满足需求、效率低下或存在安全隐患。出现这种情况的原因有几点：当需要将新的开源工具添加到内部管理的目录时，就需要构建新的自动化流水线、测试用例、基础设施容量等。
- en: Such in-house and bespoke automation efforts are often understood and maintained
    by very few engineers. Out rotation of such key people in the team creates a vacuum
    that is difficult to fill at times, and that creates a knowledge gap.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这种定制的内部自动化工作通常只有少数工程师理解并维护。当团队中的关键人员轮换离开时，会造成知识的空白，这种空白有时很难填补，从而造成知识缺口。
- en: As the catalog becomes bigger, the maintenance effort increases exponentially.
    Because every newer version of each catalog item requires building a new corresponding
    container image for internal consumption. Because of such added overhead, the
    platform operations team may fall behind in keeping up with the latest patched
    versions of the OSS tools. Such delays in producing the latest patched container
    image of the tool increase security risks by allowing unpatched CVEs to be available
    for enterprise-wide consumption until the newer container image is ready.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随着目录的增大，维护工作量呈指数级增加。因为每个目录项的更新版本都需要为内部使用构建一个新的相应容器镜像。由于这种额外的工作量，平台运营团队可能会滞后于跟上最新的修补版本。这种生产最新修补容器镜像的延迟会增加安全风险，因为未修补的CVE可能会在企业范围内被使用，直到新的容器镜像准备好。
- en: Because of the amount of effort required to provision a new catalog item for
    internal consumption, there could be a potential pushback to adding new items.
    Such pushbacks could either reduce developer productivity as they spend time waiting
    or affect the business application’s quality by not using the right tool for the
    right use case.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于为内部使用提供新的目录项所需的工作量，可能会出现反对添加新项目的情况。这些反对意见可能会减少开发者的生产力，因为他们需要花时间等待，或者影响业务应用程序的质量，因为无法为特定的使用场景选择正确的工具。
- en: Even though the platform team agrees to add a new item to the catalog, it would
    take a long time before the actual consumers would get a production-certified
    container image that they can use. Such delays again waste the valuable productive
    time of an important workforce. Or the workforce finds workarounds by using externally
    available but insecure sources for such container images.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即使平台团队同意将新项目添加到目录中，但消费者实际获得可生产认证的容器镜像的时间仍然较长。这类延迟再次浪费了重要劳动力的宝贵生产时间，或者劳动力通过使用外部可用但不安全的容器镜像来源找到解决方法。
- en: The time of the people working on such internal automation efforts and the infrastructure
    capacity utilized for this reason could be better used for a more business outcome-driven
    endeavor.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从事此类内部自动化工作的人员时间和为此原因利用的基础设施容量，本可以更好地用于推动更具商业成果的事业。
- en: 'To address these challenges, VAC comes into the picture and helps with the
    following benefits to provide a secure solution to increase developer productivity
    and operational efficiency:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这些挑战，VAC应运而生，提供以下好处，帮助提供一个安全的解决方案，以提高开发者生产力和运营效率：
- en: VAC allows enterprises to use their own golden OS image layer for all their
    selected OSS container images. This is a significant benefit as the client organization
    can use their hardened OS layer with desired security configurations on their
    selection of OS flavor.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VAC允许企业为其所有选择的OSS容器镜像使用自己的黄金操作系统镜像层。这是一个重要的优势，因为客户组织可以在其选择的操作系统版本上使用经过硬化的操作系统层，并按需配置安全设置。
- en: VAC creates an automation pipeline for the creation and distribution of every
    catalog item’s container image and Helm chart (if applicable). Because of such
    automation, VAC can quickly supply newer patched versions of the catalog items
    to subscribers soon after the newer upstream version becomes available. Such a
    quick supply of the patched versions provides a good preventative security posture
    against hacking attacks.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VAC为每个目录项的容器镜像和Helm图表（如适用）的创建和分发创建了自动化流水线。由于这种自动化，VAC可以在较新的上游版本发布后迅速为订阅者提供更新的修补版本。快速提供修补版本能够有效预防黑客攻击，提升安全防范水平。
- en: 'VAC supplies the following artifacts with all container images delivered to
    enhance consumers’ confidence and increase the transparency of the container images:'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VAC为所有交付的容器镜像提供以下工件，以增强消费者信任并提高容器镜像的透明度：
- en: Asset specification detailing information about the content of the container
    image
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资产规范，详细说明容器镜像内容信息
- en: Automation test case results for a test run executed before delivery
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化测试用例结果，供交付前执行的测试运行使用
- en: CVE scan report
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: CVE扫描报告
- en: CVE scan report in CVRF format
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: CVE扫描报告，格式为CVRF
- en: Antivirus scan report
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 杀毒扫描报告
- en: User documentation references
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户文档参考
- en: VAC pushes all the artifacts to a private container registry as provided by
    the clients, which creates a trustable source of all container images and Helm
    charts for internal consumption.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VAC将所有工件推送到客户提供的私有容器注册表中，这为所有容器镜像和Helm图表创建了一个可信赖的来源，供内部使用。
- en: What is the CVRF?
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是CVRF？
- en: 'The **Common Vulnerability Reporting Framework** (**CVRF**) Version 1.1 was
    released in May 2012\. CVRF is an XML-based language that enables different stakeholders
    across different organizations to share critical security-related information
    in a single format, speeding up information exchange and digestion. Reference:
    [https://www.icasi.org/the-common-vulnerability-reporting-framework-cvrf-v1-1/](https://www.icasi.org/the-common-vulnerability-reporting-framework-cvrf-v1-1/).'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**通用漏洞报告框架**（**CVRF**）1.1版于2012年5月发布。CVRF是一种基于XML的语言，使不同组织之间的不同利益相关者能够以统一格式共享关键信息，从而加速信息交换和消化。参考文献：[https://www.icasi.org/the-common-vulnerability-reporting-framework-cvrf-v1-1/](https://www.icasi.org/the-common-vulnerability-reporting-framework-cvrf-v1-1/)。'
- en: In the previous points, we discussed most of the important benefits of VAC.
    Presently, VAC is only applicable to OSS tools. However, many large organizations
    do not use OSS tools without enterprise-grade support, especially in a production
    environment. It is important to understand that VAC, as a solution, only supports
    the secure supply chain of OSS container images and Helm charts using client-selected
    OS layers. But VAC does not support the underlying OSS tools as a part of the
    subscription. For example, if an organization requires PostgreSQL DB container
    images via VAC, then VAC will support the packaging and the timely distribution
    of the container images of PostgreSQL DB upstream versions. But VAC would not
    support the underlying PostgreSQL DB itself. Hence, for the support of PostgreSQL,
    the enterprise may need to either use a vendor-supported offering such as VMware’s
    **Tanzu** data management service subscription, which supports open source PostgreSQL
    and MySQL DB. Alternatively, they could use a vendor-specific flavor of the open
    source solution such as the one provided by Crunchy Data for PostgreSQL, for example.
    In this case, organizations may get container images from respective third-party
    vendors such as Crunchy Data. For such cases, VAC would not be useful. But if
    the enterprises wanted to use the vanilla upstream version of PostgreSQL, which
    is supported by a vendor such as VMware or **EnterpriseDB** (**EDB**), then they
    may use VAC to benefit from all the listed benefits.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的几个要点中，我们讨论了 VAC 的主要优势。目前，VAC 仅适用于 OSS 工具。然而，许多大型组织在没有企业级支持的情况下不会使用 OSS 工具，特别是在生产环境中。需要理解的是，VAC
    作为一种解决方案，仅支持使用客户端选择的操作系统层的 OSS 容器镜像和 Helm 图表的安全供应链。但 VAC 并不支持作为订阅的一部分的基础 OSS 工具。例如，如果一个组织通过
    VAC 需要 PostgreSQL 数据库容器镜像，那么 VAC 将支持 PostgreSQL 数据库上游版本容器镜像的打包和及时分发。但 VAC 不会支持基础的
    PostgreSQL 数据库本身。因此，为了支持 PostgreSQL，企业可能需要使用由供应商支持的服务，如 VMware 的 **Tanzu** 数据管理服务订阅，该订阅支持开源
    PostgreSQL 和 MySQL 数据库。或者，他们可以使用供应商特定版本的开源解决方案，比如由 Crunchy Data 提供的 PostgreSQL
    版本。在这种情况下，组织可以从相应的第三方供应商（如 Crunchy Data）获取容器镜像。对于这种情况，VAC 并没有什么用处。但如果企业希望使用供应商支持的纯粹上游版本
    PostgreSQL（例如由 VMware 或 **EnterpriseDB** (**EDB**) 提供支持），则可以使用 VAC 来享受所有列出的好处。
- en: Upstream versus a vendor-specific flavored OSS
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 上游与供应商特定版本的 OSS
- en: Using upstream OSS distributions directly without adding a vendor-specific flavor
    helps avoid potential vendor lock-ins, which is the first and foremost reason
    to use OSS technology. VAC makes the adoption of such OSS tools easier for enterprises.
    Despite that, many organizations still use vendor-specific flavors of OSS because
    of the additional features and functionalities not available in the upstream OSS
    distributions. Hence, there are pros and cons to both approaches.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 直接使用上游的 OSS 发行版而不添加供应商特定的版本有助于避免潜在的供应商锁定，这是使用 OSS 技术的首要原因。VAC 使企业更容易采用这些 OSS
    工具。尽管如此，许多组织仍然使用供应商特定版本的 OSS，因为这些版本包含了上游 OSS 发行版中没有的附加功能和特性。因此，这两种方法各有利弊。
- en: After understanding how and where VAC is beneficial and where it is not applicable,
    let’s now take a deeper look into what VAC is and what it contains.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解 VAC 的优势和适用范围之后，让我们更深入地了解一下 VAC 是什么以及它包含哪些内容。
- en: What VMware Application Catalog is
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VMware 应用程序目录是什么
- en: After delivering comprehensive detail on what business, security, and technological
    challenges VAC can address and where it will not be a good use case, let’s now
    understand this tool in a bit more detail to see what it contains. But before
    that, let’s look into the background of VAC to learn more about it.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在详细介绍了 VAC 可以解决的业务、安全和技术挑战，以及它不适用的场景之后，让我们现在更详细地了解这个工具，看看它包含了什么内容。在此之前，让我们先了解一下
    VAC 的背景，以便更深入地了解它。
- en: The history of VMware Application Catalog
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: VMware 应用程序目录的历史
- en: In late 2019, with a vision of curating a comprehensive portfolio of modern
    application development and management tools, VMware decided to acquire a popular
    OSS packaging and distribution company named **Bitnami**. Bitnami had several
    years of experience working in this space, initially providing well-curated and
    consumable OSS tools in the form of binaries, virtual machine images, and container
    images. After the acquisition, VMware rebranded Bitnami as **Tanzu Application
    Catalog** to define an enterprise-grade OSS container image distribution offering
    that can customize the image specification as per the enterprise client’s needs.
    In 2021, VMware decided to also include the **Open Virtual Appliance** (**OVA**)
    image catalog to build virtual machines in addition to just the container images
    and Helm charts, which was the original idea behind Tanzu Application Catalog.
    As we see in this book, VMware’s Tanzu product portfolio contains all the tools
    and technologies around containers and Kubernetes. This was the reason why this
    offering was also initially given a *Tanzu* name. But with the recent announcement
    by VMware to also expand this offering to cover OVA images along with container
    images and Helm charts, this offering was renamed **VMware Application Catalog**
    (**VAC**), as it is not just about the container ecosystem anymore.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2019 年末，为了策划一个全面的现代应用开发和管理工具组合，VMware 决定收购一家名为 **Bitnami** 的流行 OSS 打包和分发公司。Bitnami
    在这一领域有多年经验，最初以二进制文件、虚拟机镜像和容器镜像的形式提供精心策划且可消费的 OSS 工具。收购后，VMware 将 Bitnami 更名为 **Tanzu
    应用目录**，以定义一个企业级 OSS 容器镜像分发产品，可以根据企业客户的需求定制镜像规范。2021 年，VMware 决定在原有的容器镜像和 Helm
    图表之外，还包括 **开放虚拟设备**（**OVA**）镜像目录，以构建虚拟机，这也是 Tanzu 应用目录的最初构想。正如我们在本书中看到的，VMware
    的 Tanzu 产品组合涵盖了所有与容器和 Kubernetes 相关的工具和技术。这也是该产品最初被命名为 *Tanzu* 的原因。但是，随着 VMware
    最近宣布将扩展该产品以支持 OVA 镜像和容器镜像以及 Helm 图表，这一产品被重新命名为 **VMware 应用目录**（**VAC**），因为它不再仅仅关乎容器生态系统。
- en: Important Note
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The main focus of this book is Tanzu and its surrounding ecosystem. Additionally,
    at the time of writing this book, the offerings around virtual machine images
    are still evolving to get to the level of container images with respect to VAC.
    Hence, we will only cover details around container image catalog management and
    consumption in this chapter and not for virtual machine images.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的主要焦点是 Tanzu 及其周边生态系统。此外，在撰写本书时，关于虚拟机镜像的产品仍在发展中，尚未达到与 VAC 中容器镜像相同的水平。因此，本章只会涵盖容器镜像目录管理和消费的相关细节，而不会涉及虚拟机镜像。
- en: After tapping into the history of VAC and knowing why it has *VMware* and not
    *Tanzu* in the name, let’s now understand what the key parts of this product offering
    are.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解了 VAC 的历史并明白为什么它名字中有 *VMware* 而不是 *Tanzu* 后，让我们现在来了解一下这个产品的关键组成部分。
- en: Components of VMware Application Catalog
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: VMware 应用目录的组成部分
- en: The following tools are the components of VAC. Let’s review them.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以下工具是 VAC 的组成部分。我们来一一审视它们。
- en: VMware Application Catalog portal
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: VMware 应用目录门户
- en: The main component of this offering is the VAC portal, where we can curate and
    manage the application catalog. It’s a **Software as a Service** (**SaaS**) component
    that is hosted and managed by VMware. VAC clients can use this portal using their
    VMware Cloud ([https://console.cloud.vmware.com/](https://console.cloud.vmware.com/))
    account to access the VAC service. A catalog administrator may create new catalogs,
    add new OSS offerings in the catalog, and download supporting elements related
    to the catalog items, including test result logs, CVE reports, anti-virus scan
    reports, and other such items. In summary, the VAC portal provides a web-based
    user interface for securely curating a catalog of OSS tools that can be freely
    used by the internal users of the enterprise. We will cover more details about
    this portal later in the chapter.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 该产品的主要组成部分是 VAC 门户，在此我们可以策划和管理应用目录。它是一个**软件即服务**（**SaaS**）组件，由 VMware 托管和管理。VAC
    客户端可以通过其 VMware Cloud ([https://console.cloud.vmware.com/](https://console.cloud.vmware.com/))
    账户访问 VAC 服务。目录管理员可以创建新目录、在目录中添加新的 OSS 产品，并下载与目录项相关的支持元素，包括测试结果日志、CVE 报告、防病毒扫描报告以及其他此类项目。总之，VAC
    门户提供了一个基于 Web 的用户界面，用于安全地策划一个可以供企业内部用户自由使用的 OSS 工具目录。我们将在本章后面详细介绍这个门户的更多细节。
- en: Kubeapps
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Kubeapps
- en: Once a catalog administrator defines a catalog of supported OSS tools with Helm
    charts on the VAC portal, developers or operators may use Kubeapps ([https://kubeapps.com/](https://kubeapps.com/))
    to consume the published catalog items for internal use. Kubeapps is an OSS tool
    under the **Cloud Native Computing Foundation** (**CNCF**) umbrella. This project
    was started by Bitnami to provide a **graphical user interface** (**GUI**) to
    deploy software using Helm charts on top of Kubernetes clusters. Since the acquisition
    of Bitnami, VMware actively maintains it. It is a very lightweight application
    that can be deployed on a Kubernetes cluster running in the organization’s environment.
    The users of Kubeapps can select software to be deployed from the accessible catalog,
    change required deployment configurations (for example, user credentials, storage
    size, security configuration, and things of that nature), and finally deploy it
    as running containers on the targeted namespace of the selected Kubernetes cluster.
    Once a new version of the software is available in the catalog, the user can quickly
    upgrade it or remove the deployment if no longer required. To sum up, if the VAC
    portal provides the required controls for securely exposing a catalog of OSS tools,
    the Kubeapps provides the desired flexibility and productivity to developers or
    other users of the catalogs to life cycle various OSS tools as and when required
    using a published catalog.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦目录管理员在 VAC 门户上定义了带有 Helm 图表的支持的 OSS 工具目录，开发人员或操作员可以使用 Kubeapps ([https://kubeapps.com/](https://kubeapps.com/))
    来消费发布的目录项供内部使用。Kubeapps 是 **云原生计算基金会**（**CNCF**）旗下的 OSS 工具。这个项目最初由 Bitnami 启动，旨在提供一个
    **图形用户界面**（**GUI**），通过 Helm 图表在 Kubernetes 集群上部署软件。自从被 Bitnami 收购后，VMware 积极维护该项目。它是一个非常轻量级的应用程序，可以部署在运行在组织环境中的
    Kubernetes 集群上。Kubeapps 的用户可以从可访问的目录中选择要部署的软件，更改所需的部署配置（例如，用户凭据、存储大小、安全配置等），并最终将其作为运行中的容器部署到选定
    Kubernetes 集群的目标命名空间中。一旦目录中有软件的新版本可用，用户可以快速升级，或者如果不再需要该部署，可以将其删除。总结来说，如果 VAC 门户提供了所需的控制，以安全地公开
    OSS 工具目录，那么 Kubeapps 就为开发人员或其他目录用户提供了所需的灵活性和生产力，可以根据需要使用已发布的目录来管理各种 OSS 工具的生命周期。
- en: Let’s understand how these components work together to provide the required
    functionalities. *Figure 4**.2* describes the overall process to define the OSS
    catalog on the VAC portal and consume those catalog artifacts either using Kubeapps
    or **continuous deployment** (**CD**) automation in its place.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解这些组件是如何协同工作，以提供所需的功能。*图 4.2* 描述了在 VAC 门户上定义 OSS 目录的整体过程，并通过 Kubeapps 或
    **持续部署**（**CD**）自动化来消费这些目录工件。
- en: The VAC management and consumption process
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: VAC 管理和消费过程
- en: 'After reviewing the key components of this offering in the previous section,
    let’s now understand how everything works together to provide end-to-end functionality
    of catalog curation and consumption using VAC. The following points correspond
    to each number given in *Figure 4**.2* and describe what happens during that step
    of the process. The cloud in *Figure 4**.2* depicts the SaaS infrastructure of
    VAC, and the rectangle defines the infrastructure boundary of the client organization.
    This client infrastructure may be either a private data center, a public cloud,
    or a combination of both:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中回顾了该服务的关键组件后，让我们现在来了解这些组件如何协同工作，通过使用 VAC 提供端到端的目录编排和消费功能。以下几点对应于*图 4.2*中给出的每个数字，并描述了在该步骤中发生的过程。*图
    4.2*中的云表示 VAC 的 SaaS 基础设施，矩形框定义了客户组织的基础设施边界。这个客户基础设施可以是私有数据中心、公共云，或者两者的结合：
- en: A catalog administrator within the client organization with access to the VMware
    Cloud account defines a new catalog of selected OSS tools. In this step, the catalog
    admin also selects the base container OS to be used, whether to include or exclude
    Helm charts for the selected items and provides a container repository reference
    to where the catalog artifacts will be pushed for secure consumption.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户组织中的目录管理员，拥有 VMware Cloud 账户的访问权限，定义了一个新的选定 OSS 工具目录。在此步骤中，目录管理员还选择了要使用的基础容器操作系统，决定是否包括或排除所选项目的
    Helm 图表，并提供一个容器仓库引用，用于将目录工件推送到安全的消费位置。
- en: Once the catalog administrator submits a catalog configuration, VAC automation
    processes take it forward to deploy the required automation pipelines to create
    a stream of container images and Helm charts that can be generated as per the
    specifications provided by the catalog administrator in *step 1*.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦目录管理员提交了目录配置，VAC自动化过程将继续推进，部署所需的自动化流水线，以创建符合目录管理员在*步骤1*中提供的规格生成的容器镜像和Helm图表。
- en: The VAC automation process pulls required OSS binaries from authorized third-party
    sources based on each selected OSS tool. After getting the required binaries,
    VAC automation performs certain operations, including automation testing of the
    OSS tool’s version, packaging the tool using the client-specified OS image layer,
    preparing a container specification report, and performing anti-virus and CVE
    scans. This step gets repeated for each newer version of each OSS tool covered
    by VAC.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: VAC自动化过程根据每个选择的OSS工具，从授权的第三方源拉取所需的OSS二进制文件。在获取所需的二进制文件后，VAC自动化执行某些操作，包括自动化测试OSS工具的版本、使用客户端指定的操作系统镜像层打包工具、准备容器规格报告，以及执行病毒扫描和CVE扫描。此步骤会针对VAC涵盖的每个OSS工具的每个新版本重复执行。
- en: Once a catalog item is ready for consumption, it is pushed to a target container
    registry as specified by the catalog administrator in *step 1*. This step is also
    repeated for each OSS tool’s version that is prepared in *step 3*.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦目录项准备好供消费，它将被推送到目录管理员在*步骤1*中指定的目标容器注册表。此步骤对于每个OSS工具的版本，也会在*步骤3*中为其准备的每个版本重复执行。
- en: Once a catalog item is pushed in the target container registry, a catalog administrator
    may pull the required reports that were prepared in *step 3* for the published
    artifacts such as CVE scan reports and others. The VAC portal also specifies required
    CLI commands to use the container images and Helm charts for the published artifacts.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦目录项被推送到目标容器注册表，目录管理员可以拉取在*步骤3*中为已发布的工件准备的报告，如CVE扫描报告等。VAC门户还会指定使用CLI命令来使用发布工件的容器镜像和Helm图表。
- en: In this step, the catalog administrator configures the published catalog on
    Kubeapps for internal consumption.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此步骤中，目录管理员在Kubeapps上配置已发布的目录供内部使用。
- en: In this step, Kubeapps pulls the required details of the catalog to publish
    on the GUI for consumption.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此步骤中，Kubeapps拉取所需的目录详细信息，以便在GUI上发布供消费使用。
- en: 'Once the catalog is configured on Kubeapps, a catalog consumer may access Kubeapps
    GUI to deploy the required OSS tool as a Kubernetes deployment:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦目录在Kubeapps上配置好，目录消费者可以访问Kubeapps GUI来部署所需的OSS工具作为Kubernetes部署：
- en: '![Figure 4.2 – The VAC management and consumption process](img/B18145_04_02.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图4.2 – VAC管理与消费过程](img/B18145_04_02.jpg)'
- en: Figure 4.2 – The VAC management and consumption process
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.2 – VAC管理与消费过程
- en: Upon receiving the request from a catalog consumer to deploy a tool using its
    Helm chart on the Kubeapps GUI, Kubeapps pulls the required Helm chart and container
    images for the deployment of the tool from the container registry where the artifacts
    were pushed in *step 4*.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当Kubeapps接收到来自目录消费者的请求，要求在Kubeapps GUI上使用其Helm图表部署工具时，Kubeapps将从在*步骤4*中推送到容器注册表的工件中拉取所需的Helm图表和容器镜像，以进行工具的部署。
- en: The Helm installer triggered by Kubeapps deploys the OSS tool on the targeted
    Kubernetes cluster using the configuration supplied by the catalog consumer in
    *step 8*. At the end of this step, we have a running instance of the OSS tool
    in the targeted Kubernetes cluster. In most cases, this step gets completed within
    a few minutes.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由Kubeapps触发的Helm安装程序使用目录消费者在*步骤8*中提供的配置，在目标Kubernetes集群中部署OSS工具。在此步骤结束时，目标Kubernetes集群中将运行该OSS工具实例。在大多数情况下，此步骤将在几分钟内完成。
- en: This step describes an alternative way of consuming the VAC-supplied artifacts
    using a CD automation process. This step can be configured to be triggered every
    time there is a newer version of the artifact available in the container registry
    to initiate an automated deployment process.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此步骤描述了使用CD自动化过程消费VAC提供的工件的另一种方式。此步骤可以配置为每当容器注册表中有新版本的工件可用时触发，从而启动自动化部署过程。
- en: In this step, the CD process deploys the downloaded OSS tool in the targeted
    Kubernetes cluster.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此步骤中，CD过程将在目标Kubernetes集群中部署已下载的OSS工具。
- en: 'The following figure shows all these steps as a summary highlighting what VAC
    is and how it is used:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 下图总结了所有这些步骤，突出了VAC的功能以及其使用方式：
- en: '![Figure 4.3 – VAC at a high level (https://docs.vmware.com/)](img/B18145_04_03.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.3 – 高级视图中的 VAC (https://docs.vmware.com/)](img/B18145_04_03.jpg)'
- en: Figure 4.3 – VAC at a high level (https://docs.vmware.com/)
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.3 – 高级视图中的 VAC (https://docs.vmware.com/)
- en: With this, we covered the details required to understand the history of VAC,
    how VAC got its current name, the key components of VAC, and the end-to-end process
    involving catalog creation to consumption. Now let’s get started using VAC to
    better understand how to consume it.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 到此，我们已经覆盖了理解 VAC 历史、VAC 如何获得当前名称、VAC 的关键组成部分，以及从目录创建到使用的端到端过程的所有细节。现在，让我们开始使用
    VAC，更好地理解如何使用它。
- en: Getting started with VMware Application Catalog
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用 VMware 应用程序目录
- en: 'In this part of the chapter, we will cover the following details:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 本章这一部分将涵盖以下内容：
- en: How to configure an application catalog
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何配置应用程序目录
- en: How to install Kubeapps on a Kubernetes cluster
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在 Kubernetes 集群上安装 Kubeapps
- en: How to configure Kubeapps to use a catalog
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何配置 Kubeapps 使用目录
- en: So, let’s get started with hands-on work. But before that, we need the following
    prerequisites fulfilled.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们开始动手操作。但在此之前，我们需要满足以下先决条件。
- en: Prerequisites
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 先决条件
- en: 'The following points list prerequisites to operationalize VAC:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 以下几点列出了实现 VAC 所需的先决条件：
- en: A VMware Cloud Services ([https://console.cloud.vmware.com/](https://console.cloud.vmware.com/))
    account with VAC access
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拥有 VAC 访问权限的 VMware Cloud Services 账户 ([https://console.cloud.vmware.com/](https://console.cloud.vmware.com/))
- en: 'One of the following container repositories that can be accessed by VAC to
    push catalog items:'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下任一容器仓库，VAC 可以访问它们以推送目录项：
- en: GCR
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: GCR
- en: Azure Container Registry
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 容器注册表
- en: Harbor
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Harbor
- en: 'A Kubernetes cluster with the following attributes:'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有以下属性的 Kubernetes 集群：
- en: Version 1.19 or later
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本 1.19 或更高版本
- en: Outbound internet access
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外网访问
- en: Container registry access that is used by VAC
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: VAC 使用的容器注册表访问
- en: Automated **Persistent Volume** (**PV**) creation based on **Persistent Volume**
    **Claims** (**PVC**)
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化 **持久卷**（**PV**）创建，基于 **持久卷声明**（**PVC**）
- en: A workstation with either Linux or macOS
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配备 Linux 或 macOS 的工作站
- en: Helm v3.x installed on the workstation machine
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在工作站机器上安装 Helm v3.x
- en: Helm installation
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Helm 安装
- en: 'Use this documentation if you need help with the Helm installation: [https://docs.bitnami.com/kubernetes/get-started-kubernetes/#step-4-install-and-configure-helm](https://docs.bitnami.com/kubernetes/get-started-kubernetes/#step-4-install-and-configure-helm).'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要帮助进行 Helm 安装，请参考此文档：[https://docs.bitnami.com/kubernetes/get-started-kubernetes/#step-4-install-and-configure-helm](https://docs.bitnami.com/kubernetes/get-started-kubernetes/#step-4-install-and-configure-helm)。
- en: Let’s start by defining a catalog of backend services that can be accessed by
    various applications. We will select MySQL, a relational database, as an example
    of an OSS catalog item to describe various details later in the chapter. In real
    life, we may add many other OSS tools to the catalog and use them in a similar
    way. You can find a broader list of available OSS tools on the VAC portal for
    catalog creation.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先定义一个可以被各种应用程序访问的后端服务目录。我们将选择 MySQL 作为关系型数据库，作为 OSS 目录项的示例，以便在本章后续部分描述各种细节。在实际操作中，我们可能会将许多其他
    OSS 工具添加到目录中，并以类似的方式使用它们。你可以在 VAC 门户上找到更多可用的 OSS 工具列表，以便创建目录。
- en: Creating a catalog on the VAC portal
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 VAC 门户上创建目录
- en: 'To create a catalog on the VAC portal, take the following steps:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在 VAC 门户上创建目录，请按照以下步骤操作：
- en: 'Log in to your VMware Cloud Services account and select **VMware Application
    Catalog** from the available services. If you do not see that service listed,
    then you may need to reach out to your VMware account team member to get access:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到你的 VMware Cloud Services 账户，并从可用服务中选择 **VMware 应用程序目录**。如果你没有看到该服务，可能需要联系你的
    VMware 账户团队成员以获取访问权限：
- en: '![Figure 4.4 – Select VAC from the list of services](img/B18145_04_04.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.4 – 从服务列表中选择 VAC](img/B18145_04_04.jpg)'
- en: Figure 4.4 – Select VAC from the list of services
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.4 – 从服务列表中选择 VAC
- en: 'You will see an empty catalog page, as shown in the following figure as there
    will be no catalog items previously added. Click on the **ADD NEW APPLICATIONS**
    button shown in the following figure:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将看到一个空目录页面，如下图所示，因为之前没有添加任何目录项。点击下图所示的 **ADD NEW APPLICATIONS** 按钮：
- en: '![Figure 4.5 – The ADD NEW APPLICATIONS button in an empty catalog](img/B18145_04_05.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.5 – 空目录中的 ADD NEW APPLICATIONS 按钮](img/B18145_04_05.jpg)'
- en: Figure 4.5 – The ADD NEW APPLICATIONS button in an empty catalog
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.5 – 空目录中的 ADD NEW APPLICATIONS 按钮
- en: 'Select the base OS layer for the catalog artifacts. As mentioned before in
    this chapter, we will focus on the Kubernetes-based application catalog and not
    on virtual machines. As a simple example, **Ubuntu 18.04** is selected as the
    base OS layer, but you may also select the **Custom Base Image** option. For more
    details on that visit the product documentation for VAC at [https://docs.vmware.com/en/VMware-Application-Catalog/services/main/GUID-get-started-get-started-vmware-application-catalog.html#step-3-create-custom-catalogs-5](https://docs.vmware.com/en/VMware-Application-Catalog/services/main/GUID-get-started-get-started-vmware-application-catalog.html#step-3-create-custom-catalogs-5):'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择目录工件的基础操作系统层。如本章之前所述，我们将重点关注基于 Kubernetes 的应用程序目录，而不是虚拟机。作为一个简单的示例，**Ubuntu
    18.04** 被选择为基础操作系统层，但您也可以选择**自定义基础镜像**选项。有关更多详细信息，请访问 VAC 产品文档：[https://docs.vmware.com/en/VMware-Application-Catalog/services/main/GUID-get-started-get-started-vmware-application-catalog.html#step-3-create-custom-catalogs-5](https://docs.vmware.com/en/VMware-Application-Catalog/services/main/GUID-get-started-get-started-vmware-application-catalog.html#step-3-create-custom-catalogs-5)：
- en: '![Figure 4.6 – Base OS selection for catalog items](img/B18145_04_06.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.6 – 为目录项选择基础操作系统](img/B18145_04_06.jpg)'
- en: Figure 4.6 – Base OS selection for catalog items
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.6 – 为目录项选择基础操作系统
- en: 'Select the required OSS items from the available options to include in the
    catalog. You may also search for them if required:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从可用选项中选择所需的 OSS 项目以包含在目录中。如果需要，您也可以进行搜索：
- en: '![Figure 4.7 – Select catalog items](img/B18145_04_07.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.7 – 选择目录项](img/B18145_04_07.jpg)'
- en: Figure 4.7 – Select catalog items
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.7 – 选择目录项
- en: 'Add the destination container registry by clicking on the **ADD REGISTRY**
    button to get the required catalog artifacts delivered:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加注册表**按钮，添加目标容器注册表，以将所需的目录工件交付：
- en: '![Figure 4.8 – Add the container registry](img/B18145_04_08.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.8 – 添加容器注册表](img/B18145_04_08.jpg)'
- en: Figure 4.8 – Add the container registry
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.8 – 添加容器注册表
- en: 'Provide the required details for the container registry to allow VAC to push
    catalog artifacts to it:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供所需的容器注册表详细信息，以允许 VAC 将目录工件推送到该注册表：
- en: '![Figure 4.9 – Add registry details](img/B18145_04_09.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.9 – 添加注册表详细信息](img/B18145_04_09.jpg)'
- en: Figure 4.9 – Add registry details
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.9 – 添加注册表详细信息
- en: 'Though *Figure 4**.9* shows the details for GCR, it also supports other registries,
    including Azure Container Registry and Harbor. You can get more information regarding
    other registries at: [https://docs.vmware.com/en/VMware-Application-Catalog/services/main/GUID-get-started-get-started-vmware-application-catalog.html#step-3-create-custom-catalogs-5](https://docs.vmware.com/en/VMware-Application-Catalog/services/main/GUID-get-started-get-started-vmware-application-catalog.html#step-3-create-custom-catalogs-5).'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然*图 4.9* 显示了 GCR 的详细信息，但它也支持其他注册表，包括 Azure 容器注册表和 Harbor。您可以通过以下链接获取有关其他注册表的更多信息：[https://docs.vmware.com/en/VMware-Application-Catalog/services/main/GUID-get-started-get-started-vmware-application-catalog.html#step-3-create-custom-catalogs-5](https://docs.vmware.com/en/VMware-Application-Catalog/services/main/GUID-get-started-get-started-vmware-application-catalog.html#step-3-create-custom-catalogs-5)。
- en: 'Give a name and description to this catalog:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为该目录指定名称和描述：
- en: '![Figure 4.10 – Add name and description for the catalog](img/B18145_04_10.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.10 – 为目录添加名称和描述](img/B18145_04_10.jpg)'
- en: Figure 4.10 – Add name and description for the catalog
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.10 – 为目录添加名称和描述
- en: 'Verify the input summary and submit the catalog request:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证输入摘要并提交目录请求：
- en: '![Figure 4.11 – Submit the catalog request](img/B18145_04_11.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.11 – 提交目录请求](img/B18145_04_11.jpg)'
- en: Figure 4.11 – Submit the catalog request
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.11 – 提交目录请求
- en: After this, we will see a message confirming our catalog request submission.
    It may take about a couple of weeks to review and process this request before
    we start getting our catalog items delivered to our selected container registry
    destination.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，我们将看到一条确认我们目录请求提交的消息。在我们开始将目录项交付到选定的容器注册表目标之前，可能需要大约几周的时间来审核和处理该请求。
- en: That’s it. We have our catalog of OSS tools defined so that we can publish to
    internal consumers for easy and quick access. But how can they access this catalog?
    Let’s check that out in the next section.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样。我们已经定义了 OSS 工具的目录，以便能够将其发布给内部用户，方便快捷地访问。但他们如何访问这个目录呢？让我们在下一节中查看。
- en: Consuming VAC using Kubeapps
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Kubeapps 消费 VAC
- en: In the previous section, we learned how to request an application catalog on
    the VAC portal. Once we start getting our Helm charts and container images delivered
    in our container registry, we can access those tools using Kubeapps, a GUI to
    manage Kubernetes-based software deployments. We discussed Kubeapps in detail
    in the *Components of VAC* section covered previously in this chapter. Let’s see
    how to install and configure it now.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一部分中，我们学习了如何在 VAC 门户上请求应用目录。一旦我们开始从容器注册中心获取 Helm charts 和容器镜像，就可以使用 Kubeapps
    访问这些工具，它是一个用于管理基于 Kubernetes 的软件部署的图形界面。在本章的*VAC 组件*部分中，我们已经详细讨论了 Kubeapps。现在让我们来看如何安装和配置它。
- en: Kubeapps installation
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Kubeapps 安装
- en: Kubeapps is itself a Kubernetes-based deployment to manage other Kubernetes
    deployments that can be deployed using Helm charts and operators. Since we are
    planning to use Kubeapps to consume our VAC-supplied distributions that include
    Helm charts and container images, we will not cover the usage of operators in
    this section. As a deployment topology, we can install Kubeapps on any Kubernetes
    cluster to deploy catalog items on the same or any other Kubernetes clusters and
    their Kubernetes namespaces that are linked with Kubeapps. In this chapter, we
    will use a single Kubernetes cluster to minimize configuration complexity.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Kubeapps 本身是一个基于 Kubernetes 的部署，用于管理其他可以通过 Helm charts 和 operators 部署的 Kubernetes
    部署。由于我们计划使用 Kubeapps 来使用 VAC 提供的发行版，包括 Helm charts 和容器镜像，因此我们在本节中不讨论 operators
    的使用。作为一种部署拓扑结构，我们可以在任何 Kubernetes 集群上安装 Kubeapps，以在同一个或任何其他与 Kubeapps 连接的 Kubernetes
    集群及其命名空间中部署目录项。在本章中，我们将使用一个单一的 Kubernetes 集群，以最小化配置复杂度。
- en: 'We will need to fulfill some requirements to move forward, as they are covered
    previously in the *Prerequisites* section of this chapter. The following steps
    describe the installation and configuration of Kubeapps on a Kubernetes cluster
    with sufficient resources:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要满足一些先决条件，以便继续操作，这些内容在本章的*先决条件*部分中有详细说明。以下步骤描述了在具有足够资源的 Kubernetes 集群上安装和配置
    Kubeapps：
- en: 'Add a Bitnami Helm chart repository to your local Helm library:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 Bitnami Helm chart 仓库添加到本地 Helm 库：
- en: '[PRE0]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create a Kubernetes namespace for Kubeapps:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 Kubeapps 创建一个 Kubernetes 命名空间：
- en: '[PRE1]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Install Kubeapps in the `kubeapps` namespace using a Helm chart:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Helm chart 在`kubeapps`命名空间中安装 Kubeapps：
- en: '[PRE3]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The preceding output is truncated for conciseness. With this, we have Kubeapps
    running in our cluster. Let’s verify it.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的输出为了简洁而被截断了。到此为止，我们已经在集群中运行了 Kubeapps。现在让我们验证一下。
- en: 'Verify the Kubeapps deployment to see if everything is running fine:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证 Kubeapps 的部署，以查看是否一切运行正常：
- en: '[PRE15]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The preceding command should list `pods`, `services`, `deployments`, `replicasets`,
    `statefulsets`, and `jobs` that are not listed here for brevity.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的命令应列出`pods`、`services`、`deployments`、`replicasets`、`statefulsets`和`jobs`，由于篇幅原因这里未列出。
- en: 'Create a temporary service account to access the Kubeapps GUI:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个临时服务账户来访问 Kubeapps GUI：
- en: '[PRE16]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Link the service account with a Kubernetes role to allow required access:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将服务账户与 Kubernetes 角色绑定，以允许所需的访问：
- en: '[PRE18]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Retrieve the access token for the account to log in to the Kubeapps GUI:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取账户的访问令牌，以登录 Kubeapps GUI：
- en: '[PRE20]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This long command will print a long string of characters, which is the token
    that we will use to log in to the Kubeapps GUI. Save this token for future reference.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这个长命令会打印出一长串字符，这就是我们用来登录 Kubeapps GUI 的令牌。请保存此令牌以备将来参考。
- en: Important note
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: The previous three commands to create access permissions for Kubeapps use a
    very primitive approach for simplicity and as an easy learning reference. In a
    production-grade implementation, we may need to use a more sophisticated approach
    to configure real enterprise users who can access Kubeapps in the Kubernetes namespace.
    Such user permissions are generally managed using an external integration with
    either an OIDC or LDAP identity provider. Additionally, using the `cluster-admin`
    role is not a secure approach and should not be used other than for such learning
    purposes.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 前面三个命令用于为 Kubeapps 创建访问权限，它们采用了一种非常原始的方法，以简化操作并作为学习参考。在生产级别的实现中，我们可能需要使用更复杂的方法来配置可以访问
    Kubeapps 的真实企业用户。此类用户权限通常通过与 OIDC 或 LDAP 身份提供者的外部集成来进行管理。此外，使用`cluster-admin`角色并不是一种安全的方法，除非是用于学习目的，否则不应使用该角色。
- en: 'Expose the Kubeapps GUI to access it locally in a browser. For a production-grade
    deployment, the GUI should be assigned a proper domain name and exposed outside
    the Kubernetes cluster using a load balancer. In this step, we will use Kubernetes
    port forwarding for quick and simple access to the deployment:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 公开 Kubeapps GUI，以便在浏览器中本地访问。对于生产级部署，GUI 应该分配一个合适的域名，并通过负载均衡器在 Kubernetes 集群外部公开。在此步骤中，我们将使用
    Kubernetes 端口转发进行快速简单的访问：
- en: '[PRE21]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Access Kubeapps in your local browser using `http://localhost:8080/`. This
    should open the following screen of Kubeapps:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本地浏览器中访问 Kubeapps，使用 `http://localhost:8080/`。这将打开 Kubeapps 的以下界面：
- en: '![Figure 4.12 – Kubeapps GUI – authentication page](img/B18145_04_12.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.12 – Kubeapps GUI – 身份验证页面](img/B18145_04_12.jpg)'
- en: Figure 4.12 – Kubeapps GUI – authentication page
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.12 – Kubeapps GUI – 身份验证页面
- en: 'Access Kubeapps using the token retrieved in *step 7*. Paste the token value
    on the login page and submit. This should open Kubeapps GUI as shown in *Figure
    4**.13*:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 *第 7 步* 中获取的令牌访问 Kubeapps。将令牌值粘贴到登录页面并提交。这应该会打开如 *图 4.13* 所示的 Kubeapps GUI：
- en: '![Figure 4.13 – Kubeapps GUI – initial landing page](img/B18145_04_13.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.13 – Kubeapps GUI – 初始登陆页面](img/B18145_04_13.jpg)'
- en: Figure 4.13 – Kubeapps GUI – initial landing page
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.13 – Kubeapps GUI – 初始登陆页面
- en: Important note
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: The screenshots and steps described in this chapter are based on the presently
    available versions of VAC and Kubeapps. Depending on when this book is read, the
    content and experience could be different based on the future changes incorporated
    into these products.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中描述的截图和步骤基于当前可用的 VAC 和 Kubeapps 版本。根据阅读本书的时间，内容和体验可能会根据将来对这些产品进行的更改有所不同。
- en: As you will see, Kubeapps comes with a configuration to access the publicly
    available generic Bitnami catalog. Once our customer catalog defined on the VAC
    portal is ready, and we start getting its artifacts, we may configure Kubeapps
    to use the same. We will cover the linking of our custom application catalog on
    Kubeapps later in day-two activities.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，Kubeapps 配有配置来访问公开可用的通用 Bitnami 目录。一旦我们在 VAC 门户上定义的客户目录准备好，并且开始获取其工件，我们可以配置
    Kubeapps 使用相同的目录。我们将在第二天活动中涵盖如何将自定义应用程序目录链接到 Kubeapps。
- en: 'With this, we conclude this section of the chapter on getting started with
    VAC and Kubeapps. We have seen how to create a catalog on the VAC portal and install
    Kubeapps in a Kubernetes cluster. In the next section, we will see the following
    items, covering common day-two activities around VAC:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 到此，我们已经完成了本章关于 VAC 和 Kubeapps 入门部分的内容。我们已经了解了如何在 VAC 门户上创建目录，并在 Kubernetes 集群中安装
    Kubeapps。在下一节中，我们将看到以下内容，涵盖 VAC 周围的常见第二天活动：
- en: How to inspect delivered catalog artifacts and obtain required reports
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何检查已交付的目录工件并获取所需的报告
- en: How to link VAC with Kubeapps to publish it for consumption
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将 VAC 与 Kubeapps 连接，以便发布供使用
- en: How to consume catalog items via automation pipeline using Kubeapps
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何通过自动化管道使用 Kubeapps 消费目录项
- en: How to deploy MySQL as a backend service running on the Kubernetes cluster using
    Kubeapps
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 Kubeapps 将 MySQL 部署为运行在 Kubernetes 集群中的后端服务
- en: How to manage catalog items
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何管理目录项
- en: Let’s now learn how to use VAC.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来学习如何使用 VAC。
- en: Common day-two activities with VAC
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与 VAC 相关的常见第二天活动
- en: With the details covered in the previous section of the chapter, we now have
    an OSS tool catalog request placed on the VAC portal and a Kubeapps instance running
    in the Kubernetes cluster. Let’s now review some of the key day-two activities
    that can be performed by the catalog administrator to ensure security and compliance
    of the OSS tool usage, and by the catalog consumers to unleash productivity and
    flexibility to quickly deploy and use these OSS tools in different ways that are
    part of the VAC catalog.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 根据本章前一节中涵盖的细节，我们现在有一个在 VAC 门户上提交的 OSS 工具目录请求，以及一个运行在 Kubernetes 集群中的 Kubeapps
    实例。现在让我们回顾一些目录管理员可以执行的关键第二天活动，以确保 OSS 工具使用的安全性和合规性，以及目录消费者可以执行的活动，以便在 VAC 目录中快速以不同方式部署和使用这些
    OSS 工具，从而释放生产力和灵活性。
- en: Inspecting catalog deliverables
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查目录交付物
- en: 'Once our catalog request is submitted to Vmware using the VAC portal, as we
    covered in the previous section, we can check the status of our catalog deliverables
    using the VAC portal as shown in the following figure under the **My** **Requests**
    tab:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们通过 VAC 门户向 Vmware 提交了目录请求，如前一节所述，我们可以使用 VAC 门户检查我们的目录交付物状态，如下图所示，在 **我的**
    **请求** 标签下：
- en: '![Figure 4.14 – Checking VAC request status](img/B18145_04_14.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.14 – 检查VAC请求状态](img/B18145_04_14.jpg)'
- en: Figure 4.14 – Checking VAC request status
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.14 – 检查VAC请求状态
- en: 'When we have our catalog request completed, we start seeing our delivered artifacts
    under the **My Applications** page, as shown in the following screenshot:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们完成目录请求后，我们开始在**我的应用程序**页面上查看交付的工件，如下图所示：
- en: '![Figure 4.15 – Listing catalog applications on the VAC portal](img/B18145_04_15.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.15 – 在VAC门户上列出目录应用程序](img/B18145_04_15.jpg)'
- en: Figure 4.15 – Listing catalog applications on the VAC portal
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.15 – 在VAC门户上列出目录应用程序
- en: 'Depending on our selection during the catalog creation request, we may see
    Helm charts and their container images, as shown in *Figure 4**.15*. Let’s now
    check the details of the MySQL container image by clicking on the **DETAILS**
    link given for the item on the right. The following screenshot shows the details
    for the MySQL container image:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们在目录创建请求期间的选择，我们可能会看到Helm图表及其容器镜像，如*图 4.15*所示。现在，我们通过点击右侧该项的**详细信息**链接来检查MySQL容器镜像的详细信息。以下截图显示了MySQL容器镜像的详细信息：
- en: '![Figure 4.16 – Details of a catalog item on the VAC portal](img/B18145_04_16.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.16 – VAC门户上的目录项详细信息](img/B18145_04_16.jpg)'
- en: Figure 4.16 – Details of a catalog item on the VAC portal
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.16 – VAC门户上的目录项详细信息
- en: 'We can get the following details from different sections of a catalog item’s
    details page, as shown in *Figure 4**.16*. The numbers in the following list correspond
    to the numbers given in *Figure 4**.16*:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从目录项详细页面的不同部分获取以下详细信息，如*图 4.16*所示。以下列表中的数字对应于*图 4.16*中的数字：
- en: '**Digest**: This is the name and the location of the artifact that is placed
    in our destination container registry that we supplied during catalog creation.'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**摘要**：这是我们在目录创建过程中提供的目标容器注册表中放置的工件的名称和位置。'
- en: '**Consume your Container Image**: This is the Docker command to pull this container
    image into a Docker runtime environment.'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**使用您的容器镜像**：这是Docker命令，用于将此容器镜像拉取到Docker运行时环境中。'
- en: '**Container Tags**: These are different tag alias for this container image
    that we can use in a Kubernetes deployment manifest file to pull this container
    image for running this application on Kubernetes.'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**容器标签**：这些是此容器镜像的不同标签别名，我们可以在Kubernetes部署清单文件中使用这些标签来拉取此容器镜像，以便在Kubernetes上运行该应用程序。'
- en: '**Validation Reports**: This allows us to download the automation test result
    log file that was generated to test this version of MySQL before creating this
    container image.'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**验证报告**：此项允许我们下载自动化测试结果日志文件，该文件在创建此容器镜像之前用于测试此版本的MySQL。'
- en: '**Build Time Reports**: This section contains various container build reports,
    including anti-virus and CVE scan reports and an asset specification (bill of
    material) report containing the list of software with their versions used in the
    container image.'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**构建时间报告**：此部分包含各种容器构建报告，包括病毒扫描和CVE扫描报告以及包含所用软件及其版本列表的资产规范（物料清单）报告。'
- en: '**Release Relationship**: This section shows the dependent Helm charts that
    use this image.'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**发布关系**：此部分显示使用此镜像的依赖Helm图表。'
- en: Like the details of a container image, the details of the corresponding Helm
    chart include required `helm` CLI commands to deploy the chart, test results for
    the chart, asset specification, and container image dependencies.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 与容器镜像的详细信息类似，Helm图表的详细信息包括部署图表所需的`helm` CLI命令、图表的测试结果、资产规范和容器镜像依赖项。
- en: Using the application catalog
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用应用程序目录
- en: After inspecting the required details for the artifacts supplied for our catalog
    items on the VAC portal, it’s time to use them to deploy those tools in our environment.
    There are various ways we can use those container images provided by VAC. Depending
    on the requirement of the tool, we can simply run some tools in our workstation’s
    container runtime environment, such as Docker. However, for an enterprise-grade
    deployment, we need several supporting components to run a tool. For example,
    we saw that all Kubernetes resources were created to deploy and run our Kubeapps
    instance that we deployed previously in this chapter. One possible way to deploy
    such tools is to use deployment automation using custom scripts and CI/CD tools
    such as Jenkins and/or **ArgoCD** using a **GitOps**-based deployment model. Another
    possible option is to use a Kubernetes packaging tool such as Helm charts. A Helm
    chart bundles all required dependencies to deploy and run corresponding objects
    for a tool on a Kubernetes cluster. Using a tool such as Helm charts makes it
    very easy to configure and quickly deploy the tool with all its required components
    with minimal effort and within a few minutes. As we have seen previously, VAC
    allows us to select containers as well as Helm charts for our catalog items wherever
    applicable. As a part of application packaging, Helm charts also allow exposing
    certain configuration properties that we may need to change for different deployments.
    We can use these Helm charts provided by VAC to deploy those tools with our custom
    configuration requirements. For example, for a MySQL database deployment, we can
    change attributes such as its name, login credentials, storage volume size, and
    many more.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查了 VAC 门户上为我们目录项提供的工件所需的详细信息后，现在是时候使用它们在我们的环境中部署这些工具了。我们可以通过多种方式使用 VAC 提供的容器镜像。根据工具的需求，我们可以简单地在工作站的容器运行时环境中运行一些工具，例如
    Docker。然而，对于企业级部署，我们需要多个支持组件来运行工具。例如，我们看到创建了所有 Kubernetes 资源来部署和运行我们在本章中之前部署的
    Kubeapps 实例。部署此类工具的一种可能方式是使用自定义脚本和 CI/CD 工具（如 Jenkins 和/或 **ArgoCD**）通过 **GitOps**
    基于部署模型进行部署。另一种可能的选择是使用 Kubernetes 打包工具，如 Helm charts。Helm chart 将部署和运行工具所需的所有依赖项捆绑到一起，以便在
    Kubernetes 集群上进行部署。使用 Helm charts 等工具使得配置和快速部署工具变得非常简单，所有必需组件都可以在几分钟内以最小的努力完成。正如我们之前看到的，VAC
    允许我们在适用的地方为目录项选择容器和 Helm charts。作为应用程序打包的一部分，Helm charts 还允许暴露某些配置属性，这些属性可能需要根据不同的部署进行更改。我们可以使用
    VAC 提供的这些 Helm charts 来部署这些工具，并根据我们的自定义配置需求进行调整。例如，在 MySQL 数据库部署中，我们可以更改其名称、登录凭据、存储卷大小等属性。
- en: What is GitOps?
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是 GitOps？
- en: 'GitOps upholds the principle that Git is the one and only source of truth.
    GitOps requires the desired state of the system to be stored in version control
    so that anyone can view the history of changes. All changes to the desired state
    are performed through Git *commits*. Source: [https://blogs.vmware.com/management/2020/08/ops-powered-by-git-gitops-in-vrealize-automation.html](https://blogs.vmware.com/management/2020/08/ops-powered-by-git-gitops-in-vrealize-automation.html).'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: GitOps 坚持 Git 是唯一真实来源的原则。GitOps 要求将系统的期望状态存储在版本控制中，以便任何人都可以查看变更历史。所有对期望状态的更改都通过
    Git *提交* 来执行。来源：[https://blogs.vmware.com/management/2020/08/ops-powered-by-git-gitops-in-vrealize-automation.html](https://blogs.vmware.com/management/2020/08/ops-powered-by-git-gitops-in-vrealize-automation.html)。
- en: As we discussed previously, Kubeapps is a tool to deploy and manage our catalog
    of Helm charts that we have configured on VAC. So, let’s check out how we can
    link those Helm charts provided by VAC with our Kubeapps instance that we deployed
    previously in this chapter.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前讨论的，Kubeapps 是一个用于部署和管理我们在 VAC 上配置的 Helm charts 目录的工具。那么，让我们来看一下如何将 VAC
    提供的 Helm charts 与我们在本章中之前部署的 Kubeapps 实例进行链接。
- en: Adding the application catalog to Kubeapps
  id: totrans-218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将应用程序目录添加到 Kubeapps
- en: 'The following steps describe how to configure a new catalog on our Kubeapps
    instance for the Helm charts provided by VAC:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤描述了如何在我们的 Kubeapps 实例上配置 VAC 提供的 Helm charts 的新目录：
- en: 'Obtain the chart repository location where the Helm charts are located. You
    can find the same on the details page of a Helm chart item in your catalog on
    the VAC portal, as shown in the following screenshot:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取 Helm charts 所在的 chart 仓库位置。你可以在 VAC 门户上，查找 Helm chart 项目的详细页面中找到此信息，如下图所示：
- en: '![Figure 4.17 – Getting the Helm chart repository location](img/B18145_04_17.jpg)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.17 – 获取 Helm chart 仓库位置](img/B18145_04_17.jpg)'
- en: Figure 4.17 – Getting the Helm chart repository location
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.17 – 获取Helm chart仓库位置
- en: 'The highlighted URL portion is the location of all the Helm charts for our
    catalog that we defined on the VAC portal. Make a note of this URL as we will
    use it in one of the following steps:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 高亮部分的URL是我们在VAC门户定义的所有Helm chart的存储位置。请记下这个URL，我们将在接下来的步骤中使用它：
- en: 'Generate an API token for the VAC account on the VAC portal, which we will
    use to authenticate our Kubeapps instance to pull the Helm charts for selected
    catalog items. The following sub-steps describe how to generate an API token on
    the VAC portal:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在VAC门户上为VAC账户生成API令牌，我们将使用它来验证我们的Kubeapps实例，以拉取选定目录项的Helm chart。以下子步骤描述了如何在VAC门户上生成API令牌：
- en: 'Go to the **My Account** page on the VAC portal using the drop-down menu in
    the top-right corner, as shown in the following screenshot:'
  id: totrans-225
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用右上角下拉菜单进入VAC门户的**我的账户**页面，如以下截图所示：
- en: '![Figure 4.18 – Go to the VAC My Account settings](img/B18145_04_18.jpg)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.18 – 转到VAC我的账户设置](img/B18145_04_18.jpg)'
- en: Figure 4.18 – Go to the VAC My Account settings
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.18 – 转到VAC我的账户设置
- en: 'Click on the **API** **Tokens** tab:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**API** **令牌**标签：
- en: '![Figure 4.19 – Go to the API Tokens list page](img/B18145_04_19.jpg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.19 – 转到API令牌列表页面](img/B18145_04_19.jpg)'
- en: Figure 4.19 – Go to the API Tokens list page
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.19 – 转到API令牌列表页面
- en: 'If there is already a token listed on this page that has access to the VAC
    service, then you can skip the following steps to generate a new API token and
    jump directly to *step 3* to add a repository in Kubeapps. Otherwise, click on
    the **GENERATE A NEW API TOKEN** link as shown in the following screenshot:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果此页面上已列出了具有访问VAC服务权限的令牌，则可以跳过以下步骤以生成新的API令牌，并直接跳转到*步骤 3*在Kubeapps中添加仓库。否则，点击如以下截图所示的**生成新API令牌**链接：
- en: '-'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '-'
- en: '![Figure 4.20 – Go to the API Tokens configuration page](img/B18145_04_20.jpg)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.20 – 转到API令牌配置页面](img/B18145_04_20.jpg)'
- en: Figure 4.20 – Go to the API Tokens configuration page
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.20 – 转到API令牌配置页面
- en: 'Enter the token configuration, as shown in the following screenshot:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入令牌配置，如以下截图所示：
- en: '![Figure 4.21 – Generate a New API Token for VAC](img/B18145_04_21.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.21 – 为VAC生成新的API令牌](img/B18145_04_21.jpg)'
- en: Figure 4.21 – Generate a New API Token for VAC
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.21 – 为VAC生成新的API令牌
- en: You can change the name and duration of the token to your requirements. However,
    the scope is important to allow access to VAC from Kubeapps. It may not be a read-only
    or support role. You can also generate a generic token that can be used for all
    VMware Cloud Service offerings. However, it will be very broad in nature allowing
    all types of access to all services. Hence, it is not recommended.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以根据需求更改令牌的名称和有效期。但是，作用域对允许从Kubeapps访问VAC至关重要。它不能是只读或支持角色。你也可以生成一个通用令牌，用于所有VMware云服务的所有服务。然而，这将非常宽泛，允许所有类型的访问，因此不推荐使用。
- en: 'Save the generated token for future usage:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存生成的令牌以供将来使用：
- en: '![Figure 4.22 – Save the generated token](img/B18145_04_22.jpg)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.22 – 保存生成的令牌](img/B18145_04_22.jpg)'
- en: Figure 4.22 – Save the generated token
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.22 – 保存生成的令牌
- en: 'Log in to the Kubeapps instance that we deployed and open its configuration
    menu using the top-right corner icon followed by the **App Repositories** option
    as shown in the following screenshot:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到我们部署的Kubeapps实例，并通过右上角的图标打开其配置菜单，然后选择**应用仓库**选项，如以下截图所示：
- en: '![Figure 4.23 – Add the Helm chart repository to Kubeapps](img/B18145_04_23.jpg)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.23 – 将Helm chart仓库添加到Kubeapps](img/B18145_04_23.jpg)'
- en: Figure 4.23 – Add the Helm chart repository to Kubeapps
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.23 – 将Helm chart仓库添加到Kubeapps
- en: 'Click on the **ADD APP REPOSITORY** button to configure the details of a new
    repository:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加应用仓库**按钮以配置新仓库的详细信息：
- en: '![Figure 4.24 – Go to a new repository configuration page](img/B18145_04_24.jpg)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.24 – 转到新的仓库配置页面](img/B18145_04_24.jpg)'
- en: Figure 4.24 – Go to a new repository configuration page
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.24 – 转到新的仓库配置页面
- en: 'Give it a name, add the Helm chart repository URL captured in *step 1*, paste
    the API token generated in *step 2*, select the **Skip TLS Verification** option,
    and click the **INSTALL** **REPO** button:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为其命名，添加在*步骤 1*中捕获的Helm chart仓库URL，粘贴在*步骤 2*中生成的API令牌，选择**跳过TLS验证**选项，然后点击**安装**
    **仓库**按钮：
- en: '![Figure 4.25 – Install the VAC Helm repo in Kubeapps](img/B18145_04_25.jpg)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.25 – 在Kubeapps中安装VAC Helm仓库](img/B18145_04_25.jpg)'
- en: Figure 4.25 – Install the VAC Helm repo in Kubeapps
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.25 – 在Kubeapps中安装VAC Helm仓库
- en: We had to select the **Skip TLS Verification** option, as shown in *Figure 4**.25*,
    as our Kubeapps deployment is not assigned an external facing domain name and
    a TLS certificate. In an enterprise-grade environment, this is not a recommended
    approach.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须选择 **跳过 TLS 验证** 选项，如 *图 4.25* 所示，因为我们的 Kubeapps 部署没有分配外部域名和 TLS 证书。在企业级环境中，这不是推荐的做法。
- en: 'If you get a success message, then the catalog should be integrated with Kubeapps.
    To check that, click on the **Catalog** tab on Kubeapps and select the **demo-catalog**
    option, as shown in the following screenshot:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果收到成功消息，那么目录应已与 Kubeapps 集成。为了确认这一点，请点击 Kubeapps 上的 **Catalog** 标签并选择 **demo-catalog**
    选项，如下截图所示：
- en: '![Figure 4.26 – A newly configured catalog on Kubeapps](img/B18145_04_26.jpg)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.26 – 在 Kubeapps 上新配置的目录](img/B18145_04_26.jpg)'
- en: Figure 4.26 – A newly configured catalog on Kubeapps
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.26 – 在 Kubeapps 上新配置的目录
- en: With this, our Kubeapps deployment is fully integrated with our custom application
    catalog that we created on VAC. Let’s now learn to deploy a MySQL service instance
    from our custom catalog using Kubeapps.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们的 Kubeapps 部署就完全与我们在 VAC 上创建的自定义应用目录集成了。接下来，让我们学习如何使用 Kubeapps 从我们的自定义目录部署
    MySQL 服务实例。
- en: Deploying a service using Kubeapps
  id: totrans-256
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Kubeapps 部署服务
- en: 'In this part, we will deploy a MySQL database instance on our Kubernetes cluster
    using Kubeapps. The following steps describes how to do it:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将使用 Kubeapps 在 Kubernetes 集群上部署一个 MySQL 数据库实例。以下步骤描述了如何操作：
- en: 'Click on the **MySQL** tile that is shown in *Figure 4**.26* to get started
    with the installation on your Kubernetes cluster. We will see the following screen
    after clicking there:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 *图 4.26* 中显示的 **MySQL** 瓷砖，开始在 Kubernetes 集群上进行安装。点击后我们将看到以下屏幕：
- en: '![Figure 4.27 – Deployment instruction page for MySQL on Kubeapps](img/B18145_04_27.jpg)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.27 – Kubeapps 上 MySQL 部署说明页面](img/B18145_04_27.jpg)'
- en: Figure 4.27 – Deployment instruction page for MySQL on Kubeapps
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.27 – Kubeapps 上 MySQL 部署说明页面
- en: This page shows detailed instructions on how to use a MySQL Helm chart. We can
    use these instructions to manually deploy it using the Helm chart command-line
    tool. However, we will see how we can use the Kubeapps GUI for such configuration
    and installation. You can scroll down the page to see the details of all the configuration
    parameters that this Helm chart allows us to change to customize our MySQL database
    instance. By clicking the highlighted **DEPLOY** button in *Figure 4**.27*, we
    get a screen to update these attributes for our custom needs and to trigger the
    installation.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 此页面显示了如何使用 MySQL Helm 图表的详细说明。我们可以使用这些说明，通过 Helm 图表命令行工具手动部署它。然而，我们将展示如何使用 Kubeapps
    图形界面进行这样的配置和安装。您可以向下滚动页面，查看此 Helm 图表允许我们更改的所有配置参数的详细信息，以便定制我们的 MySQL 数据库实例。通过点击
    *图 4.27* 中高亮显示的 **DEPLOY** 按钮，我们可以进入一个屏幕来更新这些属性，以满足我们的定制需求并触发安装。
- en: 'Depending on the type of Helm chart, we may get a form like a GUI to modify
    some of the most common attributes for the deployment. For example, the following
    form in *Figure 4**.28* for MySQL DB instance configuration shows that we can
    select deployment architecture and the size of the primary and secondary database
    storage volumes. But we will use a detailed YAML-based configuration approach
    to demonstrate that as well. So, click on the highlighted **YAML** tab in the
    following screenshot to move forward:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据 Helm 图表的类型，我们可能会看到一个类似图形界面的表单，用于修改一些最常见的部署属性。例如，*图 4.28* 中的 MySQL 数据库实例配置表单显示我们可以选择部署架构以及主副数据库存储卷的大小。但我们也将使用基于
    YAML 的详细配置方法来展示这一点。所以，请点击以下屏幕截图中高亮显示的 **YAML** 标签以继续操作：
- en: '![Figure 4.28 – Helm configuration form for MySQL DB on Kubeapps](img/B18145_04_28.jpg)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.28 – Kubeapps 上 MySQL 数据库的 Helm 配置表单](img/B18145_04_28.jpg)'
- en: Figure 4.28 – Helm configuration form for MySQL DB on Kubeapps
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.28 – Kubeapps 上 MySQL 数据库的 Helm 配置表单
- en: 'Select the destination Kubernetes namespace, update the **YAML** configuration,
    and deploy the service:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择目标 Kubernetes 命名空间，更新 **YAML** 配置，并部署服务：
- en: '![Figure 4.29 – Detailed Helm chart configuration for MySQL DB deployment using
    Kubeapps](img/B18145_04_29.jpg)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.29 – 使用 Kubeapps 部署 MySQL 数据库的详细 Helm 图表配置](img/B18145_04_29.jpg)'
- en: Figure 4.29 – Detailed Helm chart configuration for MySQL DB deployment using
    Kubeapps
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.29 – 使用 Kubeapps 部署 MySQL 数据库的详细 Helm 图表配置
- en: Section 1 in *Figure 4.29* shows where we can select the destination for this
    installation. As discussed before, we may use Kubeapps to deploy Helm charts in
    many other connected Kubernetes clusters and their namespaces depending on the
    Kubeapps configurations and the privileges of the Kubeapps user on those clusters
    and namespaces. In this case, we have only one option – **default** – that corresponds
    to the Kubernetes cluster where Kubeapps is deployed. Similarly, we may also select
    or create a namespace for this deployment if required.
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*图 4.29* 中的第 1 部分显示了我们可以选择此安装目标位置的位置。如前所述，我们可以使用 Kubeapps 在许多其他连接的 Kubernetes
    集群及其命名空间中部署 Helm charts，具体取决于 Kubeapps 配置以及 Kubeapps 用户在这些集群和命名空间上的权限。在这种情况下，我们只有一个选项
    —— **默认** —— 它对应的是 Kubeapps 所部署的 Kubernetes 集群。同样，如果需要，我们还可以选择或创建一个命名空间用于此部署。'
- en: Section 2 in *Figure 4.29* shows the YAML configuration for the Helm chart,
    where we may customize our deployment configuration. The deployment used in this
    book has only changed for user credentials, keeping all other attributes to their
    default values to keep it simple. Once the required configuration changes are
    done, we can verify them using the **Changes** tab to ensure there are only intended
    changes in the deployment configuration.
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*图 4.29* 中的第 2 部分显示了 Helm chart 的 YAML 配置，在这里我们可以自定义部署配置。本书中使用的部署仅更改了用户凭据，其他所有属性保持默认值，以保持配置简单。一旦完成所需的配置更改，我们可以通过
    **更改** 选项卡验证它们，以确保部署配置中仅有预期的更改。'
- en: Once the required changes are made, section 3 in *Figure 4.29* shows the button
    to trigger the deployment on our Kubernetes cluster.
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完成所需更改后，*图 4.29* 中的第 3 部分显示了触发部署到我们 Kubernetes 集群的按钮。
- en: 'We will get the following page after triggering the Helm chart deployment to
    update the status of the installation:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 触发 Helm chart 部署以更新安装状态后，我们将看到以下页面：
- en: '![Figure 4.30 – MySQL DB deployment status on Kubeapps](img/B18145_04_30.jpg)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.30 – MySQL 数据库在 Kubeapps 上的部署状态](img/B18145_04_30.jpg)'
- en: Figure 4.30 – MySQL DB deployment status on Kubeapps
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.30 – MySQL 数据库在 Kubeapps 上的部署状态
- en: '*Figure 4**.30* contains the following details:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4.30* 包含以下详细信息：'
- en: Section 1 shows the different buttons to perform the life cycle operations for
    the deployment, including upgrading it to a newer version of MySQL, rolling back
    to a previous version, or deleting the deployment if not required. The button
    triggers their corresponding Kubernetes Deployment life cycle operations behind
    the scenes.
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第 1 部分显示了用于执行部署生命周期操作的不同按钮，包括将其升级到 MySQL 的更新版本、回滚到先前版本或删除不需要的部署。点击按钮会触发它们对应的
    Kubernetes 部署生命周期操作。
- en: Section 2 shows the number of healthy running pods for our deployment.
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第 2 部分显示了我们的部署中健康运行的 pod 数量。
- en: Section 3 shows the authentication credentials that were provided during the
    installation configuration step covered previously, as shown in *Figure 4.29*.
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第 3 部分显示了在之前的安装配置步骤中提供的身份验证凭据，如 *图 4.29* 所示。
- en: Section 4 shows different useful tips and details for using the deployed tool.
    For example, in our case, it shows how to connect to the MySQL DB instance deployed
    here.
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第 4 部分显示了使用已部署工具的一些有用提示和细节。例如，在我们的案例中，它显示了如何连接到此处部署的 MySQL 数据库实例。
- en: Section 5 shows the different Kubernetes resources that were deployed as part
    of this installation. We can view details of the resources by clicking on their
    corresponding tabs.
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第 5 部分显示了作为此安装的一部分部署的不同 Kubernetes 资源。我们可以通过点击相应的标签来查看资源的详细信息。
- en: Section 6 shows the final installation configuration that was used to deploy
    this instance of MySQL DB. We can save the YAML configuration in a file for future
    usage to deploy the same type of MySQL instance again.
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第 6 部分显示了用于部署该 MySQL 数据库实例的最终安装配置。我们可以将 YAML 配置保存到文件中，以便以后使用该配置重新部署相同类型的 MySQL
    实例。
- en: With this, we have covered the required details to see how we can use Kubeapps
    to consume a custom application catalog created using VAC to quickly deploy several
    OSS tools in minutes and in a self-service way. Such a setup given to developers
    to deploy required application backend services can boost their productivity,
    reduce overall application development time, and as a result, improve an enterprise’s
    innovation speed. And using Kubeapps and VAC is not just for developers but also
    for DevOps, platform, and infrastructure engineers to deploy and use many popular
    OSS tools using container images and Helm charts delivered from a trusted source.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些内容，我们已经涵盖了如何使用 Kubeapps 来消费通过 VAC 创建的自定义应用程序目录，从而以自助服务的方式快速部署多个 OSS 工具的详细信息。将这样的设置提供给开发人员以部署所需的应用程序后端服务，可以提高他们的生产力，减少整体应用程序开发时间，从而提高企业的创新速度。而且，使用
    Kubeapps 和 VAC 不仅是为了开发人员，也适用于 DevOps、平台和基础设施工程师，他们可以使用来自受信来源的容器镜像和 Helm 图表来部署和使用许多流行的
    OSS 工具。
- en: Let’s now visit one more day-two activity around VAC that the catalog administrators
    will need to perform – updating the catalog on the VAC portal.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们再来看看 VAC 的另一个第二天活动，目录管理员需要执行的活动——在 VAC 门户上更新目录。
- en: Updating the application catalog
  id: totrans-283
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新应用程序目录
- en: Earlier in the chapter, we saw, as a part of day-two activities, how to obtain
    different reports and logs for the supplied artifacts from the VAC portal. Then
    we covered how to consume a catalog of OSS tools that were supplied by VAC using
    either an automation pipeline or Kubeapps. Now let’s visit the last major day-two
    activity around VAC, which is to update the catalog items.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章前面，我们看到，作为第二天活动的一部分，如何从 VAC 门户获取供应的工件的不同报告和日志。然后我们讲解了如何使用自动化流水线或 Kubeapps
    来消费 VAC 提供的 OSS 工具目录。现在，让我们来看看关于 VAC 的最后一个主要第二天活动——更新目录项目。
- en: Adding new catalog items
  id: totrans-285
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加新目录项目
- en: 'To add new OSS applications to the corporate catalog, catalog administrators
    can go to their corporate VAC account using VMware Cloud Services credentials.
    Once on the VAC portal, the catalog administrators can select the **ADD NEW APPLICATIONS**
    button under the **Applications** section, as shown in *Figure 4**.31*:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 若要将新的 OSS 应用程序添加到企业目录中，目录管理员可以使用 VMware Cloud Services 凭证访问其企业 VAC 账户。进入 VAC
    门户后，目录管理员可以在**应用程序**部分选择**添加新应用程序**按钮，如*图 4.31*所示：
- en: '![Figure 4.31 – Add a new item in the catalog on the VAC portal](img/B18145_04_31.jpg)'
  id: totrans-287
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.31 – 在 VAC 门户上添加目录新项目](img/B18145_04_31.jpg)'
- en: Figure 4.31 – Add a new item in the catalog on the VAC portal
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.31 – 在 VAC 门户上添加目录新项目
- en: 'The steps to add new catalog items after clicking the highlighted button in
    *Figure 4**.31* are the same as we covered during the creation of the new catalog
    earlier in this chapter:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 点击*图 4.31*中突出显示的按钮后添加新目录项目的步骤与我们在本章前面创建新目录时讲解的步骤相同：
- en: '![Figure 4.32 – Request status tracking on the VAC portal](img/B18145_04_32.jpg)'
  id: totrans-290
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.32 – 在 VAC 门户上请求状态跟踪](img/B18145_04_32.jpg)'
- en: Figure 4.32 – Request status tracking on the VAC portal
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.32 – 在 VAC 门户上请求状态跟踪
- en: Newly added items will appear under **My Requests**, as shown in *Figure 4**.32*.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 新添加的项目将出现在**我的请求**下，如*图 4.32*所示。
- en: Making additional catalog changes
  id: totrans-293
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 做出额外的目录更改
- en: Other than adding new items in the catalog, we may also need to remove unwanted
    tools from it, update the base OS layer, update destination repository details,
    and include/exclude Helm charts from the listed items. At the time of writing
    this book, all these operations can only be performed by contacting VAC support
    as the VAC portal does not currently provide an interface to do it in a self-service
    manner.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 除了在目录中添加新项目外，我们还可能需要从目录中移除不需要的工具，更新基础操作系统层，更新目标存储库详细信息，以及包括/排除 Helm 图表。如果在撰写本书时，所有这些操作只能通过联系
    VAC 支持来执行，因为 VAC 门户目前未提供自助服务接口来执行这些操作。
- en: With this, we have covered most of the day-two activities around VAC. Let’s
    recap to summarize our learning from this chapter.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们就涵盖了 VAC 的大部分第二天活动。让我们回顾一下，总结一下我们在本章中的学习内容。
- en: Summary
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we saw that the popularity of using OSS tools has dramatically
    increased in recent years. There are several mature OSS tools available today
    that many organizations confidently use in their production environments. Also,
    running software such as containers on Kubernetes alongside containerized client
    applications is a quick way to equip the applications with appropriate backend
    technologies. But using container images available on public container registries
    such as Docker Hub is not a secure way of deploying such OSS tools. And hence,
    most organizations do not encourage such practices and try to employ some internal
    mechanisms to generate internally curated container images for such OSS consumption.
    Having such efforts undertaken internally not only wastes a lot of resources but
    also discourages developer teams from experimenting with various tools or wasting
    their productivity in waiting for getting them ready for consumption. And that
    is where VAC comes into the picture. We saw how VAC can handle such challenges
    by providing a way to curate a custom catalog of required OSS tools that can be
    consumed internally with full confidence.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到近年来使用开源软件（OSS）工具的普及程度显著增加。如今，有几款成熟的开源软件工具，许多组织在其生产环境中自信地使用它们。此外，在 Kubernetes
    上运行软件，如容器，与容器化的客户端应用程序一起运行，是为应用程序配备适当后端技术的快速方法。但是，使用公共容器注册中心（如 Docker Hub）上可用的容器镜像并不是部署这些开源软件工具的安全方式。因此，大多数组织不鼓励这种做法，并试图采用一些内部机制来生成专门用于开源软件消费的内部管理容器镜像。将这些工作放在内部进行，不仅浪费大量资源，还会使开发团队不愿意尝试各种工具，或者浪费生产力等待这些工具准备好供使用。这时，VAC
    就派上了用场。我们看到 VAC 如何通过提供一种方式，帮助我们策划定制的所需开源软件工具目录，确保它们可以在内部安全地使用。
- en: We also learned how VAC works and what its key components are. Following this,
    we learned how we can get started with VAC to define a catalog and set up Kubeapps
    to consume the Helm charts and container images delivered under that custom catalog.
    And finally, we went through some of the key day-two activities around catalog
    consumption and management. We saw how quickly we can deploy an instance of MySQL
    database using its Helm chart supplied as a part of the catalog. We also reviewed
    how catalog administrators can check out and obtain copies of the CVE scanning
    report, anti-virus scan logs, test logs, and asset specification (bill of material)
    for all the container images and Helm charts delivered through the VAC service.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学习了 VAC 的工作原理及其关键组件。接下来，我们学习了如何开始使用 VAC 来定义一个目录，并设置 Kubeapps 来消费在该定制目录下提供的
    Helm 图表和容器镜像。最后，我们了解了一些关于目录消费和管理的关键日常操作。我们看到如何通过该目录提供的 Helm 图表，快速部署 MySQL 数据库实例。我们还回顾了目录管理员如何查看并获取
    CVE 扫描报告、病毒扫描日志、测试日志和所有通过 VAC 服务交付的容器镜像和 Helm 图表的资产规范（物料清单）副本。
- en: After seeing how to build our apps quickly with the vast choice of OSS tools
    to be used as backends for our apps, in the next chapter, we will learn how to
    build and manage the API endpoints exposed by our applications using the Tanzu
    application tools.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 在看到如何利用丰富的开源软件工具选择，快速构建我们的应用程序并将其作为后端使用后，在下一章中，我们将学习如何使用 Tanzu 应用程序工具来构建和管理由我们应用程序暴露的
    API 接口。

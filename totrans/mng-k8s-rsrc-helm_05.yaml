- en: '5'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Helm Dependency Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you may recall from [*Chapter 4*](B17979_04.xhtml#_idTextAnchor139), *Scaffolding
    a New Helm Chart*, the Helm chart we are developing, `guestbook`, will deploy
    two primary components. The first is a Redis backend, which is used to persist
    a list of messages. The second component is the frontend, where the user enters
    the messages in a text box. In this chapter, we will focus on updating our Helm
    chart to deploy the first major component – Redis.
  prefs: []
  type: TYPE_NORMAL
- en: To deploy Redis, you may assume that we will need to make vast modifications
    to our existing `guestbook` chart. However, this is not necessarily the case.
    There are many Redis Helm charts available in Artifact Hub, and as a result, we
    can use the dependency management features of Helm and declare one of those charts
    as a dependency. Then, when the `guestbook` chart has been installed in a Kubernetes
    cluster, the dependency is also installed. By declaring Redis as a dependency,
    we can reduce the amount of effort required to create the backend for our application.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will explore how Helm manages dependencies. Then, we will
    use what we have learned to incorporate a Redis dependency in our Helm chart.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Declaring chart dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The dependencies map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading chart dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conditional dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Altering dependency names and values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating the guestbook Helm chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cleaning up
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this chapter, you will require the following tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '`minikube`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kubectl`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`helm`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`git`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will use minikube to explore several examples throughout this chapter, so
    now is a good time to start your minikube environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once minikube has started, create a new namespace for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Throughout this chapter, we will follow several examples to gain a better understanding
    of how chart dependencies work in practice. Ensure that you clone the sample repository
    to follow along with the examples. To clone the repository, run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: With the repository cloned, let’s continue to the next section to begin learning
    about Helm chart dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Declaring chart dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Chart dependencies are used to install another chart’s resources that a Helm
    chart (referred to as the `wordpress` chart to install both the WordPress application
    instance and a MariaDB backend. You may be surprised to learn that the MariaDB
    database that was installed was not a native WordPress chart resource – it was
    a dependency! We can confirm this fact by running the `helm show chart` command
    to view the dependencies declared in the `wordpress Chart.yaml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In the output, you’ll see the `dependencies` map, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Here, you can see that `mariadb` is the first dependency to be listed. The second
    dependency, `memcached`, is an in-memory key/value pair database and was not installed
    when we deployed WordPress in [*Chapter 3*](B17979_03.xhtml#_idTextAnchor083),
    *Installing Your First App With Helm*, as it depends on the `memcached.enabled`
    value being set to `true` (this value is `false` by default). The third dependency,
    `common`, is a library chart. We will explore library charts in greater detail
    in [*Chapter 6*](B17979_06.xhtml#_idTextAnchor167), *Understanding Helm Templates*.
  prefs: []
  type: TYPE_NORMAL
- en: The WordPress dependencies listed previously are examples of what you may see
    in other `Chart.yaml` files. Let’s look at all possible dependency-related `Chart.yaml`
    fields to understand how to declare chart dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: The dependencies map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `dependencies` map within `Chart.yaml` supports many different fields for
    declaring dependencies and altering their behavior. Let’s look at the fields that
    are included in this map:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Field** | **Description** | **Required?** |'
  prefs: []
  type: TYPE_TB
- en: '| Name | The name of the dependency chart | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Repository | The location where the dependency chart resides | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Version | The chart dependency version | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Condition | A Boolean value that determines whether the dependency should
    be included or not | No |'
  prefs: []
  type: TYPE_TB
- en: '| Tags | A list of Boolean values that determine whether the chart should be
    included or not | No |'
  prefs: []
  type: TYPE_TB
- en: '| import-values | A mapping of source values to parent values | No |'
  prefs: []
  type: TYPE_TB
- en: '| Alias | An alternative name to give the dependency | No |'
  prefs: []
  type: TYPE_TB
- en: Table 5.1 – The dependencies fields in Chart.yaml
  prefs: []
  type: TYPE_NORMAL
- en: The minimum required fields in the `dependencies` map are `name`, `repository`,
    and `version`. We can see each of these being used in the WordPress `Chart.yaml`
    file, where the first dependency was called `mariadb`, the repository was [https://protect-eu.mimecast.com/s/ax_4C5lrwTkYXJhOWg2e?domain=raw.githubusercontent.com](https://protect-eu.mimecast.com/s/ax_4C5lrwTkYXJhOWg2e?domain=raw.githubusercontent.com),
    and the version was `9.x.x`. We will learn more about these three fields in the
    *Downloading chart dependencies* section.
  prefs: []
  type: TYPE_NORMAL
- en: The `condition` and `tags` fields are used to conditionally include dependencies
    based on the settings of specific values. `mariadb`, the first dependency of the
    WordPress chart, sets the condition field to `mariadb.enabled`, and its third
    dependency (`common`) uses a tag called `bitnami-common`. We will explore conditional
    dependencies with these settings in the *Conditional dependencies* section.
  prefs: []
  type: TYPE_NORMAL
- en: The remaining fields, `alias` and `import-values`, provide methods for manipulating
    the values of a dependency chart. We will learn more about these fields in the
    *Altering dependency names and values* section.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve provided a high-level overview of each of the dependency-related
    fields, let’s learn how to download dependencies declared in `Chart.yaml`. Then,
    we will dive into using each field while covering several example scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading chart dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Chart dependencies can be viewed and downloaded using the `helm dependency`
    subcommands listed in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Command** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `helm dependency list` | Lists the dependencies for the given chart. |'
  prefs: []
  type: TYPE_TB
- en: '| `helm dependency update` | Downloads the dependencies listed in `Chart.yaml`
    and generates a `Chart.lock` file. |'
  prefs: []
  type: TYPE_TB
- en: '| `helm dependency build` | Downloads the dependencies listed in `Chart.lock`.
    If the `Chart.lock` file is not found, then this command will mirror the behavior
    of the `helm dependency update` command. |'
  prefs: []
  type: TYPE_TB
- en: 'Let’s explore these commands by using the example Helm charts located in the
    `chapter5/examples` folder of this book’s GitHub repository; we cloned these at
    the beginning of this chapter. We’ll start by using the `basic-fields` chart:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the `basic-fields` chart located in `chapter5/examples/basic-fields`,
    list the chart’s declared dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You’ll see an output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – An example helm dependency list output'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.1_B17979.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.1 – An example helm dependency list output
  prefs: []
  type: TYPE_NORMAL
- en: The `helm dependency list` command is used to give us a quick look at a chart’s
    declared dependencies, as well as their download status. From the preceding output,
    you can see that the `basic-fields` chart declares one dependency, `mariadb`,
    and that its status is currently `missing`. When the status is labeled `missing`,
    it means that you have not downloaded that dependency yet, so the chart cannot
    be installed yet. Now, let’s download the dependency.
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the `basic-fields` chart’s dependencies by using the `helm dependency
    update` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You’ll see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.2 – The output of helm dependency update'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.2_B17979.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.2 – The output of helm dependency update
  prefs: []
  type: TYPE_NORMAL
- en: Run the `helm dependency list` command to confirm that the dependency has been
    downloaded. For brevity, you may want to run this command as `helm dep list` since
    `helm dep` is a shorthand spelling of `helm dependency`. We will continue to use
    `helm dependency` throughout this book for clarity, but feel free to use the shorthand
    spelling to reduce typing effort.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Back to the task at hand, let’s confirm that the download was successful by
    running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see an output similar to what we saw previously, except that the status
    has been updated to `ok`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.3 – The updated helm dependency list status'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.3_B17979.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.3 – The updated helm dependency list status
  prefs: []
  type: TYPE_NORMAL
- en: When `helm dependency update` is successful, you will see the dependency’s status
    turn to `ok`, but you will also see a couple of new files appear in your chart’s
    directory. First, you will see that the dependency chart has been downloaded under
    a newly created `charts/` folder, and you will also see a `Chart.lock` file.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at these new files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `ls` command to view the downloaded dependency:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, dependencies are downloaded in the form of gzip archives with
    `.tgz` file extensions. The filename contains the dependency name as well as its
    version.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `cat` command to view the generated `Chart.lock` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.4 – The generated Chart.lock file'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.4_B17979.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.4 – The generated Chart.lock file
  prefs: []
  type: TYPE_NORMAL
- en: The `Chart.lock` file is generated upon running `helm dependency update`, and
    it contains a list of dependencies, such as the `Chart.yaml` file. However, unlike
    `Chart.yaml`, the `Chart.lock` file is used to lock in the dependency versions
    so that the same versions can be downloaded on other machines.
  prefs: []
  type: TYPE_NORMAL
- en: 'The impact that `Chart.lock` has is not profound in the `basic-fields` chart
    because the MariaDB version is already statically, set at `9.5.0`. However, take
    a look at the `wildcard-version` chart located under `chapter5/examples/wildcard-version`.
    Within this directory, the version of MariaDB is set to `9.x.x`, as shown in the
    following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The version, `9.x.x`, is a wildcard, and it tells Helm to download the latest
    minor and patch versions under major release 9 while assuming a SemVer format
    of `major.minor.patch`. If the version was specified as 9.5.x, Helm would download
    the latest patch release under major version 9 and minor version 5.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s use the `wildcard-version` chart to understand how wildcards play a more
    important role in the `Chart.lock` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `helm dependency update` command to download the `wildcard-version`
    chart’s dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'View the generated `Chart.lock` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Notice that the MariaDB version in `Chart.lock`, `9.8.1`, is different than
    the version in `Chart.yaml`, which was 9.x.x:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.5 – The Chart.lock file when using a wildcard dependency version'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.5_B17979.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.5 – The Chart.lock file when using a wildcard dependency version
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, you can see the impact that `Chart.lock` has more clearly. Since version
    9.x.x was specified in the `Chart.yaml` file, Helm downloads the latest 9.x.x
    release, and the resulting `Chart.lock` was generated to lock in version 9.8.1,
    which was the latest at the time `helm dependency update` was run. However, what
    happens if dependencies need to be redownloaded or if the `charts/` folder needs
    to be regenerated? If you run `helm dependency update` again, you run the risk
    that the latest 9.x.x release is different than 9.8.2, which may cause incompatibility
    issues. To address this risk, you can use the `helm dependency build` command.
    Let’s see this command in action:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Delete the `charts/` directory under `wildcard-version`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run `helm dependency build` to redownload the MariaDB version specified in
    `Chart.lock`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that version 9.8.1 was redownloaded to the charts`/` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this section, we walked through downloading dependencies using the `helm
    dependency` subcommands. However, the examples we have seen so far have always
    resulted in dependencies being downloaded. Sometimes, you will want to conditionally
    include or exclude dependencies based on user input. We will explore this concept
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating conditionals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Conditional dependencies can be created by using the `condition` and `tags`
    fields of the `dependencies` map. The `condition` field is used to list `Boolean`
    values that, if present, toggle the inclusion of the dependency. Let’s explore
    this field first by looking at the `condition-example` chart located under `chapter5/examples/condition-example`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Observe the `Chart.yaml` file located at `chapter5/examples/condition-example/Chart.yaml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Notice that the last line of `Chart.yaml` in the preceding snippet uses the
    `condition: mariadb.enabled` setting. This setting allows users to set a value
    called `mariadb.enabled` to either `true` or `false`. If the value evaluates to
    `true`, the MariaDB dependency will be included. If `false`, MariaDB will not
    be included. By default, if `mariadb.enabled` does not exist, then this condition
    will have no effect, and MariaDB will be included.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The best practice for setting a condition is to follow a `chartname.enabled`
    value format, where each dependency has a unique condition, depending on the dependency’s
    name. This allows for a more intuitive values schema. However, if necessary, you
    can specify multiple values for a condition by using a comma-separated expression,
    like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: When a condition is a comma-delimited list, the first value is used if it exists,
    and the rest are ignored. Otherwise, if the first value does not exist, then subsequent
    values in the list are used to fall back on.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s continue with this example to see the use of the `condition` property
    in action.
  prefs: []
  type: TYPE_NORMAL
- en: 'Observe the `condition-example` chart’s `values.yaml` file, which includes
    the `mariadb.enabled` value by default:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, `mariadb.enabled` defaults to `true`, so we can expect to see
    MariaDB resources created in Helm’s output. Let’s verify that this is the case.
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the `condition-example` chart’s dependencies using the `helm dependency
    update` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the `condition-example` chart in your minikube cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that the MariaDB-related resources were created during the installation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You should see a lengthy output of strings containing `mariadb`.
  prefs: []
  type: TYPE_NORMAL
- en: As expected, MariaDB was installed because the `mariadb.enabled` value was set
    to `true`. Let’s set this value to `false` next and verify that MariaDB has been
    excluded.
  prefs: []
  type: TYPE_NORMAL
- en: 'Upgrade the `conditional-example` release by setting `mariadb.enabled` to `false`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that the MariaDB-related resources were excluded after the upgrade:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You should not see any output.
  prefs: []
  type: TYPE_NORMAL
- en: The `condition` setting is the most common way to conditionally include dependencies
    within your Helm charts. However, there is a second setting you can use as well
    that we will showcase called `tags`. Whereas `condition` is best used for enabling
    individual dependencies using the `chartname.enabled` format, `tags` is used to
    enable or disable one or more dependencies by associating each dependency with
    descriptive labels.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s use the `tags-example` chart located in `chapter5/examples/tags-example`
    to understand how tags can define conditional dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'Observe the `Chart.yaml` file for the `tags-example` chart located in `chapter5/examples/tags-example/Chart.yaml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As you can see, the `tags-example` chart defines two different dependencies:
    `mariadb` and `memcached`. Both `mariadb` and `memcached` share the `backend`
    tag, while `mariadb` also has the `database` tag; `memcached` has the `cache`
    tag separately. Let’s explore how these tags are used by checking the chart’s
    `values.yaml` file.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Observe the `tags-example` chart’s `values.yaml` file. Notice the usage of
    the `tags` map at the end of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Given the values file for the `tags-example` chart, you can see that the backend
    tag has been enabled. Since both `mariadb` and `memcached` share the same `backend`
    tag, both dependencies are enabled by default (similarly, if the `tags` map was
    omitted, both dependencies would also be included). To verify this ascertain,
    we can upgrade our previous `conditional-example` release using the `tags-example`
    chart.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `helm upgrade` command to upgrade `conditional-example` using the contents
    from the `tags-example` chart:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that both `mariadb` and `memcached` were installed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: While both commands should show large amounts of output, the presence of a match
    confirms that both dependencies were installed.
  prefs: []
  type: TYPE_NORMAL
- en: By using the same tag across multiple dependencies, you can conveniently include
    or exclude dependencies within your chart. Imagine, however, that you only wanted
    to include `mariadb` within the `tags-example` chart. While it would be intuitive
    to believe you could simply set `tags.database` to `true` and `tags.cache` to
    `false`, this would not have any effect because `tags.backend` already defaults
    to `true`. If one tag is true, then the dependency is included, even if the other
    tags are set to false.
  prefs: []
  type: TYPE_NORMAL
- en: To address this issue, you can override `tags.backend` to `false`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Upgrade the `conditional-example` release so that it includes `mariadb` and
    excludes `memcached`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notice that we have passed `--set tags.backend=false` first to ensure that none
    of the `memcached` conditions evaluate to true.
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify that `mariadb` was included during the upgrade:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command should return a large amount of output.
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify that `memcached` was excluded during the upgrade:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command should not return any output.
  prefs: []
  type: TYPE_NORMAL
- en: The `condition` and `tags` fields both provide a robust set of options for conditionally
    including dependencies within your Helm charts. Keep in mind that you can also
    use both of these options together, but `condition` always overrides `tags`. This
    means that if all tags evaluate to true, and if any condition evaluates to false,
    then the condition will override the tags, and the dependency will not be included.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a final step before advancing to the next topic, uninstall the `conditional-example`
    release:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Next, let’s discuss the options available for altering how dependencies and
    their values are referenced.
  prefs: []
  type: TYPE_NORMAL
- en: Altering dependency names and values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you include a dependency within a chart, you will most likely need to alter
    some of its values. One way to alter a dependency’s values is to override them
    under a map whose root has the same name as the dependency.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the `basic-fields` chart located under `chapter5/examples/basic-fields`.
    This chart contains one dependency in the `Chart.yaml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'To override the values from the `mariadb` chart, you could incorporate a values
    structure, similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: This will override the `image.registry`, `image.repository`, and `image.tag`
    values from the `mariadb` chart.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s experiment with overriding dependency values by completing a hands-on
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the `basic-fields` chart located in `chapter5/examples/basic-fields`.
    Override MariaDB’s `image.tag` value to deploy a different tag for the `mariadb`
    image than the default:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that the `latest` tag was applied:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Uninstall the Helm release:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Nesting values in this fashion is the simplest and most common way to override
    the values of dependencies. However, the `dependencies` map provides a configuration
    for altering the root’s name – `alias`.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s run through an example to understand how `alias` can be used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Observe the `Chart.yaml` file of the `alias-example` chart located in `chapter5/examples/alias-example/Chart.yaml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'From the preceding `Chart.yaml` snippet, you can see that `alias-example` has
    two nearly identical MariaDB dependencies. This is the best use case for using
    `alias`. Since there are multiple MariaDB dependencies, Helm needs to be able
    to distinguish between the two. By using `alias`, you can give each identical
    dependency a unique name. Then, you can override values from each specific dependency.
    Let’s explore `alias`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the Helm chart by overriding the `image.tag` value for each MariaDB
    instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that each database’s tag was applied:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Uninstall the Helm release:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In general, when you are working with unique dependencies, you will not need
    to use `alias`. However, when you are working with multiple invocations of the
    same dependency, `alias` is an excellent way to manage and override values from
    each invocation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Besides `alias`, the `dependencies` map in the `Chart.yaml` file provides one
    additional property for altering how values are managed for dependencies – `import-values`.
    The `import-values` setting is used to alter how dependency values are propagated
    to a parent chart. It comes in two different formats: `exports` and `child-parent`.
    The `exports` format is only applicable when dependency charts contain the `exports`
    map within its values file. Imagine that a dependency chart contains the following
    values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the `import-values` setting on the parent chart, you could import each
    of the image-related values underneath `exports`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Using `import-values` in `exports` format would result in the image-related
    values being propagated, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Compare this with the way these dependency values would be propagated by default,
    without `import-values`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, using `import-values` resulted in a less complex propagation
    with fewer deeply nested values.
  prefs: []
  type: TYPE_NORMAL
- en: 'The other format of `import-values` is the `child-parent` format. This format
    does not require dependency charts (referred to as `exports`, and it is especially
    useful for importing deeply nested values. Consider the following dependency chart,
    which contains the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'In the parent chart, you can import the image-related values using the `child-parent`
    format of `import-values`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'This will propagate the dependency values so that each value under `common.deployment.image`
    is mapped directly under `image` in the parent chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Once again, by using the `import-values` setting, you can simplify how dependency
    values are propagated into the parent chart.
  prefs: []
  type: TYPE_NORMAL
- en: One important detail to note is that, when using `import-values`, you cannot
    override the values that you are importing. If you need to override values from
    the dependency, those values should not be imported using `import-values`.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have explored each of the different settings involved in Helm dependency
    management, let’s finish this chapter by updating our `guestbook` chart with a
    Redis dependency to create the backend.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the guestbook Helm chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Similar to how we searched Artifact Hub to locate a WordPress chart in [*Chapter
    3*](B17979_03.xhtml#_idTextAnchor083), *Installing Your First App with Helm*,
    we need to search for a Redis chart so that it can be used as a dependency. Let’s
    search for a Redis chart:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following command to search for Redis charts from Artifact Hub:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The first chart that’s displayed is Bitnami’s Redis chart. We’ll use this chart
    as our dependency. If you didn’t add the `bitnami` chart repository in [*Chapter
    3*](B17979_03.xhtml#_idTextAnchor083), *Installing Your First App with Helm*,
    add this chart repository now by using the `helm repo add` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, determine the Redis chart version you would like to use. A list of version
    numbers can be found by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will see an output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.6 – Redis chart versions'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.6_B17979.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.6 – Redis chart versions
  prefs: []
  type: TYPE_NORMAL
- en: For our dependency, let’s use the wildcard version `15.5.x` so that we can lock
    in the latest patch that is currently available, `15.5.1`, but also so that we
    can easily download newer patch releases as they become available in the future.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s also use the `condition` property so that Redis can be toggled to enabled
    or disabled. While our `guestbook` chart does require Redis, `condition` will
    allow a user to disable the built-in Redis option so that they can use their own
    if they desire.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update your `guestbook` chart’s `Chart.yaml` file to declare the Redis dependency.
    An updated `Chart.yaml` file is located in this book’s GitHub repository in `chapter5/guestbook/Chart.yaml`
    for reference:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Your full `Chart.yaml` file should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Now that the `Chart.yaml` file has been updated, download the Redis dependency
    by using `helm dependency update`. Now, we can deploy the `guestbook` chart to
    ensure that the dependency has been installed properly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the latest Redis `15.5.x` release by running `helm dependency update`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the `guestbook` chart in your minikube environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that the Redis StatefulSets have been created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you see a similar output for the StatefulSets shown here, then you have successfully
    created the Redis dependency! As you can see, by using Helm’s dependency management,
    the effort required to deploy the backend was relatively low. In the next chapter,
    we’ll continue developing the `guestbook` chart by writing templates for creating
    the frontend resources.
  prefs: []
  type: TYPE_NORMAL
- en: Before we wrap up, let’s clean up the minikube environment.
  prefs: []
  type: TYPE_NORMAL
- en: Cleaning up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, delete the `chapter5` namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Now, you can shut down your minikube environment.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Now, let’s summarize this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dependencies can greatly reduce the effort required to deploy complex applications
    in Kubernetes. As we saw with our `guestbook` chart, to deploy a Redis backend,
    we only needed to add five lines of YAML to our `Chart.yaml` file. Compare this
    to the effort required to write an entirely separate Redis chart from scratch,
    which would have required both a high level of Kubernetes and Redis expertise.
  prefs: []
  type: TYPE_NORMAL
- en: Helm dependency management supports several different configurations to declare,
    as well as configure dependencies. To declare a dependency, you can specify the
    chart’s `name`, `version`, and `repository` under the `dependencies` map in the
    `Chart.yaml` file. You can allow users to toggle whether to enable or disable
    each dependency using the `condition` and `tags` properties. When incorporating
    multiple instances of the same dependency, you can use `alias` to provide each
    with a unique identifier, and when working with dependencies with complex values,
    you can use `import-values` to simplify how values are propagated from a dependency
    to a parent chart. To list and download dependencies, Helm provides a set of `helm
    dependency` subcommands that are used regularly when managing chart dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will dive deep into the next crucial topic in the world
    of Helm chart development – templates.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To learn more about Helm dependency management, visit the Helm documentation’s
    *Chart Dependencies* section at [https://helm.sh/docs/topics/charts/#chart-dependencies](https://helm.sh/docs/topics/charts/#chart-dependencies).
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Answer the following questions to test your knowledge of this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: What file is used to declare chart dependencies?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between the `helm dependency update` and `helm dependency
    build` commands?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between the `Chart.yaml` and `Chart.lock` files?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Imagine that you want to allow users to enable or disable dependencies within
    your chart. What `dependencies` properties can you use?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What `dependencies` properties should you use if you need to declare multiple
    invocations of the same dependency?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you have a dependency with complex values, which `dependencies` property
    can you use to simplify the propagated values?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you override the values of a dependency?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As a chart developer, what is the value of using a chart dependency?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL

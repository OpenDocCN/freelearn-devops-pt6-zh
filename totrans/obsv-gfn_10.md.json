["```\nmode: deployment\n```", "```\npresets:\n  logsCollection:\n    enabled: true\n    includeCollectorLogs: false\n  kubernetesAttributes:\n    enabled: true\n  kubernetesEvents:\n    enabled: true\n  clusterMetrics:\n    enabled: true\n  kubeletMetrics:\n    enabled: true\n  hostMetrics:\n    enabled: true\n```", "```\nconfig:\n  extensions:\n    health_check:\n      check_collector_pipeline:\n        enabled: false\n```", "```\nconfig:\n  receivers:\n    otlp:\n      protocols:\n        http:\n          endpoint: 127.0.0.1:4318\n          cors:\n            allowed_origins:\n              - \"http://*\"\n              - \"https://*\"\n    prometheus:\n      config:\n        scrape_configs:\n          - job_name: 'opentelemetry-collector'\n            tls_config:\n              insecure_skip_verify: true\n            scrape_interval: 10s\n            scrape_timeout: 2s\n            kubernetes_sd_configs:\n              - role: pod\n            relabel_configs:\n              - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]\n                action: keep\n                regex: \"true\"\n              - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]\n                action: replace\n                target_label: __address__\n                regex: ([^:]+)(?::\\d+)?;(\\d+)\n                replacement: $$1:$$2\n```", "```\nconfig:\n  connectors:\n    spanmetrics:\n      dimensions:\n      - name: http.method\n        default: GET\n      - name: http.status_code\n      namespace: traces.spanmetrics\n    servicegraph:\n      latency_histogram_buckets: [1,2,3,4,5]\n```", "```\nmetrics:\n        receivers:\n          - otlp\n          - spanmetrics\n          - servicegraph\n        processors:\n          - memory_limiter\n          - filter/ottl\n          - transform\n          - batch\n        exporters:\n          - prometheusremotewrite\n          - logging\n```", "```\nhelm install owg open-telemetry/opentelemetry-collector --values chapter3/OTEL-Collector.yaml --values OTEL-Creds.yaml\n```", "```\n- name: Install OpenTelemetry Collector\n  ansible.builtin.apt:\n    deb: https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v0.85.0/otelcol_0.85.0_linux_amd64.deb\n```", "```\n- name: Copy OpenTelemetry Collector Configuration\n  ansible.builtin.copy:\n    src: /srv/myfiles/OTEL-Collector.yaml\n    dest: /etc/otelcol/config.yaml\n    owner: root\n    group: root\n    mode: '0644'\n```", "```\n- name: Install Grafana Agent\n  ansible.builtin.include_role:\n    name: grafana_agent\n  vars:\n    grafana_agent_logs_config:\n      <CONFIG>\n    grafana_agent_metrics_config:\n      <CONFIG>\n    grafana_agent_traces_config:\n      <CONFIG>\n```", "```\n    data \"grafana_cloud_stack\" \"preprod\" {\n      slug = \"acme-preprod\"\n    }\n    ```", "```\n    resource \"grafana_cloud_access_policy\" \"collector-write\" {\n      region       = \"us\"\n      name         = \"collector-write\"\n      display_name = \"Collector write policy\"\n      scopes = [\"logs:write\", \"metrics:write\", \"traces:write\"]\n      realm {\n        type       = \"stack\"\n        identifier = data.grafana_cloud_stack.preprod.id\n      }\n    }\n    ```", "```\n    resource \"grafana_cloud_access_policy_token\" \"collector-token\" {\n      region           = \"us\"\n      access_policy_id = grafana_cloud_access_policy.collector-write.policy_id\n      name             = \"preprod-collector-write\"\n      display_name     = \"Preprod Collector Token\"\n      expires_at       = \"2023-01-01T00:00:00Z\"\n    }\n    ```", "```\n- name: Create preprod stack\n  grafana.grafana.cloud_stack:\n    name: acme-preprod\n    stack_slug: acme-preprod\n    cloud_api_key: \"{{ grafana_cloud_api_key }}\"\n    region: us\n    org_slug: acme\n    state: present\n```", "```\nresource \"grafana_dashboard\" \"top_level \" {\n  config_json = file(\"top-level.json\")\n  overwrite = true\n}\n```", "```\n- name: Create Top Level Dashboard\n  grafana.grafana.dashboard:\n    dashboard: \"{{ lookup('ansible.builtin.file', ' top-level.json') }}\"\n    grafana_url: \"{{ grafana_url }}\"\n    grafana_api_key: \"{{ grafana_api_key }}\"\n    state: present\n```", "```\nresource \"grafana_rule_group\" \"ateam_alert_rule\" {\n  name             = \"A Team Alert Rules\"\n  folder_uid       = grafana_folder.rule_folder.uid\n  interval_seconds = 240\n  org_id           = 1\n  rule {\n    name           = \"Alert Rule 1\"\n  }\n  rule {\n    name           = \"Alert Rule 2\"\n  }\n```"]
- en: Kubernetes Infrastructure Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll discuss how to make changes to the infrastructure that
    powers your Kubernetes infrastructure, whether or not it is a purely public cloud
    platform or a hybrid installation. We''ll discuss methods for handling underlying
    instance and resource instability, and strategies for running highly available
    workloads on partially available underlying hardware. We''ll cover a few key topics
    in this chapter in order to build your understanding of how to manage infrastructure
    in this way:'
  prefs: []
  type: TYPE_NORMAL
- en: How do we plan to deploy Kubernetes components?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do we secure Kubernetes infrastructure?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do we upgrade the cluster and `kubeadm`?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do we scale up the cluster?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What external resources are available to us?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this chapter, you''ll learn about the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Cluster upgrades
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to manage `kubeadm`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cluster scaling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cluster maintenance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The SIG Cluster Lifecycle group
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You''ll need to have your Google Cloud Platform account enabled and logged
    in, or you can use a local Minikube instance of Kubernetes. You can also use Play
    with Kubernetes over the web: [https://labs.play-with-k8s.com/](https://labs.play-with-k8s.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the GitHub repository for this chapter: [https://github.com/PacktPublishing/Getting-Started-with-Kubernetes-third-edition/tree/master/Code-files/Chapter15](https://github.com/PacktPublishing/Getting-Started-with-Kubernetes-third-edition/tree/master/Code-files/Chapter15)[.](https://github.com/PacktPublishing/Getting-Started-with-Kubernetes-third-edition/tree/master/Code%20files/Chapter%2015)'
  prefs: []
  type: TYPE_NORMAL
- en: Planning a cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Looking back over the work we've done up till now in this book, there are a
    lot of options when it comes to building a cluster with Kubernetes. Let's briefly
    highlight the options you have available to you when you're planning on building
    your cluster. We have a few key areas to investigate when planning ahead.
  prefs: []
  type: TYPE_NORMAL
- en: Picking what's right
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first and arguably most important step when choosing a cluster is to pick
    the right hosted platform for your Kubernetes cluster. At a high level, here are
    the choices you have:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Local solutions include the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Minikube**: A single-node Kubernetes cluster'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ubuntu on LXD**: This uses LXD to deploy a nine-instance cluster of Kubernetes'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IBM''s Cloud Private-CE**: This uses VirtualBox to deploy Kubernetes on *n+1*
    instances'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kubeadm-dind` (Docker-in-Docker): This allows for multi-node Kubernetes clusters'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Hosted solutions include the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Kubernetes Engine
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon Elastic Container Services
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Kubernetes Service
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Stackpoint
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Openshift online
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: IBM Cloud Kubernetes Services
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Giant Swarm
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: On all of the aforementioned clouds and more, there are many turnkey solutions
    that allow you to spin up full clusters with community-maintained scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As of this book''s publishing, here''s a list of projects and solutions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fda0d0fd-7b11-4640-bd88-83cbf844a383.png)'
  prefs: []
  type: TYPE_IMG
- en: Check out this link for more turnkey solutions: [https://kubernetes.io/docs/setup/pick-right-solution/#turnkey-cloud-solutions](https://kubernetes.io/docs/setup/pick-right-solution/#turnkey-cloud-solutions).
  prefs: []
  type: TYPE_NORMAL
- en: Securing the cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we''ve discussed, there are several areas of focus when securing a cluster.
    Ensure that you have read through and made configuration changes (in code) to
    your cluster configuration in the following areas:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Logging**: Ensure that your Kubernetes logs are enabled. You can read more
    about audit logging here: [https://kubernetes.io/docs/tasks/debug-application-cluster/audit/](https://kubernetes.io/docs/tasks/debug-application-cluster/audit/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Make sure you have authentication enabled so that your users, operators, and
    services identify themselves as unique identifiers. Read more about authentication
    here: [https://kubernetes.io/docs/reference/access-authn-authz/authentication/](https://kubernetes.io/docs/reference/access-authn-authz/authentication/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ensure that you have proper separation of duties, role-based access control,
    and fine grained privileges using authorization. You can read more about HTTP-based
    controls here: [https://kubernetes.io/docs/reference/access-authn-authz/authorization/](https://kubernetes.io/docs/reference/access-authn-authz/authorization/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Make sure that you have locked down the API to specific permissions and groups.
    You can read more about access to the API here: [https://kubernetes.io/docs/reference/access-authn-authz/controlling-access/](https://kubernetes.io/docs/reference/access-authn-authz/controlling-access/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When appropriate, enable an admission controller to further re-validate requests
    after they pass through the authentication and authorization controls. These controllers
    can take additional, business-logic based validation steps in order to secure
    your cluster further. Read more about admission controllers here: [https://kubernetes.io/docs/reference/access-authn-authz/controlling-access](https://kubernetes.io/docs/reference/access-authn-authz/controlling-access/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Tune Linux system parameters via the `sysctl` interface. This allows you to
    modify kernel parameters for node-level and namespaced `sysctl` features. There
    are safe and unsafe system parameters. There are several subsystems that can be
    tweaked with `sysctls`. Possible parameters are as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`abi`: Execution domains and personalities'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fs`: Specific filesystems, filehandle, inode, dentry, and quota tuning'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kernel`: Global kernel information/tuning'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`net`: Networking'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sunrpc`: SUN **Remote Procedure Call** (**RPC**)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vm`: Memory management tuning, buffer, and cache management'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`user`: Per user per user namespace limits'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can read more about `sysctl` calls here: [https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/](https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can enable unsafe `sysctl` values by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`kubelet --allowed-unsafe-sysctls ‘net.ipv4.route.min_pmtu''`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a diagram of the authorization, authentication, and admission control
    working together:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5c3dd62f-3d30-428a-b3cb-95efa32abfcc.png)'
  prefs: []
  type: TYPE_IMG
- en: Tuning examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you''d like to experiment with modifying `sysctls`, you can set a security
    context as follows, per pod:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also tune variables such as the ARP cache, as Kubernetes consumes a
    lot of IPs at scale, which can exhaust space in the ARP cache. Changing these
    settings is common in large scale HPC clusters and can help with address exhaustion
    with Kubernetes as well. You can set these values, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Upgrading the cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to run your cluster over long periods of time, you'll need to update
    your cluster as needed. There are several ways to manage cluster upgrades, and
    the difficulty level of the upgrades is determined by the platform you've chosen
    previously. As a general rule, hosted **Platform as a service** (**PaaS**) options
    are simpler, while roll your own options rely on you to manage your cluster upgrades.
  prefs: []
  type: TYPE_NORMAL
- en: Upgrading PaaS clusters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Upgrading PaaS clusters is a lot simpler than updating your hand-rolled clusters.
    Let's check out how the major cloud service providers update their hosted Kubernetes
    platforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'With Azure, it''s relatively straightforward to manage an upgrade of both the
    control plane and nodes of your cluster. You can check which upgrades are available
    for your cluster with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: When upgrading AKS clusters, you have to upgrade through minor versions. AKS
    handles adding a new node to your cluster and manages to cordon and drain process
    in order to prevent any disruption to your running applications. You can see how
    the drain process works in a following section.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can run the `upgrade` command as follows. You should experiment with this
    feature before running on production workloads so you can understand the impact
    on running applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a lot of output that identifies the update, which will look
    something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You can additionally show the current version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'To upgrade a GCE cluster, you''ll follow a similar procedure. In GCE''s case,
    there are two mechanisms that allow you update your cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: For manager node upgrades, GCP deletes and recreates the master nodes using
    the same **Persistent Disk** (**PD**) to preserve your state across upgrades
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With your worker nodes, you'll use GCP's manage instance groups and perform
    a rolling upgrade of your cluster, wherein each node is destroyed and replaced
    to avoid interruption to your workloads
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can upgrade your cluster master to a specific version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, you can update your full cluster with this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To upgrade a Google Kubernetes Engine cluster, you have a simple, user-initiated
    option. You''ll need to set your project ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'And, make sure that you have the latest set of `gcloud` components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'When updating Kubernetes clusters on GCP, you get the following benefits. You
    can downgrade your nodes, but you cannot downgrade your master:'
  prefs: []
  type: TYPE_NORMAL
- en: GKE will handle node and pod drainage without application interruption
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replacement nodes will be recreated with the same node and configuration as
    their predecessors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GKE will update software for the following pieces of the cluster:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kubelet`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kube-proxy`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker daemon
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: OS
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can see what options your server has for upgrades with this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Keep in mind that data stored in the `hostPath` and `emptyDir` directories will
    be deleted during the upgrade, and only PDs will be preserved during it. You can
    turn on automatic node updates for your cluster with GKE, or you can perform them
    manually.
  prefs: []
  type: TYPE_NORMAL
- en: To turn on automatic node automatic upgrades read this: **[https://cloud.google.com/kubernetes-engine/docs/concepts/node-auto-upgrades](https://cloud.google.com/kubernetes-engine/docs/concepts/node-auto-upgrades).**
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also create clusters with this set to default with the `--enable-autoupgrade`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: If you'd like to update your clusters manually, you can issue specific commands.
    It is recommended for production systems to turn off automatic upgrades and to
    perform them during periods of low traffic or during maintenance windows to ensure
    minimal disruption for your applications. Once you build confidence in updates,
    you may be able to experiment with auto-upgrades.
  prefs: []
  type: TYPE_NORMAL
- en: 'To manually kick off a node upgrade, you can run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: If you'd like to upgrade to a specific version of Kubernetes, you can add the
    `--cluster-version` tag.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see a running list of operations on your cluster to keep track of the
    update operation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'You can then describe your particular upgrade operation with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command will tell you details about the cluster upgrade action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Scaling the cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As with PaaS versus hosted clusters, you have several options for scaling up
    your production Kubernetes cluster.
  prefs: []
  type: TYPE_NORMAL
- en: On GKE and AKS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When upgrading a GKE cluster, all you need to do is issue a scaling command
    that modifies the number of instances in your minion group. You can resize the
    node pools that control your cluster with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Keep in mind that new nodes are created with the same configuration as the current
    machines in your node pool. When additional pods are scheduled, they'll be scheduled
    on the new nodes. Existing pods will not be relocated or rebalanced to the new
    nodes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Scaling up the AKS cluster engine is a similar exercise, where you''ll need
    to specify the `--resource-group` node count to your required number of nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: DIY clusters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you add resources to your hand-rolled Kubernetes cluster, you'll need to
    do more work. In order to have nodes join in as you add them automatically via
    a scaling group, or manually via Infrastructure as code, you'll need to ensure
    that automatic registration of nodes is enabled via the `--register-node` flag.
    If  this flag is turned on, new nodes will attempt to auto-register themselves.
    This is the default behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also join nodes manually, using a pre-vetted token, to your clusters.
    If you initialize `kubeadm` with the following token:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'You can then add additional nodes to your clusters with this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Normally in a production install of `kubeadm`, you would not specify the token
    and need to extract it and store it from the `kubeadm init` command.
  prefs: []
  type: TYPE_NORMAL
- en: Node maintenance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you're scaling your cluster up or down, it's essential to know how the manual
    process of node deregistration and draining works. We'll use the `kubectl` drain
    command here to remove all pods from your node before removing the node from your
    cluster. Removing all pods from your nodes ensures that there are not running
    workloads on your instance or VM when you remove it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get a list of available nodes using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we have the node list, the command to drain nodes is fairly simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will take some time to execute, as it has to reschedule the workloads
    on the node onto other machines that have available resources. Once the draining
    is complete, you can remove the node via your preferred programmatic API. If you''re
    merely removing the node for maintenance, you can add it back to the available
    nodes with the `uncordon` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Additional configuration options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you've built up an understanding of how Kubernetes cluster configuration
    is managed, it's a good idea to explore the additional tools that offer enhanced
    mechanisms or abstractions to configure the state of your clusters.
  prefs: []
  type: TYPE_NORMAL
- en: ksonnet is one such tool, which allows you to build a structure around your
    various configurations in order to keep many environments configured. ksonnet
    uses another powerful tool called Jsonnet in order to maintain the state of the
    cluster. ksonnet is a different approach to cluster management that's different
    from the Helm approach we discussed in earlier chapters, in that it doesn't define
    packages by dependency, but instead takes a composable prototype approach, where
    you build JSON templates that are rendered by the ksonnet CLI to apply state on
    the cluster. You start with parts that create prototypes, which becomes a component
    once it's configured, and those components can then get combined into applications.
    This helps avoid repeated code in your code base. Check it out here: [https://ksonnet.io/](https://ksonnet.io/).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed how to make changes to the infrastructure that
    provides compute, storage, and networking capacity to your Kubernetes infrastructure,
    whether it be a purely public cloud platform or a hybrid installation. In observing
    the public cloud platforms, we discussed methods for handling underlying instance
    and resource instability, and strategies for running highly available workloads
    on partially available underlying hardware.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, we covered a key topic on how to build infrastructure using tools
    such as `kubeadm`, `kubectl`, and public cloud provider tools that can scale up
    and down your clusters.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Name two available local solutions for Kubernetes
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name three hosted solutions for Kubernetes
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are four of the key areas for securing your cluster?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the command to upgrade each of the major CSPs hosted Kubernetes clusters?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which cloud provider has the most production ready PaaS for Kubernetes?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which command is use to take a node out of rotation?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which command is used to add it back in?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you'd like to learn more about Jsonnet, check out this link: [https://jsonnet.org/](https://jsonnet.org/).
  prefs: []
  type: TYPE_NORMAL

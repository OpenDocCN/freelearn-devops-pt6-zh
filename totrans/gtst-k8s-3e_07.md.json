["```\n$ mkdir node-gulp\n$ cd node-gulp\n```", "```\n$ npm install -g gulp\n```", "```\n $ gulp -v\n```", "```\n$ npm install --save-dev gulp\n$ npm install gulp-git -save\n$ npm install --save-dev gulp-shell\n```", "```\napiVersion: v1 \nkind: ReplicationController \nmetadata: \n  name: node-gulp \n  labels: \n    name: node-gulp \nspec: \n  replicas: 1 \n  selector: \n    name: node-gulp \n  template: \n    metadata: \n      labels: \n        name: node-gulp \n    spec: \n      containers: \n      - name: node-gulp \n        image: <your username>/node-gulp:latest \n        imagePullPolicy: Always \n        ports: \n        - containerPort: 80 \n```", "```\napiVersion: v1 \nkind: Service \nmetadata: \n  name: node-gulp \n  labels: \n    name: node-gulp \nspec: \n  type: LoadBalancer \n  ports: \n  - name: http \n    protocol: TCP \n    port: 80 \n  selector: \n    name: node-gulp \n```", "```\nvar gulp = require('gulp'); \nvar git = require('gulp-git'); \nvar shell = require('gulp-shell'); \n\n// Clone a remote repo \ngulp.task('clone', function(){ \n  return git.clone('https://github.com/jonbaierCTP/getting-started-with-kubernetes-se.git', function (err) { \n    if (err) throw err; \n  }); \n\n}); \n\n// Update codebase \ngulp.task('pull', function(){ \n  return git.pull('origin', 'master', {cwd: './getting-started-with-kubernetes-se'}, function (err) { \n    if (err) throw err; \n  }); \n}); \n\n//Build Docker image \ngulp.task('docker-build', shell.task([ \n  'docker build -t <your username>/node-gulp ./getting-started-with-kubernetes-se/docker-image-source/container-info/', \n  'docker push <your username>/node-gulp' \n])); \n\n//Run new pod \ngulp.task('create-kube-pod', shell.task([ \n  'kubectl create -f node-gulp-controller.yaml', \n  'kubectl create -f node-gulp-service.yaml' \n])); \n\n//Update pod \ngulp.task('update-kube-pod', shell.task([ \n  'kubectl delete -f node-gulp-controller.yaml', \n  'kubectl create -f node-gulp-controller.yaml' \n])); \n```", "```\n$ gulp clone\n$ gulp docker-build\n```", "```\n$ gulp create-kube-pod\n```", "```\n$ gulp pull\n$ gulp docker-build\n$ gulp update-kube-pod\n```", "```\ndocker run --name myjenkins -p 8080:8080 -v /var/jenkins_home jenkins\n```", "```\n$ kubectl config view\n```", "```\n$ minikube dashboard\n```", "```\n$ kubectl get namespaces\nNAME          STATUS AGE\ndefault       Active 3d\nkube-public   Active 3d kube-system   Active 3d\n\n```", "```\n$ mkdir -p ~/gsw-k8s-helm && cd ~/gsw-k8s-helm\n$ cat <<K8s >> namespace-jenkins.yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n name: gsw-k8s-jenkins\nK8s\n```", "```\nkubectl create -f namespace-jenkins.yaml\nnamespace \"gsw-k8s-jenkins\" created\n```", "```\n$ helm-jenkins jesse$ kubectl get namespaces\nNAME              STATUS AGE\ndefault           Active 5d\ngsw-k8s-jenkins   Active 1d\nkube-public       Active 5d\nkube-system       Active 5d\n```", "```\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n name: jenkins-persist\n namespace: jenkins-project\nspec:\n storageClassName: jenkins-persist\n accessModes:\n   - ReadWriteOnce\n capacity:\n   storage: 20Gi\n persistentVolumeReclaimPolicy: Retain\n hostPath:\n   path: /storage/jenkins-volume/\n```", "```\n$ kubectl create -f jenkins-volume.yaml\npersistentvolume \"jenkins-persist\" created\n```", "```\n# Default values for jenkins.\n# This is a YAML-formatted file.\n# Declare name/value pairs to be passed into your templates.\n# name: value\n## Overrides for generated resource names\n# See templates/_helpers.tpl\n# nameOverride:\n# fullnameOverride:\nMaster:\n Name: jenkins-master\n Image: \"jenkins/jenkins\"\n ImageTag: \"2.127\"\n ImagePullPolicy: \"Always\"\n Component: \"jenkins-master\"\n UseSecurity: true\n AdminUser: admin\n # AdminPassword: <defaults to random>\n Cpu: \"200m\"\n Memory: \"256Mi\"\n ServicePort: 8080\n # For minikube, set this to NodePort, elsewhere use LoadBalancer # <to set explicitly, choose port between 30000-32767>\nServiceType: NodePort\n NodePort: 32000\n ServiceAnnotations: {}\n ContainerPort: 8080\n # Enable Kubernetes Liveness and Readiness Probes\n HealthProbes: true\n HealthProbesTimeout: 60\n SlaveListenerPort: 50000\n LoadBalancerSourceRanges:\n - 0.0.0.0/0\n # List of plugins to be install during Jenkins master start\n InstallPlugins:\n - kubernetes:1.7.1\n - workflow-aggregator:2.5\n - workflow-job:2.21\n - credentials-binding:1.16\n - git:3.9.1\n - greenballs:1.15\n # Used to approve a list of groovy functions in pipelines used\nthe script-security plugin. Can be viewed under /scriptApproval\n ScriptApproval:\n - \"method groovy.json.JsonSlurperClassic parseText\njava.lang.String\"\n - \"new groovy.json.JsonSlurperClassic\"\n - \"staticMethod\norg.codehaus.groovy.runtime.DefaultGroovyMethods leftShift\njava.util.Map java.util.Map\"\n - \"staticMethod\norg.codehaus.groovy.runtime.DefaultGroovyMethods split\njava.lang.String\"\n CustomConfigMap: false\n NodeSelector: {}\n Tolerations: {}\nAgent:\n Enabled: true\n Image: jenkins/jnlp-slave\n ImageTag: 3.10-1\n Component: \"jenkins-slave\"\n Privileged: false\n Cpu: \"200m\"\n Memory: \"256Mi\"\n # You may want to change this to true while testing a new image\n AlwaysPullImage: false\n # You can define the volumes that you want to mount for this\ncontainer\n # Allowed types are: ConfigMap, EmptyDir, HostPath, Nfs, Pod,\nSecret\n volumes:\n - type: HostPath\n hostPath: /var/run/docker.sock\n mountPath: /var/run/docker.sock\n NodeSelector: {}\nPersistence:\n Enabled: true\n ## A manually managed Persistent Volume and Claim\n ## Requires Persistence.Enabled: true\n ## If defined, PVC must be created manually before volume will\nbe bound\n # ExistingClaim:\n ## jenkins data Persistent Volume Storage Class\n StorageClass: jenkins-pv\n Annotations: {}\n AccessMode: ReadWriteOnce\n Size: 20Gi\n volumes:\n # - name: nothing\n # emptyDir: {}\n mounts:\n # - mountPath: /var/nothing\n # name: nothing\n # readOnly: true\nNetworkPolicy:\n # Enable creation of NetworkPolicy resources.\n Enabled: false\n # For Kubernetes v1.4, v1.5 and v1.6, use 'extensions/v1beta1'\n # For Kubernetes v1.7, use 'networking.k8s.io/v1'\n ApiVersion: networking.k8s.io/v1\n## Install Default RBAC roles and bindings\nrbac:\n install: true\n serviceAccountName: default\n # RBAC api version (currently either v1beta1 or v1alpha1)\n apiVersion: v1beta1\n # Cluster role reference\n roleRef: cluster-admin\n```", "```\nhelm install --name gsw-k8s-jenkins -f jenkins-vaules.yaml stable/jenkins --namespace gsw-k8s-jenkins\nNAME:   gsw-k8s-jenkins\nLAST DEPLOYED: Mon Jun 18 22:44:34 2018\nNAMESPACE: gsw-k8s-jenkins\nSTATUS: DEPLOYED\nRESOURCES:\nâ€¦\n```", "```\n$ kubectl get secret --namespace gsw-k8s-jenkins gsw-k8s-jenkins -o jsonpath=\"{.data.jenkins-admin-password}\" | base64 --decode; echo\n<YOUR_PASSWORD_HERE>\n```", "```\n$ helm ls\nNAME REVISION UPDATED STATUS CHART NAMESPACE\ngsw-k8s-jenkins 1 Mon Jun 18 22:44:34 2018 DEPLOYED jenkins-0.16.3 gsw-k8s-jenkins\n```"]
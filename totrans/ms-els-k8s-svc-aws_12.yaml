- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Deploying Pods with Amazon Storage
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Amazon存储部署Pods
- en: A guiding principle in most distributed or cloud-native applications is to limit
    the state where you can, and so far we have deployed Pods that are stateless,
    which means that when they are destroyed and recreated, any data they had is lost.
    In some cases, you might want to share data between containers in the Pod, maintain
    the state or content between reboots/re-deployments/crashes, or share data between
    Pods, in which case you need some sort of persistent storage.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数分布式或云原生应用程序中，一个指导原则是尽量减少状态的保存，因此到目前为止，我们已经部署了无状态的Pods，这意味着当它们被销毁和重新创建时，它们所包含的任何数据都会丢失。在某些情况下，您可能希望在Pod中的容器之间共享数据、在重启/重新部署/崩溃之间保持状态或内容，或者在Pods之间共享数据，这时您就需要某种形式的持久化存储。
- en: 'This chapter looks at how you can use **Elastic Block Storage** (**EBS**) and
    **Elastic File System** (**EFS**) to persist the container state or content across
    multiple containers, Pods, or deployments. Specifically, we will cover the following
    key topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将探讨如何使用**弹性块存储** (**EBS**)和**弹性文件系统** (**EFS**)在多个容器、Pods或部署之间保持容器的状态或内容。具体来说，我们将涵盖以下关键主题：
- en: Understanding Kubernetes volumes, the **Container Storage Interface** (**CSI**)
    driver, and storage on AWS
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解Kubernetes卷、**容器存储接口** (**CSI**)驱动程序以及AWS上的存储
- en: Installing and configuring the AWS CSI drivers in your cluster
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的集群中安装和配置AWS CSI驱动程序
- en: Using EBS volumes with your application
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在应用程序中使用EBS卷
- en: Using EFS volumes with your application
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在应用程序中使用EFS卷
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You should be familiar with YAML, basic networking, and **Elastic Kubernetes
    Service** (**EKS**) architecture. Before getting started with this chapter, please
    ensure that you have the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该熟悉YAML、基本的网络知识和**弹性Kubernetes服务** (**EKS**)架构。在开始本章之前，请确保您已具备以下条件：
- en: Network connectivity to your EKS cluster API endpoint
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与EKS集群API端点的网络连接
- en: The AWS **command-line interface** (**CLI**), Docker, and kubectl binary installed
    on your workstation
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的工作站上安装了AWS **命令行接口** (**CLI**)、Docker和kubectl二进制文件
- en: A basic understanding of block and file storage systems
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本理解块存储和文件存储系统
- en: Understanding Kubernetes volumes, the CSI driver, and storage on AWS
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解Kubernetes卷、CSI驱动程序以及AWS上的存储
- en: The basic storage object within Kubernetes is a **volume**, which represents
    a directory (with or without data) that can be accessed by containers in a Pod.
    You can have ephemeral volumes that persist over container restarts but are aligned
    to the lifetime of the Pod and are destroyed by the Kubernetes scheduler when
    the Pod is destroyed. Persistent volumes are not destroyed by Kubernetes and exist
    separately from the Pod or Pods that use them.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes中的基本存储对象是**卷**，它表示一个目录（可能有数据，也可能没有数据），可以被Pod中的容器访问。您可以有临时卷，它们在容器重启时仍然存在，但与Pod的生命周期保持一致，并在Pod被销毁时被Kubernetes调度器销毁。持久卷则不会被Kubernetes销毁，它们与使用它们的Pod或Pods是独立存在的。
- en: 'The simplest example of an ephemeral volume is an `emptyDir` volume type. An
    example is shown next, which mounts host storage inside the containers using the
    `mountPath` key. As both containers use the same volume, they see the same data
    despite the fact it’s mounted onto different mount points. When a Pod dies, crashes,
    or is removed from a node, the data in the `emptyDir` volume is deleted and lost:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 临时卷的最简单示例是`emptyDir`卷类型。下面是一个示例，它使用`mountPath`键将主机存储挂载到容器内部。由于两个容器使用相同的卷，它们即使挂载到不同的挂载点，也能看到相同的数据。当Pod死亡、崩溃或从节点中移除时，`emptyDir`卷中的数据会被删除并丢失：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Important note
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The Pod will crash after it has run the `echo` command, but this is expected,
    so rest assured.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行`echo`命令后，Pod会崩溃，但这是预期的，所以请放心。
- en: 'You can also create a persistent host volume using the `hostPath` type shown
    next. In this example, a volume is created and mapped to the host `/data` directory,
    which in turn, is mounted in the nginx container using the `mountPath` key. The
    main difference between this configuration and the previous `emptyDir` volume
    type is that any data stored on the volume will be persisted in the `/data` directory
    on the host even if the Pod is deleted:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用下面显示的`hostPath`类型创建一个持久化主机卷。在此示例中，创建一个卷并将其映射到主机的`/data`目录，该目录又通过`mountPath`键挂载到nginx容器中。这种配置与之前的`emptyDir`卷类型的主要区别在于，存储在卷中的任何数据都会在Pod被删除后仍保留在主机的`/data`目录中：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The main challenge to these types of volumes is they are host-specific and so
    if there are any issues with the hosts, or if the Pod is scheduled on another
    host, the data is lost or not reachable.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这些存储卷的主要挑战是它们是主机特定的，因此，如果主机出现任何问题，或者Pod被调度到另一台主机上，数据将丢失或无法访问。
- en: Kubernetes started with more volume types, such as `awsElasticBlockStore`, which
    uses an external/non-host AWS resource and removes some of these constraints.
    The plugins that supported these external volume types were known as *in-tree*,
    as they were developed by the Kubernetes community. However, the effort required
    to support changes in the volume configuration and different volume types became
    too much, so the CSI was made generally available in Kubernetes 1.13.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes最初支持更多的存储卷类型，例如`awsElasticBlockStore`，它使用外部/非主机的AWS资源，并去除了一些限制。这些支持外部存储卷类型的插件被称为*in-tree*插件，因为它们是由Kubernetes社区开发的。然而，支持卷配置变更和不同存储卷类型所需的工作量变得过于繁重，因此在Kubernetes
    1.13版本中，CSI被广泛引入并可供使用。
- en: The CSI specification acts as a way to expose block and file-based storage consistently,
    irrespective of the storage type or vendor. The CSI allows AWS (and other vendors)
    to develop and support storage drivers for its storage services, namely EBS and
    EFS.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: CSI规范作为一种方式，能够一致地暴露基于块和文件的存储，无论存储类型或供应商如何。CSI允许AWS（以及其他供应商）为其存储服务（即EBS和EFS）开发和支持存储驱动程序。
- en: Let’s take a deeper look at these storage systems on AWS.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更深入地了解AWS上的这些存储系统。
- en: EBS
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: EBS
- en: EBS is block-based storage that is typically attached to a single **Elastic
    Compute Cloud** (**EC2**) instance or Pod in a single **availability zone** (**AZ**).
    It comes in a variety of performance flavors from general-purpose (gp3 and gp2)
    and high-performance (io1 and io2) as well as SSD and HDD (magnetic) types. Amazon
    EBS volumes are billed by the **gigabyte-month** (**GB-month**), a measure of
    how many gigabytes of EBS storage are provisioned in your account and the length
    of time it is used for.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: EBS是基于块的存储，通常附加到单个**弹性计算云**（**EC2**）实例或单个**可用区**（**AZ**）中的Pod上。它有多种性能类型，从通用型（gp3和gp2）到高性能型（io1和io2），以及SSD和HDD（磁性）类型。Amazon
    EBS卷按**千兆字节月**（**GB-month**）计费，即计算帐户中配置的EBS存储的千兆字节数以及使用时长。
- en: Important note
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: While EBS now supports attaching up to 16 nitro-based EC2 instances, in the
    same AZ, to a single EBS volume, this is a relatively new configuration option.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然EBS现在支持将最多16个基于Nitro的EC2实例连接到同一个AZ中的单个EBS卷，但这是一个相对较新的配置选项。
- en: EFS
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: EFS
- en: EFS is file-based storage based on NFS (NFSv4.1 and NFSv4.0), which allows multiple
    EC2 instances or Pods to access shared storage across multiple AZs. The storage
    provided by EFS can be regional (multi-AZ) or span a single AZ and can support
    both standard and infrequently accessed data patterns. Billing for Amazon EFS
    is based on the amount of storage used per month, measured in GB-months, as well
    as the storage class used and the duration of storage usage within your account.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: EFS是基于NFS（NFSv4.1和NFSv4.0）的文件存储，它允许多个EC2实例或Pod在多个AZ之间共享存储。EFS提供的存储可以是区域性的（多AZ）或仅跨单一AZ，并支持标准存储和不常访问的数据模式。Amazon
    EFS按每月使用的存储量计费，按GB-月计量，还包括使用的存储类别以及存储在帐户中的使用时长。
- en: The criteria used to choose between EBS and EFS vary but, generally, if you
    want a shared storage solution that can be used across multiple AZs, then EFS
    is a good candidate. EBS is normally used to provide persistent volumes within
    a single AZ with high throughput.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 选择EBS或EFS的标准因子有所不同，但通常，如果您需要一个可以跨多个AZ使用的共享存储解决方案，那么EFS是一个不错的选择。EBS通常用于在单一AZ内提供高吞吐量的持久化卷。
- en: Let’s look at how we install and configure the different CSI drivers for EBS
    and EFS in our cluster.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下如何在集群中安装和配置EBS和EFS的不同CSI驱动程序。
- en: Installing and configuring the AWS CSI drivers in your cluster
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在集群中安装和配置AWS CSI驱动程序
- en: 'We will install both the EBS and EFS drivers in this section. You will need
    a similar process for both, detailed next:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将安装EBS和EFS驱动程序。两者的安装过程相似，详细步骤如下：
- en: Create an **Identity and Access Management** (**IAM**) policy that will allow
    the plugin to perform AWS API calls for either EBS or EFS.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个**身份和访问管理**（**IAM**）策略，允许插件执行针对EBS或EFS的AWS API调用。
- en: Create and map an IAM role to an EKS service account (this is discussed in detail
    in [*Chapter 1*](B18129_01.xhtml#_idTextAnchor014)*)3*.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建并将IAM角色映射到EKS服务账户（详细讨论请参见[*第一章*](B18129_01.xhtml#_idTextAnchor014)）。
- en: Deploy the plugin and configure it to use the service account created in *step
    2*.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署插件并配置它以使用在*第 2 步*中创建的服务帐户。
- en: Installing and configuring the EBS CSI driver
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装和配置 EBS CSI 驱动程序
- en: The driver can be found at [https://github.com/kubernetes-sigs/aws-ebs-csi-driver](https://github.com/kubernetes-sigs/aws-ebs-csi-driver).
    Let’s get down to installing it!
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 驱动程序可以在[https://github.com/kubernetes-sigs/aws-ebs-csi-driver](https://github.com/kubernetes-sigs/aws-ebs-csi-driver)找到。让我们开始安装它吧！
- en: You can create the IAM policy from scratch or you can use the `AmazonEBSCSIDriverPolicy`
    AWS-managed policy.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以从头开始创建 IAM 策略，或者使用`AmazonEBSCSIDriverPolicy` AWS 托管的策略。
- en: 'We can now create the role. We will use the `–role-only` command-line switch,
    so we don’t create the EKS service account. Using the following `eksctl` command,
    adjust the command line parameters as necessary:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以创建角色了。我们将使用`–role-only`命令行选项，这样就不会创建 EKS 服务帐户。使用以下`eksctl`命令，根据需要调整命令行参数：
- en: '[PRE2]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Important note
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: In the preceding example, we used the cluster we created in [*Chapter 9*](B18129_09.xhtml#_idTextAnchor135).
    If you use a different cluster, you will need to change the `--cluster` parameter
    to reflect your cluster name.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们使用了在[*第 9 章*](B18129_09.xhtml#_idTextAnchor135)中创建的集群。如果您使用的是不同的集群，则需要更改`--cluster`参数，以反映您的集群名称。
- en: 'You can create an add-on for the EBS CSI controller using the following `eksctl`
    command, which will deploy the CSI Pods and also the service accounts needed to
    access the AWS API using the role created in *step 2*:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用以下`eksctl`命令为 EBS CSI 控制器创建一个附加组件，该命令将部署 CSI Pods，并创建访问 AWS API 所需的服务帐户，使用的是*第
    2 步*中创建的角色：
- en: '[PRE3]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can validate whether the controller and DaemonSets are deployed using the
    following commands:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用以下命令验证控制器和 DaemonSets 是否已部署：
- en: '[PRE4]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the *Using EBS volumes with your application* section, we will see how you
    can attach EBS volumes directly to Pods, but before that, let’s install the EFS
    driver.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在*使用 EBS 卷与您的应用程序*部分，我们将看到如何将 EBS 卷直接附加到 Pods，但在此之前，让我们先安装 EFS 驱动程序。
- en: Installing and configuring the EFS CSI driver
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装和配置 EFS CSI 驱动程序
- en: The driver can be found at [https://github.com/kubernetes-sigs/aws-efs-csi-driver](https://github.com/kubernetes-sigs/aws-efs-csi-driver).
    Let’s get down to installing it!
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 驱动程序可以在[https://github.com/kubernetes-sigs/aws-efs-csi-driver](https://github.com/kubernetes-sigs/aws-efs-csi-driver)找到。让我们开始安装它吧！
- en: 'You can create the IAM policy from scratch or you can use the example policy
    found here: [https://raw.githubusercontent.com/kubernetes-sigs/aws-efs-csi-driver/master/docs/iam-policy-example.json](https://raw.githubusercontent.com/kubernetes-sigs/aws-efs-csi-driver/master/docs/iam-policy-example.json).
    The following commands can be used to download and create the IAM policy:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以从头开始创建 IAM 策略，或者使用此处找到的示例策略：[https://raw.githubusercontent.com/kubernetes-sigs/aws-efs-csi-driver/master/docs/iam-policy-example.json](https://raw.githubusercontent.com/kubernetes-sigs/aws-efs-csi-driver/master/docs/iam-policy-example.json)。可以使用以下命令下载并创建
    IAM 策略：
- en: '[PRE5]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We can now create the role and associated EKS service account using the following
    `eksctl` command and adjust the command line parameters as necessary (you will
    need to specify the **Amazon Resource Name** (**ARN**) of the policy created in
    *step 1*, as well as the cluster name and Region). The most important aspect to
    verify is that the new service account has an annotation for the new IAM role:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以使用以下`eksctl`命令创建角色及相关 EKS 服务帐户，并根据需要调整命令行参数（您需要指定在*第 1 步*中创建的策略的**Amazon
    资源名称**（**ARN**），以及集群名称和区域）。最重要的是要验证新服务帐户是否有新 IAM 角色的注解：
- en: '[PRE6]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We will use Helm to install this EFS CSI driver as, unlike the EBS driver,
    at the time of writing, the EFS driver is not supported as an add-on. The following
    command will add the EFS repository to Helm and deploy the Helm chart, re-using
    the EKS service account that was created in *step 2*:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用 Helm 安装这个 EFS CSI 驱动程序，因为与 EBS 驱动程序不同，截至写作时，EFS 驱动程序不支持作为附加组件。以下命令将把 EFS
    仓库添加到 Helm，并部署 Helm 图表，重用在*第 2 步*中创建的 EKS 服务帐户：
- en: Important note
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: '`Image.repository` is Region-specific, and the relevant repositories can be
    found at [https://docs.aws.amazon.com/eks/latest/userguide/add-ons-images.html](https://docs.aws.amazon.com/eks/latest/userguide/add-ons-images.html).'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`Image.repository`是区域特定的，相关仓库可以在[https://docs.aws.amazon.com/eks/latest/userguide/add-ons-images.html](https://docs.aws.amazon.com/eks/latest/userguide/add-ons-images.html)找到。'
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Important note
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The EFS plugin will require a pre-configured EFS cluster to be available; we
    will discuss how this can be created in the *Using EFS volumes with your* *application*
    section.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: EFS插件需要预先配置好的EFS集群可用；我们将在*使用EFS卷与您的应用*部分讨论如何创建该集群。
- en: Now we have both drivers installed and running, we can look at how they can
    be used by Pods to store data.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装并运行了这两个驱动程序，我们可以查看它们如何被Pod使用来存储数据。
- en: Using EBS volumes with your application
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在应用程序中使用EBS卷
- en: Kubernetes has three main `kinds` that are used for persistent storage. The
    **PersistentVolume** (**PV**) represents the actual storage in the attached storage
    system, in our case, an EBS volume. The other components are a **StorageClass**
    (**SC**), which defines the characteristics of the storage, and a **PersistentVolumeClaim**
    (**PVC**), which represents a request for storage that is fulfilled by a PV based
    on an SC.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes有三种主要的`kinds`用于持久化存储。**PersistentVolume**（**PV**）代表实际的存储，在附加的存储系统中，在本例中是EBS卷。其他组件包括**StorageClass**（**SC**），它定义了存储的特性，以及**PersistentVolumeClaim**（**PVC**），它代表对存储的请求，该请求由根据SC的PV来满足。
- en: The reason a PVC exists is that different Pods may require different types of
    storage, for example, storage shared between many Pods or dedicated to just one.
    The PVC provides an abstraction between what a developer or DevOps engineer needs
    for their application and the type of storage provided by the cluster administrator.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: PVC存在的原因是不同的Pod可能需要不同类型的存储，例如，多个Pod共享的存储或仅专门为一个Pod提供的存储。PVC提供了一种抽象，它位于开发人员或DevOps工程师为其应用所需的存储和集群管理员提供的存储类型之间。
- en: 'The following diagram illustrates the relationship between an EBS volume, PV,
    PVC, and a Pod:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 下图说明了EBS卷、PV、PVC和Pod之间的关系：
- en: '![Figure 12.1 – EBS volumes](img/B18129_12_01.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图12.1 – EBS卷](img/B18129_12_01.jpg)'
- en: Figure 12.1 – EBS volumes
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.1 – EBS卷
- en: It’s important to know that an EBS volume is specific to a Region and an AZ;
    you can’t move EBS volumes between AZs. Instead, you need to create a snapshot
    and then create a new volume in the new AZ. A PV (EBS volume) can be created statically
    by an AWS administrator or dynamically as you consume a PVC, but it can only be
    consumed by worker nodes in the same AZ as the volume itself.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要知道，EBS卷是特定于区域（Region）和可用区（AZ）的；你不能在不同的可用区之间移动EBS卷。相反，你需要创建一个快照，然后在新的可用区创建一个新卷。PV（EBS卷）可以由AWS管理员静态创建，也可以在你消费PVC时动态创建，但它只能被与卷本身位于同一可用区的工作节点消费。
- en: 'We will focus on the dynamic creation of the volumes, as this is the simplest
    method to implement. The latest EBS CSI driver automatically creates a `gp2` SC
    and this can be viewed by using the following commands:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将重点介绍卷的动态创建方法，因为这是最简单的实现方式。最新的EBS CSI驱动程序会自动创建一个`gp2`存储类，可以使用以下命令查看它：
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We want to use `gp3`, which is a more cost-effective form of storage and performant
    type on AWS, so let’s create a new SC using the following manifest and deploy
    it using the `$ kubectl create -f` `SC-config.yaml` command:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要使用`gp3`，它是AWS上成本效益更高且性能更好的存储类型，因此让我们使用以下清单创建一个新的存储类，并通过`$ kubectl create
    -f` `SC-config.yaml`命令将其部署：
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We can now create a PVC that will leverage the new SC. As we are using dynamic
    provisioning, we don’t have to create a PV, as this will be created once we deploy
    a Pod that references the new PVC.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以创建一个PVC，利用新的存储类（SC）。由于我们使用的是动态配置，我们不需要创建PV，因为它将在我们部署一个引用新PVC的Pod时自动创建。
- en: 'The following manifest will create the PVC and it can be deployed using the
    `$ kubectl create -f VC-config.yaml` command. The manifest contains the SC that
    will be used, in our case `gp3`, as well as the size of the volume to create 4
    Gi. We don’t specify any encryption requirements in the PVC, but as that is set
    in the SC, the volume will be encrypted; we could create a non-encrypted `gp3`
    SC as well if we wanted to allow developers to choose an unencrypted volume:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 以下清单将创建PVC，并可以通过`$ kubectl create -f VC-config.yaml`命令进行部署。该清单包含我们将使用的存储类（在本例中为`gp3`）以及要创建的卷的大小（4
    Gi）。我们没有在PVC中指定任何加密要求，但由于这在存储类中已设置，因此卷将被加密；如果我们希望允许开发人员选择未加密的卷，我们也可以创建一个不加密的`gp3`存储类：
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`accessModes` defines how the volume can be attached, and these are listed
    next; however, EBS will only support `ReadWriteOnce`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`accessModes`定义了卷的挂载方式，以下是这些方式；但是，EBS仅支持`ReadWriteOnce`：'
- en: '`ReadWriteOnce(RWO)`: This volume can be mounted as read-write by a single
    node.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ReadWriteOnce(RWO)`：此卷只能由单个节点以读写方式挂载。'
- en: '`ReadOnlyMany(ROX)`: This volume can be mounted read-only by many nodes.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ReadOnlyMany(ROX)`：此卷可以被多个节点以只读方式挂载。'
- en: '`ReadWriteMany(RWX)`: This volume can be mounted as read-write by many nodes.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ReadWriteMany(RWX)`：此卷可以被多个节点以读写方式挂载。'
- en: '`ReadWriteOncePod(RWOP)`: This volume can be mounted as read-write by a single
    Pod.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ReadWriteOncePod(RWOP)`：此卷可以被单个 Pod 以读写方式挂载。'
- en: 'The following commands show the PVC being created in a pending state (as no
    Pod has made a claim against it), and no associated EBS volume (PV) has been created,
    as the PVC is still in a pending state:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令展示了 PVC 处于挂起状态（因为没有 Pod 对其进行声明），并且没有创建关联的 EBS 卷（PV），因为 PVC 仍处于挂起状态：
- en: '[PRE11]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We can now deploy a Pod that uses this PVC, which, in turn, will, using the
    EBS CSI driver, create a new EBS volume (dynamic provisioning) and attach it to
    the Pod as specified by `mountPath` in the Pod specification.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以部署一个使用该 PVC 的 Pod，进而，利用 EBS CSI 驱动程序创建一个新的 EBS 卷（动态配置），并根据 Pod 规格中的 `mountPath`
    将其挂载到 Pod 上。
- en: Important note
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: It’s worth noting that the Pod deployment time will take longer as the EBS volume
    needs to be created first. If a quicker startup time is needed, then static provisioning
    can be used and the PV can be created before the Pod.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，由于需要先创建 EBS 卷，因此 Pod 部署时间会更长。如果需要更快的启动时间，则可以使用静态配置，在 Pod 部署前先创建 PV。
- en: 'The following manifest will create the Pod and references the PVC created previously.
    It can be deployed using the `$ kubectl create -f` `ebs-pod.yaml` command:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 以下清单将创建 Pod，并引用之前创建的 PVC。可以使用 `$ kubectl create -f` `ebs-pod.yaml` 命令进行部署：
- en: '[PRE12]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We use the following commands to verify the successful deployment of the Pod
    and the creation of the EBS volume. Once the Pod is created, we can see the PVC
    is now in a `Bound` state and a new PV is created also in a `Bound` state:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用以下命令来验证 Pod 的成功部署和 EBS 卷的创建。一旦 Pod 被创建，我们可以看到 PVC 现在处于 `Bound` 状态，并且一个新的
    PV 也在 `Bound` 状态：
- en: '[PRE13]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If we look in detail at the PV, we can see the ID of the volume created in
    AWS by looking at the `VolumeHandle` key:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们详细查看 PV，可以看到通过查看 `VolumeHandle` 键来查看 AWS 中创建的卷 ID：
- en: '[PRE14]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: When the PVC is removed, the reclaim policy (defaulting to what is defined in
    the SC for dynamic provisioning) dictates what happens. In the previous example,
    `Reclaim Policy` is `Delete`, which means the Kubernetes resources (the PV and
    PVC) will be deleted, along with the associated EBS volume. If you want to preserve
    the EBS volume, then the `Retain` value should be set in the SC.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当 PVC 被移除时，回收策略（默认为动态配置中 SC 定义的值）决定了发生什么。在前面的示例中，`回收策略` 是 `Delete`，这意味着 Kubernetes
    资源（PV 和 PVC）将被删除，同时也会删除关联的 EBS 卷。如果你希望保留 EBS 卷，则应在 SC 中设置 `Retain` 值。
- en: 'Now, go into the AWS console and search for the volume ID. The example shown
    next illustrates the volume, the provisioned size, and the type, along with the
    **Key Management Service** (**KMS**) details and throughput:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，进入 AWS 控制台并搜索卷 ID。下面的示例展示了卷、已配置的大小和类型，以及 **密钥管理服务**（**KMS**）的详细信息和吞吐量：
- en: '![Figure 12.2 – The AWS console EBS volumes](img/B18129_12_02.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.2 – AWS 控制台中的 EBS 卷](img/B18129_12_02.jpg)'
- en: Figure 12.2 – The AWS console EBS volumes
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.2 – AWS 控制台中的 EBS 卷
- en: Now we have set up block-based storage using EBS, let’s look at how we can use
    filesystem-based storage shared between multiple Pods using EFS.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经通过 EBS 设置了基于块的存储，让我们来看一下如何使用 EFS 实现多个 Pod 共享的基于文件系统的存储。
- en: Using EFS volumes with your application
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 EFS 卷与应用程序
- en: EFS is a shared storage platform unlike EBS, so while at the Kubernetes level,
    you have the same objects, SC, PV, and PVCs, the way you access the storage and
    how the storage is created are quite different.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: EFS 是一个共享存储平台，不同于 EBS，因此在 Kubernetes 层面，虽然你有相同的对象，SC、PV 和 PVC，但存储的访问方式以及存储的创建方式是完全不同的。
- en: 'The following diagram illustrates the relationship between an EFS instance/volume
    and the Kubernetes PV, PVC, and Pod:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了 EFS 实例/卷与 Kubernetes 的 PV、PVC 和 Pod 之间的关系：
- en: '![Figure 12.3 – EFS volumes](img/B18129_12_03.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.3 – EFS 卷](img/B18129_12_03.jpg)'
- en: Figure 12.3 – EFS volumes
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.3 – EFS 卷
- en: Although we have installed the CSI driver, we can’t provision volumes without
    an EFS instance and mount targets in the required subnets. Let’s look at how we
    can create them next.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们已经安装了 CSI 驱动程序，但没有 EFS 实例和在所需子网中的挂载目标，我们无法配置卷。接下来让我们看看如何创建它们。
- en: Creating the EFS instance and mount targets
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 EFS 实例和挂载目标
- en: 'You can do this in a variety of ways, but we will use the AWS CLI. Let’s start
    by creating the EFS filesystem and retrieving the filesystem ID. The following
    command will create the EFS instance and filter the response to only return `FileSystemId`.
    Please adjust the `–region` parameter to account for the Region you’re using:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过多种方式完成此操作，但我们将使用AWS CLI。首先创建EFS文件系统并获取文件系统ID。以下命令将创建EFS实例，并筛选响应仅返回`FileSystemId`。请根据你使用的区域调整`–region`参数：
- en: '[PRE15]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The next step is to identify the subnets we want to use for our mount targets.
    Ideally, we place the mount targets in the same subnets as the worker nodes. The
    following commands will list all the subnets for a given **virtual private cloud**
    (**VPC**) (you will need to supply the correct VPC-ID) and then list which subnets
    and security groups are being used by your managed node group:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是确定我们希望用于挂载目标的子网。理想情况下，我们将挂载目标放置在与工作节点相同的子网中。以下命令将列出给定**虚拟私有云**（**VPC**）的所有子网（你需要提供正确的VPC-ID），并列出托管节点组正在使用的子网和安全组：
- en: '[PRE16]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We can see from the previous output that we should create mount points in subnets
    3, 5, and 2, as this is where our worker nodes that belong to `myipv4cluster`
    are placed.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 从之前的输出中我们可以看到，我们应该在子网3、5和2中创建挂载点，因为这些子网中包含属于`myipv4cluster`的工作节点。
- en: Important note
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: These subnets also cover the three AZs for high-availability reasons.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这些子网也覆盖了三个AZ，以确保高可用性。
- en: 'We can now identify what security groups are being used by these instances
    using the next command. In our case, the instances are all part of the same security
    group, as they belong to the same managed node group. We will use this for the
    EFS mount targets for simplicity, but you may want to create a separate security
    group for EFS. However, ensure that any security group you use allows the `TCP/2049`
    port between the Pods and the EFS mount targets:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以使用下一个命令识别这些实例使用的安全组。在我们的例子中，所有实例都属于同一个安全组，因为它们属于同一个托管节点组。为了简便，我们将使用这个安全组作为EFS挂载目标，但你可能希望为EFS创建一个单独的安全组。然而，确保你使用的任何安全组都允许`TCP/2049`端口在Pods和EFS挂载目标之间通信：
- en: '[PRE17]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We can now create and verify the mount points, one per subnet/AZ, using the
    following commands. When we verify the mount targets, you will see the IP address
    assigned to the **Elastic Network Interface** (**ENI**) placed in the subnet,
    which will be used by the Pods:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以使用以下命令创建并验证挂载点，每个子网/AZ一个。验证挂载目标时，你将看到分配给**弹性网络接口**（**ENI**）的IP地址被放置在子网中，并将由Pods使用：
- en: '[PRE18]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We have now set up EFS and made it available to the Pods; the next steps are
    almost identical to EBS and involve setting up the Kubernetes object to use EFS.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经设置好EFS并将其提供给Pods；接下来的步骤几乎与EBS相同，包括设置Kubernetes对象以使用EFS。
- en: Creating your EFS cluster objects
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建你的EFS集群对象
- en: 'We need to create the SC and example manifest as shown in the following code
    snippet. You will need to replace the `fileSystemId` key and then deploy it using
    the `$ kubectl create -f` `SC-config.yaml` command:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建SC和示例清单，如以下代码片段所示。你需要替换`fileSystemId`键，然后使用`$ kubectl create -f` `SC-config.yaml`命令进行部署：
- en: '[PRE19]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We can now create the PVC that consumes the SC using the following manifest,
    and then deploy it using the `$ kubectl create -f pvc.yaml` command. Please note
    that `accessMode` is now set to `ReadWriteMany`, as this is shared storage:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以使用以下清单创建消耗SC的PVC，然后使用`$ kubectl create -f pvc.yaml`命令进行部署。请注意，`accessMode`现在设置为`ReadWriteMany`，因为这是共享存储：
- en: '[PRE20]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'If we review the PVC and PV that get created using the commands shown next,
    we can see the new PVC and the PV are created and bound, as again, we are using
    dynamic provisioning. This is different from EBS where it’s only when the PVC
    is *used* that the PV gets created. With EFS, you are charged only for what you
    use, unlike an EBS volume, which you get charged for as soon as it is created,
    so there are no issues with creating the PVC/PV combination as soon as the PVC
    is created:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们检查使用下列命令创建的PVC和PV，可以看到新的PVC和PV被创建并绑定，因为我们使用的是动态供给。这与EBS不同，EBS只有在PVC被*使用*时才会创建PV。而对于EFS，只有在使用时才会收费，和EBS卷不同，EBS卷在创建时就开始收费，因此在PVC创建后立即创建PVC/PV组合不会有任何问题：
- en: '[PRE21]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'If you look in the controller logs (an example is shown next), you can see
    the CSI driver making a call to create the volume:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果查看控制器日志（以下展示了一个示例），你可以看到CSI驱动程序发起了创建卷的调用：
- en: '[PRE22]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The final step is to provision the Pod to use the PVC and attach the EFS volume
    to a mount point within the container. The manifest shown next will create a single
    CentOS-based container and mount the volume under `/data`, which can be deployed
    using the `$ kubectl create -f` `pod2.yaml` command:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是为Pod配置使用PVC，并将EFS卷挂载到容器内的挂载点。下一个清单将创建一个基于CentOS的单一容器，并将卷挂载到`/data`目录下，可以通过`$
    kubectl create -f` `pod2.yaml`命令进行部署：
- en: '[PRE23]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You can validate whether data is being produced and stored in EFS using the
    following command. If you delete and recreate the Pod, the previous Pod’s data
    will be persisted:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下命令验证数据是否正在生成并存储在EFS中。如果您删除并重新创建Pod，先前Pod的数据将被保留：
- en: '[PRE24]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: As `Reclaim Policy` is set to `Delete` (by default), if you delete the PVC,
    you will remove the PV and corresponding EFS data. To sum up, in this section,
    we have looked at how to install and configure the EBS and EFS CSI drivers and
    how we use them to create persistent storage for your Pods. We’ll now revisit
    the key learning points from this chapter.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`Reclaim Policy`的默认设置为`Delete`，如果删除PVC，您将删除PV及其对应的EFS数据。总而言之，在本节中，我们探讨了如何安装和配置EBS和EFS
    CSI驱动程序，以及如何使用它们为Pod创建持久化存储。接下来，我们将回顾本章的关键学习点。
- en: Summary
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we explored how EBS (block) differs from EFS (filesystem) storage.
    We identified that EBS is normally used where you need to provide dedicated volumes
    per Pod, is fixed in size, and is charged as soon as you provision it. Meanwhile,
    EFS is shared storage and can therefore be mounted across multiple Pods, can scale
    as needed, and you are only charged for what you use.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们探讨了EBS（块存储）与EFS（文件系统存储）的区别。我们发现，EBS通常用于需要为每个Pod提供专用卷的场景，它的大小是固定的，并且一旦创建就开始收费。而EFS是共享存储，可以跨多个Pods挂载，按需扩展，且只对实际使用的部分收费。
- en: We also discussed how EFS requires more setup than EBS, as the EBS filesystem
    and mount targets need to be deployed prior to it being used in EKS. EFS can be
    viewed as more complex to set up as it’s a shared storage platform, whereas EBS
    is just network-attached storage for a single node. EBS is generally cheaper to
    provision and use but it is mostly only used for columns attached to a single
    instance (EC2).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还讨论了EFS相比EBS需要更多的配置，因为在EKS中使用EFS之前，需要先部署EBS文件系统和挂载目标。EFS作为共享存储平台，设置起来较为复杂，而EBS只是为单个节点提供的网络附加存储。EBS通常更便宜，但它主要用于附加到单个实例（EC2）的卷。
- en: We then reviewed how to install the CSI drivers, creating an add-on for the
    EBS CSI driver and Helm for the EFS CSI driver. Once the drivers were installed,
    we explored the Kubernetes objects (SC, PVC, and PV) and how we can use dynamic
    provisioning to create the volumes in EBS and EFS from Kubernetes rather than
    having an administrator provision the volumes for us.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，我们回顾了如何安装CSI驱动程序，创建EBS CSI驱动程序的附加组件，并为EFS CSI驱动程序使用Helm。驱动程序安装完成后，我们探讨了Kubernetes对象（SC、PVC和PV）及如何通过动态供应在Kubernetes中创建EBS和EFS卷，而不是让管理员为我们预先创建这些卷。
- en: In the next chapter, we will look at how you can grant IAM permissions to your
    applications/Pods, allowing them to use AWS services.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论如何为您的应用程序/Pods授予IAM权限，使其能够使用AWS服务。
- en: Further reading
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入阅读
- en: 'EBS volume types: [https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-volume-types.html](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-volume-types.html)'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'EBS卷类型: [https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-volume-types.html](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-volume-types.html)'
- en: 'EFS SC: [https://docs.aws.amazon.com/efs/latest/ug/storage-classes.html](https://docs.aws.amazon.com/efs/latest/ug/storage-classes.html)'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'EFS存储类: [https://docs.aws.amazon.com/efs/latest/ug/storage-classes.html](https://docs.aws.amazon.com/efs/latest/ug/storage-classes.html)'
- en: 'When to use EFS: [https://aws.amazon.com/efs/when-to-choose-efs/](https://aws.amazon.com/efs/when-to-choose-efs/)'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '何时使用EFS: [https://aws.amazon.com/efs/when-to-choose-efs/](https://aws.amazon.com/efs/when-to-choose-efs/)'
- en: 'EBS multi-attach versus EFS: [https://www.youtube.com/watch?v=3ORzqOjtsmE](https://www.youtube.com/watch?v=3ORzqOjtsmE)'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'EBS多附加与EFS: [https://www.youtube.com/watch?v=3ORzqOjtsmE](https://www.youtube.com/watch?v=3ORzqOjtsmE)'
- en: 'Troubleshooting EFS: [https://docs.aws.amazon.com/efs/latest/ug/troubleshooting-efs-general.html](https://docs.aws.amazon.com/efs/latest/ug/troubleshooting-efs-general.html)'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'EFS故障排除: [https://docs.aws.amazon.com/efs/latest/ug/troubleshooting-efs-general.html](https://docs.aws.amazon.com/efs/latest/ug/troubleshooting-efs-general.html)'

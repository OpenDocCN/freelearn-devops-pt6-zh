["```\n4 S k8s      1193507 1193486  1  80   0 - 3446501 -    Oct07 ?        06:50:33 java -classpath /usr/local/openunison/work/webapp/\nWEB-INF/lib/*:/usr/local/openunison/work/webapp/WEB-INF/classes:/tmp/quartz -Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom -DunisonEnvironmentFile=/etc/openunison/ou.env -Djavax.net.ssl.trustStore=/etc/openunison/cacerts.jks com.tremolosecurity.openunison.undertow.OpenUnisonOnUndertow /etc/openunison/openunison.yaml\n0 S k8s      2734580 2730582  0  80   0 -  1608 pipe_w 13:13 pts/0    00:00:00 grep --color=auto java \n```", "```\nkubectl run r00t --restart=Never -ti --rm --image lol --overrides '{\"spec\":{\"hostPID\": true, \"containers\":[{\"name\":\"1\",\"image\":\"alpine\",\"command\":[\"nsenter\",\"--mount=/proc/1/ns/mnt\",\"--\",\"/bin/bash\"],\"stdin\": true,\"tty\":true,\"imagePullPolicy\":\"IfNotPresent\",\"securityContext\":{\"privileged\":true}}]}}'\nIf you don't see a command prompt, try pressing Enter. \n```", "```\nroot@r00t:/# ls\nbin  boot  build  dev  etc  home  kind  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var \n```", "```\nroot@r00t:/# touch this_is_from_a_container\nroot@r00t:/# exit \n```", "```\ndocker exec -ti cluster01-worker ls /\nbin  boot  build  dev  etc  home  kind  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  this_is_from_a_container  tmp  usr  var \n```", "```\n$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml\n.\n.\n.\n$ export K8S_DB_POD=$(kubectl get pods -l k8s-app=kubernetes-dashboard -n kubernetes-dashboard -o json | jq -r '.items[0].metadata.name')\n$ kubectl exec -ti $K8S_DB_POD -n kubernetes-dashboard -- sh\nerror: Internal error occurred: error executing command in container: failed to exec in container: failed to start exec \"24b9dba21332299828b4d8f46c360c8afe0cadfd693e6651694a63917d28b910\": OCI runtime exec failed: exec failed: unable to start container process: exec: \"sh\": executable file not found in $PATH: unknown \n```", "```\n$ kubectl debug -it --attach=true -c debugger --image=busybox $K8S_DB_POD -n kubernetes-dashboard\nIf you don't see a command prompt, try pressing enter.\n/ # ps -A\nPID   USER     TIME  COMMAND\n    1 root      0:00 sh\n   14 root      0:00 ps -A\n/ # ping\nBusyBox v1.36.1 (2023-07-17 18:29:09 UTC) multi-call binary.\nUsage: ping [OPTIONS] HOST\n.\n.\n.\n/ # nslookup\nBusyBox v1.36.1 (2023-07-17 18:29:09 UTC) multi-call binary.\nUsage: nslookup [-type=QUERY_TYPE] [-debug] HOST [DNS_SERVER]\nQuery DNS about HOST\nQUERY_TYPE: soa,ns,a,aaaa,cname,mx,txt,ptr,srv,any \n```", "```\n$ kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper/master/deploy/gatekeeper.yaml \n```", "```\n$ kubectl create -f chapter12/default_mutations.yaml\nassign.mutations.gatekeeper.sh/k8spspdefaultallowprivilegeescalation created\nassign.mutations.gatekeeper.sh/k8spspfsgroup created\nassign.mutations.gatekeeper.sh/k8spsprunasnonroot created\nassign.mutations.gatekeeper.sh/k8spsprunasgroup created\nassign.mutations.gatekeeper.sh/k8spsprunasuser created\nassign.mutations.gatekeeper.sh/k8spspsupplementalgroups created\nassign.mutations.gatekeeper.sh/k8spspcapabilities created\n$ sh chapter12/delete_all_pods_except_gatekeeper.sh\ncalico-system\npod \"calico-kube-controllers-7f58dbcbbd-ckshb\" deleted\npod \"calico-node-g5cwp\" deleted \n```", "```\n$ kubectl create ns test-mutations\n$ kubectl create deployment test-nginx --image=ghcr.io/openunison/openunison-k8s-html:latest -n test-mutations\n$ kubectl get pods -l app=test-nginx -o jsonpath='{.items[0].spec.securityContext}' -n test-mutations\n{\"fsGroup\":3000,\"supplementalGroups\":[3000]} \n```", "```\n$ kubectl apply -f chapter12/minimal_gatekeeper_constraints.yaml\nk8spspallowprivilegeescalationcontainer.constraints.gatekeeper.sh/privilege-escalation-deny-all created\nk8spspcapabilities.constraints.gatekeeper.sh/capabilities-drop-all created\nk8spspforbiddensysctls.constraints.gatekeeper.sh/psp-forbid-all-sysctls created\nk8spsphostfilesystem.constraints.gatekeeper.sh/psp-deny-host-filesystem created\nk8spsphostnamespace.constraints.gatekeeper.sh/psp-bloack-all-host-namespace created\nk8spsphostnetworkingports.constraints.gatekeeper.sh/psp-deny-all-host-network-ports created\nk8spspprivilegedcontainer.constraints.gatekeeper.sh/psp-deny-all-privileged-container created\nk8spspprocmount.constraints.gatekeeper.sh/psp-proc-mount-default created\nk8spspallowedusers.constraints.gatekeeper.sh/psp-pods-allowed-user-ranges created \n```", "```\n$ sh chapter12/show_constraint_violations.sh\nk8spspallowedusers.constraints.gatekeeper.sh 16\nk8spspallowprivilegeescalationcontainer.constraints.gatekeeper.sh 2\nk8spspcapabilities.constraints.gatekeeper.sh 2\nk8spspforbiddensysctls.constraints.gatekeeper.sh 0\nk8spsphostfilesystem.constraints.gatekeeper.sh 1\nk8spsphostnamespace.constraints.gatekeeper.sh 0\nk8spsphostnetworkingports.constraints.gatekeeper.sh 1\nk8spspprivilegedcontainer.constraints.gatekeeper.sh 0\nk8spspprocmount.constraints.gatekeeper.sh 0\nk8spspreadonlyrootfilesystem.constraints.gatekeeper.sh null \n```", "```\n$ kubectl get k8spspallowprivilegeescalationcontainer.constraints.gatekeeper.sh -o jsonpath='{$.items[0].status.violations}' | jq -r\n[\n  {\n    \"enforcementAction\": \"deny\",\n    \"kind\": \"Pod\",\n    \"message\": \"Privilege escalation container is not allowed: controller\",\n    \"name\": \"ingress-nginx-controller-744f97c4f-msmkz\",\n    \"namespace\": \"ingress-nginx\"\n  }\n] \n```", "```\n$ kubectl get pod ingress-nginx-controller-744f97c4f-msmkz -n ingress-nginx -o jsonpath='{$.spec.containers[0].securityContext}' | jq -r\n{\n  \"allowPrivilegeEscalation\": true,\n  \"capabilities\": {\n    \"add\": [\n      \"NET_BIND_SERVICE\"\n    ],\n    \"drop\": [\n      \"all\"\n    ]\n  },\n  \"runAsGroup\": 2000,\n  \"runAsNonRoot\": true,\n  \"runAsUser\": 101\n} \n```", "```\n$ kubectl get k8spspcapabilities.constraints.gatekeeper.sh -o jsonpath='{$.items[0].status.violations}' | jq -r\n[\n  {\n    \"enforcementAction\": \"deny\",\n    \"kind\": \"Pod\",\n    \"message\": \"container <controller> has a disallowed capability. Allowed\ncapabilities are []\",\n    \"name\": \"ingress-nginx-controller-744f97c4f-msmkz\",\n    \"namespace\": \"ingress-nginx\"\n  }\n] \n```", "```\nkubectl apply -f chapter12/make_cluster_work_policies.yaml\nk8spsphostnetworkingports.constraints.gatekeeper.sh/psp-deny-all-host-network-ports configured\nk8spsphostfilesystem.constraints.gatekeeper.sh/psp-deny-host-filesystem configured\nk8spspcapabilities.constraints.gatekeeper.sh/capabilities-drop-all configured\nk8spspallowprivilegeescalationcontainer.constraints.gatekeeper.sh/privilege-escalation-deny-all configured \n```", "```\nsh ./chapter12/show_constraint_violations.sh\nk8spspallowedusers.constraints.gatekeeper.sh 12\nk8spspallowprivilegeescalationcontainer.constraints.gatekeeper.sh 0\nk8spspcapabilities.constraints.gatekeeper.sh 0\nk8spspforbiddensysctls.constraints.gatekeeper.sh 0\nk8spsphostfilesystem.constraints.gatekeeper.sh 0\nk8spsphostnamespace.constraints.gatekeeper.sh 0\nk8spsphostnetworkingports.constraints.gatekeeper.sh 0\nk8spspprivilegedcontainer.constraints.gatekeeper.sh 0\nk8spspprocmount.constraints.gatekeeper.sh 0\nk8spspreadonlyrootfilesystem.constraints.gatekeeper.sh null \n```", "```\n---\napiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sPSPCapabilities\nmetadata:\n  name: capabilities-ingress-nginx\nspec:\n  match:\n    kinds:\n      - apiGroups: [\"\"]\n        kinds: [\"Pod\"]\n    namespaces: [\"ingress-nginx\"]\n  parameters:\n    requiredDropCapabilities: [\"all\"]\n    allowedCapabilities: [\"NET_BIND_SERVICE\"] \n```", "```\n$ kubectl delete -f chapter12/enforce_node_policies.yaml\n$ kubectl delete -f chapter12/make_cluster_work_policies.yaml\n$ kubectl delete -f chapter12/minimal_gatekeeper_constraints.yaml \n```", "```\n$ kubectl create -f chapter12/multi-tenant/yaml/minimal_gatekeeper_constraints.yaml\nk8spspallowprivilegeescalationcontainer.constraints.gatekeeper.sh/system-privilege-escalation-deny-all created\nk8spspcapabilities.constraints.gatekeeper.sh/system-capabilities-drop-all created\nk8spspforbiddensysctls.constraints.gatekeeper.sh/system-psp-forbid-all-sysctls created\nk8spsphostfilesystem.constraints.gatekeeper.sh/system-psp-deny-host-filesystem created\nk8spsphostnamespace.constraints.gatekeeper.sh/system-psp-bloack-all-host-namespace created\nk8spsphostnetworkingports.constraints.gatekeeper.sh/system-psp-deny-all-host-network-ports created\nk8spspprivilegedcontainer.constraints.gatekeeper.sh/system-psp-deny-all-privileged-container created\nk8spspprocmount.constraints.gatekeeper.sh/system-psp-proc-mount-default created\nk8spspallowedusers.constraints.gatekeeper.sh/system-psp-pods-allowed-user-ranges created\nk8spsphostfilesystem.constraints.gatekeeper.sh/psp-tigera-operator-allow-host-filesystem created\nk8spspcapabilities.constraints.gatekeeper.sh/capabilities-ingress-nginx created \n```", "```\n---\napiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sPSPAllowPrivilegeEscalationContainer\nmetadata:\n  name: system-privilege-escalation-deny-all\nspec:\n  **match:**\n    kinds:\n      - apiGroups: [\"\"]\n        kinds: [\"Pod\"]\n**namespaces:**\n**-****default**\n**-****kube-node-lease**\n**-****kube-public**\n**-****kubernetes-dashboard**\n**-****local-path-storage**\n**-****tigera-operator**\n**-****openunison**\n**-****activedirectory** \n```", "```\n# capabilities\nviolation[{\"msg\": msg, \"details\": {}}] {\n  checkForCapabilitiesPolicy\n  msg := \"No applicable K8sPSPCapabilities for this namespace\"\n}\ncheckForCapabilitiesPolicy {\n    policies_for_namespace = [policy_for_namespace |\n                              data.inventory.cluster[\"constraints.gatekeeper.sh/v1beta1\"].K8sPSPCapabilities[j].spec.match.namespaces[_] == input.review.object.metadata.namespace ;\n                              policy_for_namespace = data.inventory.cluster[\"constraints.gatekeeper.sh/v1beta1\"].K8sPSPCapabilities[j] ]\n    count(policies_for_namespace)  == 0\n}\n# sysctls\nviolation[{\"msg\": msg, \"details\": {}}] {\n  checkForSysCtlsPolicy\n  msg := \"No applicable K8sPSPForbiddenSysctls for this namespace\"\n}\ncheckForSysCtlsPolicy {\n    policies_for_namespace = [policy_for_namespace |\n                       data.inventory.cluster[\"constraints.gatekeeper.sh/v1beta1\"].K8sPSPForbiddenSysctls[j].spec.match.namespaces[_] == input.review.object.metadata.namespace ;\n                              policy_for_namespace = data.inventory.cluster[\"constraints.gatekeeper.sh/v1beta1\"].K8sPSPForbiddenSysctls[j]\n]\n    count(policies_for_namespace)  == 0\n} \n```", "```\n$ kubectl apply -f chapter12/multi-tenant/yaml/gatekeeper-config.yaml\n$ kubectl create -f chapter12/multi-tenant/yaml/require-psp-for-namespace-constrainttemplate.yaml\n$ kubectl create -f chapter12/multi-tenant/yaml/require-psp-for-namespace-constraint.yaml \n```", "```\n$ kubectl create ns check-new-pods\nnamespace/check-new-pods created\n$ kubectl run echo-test -ti -n check-new-pods --image busybox --restart=Never --command -- echo \"hello world\"\nError from server ([k8srequirepspfornamespace] No applicable K8sPSPAllowPrivilegeEscalationContainer for this namespace\n[k8srequirepspfornamespace] No applicable K8sPSPCapabilities for this namespace\n[k8srequirepspfornamespace] No applicable K8sPSPForbiddenSysctls for this namespace\n.\n. \n```", "```\n$ kubectl create -f chapter12/multi-tenant/yaml/check-new-pods-psp.yaml\n$ kubectl run echo-test -ti -n check-new-pods --image busybox --restart=Never --command -- echo \"hello world\"\nhello world \n```", "```\n$ kubectl create namespace nopriv\n$ kubectl label namespace nopriv pod-security.kubernetes.io/enforce=restricted\n$ kubectl run echo-test -ti -n nopriv --image busybox --restart=Never --command -- id\nError from server (Forbidden): pods \"echo-test\" is forbidden: violates PodSecurity \"restricted:latest\": allowPrivilegeEscalation != false (container \"echo-test\" must set securityContext.allowPrivilegeEscalation=false), unrestricted capabilities (container \"echo-test\" must set securityContext.capabilities.drop=[\"ALL\"]), runAsNonRoot != true (pod or container \"echo-test\" must set securityContext.runAsNonRoot=true), seccompProfile (pod or container \"echo-test\" must set securityContext.seccompProfile.type to \"RuntimeDefault\" or \"Localhost\") \n```"]
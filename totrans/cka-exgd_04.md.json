["```\nkubectl run <pod-name> --image=<image-name:image-tag>\n```", "```\nkubectl run nginx-pod --image=nginx:alpine\n```", "```\npod/nginx-pod created\n```", "```\nkubectl describe pod nginx-pod\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx\nspec:\n  containers:\n  - name: nginx\n    image: nginx:alpine\n    ports:\n    - containerPort: 80\n```", "```\nkubectl apply -f <your-spec>.yaml\n```", "```\nkubectl run busybox --rm -it --image=busybox /bin/sh\n```", "```\nkubectl run nginx --image=nginx --dry-run -o yaml > pod-sample.yaml\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: multi-app-pod\n  labels:\n      app: multi-app\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n    ports:\n    - containerPort: 80\n  - name: busybox-sidecar\n    image: busybox\n    command: ['sh', '-c', 'while true; do sleep 3600; done;']\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: melon-pod\n  labels:\n    app: melonapp\nspec:\n  containers:\n  - name: melonapp-container\n    image: busybox:latest\n    command: ['sh', '-c', 'echo The melonapp is running! && sleep 3600']\n  initContainers:\n  - name: init-melonservice\n    image: busybox:latest\n    command: ['sh', '-c', 'until nslookup melonservice; do echo waiting for melonservice; sleep 2; done;']\n  - name: init-melondb\n    image: busybox:latest\n    command: ['sh', '-c', 'until nslookup melondb; do echo waiting for melondb; sleep 2; done;']\n```", "```\n /etc/kubernetes/manifests\n```", "```\n    apiVersion: batch/v1\n    kind: Job\n    metadata:\n      name: pi\n    spec:\n      template:\n        spec:\n          containers:\n          - name: pi\n            image: perl\n            command: [\"perl\",  \"-Mbignum=bpi\", \"-wle\", \"print bpi(2000)\"]\n          restartPolicy: Never\n      backoffLimit: 4\n    ```", "```\n    kubectl apply -f melon-job.yaml\n    ```", "```\n    kubectl get job\n    ```", "```\napiVersion: batch/v1\nkind: CronJob\nmetadata:\n name: hello\nspec:\n schedule: \"*/1 * * * *\"\n jobTemplate:\n   spec:\n     template:\n       spec:\n         containers:\n         - name: hello\n           image: busybox\n           args:\n           - /bin/sh\n           - -c\n           - date; echo Hello from the Kubernetes cluster\n         restartPolicy: OnFailure\n```", "```\n    kubectl apply -f melon-cronjob.yaml\n    ```", "```\nkubectl get cronjob\n```", "```\nkubectl get pods | grep hello\n```", "```\nkubectl logs hello-xxxx\n```", "```\nkubectl delete cronjobs hello\n```", "```\ncronjob.batch \"hello\" deleted\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:latest\n        ports:\n        - containerPort: 80\n```", "```\nkubectl create deployment kubeserve --image=nginx:latest\n```", "```\ndeployment.apps/kubeserve created\n```", "```\nkubectl get deployments\n```", "```\nkubectl get deployment kubeserve\n```", "```\nkubectl describe deployment kubeserve\n```", "```\nkubectl edit deployment kubeserve\n```", "```\nkubectl delete deployment melon-serve\n```", "```\ndeployment.apps \"kubeserve\" deleted\n```", "```\n    kubectl create deployment kubeserve --image=nginx:latest\n    ```", "```\n    kubectl set image deployment/kubeserve nginx=nginx:1.18.0 --record\n    ```", "```\ndeployment.apps/kubeserve image updated\n```", "```\n    kubectl describe deploy kubeserve\n    ```", "```\n    kubectl rollout undo deployments kubeserve\n    ```", "```\ndeployment.apps/kubeserve rolled back\n```", "```\n    kubectl rollout history deployment kubeserve\n    ```", "```\n    kubectl rollout undo deployment kubeserve --to-revision=2\n    ```", "```\ndeployment.apps/kubeserve rolled back\n```", "```\nkubectl scale deployment kubeserve --replicas=6\n```", "```\ndeployment.apps/kubeserve scaled\n```", "```\napiVersion: apps/v1\nkind: ReplicaSet\nmetadata:\n  name: frontend\n  labels:\n    app: melonapp-rs\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: melonapp-rs\n  template:\n    metadata:\n      labels:\n        app: melonapp-rs\n    spec:\n      containers:\n      - name: nginx\n        image: nginx\n```", "```\nkubectl get replicaset\n```", "```\nkubectl get rs\n```", "```\nkubectl scale replicaset frontend --replicas=6\n```", "```\nreplicaset.apps/frontend scaled\n```", "```\nkubectl scale --replicas=6 -f replicas.yaml\n```", "```\nreplicaset.apps/frontend scaled\n```", "```\nkubectl delete replicaset frontend\n```", "```\nreplicaset.apps \"frontend\" deleted\n```", "```\nkubectl autoscale deployment kubeserve --cpu-percent=50 --min=3 --max=10\n```", "```\nhorizontalpodautoscaler.autoscaling/kubeserve autoscaled\n```", "```\nkubectl get hpa\n```", "```\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: kubeserve\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: kubeserve\n  minReplicas: 3\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 50\n```", "```\nkubectl delete hpa kubeserve\n```", "```\nhorizontalpodautoscaler.autoscaling \"kubeserve\" deleted\n```", "```\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: fluentd\n  namespace: kube-system\n  labels:\n    k8s-app: fluentd\nspec:\n  selector:\n    matchLabels:\n      name: fluentd\n  template:\n    metadata:\n      labels:\n        name: fluentd\n    spec:\n      containers:\n      - name: fluentd\n        image: fluentd:latest\n```", "```\ndaemonset.apps/fluentd created\n```", "```\nkubectl get daemonsets -n kube-system\n```", "```\nkubectl get ds -n kube-system\n```", "```\nkubectl describe daemonsets fluentd -n kube-system\n```", "```\nkubectl delete ds fluentd -n kube-system \n```", "```\ndaemonset.apps \"fluentd\" deleted\n```", "```\nkubectl get namespaces\n```", "```\nkubectl get ns\n```", "```\n   apiVersion: v1\n   kind: Pod\n   metadata:\n    name: k8s-ns-pod\n    namespace: k8s-ns\n    labels:\n      app: k8sapp\n   spec:\n    containers:\n    - name: k8sapp-container\n      image: busybox\n      command: ['sh', '-c', 'echo Salut K8S! && sleep 3600']\n```", "```\nkubectl get pods -n k8s-ns\n```", "```\nkubectl describe pod k8s-ms-pod -n k8s-ns\n```", "```\nkubectl config set-context &(kubectl config current-context) --namespace=dev\n```", "```\nkubectl get pods\n```", "```\nkubectl get pods -l app=my-app\nkubectl get pods -l environment=production\n```", "```\nkubectl get pods -l environment!=production\n```", "```\nkubectl get pods -l app=myapp.environment=production\n```", "```\nkubectl label node cloudmelonplayground env=dev\n```", "```\nnode/cloudmelonplayground labeled\n```", "```\nkubectl get nodes --show-labels\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx\n  labels:\n    env: test\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n  nodeSelector:\n    env: dev\n```", "```\n\napiVersion: v1\nkind: Pod\nmetadata:\n  name: melon-annotation\n  annotations:\n    imageregistry: \"https://hub.docker.com/\"\nspec:\n  containers:\n  - name: nginx\n    image: nginx:latest\n    ports:\n    - containerPort: 80\n```", "```\n spec:\n  affinity:\n    podAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n      - labelSelector:\n          matchExpressions:\n          - key: security\n            operator: In\n            values:\n            - S1\n        topologyKey: topology.kubernetes.io/zone\n    podAntiAffinity:\n      preferredDuringSchedulingIgnoredDuringExecution:\n      - weight: 100\n        podAffinityTerm:\n          labelSelector:\n            matchExpressions:\n            - key: security\n              operator: In\n              values:\n              - S2\n          topologyKey: topology.kubernetes.io/zone\n```", "```\nkubectl taint nodes melonnode app=melonapp:NoSchedule\n```", "```\n  apiVersion: v1\n  kind: Pod\n  metadata:\n   name: melon-ns-pod\n   namespace: melon-ns\n   labels:\n     app: melonapp\n  spec:\n   containers:\n   - name: melonapp-container\n     image: busybox\n     command: ['sh', '-c', 'echo Salut K8S! && sleep 3600']\n   tolerations:\n   - key: \"app\"\n     operator: \"Equal\"\n     value: \"melonapp\"\n     effect: \"NoSchedule\"\n```", "```\nkubectl taint nodes yourworkernode   node-role.kubernetes.io/yourworkernode:NoSchedule-\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n name: melonapp-pod\nspec:\n containers:\n - name: melonapp-container\n   image: busybox\n   command: ['sh', '-c', 'echo stay tuned! && sleep 3600']\n   resources:\n     requests:\n       memory: \"64Mi\"   # 64 Megabytes\ncpu: \"250m\" \n     limits:\n       memory: \"128Mi\"\n       cpu: \"500m\"\n```", "```\n  apiVersion: v1\n  kind: ConfigMap\n  metadata:\n    name: melon-configmap\n  data:\n    myKey: myValue\n    myFav: myHome\n```", "```\nconfigmap/melon-configmap created\n```", "```\nkubectl get configmap\n```", "```\nkubectl get cm\n```", "```\nk describe configmap melon-configmap\n```", "```\n    apiVersion: v1\n    kind: Pod\n    metadata:\n      name: melon-configmap\n    spec:\n      containers:\n      - name: melonapp-container\n    image: busybox\n        command: ['sh', '-c', \"echo $(MY_VAR) && sleep 3600\"]\n        env:\n        - name: MY_VAR\n          valueFrom:\n            configMapKeyRef:\n              name: melon-configmap\n              key: myKey\n    ```", "```\n kubectl logs melon-configmap\n```", "```\n    apiVersion: v1\n    kind: Pod\n    metadata:\n      name: melon-volume-pod\n    spec:\n      containers:\n       - name: myapp-container\n         image: busybox\n         command: ['sh', '-c', \"echo $(cat /etc/config/myKey) && sleep 3600\"]\n         volumeMounts:\n           - name: config-volume\n             mountPath: /etc/config\n      volumes:\n        - name: config-volume\n          configMap:\n            name: melon-configmap\n    ```", "```\nkubectl exec melon-volume-pod -- ls /etc/config\n```", "```\nkubectl delete cm melon-configmap\n```", "```\nconfigmap \"melon-configmap\" deleted\n```", "```\nkubectl create melon-secret --from-literal=username=packtuser \n  --from-literal=password='S!B\\*d$zDsb='\n```", "```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: melon-secret\ntype: Opaque\ndata:\n  USER_NAME: bXl1c2VybmFtZQo=\n  PASSWORD: bXlwYXNzd29yZAo=\n```", "```\nkubectl get secrets\n```", "```\n    apiVersion: v1\n    kind: Pod\n    metadata:\n      name: melon-secret-pod\n    spec:\n      containers:\n        - name: test-container\n          image: busybox:latest\n          command: [ \"/bin/sh\", \"-c\", \"env\" ]\n          envFrom:\n          - secretRef:\n              name: melon-secret\n      restartPolicy: Never\n    ```", "```\n      volumes:\n      - name: secret-volume\n        secret:\n          secretName: melon-secret\n      containers:\n      - name: mybusybox\n        image: busybox:latest\n        command: [ \"/bin/sh\", \"-c\", \"env\" ]\n        volumeMounts:\n        - name: secret-volume\n          readOnly: true\n          mountPath: \"/etc/secret-volume\"\n    ```", "```\nkubectl delete secret melon-secret\n```", "```\nsecret \"melon-secret\" deleted\n```", "```\nkubectl kustomize <targeting_kustomization_directory>\n```", "```\nkubectl apply -k <targeting_kustomization_directory>\n```", "```\n# Create a password.txt file\ncat <<EOF >./password.txt\nusername=admin\npassword=secret\nEOF\ncat <<EOF >deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-app\n  labels:\n    app: my-app\nspec:\n  selector:\n    matchLabels:\n      app: my-app\n  template:\n    metadata:\n      labels:\n        app: my-app\n    spec:\n      containers:\n      - name: app\n        image: my-app\n        volumeMounts:\n        - name: password\n          mountPath: /secrets\n      volumes:\n      - name: password\n        secret:\n          secretName: example-secret-1\nEOF\ncat <<EOF >./kustomization.yaml\nresources:\n- deployment.yaml\nsecretGenerator:\n- name: example-secret-1\n  files:\n  - password.txt\nEOF\n```", "```\nkustomization.yaml  password.txt\n```", "```\nsecretGenerator:\n- name: example-secret-1\n  files:\n  - password.txt\n```", "```\nkubectl apply -f ./test\n```", "```\nhelm install stable/melonchart\n```", "```\nhelm search chartname\n```", "```\nhelm delete melonchart\n```", "```\nhelm upgrade [RELEASE] [CHART_path] [flags]\n```", "```\nhelm rollback melon-release 2\n```"]
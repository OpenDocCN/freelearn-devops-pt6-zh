["```\nminikube start \n```", "```\nsudo minikube start --driver=docker\n```", "```\nsudo groupadd docker\n```", "```\nsudo usermod -aG docker $USER\n```", "```\nnewgrp docker \n```", "```\nsudo systemctl enable docker.service\nsudo systemctl enable containerd.service\n```", "```\nminikube start --driver=docker\n```", "```\nkube-apiserver --authorization-mode=RBAC\n```", "```\nkubectl create ns app\nkubectl create deployment rbac-nginx –-image=nginx -n app\n```", "```\nkubectl create role rbac-user --verb=get --verb=list --resource=pods --namespace=app\n```", "```\nkubectl create rolebinding rbac-pods-binding --role=rbac-user --user=rbac-dev --namespace=app\n```", "```\nkubectl auth can-i delete deployment --as=rbac-user\n```", "```\nNo\n```", "```\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  namespace: app\n  name: rbac-user\nrules:\n- apiGroups: [\"extensions\", \"apps\"] \n  resources: [\"deployments\"]\n  verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\"]\n```", "```\nkubectl auth reconcile -f my-rbac-rules.yaml\n```", "```\nkubectl get pods -n kube-system | grep dns\n```", "```\ncoredns-64897985d-brqfl 1/1 Running 1 (2d ago) 2d\n```", "```\nkubectl describe deploy coredns -n kube-system \n```", "```\nkubectl get svc -n kube-system\n```", "```\nNAME       TYPE     CLUSTER-IP   EXTERNAL-IP      PORT(S)        \nAGE\nkube-dns   ClusterIP 10.96.0.10  <none>   53/UDP,53/TCP,9153/TCP 2d\n```", "```\nkubectl logs coredns-64897985d-brqfl -n kube-system\n```", "```\nkubectl create deployment svc-nginx –-image=nginx -n app\n```", "```\ndeployment.apps/svc-nginx created\n```", "```\nkubectl expose deploy svc-nginx --type=NodePort --name=nginx-svc --port 80 -n app\n```", "```\nservice/nginx-svc exposed\n```", "```\nnginx-svc.app.svc.cluster.local\n```", "```\nkubectl get svc -n app\n```", "```\nkubectl get svc nginx-svc –n app -o wide\n```", "```\nkubectl run -it sandbox --image=busybox:latest --rm --restart=Never -- nslookup 10.101.34.154\n```", "```\nkubectl run -it sandbox -n app --image=busybox:latest --rm --restart=Never -- nslookup 10.101.34.154\n```", "```\nkubectl run -it sandbox --image=busybox:latest --rm --restart=Never -- nslookup nginx-svc.app.svc.cluster.local\n```", "```\nServer:    10.96.0.10\nAddress 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local\n\nName:      nginx-svc.app.svc.cluster.local\nAddress 1: 10.101.34.154 nginx-svc.app.svc.cluster.local\npod \"sandbox\" deleted\n```", "```\nkubectl run -it nginx-beta -n app --image=nginx --rm --restart=Never -- curl -Is http://nginx-svc.app.svc.cluster.local\n```", "```\nkubectl run -it sandbox --image=busybox:latest --rm --restart=Never -- \n```", "```\nIf you don't see a command prompt, try pressing enter.\n/ # whoami\nroot\n```", "```\nnslookup 10.101.34.154\n```", "```\nkubectl get pods -n app | grep svc-nginx\n```", "```\nsvc-nginx-77cbfd944c-9wp6s    1/1     Running     0          4h14m\n```", "```\nkubectl exec -i -t svc-nginx-77cbfd944c-9wp6s --container nginx -n app -- /bin/bash\n```", "```\nroot@svc-nginx-77cbfd944c-9wp6s:/# \ncurl -Is http://nginx-svc.app.svc.cluster.local\n```", "```\n    sudo apt-get update\n    sudo apt-get install -y apt-transport-https ca-certificates curl\n    sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg\n    echo \"deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main\" | sudo tee /etc/apt/sources.list.d/kubernetes.list\n    ```", "```\n    sudo apt-get update\n    sudo apt-get install -y kubelet kubeadm \n    ```", "```\n    sudo apt-get update\n    sudo apt-get install -y kubelet kubeadm kubectl \n    ```", "```\n    sudo apt-mark hold kubelet kubeadm kubectl \n    ```", "```\n      sudo kubeadm init --pod-network-cidr=192.168.0.0/16\n    ```", "```\n     mkdir -p $HOME/.kube\n     sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n     sudo chown $(id -u):$(id -g) $HOME/.kube/config\n    ```", "```\nsudo kubeadm join --token <token>  <control-plane-host>:<control-plane-port> --discovery-token-ca-cert-hash sha256:<hash>\n```", "```\nkubectl run helloPackt --image=busybox\n```", "```\nkubeadm version \n   kubectl version  \n```", "```\napt update \napt-cache madison kubeadm \n```", "```\napt-mark unhold kubeadm && \\ \napt-get update && apt-get install -y kubeadm=1.xx.x-00 && \\ \napt-mark hold kubeadm \n```", "```\nkubeadm upgrade plan \n```", "```\n    kubeadm upgrade apply v1.xx.y \n```", "```\n   kubeadm version \n   kubectl version  \n```", "```\n  apt update \n  apt-cache madison kubeadm \n```", "```\n  sudo kubeadm upgrade node \n```", "```\nkubectl drain worker-0 --ignore-daemonsets \n```", "```\napt-mark unhold kubeadm && \\ \napt-get update && apt-get install -y kubeadm=1.xx.x-00 && \\ \napt-mark hold kubeadm \n```", "```\n    kubeadm upgrade plan \n```", "```\n    kubeadm upgrade apply v1.xx.y \n```", "```\nsudo systemctl daemon-reload \nsudo systemctl restart kubelet \n```", "```\nkubectl uncordon worker-0 \n```", "```\nsudo ETCDCTL_API=3 etcdctl endpoint status --endpoints=https://172.16.16.129:2379 --cacert=/etc/kubernetes/pki/etcd/ca.crt --cert=/etc/kubernetes/pki/etcd/server.crt --key=/etc/kubernetes/pki/etcd/server.key --write-out=table \n```", "```\nsudo ETCDCTL_API=3 etcdctl snapshot save snapshotdb \n--endpoints=https://172.16.16.129:2379 \n--cacert=/etc/kubernetes/pki/etcd/ca.crt --cert=/etc/kubernetes/pki/etcd/server.crt --key=/etc/kubernetes/pki/etcd/server.key \n```", "```\nsudo ETCDCTL_API=3 etcdctl --endpoints 172.16.16.129:2379 snapshot restore snapshotdb \n```", "```\nkubectl run nginx --image=nginx:alpine\n```", "```\nkubectl scale deployment nginx --replicas=5\n```", "```\n  apiVersion: v1 \n  kind: ConfigMap \n  metadata: \n    name: packt-configmap \n  data: \n    myKey: packtUsername \n    myFav: packtPassword\n```", "```\nkubectl apply -f packt-cm.yaml\n```", "```\nkubectl get configmap\n```", "```\napiVersion: v1 \nkind: Pod \nmetadata: \n  name: packt-configmap \nspec: \n  containers: \n  - name: packt-container \n    image: busybox \n    command: ['sh', '-c', \"echo $(MY_VAR) && sleep 3600\"] \n    env: \n    - name: MY_VAR \n      valueFrom: \n        configMapKeyRef: \n          name: packt-configmap \n          key: myKey\n```", "```\nkubectl logs packt-configmap\n```", "```\napiVersion: v1 \nkind: Pod \nmetadata: \n  name: packtpod \n  labels: \n    app: packtapp \nspec: \n  containers: \n  - name: packtapp-container \n    image: busybox:latest \n    command: ['sh', '-c', 'echo The packtapp is running! && sleep 3600'] \n  initContainers: \n  - name: init-pservice \n    image: busybox:latest \n    command: ['sh', '-c', 'until nslookup packtservice; do echo waiting for packtservice; sleep 2; done;'] \n```", "```\nkubectl apply -f packt-pod.yaml\nUse the following command to see if the pod is up and running: \nkubectl get podpackt\n```", "```\napiVersion: v1 \nkind: Pod \nmetadata: \n  name: pactk-multi-pod \n  labels: \n      app: multi-app \nspec: \n  containers: \n  - name: nginx \n    image: nginx \n    ports: \n    - containerPort: 80 \n  - name: busybox-sidecar \n    image: busybox \n    command: ['sh', '-c', 'while true; do sleep 3600; done;']\n```", "```\nkubectl apply -f packt-pod.yaml\nUse the following command to see if the pod is up and running: \nkubectl get pod pactk-multi-pod\n```", "```\n  apiVersion: v1 \n  kind: PersistentVolume \n  metadata: \n    name: packt-data-pv\n  spec: \n    storageClassName: local-storage \n    capacity: \n      storage: 2Gi \n    accessModes: \n      - ReadWriteOnce\n```", "```\nkubectl apply -f packt-data-pv.yaml\n```", "```\napiVersion: v1 \n kind: PersistentVolumeClaim \n metadata: \n   name: packt-data-pvc1\n spec: \n   storageClassName: local-storage \n   accessModes: \n       - ReadWriteOnce \n   resources: \n     requests: \n        storage: 1Gi\n```", "```\napiVersion: v1 \n kind: PersistentVolumeClaim \n metadata: \n   name: packt-data-pvc2\n spec: \n   storageClassName: local-storage \n   accessModes: \n       - ReadWriteOnce \n   resources: \n     requests: \n        storage: 1Gi\n```", "```\nkubectl apply -f packt-data-pv1.yaml,packt-data-pv2.yaml\n```", "```\napiVersion: v1 \n kind: Pod \n metadata: \n   name: packt-data-pod\n spec: \n   containers: \n     - name: busybox \n       image: busybox \n       command: [\"/bin/sh\", \"-c\",\"while true; do sleep 3600;  done\"] \n       volumeMounts: \n       - name: temp-data \n         mountPath: /tmp/data \n   volumes: \n     - name: temp-data \n       persistentVolumeClaim: \n         claimName: packt-data-pv1\n   restartPolicy: Always\n```", "```\nkubectl apply -f packt-data-pod.yaml\n```", "```\nkubectl get pod packt-data-pod\n```", "```\nkubectl create sa packt-sa -n packt-ns\n```", "```\nkubectl create role packt-role --verb=get --verb=list --resource=pods --namespace=packt-ns\n```", "```\nkubectl create rolebinding packt-pods-binding --role=packt-role --user=packt-user -- namespace=packt-ns\n```", "```\napiVersion: rbac.authorization.k8s.io/v1 \nkind: Role \nmetadata: \n  namespace: packt-ns \n  name: packt-clusterrole\nrules: \n- apiGroups: [\"\"]  \n  resources: [\"pods\"] \n  verbs: [\"get\", \"list\"]\n```", "```\napiVersion: rbac.authorization.k8s.io/v1 \nkind: RoleBinding \nmetadata: \n  name: packt-pods-binding\n  namespace: packt-ns \nsubjects: \n- kind: User \n  apiGroup: rbac.authorization.k8s.io \n  name:packt-user\nroleRef: \n  kind: Role  \n  name: packt-role\n  apiGroup: rbac.authorization.k8s.io\n```", "```\nkubectl apply -f packt-role.yaml,packt-pods-binding.yaml\n```", "```\nkubectl get roles -n packt-ns \n```", "```\nkubectl get rolebindings -n packt-ns \n```", "```\nkubectl create deployment packtbusybox –-image=busybox:1.28 -n packt-ns –port 80\n```", "```\nkubectl describe deployment packtbusybox -n packt-ns -o yaml > packt-busybox.yaml\n```", "```\napiVersion: v1\nkind: Deployment\nmetadata:\n  name: packtbusybox\n  namespace : packt-ns\nspec:\n  containers:\n  - image: busybox\n    name: packtbusybox\n    volumeMounts:\n    - mountPath: /var/run/secrets/tokens\n      name: vault-token\n  serviceAccountName: packt-sa\n  volumes:\n  - name: vault-token\n    projected:\n      sources:\n      - serviceAccountToken:\n          path: vault-token\n          expirationSeconds: 7200\n          audience: vault\n```", "```\nkubectl create deployment nginx --image=nginx --replicas=2 -n packt-app\n```", "```\nkubectl expose deployment nginx --type=ClusterIP --port 8080 --name=packt-svc --target-port 80 -n packt-app\n```", "```\nkubectl get nodes -o jsonpath='{.items[*].status.addresses[?( @.type==\"INTERNAL-IP\")].address}'\n```", "```\nkubectl get svc packt-svc -n packt-app -o wide\n```", "```\nkubectl run -it sandbox-nginx --image=nginx -n packt-app --rm --restart=Never -- curl -Is http://192.168.xx.x (internal IP ):31400 ( endpoint )\n```", "```\nkubectl expose deployment nginx --type=NodePort --port 8080 --name=packt-svc --target-port 80 -n packt-app\n```", "```\nkubectl get nodes -o jsonpath='{.items[*].status.addresses[?( @.type==\"INTERNAL-IP\")].address}'\n```", "```\nkubectl get svc packt-svc -n packt-app -o wide\n```", "```\nkubectl run -it test-nginx --image=nginx -n packt-app --rm --restart=Never -- curl -Is http://192.168.xx.x (internal IP ):31400 ( endpoint )\n```", "```\ncurl -Is http://192.168.xx.x (internal IP of the worker 2 ):31400 ( the port of that node  )\n```", "```\nwget http://192.168.xx.x (internal IP of the worker 2 ):31400 ( the port of that node  )\n```", "```\nkubectl run -it sandbox-nginx --image=busybox:latest \nkubect exec sandbox-nginx -- nslookup <ip address of nginx Nodeport>\n```", "```\nkubectl run -it sandbox-nginx --image=busybox:latest \nkubect exec sandbox-nginx -- nslookup <hostname of nginx Nodeport>\n```", "```\nkubectl run -it sandbox-nginx --image=busybox:latest \nkubect exec sandbox-nginx -- nslookup x-1-0-9(pod ip address).pack-app.pod.cluster.local\n```", "```\nkubectl top pod -- all-namespaces --sort-by=cpu > max-cpu.txt\n```"]
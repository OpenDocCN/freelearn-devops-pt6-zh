- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: K3s Installation and Configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter offers a quick deep dive into K3s. We will start by understanding
    what K3s is and its architecture, and then we will learn how to prepare your ARM
    device for K3s. Following this, you will learn how to perform a basic installation
    of K3s from a single node cluster to a multi-node cluster, followed by a backend
    configuration using MySQL. Additionally, this chapter covers how to install an
    Ingress controller, using Helm Charts and Helm, to expose your Services across
    the load balancer created by NGINX. Finally, we will look at how to uninstall
    K3s and troubleshoot your cluster. At the end of the chapter, you will find additional
    resources to implement additional customizations for K3s.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing K3s and its architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing your edge environment to run K3s
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating K3s single and multi-node clusters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using external MySQL storage for K3s
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Helm to install software packages in Kubernetes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the default Ingress controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uninstalling K3s from the master node or an agent node
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Troubleshooting a K3s cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this chapter, you will need one of the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi 4 Model B with 4 GB of RAM (suggested minimum)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An AWS account to create a **Graviton2** instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any x86_64 VM instance with Linux installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An internet connection and DHCP support for local K3s clusters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With these requirements, we are going to install K3s and start experimenting
    with this Kubernetes distribution. So, let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing K3s and its architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'K3s is a lightweight Kubernetes distribution created by Rancher Labs. It includes
    all the necessary components inside a small binary file. Rancher removed all the
    unnecessary components for this Kubernetes distribution to run the cluster, and
    it also added other useful features to run K3s at the edge, such as MySQL support
    as a replacement for `etcd`, an optimized Ingress controller, storage for single
    node clusters, and more. Let''s examine *Figure 2.1* to understand how K3s is
    designed and packaged:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – The K3s cluster components](img/B16945_Figure_2.1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 – The K3s cluster components
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding diagram, you can see that K3s has two components: the server
    and the agent. Each of these components must be installed on a node. A node is
    a bare metal machine or a VM that works as a master or agent node. The master
    node manages and provisions Kubernetes objects such as Deployments, Services,
    and Ingress controllers inside the agent nodes. An agent node oversees the processing
    of information using these objects. Each node uses the different components shown
    in *Figure 2.1*, and they are provided in a single binary that packages all the
    necessary components to run the master and agent nodes. At the process level,
    the master node runs the K3s server, and the agent node runs the K3s agent. For
    each component, you will find a tunnel proxy to interconnect the master with the
    agent (that is, the worker nodes).'
  prefs: []
  type: TYPE_NORMAL
- en: By default, the K3s *agent and master nodes run* Flannel as the default **Container
    Network Interface** (**CNI**) plugin. CNI is the specification for container networking,
    and the CNI plugins are the interface that is used to manage the network connectivity
    of containers. It also installs **containerd** as your container engine to create
    your Pods. One thing that the server and agent both share is that each component
    consists of a single binary around 100 MB that includes all minimal components
    to run each node. However, you can add additional components removed in K3s that
    are included in vanilla Kubernetes clusters, when you need them.
  prefs: []
  type: TYPE_NORMAL
- en: In terms of what the role of each node is, the master node is called the **control
    plane**, that is, the one that manages all the Kubernetes cluster configurations,
    networking, and more. In comparison, the agent node is called the **data plane**
    on which all the services, network traffic, and processing occur.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing your edge environment to run K3s
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before installing K3s, you need to follow the next steps to configure a K3s
    master or agent for your ARM devices. So, let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Hardware that you can use
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, you must prepare your device. There are several options regarding how
    to do this. The first is to buy a Raspberry device to begin experimenting with
    to create a low-cost edge system. To buy this device, you need to take into consideration
    the following hardware specifications and components:'
  prefs: []
  type: TYPE_NORMAL
- en: The Raspberry Pi 4 Model B with at least 4 GB of RAM as an ARM device.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A power supply of 5V and 3A is recommended.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An Ethernet cable for the internet connection.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Micro HDMI to HDMI cable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A MicroSD card: SanDisk Extreme MicroSDHC UHS-1 A1 V30 32GB, or similar, is
    recommended.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A MicroSD card reader.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This setup will give you the best bang for your buck. You might be thinking
    *why this configuration?* Well, let me quickly explain. The Raspberry Pi 4 Model
    B has a lot of improvements in terms of speed processing compared with previous
    versions. When talking about compatibility, the Raspberry Pi has an ARMv7 processor
    that is supported by many languages and programs. It also supports OSes for ARM64
    or AArch64 processors that are used for devices with ARMv8 processors. This processors'
    architectures are supported in Raspberry B models. However, for more production-ready
    devices, you might want to look at an ARM 64-bit device, such as UDOO X86 II ULTRA,
    which has a 64-bit processor.
  prefs: []
  type: TYPE_NORMAL
- en: Moving on to the power supply, you need a device with 5 V and 3A to prevent
    slowing the Raspberry Pi down. You can use a 5 V/2.4 A, but a 5 V/3 A power supply
    works better for the Raspberry Pi 4 Model B. If you have the money, go for the
    4 Model B with 8 GB of memory.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, for the MicroSD card, select a high-speed card. This will perform better
    when you are running your software. SanDisk has a nice MicroSD card; just look
    at the read and write speed and use a MicroSD with at least 32 GB. And don't use
    Wi-Fi if possible; that's the reason behind using an Ethernet cable, so you can
    have a stable connection.
  prefs: []
  type: TYPE_NORMAL
- en: Linux distributions for ARM devices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are several GNU/Linux distributions or OSes that you can use depending
    on your use case:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Raspbian**: This is the first distribution that you can use that is optimized
    for Raspberry devices. It is reliable and ready to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ubuntu**: This distribution can be used on Raspberry devices or other ARM
    64-bit devices, including x86_64 devices. One of the advantages of Ubuntu is that
    it can be found in all the major cloud providers such as AWS, Azure, and GCP.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Alpine**: This is a small distribution with minimal software, which is designed
    to be a tiny distribution. It can be used as your next project to customize your
    own distribution according to your project needs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**k3OS**: This is a tiny distribution designed to only run K3s on edge devices,
    but it''s versatile.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are other distributions, but you can use these as a quick start for your
    edge projects.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Ubuntu inside your MicroSD card
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now it's time to install your OS. To install your Linux distribution inside
    your MicroSD, first, you must download Raspberry Pi Imager for your system. In
    this case, we are going to use the Mac version. You can download it at [https://www.raspberrypi.org/software](https://www.raspberrypi.org/software).
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin installing the OS inside your Raspberry device, perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the binary from the previous link and open it; you should see something
    like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.2 – The Raspberry Pi Imager menu'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_Figure_2.2.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.2 – The Raspberry Pi Imager menu
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **CHOOSE OS** button to choose the Ubuntu Server 20.04 64-bit
    OS for ARM64, which can be found by navigating to the **Other general purpose
    OS** | **Ubuntu** menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.3 – The Raspberry distribution selection'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_Figure_2.3.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.3 – The Raspberry distribution selection
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, insert your MicroSD card (you must buy an adapter to read MicroSD cards).
    Your device will appear when you select the **CHOOSE STORAGE** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.4 – Storage selection'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_Figure_2.4.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.4 – Storage selection
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, click on the **WRITE** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.5 – The last step to install the distribution onto your storage
    device'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_Figure_2.5.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.5 – The last step to install the distribution onto your storage device
  prefs: []
  type: TYPE_NORMAL
- en: 'Accept the option to write the device. Raspberry Pi Imager will then ask you
    for your username and password to continue writing to the MicroSD card:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.6 – Confirmation to write to your MicroSD card'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_Figure_2.6.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.6 – Confirmation to write to your MicroSD card
  prefs: []
  type: TYPE_NORMAL
- en: 'Wait until the writing process finishes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.7 – Writing the OS onto the MicroSD card'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_Figure_2.7.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.7 – Writing the OS onto the MicroSD card
  prefs: []
  type: TYPE_NORMAL
- en: 'Wait until the verifying process finishes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.8 – Verifying that the OS has been written correctly'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_Figure_2.8.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.8 – Verifying that the OS has been written correctly
  prefs: []
  type: TYPE_NORMAL
- en: 'Extract your MicroSD card:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.9 – Dialog showing when the writing process is complete'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_Figure_2.9.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.9 – Dialog showing when the writing process is complete
  prefs: []
  type: TYPE_NORMAL
- en: Now your MicroSD contains a fresh Ubuntu installation. In the next section,
    we will install K3s using this fresh installation.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Ubuntu before installing a K3s master or worker node
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Right now, your device is prepared to run for the first time. Perform the following
    steps to configure and install it as a single node cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: Turn on your device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When Ubuntu asks you for a username and password, enter the username and password
    as `ubuntu`; this is the default password for the first login.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, Ubuntu will ask you to change the default password. Let's use `k3s123-`
    as our password. Remember that in a real production scenario, you must use a stronger
    password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let''s configure the network. By default, Ubuntu uses `init` cloud to
    configure the network. Let''s deactivate this by creating a `99-disable-network-config.cfg`
    file with the following commands and content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is the content of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If you execute `ifconfig`, you will see that your device is `eth0`. However,
    it could be named `es3` or something similar. So, let''s modify the `50-cloud-init`
    file with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, modify the content of the file. It should look something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you should modify this file, as needed, by changing the address,
    gateway, and nameserver according to your current network or internet connection.
    For this local setup, we are using an internet connection with DHCP support.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now apply the configuration, and you can reboot your device to determine whether
    your IP address is set when the OS starts. To do this, execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now configure the kernel parameters for the boot by editing the `/boot/firmware/cmdline.txt`
    file with the following command and content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add this content to the end of the line to enable container creation with `containerd`
    in your K3s cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you are using Raspbian, this file is in `/boot/cmdline.txt`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `/etc/hostname` file with a unique name, for example, `master` for
    your master node or `worker-1`, `worker-2`, and so on for the worker name using
    `nano`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is the content of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the `/etc/hosts` file by adding the hostname. At the very least, you should
    have a line like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The content, for example, could be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now reboot your device:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This configuration is required to prepare your device to configure a K3s master
    node or agent node. In the next section, you will learn how to install K3s on
    your device.
  prefs: []
  type: TYPE_NORMAL
- en: Creating K3s single and multi-node clusters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, you are going to learn how to configure K3s master and agent
    nodes on your Ubuntu OS for your ARM devices. To visualize what we are doing,
    let''s take a closer look at *Figure 2.10*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.10 – The K3s cluster configurations'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_Figure_2.10.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.10 – The K3s cluster configurations
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding diagram shows that you can install a K3s cluster in the following
    configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Single node cluster**: In this configuration, you only have one node that
    assumes the role of a master and agent/worker node at the same time. You can use
    this type of cluster for small applications. This is not ideal for heavy workloads,
    as it can slow down all the components. Remember that this node works as a master
    and an agent at the same time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multi-node cluster**: In this configuration, you have a master node that
    controls the agent/worker nodes; this configuration will be useful for high availability
    and heavy processing tasks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With these brief descriptions, you can visualize what kind of configuration
    is required to create a K3s cluster. In the next section, you will learn how to
    create a single node cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a single node K3s cluster using Ubuntu OS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To begin installing K3s, you should use Ubuntu as your main distribution for
    K3s. You might be asking yourself why Ubuntu? Well, Ubuntu has a lot of pre-built
    features that can save some time when preparing your device. Additionally, it
    supports 32-bit and 64-bit ARM devices. I can recommend this distribution because
    of its compatibility and supported software. So, let's get started with this single
    node K3s cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install K3s (for a master-node or a single node cluster), you must perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Turn on your device and log in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you are logged in, execute the following line in your Terminal to perform
    a basic installation of K3s:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This command installs K3s without `traefik` as the default Ingress controller
    and gives you the ability to execute the `kubectl` command without using `sudo`.
    You can add some specific flags to use a specific version of K3s; please refer
    to the official documentation to learn more about this parameter. You can find
    the link at the end of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '(*Optional*) If you want to install K3s on AWS Graviton 2 instances or another
    cloud provider where the public IP is not associated with a network interface
    in the OS, you have to set the external IP parameter with the public IP of the
    instance, using the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '(*Optional*) If you want to implement a simple test, execute the following
    commands to expose a deployment using the `LoadBalancer` feature of K3s:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, access the deployed `nginx` service using the public or private IP address
    of your K3s node on port `8001`; you can test the access by executing the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, if you have a private IP, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This node will be a master node and an agent node at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: Now we have installed a single node cluster. Let's go ahead and add more nodes
    to your new cluster in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Adding more nodes to your K3s cluster for multi-node configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So, what if you want to add more nodes to your single node cluster? To add
    more nodes to your cluster, first, you must follow the *Installing Ubuntu inside
    your MicroSD card* section for each new node. Then, you can continue with the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in to your master node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Extract the token to join the cluster from your master node using the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Log out from your master node. Now you have the token to join additional nodes
    to the cluster.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For each worker node to join the cluster, perform the following steps (this
    is the easier way).
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in to your worker node that you want to add to the cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set an environment variable with the token that your master generated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Register your node using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you have the same hostname for all your nodes, add the `--with-node-id` option
    and K3s will add a random ID at the end of your hostname so that you have a unique
    name for the nodes inside your cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exit from your worker node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Log in to the master node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check that your new node is running using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You will have to wait a few minutes while the nodes change to the `Ready` state.
  prefs: []
  type: TYPE_NORMAL
- en: '(*Optional*) If you have a different GNU/Linux distribution than Ubuntu, the
    following steps will work better with tiny distributions such as Alpine Linux.
    Log in to the worker node that you want to add to the cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Download the binary of K3s inside your worker node using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Please navigate to [https://github.com/k3s-io/k3s/releases](https://github.com/k3s-io/k3s/releases)
    to download the binary. Choose any method you wish to place this binary inside
    your worker node. The goal is to download the K3s binary inside your worker node.
    Note that in the previous command, version `v1.21.2+k3s1` was selected. So, modify
    the URL to fit your desired version.
  prefs: []
  type: TYPE_NORMAL
- en: 'Set an environment variable with the token that your master generated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Exit from your worker node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Log in to your master node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you want to set the role of your node, execute the following steps.
  prefs: []
  type: TYPE_NORMAL
- en: '(*Optional*) Set the role of your new worker node using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Exit from the master node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now you have a multi-node K3s cluster, and it's ready to use. In the next section,
    you will learn how to manage your cluster using the `kubectl` command.
  prefs: []
  type: TYPE_NORMAL
- en: Extracting K3s kubeconfig to access your cluster
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, it''s time to configure access to your K3s cluster from your computer
    using the `kubectl` command. To configure the connection of your new K3s cluster
    from the outside, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the `kubectl` command by running the following commands for Mac installation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Alternatively, if you are using Linux, run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: From the master node, copy the content inside `/etc/rancher/k3s/k3s.yaml` to
    your local `~/.kube/` config file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Take the following part of the server value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And change it to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Change the permissions of this file using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, test whether you can access the cluster using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command returns the list of cluster nodes and their states.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Remember to install the `kubectl` command-line tool before you copy the Rancher
    `kubeconfig` file onto your computer. Remember that the content of the `k3s.yaml`
    file has to be stored inside `~/.kube/config` and it requires the `0400` permission.
    To learn how to install the `kubectl` command, navigate to [https://kubernetes.io/docs/tasks/tools/install-kubectl-macos](https://kubernetes.io/docs/tasks/tools/install-kubectl-macos).
  prefs: []
  type: TYPE_NORMAL
- en: Now you are ready to perform more advanced configurations to create a new K3s
    cluster. Let's move on to the next section to learn more about this.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced configurations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now it's time to explore more advanced configurations that you can use to configure
    your K3s cluster at the edge.
  prefs: []
  type: TYPE_NORMAL
- en: Using external MySQL storage for K3s
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'K3s supports MySQL and SQLite, instead of `etcd`, as a data storage for your
    K3s cluster information. You can install MySQL in another node, a cloud instance,
    or a managed service on the cloud such as AWS Aurora or Google Cloud SQL. For
    example, let''s attempt it with a cloud instance using DigitalOcean. However,
    you can do it on any cloud that you wish. So, let''s get started with the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in to your cloud instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install Docker with the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Log out using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In your master node, execute the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This will use the MySQL installation from your cloud instance. You must substitute
    `YOUR_CLOUD_INSTANCE_IP` with the IP of your cloud instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Extract the token to join the cluster from your master node with the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Log out from your master node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For each worker node, execute the next step.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the agent to register and prepare your worker node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You can execute `kubectl get nodes` to check your worker node has been added
    and is in the `Ready` state.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you are ready to use your cluster with an external datastore instead of
    `etcd` or SQLite. In this case, we have a hybrid solution using local instances
    and a public instance to store the K3s configuration using MySQL. Remember that
    you can use MariaDB or another MySQL managed service from your favorite cloud
    provider. You can add multiple nodes configured as master nodes to your cluster
    for high availability in the main components of your cluster such as the Kubernetes
    API.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Helm to install software packages in Kubernetes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Helm is a package manager for Kubernetes. With Helm, you can install software
    onto your Kubernetes cluster using a package definition called Helm Charts. You
    can use a public Helm Chart repository or your own repository to install packages.
    To install Helm in Linux or Mac, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Helm on Linux, run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To install Helm on Mac, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To begin installing Helm Charts, you should add a chart repository to Helm
    by running the following command on Linux or Mac:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, let's examine how to change the default ingress controller.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the default ingress controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To begin this section, let's define what Ingress is and then define an Ingress
    controller. Based on the official Kubernetes website, an Ingress is a Kubernetes
    component that exposes your HTTP or HTTPS routes that match your internal services
    inside the cluster. A Service is an abstract way that Kubernetes uses to expose
    your application as a network service. And an Ingress controller is a component
    that is responsible for fulfilling the Ingress; this includes a load balancer
    that might also configure an edge router or proxy. There are a lot of implementations
    of Ingress controllers based on different edge routers or proxies such as Traefik,
    Envoy, Nginx, and more. By default, K3s includes Traefik version 1.0, which includes
    minimal features in which to route your services without consuming many resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to use a different Ingress controller instead of the default option
    (**Traefik**), install the master node using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the master node with the following parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, create a namespace to install the `nginx` Ingress controller with the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the Helm Charts repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update your repositories to get the latest version:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install your Ingress controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: (*Optional*) If you want to test whether the `nginx-ingress` controller is working,
    follow the upcoming steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a deployment using the `nginx` image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Expose the deployment using `ClusterIP`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `my-ingress.yaml` file using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the Ingress using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now test whether it works with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You must replace the value of `LB_IP` with the IP address of the `LoadBalancer`
    service created by the NGINX Ingress controller installation. In this case, is
    the same IP address of your master node.
  prefs: []
  type: TYPE_NORMAL
- en: 'To check the IP of where `nginx-ingress` has been exposed, execute the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Take into consideration that K3s has its own behavior when using Kubernetes
    Services. To read more about this, please refer to https://rancher.com/docs/k3s/latest/en/networking.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you understand how to install an Ingress controller and how to use
    it, it's time to learn how to uninstall K3s from your nodes if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Uninstalling K3s from the master node or an agent node
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to uninstall K3s in your master or agent nodes, you must execute
    the uninstall scripts provided by K3s installation. So, let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Uninstalling K3s from the agent node
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To uninstall K3s from an agent (that is, the worker nodes), execute the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in to your agent node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Uninstall the agent daemon and remove all the containers created on this node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Log out from the agent node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Uninstalling K3s from the master node
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To uninstall K3s from the master node, execute the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in to your agent node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Uninstall the agent daemon and remove all the containers created on this node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Log out from the agent node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: So, you have learned how to uninstall K3s, which could be useful when you want
    to try a new configuration with your devices. Now, let's move on to learn how
    to troubleshoot your cluster in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting a K3s cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section includes some basic troubleshooting commands that you can use
    to test your cluster. There are different options for troubleshooting:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following command if you want to see the state of your nodes and
    check whether Kubernetes is running:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a pod to check whether your cluster can schedule pods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a Service to expose the previously created Pod and test whether the
    `LoadBalancer` service works:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the following command if you want to check that the services and ports
    are working to expose your Services, which can be either `LoadBalancer` or `NodePort`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the following command if you want to check the logs in real time on
    your system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the following command to check whether the `k3s` service is running
    in your master node. This command must be executed inside your agent node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the following command to check whether the `k3s-agent` service is running
    in your agent/worker node. This command must be executed inside your agent node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For more details about the different options and configurations available for
    K3s, you can visit [https://rancher.com/docs/k3s/latest/en](https://rancher.com/docs/k3s/latest/en).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covered the firsts steps toward creating and customizing your Kubernetes
    cluster using the edge distribution of K3s. It also covered advanced configurations
    such as how to configure an external datastore for K3s that can help you to configure
    more robust and highly available solutions for edge K3s clusters. At the end of
    the chapter, we covered some advanced configurations such as how to install different
    Ingress controllers, the use of the Helm Chart operator, and basic troubleshooting
    commands for your cluster. With this knowledge, we can now jump to the next chapter
    to understand the advantage of k3OS to install K3s quickly and easily.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are a few questions to validate what you have learned in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: What software can I use to prepare my ARM devices to install K3s?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can I install a basic multi-node cluster using K3s over ARM devices?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can I install a different Ingress controller?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can I use Helm to install packages in my cluster?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can I troubleshoot my cluster?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can refer to the following references for more information on the topics
    covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raspberry Imager software: [https://www.raspberrypi.org/software](https://www.raspberrypi.org/software)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ubuntu network configuration: [https://linuxize.com/post/how-to-configure-static-ip-address-on-ubuntu-20-04/#configuring-static-ip-address-on-ubuntu-server](https://linuxize.com/post/how-to-configure-static-ip-address-on-ubuntu-20-04/#configuring-static-ip-address-on-ubuntu-server)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The official documentation of K3s: [https://rancher.com/docs/k3s/latest/en](https://rancher.com/docs/k3s/latest/en)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Installation options for K3s: [https://rancher.com/docs/k3s/latest/en/installation/install-options](https://rancher.com/docs/k3s/latest/en/installation/install-options)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Networking for K3s: [https://rancher.com/docs/k3s/latest/en/networking](https://rancher.com/docs/k3s/latest/en/networking)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Helm website: [https://helm.sh](https://helm.sh)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The K3s Helm Chart operator: [https://rancher.com/docs/k3s/latest/en/helm](https://rancher.com/docs/k3s/latest/en/helm)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Helm Charts Hub to find software that you want to install: [https://artifacthub.io](https://artifacthub.io)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The official Kubernetes documentation: [https://kubernetes.io/docs](https://kubernetes.io/docs)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL

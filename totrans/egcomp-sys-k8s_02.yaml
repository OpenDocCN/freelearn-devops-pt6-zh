- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: K3s Installation and Configuration
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: K3s 的安装和配置
- en: This chapter offers a quick deep dive into K3s. We will start by understanding
    what K3s is and its architecture, and then we will learn how to prepare your ARM
    device for K3s. Following this, you will learn how to perform a basic installation
    of K3s from a single node cluster to a multi-node cluster, followed by a backend
    configuration using MySQL. Additionally, this chapter covers how to install an
    Ingress controller, using Helm Charts and Helm, to expose your Services across
    the load balancer created by NGINX. Finally, we will look at how to uninstall
    K3s and troubleshoot your cluster. At the end of the chapter, you will find additional
    resources to implement additional customizations for K3s.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章快速深入探讨了 K3s。我们将从理解 K3s 及其架构开始，然后学习如何为 K3s 准备 ARM 设备。接下来，您将学习如何从单节点集群到多节点集群进行基本安装，并使用
    MySQL 进行后端配置。此外，本章还涵盖了如何安装 Ingress 控制器，使用 Helm Charts 和 Helm 将您的服务暴露在由 NGINX 创建的负载均衡器上。最后，我们将看看如何卸载
    K3s 并排除集群故障。在章节末尾，您将找到额外的资源，以实现 K3s 的其他自定义。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要内容：
- en: Introducing K3s and its architecture
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍 K3s 及其架构
- en: Preparing your edge environment to run K3s
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备您的边缘环境以运行 K3s
- en: Creating K3s single and multi-node clusters
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 K3s 单节点和多节点集群
- en: Using external MySQL storage for K3s
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用外部 MySQL 存储 K3s
- en: Installing Helm to install software packages in Kubernetes
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Helm 以在 Kubernetes 中安装软件包
- en: Changing the default Ingress controller
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改默认的 Ingress 控制器
- en: Uninstalling K3s from the master node or an agent node
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从主节点或代理节点卸载 K3s
- en: Troubleshooting a K3s cluster
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 排除 K3s 集群故障
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For this chapter, you will need one of the following options:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，您将需要以下选项之一：
- en: Raspberry Pi 4 Model B with 4 GB of RAM (suggested minimum)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建议最低配置为 4 GB RAM 的 Raspberry Pi 4 Model B
- en: An AWS account to create a **Graviton2** instance
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个 AWS 账号以创建 **Graviton2** 实例
- en: Any x86_64 VM instance with Linux installed
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何安装了 Linux 的 x86_64 VM 实例
- en: An internet connection and DHCP support for local K3s clusters
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于本地 K3s 集群的互联网连接和 DHCP 支持
- en: With these requirements, we are going to install K3s and start experimenting
    with this Kubernetes distribution. So, let's get started.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些要求，我们将安装 K3s 并开始尝试这个 Kubernetes 发行版。所以，让我们开始吧。
- en: Introducing K3s and its architecture
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 K3s 及其架构
- en: 'K3s is a lightweight Kubernetes distribution created by Rancher Labs. It includes
    all the necessary components inside a small binary file. Rancher removed all the
    unnecessary components for this Kubernetes distribution to run the cluster, and
    it also added other useful features to run K3s at the edge, such as MySQL support
    as a replacement for `etcd`, an optimized Ingress controller, storage for single
    node clusters, and more. Let''s examine *Figure 2.1* to understand how K3s is
    designed and packaged:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: K3s 是由 Rancher Labs 创建的轻量级 Kubernetes 发行版。它包含所有必要的组件在一个小型二进制文件内。Rancher 删除了这个
    Kubernetes 发行版运行集群所需的所有不必要的组件，并添加了其他有用的功能，以在边缘运行 K3s，例如将 MySQL 支持作为 `etcd` 的替代品，优化的
    Ingress 控制器，适用于单节点集群的存储等。让我们查看 *图 2.1*，以了解 K3s 的设计和打包方式：
- en: '![Figure 2.1 – The K3s cluster components](img/B16945_Figure_2.1.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.1 – K3s 集群组件](img/B16945_Figure_2.1.jpg)'
- en: Figure 2.1 – The K3s cluster components
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.1 – K3s 集群组件
- en: 'In the preceding diagram, you can see that K3s has two components: the server
    and the agent. Each of these components must be installed on a node. A node is
    a bare metal machine or a VM that works as a master or agent node. The master
    node manages and provisions Kubernetes objects such as Deployments, Services,
    and Ingress controllers inside the agent nodes. An agent node oversees the processing
    of information using these objects. Each node uses the different components shown
    in *Figure 2.1*, and they are provided in a single binary that packages all the
    necessary components to run the master and agent nodes. At the process level,
    the master node runs the K3s server, and the agent node runs the K3s agent. For
    each component, you will find a tunnel proxy to interconnect the master with the
    agent (that is, the worker nodes).'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图示中，你可以看到K3s有两个组件：服务器和代理。每个组件必须安装在一个节点上。节点是一个裸金属机器或虚拟机，作为主节点或代理节点工作。主节点管理并配置Kubernetes对象，如部署、服务和Ingress控制器，在代理节点内部运行。代理节点负责处理使用这些对象的信息。每个节点使用图示*Figure
    2.1*中展示的不同组件，这些组件通过一个单一的二进制文件提供，包含运行主节点和代理节点所需的所有必要组件。在进程层面，主节点运行K3s服务器，代理节点运行K3s代理。对于每个组件，你会找到一个隧道代理，用于将主节点与代理节点（即工作节点）互联。
- en: By default, the K3s *agent and master nodes run* Flannel as the default **Container
    Network Interface** (**CNI**) plugin. CNI is the specification for container networking,
    and the CNI plugins are the interface that is used to manage the network connectivity
    of containers. It also installs **containerd** as your container engine to create
    your Pods. One thing that the server and agent both share is that each component
    consists of a single binary around 100 MB that includes all minimal components
    to run each node. However, you can add additional components removed in K3s that
    are included in vanilla Kubernetes clusters, when you need them.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，K3s的*代理节点和主节点运行*Flannel作为默认的**容器网络接口**（**CNI**）插件。CNI是容器网络的规范，CNI插件是用于管理容器网络连接的接口。它还安装了**containerd**作为容器引擎，用于创建Pods。服务器和代理节点有一个共同点，即每个组件都由一个大约100MB的单一二进制文件组成，包含运行每个节点所需的所有最小组件。然而，在需要时，你可以添加K3s中去除的其他组件，这些组件在原生Kubernetes集群中是包含的。
- en: In terms of what the role of each node is, the master node is called the **control
    plane**, that is, the one that manages all the Kubernetes cluster configurations,
    networking, and more. In comparison, the agent node is called the **data plane**
    on which all the services, network traffic, and processing occur.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 就每个节点的角色而言，主节点被称为**控制平面**，即管理所有Kubernetes集群配置、网络等的节点。相比之下，代理节点被称为**数据平面**，它上面运行着所有服务、网络流量和处理任务。
- en: Preparing your edge environment to run K3s
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备你的边缘环境以运行K3s
- en: Before installing K3s, you need to follow the next steps to configure a K3s
    master or agent for your ARM devices. So, let's get started.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装K3s之前，你需要按照以下步骤为你的ARM设备配置K3s主节点或代理节点。让我们开始吧。
- en: Hardware that you can use
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可以使用的硬件
- en: 'First, you must prepare your device. There are several options regarding how
    to do this. The first is to buy a Raspberry device to begin experimenting with
    to create a low-cost edge system. To buy this device, you need to take into consideration
    the following hardware specifications and components:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你必须准备好你的设备。关于如何准备设备，有几种选择。第一种是购买一台树莓派设备，开始实验并创建一个低成本的边缘系统。在购买设备时，你需要考虑以下硬件规格和组件：
- en: The Raspberry Pi 4 Model B with at least 4 GB of RAM as an ARM device.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 至少拥有4GB内存的树莓派4 Model B作为ARM设备。
- en: A power supply of 5V and 3A is recommended.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 推荐使用5V、3A的电源。
- en: An Ethernet cable for the internet connection.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一根用于互联网连接的以太网线。
- en: A Micro HDMI to HDMI cable.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一条Micro HDMI转HDMI的线缆。
- en: 'A MicroSD card: SanDisk Extreme MicroSDHC UHS-1 A1 V30 32GB, or similar, is
    recommended.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 推荐使用一张MicroSD卡：SanDisk Extreme MicroSDHC UHS-1 A1 V30 32GB，或者类似的卡片。
- en: A MicroSD card reader.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一张MicroSD卡读卡器。
- en: This setup will give you the best bang for your buck. You might be thinking
    *why this configuration?* Well, let me quickly explain. The Raspberry Pi 4 Model
    B has a lot of improvements in terms of speed processing compared with previous
    versions. When talking about compatibility, the Raspberry Pi has an ARMv7 processor
    that is supported by many languages and programs. It also supports OSes for ARM64
    or AArch64 processors that are used for devices with ARMv8 processors. This processors'
    architectures are supported in Raspberry B models. However, for more production-ready
    devices, you might want to look at an ARM 64-bit device, such as UDOO X86 II ULTRA,
    which has a 64-bit processor.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配置将为你带来最大的性价比。你可能会想 *为什么选择这个配置？* 好吧，让我简要解释一下。与之前的版本相比，Raspberry Pi 4 Model
    B 在处理速度上有了很多改进。谈到兼容性，Raspberry Pi 配备的 ARMv7 处理器支持多种编程语言和程序。它还支持 ARM64 或 AArch64
    处理器的操作系统，这些处理器用于具有 ARMv8 处理器的设备。Raspberry Pi B 型号支持这些处理器架构。然而，对于更多面向生产的设备，你可能会想选择一款
    ARM 64 位设备，比如 UDOO X86 II ULTRA，它配备了 64 位处理器。
- en: Moving on to the power supply, you need a device with 5 V and 3A to prevent
    slowing the Raspberry Pi down. You can use a 5 V/2.4 A, but a 5 V/3 A power supply
    works better for the Raspberry Pi 4 Model B. If you have the money, go for the
    4 Model B with 8 GB of memory.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 关于电源，你需要一个 5V、3A 的设备，以防止 Raspberry Pi 运行变慢。你可以使用 5V/2.4A 的电源，但 5V/3A 的电源对 Raspberry
    Pi 4 Model B 更合适。如果你预算允许，建议选择带有 8GB 内存的 4 Model B。
- en: Finally, for the MicroSD card, select a high-speed card. This will perform better
    when you are running your software. SanDisk has a nice MicroSD card; just look
    at the read and write speed and use a MicroSD with at least 32 GB. And don't use
    Wi-Fi if possible; that's the reason behind using an Ethernet cable, so you can
    have a stable connection.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，针对 MicroSD 卡，选择一张高速卡。当你运行软件时，这样的卡会有更好的性能。SanDisk 有一款不错的 MicroSD 卡；只需查看读写速度，并选择一张至少有
    32 GB 存储空间的 MicroSD 卡。如果可能的话，不要使用 Wi-Fi；这也是选择使用以太网电缆的原因，以便保证稳定的连接。
- en: Linux distributions for ARM devices
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 适用于 ARM 设备的 Linux 发行版
- en: 'There are several GNU/Linux distributions or OSes that you can use depending
    on your use case:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的使用案例，你可以选择多个 GNU/Linux 发行版或操作系统：
- en: '**Raspbian**: This is the first distribution that you can use that is optimized
    for Raspberry devices. It is reliable and ready to use.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Raspbian**：这是第一个可以在 Raspberry Pi 设备上使用的发行版，专为 Raspberry Pi 设备优化。它可靠且易于使用。'
- en: '**Ubuntu**: This distribution can be used on Raspberry devices or other ARM
    64-bit devices, including x86_64 devices. One of the advantages of Ubuntu is that
    it can be found in all the major cloud providers such as AWS, Azure, and GCP.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ubuntu**：这个发行版可以在 Raspberry Pi 设备或其他 ARM 64 位设备上使用，包括 x86_64 设备。Ubuntu 的一个优势是它可以在所有主要的云服务提供商中找到，比如
    AWS、Azure 和 GCP。'
- en: '**Alpine**: This is a small distribution with minimal software, which is designed
    to be a tiny distribution. It can be used as your next project to customize your
    own distribution according to your project needs.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Alpine**：这是一个小型发行版，具有最小的软件集，旨在成为一个轻量级的发行版。它可以作为你的下一个项目，用来根据项目需求定制你自己的发行版。'
- en: '**k3OS**: This is a tiny distribution designed to only run K3s on edge devices,
    but it''s versatile.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**k3OS**：这是一个小型发行版，专门设计用于仅在边缘设备上运行 K3s，但它非常灵活。'
- en: There are other distributions, but you can use these as a quick start for your
    edge projects.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他发行版，但你可以使用这些作为边缘项目的快速启动。
- en: Installing Ubuntu inside your MicroSD card
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在你的 MicroSD 卡中安装 Ubuntu
- en: Now it's time to install your OS. To install your Linux distribution inside
    your MicroSD, first, you must download Raspberry Pi Imager for your system. In
    this case, we are going to use the Mac version. You can download it at [https://www.raspberrypi.org/software](https://www.raspberrypi.org/software).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候安装你的操作系统了。要在你的 MicroSD 卡中安装 Linux 发行版，首先，你必须下载适合你系统的 Raspberry Pi Imager。在这里，我们使用的是
    Mac 版本。你可以在 [https://www.raspberrypi.org/software](https://www.raspberrypi.org/software)
    下载。
- en: 'To begin installing the OS inside your Raspberry device, perform the following
    steps:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始在 Raspberry Pi 设备中安装操作系统，请执行以下步骤：
- en: 'Install the binary from the previous link and open it; you should see something
    like this:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装前面链接中的二进制文件并打开它；你应该看到类似这样的界面：
- en: '![Figure 2.2 – The Raspberry Pi Imager menu'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.2 – Raspberry Pi Imager 菜单'
- en: '](img/B16945_Figure_2.2.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_Figure_2.2.jpg)'
- en: Figure 2.2 – The Raspberry Pi Imager menu
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.2 – Raspberry Pi Imager 菜单
- en: 'Click on the **CHOOSE OS** button to choose the Ubuntu Server 20.04 64-bit
    OS for ARM64, which can be found by navigating to the **Other general purpose
    OS** | **Ubuntu** menu:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **选择操作系统** 按钮，选择适用于 ARM64 的 Ubuntu Server 20.04 64-bit 操作系统，可以通过导航到 **其他通用操作系统**
    | **Ubuntu** 菜单找到：
- en: '![Figure 2.3 – The Raspberry distribution selection'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.3 – 树莓派发行版选择](img/B16945_Figure_2.3.jpg)'
- en: '](img/B16945_Figure_2.3.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_Figure_2.3.jpg)'
- en: Figure 2.3 – The Raspberry distribution selection
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.3 – 树莓派发行版选择
- en: 'Next, insert your MicroSD card (you must buy an adapter to read MicroSD cards).
    Your device will appear when you select the **CHOOSE STORAGE** button:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，插入你的 MicroSD 卡（你必须购买适配器来读取 MicroSD 卡）。在点击 **选择存储** 按钮后，你的设备会显示出来：
- en: '![Figure 2.4 – Storage selection'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.4 – 存储选择](img/B16945_Figure_2.4.jpg)'
- en: '](img/B16945_Figure_2.4.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_Figure_2.4.jpg)'
- en: Figure 2.4 – Storage selection
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.4 – 存储选择
- en: 'Then, click on the **WRITE** button:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击 **写入** 按钮：
- en: '![Figure 2.5 – The last step to install the distribution onto your storage
    device'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.5 – 将发行版安装到存储设备的最后一步](img/B16945_Figure_2.5.jpg)'
- en: '](img/B16945_Figure_2.5.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_Figure_2.5.jpg)'
- en: Figure 2.5 – The last step to install the distribution onto your storage device
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.5 – 将发行版安装到存储设备的最后一步
- en: 'Accept the option to write the device. Raspberry Pi Imager will then ask you
    for your username and password to continue writing to the MicroSD card:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接受写入设备的选项。Raspberry Pi Imager 会要求你输入用户名和密码，以继续将数据写入 MicroSD 卡：
- en: '![Figure 2.6 – Confirmation to write to your MicroSD card'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.6 – 确认写入 MicroSD 卡](img/B16945_Figure_2.6.jpg)'
- en: '](img/B16945_Figure_2.6.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_Figure_2.6.jpg)'
- en: Figure 2.6 – Confirmation to write to your MicroSD card
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.6 – 确认写入 MicroSD 卡
- en: 'Wait until the writing process finishes:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待写入过程完成：
- en: '![Figure 2.7 – Writing the OS onto the MicroSD card'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.7 – 将操作系统写入 MicroSD 卡](img/B16945_Figure_2.7.jpg)'
- en: '](img/B16945_Figure_2.7.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_Figure_2.7.jpg)'
- en: Figure 2.7 – Writing the OS onto the MicroSD card
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.7 – 将操作系统写入 MicroSD 卡
- en: 'Wait until the verifying process finishes:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待验证过程完成：
- en: '![Figure 2.8 – Verifying that the OS has been written correctly'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.8 – 验证操作系统是否正确写入](img/B16945_Figure_2.8.jpg)'
- en: '](img/B16945_Figure_2.8.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_Figure_2.8.jpg)'
- en: Figure 2.8 – Verifying that the OS has been written correctly
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.8 – 验证操作系统是否正确写入
- en: 'Extract your MicroSD card:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拔出你的 MicroSD 卡：
- en: '![Figure 2.9 – Dialog showing when the writing process is complete'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.9 – 写入过程完成时显示的对话框](img/B16945_Figure_2.9.jpg)'
- en: '](img/B16945_Figure_2.9.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_Figure_2.9.jpg)'
- en: Figure 2.9 – Dialog showing when the writing process is complete
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.9 – 写入过程完成时显示的对话框
- en: Now your MicroSD contains a fresh Ubuntu installation. In the next section,
    we will install K3s using this fresh installation.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的 MicroSD 卡已经包含了全新的 Ubuntu 安装。接下来的部分，我们将使用这个全新安装的系统安装 K3s。
- en: Setting up Ubuntu before installing a K3s master or worker node
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在安装 K3s 主节点或工作节点之前配置 Ubuntu
- en: 'Right now, your device is prepared to run for the first time. Perform the following
    steps to configure and install it as a single node cluster:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你的设备已经准备好首次运行。执行以下步骤，将其配置并安装为单节点集群：
- en: Turn on your device.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的设备。
- en: When Ubuntu asks you for a username and password, enter the username and password
    as `ubuntu`; this is the default password for the first login.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当 Ubuntu 提示你输入用户名和密码时，输入用户名和密码为 `ubuntu`；这是首次登录的默认密码。
- en: Now, Ubuntu will ask you to change the default password. Let's use `k3s123-`
    as our password. Remember that in a real production scenario, you must use a stronger
    password.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，Ubuntu 会要求你更改默认密码。我们使用 `k3s123-` 作为密码。请记住，在实际生产环境中，你必须使用更强的密码。
- en: 'Now, let''s configure the network. By default, Ubuntu uses `init` cloud to
    configure the network. Let''s deactivate this by creating a `99-disable-network-config.cfg`
    file with the following commands and content:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们来配置网络。默认情况下，Ubuntu 使用 `init` 云服务配置网络。我们通过以下命令和内容创建 `99-disable-network-config.cfg`
    文件来停用此功能：
- en: '[PRE0]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here is the content of the file:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是文件的内容：
- en: '[PRE1]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you execute `ifconfig`, you will see that your device is `eth0`. However,
    it could be named `es3` or something similar. So, let''s modify the `50-cloud-init`
    file with the following command:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你执行 `ifconfig` 命令，你会看到设备是 `eth0`。然而，它也可能被命名为 `es3` 或类似名称。我们需要使用以下命令修改 `50-cloud-init`
    文件：
- en: '[PRE2]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, modify the content of the file. It should look something like this:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，修改文件内容，应该类似如下所示：
- en: '[PRE3]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Remember that you should modify this file, as needed, by changing the address,
    gateway, and nameserver according to your current network or internet connection.
    For this local setup, we are using an internet connection with DHCP support.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，您应该根据需要修改此文件，按照当前网络或互联网连接更改地址、网关和DNS服务器。对于这个本地设置，我们使用支持DHCP的互联网连接。
- en: 'Now apply the configuration, and you can reboot your device to determine whether
    your IP address is set when the OS starts. To do this, execute the following command:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在应用配置，您可以重启设备来检查操作系统启动时是否设置了您的IP地址。为此，执行以下命令：
- en: '[PRE4]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now configure the kernel parameters for the boot by editing the `/boot/firmware/cmdline.txt`
    file with the following command and content:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，通过以下命令和内容编辑`/boot/firmware/cmdline.txt`文件来配置启动的内核参数：
- en: '[PRE5]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Add this content to the end of the line to enable container creation with `containerd`
    in your K3s cluster:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容添加到行末，以启用在K3s集群中使用`containerd`创建容器：
- en: '[PRE6]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you are using Raspbian, this file is in `/boot/cmdline.txt`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是Raspbian，此文件位于`/boot/cmdline.txt`。
- en: 'Edit the `/etc/hostname` file with a unique name, for example, `master` for
    your master node or `worker-1`, `worker-2`, and so on for the worker name using
    `nano`:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`nano`编辑`/etc/hostname`文件，并为其指定唯一名称，例如，主节点可以是`master`，工作节点可以是`worker-1`、`worker-2`，依此类推：
- en: '[PRE7]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here is the content of the file:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这是文件的内容：
- en: '[PRE8]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Edit the `/etc/hosts` file by adding the hostname. At the very least, you should
    have a line like this:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`/etc/hosts`文件，添加主机名。至少应该有如下所示的一行：
- en: '[PRE9]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The content, for example, could be as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，文件内容可能如下所示：
- en: '[PRE10]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now reboot your device:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在重启您的设备：
- en: '[PRE11]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This configuration is required to prepare your device to configure a K3s master
    node or agent node. In the next section, you will learn how to install K3s on
    your device.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 此配置是为您的设备准备配置K3s主节点或代理节点所必需的。在下一节中，您将学习如何在您的设备上安装K3s。
- en: Creating K3s single and multi-node clusters
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建K3s单节点和多节点集群
- en: 'In this section, you are going to learn how to configure K3s master and agent
    nodes on your Ubuntu OS for your ARM devices. To visualize what we are doing,
    let''s take a closer look at *Figure 2.10*:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将学习如何在您的Ubuntu操作系统上为ARM设备配置K3s的主节点和代理节点。为了更好地理解我们正在做的事情，让我们更详细地看看*图2.10*：
- en: '![Figure 2.10 – The K3s cluster configurations'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.10 – K3s集群配置'
- en: '](img/B16945_Figure_2.10.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_Figure_2.10.jpg)'
- en: Figure 2.10 – The K3s cluster configurations
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.10 – K3s集群配置
- en: 'The preceding diagram shows that you can install a K3s cluster in the following
    configurations:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 上图展示了您可以以以下配置安装K3s集群：
- en: '**Single node cluster**: In this configuration, you only have one node that
    assumes the role of a master and agent/worker node at the same time. You can use
    this type of cluster for small applications. This is not ideal for heavy workloads,
    as it can slow down all the components. Remember that this node works as a master
    and an agent at the same time.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单节点集群**：在此配置中，您只有一个节点，它同时承担主节点和代理/工作节点的角色。您可以将这种类型的集群用于小型应用程序。但不适合重负载工作，因为它可能会减慢所有组件的速度。请记住，这个节点同时作为主节点和代理节点工作。'
- en: '**Multi-node cluster**: In this configuration, you have a master node that
    controls the agent/worker nodes; this configuration will be useful for high availability
    and heavy processing tasks.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多节点集群**：在此配置中，您有一个主节点，它控制代理/工作节点；此配置对于高可用性和重处理任务非常有用。'
- en: With these brief descriptions, you can visualize what kind of configuration
    is required to create a K3s cluster. In the next section, you will learn how to
    create a single node cluster.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些简短的描述，您可以想象出创建K3s集群所需的配置。在下一节中，您将学习如何创建一个单节点集群。
- en: Creating a single node K3s cluster using Ubuntu OS
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Ubuntu操作系统创建单节点K3s集群
- en: To begin installing K3s, you should use Ubuntu as your main distribution for
    K3s. You might be asking yourself why Ubuntu? Well, Ubuntu has a lot of pre-built
    features that can save some time when preparing your device. Additionally, it
    supports 32-bit and 64-bit ARM devices. I can recommend this distribution because
    of its compatibility and supported software. So, let's get started with this single
    node K3s cluster.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始安装K3s，您应该使用Ubuntu作为K3s的主要发行版。您可能会问，为什么是Ubuntu？因为Ubuntu有很多预构建的功能，可以节省准备设备时的时间。此外，它支持32位和64位的ARM设备。我推荐使用这个发行版，原因是它的兼容性和支持的软件。那么，让我们开始创建这个单节点的K3s集群吧。
- en: 'To install K3s (for a master-node or a single node cluster), you must perform
    the following steps:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装K3s（用于主节点或单节点集群），您必须执行以下步骤：
- en: Turn on your device and log in.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的设备并登录。
- en: 'Once you are logged in, execute the following line in your Terminal to perform
    a basic installation of K3s:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦登录，执行以下命令在您的终端中执行K3s的基本安装：
- en: '[PRE12]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This command installs K3s without `traefik` as the default Ingress controller
    and gives you the ability to execute the `kubectl` command without using `sudo`.
    You can add some specific flags to use a specific version of K3s; please refer
    to the official documentation to learn more about this parameter. You can find
    the link at the end of this chapter.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令安装K3s，默认情况下不包含`traefik`作为Ingress控制器，并允许您在不使用`sudo`的情况下执行`kubectl`命令。您可以添加特定的标志以使用K3s的特定版本；请参阅官方文档以了解有关此参数的更多信息。您可以在本章末尾找到链接。
- en: '(*Optional*) If you want to install K3s on AWS Graviton 2 instances or another
    cloud provider where the public IP is not associated with a network interface
    in the OS, you have to set the external IP parameter with the public IP of the
    instance, using the following commands:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: （*可选*）如果您希望在AWS Graviton 2实例或其他云提供商上安装K3s，其中公共IP未关联到OS中的网络接口，则必须使用以下命令设置外部IP参数为实例的公共IP：
- en: '[PRE13]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '(*Optional*) If you want to implement a simple test, execute the following
    commands to expose a deployment using the `LoadBalancer` feature of K3s:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: （*可选*）如果您想执行简单的测试，请执行以下命令以使用K3s的`LoadBalancer`功能公开部署：
- en: '[PRE14]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next, access the deployed `nginx` service using the public or private IP address
    of your K3s node on port `8001`; you can test the access by executing the following
    command:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过K3s节点的公共或私有IP地址访问部署的`nginx`服务的端口`8001`；您可以通过执行以下命令测试访问：
- en: '[PRE15]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Alternatively, if you have a private IP, run the following command:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果您有私有IP，请运行以下命令：
- en: '[PRE16]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This node will be a master node and an agent node at the same time.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 此节点将同时兼作主节点和代理节点。
- en: Now we have installed a single node cluster. Let's go ahead and add more nodes
    to your new cluster in the next section.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了单节点集群。让我们在下一节中继续添加更多节点到您的新集群。
- en: Adding more nodes to your K3s cluster for multi-node configuration
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向您的K3s集群添加更多节点以进行多节点配置
- en: 'So, what if you want to add more nodes to your single node cluster? To add
    more nodes to your cluster, first, you must follow the *Installing Ubuntu inside
    your MicroSD card* section for each new node. Then, you can continue with the
    following steps:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，如果您想向单节点集群添加更多节点呢？要向集群添加更多节点，首先，您必须按照*在您的MicroSD卡中安装Ubuntu*部分的步骤为每个新节点安装Ubuntu。然后，您可以继续以下步骤：
- en: 'Log in to your master node:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到您的主节点：
- en: '[PRE17]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Extract the token to join the cluster from your master node using the following
    command:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令从主节点提取加入集群的令牌：
- en: '[PRE18]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Log out from your master node. Now you have the token to join additional nodes
    to the cluster.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从主节点注销。现在您有了加入额外节点的令牌。
- en: For each worker node to join the cluster, perform the following steps (this
    is the easier way).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个要加入集群的工作节点，请执行以下步骤（这是更简单的方法）。
- en: 'Log in to your worker node that you want to add to the cluster:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录要添加到集群的工作节点：
- en: '[PRE19]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Set an environment variable with the token that your master generated:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用主节点生成的令牌设置环境变量：
- en: '[PRE20]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Register your node using the following command:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令注册您的节点：
- en: '[PRE21]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Note
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you have the same hostname for all your nodes, add the `--with-node-id` option
    and K3s will add a random ID at the end of your hostname so that you have a unique
    name for the nodes inside your cluster.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有节点的主机名相同，请添加`--with-node-id`选项，K3s将在主机名末尾添加随机ID，以确保集群内的节点名称唯一。
- en: 'Exit from your worker node:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 退出工作节点：
- en: '[PRE22]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Log in to the master node:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录主节点：
- en: '[PRE23]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Check that your new node is running using the following command:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令检查新节点是否正在运行：
- en: '[PRE24]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Note
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You will have to wait a few minutes while the nodes change to the `Ready` state.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要等待几分钟，直到节点转换为`Ready`状态。
- en: '(*Optional*) If you have a different GNU/Linux distribution than Ubuntu, the
    following steps will work better with tiny distributions such as Alpine Linux.
    Log in to the worker node that you want to add to the cluster:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: （*可选*）如果您使用的是与Ubuntu不同的GNU/Linux发行版，以下步骤将更适合像Alpine Linux这样的小型发行版。登录您要添加到集群的工作节点：
- en: '[PRE25]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Download the binary of K3s inside your worker node using the following command:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令在工作节点内下载K3s的二进制文件：
- en: '[PRE26]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Note
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Please navigate to [https://github.com/k3s-io/k3s/releases](https://github.com/k3s-io/k3s/releases)
    to download the binary. Choose any method you wish to place this binary inside
    your worker node. The goal is to download the K3s binary inside your worker node.
    Note that in the previous command, version `v1.21.2+k3s1` was selected. So, modify
    the URL to fit your desired version.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 请访问 [https://github.com/k3s-io/k3s/releases](https://github.com/k3s-io/k3s/releases)
    下载二进制文件。选择任何方法将此二进制文件放入您的工作节点中。目标是将 K3s 二进制文件下载到工作节点中。请注意，在之前的命令中，选择了版本 `v1.21.2+k3s1`。因此，请根据您的需要修改
    URL 以匹配所需的版本。
- en: 'Set an environment variable with the token that your master generated:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置一个包含主节点生成的令牌的环境变量：
- en: '[PRE27]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Exit from your worker node:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从工作节点退出：
- en: '[PRE28]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Log in to your master node:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到您的主节点：
- en: '[PRE29]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: If you want to set the role of your node, execute the following steps.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想设置节点的角色，请执行以下步骤。
- en: '(*Optional*) Set the role of your new worker node using the following command:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: （*可选*）使用以下命令设置新工作节点的角色：
- en: '[PRE30]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Exit from the master node:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从主节点退出：
- en: '[PRE31]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Now you have a multi-node K3s cluster, and it's ready to use. In the next section,
    you will learn how to manage your cluster using the `kubectl` command.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您拥有一个多节点的 K3s 集群，准备好使用了。在下一部分中，您将学习如何使用 `kubectl` 命令管理您的集群。
- en: Extracting K3s kubeconfig to access your cluster
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提取 K3s kubeconfig 以访问您的集群
- en: 'Now, it''s time to configure access to your K3s cluster from your computer
    using the `kubectl` command. To configure the connection of your new K3s cluster
    from the outside, perform the following steps:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用 `kubectl` 命令配置从计算机访问您的 K3s 集群。要配置从外部连接到新 K3s 集群，请执行以下步骤：
- en: 'Install the `kubectl` command by running the following commands for Mac installation:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令安装 `kubectl` 命令（适用于 Mac 安装）：
- en: '[PRE32]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Alternatively, if you are using Linux, run the following commands:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果您使用的是 Linux，请运行以下命令：
- en: '[PRE33]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: From the master node, copy the content inside `/etc/rancher/k3s/k3s.yaml` to
    your local `~/.kube/` config file
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从主节点，将 `/etc/rancher/k3s/k3s.yaml` 文件中的内容复制到本地的 `~/.kube/` 配置文件中
- en: 'Take the following part of the server value:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取服务器值的以下部分：
- en: '[PRE34]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'And change it to the following:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 并将其更改为以下内容：
- en: '[PRE35]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Change the permissions of this file using the following command:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令更改此文件的权限：
- en: '[PRE36]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Next, test whether you can access the cluster using the following command:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用以下命令测试您是否可以访问集群：
- en: '[PRE37]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: This command returns the list of cluster nodes and their states.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令返回集群节点及其状态的列表。
- en: Note
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Remember to install the `kubectl` command-line tool before you copy the Rancher
    `kubeconfig` file onto your computer. Remember that the content of the `k3s.yaml`
    file has to be stored inside `~/.kube/config` and it requires the `0400` permission.
    To learn how to install the `kubectl` command, navigate to [https://kubernetes.io/docs/tasks/tools/install-kubectl-macos](https://kubernetes.io/docs/tasks/tools/install-kubectl-macos).
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在将 Rancher `kubeconfig` 文件复制到您的计算机之前，请记得安装 `kubectl` 命令行工具。请记住，`k3s.yaml` 文件的内容必须存储在
    `~/.kube/config` 中，并且需要设置为 `0400` 权限。要了解如何安装 `kubectl` 命令，请访问 [https://kubernetes.io/docs/tasks/tools/install-kubectl-macos](https://kubernetes.io/docs/tasks/tools/install-kubectl-macos)。
- en: Now you are ready to perform more advanced configurations to create a new K3s
    cluster. Let's move on to the next section to learn more about this.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经准备好执行更多高级配置来创建新的 K3s 集群。让我们继续下一部分，了解更多内容。
- en: Advanced configurations
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级配置
- en: Now it's time to explore more advanced configurations that you can use to configure
    your K3s cluster at the edge.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候探索可以用来配置边缘 K3s 集群的更多高级配置了。
- en: Using external MySQL storage for K3s
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用外部 MySQL 存储 K3s
- en: 'K3s supports MySQL and SQLite, instead of `etcd`, as a data storage for your
    K3s cluster information. You can install MySQL in another node, a cloud instance,
    or a managed service on the cloud such as AWS Aurora or Google Cloud SQL. For
    example, let''s attempt it with a cloud instance using DigitalOcean. However,
    you can do it on any cloud that you wish. So, let''s get started with the following
    steps:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: K3s 支持 MySQL 和 SQLite，而不是 `etcd`，作为 K3s 集群信息的数据存储。您可以在其他节点、云实例，或像 AWS Aurora
    或 Google Cloud SQL 这样的云托管服务中安装 MySQL。例如，让我们尝试在使用 DigitalOcean 的云实例上进行操作。但是，您可以在任何您选择的云中执行此操作。现在，按照以下步骤开始：
- en: 'Log in to your cloud instance:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到您的云实例：
- en: '[PRE38]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Install Docker with the following commands:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令安装 Docker：
- en: '[PRE39]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Log out using the following command:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令登出：
- en: '[PRE40]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'In your master node, execute the following:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的主节点上执行以下操作：
- en: '[PRE41]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Note
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This will use the MySQL installation from your cloud instance. You must substitute
    `YOUR_CLOUD_INSTANCE_IP` with the IP of your cloud instance.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使用你云实例中的 MySQL 安装。你必须将 `YOUR_CLOUD_INSTANCE_IP` 替换为你云实例的 IP 地址。
- en: 'Extract the token to join the cluster from your master node with the following
    command:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令从主节点提取令牌以加入集群：
- en: '[PRE42]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Log out from your master node:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从主节点注销：
- en: '[PRE43]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: For each worker node, execute the next step.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 对每个工作节点，执行下一步操作。
- en: 'Install the agent to register and prepare your worker node:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装代理以注册并准备工作节点：
- en: '[PRE44]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Note
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You can execute `kubectl get nodes` to check your worker node has been added
    and is in the `Ready` state.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以执行 `kubectl get nodes` 来检查你的工作节点是否已经添加并处于 `Ready` 状态。
- en: Now, you are ready to use your cluster with an external datastore instead of
    `etcd` or SQLite. In this case, we have a hybrid solution using local instances
    and a public instance to store the K3s configuration using MySQL. Remember that
    you can use MariaDB or another MySQL managed service from your favorite cloud
    provider. You can add multiple nodes configured as master nodes to your cluster
    for high availability in the main components of your cluster such as the Kubernetes
    API.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以使用外部数据存储来使用集群，而不是 `etcd` 或 SQLite。在这种情况下，我们使用一个混合解决方案，利用本地实例和公共实例来通过 MySQL
    存储 K3s 配置。记住，你也可以使用 MariaDB 或你最喜欢的云服务提供商的其他 MySQL 托管服务。你可以将多个配置为主节点的节点添加到集群中，以提高集群中
    Kubernetes API 等核心组件的可用性。
- en: Installing Helm to install software packages in Kubernetes
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Helm 以在 Kubernetes 中安装软件包
- en: 'Helm is a package manager for Kubernetes. With Helm, you can install software
    onto your Kubernetes cluster using a package definition called Helm Charts. You
    can use a public Helm Chart repository or your own repository to install packages.
    To install Helm in Linux or Mac, perform the following steps:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: Helm 是 Kubernetes 的包管理器。使用 Helm，你可以通过一个称为 Helm Charts 的包定义将软件安装到 Kubernetes
    集群中。你可以使用公共 Helm Chart 仓库或自己的仓库来安装包。要在 Linux 或 Mac 上安装 Helm，执行以下步骤：
- en: 'To install Helm on Linux, run the following commands:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Linux 上安装 Helm，运行以下命令：
- en: '[PRE45]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'To install Helm on Mac, run the following command:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Mac 上安装 Helm，运行以下命令：
- en: '[PRE46]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'To begin installing Helm Charts, you should add a chart repository to Helm
    by running the following command on Linux or Mac:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要开始安装 Helm Charts，你需要通过在 Linux 或 Mac 上运行以下命令来添加一个 chart 仓库：
- en: '[PRE47]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Now, let's examine how to change the default ingress controller.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一下如何更改默认的 Ingress 控制器。
- en: Changing the default ingress controller
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改默认的 Ingress 控制器
- en: To begin this section, let's define what Ingress is and then define an Ingress
    controller. Based on the official Kubernetes website, an Ingress is a Kubernetes
    component that exposes your HTTP or HTTPS routes that match your internal services
    inside the cluster. A Service is an abstract way that Kubernetes uses to expose
    your application as a network service. And an Ingress controller is a component
    that is responsible for fulfilling the Ingress; this includes a load balancer
    that might also configure an edge router or proxy. There are a lot of implementations
    of Ingress controllers based on different edge routers or proxies such as Traefik,
    Envoy, Nginx, and more. By default, K3s includes Traefik version 1.0, which includes
    minimal features in which to route your services without consuming many resources.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始本节之前，我们先定义一下什么是 Ingress，然后再定义 Ingress 控制器。根据官方 Kubernetes 网站，Ingress 是一个
    Kubernetes 组件，用于暴露匹配集群内服务的 HTTP 或 HTTPS 路由。Service 是 Kubernetes 用来暴露应用程序为网络服务的抽象方式。而
    Ingress 控制器是一个负责执行 Ingress 的组件，包括可能配置边缘路由器或代理的负载均衡器。有许多基于不同边缘路由器或代理的 Ingress 控制器实现，如
    Traefik、Envoy、Nginx 等。默认情况下，K3s 包含 Traefik 1.0 版本，提供了最基本的功能，可以在不消耗大量资源的情况下路由你的服务。
- en: 'If you want to use a different Ingress controller instead of the default option
    (**Traefik**), install the master node using the following commands:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想使用不同的 Ingress 控制器而不是默认选项（**Traefik**），请使用以下命令安装主节点：
- en: 'Install the master node with the following parameters:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下参数安装主节点：
- en: '[PRE48]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Then, create a namespace to install the `nginx` Ingress controller with the
    following command:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，使用以下命令创建命名空间并安装 `nginx` Ingress 控制器：
- en: '[PRE49]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Add the Helm Charts repository:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 Helm Charts 仓库：
- en: '[PRE50]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Update your repositories to get the latest version:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新你的仓库以获取最新版本：
- en: '[PRE51]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Install your Ingress controller:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 Ingress 控制器：
- en: '[PRE52]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: (*Optional*) If you want to test whether the `nginx-ingress` controller is working,
    follow the upcoming steps.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a deployment using the `nginx` image:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Expose the deployment using `ClusterIP`:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Create the `my-ingress.yaml` file using the following command:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Create the Ingress using the following command:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Now test whether it works with the following command:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Note
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: You must replace the value of `LB_IP` with the IP address of the `LoadBalancer`
    service created by the NGINX Ingress controller installation. In this case, is
    the same IP address of your master node.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: 'To check the IP of where `nginx-ingress` has been exposed, execute the following
    command:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Note
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: Take into consideration that K3s has its own behavior when using Kubernetes
    Services. To read more about this, please refer to https://rancher.com/docs/k3s/latest/en/networking.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: Now that you understand how to install an Ingress controller and how to use
    it, it's time to learn how to uninstall K3s from your nodes if necessary.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: Uninstalling K3s from the master node or an agent node
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to uninstall K3s in your master or agent nodes, you must execute
    the uninstall scripts provided by K3s installation. So, let's get started.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: Uninstalling K3s from the agent node
  id: totrans-271
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To uninstall K3s from an agent (that is, the worker nodes), execute the following
    steps:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in to your agent node:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Uninstall the agent daemon and remove all the containers created on this node:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Log out from the agent node:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Uninstalling K3s from the master node
  id: totrans-279
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To uninstall K3s from the master node, execute the following steps:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in to your agent node:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Uninstall the agent daemon and remove all the containers created on this node:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Log out from the agent node:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: So, you have learned how to uninstall K3s, which could be useful when you want
    to try a new configuration with your devices. Now, let's move on to learn how
    to troubleshoot your cluster in the next section.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting a K3s cluster
  id: totrans-288
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section includes some basic troubleshooting commands that you can use
    to test your cluster. There are different options for troubleshooting:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following command if you want to see the state of your nodes and
    check whether Kubernetes is running:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Create a pod to check whether your cluster can schedule pods:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Create a Service to expose the previously created Pod and test whether the
    `LoadBalancer` service works:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Execute the following command if you want to check that the services and ports
    are working to expose your Services, which can be either `LoadBalancer` or `NodePort`:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Execute the following command if you want to check the logs in real time on
    your system:'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Execute the following command to check whether the `k3s` service is running
    in your master node. This command must be executed inside your agent node:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Execute the following command to check whether the `k3s-agent` service is running
    in your agent/worker node. This command must be executed inside your agent node:'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Note
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: For more details about the different options and configurations available for
    K3s, you can visit [https://rancher.com/docs/k3s/latest/en](https://rancher.com/docs/k3s/latest/en).
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-306
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covered the firsts steps toward creating and customizing your Kubernetes
    cluster using the edge distribution of K3s. It also covered advanced configurations
    such as how to configure an external datastore for K3s that can help you to configure
    more robust and highly available solutions for edge K3s clusters. At the end of
    the chapter, we covered some advanced configurations such as how to install different
    Ingress controllers, the use of the Helm Chart operator, and basic troubleshooting
    commands for your cluster. With this knowledge, we can now jump to the next chapter
    to understand the advantage of k3OS to install K3s quickly and easily.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-308
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are a few questions to validate what you have learned in this chapter:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: What software can I use to prepare my ARM devices to install K3s?
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can I install a basic multi-node cluster using K3s over ARM devices?
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can I install a different Ingress controller?
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can I use Helm to install packages in my cluster?
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can I troubleshoot my cluster?
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-315
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can refer to the following references for more information on the topics
    covered in this chapter:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: 'Raspberry Imager software: [https://www.raspberrypi.org/software](https://www.raspberrypi.org/software)'
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ubuntu network configuration: [https://linuxize.com/post/how-to-configure-static-ip-address-on-ubuntu-20-04/#configuring-static-ip-address-on-ubuntu-server](https://linuxize.com/post/how-to-configure-static-ip-address-on-ubuntu-20-04/#configuring-static-ip-address-on-ubuntu-server)'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The official documentation of K3s: [https://rancher.com/docs/k3s/latest/en](https://rancher.com/docs/k3s/latest/en)'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Installation options for K3s: [https://rancher.com/docs/k3s/latest/en/installation/install-options](https://rancher.com/docs/k3s/latest/en/installation/install-options)'
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Networking for K3s: [https://rancher.com/docs/k3s/latest/en/networking](https://rancher.com/docs/k3s/latest/en/networking)'
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Helm website: [https://helm.sh](https://helm.sh)'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The K3s Helm Chart operator: [https://rancher.com/docs/k3s/latest/en/helm](https://rancher.com/docs/k3s/latest/en/helm)'
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Helm Charts Hub to find software that you want to install: [https://artifacthub.io](https://artifacthub.io)'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The official Kubernetes documentation: [https://kubernetes.io/docs](https://kubernetes.io/docs)'
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL

- en: Kubernetes SIGs, Incubation Projects, and the CNCF
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we're going to discuss how to get involved in the softer, social
    side of the Kubernetes ecosystem. We'll go into detail on how the **Cloud Native
    Computing Foundation** (**CNCF**) works, and the various efforts being made to
    orchestrate open source software at a global level. There's interest in our ecosystem
    at every level, from the individual contributor all the way up to the Fortune
    100 mega-corporation.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll explore how the CNCF and its predecessors, the Linux and Apache Foundations,
    guide interest and contributions into the people and software economy. Some of
    the key areas will manage governance, tracking, and processes that are designed
    to keep people, process, and technology evolving in a sustainable, reliable model.
    In this chapter, we''ll explore several key areas:'
  prefs: []
  type: TYPE_NORMAL
- en: How is the community around the Kubernetes ecosystem constructed? How is it
    different from the traditional **Free and Open Source Software** (**FOSS**) or
    **Open Source Software** (**OSS**) movements?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can you get involved with the discussion in order to understand and participate
    in the evolution of the ecosystem?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are the major projects, and how are they categorized?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can you chose the right tools for the job, given all of the change?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can you get involved with open source software in general?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to move quickly through this chapter, you should make sure that you
    have a GitHub account set up, with SSH key and account details configured correctly.
    Why is this important, you may ask? Well, to get involved with the CNCF, and the
    Linux or Apache Foundations, you'll need a way to browse, consume, and contribute
    to code. Git is the underlying tool and process that's used to participate, so
    we'll make sure here that our toolset is correctly set up before proceeding to
    the higher level topics.
  prefs: []
  type: TYPE_NORMAL
- en: You can sign up for GitHub and once you've added the account, you can review
    the help area in the **GitHub Guides** section of the website at [https://guides.github.com/](https://guides.github.com/).
    For our purposes in this chapter, you'll need to set up an SSH key in order to
    start cloning, signing, and committing code.
  prefs: []
  type: TYPE_NORMAL
- en: If you're on Windows, you'll need to use Git Bash, or something similar, to
    generate a key. You can download Git Bash from [https://gitforwindows.org/](https://gitforwindows.org/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the software first, and then we''ll set up your environment. The installation
    looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e7bfd182-cf0a-4b42-a458-b93ad89306cf.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting up Git for contributions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Type the following command, using your email address in place of mine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This will generate a key pair that you can add to your `ssh-agent`. You can
    also use GitHub Desktop if you'd prefer to avoid SSH keys, but we would recommend
    that you use native CLI tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ensure that the agent is running with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You can then add your key to the agent as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We won't go over the instructions in detail here, but you can find the macOS
    and Linux instructions here [https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/](https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Next up, we''ll add your public key to your GitHub account so we can get going
    with the rest of the chapter. Navigate to [https://github.com](https://github.com),
    click on your profile, and bring up your Settings page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/179395d1-cc68-47fa-9830-7e85ee2b394d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, we''ll click on SSH and GPG keys and add in the key that you created
    on your machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cfb72871-f1db-4bde-b50b-62aaf7284c79.png)'
  prefs: []
  type: TYPE_IMG
- en: Click New SSH key and then add your generated `id_rsa.pub` key. Importantly,
    do not add your `id_rsa` key, as that's private and should be kept safe and offline!
  prefs: []
  type: TYPE_NORMAL
- en: 'You can copy your public SSH key to your clipboard with the following command
    in Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You can test it out once you''ve configured it with this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: If you see a message welcoming you by your username, you're all set!
  prefs: []
  type: TYPE_NORMAL
- en: Git's benefits
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you have your keys, add them to your GitHub account in order to accomplish
    two important things:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Forking, pull requests, and contributions**: You''ll be able to create private
    forks and pull requests using your own repositories, which allows you to begin
    contributing to the projects in the container ecosystem. You''ll need the SSH
    key and the aforementioned programs in order to interact with Git, which is the
    underlying technology that powers this collaboration. There''s a similar setup
    for GitLab and Bitbucket, but GitHub is currently the most popular tool and happens
    to be where all of the CNCF projects reside.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Digital chain of custody**: You''ll be able to sign your commits. In order
    to participate in many of the cutting-edge Kubernetes ecosystem projects, you''ll
    need to digitally sign your commits such that they''re able to be attributed back
    to you. Many of the technologies that we''ve touched on in these books are used
    to power large infrastructure at the world''s most advanced companies, and it''s
    important for OSS to establish a strong chain of custody for highly distributed
    code development. The fingerprint of SSL and your machine is an essential piece
    of authentication and authorization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CNCF structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As a refresher, let''s remind ourselves about the entire Kubernetes system,
    so we can understand conceptually where the ecosystem referred to in this chapter
    sits:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ed0b7a3c-a89a-4afc-8e5f-8cff9642ce8f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this chapter, we''re talking about the top, greenest layer in the preceding
    diagram. This layer is made up of hundreds of companies and products that power
    the software and frameworks needed to run Kubernetes at scale. You can find the
    highest level of grouping of this layer in a couple of places:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first place to check is the Kubernetes Community GitHub repository:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find the repository at [https://github.com/kubernetes/community](https://github.com/kubernetes/community),
    and it's a good starting point for anyone who's interested in joining the code-powered
    portions of the Kubernetes system. In the preceding diagram, consider the layers
    nucleus through interface, that is, layers one through four. Here's where we'll
    find the **Special Interest Groups** (**SIGs**), which will allow us to branch
    us out into the ecosystem layer where we can explore the supporting technologies
    that enable Kubernetes to stay focused on its core functionality.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The second place you can investigate to dig deeper into the ecosystem is the
    CNCF landscape:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The landscape is actually broken up into a few useful parts that can help anyone
    from individual users, all the way up to large enterprises, make decisions on
    what technology to adopt, what to wait on, and what to leave behind. Here's where
    we'll really dig into the supporting ecosystem in order to understand what's meant
    to be in Kubernetes core, and what's meant to be provided by the ecosystem.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Kubernetes documentation neatly answers the question, what is Kubernetes
    with the following quote:'
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes provides a container-centric management environment. It orchestrates
    computing, networking, and storage infrastructure on behalf of user workloads.
    This provides much of the simplicity of Platform as a Service (PaaS) with the
    flexibility of Infrastructure as a Service (IaaS), and enables portability across
    infrastructure providers.
  prefs: []
  type: TYPE_NORMAL
- en: For more information visit [https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/](https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/).
  prefs: []
  type: TYPE_NORMAL
- en: So, if that's what Kubernetes is, what isn't it?
  prefs: []
  type: TYPE_NORMAL
- en: What Kubernetes isn't
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The most succinct—and currently, the best—viewpoint on the Kubernetes ecosystem,
    at a level that''s digestible both for individuals running their own small scale
    clusters and executives looking to understand the massive scope of the Kubernetes
    ecosystem, is the **Cloud Native Trail Map**, shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/81059af1-bacc-4d7e-90ad-b221bccc1ff1.png)'
  prefs: []
  type: TYPE_IMG
- en: The trail map helps us to break down all of the efforts to support Kubernetes currently
    going on outside of the core container-centric management environment that we
    alluded to in the preceding section. Outside of networking, storage, and compute,
    there are a lot of moving pieces that need to work in order for complex, microservice-based,
    cloud-native applications to run at scale. What else is needed to support the
    Kubernetes PaaS system?
  prefs: []
  type: TYPE_NORMAL
- en: You should treat each of these layers as a choice; choose one technology (or
    multiple, to render a proof-of-concept and decision) and see how it works.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, let''s take containerization: at this point, it''s table stakes
    to run your application as a containerized workload, but it may take your organization
    time to re-architect your applications, or to learn how to use Dockerfiles and
    build cloud-native applications.'
  prefs: []
  type: TYPE_NORMAL
- en: There are traditionally *6Rs* involved in moving your application to the cloud
    or container orchestration and scheduling platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a diagram demonstrating the 6Rs referenced in the preceding tip box
    that you can utilize to update your applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/51ffe59d-d529-4d38-b9e8-12ddbe748229.png)'
  prefs: []
  type: TYPE_IMG
- en: While this 6Rs formula was intended for considering a move to the cloud, it's
    also very useful when migrating to containers as well. Keep in mind here that
    not all of your applications will be well suited to running in containers (**Retain**),
    while some of them should be deprecated for OSS (**Retire**). A good way to start
    moving into containerized workloads is to simply drop a large monolithic application,
    such as a `Java .war` file or Python program, directly into the container and
    let it run as is (**Rehost**). In order to achieve the maximum benefits of containerization,
    and to take advantage of the cutting edge features of Kubernetes, you'll most
    likely need to explore refactoring, re-imagining, and rearchitecting your application
    (**Refactor**).
  prefs: []
  type: TYPE_NORMAL
- en: The next area of focus for anyone running a platform is **Continuous Integration
    and Continuous Delivery** (**CICD**). You'll need to manage both infrastructure
    and application-as-code in order to provide seamless rollouts, updates, and testing.
    In this new world, infrastructure and application are both first-class citizens
    when it comes to software.
  prefs: []
  type: TYPE_NORMAL
- en: 'Observability and analysis are also important in this realm of highly complex
    software systems that control both infrastructure and application. The CNCF breaks
    down solutions into sandbox, graduated, and incubation areas:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sandbox**: OpenMetrics is designed to create a common standard, building
    from Prometheus, to transmit metrics at scale. OpenMetrics uses standard text
    formats, as well as protocol buffers in order to serialize structured data in
    a language and platform-neutral manner.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Incubating**: Here, we see Fluentd, Jaeger, and OpenTracing. Fluentd has
    been around for some time now, for those folks who''ve used the **Elasticsearch,
    Logstash, Kibana** (**ELK**) stack to collect metrics. It''s an open source data
    aggregator that allows you to unify a set of logs from disparate sources. Jaeger
    helps operators to monitor and resolve issues in complex, distributed systems
    by providing tracing that can help unearth problems in modern microservice systems.
    Similarly to OpenMetrics,OpenTracing is an effort to build a standard for distributed
    tracing in microservices and OSS. As our systems become more deeply interconnected
    with know-nothing APIs, it is ever more important to introspect the connections
    of these systems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Graduated**: Along with Kubernetes, Prometheus remains the only other project
    currently graduated within the CNCF. Prometheus is a monitoring and alerting system
    that can use a number of different time series databases to display system status.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Service mesh and discoveryis the next step along the Cloud Native Trail Map.
    This tier can be thought of as an additional capability set on top of the base
    functionality of Kubernetes, which can be seen as a set of the following capabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: A single Kubernetes API control plane
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An authentication and authorization model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A namespaced, predictable, cluster-scoped resource description scheme
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A container scheduling and orchestration domain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A pod-to-pod and ingress network routing domain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The three products in this portion of the map are CoreDNS, Envoy, and Linkerd.
    CoreDNS replaces `kube-dns` in your cluster, and provides the ability to chain
    multiple plugins together to create deeper functionality for looking up customer
    providers. CoreDNS will soon replace `kube-dns` as the default DNS provider for
    Kubernetes. Envoy is a service proxy that is built into the popular Istio product.
    Istio is a control that uses the Envoy binary as a data plane to provide common
    capabilities to a homogeneous set of software or services. Envoy provides the
    foundational capabilities for a service mesh that runs on top of the application
    that runs on Kubernetes, which provides an additional layer of resilience in the
    form of circuit breaking, rate limiting, load balancing, service discovery, routing,
    and application introspection in the form of metrics and logging. Linkerd has
    nearly all the same functionality as Envoy, as it's also a data plane for the
    service mesh.
  prefs: []
  type: TYPE_NORMAL
- en: 'Networking is the next building block that we can add to the Kubernetes ecosystem.
    The **Container Network Interface** (**CNI**) is one of several interfaces that
    are currently being developed from within the CNCF ecosystem. Multiple options
    for Kubernetes cluster networking are being developed in order to cope with the
    complex feature requirements that applications have these days. Current options
    include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Calico
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flannel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Weave Net
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cilium
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contiv
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SR-IOV
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Knitter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Kubernetes team also provides a core set of plugins for the system that
    manage IP address allocation and interface creation.
  prefs: []
  type: TYPE_NORMAL
- en: Read more about the standard plugins at [https://github.com/containernetworking/plugins/](https://github.com/containernetworking/plugins).
  prefs: []
  type: TYPE_NORMAL
- en: 'Reading from the GitHub project homepage, the CNI is described as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: CNI (*Container Network Interface*), a Cloud Native Computing Foundation project,
    consists of a specification and libraries for writing plugins to configure network
    interfaces in Linux containers, along with a number of supported plugins. CNI
    concerns itself only with network connectivity of containers and removing allocated
    resources when the container is deleted. Because of this focus, CNI has a wide
    range of support and the specification is simple to implement.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on Cloud Native Computing Foundation visit [https://www.cncf.io/](https://www.cncf.io/).
  prefs: []
  type: TYPE_NORMAL
- en: There isn't currently a lot of activity in the distributed database portion
    of the trail map, simply because most of the workloads that currently run on Kubernetes
    tend to be stateless. There is a project incubating currently, named Vitess, which
    is attempting to provide a horizontal scaling model for the ever-popular MySQL
    database system. In order to scale MySQL across the pod-structured infrastructure
    of Kubernetes, the makers of Vitess are focusing on sharding out MySQL's data
    store in order to distribute it among the nodes of the cluster. It is similar
    to other NoSQL systems that, in this fashion, rely on data being replicated and
    spread out over several nodes. Vitess has been used at scale at YouTube since
    2011, and is a promising technology for those looking to venture deeper into stateful
    workloads on Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: For those operators who are pushing the limits of the Kubernetes system, there
    are several high-performance options for increasing the speed of your system. gRPC is
    a **Remote Procedure Call** (**RPC**) framework that was developed by Google to
    help clients and servers communicate transparently. gRPC is available in many
    languages, including C++, Java, Python, Go, Ruby, C#, Node.js, and more. gRPC
    uses ProtoBufs and is based on the simple concept that a service should have methods
    that can be called from another remote service. By defining these methods and
    parameters within the code, gRPC allows for large, complex applications to be
    built in pieces. NATS is a message queue that implements a distributed queue system
    that provides publish/subscribe and request/reply functionality, allowing the
    implementation of a highly scalable and secure foundation for **inter-process
    communication** (**IPC**).
  prefs: []
  type: TYPE_NORMAL
- en: 'The container runtimeportion of the trail map is an area where there''s been
    some contention. There are currently two options in the CNCF: `containerd` and
    `rkt`. These two technologies do not currently conform to the **Container Runtime
    Interface** (**CRI**), which is a new standard that attempts to create a shared
    understanding of what a container runtime should do. There are a few examples
    outside of the CNCF that currently conform to CRI standards:'
  prefs: []
  type: TYPE_NORMAL
- en: CRI-O
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker CRI shim
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Frakti
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: rkt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are also interesting players, such as Kata Containers, which are compliant
    with **Open Container Initiative** (**OCI**) standards and seek to offer containers
    running on lightweight virtual machines using technology from Hyper's runV and
    Intel's Clear Containers. Here, Kata replaces the traditional runC runtime in
    order to provide a container with a lightweight VM that contains its own mini-kernel.
  prefs: []
  type: TYPE_NORMAL
- en: The last piece of the trail map puzzle is software distribution,which is covered
    by Notary and the TUF framework. These are tools designed to aid in the secure
    distribution of software. Notary is a client/server framework that allows people
    to build trust over discretionary collections of data. In short, publishers can
    sign data content and then send that to consumers who have access to public key
    cryptographic systems, which allow them to validate the publisher's identity and
    the data.
  prefs: []
  type: TYPE_NORMAL
- en: The TUF framework is used by Notary, which is a framework that allows for the
    secure update of a software system. TUF is used in delivery secure updates **over-the-air**
    (**OTA**) to automobiles.
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes SIGs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to all the players mentioned previously, there is a set of complementary
    SIGs that meet regularly to discuss issues and opportunities from within a given
    focus area of the Kubernetes ecosystem. From within those SIGs, there are sub-bounded
    working groups that aim to accomplish a specific goal. There are also sub-projects
    that further cut up the interest space, and committees, which are there to define
    meta-standards and address community-wide issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a list of the current SIGs in operation, with the current chairs and
    meeting schedules:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name** | **Chairs** | **Meetings** |'
  prefs: []
  type: TYPE_TB
- en: '| API Machinery ([https://github.com/kubernetes/community/blob/master/sig-api-machinery/README.md](https://github.com/kubernetes/community/blob/master/sig-api-machinery/README.md))
    |'
  prefs: []
  type: TYPE_TB
- en: Daniel Smith ([https://github.com/lavalamp](https://github.com/lavalamp)), Google
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: David Eads ([https://github.com/deads2k](https://github.com/deads2k)), Red Hat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Regular SIG Meeting: Wednesdays at 11:00 PT (Pacific Time) (biweekly) ([https://docs.google.com/document/d/1FQx0BPlkkl1Bn0c9ocVBxYIKojpmrS1CFP5h0DI68AE/edit](https://docs.google.com/document/d/1FQx0BPlkkl1Bn0c9ocVBxYIKojpmrS1CFP5h0DI68AE/edit))
    |'
  prefs: []
  type: TYPE_TB
- en: '| Apps ([https://github.com/kubernetes/community/blob/master/sig-apps/README.md](https://github.com/kubernetes/community/blob/master/sig-apps/README.md))
    |'
  prefs: []
  type: TYPE_TB
- en: Matt Farina ([https://github.com/mattfarina](https://github.com/mattfarina)),
    Samsung SDS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adnan Abdulhussein ([https://github.com/prydonius](https://github.com/prydonius)),
    Bitnami
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kenneth Owens ([https://github.com/kow3ns](https://github.com/kow3ns)), Google
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Regular SIG Meeting: Mondays at 9:00 PT (Pacific Time) (weekly) |'
  prefs: []
  type: TYPE_TB
- en: '| Architecture ([https://github.com/kubernetes/community/blob/master/sig-architecture/README.md](https://github.com/kubernetes/community/blob/master/sig-architecture/README.md))
    |'
  prefs: []
  type: TYPE_TB
- en: Brian Grant ([https://github.com/bgrant0607](https://github.com/bgrant0607)),
    Google
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jaice Singer DuMars ([https://github.com/jdumars](https://github.com/jdumars)),
    Google
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Regular SIG Meeting: Thursdays at 19:00 UTC (weekly) |'
  prefs: []
  type: TYPE_TB
- en: '| Auth ([https://github.com/kubernetes/community/blob/master/sig-auth/README.md](https://github.com/kubernetes/community/blob/master/sig-auth/README.md))
    |'
  prefs: []
  type: TYPE_TB
- en: Jordan Liggitt ([https://github.com/liggitt](https://github.com/liggitt)), Red
    Hat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mike Danese ([https://github.com/mikedanese](https://github.com/mikedanese)),
    Google
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tim Allclair ([https://github.com/tallclair](https://github.com/tallclair)),
    Google
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Regular SIG Meeting: Wednesdays at 11:00 PT (Pacific Time) (biweekly) |'
  prefs: []
  type: TYPE_TB
- en: '| AWS ([https://github.com/kubernetes/community/blob/master/sig-aws/README.md](https://github.com/kubernetes/community/blob/master/sig-aws/README.md))
    |'
  prefs: []
  type: TYPE_TB
- en: Justin Santa Barbara ([https://github.com/justinsb](https://github.com/justinsb))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kris Nova ([https://github.com/kris-nova](https://github.com/kris-nova)), Heptio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nishi Davidson ([https://github.com/d-nishi](https://github.com/d-nishi)), AWS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Regular SIG Meeting: Fridays at 9:00 PT (Pacific Time) (biweekly) |'
  prefs: []
  type: TYPE_TB
- en: '| Azure ([https://github.com/kubernetes/community/blob/master/sig-azure/README.md](https://github.com/kubernetes/community/blob/master/sig-azure/README.md))
    |'
  prefs: []
  type: TYPE_TB
- en: Stephen Augustus ([https://github.com/justaugustus](https://github.com/justaugustus)),
    Red Hat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shubheksha Jalan ([https://github.com/shubheksha](https://github.com/shubheksha)),
    Microsoft
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Regular SIG Meeting: Wednesdays at 16:00 UTC (biweekly) |'
  prefs: []
  type: TYPE_TB
- en: '| Big Data ([https://github.com/kubernetes/community/blob/master/sig-big-data/README.md](https://github.com/kubernetes/community/blob/master/sig-big-data/README.md))
    |'
  prefs: []
  type: TYPE_TB
- en: Anirudh Ramanathan ([https://github.com/foxish](https://github.com/foxish)),
    Rockset
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Erik Erlandson ([https://github.com/erikerlandson](https://github.com/erikerlandson)),
    Red Hat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yinan Li ([https://github.com/liyinan926](https://github.com/liyinan926)), Google
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Regular SIG Meeting: Wednesdays at 17:00 UTC (weekly) |'
  prefs: []
  type: TYPE_TB
- en: If you'd like to join one of the meetings, check out the master list here: [https://github.com/kubernetes/community/blob/master/sig-list.md](https://github.com/kubernetes/community/blob/master/sig-list.md).
  prefs: []
  type: TYPE_NORMAL
- en: How to get involved
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The last thing we wanted to share with you is intended to point you in the
    right direction so you can start to contribute directly to Kubernetes or other
    related software. Kubernetes has a great contributor guide, and you should consider
    contributing for several reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: It's a great way to understand the core concepts and inner workings of Kubernetes.
    Writing the software of the system will give you, as an operator or developer,
    a unique understanding of how everything works.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's a fun way to meet other motivated, smart people. The world is becoming
    more and more interconnected, and OSS is powering some of the biggest companies
    in the world. Working directly on this technology will introduce you to engineers
    at the world's most advanced companies, and may even open to the door to significant
    career opportunities.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kubernetes, at its essence, is a community project, and relies on the contributions
    of its members and users. Getting involved with direct contribution of documentation
    updates, bug fixes, and feature creation evolves the ecosystem and provides a
    better experience for everyone.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you'd like to read more about becoming a Kubernetes contributor, read more
    at [https://github.com/kubernetes/community/tree/master/contributors/guide/](https://github.com/kubernetes/community/tree/master/contributors/guide).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned more about the Kubernetes ecosystem surrounding
    the Kubernetes system that we've been learning about. You've read about the core
    pieces of the CNCF, and we've explored the Cloud Native Trail Map to understand
    all of the supporting technology. We also looked at the SIGs, along with how you
    can start contributing to Kubernetes itself and why that's important!
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Name at least one graduated project in the CNCF
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name at least three projects that are incubating in the CNCF
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name at least one project in the CNCF sandbox
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the goal of the committee in the CNCF?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why is it important to get involved with OSS development?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What kind of cipher material does Git contribution require?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you'd like to read more about how to master Git, check out the following
    resource from Packt Publishing: [https://www.packtpub.com/application-development/mastering-git](https://www.packtpub.com/application-development/mastering-git).
  prefs: []
  type: TYPE_NORMAL

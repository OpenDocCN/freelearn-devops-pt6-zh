["```\n% tinygo version\ntinygo version 0.26.0 darwin/amd64 (using go version go1.18.5 and LLVM version 14.0.0)\n```", "```\nhttp_filters:\nname: envoy.filters.http.lua\ntyped_config:\n  \"@type\": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua\n  default_source_code:\n    inline_string: |\n     function envoy_on_request(request_handle)\n...... -- Do something on the request path.\n       request_handle:headers():add(\"NewHeader\", \"XYZ\")\n     end\n     function envoy_on_response(response_handle)\n       -- Do something on the response path.\n      response_handle:logInfo(\"Log something\")\n     response_handle:headers:add(\"response_size\",response_handle:body():length())\n      response_handle:headers:remove(\"proxy\")\n    end\n```", "```\nkubectl apply -f Chapter09/01-httpbin-deployment.yaml\ncurl -H \"Host:httpbin.org\" http://a816bb2638a5e4a8c990ce790b47d429-1565783620.us-east-1.elb.amazonaws.com/get\n```", "```\n$ kubectl apply -f Chapter09/02-httpbinenvoyfilter-httpbin.yaml\nenvoyfilter.networking.istio.io/updateheaderhorhttpbin configured\n```", "```\napiVersion: networking.istio.io/v1alpha3\nkind: EnvoyFilter\nmetadata:\n  name: updateheaderforhttpbin\n  namespace: chapter09\nspec:\n  workloadSelector:\n    labels:\n      app: httpbin\n  configPatches:\n  - applyTo: HTTP_FILTER\n    match:\n      context: SIDECAR_INBOUND\n      listener:\n        portNumber: 80\n        filterChain:\n          filter:\n            name: \"envoy.filters.network.http_connection_manager\"\n            subFilter:\n              name: \"envoy.filters.http.router\"\n```", "```\n patch:\n      operation: INSERT_BEFORE\n      value:\n        name: envoy.lua\n        typed_config:\n          \"@type\": \"type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua\"\n          inlineCode: |\n            function envoy_on_request(request_handle)\n              request_handle:logInfo(\" ========= XXXXX ==========\");\n              request_handle:headers():add(\"X-ChapterName\", \"ExtendingIstioDataPlane\");\n            end\n```", "```\n% curl -H \"Host:httpbin.org\" http://a816bb2638a5e4a8c990ce790b47d429-1565783620.us-east-1.elb.amazonaws.com/get\n```", "```\n% istioctl proxy-status | grep httpbin\nhttpbin-7bffdcffd-l52sh.chapter09\nKubernetes     SYNCED     SYNCED     SYNCED     SYNCED      NOT SENT     istiod-56fd889679-ltxg5     1.14.3\n```", "```\n% istioctl proxy-config listener httpbin-7bffdcffd-l52sh.chapter09  -o json\n```", "```\n\"filterChainMatch\": {\n                    \"destinationPort\": 80,\n                    \"transportProtocol\": \"raw_buffer\"\n                },\n```", "```\n  {\n                                    \"name\": \"envoy.lua\",\n                                    \"typedConfig\": {\n                                        \"@type\": \"type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua\",\n                                        \"inlineCode\": \"function envoy_on_request(request_handle)\\n  request_handle:logInfo(\\\" ========= XXXXX ==========\\\");\\n  request_handle:headers():add(\\\"X-ChapterName\\\", \\\"ExtendingIstioDataPlane\\\");\\nend \\n\"\n                                    }\n                                }\n```", "```\n    % go mod init Bootstrap-Service-Mesh-Implementations-with-Istio/Chapter09/go-Wasm-example\n    % go mod tidy\n    ```", "```\npackage main\nimport (\n    \"strings\"\n    \"syscall/js\"\n)\nfunc main() {\n    done := make(chan struct{}, 0)\n    js.Global().Set(\"WasmHash\", js.FuncOf(convertToUpper))\n    <-done\n}\nfunc convertToUpper(this js.Value, args []js.Value) interface{} {\n    strings.ToUpper(args[0].String())\n    return strings.ToUpper(args[0].String())\n}\n```", "```\n    % GOOS=js GOARCH=Wasm go build -o static/main.Wasm cmd/Wasm/main.go\n    ```", "```\n% cp \"$(go env GOROOT)/misc/Wasm/Wasm_exec.js\" ./static\n```", "```\n    <script src=\"img/Wasm_exec.js\"></script>\n    <script>\n        const go = new Go();\n        WebAssembly.instantiateStreaming(fetch(\"main.Wasm\"), go.importObject).then((result) => {\n            go.run(result.instance);\n        });\n    </script>\n    ```", "```\n    % go run ./cmd/webserver/main.go\n    Listening on http://localhost:3000/index.html\n    ```", "```\n% kubectl create ns chapter09-temp\nnamespace/chapter09-temp created\n```", "```\n% kubectl apply -f Chapter09/01-envoy-dummy.yaml\nnamespace/chapter09-temp created\nservice/envoydummy created\nconfigmap/envoy-dummy-2 created\ndeployment.apps/envoydummy-2 created\n```", "```\n% kubectl port-forward svc/envoydummy 18000:80 -n chapter09-t\nemp\nForwarding from 127.0.0.1:18000 -> 10000\n```", "```\n% curl  localhost:18000\nV2----------Bootstrap Service Mesh Implementation with Istio----------V2%\n```", "```\nfunc main() {\n    proxyWasm.SetVMContext(&vmContext{})\n}\n```", "```\nfunc (ctx *httpHeaders) OnHttpResponseHeaders(numHeaders int, endOfStream bool) types.Action {\n    if err := proxyWasm.AddHttpResponseHeader(\"X-ChapterName\", \"ExtendingEnvoy\"); err != nil {\n        proxyWasm.LogCritical(\"failed to set response header: X-ChapterName\")\n    }\n    return types.ActionContinue\n}\n```", "```\n% tinygo build -o main.Wasm -scheduler=none -target=wasi main.go\n```", "```\n% kubectl create configmap 01-Wasm --from-file=main.Wasm -n chapter09-temp\nconfigmap/01-Wasm created\n```", "```\nhttp_filters:\n              - name: envoy.filters.http.Wasm\n                typed_config:\n                  \"@type\": type.googleapis.com/udpa.type.v1.TypedStruct\n                  type_url: type.googleapis.com/envoy.extensions.filters.http.Wasm.v3.Wasm\n                  value:\n                    config:\n                      vm_config:\n                        runtime: \"envoy.Wasm.runtime.v8\"\n                        code:\n                          local:\n                            filename: \"/Wasm2/main.Wasm\"\n              - name: envoy.filters.http.router\n                typed_config:\n                  \"@type\": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\n```", "```\n% kubectl apply -f Chapter09/02-envoy-dummy.yaml\nservice/envoydummy created\nconfigmap/envoy-dummy-2 created\ndeployment.apps/envoydummy-2 created\n```", "```\n% kubectl port-forward svc/envoydummy 18000:80 -n chapter09-temp\n```", "```\n% curl -v localhost:18000\n* Mark bundle as not supporting multiuse\n< HTTP/1.1 200 OK\n< content-length: 72\n< content-type: text/plain\n< x-chaptername: ExtendingEnvoy\n* Connection #0 to host localhost left intact\nV2----------Bootstrap Service Mesh Implementation with Istio----------V2%\n```", "```\n% brew install wabt\n```", "```\n% Wasm-objdump main.Wasm --section=export -x.\n```", "```\n% kubectl delete ns chapter09-temp\n```", "```\n    % kubectl apply -f Chapter09/01-httpbin-deployment.yaml\n    ```", "```\n% curl -H \"Host:httpbin.org\" http://a816bb2638a5e4a8c990ce790b47d429-1565783620.us-east-1.elb.amazonaws.com/get\n```", "```\n    apiVersion: extensions.istio.io/v1alpha1\n    kind: WasmPlugin\n    metadata:\n      name: addheaders\n      namespace: chapter09\n    spec:\n      selector:\n        matchLabels:\n          app: httpbin\n      url: https://anand-temp.s3.amazonaws.com/main.Wasm\n      imagePullPolicy: Always\n      phase: AUTHZ\n    ```", "```\n% kubectl apply -f Chapter09/01-Wasmplugin.yaml\nWasmplugin.extensions.istio.io/addheaders configured\n```", "```\n% curl --head -H \"Host:httpbin.org\" http://a816bb2638a5e4a8c990ce790b47d429-1565783620.us-east-1.elb.amazonaws.com/get\n```", "```\n    func (ctx *httpHeaders) OnHttpRequestHeaders(numHeaders int, endOfStream bool) types.Action {\n        if err := proxyWasm.AddHttpRequestHeader(\"X-Chapter\", \"Chapter09\"); err != nil {\n            proxyWasm.LogCritical(\"failed to set request header: X-ChapterName\")\n        }\n        proxyWasm.LogInfof(\"added custom header to request\")\n        return types.ActionContinue\n    }\n    ```", "```\napiVersion: extensions.istio.io/v1alpha1\nkind: WasmPlugin\nmetadata:\n  name: addheaderstorequest\n  namespace: chapter09\nspec:\n  selector:\n    matchLabels:\n      app: httpbin\n  url: https://anand-temp.s3.amazonaws.com/AddRequestHeader.Wasm\n  imagePullPolicy: Always\n  phase: AUTHZ\n```", "```\n    % curl -v -H \"Host:httpbin.org\" http://a816bb2638a5e4a8c990ce790b47d429-1565783620.us-east-1.elb.amazonaws.com/get\n    < HTTP/1.1 200 OK\n    ……\n    < x-chaptername: ExtendingEnvoy\n    <\n    {\n      \"args\": {},\n      \"headers\": {\n        \"Accept\": \"*/*\",\n        \"Host\": \"httpbin.org\",\n        \"User-Agent\": \"curl/7.79.1\",\n    …..,\n        \"X-Chapter\": \"Chapter09\",\n    …\n      },\n      \"origin\": \"10.10.10.216\",\n      \"url\": \"http://httpbin.org/get\"\n    }\n    ```", "```\n% kubectl logs istiod-56fd889679-ltxg5 -n istio-system\n```", "```\n10-18T12:02:03.075545Z     info ads  ECDS: PUSH for node:httpbin-7bffdcffd-4zrhj.chapter09 resources:1 size:305B\n```"]
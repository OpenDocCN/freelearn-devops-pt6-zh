- en: '14'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '14'
- en: Hardware Virtualization for Securing Containers
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于保护容器的硬件虚拟化
- en: In the previous chapter, we looked at how to create a highly available MicroK8s
    Kubernetes cluster using the stacked cluster **high-availability** (**HA**) topology.
    We have used the three nodes to install and configure MicroK8s on each of them,
    as well as simulating node failure to see whether the cluster could withstand
    component failures and still work normally. We’ve also gone over some best practices
    for deploying Kubernetes applications on a production-ready cluster. We noticed
    that MicroK8s’ HA option has also been streamlined and is now activated by default.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们看到如何使用堆叠集群**高可用性**（**HA**）拓扑创建高可用的MicroK8s Kubernetes集群。我们在三个节点上安装和配置了MicroK8s，并模拟了节点故障，以查看集群是否能够抵抗组件故障并正常工作。我们还讨论了在生产就绪的集群上部署Kubernetes应用程序的一些最佳实践。我们注意到MicroK8s的HA选项现在也已经被简化，并默认激活。
- en: Container technologies have dominated the industry in recent years and have
    become the de facto standard for building modern IT infrastructure. They are frequently
    preferred over standard **virtual machines (VMs)** due to their lightweight design
    and bare-metal-like performance. However, security and isolation are two of the
    most common adoption issues (refer to the recent Kubernetes and cloud-native operations
    report, published in 2022, at [https://juju.is/cloud-native-kubernetes-usage-report-2022](https://juju.is/cloud-native-kubernetes-usage-report-2022)).
    In this chapter, we’ll look at how to use Kata Containers to create a secure container
    runtime and leverage hardware virtualization technology to give better workload
    isolation.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 容器技术在近年来主导了行业，并成为构建现代IT基础设施的事实标准。由于其轻量化设计和接近裸机的性能，它们经常优先于标准的**虚拟机（VMs）**。然而，安全性和隔离性是最常见的采用问题之一（参考2022年发布的Kubernetes和云原生运营报告，网址为[https://juju.is/cloud-native-kubernetes-usage-report-2022](https://juju.is/cloud-native-kubernetes-usage-report-2022)）。在本章中，我们将看看如何使用Kata
    Containers创建安全的容器运行时，并利用硬件虚拟化技术提供更好的工作负载隔离。
- en: Before understanding what Kata Containers is, let us review how containers operate
    and how they relate to virtualization technology. A container is more like a **VM**
    that allows the packaging of software and all of its dependencies into a single
    entity that can execute in any supported environment.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解什么是Kata Containers之前，让我们回顾一下容器的运作方式及其与虚拟化技术的关系。容器更像是一个**VM**，允许将软件及其所有依赖项打包为一个单独的实体，在任何支持的环境中执行。
- en: VMs, on the other hand, are larger and require longer to set up. Containers
    have a substantially lower footprint than VMs and are thus much faster to set
    up (and tear down). Containers, unlike VMs, which keep entire copies of the operating
    system, only share the host system’s operating system kernel.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，VMs更大且设置时间更长。与VMs相比，容器的占用空间大大降低，因此设置（和拆除）速度更快。与保留整个操作系统副本的VMs不同，容器仅共享主机系统的操作系统内核。
- en: '![Figure 14.1 – VMs versus containers ](img/Figure_14.1_B18115.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![图14.1 – VMs与容器的比较](img/Figure_14.1_B18115.jpg)'
- en: Figure 14.1 – VMs versus containers
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.1 – VMs与容器的比较
- en: The container runtime is the bridging software that allows a host system to
    separate its resources for containers, tear down container images, and manage
    container life cycles. Every node on the Kubernetes cluster must have a container
    runtime installed.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 容器运行时是桥接软件，允许主机系统为容器分离其资源，拆除容器镜像，并管理容器生命周期。Kubernetes集群的每个节点都必须安装容器运行时。
- en: 'Canonical MicroK8s has made it easy to enable Kata Containers (a container
    runtime), which can greatly improve the security and isolation of your container
    operations, with just a single command. It combines the advantages of a hypervisor,
    such as increased security, with Kubernetes’ container orchestration capabilities.
    In this chapter, we’re going to cover the following main topics:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Canonical MicroK8s已经简化了启用Kata Containers（一种容器运行时）的过程，只需一条命令即可大大提高您的容器操作的安全性和隔离性。它结合了增强安全性等优点的虚拟化监控程序与Kubernetes的容器编排功能。在本章中，我们将介绍以下主要内容：
- en: Overview of Kata Containers
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kata Containers概述
- en: Enabling the Kata add-on and running a sample application
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用Kata插件并运行示例应用程序
- en: Container security best practices
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器安全最佳实践
- en: Overview of Kata Containers
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kata Containers概述
- en: The **Open Container Interface** (**OCI**) is a Linux Foundation initiative
    that aims to establish principles, standards, and specifications for Linux containers.
    The OCI runtime specifications are primarily concerned with container life cycle
    management and configuration for multiple systems, including Linux, Windows, and
    Solaris. Low-level runtimes are container runtimes that comply with the OCI specification.
    Container creation and management are primarily the responsibility of low-level
    container runtimes. Designed by Docker, runC is an example of low-level container
    runtime and the standard for low-level container runtimes.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**开放容器接口**（**OCI**）是 Linux 基金会的一个倡议，旨在为 Linux 容器建立原则、标准和规范。OCI 运行时规范主要涉及多系统（包括
    Linux、Windows 和 Solaris）的容器生命周期管理和配置。低级运行时是符合 OCI 规范的容器运行时，主要负责容器的创建和管理。由 Docker
    设计，runC 是低级容器运行时的一个示例，并且是低级容器运行时的标准。'
- en: Low-level runtimes are native runtimes, which means they run containerized processes
    on the host kernel. There are also a few sandboxed and virtualized runtimes that
    provide improved process isolation by not running them on the host kernel. Kata
    Containers is one of the virtualized runtimes. To run containerized processes,
    these runtimes use a VM interface that behaves similarly to containers, but with
    the workload isolation and security benefits of VMs.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 低级运行时是本机运行时，这意味着它们在主机内核上运行容器化进程。还有一些沙盒化和虚拟化运行时，通过不在主机内核上运行进程来提供改进的进程隔离。Kata
    Containers 是虚拟化运行时之一。为了运行容器化进程，这些运行时使用类似于容器的 VM 接口，但具有 VM 的工作负载隔离和安全性优势。
- en: The Docker runtime was the default container runtime when Kubernetes was initially
    published. As the platform developed, so did the need to support different runtimes.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 最初发布 Kubernetes 时，Docker 运行时是默认的容器运行时。随着平台的发展，支持不同运行时的需求也在增加。
- en: The **Container Runtime Interface** (**CRI**) was launched to make Kubernetes
    more runtime agnostic. It’s a high-level specification that’s mostly focused on
    container orchestration. Unlike the OCI, the CRI handles extra aspects of container
    administration such as image management, snapshots, and networking while leaving
    container execution to an OCI-compliant runtime (such as runC).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**容器运行时接口**（**CRI**）旨在使 Kubernetes 更具运行时无关性。这是一个高级规范，主要关注容器编排。与 OCI 不同，CRI
    处理容器管理的额外方面，如镜像管理、快照和网络，而将容器执行留给符合 OCI 规范的运行时（例如 runC）。'
- en: Kata Containers ([https://katacontainers.io/](https://katacontainers.io/)) is
    an open source project that seeks to create a secure and OCI-compliant container
    runtime that improves the security and isolation of container workloads by encapsulating
    each one in a lightweight VM and employing hardware virtualization. Every VM has
    its own kernel that it uses.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Kata Containers（[https://katacontainers.io/](https://katacontainers.io/)）是一个开源项目，旨在创建一个安全且符合
    OCI 标准的容器运行时，通过将每个容器封装在轻量级 VM 中并利用硬件虚拟化来提高容器工作负载的安全性和隔离性。每个 VM 都有自己的内核。
- en: 'As depicted in *Figure 14.2*, traditional containers employ runC as a container
    runtime, which relies on kernel features such as cgroups and namespaces to achieve
    isolation with the shared kernel; however, Kata Containers leverages hardware
    virtualization to isolate containers in their own lightweight VM as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如*图 14.2*所示，传统容器采用 runC 作为容器运行时，依赖诸如 cgroups 和命名空间等内核特性以在共享内核中实现隔离；然而，Kata Containers
    利用硬件虚拟化将容器隔离在其自己的轻量级 VM 中，具体如下：
- en: '![Figure 14.2 – Traditional containers versus Kata Containers ](img/Figure_14.2_B18115.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.2 – 传统容器与 Kata Containers 的对比](img/Figure_14.2_B18115.jpg)'
- en: Figure 14.2 – Traditional containers versus Kata Containers
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.2 – 传统容器与 Kata Containers 的对比
- en: Kata Containers has a number of advantages over standard VMs, including the
    ability to effortlessly integrate with existing container orchestration technologies
    such as Kubernetes. Native Kubernetes capabilities such as auto-scaling and rolling
    updates are still available while you’re launching VMs. This enables the benefits
    of virtualization technology to be combined with container orchestration capabilities.
    In the following section, we can look at how the Kata containers are instantiated
    using kata-runtime.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Kata Containers 在与现有容器编排技术（如 Kubernetes）无缝集成的能力方面具有多个优势。在启动 VM 时，仍然可以使用本地 Kubernetes
    功能，例如自动扩展和滚动更新。这使得虚拟化技术的优势能够与容器编排能力结合起来。在接下来的部分中，我们可以看看如何使用 kata-runtime 实例化 Kata
    容器。
- en: How Kata Containers works
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kata容器的工作原理
- en: When a Kubernetes cluster is configured with a high-level runtime, such as containerd
    or CRI-O, a container runtime shim is installed to allow smooth communication
    between the CRI (containerd or CRI-O) and a low-level container runtime, such
    as runC (the default runtime), and this low-level container runtime is responsible
    for running the containers in the pod.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当Kubernetes集群配置了高层次运行时，如containerd或CRI-O时，会安装一个容器运行时shim，以确保CRI（containerd或CRI-O）与低级容器运行时（如runC，默认运行时）之间的顺畅通信，且该低级容器运行时负责在Pod中运行容器。
- en: '![Figure 14.3 – Working of Kata Containers ](img/Figure_14.3_B18115.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图14.3 – Kata容器的工作原理](img/Figure_14.3_B18115.jpg)'
- en: Figure 14.3 – Working of Kata Containers
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.3 – Kata容器的工作原理
- en: 'The steps for creating Kata containers with segregated kernel and namespace
    are as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 创建具有隔离内核和命名空间的Kata容器的步骤如下：
- en: Kubernetes is configured with a high-level container runtime such as **containerd**
    or **CRI-O**.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Kubernetes被配置为使用高层次容器运行时，如**containerd**或**CRI-O**。
- en: A container runtime shim (**containerd-shim**) acts as a bridge between the
    CRI (containerd or CRI-O) and a low-level container runtime, such as runC (the
    default runtime), for smooth communication.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 容器运行时shim（**containerd-shim**）充当CRI（containerd或CRI-O）与低级容器运行时（如runC，默认运行时）之间的桥梁，以确保顺畅的通信。
- en: The low-level container runtime (such as runC or kata-runtime) takes care of
    running the containers in the pod.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 低级容器运行时（如runC或kata-runtime）负责在Pod中运行容器。
- en: Kata Containers uses a runtime class (kata-runtime) to run containers in a separate
    kernel and namespace.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Kata容器使用运行时类（kata-runtime）在独立的内核和命名空间中运行容器。
- en: Containers can be run in a lightweight VM using `containerd-shim-kata-v2`, a
    new shim that acts as a bridge between containerd and `kata-runtime`, Kata Containers’
    runtime class should also be enabled for running containers in a separate kernel
    and namespace.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 容器可以通过`containerd-shim-kata-v2`在轻量级虚拟机中运行，这是一种新型shim，充当containerd与`kata-runtime`之间的桥梁，同时还需要启用Kata容器的运行时类以便在独立的内核和命名空间中运行容器。
- en: 'In a nutshell, Kata is a container runtime that provides greater isolation
    between containers while maintaining the performance and efficiency of other runtimes.
    The following are some of its prominent features:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，Kata是一个容器运行时，它提供了容器之间更强的隔离，同时保持其他运行时的性能和效率。以下是它的一些显著特点：
- en: '**Security**: It runs in a dedicated and isolated kernel and can be easily
    integrated with containerd or any other container runtime. It also supports several
    hypervisors such as QEMU, Cloud Hypervisor, and Firecracker.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全性**：它运行在专用和隔离的内核中，可以轻松与containerd或其他任何容器运行时集成。它还支持多个虚拟化管理程序，如QEMU、Cloud
    Hypervisor和Firecracker。'
- en: '**Compatibility with Docker and Kubernetes**: By providing kata-runtime as
    a container runtime, it works easily with Docker and Kubernetes.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与Docker和Kubernetes的兼容性**：通过提供kata-runtime作为容器运行时，它可以与Docker和Kubernetes轻松配合使用。'
- en: '**Performance**: It has the same consistency as any other Linux container but
    with more isolation. It also supports AMD64, ARM, IBM pSeries, and IBM zSeries
    platforms.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能**：它与其他任何Linux容器具有相同的一致性，但隔离性更强。它还支持AMD64、ARM、IBM pSeries和IBM zSeries平台。'
- en: '**Simplified**: No need for nested containers inside VMs or sacrificing container
    speed.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简化**：无需在虚拟机内嵌套容器，也无需牺牲容器速度。'
- en: Apart from virtualized runtimes or Kata Containers, there are various techniques
    to isolate containers (refer to [https://thenewstack.io/how-to-implement-secure-containers-using-googles-gvisor/](https://thenewstack.io/how-to-implement-secure-containers-using-googles-gvisor/)),
    each with its own set of attributes that will suit certain applications. The appropriate
    one for your apps is a crucial aspect of your container security architecture.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 除了虚拟化运行时或Kata容器，还有各种技术可以隔离容器（参考[https://thenewstack.io/how-to-implement-secure-containers-using-googles-gvisor/](https://thenewstack.io/how-to-implement-secure-containers-using-googles-gvisor/)），每种技术都有一套适合特定应用的属性。选择适合您应用的技术是容器安全架构的关键部分。
- en: Now that we’ve grasped the fundamentals of how Kata Containers works, we can
    move on to the following step of enabling the Kata add-on and running a sample
    application.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经掌握了Kata容器的基本原理，可以继续下一步，启用Kata附加组件并运行示例应用程序。
- en: Enabling the Kata add-on and running a sample application
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用Kata附加组件并运行示例应用程序
- en: In this section, we can go through the process of enabling the Kata add-on in
    your MicroK8s Kubernetes cluster. Then, to demonstrate Kata’s capabilities, we’ll
    deploy a sample application.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍在MicroK8s Kubernetes集群中启用Kata插件的过程。然后，为了展示Kata的能力，我们将部署一个示例应用。
- en: Note
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We’ll be using an Ubuntu VM for this section. The instructions for setting up
    the MicroK8s cluster are the same as in [*Chapter 5*](B18115_05.xhtml#_idTextAnchor070)*,*
    *Creating and Implementing Updates on Multi-Node Raspberry Pi Kubernetes Clusters*.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 本节我们将使用一台Ubuntu虚拟机。设置MicroK8s集群的步骤与[*第5章*](B18115_05.xhtml#_idTextAnchor070)*,*
    *创建并实施多节点树莓派Kubernetes集群更新*中的说明相同。
- en: Step 1 – Enabling the Kata add-on
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤1 – 启用Kata插件
- en: Starting with MicroK8s v1.24, you must issue the `enable community` command
    to enable the community add-ons repository.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 从MicroK8s v1.24开始，必须执行`enable community`命令才能启用community插件仓库。
- en: 'Use the following command to enable the `community` repository:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令启用`community`仓库：
- en: '[PRE0]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'It will take some time to finish activating the add-on; the following command
    execution output shows that the `community` repository has been successfully enabled:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 启用插件需要一些时间，以下命令执行输出显示`community`仓库已成功启用：
- en: '![Figure 14.4 – Enabling the community repository ](img/Figure_14.4_B18115.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图14.4 – 启用community仓库](img/Figure_14.4_B18115.jpg)'
- en: Figure 14.4 – Enabling the community repository
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.4 – 启用community仓库
- en: Now that we have the `community` repository enabled, we can move on to the following
    step of enabling the Kata add-on.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经启用了`community`仓库，接下来可以进行启用Kata插件的下一步操作。
- en: 'Use the following command to enable the Kata add-on:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令启用Kata插件：
- en: '[PRE1]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following command execution output indicates that the Kata add-on is being
    enabled:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令执行输出表明Kata插件正在启用中：
- en: '![Figure 14.5 – Enabling the Kata add-on ](img/Figure_14.5_B18115.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图14.5 – 启用Kata插件](img/Figure_14.5_B18115.jpg)'
- en: Figure 14.5 – Enabling the Kata add-on
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.5 – 启用Kata插件
- en: From the preceding command execution output, we can see that `kata runtimeClassName`
    (kata) is added, which allows us to specify which workloads should be launched
    in Kata Containers.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的命令执行输出中，我们可以看到`kata runtimeClassName`（kata）已被添加，这使我们可以指定哪些工作负载应在Kata容器中启动。
- en: Note
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `--runtime-path` parameter can also be used to specify the location where
    the Kata runtime is installed.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`--runtime-path`参数还可以用来指定Kata运行时的安装位置。'
- en: 'Use the following command to enable the Kata add-on with the runtime path:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令启用带有运行时路径的Kata插件：
- en: '`microk8s enable kata --runtime-path=<<kata-runtime-binary-path>>`'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`microk8s enable kata --runtime-path=<<kata-runtime-binary-path>>`'
- en: 'Before we move on to the following step, let’s make sure that the Kata add-on
    has been activated successfully using the `microk8s status` command as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续下一步之前，让我们确保通过`microk8s status`命令确认Kata插件已成功启用：
- en: '![Figure 14.6 – The Kata add-on is enabled ](img/Figure_14.6_B18115.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图14.6 – Kata插件已启用](img/Figure_14.6_B18115.jpg)'
- en: Figure 14.6 – The Kata add-on is enabled
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.6 – Kata插件已启用
- en: Now that the Kata add-on has been enabled, we may deploy a sample nginx application
    in the following step.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Kata插件已启用，我们可以在下一步中部署一个示例nginx应用。
- en: Note for using Kata Containers on multi-node clusters
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 关于在多节点集群上使用Kata容器的注意事项
- en: '`microk8s enable kata` must be executed on each node in a multi-node cluster
    in order for the Kata runtime to be enabled on the desired nodes.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`microk8s enable kata`必须在多节点集群的每个节点上执行，才能在目标节点上启用Kata运行时。'
- en: Step 2 – Deploying a sample application
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤2 – 部署示例应用
- en: 'In this step, we will be deploying the following sample nginx application deployment
    manifest, which uses the Kata runtime:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一步，我们将部署以下示例nginx应用部署清单，该清单使用了Kata运行时：
- en: '[PRE2]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Use the following command to create a sample nginx deployment:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令创建一个示例nginx部署：
- en: '[PRE3]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following command execution output indicates that there is no error in
    the deployment and in the following steps, we can ensure that the pods are created
    as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令执行输出表明部署没有错误，接下来的步骤中我们可以确保Pods已创建：
- en: '![Figure 14.7 – Sample nginx application deployed ](img/Figure_14.7_B18115.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图14.7 – 部署示例nginx应用](img/Figure_14.7_B18115.jpg)'
- en: Figure 14.7 – Sample nginx application deployed
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.7 – 部署示例nginx应用
- en: 'Now that the deployment is successful, let’s use the following `kubectl` command
    to check whether the pods are in a `Running` state:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 部署成功后，使用以下`kubectl`命令检查Pods是否处于`Running`状态：
- en: '![Figure 14.8 – Checking whether the pods are in a Running state ](img/Figure_14.8_B18115.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.8 – 检查pods是否处于运行状态](img/Figure_14.8_B18115.jpg)'
- en: Figure 14.8 – Checking whether the pods are in a Running state
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.8 – 检查pods是否处于运行状态
- en: The fact that `nginx-kata` is now in the `Running` state means that containers
    are running in a lightweight VM utilizing the containerd runtime. It used `containerd-shim-kata-v2`,
    which acts as a bridge between containerd and kata-runtime—a runtime class that
    comes with Kata Containers that allows containers to run in their own kernel and
    namespace.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`nginx-kata`现在处于`Running`状态，这意味着容器正在一个轻量级虚拟机中运行，并使用containerd运行时。它使用了`containerd-shim-kata-v2`，该工具充当containerd和kata-runtime之间的桥梁——kata-runtime是一种随Kata
    Containers提供的运行时类，允许容器在自己的内核和命名空间中运行。'
- en: Now that we’ve seen how easy is to enable the Kata add-on and run a sample application,
    let’s move on to the following section where we discuss the best practices for
    running containers.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了启用Kata插件并运行示例应用程序是多么简单，接下来让我们进入下一节，讨论运行容器的最佳实践。
- en: Container security best practices
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器安全最佳实践
- en: Containers provide a lot of advantages, but they also have some security issues
    that might be tough to solve. Because of the enormous number of containers based
    on many different underlying images, each of which could potentially have vulnerabilities,
    containers create a wider attack surface than traditional workloads.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 容器提供了许多优势，但也存在一些安全问题，这些问题可能难以解决。由于基于许多不同底层镜像的大量容器，每个容器都可能存在漏洞，因此容器比传统工作负载具有更广泛的攻击面。
- en: Another important consideration is the kernel architecture shared by containers.
    Securing the host is insufficient to ensure security. You must also keep secure
    configurations to limit container permissions and ensure effective container isolation.
    For example, a container with an exploitable vulnerability, exposed metadata,
    and incorrect credentials configuration could jeopardize your entire infrastructure.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要考虑因素是容器共享的内核架构。仅确保主机安全不足以保证安全。你还必须保持安全配置，限制容器权限，并确保容器隔离有效。例如，具有可利用漏洞、暴露元数据和错误凭证配置的容器，可能会危及整个基础设施。
- en: We’ll go through some of the most important factors to consider when running
    containers.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将介绍运行容器时需要考虑的一些最重要因素。
- en: Utilizing DevSecOps
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 利用DevSecOps
- en: The seamless integration of security testing and protection across the software
    development and deployment life cycle is referred to as DevSecOps. You may scan
    your code for defects or possibly vulnerable code before shipping or even building
    your application. There are various **Static Application Security Testing** (**SAST**)
    tools for application code, such as **SonarQube**, which provides vulnerability
    scanners for various languages and detects vulnerabilities based on rules, linters,
    and so on. You can use them on the development workstation, but including code
    scanning tools in the CI/CD workflow ensures a minimal degree of code quality.
    For example, if some checks fail, you can deny pull requests by default.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件开发和部署生命周期中无缝集成安全性测试和保护，称为DevSecOps。你可以在发布或构建应用程序之前扫描代码以检测缺陷或可能的漏洞代码。针对应用程序代码有各种**静态应用程序安全测试**（**SAST**）工具，例如**SonarQube**，它为多种编程语言提供漏洞扫描，并基于规则、代码检查器等检测漏洞。你可以在开发工作站上使用它们，但将代码扫描工具纳入CI/CD工作流程可以确保代码质量的最低标准。例如，如果某些检查失败，你可以默认拒绝拉取请求。
- en: Also, remove any components that your application doesn’t require. For example,
    remove the `sed` and `awk` binaries, which are installed by default on any UNIX
    system. This can assist you in lowering the attack surface.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，移除任何应用程序不需要的组件。例如，移除默认安装在任何UNIX系统上的`sed`和`awk`二进制文件。这可以帮助你降低攻击面。
- en: Scanning external vulnerabilities via dependency scanning
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过依赖扫描扫描外部漏洞
- en: External dependencies, such as third-party libraries or frameworks that are
    used in your application, may contain flaws and vulnerabilities. Any application
    build process should incorporate dependency scanning as a best practice.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 外部依赖项，例如应用程序中使用的第三方库或框架，可能包含缺陷和漏洞。任何应用程序构建过程都应将依赖扫描作为最佳实践。
- en: A vulnerability database (such as NVD) can also be matched with your application
    dependencies using package management tools such as `npm`, `maven`, `go`, and
    others to produce helpful alerts/warnings.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 漏洞数据库（例如 NVD）还可以与应用程序依赖项配合使用，利用 `npm`、`maven`、`go` 等包管理工具生成有用的警报/警告。
- en: Analyzing container images using image scanning tools
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用镜像扫描工具分析容器镜像
- en: Analyze your container images with an image scanner. The image scanning tool
    will find vulnerabilities in the operating system packages provided by the container
    image base distribution (`rpm`, `dpkg`, `apk`, and so on). It will discover vulnerabilities
    in package dependencies for Java, Node.js, Python, and other languages.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 使用镜像扫描工具分析你的容器镜像。镜像扫描工具会查找容器镜像基础发行版提供的操作系统包中的漏洞（如`rpm`、`dpkg`、`apk`等）。它还会发现
    Java、Node.js、Python 等语言的包依赖项中的漏洞。
- en: Automating and enforcing image scanning is simple. It can be integrated into
    your CI/CD pipelines, triggered when new images are sent to a registry to ensure
    that non-compliant images are no longer permitted to run.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化和强制执行镜像扫描非常简单。它可以集成到你的 CI/CD 流水线中，当新镜像上传到注册库时触发扫描，确保不合规的镜像不再被允许运行。
- en: Enforcing image content trust
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 强制执行镜像内容信任
- en: If you aren’t making the image from scratch, you should pick images that are
    reliable. Anyone can utilize public image repositories such as Docker Hub, and
    they may contain viruses or misconfigurations.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不是从零开始制作镜像，应该选择可靠的镜像。任何人都可以使用公共镜像库，例如 Docker Hub，但这些镜像可能包含病毒或配置错误。
- en: Container image integrity can also be enforced by using Docker Notary or a comparable
    service to add digital signatures to the image, which can then be validated in
    the container runtime.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 Docker Notary 或类似服务为镜像添加数字签名，也可以强制执行容器镜像的完整性，这样就可以在容器运行时验证这些签名。
- en: Securing registries
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保护注册库
- en: Container images are often saved in either private or public registries. It’s
    crucial to keep these registries safe so that all team members and collaborators
    can use images that are as secure as possible.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 容器镜像通常保存在私有或公共注册库中。确保这些注册库的安全至关重要，这样所有团队成员和合作人员就能使用尽可能安全的镜像。
- en: If you have your own private registry, you must set up access controls that
    specify who can and cannot access and publish images. Access control is a fundamental
    security measure that can prevent unauthorized parties from altering, publishing,
    or deleting your images.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有自己的私有注册库，必须设置访问控制，明确谁可以访问和发布镜像。访问控制是一项基础安全措施，可以防止未授权人员篡改、发布或删除你的镜像。
- en: Securing your host
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保护宿主机
- en: It’s just as critical to secure your host as it is to secure your containers.
    The host where the containers operate is often made up of an operating system
    with a Linux kernel, a collection of libraries, a container runtime, and various
    background services and helpers. Any of these components could be insecure or
    misconfigured, allowing unauthorized access to running containers or a **Denial
    of Service** (**DoS**) attack.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 保证宿主机的安全和容器的安全同样重要。容器运行的宿主机通常由操作系统（Linux 内核）、一系列库、容器运行时以及各种后台服务和帮助程序组成。任何这些组件可能都不安全或配置错误，从而允许未经授权的访问容器或遭受**拒绝服务**（**DoS**）攻击。
- en: For example, difficulties with the container runtime itself, such as a DoS attack
    that prohibits the creation of new containers in a host, can have an impact on
    your operating containers. You could use host scanning utilities to identify known
    security holes in the host’s container runtime, services, standard libraries such
    glibc, and the kernel (quite similar to what image scanning does for a container
    image).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，容器运行时本身出现问题，例如 DoS 攻击导致宿主机无法创建新容器，可能会影响正在运行的容器。你可以使用宿主扫描工具识别宿主机容器运行时、服务、标准库（如
    glibc）以及内核中的已知安全漏洞（这与镜像扫描为容器镜像所做的类似）。
- en: Securing your runtime
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保护你的运行时
- en: 'The following are some best practices for ensuring runtime security:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些确保运行时安全的最佳实践：
- en: '*Create separate virtual networks for your containers*: This adds a layer of
    isolation that can help limit the attack surface.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*为容器创建独立的虚拟网络*：这可以增加一层隔离，帮助限制攻击面。'
- en: '*Use the principle of least privilege*: Only allow connectivity between containers
    that genuinely require it.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用最小权限原则*：仅允许真正需要连接的容器之间的互联。'
- en: '*Only expose the ports required by the application*: Except for SSH, do not
    expose any additional ports. Apply this idea to both containers and underlying
    computers.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*仅暴露应用所需的端口*：除了 SSH 外，不要暴露任何额外的端口。将这一思想应用于容器和底层计算机。'
- en: '*Use TLS to secure service communication*: This method encrypts traffic and
    ensures that only authorized endpoints are allowed.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 TLS 来保护服务通信*：这种方法加密流量，并确保只有授权的端点才能访问。'
- en: '*Use the Docker image policy plugin*: This plugin prevents any process from
    retrieving images that have not previously been allow-listed.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 Docker 镜像策略插件*：该插件可以防止任何进程获取未被允许列入白名单的镜像。'
- en: Reviewing container privileges
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 审查容器权限
- en: 'The scope of a vulnerability exploited inside a container is largely determined
    by the container’s privileges and isolation from the host and other resources.
    The existing and prospective vulnerabilities can be mitigated by using runtime
    settings in the following ways:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 容器内漏洞被利用的范围在很大程度上取决于容器的权限以及与主机和其他资源的隔离。现有和潜在的漏洞可以通过以下方式使用运行时设置来减轻：
- en: Run the container as a user, not as a root. Use randomized UIDs if possible.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以用户身份运行容器，而不是以 root 身份运行。如果可能，使用随机的 UID。
- en: Docker and Kubernetes both allow for the removal of capabilities and the disabling
    of privileged containers. Seccomp and AppArmor can limit the types of actions
    that a container can execute.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 和 Kubernetes 都允许移除某些能力并禁用特权容器。Seccomp 和 AppArmor 可以限制容器执行的操作类型。
- en: To avoid a container taking all of the memory or CPUs and starving other apps,
    use resource limits.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了避免某个容器占用所有内存或 CPU 并导致其他应用程序资源匮乏，请使用资源限制。
- en: Examine shared storage or volumes on a regular basis, paying special attention
    to the host path and sharing the filesystem from the host.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定期检查共享存储或卷，特别注意主机路径和共享的文件系统。
- en: Pod Security Policies can be used to create guardrails in your cluster and prevent
    misconfigured containers.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用 Pod 安全策略在集群中创建保护措施，并防止容器配置错误。
- en: Using real-time event and log auditing
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用实时事件和日志审计
- en: 'Threats to container security can be detected by evaluating aberrant activity
    and auditing several sources of logs and events. The following are some examples
    of sources of events:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 通过评估异常活动和审计多个日志和事件来源，可以检测到容器安全威胁。以下是一些事件来源的示例：
- en: Logs from the host and Kubernetes
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机和 Kubernetes 的日志
- en: Container calls to the operating system
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器对操作系统的调用
- en: Use tools (such as Falco and Sysdig Secure) that can track the system calls
    that are made and send out alerts if anything unusual happens. It should come
    with a pre-configured library of rules as well as the option to write your own
    using a simple syntax. It should also be able to monitor the Kubernetes audit
    log.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 使用工具（如 Falco 和 Sysdig Secure）来追踪系统调用，并在出现任何异常时发送警报。它应该带有预配置的规则库，并且可以使用简单的语法编写自己的规则。它还应该能够监控
    Kubernetes 审计日志。
- en: Monitoring resource usage
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 监控资源使用
- en: Excessive resource utilization (CPU, RAM, and network), a rapid drop in available
    disc space, an above-average error rate, or increased latency could all be signs
    that something is wrong with your system.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 过度的资源使用（CPU、RAM 和网络）、可用磁盘空间的急剧下降、异常的错误率或延迟增加，可能都是系统出现问题的迹象。
- en: Collect metrics in the same way as Prometheus (refer to [*Chapter 8*](B18115_08.xhtml#_idTextAnchor121),
    *Monitoring the Health of Infrastructure and Applications*) does. Set up alerts
    to be notified as soon as the data exceeds the predicted thresholds. Use useful
    dashboards to track the evolution of metrics and see how they relate to other
    metrics and events in your system.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 以与 Prometheus 相同的方式收集指标（参考 [*第8章*](B18115_08.xhtml#_idTextAnchor121)，*监控基础设施和应用程序的健康状况*）。设置警报，当数据超过预定阈值时及时通知。使用有用的仪表板来跟踪指标的变化，并查看它们如何与系统中的其他指标和事件相关联。
- en: Common security misconfigurations and remediation
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见的安全配置错误及修复方法
- en: Incorrectly configured hosts, container runtimes, clusters, resources, and so
    on may give an attacker a way to increase their privileges and move upward.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 配置错误的主机、容器运行时、集群、资源等可能为攻击者提供提升权限并向上移动的途径。
- en: Learn how to spot configuration errors, why they’re problematic, and how to
    correct them by using benchmarks, best practices, and hardening guidelines. The
    **Center for Internet Security** (**CIS**) ([https://www.cisecurity.org/benchmark/kubernetes](https://www.cisecurity.org/benchmark/kubernetes))
    is the most authoritative source of information that provides free benchmarks
    for a variety of situations, and anyone and any firm can contribute their expertise.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 学习如何识别配置错误，了解它们为何成问题，以及如何通过使用基准测试、最佳实践和加固指南来修正这些问题。**互联网安全中心**(**CIS**) ([https://www.cisecurity.org/benchmark/kubernetes](https://www.cisecurity.org/benchmark/kubernetes))
    是提供各种情境下免费基准测试的最权威的信息来源，任何人或公司都可以贡献其专业知识。
- en: The easiest method to ensure security is to automate as much as possible. There
    are a number of tools, such as kube-bench ([https://github.com/aquasecurity/kube-bench](https://github.com/aquasecurity/kube-bench)),
    most of which are based on static configuration analysis, allow you to evaluate
    configuration parameters at various levels, and provide recommendations on how
    to change them.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 确保安全的最简单方法是尽可能地自动化。有许多工具，例如 kube-bench ([https://github.com/aquasecurity/kube-bench](https://github.com/aquasecurity/kube-bench))，它们大多基于静态配置分析，可以让你在不同层次上评估配置参数，并提供关于如何修改它们的建议。
- en: To recap, security controls that safeguard containers and the underlying infrastructure
    should be implemented and maintained as part of container security. Integrating
    security into the development pipeline can ensure that all components are protected
    from the beginning of their development phase to the end of their life cycle.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，保护容器和基础设施的安全控制应该作为容器安全的一部分进行实施和维护。将安全性集成到开发流水线中可以确保所有组件从开发阶段开始直到生命周期结束都得到保护。
- en: Summary
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We looked at how to use Kata Containers to build a secure container runtime
    and how to employ hardware virtualization technology to improve workload isolation.
    We have also looked at how to enable the Kata add-on and run a sample application.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们探讨了如何使用 Kata Containers 构建一个安全的容器运行时，并如何利用硬件虚拟化技术来改善工作负载隔离。我们还介绍了如何启用 Kata
    插件并运行示例应用程序。
- en: We discussed best practices for establishing container security on your production-grade
    cluster. We also noticed how the MicroK8s add-on option has made it simpler to
    activate Kata Containers, which can dramatically improve the security and isolation
    of your container operations.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了在生产级集群上建立容器安全性的最佳实践。我们还注意到，MicroK8s 插件选项使得启用 Kata Containers 更加简便，这能显著提高容器操作的安全性和隔离性。
- en: With Kata Containers maturing into a production-ready container runtime and
    subsequent uptake, there is a great opportunity to improve the hosted build and
    development environment approach to address the noisy neighbor problem and handle
    unique and privileged requirements without affecting current host settings or
    policies.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 Kata Containers 成熟为生产级容器运行时，并且逐步被采纳，改进托管的构建和开发环境以解决“噪声邻居”问题，并处理独特和特权需求，而不影响当前主机设置或政策，成为了一个巨大的机会。
- en: In the following chapter, we will continue our next use case of implementing
    strict confinement for isolated containers.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将继续探讨实施严格隔离的容器使用案例。

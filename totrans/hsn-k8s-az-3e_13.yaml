- en: 8\. Role-based access control in AKS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Up to this point, you've been using a form of access to **Azure Kubernetes Service**
    (**AKS**) that gave you permissions to create, read, update, and delete all objects
    in your cluster. This has worked great for testing and development but is not
    recommended on production clusters. On production clusters, the recommendation
    is to leverage **role-based access control** (**RBAC**) in Kubernetes to only
    grant a limited set of permissions to users.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will explore Kubernetes RBAC in more depth. You will be
    introduced to the concept of RBAC in Kubernetes. You will then configure RBAC
    in Kubernetes and integrate it with **Azure Active Directory** (**Azure AD**).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: RBAC in Kubernetes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling Azure AD integration in your AKS cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a user and a group in Azure AD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring RBAC in AKS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verifying RBAC for a user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
- en: To complete the example on RBAC, you need access to an Azure AD instance, with
    global administrator permissions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Let's start this chapter by explaining RBAC.
  prefs: []
  type: TYPE_NORMAL
- en: RBAC in Kubernetes explained
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In production systems, you need to allow different users different levels of
    access to certain resources; this is known as **RBAC**. The benefit of establishing
    RBAC is that it not only acts as a guardrail against the accidental deletion of
    critical resources but also is an important security feature that limits full
    access to the cluster to roles that really need it. On an RBAC-enabled cluster,
    users can only access and modify those resources for which they have permission.
  prefs: []
  type: TYPE_NORMAL
- en: Up until now, using Cloud Shell, you have been acting as *root*, which allowed
    you to do anything and everything in the cluster. For production use cases, root
    access is dangerous and should be restricted as much as possible. It is a generally
    accepted best practice to use the **principle of least privilege** (**PoLP**)
    to sign in to any computer system. This prevents both access to secure data and
    unintentional downtime through the deletion of key resources. Anywhere between
    22% and 29% of data loss is attributed to human error. You don't want to be a
    part of that statistic.
  prefs: []
  type: TYPE_NORMAL
- en: 'Kubernetes developers realized this was a problem and added RBAC to Kubernetes
    along with the concept of service roles to control access to clusters. Kubernetes
    RBAC has three important concepts:'
  prefs: []
  type: TYPE_NORMAL
- en: '`no permissions`, and every permission needs to be specifically called out.
    Examples of permissions include `get`, `watch`, and `list`. The role also contains
    which resources these permissions are given to. Resources can be either all pods,
    deployments, and so on, or can be a specific object (such as `pod/mypod`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Subject**: The subject is either a person or a service account that is assigned
    a role. In AKS clusters integrated with Azure AD, these subjects can be Azure
    AD users or groups.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**RoleBinding**: A RoleBinding links a subject to a role in a certain namespace
    or, in the case of a ClusterRoleBinding, the whole cluster.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An important concept to understand is that when interfacing with AKS, there
    are two layers of RBAC: Azure RBAC and Kubernetes RBAC, as shown in *Figure 8.1*.
    Azure RBAC deals with the roles given to people to make changes in Azure, such
    as creating, modifying, and deleting clusters. Kubernetes RBAC deals with the
    access rights to resources in a cluster. Both are independent control planes but
    can use the same users and groups originating in Azure AD.'
  prefs: []
  type: TYPE_NORMAL
- en: '![A representation of the two RBAC planes, Azure and Kubernetes](img/B17338_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.1: Two different RBAC planes, Azure and Kubernetes'
  prefs: []
  type: TYPE_NORMAL
- en: RBAC in Kubernetes is an optional feature. The default in AKS is to create clusters
    that have RBAC enabled. However, by default, the cluster is not integrated with
    Azure AD. This means that by default you cannot grant Kubernetes permissions to
    Azure AD users. In the coming section, you will enable Azure AD integration in
    your cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling Azure AD integration in your AKS cluster
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, you will update your existing cluster to include Azure AD
    integration. You will do this using the Azure portal:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Once a cluster has been integrated with Azure AD, this functionality cannot
    be disabled.
  prefs: []
  type: TYPE_NORMAL
- en: To start, you will need an Azure AD group. You will later give admin privileges
    for your AKS cluster to this group. To create this group, search for `azure active
    directory` in the Azure search bar:![Searching for Azure Active Directory in the
    Azure search bar](img/B17338_08_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8.2: Searching for azure active directory in the Azure search bar'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the left pane, select Groups, which will bring you to the All groups screen.
    Click + New Group, as shown in *Figure 8.3*:![In the group pane, clicking the
    +New group button to create a new Azure AD group](img/B17338_08_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8.3: Creating a new Azure AD group'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: On the resulting page, create a security group and give it a name and description.
    Select your user as the owner and a member of this group. Click the Create button
    on the screen:![Providing necessary information to create the Azure AD group](img/B17338_08_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8.4: Providing details for creating the Azure AD group'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that this group is created, search for your Azure cluster in the Azure search
    bar to open the AKS pane:![Searching for the cluster using the Azure search bar](img/B17338_08_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8.5: Searching for your cluster in the Azure search bar'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the AKS pane, select Cluster configuration under Settings. In this pane,
    you will be able to turn on AKS-managed Azure Active Directory. Enable the functionality
    and select the Azure AD group you created earlier to set as the admin Azure AD
    group. Finally, hit the Save button in the command bar, as shown in *Figure 8.6*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Enabling AKS-managed Azure Active Directory and clicking the Save button](img/B17338_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.6: Enabling AKS-managed Azure Active Directory and clicking the Save
    button'
  prefs: []
  type: TYPE_NORMAL
- en: This enables Azure ADâ€“integrated RBAC on your AKS cluster. In the next section,
    you will create a new user and a new group that will be used in the section afterward
    to set up and test RBAC in Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a user and group in Azure AD
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, you will create a new user and a new group in Azure AD. You
    will use them later on in the chapter to assign them permissions to your AKS cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You need the *User Administrator role* in Azure AD to be able to create users
    and groups.
  prefs: []
  type: TYPE_NORMAL
- en: To start with, search for `azure active directory` in the Azure search bar:![Searching
    for Azure Active Directory in the Azure search bar](img/B17338_08_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8.7: Searching for azure active directory in the search bar'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on All users in the left pane. Then select + New user to create a new
    user:![Clicking the +New user button to create a new user](img/B17338_08_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8.8: Clicking on + New user to create a new user'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Provide the information about the user, including the username. Make sure to
    note down the password, as this will be required to sign in:![Providing the necessary
    details to create a new user](img/B17338_08_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8.9: Providing the user details'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once the user is created, go back to the Azure AD pane and select Groups. Then
    click the + New group button to create a new group:![Clicking the + New group
    button to create a new group](img/B17338_08_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8.10: Clicking on + New group to create a new group'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create a new security group. Call the group `handson aks users` and add `Tim`
    as a member of the group. Then hit the Create button at the bottom:![Providing
    necessary details to create a new group](img/B17338_08_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8.11: Providing the group type, group name, and group description'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You have now created a new user and a new group. Next, you'll make that user
    a cluster user in AKS RBAC. This enables them to use the Azure CLI to get access
    to the cluster. To do that, search for your cluster in the Azure search bar:![Searching
    for the cluster using the Azure search bar](img/B17338_08_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8.12: Searching for your cluster in the Azure search bar'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the cluster pane, click on Access control (IAM) and then click on the + Add
    button to add a new role assignment. Select Azure Kubernetes Service Cluster User
    Role and assign that to the new user you just created:![Assigning the cluster
    user role to the new user we just created](img/B17338_08_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8.13: Assigning the cluster user role to the new user you created'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As you will also be using Cloud Shell with the new user, you will need to give
    them contributor access to the Cloud Shell storage account. First, search for
    `storage` in the Azure search bar:![Searching for storage accounts using the Azure
    search bar](img/B17338_08_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8.14: Searching for storage in the Azure search bar'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: There should be a storage account under Resource group with a name that starts
    with cloud-shell-storage. Click on the resource group:![Selecting the resource
    group of the storage account](img/B17338_08_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8.15: Selecting the resource group'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Go to Access control (IAM) and click on the + Add button. Give the Storage
    Account Contributor role to your newly created user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Assigning the Contributor role to the newly created user storage account](img/B17338_08_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.16: Assigning Storage Account Contributor role to the new user'
  prefs: []
  type: TYPE_NORMAL
- en: This has concluded the creation of a new user and a group and giving that user
    access to AKS. In the next section, you will configure RBAC for that user and
    group in your AKS cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring RBAC in AKS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To demonstrate RBAC in AKS, you will create two namespaces and deploy the Azure
    voting application in each namespace. You will give the group cluster-wide read-only
    access to pods, and you will give the user the ability to delete pods in only
    one namespace. Practically, you will need to create the following objects in Kubernetes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ClusterRole` to give read-only access'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ClusterRoleBinding` to grant the group access to this role'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Role` to give delete permissions in the `delete-access` namespace'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RoleBinding` to grant the user access to this role'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![A flowchart showing the demo youâ€™ll be building. A user is part of a group.
    The group has a clusterrole to read pods. The user has an additional namespace
    scoped role allowing them to delete pods](img/B17338_08_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.17: The group getting read-only access to the whole cluster, and the
    user getting delete permissions to the delete-access namespace'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s set up the different roles on your cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To start our example, you will need to retrieve the ID of the group. The following
    commands will retrieve the group ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will show your group ID. Note this down because you''ll need it in the
    next steps:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Output displaying the group ID](img/B17338_08_18.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 8.18: Getting the group ID'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In Kubernetes, you will create two namespaces for this example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will also deploy the `azure-vote` application in both namespaces:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, you will create the `ClusterRole` object. This is provided in the `clusterRole.yaml`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s have a closer look at this file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`ClusterRole` instance'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ClusterRole` instance'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get`, `watch`, and `list`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will create `ClusterRole` using the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The next step is to create a cluster role binding. The binding links the role
    to a user or a group. This is provided in the `clusterRoleBinding.yaml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s have a closer look at this file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`ClusterRoleBinding` instance.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ClusterRoleBinding`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ClusterRole` object we created in the previous step'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<group-id>` on *line 12* with the group ID you got earlier.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can create `ClusterRoleBinding` using the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, you''ll create a role that is limited to the `delete-access` namespace.
    This is provided in the `role.yaml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This file is similar to the `ClusterRole` object from earlier. There are two
    meaningful differences:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Role` instance and not a `ClusterRole` instance'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Role` using the following command:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, you will create a `RoleBinding` instance that links our user to the
    namespace role. This is provided in the `roleBinding.yaml` file:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'This file is similar to the `ClusterRoleBinding` object from earlier. There
    are a couple of meaningful differences:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`RoleBinding` instance and not a `ClusterRoleBinding` instance'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RoleBinding` instance is created in'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ClusterRole` instance'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RoleBinding` using the following command:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: This has concluded the requirements for RBAC. You have created two rolesâ€”`ClusterRole`
    and one namespace-bound role, and set up two `RoleBindings` objectsâ€”`ClusterRoleBinding`
    and the namespace-bound `RoleBinding`. In the next section, you will explore the
    impact of RBAC by signing in to the cluster as the new user.
  prefs: []
  type: TYPE_NORMAL
- en: Verifying RBAC for a user
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To verify that RBAC works as expected, you will sign in to the Azure portal
    using the newly created user. Go to https://portal.azure.com in a new browser,
    or an InPrivate window, and sign in with the newly created user. You will be prompted
    immediately to change your password. This is a security feature in Azure AD to
    ensure that only that user knows their password:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Prompt asking the user to update their password](img/B17338_08_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.19: You will be asked to change your password'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have changed your password, you can start testing the different RBAC
    roles:'
  prefs: []
  type: TYPE_NORMAL
- en: You will start this experiment by setting up Cloud Shell for the new user. Launch
    Cloud Shell and select Bash:![Selecting Bash as Cloud Shell](img/B17338_08_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8.20: Selecting Bash in Cloud Shell'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the next dialog box, select Show advanced settings:![Clicking the Show advanced
    settings button](img/B17338_08_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8.21: Selecting Show advanced settings'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Then, point Cloud Shell to the existing storage account and create a new file
    share:![Pointing Cloud Shell to the existing storage account and creating a new
    file share](img/B17338_08_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8.22: Pointing to the existing storage account and creating a new file
    share'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Once Cloud Shell is available, get the credentials to connect to the AKS cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, try a command in `kubectl`. Let''s try to get the nodes in the cluster:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Since this is the first command executed against an RBAC-enabled cluster, you
    are asked to sign in again. Browse to https://microsoft.com/devicelogin and provide
    the code Cloud Shell showed you (this code is highlighted in *Figure 8.24*). Make
    sure you sign in here with your new user credentials:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Entering the code Cloud Shell showed us in the prompt](img/B17338_08_23.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 8.23: Copying and pasting the code Cloud Shell showed you in the prompt'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After you have signed in, you should get a `Forbidden` error message from `kubectl`,
    informing you that you don''t have permission to view the nodes in the cluster.
    This was expected since the user is configured only to have access to pods:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![The Forbidden error message from kubectl](img/B17338_08_24.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 8.24: The prompt asking you to sign in and the Forbidden message'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now you can verify that your user has access to view pods in all namespaces
    and that the user has permission to delete pods in the `delete-access` namespace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should succeed for both namespaces. This is due to the `ClusterRole` object
    configured for the user''s group:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Output confirming access to view pods in both namespaces](img/B17338_08_25.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 8.25: The user has access to view pods in both namespaces'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s also verify the `delete` permissions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As expected, this is denied in the `no-access` namespace and allowed in the
    `delete-access` namespace, as seen in *Figure 8.26*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Output verifying the user is not able to delete resources in the no-access
    namespace, but is able to delete resources in the delete-access namespace](img/B17338_08_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.26: Deletes are denied in the no-access namespace and allowed in the
    delete-access namespace'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, you have verified the functionality of RBAC on your Kubernetes
    cluster. Since this is the last section of this chapter, let''s make sure to clean
    up the deployments and namespaces in the cluster. Make sure to execute these steps
    from Cloud Shell with your main user, not the new user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This concludes the overview of RBAC on AKS.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, you learned about RBAC on AKS. You enabled Azure ADâ€“integrated
    RBAC in your cluster. After that, you created a new user and group and set up
    different RBAC roles on your cluster. Finally, you signed in using that user and
    were able to verify that the RBAC roles that were configured gave you limited
    access to the cluster you were expecting.
  prefs: []
  type: TYPE_NORMAL
- en: This deals with how users can get access to your Kubernetes cluster. The pods
    running on your cluster might also need an identity in Azure AD that they can
    use to access resources in Azure services such as Blob Storage or Key Vault. You
    will learn more about this use case and how to set this up using an Azure AD pod
    identity in AKS in the next chapter.
  prefs: []
  type: TYPE_NORMAL

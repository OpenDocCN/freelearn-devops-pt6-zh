- en: '4'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: k3OS Installation and Configurations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In edge computing contexts, companies are looking to simplify their tasks while
    using edge devices. Talking about the success of the K3s adoption, some industries
    need a ready-to-use operating system that can include an edge Kubernetes distribution.
    This is where k3OS fits the industry's needs. k3OS was designed to speed up the
    installation of K3s on edge devices.
  prefs: []
  type: TYPE_NORMAL
- en: k3OS packages all the necessary software to install K3s. This chapter explores
    how to use the k3OS ISO image to install K3s on x86_64 devices and how to use
    configuration files. You will learn from different configuration examples how
    to customize your K3s installations, from single node to multi-node. Finally,
    you will learn how to install k3OS on ARM devices using the overlay installation,
    taking in detailed configurations such as networking, the hostname that you would
    need when installing k3OS on edge devices, especially when you use ARM devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: k3OS installation for x86_64 devices using an ISO image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advanced installations of k3OS using config files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multi-node ARM overlay installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this chapter, you need one of the following VMs or devices:'
  prefs: []
  type: TYPE_NORMAL
- en: A Raspberry Pi 4B model with 4 GB RAM (minimum suggested)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A cloud server or VM with **Ubuntu 20.04 LTS**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A VM created using VirtualBox or other software for virtualization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition, you need a cloud storage service such as Amazon S3, Google Cloud
    Storage, or similar, to upload the configuration file for k3OS.
  prefs: []
  type: TYPE_NORMAL
- en: With this, we are ready to learn how to install k3OS in your preferred edge
    device. So, let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more detail and code snippets, check out this resource on GitHub: [https://github.com/PacktPublishing/Edge-Computing-Systems-with-Kubernetes/tree/main/ch4](https://github.com/PacktPublishing/Edge-Computing-Systems-with-Kubernetes/tree/main/ch4)'
  prefs: []
  type: TYPE_NORMAL
- en: k3OS – the Kubernetes operating system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: k3OS is a Linux distribution that includes the minimal kernel, drivers, and
    binaries that you need to install Kubernetes at the edge. It features a lightweight
    distribution of Kubernetes called K3s. k3OS could be used as a fast operating
    system solution to install a lightweight Kubernetes cluster; this means that the
    k3OS image could be used to install master and agent nodes. k3OS uses K3s as the
    main software to create a single or multi-cluster node for the edge. So, with
    k3OS, you are ready to run your edge clusters without spending a lot of time.
  prefs: []
  type: TYPE_NORMAL
- en: 'k3OS can be installed using the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ISO image**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Overlay installation**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are other methods to install a K3s cluster, but this is an easier way
    to get started fast. At this moment, k3OS is under development but supports a
    lot of features for ARM devices. So, let's move on to learn how to install your
    lightweight Kubernetes cluster using k3OS in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: k3OS installation for x86_64 devices using an ISO image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to install k3OS in a VM created using VirtualBox and an ISO image
    for a x86_64 architecture using a Macintosh. To do this, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the `k3OS x86_64 v0.20.7 ISO` image from this link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/rancher/k3os/releases](https://github.com/rancher/k3os/releases)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your VirtualBox. The main window will appear, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.1 – VirtualBox main window](img/B16945_Figure_4.1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.1 – VirtualBox main window
  prefs: []
  type: TYPE_NORMAL
- en: Enter the name to identify the VM – in this case, `k3OS` – and choose the type
    of VM as **Linux** and the **version** as **Other Linux (64 bit)**. Then, click
    on **Continue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.2 – Name and operating system dialog'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_Figure_4.2.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.2 – Name and operating system dialog
  prefs: []
  type: TYPE_NORMAL
- en: Choose at least **2048 MB** of RAM memory for the Live CD and interactive installation.
    Then, click on **Continue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.3 – Memory size dialog'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_Figure_4.3.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.3 – Memory size dialog
  prefs: []
  type: TYPE_NORMAL
- en: Now let's create the hard disk; choose **Create a virtual hard disk now** and
    click on **Create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.4 – Hard disk dialog'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_Figure_4.4.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.4 – Hard disk dialog
  prefs: []
  type: TYPE_NORMAL
- en: Choose **VDI** for **Hard disk file type** and click **Continue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.5 – Hard disk file type dialog](img/B16945_Figure_4.5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.5 – Hard disk file type dialog
  prefs: []
  type: TYPE_NORMAL
- en: Choose **Dynamically allocated** for physical storage, as this will dynamically
    allocate the space for your hard disk. Then, click **Continue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.6 – Hard disk type dialog'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_Figure_4.6.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.6 – Hard disk type dialog
  prefs: []
  type: TYPE_NORMAL
- en: Choose at least **4.00 GB** of disk space for your installation; it could be
    more, depending on your own requirements. Then, click on **Create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.7 – Disk space dialog'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_Figure_4.7.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.7 – Disk space dialog
  prefs: []
  type: TYPE_NORMAL
- en: VirtualBox is going to move you to the **main window**; click on the **Settings**
    icon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.8 – Main window and Settings icon'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_Figure_4.8.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.8 – Main window and Settings icon
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Storage** and choose the **Empty** drive icon. Now, click on the
    small CD icon (![](img/B16945_04_icon1.png)) next to the **Optical Drive** combo
    box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.9 – Storage dialog'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_Figure_4.9.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.9 – Storage dialog
  prefs: []
  type: TYPE_NORMAL
- en: Choose the **Choose a disk file...** menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.10 – Optical drive options'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_Figure_4.10.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.10 – Optical drive options
  prefs: []
  type: TYPE_NORMAL
- en: 'Now find your **k3OS ISO image** and click **Open**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.11 – Open ISO dialog](img/B16945_Figure_4.11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.11 – Open ISO dialog
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Live CD/DVD** checkbox and then click **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.12 – Activating the Live CD/DVD feature'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_Figure_4.12.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.12 – Activating the Live CD/DVD feature
  prefs: []
  type: TYPE_NORMAL
- en: 'Now click on **Network**, and under **Adapter 1**, change the **Attached to**:
    combo box to **Bridged Adapter** for your VM to get an IP inside your local network.
    This is useful to access the VM remotely. Then, click **OK**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.13 – Network configuration dialog'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_Figure_4.13.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.13 – Network configuration dialog
  prefs: []
  type: TYPE_NORMAL
- en: VirtualBox is going to return to the main window again; now click on the **Start**
    icon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, you should wait for the process of loading the k3OS distribution. At the
    end, you are going to see a login prompt. Use `rancher` as both the username and
    password. For newer versions, you don't have to enter any password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.14 – k3OS live CD first-time login'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_Figure_4.14.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.14 – k3OS live CD first-time login
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, execute `sudo k3os install` to start the interactive script to install
    k3OS in your VM:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.15 – k3OS starting the interactive installation'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_Figure_4.15.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.15 – k3OS starting the interactive installation
  prefs: []
  type: TYPE_NORMAL
- en: 'Complete the script installation with the following values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install to disk with key `1`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Config system with cloud-init with `N`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Authorize the GitHub user to SSH with `N`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Set up and confirm your new password for the rancher user with `YOUR_PASSWORD`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure Wi-Fi with `N`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Run as a server or agent with `1`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Token or cluster secret – leave it empty and then press *Enter*.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Your disk will be formatted with `y`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The dialog will resemble the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.16 – Installation of the CLI dialog'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_Figure_4.16.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.16 – Installation of the CLI dialog
  prefs: []
  type: TYPE_NORMAL
- en: After that, the VM is going to reboot; when starting to load, close the VM window,
    and the dialog from *Figure 4.17* will appear. Choose **Power off the machine**
    and then click **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.17 – Power off the VM'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_Figure_4.17.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.17 – Power off the VM
  prefs: []
  type: TYPE_NORMAL
- en: Once the VM is stopped, go to **Settings** and move to the **System** section
    under the **Motherboard** tab. Choose the **Boot order** section and select the
    **Hard Disk** option to prevent the optical disk from not loading again and prevent
    the launching of the installation script when the VM boots.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.18 – Reconfiguring to boot on disk'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_Figure_4.18.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.18 – Reconfiguring to boot on disk
  prefs: []
  type: TYPE_NORMAL
- en: Now, VirtualBox is going to return to the main window, so click on **Start**
    to start your VM again and your fresh k3OS installation will be loaded.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, your k3OS installation is running. You have to enter the `rancher` username
    and your new password to log in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.19 – k3OS first-time boot from disk'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_Figure_4.19.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.19 – k3OS first-time boot from disk
  prefs: []
  type: TYPE_NORMAL
- en: Now, you have a fresh installation of k3OS that is ready to use.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you are going to learn how to do more advanced configurations
    using the same steps of creating a VM for k3OS, so let's move on to the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced installations of k3OS using config files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we are ready to learn how to use config files to install k3OS; for this,
    you need a public GitHub repository where you can push these files. Before creating
    a `config.yaml` file to install k3OS, let's understand the different sections
    of this file. You are going to need a file for your master node and one for your
    agent node.
  prefs: []
  type: TYPE_NORMAL
- en: k3OS config file sections
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s begin with an explanation of the sections to configure the host. These
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Hostname section**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here is where you set the hostname – in this case, `master`.
  prefs: []
  type: TYPE_NORMAL
- en: '**SSH section**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This section is used to set the default SSH public key that can access the node
    using SSH. You have to replace `YOUR_KEY` with your own public key.
  prefs: []
  type: TYPE_NORMAL
- en: '**Write files section**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This section defines your network configuration. In this case, we have connected
    our Raspberry Pi to an ethernet connection with the internet. The IP of this node
    is set to `192.168.0.11`, the mask to `255.255.255.0`, and the gateway to `192.168.0.1`,
    and this connection is going to use the `8.8.8.8` nameserver. Remember that you
    can customize these values as per your internet provider.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s explore the sections to configure K3s. These are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**k3OS DNS nameservers section**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This section sets the default DNS for the pods in the cluster; in this case,
    it is set to `8.8.8.8` and `1.1.1.1`.
  prefs: []
  type: TYPE_NORMAL
- en: '**NTP servers section**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This section sets the NTP servers to synchronize the time; in this case, it
    is set to `0.us.pool.ntp.org` and `1.us.pool.ntp.org`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Password section**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here is where you set the password to access the host with k3OS.
  prefs: []
  type: TYPE_NORMAL
- en: '**Labels section**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This section configures the labels of the node; this is equivalent to using
    the `kubectl labels` command.
  prefs: []
  type: TYPE_NORMAL
- en: We have explained the common sections for the master and agent nodes. Now, let's
    continue with the sections that are different for the master and agent nodes.
  prefs: []
  type: TYPE_NORMAL
- en: Configurations for master and agent nodes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section describes the specific sections that you have to use to configure
    a master or agent node. Let''s get started with the master node:'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is an example of a specific configuration for a master node:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This k3OS configuration sets the master node, including the token that will
    be used to add new agent nodes, the password for the node, and parameters to send
    to the server binary. In this case, only modify the installation to execute `kubectl`
    without using `sudo`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is an example of a specific configuration for an agent node:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This k3OS configuration sets an agent node to connect to the master node defined
    in `server_url`, using the token defined to be added to the cluster, and uses
    the defined password to access the node.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: 'For more options or arguments, you can check the next link: [https://rancher.com/docs/k3s](https://rancher.com/docs/k3s).'
  prefs: []
  type: TYPE_NORMAL
- en: We have explained all the basic sections to create your cluster using config
    files. In the next section, we are going to create basic configuration files to
    create a multi-node cluster. So, let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Multi-node cluster creation using config files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now is time to configure your cluster using config files, so let''s put all
    the pieces together; the file for a master node will look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The configuration file for an agent node will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have the basic configuration files for master and agent nodes, it
    is time to use these files to deploy your multi-node cluster, as discussed in
    the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a multi-node K3s cluster using config files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before you start creating the multi-node cluster, you must be equipped with
    the following requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: 1 VM for the master node.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 VM for the agent node.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Your `master_example.yaml` master config file uploaded to a cloud storage service,
    such as Amazon S3, Google Cloud Storage, or similar. For example, if you use Google
    Storage, the URL for your file will be like this: [https://storage.googleapis.com/k3s/master_example.yaml](https://storage.googleapis.com/k3s/master_example.yaml).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Your `agent_example.yaml` agent config file uploaded to a cloud storage service,
    such as Amazon S3, Google Cloud Storage, or similar. For example, if you use Google
    Storage, the URL for your file will be like this: [https://storage.googleapis.com/k3s/agent_example.yaml](https://storage.googleapis.com/k3s/agent_example.yaml).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: The VM for the master and agent nodes must be configured to boot using the k3OS
    ISO image; in the next section, we will explain how to run the installation for
    master and agent nodes.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we are ready to create our K3s cluster using config files. The next section
    explains how to use the k3OS ISO image to install a multi-node cluster. So, let's
    get started.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a master node with config files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create a master node, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Load your VM and then log in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in to the VM with the `rancher` username and password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command to start the k3OS installation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Follow the installation script using the following options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Remember to boot from the disk the next time to load your k3OS installation,
    following the last steps of the *k3OS installation for x86_64 devices using an
    ISO image* section. Now, let's move on to agent node creation.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an agent node with config files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now, follow the next steps to create an agent node:'
  prefs: []
  type: TYPE_NORMAL
- en: Load your VM and then log in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in to the VM with the `rancher` username and password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command to start the k3OS installation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Follow the installation script using the following options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Remember to boot from the disk as you did with your master node. Now that your
    cluster is ready to be used, try to run `kubectl get nodes`. To verify whether
    your node was added, the output of the command should display the node name and
    the `Ready` status.
  prefs: []
  type: TYPE_NORMAL
- en: You have installed a multi-node cluster with master and agent nodes using VMs.
    Now it's time to install a multi-node cluster using ARM devices; in the next section,
    we are going to explore this kind of setup.
  prefs: []
  type: TYPE_NORMAL
- en: Multi-node ARM overlay installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An overlay installation replaces some parts of your current OS installation
    or some parts of your system. In this case, when you use the `/sbin/init` file.
    Then, when you reboot your ARM device, the user space will be initialized and
    k3OS will be loaded. This kind of installation is supported for ARMv7 and ARM64
    devices. One important thing is that you can customize this installation using
    the config YAML files, which must be stored on `/k3os/system/config.yaml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before performing this overlay installation, you need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: An ARMv7 or ARM64 device, such as a Raspberry PI with **Ubuntu 20.04 LTS** installed
    (you can use **Raspberry PI Imager** or **balenaEtcher**; check [*Chapter 3*](B16945_03_Final_PG.xhtml#_idTextAnchor056),
    *K3s Advanced Configurations and Management*, for reference)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A network device connection with access to the internet and **Dynamic Host Configuration
    Protocol** (**DHCP**) to auto-assign an IP to your device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An HDMI port connected to your monitor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A keyboard connected
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Raspberry Pi Imager installed on your Macintosh or PC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this case, we are going to use a Raspberry Pi 4B with 8 GB of RAM and a 64
    GB Micro SD card for the master node, and 4 GB of RAM and a 32 GB Micro SD card
    for storage for the agent node. So, let's get started with the overlay installation
    for the master node first.
  prefs: []
  type: TYPE_NORMAL
- en: Master node overlay installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to install the master node overlay:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install Ubuntu 20.04 LTS with ARM64 by navigating to **Operating System** |
    **Other general purpose OS** | **Ubuntu** | **Ubuntu 20.04.2 LTS (RPi 3/4/400)**.
    Insert your Micro SD card and choose it in **Storage**; then click on **WRITE**,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.20 – Ubuntu server installation using Raspberry Pi Imager'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_Figure_4.20.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.20 – Ubuntu server installation using Raspberry Pi Imager
  prefs: []
  type: TYPE_NORMAL
- en: 'This is going to ask for your credentials to start the installation; when the
    process finishes, it will show the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.21 – Write Successful dialog'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_Figure_4.21.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.21 – Write Successful dialog
  prefs: []
  type: TYPE_NORMAL
- en: Now, extract your MicroSD card and insert it into your SD slot in your Raspberry
    Pi.
  prefs: []
  type: TYPE_NORMAL
- en: Turn on your Raspberry Pi.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in to your ARM device. The default user/password for Ubuntu is `ubuntu`;
    the system will ask you to set a new password. Set your desired password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install the `net-tools` package to see which IP has your ARM device with the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check for your IP with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Log in to your device using SSH, the `ubuntu` username, and the password that
    you set when logging in to your Ubuntu device for the first time. `DEVICE_IP`
    is the IP that `ifconfig` returned. Run this on your laptop to log in:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `cgroup_memory=1 cgroup_enable=memory` options to your kernel parameters
    in the `/boot/firmware/cmdline.txt` file with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Alternatively, you can use any editor to add this text at the end of the `cmdline.txt`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following commands to install k3OS; this will unpack the `tar.gz` file
    into the `/ folder`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you want to configure a master node, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download or copy a config into your local directory; let''s use our previous
    master configuration using `wget`, plus the URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Copy the configuration to /`k3os/system/config` using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can customize these files as you need; remember that this example uses an
    SSH key that you can use to log in to your node remotely.
  prefs: []
  type: TYPE_NORMAL
- en: '(*Optional*) If you want to configure an **agent node**, follow the next steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download or copy a config in your local directory, let''s use our previous
    master configuration using `wget` plus the URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Copy the configuration to `/k3os/system/config` using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can customize these files as you need; remember that this example uses an
    SSH key that you can use to log in to your node remotely.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sync the filesystem for each node with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reboot the system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Log in to your device:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Remember that this configuration has set a static IP for your node.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are logged in to the master node, you can run the following command
    to check whether all the nodes were detected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, your K3s cluster has been installed and is ready to be used. You now know
    how to configure the cluster using the overlay installation, which is quicker
    compared to the execution of the default K3s script found on the K3s official
    website.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to install K3s using the k3OS, a production-ready
    Linux distribution, covering how to prepare your VMs in case that you want to
    create a cluster for x86_64 architectures. Then, we moved on to explain how configuration
    files are used to perform advanced and custom cluster installations, and how you
    can configure them to create a multi-node cluster using the ISO image or the overlay
    installation. Finally, we covered how to create a multi-node cluster using the
    overlay installation, to reduce the manual configurations to install K3s using
    the k3OS potential. Now, we are close to starting use cases and real configuration
    in the coming chapters. In the next chapter, we are going to create a production-ready
    cluster using all the things that we learned in the previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are a few questions to validate your new knowledge:'
  prefs: []
  type: TYPE_NORMAL
- en: What kind of k3OS installations are available if you are using x86 or x86_64
    devices?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you install k3OS using an ISO image?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What kind of k3OS installations are available if you are using ARMv7 or ARM64
    devices?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you install k3OS using overlay installation?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can I use configuration files to customize my cluster installations?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can I send parameters to my master or agent node using the k3OS arguments
    section?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can I create a multi-node cluster using the k3OS ISO image or the overlay
    installation?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Where can I find more information about available parameters for K3s?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the other types of installations available for k3OS?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can refer to the following references for more information on the topics
    covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Official k3OS documentation: [https://github.com/rancher/k3os](https://github.com/rancher/k3os)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Available releases for k3OS: [https://github.com/rancher/k3os/releases](https://github.com/rancher/k3os/releases)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'K3s installation options to add custom parameters to your config files: [https://rancher.com/docs/k3s/latest/en/installation/install-options](https://rancher.com/docs/k3s/latest/en/installation/install-options)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'k3OS image generator: [https://github.com/sgielen/picl-k3OS-image-generator](https://github.com/sgielen/picl-k3OS-image-generator)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Installing k3s with Alpine Linux on Raspberry Pi 3B+*: [https://blog.jiayihu.net/install-k3s-with-alpine-linux-on-raspberry-pi-3b](https://blog.jiayihu.net/install-k3s-with-alpine-linux-on-raspberry-pi-3b)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'k3OS configuration file examples: [https://www.chriswoolum.dev/k3s-cluster-on-raspberry-pi](https://www.chriswoolum.dev/k3s-cluster-on-raspberry-pi)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*How to launch ARM aarch64 VM with QEMU from scratch*: [https://futurewei-cloud.github.io/ARM-Datacenter/qemu/how-to-launch-aarch64-vm](https://futurewei-cloud.github.io/ARM-Datacenter/qemu/how-to-launch-aarch64-vm)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'k3sup for K3s cluster creation: [https://blog.alexellis.io/test-drive-k3s-on-raspberry-pi](https://blog.alexellis.io/test-drive-k3s-on-raspberry-pi)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL

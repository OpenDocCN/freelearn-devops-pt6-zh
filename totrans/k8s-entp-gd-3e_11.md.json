["```\n{\n  \"uid\": \"705ab4f5-6393-11e8-b7cc-42010a800002\"\n  \"allowed\": true\n} \n```", "```\npublic boolean validRegistries(List<Container> containers,List<String> allowedRegistries) {\n  for (Container c : containers) {\n          boolean imagesFromApprovedRegistries = false;\n    for (String allowedRegistry : allowedRegistries) {\n                 imagesFromApprovedRegistries =\n                 imagesFromApprovedRegistries  || c.getImage().startsWith(allowedRegistry);\n    }\n    if (! imagesFromApprovedRegistries) {\n    return false;\n    }\n   }\n   return true;\n} \n```", "```\ninvalidRegistry {\n  ok_images = [image | startswith(input_images[j],input.parameters.registries[_]) ; image = input_images[j] ]\n  count(ok_images) != count(input_images)\n} \n```", "```\n$ cd chapter2\n$ ./create-cluster.sh \n```", "```\n$ kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper/master/deploy/gatekeeper.yaml \n```", "```\n//assume failure\nboolean allowed = false;\n//on certain conditions allow access\nif (someCondition) {\n  allowed = true;\n}\n//are we authorized?\nif (allowed) {\n  doSomething();\n} \n```", "```\nnot startsWith(image,\"myregistry.lan/\")\nmsg := sprintf(\"image '%v' comes from untrusted registry\", [image]) \n```", "```\nif (! image.startsWith(\"myregistry.lan/\")) {\n   throw new Exception(\"image \" + image + \" comes from untrusted registry\");\n} \n```", "```\npackage k8sallowedregistries\ninvalidRegistry {\n  input_images[image]\n  not startswith(image, \"quay.io/\")\n}\ninput_images[image] {\n  image := input.review.object.spec.containers[_].image\n}\ninput_images[image] {\n  image := input.review.object.spec.template.spec.containers[_].image\n} \n```", "```\nviolation[{\"msg\": msg, \"details\": {}}] {\n  invalidRegistry\n  msg := \"Invalid registry\"\n} \n```", "```\npackage k8sallowedregistries\ntest_deployment_registry_allowed {\n    not invalidRegistry with input as {\"apiVersion\"...\n}\ntest_deployment_registry_not_allowed {\n    invalidRegistry with input as {\"apiVersion\"...\n}\ntest_pod_registry_allowed {\n    not invalidRegistry with input as {\"apiVersion\"...\n}\ntest_pod_registry_not_allowed {\n    invalidRegistry with input as {\"apiVersion\"...\n}\ntest_cronjob_registry_allowed {\n    not invalidRegistry with input as {\"apiVersion\"...\n}\ntest_cronjob_registry_not_allowed {\n    invalidRegistry with input as {\"apiVersion\"...\n}\ntest_error_message_not_allowed {\n    control := {\"msg\":\"Invalid registry\",\"details\":{}}\n    result = violation with input as {\"apiVersion\":\"admissi…\n    result[_] == control\n}\ntest_error_message_allowed {\n    result = violation with input as {\"apiVersion\":\"admissi…\n    result == set()\n} \n```", "```\n$ opa test .\ndata.kubernetes.admission.test_cronjob_registry_not_allowed: FAIL (248ns)\n--------------------------------------------------------------\nPASS: 7/8\nFAIL: 1/8 \n```", "```\ninput_images[image] {\n  image := input.review.object.spec.jobTemplate.spec.template.spec.containers[_].image\n} \n```", "```\n$ opa test .\nPASS: 8/8 \n```", "```\napiVersion: templates.gatekeeper.sh/v1beta1\nkind: ConstraintTemplate\nmetadata:\n  name: k8sallowedregistries\nspec:\n  crd:\n    spec:\n      names:\n        kind: K8sAllowedRegistries\n      validation: {}\n  targets:\n    - target: admission.k8s.gatekeeper.sh\n      rego: |\n        package k8sallowedregistries\n        .\n        .\n        . \n```", "```\napiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sAllowedRegistries\nmetadata:\n  name: restrict-openunison-registries\nspec:\n  match:\n    kinds:\n      - apiGroups: [\"\"]\n        kinds: [\"Pod\"]\n      - apiGroups: [\"apps\"]\n        kinds:\n        - StatefulSet\n        - Deployment\n      - apiGroups: [\"batch\"]\n        kinds:\n        - CronJob\n    namespaces: [\"testpolicy\"] \n```", "```\n$ chapter11/simple-opa-policy/yaml\n**$ kubectl create ns testpolicy**\n**$ kubectl create deployment nginx-prepolicy --image=docker.io/nginx/nginx-ingress -n testpolicy**\n**$ kubectl create -f ./gatekeeper-policy.yaml**\n**$ kubectl create deployment nginx-withpolicy --image=docker.io/nginx/nginx-ingress -n testpolicy**\nerror: failed to create deployment: admission webhook \"validation.gatekeeper.sh\" denied the request: [restrict-openunison-registries] Invalid registry \n```", "```\n$ kubectl get k8sallowedregistries.constraints.gatekeeper.sh restrict-openunison-registries -o json | jq -r '.status.violations'\n[\n  {\n    \"enforcementAction\": \"deny\",\n    \"group\": \"\",\n    \"kind\": \"Pod\",\n    \"message\": \"Invalid registry\",\n    \"name\": \"nginx-prepolicy-8bd5cbfc9-szzs4\",\n    \"namespace\": \"testpolicy\",\n    \"version\": \"v1\"\n  },\n  {\n    \"enforcementAction\": \"deny\",\n    \"group\": \"apps\",\n    \"kind\": \"Deployment\",\n    \"message\": \"Invalid registry\",\n    \"name\": \"nginx-prepolicy\",\n    \"namespace\": \"testpolicy\",\n    \"version\": \"v1\"\n  }\n] \n```", "```\ninvalidRegistry {\n  ok_images = [image | startswith(input_images[i],input.parameters.registries[_]) ; image = input_images[i] ]\n  count(ok_images) != count(input_images)\n} \n```", "```\nArrayList<String> okImages = new ArrayList<String>();\nfor (int i=0;i<inputImages.length;i++) {\n  for (int j=0;j<registries.length;j++) {\n    if (inputImages[i].startsWith(registries[j])) {\n      okImages.add(inputImages[i]);\n    }\n  }\n} \n```", "```\n$ kubectl delete -f ./gatekeeper-policy.yaml k8sallowedregistries.constraints.gatekeeper.sh \"restrict-openunison-registries\" deleted\n$ kubectl delete -f ./gatekeeper-policy-template.yaml constrainttemplate.templates.gatekeeper.sh \"k8sallowedregistries\" deleted \n```", "```\napiVersion: templates.gatekeeper.sh/v1beta1\nkind: ConstraintTemplate\nmetadata:\n  name: k8sallowedregistries\nspec:\n  crd:\n    spec:\n      names:\n        kind: K8sAllowedRegistries\n      validation:\n        openAPIV3Schema:\n          properties:\n            registries:\n              type: array\n              items: string\n  targets:\n    - target: admission.k8s.gatekeeper.sh\n      rego: |\n        package k8sallowedregistries\n        .\n        .\n        . \n```", "```\n$ cd chapter11/parameter-opa-policy/yaml/\n$ kubectl create -f gatekeeper-policy-template.yaml \n```", "```\napiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sAllowedRegistries\nmetadata:\n  name: restrict-openunison-registries\nspec:\n  match:\n    kinds:\n      - apiGroups: [\"\"]\n        kinds: [\"Pod\"]\n      - apiGroups: [\"apps\"]\n        kinds:\n        - StatefulSet\n        - Deployment\n      - apiGroups: [\"batch\"]\n        kinds:\n        - CronJob\n    namespaces: [\"testpolicy\"]\n  parameters:\n    registries: [\"docker.io/nginx/\"] \n```", "```\n$ kubectl create -f ./gatekeeper-policy.yaml\n$ kubectl run  tmp-shell --rm -i --tty --image docker.io/busybox -n testpolicy -- /bin/bash\nError from server (Forbidden): admission webhook \"validation.gatekeeper.sh\" denied the request: [restrict-openunison-registries] Invalid registry\n$ kubectl create deployment nginx-withpolicy --image=docker.io/nginx/nginx-ingress -n testpolicy\ndeployment.apps/nginx-withpolicy created \n```", "```\ninvalidRegistry {\n  trace(sprintf(\"input_images : %v\",[input_images]))\n  ok_images = [image |  \n    trace(sprintf(\"image %v\",[input_images[j]]))\n    startswith(input_images[j],input.parameters.registries[_]) ;\n    image = input_images[j]\n  ]\n  trace(sprintf(\"ok_images %v\",[ok_images]))\n  trace(sprintf(\"ok_images size %v / input_images size %v\",[count(ok_images),count(input_images)]))\n  count(ok_images) != count(input_images)\n} \n```", "```\nif (! hasIngressAllowedLabel(input.review.object.metdata.namespace)) {\n  generate error;\n} \n```", "```\napiVersion: config.gatekeeper.sh/v1alpha1\nkind: Config\nmetadata:\n  name: config\n  namespace: \"gatekeeper-system\"\nspec:\n  sync:\n    syncOnly:\n      - group: \"\"\n        version: \"v1\"\n        kind: \"Namespace\" \n```", "```\n$ cd chapter11/enforce-ingress/yaml/\n$ kubectl create -f ./config.yaml \n```", "```\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: ns-with-ingress\n  labels:\n    allowingress: \"true\"\nspec: {}\n---\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: ns-without-ingress\nspec: {} \n```", "```\n{\n \"cluster\": {\n    \"v1\": {\n        \"Namespace\": {\n                \"ns-with-ingress\": {\n                    \"metadata\": {\n                        \"labels\": {\n                             \"allowingress\": \"true\"\n                        }\n                    }\n                },\n                \"ns-without-ingress\": {\n                    \"metadata\": {\n                    }}}}}} \n```", "```\npackage k8senforceingress\nviolation[{\"msg\":msg,\"details\":{}}] {\n    missingIngressLabel\n    msg := \"Missing label allowingress: \\\"true\\\"\"\n}\nmissingIngressLabel {\ndata.inventory.cluster[\"v1\"].Namespace[input.review.object.metadata.namespace].metadata.labels[\"allowingress\"] != \"true\"\n}\nmissingIngressLabel {\n    not data.inventory.cluster[\"v1\"].Namespace[input.review.object.metadata.namespace].metadata.labels[\"allowingress\"]\n} \n```", "```\n$ kubectl create ingress test --rule=\"foo.com/bar=svc1:8080,tls=my-cert\" -n ns-without-ingress\nerror: failed to create ingress: admission webhook \"validation.gatekeeper.sh\" denied the request: [require-ingress-label] Missing label allowingress: \"true\" \n```", "```\n$ kubectl create ingress test --rule=\"foo.com/bar=svc1:8080,tls=my-cert\" -n ns-with-ingress\ningress.networking.k8s.io/test created \n```", "```\n$ kubectl create ns test-mutations\n$ kubectl create deployment test-nginx --image=ghcr.io/openunison/openunison-k8s-html:latest -n test-mutations \n```", "```\napiVersion: mutations.gatekeeper.sh/v1\nkind: Assign\nmetadata:\n  name: default-user\nspec:\n  applyTo:\n  - groups: [\"\"]\n    kinds: [\"Pod\"]\n    versions: [\"v1\"]\n  match:\n    scope: Namespaced\n    excludedNamespaces:\n    - kube-system\n  location: \"spec.securityContext.runAsUser\"\n  parameters:\n    assign:\n      value:  70391\n    pathTests:\n      - subPath: \"spec.securityContext.runAsUser\"\n        condition: MustNotExist \n```", "```\n$ kubectl get pods -l app=test-nginx -o jsonpath='{.items[0].spec.securityContext}' -n test-mutations\n{} \n```", "```\n$ kubectl delete pods -l app=test-nginx -n test-mutations\npod \" test-nginx-f6c8578fc-qkd5h\" deleted\n$ kubectl get pods -l app=test-nginx -o jsonpath='{.items[0].spec.securityContext}' -n test-mutations\n{\"runAsUser\":70391} \n```", "```\n$ kubectl patch deployment test-nginx --patch '{\"spec\":{\"template\":{\"spec\":{\"securityContext\":{\"runAsUser\":19307}}}}}' -n test-mutations\ndeployment.apps/test-nginx patched\n$ kubectl get pods -l app=test-nginx -o jsonpath='{.items[0].spec.securityContext}' -n test-mutations\n{\"runAsUser\":19307} \n```", "```\nlocation: \"spec.containers[image:*].securityContext.privileged\" \n```", "```\n$ kubectl get pods -l app=test-nginx -o jsonpath='{.items[0].spec.containers[0].securityContext}' -n test-mutations\n$ kubectl delete pods -l app=test-nginx -n test-mutations\npod \" test-nginx-ccf9bfcd-wt97v\" deleted\n$ kubectl get pods -l app=test-nginx -o jsonpath='{.items[0].spec.containers[0].securityContext}' -n test-mutations\n{\"privileged\":false} \n```", "```\napiVersion: admissionregistration.k8s.io/v1beta1\nkind: ValidatingAdmissionPolicy\nmetadata:\n  name: \"vap-ingress\"\nspec:\n  failurePolicy: Fail\n  matchConstraints:\n    resourceRules:\n    - apiGroups:   [\"networking.k8s.io\"]\n      apiVersions: [\"v1\"]\n      operations:  [\"CREATE\", \"UPDATE\"]\n      resources:   [\"ingresses\"]\n  validations:\n    - expression: |-\n        namespaceObject.metadata.labels.allowingress == \"true\" \n```", "```\napiVersion: admissionregistration.k8s.io/v1beta1\nkind: ValidatingAdmissionPolicyBinding\nmetadata:\n  name: \"vap-binding-ingress\"\nspec:\n  policyName: \"vap-ingress\"\n  validationActions: [Deny] \n```", "```\n$ kubectl create ingress test --rule=\"foo.com/bar=svc1:8080,tls=my-cert\" -n ns-without-ingress\nerror: failed to create ingress: ingresses.networking.k8s.io \"test\" is forbidden: ValidatingAdmissionPolicy 'vap-ingress' with binding 'vap-binding-ingress' denied request: expression 'namespaceObject.metadata.labels.allowingress == \"true\"' resulted in error: no such key: allowingress\n$ kubectl create ingress test --rule=\"foo.com/bar=svc1:8080,tls=my-cert\" -n ns-with-ingress\ningress.networking.k8s.io/test created \n```"]
- en: '16'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '16'
- en: Governing Kubernetes
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes治理
- en: In the previous chapter, we discussed at length different ways to extend Kubernetes,
    including validating and mutating requests during the admission control phase.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们详细讨论了扩展Kubernetes的不同方式，包括在接纳控制阶段验证和变更请求。
- en: In this chapter, we will learn about the growing role of Kubernetes in large
    enterprise organizations, what governance is, and how it is applied in Kubernetes.
    We will look at policy engines, review some popular ones, and then dive deep into
    Kyverno.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将学习Kubernetes在大型企业组织中日益增长的作用，什么是治理，以及它在Kubernetes中的应用。我们将探讨策略引擎，回顾一些流行的引擎，并深入了解Kyverno。
- en: This ties in nicely with the previous chapter because policy engines are built
    on top of the Kubernetes admission control mechanism.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这与上一章的内容相得益彰，因为策略引擎是建立在Kubernetes接纳控制机制之上的。
- en: More and more enterprise organizations put more and more of their proverbial
    eggs in the Kubernetes basket. These large organizations have severe security,
    compliance, and governance needs. Kubernetes policy engines are here to address
    these concerns and make sure that enterprise organizations can fully embrace Kubernetes.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 越来越多的企业组织将更多的资源投入到Kubernetes平台。这些大型组织有着严格的安全性、合规性和治理需求。Kubernetes的策略引擎应运而生，旨在解决这些问题，并确保企业组织能够完全拥抱Kubernetes。
- en: 'Here are the topics we will cover:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: Kubernetes in the enterprise
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes在企业中的应用
- en: What is Kubernetes governance?
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是Kubernetes治理？
- en: Policy engines
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 策略引擎
- en: A Kyverno deep dive
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深入了解Kyverno
- en: Let’s jump right in and understand the growing role and importance of Kubernetes
    in the enterprise.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们直接进入并了解Kubernetes在企业中的日益重要性。
- en: Kubernetes in the enterprise
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes在企业中的应用
- en: 'The journey and adoption rate of the Kubernetes platform are unprecedented.
    It launched officially in 2016, and in a few years it has conquered the world
    of infrastructure. 96% of organizations that participated in the most recent CNCF
    survey are using or evaluating Kubernetes. The penetration of Kubernetes is across
    multiple dimensions: organization size, geographical location, and production
    and no-production environments. What is even more impressive is that Kubernetes
    can go under the hood and become the foundation that other technologies and platforms
    are built on.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes平台的推广和采用率是前所未有的。它于2016年正式推出，仅仅几年时间，它已经征服了基础设施的世界。在最近的CNCF调查中，96%的参与组织正在使用或评估Kubernetes。Kubernetes的渗透率跨越了多个维度：组织规模、地理位置，以及生产环境和非生产环境。更令人印象深刻的是，Kubernetes可以深入底层，成为其他技术和平台的基础。
- en: 'You can see this in its widespread adoption by all the cloud providers that
    offer various flavors of managed Kubernetes, as well as with the hosted platform-as-a-service
    offerings from many vendors. Check out the CNCF-certified Kubernetes software
    conformance list: [https://www.cncf.io/certification/software-conformance](https://www.cncf.io/certification/software-conformance).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从所有云服务提供商广泛采用Kubernetes平台中看到这一点，许多提供商也推出了各种托管Kubernetes平台即服务的产品。请查看CNCF认证的Kubernetes软件合规性列表：[https://www.cncf.io/certification/software-conformance](https://www.cncf.io/certification/software-conformance)。
- en: Having a variety of certified vendors and value-added resellers, an ecosystem
    of multiple companies, etc. is extremely important for enterprise organizations.
    Enterprise organizations need much more than the latest shiny technology. The
    stakes are high, the failure rate of large infrastructure projects is high, and
    the consequences of failure are harsh. Combine all these factors, and the result
    is that enterprise organizations are very change-resistent and risk-averse when
    it comes to their technology. A lot of critical software systems in diverse fields
    like traffic control, insurance, healthcare, communication systems, and airlines
    are still running on software that was written 40–50 years ago, using languages
    like COBOL and Fortran.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有多个认证供应商、增值经销商、多个公司的生态系统等，对于企业组织来说极为重要。企业组织不仅仅需要最新的闪亮技术。风险很高，大型基础设施项目的失败率也很高，失败的后果十分严峻。将这些因素结合起来，结果是企业组织在技术方面非常抗拒变革，且回避风险。许多在交通控制、保险、医疗、通信系统和航空等领域的关键软件系统，依然运行在40至50年前编写的软件上，使用的是COBOL和Fortran等语言。
- en: Requirements of enterprise software
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 企业软件的需求
- en: 'Let’s look at some requirements of enterprise software:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下企业软件的一些需求：
- en: Handling large amounts of data
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理大量数据
- en: Integrating with other systems and applications
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与其他系统和应用集成
- en: Providing robust security features
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供强大的安全功能
- en: Being scalable and available
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可扩展性和可用性
- en: Being flexible and customizable
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 灵活且可定制
- en: Being compliant
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合规性
- en: Having support from trusted vendors
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获得受信任供应商的支持
- en: Having strong governance (much more on that later)
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拥有强大的治理（稍后将详细讨论）
- en: How does Kubernetes fit the bill?
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes如何符合要求？
- en: Kubernetes and enterprise software
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubernetes与企业软件
- en: The reason Kubernetes usage has grown so much in the enterprise software area
    is that it actually ticks all the boxes and keeps improving.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes在企业软件领域的使用增长如此迅猛，原因在于它实际上满足了所有需求并不断改进。
- en: As the de facto standard for container orchestration platforms, it can serve
    as the foundation for all container-based deployment. Its ecosystem satisfies
    any integration needs, as every vendor must be able to run on Kubernetes. The
    long-term prospects for Kubernetes are extremely high, as it is a true team effort
    from many companies and organizations, and it is steered by an open and successful
    process that keeps delivering. Kubernetes spearheads the shift toward multi-cloud
    and hybrid-cloud deployments following industry-wide standards
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 作为容器编排平台的事实标准，它可以作为所有基于容器的部署的基础。它的生态系统满足任何集成需求，因为每个供应商都必须能够在Kubernetes上运行。Kubernetes的长期前景极为广阔，因为它是众多公司和组织的集体努力，并且由一个开放且成功的过程推动，不断地交付成果。Kubernetes引领着向多云和混合云部署的转变，遵循行业广泛的标准。
- en: The extensibility and flexibility of Kubernetes mean it can cater to any type
    of customization a particular enterprise will need.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes的扩展性和灵活性意味着它可以满足特定企业所需的任何定制需求。
- en: It is truly a remarkable project that is designed on solid conceptual architecture
    and is able to deliver results consistently in the real world.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 它真的是一个了不起的项目，设计上基于坚实的概念架构，能够在现实世界中始终如一地交付结果。
- en: At this point it’s clear that Kubernetes is great for enterprise organizations,
    but how does it address the need for governance?
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，Kubernetes对于企业组织来说显然是非常合适的，但它如何满足治理的需求呢？
- en: What is Kubernetes governance?
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是Kubernetes治理？
- en: 'Governance is one of the important requirements for enterprise organizations.
    In a nutshell, it means controlling the way an organization operates. Some elements
    of governance are:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 治理是企业组织的重要需求之一。简而言之，它意味着控制组织的运作方式。治理的某些要素包括：
- en: Policies
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 政策
- en: Ethics
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 伦理
- en: Processes
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进程
- en: Risk management
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 风险管理
- en: Administration
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理
- en: Governance includes a way to specify policies and mechanisms to enforce the
    policies, as well as reporting and auditing. Let’s look at various areas and practices
    of governance in Kubernetes.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 治理包括一种指定政策和机制以执行这些政策的方式，以及报告和审计。让我们来看看Kubernetes中治理的各个领域和实践。
- en: Image management
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 镜像管理
- en: 'Containers run software baked into images. Managing these images is a critical
    activity in operating a Kubernetes-based system. There are several dimensions
    to consider: how do you bake your images? How do you vet third-party images? Where
    do you store your images? Making poor choices here can impact the performance
    of your system (for example, if you use large bloated base images) and crucially
    the security of your system (for example, if you use compromised or vulnerable
    base images). Image management policies can force image scanning or ensure that
    you can only use vetted images from specific image registries.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 容器运行的是嵌入在镜像中的软件。管理这些镜像是运行基于Kubernetes的系统中的一项关键活动。有几个方面需要考虑：如何构建镜像？如何审核第三方镜像？镜像存储在哪里？在这些决策上做出不当选择可能会影响系统的性能（例如，如果你使用了过大或臃肿的基础镜像），并且至关重要的是影响系统的安全性（例如，如果你使用了被破坏或存在漏洞的基础镜像）。镜像管理政策可以强制进行镜像扫描，或者确保你只能使用来自特定镜像注册表的经过审查的镜像。
- en: Pod security
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pod安全
- en: The unit of work of Kubernetes is the pod. There are many security settings
    you can set for a pod and its containers. The default security settings are unfortunately
    very lax. Validating and enforcing pod security policies can remediate this. Kubernetes
    has strong support and guidance for pod security standards as well as several
    built-in profiles. Each pod has a security context as we discussed in *Chapter
    4*, *Securing Kubernetes*.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes的工作单元是pod。你可以为pod及其容器设置许多安全设置。不幸的是，默认的安全设置非常宽松。验证并强制执行pod安全策略可以解决这个问题。Kubernetes对pod安全标准有强有力的支持和指导，并且提供了多个内置的安全配置文件。每个pod都有一个安全上下文，正如我们在*第4章*《*确保Kubernetes安全*》中讨论的那样。
- en: See [https://kubernetes.io/docs/concepts/security/pod-security-standards/](https://kubernetes.io/docs/concepts/security/pod-security-standards/)
    for more details.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅 [https://kubernetes.io/docs/concepts/security/pod-security-standards/](https://kubernetes.io/docs/concepts/security/pod-security-standards/)
    获取更多详细信息。
- en: Network policy
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络策略
- en: Kubernetes network policies control traffic flow between pods and other network
    entities at layers 3 and 4 of the OSI network model (IP addresses and ports).
    The network entities may be pods that have a specific set of labels or all pods
    in a namespace with a specific set of labels. Finally, a network policy can also
    block pod access to/from a specific IP block.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 网络策略在 OSI 网络模型的第 3 层和第 4 层（IP 地址和端口）之间控制 pod 和其他网络实体之间的流量。网络实体可以是具有特定标签集的
    pod，也可以是某个命名空间中所有具有特定标签集的 pod。最后，网络策略还可以阻止 pod 访问特定的 IP 块。
- en: In the context of governance, network policies can be used to enforce compliance
    with security and regulatory requirements by controlling network access and communication
    between pods and other resources.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在治理的背景下，网络策略可以通过控制 pod 与其他资源之间的网络访问和通信来强制执行安全性和合规性要求。
- en: For example, network policies can be used to prevent pods from communicating
    with certain external networks. Network policies can also be used to enforce the
    separation of duties and prevent unauthorized access to sensitive resources within
    a cluster.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，网络策略可以用来防止 pod 与某些外部网络进行通信。网络策略还可以用来强制执行职能分离，并防止未经授权的访问集群中的敏感资源。
- en: See [https://kubernetes.io/docs/concepts/services-networking/network-policies/](https://kubernetes.io/docs/concepts/services-networking/network-policies/)
    for more details.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅 [https://kubernetes.io/docs/concepts/services-networking/network-policies/](https://kubernetes.io/docs/concepts/services-networking/network-policies/)
    获取更多详细信息。
- en: Configuration constraints
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置约束
- en: Kubernetes is very flexible and provides a lot of controls for many aspects
    of its operation. The DevOps practices often used in a Kubernetes-based system
    allow teams a lot of control over how their workloads are deployed, how they scale,
    and what resources they use. Kubernetes provides configuration constraints like
    quotas and limits. With more advanced admission controllers you can validate and
    enforce policies that control any aspect of resource creation, such as the maximum
    size of an auto-scaling deployment, the total amount of persistent volume claims,
    and requiring that memory requests always equal memory limits (not necessarily
    a good idea).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 非常灵活，提供了许多控制选项，涵盖其操作的各个方面。在基于 Kubernetes 的系统中，DevOps 实践通常允许团队对工作负载的部署方式、扩展方式以及使用的资源拥有大量控制权。Kubernetes
    提供了诸如配额和限制之类的配置约束。借助更先进的准入控制器，你可以验证并强制执行控制资源创建任何方面的策略，例如自动扩展部署的最大大小、持久卷声明的总量，并要求内存请求始终等于内存限制（虽然这不一定是个好主意）。
- en: RBAC and admission control
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RBAC 和准入控制
- en: Kubernetes **RBAC** (**Role-Based Access Control**) operates at the resource
    and verb level. Every Kubernetes resource has operations (verbs) that can be performed
    against it. With RBAC you define roles that are sets of permissions over resources,
    which you can apply at the namespace level or cluster level. It is a bit of a
    coarse-grained tool, but it is very convenient, especially if you segregate your
    resources at the namespace level and use cluster-level permissions only to manage
    workloads that operate across the entire cluster.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes **RBAC**（**基于角色的访问控制**）在资源和操作级别运行。每个 Kubernetes 资源都有可执行的操作（动词）。使用
    RBAC，你可以定义角色，这些角色是对资源的权限集合，可以在命名空间级别或集群级别应用。它是一个粗粒度的工具，但非常方便，特别是当你在命名空间级别划分资源，并仅使用集群级别权限来管理跨整个集群运行的工作负载时。
- en: If you need something more granular that depends on specific attributes of resources,
    then admission controllers can handle it. We will explore this option later in
    the chapter when discussing policy engines.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要更细粒度的控制，依赖于资源的特定属性，那么准入控制器可以处理此类需求。我们将在本章后续部分探讨此选项，讨论策略引擎时会详细说明。
- en: Policy management
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 策略管理
- en: Governance is built around policies. Managing all these policies, organizing
    them, and ensuring they address the governance needs of an organization takes
    a lot of effort and is an ongoing task. Be prepared to devote resources to evolving
    and maintaining your policies.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 治理是围绕策略建立的。管理所有这些策略、组织它们，并确保它们满足组织的治理需求需要大量的努力，并且是一个持续的任务。准备好为不断发展和维护你的策略投入资源。
- en: Policy validation and enforcement
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 策略验证与执行
- en: Once a set of policies are in place, you need to validate requests to the Kubernetes
    API server against those policies and reject requests that violate these policies.
    There is another approach to enforcing policies that involves mutating incoming
    requests to comply with a policy. For example, if a policy requires that each
    pod must have a memory request of at most 2 GiB, then a mutating policy can trim
    down the memory request of pods with larger memory requests to 2 GiB.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦一组策略确定下来，你需要验证Kubernetes API服务器的请求是否符合这些策略，并拒绝违反这些政策的请求。还有一种实施策略的方法是通过修改传入请求，使其符合政策。例如，如果一项政策要求每个Pod的内存请求最多为2
    GiB，那么一个变更策略可以将内存请求大于2 GiB的Pod的内存请求减少到2 GiB。
- en: Polices don’t have to be rigid. Exceptions and exclusions can be made for special
    cases.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 政策不必是僵化的。对于特殊情况，可以做出例外和排除。
- en: Reporting
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 报告
- en: When you manage a large number of policies and vet all requests it’s important
    to have visibility into how your policies can help you govern your system, prevent
    issues, and learn from usage patterns. Reports can provide insights by capturing
    and consolidating the results of policy decisions. As a human user you may view
    reports about policy violations and rejected and mutated requests, and detect
    trends or anomalies. At a higher level you can employ automated analysis, including
    an ML-based model to extract meaning from a large number of detailed reports.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当你管理大量的政策并审核所有请求时，了解你的政策如何帮助治理系统、预防问题并从使用模式中学习是很重要的。报告可以通过捕捉和汇总政策决策的结果来提供洞察。作为人工用户，你可以查看关于政策违规、被拒绝和被修改请求的报告，并检测趋势或异常。在更高层次上，你可以采用自动化分析，包括基于机器学习的模型，从大量详细报告中提取意义。
- en: Audit
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 审计
- en: Kubernetes audit logs provide a timestamped play-by-play of every event in the
    system. When you couple audit data with governance reports you can piece together
    the timeline of incidents, especially security incidents, where the culprit can
    be identified by combining data from multiple sources, starting with a policy
    violation and ending with a root cause.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes审计日志提供了每个事件的时间戳详细记录。当你将审计数据与治理报告结合时，可以拼凑出事件的时间线，特别是安全事件，通过结合多个来源的数据，从政策违规开始，最终追溯到根本原因，从而识别罪魁祸首。
- en: So far, we have covered the terrain of what governance is and how it specifically
    relates to Kubernetes. We emphasized the importance of policies to govern your
    system. Let’s look at policy engines and how they implement these concepts.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经涵盖了治理的基本概念及其与Kubernetes的具体关系。我们强调了政策在治理系统中的重要性。接下来，我们将探讨策略引擎以及它们如何实现这些概念。
- en: Policy engines
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 策略引擎
- en: Policy engines in Kubernetes provide comprehensive coverage of governance needs
    and complement built-in mechanisms, like network policies and RBAC. Policy engines
    can verify and ensure that your system utilizes best practices, follows security
    guidelines, and complies with external policies. In this section, we will look
    at admission control as the primary mechanism where policy engines hook into the
    system, the responsibilities of a policy engine, and a review of existing policy
    engines. After this, we will then dive deep into one of the best policy engines
    out there – Kyverno.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes中的策略引擎提供了全面的治理需求覆盖，并补充了内建机制，如网络策略和RBAC。策略引擎可以验证并确保系统遵循最佳实践，遵守安全指南，并符合外部政策。在这一部分，我们将介绍准入控制作为策略引擎接入系统的主要机制，策略引擎的职责，以及现有策略引擎的回顾。接下来，我们将深入探讨其中最优秀的策略引擎之一——Kyverno。
- en: Admission control as the foundation of policy engines
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准入控制作为策略引擎的基础
- en: Admission control is part of the life cycle of requests hitting the Kubernetes
    API server. We discussed it in depth in *Chapter 15*, *Extending Kubernetes*.
    As you recall, dynamic admission controllers are webhook servers that listen for
    admission review requests and accept, deny, or mutate them. Policy engines are
    first and foremost sophisticated admission controllers that register to listen
    for all requests that are relevant to their policies.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 准入控制是请求进入Kubernetes API服务器生命周期的一部分。我们在*第15章*《扩展Kubernetes》中进行了深入讨论。如你所记得，动态准入控制器是监听准入审核请求的Webhook服务器，能够接受、拒绝或修改请求。策略引擎首先是复杂的准入控制器，它们注册并监听与其策略相关的所有请求。
- en: When a request comes in, the policy engine will apply all relevant policies
    to decide the fate of the request. For example, if a policy determines that Kubernetes
    services of the `LoadBalancer` type may be created only in a namespace called
    `load_balancer`, then the policy engine will register to listen for all Kubernetes
    service creation and update requests. When a service creation or update request
    arrives, the policy engine will check the type of the service and its namespace.
    If the service type is `LoadBalancer` and the namespace is not `load_balancer`,
    then the policy engine will reject the request. Note that this is something that
    can’t be done using RBAC. This is because RBAC can’t look at the type of service
    to determine if the request is valid or not.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当请求到来时，策略引擎会应用所有相关的策略来决定请求的处理方式。例如，如果某个策略确定只有在名为`load_balancer`的命名空间中，才可以创建`LoadBalancer`类型的Kubernetes服务，那么策略引擎会注册监听所有Kubernetes服务创建和更新请求。当服务创建或更新请求到达时，策略引擎会检查服务的类型和命名空间。如果服务类型是`LoadBalancer`且命名空间不是`load_balancer`，则策略引擎会拒绝该请求。请注意，这种操作无法通过RBAC完成。因为RBAC无法查看服务的类型来确定请求是否有效。
- en: Now that we understand how the policy engine utilizes the dynamic admission
    control process of Kubernetes, let’s look at the responsibilities of a policy
    engine.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们理解了策略引擎如何利用Kubernetes的动态准入控制过程，让我们来看看策略引擎的职责。
- en: Responsibilities of a policy engine
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 策略引擎的职责
- en: The policy engine is the primary tool for applying governance to a Kubernetes-based
    system. The policy engine should allow the administrators to define policies that
    go above and beyond the built-in Kubernetes policies, like RBAC and network policies.
    That often means coming up with a policy declaration language. The policy declaration
    language needs to be rich enough to cover all the nuances of Kubernetes, including
    fine-grained application to different resources and access to all the relevant
    information to base accept or reject decisions on for each resource.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 策略引擎是对Kubernetes基础系统执行治理的主要工具。策略引擎应该允许管理员定义超出内建Kubernetes策略（如RBAC和网络策略）的策略。这通常意味着需要创建一个策略声明语言。该策略声明语言需要足够丰富，能够覆盖Kubernetes的所有细节，包括针对不同资源的细粒度应用，以及获取所有相关信息以便对每个资源的接受或拒绝做出决策。
- en: The policy engine should also provide a way to organize, view, and manage policies.
    Ideally, the policy engine provides a good way to test policies before applying
    them to a live cluster.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 策略引擎还应该提供一种组织、查看和管理策略的方式。理想情况下，策略引擎提供了一种在将策略应用到实际集群之前测试策略的良好方式。
- en: The policy engine has to provide a way to deploy policies to the cluster, and
    of course, it needs to apply the policies that are relevant for each request and
    decide if the request should be accepted as is, rejected, or modified (mutated).
    A policy engine may provide a way to generate additional resources when a request
    comes in. For example, when a new Kubernetes deployment is created, a policy engine
    may automatically generate a Horizontal Pod Autoscaler for the deployment. A policy
    engine may also listen to events that occur in the cluster and take action. Note
    that this capability goes beyond dynamic admission control, but it still enforces
    policies on the cluster.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 策略引擎必须提供一种将策略部署到集群的方法，并且当然，它需要应用与每个请求相关的策略，决定该请求是否应该按原样接受、拒绝或修改（变异）。策略引擎还可以提供一种在请求到来时生成额外资源的方式。例如，当创建新的Kubernetes部署时，策略引擎可能会自动为该部署生成一个水平Pod自动扩展器。策略引擎还可以监听集群中发生的事件并采取行动。请注意，这种能力超出了动态准入控制的范围，但它仍然会在集群上执行策略。
- en: Let’s review some Kubernetes policy engines and how they fulfill these responsibilities.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下几个Kubernetes的策略引擎，以及它们是如何履行这些责任的。
- en: Quick review of open source policy engines
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开源策略引擎的快速回顾
- en: When evaluating solutions, it’s very helpful to come up with evaluation criteria
    up front, since policy engines can deeply impact the operation of your Kubernetes
    cluster and its workloads’ maturity is a key element. Excellent documentation
    is crucial too, since the surface area of a policy engine is very large and you
    need to understand how to work with it. The capabilities of a policy engine determine
    what use cases it can handle. Writing policies is how administrators convey their
    governance intentions to the policy engine. It’s important to evaluate the user
    experience of writing and testing policies and what tooling is available to support
    these activities. Deploying the policies to the cluster is another must-have element.
    Finally, viewing reports and understanding the state of governance can be neglected.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在评估解决方案时，提前制定评估标准非常有帮助，因为政策引擎可能会深刻影响 Kubernetes 集群的运行，而集群工作负载的成熟度是一个关键要素。优秀的文档也至关重要，因为政策引擎的范围非常广泛，你需要了解如何与其协作。政策引擎的功能决定了它能处理哪些用例。编写政策是管理员向政策引擎传达治理意图的方式。评估编写和测试政策的用户体验，以及支持这些活动的工具也很重要。将政策部署到集群中是另一个必不可少的元素。最后，查看报告并理解治理状态可能会被忽视。
- en: We will review five policy engines along these dimensions.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将根据以下维度评估五种政策引擎。
- en: OPA/Gatekeeper
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: OPA/Gatekeeper
- en: '**Open Policy Agent** (**OPA**) is a general-purpose policy engine that goes
    beyond Kubernetes ([https://www.openpolicyagent.org](https://www.openpolicyagent.org)).
    Its scope is very broad and it operates on any JSON value.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**开放政策代理** (**OPA**) 是一个通用的政策引擎，超越了 Kubernetes（[https://www.openpolicyagent.org](https://www.openpolicyagent.org)）。它的范围非常广泛，能够处理任何
    JSON 值。'
- en: Gatekeeper ([https://open-policy-agent.github.io/gatekeeper](https://open-policy-agent.github.io/gatekeeper))
    brings the OPA policy engine to Kubernetes by packaging it as an admission control
    webhook.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Gatekeeper（[https://open-policy-agent.github.io/gatekeeper](https://open-policy-agent.github.io/gatekeeper)）通过将
    OPA 政策引擎打包成一个准入控制 webhook，将其引入 Kubernetes。
- en: OPA/Gatekeeper is definitely the most mature policy engine. It was created in
    2017\. It is a graduated CNCF project, and it has 2.9k stars on GitHub at the
    time of writing. It is even used as a foundation for Azure policy on AKS. See
    [https://learn.microsoft.com/en-us/azure/governance/policy/concepts/policy-for-kubernetes](https://learn.microsoft.com/en-us/azure/governance/policy/concepts/policy-for-kubernetes).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: OPA/Gatekeeper 无疑是最成熟的政策引擎。它创建于 2017 年，是一个已毕业的 CNCF 项目，在撰写本文时，它在 GitHub 上有 2.9k
    个星标。它甚至被用作 Azure AKS 上政策的基础。详见 [https://learn.microsoft.com/en-us/azure/governance/policy/concepts/policy-for-kubernetes](https://learn.microsoft.com/en-us/azure/governance/policy/concepts/policy-for-kubernetes)。
- en: OPA has its own special language called Rego ([https://www.openpolicyagent.org/docs/latest/policy-language/](https://www.openpolicyagent.org/docs/latest/policy-language/))
    for defining policies. Rego has a strong theoretical basis inspired by Datalog,
    but it may not be very intuitive and easy to grasp.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: OPA 有自己独特的语言，叫做 Rego（[https://www.openpolicyagent.org/docs/latest/policy-language/](https://www.openpolicyagent.org/docs/latest/policy-language/)），用来定义政策。Rego
    有强大的理论基础，受到 Datalog 的启发，但它可能不太直观，理解起来也不容易。
- en: 'The following diagram shows the architecture of OPA/Gatekeeper:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了 OPA/Gatekeeper 的架构：
- en: '![](img/B18998_16_01.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18998_16_01.png)'
- en: 'Figure 16.1: OPA/Gatekeeper architecture'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.1：OPA/Gatekeeper 架构
- en: Overall, OPA/Gatekeeper is very powerful but seems a little clunky compared
    to other Kubernetes policy engines, as the OPA policy engine is bolted on top
    of Kubernetes via Gatekeeper.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，OPA/Gatekeeper 非常强大，但与其他 Kubernetes 政策引擎相比，似乎有些笨重，因为 OPA 政策引擎是通过 Gatekeeper
    被附加到 Kubernetes 上的。
- en: OPA/Gatekeeper has mediocre documentation that is not very easy to navigate.
    However, it does have a policy library you can use as a starting point.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: OPA/Gatekeeper 的文档较为一般，导航不太方便。不过，它确实有一个可以作为起点使用的政策库。
- en: However, if you appreciate the maturity, and you’re not too concerned about
    using Rego and some friction, it may be a good choice for you.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你看重其成熟度，并且不太担心使用 Rego 和一些摩擦，它可能是一个不错的选择。
- en: Kyverno
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Kyverno
- en: Kyverno ([https://kyverno.io](https://kyverno.io)) is a mature and robust policy
    engine that was designed especially for Kubernetes from the get-go. It was created
    in 2019 and has made huge strides since then. It is a CNCF incubating project
    and has surpassed OPA/Gatekeeper in popularity on GitHub with 3.3k stars at the
    time of writing. Kyverno uses YAML JMESPath ([https://jmespath.org](https://jmespath.org))
    to define policies, which are really just Kubernetes custom resources. It has
    excellent documentation and a lot of examples to get you started writing your
    own policy.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Kyverno ([https://kyverno.io](https://kyverno.io)) 是一个成熟且强大的策略引擎，专门为 Kubernetes
    从一开始就设计。它创建于 2019 年，并在此之后取得了巨大进展。它是一个 CNCF 孵化项目，在 GitHub 上的受欢迎程度已经超过了 OPA/Gatekeeper，截至写作时有
    3.3k 个星标。Kyverno 使用 YAML JMESPath ([https://jmespath.org](https://jmespath.org))
    来定义策略，实际上这些策略只是 Kubernetes 自定义资源。它有优秀的文档支持，并且提供了许多示例来帮助你开始编写自己的策略。
- en: Overall, Kyverno is both powerful and easy to use. It has huge momentum behind
    it, and it keeps getting better and improving its performance and operation at
    scale. It is the best Kubernetes policy engine at the moment in my opinion. We
    will dive deep into Kyverno later in this chapter.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，Kyverno 功能强大且易于使用。它背后有巨大的支持势头，持续不断地改进和提升其性能与规模化操作。在我看来，它目前是最好的 Kubernetes
    策略引擎。我们将在本章后续部分深入探讨 Kyverno。
- en: jsPolicy
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: jsPolicy
- en: jsPolicy ([https://www.jspolicy.com](https://www.jspolicy.com)) is an interesting
    project from Loft that has brought virtual clusters to the Kubernetes community.
    Its claim to fame is that it runs policies in a secure and performant browser-like
    sandbox, and you define the policies in JavaScript or TypeScript. The approach
    is refreshing, and the project is very slick and streamlined with good documentation.
    Unfortunately, it seems like Loft is focused on other projects and jsPolicy doesn’t
    get a lot of attention. It has only 242 GitHub stars ([https://github.com/loft-sh/jspolicy](https://github.com/loft-sh/jspolicy))
    at the time of writing, and the last commit was 6 months ago.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: jsPolicy ([https://www.jspolicy.com](https://www.jspolicy.com)) 是 Loft 推出的一个有趣项目，它为
    Kubernetes 社区带来了虚拟集群。它的亮点在于，策略在一个安全且高效的浏览器式沙箱中运行，而你可以用 JavaScript 或 TypeScript
    来定义策略。这个方法非常新颖，项目也很精致、简洁，且有很好的文档支持。不幸的是，Loft 似乎将精力放在其他项目上，jsPolicy 并没有受到太多关注。在写作时，它在
    GitHub 上只有 242 个星标 ([https://github.com/loft-sh/jspolicy](https://github.com/loft-sh/jspolicy))，而且最后一次提交是在
    6 个月前。
- en: The idea of utilizing the JavaScript ecosystem to package and share policies,
    as well as use its robust tooling to test and debug policies, has a lot of merit.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 利用 JavaScript 生态系统来打包和共享策略，并利用其强大的工具来测试和调试策略，这个思路有很多优点。
- en: jsPolicy provides validating, mutating, and controller policies. Controller
    policies allow you to react to events occurring in the cluster outside the scope
    of admission control.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: jsPolicy 提供验证、变异和控制策略。控制策略允许你响应集群中发生的事件，超出了准入控制的范围。
- en: 'The following diagram shows the architecture of jsPolicy:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表展示了 jsPolicy 的架构：
- en: '![js Policy architecture](img/B18998_16_02.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![js Policy architecture](img/B18998_16_02.png)'
- en: 'Figure 16.2: jsPolicy architecture'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.2：jsPolicy 架构
- en: At this point, I wouldn’t commit to jsPolicy since it may have been abandoned.
    However, if Loft or someone else decides to invest in it, it may be a contender
    in the field of Kubernetes policy engines.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我不会承诺使用 jsPolicy，因为它可能已经被放弃。然而，如果 Loft 或其他人决定投资于它，它可能成为 Kubernetes 策略引擎领域的一个有力竞争者。
- en: Kubewarden
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Kubewarden
- en: Kubewarden ([https://www.kubewarden.io](https://www.kubewarden.io)) is another
    innovative policy engine. It is a CNCF sandbox project. Kubewarden focuses on
    being language-agnostic and allows you to write your policies in a variety of
    languages. The policies are then packaged into WebAssembly modules that are stored
    in any OCI registry.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Kubewarden ([https://www.kubewarden.io](https://www.kubewarden.io)) 是另一个创新的策略引擎。它是一个
    CNCF 沙箱项目。Kubewarden 专注于语言无关性，允许你用多种语言编写策略。然后，这些策略会被打包成 WebAssembly 模块，存储在任何 OCI
    注册表中。
- en: 'In theory, you can use any language that can be compiled into WebAssembly.
    In practice, the following languages are supported, but there are limitations:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 理论上，你可以使用任何可以编译成 WebAssembly 的语言。实际上，以下语言被支持，但有一些限制：
- en: Rust (of course, the most mature)
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Rust（当然，这是最成熟的）
- en: Go (you need to use a special compiler, TinyGo, which doesn’t support all of
    Go’s features)
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go（你需要使用一个特殊的编译器 TinyGo，它不支持 Go 的所有功能）
- en: Rego (using OPA directly or Gatekeeper – missing mutating policies)
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Rego（直接使用 OPA 或 Gatekeeper – 缺少变异策略）
- en: Swift (using SwiftWasm, which requires some post-build optimizations)
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Swift（使用SwiftWasm，需进行一些后构建优化）
- en: TypeScript (or rather a subset called AssemblyScript)
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TypeScript（或更准确地说，是一个名为AssemblyScript的子集）
- en: Kubewarden supports validating, mutating, and context-aware policies. Context-aware
    policies are policies that use additional information to form an opinion of whether
    a request should be admitted or rejected. The additional information may include,
    for example, lists of namespaces, services, and ingresses that exist in the cluster.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Kubewarden支持验证、变更和上下文感知策略。上下文感知策略是指利用额外信息来判断是否应该允许请求。额外信息可能包括集群中存在的命名空间、服务和入口等列表。
- en: Kubewarden has a CLI called kwctl ([https://github.com/kubewarden/kwctl](https://github.com/kubewarden/kwctl))
    for managing your policies.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Kubewarden有一个CLI工具叫做kwctl（[https://github.com/kubewarden/kwctl](https://github.com/kubewarden/kwctl)），用于管理你的策略。
- en: 'Here is a diagram of Kubewarden’s architecture:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是Kubewarden架构的示意图：
- en: '![KubeWarden architecture](img/B18998_16_03.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![KubeWarden架构](img/B18998_16_03.png)'
- en: 'Figure 16.3: Kubewarden architecture'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.3：Kubewarden架构
- en: Kubewarden is still evolving and growing. It has some nice ideas and motivations,
    but at this stage, it may appeal to you most if you are on the Rust wagon and
    prefer to write your policies in Rust.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Kubewarden仍在不断发展和成长。它有一些不错的创意和动机，但在这个阶段，如果你是Rust语言的支持者并偏爱用Rust编写策略，它可能最适合你。
- en: Now that we have looked at the landscape of Kubernetes open source policy engines,
    let’s dive in and take a closer look at Kyverno.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了Kubernetes开源策略引擎的整体情况，让我们深入探讨并仔细了解Kyverno。
- en: Kyverno deep dive
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kyverno深入分析
- en: Kyverno is a rising star in the Kubernetes policy engine arena. Let’s get hands-on
    with it, and see how it works and why it is so popular. In this section, we will
    introduce Kyverno, install it, and learn how to write, apply, and test policies.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Kyverno是Kubernetes策略引擎领域的一颗新星。让我们动手实践一下，看看它如何工作，以及为什么它如此受欢迎。在这一节中，我们将介绍Kyverno，安装它，并学习如何编写、应用和测试策略。
- en: Quick intro to Kyverno
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kyverno简介
- en: Kyverno is a policy engine that was designed especially for Kubernetes. If you
    have some experience working with kubectl, Kubernetes manifests, or YAML, then
    Kyverno will feel very familiar. You define policies and configuration using YAML
    manifests and the JMESPath language, which is very close to the JSONPATH format
    of kubectl.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Kyverno是一个专门为Kubernetes设计的策略引擎。如果你有使用kubectl、Kubernetes清单或YAML的经验，那么Kyverno会让你感觉非常熟悉。你通过YAML清单和JMESPath语言定义策略和配置，后者与kubectl的JSONPATH格式非常接近。
- en: 'The following diagram shows the Kyverno architecture:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示展示了Kyverno架构：
- en: '![Kyverno architecture](img/B18998_16_04.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![Kyverno架构](img/B18998_16_04.png)'
- en: 'Figure 16.4: Kyverno architecture'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.4：Kyverno架构
- en: 'Kyverno covers a lot of ground and has many features:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Kyverno覆盖了很多领域并拥有许多功能：
- en: GitOps for policy management
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用GitOps进行策略管理
- en: Resource validation (to reject invalid resources)
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源验证（拒绝无效资源）
- en: Resource mutation (to modify invalid resources)
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源变更（修改无效资源）
- en: Resource generation (to generate additional resources automatically)
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源生成（自动生成额外的资源）
- en: Verifying container images (important for software supply chain security)
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证容器镜像（对软件供应链安全非常重要）
- en: Inspecting image metadata
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查镜像元数据
- en: Using label selectors and wildcards to match and exclude resources (Kubernetes-native)
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用标签选择器和通配符匹配和排除资源（Kubernetes原生）
- en: Using overlays to validate and mutate resources (similar to Kustomize!)
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用叠加层验证和变更资源（类似Kustomize！）
- en: Synchronizing configurations across namespaces
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在命名空间间同步配置
- en: Operating in reporting or enforcing mode
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以报告或强制模式运行
- en: Applying policies using a dynamic admission webhook
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用动态准入Webhook应用策略
- en: Applying policies at CI/CD time using the Kyverno CLI
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在CI/CD阶段使用Kyverno CLI应用策略
- en: Testing policies and validating resources ad hoc using the Kyverno CLI
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Kyverno CLI进行临时策略测试和资源验证
- en: High-availability mode
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高可用模式
- en: Fail open or closed (allowing or rejecting resources when the Kyverno admission
    webhook is down)
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 失败时开放或关闭（在Kyverno准入Webhook不可用时，允许或拒绝资源）
- en: Policy violation reports
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 策略违规报告
- en: Web UI for easy visualization
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供Web UI，方便可视化
- en: Observability support
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可观察性支持
- en: This is an impressive list of features and capabilities. The Kyverno developers
    keep evolving and improving it. Kyverno has made big strides in scalability, performance,
    and the ability to handle a large number of policies and resources.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: Let’s install Kyverno and configure it.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring Kyverno
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Kyverno follows a similar upgrade policy as Kubernetes itself, where the node
    components version must be at most two minor versions below the control plane
    version. At the time of writing, Kyverno 1.8 is the latest version, which supports
    Kubernetes versions 1.23–1.25.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: 'We can install Kyverno using kubectl or Helm. Let’s go with the Helm option:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let’s install Kyverno, using the default single replica, into its own namespace.
    Using one replica is NOT recommended for production, but it’s okay for experimenting
    with Kyverno. To install it in high-availability mode, add the `--set replicaCount=3`
    flag:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let’s observe what we have just installed using the ketall kubectl plugin:
    ([https://github.com/corneliusweig/ketall](https://github.com/corneliusweig/ketall)):'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As you can see, Kyverno installed all the expected resources: deployment, services,
    roles and role bindings, config maps, and secrets. We can tell that Kyverno exposes
    metrics and uses leader election too.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, Kyverno installed many CRDs (at the cluster scope):'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Finally, Kyverno configures several admission control webhooks:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following diagram shows the result of a typical Kyverno installation:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '![Kyverno installation](img/B18998_16_05.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.5: Typical Kyverno installation'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: Installing pod security policies
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Kyverno has an extensive library of pre-built policies. We can install the
    pod security standard policies (see [https://kyverno.io/policies/pod-security/](https://kyverno.io/policies/pod-security/))
    using Helm too:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Note that the policies themselves are cluster policies and are not visible
    in the namespace `kyverno-policies`:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We will review some of these policies in depth later. First, let’s see how to
    configure Kyverno.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Kyverno
  id: totrans-167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can configure the behavior of Kyverno by editing the Kyverno config map:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `resourceFilters` flag is a list in the format `[kind,namespace,name]`,
    where each element may be a wildcard too, that tells Kyverno which resources to
    ignore. Resources that match any of the filters will not be subject to any Kyverno
    policy. This is good practice if you have a lot of policies to save the evaluation
    effort against all policies.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: The `webHooks` flag allows you to filter out whole namespaces.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: The `excludeGroupRole` flag is a string of comma-separated roles. It will exclude
    requests, where a user has one of the specified roles from Kyverno admission control.
    The default list is `system:serviceaccounts:kube-system,system:nodes,system:kube-scheduler`.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: The `excludeUsername` flag represents a string consisting of Kubernetes usernames
    separated by commas. When a user enables `Synchronize` in `generate policy`, Kyverno
    becomes the only entity capable of updating or deleting generated resources. However,
    administrators have the ability to exclude specific usernames from accessing the
    delete/update-generated resource functionality.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`excludeUsername` 标志表示一个由逗号分隔的 Kubernetes 用户名字符串。当用户在 `generate policy` 中启用
    `Synchronize` 时，Kyverno 成为唯一能够更新或删除生成资源的实体。然而，管理员可以排除特定的用户名，使其无法访问删除/更新生成资源的功能。'
- en: The `generateSuccessEvents` flag is a Boolean parameter used to determine whether
    success events should be generated. By default, this flag is set to `false`, indicating
    that success events are not generated.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '`generateSuccessEvents` 标志是一个布尔参数，用于确定是否应生成成功事件。默认情况下，此标志设置为 `false`，表示不会生成成功事件。'
- en: 'Furthermore, the Kyverno container provides several container arguments that
    can be configured to customize its behavior and functionality. These arguments
    allow for fine-tuning and customization of Kyverno’s behavior within the container.
    You can edit the list of args in the Kyverno deployment:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Kyverno 容器提供了几个可以配置的容器参数，以自定义其行为和功能。这些参数允许精细调整和定制 Kyverno 在容器内的行为。你可以编辑 Kyverno
    部署中的参数列表：
- en: '[PRE8]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In addition to the pre-configured `--autogenInternals` and `--loggingFormat`,
    the following flags are available:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 除了预配置的 `--autogenInternals` 和 `--loggingFormat` 外，还有以下标志可用：
- en: '`admissionReports`'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`admissionReports`'
- en: '`allowInsecureRegistry`'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`allowInsecureRegistry`'
- en: '`autoUpdateWebhooks`'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoUpdateWebhooks`'
- en: '`backgroundScan`'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`backgroundScan`'
- en: '`clientRateLimitBurst`'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clientRateLimitBurst`'
- en: '`clientRateLimitQPS`'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clientRateLimitQPS`'
- en: '`disableMetrics`'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`disableMetrics`'
- en: '`enableTracing`'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enableTracing`'
- en: '`genWorkers`'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`genWorkers`'
- en: '`imagePullSecrets`'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`imagePullSecrets`'
- en: '`imageSignatureRepository`'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`imageSignatureRepository`'
- en: '`kubeconfig`'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubeconfig`'
- en: '`maxQueuedEvents`'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`maxQueuedEvents`'
- en: '`metricsPort`'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`metricsPort`'
- en: '`otelCollector`'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`otelCollector`'
- en: '`otelConfig`'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`otelConfig`'
- en: '`profile`'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`profile`'
- en: '`profilePort`'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`profilePort`'
- en: '`protectManagedResources`'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`protectManagedResources`'
- en: '`reportsChunkSize`'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reportsChunkSize`'
- en: '`serverIP`'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`serverIP`'
- en: '`splitPolicyReport` (deprecated – will be removed in 1.9)'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`splitPolicyReport`（已弃用 – 将在 1.9 版本中移除）'
- en: '`transportCreds`'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transportCreds`'
- en: '`webhookRegistrationTimeout`'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`webhookRegistrationTimeout`'
- en: '`webhookTimeout`'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`webhookTimeout`'
- en: All the flags have a default value, and you only need to specify them if you
    want to override the defaults.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 所有标志都有默认值，只有在你想覆盖默认值时才需要指定它们。
- en: Check out [https://kyverno.io/docs/installation/#container-flags](https://kyverno.io/docs/installation/#container-flags)
    for details on each flag.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [https://kyverno.io/docs/installation/#container-flags](https://kyverno.io/docs/installation/#container-flags)
    以获取每个标志的详细信息。
- en: We installed Kyverno, observed the various resources it installed, and looked
    at its configuration. It’s time to check out the policies and rules of Kyverno.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们安装了 Kyverno，观察了它安装的各种资源，并查看了它的配置。现在是时候查看 Kyverno 的策略和规则了。
- en: Applying Kyverno policies
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用 Kyverno 策略
- en: At the user level, the unit of work in Kyverno is policies. You can apply policies
    as Kubernetes resources, write and edit your own policies, and test policies using
    the Kyverno CLI.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在用户级别，Kyverno 的工作单位是策略。你可以将策略作为 Kubernetes 资源应用，编写和编辑自己的策略，并使用 Kyverno CLI 测试策略。
- en: 'Applying a Kyverno policy is as simple as applying any other resource. Let’s
    take a look at one of the policies we installed earlier:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 应用 Kyverno 策略就像应用其他资源一样简单。让我们看一下我们之前安装的一个策略：
- en: '[PRE9]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The purpose of the policy is to prevent pods from requesting extra Linux capabilities
    beyond the allowed list (see [https://linux-audit.com/linux-capabilities-101/](https://linux-audit.com/linux-capabilities-101/)).
    One of the capabilities that is not allowed is `NET_ADMIN`. Let’s create a pod
    that requests this capability:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 该策略的目的是防止 Pod 请求超出允许列表的额外 Linux 能力（见 [https://linux-audit.com/linux-capabilities-101/](https://linux-audit.com/linux-capabilities-101/)）。不允许的能力之一是
    `NET_ADMIN`。让我们创建一个请求该能力的 Pod：
- en: '[PRE10]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The pod was created, and we can verify that it has the `NET_ADMIN` capability.
    I use a kind cluster, so the cluster node is just a Docker process we can exec
    into:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: Pod 已创建，我们可以验证它是否具有 `NET_ADMIN` 能力。我使用的是 kind 集群，所以集群节点只是一个 Docker 进程，我们可以进入该进程：
- en: '[PRE11]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now that we’re in a shell inside the node, we can search for the process of
    our container, which just sleeps for 999,999 seconds:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经进入节点内部的 shell，我们可以搜索容器的进程，它会休眠 999,999 秒：
- en: '[PRE12]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let’s check the capabilities of our process, 4549:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一下进程 4549 的能力：
- en: '[PRE13]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As you can see the `cap_net_admin` is present.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，`cap_net_admin` 已经存在。
- en: 'Kyverno didn’t prevent the pod from being created because the policy operates
    in audit mode only:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: Kyverno 没有阻止创建 pod，因为策略仅在审计模式下运行：
- en: '[PRE14]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Let’s delete the pod and change the policy to “enforce” mode:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们删除 pod 并将策略更改为“强制”模式：
- en: '[PRE15]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, if we try to create the pod again, the result is very different:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们尝试再次创建 pod，结果会截然不同：
- en: '[PRE16]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The Kyverno admission webhook enforced the policy and rejected the pod creation.
    It even tells us which policy was responsible (`disallow-capabilities`) and displays
    a nice message that explains the reason for the rejection, including a list of
    the allowed capabilities.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: Kyverno 准入 webhook 强制执行策略并拒绝了 pod 的创建。甚至告诉我们是哪个策略负责（`disallow-capabilities`），并显示了一个详细的消息，解释了拒绝的原因，包括允许的能力列表。
- en: It is pretty simple to apply policies. Writing policies is much more involved
    and requires an understanding of resource requests, Kyverno matching rules, and
    the JMESPath language. Before we can write policies, we need to understand how
    they are structured and what their different elements are.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 应用策略非常简单。编写策略要复杂得多，需要理解资源请求、Kyverno 匹配规则和 JMESPath 语言。在编写策略之前，我们需要了解它们的结构及其不同元素。
- en: Kyverno policies in depth
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 深入了解 Kyverno 策略
- en: In this section, we will learn all the fine details about Kyverno policies.
    A Kyverno policy has a set of rules that define what the policy actually does
    and several general settings that define how the policy behaves in different scenarios.
    Let’s start with the policy settings and then move on to rules and different use
    cases, such as validating, mutating, and generating resources.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习有关 Kyverno 策略的所有细节。Kyverno 策略包含一组规则，定义策略的实际功能，并具有几个通用设置，定义策略在不同场景下的行为。让我们从策略设置开始，然后深入到规则和不同的使用案例，如验证、变异和生成资源。
- en: Understanding policy settings
  id: totrans-229
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解策略设置
- en: 'A Kyverno policy may have the following settings:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: Kyverno 策略可以具有以下设置：
- en: '`applyRules`'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`applyRules`'
- en: '`validationFailureAction`'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`validationFailureAction`'
- en: '`validationFailureActionOverrides`'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`validationFailureActionOverrides`'
- en: '`background`'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`background` 设置确定在后台扫描期间是否应用策略到现有资源。默认为“true”。'
- en: '`schemaValidation`'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schemaValidation`'
- en: '`failurePolicy`'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`failurePolicy`'
- en: '`webhookTimeoutSeconds`'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`webhookTimeoutSeconds`'
- en: The `applyRules` setting determines if only one or multiple rules apply to matching
    resources. The valid values are “One” and “All” (the default). If `applyRules`
    is set to “One” then the first matching rule will be evaluated and other rules
    will be ignored.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '`applyRules` 设置确定是否仅适用一个或多个规则于匹配资源。有效值为“One”和“All”（默认）。如果 `applyRules` 设置为“One”，则将评估第一个匹配规则，忽略其他规则。'
- en: The `validationFailureAction` setting determines if a failed validation policy
    rule should reject the admission request or just report it. The valid values are
    “audit” (default – always allows and just reports violations) and “enforce” (blocks
    invalid requests).
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '`validationFailureAction` 设置确定失败的验证策略规则是否应拒绝接受请求或仅报告它。有效值为“audit”（默认 - 始终允许并仅报告违规）和“enforce”（阻止无效请求）。'
- en: The `validationFailureActionOverrides` setting is a `ClusterPolicy` attribute
    that overrides the `validationFailureAction` for specific namespaces.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '`validationFailureActionOverrides` 设置是 `ClusterPolicy` 属性，用于为特定命名空间覆盖 `validationFailureAction`。'
- en: The `background` setting determines if policies are applied to existing resources
    during a background scan. The default is “true”.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '`background` 设置确定在后台扫描期间是否应用策略到现有资源。默认值为“true”。'
- en: The `schemaValidation` setting determines if policy validation checks are applied.
    The default is “true”.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '`schemaValidation` 设置确定是否应用策略验证检查。默认为“true”。'
- en: The `failurePolicy` setting determines how the API server behaves if the webhook
    fails to respond. The valid values are “Ignore” and “Fail” (the default). If the
    setting is “Fail” then even valid resource requests will be denied, while the
    webhook is unreachable.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '`failurePolicy` 设置确定 API 服务器在 webhook 未能响应时的行为。有效值为“Ignore”和“Fail”（默认）。如果设置为“Fail”，即使资源请求有效，也将被拒绝，同时
    webhook 不可达。'
- en: The `webhookTimeoutSeconds` determines the maximum time in seconds that the
    webhook is allowed to evaluate a policy. The valid values are between 1 and 30
    seconds. The default is 10 seconds. If the webhook failed to respond in time,
    the `failurePolicy` (see above) determines the fate of the request.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '`webhookTimeoutSeconds` 设置确定 webhook 允许评估策略的最长时间（以秒为单位）。有效值为 1 到 30 秒。默认为 10
    秒。如果 webhook 未能及时响应，则 `failurePolicy`（见上文）决定请求的结果。'
- en: Understanding Kyverno policy rules
  id: totrans-245
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解 Kyverno 策略规则
- en: 'Each Kyverno policy has one or more rules. Each rule has a `match` declaration,
    an optional `exclude` declaration, an optional `preconditions` declaration, and
    exactly one of the following declarations:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: '`validate`'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mutate`'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`generate`'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`verifyImages`'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The diagram below demonstrates the structure of a Kyverno policy and its rules
    (policy settings are omitted):'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: '![Kyverno rule structure](img/B18998_16_06.png)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.6: Kyverno rule structure'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: Let’s go over the different declarations and explore some advanced topics too.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: Matching requests
  id: totrans-255
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'When a resource request arrives, the Kyverno webhook needs to determine for
    each policy if the requested resource and/or operation is relevant for the current
    policy. The mandatory `match` declaration has several filters that determine if
    the policy should evaluate the current request. The filters are:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: '`resources`'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`subjects`'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`roles`'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clusterRoles`'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `match` declaration may have multiple filters grouped under an `any` statement
    or an `all` statement. When filters are grouped under `any`, then Kyverno will
    apply OR semantics to match them, and if any of the filters match the request,
    the request is considered matched. When filters are grouped under `all`, then
    Kyverno will apply AND semantics, and all the filters must match in order for
    the request to be considered a match.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: This can be a little overwhelming. Let’s look at an example. The following policy
    spec has a single rule called `some-rule`. The rule has a `match` declaration
    with two resource filters under an `any` statement. The first resource filter
    matches resources of kind `Service` with names `service-1` or `service-2`. The
    second resource filter matches resources of kind `Service` in the namespace `ns-1`.
    This rule will match any Kubernetes service named `service-1` or `service-2` in
    any namespace, as well as any service in the namespace `ns-1`.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Let’s look at another example. This time we add a cluster role filter. The following
    rule will match requests where the kind is a service named `service-1` and the
    requesting user has a cluster role called `some-cluster-role`.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The admission review resource contains all the roles and cluster roles bound
    to the requesting user or service account.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: Excluding resources
  id: totrans-267
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Excluding resources is very similar to matching. It is very common to set policies
    that disallow all requests to create or update some resources unless they are
    made in certain namespaces or by users with certain roles. Here is an example
    that matches all services but excludes the `ns-1` namespace:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Another common exclusion is for specific roles like `cluster-admin`.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: Using preconditions
  id: totrans-271
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Limiting the scope of a policy using `match` and `exclude` is great, but in
    many cases it is not sufficient. Sometimes, you need to select resources based
    on fine-grained details such as memory requests. Here is an example that matches
    all pods that request memory of less than 1 GiB.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for the key value uses JMESPath ([https://jmespath.org](https://jmespath.org))
    on the built-in request object:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 键值语法使用 JMESPath ([https://jmespath.org](https://jmespath.org)) 在内置请求对象上：
- en: '[PRE20]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Validating requests
  id: totrans-275
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 验证请求
- en: The primary use case of Kyverno is validating requests. Validating rules have
    a `validate` statement. The `validate` statement has a `message` field that will
    be displayed if the request fails to validate. A validating rule has two forms,
    pattern-based validation and deny-based validation. Let’s examine each of them.
    As you may recall, the result of a resource failing to validate depends on the
    `validationFailureAction` field, which can be `audit` or `enforce`.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: Kyverno 的主要用例是验证请求。验证规则有一个 `validate` 语句。`validate` 语句包含一个 `message` 字段，当请求验证失败时会显示该消息。验证规则有两种形式，基于模式的验证和基于拒绝的验证。让我们逐一查看它们。正如你可能记得的那样，资源验证失败的结果取决于
    `validationFailureAction` 字段，可以是 `audit` 或 `enforce`。
- en: Pattern-based validation
  id: totrans-277
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 基于模式的验证
- en: 'A rule with pattern-based validation has a `pattern` field under the `validate`
    statement. If the resource doesn’t match the pattern, the rule failed. Here is
    an example of pattern-based validation, where the resource must have a label called
    `app`:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 一个基于模式的验证规则在 `validate` 语句下有一个 `pattern` 字段。如果资源不匹配该模式，则规则失败。这里是一个基于模式的验证示例，要求资源必须有一个名为
    `app` 的标签：
- en: '[PRE21]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The validation part will only be applied to requests that comply with the `match`
    and `preconditions` statements and are not excluded by the `exclude` statement,
    if there are any.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 验证部分只会应用于符合 `match` 和 `preconditions` 语句的请求，并且如果有 `exclude` 语句，也不会排除这些请求。
- en: 'You can also apply operators to values in the pattern – for example, here is
    a validation rule that requires that the number of replicas of a deployment will
    be at least 3:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以对模式中的值应用运算符——例如，这里有一个验证规则，要求部署的副本数至少为3：
- en: '[PRE22]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Deny-based validation
  id: totrans-283
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 基于拒绝的验证
- en: 'A rule with deny-based validation has a `deny` field under the `validate` statement.
    Deny rules are similar to the preconditions that we saw earlier for selecting
    resources. Each deny condition has a key, an operator, and a value. A common use
    for the deny condition is disallowing a specific operation such as `DELETE`. The
    following examples use deny-based validation to prevent the deletion of Deployments
    and StatefulSets. Note the use of request variables both for the message and the
    key. For `DELETE` operations the deleted object is defined as `request.oldObject`
    and not `request.object`:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 一个基于拒绝的验证规则在 `validate` 语句下有一个 `deny` 字段。拒绝规则类似于我们之前看到的用于选择资源的前置条件。每个拒绝条件都有一个键、一个运算符和一个值。拒绝条件的常见用途是禁止某个特定操作，如
    `DELETE`。以下示例使用基于拒绝的验证来防止删除部署和 StatefulSets。请注意消息和键使用请求变量。对于 `DELETE` 操作，已删除的对象定义为
    `request.oldObject`，而不是 `request.object`：
- en: '[PRE23]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'There is more to validation, which you can explore here: [https://kyverno.io/docs/writing-policies/validate/](https://kyverno.io/docs/writing-policies/validate/)'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更多的验证内容，你可以在这里探索：[https://kyverno.io/docs/writing-policies/validate/](https://kyverno.io/docs/writing-policies/validate/)
- en: Let’s turn our attention to mutations.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们关注变更操作。
- en: Mutating resources
  id: totrans-288
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 变更资源
- en: Mutation may sound scary, but all it is is modifying the resource in a request
    in some way. Note that the mutated request will still go through validation even
    if it matches any policy. It is not possible to change the kind of the requested
    object, but you can change its properties. The benefit of mutation is that you
    can automatically fix invalid requests, which is typically a better user experience
    instead of blocking invalid requests. The downside (especially if the invalid
    resources were created as part of a CI/CD pipeline) is that it creates a dissonance
    between the source code and the actual resources in the cluster. However, it is
    great for use cases where you want to control some aspects that users don’t need
    to be aware of, as well as during migration.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 变更听起来可能很可怕，但其实它只是以某种方式修改请求中的资源。请注意，即使变更后的请求符合任何策略，它仍然会通过验证。无法更改请求对象的类型，但可以更改其属性。变更的好处是你可以自动修复无效请求，这通常比阻止无效请求更好的用户体验。缺点是（特别是如果无效资源是作为
    CI/CD 流水线的一部分创建的）它会在源代码和集群中的实际资源之间产生不一致。然而，它在某些情况下非常有用，特别是当你希望控制一些用户无需关注的方面，或者在迁移过程中。
- en: Enough theory – let’s see what mutation looks like in Kyverno. You still need
    to select the resources to mutate, which means that the `match`, `exclude`, and
    `precondition` statements are still needed for mutation policies.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 足够的理论—让我们来看一下 Kyverno 中的变更。你仍然需要选择要变更的资源，这意味着变更策略仍然需要 `match`、`exclude` 和 `precondition`
    语句。
- en: 'However, instead of a `validate` statement you will have a `mutate` statement.
    Here is an example that uses the `patchStrategicMerge` flavor to set the `imagePullPolicy`
    of containers that use an image with the `latest` tag. The syntax is similar to
    Kustomize overlays and merges with the existing resource. The reason the `image`
    field is in parentheses is because of a JMESPath feature called anchors ([https://kyverno.io/docs/writing-policies/validate/#anchors](https://kyverno.io/docs/writing-policies/validate/#anchors)),
    where the rest of the subtree is applied only if the given field matches it. In
    this case it means the `imagePullPolicy` will only be set for images that satisfy
    the condition:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，代替 `validate` 语句，你将使用 `mutate` 语句。这里是一个示例，使用 `patchStrategicMerge` 类型来设置使用
    `latest` 标签镜像的容器的 `imagePullPolicy`。语法类似于 Kustomize 的覆盖和合并现有资源。`image` 字段用括号括起来是因为
    JMESPath 的一个特性叫做锚点（[https://kyverno.io/docs/writing-policies/validate/#anchors](https://kyverno.io/docs/writing-policies/validate/#anchors)），在这种情况下，只有当给定字段匹配时，剩余的子树才会被应用。这意味着
    `imagePullPolicy` 只会为符合条件的镜像设置：
- en: '[PRE24]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'spec:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 规格：
- en: 'rules:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 规则：
- en: '- name: patch-config-map'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 名称：patch-config-map'
- en: 'match:'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 匹配：
- en: 'any:'
  id: totrans-298
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 任何：
- en: '- resources:'
  id: totrans-299
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 资源：'
- en: 'names:'
  id: totrans-300
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 名称：
- en: '- the-config-map'
  id: totrans-301
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- the-config-map'
- en: 'kinds:'
  id: totrans-302
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类型：
- en: '- ConfigMap'
  id: totrans-303
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- ConfigMap'
- en: 'mutate:'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 变更：
- en: 'patchesJson6902: |-'
  id: totrans-305
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'patchesJson6902: |-'
- en: '- path: "/data/properties"'
  id: totrans-306
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 路径："/data/properties"'
- en: 'op: add'
  id: totrans-307
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 操作：添加
- en: 'value: |'
  id: totrans-308
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 值：|
- en: prop-1=value-1
  id: totrans-309
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: prop-1=value-1
- en: prop-2=value-2
  id: totrans-310
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: prop-2=value-2
- en: '- path: "/data/key"'
  id: totrans-311
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 路径："/data/key"'
- en: 'op: add'
  id: totrans-312
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 操作：添加
- en: 'value: some-string'
  id: totrans-313
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 值：some-string
- en: '[PRE26]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'spec:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 规格：
- en: 'rules:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 规则：
- en: '- name: deny-all-traffic'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '- 名称：deny-all-traffic'
- en: 'match:'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 匹配：
- en: 'any:'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 任何：
- en: '- resources:'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 资源：'
- en: 'kinds:'
  id: totrans-321
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类型：
- en: '- Namespace'
  id: totrans-322
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 命名空间'
- en: 'generate:'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 生成：
- en: 'kind: NetworkPolicy'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类型：NetworkPolicy
- en: 'apiVersion: networking.k8s.io/v1'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'apiVersion: networking.k8s.io/v1'
- en: 'name: deny-all-traffic'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 名称：deny-all-traffic
- en: 'namespace: "{{request.object.metadata.name}}"'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 命名空间："{{request.object.metadata.name}}"
- en: 'data:'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 数据：
- en: 'spec:'
  id: totrans-329
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 规格：
- en: '# select all pods in the namespace'
  id: totrans-330
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '# 选择命名空间中的所有 pods'
- en: 'podSelector: {}'
  id: totrans-331
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'podSelector: {}'
- en: 'policyTypes:'
  id: totrans-332
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 策略类型：
- en: '- Ingress'
  id: totrans-333
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- Ingress'
- en: '- Egress'
  id: totrans-334
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- Egress'
- en: '[PRE27]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'spec:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 规格：
- en: 'rules:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 规则：
- en: '- name: clone-config-map'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '- 名称：clone-config-map'
- en: 'match:'
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 匹配：
- en: 'any:'
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 任何：
- en: '- resources:'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 资源：'
- en: 'kinds:'
  id: totrans-342
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类型：
- en: '- Namespace'
  id: totrans-343
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 命名空间'
- en: 'generate:'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 生成：
- en: 'kind: ConfigMap'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类型：ConfigMap
- en: 'apiVersion: v1'
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'apiVersion: v1'
- en: '# Name of the generated resource'
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '# 生成的资源名称'
- en: 'name: default-config'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 名称：default-config
- en: 'namespace: "{{request.object.metadata.name}}"'
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 命名空间："{{request.object.metadata.name}}"
- en: 'synchronize: true'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 同步：true
- en: 'clone:'
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 克隆：
- en: 'namespace: default'
  id: totrans-352
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 命名空间：default
- en: 'name: config-template'
  id: totrans-353
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 名称：config-template
- en: '[PRE28]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'rules:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 规则：
- en: '- name: configmap-lookup'
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 名称：configmap-lookup'
- en: 'context:'
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上下文：
- en: '- name: dictionary'
  id: totrans-358
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 名称：dictionary'
- en: 'configMap:'
  id: totrans-359
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: configMap：
- en: 'name: some-config-map'
  id: totrans-360
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 名称：some-config-map
- en: 'namespace: some-namespace'
  id: totrans-361
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 命名空间：some-namespace
- en: 'match:'
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 匹配：
- en: 'any:'
  id: totrans-363
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 任何：
- en: '- resources:'
  id: totrans-364
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 资源：'
- en: 'kinds:'
  id: totrans-365
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类型：
- en: '- Pod'
  id: totrans-366
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- Pod'
- en: 'mutate:'
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 变更：
- en: 'patchStrategicMerge:'
  id: totrans-368
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: patchStrategicMerge：
- en: 'metadata:'
  id: totrans-369
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 元数据：
- en: 'labels:'
  id: totrans-370
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 标签：
- en: 'environment: "{{dictionary.data.env}}"'
  id: totrans-371
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 环境："{{dictionary.data.env}}"
- en: '[PRE29]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: $ cat <<EOF | k apply -f -
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: $ cat <<EOF | k apply -f -
- en: 'apiVersion: kyverno.io/v1'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 'apiVersion: kyverno.io/v1'
- en: 'kind: ClusterPolicy'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 类型：ClusterPolicy
- en: 'metadata:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 元数据：
- en: 'name: disallow-some-services'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 名称：disallow-some-services
- en: 'spec:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 规格：
- en: 'validationFailureAction: Enforce'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 'validationFailureAction: Enforce'
- en: 'rules:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 规则：
- en: '- name: some-rule'
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 名称：some-rule'
- en: 'match:'
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 匹配：
- en: 'any:'
  id: totrans-383
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 任何：
- en: '- resources:'
  id: totrans-384
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 资源：'
- en: 'kinds:'
  id: totrans-385
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类型：
- en: '- Service'
  id: totrans-386
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 服务'
- en: 'names:'
  id: totrans-387
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 名称：
- en: '- "service-1"'
  id: totrans-388
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- "service-1"'
- en: '- "service-2"'
  id: totrans-389
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- "service-2"'
- en: '- resources:'
  id: totrans-390
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 资源：'
- en: 'kinds:'
  id: totrans-391
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类型：
- en: '- Service'
  id: totrans-392
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 服务'
- en: 'namespaces:'
  id: totrans-393
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 命名空间：
- en: '- "ns-1"'
  id: totrans-394
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- "ns-1"'
- en: 'validate:'
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 验证：
- en: 'message: >-'
  id: totrans-396
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 消息：>-
- en: services named service-1 and service-2 and
  id: totrans-397
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 服务名为 service-1 和 service-2，以及
- en: any service in namespace ns-1 are not allowed
  id: totrans-398
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 任何在 ns-1 命名空间中的服务不允许
- en: 'deny: {}'
  id: totrans-399
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 拒绝：{}
- en: EOF
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: EOF
- en: clusterpolicy.kyverno.io/disallow-some-services created
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: clusterpolicy.kyverno.io/disallow-some-services 已创建
- en: '[PRE30]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: $ k create service clusterip service-1 -n default --tcp=80 --dry-run=server
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: $ k create service clusterip service-1 -n default --tcp=80 --dry-run=server
- en: 'error: failed to create ClusterIP service: admission webhook "validate.kyverno.svc-fail"
    denied the request:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 错误：创建 ClusterIP 服务失败：admission webhook "validate.kyverno.svc-fail" 拒绝了请求：
- en: 'policy Service/default/service-1 for resource violations:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 策略 Service/default/service-1 对资源违规：
- en: 'disallow-some-services:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 不允许某些服务：
- en: 'some-rule: services named service-1 and service-2 and  any service in namespace'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 'some-rule: 服务名为 service-1 和 service-2，以及命名空间中的任何服务'
- en: ns-1 are not allowed
  id: totrans-408
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ns-1 不允许
- en: 'exclude-services-namespace:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: exclude-services-namespace：
- en: 'some-rule: services are not allowed, except in the ns-1 namespace'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 'some-rule: 除了 ns-1 命名空间，其他服务都不允许'
- en: '[PRE31]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: $ k create service clusterip service-1 -n default --tcp=80 --dry-run=client
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: $ k create service clusterip service-1 -n default --tcp=80 --dry-run=client
- en: service/service-1 created (dry run)
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: service/service-1 已创建（干运行）
- en: '[PRE32]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: $ k create service clusterip service-3 -n default --tcp=80 --dry-run=server
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: $ k create service clusterip service-3 -n default --tcp=80 --dry-run=server
- en: service/service-3 created (server dry run)
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: service/service-3 已创建（服务器干运行）
- en: '[PRE33]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: $ k create ns ns-1
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: $ k create ns ns-1
- en: $ k create service clusterip service-3 -n ns-1 --tcp=80 --dry-run=server
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: $ k create service clusterip service-3 -n ns-1 --tcp=80 --dry-run=server
- en: 'error: failed to create ClusterIP service: admission webhook "validate.kyverno.svc-fail"
    denied the request:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 'error: 创建 ClusterIP 服务失败：入驻 webhook "validate.kyverno.svc-fail" 拒绝了请求：'
- en: 'policy Service/ns-1/service-3 for resource violation:'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: policy Service/ns-1/service-3 资源违规：
- en: 'disallow-some-services:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 'disallow-some-services:'
- en: 'some-rule: services named service-1 and service-2 and  any service in namespace'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 'some-rule: 名为 service-1 和 service-2 的服务，以及命名空间中的任何服务'
- en: ns-1 are not allowed
  id: totrans-424
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ns-1 不允许
- en: '[PRE34]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '$ k patch clusterpolicies.kyverno.io disallow-some-services --type merge -p
    ''{"spec": {"validationFailureAction": "Audit"}}'''
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: '$ k patch clusterpolicies.kyverno.io disallow-some-services --type merge -p
    ''{"spec": {"validationFailureAction": "Audit"}}'''
- en: clusterpolicy.kyverno.io/disallow-some-services patched
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: clusterpolicy.kyverno.io/disallow-some-services 已修补
- en: $ k create service clusterip service-3 -n ns-1 --tcp=80 --dry-run=server
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: $ k create service clusterip service-3 -n ns-1 --tcp=80 --dry-run=server
- en: service/service-3 created (server dry run)
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: service/service-3 已创建（服务器干运行）
- en: '[PRE35]'
  id: totrans-430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: $ k get policyreports.wgpolicyk8s.io -n ns-1
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: $ k get policyreports.wgpolicyk8s.io -n ns-1
- en: NAME                          PASS   FAIL   WARN   ERROR   SKIP   AGE
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: NAME                          PASS   FAIL   WARN   ERROR   SKIP   AGE
- en: cpol-disallow-some-services   0      1      0      0       0      2m4s
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: cpol-disallow-some-services   0      1      0      0       0      2m4s
- en: '[PRE36]'
  id: totrans-434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: $ cat <<EOF | k apply -f -
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: $ cat <<EOF | k apply -f -
- en: 'apiVersion: kyverno.io/v1'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 'apiVersion: kyverno.io/v1'
- en: 'kind: ClusterPolicy'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 'kind: ClusterPolicy'
- en: 'metadata:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 'metadata:'
- en: 'name: set-image-pull-policy'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 'name: set-image-pull-policy'
- en: 'spec:'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 'spec:'
- en: 'rules:'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 'rules:'
- en: '- name: set-image-pull-policy'
  id: totrans-442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- name: set-image-pull-policy'
- en: 'match:'
  id: totrans-443
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'match:'
- en: 'any:'
  id: totrans-444
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'any:'
- en: '- resources:'
  id: totrans-445
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 资源:'
- en: 'kinds:'
  id: totrans-446
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'kinds:'
- en: '- Pod'
  id: totrans-447
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- Pod'
- en: 'mutate:'
  id: totrans-448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'mutate:'
- en: 'patchStrategicMerge:'
  id: totrans-449
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'patchStrategicMerge:'
- en: 'spec:'
  id: totrans-450
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'spec:'
- en: 'containers:'
  id: totrans-451
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'containers:'
- en: '# match images which end with :latest'
  id: totrans-452
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '# 匹配以 :latest 结尾的镜像'
- en: '- (image): "*:latest"'
  id: totrans-453
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- (image): "*:latest"'
- en: set the imagePullPolicy to "IfNotPresent"
  id: totrans-454
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: set the imagePullPolicy to "IfNotPresent"
- en: 'imagePullPolicy: "IfNotPresent"'
  id: totrans-455
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'imagePullPolicy: "IfNotPresent"'
- en: EOF
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: EOF
- en: clusterpolicy.kyverno.io/set-image-pull-policy created
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: clusterpolicy.kyverno.io/set-image-pull-policy 已创建
- en: '[PRE37]'
  id: totrans-458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: $ cat <<EOF | k apply -f -
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: $ cat <<EOF | k apply -f -
- en: 'apiVersion: v1'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 'apiVersion: v1'
- en: 'kind: Pod'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 'kind: Pod'
- en: 'metadata:'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 'metadata:'
- en: 'name: some-pod'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 'name: some-pod'
- en: 'spec:'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 'spec:'
- en: 'containers:'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 'containers:'
- en: '- name: some-container'
  id: totrans-466
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- name: some-container'
- en: 'image: g1g1/py-kube:latest'
  id: totrans-467
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'image: g1g1/py-kube:latest'
- en: 'command:'
  id: totrans-468
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'command:'
- en: '- sleep'
  id: totrans-469
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- sleep'
- en: '- "9999"'
  id: totrans-470
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- "9999"'
- en: EOF
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: EOF
- en: pod/some-pod created
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: pod/some-pod 已创建
- en: '[PRE38]'
  id: totrans-473
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: $ k get po some-pod -o yaml | yq '.spec.containers[0].imagePullPolicy'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: $ k get po some-pod -o yaml | yq '.spec.containers[0].imagePullPolicy'
- en: IfNotPresent
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: IfNotPresent
- en: '[PRE39]'
  id: totrans-476
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: $ k delete clusterpolicy set-image-pull-policy
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: $ k delete clusterpolicy set-image-pull-policy
- en: clusterpolicy.kyverno.io "set-image-pull-policy" deleted
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: clusterpolicy.kyverno.io "set-image-pull-policy" 已删除
- en: $ cat <<EOF | k apply -f -
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: $ cat <<EOF | k apply -f -
- en: 'apiVersion: v1'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 'apiVersion: v1'
- en: 'kind: Pod'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 'kind: Pod'
- en: 'metadata:'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 'metadata:'
- en: 'name: another-pod'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 'name: another-pod'
- en: 'spec:'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 'spec:'
- en: 'containers:'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 'containers:'
- en: '- name: some-container'
  id: totrans-486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- name: some-container'
- en: 'image: g1g1/py-kube:latest'
  id: totrans-487
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'image: g1g1/py-kube:latest'
- en: 'command:'
  id: totrans-488
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'command:'
- en: '- sleep'
  id: totrans-489
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- sleep'
- en: '- "9999"'
  id: totrans-490
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- "9999"'
- en: EOF
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: EOF
- en: pod/another-pod created
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: pod/another-pod 已创建
- en: '[PRE40]'
  id: totrans-493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: $ k get po another-pod -o yaml | yq '.spec.containers[0].imagePullPolicy'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: $ k get po another-pod -o yaml | yq '.spec.containers[0].imagePullPolicy'
- en: Always
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: Always
- en: '[PRE41]'
  id: totrans-496
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: cat <<EOF | k apply -f -
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: cat <<EOF | k apply -f -
- en: 'apiVersion: kyverno.io/v1'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 'apiVersion: kyverno.io/v1'
- en: 'kind: ClusterPolicy'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 'kind: ClusterPolicy'
- en: 'metadata:'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 'metadata:'
- en: 'name: deny-all-traffic'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 'name: deny-all-traffic'
- en: 'spec:'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 'spec:'
- en: 'rules:'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 'rules:'
- en: '- name: deny-all-traffic'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: '- name: deny-all-traffic'
- en: 'match:'
  id: totrans-505
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'match:'
- en: 'any:'
  id: totrans-506
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'any:'
- en: '- resources:'
  id: totrans-507
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 资源:'
- en: 'kinds:'
  id: totrans-508
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'kinds:'
- en: '- Namespace'
  id: totrans-509
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 命名空间'
- en: 'exclude:'
  id: totrans-510
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'exclude:'
- en: 'any:'
  id: totrans-511
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'any:'
- en: '- resources:'
  id: totrans-512
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 资源:'
- en: 'namespaces:'
  id: totrans-513
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'namespaces:'
- en: '- kube-system'
  id: totrans-514
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- kube-system'
- en: '- default'
  id: totrans-515
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- default'
- en: '- kube-public'
  id: totrans-516
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- kube-public'
- en: '- kyverno'
  id: totrans-517
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- kyverno'
- en: 'generate:'
  id: totrans-518
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'generate:'
- en: 'kind: NetworkPolicy'
  id: totrans-519
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'kind: NetworkPolicy'
- en: 'apiVersion: networking.k8s.io/v1'
  id: totrans-520
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'apiVersion: networking.k8s.io/v1'
- en: 'name: deny-all-traffic'
  id: totrans-521
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'name: deny-all-traffic'
- en: 'namespace: "{{request.object.metadata.name}}"'
  id: totrans-522
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'namespace: "{{request.object.metadata.name}}"'
- en: 'data:'
  id: totrans-523
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'data:'
- en: 'spec:'
  id: totrans-524
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'spec:'
- en: '# select all pods in the namespace'
  id: totrans-525
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '# 选择命名空间中的所有 pods'
- en: 'podSelector: {}'
  id: totrans-526
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'podSelector: {}'
- en: 'policyTypes:'
  id: totrans-527
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'policyTypes:'
- en: '- Ingress'
  id: totrans-528
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- Ingress'
- en: '- Egress'
  id: totrans-529
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- Egress'
- en: EOF
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: EOF
- en: clusterpolicy.kyverno.io/deny-all-traffic created
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: clusterpolicy.kyverno.io/deny-all-traffic 已创建
- en: '[PRE42]'
  id: totrans-532
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: $ k create ns ns-2
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: $ k create ns ns-2
- en: namespace/ns-2 created
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: namespace/ns-2 已创建
- en: $ k get networkpolicy -n ns-2
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: $ k get networkpolicy -n ns-2
- en: NAME               POD-SELECTOR   AGE
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: NAME               POD-SELECTOR   AGE
- en: deny-all-traffic   <none>         15s
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: deny-all-traffic   <none>         15s
- en: '[PRE43]'
  id: totrans-538
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: $ kyverno version
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: $ kyverno version
- en: 'Version: 1.8.5'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 'Version: 1.8.5'
- en: 'Time: 2022-12-20T08:41:43Z'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 'Time: 2022-12-20T08:41:43Z'
- en: 'Git commit ID: c19061758dc4203106ab6d87a245045c20192721'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 'Git commit ID: c19061758dc4203106ab6d87a245045c20192721'
- en: '[PRE44]'
  id: totrans-543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: $ kyverno
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: $ kyverno
- en: Kubernetes Native Policy Management
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes原生策略管理
- en: 'Usage:'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 'Usage:'
- en: kyverno [command]
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: kyverno [command]
- en: 'Available Commands:'
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 可用命令：
- en: apply       applies policies on resources
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: apply       将策略应用于资源
- en: completion  Generate the autocompletion script for the specified shell
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: completion  生成指定Shell的自动补全脚本
- en: help        Help about any command
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: help        获取任何命令的帮助
- en: jp          Provides a command-line interface to JMESPath, enhanced with Kyverno
    specific custom functions
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: jp          提供一个命令行界面，用于JMESPath，并增强了Kyverno特定的自定义函数
- en: test        run tests from directory
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: test        从目录运行测试
- en: version     Shows current version of kyverno
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: version     显示当前版本的kyverno
- en: 'Flags:'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: 'Flags:'
- en: --add_dir_header           If true, adds the file directory to the header of
    the log messages
  id: totrans-556
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: --add_dir_header           如果为true，在日志消息的头部添加文件目录
- en: -h, --help                     help for kyverno
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: -h, --help                     kyverno的帮助信息
- en: --log_file string          If non-empty, use this log file (no effect when -logtostderr=true)
  id: totrans-558
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: --log_file string          如果不为空，使用此日志文件（当-logtostderr=true时无效）
- en: --log_file_max_size uint   Defines the maximum size a log file can grow to (no
    effect when -logtostderr=true). Unit is megabytes. If the value is 0, the maximum
    file size is unlimited. (default 1800)
  id: totrans-559
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: --log_file_max_size uint   定义日志文件最大增长的大小（当-logtostderr=true时无效）。单位为兆字节。如果值为0，则最大文件大小无限制。（默认值1800）
- en: --one_output               If true, only write logs to their native severity
    level (vs also writing to each lower severity level; no effect when -logtostderr=true)
  id: totrans-560
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: --one_output               如果为true，仅将日志写入其本机严重性级别（与将日志写入每个较低严重性级别的效果不同；当-logtostderr=true时无效）
- en: --skip_headers             If true, avoid header prefixes in the log messages
  id: totrans-561
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: --skip_headers             如果为true，避免在日志消息中使用头部前缀
- en: --skip_log_headers         If true, avoid headers when opening log files (no
    effect when -logtostderr=true)
  id: totrans-562
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: --skip_log_headers         如果为true，打开日志文件时避免显示头部（当-logtostderr=true时无效）
- en: -v, --v Level                  number for the log level verbosity
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: -v, --v Level                  设置日志级别的详细程度
- en: Use "kyverno [command] --help" for more information about a command.
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 "kyverno [command] --help" 获取关于命令的更多信息。
- en: '[PRE45]'
  id: totrans-565
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: $ k apply -f some-pod.yaml -o yaml --dry-run=server | yq '.spec.containers[0].imagePullPolicy'
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: $ k apply -f some-pod.yaml -o yaml --dry-run=server | yq '.spec.containers[0].imagePullPolicy'
- en: Always
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: Always
- en: '[PRE46]'
  id: totrans-568
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: $ kyverno apply mutate-image-pull-policy.yaml --resource some-pod.yaml
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: $ kyverno apply mutate-image-pull-policy.yaml --resource some-pod.yaml
- en: Applying 1 policy rule to 1 resource...
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: 将1个策略规则应用于1个资源...
- en: 'mutate policy set-image-pull-policy applied to default/Pod/some-pod:'
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: mutate policy set-image-pull-policy 已应用于 default/Pod/some-pod：
- en: 'apiVersion: v1'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 'apiVersion: v1'
- en: 'kind: Pod'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 'kind: Pod'
- en: 'metadata:'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: 'metadata:'
- en: 'name: some-pod'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 'name: some-pod'
- en: 'namespace: default'
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 'namespace: default'
- en: 'spec:'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 'spec:'
- en: 'containers:'
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: 'containers:'
- en: '- command:'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: '- command:'
- en: '- sleep'
  id: totrans-580
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- sleep'
- en: '- "9999"'
  id: totrans-581
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- "9999"'
- en: 'image: g1g1/py-kube:latest'
  id: totrans-582
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'image: g1g1/py-kube:latest'
- en: 'imagePullPolicy: IfNotPresent'
  id: totrans-583
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'imagePullPolicy: IfNotPresent'
- en: 'name: some-container'
  id: totrans-584
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'name: some-container'
- en: '---'
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: '---'
- en: 'pass: 1, fail: 0, warn: 0, error: 0, skip: 2'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: 'pass: 1, fail: 0, warn: 0, error: 0, skip: 2'
- en: '[PRE47]'
  id: totrans-587
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: $ cat some-pod.yaml
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: $ cat some-pod.yaml
- en: 'apiVersion: v1'
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: 'apiVersion: v1'
- en: 'kind: Pod'
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 'kind: Pod'
- en: 'metadata:'
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: 'metadata:'
- en: 'name: some-pod'
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: 'name: some-pod'
- en: 'spec:'
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: 'spec:'
- en: 'containers:'
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: 'containers:'
- en: '- name: some-container'
  id: totrans-595
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- name: some-container'
- en: 'image: g1g1/py-kube:latest'
  id: totrans-596
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'image: g1g1/py-kube:latest'
- en: 'command:'
  id: totrans-597
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'command:'
- en: '- sleep'
  id: totrans-598
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- sleep'
- en: '- "9999"'
  id: totrans-599
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- "9999"'
- en: '[PRE48]'
  id: totrans-600
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: $ cat some-pod.yaml | kyverno jp 'length(spec.containers[0].command) | subtract(@,
    `1`)'
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: $ cat some-pod.yaml | kyverno jp 'length(spec.containers[0].command) | subtract(@,
    `1`)'
- en: '1'
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: '1'
- en: '[PRE49]'
  id: totrans-603
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'name: <some name>'
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: 'name: <some name>'
- en: 'policies:'
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: 'policies:'
- en: '- <path/to/policy.yaml>'
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: '- <path/to/policy.yaml>'
- en: '- <path/to/policy.yaml>'
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: '- <path/to/policy.yaml>'
- en: 'resources:'
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: 'resources:'
- en: '- <path/to/resource.yaml>'
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: '- <path/to/resource.yaml>'
- en: '- <path/to/resource.yaml>'
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: '- <path/to/resource.yaml>'
- en: 'variables: variables.yaml # optional file for declaring variables'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: 'variables: variables.yaml # 可选文件，用于声明变量'
- en: 'userinfo: user_info.yaml # optional file for declaring admission request information
    (roles, cluster roles and subjects)'
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: 'userinfo: user_info.yaml # 可选文件，用于声明申请信息（角色、集群角色和主体）'
- en: 'results:'
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: 'results:'
- en: '- policy: <name>'
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: '- policy: <name>'
- en: 'rule: <name>'
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: 'rule: <name>'
- en: 'resource: <name>'
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: 'resource: <name>'
- en: 'resources: # optional, primarily for `validate` rules. One of either `resource`
    or `resources[]` must be specified. Use `resources[]` when a number of different
    resources should all share the same test result.'
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: 'resources: # 可选，主要用于`validate`规则。必须指定`resource`或`resources[]`中的一个。当多个不同的资源应该共享相同的测试结果时，使用`resources[]`。'
- en: '- <name_1>'
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: '- <name_1>'
- en: '- <name_2>'
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: '- <name_2>'
- en: 'namespace: <name> # when testing for a resource in a specific Namespace'
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: 'namespace: <name> # 测试特定命名空间中的资源时使用'
- en: 'patchedResource: <file_name.yaml> # when testing a mutate rule this field is
    required.'
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: 'patchedResource: <file_name.yaml> # 测试变更规则时此字段是必需的'
- en: 'generatedResource: <file_name.yaml> # when testing a generate rule this field
    is required.'
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: '生成资源: <file_name.yaml> # 在测试生成规则时，此字段是必需的。'
- en: 'kind: <kind>'
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: '类型: <kind>'
- en: 'result: pass'
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: '结果: 通过'
- en: '[PRE50]'
  id: totrans-625
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'name: test-some-rule'
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: '名称: test-some-rule'
- en: 'policies:'
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: '策略:'
- en: '- ../disallow-some-services-policy.yaml'
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: '- ../disallow-some-services-policy.yaml'
- en: 'resources:'
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: '资源:'
- en: '- test-service-ok.yaml'
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: '- test-service-ok.yaml'
- en: '- test-service-bad-name.yaml'
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: '- test-service-bad-name.yaml'
- en: '- test-service-bad-namespace.yaml'
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: '- test-service-bad-namespace.yaml'
- en: 'results:'
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: '结果:'
- en: '- policy: disallow-some-services'
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: '- 策略: disallow-some-services'
- en: 'rule: some-rule'
  id: totrans-635
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '规则: some-rule'
- en: 'resources:'
  id: totrans-636
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '资源:'
- en: '- service-ok'
  id: totrans-637
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- service-ok'
- en: 'kind: Service'
  id: totrans-638
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '类型: 服务'
- en: 'result: skip'
  id: totrans-639
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '结果: 跳过'
- en: '- policy: disallow-some-services'
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: '- 策略: disallow-some-services'
- en: 'rule: some-rule'
  id: totrans-641
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '规则: some-rule'
- en: 'resources:'
  id: totrans-642
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '资源:'
- en: '- service-1'
  id: totrans-643
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- service-1'
- en: 'kind: Service'
  id: totrans-644
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '类型: 服务'
- en: 'result: fail'
  id: totrans-645
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '结果: 失败'
- en: '- policy: disallow-some-services'
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: '- 策略: disallow-some-services'
- en: 'rule: some-rule'
  id: totrans-647
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '规则: some-rule'
- en: 'resources:'
  id: totrans-648
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '资源:'
- en: '- service-in-ns-1'
  id: totrans-649
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- service-in-ns-1'
- en: 'kind: Service'
  id: totrans-650
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '类型: 服务'
- en: 'namespace: ns-1'
  id: totrans-651
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '命名空间: ns-1'
- en: 'result: fail'
  id: totrans-652
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '结果: 失败'
- en: '[PRE51]'
  id: totrans-653
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '- policy: disallow-some-services'
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: '- 策略: disallow-some-services'
- en: 'rule: some-rule'
  id: totrans-655
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '规则: some-rule'
- en: 'resources:'
  id: totrans-656
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '资源:'
- en: '- service-ok'
  id: totrans-657
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- service-ok'
- en: 'result: skip'
  id: totrans-658
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '结果: 跳过'
- en: '[PRE52]'
  id: totrans-659
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '- policy: disallow-some-services'
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: '- 策略: disallow-some-services'
- en: 'rule: some-rule'
  id: totrans-661
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '规则: some-rule'
- en: 'resources:'
  id: totrans-662
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '资源:'
- en: '- service-1'
  id: totrans-663
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- service-1'
- en: 'kind: Service'
  id: totrans-664
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '类型: 服务'
- en: 'result: fail'
  id: totrans-665
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '结果: 失败'
- en: '[PRE53]'
  id: totrans-666
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'apiVersion: v1'
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: 'apiVersion: v1'
- en: 'kind: Service'
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: '类型: 服务'
- en: 'metadata:'
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: '元数据:'
- en: 'labels:'
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: '标签:'
- en: 'app: service-1'
  id: totrans-671
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '应用: service-1'
- en: 'name: service-1'
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: '名称: service-1'
- en: 'namespace: ns-2'
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: '命名空间: ns-2'
- en: 'spec:'
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: '规格:'
- en: 'ports:'
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: '端口:'
- en: '- name: https'
  id: totrans-676
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 名称: https'
- en: 'port: 443'
  id: totrans-677
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '端口: 443'
- en: 'targetPort: https'
  id: totrans-678
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '目标端口: https'
- en: 'selector:'
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: '选择器:'
- en: 'app: some-app'
  id: totrans-680
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '应用: some-app'
- en: '[PRE54]'
  id: totrans-681
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '- policy: disallow-some-services'
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: '- 策略: disallow-some-services'
- en: 'rule: some-rule'
  id: totrans-683
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '规则: some-rule'
- en: 'resources:'
  id: totrans-684
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '资源:'
- en: '- service-in-ns-1'
  id: totrans-685
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- service-in-ns-1'
- en: 'kind: Service'
  id: totrans-686
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '类型: 服务'
- en: 'namespace: ns-1'
  id: totrans-687
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '命名空间: ns-1'
- en: 'result: fail'
  id: totrans-688
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '结果: 失败'
- en: '[PRE55]'
  id: totrans-689
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: $ kyverno test .
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: $ kyverno 测试 .
- en: Executing test-some-rule...
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: 执行 test-some-rule...
- en: applying 1 policy to 3 resources...
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: 应用 1 个策略到 3 个资源...
- en: │───│────────────────────────│───────────│──────────────────────────────│────────│
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: │───│────────────────────────│───────────│──────────────────────────────│────────│
- en: '│ # │ POLICY                 │ RULE      │ RESOURCE                     │ RESULT
    │'
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: '│ # │ 策略                     │ 规则      │ 资源                         │ 结果 │'
- en: │───│────────────────────────│───────────│──────────────────────────────│────────│
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: │───│────────────────────────│───────────│──────────────────────────────│────────│
- en: │ 1 │ disallow-some-services │ some-rule │ ns-2//service-ok             │ Pass   │
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: │ 1 │ disallow-some-services │ some-rule │ ns-2//service-ok             │ 通过   │
- en: │ 2 │ disallow-some-services │ some-rule │ ns-2/Service/service-1       │ Pass   │
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: │ 2 │ disallow-some-services │ some-rule │ ns-2/Service/service-1       │ 通过   │
- en: │ 3 │ disallow-some-services │ some-rule │ ns-1/Service/service-in-ns-1 │ Pass   │
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: │ 3 │ disallow-some-services │ some-rule │ ns-1/Service/service-in-ns-1 │ 通过   │
- en: │───│────────────────────────│───────────│──────────────────────────────│────────│
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: │───│────────────────────────│───────────│──────────────────────────────│────────│
- en: 'Test Summary: 3 tests passed and 0 tests failed'
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: '测试总结: 3个测试通过，0个测试失败'
- en: '[PRE56]'
  id: totrans-701
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: kyverno test . --test-case-selector "policy=disallow-some-services, rule=some-rule,
    resource=service-ok"
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: kyverno 测试 . --test-case-selector "policy=disallow-some-services, rule=some-rule,
    resource=service-ok"
- en: '[PRE57]'
  id: totrans-703
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: $ k create service clusterip service-3 -n ns-1 --tcp=80
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: $ k 创建 服务 clusterip service-3 -n ns-1 --tcp=80
- en: service/service-3 created
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: 服务/service-3 创建
- en: '[PRE58]'
  id: totrans-706
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: $ k get polr -n ns-1
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: $ k 获取 polr -n ns-1
- en: NAME                          PASS   FAIL   WARN   ERROR   SKIP   AGE
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: 名称                          通过   失败   警告   错误   跳过   时长
- en: cpol-disallow-some-services   0      1      0      0       0      1m
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: cpol-disallow-some-services   0      1      0      0       0      1m
- en: '[PRE59]'
  id: totrans-710
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: $ k create service clusterip service-4 -n ns-1 --tcp=80
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: $ k 创建 服务 clusterip service-4 -n ns-1 --tcp=80
- en: service/service-4 created
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
  zh: 服务/service-4 创建
- en: $ k get polr -n ns-1
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: $ k 获取 polr -n ns-1
- en: NAME                          PASS   FAIL   WARN   ERROR   SKIP   AGE
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: 名称                          通过   失败   警告   错误   跳过   时长
- en: cpol-disallow-some-services   0      2      0      0       0      2m
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: cpol-disallow-some-services   0      2      0      0       0      2m
- en: '[PRE60]'
  id: totrans-716
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: $ k get polr cpol-disallow-some-services -n ns-1 -o yaml
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: $ k 获取 polr cpol-disallow-some-services -n ns-1 -o yaml
- en: 'apiVersion: wgpolicyk8s.io/v1alpha2'
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: 'apiVersion: wgpolicyk8s.io/v1alpha2'
- en: 'kind: PolicyReport'
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: '类型: PolicyReport'
- en: 'metadata:'
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: '元数据:'
- en: 'creationTimestamp: "2023-01-22T04:01:12Z"'
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: '创建时间戳: "2023-01-22T04:01:12Z"'
- en: 'generation: 3'
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: '生成: 3'
- en: 'labels:'
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: '标签:'
- en: 'app.kubernetes.io/managed-by: kyverno'
  id: totrans-724
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'app.kubernetes.io/managed-by: kyverno'
- en: 'cpol.kyverno.io/disallow-some-services: "2472317"'
  id: totrans-725
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'cpol.kyverno.io/disallow-some-services: "2472317"'
- en: 'name: cpol-disallow-some-services'
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: '名称: cpol-disallow-some-services'
- en: 'namespace: ns-1'
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: '命名空间: ns-1'
- en: 'resourceVersion: "2475547"'
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: '资源版本: "2475547"'
- en: 'uid: dadcd6ae-a867-4ec8-bf09-3e6ca76da7ba'
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: 'uid: dadcd6ae-a867-4ec8-bf09-3e6ca76da7ba'
- en: 'results:'
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: '结果:'
- en: '- message: services named service-1 and service-2 and  any service in namespace
    ns-1'
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: '- 消息: 服务名为 service-1 和 service-2，以及命名空间 ns-1 中的任何服务'
- en: are not allowed
  id: totrans-732
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不允许
- en: 'policy: disallow-some-services'
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
  zh: '策略: disallow-some-services'
- en: 'resources:'
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: '资源:'
- en: '- apiVersion: v1'
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: '- apiVersion: v1'
- en: 'kind: Service'
  id: totrans-736
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '类型: 服务'
- en: 'name: service-4'
  id: totrans-737
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '名称: service-4'
- en: 'namespace: ns-1'
  id: totrans-738
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '命名空间: ns-1'
- en: 'uid: 4d473ac1-c1b1-4929-a70d-fad98a411428'
  id: totrans-739
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'uid: 4d473ac1-c1b1-4929-a70d-fad98a411428'
- en: 'result: fail'
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
  zh: 结果：失败
- en: 'rule: some-rule'
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: 规则：some-rule
- en: 'scored: true'
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
  zh: 已评分：true
- en: 'source: kyverno'
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
  zh: 来源：kyverno
- en: 'timestamp:'
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
  zh: 时间戳：
- en: 'nanos: 0'
  id: totrans-745
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 纳秒：0
- en: 'seconds: 1674361576'
  id: totrans-746
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 秒数：1674361576
- en: '- message: services named service-1 and service-2 and  any service in namespace
    ns-1'
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
  zh: '- 消息：名为 service-1 和 service-2 的服务，以及命名空间 ns-1 中的任何服务'
- en: are not allowed
  id: totrans-748
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不允许
- en: 'policy: disallow-some-services'
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
  zh: 策略：disallow-some-services
- en: 'resources:'
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: 资源：
- en: '- apiVersion: v1'
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
  zh: '- apiVersion: v1'
- en: 'kind: Service'
  id: totrans-752
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类型：Service
- en: 'name: service-3'
  id: totrans-753
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 名称：service-3
- en: 'namespace: ns-1'
  id: totrans-754
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 命名空间：ns-1
- en: 'uid: 62458ac4-fe39-4854-9f5a-18b26109511a'
  id: totrans-755
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'uid: 62458ac4-fe39-4854-9f5a-18b26109511a'
- en: 'result: fail'
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: 结果：失败
- en: 'rule: some-rule'
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
  zh: 规则：some-rule
- en: 'scored: true'
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: 已评分：true
- en: 'source: kyverno'
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: 来源：kyverno
- en: 'timestamp:'
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
  zh: 时间戳：
- en: 'nanos: 0'
  id: totrans-761
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 纳秒：0
- en: 'seconds: 1674361426'
  id: totrans-762
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 秒数：1674361426
- en: 'summary:'
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: 摘要：
- en: 'error: 0'
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: 错误：0
- en: 'fail: 2'
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: 失败：2
- en: 'pass: 0'
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
  zh: 通过：0
- en: 'skip: 0'
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: 跳过：0
- en: 'warn: 0'
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
  zh: 警告：0
- en: '[PRE61]'
  id: totrans-769
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: $ helm repo add policy-reporter https://kyverno.github.io/policy-reporter
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: $ helm repo add policy-reporter https://kyverno.github.io/policy-reporter
- en: '"policy-reporter" has been added to your repositories'
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: “policy-reporter”已添加到您的仓库
- en: $ helm repo update
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: $ helm repo update
- en: Hang tight while we grab the latest from your chart repositories...
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: 请稍等，我们正在从您的图表仓库中获取最新信息...
- en: '...Successfully got an update from the "policy-reporter" chart repository'
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: '...成功从 "policy-reporter" 图表仓库获取更新'
- en: '...Successfully got an update from the "kyverno" chart repository'
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: '...成功从 "kyverno" 图表仓库获取更新'
- en: Update Complete. ![](img/B18998_09_001.png)Happy Helming!![](img/B18998_09_001.png)
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: 更新完成。 ![](img/B18998_09_001.png)祝您使用 Helm 愉快！！[](img/B18998_09_001.png)
- en: $ helm upgrade --install policy-reporter policy-reporter/policy-reporter --create-namespace
    -n policy-reporter --set ui.enabled=true
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: $ helm upgrade --install policy-reporter policy-reporter/policy-reporter --create-namespace
    -n policy-reporter --set ui.enabled=true
- en: Release "policy-reporter" does not exist. Installing it now.
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
  zh: 发布的“policy-reporter”不存在。现在正在安装。
- en: 'NAME: policy-reporter'
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: 名称：policy-reporter
- en: 'LAST DEPLOYED: Sat Jan 21 20:39:42 2023'
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: 最后部署时间：2023 年 1 月 21 日 20:39:42
- en: 'NAMESPACE: policy-reporter'
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间：policy-reporter
- en: 'STATUS: deployed'
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
  zh: 状态：已部署
- en: 'REVISION: 1'
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: 修订版：1
- en: 'TEST SUITE: None'
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
  zh: 测试套件：无
- en: '[PRE62]'
  id: totrans-785
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: $ k port-forward service/policy-reporter-ui 8080:8080 -n policy-reporter
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
  zh: $ k port-forward service/policy-reporter-ui 8080:8080 -n policy-reporter
- en: Forwarding from 127.0.0.1:8080 -> 8080
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
  zh: 正在从 127.0.0.1:8080 转发 -> 8080
- en: Forwarding from [::1]:8080 -> 8080
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: 正在从 [::1]:8080 转发 -> 8080
- en: '```'
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Now, we can browse `http://localhost:8080` and view policy reports visually.
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以浏览 `http://localhost:8080` 并直观地查看策略报告。
- en: The dashboard shows the failing policy reports. We can see our 20 failures in
    the `kube-system` namespace and our 2 failures in the `ns-1` namespace.
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: 仪表板显示失败的策略报告。我们可以看到在 `kube-system` 命名空间中的 20 个失败，以及在 `ns-1` 命名空间中的 2 个失败。
- en: '![Policy Reporter UI - Dashboard](img/B18998_16_07.png)'
  id: totrans-792
  prefs: []
  type: TYPE_IMG
  zh: '![策略报告仪表板 UI](img/B18998_16_07.png)'
- en: 'Figure 16.7: Policy Reporter UI – Dashboard'
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.7：策略报告仪表板 UI
- en: The failures in kube-system are due to the best practice security policies we
    installed with Kyverno.
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
  zh: kube-system 中的故障是由于我们与 Kyverno 一起安装的最佳实践安全策略导致的。
- en: 'We can scroll down and see more details about the failures:'
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以向下滚动并查看有关失败的更多详细信息：
- en: '![Title: Inserting image...](img/B18998_16_08.png)'
  id: totrans-796
  prefs: []
  type: TYPE_IMG
  zh: '![标题：插入图片...](img/B18998_16_08.png)'
- en: 'Figure 16.8: Policy Reporter UI – Results'
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.8：策略报告仪表板 UI – 结果
- en: 'We can also select from the sidebar the “Policy Reports” option and then see
    passing results. We can also filter policy reports using different criteria like
    policies, kinds, categories, severities, and namespaces:'
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以从侧边栏选择“策略报告”选项，然后查看通过的结果。我们还可以通过不同的标准过滤策略报告，例如策略、种类、类别、严重性和命名空间：
- en: '![Policy Reporter UI - Policy Reports](img/B18998_16_09.png)'
  id: totrans-799
  prefs: []
  type: TYPE_IMG
  zh: '![策略报告仪表板 UI – 策略报告](img/B18998_16_09.png)'
- en: 'Figure 16.9: Policy Reporter UI – Policy Reports'
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.9：策略报告仪表板 UI – 策略报告
- en: Overall, the policy reporter UI has a slick look and provides a great option
    for exploring, filtering, and searching policy reports.
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，策略报告 UI 具有流畅的外观，提供了一个很好的选项，用于浏览、筛选和搜索策略报告。
- en: Summary
  id: totrans-802
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered the increasing adoption of Kubernetes in large enterprise
    organizations and the importance of governance in managing these deployments.
    We looked at the concept of policy engines and how they are built on top of the
    Kubernetes admission control mechanism. We discussed how policy engines are used
    to address security, compliance, and governance concerns. We also provided a review
    of popular policy engines. Finally, we did a deep dive into Kyverno, in which
    we explained in detail how it works. Then, we jumped in, wrote some policies,
    tested them, and reviewed policy reports. If you run a non-trivial production
    system on Kubernetes, you should very seriously consider having Kyverno (or another
    policy engine) as a core component. This is a perfect segue to the next chapter
    where we will discuss Kubernetes in production.
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL

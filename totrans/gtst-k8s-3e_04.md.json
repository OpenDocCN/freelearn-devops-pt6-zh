["```\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: node-js-deploy\n  labels:\n    name: node-js-deploy\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        name: node-js-deploy\n    spec:\n      containers:\n      - name: node-js-deploy\n        image: jonbaier/pod-scaling:0.1\n        ports:\n        - containerPort: 80\n```", "```\n$ kubectl get pods -l name=node-js-deploy \n```", "```\n$ kubectl get deployments\n```", "```\napiVersion: v1\nkind: Service\nmetadata:\n  name: node-js-deploy\n  labels:\n    name: node-js-deploy\nspec:\n  type: LoadBalancer\n  ports:\n  - port: 80\n  sessionAffinity: ClientIP\n  selector:\n    name: node-js-deploy\n```", "```\n$ kubectl scale deployment node-js-deploy --replicas 3\n```", "```\n$ kubectl autoscale deployment node-js-deploy --min=25 --max=30 --cpu-percent=75\ndeployment \"node-js-deploy\" autoscaled\n```", "```\n$ kubectl get pods -l name=node-js-deploy\n```", "```\n$ kubectl describe pod/{POD_NAME_FROM_YOUR_LISTING} | grep Image:\n```", "```\n$ kubectl set image deployment/node-js-deploy node-js-deploy=jonbaier/pod-scaling:0.2\n$ deployment \"node-js-deploy\" image updated\n```", "```\n$ kubectl rollout status deployment/node-js-deploy\n```", "```\n$ kubectl rollout status deployment/node-js-deployment\nWaiting for rollout to finish: 2 out of 3 new replicas have been updated...\ndeployment \"node-js-deployment\" successfully rolled out\n```", "```\n$ kubectl get rs\nNAME                               DESIRED CURRENT READY AGE\nnode-js-deploy-1556879905          3       3       3     46s\nnode-js-deploy-4657899444          0       0       0     85s\n```", "```\n$ kubectl set image deployment/node-js-deploy node-js-deploy=jonbaier/pod-scaling:0.3\n$ deployment \"node-js-deploy\" image updated \n```", "```\n$ kubectl get pods -l name=node-js-deploy\n```", "```\n$ kubectl rollout history deployment/node-js-deploy \n```", "```\n$ kubectl set image deployment/node-js-deploy node-js-deploy=jonbaier/pod-scaling:42.0\n```", "```\n$ kubectl rollout status deployment/node-js-deploy\nWaiting for rollout to finish: 2 out of 3 new replicas have been updated... \n```", "```\n$ kubectl get pods -l name=node-js-deploy\n```", "```\n$ kubectl rollout undo deployment/node-js-deploy\n```", "```\napiVersion: autoscaling/v2beta1\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: node-js-deploy\nspec:\n  minReplicas: 3\n  maxReplicas: 6\n  scaleTargetRef:\n    apiVersion: v1\n    kind: Deployment\n    name: node-js-deploy\n  targetCPUUtilizationPercentage: 10\n```", "```\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: boomload-deploy\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: loadgenerator-deploy\n    spec:\n      containers:\n      - image: williamyeh/boom\n        name: boom-deploy\n        command: [\"/bin/sh\",\"-c\"]\n        args: [\"while true ; do boom http://node-js-deploy/ -c 100 -n 500 ; sleep 1 ; done\"]\n```", "```\n$ kubectl delete deploy boomload-deploy\n```", "```\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: long-task\nspec:\n  template:\n    metadata:\n      name: long-task\n    spec:\n      containers:\n      - name: long-task\n        image: docker/whalesay\n        command: [\"cowsay\", \"Finishing that task in a jiffy\"]\n      restartPolicy: OnFailure\n```", "```\n$ kubectl create -f longtask.yaml\n```", "```\n$ kubectl describe jobs/long-task\n```", "```\napiVersion: batch/v2alpha1\nkind: CronJob\nmetadata:\n  name: long-task-cron\nspec:\n  schedule: \"15 10 * * 6\"\n  jobTemplate:\n    spec:\n      template:\n        spec:\n          containers:\n          - name: long-task-cron\n            image: docker/whalesay\n            command: [\"cowsay\", \"Developers! Developers! Developers!\n          \\n\\n Saturday task    \n            complete!\"]\n          restartPolicy: OnFailure\n```", "```\n$ kubectl rollout history ds example-app --revision=2 \n```", "```\n$ kubectl get ds --namespace=kube-system\n```", "```\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: node-problem-detector-v0.1\n  namespace: kube-system\n  labels:\n    k8s-app: node-problem-detector\n    version: v0.1\n    kubernetes.io/cluster-service: \"true\"\nspec:\n  template:\n    metadata:\n      labels:\n        k8s-app: node-problem-detector\n        version: v0.1\n        kubernetes.io/cluster-service: \"true\"\n    spec:\n      hostNetwork: true\n      containers:\n      - name: node-problem-detector\n        image: gcr.io/google_containers/node-problem-detector:v0.1\n        securityContext:\n          privileged: true\n        resources:\n          limits:\n            cpu: \"200m\"\n            memory: \"100Mi\"\n          requests:\n            cpu: \"20m\"\n            memory: \"20Mi\"\n        volumeMounts:\n        - name: log\n          mountPath: /log\n          readOnly: true\n        volumes:\n        - name: log\n          hostPath:\n            path: /var/log/\n```", "```\n$ kubectl get nodes\n```", "```\n$ kubectl describe node <node-name>\n```", "```\n$ kubectl label nodes <node-name> nodenickname=trusty-steve\n```", "```\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: long-task-ns\nspec:\n  template:\n    metadata:\n      name: long-task-ns\n    spec:\n      containers:\n      - name: long-task-ns\n        image: docker/whalesay\n        command: [\"cowsay\", \"Finishing that task in a jiffy\"]\n      restartPolicy: OnFailure\n      nodeSelector:\n        nodenickname: trusty-steve\n```", "```\n$ kubectl get pods -a -l job-name=long-task-ns\n```", "```\n$ kubectl describe pod <Pod-Name-For-Job> | grep Node:\n```"]
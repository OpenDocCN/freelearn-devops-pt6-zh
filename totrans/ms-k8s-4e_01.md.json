["```\nrole = webserver \n```", "```\nrole = webserver, application != foo \n```", "```\nrole in (webserver, backend) \n```", "```\n/api/v1\n/api/v2alpha1 \n```", "```\n--runtime-config=autoscaling/v1=false,autoscaling/v2beta2=true \n```", "```\nGET /api/v1/pods \n```", "```\npackage cloudprovider\nimport (\n    \"context\"\n    \"errors\"\n    \"fmt\"\n    \"strings\"\n    v1 \"k8s.io/api/core/v1\"\n    \"k8s.io/apimachinery/pkg/types\"\n    \"k8s.io/client-go/informers\"\n    clientset \"k8s.io/client-go/kubernetes\"\n    restclient \"k8s.io/client-go/rest\"\n)\n// Interface is an abstract, pluggable interface for cloud providers.\ntype Interface interface {\n    Initialize(clientBuilder ControllerClientBuilder, stop <-chan struct{})\n    LoadBalancer() (LoadBalancer, bool)\n    Instances() (Instances, bool)\n    InstancesV2() (InstancesV2, bool)\n    Zones() (Zones, bool)\n    Clusters() (Clusters, bool)\n    Routes() (Routes, bool)\n    ProviderName() string\n    HasClusterID() bool\n} \n```", "```\ntype LoadBalancer interface {\n    GetLoadBalancer(ctx context.Context, clusterName string, service *v1.Service) (status *v1.LoadBalancerStatus, exists bool, err error)\t\n    GetLoadBalancerName(ctx context.Context, clusterName string, service *v1.Service) string\n    EnsureLoadBalancer(ctx context.Context, clusterName string, service *v1.Service, nodes []*v1.Node) (*v1.LoadBalancerStatus, error)\n    UpdateLoadBalancer(ctx context.Context, clusterName string, service *v1.Service, nodes []*v1.Node) error\n    EnsureLoadBalancerDeleted(ctx context.Context, clusterName string, service *v1.Service) error\n} \n```", "```\nservice ImageService {\n    rpc ListImages(ListImagesRequest) returns (ListImagesResponse) {}\n    rpc ImageStatus(ImageStatusRequest) returns (ImageStatusResponse) {}\n    rpc PullImage(PullImageRequest) returns (PullImageResponse) {}\n    rpc RemoveImage(RemoveImageRequest) returns (RemoveImageResponse) {}\n    rpc ImageFsInfo(ImageFsInfoRequest) returns (ImageFsInfoResponse) {}\n} \n```", "```\nservice RuntimeService {\n    rpc Version(VersionRequest) returns (VersionResponse) {}\n    rpc RunPodSandbox(RunPodSandboxRequest) returns (RunPodSandboxResponse) {}\n    rpc StopPodSandbox(StopPodSandboxRequest) returns (StopPodSandboxResponse) {}\n    rpc RemovePodSandbox(RemovePodSandboxRequest) returns (RemovePodSandboxResponse) {}\n    rpc PodSandboxStatus(PodSandboxStatusRequest) returns (PodSandboxStatusResponse) {}\n    rpc ListPodSandbox(ListPodSandboxRequest) returns (ListPodSandboxResponse) {}\n    rpc CreateContainer(CreateContainerRequest) returns (CreateContainerResponse) {}\n    rpc StartContainer(StartContainerRequest) returns (StartContainerResponse) {}\n    rpc StopContainer(StopContainerRequest) returns (StopContainerResponse) {}\n    rpc RemoveContainer(RemoveContainerRequest) returns (RemoveContainerResponse) {}\n    rpc ListContainers(ListContainersRequest) returns (ListContainersResponse) {}\n    rpc ContainerStatus(ContainerStatusRequest) returns (ContainerStatusResponse) {}\n    rpc UpdateContainerResources(UpdateContainerResourcesRequest) returns (UpdateContainerResourcesResponse) {}\n    rpc ExecSync(ExecSyncRequest) returns (ExecSyncResponse) {}\n    rpc Exec(ExecRequest) returns (ExecResponse) {}\n    rpc Attach(AttachRequest) returns (AttachResponse) {}\n    rpc PortForward(PortForwardRequest) returns (PortForwardResponse) {}\n    rpc ContainerStats(ContainerStatsRequest) returns (ContainerStatsResponse) {}\n    rpc ListContainerStats(ListContainerStatsRequest) returns (ListContainerStatsResponse) {}\n    rpc UpdateRuntimeConfig(UpdateRuntimeConfigRequest) returns (UpdateRuntimeConfigResponse) {}\n    rpc Status(StatusRequest) returns (StatusResponse) {}\n} \n```", "```\nmessage CreateContainerRequest {\n    string pod_sandbox_id = 1;\n    ContainerConfig config = 2;\n    PodSandboxConfig sandbox_config = 3;\n} \n```"]
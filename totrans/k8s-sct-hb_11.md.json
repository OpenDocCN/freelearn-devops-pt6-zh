["```\nservices:\n  vault_node_1:\n    image: vault:1.13.3\n    container_name: vault_node_1\n    ports:\n      - \"8200:8200\"\n    environment:\n      VAULT_DEV_LISTEN_ADDRESS: \"0.0.0.0:8200\"\n      VAULT_DEV_ROOT_TOKEN_ID: mytoken\n      VAULT_LOG_LEVEL: debug\n    volumes:\n      - haproxy.cfg:/haproxy.cfg\n```", "```\n$ docker compose up\n```", "```\n$ docker run -p 8200:8200 --rm -v haproxy.cfg:/haproxy.cfg  --name vault_node_1  -e VAULT_DEV_ROOT_TOKEN_ID=mytoken -e VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200 -e VAULT_LOG_LEVEL=debug vault:1.13.3\n```", "```\n$ EXTERNAL_VAULT_ADDR=$(minikube ssh \"dig +short host.docker.internal\" | tr -d '\\r')\n```", "```\n$ helm repo add hashicorp https://helm.releases.hashicorp.com\n$ helm repo update\n$ helm install vault hashicorp/vault --set \"global.externalVaultAddr=http://$EXTERNAL_VAULT_ADDR :8200\" --set=\"csi.enabled=true\"\n```", "```\n$ kubectl get deployment vault-agent-injector\nNAME                   READY   UP-TO-DATE   AVAILABLE   AGE\nvault-agent-injector   1/1     1            1           3h40m\n```", "```\n$ kubectl get clusterrole vault-agent-injector-clusterrole -o yaml\nkind: ClusterRole\nmetadata:\n...\n  name: vault-agent-injector-clusterrole\nrules:\n- apiGroups:\n  - admissionregistration.k8s.io\n  resources:\n  - mutatingwebhookconfigurations\n  verbs:\n  - get\n  - list\n  - watch\n  - patch\n```", "```\nvault.hashicorp.com/agent-inject: 'true'\nvault.hashicorp.com/role: 'webapp_admin_r'\nvault.hashicorp.com/agent-inject-secret-credentials.txt: 'secret/data/webapp/admin'\n```", "```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: vault-sa-token\n  annotations:\n    kubernetes.io/service-account.name: vault\ntype: kubernetes.io/service-account-token\n```", "```\n$ kubectl apply –f vault-secret.yaml\n```", "```\n# retrieve Kubernetes secret for the service account\n$ VAULT_HELM_SECRET_NAME=$(kubectl get secrets --output=json | jq -r '.items[].metadata | select(.name|startswith(\"vault\")).name')\n# retrieve service account token\n$ TOKEN_REVIEW_JWT=$(kubectl get secret $VAULT_HELM_SECRET_NAME --output='go-template={{ .data.token }}' | base64 --decode)\n# retrieve Kubernetes certificate\n$ KUBE_CA_CERT=$(kubectl config view --raw --minify --flatten --output='jsonpath={.clusters[].cluster.certificate-authority-data}' | base64 --decode)\n# retrieve the Kubernetes host\n$ KUBE_HOST=$(kubectl config view --raw --minify --flatten --output='jsonpath={.clusters[].cluster.server}')\n# point to local vault address\n$ export VAULT_ADDR=http://0.0.0.0:8200\n# login to vault using the root token\n$ vault login mytoken\n# enabled kubernetes authentication on vault\n$ vault auth enable kubernetes\n# write Kubernetes authentication configuration\n$ vault write auth/kubernetes/config token_reviewer_jwt=\"$TOKEN_REVIEW_JWT\" kubernetes_host=\"$KUBE_HOST\" kubernetes_ca_cert=\"$KUBE_CA_CERT\" issuer=\"https://kubernetes.default.svc.cluster.local\"\n```", "```\n$ KUBE_HOST=$(kubectl config view --raw --minify --flatten --output='jsonpath={.clusters[].cluster.server}')\n$ port=$(echo $KUBE_HOST | awk -F/ '{print $3}' | cut -d: -f2)\n$ docker exec -it vault_node_1 sh\n# apk add haproxy\n# haproxy -f ./haproxy.cfg\n```", "```\n$ vault audit enable file file_path=/tmp/vault_audit.log\n```", "```\n$ docker exec -it  vault_node_1  tail –f /tmp/vault_audit.log\n```", "```\n$ vault kv put secret/webapp/admin username='john.doe' password='strong-password'\n```", "```\n$ vault policy write webapp_admin_r  - <<EOF path \"secret/data/webapp/admin\" { capabilities = [\"read\"] } EOF\n```", "```\n$ vault write auth/kubernetes/role/webapp_admin_r \\\n     bound_service_account_names=simple-app \\\n     bound_service_account_namespaces=default \\\n     policies=webapp_admin_r \\\n     ttl=24h\n```", "```\n$ kubectl create sa simple-app\n```", "```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: role-tokenreview-binding\n  namespace: default\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:auth-delegator\nsubjects:\n  - kind: ServiceAccount\n    name: simple-app\n    namespace: default\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: webapp\n  labels:\n    app: webapp\n  annotations:\n    vault.hashicorp.com/agent-inject: 'true'\n    vault.hashicorp.com/role: 'webapp_admin_r'\n    vault.hashicorp.com/agent-inject-secret-credentials.txt: 'secret/data/webapp/admin'\nspec:\n  serviceAccountName: simple-app\n  containers:\n  - name: app\n    image: nginx\n```", "```\n$ kubectl exec -it webapp -c app -- cat /vault/secrets/credentials.txt\ndata: map[password:strong-password username:john.doe]\nmetadata: map[created_time:2023-10-08T19:23:50.814986175Z custom_metadata:<nil> deletion_time: destroyed:false version:1]\n```", "```\n$ helm repo add secrets-store-csi-driver https://kubernetes-sigs.github.io/secrets-store-csi-driver/charts\n$ helm install csi-secrets-store secrets-store-csi-driver/secrets-store-csi-driver --namespace kube-system\n```", "```\napiVersion: secrets-store.csi.x-k8s.io/v1alpha1\nkind: SecretProviderClass\nmetadata:\n  name: vault-up-creds\n  namespace: default\nspec:\n  provider: vault\n  parameters:\n    roleName: 'devweb-app'\n    objects: |\n    - objectName: \"username\"\n      secretPath: \"secret/data/devwebapp/config\"\n      secretKey: \"username\"\n    - objectName: \"password\"\n      secretPath: \"secret/data/devwebapp/config\"\n      secretKey: \"password\"\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      serviceAccountName: simple-app\n      containers:\n      - name: nginx-container\n        image: nginx:latest\n        ports:\n        - containerPort: 80\n        volumeMounts:\n        - name: 'vault-up-creds'\n      mountPath: '/mnt/secrets-store'\n      readOnly: true\n    volumes:\n    - name: vault-up-creds\n      csi:\n        driver: 'secrets-store.csi.k8s.io'\n        readOnly: true\n        volumeAttributes:\n          secretProviderClass: 'vault-up-creds'\n```", "```\ncat > helm-vault-raft-values.yml <<EOF\nserver:\n  affinity: \"\"\n  ha:\n    enabled: true\n    replicas: 3\n    raft:\n      enabled: true\nEOF\n```", "```\n$ helm repo add hashicorp https://helm.releases.hashicorp.com\n$ helm repo update\n$ helm install vault hashicorp/vault --values helm-vault-raft-values.yml\n```", "```\n$ kubectl logs -f vault-0\n2023-10-11T21:01:25.268Z [INFO]  core: security barrier not initialized\n```", "```\nkubectl exec vault-0 -- vault operator init -key-shares=1 -key-threshold=1 -format=json > cluster-keys.json\n```", "```\n{\n  \"unseal_keys_b64\": [\n    \"the-unseal-key\"\n  ],\n  \"unseal_keys_hex\": [\n    \"the-unseal-key-hex\"\n  ],\n  \"unseal_shares\": 1,\n  \"unseal_threshold\": 1,\n  \"recovery_keys_b64\": [],\n  \"recovery_keys_hex\": [],\n  \"recovery_keys_shares\": 0,\n  \"recovery_keys_threshold\": 0,\n  \"root_token\": \"root-token\"\n}\n```", "```\n$ VAULT_UNSEAL_KEY=$(jq -r \".unseal_keys_b64[]\" cluster-keys.json)\n$ kubectl exec vault-0 -- vault operator unseal $VAULT_UNSEAL_KEY\n```", "```\n$ kubectl exec -ti vault-1 -- vault operator raft join http://vault-0.vault-internal:8200\n$ kubectl exec -ti vault-2 -- vault operator raft join http://vault-0.vault-internal:8200\n```", "```\n$ kubectl exec vault-1 -- vault operator unseal $VAULT_UNSEAL_KEY\n$ kubectl exec vault-2 -- vault operator unseal $VAULT_UNSEAL_KEY\n```", "```\n$ kubectl port-forward vault-0 8200:8200\n```", "```\n#point Vault CLI to localhost\n$ export VAULT_ADDR=http://0.0.0.0:8200\n# extract vault root token\n$ VAULT_ROOT_TOKEN=$(jq -r \".root_token\" cluster-keys.json)\n#login with root token\n$ vault login $VAULT_ROOT_TOKEN\n# use the kv-v2 secrets engine on path secret\n$ vault secrets enable -path=secret kv-v2\n# put secret\n$ vault kv put secret/webapp/config username=\"static-user\" password=\"static-password\"\n```", "```\n$ kubectl port-forward vault-1 8200:8200\n```", "```\n$ vault kv get secret/webapp/config\n```", "```\n$ vault kv get secret/webapp/config\n...\n====== Data ======\nKey         Value\n---         -----\npassword    static-password\nusername    static-user\n```", "```\n$ vault kv destroy -mount=secret -versions=5 secret/webapp/admin\n```", "```\n# SELECT*FROM secrets;\nresource_id           |version |value|expires_at\n----------------------+--------+-----+------------\nacccount:variable:test|1       |\\x4..|\n(1 row)\n```", "```\n- !policy\n  id: ExamplePolicy\n  body:\n  - !host webApp\n  - !variable secretVar\n  - !permit\n    role: !host webApp\n    privileges: [read, execute]\n    resource: !variable secretVar\n```", "```\n{\n  \"subject@43868\": {\n    \"resource\": \"demo:group:security_ops\"\n  },\n  \"policy@43868\": {\n    \"version\": \"1\",\n    \"id\": \"demo:policy:root\"\n  },\n  \"auth@43868\": {\n    \"user\": \"demo:user:admin\"\n  },\n  \"action@43868\": {\n    \"operation\": \"add\"\n  },\n  \"PROGRAM\": \"conjur\",\n  \"PID\": \"e9c07c05-4dc2-4809-b7e1-43f5d3a20599\",\n  \"MSGID\": \"policy\",\n  \"MESSAGE\": \"demo:user:admin added resource demo:group:security_ops\",\n  \"LEVEL\": \"notice\",\n  \"ISODATE\": \"2020-04-14T20:40:24.806+00:00\",\n  \"FACILITY\": \"auth\"\n}\n```"]
- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Packaging Applications
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打包应用程序
- en: In this chapter, we are going to look into Helm, the popular Kubernetes package
    manager. Every successful and non-trivial platform must have a good packaging
    system. Helm was developed by Deis (acquired by Microsoft in April 2017) and later
    contributed to the Kubernetes project directly. It became a CNCF project in 2018\.
    We will start by understanding the motivation for Helm, its architecture, and
    its components. Then, we’ll get hands-on and see how to use Helm and its charts
    within Kubernetes. That includes finding, installing, customizing, deleting, and
    managing charts. Last but not least, we’ll cover how to create your own charts
    and handle versioning, dependencies, and templating.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将探讨 Helm，这个流行的 Kubernetes 包管理工具。每一个成功且非平凡的平台都必须拥有一个良好的打包系统。Helm 是由 Deis
    开发的（Deis 于 2017 年 4 月被微软收购），后来直接贡献给 Kubernetes 项目。它在 2018 年成为 CNCF 项目。我们将从理解 Helm
    的动机、架构和组件开始。然后，我们将动手实践，看看如何在 Kubernetes 中使用 Helm 和其图表。这包括查找、安装、定制、删除和管理图表。最后，我们将讨论如何创建自己的图表以及如何处理版本控制、依赖关系和模板化。
- en: 'The topics we will cover are as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论的主题如下：
- en: Understanding Helm
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 Helm
- en: Using Helm
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Helm
- en: Creating your own charts
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建你自己的图表
- en: Helm alternatives
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Helm 替代品
- en: Understanding Helm
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Helm
- en: Kubernetes provides many ways to organize and orchestrate your containers at
    runtime, but it lacks a higher-level organization of grouping sets of images together.
    This is where Helm comes in. In this section, we’ll go over the motivation for
    Helm, its architecture, and its components. We will discuss Helm 3\. You might
    still find Helm 2 in the wild, but its end of life was at the end of 2020.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 提供了许多方法来在运行时组织和协调容器，但它缺乏将一组镜像高层次组织在一起的方式。这就是 Helm 的作用所在。在本节中，我们将讨论
    Helm 的动机、架构和组件。我们将讨论 Helm 3。你可能仍然会在某些地方看到 Helm 2，但它的生命周期已经在 2020 年底结束。
- en: As you might recall, Kubernetes means helmsman or navigator in Greek. The Helm
    project took the nautical theme very seriously, as the project’s name implies.
    The main Helm concept is the chart. Just as nautical charts describe in detail
    an area in the sea or a coastal region, a Helm chart describes in detail all the
    parts of an application.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所知，Kubernetes 在希腊语中意为舵手或导航员。Helm 项目非常重视这个航海主题，正如项目名称所暗示的那样。Helm 的主要概念是图表。就像航海图详细描述一个海域或沿海区域一样，Helm
    图表详细描述了一个应用程序的所有部分。
- en: 'Helm is designed to perform the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Helm 的设计目的是执行以下操作：
- en: Build charts from the ground up
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从零开始构建图表
- en: Bundle charts into archive files (`.tgz`)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将图表打包成归档文件（`.tgz`）
- en: Interact with repositories containing charts
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与包含图表的仓库互动
- en: Deploy and remove charts in an existing Kubernetes cluster
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在现有的 Kubernetes 集群中部署和移除图表
- en: Handle the lifecycle of installed charts
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理已安装图表的生命周期
- en: The motivation for Helm
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Helm 的动机
- en: 'Helm provides support for several important use cases:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Helm 支持几个重要的使用案例：
- en: Managing complexity
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理复杂性
- en: Easy upgrades
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单升级
- en: Simple sharing
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单共享
- en: Safe rollbacks
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全回滚
- en: Charts can define even the most intricate applications, offer consistent application
    installation, and act as a central source of authority. In-place upgrades and
    custom hooks allow for easy updates. It’s simple to share charts that can be versioned
    and hosted on public or private servers. When you need to roll back recent upgrades,
    Helm provides a single command to roll back a cohesive set of changes to your
    infrastructure.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图表可以定义最复杂的应用程序，提供一致的应用安装，并充当中央权限源。就地升级和自定义钩子允许轻松更新。共享图表非常简单，这些图表可以版本控制并托管在公共或私有服务器上。当你需要回滚最近的升级时，Helm
    提供一个简单的命令来回滚基础设施的一整套更改。
- en: The Helm 3 architecture
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Helm 3 架构
- en: 'The Helm 3 architecture relies fully on client-side tooling and keeps its state
    as Kubernetes secrets. Helm 3 has several components: release secrets, client,
    and library.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Helm 3 架构完全依赖于客户端工具，并将其状态作为 Kubernetes 秘密保存。Helm 3 包含几个组件：发布秘密、客户端和库。
- en: The client is the command-line interface, and often a CI/CD pipeline is used
    to package and install applications. The client utilizes the Helm library to perform
    the requested operations, and the state of each deployed application is stored
    in a release secret.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端是命令行接口，通常 CI/CD 管道用于打包和安装应用程序。客户端利用 Helm 库执行请求的操作，且每个已部署应用程序的状态都存储在发布秘密中。
- en: Let’s review the components.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下组件。
- en: Helm release secrets
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Helm 发布秘密
- en: 'Helm stores its releases as Kubernetes secrets in the target namespace. This
    means you can have multiple releases with the same name as long they are stored
    in different namespaces. Here is what a release secret looks like:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The data is Base64-encoded twice and then GZIP-compressed.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: The Helm client
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You install the Helm client on your machine. Helm carries out the following
    tasks:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Facilitating local chart development
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing repositories
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overseeing releases
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Interacting with the Helm library for:'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deployment of new releases
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrade of existing releases
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Removal of existing releases
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The Helm library
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Helm library is the component at the heart of Helm and is responsible for
    performing all the heavy lifting. The Helm library communicates with the Kubernetes
    API server and provides the following capabilities:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Combining Helm charts, templates, and values files to build a release
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the releases into Kubernetes
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a release object
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrading and uninstalling charts
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Helm 2 vs Helm 3
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Helm 2 was great and played a very important role in the Kubernetes ecosystem.
    But, there was a lot of criticism about Tiller, its server-side component. Helm
    2 was designed and implemented before RBAC became the official access-control
    method. In the interest of usability, Tiller is installed by default with a very
    open set of permissions. It wasn’t easy to lock it down for production usage.
    This is especially challenging in multi-tenant clusters.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: The Helm team listened to the criticisms and came up with the Helm 3 design.
    Instead of the Tiller in-cluster component, Helm 3 utilizes the Kubernetes API
    server itself via CRDs to manage the state of releases. The bottom line is that
    Helm 3 is a client-only program. It can still manage releases and perform the
    same tasks as Helm 2, but without installing a server-side component.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: This approach is more Kubernetes-native and less complicated, and the security
    concerns are gone. Helm users can perform via Helm only as much as their kube
    config allows.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Using Helm
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Helm is a rich package management system that lets you perform all the necessary
    steps to manage the applications installed on your cluster. Let’s roll up our
    sleeves and get going. We’ll look at installing both Helm 2 and Helm 3, but we
    will use Helm 3 for all of our hands-on experiments and demonstrations.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: Installing Helm
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Installing Helm involves installing the client and the server. Helm is implemented
    in Go. The Helm 2 executable can serve as either the client or server. Helm 3,
    as mentioned before, is a client-only program.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Helm client
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You must have Kubectl configured properly to talk to your Kubernetes cluster
    because the Helm client uses the Kubectl configuration to talk to the Kubernetes
    API server.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: 'Helm provides binary releases for all platforms here: [https://github.com/helm/helm/releases](https://github.com/helm/helm/releases).'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: 'For Windows, the Chocolatey ([https://chocolatey.org](https://chocolatey.org))
    package manager is the best option (usually up to date):'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows，Chocolatey（[https://chocolatey.org](https://chocolatey.org)）包管理器是最好的选择（通常是最新的）：
- en: '[PRE1]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'For macOS and Linux, you can install the client from a script:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 对于macOS和Linux，你可以通过脚本安装客户端：
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'On macOS, you can also use Homebrew ([https://brew.sh](https://brew.sh)):'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在macOS上，你也可以使用Homebrew（[https://brew.sh](https://brew.sh)）：
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Finding charts
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查找charts
- en: To install useful applications and software with Helm, you need to find their
    charts first. Helm was designed to work with multiple repositories of charts.
    Helm 2 was configured to search the stable repository by default, but you could
    add additional repositories. Helm 3 comes with no default, but you can search
    the Helm Hub ([https://artifacthub.io](https://artifacthub.io)) or specific repositories.
    The Helm Hub was launched in December 2018 and it was designed to make it easy
    to discover charts and repositories hosted outside the stable or incubator repositories.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Helm安装有用的应用程序和软件，你需要先找到它们的charts。Helm是为了与多个charts仓库一起使用而设计的。Helm 2默认配置为搜索stable仓库，但你可以添加其他仓库。Helm
    3没有默认仓库，但你可以搜索Helm Hub（[https://artifacthub.io](https://artifacthub.io)）或特定的仓库。Helm
    Hub于2018年12月发布，旨在简化发现charts和仓库的过程，这些仓库是托管在stable或incubator仓库之外的。
- en: This is where the `helm search` command comes in. Helm can search the Helm Hub
    for a specific repository.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是`helm search`命令的作用。Helm可以在Helm Hub中搜索特定的仓库。
- en: 'The hub contains 9,053 charts at the moment:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，hub中包含9,053个charts：
- en: '[PRE4]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We can search the hub for a specific keyword like `mariadb`. Here are the first
    10 charts (there are 38):'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在hub中搜索特定的关键词，如`mariadb`。这里是前10个charts（总共有38个）：
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As you can see, there are several charts that match the keyword `mariadb`. You
    can investigate those further and find the best one for your use case.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，有几个charts与关键词`mariadb`匹配。你可以进一步调查这些charts，找到最适合你使用场景的。
- en: Adding repositories
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加仓库
- en: By default, Helm 3 comes with no repositories set up, so you can search only
    the hub. In the past, the `stable` repo hosted by the CNCF was a good option to
    look for charts. But, CNCF didn’t want to pay for hosting it, so now it just contains
    a lot of deprecated charts.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Helm 3没有设置任何仓库，因此你只能搜索hub。过去，由CNCF托管的`stable`仓库是寻找charts的一个不错选择。但由于CNCF不想继续为其托管付费，现在该仓库只包含大量已弃用的charts。
- en: 'Instead, you can either install charts from the hub or do some research and
    add individual repositories. For example, for Prometheus, there is the `prometheus-community`
    Helm repository. Let’s add it:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，你可以选择从hub安装charts，或者进行一些研究并添加单独的仓库。例如，针对Prometheus，有`prometheus-community`
    Helm仓库。让我们添加它：
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, we can search the `prometheus` repo:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以搜索`prometheus`仓库：
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'There are quite a few charts there. To get more information about a specific
    chart, we can use the `show` command (you can use the `inspectalias` command too).
    Let’s check out `prometheus-community/prometheus`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有相当多的charts。如果你想获取关于某个特定chart的更多信息，我们可以使用`show`命令（你也可以使用`inspectalias`命令）。让我们来看一下`prometheus-community/prometheus`：
- en: '[PRE8]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You can also ask Helm to show you the `README` file, the values, or all the
    information associated with a chart. This can be overwhelming at times.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以要求Helm显示`README`文件、values，或者与chart相关的所有信息。有时这些信息可能会让人感到不知所措。
- en: Installing packages
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装包
- en: 'OK. You’ve found the package of your dreams. Now, you probably want to install
    it on your Kubernetes cluster. When you install a package, Helm creates a release
    that you can use to keep track of the installation progress. We install `prometheus`
    using the `helm install` command in the monitoring namespace and instruct Helm
    to create the namespace for us:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，你找到了理想的包。现在，你可能想把它安装到你的Kubernetes集群中。当你安装一个包时，Helm会创建一个发布，你可以用它来跟踪安装进度。我们使用`helm
    install`命令在监控命名空间中安装`prometheus`，并指示Helm为我们创建命名空间：
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let’s go over the output. The first part of the output lists the name of the
    release that we provided, `prometheus`, when it was deployed, the namespace, and
    the revision:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来看一下输出内容。输出的第一部分列出了我们提供的发布名称`prometheus`，它被部署的时间、命名空间和修订版本：
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The next part is custom notes, which can be pretty wordy. There is a lot of
    good information here about how to connect to the Prometheus server, the alert
    manager, and the `Pushgateway`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的部分是自定义说明，这些内容可能会比较冗长。这里有关于如何连接到Prometheus服务器、告警管理器和`Pushgateway`的很多有用信息：
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Checking the installation status
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查安装状态
- en: Helm doesn’t wait for the installation to complete because it may take a while.
    The `helm status` command displays the latest information on a release in the
    same format as the output of the initial `helm install` command.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Helm不会等待安装完成，因为这可能需要一段时间。`helm status`命令显示发布的最新信息，格式与初始`helm install`命令的输出相同。
- en: 'If you just care about the status without all the extra information, you can
    just `grep` for the `STATUS` line:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只关心状态，而不需要所有额外的信息，可以直接使用`grep`查找`STATUS`行：
- en: '[PRE12]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let’s list all the Helm releases in the `monitoring` namespace and verify that
    `prometheus` is listed:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们列出`monitoring`命名空间下的所有Helm发布，并验证`prometheus`是否在列出之中：
- en: '[PRE13]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'As you recall, Helm stores the release information in a secret:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所记得，Helm将发布信息存储在一个密钥中：
- en: '[PRE14]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If you want to find all the Helm releases across all namespaces, use:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想找到所有命名空间中的所有Helm发布，可以使用：
- en: '[PRE15]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If you want to go low-level, you can list all the secrets that have the `owner=helm`
    label:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想深入了解，可以列出所有带有`owner=helm`标签的密钥：
- en: '[PRE16]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To actually extract the release data from a secret, you need to jump through
    some hoops as it is Base64-encoded twice (why?) and GZIP-compressed. The final
    result is JSON:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 要从一个密钥中实际提取发布数据，你需要绕过一些障碍，因为它被Base64编码了两次（为什么？）并且经过了GZIP压缩。最终结果是JSON格式：
- en: '[PRE17]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You may also be interested in extracting just the manifests using the following
    command:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还对仅提取清单感兴趣，可以使用以下命令：
- en: '[PRE18]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Customizing a chart
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自定义图表
- en: 'Very often as a user, you want to customize or configure the charts you install.
    Helm fully supports customization via config files. To learn about possible customizations,
    you can use the `helm show` command again, but this time, focus on the values.
    For a complex project like Prometheus, the `values` file can be pretty large:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 作为用户，你很可能希望自定义或配置你安装的图表。Helm完全支持通过配置文件进行自定义。要了解可能的自定义选项，你可以再次使用`helm show`命令，但这次重点关注`values`。对于像Prometheus这样复杂的项目，`values`文件可能非常庞大：
- en: '[PRE19]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Here is a partial output:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是部分输出：
- en: '[PRE20]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Commented-out lines often contain default values like the name of the `imagePullSecrets`:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 被注释掉的行通常包含默认值，比如`imagePullSecrets`的名称：
- en: '[PRE21]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'If you want to customize any part of the Prometheus installation, then save
    the values to a file, make any modifications you like, and then install Prometheus
    using the custom values file:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想自定义Prometheus安装的任何部分，可以将值保存到一个文件中，做出任何修改，然后使用自定义值文件安装Prometheus：
- en: '[PRE22]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You can also set individual values on the command line with `--set`. If both
    `-f` and `--set` try to set the same values, then `--set` takes precedence. You
    can specify multiple values using comma-separated lists: `--set a=1,b=2`. Nested
    values can be set as `--set outer.inner=value`.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在命令行上使用`--set`设置单个值。如果`-f`和`--set`都尝试设置相同的值，那么`--set`优先。你可以使用逗号分隔的列表来指定多个值：`--set
    a=1,b=2`。嵌套的值可以通过`--set outer.inner=value`来设置。
- en: Additional installation options
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 额外的安装选项
- en: 'The `helm install` command can work with a variety of sources:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`helm install`命令可以与多种来源一起工作：'
- en: A chart repository (as demonstrated)
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图表仓库（如展示所示）
- en: A local chart archive (`helm install foo-0.1.1.tgz`)
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地图表归档（`helm install foo-0.1.1.tgz`）
- en: An extracted chart directory (`helm install path/to/foo`)
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个提取的图表目录（`helm install path/to/foo`）
- en: A complete URL (`helm install https://example.com/charts/foo-1.2.3.tgz`)
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完整的URL（`helm install https://example.com/charts/foo-1.2.3.tgz`）
- en: Upgrading and rolling back a release
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 升级和回滚发布
- en: 'You may want to upgrade a package you installed to the latest and greatest
    version. Helm provides the `upgrade` command, which operates intelligently and
    only updates things that have changed. For example, let’s check the current values
    of our `prometheus` installation:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想要将已安装的包升级到最新的版本。Helm提供了`upgrade`命令，它智能地操作，只更新发生变化的部分。例如，让我们检查一下当前`prometheus`安装的值：
- en: '[PRE23]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'So far, we haven’t provided any user values. As part of the default installation,
    `prometheus` installed an alert manager component:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们还没有提供任何用户值。作为默认安装的一部分，`prometheus`安装了一个告警管理器组件：
- en: '[PRE24]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Let’s disable the alert manager by upgrading and passing a new value:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过升级并传入一个新值来禁用告警管理器：
- en: '[PRE25]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The upgrade completed successfully. We can see that the output doesn’t mention
    how to get the URL of the alert manager anymore. Let’s verify that the alert manager
    deployment was removed:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 升级成功完成。我们可以看到输出中不再提到如何获取告警管理器的URL。让我们验证一下告警管理器的部署是否被移除：
- en: '[PRE26]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now, if we check the custom values, we can see our modification:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们检查自定义的值，我们可以看到我们的修改：
- en: '[PRE27]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Suppose we decide that alerts are kind of important and, actually, we want
    to have the Prometheus alert manager. No problem, we can roll back to our original
    installation. The `helm history` command shows us all the available revisions
    we can roll back to:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Let’s roll back to revision 1:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: As you can see, the rollback actually created a new revision number 3\. Revision
    2 is still there in case we want to go back to it.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s verify that our changes were rolled back:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Yep. The alert manager is back.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: Deleting a release
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can, of course, uninstall a release too by using the `helm uninstall` command.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s examine the list of releases. We have only the `prometheus` release
    in the monitoring namespace:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now, let’s uninstall it. You can use any of the following equivalent commands:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '`uninstall`'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`un`'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`delete`'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`del`'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here we are using the `uninstall` command:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'With that, there are no more releases:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Helm can keep track of uninstalled releases too. If you provide `--keep-history`
    when you uninstall, then you’ll be able to see uninstalled releases by adding
    the `--all` or `--uninstalled` flags to `helm list`.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that the monitoring namespace remained even though it was created by Helm
    as part of installing Prometheus, but it is empty now:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Working with repositories
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Helm stores charts in repositories that are simple HTTP servers. Any standard
    HTTP server can host a Helm repository. In the cloud, the Helm team verified that
    AWS S3 and Google Cloud Storage can both serve as Helm repositories in web-enabled
    mode. You can even store Helm repositories on GitHub pages.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: Note that Helm doesn’t provide tools for uploading charts to remote repositories
    because that would require the remote server to understand Helm, know where to
    put the chart, and know how to update the `index.yaml` file.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: Note that Helm recently added experimental support for storing Helm charts in
    OCI registries. Check out [https://helm.sh/docs/topics/registries/](https://helm.sh/docs/topics/registries/)
    for more details.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: 'On the client side, the `helm repo` command lets you list, add, remove, index,
    and update:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: We already used the `helm repo add` and `helm repo list` commands earlier. Let’s
    see how to create our own charts and manage them.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: Managing charts with Helm
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Helm provides several commands to manage charts.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: 'It can create a new chart for you:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Helm will create the following files and directories under `cool-chart`:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Once you have edited your chart, you can package it into a `tar.gz` archive:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Helm will create an archive called `cool-chart-0.1.0.tgz` and store it in the
    local directory.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use `helm lint` to help you find issues with your chart’s formatting
    or information:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Taking advantage of starter packs
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `helm create` command offers an optional `--starter` flag, allowing you
    to specify a starter chart. Starters are regular charts located in `$XDG_DATA_HOME/helm/starters`.
    As a chart developer, you can create charts explicitly intended to serve as starter
    templates for creating new charts. When developing such charts, please keep the
    following considerations in mind:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: The YAML content within a starter chart will be overwritten by the generator.
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users will typically modify the contents of a starter chart, so it is crucial
    to provide clear documentation explaining how users can make modifications.
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Presently, there is no built-in mechanism for installing starter charts. The
    only way to add a chart to `$XDG_DATA_HOME/helm/starters` is through manual copying.
    If you create starter pack charts, ensure that your chart’s documentation explicitly
    mentions this requirement.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: Creating your own charts
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A chart represents a group of files that define a cohesive set of Kubernetes
    resources. It can range from a simple deployment of a Memcached pod to a complex
    configuration of a complete web application stack, including HTTP servers, databases,
    caches, queues, and more.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: To organize a chart, its files are structured within a specific directory tree.
    These files can then be bundled into versioned archives, which can be easily deployed
    and managed. The key file is `Chart.yaml`.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: The Chart.yaml file
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `Chart.yaml` file is the main file of a Helm chart. It requires a name
    and version fields:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: '`apiVersion`: The API version of the chart.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name`: The name of the chart, which should match the directory name.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`version`: The version of the chart using the `SemVer` 2 format.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Additionally, there are several optional fields that can be included in the
    `Chart.yaml` file:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '`kubeVersion`: A range of compatible Kubernetes versions specified in `SemVer`
    format.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`description`: A brief description of the project in a single sentence.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`keywords`: A list of keywords associated with the project.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`home`: The URL of the project’s homepage.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sources`: A list of URLs to the project’s source code.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dependencies`: A list of dependencies for the chart, including the name, version,
    repository, condition, tags, and alias.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`maintainers`: A list of maintainers for the chart, including the name, email,
    and URL.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`icon`: The URL to an SVG or PNG image that can be used as an icon.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`appVersion`: The version of the application contained within the chart. It
    does not have to follow `SemVer`.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`deprecated`: A boolean value indicating whether the chart is deprecated.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`annotations`: Additional key-value pairs that provide extra information.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Versioning charts
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `version` field in the `Chart.yaml` file plays a crucial role for various
    Helm tools. It is used by the `helm package` command when creating a package,
    as it constructs the package name based on the version specified in the `Chart.yaml`.
    It is important to ensure that the version number in the package name matches
    the version number in the `Chart.yaml` file. Deviating from this expectation can
    result in an error, as the system assumes the consistency of these version numbers.
    Therefore, it is essential to maintain the coherence between the version field
    in the `Chart.yaml` file and the generated package name to avoid any issues.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`Chart.yaml` 文件中的 `version` 字段对各种 Helm 工具有着至关重要的作用。在创建包时，它会被 `helm package`
    命令使用，因为该命令会根据 `Chart.yaml` 中指定的版本构建包的名称。确保包名称中的版本号与 `Chart.yaml` 文件中的版本号一致非常重要。偏离这一预期可能会导致错误，因为系统会假设这些版本号的一致性。因此，必须保持
    `Chart.yaml` 文件中的版本字段与生成的包名称之间的一致性，以避免出现问题。'
- en: The appVersion field
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: appVersion 字段
- en: The optional `appVersion` field is not related to the `version` field. It is
    not used by Helm and serves as metadata or documentation for users that want to
    understand what they are deploying. Helm ignores it.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 可选的 `appVersion` 字段与 `version` 字段无关。它不被 Helm 使用，而是作为元数据或文档，供希望了解自己正在部署什么的用户参考。Helm
    会忽略它。
- en: Deprecating charts
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 弃用图表
- en: 'From time to time, you may want to deprecate a chart. You can mark a chart
    as deprecated by setting the optional `deprecated` field in `Chart.yaml` to `true`.
    It’s enough to deprecate the latest version of a chart. You can later reuse the
    chart name and publish a newer version that is not deprecated. The workflow for
    deprecating charts typically involves the following steps:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您可能希望弃用一个图表。您可以通过将 `Chart.yaml` 中的可选 `deprecated` 字段设置为 `true` 来标记该图表为弃用。仅弃用图表的最新版本就足够了。您以后可以重新使用图表名称，并发布一个不再弃用的较新版本。弃用图表的工作流程通常包括以下步骤：
- en: '**Update the Chart.yaml file**: Modify the `Chart.yaml` file of the chart to
    indicate that it is deprecated. This can be done by adding a `deprecated` field
    and setting it to `true`. Additionally, it is common practice to bump the version
    of the chart to indicate that a new version with deprecation information has been
    released.'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**更新 Chart.yaml 文件**：修改图表的 `Chart.yaml` 文件，标明该图表已弃用。可以通过添加 `deprecated` 字段并将其设置为
    `true` 来实现。此外，通常做法是更新图表的版本号，以指示已发布包含弃用信息的新版本。'
- en: '**Release the new version**: Package and release the updated chart with the
    deprecation information to the chart repository. This ensures that users are aware
    of the deprecation when they try to install or upgrade the chart.'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**发布新版本**：将更新后的图表与弃用信息一起打包并发布到图表仓库。这可以确保用户在尝试安装或升级图表时了解弃用信息。'
- en: '**Communicate the deprecation**: It is important to communicate the deprecation
    to users and provide information on alternative options or recommended migration
    paths. This can be done through documentation, release notes, or other channels
    to ensure that users are informed about the deprecation and can plan accordingly.'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**沟通弃用信息**：与用户沟通弃用信息并提供替代选项或推荐的迁移路径非常重要。可以通过文档、发布说明或其他渠道来实现，确保用户了解弃用信息，并能相应地进行计划。'
- en: '**Remove the chart from the source repository**: Once the deprecated chart
    has been released and communicated to users, it is recommended to remove the chart
    from the source repository, such as a Git repository, to avoid confusion and ensure
    that users are directed to the latest version in the chart repository.'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**从源代码仓库中移除图表**：一旦弃用的图表已发布并通知用户，建议从源代码仓库中移除该图表，例如 Git 仓库，以避免混淆，并确保用户被引导到图表仓库中的最新版本。'
- en: By following these steps, you can effectively deprecate a chart and provide
    a clear process for users to transition to newer versions or alternative solutions.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循这些步骤，您可以有效地弃用一个图表，并为用户提供一个清晰的流程，以便他们过渡到更新的版本或替代方案。
- en: Chart metadata files
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图表元数据文件
- en: 'Charts can include several metadata files, such as `README.md`, `LICENSE`,
    and `NOTES.txt`, which provide important information about the chart. The `README.md`
    file, formatted as markdown, is particularly crucial and should contain the following
    details:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 图表可以包含多个元数据文件，例如 `README.md`、`LICENSE` 和 `NOTES.txt`，这些文件提供有关图表的重要信息。格式化为 Markdown
    的 `README.md` 文件尤为重要，应该包含以下详细信息：
- en: '**Application or service description**: Provide a clear and concise description
    of the application or service that the chart represents. This description should
    help users understand the purpose and functionality of the chart.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序或服务描述**：提供图表所代表的应用程序或服务的清晰简明描述。这个描述应帮助用户理解图表的目的和功能。'
- en: '**Prerequisites and requirements**: Specify any prerequisites or requirements
    that need to be met before using the chart. This could include specific versions
    of Kubernetes, required dependencies, or other conditions that must be satisfied.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**先决条件和要求**：指定在使用图表之前需要满足的任何先决条件或要求。这可能包括特定版本的 Kubernetes、所需的依赖项或必须满足的其他条件。'
- en: '**YAML options and default values**: Document the available options that users
    can configure in the chart’s YAML files. Describe each option, its purpose, accepted
    values or format, and the default values. This information empowers users to customize
    the chart according to their needs.'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**YAML 选项和默认值**：记录用户可以在图表的 YAML 文件中配置的可用选项。描述每个选项、其目的、接受的值或格式，以及默认值。这些信息使用户能够根据自己的需求定制图表。'
- en: '**Installation and configuration instructions**: Provide clear instructions
    on how to install and configure the chart. This may involve specifying the command-line
    options or Helm commands to deploy the chart and any additional steps or considerations
    during the configuration process.'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装和配置说明**：提供有关如何安装和配置图表的清晰说明。这可能涉及指定命令行选项或 Helm 命令来部署图表，以及配置过程中的任何其他步骤或注意事项。'
- en: '**Additional information**: Include any other relevant information that may
    assist users during the installation or configuration of the chart. This could
    involve best practices, troubleshooting tips, or known limitations.'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**附加信息**：包括任何其他相关信息，以帮助用户在安装或配置图表时。可能包括最佳实践、故障排除提示或已知的限制。'
- en: By including these details in the `README.md` file, chart users can easily understand
    the chart’s purpose, requirements, and how to effectively install and configure
    it for their specific use case.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在`README.md`文件中包含这些细节，图表用户可以轻松理解图表的目的、要求，以及如何有效地安装和配置图表以适应他们的特定用例。
- en: If the chart contains a template or `NOTES.txt` file, then the file will be
    displayed, printed out after installation and when viewing the release status,
    or upgraded. The notes should be concise to avoid clutter and point to the `README.md`
    file for detailed explanations. It’s common to put usage notes and next steps
    in `NOTES.txt`. Remember that the file is evaluated as a template. The notes are
    printed on the screen when you run `helm install` as well as `helm status`.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 如果图表包含模板或 `NOTES.txt` 文件，则该文件将在安装后以及查看发布状态或升级时显示并打印。备注应简洁，以避免冗余，并指向 `README.md`
    文件以获取详细说明。通常将使用说明和后续步骤放在 `NOTES.txt` 中。请记住，该文件作为模板进行评估。备注将在您运行 `helm install`
    和 `helm status` 时显示在屏幕上。
- en: Managing chart dependencies
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理图表依赖项
- en: In Helm, a chart may depend on other charts. These dependencies are expressed
    explicitly by listing them in the `dependencies` field of the `Chart.yaml` file
    or copied directly to the `charts/` subdirectory. This provides a great way to
    benefit from and reuse the knowledge and work of others. A dependency in Helm
    can take the form of either a chart archive (e.g., `foo-1.2.3.tgz`) or an unpacked
    chart directory. However, it’s important to note that the name of a dependency
    should not begin with an underscore (`_`) or a period (`.`), as these files are
    ignored by the chart loader. Therefore, it’s recommended to avoid starting dependency
    names with these characters to ensure they are properly recognized and loaded
    by Helm.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Helm 中，一个图表可能依赖于其他图表。这些依赖项通过在 `Chart.yaml` 文件的 `dependencies` 字段中显式列出，或直接复制到
    `charts/` 子目录中来表达。这提供了一种充分利用并重用他人知识和工作的好方法。Helm 中的依赖项可以是图表归档（例如 `foo-1.2.3.tgz`）或解压后的图表目录。然而，需要注意的是，依赖项的名称不应以下划线（`_`）或点（`.`）开头，因为这些文件会被图表加载器忽略。因此，建议避免以这些字符开头命名依赖项，以确保它们被
    Helm 正确识别并加载。
- en: 'Let’s add `kube-state-metrics` from the `prometheus-community` repo as a dependency
    to our `cool-chart`''s `Chart.yaml` file:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将来自 `prometheus-community` 仓库的 `kube-state-metrics` 添加为我们 `cool-chart` 的依赖项到
    `Chart.yaml` 文件中：
- en: '[PRE40]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The `name` field represents the desired name of the chart you want to install.
    It should match the name of the chart as it is defined in the repository.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '`name` 字段表示您希望安装的图表的名称。它应与仓库中定义的图表名称匹配。'
- en: The `version` field specifies the specific version of the chart you want to
    install. It helps to ensure that you get the desired version of the chart.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: The `repository` field contains the complete URL of the chart repository that
    the chart will be fetched from. It points to the location where the chart and
    its versions are stored and can be accessed.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: The `condition` field is discussed in the subsequent section.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: If the repository is not added yet use `helm repo` to add it locally.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: 'Once your dependencies are defined, you can run the `helm dependency update`
    command. Helm will download all of the specified charts into the charts subdirectory
    for you:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Helm stores the dependency charts as archives in the `charts/` directory:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Managing charts and their dependencies in the `Chart.yaml` dependencies field
    (as opposed to just copying charts into the `charts/` subdirectory) is a best
    practice. It explicitly documents dependencies, facilitates sharing across the
    team, and supports automated pipelines.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: Utilizing additional subfields of the dependencies field
  id: totrans-232
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Each entry in the `requirements.yaml` file’s `requirements` entry may include
    optional fields such as `tags` and `condition`.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: These fields can be used to dynamically control the loading of charts (if not
    specified all charts will be loaded). If `tags` or `condition` fields are present,
    Helm will evaluate them and determine if the target chart should be loaded or
    not.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: The `condition` field in chart dependencies holds one or more comma-delimited
    YAML paths. These paths refer to values in the top parent’s values file. If a
    path exists and evaluates to a Boolean value, it determines whether the chart
    will be enabled or disabled. If multiple paths are provided, only the first valid
    path encountered is evaluated. If no paths exist, the condition has no effect,
    and the chart will be loaded regardless.
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `tags` field allows you to associate labels with the chart. It is a YAML
    list where you can specify one or more tags. In the top parent’s values file,
    you can enable or disable all charts with specific tags by specifying the tag
    and a corresponding Boolean value. This provides a convenient way to manage and
    control charts based on their associated tags.
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is an example `dependencies` field and a `values.yaml` that makes good
    use of conditions and tags to enable and disable the installation of dependencies.
    The `dependencies` field defines two conditions for installing its dependencies
    based on the value of the global enabled field and the specific subchart’s enabled
    field:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The `values.yaml` file assigns values to some of the `condition` variables.
    The `subchart2` tag doesn’t get a value, so it is enabled automatically:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'You can set `tags` and `condition` values from the command line too when installing
    a chart, and they’ll take precedence over the `values.yaml` file:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The resolution of tags and conditions is as follows:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: Conditions that are set in values override tags. The first `condition` path
    that exists per chart takes effect, and other conditions are ignored.
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If any of the tags associated with a chart are set to `true` in the top parent’s
    values, the chart is considered enabled.
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `tags` and `condition` values must be set at the top level of the values
    file.
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nested tags tables or tags within global configurations are not currently supported.
    This means that the tags should be directly under the top parent’s values and
    not nested within other structures.
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using templates and values
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Any non-trivial application will require configuration and adaptation to the
    specific use case. Helm charts are templates that use the Go template language
    to populate placeholders. Helm supports additional functions from the Sprig library,
    which contains a lot of useful helpers as well as several other specialized functions.
    The template files are stored in the `templates/` subdirectory of the chart. Helm
    will use the template engine to render all files in this directory and apply the
    provided value files.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: Writing template files
  id: totrans-250
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Template files are just text files that follow the Go template language rules.
    They can generate Kubernetes configuration files as well as any other file. Here
    is the service template file of the Prometheus server’s `service.yaml` template
    from the `prometheus-community` repo:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'It is available here: [https://github.com/prometheus-community/helm-charts/blob/main/charts/prometheus/templates/service.yaml](https://github.com/prometheus-community/helm-charts/blob/main/charts/prometheus/templates/service.yaml).'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: Don’t worry if it looks confusing. The basic idea is that you have a simple
    text file with placeholders for values that can be populated later in various
    ways as well as conditions, some functions, and pipelines that can be applied
    to those values.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: Using pipelines and functions
  id: totrans-255
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Helm allows rich and sophisticated syntax in the template files via the built-in
    Go template functions, Sprig functions, and pipelines. Here is an example template
    that takes advantage of these capabilities. It uses the `repeat`, `quote`, and
    `upper` functions for the `food` and `drink` keys, and it uses pipelines to chain
    multiple functions together:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Let’s add a `values.yaml` file:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Testing and troubleshooting your charts
  id: totrans-260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now, we can use the `helm template` command to see the result:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: As you can see, our templating worked. The drink `coffee` was repeated 3 times
    and quoted. The food `pizza` became uppercase `PIZZA` (unquoted).
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: 'Another good way of debugging is to run `install` with the `--dry-run` flag.
    It provides additional information:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'You can also override values on the command line:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The ultimate test is, of course, to install your chart into your cluster. You
    don’t need to upload your chart to a chart repository for testing; just run `helm
    install` locally:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'There is now a Helm release called `food`:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Most importantly, the `food-configmap` config map was created with the correct
    data:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Embedding built-in objects
  id: totrans-274
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Helm provides some built-in objects you can use in your templates. In the Prometheus
    chart template above, `Release.Name`, `Release.Service`, `Chart.Name`, and `Chart.Version`
    are examples of Helm predefined values. Other objects are:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: '`Values`'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Chart`'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Template`'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Files`'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Capabilities`'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Values` object contains all the values defined in the `values` file or
    on the command line. The `Chart` object is the content of `Chart.yaml`. The `Template`
    object contains information about the current template. `Files` and `Capabilities`
    are map-like objects that allow access via various functions to the non-specialized
    files and general information about the Kubernetes cluster.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: Note that unknown fields in `Chart.yaml` are ignored by the template engine
    and cannot be used to pass arbitrary structured data to templates.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: Feeding values from a file
  id: totrans-283
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here is part of the Prometheus server’s default `values` file. The values from
    this file are used to populate multiple templates. The values represent defaults
    that you can override by copying the file and modifying it to fit your needs.
    Note the useful comments that explain the purpose and various options for each
    value:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: That was a deep dive into creating your own charts with Helm. Well, Helm is
    used widely and extensively to package and deploy Kubernetes applications. However,
    Helm is not the only game in town. There are several good alternatives that you
    may prefer. In the next section, we will review some of the most promising Helm
    alternatives.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: Helm alternatives
  id: totrans-287
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Helm is battle tested and very common in the Kubernetes world, but it has its
    downsides and critics, especially when you develop your own charts. A lot of the
    criticism was about Helm 2 and its server-side component, Tiller. However, Helm
    3 is not a panacea either. On a large scale, when you develop your own charts
    and complex templates with lots of conditional logic and massive `values` files,
    it can become very challenging to manage.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: If you feel the pain, you may want to investigate some alternatives. Note that
    most of these projects focus on the deployment aspect. Helm’s dependency management
    is still a strength. Let’s look at some interesting projects that you may want
    to consider.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: Kustomize
  id: totrans-290
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Kustomize is an alternative to YAML templating by using the concept of overlays
    on top of raw YAML files. It was added to kubectl in Kubernetes 1.14.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: See [https://github.com/kubernetes-sigs/kustomize](https://github.com/kubernetes-sigs/kustomize).
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: Cue
  id: totrans-293
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cue is a very interesting project. Its data validation language and inference
    were strongly inspired by logic programming. It is not a general-purpose programming
    language. It is focused on data validation, data templating, configuration, querying,
    and code generation, but has some scripting too. The main concept of Cue is the
    unification of types and data. That gives Cue a lot of expressive power and obviates
    the need for constructs like enums and generics.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: See [https://cuelang.org](https://cuelang.org).
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: 'See the specific discussion about replacing Helm with Cue here: [https://github.com/cue-lang/cue/discussions/1159](https://github.com/cue-lang/cue/discussions/1159).'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: kapp-controller
  id: totrans-297
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: kapp-controller provides continuous delivery and package management capabilities
    for Kubernetes.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: Its declarative APIs and layered approach allow you to build, deploy, and manage
    your applications effectively. With Kapp-controller, you can package your software
    into distributable packages and empower users to discover, configure, and install
    these packages on a Kubernetes cluster seamlessly.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: See [https://carvel.dev/kapp-controller/](https://carvel.dev/kapp-controller/).
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: That concludes our quick review of Helm alternatives.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-302
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we took a look at Helm, a popular Kubernetes package manager.
    Helm gives Kubernetes the ability to manage complicated software composed of many
    Kubernetes resources with inter-dependencies. It serves the same purpose as an
    OS package manager. It organizes packages and lets you search charts, install
    and upgrade charts, and share charts with collaborators. You can develop your
    own charts and store them in repositories. Helm 3 is a client-side-only solution
    that uses Kubernetes secrets to manage the state of releases in your cluster.
    We also looked at some Helm alternatives.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you should understand the important role that Helm serves in
    the Kubernetes ecosystem and community. You should be able to use it productively
    and even develop and share your own charts.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at how Kubernetes does networking at a pretty
    low level.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL

["```\n    $ kubectl cluster-info\n    ```", "```\n    Kubernetes control plane is running at https://127.0.0.1:32769\n    CoreDNS is running at https://127.0.0.1:32769/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy\n    ```", "```\n    $ kubectl create namespace gitops\n    ```", "```\n    - name: Terraform Init\n      run: |\n        terraform init \\\n        --backend-config=»resource_group_name=${{ secrets.BACKEND_RESOURCE_GROUP_NAME }}» \\\n        --backend-config=»storage_account_name=${{ secrets.BACKEND_STORAGE_ACCOUNT_NAME }}» \\\n        --backend-config=»container_name=${{ secrets.BACKEND_CONTAINER_NAME }}» \\\n        --backend-config=»key=${{ secrets.BACKEND_KEY }}» \\\n        --reconfigure\n        working-directory: ./Step-01/terraform\n        env:\n        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}\n        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}\n        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}\n        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}\n    ```", "```\n    - name: Update Kubeconfig\n      run: az aks get-credentials --resource-group gitops-dev-rg --name gitops-dev-aks --overwrite-existing\n    ```", "```\n    - name: Deploy to Kubernetes\n      run: |\n        cd ./Step-01/deployment\n        kubectl create namespace weather-app-for-real \\\n           --dry-run=client -o yaml | kubectl apply -f -\n        kubectl create secret generic weather-api-key \\\n           --from-literal=WEATHER_API_KEY=${{ secrets.WEATHER_API_TOKEN }} \\\n           --namespace weather-app-for-real \\\n           --dry-run=client -o yaml | kubectl apply -f - command sequence can play a significant role in ensuring that a Kubernetes deployment is idempotent.\n    ```", "```\n    $ kubectl apply -f backend-api-deployment.yaml\n    ```", "```\npaths-ignore:\n- 'Step-01/deployment/**'\n```", "```\n…         key: WEATHER_API_KEY\nresources:\n          requests:\n            cpu: «100m»\n            memory: \"100Mi\"\n          limits:\n            cpu: «150m»\n            memory: \"150Mi\"\n```", "```\n    $ az aks update --enable-azure-monitor-metrics --name gitops-real-aks --resource-group gitops-for-real-rg\n    ```", "```\n    $ kubectl get deployment metrics-server -n kube-system\n    ```", "```\n    NAME            READY   UP-TO-DATE   AVAILABLE   AGE\n    metrics-server  2/2     2            2           3h37m\n    ```", "```\n    apiVersion: autoscaling/v1\n    kind: HorizontalPodAutoscaler\n    metadata:\n      name: weather-app-backend-api-hpa\n      namespace: weather-app-for-real\n    spec:\n      scaleTargetRef:\n        apiVersion: apps/v1\n        kind: Deployment\n        name: backend-api-weather-app\n      minReplicas: 1\n      maxReplicas: 5\n      targetCPUUtilizationPercentage: 5\n    ```", "```\n    $ kubectl get hpa -w --namespace weather-app-for-real\n    ```", "```\n    # Base URL of your weather service\n    baseUrl=\"http://20.250.198.208/weather\"\n    ```", "```\n    TARGET column should increase. To speed up the testing scenario and see the number of pods increase faster, execute another instance of the same script in another terminal.\n    ```", "```\n    $ kubectl get hpa -w --namespace weather-app-for-real\n    ```", "```\n    NAME                TARGETS     MINPODS      MAXPODS       REPLICAS\n    weather-app-…       cpu: <unk>%/5%  1     5             1\n    weather-app-…    cpu: 5%/5%  1            5             1\n    weather-app-…    cpu: 20%/5% 1            5             4\n    …\n    weather-app-…    cpu: 3%/5%  1         5             4\n    weather-app-…    cpu: 1%/5%    1             5             4\n    ```", "```\n    $ helm repo add prometheus-community https://prometheus-community.github.io/helm-charts\n    ```", "```\n    gitops-real-monitoring:\n\n    ```", "```\n\n    ```", "```\n    LoadBalancer service’s type, to log in to Grafana, we need to execute a port-forward:\n\n    ```", "```\n\n    ```", "```\n    $ kubectl port-forward svc/prometheus-kube-prometheus-prometheus -n gitops-real-monitoring 9001:9090\n    ```", "```\n    apiVersion: rbac.authorization.k8s.io/v1\n    kind: Role\n    metadata:\n      namespace: weather-app-for-real\n      name: weather-app-manager\n    rules:\n    - apiGroups: [\"\", \"apps\"]\n      resources: [\"deployments\", \"replicasets\", \"pods\", \"services\"]\n    weather-app-user role:\n\n    ```", "```\n    apiVersion: rbac.authorization.k8s.io/v1\n    kind: RoleBinding\n    metadata:\n      name: weather-app-manager-binding\n      namespace: weather-app-for-real\n    subjects:\n    - kind: User\n      name: weather-app-user\n      apiGroup: rbac.authorization.k8s.io\n    roleRef:\n      kind: Role\n      name: weather-app-manager\n      apiGroup: rbac.authorization.k8s.io\n    ```", "```\n\n    ```", "```\n    apiVersion: rbac.authorization.k8s.io/v1\n    kind: RoleBinding\n    metadata:\n      name: weather-app-operator-binding\n      namespace: weather-app-for-real\n    subjects:\n    - kind: User\n      name: weather-app-operator\n      apiGroup: rbac.authorization.k8s.io\n    roleRef:\n      kind: Role\n      name: weather-app-operator\n      apiGroup: rbac.authorization.k8s.io\n    ```", "```\n    $ kubectl auth can-i delete pods --as weather-app-operator -n weather-app-for-real\n    $ kubectl auth can-i delete pods --as weather-app-manager -n weather-app-for-real\n    ```", "```\n    no\n    yes\n    ```", "```\n    $ kubectl get rolebindings,roles,clusterrolebindings,clusterroles --all-namespaces -o yaml\n    ```"]
["```\n$ ps axf\n  PID TTY  STAT TIME COMMAND\n    2 ?    S    0:00 [kthreadd]\n    4 ?    I<   0:00 \\_ [kworker/0:0H]\n    5 ?    I    0:00 \\_ [kworker/u2:0]\n    6 ?    I<   0:00 \\_ [mm_percpu_wq]\n    7 ?    S    0:00 \\_ [ksoftirqd/0]\n...\n```", "```\n$ sudo unshare --fork --pid --mount-proc=/proc /bin/sh\n# ps axf\n  PID TTY      STAT   TIME COMMAND\n    1 pts/0    S      0:00 /bin/sh\n    2 pts/0    R+     0:00 ps axf\n```", "```\n$ ps axf ## from another terminal\n  PID TTY    STAT TIME COMMAND\n ...\n 1260 pts/0  Ss   0:00 \\_ -bash\n 1496 pts/0  S    0:00 | \\_ sudo unshare --fork --pid --mount-proc=/proc /bin/sh\n 1497 pts/0  S    0:00 | \\_ unshare --fork --pid --mount-proc=/proc /bin/sh\n 1498 pts/0  S+   0:00 | \\_ /bin/sh\n 1464 pts/1  Ss   0:00 \\_ -bash\n ...\n```", "```\n## in the container terminal\n# yes > /dev/null & top PID USER PR  NI   VIRT  RES  SHR S %CPU %MEM    TIME+ COMMAND\n  2 root 20   0   7468  788  724 R 99.7  0.1  0:15.14 yes\n  1 root 20   0   4628  780  712 S  0.0  0.1  0:00.00 sh\n  3 root 20   0  41656 3656 3188 R  0.0  0.4  0:00.00 top \n```", "```\n## on the host session\n$ ls /sys/fs/cgroup\nblkio  cpu  cpuacct  cpu,cpuacct  cpuset  devices  freezer  hugetlb  memory  net_cls  net_cls,net_prio  net_prio  perf_event  pids  rdma  systemd  unified \n```", "```\n## also on the host terminal\n$ ps ax | grep yes | grep -v grep\n 1658 pts/0    R      0:42 yes\n$ sudo mkdir /sys/fs/cgroup/cpu/box && \\\n  echo 1658 | sudo tee /sys/fs/cgroup/cpu/box/tasks > /dev/null\n```", "```\n$ echo 50000 | sudo tee /sys/fs/cgroup/cpu/box/cpu.cfs_quota_us > /dev/null\n\n## go back to namespaced terminal, check stats with topPID USER PR  NI   VIRT  RES  SHR S %CPU %MEM    TIME+ COMMAND\n  2 root 20  0    7468  748  684 R 50.3  0.1 6:43.68  yes\n  1 root 20  0    4628  784  716 S  0.0  0.1 0:00.00  sh\n  3 root 20  0   41656 3636 3164 R  0.0  0.4 0:00.08  top \n```", "```\n$ sudo apt-get update && sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common \n```", "```\n$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n$ sudo apt-key fingerprint 0EBFCD88 \n```", "```\n$ sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" \n```", "```\n $ sudo apt-get update && sudo apt-get install docker-ce\n```", "```\n$ sudo yum install -y yum-utils \n```", "```\n$ sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo \n```", "```\n$ sudo yum install docker-ce\n$ sudo systemctl start docker\n```", "```\n$ docker run alpine ls\nbin dev etc home lib media mnt proc root run sbin srv sys tmp usr var\n```", "```\n$ docker run alpine ps aux\nPID   USER     TIME  COMMAND\n    1 root      0:00 ps aux \n```", "```\n$ docker run busybox /bin/sh -c \"while :;do echo 'meow~';sleep 1;done\"\nmeow~\nmeow~\n...\n```", "```\n$ docker ps\nCONTAINER ID    IMAGE    (omitted)  STATUS       PORTS   NAMES\nd51972e5fc8c    busybox     ...     Up 3 seconds         agitated_banach\n\n$ docker exec -it d51972e5fc8c /bin/sh\n/ # ps\nPID   USER     TIME   COMMAND\n 1 root      0:00 /bin/sh -c while :;do echo 'meow~';sleep 1;done\n   19 root      0:00 /bin/sh\n   30 root      0:00 sleep 1\n   31 root      0:00 ps\n/ # kill -s 2 1\n## container terminated \n```", "```\n$ docker ps -a\nCONTAINER ID     IMAGE    (omitted)  STATUS       PORTS   NAMES\nd51972e5fc8c     busybox     ...     Exited (130)         agitated_banach\n$ docker rm d51972e5fc8c ## \"agitated_banach\" also works\nd51972e5fc8c\n$ docker ps -a\nCONTAINER ID     IMAGE    (omitted)  STATUS       PORTS   NAMES\n## nothing left now\n```", "```\n$ docker run --name demo -v /chest alpine touch /chest/coins\n$ docker inspect demo ## or filter outputs with --format '{{json .Mounts}}'\n... \"Mounts\": [\n    {\n        \"Type\": \"volume\",\n        \"Name\":\"(hash-digits)\",\n        \"Source\": \"/var/lib/docker/volumes/(hash-digits)/_data\",\n        \"Destination\": \"/chest\",\n        \"Driver\": \"local\",\n        \"Mode\": \"\",\n        \"RW\": true,\n        \"Propagation\": \"\"\n    }\n],\n...\n$ ls /var/lib/docker/volumes/(hash-digits)/_data\ncoins\n```", "```\n$ docker create --name box -v /share-vol alpine nop\n7ed7c0c4426df53275c0e41798923121093b67d41bec17d50756250508f7b897\n$ docker run --name AA --volumes-from box alpine touch /share-vol/wine\n$ docker run --name BB --volumes-from box alpine ls /share-vol\nwine\n```", "```\n$ docker run --name hi -v $(pwd)/host/dir:/data alpine touch /data/hi\n$ docker rm hi\n$ ls $(pwd)/host/dir\nhi\n```", "```\n$ docker pull nginx\nUsing default tag: latest\nlatest: Pulling from library/nginx\n802b00ed6f79: Pull complete\n...\nStatus: Downloaded newer image for nginx:latest\n\n$ docker tag nginx localhost:5000/comps/prod/nginx:1.15\n$ docker push localhost:5000/comps/prod/nginx:1.15\nThe push refers to repository [localhost:5000/comps/prod/nginx]\n...\n8b15606a9e3e: Pushed\n1.15: digest: sha256:(64-digits-hash) size: 948\n$ docker tag nginx localhost:5000/comps/prod/nginx\n$ docker push localhost:5000/comps/prod/nginx\nThe push refers to repository [localhost:5000/comps/prod/nginx]\n...\n8b15606a9e3e: Layer already exists\nlatest: digest: sha256:(64-digits-hash) size: 948\n```", "```\n$ docker network ls\nNETWORK ID          NAME                DRIVER              SCOPE\n8bb41db6b13e        bridge              bridge              local\n4705332cb39e        host                host                local\n75ab6cbbbbac        none                null                local\n```", "```\n$ docker run --name greeter -d --expose 5000 busybox \\\n  /bin/sh -c \"echo Welcome stranger! | nc -lp 5000\"\n841138a693d220c92b8634adf97426559fd0ae622e94ac4ee9f295ab088833f5 \n$ docker exec greeter ifconfig\neth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:02\n          inet addr:172.17.0.2  Bcast:172.17.255.255  Mask:255.255.0.0\n...\n```", "```\n$ docker run -t busybox telnet 172.17.0.2 5000\nWelcome stranger!\nConnection closed by foreign host\n```", "```\n## create a network called \"room\"\n$ docker network create room\na59c7fda2e636e2f6d8af5918c9cf137ca9f09892746f4e072acd490c00c5e99\n## run a container with the name \"sleeper\" and an alias \"dad\" in the room\n$ docker run -d --network room \\\n                --network-alias dad --name sleeper busybox sleep 60\n56397917ccb96ccf3ded54d79e1198e43c41b6ed58b649db12e7b2ee06a69b79\n## ping the container with its name \"sleeper\" from another container\n$ docker run --network room busybox ping -c 1 sleeper\nPING sleeper (172.18.0.2): 56 data bytes\n64 bytes from 172.19.0.2: seq=0 ttl=64 time=0.087 ms\n\n--- sleeper ping statistics ---\n1 packets transmitted, 1 packets received, 0% packet loss\nround-trip min/avg/max = 0.087/0.087/0.087 ms\n## ping the container with its alias \"dad\", it also works\n$ docker run --network room alpine ping -c 1 dad\nPING dad (172.18.0.2): 56 data bytes\n...\n```", "```\n$ docker run -d --expose 5000 --network host busybox \\\n  /bin/sh -c \"echo im a container | nc -lp 5000\"\na6918174c06f8f3f485913863ed69d4ae838fb550d9f4d66e24ef91534c76b3a\n$ telnet localhost 5000\nim a container\nConnection closed by foreign host\n```", "```\n$ docker run -p 80:5000 busybox /bin/sh -c \\\n  \"while :; do echo -e 'HTTP/1.1 200 OK\\n\\ngood day'|nc -lp 5000; done\"\n$ curl localhost\ngood day\n```", "```\ndocker commit $(                         \\\n  docker start $(                        \\\n    docker create alpine /bin/sh -c      \\\n      \"echo My custom build > /etc/motd\" \\\n))\n```", "```\nFROM alpine\nRUN echo \"My custom build\" > /etc/motd \n```", "```\n$ cat .dockerignore\n# ignore .dockerignore, .git\n.dockerignore\n.git\n# exclude all *.tmp files and vim swp file recursively\n**/*.tmp\n**/[._]*.s[a-w][a-z]\n# exclude all markdown files except README*.md\n!README*.md \n```", "```\n## We can assign the image with more than one tag within a build command\n$ docker build -f deploy/builder.dck               \\\n   -t my-reg.com/prod/teabreaker:$(date +\"%g%m%d\") \\\n   -t my-reg.com/prod/teabreaker:latest .\n```", "```\n RUN <commands>\n RUN [\"executable\", \"params\", \"more params\"]\n```", "```\nCMD [\"executable\", \"params\", \"more params\"]\nCMD [\"param1\",\"param2\"]\nCMD command param1 param2 ...\n```", "```\n ENTRYPOINT [\"executable\", \"param1\", \"param2\"]\n ENTRYPOINT command param1 param2\n```", "```\n/bin/sh -c entry_cmd entry_params ...\n```", "```\nentry_cmd entry_params run_arguments\n```", "```\nentry_cmd entry_parms CMD_exec CMD_parms\nentry_cmd entry_parms CMD_parms\nentry_cmd entry_parms /bin/sh -c CMD_cmd CMD_parms\n```", "```\n ENV key value\n ENV key1=value1 key2=value2 ...\n```", "```\nFROM alpine\n# first form\nENV k1 wD # aw\n# second form, line continuation character also works\n\nENV k2=v2 k3=v\\ 3 \\\n    k4=\"v 4\"\n# ${k2} would be evaluated, so the key is \"k_v2\" in this case\nENV k_${k2}=$k3 k5=\\\"K\\=da\\\"\n# show the variables\nRUN env | grep -Ev '(HOSTNAME|PATH|PWD|HOME|SHLVL)' | sort \n```", "```\n...\n ---> Running in c5407972c5f5\nk1=wD # aw\nk2=v2\nk3=v 3\nk4=v 4\nk5=\"K=da\"\nk_v2=v 3 ...\n```", "```\nFROM alpine\nARG TARGET=dev\nARG FLAGS\nRUN ./build/$TARGET/run $FLAGS\n```", "```\nWORKDIR /usr\nWORKDIR src\nWORKDIR app\nRUN pwd\n# run docker build\n...\n---> Running in 73aff3ae46ac\n/usr/src/app\n```", "```\n COPY [--chown=<user>:<group>] <src> ... <dest>\n COPY [--chown=<user>:<group>] [\"<src>\", ..., \"<dest>\"]\n```", "```\nADD [--chown=<user>:<group>] <src > ... <dest>\nADD [--chown=<user>:<group>] [\"<src>\", ..., \"<dest>\"]\n```", "```\nVOLUME mount_point_1 mount_point_2 ...\nVOLUME [\"mount point 1\", \"mount point 2\", ...]\n```", "```\n--- baseimg.dck ---\nFROM alpine\nRUN apk add --no-cache git make\nWORKDIR /usr/src/app\nONBUILD COPY . /usr/src/app/\nONBUILD RUN git submodule init \\\n       && git submodule update \\\n       && make\n--- appimg.dck ---\nFROM baseimg\nEXPOSE 80\nCMD [\"/usr/src/app/entry\"]\n```", "```\n$ docker build -t baseimg -f baseimg.dck .\n---\nFROM alpine\nRUN apk add --no-cache git make\nWORKDIR /usr/src/app\n---\n$ docker build -t appimg -f appimg.dck .\n---\nCOPY . /usr/src/app/\nRUN git submodule init   \\\n && git submodule update \\\n && make\nEXPOSE 80\nCMD [\"/usr/src/app/entry\"]\n```", "```\nFROM ubuntu\nADD . /proj\nRUN apt-get update\nRUN apt-get upgrade -y\nRUN apt-get install -y redis-server python python-pip mysql-server\nADD /proj/db/my.cnf /etc/mysql/my.cnf\nADD /proj/db/redis.conf /etc/redis/redis.conf\nADD https://example.com/otherteam/dep.tgz /tmp/\nRUN -zxf /tmp/dep.tgz -C /usr/src\nRUN pip install -r /proj/app/requirements.txt\nRUN cd /proj/app ; python setup.py\nCMD /proj/start-all-service.sh\n```", "```\nFROM ubuntu\nADD proj/app /app\nRUN apt-get update\nRUN apt-get upgrade -y\nRUN apt-get install -y python python-pip\nADD https://example.com/otherteam/dep.tgz /tmp/\nRUN tar -zxf /tmp/dep.tgz -C /usr/src\nRUN pip install -r /app/requirements.txt\nRUN cd /app ; python setup.py\nCMD python app.py\n```", "```\nFROM ubuntu:18.04\n\nRUN apt-get update && apt-get upgrade -y \\\n && apt-get install -y --no-install-recommends \\\n      curl \\\n      python3.6 \\\n      python-pip=9.* \\\n && curl -SL https://example.com/otherteam/dep.tgz \\\n  | tar -zxC /usr/src \\\n && rm -rf /var/lib/apt/lists/*\n\nENTRYPOINT [\"python\"]\nCMD [\"entry.py\"]\nEXPOSE 5000\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\nCOPY . /app\n```", "```\nFROM golang:1.11 AS builder\nARG GOOS=linux\nARG GOARCH=amd64\nARG CGO_ENABLED=0\nWORKDIR /go/src/app\nCOPY main.go .\nRUN go get .\nRUN go build -a -tags netgo -ldflags '-w -s -extldflags \"-static\"'\n\nFROM scratch\nCOPY --from=builder /go/src/app/app .\nENTRYPOINT [\"/app\"]\nCMD [\"--help\"]\n```", "```\nARG TAGS=latest\nFROM ubuntu:$TAGS ...\n```", "```\n$ docker network create kiosk\n$ docker run -d --network-alias lcredis --network=kiosk redis\n$ docker run -d --network-alias lmysql -e MYSQL_ROOT_PASSWORD=$MYPS \\\n                --network=kiosk mysql:5.7\n$ docker run -d -p 5000:5000 \\\n                -e REDIS_HOST=lcredis --network=kiosk kiosk-example\n$ docker run -d -e REDIS_HOST=lcredis -e MYSQL_HOST=lmysql      \\\n                -e MYSQL_ROOT_PASSWORD=$MYPS -e MYSQL_USER=root \\\n                --network=kiosk recorder-example \n```", "```\nversion: '3'\nservices:\n hello-world:\n image: hello-world\n```", "```\n$ docker-compose up\nCreating network \"user_default\" with the default driver\nPulling hello-world (hello-world:)...\n...\nCreating user_hello-world_1 ... done\nAttaching to user_hello-world_1\nhello-world_1  |\nhello-world_1  | Hello from Docker!\nhello-world_1  | This message shows that your installation appears to be working correctly.\n...\nuser_hello-world_1 exited with code 0 \n```", "```\nversion: '3'\nservices:\n  kiosk-example:\n  recorder-example:\n  lcredis:\n  lmysql:\n```", "```\nkiosk-example:\n  image: kiosk-example\n  build: ./kiosk\n  ports:\n  - \"5000:5000\"\n  environment:\n    REDIS_HOST: lcredis\n```", "```\nversion: '3'\nservices:\n  kiosk-example:\n    image: kiosk-example\n    build: ./kiosk\n    ports:\n    - \"5000:5000\"\n    environment:\n      REDIS_HOST: lcredis\n  recorder-example:\n    image: recorder-example\n    build: ./recorder\n    environment:\n      REDIS_HOST: lcredis\n      MYSQL_HOST: lmysql\n      MYSQL_USER: root\n      MYSQL_ROOT_PASSWORD: mysqlpass\n  lcredis:\n    image: redis\n    ports:\n    - \"6379\"\n```", "```\n lmysql:\n    image: mysql:5.7\n    environment:\n      MYSQL_ROOT_PASSWORD: mysqlpass\n      MYSQL_DATABASE: db\n      MYSQL_USER: user\n      MYSQL_PASSWORD: pass\n    volumes:\n    - mysql-vol:/var/lib/mysql\n    ports:\n    - \"3306\"\nvolumes:\n  mysql-vol: {}\n```", "```\nversion: '3'\nservices:\n kiosk-example:\n image: kiosk-example\n build: ./kiosk\n ports:\n - \"5000:5000\"\n environment:\n REDIS_HOST: lcredis\n depends_on:\n - lcredis\n recorder-example:\n image: recorder-example\n build: ./recorder\n environment:\n REDIS_HOST: lcredis\n MYSQL_HOST: lmysql\n MYSQL_USER: root\n MYSQL_ROOT_PASSWORD: mysqlpass\n depends_on:\n - lmysql\n - lcredis\n lcredis:\n image: redis\n ports:\n - \"6379\"\n lmysql:\n image: mysql:5.7\n environment:\n MYSQL_ROOT_PASSWORD: mysqlpass\n MYSQL_DATABASE: db\n MYSQL_USER: user\n MYSQL_PASSWORD: pass\n volumes:\n - mysql-vol:/var/lib/mysql\n ports:\n - \"3306\"\nvolumes:\n mysql-vol: {}\n```", "```\n├── docker-compose.yml\n├── kiosk\n│   ├── Dockerfile\n│   ├── app.py\n│   └── requirements.txt\n└── recorder\n    ├── Dockerfile\n    ├── process.py\n    └── requirements.txt\n```", "```\n$ curl localhost:5000\nGooday!\n Import tickets with \"curl -XPOST -F 'value=<int>' /tickets\"\n Purchase a ticket with \"curl -XPOST /buy\n Get current tickets with \"curl -XGET /tickets\"\n$ curl -XGET localhost:5000/tickets\n0\n$ curl -XPOST -F 'value=10' localhost:5000/tickets\nSUCCESS\n$ curl -XGET localhost:5000/tickets\n10\n$ curl -XPOST localhost:5000/buy\nSUCCESS\n$ docker exec chapter2_lmysql_1  mysql -u root -pmysqlpass \\\n              -e \"select * from kiosk.sellinglog;\"\nid  ts\n1   1536704902204 \n```"]
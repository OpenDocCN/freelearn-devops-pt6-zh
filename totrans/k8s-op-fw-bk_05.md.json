["```\napiVersion: apiextensions.k8s.io/v1\n```", "```\nkind: CustomResourceDefinition\n```", "```\nmetadata:\n```", "```\n  name: myoperator.operator.example.com\n```", "```\nspec:\n```", "```\n  group: operator.example.com\n```", "```\n  names:\n```", "```\n    kind: MyOperator\n```", "```\n    listKind: MyOperatorList\n```", "```\n    plural: myoperators\n```", "```\n    singular: myoperator\n```", "```\n  scope: Namespaced\n```", "```\n  versions:\n```", "```\n    - name: v1alpha1\n```", "```\n      schema:\n```", "```\n        openAPIV3Schema:\n```", "```\n         ...\n```", "```\n      served: true\n```", "```\n      storage: true\n```", "```\n      subresources:\n```", "```\n        status: {}\n```", "```\nstatus:\n```", "```\n  acceptedNames:\n```", "```\n    kind: \"\"\n```", "```\n    plural: \"\"\n```", "```\n  conditions: []\n```", "```\n  storedVersions: []\n```", "```\napiVersion: v1alpha1\n```", "```\nkind: NginxOperator\n```", "```\nmetadata:\n```", "```\n  name: instance\n```", "```\nspec:\n```", "```\n  port: 80\n```", "```\n  replicas: 1\n```", "```\nstatus:\n```", "```\n  ...\n```", "```\n…\n```", "```\nimport appsv1 \"k8s.io/api/apps/v1\"\n```", "```\n…\n```", "```\nnginxDeployment := &appsv1.Deployment{\n```", "```\n  TypeMeta: metav1.TypeMeta{\n```", "```\n    Kind: \"Deployment\",\n```", "```\n    apiVersion: \"apps/v1\",\n```", "```\n  },\n```", "```\n  ObjectMeta: metav1.ObjectMeta{\n```", "```\n    Name: \"nginx-deploy\",\n```", "```\n    Namespace: \"nginx-ns\",\n```", "```\n  },\n```", "```\n  Spec: appsv1.DeploymentSpec{\n```", "```\n    Replicas: 1\n```", "```\n    Selector: &metav1.LabelSelector{\n```", "```\n      MatchLabels: map[string]string{\"app\":\"nginx\"},\n```", "```\n    },\n```", "```\n    Template: v1.PodTemplateSpec{\n```", "```\n      Spec: v1.PodSpec{\n```", "```\n        ObjectMeta: metav1.ObjectMeta{\n```", "```\n          Name: \"nginx-pod\",\n```", "```\n          Namespace: \"nginx-ns\",\n```", "```\n          Labels: map[string]string{\"app\":\"nginx\"},\n```", "```\n        },\n```", "```\n        Containers: []v1.Container{\n```", "```\n          {\n```", "```\n             Name: \"nginx\",\n```", "```\n             Image: \"nginx:latest\",\n```", "```\n             Ports: []v1.ContainerPort{{ContainerPort: int32(80)}},\n```", "```\n          },\n```", "```\n        },\n```", "```\n      },\n```", "```\n    },\n```", "```\n  },\n```", "```\n}\n```", "```\nkind: Deployment\n```", "```\napiVersion: apps/v1\n```", "```\nmetadata:\n```", "```\n  name: nginx-deploy\n```", "```\n  namespace: nginx-ns\n```", "```\nspec:\n```", "```\n  replicas: 1\n```", "```\n  selector:\n```", "```\n    matchLabels:\n```", "```\n      app: nginx\n```", "```\n  template:\n```", "```\n    metadata:\n```", "```\n      labels:\n```", "```\n        app: nginx\n```", "```\n    spec:\n```", "```\n      containers:\n```", "```\n      - name: nginx\n```", "```\n         image: nginx:latest\n```", "```\n         ports:\n```", "```\n          - containerPort: 80\n```", "```\nfunc (r *Controller) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error)\n```", "```\nfunc Reconcile:\n```", "```\n  // Get the Operator's CRD, if it doesn't exist then return\n```", "```\n  // an error so the user knows to create it\n```", "```\n  operatorCrd, error = getMyCRD()\n```", "```\n  if error != nil {\n```", "```\n    return error\n```", "```\n  }\n```", "```\n  // Get the related resources for the Operator (ie, the\n```", "```\n  // Operand's Deployment). If they don't exist, create them\n```", "```\n  resources, error = getRelatedResources()\n```", "```\n  if error == ResourcesNotFound {\n```", "```\n    createRelatedResources()\n```", "```\n  }\n```", "```\n  // Check that the related resources relevant values match\n```", "```\n  // what is set in the Operator's CRD. If they don't match,\n```", "```\n  // update the resource with the specified values.\n```", "```\n  if resources.Spec != operatorCrd.Spec {\n```", "```\n    updateRelatedResources(operatorCrd.Spec)\n```", "```\n  }\n```", "```\napiVersion: migration.k8s.io/v1alpha1\n```", "```\nkind: StorageVersionMigration\n```", "```\nmetadata:\n```", "```\n  name: nginx-operator-storage-version-migration\n```", "```\nspec:\n```", "```\n  resource:\n```", "```\n    group: operator.example.com\n```", "```\n    resource: nginxoperators\n```", "```\n    version: v1alpha2\n```", "```\nstatus:\n```", "```\n  conditions:\n```", "```\n    - type: Ready \n```", "```\n      status: \"True\"\n```", "```\n      lastProbeTime: null\n```", "```\n      lastTransitionTime: 2018-01-01T00:00:00Z\n```", "```\n$ kubectl describe pod/coredns-558bd4d5db-6mqc2 -n kube-system\n```", "```\n…\n```", "```\nEvents:\n```", "```\n  Type     Reason            Age                    From               Message\n```", "```\n  ----     ------            ----                   ----               -------\n```", "```\n  Warning  FailedScheduling  6m36s (x3 over 6m52s)  default-scheduler            0/1 nodes are available: 1 node(s) had taint {node.kubernetes.io/not-ready: }, that the pod didn't tolerate.\n```", "```\n  Normal   Scheduled         6m31s                  default-scheduler            Successfully assigned kube-system/coredns-558bd4d5db-6mqc2 to kind-control-plane\n```", "```\n  Normal   Pulled            6m30s                  kubelet, kind-control-plane  Container image \"k8s.gcr.io/coredns/coredns:v1.8.0\" already present on machine\n```", "```\n  Normal   Created           6m29s                  kubelet, kind-control-plane  Created container coredns\n```", "```\n  Normal   Started           6m29s                  kubelet, kind-control-plane  Started container coredns\n```"]
["```\napiVersion: v1\nkind: ConfigMap \nmetadata:\n  name: db-config \ndata:\n  db-ip-addresses: 1.2.3.4,5.6.7.8 \n```", "```\n$ k create -f db-config-map.yaml\nconfigmap/db-config created \n```", "```\n$ k get configmap db-config -o yaml\napiVersion: v1\ndata:\n  db-ip-addresses: 1.2.3.4,5.6.7.8\nkind: ConfigMap\nmetadata:\n  creationTimestamp: \"2022-07-17T17:39:05Z\"\n  name: db-config\n  namespace: default\n  resourceVersion: \"504571\"\n  uid: 11e49df0-ed1e-4bee-9fd7-bf38bb2aa38a \n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: some-pod\nspec:\n  containers:\n  - name: some-container\n    image: busybox\n    command: [\"/bin/sh\", \"-c\", \"env\"]\n    env:\n    - name: DB_IP_ADDRESSES\n      valueFrom:\n        configMapKeyRef:\n          name: db-config\n          key: db-ip-addresses\n  restartPolicy: Never \n```", "```\n$ k create -f pod-with-db.yaml\npod/some-pod created\n$ k logs some-pod | grep DB_IP\nDB_IP_ADDRESSES=1.2.3.4,5.6.7.8 \n```", "```\napiVersion: v1\nkind: Service \nmetadata:\n  name: nginx \n  labels:\n    app: nginx \nspec:\n  selector:\n    app: nginx\n  ports:\n  - port: 80 \n    name: web\n    clusterIP: None \n```", "```\napiVersion: apps/v1 \nkind: StatefulSet \nmetadata:\n  name: web\nspec:\n  serviceName: \"nginx\" \n  replicas: 3\n  template: \n    metadata:\n      labels:\n        app: nginx \n```", "```\nspec:\n  terminationGracePeriodSeconds: 10 \n  containers:\n  - name: nginx\n    image: gcr.io/google_containers/nginx-slim:0.8 \n    ports:\n    - containerPort: 80 \n      name: web \n    volumeMounts:\n    - name: www\n      mountPath: /usr/share/nginx/html \n```", "```\nvolumeClaimTemplates:\n    - metadata:\n      name: www \n      spec:\n        accessModes: [\"ReadWriteOnce\"] \n        resources:\n            requests: \n                storage: 1Gib \n```", "```\nk apply -f nginx-headless-service.yaml\nservice/nginx created\n$ k apply -f nginx-stateful-set.yaml\nstatefulset.apps/nginx created \n```", "```\n$ k get all\nNAME          READY   STATUS    RESTARTS   AGE\npod/nginx-0   1/1     Running   0          107s\npod/nginx-1   1/1     Running   0          104s\npod/nginx-2   1/1     Running   0          102s\nNAME                 TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE\nservice/nginx        ClusterIP   None         <none>        80/TCP    2m5s\nNAME                     READY   AGE\nstatefulset.apps/nginx   3/3     107s \n```", "```\n$ k get pvc\nNAME          STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE\nwww-nginx-0   Bound    pvc-40ac1c62-bba0-4e3c-9177-eda7402755b3   10Mi       RWO            standard       1m37s\nwww-nginx-1   Bound    pvc-94022a60-e4cb-4495-825d-eb744088266f   10Mi       RWO            standard       1m43s\nwww-nginx-2   Bound    pvc-8c60523f-a3e8-4ae3-a91f-6aaa53b02848   10Mi       RWO            standard       1m52h\n$ k get pv\nNAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                 STORAGECLASS   REASON   AGE\npvc-40ac1c62-bba0-4e3c-9177-eda7402755b3   10Mi       RWO            Delete           Bound    default/www-nginx-0   standard                1m59s\npvc-8c60523f-a3e8-4ae3-a91f-6aaa53b02848   10Mi       RWO            Delete           Bound    default/www-nginx-2   standard                2m2s\npvc-94022a60-e4cb-4495-825d-eb744088266f   10Mi       RWO            Delete           Bound    default/www-nginx-1   standard                2m1s \n```", "```\n$ k get po nginx-1 -o yaml | yq '.spec.volumes[0]'\nname: www\npersistentVolumeClaim:\n  claimName: www-nginx-1 \n```", "```\n$ k delete po nginx-1\npod \"nginx-1\" deleted\n$ k get po\nNAME      READY   STATUS    RESTARTS   AGE\nnginx-0   1/1     Running   0          12m\nnginx-1   1/1     Running   0          14s\nnginx-2   1/1     Running   0          12m \n```", "```\n$ k get po nginx-1 -o yaml | yq '.spec.volumes[0]'\nname: www\npersistentVolumeClaim:\n  claimName: www-nginx-1 \n```", "```\n$ k get pvc www-nginx-1\nNAME          STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE\nwww-nginx-1   Bound    pvc-94022a60-e4cb-4495-825d-eb744088266f   10Mi       RWO            standard       143s\n$ k get pv pvc-94022a60-e4cb-4495-825d-eb744088266f\nNAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                 STORAGECLASS   REASON   AGE\npvc-94022a60-e4cb-4495-825d-eb744088266f   10Mi       RWO            Delete           Bound    default/www-nginx-1   standard                2m1s \n```", "```\nFROM k8s.gcr.io/debian-base-amd64:0.3\nARG BUILD_DATE\nARG VCS_REF\nARG CASSANDRA_VERSION\nARG DEV_CONTAINER\nLABEL \\\n    org.label-schema.build-date=$BUILD_DATE \\\n    org.label-schema.docker.dockerfile=\"/Dockerfile\" \\\n    org.label-schema.license=\"Apache License 2.0\" \\\n    org.label-schema.name=\"k8s-for-greeks/docker-cassandra-k8s\" \\\n    org.label-schema.url=\"https://github.com/k8s-for-greeks/\" \\\n    org.label-schema.vcs-ref=$VCS_REF \\\n    org.label-schema.vcs-type=\"Git\" \\\n    org.label-schema.vcs-url=\"https://github.com/k8s-for-greeks/docker-cassandra-k8s\"\nENV CASSANDRA_HOME=/usr/local/apache-cassandra-${CASSANDRA_VERSION} \\\n    CASSANDRA_CONF=/etc/cassandra \\\n    CASSANDRA_DATA=/cassandra_data \\\n    CASSANDRA_LOGS=/var/log/cassandra \\\n    JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 \\\n    PATH=${PATH}:/usr/lib/jvm/java-8-openjdk-amd64/bin:/usr/local/apache-cassandra-${CASSANDRA_VERSION}/bin\nADD files /\nRUN clean-install bash \\\n    && /build.sh \\\n    && rm /build.sh\nVOLUME [\"/$CASSANDRA_DATA\"]\n# 7000: intra-node communication\n# 7001: TLS intra-node communication\n# 7199: JMX\n# 9042: CQL\n# 9160: thrift service\nEXPOSE 7000 7001 7199 9042 9160\nCMD [\"/usr/bin/dumb-init\", \"/bin/bash\", \"/run.sh\"] \n```", "```\nbuild.sh\ncassandra-seed.h\ncassandra.yaml\njvm.options\nkubernetes-cassandra.jar\nlogback.xml\nready-probe.sh\nrun.sh \n```", "```\n...\nclean-install \\\n    openjdk-8-jre-headless \\\n    libjemalloc1 \\\n    localepurge \\\n    dumb-init \\\n    wget\nCASSANDRA_PATH=\"cassandra/${CASSANDRA_VERSION}/apache-cassandra-${CASSANDRA_VERSION}-bin.tar.gz\"\nCASSANDRA_DOWNLOAD=\"http://www.apache.org/dyn/closer.cgi?path=/${CASSANDRA_PATH}&as_json=1\"\nCASSANDRA_MIRROR=`wget -q -O - ${CASSANDRA_DOWNLOAD} | grep -oP \"(?<=\\\"preferred\\\": \\\")[^\\\"]+\"`\necho \"Downloading Apache Cassandra from $CASSANDRA_MIRROR$CASSANDRA_PATH...\"\nwget -q -O - $CASSANDRA_MIRROR$CASSANDRA_PATH \\\n    | tar -xzf - -C /usr/local\nmkdir -p /cassandra_data/data\nmkdir -p /etc/cassandra\nmv /logback.xml /cassandra.yaml /jvm.options /etc/cassandra/\nmv /usr/local/apache-cassandra-${CASSANDRA_VERSION}/conf/cassandra-env.sh /etc/cassandra/\nadduser --disabled-password --no-create-home --gecos '' --disabled-login cassandra\nchmod +x /ready-probe.sh\nchown cassandra: /ready-probe.sh\nDEV_IMAGE=${DEV_CONTAINER:-}\nif [ ! -z \"$DEV_IMAGE\" ]; then\n    clean-install python;\nelse\n    rm -rf  $CASSANDRA_HOME/pylib;\nfi\nmv /kubernetes-cassandra.jar /usr/local/apache-cassandra-${CASSANDRA_VERSION}/lib\nmv /cassandra-seed.so /etc/cassandra/\nmv /cassandra-seed.h /usr/local/lib/include\napt-get -y purge localepurge\napt-get -y autoremove\napt-get clean\nrm -rf <many files> \n```", "```\nset -e\nCASSANDRA_CONF_DIR=/etc/cassandra\nCASSANDRA_CFG=$CASSANDRA_CONF_DIR/cassandra.yaml \n```", "```\n# we are doing StatefulSet or just setting our seeds\nif [ -z \"$CASSANDRA_SEEDS\" ]; then\n  HOSTNAME=$(hostname -f)\n  CASSANDRA_SEEDS=$(hostname -f)\nfi \n```", "```\n# The following vars relate to their counter parts in $CASSANDRA_CFG\n# for instance rpc_address\nCASSANDRA_RPC_ADDRESS=\"${CASSANDRA_RPC_ADDRESS:-0.0.0.0}\"\nCASSANDRA_NUM_TOKENS=\"${CASSANDRA_NUM_TOKENS:-32}\"\nCASSANDRA_CLUSTER_NAME=\"${CASSANDRA_CLUSTER_NAME:='Test Cluster'}\"\nCASSANDRA_LISTEN_ADDRESS=${POD_IP:-$HOSTNAME}\nCASSANDRA_BROADCAST_ADDRESS=${POD_IP:-$HOSTNAME}\nCASSANDRA_BROADCAST_RPC_ADDRESS=${POD_IP:-$HOSTNAME}\nCASSANDRA_DISK_OPTIMIZATION_STRATEGY=\"${CASSANDRA_DISK_OPTIMIZATION_STRATEGY:-ssd}\"\nCASSANDRA_MIGRATION_WAIT=\"${CASSANDRA_MIGRATION_WAIT:-1}\"\nCASSANDRA_ENDPOINT_SNITCH=\"${CASSANDRA_ENDPOINT_SNITCH:-SimpleSnitch}\"\nCASSANDRA_DC=\"${CASSANDRA_DC}\"\nCASSANDRA_RACK=\"${CASSANDRA_RACK}\"\nCASSANDRA_RING_DELAY=\"${CASSANDRA_RING_DELAY:-30000}\"\nCASSANDRA_AUTO_BOOTSTRAP=\"${CASSANDRA_AUTO_BOOTSTRAP:-true}\"\nCASSANDRA_SEEDS=\"${CASSANDRA_SEEDS:false}\"\nCASSANDRA_SEED_PROVIDER=\"${CASSANDRA_SEED_PROVIDER:-org.apache.cassandra.locator.SimpleSeedProvider}\"\nCASSANDRA_AUTO_BOOTSTRAP=\"${CASSANDRA_AUTO_BOOTSTRAP:false}\" \n```", "```\n# Turn off JMX auth\nCASSANDRA_OPEN_JMX=\"${CASSANDRA_OPEN_JMX:-false}\"\n# send GC to STDOUT\nCASSANDRA_GC_STDOUT=\"${CASSANDRA_GC_STDOUT:-false}\" \n```", "```\necho Starting Cassandra on ${CASSANDRA_LISTEN_ADDRESS}\necho CASSANDRA_CONF_DIR ${CASSANDRA_CONF_DIR}\necho CASSANDRA_CFG ${CASSANDRA_CFG}\necho CASSANDRA_AUTO_BOOTSTRAP ${CASSANDRA_AUTO_BOOTSTRAP}\n... \n```", "```\n# if DC and RACK are set, use GossipingPropertyFileSnitch\nif [[ $CASSANDRA_DC && $CASSANDRA_RACK ]]; then\n  echo \"dc=$CASSANDRA_DC\" > $CASSANDRA_CONF_DIR/cassandra-rackdc.properties\n  echo \"rack=$CASSANDRA_RACK\" >> $CASSANDRA_CONF_DIR/cassandra-rackdc.properties\n  CASSANDRA_ENDPOINT_SNITCH=\"GossipingPropertyFileSnitch\"\nfi \n```", "```\nif [ -n \"$CASSANDRA_MAX_HEAP\" ]; then\n  sed -ri \"s/^(#)?-Xmx[0-9]+.*/-Xmx$CASSANDRA_MAX_HEAP/\" \"$CASSANDRA_CONF_DIR/jvm.options\"\n  sed -ri \"s/^(#)?-Xms[0-9]+.*/-Xms$CASSANDRA_MAX_HEAP/\" \"$CASSANDRA_CONF_DIR/jvm.options\"\nfi\nif [ -n \"$CASSANDRA_REPLACE_NODE\" ]; then\n   echo \"-Dcassandra.replace_address=$CASSANDRA_REPLACE_NODE/\" >> \"$CASSANDRA_CONF_DIR/jvm.options\"\nfi \n```", "```\nfor rackdc in dc rack; do\n  var=\"CASSANDRA_${rackdc^^}\"\n  val=\"${!var}\"\n  if [ \"$val\" ]; then\n    sed -ri 's/^('\"$rackdc\"'=).*/\\1 '\"$val\"'/' \"$CASSANDRA_CONF_DIR/cassandra-rackdc.properties\"\n  fi\ndone \n```", "```\nfor yaml in \\\n  broadcast_address \\\n  broadcast_rpc_address \\\n  cluster_name \\\n  disk_optimization_strategy \\\n  endpoint_snitch \\\n  listen_address \\\n  num_tokens \\\n  rpc_address \\\n  start_rpc \\\n  key_cache_size_in_mb \\\n  concurrent_reads \\\n  concurrent_writes \\\n  memtable_cleanup_threshold \\\n  memtable_allocation_type \\\n  memtable_flush_writers \\\n  concurrent_compactors \\\n  compaction_throughput_mb_per_sec \\\n  counter_cache_size_in_mb \\\n  internode_compression \\\n  endpoint_snitch \\\n  gc_warn_threshold_in_ms \\\n  listen_interface \\\n  rpc_interface \\\n  ; do\n  var=\"CASSANDRA_${yaml^^}\"\n  val=\"${!var}\"\n  if [ \"$val\" ]; then\n    sed -ri 's/^(# )?('\"$yaml\"':).*/\\2 '\"$val\"'/' \"$CASSANDRA_CFG\"\n  fi\ndone\necho \"auto_bootstrap: ${CASSANDRA_AUTO_BOOTSTRAP}\" >> $CASSANDRA_CFG \n```", "```\n# set the seed to itself.  This is only for the first pod, otherwise\n# it will be able to get seeds from the seed provider\nif [[ $CASSANDRA_SEEDS == 'false' ]]; then\n  sed -ri 's/- seeds:.*/- seeds: \"'\"$POD_IP\"'\"/' $CASSANDRA_CFG\nelse # if we have seeds set them.  Probably StatefulSet\n  sed -ri 's/- seeds:.*/- seeds: \"'\"$CASSANDRA_SEEDS\"'\"/' $CASSANDRA_CFG\nfi\nsed -ri 's/- class_name: SEED_PROVIDER/- class_name: '\"$CASSANDRA_SEED_PROVIDER\"'/' $CASSANDRA_CFG \n```", "```\n# send gc to stdout\nif [[ $CASSANDRA_GC_STDOUT == 'true' ]]; then\n  sed -ri 's/ -Xloggc:\\/var\\/log\\/cassandra\\/gc\\.log//' $CASSANDRA_CONF_DIR/cassandra-env.sh\nfi\n# enable RMI and JMX to work on one port\necho \"JVM_OPTS=\\\"\\$JVM_OPTS -Djava.rmi.server.hostname=$POD_IP\\\"\" >> $CASSANDRA_CONF_DIR/cassandra-env.sh\n# getting WARNING messages with Migration Service\necho \"-Dcassandra.migration_task_wait_in_seconds=${CASSANDRA_MIGRATION_WAIT}\" >> $CASSANDRA_CONF_DIR/jvm.options\necho \"-Dcassandra.ring_delay_ms=${CASSANDRA_RING_DELAY}\" >> $CASSANDRA_CONF_DIR/jvm.options\nif [[ $CASSANDRA_OPEN_JMX == 'true' ]]; then\n  export LOCAL_JMX=no\n  sed -ri 's/ -Dcom\\.sun\\.management\\.jmxremote\\.authenticate=true/ -Dcom\\.sun\\.management\\.jmxremote\\.authenticate=false/' $CASSANDRA_CONF_DIR/cassandra-env.sh\n  sed -ri 's/ -Dcom\\.sun\\.management\\.jmxremote\\.password\\.file=\\/etc\\/cassandra\\/jmxremote\\.password//' $CASSANDRA_CONF_DIR/cassandra-env.sh\nfi \n```", "```\nchmod 700 \"${CASSANDRA_DATA}\"\nchown -c -R cassandra \"${CASSANDRA_DATA}\" \"${CASSANDRA_CONF_DIR}\"\nexport CLASSPATH=/kubernetes-cassandra.jar\nsu cassandra -c \"$CASSANDRA_HOME/bin/cassandra -f\" \n```", "```\n# any class that implements the SeedProvider interface and has a\n# constructor that takes a Map<String, String> of parameters will do.\nseed_provider:\n    # Addresses of hosts that are deemed contact points.\n    # Cassandra nodes use this list of hosts to find each other and learn\n    # the topology of the ring.  You must change this if you are running\n    # multiple nodes!\n    #- class_name: io.k8s.cassandra.KubernetesSeedProvider\n    - class_name: SEED_PROVIDER\n      parameters:\n          # seeds is actually a comma-delimited list of addresses.\n          # Ex: \"<ip1>,<ip2>,<ip3>\"\n          - seeds: \"127.0.0.1\" \n```", "```\n# You can use a custom Snitch by setting this to the full class\n# name of the snitch, which will be assumed to be on your classpath. \nendpoint_snitch: SimpleSnitch \n```", "```\nKubernetesSeedProvider (a Java class that implements the Cassandra SeedProvider API):\n```", "```\npublic class KubernetesSeedProvider implements SeedProvider {\n...\n    /**\n     * Call Kubernetes API to collect a list of seed providers\n     *\n     * @return list of seed providers\n     */\n    public List<InetAddress> getSeeds() {\n        GoInterface go = (GoInterface) Native.loadLibrary(\"cassandra-seed.so\", GoInterface.class);\n        String service = getEnvOrDefault(\"CASSANDRA_SERVICE\", \"cassandra\");\n        String namespace = getEnvOrDefault(\"POD_NAMESPACE\", \"default\");\n        String initialSeeds = getEnvOrDefault(\"CASSANDRA_SEEDS\", \"\");\n        if (\"\".equals(initialSeeds)) {\n            initialSeeds = getEnvOrDefault(\"POD_IP\", \"\");\n        }\n        String seedSizeVar = getEnvOrDefault(\"CASSANDRA_SERVICE_NUM_SEEDS\", \"8\");\n        Integer seedSize = Integer.valueOf(seedSizeVar);\n        String data = go.GetEndpoints(namespace, service, initialSeeds);\n        ObjectMapper mapper = new ObjectMapper();\n        try {\n            Endpoints endpoints = mapper.readValue(data, Endpoints.class);\n            logger.info(\"cassandra seeds: {}\", endpoints.ips.toString());\n            return Collections.unmodifiableList(endpoints.ips);\n        } catch (IOException e) {\n            // This should not happen\n            logger.error(\"unexpected error building cassandra seeds: {}\" , e.getMessage());\n            return Collections.emptyList();\n        }\n    } \n```", "```\napiVersion:  v1  \nkind: Service \nmetadata:\n  labels:\n    app: cassandra \n    name: cassandra\nspec:\n  clusterIP: None \n  ports:\n    - port: 9042 \n  selector:\n    app: Cassandra \n```", "```\napiVersion: \"apps/v1\"\nkind: StatefulSet\nmetadata:\n  name: cassandra\n  labels:\n     app: cassandra \n```", "```\nspec:\n  serviceName: cassandra\n  replicas: 3\n  selector:\n    matchLabels:\n      app: cassandra\n  template:      \n      ... \n```", "```\n template:\n    metadata:\n      labels:\n        app: cassandra\n    spec:\n      terminationGracePeriodSeconds: 1800\n      containers:\n      ... \n```", "```\n containers:\n      - name: cassandra\n        image: gcr.io/google-samples/cassandra:v14\n        imagePullPolicy: Always \n```", "```\n ports:\n        - containerPort: 7000\n          name: intra-node\n        - containerPort: 7001\n          name: tls-intra-node\n        - containerPort: 7199\n          name: jmx\n        - containerPort: 9042\n          name: cql \n```", "```\n resources:\n          limits:\n            cpu: \"500m\"\n            memory: 1Gi\n          requests:\n           cpu: \"500m\"\n           memory: 1Gi \n```", "```\n securityContext:\n          capabilities:\n            add:\n              - IPC_LOCK \n```", "```\n lifecycle:\n          preStop:\n            exec:\n              command:\n              - /bin/sh\n              - -c\n              - nodetool drain \n```", "```\n env:\n          - name: MAX_HEAP_SIZE\n            value: 512M\n          - name: HEAP_NEWSIZE\n            value: 100M\n          - name: CASSANDRA_SEEDS\n            value: \"cassandra-0.cassandra.default.svc.cluster.local\"\n          - name: CASSANDRA_CLUSTER_NAME\n            value: \"K8Demo\"\n          - name: CASSANDRA_DC\n            value: \"DC1-K8Demo\"\n          - name: CASSANDRA_RACK\n            value: \"Rack1-K8Demo\"\n          - name: CASSANDRA_SEED_PROVIDER\n            value: io.k8s.cassandra.KubernetesSeedProvider\n          - name: POD_IP\n            valueFrom:\n              fieldRef:\n                fieldPath: status.podIP \n```", "```\n readinessProbe:\n          exec:\n            command:\n            - /bin/bash\n            - -c\n            - /ready-probe.sh\n          initialDelaySeconds: 15\n          timeoutSeconds: 5 \n```", "```\n volumeMounts:\n        - name: cassandra-data\n          mountPath: /var/lib/cassandra \n```", "```\n volumeClaimTemplates:\n  - metadata:\n      name: cassandra-data\n    spec:\n      storageClassName: fast\n      accessModes: [ \"ReadWriteOnce\" ]\n      resources:\n        requests:\n          storage: 1Gi \n```"]
- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: An Introduction to GitOps
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitOps 简介
- en: In this opening chapter, we’ll delve into GitOps, an innovative approach that’s
    revolutionizing software development and operations. This chapter begins with
    the tale of GitOps, focusing on its transformative effect on organizational culture
    and workflows. The *Fundamentals of GitOps* section outlines its core principles,
    such as the centralization of Git, its declarative approach, and automated synchronization.
    *Traditional CI/CD with DevOps against GitOps* traces the evolution of software
    deployment, contextualizing GitOps in the broader history of the field. This chapter
    will also contrast traditional CI/CD and DevOps methodologies with GitOps, highlighting
    GitOps as an evolution in managing complex systems. We’ll conclude by discussing
    the advantages of adopting GitOps for platform engineering while illustrating
    its efficiency, consistency, and adaptability.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的开篇，我们将深入探讨 GitOps，这种革新的方法正在改变软件开发和运营的方式。本章的开头讲述了 GitOps 的来龙去脉，重点关注它对组织文化和工作流程的转变影响。*GitOps
    基础* 部分概述了其核心原则，如 Git 的集中管理、声明式方法和自动同步。*传统 CI/CD 与 DevOps 对比 GitOps* 追溯了软件部署的演变过程，将
    GitOps 置于该领域更广泛的历史背景中。本章还对比了传统的 CI/CD 和 DevOps 方法论与 GitOps，突出 GitOps 作为管理复杂系统的一种进化。我们将总结讨论在平台工程中采用
    GitOps 的优势，同时说明它的效率、一致性和适应性。
- en: 'In this chapter, we’ll cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章节将涵盖以下主题：
- en: GitOps unveiled – reshaping development culture and practices
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 揭示 GitOps - 重塑开发文化和实践
- en: The fundamentals of GitOps and the advantages of adopting it for platform engineering
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitOps 的基本原理以及在平台工程中采用它的优势
- en: Why GitOps?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么选择 GitOps？
- en: The integration between GitOps, IaC, and Kubernetes
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitOps、IaC 和 Kubernetes 的集成
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To follow along with this chapter, you need to have basic knowledge of **version
    control**, **Infrastructure as Code** (**IaC**), **continuous integration** (**CI**),
    **continuous delivery** (**CD**), and Kubernetes. Basic knowledge of major cloud
    providers, such as **Google Cloud Platform** (**GCP**), **AWS**, and Azure, will
    be beneficial.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 若要跟进本章内容，您需要对 **版本控制**、**基础设施即代码**（**IaC**）、**持续集成**（**CI**）、**持续交付**（**CD**）和
    Kubernetes 有基本的了解。熟悉主要云服务提供商如 **Google Cloud Platform**（**GCP**）、**AWS** 和 Azure
    也会有所裨益。
- en: GitOps unveiled – reshaping development culture and practices
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 揭示 GitOps - 重塑开发文化和实践
- en: In the realm of modern software development and operations, GitOps emerges as
    a confluence of ideas and practices, redefining the approach to managing complex
    systems.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代软件开发和运营领域，GitOps 出现为各种思想和实践的交汇点，重新定义了管理复杂系统的方法。
- en: The term GitOps was first introduced by *Alexis Richardson*, the co-founder
    of **Weaveworks**, in August 2017 through a series of blog posts. Richardson described
    GitOps as a methodology where developer tools are pivotal in driving operational
    procedures. This approach emphasized the significance of using declarative tools
    and advocated for the best practices wherein configurations are treated as code.
    Consequently, these configurations should be subject to version control, aligning
    with the core principles of GitOps.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: GitOps 这个术语最早由 **Alexis Richardson** 提出，他是 **Weaveworks** 的联合创始人，通过一系列博客文章于
    2017 年 8 月首次引入。Richardson 将 GitOps 描述为一种方法论，其中开发者工具在推动运维流程中至关重要。这种方法强调使用声明性工具的重要性，并倡导将配置视为代码的最佳实践。因此，这些配置应该受到版本控制的管理，与
    GitOps 的核心原则保持一致。
- en: This innovative concept marked a shift in how software development and IT operations
    teams approach how infrastructure and applications are managed and deployed, promoting
    a more efficient, transparent, and reliable process.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这一创新理念标志着软件开发和IT运营团队在管理基础设施和应用程序的方式上发生了变革，推动了更高效、透明和可靠的流程。
- en: GitOps is a paradigm that represents a breakthrough in how software development
    and operations teams manage and deploy applications and infrastructure. It revolves
    around the idea of using **Git**, a widely used version control system, as the
    single source of truth for declarative infrastructure and applications.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: GitOps 是一个突破性的范式，改变了软件开发和运维团队管理和部署应用程序及基础设施的方式。其核心思想是将广泛使用的版本控制系统 **Git** 作为声明性基础设施和应用程序的唯一真理源。
- en: '**Version control**, also known as source control, is a system that records
    changes to a file or set of files over time so that you can recall specific versions
    later. It allows multiple people to work on a document simultaneously, and version
    control systems provide a way to manage these changes among multiple people.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**版本控制**，也称为源代码管理，是一种记录文件或文件集随时间变化的系统，使您能够稍后调用特定的版本。它允许多人同时在同一文档上工作，版本控制系统提供了一种管理多人之间变更的方式。'
- en: Traditional CI/CD with DevOps against GitOps
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 传统 CI/CD 与 DevOps 对比 GitOps
- en: In traditional IT operations, as shown in *Figure 1**.1*, the development team
    periodically hands over new software versions to a **quality assurance** (**QA**)
    team. This team tests the software and passes it to the operations team for deployment.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统的 IT 运维中，如*图 1.1*所示，开发团队定期将新版本的软件交给**质量保证**（**QA**）团队。该团队对软件进行测试，然后交给运维团队进行部署。
- en: 'As software release cycles become shorter, traditional operations models struggle
    to keep up. The operations team oversees configuring the infrastructure for new
    software versions while focusing on system reliability, resilience, and security:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 随着软件发布周期的缩短，传统的运维模型难以跟上步伐。运维团队负责为新版本的软件配置基础设施，同时专注于系统的可靠性、弹性和安全性：
- en: '![Figure 1.1 – Example of a traditional IT operations workflow](img/B22100_01_01.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.1 – 传统 IT 运维工作流示例](img/B22100_01_01.jpg)'
- en: Figure 1.1 – Example of a traditional IT operations workflow
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1 – 传统 IT 运维工作流示例
- en: 'Managing infrastructure **without** advanced frameworks can be complex and
    requires specialized knowledge. IT operations encompass all processes and services
    provided by IT staff to meet a business’s technological requirements. This includes
    handling maintenance work and responding to customer issues. In traditional models,
    development, QA, and operations teams often work under different management structures,
    so detailed handoff processes and thorough documentation are crucial:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有先进框架的情况下管理基础设施可能会变得复杂，需要专业的知识。IT 运维涵盖了 IT 员工为满足企业技术需求提供的所有过程和服务。这包括处理维护工作和应对客户问题。在传统模型中，开发、QA
    和运维团队往往在不同的管理结构下工作，因此详细的交接过程和完善的文档至关重要：
- en: '![Figure 1.2 – Traditional organization model with separated teams](img/B22100_01_02.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.2 – 分离团队的传统组织模型](img/B22100_01_02.jpg)'
- en: Figure 1.2 – Traditional organization model with separated teams
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2 – 分离团队的传统组织模型
- en: The traditional organizational model, which is characterized by distinct, separated
    teams, tends to **complicate** the delivery process. This separation often leads
    to slower deployments and reduced deployment frequencies. Additionally, the need
    to transition tasks between teams heightens the risk of miscommunication, which
    can result in testing oversights and deployment errors.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的组织模型，特点是团队之间明确分离，往往会**使交付过程复杂化**。这种分离通常导致部署速度变慢和部署频率降低。此外，团队之间任务的交接增加了沟通不畅的风险，这可能导致测试疏漏和部署错误。
- en: Most development teams use automated build systems and CI to compile, test,
    and produce deployable artifacts.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数开发团队使用自动化构建系统和 CI 来编译、测试和生成可部署的工件。
- en: 'CI is a foundational process in modern software development that automates
    building, testing, and packaging applications, as shown in *Figure 1**.3*:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: CI 是现代软件开发中的基础过程，它自动化了构建、测试和打包应用程序的过程，如*图 1.3*所示：
- en: '![Figure 1.3 – Example of a CI workflow](img/B22100_01_03.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.3 – CI 工作流示例](img/B22100_01_03.jpg)'
- en: Figure 1.3 – Example of a CI workflow
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3 – CI 工作流示例
- en: In this system, software engineers frequently commit code changes to a central
    repository (for example, a **Git repository**), where these changes are automatically
    built, tested, and prepared for integration with the main code branch. This approach
    ensures that the software is always in a state ready for production deployment,
    highlighting the importance of CI in maintaining the continuous flow of software
    development.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一系统中，软件工程师经常将代码更改提交到中央代码库（例如**Git 仓库**），这些更改会自动构建、测试并准备好与主代码分支进行集成。这种方法确保软件始终处于可以部署到生产环境的状态，强调了持续集成（CI）在保持软件开发持续流动中的重要性。
- en: CI’s automated processes are crucial for ensuring the quality and integrity
    of code before it merges with the main branch. By automating these stages, CI
    minimizes the risks associated with human error and speeds up the development
    cycle. However, the process often halts at the deployment stage, which is still
    predominantly manual in many organizations. This manual deployment can involve
    complex procedures or semi-automated scripts and often requires operations engineers
    to physically transfer and restart applications on servers. Such manual interventions
    are prone to errors and lack robust control mechanisms, making them inefficient
    and risky.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: CI 的自动化流程对于确保代码在与主分支合并之前的质量和完整性至关重要。通过自动化这些阶段，CI 最小化了与人为错误相关的风险，并加快了开发周期。然而，过程通常在部署阶段停止，许多组织的这一环节仍然是人工的。人工部署可能涉及复杂的程序或半自动化脚本，且通常需要运维工程师在服务器上物理地转移和重启应用程序。这种人工干预容易出错，缺乏强有力的控制机制，使得其效率低下且具有风险。
- en: 'Building on the foundations of CI, **CD** takes automation a step further:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在 CI 的基础上，**CD** 将自动化推进了一步：
- en: '![Figure 1.4 – Example of a CD workflow](img/B22100_01_04.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图1.4 – CD 工作流示例](img/B22100_01_04.jpg)'
- en: Figure 1.4 – Example of a CD workflow
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.4 – CD 工作流示例
- en: CD is a practice where code changes, once they pass through CI’s build and testing
    phases, are automatically prepared and ready for release to a production environment.
    It always keeps the software in a **release-ready** state, dramatically simplifying
    the process of releasing updates and new features.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: CD 是一种实践，在这种实践中，代码更改在通过 CI 的构建和测试阶段后，自动准备并可以发布到生产环境。它始终保持软件处于**发布就绪**状态，极大简化了更新和新特性发布的流程。
- en: CD versus continuous deployment
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: CD 与持续部署
- en: CD and continuous deployment are closely related practices in software development
    that streamline the release process. CD ensures every code change is automatically
    built, tested, and prepared for release, allowing for manual deployment to production.
    Continuous deployment goes a step further by automatically deploying every change
    that passes testing directly into production, eliminating manual steps. This accelerates
    the release process but demands high confidence in automation and testing protocols.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: CD 和持续部署是软件开发中的密切相关实践，旨在简化发布流程。CD 确保每次代码更改都被自动构建、测试并准备好发布，从而允许手动部署到生产环境。持续部署更进一步，自动将每个通过测试的更改直接部署到生产环境中，消除了手动步骤。这加速了发布流程，但要求对自动化和测试协议有高度的信任。
- en: CD not only reduces the risks associated with deploying releases by enabling
    smaller and more frequent updates that are easier to manage than larger, infrequent
    ones, but it also significantly shortens prolonged testing cycles typically necessary
    for extensive code changes. This method enhances collaboration among development,
    operations, and other teams, aligning all parties toward the shared goal of rapidly
    and efficiently delivering high-quality software. CD efficiently manages and mitigates
    potential risks associated with large-scale code modifications, fostering a more
    agile and responsive software development life cycle.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: CD 不仅通过启用较小且频繁的更新来减少与发布相关的风险，这些更新比大型且不频繁的更新更易于管理，而且它还显著缩短了通常需要的长时间测试周期，特别是在大规模代码更改的情况下。这种方法增强了开发、运维和其他团队之间的协作，使各方朝着快速且高效交付高质量软件的共同目标迈进。CD
    有效地管理并缓解了与大规模代码修改相关的潜在风险，推动了更加灵活和响应迅速的软件开发生命周期。
- en: CD empowers businesses to quickly adapt to market changes and customer feedback,
    maintaining a competitive edge in innovation and customer satisfaction.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: CD 使企业能够快速适应市场变化和客户反馈，在创新和客户满意度上保持竞争优势。
- en: '**DevOps** marks a significant shift in both organizational framework and mindset,
    placing a strong emphasis on automation. DevOps, in essence, acts as the glue
    that binds the technical efficiencies of CI/CD with the strategic goals of the
    organization. It emphasizes continuous feedback, monitoring, and optimization
    throughout the development process, ensuring continuous improvement post-deployment.
    This approach ensures that software development is not just a linear process ending
    with deployment but a cyclical one, where feedback and performance data feed back
    into the development process.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**DevOps** 标志着组织框架和思维方式的重大转变，着重强调自动化。从本质上讲，DevOps 作为一种粘合剂，将 CI/CD 的技术高效性与组织的战略目标结合在一起。它强调在整个开发过程中持续的反馈、监控和优化，确保部署后的持续改进。这种方法确保软件开发不仅仅是一个以部署为终点的线性过程，而是一个循环过程，其中反馈和性能数据会反哺开发过程。'
- en: GitOps is an influential operational model that builds upon the core practices
    of DevOps, which are widely adopted in application development, and applies them
    to infrastructure automation. It integrates essential principles such as version
    control, collaborative work, adherence to compliance standards, and the use of
    CI/CD tools. This strategy facilitates effective and dependable management of
    IaC processes.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: GitOps 是一种影响力巨大的运营模型，它在 DevOps 的核心实践基础上发展，将其应用于基础设施自动化。它整合了版本控制、协作工作、遵守合规标准以及使用
    CI/CD 工具等基本原则。这一策略有助于有效且可靠地管理 IaC 过程。
- en: By integrating DevOps into the CI/CD pipeline, organizations can create a more
    holistic, efficient, and collaborative environment. This not only accelerates
    the pace of innovation and delivery but also significantly enhances product quality
    and customer satisfaction, positioning the organization competitively in an ever-evolving
    digital landscape.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将 DevOps 集成到 CI/CD 管道中，组织可以创造一个更加整体、高效和协作的环境。这不仅加速了创新和交付的步伐，而且显著提升了产品质量和客户满意度，使组织在日益发展的数字化环境中保持竞争力。
- en: In this model, the traditional roles of deployment and operations are transferred
    from the operations team to the development team of the application. DevOps integrates
    software **development** (**Dev**) with IT **operations** (**Ops**), aiming to
    reduce the overall system development life cycle. This integration facilitates
    frequent delivery of features, fixes, and updates, ensuring they align closely
    with business goals.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种模型中，部署和运营的传统角色从运营团队转移到应用程序的开发团队。DevOps 将软件**开发**（**Dev**）与 IT **运营**（**Ops**）集成，旨在缩短整体系统开发生命周期。这种整合促进了功能、修复和更新的频繁交付，确保它们与业务目标紧密对接。
- en: 'The following are some key advantages of adopting DevOps:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是采纳 DevOps 的一些关键优势：
- en: Enhanced collaboration between the development and operations teams
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加强开发和运营团队之间的协作
- en: Improvement in the quality of the products developed
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提高开发产品的质量
- en: An increase in the frequency of releases
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布频率的提高
- en: A reduction in the time needed to bring new features to market
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缩短将新功能推向市场的时间
- en: Lower costs in design, development, and operational processes
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 降低设计、开发和运营过程中的成本
- en: Reduced **mean time to recovery** (**MTTR**), enhancing system resilience and
    minimizing the impact of disruptions
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 降低**平均恢复时间**（**MTTR**），增强系统的韧性并最小化中断的影响
- en: The evolution from DevOps to GitOps represents a natural progression in the
    quest for more efficient and reliable software development and operations practices.
    While DevOps focuses on breaking down the barriers between software development
    and operations while fostering a culture of collaboration and continuous improvement,
    GitOps takes this a step further by centering the entire operational workflow
    around the Git version control system. GitOps leverages Git as the single source
    of truth for declarative infrastructure and application.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 从 DevOps 到 GitOps 的演变代表了追求更高效、更可靠的软件开发和运营实践的自然进展。DevOps 旨在打破软件开发与运营之间的障碍，培养合作和持续改进的文化，而
    GitOps 通过围绕 Git 版本控制系统构建整个运营工作流，将这一点进一步深化。GitOps 将 Git 作为声明式基础设施和应用程序的唯一真理来源。
- en: Reduced MTTR
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 降低 MTTR
- en: Reducing the MTTR refers to improving one of the key **DevOps Research and Assessment**
    (**DORA**) metrics, which is the average time it takes to recover from a failure
    or outage in a system or service. This metric is crucial in understanding and
    enhancing the resilience and reliability of IT operations. By reducing the MTTR,
    organizations can ensure that their systems are restored more quickly after a
    disruption, minimizing the impact on users and business operations. This improvement
    is often achieved through more effective incident management processes, automation,
    and better preparedness for handling failures.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 减少 MTTR 指的是改善 **DevOps 研究与评估** (**DORA**) 指标中的一个关键指标，即恢复系统或服务故障或中断的平均时间。这个指标对于理解和增强
    IT 运维的弹性和可靠性至关重要。通过减少 MTTR，组织可以确保在出现中断后，系统能够更快恢复，最大限度地减少对用户和业务运营的影响。这一改进通常通过更有效的事件管理流程、自动化和更好的故障处理准备来实现。
- en: This approach not only streamlines deployment and management processes but also
    enhances transparency, accountability, and reproducibility.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法不仅简化了部署和管理过程，还提高了透明度、问责制和可重现性。
- en: The transition from DevOps to GitOps is driven by the need for greater automation,
    consistency, and security in managing complex and dynamic cloud-native environments.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 从 DevOps 到 GitOps 的过渡是由在管理复杂和动态的云原生环境中对更高自动化、一致性和安全性的需求所驱动的。
- en: GitOps automates the deployment process using Git’s powerful version control
    capabilities, which means every change in the system can be tracked, reversed,
    and subject to peer review processes, just like code changes in software development.
    This shift brings the rigor and precision of software development to the world
    of operations, significantly reducing the potential for human error and improving
    the stability and security of production environments.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: GitOps 通过利用 Git 强大的版本控制功能来自动化部署过程，这意味着系统中的每一个更改都可以被跟踪、回滚，并经过同行评审过程，就像软件开发中的代码更改一样。这一转变将软件开发的严谨性和精确性带入了运维领域，大大减少了人为错误的可能性，并提高了生产环境的稳定性和安全性。
- en: Moreover, GitOps aligns perfectly with the containerized and microservices-oriented
    architectures that are prevalent in modern cloud environments, enabling faster
    and more efficient deployment pipelines that are crucial for businesses to remain
    agile and responsive in a rapidly changing digital landscape.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，GitOps 与当今云环境中流行的容器化和微服务架构完美契合，使得企业能够实现更快速、更高效的部署管道，这对于在快速变化的数字环境中保持敏捷和响应能力至关重要。
- en: In the following sections of this chapter, we will delve deeper into the benefits
    of adopting GitOps. We will explore why it should be used, its integration with
    Kubernetes, and other tools such as Argo CD and Flux CD.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章接下来的部分，我们将深入探讨采用 GitOps 的好处。我们将探讨为什么应该使用它、它与 Kubernetes 的集成以及与 Argo CD 和
    Flux CD 等工具的结合。
- en: The fundamentals of GitOps and the advantages of adopting it for platform engineering
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitOps 的基本原理及其在平台工程中采用的优势
- en: DevOps emerged as a response to these silos, blending the roles of development
    and operations. It extended the principles of CI/CD to include a cultural shift
    toward collaboration, aiming to break down the barriers between developers and
    IT operations. The emphasis was on a holistic approach to the software life cycle,
    ensuring that both development and operational considerations were integrated
    from the start. DevOps embraced practices such as IaC and monitoring, fostering
    a more responsive and agile environment.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 是对这些孤岛现象的回应，融合了开发和运维的角色。它将 CI/CD 原则扩展到包括文化转变，促进协作，旨在打破开发人员和 IT 运维之间的隔阂。重点是对软件生命周期的整体性方法，确保开发和运维的考虑从一开始就得到集成。DevOps
    采用了如 IaC 和监控等实践，营造了一个更具响应性和敏捷性的环境。
- en: 'GitOps, a more recent innovation, builds upon these foundations but introduces
    a significant shift: it takes the principles of DevOps and CI/CD and centralizes
    them around the Git repository.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: GitOps 是一种较新的创新，建立在这些基础上，但引入了一个重要转变：它将 DevOps 和 CI/CD 的原则集中在 Git 仓库周围。
- en: 'In a GitOps story, as illustrated in *Figure 1**.5*, everything begins with
    a Git repository, where the entire state of a system – code, configuration, environment
    settings, and even documentation – is stored and versioned. This approach allows
    for a high level of transparency, traceability, and audibility as every change
    is recorded and can be traced back to a commit:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GitOps 的故事中，如*图 1.5*所示，一切从一个 Git 仓库开始，其中存储并版本控制着系统的完整状态——代码、配置、环境设置，甚至文档。这种方法允许高水平的透明度、可追溯性和审计性，因为每次更改都会被记录，并可以追溯到某个提交：
- en: '![Figure 1.5 – Example of a GitOps pipeline embracing DevOps](img/B22100_01_05.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.5 – 一个包含 DevOps 的 GitOps 管道示例](img/B22100_01_05.jpg)'
- en: Figure 1.5 – Example of a GitOps pipeline embracing DevOps
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5 – 一个包含 DevOps 的 GitOps 管道示例
- en: In GitOps, Git is not just a version control system; it’s the single source
    of truth for both application code and infrastructure configuration. This approach
    leverages the strengths of Git – such as version control, collaboration features,
    and the pull request workflow – to manage the entire deployment and operational
    process. GitOps emphasizes a **declarative approach**, where the desired state
    of the system is defined in Git and automated processes ensure that the actual
    state aligns with this desired state.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GitOps 中，Git 不仅仅是一个版本控制系统；它是应用代码和基础设施配置的唯一真实来源。这种方法利用了 Git 的优势——如版本控制、协作功能和拉取请求工作流——来管理整个部署和运营过程。GitOps
    强调**声明式方法**，即系统的期望状态在 Git 中定义，自动化过程确保实际状态与期望状态一致。
- en: Everything from application code to infrastructure configuration is stored in
    Git repositories. This centralization not only simplifies the process of managing
    and tracking changes but also ensures consistency and transparency across all
    stages of development and deployment.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 从应用代码到基础设施配置，所有内容都存储在 Git 仓库中。这样的集中化不仅简化了管理和追踪变更的过程，还确保了开发和部署各个阶段的一致性和透明度。
- en: The workflow in a GitOps scenario is elegantly automated and highly efficient.
    Developers submit changes via pull requests, which then undergo automated tests
    and reviews. Once approved, these changes are automatically deployed to production
    environments, aligning with the principles of CI/CD seen previously.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GitOps 场景中的工作流优雅地实现了自动化且高效。开发人员通过拉取请求提交更改，随后这些更改将经过自动化测试和审查。一旦获得批准，这些更改会自动部署到生产环境，符合前面提到的
    CI/CD 原则。
- en: Pull request
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 拉取请求
- en: A **pull request** is a feature in version control systems, particularly in
    Git, that facilitates collaboration in software development. Acting as a checkpoint,
    a pull request allows developers to inform others about changes they’ve pushed
    to a repository on a hosting service such as GitHub or GitLab. After pushing a
    branch with updates, a developer can initiate a pull request to merge these changes
    into the main branch. This process invites review and discussion on the proposed
    changes, ensuring that code is vetted and refined collaboratively before being
    integrated, thus enhancing code quality and shared understanding among team members.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**拉取请求**是版本控制系统中的一项功能，特别是在 Git 中，它促进了软件开发中的协作。作为一个检查点，拉取请求允许开发人员通知其他人他们已经推送到托管服务（如
    GitHub 或 GitLab）上仓库中的更改。在推送包含更新的分支后，开发人员可以发起拉取请求，将这些更改合并到主分支中。这个过程邀请其他人对提议的更改进行审查和讨论，确保代码在合并之前经过协作审查和优化，从而提高了代码质量并促进了团队成员之间的共享理解。'
- en: This automation not only streamlines the deployment process but also significantly
    reduces the chances of human error. Moreover, because the entire system state
    is version-controlled, rolling back to a previous state in case of an issue is
    straightforward.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这种自动化不仅简化了部署过程，还显著减少了人为错误的可能性。此外，由于整个系统的状态都受到版本控制，因此在出现问题时，回滚到先前的状态变得非常简单。
- en: This process, often termed **Git-centric**, empowers teams to manage infrastructure
    and applications with the same tools and processes used in code development, bringing
    a unified approach to software delivery.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程通常被称为**以 Git 为中心**，它使团队能够使用与代码开发相同的工具和流程来管理基础设施和应用程序，从而为软件交付带来统一的方法。
- en: GitOps represents a significant evolution from traditional practices that leverages
    the strengths of Git, automation, and declarative models. This methodology provides
    a framework for realizing the results of DevOps culture, offering an agnostic
    approach that can be implemented with various tools, such as Kubernetes and CI/CD
    solutions.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: GitOps代表了从传统实践到现代方法的重大进化，它利用了Git、自动化和声明式模型的优势。这一方法为实现DevOps文化提供了框架，提供了一种与各种工具（如Kubernetes和CI/CD解决方案）兼容的通用方法。
- en: The GitOps Working Group, with its defined set of GitOps principles, underpins
    this approach, emphasizing the importance of declarative configurations, versioned
    and immutable states, automatic pulling, and continuous reconciliation.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: GitOps工作组通过其定义的GitOps原则支撑了这一方法，强调声明式配置、版本化和不可变状态、自动拉取和持续协调的重要性。
- en: As we explore this further, these fundamentals will be illustrated with practical
    examples, showcasing the real-world impact and advantages of adopting a GitOps
    mindset in platform engineering.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们进一步探讨，这些基础原则将通过实际示例加以说明，展示采用GitOps思维方式在平台工程中的现实影响和优势。
- en: Why GitOps?
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择GitOps？
- en: 'Adopting GitOps for platform engineering brings a multitude of advantages,
    reshaping how teams interact with infrastructure and applications. This methodology
    leverages the strengths of Git, automation, and declarative configurations, providing
    a robust framework for managing complex systems. Here are some of the key benefits:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 采用GitOps进行平台工程带来了众多优势，重新塑造了团队与基础设施和应用程序的互动方式。这一方法利用了Git、自动化和声明式配置的优势，为管理复杂系统提供了强有力的框架。以下是一些关键的好处：
- en: '**Declarative and immutable nature**: GitOps focuses on declaring the desired
    state of systems rather than detailing imperative scripts. It adopts an immutable
    infrastructure approach where changes are made by replacing resources rather than
    modifying existing ones, enhancing consistency and stability.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**声明式与不可变特性**：GitOps关注于声明系统的期望状态，而不是详细说明命令式脚本。它采用不可变基础设施的方法，通过替换资源而不是修改现有资源来进行变更，从而增强一致性和稳定性。'
- en: '**Automated synchronization**: Central to GitOps is automatically synchronizing
    the system state with the configurations described in Git to cover the full life
    cycle of infrastructure and applications, including deployment, updates, scaling,
    and recovery.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化同步**：GitOps的核心在于自动同步系统状态与Git中描述的配置，涵盖了基础设施和应用程序的整个生命周期，包括部署、更新、扩展和恢复。'
- en: '**Pull request workflow integration**: Operational processes in GitOps are
    deeply integrated with a pull request workflow, embodying the philosophy of treating
    everything as code. This integration facilitates code reviews, collaborative discussions,
    and shared knowledge and responsibility.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拉取请求工作流集成**：GitOps中的操作流程与拉取请求工作流深度集成，体现了将一切视为代码的理念。这种集成有助于代码审查、协作讨论、共享知识和责任。'
- en: '**Continuous feedback and monitoring**: GitOps emphasizes continuous monitoring
    to detect and remedy any divergence from the desired state, promoting ongoing
    system maintenance and improvement.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续反馈与监控**：GitOps强调持续监控，以检测并修正任何与期望状态的偏差，促进持续的系统维护和改进。'
- en: '**Enhanced efficiency and productivity**: By automating platform engineering
    aspects, GitOps reduces manual efforts and human errors, allowing teams to focus
    more on innovation.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提高效率与生产力**：通过自动化平台工程的各个方面，GitOps减少了人工操作和人为错误，使团队能够更多地专注于创新。'
- en: '**Improved consistency and reliability**: Using Git as the single source of
    truth with declarative configurations ensures consistent and reliable infrastructure
    across different environments.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提高一致性与可靠性**：将Git作为唯一的真实数据源，并采用声明式配置，确保了在不同环境中的基础设施一致性和可靠性。'
- en: '**Faster recovery and rollback**: GitOps enables quick rollbacks to previous
    states for enhanced system resilience and faster recovery from failures.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更快的恢复与回滚**：GitOps使得快速回滚到先前状态成为可能，增强了系统的弹性并加速了从故障中的恢复。'
- en: '**Collaboration and transparency**: The methodology encourages collaborative
    platform engineering, with peer reviews and discussions improving knowledge sharing
    and transparency.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**协作与透明性**：该方法鼓励协作平台工程，通过同行评审和讨论促进知识共享和透明性。'
- en: '**Streamlined audits and compliance**: All changes are tracked in Git, simplifying
    auditing and facilitating compliance with regulatory requirements and internal
    policies.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简化的审计与合规性**：所有更改都在Git中追踪，简化了审计过程，并便于遵循监管要求和内部政策的合规性。'
- en: '**Scalability and flexibility**: GitOps scales efficiently with organizational
    needs and adapts to various types of infrastructure, including cloud, on-premises,
    and hybrid environments.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性和灵活性**：GitOps能够高效地随组织需求进行扩展，并适应各种类型的基础设施，包括云、内部部署和混合环境。'
- en: '**Enhanced security**: The use of pull requests and code reviews adds an extra
    layer of security, ensuring thorough scrutiny of changes to infrastructure and
    applications.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**增强的安全性**：使用拉取请求和代码审查增加了额外的安全层，确保对基础设施和应用程序的更改进行彻底审查。'
- en: '**Simplified onboarding and knowledge sharing**: The Git repository provides
    a clear overview of the system’s current state, aiding in onboarding new team
    members and fostering an environment of accessible knowledge sharing.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简化的入职和知识共享**：Git仓库提供了系统当前状态的清晰概览，有助于新团队成员的入职，并促进知识共享的环境。'
- en: '**Continuous improvement and adaptation**: The inherent feedback loops and
    monitoring in GitOps enable teams to iteratively improve their systems and adapt
    to changing requirements.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续改进与适应**：GitOps固有的反馈循环和监控使团队能够迭代地改进系统，并适应变化的需求。'
- en: Adopting GitOps presents various challenges for a company that can impact its
    transition to this methodology. Firstly, there’s the learning curve and the need
    for training in specific tools such as Kubernetes, Helm, or Argo CD, which can
    temporarily reduce productivity. Implementing GitOps also requires a cultural
    shift toward rigorous code management and CI/CD practices. The initial setup and
    integration process can be complex and time-consuming, necessitating significant
    investments in time and resources.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 采用GitOps对公司来说会带来一些挑战，这些挑战可能会影响公司向这种方法论的过渡。首先，存在学习曲线，需要针对Kubernetes、Helm或Argo
    CD等特定工具进行培训，这可能会暂时降低生产力。实施GitOps还需要在文化上发生转变，要求严格的代码管理和CI/CD实践。初期的设置和集成过程可能复杂且耗时，需要在时间和资源上进行大量投入。
- en: Furthermore, organizing the Git repository structure efficiently is crucial
    as it directly affects the manageability and scalability of deployments. Mismanagement
    here can lead to operational inefficiencies and increased errors. Another critical
    aspect is secrets management; GitOps workflows require sensitive data to be handled
    carefully to prevent security breaches. Proper strategies must be implemented
    to securely store, access, and manage secrets within the GitOps processes to ensure
    that automated deployments remain secure and efficient.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，有效组织Git仓库结构至关重要，因为它直接影响部署的可管理性和可扩展性。如果管理不善，可能会导致运营效率低下和错误增加。另一个关键方面是秘密管理；GitOps工作流要求小心处理敏感数据，以防止安全漏洞。必须实施适当的策略来安全存储、访问和管理GitOps过程中的秘密，以确保自动化部署保持安全高效。
- en: In this section, we highlighted the significant advantages and challenges of
    adopting GitOps for platform engineering. This methodology capitalizes on the
    strengths of Git, automation, and declarative configurations to offer a robust
    framework for managing complex systems. The next section will introduce the integration
    between GitOps, IaC, and Kubernetes.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们重点介绍了采用GitOps进行平台工程的显著优势和挑战。这种方法论利用Git、自动化和声明式配置的优势，提供了一个强大的框架来管理复杂的系统。下一节将介绍GitOps、IaC与Kubernetes的集成。
- en: The integration between GitOps, IaC, and Kubernetes
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitOps、IaC与Kubernetes的集成
- en: In this section, we’ll delve into the intricate integration of GitOps, IaC,
    and Kubernetes, along with key tools such as Argo CD and Flux CD. We’ll explore
    how this cohesive blend enhances cloud-native operations, streamlining deployment
    processes and bolstering security, thereby revolutionizing the way infrastructure
    is managed and applications are deployed in modern software development environments.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将深入探讨GitOps、IaC和Kubernetes的复杂集成，以及诸如Argo CD和Flux CD等关键工具。我们将探索这种紧密结合如何增强云原生操作，简化部署流程并加强安全性，从而彻底改变基础设施管理和应用程序部署的方式，特别是在现代软件开发环境中。
- en: GitOps and IaC
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GitOps与IaC
- en: IaC involves managing and provisioning infrastructure via code rather than manual
    procedures. This approach involves creating configuration files that detail your
    infrastructure requirements, thus simplifying the process of modifying and disseminating
    these configurations. IaC guarantees consistent provisioning of the same environment
    each time, and at the same time, IaC transforms configuration specifications into
    coded documentation, improving configuration management.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: IaC通过代码而非手动程序来管理和提供基础设施。该方法包括创建配置文件，详细说明您的基础设施需求，从而简化修改和传播这些配置的过程。IaC保证每次都能一致地提供相同的环境，同时将配置规范转化为编码文档，从而改进配置管理。
- en: This approach helps avoid undocumented and spontaneous configuration alterations.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法有助于避免没有文档记录的、临时的配置更改。
- en: 'GitOps extends the familiar Git version control system to infrastructure and
    deployment management and aligns closely with the principles of IaC. This integration
    allows developers to manage infrastructure configuration and code deployment as
    they would their software development process, bringing numerous advantages:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: GitOps将熟悉的Git版本控制系统扩展到基础设施和部署管理，并与IaC原则紧密对接。这个集成允许开发人员像管理软件开发过程一样管理基础设施配置和代码部署，带来诸多优势：
- en: '**Accelerated production time**: Quicker infrastructure provisioning with reduced
    human error leads to more predictable outcomes'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加速生产时间**：更快速的基础设施提供，减少人为错误，导致更加可预测的结果。'
- en: '**Template-based reusability**: Use an IaC configuration file as a template,
    providing a baseline for further related configurations'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于模板的可重用性**：将IaC配置文件作为模板，提供进一步相关配置的基准。'
- en: '**Uniform deployment**: Achieve consistent infrastructure deployment, avoiding
    minor discrepancies that could lead to significant future issues'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**统一部署**：实现一致的基础设施部署，避免那些可能导致未来重大问题的小差异。'
- en: '**Traceability and auditability**: Integrating IaC with a code repository for
    source tracking offers a detailed history of changes, including versioning and
    audit trails that identify who made changes and when'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可追溯性和可审计性**：将IaC与代码库集成以进行源代码追踪，提供详细的变更历史记录，包括版本控制和审计轨迹，识别是谁在何时进行了更改。'
- en: '**Enhanced organizational knowledge**: Versioning documents the rationale behind
    changes, creating a valuable resource for both new and existing employees'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**增强的组织知识**：版本控制记录了更改背后的理由，成为新员工和现有员工的重要资源。'
- en: '**Improved disaster recovery**: IaC ensures the ability to rapidly reconstruct
    environments in the event of a failure, minimizing downtime and business disruption'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**改进的灾难恢复**：IaC确保在发生故障时能够快速重建环境，最小化停机时间和业务中断。'
- en: GitOps and Kubernetes
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GitOps 和 Kubernetes
- en: GitOps and Kubernetes ([https://kubernetes.io/docs/concepts/overview/](https://kubernetes.io/docs/concepts/overview/))
    represent a powerful combination in the realm of modern software development and
    infrastructure management. Kubernetes, an open source platform for automating
    the processes of deployment, scaling, and operations for application containers
    across clusters of hosts, provides a robust foundation for managing containerized
    applications at scale. GitOps, on the other hand, is an operational framework
    that applies the principles of Git – version control, collaboration, and compliance
    – to infrastructure automation. When combined, GitOps and Kubernetes offer a highly
    efficient, scalable, and reliable system for managing complex applications and
    infrastructure.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: GitOps 和 Kubernetes ([https://kubernetes.io/docs/concepts/overview/](https://kubernetes.io/docs/concepts/overview/))
    在现代软件开发和基础设施管理领域形成了强大的组合。Kubernetes是一个开源平台，用于自动化跨主机集群部署、扩展和操作应用容器的过程，为管理大规模容器化应用提供了坚实的基础。而GitOps则是一个操作框架，将Git的原则——版本控制、协作和合规性——应用于基础设施自动化。两者结合时，GitOps和Kubernetes提供了一个高效、可扩展和可靠的系统，用于管理复杂的应用和基础设施。
- en: Kubernetes has become essential for orchestrating containerized applications,
    offering capabilities such as automated rollouts and rollbacks, service discovery
    and load balancing (with its ability to assign IP addresses to Pods and services
    for load balancing), storage orchestration, secret and configuration management
    without exposing secrets or requiring Docker image rebuilds, and self-healing
    mechanisms such as restarting failed containers and rescheduling Pods when node
    issues occur.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 已成为编排容器化应用程序的关键工具，提供了自动化发布和回滚、服务发现与负载均衡（它能够为 Pods 和服务分配 IP 地址以实现负载均衡）、存储编排、以及在不暴露密钥或不需要重建
    Docker 镜像的情况下进行机密和配置管理等功能，并具备自愈机制，如重新启动失败的容器和在节点出现问题时重新调度 Pods。
- en: Additionally, Kubernetes facilitates horizontal scaling based on CPU usage and
    operates declaratively. These features continue to evolve with each Kubernetes
    release.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Kubernetes 支持基于 CPU 使用情况的横向扩展，并且以声明式方式操作。这些功能随着每次 Kubernetes 发布而不断发展。
- en: The fusion of GitOps with Kubernetes significantly quickens and improves the
    efficiency of deployment processes. This combination promotes more frequent deployments
    by enabling CD automation and integrating essential feedback and control systems.
    By using Git’s declarative definitions, developers can employ well-known workflows,
    which simplifies the ability to create new development or test environments and
    deploy new features to a cluster. Consequently, this leads to an increased daily
    rate of changes, accelerating the delivery of new features and functionalities
    to end users.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: GitOps 与 Kubernetes 的融合显著加快并提高了部署过程的效率。这个组合通过启用 CD 自动化并集成必要的反馈和控制系统，促进了更频繁的部署。通过使用
    Git 的声明式定义，开发人员可以采用知名的工作流，这简化了创建新开发或测试环境以及将新功能部署到集群的能力。因此，这导致了每日变化的频率增加，加速了新功能和功能交付给最终用户。
- en: GitOps also empowers teams to become more self-sufficient. Traditionally, development
    teams relied on operations teams for deploying changes in production. GitOps shifts
    this dynamic, allowing development teams to be less dependent on platform and
    operations teams for deploying and managing code and configuration changes in
    production. Simply committing changes to the Git repository and merging pull requests
    can trigger the rest of the process through GitOps tools. This self-service nature
    enhances efficiency and strategic capability.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: GitOps 还使团队能够变得更加自给自足。传统上，开发团队依赖运维团队将变更部署到生产环境中。GitOps 改变了这种动态，允许开发团队在部署和管理生产环境中的代码和配置变更时，减少对平台和运维团队的依赖。只需将更改提交到
    Git 仓库并合并拉取请求，就可以通过 GitOps 工具触发其余的过程。这种自服务特性提高了效率和战略能力。
- en: GitOps enhances the management of deployments and infrastructure by utilizing
    Git as the source of truth for **declarative configurations**. In a declarative
    system, the focus is on defining the desired outcome rather than the steps to
    achieve it. This approach contrasts with the imperative approach, which involves
    specifying a sequence of steps and often adds extra workload for operators. Within
    GitOps, every component of the environment can be coded and declared in the Git
    repository. Once changes are made and committed to Git, the system automatically
    processes these declarations to create or update the necessary objects.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: GitOps 通过将 Git 作为声明式配置的**真实来源**，提升了部署和基础设施管理的能力。在声明式系统中，重点是定义期望的结果，而不是实现它的步骤。这种方法与命令式方法不同，后者涉及指定一系列步骤，通常会增加操作人员的额外工作负担。在
    GitOps 中，环境的每个组件都可以在 Git 仓库中进行编码和声明。一旦进行更改并提交到 Git，系统会自动处理这些声明，以创建或更新必要的对象。
- en: This **seamless integration** with the declarative nature of Kubernetes is where
    the power of GitOps truly shines. Kubernetes operates on a **reconciliation loop**
    that continuously adjusts the actual state of the cluster to match the desired
    state defined by its configurations. When discrepancies between the current and
    desired states are detected, Kubernetes takes automatic action to reconcile these
    differences. This could involve creating, updating, or deleting resources to ensure
    the cluster’s configuration matches what has been defined in the Git repository.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Kubernetes 的声明式特性**无缝集成**，是 GitOps 真正发挥作用的地方。Kubernetes 在**协调循环**中操作，持续调整集群的实际状态，以匹配其配置定义的期望状态。当检测到当前状态与期望状态之间的差异时，Kubernetes
    会采取自动措施以协调这些差异。这可能涉及创建、更新或删除资源，以确保集群的配置与 Git 仓库中定义的内容一致。
- en: Together, the combination of GitOps and the Kubernetes reconciliation loop provides
    a robust framework for automated system management. This ensures that all system
    components are deployed consistently according to the precise configurations defined
    in Git, adhering to a fully declarative approach that streamlines operations,
    enhances reliability, and maintains consistency across development, staging, and
    production environments.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: GitOps 与 Kubernetes 协调循环的结合提供了一个强大的自动化系统管理框架。这确保了所有系统组件根据 Git 中定义的精确配置一致地部署，遵循完全声明式的方法，简化操作，提高可靠性，并保持开发、预发布和生产环境之间的一致性。
- en: '**Observability** is another crucial aspect of GitOps in a Kubernetes environment.
    It involves continuously monitoring the actual state present in the cluster and
    comparing it to the desired state. GitOps aids in measuring and monitoring what’s
    running on the cluster, alerting teams to any discrepancies. Modern GitOps tools
    come equipped with monitoring and notification capabilities to support this function.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**可观察性**是 GitOps 在 Kubernetes 环境中的另一个关键方面。它涉及持续监控集群中实际的状态，并与期望的状态进行比较。GitOps
    帮助衡量和监控集群中运行的内容，并提醒团队任何不一致之处。现代 GitOps 工具有监控和通知功能，以支持这一功能。'
- en: 'From a **compliance and auditing** perspective, GitOps offers significant advantages.
    With Git as the sole source of truth, auditing becomes straightforward: auditors
    can assess the desired state by examining the source code repository and verify
    the current state by reviewing the underlying infrastructure provider and the
    Kubernetes cluster state. This simplifies compliance and auditing processes across
    various domains.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 从 **合规性与审计** 的角度来看，GitOps 提供了显著的优势。以 Git 作为唯一的事实来源，审计变得简单：审计员可以通过检查源代码库来评估期望的状态，并通过查看底层基础设施提供商和
    Kubernetes 集群状态来验证当前状态。这简化了跨各种领域的合规性和审计流程。
- en: For organizations that use *multiple Kubernetes clusters* for different business
    and team needs, managing these clusters and maintaining consistent configuration
    and security policies is a significant challenge. GitOps addresses this by allowing
    GitOps agents running across these clusters to manage everything on behalf of
    the Ops team, making it an ideal solution for multi-cluster configuration management.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些为不同业务和团队需求使用 *多个 Kubernetes 集群* 的组织来说，管理这些集群并保持一致的配置和安全策略是一项重大挑战。GitOps
    通过允许跨这些集群运行的 GitOps 代理代替运维团队管理一切，从而解决了这一问题，使其成为多集群配置管理的理想解决方案。
- en: '**Disaster recovery** (**DR**) is essential for organizations to recover quickly
    from incidents that disrupt business operations, with the primary aim being to
    rapidly restore critical systems and IT infrastructure. From the GitOps perspective,
    DR primarily handles configuration management, not data recovery. This distinction
    is crucial because, while configurations are saved in Git, actual data is not.
    Tools such as Git are useful for version control of configurations but do not
    aid in data recovery. For example, if a database is deleted, Git cannot assist
    in its recovery; therefore, separate data recovery strategies are necessary and
    specifically designed for restoring lost data.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**灾难恢复**（**DR**）对于组织从中断业务运营的事件中迅速恢复至关重要，主要目标是快速恢复关键系统和 IT 基础设施。从 GitOps 的角度来看，DR
    主要处理配置管理，而非数据恢复。这个区别非常重要，因为虽然配置保存在 Git 中，但实际数据并不在其中。像 Git 这样的工具对于配置的版本控制非常有用，但不支持数据恢复。例如，如果数据库被删除，Git
    无法帮助恢复它；因此，需要单独的数据恢复策略，专门用于恢复丢失的数据。'
- en: In the Kubernetes ecosystem, the adoption of GitOps for automating infrastructure
    setup is on the rise. This includes the creation of deployments, services, and
    various Kubernetes entities. DevOps and **site reliability engineering** (**SRE**)
    teams are increasingly turning to GitOps for managing all infrastructure configuration
    files as code. This approach leverages the inherent IaC characteristic of GitOps.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 生态系统中，使用 GitOps 自动化基础设施配置的趋势正在上升。这包括部署、服务和各种 Kubernetes 实体的创建。DevOps
    和 **站点可靠性工程**（**SRE**）团队越来越多地转向 GitOps 来管理所有基础设施配置文件作为代码。这种方法利用了 GitOps 固有的基础设施即代码（IaC）特性。
- en: Furthermore, GitOps enhances *security* protocols. It uses sophisticated cryptographic
    methods in Git for monitoring and managing changes, and it can also authenticate
    changes to confirm authorship and source. This practice ensures a securely defined
    intended state of the cluster. In the event of a security breach, the immutable
    and auditable nature of Git’s source of truth is instrumental in reconstructing
    a system separate from the compromised one, thereby minimizing downtime and boosting
    the efficiency of incident responses.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，GitOps 还增强了 *安全* 协议。它在 Git 中使用复杂的加密方法来监视和管理变更，还可以验证变更以确认作者和来源。这种实践确保了集群的安全定义状态。在安全漏洞发生时，Git
    的不可变性和审计性质使得可以重建一个与受损系统分离的系统，从而最大程度地减少停机时间并提高事件响应的效率。
- en: The practice of separating responsibilities in software packaging and release
    to production further adheres to the principle of least privilege, which diminishes
    the likelihood and severity of security breaches and offers a smaller attack surface.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 软件打包和发布到生产环境中的责任分离实践进一步遵循最小特权原则，降低了安全漏洞发生的可能性和严重性，并提供了更小的攻击面。
- en: GitOps facilitates this by ensuring that the entire infrastructure environment
    and components are defined declaratively in the Git repository. In the event of
    a disaster, recovery becomes a matter of reapplying the configuration files from
    Git to quickly restore the ecosystem.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: GitOps 通过确保整个基础设施环境和组件在 Git 仓库中以声明方式定义，促进了这一过程。在灾难事件发生时，只需从 Git 中重新应用配置文件，快速恢复生态系统。
- en: Kubernetes and Argo CD
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubernetes 和 Argo CD
- en: Argo CD, a GitOps CD for Kubernetes ([argo-cd.readthedocs.io](http://argo-cd.readthedocs.io)),
    is a declarative tool for continuous delivery specifically designed for Kubernetes.
    It functions as a standalone solution or can be integrated into your existing
    CI/CD pipeline to efficiently deploy necessary resources across your Kubernetes
    clusters.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Argo CD 是针对 Kubernetes 的 GitOps CD 工具 ([argo-cd.readthedocs.io](http://argo-cd.readthedocs.io))，是一个声明性工具，专为
    Kubernetes 的持续交付而设计。它可以作为独立解决方案运行，也可以集成到现有的 CI/CD 流水线中，以高效地在 Kubernetes 集群中部署必要的资源。
- en: Integrating GitOps and Kubernetes using Argo CD provides a streamlined approach
    for managing cloud-native applications and jobs on Kubernetes. Argo CD, part of
    the Argo project family, offers a suite of tools, including Workflows, Events,
    and Rollouts, that enhance Kubernetes-native application delivery. This becomes
    particularly relevant for organizations transitioning to containerized environments
    and Kubernetes deployments, where Argo CD can act as a comprehensive solution.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Argo CD 将 GitOps 与 Kubernetes 集成，为在 Kubernetes 上管理云原生应用程序和作业提供了一种简化的方法。Argo
    CD 是 Argo 项目系列的一部分，提供了一套工具，包括 Workflows、Events 和 Rollouts，这些工具增强了 Kubernetes 原生应用程序的交付能力。对于转向容器化环境和
    Kubernetes 部署的组织来说尤为重要，此时 Argo CD 可作为一个全面的解决方案。
- en: In large-scale deployments typical of big enterprises with numerous developers
    and a multitude of microservices, the GitOps methodology shines. However, it often
    necessitates supplementary tools and services for effective implementation. It’s
    not practical for each team in such an organization to operate independently and
    manage its Kubernetes cluster. A more efficient strategy is a centralized platform
    for operating and maintaining multi-tenant clusters. This setup gives teams the
    autonomy to manage their workloads within these clusters, while still providing
    centralized oversight and maintenance.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在大型企业典型的大规模部署中，拥有众多开发人员和大量微服务的情况下，GitOps 方法论显得尤为突出。然而，为了有效实施，通常需要额外的工具和服务。在这样的组织中，每个团队独立运行和管理其
    Kubernetes 集群并不现实。更有效的策略是在一个集中平台上操作和维护多租户集群。这种设置为团队在这些集群中管理其工作负载提供了自主权，同时仍提供集中的监视和维护。
- en: 'Argo CD is instrumental in facilitating this centralized approach to cluster
    management, promoting the adoption of GitOps. The following are some key factors
    to consider if you want to create an effective GitOps strategy in Kubernetes with
    Argo CD:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Argo CD 在促进这种集中式集群管理方法方面发挥了关键作用，推动了 GitOps 的采用。以下是在 Kubernetes 中使用 Argo CD 创建有效
    GitOps 策略时需要考虑的一些关键因素：
- en: '**User onboarding**: Simplifying the onboarding process is crucial. Centralizing
    the installation, setup, and maintenance of deployment operators can ease the
    process of transitioning multiple microservices to Kubernetes, rather than placing
    this burden on individual teams. Incorporating **single sign-on** (**SSO**) is
    particularly beneficial in systems with a large user base, streamlining the introduction
    of new users.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户入职**：简化入职流程至关重要。集中部署操作员的安装、设置和维护工作，可以减轻将多个微服务迁移到Kubernetes的过程，而不是将这一负担交给各个团队。在用户数量庞大的系统中，采用**单点登录**（**SSO**）尤为有利，能够简化新用户的引入。'
- en: '**Multi-tenancy and management**: In environments with multiple tenants, users
    need secure and flexible access to resources. Kubernetes’ **role-based access
    control** (**RBAC**) system is a powerful feature but might not suffice for managing
    numerous clusters. Argo CD enhances this with additional access control features,
    integrating seamlessly with SSO providers and facilitating access to multiple
    clusters.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多租户和管理**：在多租户环境中，用户需要对资源进行安全且灵活的访问。Kubernetes的**基于角色的访问控制**（**RBAC**）系统是一个强大的功能，但可能不足以管理大量集群。Argo
    CD通过额外的访问控制功能增强了这一点，与SSO提供商无缝集成，便于访问多个集群。'
- en: '**Observability**: A key feature of an effective CD tool is enabling developers
    to monitor and track the state of their applications. Argo CD’s user-friendly
    interface provides detailed insights into an application’s configuration, such
    as sync status with Git, specific out-of-sync elements, and any operational issues.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可观察性**：有效CD工具的一个关键特性是使开发人员能够监控和跟踪应用程序的状态。Argo CD的用户友好界面提供了详细的应用程序配置洞察，例如与Git的同步状态、特定的不同步元素和任何操作问题。'
- en: In the following section, we will explore Flux CD, a tool that, when integrated
    with Kubernetes, enables scalability and ensures consistent environments across
    various types of deployments.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将探讨Flux CD，这是一款与Kubernetes集成后，能够实现可扩展性并确保各种部署类型之间环境一致性的工具。
- en: Kubernetes and Flux CD
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubernetes与Flux CD
- en: Flux ([fluxcd.io](http://fluxcd.io)) is an open and extensible CD solution for
    Kubernetes and represents a critical component in the modern DevOps ecosystem.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Flux（[fluxcd.io](http://fluxcd.io)）是一个开放且可扩展的Kubernetes CD解决方案，是现代DevOps生态系统中的一个关键组成部分。
- en: 'At the time of writing, Alexis Richardson, CEO of Weaveworks, has announced
    on LinkedIn that the company is facing economic challenges and will be closing
    its doors and shutting down commercial operations. Weaveworks will be collaborating
    with a financial trustee, to be announced soon, to manage the closure process.
    This decision comes despite the company generating significant revenue and expanding
    its customer base, highlighting the financial volatility and strategic challenges
    faced in maintaining its operations. The original announcement can be found here:
    [https://www.linkedin.com/posts/richardsonalexis_hi-everyone-i-am-very-sad-to-announce-activity-7160295096825860096-ZS67/](https://www.linkedin.com/posts/richardsonalexis_hi-everyone-i-am-very-sad-to-announce-activity-7160295096825860096-ZS67/).'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，Weaveworks的首席执行官Alexis Richardson在LinkedIn上宣布，公司正面临经济挑战，将关闭并停止商业运营。Weaveworks将与一位财务受托人合作，受托人将很快公布，以管理关闭过程。尽管公司创造了可观的收入并扩大了客户基础，这一决定仍然做出，突显了在维持运营过程中面临的财务波动和战略挑战。原始公告可在此查阅：[https://www.linkedin.com/posts/richardsonalexis_hi-everyone-i-am-very-sad-to-announce-activity-7160295096825860096-ZS67/](https://www.linkedin.com/posts/richardsonalexis_hi-everyone-i-am-very-sad-to-announce-activity-7160295096825860096-ZS67/)。
- en: As a GitOps tool, Flux ensures that the state of manifests in a Git repository
    is consistently synchronized with what is running in a Kubernetes cluster. GitOps,
    far from being just another tool, offers a method for developers to manage operational
    workflows in Kubernetes using Git. This approach emphasizes using a version-controlled
    system such as Git to deploy applications in Kubernetes, allowing developers to
    directly push code into production. Changes can easily be tracked and reverted
    if necessary, bolstering the reliability of deployments.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一款GitOps工具，Flux确保Git仓库中清单的状态与Kubernetes集群中的运行状态始终保持同步。GitOps不仅仅是另一个工具，它为开发人员提供了一种使用Git来管理Kubernetes中操作工作流的方法。这种方法强调使用如Git这样的版本控制系统来部署Kubernetes中的应用程序，使开发人员能够直接将代码推送到生产环境中。更改可以轻松追踪并在必要时回滚，从而增强部署的可靠性。
- en: 'The following are the main features of Flux CD:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Flux CD的主要特性：
- en: Automated synchronization between a version control repository and a cluster
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本控制仓库与集群之间的自动同步
- en: Instant reflection of repository changes in the cluster
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仓库变更在集群中的即时反映
- en: Direct code deployment into production from repositories
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从仓库直接部署代码到生产环境
- en: Version-controlled configuration, ensuring all configurations are up to date
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本控制的配置，确保所有配置都是最新的
- en: Disaster recovery capabilities, enabling new clusters to be set up with identical
    configurations
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 灾难恢复能力，能够以相同的配置设置新集群
- en: 'In the context of Kubernetes, a robust container orchestration platform, Flux
    CD plays an instrumental role. Kubernetes excels in automating and simplifying
    application deployment and management, particularly in scaling and maintaining
    consistent environments across diverse deployments. Flux CD, adhering to GitOps
    principles, introduces a layer of automation and security by continuously synchronizing
    application and infrastructure states with configurations stored in a Git repository.
    This ensures that the actual state aligns with the desired state in a secure and
    controlled manner. The synergy between Kubernetes and Flux CD offers several key
    benefits:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 的背景下，作为强大的容器编排平台，Flux CD 起着至关重要的作用。Kubernetes 在自动化和简化应用程序部署与管理方面表现出色，尤其是在跨多种部署场景中扩展和保持一致的环境方面。Flux
    CD 遵循 GitOps 原则，通过不断同步应用程序和基础设施的状态与存储在 Git 仓库中的配置，加入了一层自动化和安全性。这确保了实际状态与期望状态在安全和受控的方式下保持一致。Kubernetes
    和 Flux CD 之间的协同作用提供了以下几个关键优势：
- en: '**Automated deployments**: Flux CD’s automated updates and configurations are
    committed to the Git repository'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化部署**：Flux CD 的自动更新和配置会被提交到 Git 仓库'
- en: '**Scalability and reliability**: Kubernetes’ prowess in handling containerized
    applications is complemented by Flux CD’s consistency in configurations'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性和可靠性**：Kubernetes 在处理容器化应用程序方面的强大能力与 Flux CD 在配置上的一致性相得益彰'
- en: '**Enhanced security**: Flux CD’s use of Git as the single source of truth adds
    an extra security layer'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**增强的安全性**：Flux CD 将 Git 作为唯一的事实来源，增加了额外的安全层'
- en: '**Operational efficiency**: The integration streamlines operations, reducing
    manual intervention and increasing efficiency'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运营效率**：集成优化了操作，减少了人工干预，提高了效率'
- en: In conclusion, the combination of Kubernetes and Flux CD provides a comprehensive
    solution for modern software deployment and management. Their integration enhances
    automation, scalability, security, and efficiency, marking them as indispensable
    tools in cloud-native technologies and DevOps practices.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，Kubernetes 与 Flux CD 的结合为现代软件部署和管理提供了全面的解决方案。它们的集成增强了自动化、可扩展性、安全性和效率，使其成为云原生技术和
    DevOps 实践中不可或缺的工具。
- en: Summary
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter provided an in-depth introduction to GitOps, exploring its transformative
    impact on software development and operations. We began by contrasting GitOps
    with traditional CI/CD and DevOps methodologies, highlighting its unique approach
    and advantages.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 本章深入介绍了 GitOps，探讨了其对软件开发和运维的变革性影响。我们首先将 GitOps 与传统的 CI/CD 和 DevOps 方法进行了对比，突出了其独特的方法和优势。
- en: Then, we covered the history and evolution of deployment strategies that led
    to GitOps. Key principles such as Git centralization, the declarative approach,
    automated synchronization, and continuous feedback were discussed, emphasizing
    GitOps’ role in enhancing efficiency, consistency, and collaboration in platform
    engineering.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，我们介绍了推动 GitOps 产生的部署策略的历史和演变。讨论了 Git 集中化、声明式方法、自动化同步和持续反馈等关键原则，强调了 GitOps
    在提升平台工程效率、一致性和协作方面的作用。
- en: Additionally, we delved into GitOps’ integration with tools such as Kubernetes,
    showcasing its scalability and security advantages in modern cloud environments.
    We concluded by underscoring the significance of adopting GitOps for its robust
    framework and adaptability to evolving technological landscapes.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还深入探讨了 GitOps 与 Kubernetes 等工具的集成，展示了其在现代云环境中的可扩展性和安全性优势。最后，我们强调了采用 GitOps
    的重要性，因为它提供了强大的框架并能适应不断变化的技术环境。
- en: In [*Chapter 2*](B22100_02.xhtml#_idTextAnchor027), we’ll dive into the practicalities
    of GitOps in cloud-native environments, examining its seamless integration with
    Kubernetes, the architecture of lightweight Kubernetes distributions, and the
    design of cloud-native CI/CD pipelines.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第2章*](B22100_02.xhtml#_idTextAnchor027)中，我们将深入探讨GitOps在云原生环境中的实际应用，分析它与Kubernetes的无缝集成、轻量级Kubernetes发行版的架构以及云原生CI/CD管道的设计。
- en: Further reading
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'To learn more about the topics that were covered in this chapter, take a look
    at the following resources:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解本章中讨论的更多主题，请查看以下资源：
- en: '*Argo CD – Declarative GitOps CD for* *Kubernetes*: [https://argo-cd.readthedocs.io/en/stable/](https://argo-cd.readthedocs.io/en/stable/)'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Argo CD – Kubernetes的声明式GitOps CD*： [https://argo-cd.readthedocs.io/en/stable/](https://argo-cd.readthedocs.io/en/stable/)'
- en: '*Flux* *CD*: [https://fluxcd.io/](https://fluxcd.io/)'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Flux* *CD*： [https://fluxcd.io/](https://fluxcd.io/)'

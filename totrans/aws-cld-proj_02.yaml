- en: <st c="0">2</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2">Creating a Personal Website</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="29">This is the beginning of your hands-on experience.</st> <st c="81">Over
    the next chapters, you’ll immerse yourself in various scenarios.</st> <st c="151">In
    this first practical chapter, you are going to navigate through a scenario of
    building a personal website for your CV from a list of requirements.</st> <st
    c="301">With those requirements in mind, you are going to be guided through the
    methodology presented in</st> [*<st c="398">Chapter 1</st>*](B22051_01.xhtml#_idTextAnchor014)
    <st c="407">and architect a solution using AWS services such as S3 for storage
    and CloudFront</st> <st c="490">for serving.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="502">After that, you are going to build this architecture using the</st>
    <st c="566">AWS Console.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="578">In summary, this chapter covers the following main topics</st> <st
    c="637">in order:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="646">What you are going to build – a</st> <st c="679">personal website</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="695">How you are going to build it – using S3</st> <st c="737">and CloudFront</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="751">Actually building it – using the</st> <st c="785">AWS Console</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="796">How to improve the solution – security</st> <st c="836">and DNS</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="843">By the end of this chapter, you will be able to confidently create
    and host your own static websites in AWS.</st> <st c="953">This is a precursor
    to more advanced web applications that you will see in the</st> <st c="1032">following
    chapters.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1051">Technical requirements</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="1074">In order to create your own personal website, you will need access
    to an</st> <st c="1148">AWS account.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1160">This chapter has a dedicated folder in the GitHub repository of
    this book.</st> <st c="1236">There, you will find the code snippets required to
    follow</st> <st c="1294">along:</st> [<st c="1301">https://github.com/PacktPublishing/AWS-Cloud-Projects/tree/main/chapter2/code</st>](https://github.com/PacktPublishing/AWS-Cloud-Projects/tree/main/chapter2/code)<st
    c="1378">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1379">Scenario</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="1388">Imagine you’re a recent graduate or a</st> <st c="1426">professional
    looking to showcase your skills, experience, and accomplishments to potential
    employers or clients.</st> <st c="1540">You want to create an online presence
    that is easily accessible and professional-looking, where you can share your CV</st>
    <st c="1658">or resume.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1668">What better way to do this than to host your own</st> <st c="1718">personal
    website?</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1735">Requirements</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="1748">Recall that in</st> [*<st c="1764">Chapter 1</st>*](B22051_01.xhtml#_idTextAnchor014)<st
    c="1773">, gathering</st> <st c="1785">requirements was the first step to architect
    in AWS.</st> <st c="1838">No matter how simple or complicated your scenario is,
    it’s good practice to lay down the requirements on paper.</st> <st c="1950">It
    may sound silly, but spending time describing what you need, and how you will
    build it, will help you in the</st> <st c="2062">long run.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2071">In this specific case, you want to build something simple.</st>
    <st c="2131">You want a website that provides a good user experience.</st> <st
    c="2188">You don’t want a recruiter to see the page loading slowly, making them
    just move on to the next candidate.</st> <st c="2295">Likewise, you don’t want
    a recruiter to try to access your website while it’s down.</st> <st c="2379">To
    avoid this, you need to know what kind of experience your users</st> <st c="2446">are
    having.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2457">CVs change often.</st> <st c="2476">You might pick up a new skill,
    change jobs, or otherwise affect your CV.</st> <st c="2549">Due to this, you’ll
    want to have an easy mechanism to update the website.</st> <st c="2623">Lastly,
    as this is a personal project, you must keep costs as low</st> <st c="2689">as
    possible.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2701">All of these factors can be translated into functional and</st>
    <st c="2761">non-functional requirements.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2789">Functional requirements</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="2813">Functional requirements</st> <st c="2837">define the specific features,
    functionalities, and capabilities that the solution must provide.</st> <st c="2934">In
    this case, those are</st> <st c="2958">as follows:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2969">Ability to create, edit, and update the content of the CV, including
    sections for personal information, education, work experience, skills,</st> <st
    c="3110">and projects</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="3122">Support for non-text content such</st> <st c="3157">as images</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="3166">Accessible on any browser over</st> <st c="3198">the internet</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="3210">Ability to</st> <st c="3222">generate insights based on</st> <st
    c="3249">website data</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="3261">Non-functional requirements</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="3289">Non-functional requirements define the</st> <st c="3328">qualitative
    attributes that the solution must provide.</st> <st c="3384">In this case, those
    are</st> <st c="3408">as follows:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3419">Low latency – fast page</st> <st c="3444">load times</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="3454">High availability – available</st> <st c="3485">when accessed</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="3498">Ease of maintainability – easy process to update, and patch</st>
    <st c="3559">the website</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="3570">Low cost – cheap</st> <st c="3588">pay-as-you-go services</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="3610">Now, you have the requirements for the personal website.</st> <st
    c="3668">In keeping with the</st> [*<st c="3688">Chapter 1</st>*](B22051_01.xhtml#_idTextAnchor014)
    <st c="3697">methodology, you must now check for known</st> <st c="3740">well-accepted
    patterns.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3763">Architecture patterns</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '<st c="3785">A simple search in</st> <st c="3805">AWS Architecture Center (</st>[<st
    c="3830">https://aws.amazon.com/architecture/</st>](https://aws.amazon.com/architecture/)<st
    c="3867">) does not yield any</st> <st c="3888">reference architecture diagrams
    or sample code.</st> <st c="3937">However, it returns a YouTube series with an
    episode named</st> *<st c="3996">Back to Basics: Hosting a Static Website on</st>*
    *<st c="4040">AWS</st>* <st c="4043">(</st>[<st c="4045">https://www.youtube.com/watch?v=N0nhkyhaqyw&ab_channel=AmazonWebServices</st>](https://www.youtube.com/watch?v=N0nhkyhaqyw&ab_channel=AmazonWebServices)<st
    c="4117">).</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4120">Watch it; this is a good</st> <st c="4146">starting point.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4161">Outside the context of the AWS cloud, it is important to understand
    what a static website is.</st> <st c="4256">A</st> **<st c="4258">static website</st>**
    <st c="4272">is a</st> <st c="4278">type of website where the content is pre-built
    and served to users as static files, typically HTML, CSS, and JavaScript files.</st>
    <st c="4405">Static websites do not require</st> <st c="4436">server-side processing.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="4459">Dynamic websites</st>**<st c="4476">, on</st> <st c="4481">the
    other hand, generate content on the server side based on user requests and other
    data.</st> <st c="4572">You will see and build these in the</st> <st c="4608">coming
    chapters.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4624">The simplest example of a</st> <st c="4651">static website is having
    a single HTML file on your local desktop and opening it in your browser.</st>
    <st c="4749">This works; however, nobody other than yourself will be able to access
    it.</st> <st c="4824">This is why you need a hosting platform for your</st> <st
    c="4873">static websites.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4889">After having the</st> <st c="4907">static files built, you upload
    your files and other people will be able to access them through this hosting platform.</st>
    <st c="5025">This is where AWS and solution architecture play</st> <st c="5074">a
    role.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5081">Architecture</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="5094">By now, you understand what a static website is, have your requirements
    set, and are ready to create an architecture</st> <st c="5211">diagram of</st>
    <st c="5223">the solution.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5236">There are two</st> <st c="5251">possible options:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5268">Diagram without</st> <st c="5285">specific services</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="5302">Diagram with</st> <st c="5316">specific services</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="5333">Following a formal process, you create a diagram without specific
    services.</st> <st c="5410">After that, during service selection, you can match
    the unspecific services with the requirements and replace them with</st> <st c="5530">specific
    services.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5548">For example, you know you want</st> <st c="5580">a</st> **<st c="5582">Content
    Delivery Network</st>** <st c="5606">(</st>**<st c="5608">CDN</st>**<st c="5611">),
    so you should represent that.</st> <st c="5645">After that, if Amazon CloudFront
    matches your requirements, replace the agnostic CDN icon with CloudFront's icon
    in your</st> <st c="5766">architecture diagram.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5787">However, for this simple scenario and after learning about the
    architecture pattern, you can jump straight into a diagram populated with</st>
    <st c="5925">AWS services.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5938">Remember, you need a place to store your static files and a mechanism
    to make</st> <st c="6017">those available.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="6033">Your diagram should look like the one in</st> *<st c="6075">Figure
    2</st>**<st c="6083">.1</st>*<st c="6085">: a three-component diagram, with Amazon
    S3, Amazon CloudFront, and Amazon CloudWatch.</st> <st c="6173">Clients connect
    through CloudFront, which fetches your website static files from S3\.</st> <st
    c="6258">Both of these services emit metrics</st> <st c="6294">to CloudWatch.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – Static website architecture on AWS](img/B22051_02_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="6360">Figure 2.1 – Static website architecture on AWS</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6407">Although</st> <st c="6417">clients are represented with a computer
    icon, they can also be other types of devices such as phones</st> <st c="6518">or
    tablets.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6529">AWS services</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="6542">This architecture only uses three services.</st> <st c="6587">In
    this</st> <st c="6594">section, you will learn what these services do and why
    they address</st> <st c="6663">your requirements.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6681">Amazon Simple Storage Service (S3)</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="6716">Amazon S3 is a</st> <st c="6732">highly scalable and durable object
    storage service.</st> <st c="6784">S3 has many characteristics.</st> <st c="6813">The
    ones relevant to our use case are</st> <st c="6851">as follows:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6862">S3 is an object</st> <st c="6878">storage service, meaning that
    it stores data as objects (files) in</st> <st c="6946">buckets (directories).</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="6968">Designed for high availability, with data automatically replicated
    across multiple AWS availability zones within a region, ensuring that your data
    remains accessible even in the event of an outage or</st> <st c="7169">component
    failure.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="7187">Fully managed service; you don’t have to worry about the operational
    overhead of managing storage infrastructure, as all is handled</st> <st c="7320">for
    you.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="7328">Supports versioning, as a means of keeping multiple variants of
    an object in the same bucket allowing you to preserve, retrieve, and restore every
    version of every object stored in</st> <st c="7510">your buckets.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="7523">Highly cost-effective storage solution, with pay-as-you-go pricing
    and tiered</st> <st c="7602">storage classes.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="7618">Relate these statements to</st> <st c="7646">your requirements:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7664">You want to store files (e.g.</st> <st c="7695">HTML, CSS, and
    images), and you want to store them in a place where they will be available for
    the recruiters to access at any time.</st> <st c="7828">S3 is</st> <st c="7834">highly
    available.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="7851">You want the solution to be easily maintained, without having to
    do operating system patches and all those boring activities.</st> <st c="7978">S3
    is a</st> <st c="7986">fully-managed service.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="8008">Likewise, you want to be able to update your CV in an easy manner,
    and if you make a mistake, you want to be able to roll back to a previous version.</st>
    <st c="8159">S3 supports</st> <st c="8171">file versioning.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="8187">Lastly, you need this at the lowest possible cost.</st> <st c="8239">S3
    has a free tier, it only charges for what you consume, and it is considered a</st>
    <st c="8320">cost-effective service.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="8343">It checks all the boxes as the service to store your</st> <st c="8397">static
    files.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8410">Did you know that S3 has a native functionality to function as
    a static website?</st> <st c="8492">You can read all about it on the AWS website</st>
    <st c="8537">at</st> [<st c="8540">https://docs.aws.amazon.com/AmazonS3/latest/userguide/WebsiteHosting.html</st>](https://docs.aws.amazon.com/AmazonS3/latest/userguide/WebsiteHosting.html)<st
    c="8613">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8614">However, it</st> <st c="8627">presents two</st> <st c="8640">key
    limitations:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8656">S3 is a regional service, and therefore, the website is available
    at the AWS region-specific website endpoint of</st> <st c="8770">the bucket.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="8781">It does not</st> <st c="8794">support HTTPS.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '<st c="8808">This leads us to the next service: CloudFront.</st> <st c="8856">If
    you want to learn more about S3, including what is</st> <st c="8909">included
    in the free tier, you can read about it</st> <st c="8959">at</st> [<st c="8962">https://aws.amazon.com/pm/serv-s3</st>](https://aws.amazon.com/pm/serv-s3)<st
    c="8995">.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8996">Amazon CloudFront</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9014">Amazon CloudFront is a</st> <st c="9038">service that speeds up
    the distribution of your static and dynamic web content, such as</st> `<st c="9126">.html</st>`<st
    c="9131">,</st> `<st c="9133">.css</st>`<st c="9137">,</st> `<st c="9139">.js</st>`<st
    c="9142">, and image files, to your users.</st> <st c="9176">It is</st> <st c="9182">Amazon’s
    CDN.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9195">A CDN is a geographically distributed group of servers that caches
    content close to end users.</st> <st c="9291">In short, the way it works is that
    your users terminate their connections at CloudFront locations closer to them,
    and travel the rest of the way using Amazon’s high-speed backbone network.</st>
    <st c="9480">If your content is already cached in the location, it returns it
    without traveling all the way to</st> <st c="9578">the origin.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9589">Some of its key characteristics are</st> <st c="9626">as follows:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="9637">Globally distributed</st>**<st c="9658">: By</st> <st c="9664">caching
    static content at edge locations closer to users, CloudFront can serve the website’s
    files more quickly, resulting in faster load times and an enhanced user experience.</st>
    <st c="9841">This is particularly beneficial for users with slower internet connections
    or those located in regions far from the origin</st> <st c="9964">S3 bucket.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="9974">Highly available and fault tolerant</st>**<st c="10010">: CloudFront
    is built on top of AWS’s highly available and fault-tolerant infrastructure.</st>
    <st c="10101">The edge locations and underlying services are designed with redundancy
    and fault tolerance in mind, minimizing the impact of individual</st> <st c="10238">component
    failures.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="10257">Increased resiliency</st>**<st c="10278">: CloudFront supports
    multiple origin servers (e.g., Amazon S3 buckets or web servers) for a single
    distribution.</st> <st c="10393">If the primary origin server becomes unavailable,
    CloudFront automatically fails over to a secondary or tertiary origin server,
    ensuring continuous</st> <st c="10541">content delivery.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="10558">Content delivery optimization</st>**<st c="10588">: CloudFront
    optimizes the delivery of static content by automatically compressing files, minimizing
    the amount of data transferred, and supporting advanced caching mechanisms such
    as cache control headers</st> <st c="10794">and query</st> <st c="10805">string
    forwarding.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="10823">Again, relate these characteristics to</st> <st c="10863">your
    requirements:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10881">You want a distribution mechanism that is available through the
    internet on any device.</st> <st c="10970">You don’t know where your users will
    be or what types of devices and bandwidth constraints they might have.</st> <st
    c="11078">You benefit from CloudFront’s globally distributed nature with</st>
    <st c="11141">out-of-the-box caching.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="11164">S3 is highly available, but you also need the CDN to be highly
    available.</st> <st c="11239">When you chain components together, a failure in
    any one affects the whole system.</st> <st c="11322">CloudFront also helps to
    increase your availability further by bypassing S3 failures using a secondary
    origin</st> <st c="11432">or bucket.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="11442">Lastly, cost is important.</st> <st c="11470">CloudFront’s pricing
    model is based on data transferred out and the number of requests with a pay-as-you-go
    model.</st> <st c="11585">CloudFront automatically compresses your files, if supported
    by the client’s browser, minimizing</st> <st c="11682">data transfers.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="11697">If you want to learn more about CloudFront including what is included
    in the free tier, you can read about it in the AWS</st> <st c="11819">documentation:</st>
    [<st c="11834">https://aws.amazon.com/cloudfront</st>](https://aws.amazon.com/cloudfront)<st
    c="11867">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11868">Amazon CloudWatch metrics</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="11894">Amazon CloudWatch</st> <st c="11912">monitors resources and the
    applications you run on AWS in real time.</st> <st c="11982">You can use CloudWatch
    to collect and track metrics, logs, events,</st> <st c="12049">and traces.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12060">CloudWatch has many features, but in this project, we will only
    focus on CloudWatch metrics.</st> <st c="12154">Some key characteristics of</st>
    <st c="12182">CW metrics are</st> <st c="12197">as follows:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="12208">Comprehensive coverage</st>**<st c="12231">: It collects metrics
    from a wide range of AWS services, including Amazon S3 and Amazon CloudFront,
    alongside many others.</st> <st c="12355">This comprehensive coverage allows you
    to monitor and analyze the performance and health of your entire AWS infrastructure
    and applications from a single</st> <st c="12509">centralized location.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="12530">Alarms and notifications</st>**<st c="12555">: It supports
    the creation of alarms based on metric thresholds or patterns.</st> <st c="12633">These
    alarms can trigger notifications (e.g., email, SMS, or AWS Lambda functions) when
    specific conditions are met, allowing you to proactively respond to potential
    issues or take</st> <st c="12814">automated actions.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="12832">Cost-effectiveness</st>**<st c="12851">: With pricing based
    on the number of metrics ingested and the data retention period and a pay-as-you-go
    model, it allows you to scale your monitoring efforts as your AWS infrastructure
    and applications grow, without incurring significant</st> <st c="13091">upfront
    costs.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="13105">For any solution you deploy, you need to monitor it.</st> <st
    c="13159">This means that you need to know whether it’s working, and if it isn’t,
    you need to know why not.</st> <st c="13257">In this case, even though this is
    a simple website with your CV, you want to know whether anyone is accessing it,
    and what type of experience they are having.</st> <st c="13416">This will satisfy
    the</st> *<st c="13438">ability to generate insights based on website</st>* *<st
    c="13484">data</st>* <st c="13488">requirement.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="13501">CloudWatch is deeply integrated into the AWS ecosystem.</st>
    <st c="13558">It will natively show you both CloudFront and S3 metrics, for example:
    the number of requests, error rates, and latency.</st> <st c="13679">You will
    have access to these metrics while minimizing your costs.</st> <st c="13746">If
    you have no visits, you will have</st> <st c="13783">no costs.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="13792">If you want to learn more about CloudWatch metrics, including
    what is included in the free tier, you can read about it in the</st> <st c="13919">AWS</st>
    <st c="13923">documentation:</st> [<st c="13938">https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/working_with_metrics.html</st>](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/working_with_metrics.html)<st
    c="14026">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14027">Coding the solution</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="14047">Congratulations, you have designed an architecture that fulfills
    all your requirements.</st> <st c="14136">It’s time to build it.</st> <st c="14159">During
    this</st> <st c="14171">chapter, you are going to do it using the AWS console
    in the</st> **<st c="14232">N.</st>** **<st c="14235">Virginia</st>** <st c="14243">region.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14251">Editing the website</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="14271">Start by</st> <st c="14280">downloading the assets in the Git
    repository of this book at</st> [<st c="14342">https://github.com/PacktPublishing/AWS-Cloud-Projects</st>](https://github.com/PacktPublishing/AWS-Cloud-Projects)<st
    c="14395">. You can do it from your workstation terminal using the Git tool, or
    by downloading the repository as a ZIP file.</st> <st c="14510">A detailed step-by-step
    guide on how to use Git and GitHub is beyond the scope of this book, but if you
    want to deep dive into the topic, the book</st> *<st c="14657">Mastering Git</st>*<st
    c="14670">, available at</st> [<st c="14685">https://www.packtpub.com/product/mastering-git/9781783553754</st>](https://www.packtpub.com/product/mastering-git/9781783553754)<st
    c="14745">, covers</st> <st c="14754">it holistically.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14770">You will find three files in the</st> `<st c="14804">chapter2/code</st>`
    <st c="14817">folder.</st> <st c="14826">Open</st> `<st c="14831">index.html</st>`
    <st c="14841">in your favorite code editor.</st> <st c="14872">There, you will
    find a standard HTML that references some styles in the header, along with an
    HTML body with multiple divisions, highlighted with the tags</st> `<st c="15027">div</st>`<st
    c="15030">, populated</st> <st c="15042">with</st> <st c="15047">CV information:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '<st c="15739">If you are not familiar with HTML, this is the 1,000-foot overview:
    HTML files are what browsers read to render web pages.</st> <st c="15863">They
    are represented by the</st>`<st c="15890">.html</st>` <st c="15895">or</st> `<st
    c="15899">.htm</st>` <st c="15903">extensions.</st> <st c="15916">HTML documents
    have a series of elements, represented in between tags.</st> <st c="15987">Tags
    are represented with a word between</st> `<st c="16028"><></st>` <st c="16030">symbols.</st>
    <st c="16040">There are opening and closing tags; the content is between them.</st>
    <st c="16105">There are well-defined tags, for example,</st> `<st c="16147"><p></st>`<st
    c="16150">, which means</st> <st c="16164">paragraph.</st> <st c="16175">To represent
    a paragraph, you would do</st> <st c="16214">the following:</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: <st c="16265">You can find documentation about many other tags on the w3school
    website</st> <st c="16338">at</st> [<st c="16342">https://www.w3schools.com/tags/</st>](https://www.w3schools.com/tags/)<st
    c="16373">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16374">However, if you just use plain HTML, your website will not have
    a good aesthetic.</st> <st c="16457">To visualize this, open the</st> `<st c="16485">index.html</st>`
    <st c="16495">file in your browser.</st> <st c="16518">If you haven’t modified
    it yet, it will look like</st> *<st c="16568">Figure 2</st>**<st c="16576">.2</st>*<st
    c="16578">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – index.html browser visualization](img/B22051_02_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="19110">Figure 2.2 – index.html browser visualization</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19155">Now, open it in a text</st> <st c="19178">editor and remove these
    link tags in</st> <st c="19216">the header:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: <st c="19667">Refresh your</st> <st c="19681">browser page.</st> <st c="19695">Now,
    it will look like</st> *<st c="19718">Figure 2</st>**<st c="19726">.3</st>*<st
    c="19728">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3 – index.html browser visualization without styles](img/B22051_02_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="20019">Figure 2.3 – index.html browser visualization without styles</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20079">Hopefully, you see the value.</st> <st c="20110">Styles in HTML
    add style to an element, such as color, font, size, and more.</st> <st c="20187">Everything
    in HTML can be styled, even</st> `<st c="20226">div</st>` <st c="20229">elements.</st>
    <st c="20240">Re-add the five link tags you</st> <st c="20270">have removed.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20283">Now, open the file</st> <st c="20302">named</st> `<st c="20309">index.css</st>`
    <st c="20318">in a text editor.</st> <st c="20337">In this code, you can find
    specific font sizes and colors for each type of tag used in your HTML file.</st>
    <st c="20440">Likewise, you can find</st> <st c="20463">positioning attributes:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: <st c="20939">Contrast the names found here, such as</st> `<st c="20979">leftPanel</st>`
    <st c="20988">or</st> `<st c="20992">container</st>`<st c="21001">, with the</st>
    `<st c="21012">div class</st>` <st c="21021">attributes of your</st> `<st c="21041">index.html</st>`
    <st c="21051">file.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21057">The third</st> <st c="21067">file,</st> `<st c="21074">avatar.png</st>`<st
    c="21084">, is just a photo.</st> <st c="21103">To insert an image in an HTML,
    use the</st> `<st c="21142"><</st>``<st c="21143">img></st>` <st c="21147">tag.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21152">Now that you understand the three files and how they relate to
    each other, replace the content with your own CV information and photo.</st> <st
    c="21288">If you feel confident, alter some of the styles</st> <st c="21336">as
    well.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21344">Publishing the website</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="21367">So far, all you have done is use</st> <st c="21401">your local
    workstation.</st> <st c="21425">In this section, we are going to make your website</st>
    <st c="21476">globally available.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21495">Access your AWS account using the Console like in</st> [*<st c="21546">Chapter
    1</st>*](B22051_01.xhtml#_idTextAnchor014)<st c="21555">. Navigate to</st> <st
    c="21569">S3:</st> [<st c="21573">https://s3.console.aws.amazon.com/s3/home?region=us-east-1#</st>](https://s3.console.aws.amazon.com/s3/home?region=us-east-1#)<st
    c="21632">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21633">Create a bucket.</st> <st c="21651">In its configuration settings,
    give it a unique name, and leave</st> **<st c="21715">Block all public</st>**
    **<st c="21732">access</st>** <st c="21738">checked.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21747">Navigate inside the newly created S3 bucket and upload the three
    files that you downloaded earlier from the book’s GitHub repository:</st> `<st
    c="21882">index.html</st>`<st c="21892">,</st> `<st c="21894">index.css</st>`<st
    c="21903">, and</st> `<st c="21909">avatar.png</st>`<st c="21919">. These, as
    mentioned, were example files, and you can and should replace them with your own.</st>
    <st c="22013">If you have not done this by the end of this chapter, you will have
    a website of one of the book’s</st> <st c="22112">authors’ CVs.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="22125">Navigate to the CloudFront console (</st>[<st c="22162">https://us-east-1.console.aws.amazon.com/cloudfront/v4/home?region=us-east-1#/distributions</st>](https://us-east-1.console.aws.amazon.com/cloudfront/v4/home?region=us-east-1#/distributions)<st
    c="22254">) and create a</st> <st c="22270">new distribution:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="22287">Select your bucket as</st> **<st c="22310">Origin domain</st>**<st
    c="22323">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="22324">Change</st> **<st c="22332">Origin access</st>** <st c="22345">from</st>
    **<st c="22351">Public</st>** <st c="22357">to</st> **<st c="22361">Origin access</st>**
    **<st c="22375">control settings</st>**<st c="22391">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="22392">Create a new OAC with the default options, and select it under</st>
    **<st c="22456">Origin</st>** **<st c="22463">access control</st>**<st c="22477">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="22478">Under the</st> **<st c="22489">Web Application Firewall (WAF)</st>**
    <st c="22519">section, do not enable the</st> <st c="22547">security protections.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="22568">Before creating your distribution, read through all the options.</st>
    <st c="22634">Notice some interesting ones, such as the cache policy, the ability
    to compress objects automatically, and the different types</st> <st c="22761">of
    pricing.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="22772">When you create</st> <st c="22789">the distribution, a yellow
    popup will appear at the top of your screen, like the one shown in</st> *<st c="22883">Figure
    2</st>**<st c="22891">.4</st>*<st c="22893">. Select</st> **<st c="22902">Copy
    policy</st>**<st c="22913">, followed by</st> **<st c="22927">Go to S3 bucket
    permissions to</st>** **<st c="22958">update policy</st>**<st c="22971">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.4 – CloudFront OAC popup](img/B22051_02_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="23197">Figure 2.4 – CloudFront OAC popup</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="23230">You will be presented with your S3 bucket settings.</st> <st c="23283">Select</st>
    **<st c="23290">Edit</st>** <st c="23294">under the</st> **<st c="23305">Bucket
    policy</st>** <st c="23318">section, paste the policy you copied, and</st> <st
    c="23361">save it.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="23369">The policy should look like the following one.</st> <st c="23417">It
    allows the CloudFront service to access the resources inside your bucket.</st>
    <st c="23494">In this case, that’s the</st> `<st c="23519">cloudprojectwebsitebucket</st>`
    <st c="23544">bucket:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: <st c="23962">Navigate back to your</st> <st c="23984">CloudFront distribution
    and note the distribution name.</st> <st c="24041">Note that the CloudFront distribution
    might take a minute or two to</st> <st c="24109">become available.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="24126">Append</st> `<st c="24134">index.html</st>` <st c="24144">at the
    end, and after your distribution status shows</st> **<st c="24198">Enabled</st>**<st
    c="24205">, open it in your browser.</st> <st c="24232">The URL should have the
    following format; the highlighted part should be different in</st> <st c="24318">your
    case:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: https://<st c="25438">d1hjtv5xjv873g</st>.cloudfront.net/
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: $ nslookup d1hjtv5xjv873g.cloudfront.net
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '<st c="0">Part 2: Intermediate Level Projects</st>'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="36">In</st> *<st c="40">Part 2</st>* <st c="46">of this book, you are
    going to continue with what you have learned and built in</st> *<st c="127">Part
    1</st>*<st c="133">. However, this part has an increased level of difficulty.</st>
    <st c="192">You will build four applications in a step-by-step manner powered
    by many different AWS services, including EC2, Lambda, API Gateway, Rekognition,
    and DynamoDB.</st> <st c="353">By the end of this chapter, you will be able to
    autonomously build your own distributed</st> <st c="441">web applications.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="458">This part has the</st> <st c="477">following chapters:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[*<st c="496">Chapter 3</st>*](B22051_03.xhtml#_idTextAnchor054)<st c="506">,</st>
    *<st c="508">Building a Recipe-Sharing Application</st>*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*<st c="545">Chapter 4</st>*](B22051_04.xhtml#_idTextAnchor089)<st c="555">,</st>
    *<st c="557">Building a Serverless Recipe-Sharing Application</st>*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*<st c="605">Chapter 5</st>*](B22051_05.xhtml#_idTextAnchor123)<st c="615">,</st>
    *<st c="617">Implementing an Image Analyzer to Detect Photo Friendliness</st>*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*<st c="676">Chapter 6</st>*](B22051_06.xhtml#_idTextAnchor151)<st c="686">,</st>
    *<st c="688">Architecting a Content Translation Pipeline</st>*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL

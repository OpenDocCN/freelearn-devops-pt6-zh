- en: '17'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kubernetes Clusters on Microsoft Azure with Azure Kubernetes Service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The final public cloud Kubernetes service we’ll examine is **Azure Kubernetes
    Service** (**AKS**), hosted in Microsoft Azure, one of the “big three” public
    cloud providers – the other two of the big three we have already covered in *Chapter
    15*, *Kubernetes Clusters on Google Kubernetes Engine*, and *Chapter 16*, *Launching
    a Kubernetes Cluster on Amazon Web Services with Amazon Elastic Kubernetes Service*.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of the chapter, you will have configured your local environment with
    the tools needed to interact with your Microsoft Azure account and launch your
    AKS cluster.
  prefs: []
  type: TYPE_NORMAL
- en: After deploying the cluster, we’ll launch the same workload as in the previous
    chapters and explore the integration level between your AKS cluster and the Microsoft
    Azure portal.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, at the end of the chapter, we will discuss the three services we covered
    in this and the previous two chapters, as well as which one I would recommend.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, we will be covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What are Microsoft Azure and Azure Kubernetes Service?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing your local environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Launching your Azure Kubernetes Service cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying a workload and interacting with your cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting your Azure Kubernetes Service cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you plan on following along with the examples covered in this chapter, you
    need a Microsoft Azure account with a valid payment method attached.
  prefs: []
  type: TYPE_NORMAL
- en: Following the examples in this chapter will incur a cost, and it is essential
    to terminate any resources you launch once you have finished with them to prevent
    unwanted expenses. All prices quoted in this chapter are correct at the time of
    print, and we recommend that you review the current costs before you launch any
    resources.
  prefs: []
  type: TYPE_NORMAL
- en: What are Microsoft Azure and Azure Kubernetes Service?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start to look at installing the supporting tools, let’s quickly discuss
    the origins of the services we’ll be looking at, starting with Microsoft Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Azure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In 2008, Microsoft formally announced that it had a new service called Windows
    Azure.
  prefs: []
  type: TYPE_NORMAL
- en: This service was part of a project known internally as Project Red Dog, which
    had been in development since 2004\. This project aimed to deliver data center
    services using core Windows components.
  prefs: []
  type: TYPE_NORMAL
- en: 'The five core components that Microsoft announced at their 2008 developer conference
    were as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Microsoft SQL Data Services**: This was a cloud version of the Microsoft
    SQL Database service running as a **Platform** **as a Service** (**PaaS**), which
    aimed to remove the complexity of hosting your own SQL services.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Microsoft .NET Services**: Another PaaS service that allowed developers to
    deploy their .NET-based applications into a Microsoft-managed .NET runtime.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Microsoft SharePoint**: A **Software** **as a Service** (**SaaS**) version
    of the popular intranet product.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Microsoft Dynamics**: A SaaS version of Microsoft’s CRM product.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Windows Azure**: An **Infrastructure as** **a Service** (**IaaS**) offering,
    like other cloud providers, enabling users to spin up virtual machines, storage,
    and the networking services needed to support their compute workloads.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All these services were built on top of the Red Dog operating system, from which
    the project took its name; this was a specialized version of the Windows operating
    system with a built-in cloud layer.
  prefs: []
  type: TYPE_NORMAL
- en: In 2014, Windows Azure was renamed Microsoft Azure, reflecting the name of the
    underlying operating system powering the cloud services and that Azure was running
    many Linux-based workloads. As part of this announcement, newly appointed Microsoft
    CEO Satya Nadella showed the now famous (or infamous, depending on your point
    of view) “Microsoft loves Linux” slide, with “loves” represented by a heart emoji.
  prefs: []
  type: TYPE_NORMAL
- en: 'I say “famous” and “infamous” because one-time Microsoft CEO Steve Ballmer
    was once quoted as saying the following:'
  prefs: []
  type: TYPE_NORMAL
- en: “Linux is a cancer that attaches itself in an intellectual property sense to
    everything it touches.”
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: So, this was seen as quite a U-turn, which took many by surprise.
  prefs: []
  type: TYPE_NORMAL
- en: In 2020, it was revealed that more than 50% of virtual machine cores are running
    Linux workloads, and 60% of Azure Marketplace images are now Linux-based. This
    is primarily attributed to Microsoft’s embrace of Linux and open-source projects
    like Kubernetes, which has led us to their native Kubernetes service.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Kubernetes Service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Originally, Microsoft launched a container-based service called **Azure Container
    Service** (**ACS**). This allowed users to deploy their container workloads and
    choose to have them powered by one of three different orchestrators: Docker Swarm,
    DC/OS, or Kubernetes. All of these provided a container-based cluster solution.'
  prefs: []
  type: TYPE_NORMAL
- en: It soon became apparent that Kubernetes was the most popular of the three orchestrators,
    so ACS was gradually replaced by AKS. AKS is a CNCF-compliant, purely Kubernetes-based
    service. The transition took about two years, with AKS becoming generally available
    in 2018 and ACS being retired in early 2020.
  prefs: []
  type: TYPE_NORMAL
- en: The AKS service is closely integrated with Azure Active Directory, Policies,
    and other key Microsoft Azure services. Alongside AKS, Microsoft also offers other
    container services; the newest is called Azure Container Apps.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Container Apps is a serverless platform that runs containerized applications
    without the end user managing infrastructure, with features such as dynamic scaling
    based on traffic, event, CPU, or memory load, HTTPS or TCP ingress, Dapr integration,
    and autoscaling. It allows the use of various Azure native tools for management,
    secure secret handling, internal service discovery, and traffic splitting for
    deployment strategies. Applications can run containers from any registry and integrate
    with other Azure services. Confusingly, you can also choose to launch your container-based
    workloads in Azure App Services.
  prefs: []
  type: TYPE_NORMAL
- en: However, rather than discussing all the services in Microsoft Azure that you
    can use to run your container-based workloads, I have always found it easier to
    roll up your sleeves and get hands-on with a service, so without further delay,
    let’s look at installing the tools we will need to launch and manage our AKS cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing your local environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before you launch your cluster, there are a few tasks you need to complete.
    First, you will need somewhere to launch the cluster, so if you don’t already
    have one, you will need to sign up for an Azure account.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a free Microsoft Azure account
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you don’t already have an account, head to [https://azure.microsoft.com/free/](https://azure.microsoft.com/free/),
    where you can sign up for a free account:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A computer on a white background'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B22019_17_01.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 17.1: Reviewing what Microsoft Azure services you can get for free'
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, your free account includes 12 months of popular services,
    $200 of credit that can be used to explore and test the different Azure services,
    and access to over 55 services that will always be free.
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Start free** button and follow the onscreen instructions. The
    sign-up process will take about 15 minutes, and you will need to provide valid
    credit or debit card information to complete it and gain access to your free account.
  prefs: []
  type: TYPE_NORMAL
- en: Once you can access your account, the next step is installing the Azure CLI.
  prefs: []
  type: TYPE_NORMAL
- en: The Azure CLI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Microsoft provides a powerful cross-platform command-line tool for managing
    your Microsoft Azure resources. Installing it on macOS, Linux, and, of course,
    Windows couldn’t be more straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: Installing on macOS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you have been following along with the previous two chapters, you may have
    already guessed that we will use Homebrew to install the Azure CLI on macOS.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the Azure CLI has been installed, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This should return something like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer program'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B22019_17_02.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 17.2: Checking the Azure CLI version on macOS'
  prefs: []
  type: TYPE_NORMAL
- en: Once the Azure CLI has been installed, you can move on to the *Configuring the
    Azure CLI* section.
  prefs: []
  type: TYPE_NORMAL
- en: Installing on Linux
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Microsoft provides an installation script that covers the most common Linux
    distributions. To run the script, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This will download, install, and configure everything required to run the Azure
    CLI on your Linux distribution of choice. Once it has been installed, you will
    need to restart your session.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can do this by logging out and then back in, or, on some distributions,
    by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have restarted your session, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This will return output almost exactly the same as the macOS output we covered
    when installing the CLI on that operating system, with the only difference being
    information on the operating system. Once the Azure CLI has been installed, move
    on to the *Configuring the Azure CLI* section.
  prefs: []
  type: TYPE_NORMAL
- en: Installing on Windows
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can install the Azure CLI on Windows machines in a few ways. Your first
    option is to download a copy of the installer from [https://aka.ms/installazurecliwindows](https://aka.ms/installazurecliwindows)
    and then run the installer by double-clicking it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your next option is to use the following PowerShell command, which will download
    the installer from the preceding URL and install it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The third option is to use the **Chocolatey** package manager by running the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Whichever way you choose to install the package, run the following command
    once it has been installed to find out the version number:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: As you may have guessed, this will also show you something similar to the output
    we saw when running the command on macOS. Now that we have the Azure CLI installed,
    we can configure it.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Azure CLI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Configuring the Azure CLI is a straightforward process; you need to run the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This will open your default browser, asking you to log in. Once you are logged
    in, the Azure CLI will be configured to work the account associated with the user
    you logged in as.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are having problems or running a command-line-only installation of the
    Azure CLI (on a remote Linux server, for example), then running the following
    command will give you a URL and unique sign-in code to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you are logged in, your command-line session should return some information
    on your Azure account. You can view this again by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: If you cannot install the Azure CLI locally for any reason, you will not lose
    anything, as there is a web-based terminal with the Azure CLI you can use in the
    Azure portal. We will look at this next.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing Azure Cloud Shell
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To access Azure Cloud Shell, open [https://portal.azure.com/](https://portal.azure.com/)
    and log in with your credentials. Once you’re logged in, click on the Cloud Shell
    icon in the menu bar, which is found at the top of the page; it is the first icon
    next to the central search box.
  prefs: []
  type: TYPE_NORMAL
- en: 'When launching a cloud shell, you have the option of attaching storage. Given
    that we will be using `kubectl`, we want our configuration to persist, so select
    the **Mount storage account** option and choose your subscription, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B22019_17_03.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 17.3: Choosing a storage option for your cloud shell session'
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking on the **Apply** button will then present you with three options,
    as you can see in the following screenshot. Choose the **We will create a storage
    account for you** option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B22019_17_04.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 17.4: How do you want to create a storage account?'
  prefs: []
  type: TYPE_NORMAL
- en: 'After about a minute, **Cloud Shell** should open, and you will be presented
    with a command prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B22019_17_05.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 17.5: Logged in and ready to use'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you have a command prompt, running the following command, as we did
    on the local Azure CLI installation, will give you information on the version
    of the Azure CLI installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You will not need to run the `az login` command as the Azure portal took care
    of that for you in the background when your **Cloud Shell** instance was launched.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have access to a configured Azure CLI, in one form or another,
    we can look at launching our AKS cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Launching your Azure Kubernetes Service cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With all of the prerequisites in place, we can now launch our AKS cluster. To
    do this, we will need to run just two commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first of the commands creates an Azure resource group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding command, we are creating a resource group called `rg-myfirstakscluster-eus`
    in the `eastus` region and setting the output to be formatted as a table rather
    than the JSON, which is the default output type for the Azure CLI.
  prefs: []
  type: TYPE_NORMAL
- en: A **resource group** is a logical container used to group related Azure resources.
    Services launched within the resource group can inherit settings such as role-based
    access control, locks, and regions in which the resources are launched.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the resource group has been created, you should see confirmation formatted
    in a table like the output below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screen shot of a computer'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B22019_17_06.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 17.6: Creating the resource group'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have a container for our resources with the resource group, we
    can launch our AKS cluster by running the command below. As you can see, it references
    the resource group we just created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Launching and configuring the cluster will take about five minutes, so while
    that deploys, I will work through the options we passed to the preceding `az aks
    create` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--resource-group`: As you may have guessed, this is the resource group where
    you would like to launch your AKS cluster. The cluster will inherit the resource
    group’s location. In our example, we are using the `rg-myfirstakscluster-eus`
    resource group we created in the command before last, and the cluster will be
    created in `eastus`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--name`: This passes the name of the cluster you are launching. We are calling
    ours `aks-myfirstakscluster-eus`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--node-count`: Here, you set the number of nodes you want to launch. We are
    launching two. At the time of writing, the default instance type for nodes is
    Standard_DS2_v2, meaning that each node will have 2 x vCPUs and 7 GB of RAM.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--enable-addons`: This flag is used to supply a list of add-ons to enable
    while the cluster is being launched – we are just enabling the monitoring add-on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--generate-ssh-keys`: This will generate SSH public and private key files
    for the cluster.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-o`: As we mentioned when discussing the previous command, this determines
    the command output format. This time, we output the results returned as YAML when
    we run the command because the output is more readable than the JSON and table
    options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once your cluster has been launched, you should see something like the following
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B22019_17_07.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 17.7: Viewing the output of the cluster launch'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, there is a lot of information. We will not worry about this,
    though, as we will use the Azure CLI and portal to interact with the cluster rather
    than handcrafting API requests to the Azure Resource Manager API.
  prefs: []
  type: TYPE_NORMAL
- en: Now that our cluster is up and running, the last task we need to do before deploying
    our example workload is to configure our local `kubectl` client to interact with
    the cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Once this command has been run, you should see something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B22019_17_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.8: Downloading the cluster credentials and configuring kubectl'
  prefs: []
  type: TYPE_NORMAL
- en: 'With our cluster launched and the local `kubectl` configured, we can now start
    issuing commands against the cluster, and if you have been through the previous
    two chapters, you will already know that the command is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This will return the nodes within the cluster, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B22019_17_09.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 17.9: Checking the nodes are up and running'
  prefs: []
  type: TYPE_NORMAL
- en: We are now able to launch the example guestbook workload that we have been using
    in the previous two chapters to test our cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying a workload and interacting with your cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to be using the same workload we launched in *Chapter 15*, *Kubernetes
    Clusters on Google Kubernetes Engine*, and *Chapter 16*, *Launching a Kubernetes
    Cluster on Amazon Web Services with Amazon Elastic Kubernetes Service*, so I am
    not going to go into detail here other than to cover the commands.
  prefs: []
  type: TYPE_NORMAL
- en: Launching the workload
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We start with the Redis leader deployment and service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Followed by the Redis follower:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we can launch the frontend deployment and service using the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, after a few minutes, we will be able to run the following command to
    get information on the frontend service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Like the previous times, we have deployed the example workload. This will give
    us the public IP address we can use to access the guestbook application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B22019_17_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.10: Getting information on the frontend service'
  prefs: []
  type: TYPE_NORMAL
- en: 'Entering the IP address into a browser, making sure to use `http://<ipaddress>`
    as we have not configured an SSL certificate, will show the Guestbook application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B22019_17_11.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 17.11: Viewing the Guestbook application'
  prefs: []
  type: TYPE_NORMAL
- en: We can move to the Azure portal now that the workload is running.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the Azure portal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you haven’t already, log in to the Azure portal at [https://portal.azure.com/](https://portal.azure.com/).
    Once you are logged in, start typing **Kubernetes** into the Search resources,
    services, and docs search box at the top of the page.
  prefs: []
  type: TYPE_NORMAL
- en: In the list of services, you will see **Kubernetes services**. Click on this
    service, and you will be presented with a list of Kubernetes services running
    within the subscriptions your user has access to.
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B22019_17_12.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 17.12: Listing the Kubernetes services'
  prefs: []
  type: TYPE_NORMAL
- en: Clicking on `aks-myfirstakscluster-eus` will take you to an overview page. This
    will be our jumping-off point for viewing our workload and cluster information.
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B22019_17_13.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 17.13: The cluster overview page'
  prefs: []
  type: TYPE_NORMAL
- en: You will see several options under the Kubernetes resources menu on the left.
    Let’s work through them one by one.
  prefs: []
  type: TYPE_NORMAL
- en: Namespaces (Kubernetes resources)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here, you will find all the namespaces active within the cluster. As we didn’t
    define a custom namespace when we launched our workload, our deployments and services
    will be listed under the `default` namespace.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to the `default` namespace, there are also the ones deployed as
    part of the cluster: `kube-node-lease`, `kube-public`, and `kube-system`. I recommend
    leaving these alone.'
  prefs: []
  type: TYPE_NORMAL
- en: You will be presented with the **Overview** page if you click on the default
    namespace. Here, you can edit the YAML that defines the namespaces, view an events
    log, and configure any service meshes that may have been deployed; in our test,
    there aren’t any.
  prefs: []
  type: TYPE_NORMAL
- en: Workloads (Kubernetes resources)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As you may have already guessed, you can view information on your workload
    here. In the following screenshot, I have filtered the list only to show the workloads
    in the default namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B22019_17_14.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 17.14: Viewing the workloads'
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking on one of the deployments will give you a more detailed view of the
    deployment. For example, selecting the **frontend** deployment shows the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B22019_17_15.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 17.15: Drilling down into a deployment'
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see from the menu on the left, there are a few additions to the
    options: in addition to **YAML** and **Events**, we now have the option to view
    **Insights**. We will cover insights in more detail at the end of this section.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The next option is **Live logs**. Here, you can select a pod and stream the
    logs in real time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B22019_17_16.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 17.16: Viewing the pod logs in real time'
  prefs: []
  type: TYPE_NORMAL
- en: Returning to the **Workloads** screen and selecting the **Pods** tab will give
    you a list of the pods that make up your workload. The IP address and the node
    the pod is active on are listed. This is good for getting a quick overview of
    your running pods.
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B22019_17_17.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 17.17: Listing all the running pods'
  prefs: []
  type: TYPE_NORMAL
- en: Clicking on one of the pods will give you an overview and show you the YAML
    and any events for the pod.
  prefs: []
  type: TYPE_NORMAL
- en: The next tab on the workload screen is **Replica sets**, which provides useful
    way to see the replica sets deployed as part of your workload at a glance. Again,
    clicking on one of the listed replica sets gives you the now-familiar options
    of **Overview**, **YAML**, and **Events**.
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B22019_17_18.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 17.18: Listing all the replica sets'
  prefs: []
  type: TYPE_NORMAL
- en: The next tab in **Workloads** is **Stateful sets**; we don’t have any stateful
    sets in our namespace, nor does Microsoft in the other namespaces, so there isn’t
    much for us to see here. However, if there were, and if you were to select it,
    you would see the same information as we have seen on the other tabs in the **Workloads**
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Next up, we have the **Daemon sets** tab. Again, there are no daemon sets in
    our workspace, but there are ones launched as part of the cluster by Microsoft
    that you can explore.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we have the last two tabs, **Jobs** and **Cron jobs**; here, you will
    find details of any jobs and cron jobs you have deployed within the cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Services and ingresses (Kubernetes resources)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here, you can find a list of all the services you have deployed in your cluster.
    As you can see from the following screenshot, you can get an overview of the cluster
    IPs used for the service along with any external IPs you have configured:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B22019_17_19.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 17.19: Viewing the services'
  prefs: []
  type: TYPE_NORMAL
- en: Clicking on one of the services listed will provide the now-familiar view and
    allow you to drill deeper into the configuration of the services.
  prefs: []
  type: TYPE_NORMAL
- en: Storage (Kubernetes resources)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we have any persistent storage configured within the cluster, you can view
    the details and manage them here; in our example workload, we don’t, so there
    will be little to see.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration (Kubernetes resources)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here, you can view and edit any ConfigMaps or Secrets you have configured within
    the cluster. As we don’t have any of these configured in our workload, the ones
    listed are for the cluster itself, so I wouldn’t recommend making any changes
    to the items present.
  prefs: []
  type: TYPE_NORMAL
- en: Custom resources (Kubernetes resources)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here, you can manage any custom resources attached to your cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Events (Kubernetes resources)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here are all the real-time events for the cluster; these events can help you
    monitor and troubleshoot any health issues within the cluster and application
    workloads.
  prefs: []
  type: TYPE_NORMAL
- en: Run command (Kubernetes resources)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is a helpful addition; here, you can run any `kubectl` commands directly
    from the Azure portal without having to launch a cloud shell or have your local
    copy of `kubectl` configured:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B22019_17_20.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 17.20: Running commands against the cluster from the portal'
  prefs: []
  type: TYPE_NORMAL
- en: Moving onto the **Settings** section of the menu, we have the following.
  prefs: []
  type: TYPE_NORMAL
- en: Node pools (Settings)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here, you will find details of your node pool and the option to upgrade the
    Kubernetes version running within the pool. This option is only available if you
    upgrade the version of Kubernetes running on the control plane.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also scale the pool and have the option to add a node pool. In the
    following screenshot, we can see what the scale option looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B22019_17_21.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 17.21: Reviewing the scaling options'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also view information on each of the nodes, as seen on the screen below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B22019_17_22.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 17.22: Reviewing the nodes'
  prefs: []
  type: TYPE_NORMAL
- en: Cluster configuration (Settings)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the last point, I mentioned that you can only upgrade the Kubernetes version
    running within your node pools if you upgrade the control plane, and this option
    is where you do that. Microsoft manages the control plane and separates it from
    your node pools.
  prefs: []
  type: TYPE_NORMAL
- en: The Kubernetes control plane provides backward compatibility for up to three
    releases, so you can usually only upgrade within three releases of the version
    you are currently running.
  prefs: []
  type: TYPE_NORMAL
- en: Application scaling (Settings)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here, you can enable **Kubernetes Event-Driven Autoscaler** (**KEDA**), which
    dynamically adjusts workloads in response to events from external sources. At
    the time of writing, there are some limitations in the scaling events that can
    be supported when configuring the service through the Azure portal. It supports
    scaling with the following sources: Azure Service Bus, Cron, Memory, and CPU.'
  prefs: []
  type: TYPE_NORMAL
- en: Networking (Settings)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this section, you can view and manage your cluster’s network settings.
  prefs: []
  type: TYPE_NORMAL
- en: Extensions + applications (Settings)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As part of Azure Marketplace, Microsoft provides first- and third-party applications
    you can deploy into your AKS cluster. In this section, you can manage these deployments.
  prefs: []
  type: TYPE_NORMAL
- en: Backup (Settings)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Azure native backup services now support backing up your Kubernetes workloads
    and application data; this can all be managed from here.
  prefs: []
  type: TYPE_NORMAL
- en: Other options (Settings)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Several other options in the **Settings** menu allow you to configure various
    parts of your cluster and connect your cluster to other Azure native services.
    If you require any further information, links to the AKS documentation can be
    found in the **Further reading** section of this chapter at the end.
  prefs: []
  type: TYPE_NORMAL
- en: Insights (Monitoring)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The last part of the Azure portal we are going to look at is the **Insights**
    option found in the **Monitoring** menu in the cluster view. As you may recall,
    when we deployed our cluster, we enabled the monitoring add-on using the `--enable-addons`
    monitoring flag.
  prefs: []
  type: TYPE_NORMAL
- en: This enabled Microsoft’s native monitoring to ship data from a resource to the
    Azure Log Analytics service. Once the data has been shipped to this service, Microsoft
    presents this information back to you, most commonly as insights. Most Azure services
    have an **Insights** option, and the data here can be used by Azure Monitor to
    create and generate alerts.
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B22019_17_23.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 17.23: The Insights page'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few tabs on the **Insights** page; let’s look:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Cluster**: This is shown in the preceding screenshot and gives you a quick
    view of the CPU and memory utilization across the whole cluster. It also shows
    both node and pod counts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reports**: Here, you can find pre-written reports on node monitoring (performance),
    resource monitoring (availability), billing, and networking. As the service matures,
    more reports will be added.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Nodes**: Here, you can get an overview of your nodes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Controllers**: This is where you will find details on the controllers launched
    within your cluster – for example, replica sets and daemon sets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Containers**: Here, you can find details of all the containers running on
    your deployed pods.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, you may think there is a lot of repetition in the preceding sections –
    and there is a little bit of that; however, if you need to see what is going on
    within your cluster quickly, you now have a way of getting that information without
    having to drill through a lot of pages to find it.
  prefs: []
  type: TYPE_NORMAL
- en: I recommend looking around and clicking on as many options as possible to explore
    the level of integration of your cluster and the Azure portal. Once you have finished,
    it is time for us to remove the cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting your Azure Kubernetes Service cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The final thing we will look at is how to delete the cluster. Moving back to
    the Azure CLI, all we need to run to delete the cluster is the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: You will be asked if you are sure, and answering yes will proceed to delete
    the cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'The process takes about five minutes. The preceding command only deletes the
    cluster and not the resource group. To delete the latter, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Again, you will be asked if you want to delete the group – just answer yes.
  prefs: []
  type: TYPE_NORMAL
- en: So, how much will our cluster cost to run?
  prefs: []
  type: TYPE_NORMAL
- en: Unlike the other two cloud services we examined in the previous two chapters,
    cluster management is free for non-production workloads, and you only pay for
    the compute resource.
  prefs: []
  type: TYPE_NORMAL
- en: In our case, two Standard_DS2_v2 instances in the US East region would cost
    around $213 per month, or if we choose the standard cluster management, it will
    cost $286 per month.
  prefs: []
  type: TYPE_NORMAL
- en: 'Other options, such as new generations of instances, could give us a similar-sized
    cluster for less money. For example, we could launch a different cluster using
    the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This will give us a two-node cluster with four vCPUs and 16 GB of RAM for around
    $140 per month if we go for the non-production option.
  prefs: []
  type: TYPE_NORMAL
- en: Comparing the three public cloud offerings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we finish the chapter, let’s quickly compare the three public cloud
    offerings:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Feature** | **Google Kubernetes Engine (GKE)** | **Amazon Elastic Kubernetes
    Service (EKS)** | **Microsoft AKS** |'
  prefs: []
  type: TYPE_TB
- en: '| Kubernetes version support | Latest versions, frequent updates | Slightly
    behind in version support | Latest versions, frequent updates |'
  prefs: []
  type: TYPE_TB
- en: '| Automatic updates | Automatic for control plane and nodes | On-demand for
    control plane, manual for nodes | On-demand for control plane and nodes |'
  prefs: []
  type: TYPE_TB
- en: '| Ease of use | High – intuitive interface | Medium – complex setup | High
    – intuitive interface |'
  prefs: []
  type: TYPE_TB
- en: '| Integration with cloud services | Strong integration with GCP services |
    Strong integration with AWS services | Strong integration with Azure services
    |'
  prefs: []
  type: TYPE_TB
- en: '| Scalability | Good, supports auto-scaling | Good, supports auto-scaling |
    Good, supports auto-scaling |'
  prefs: []
  type: TYPE_TB
- en: '| Security features | Strong, integrates with GCP security tools | Strong,
    integrates with AWS security tools | Strong, integrates with Azure security tools
    |'
  prefs: []
  type: TYPE_TB
- en: '| Pricing | Free control plane, pay for nodes | $0.10/hour for control plane
    and node costs | Free control plane, pay for nodes |'
  prefs: []
  type: TYPE_TB
- en: '| Multi-zone cluster support | Yes | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Private cluster support | Yes | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Serverless compute option | Yes, using Cloud Run for Anthos | Yes, using
    Fargate for EKS | Yes, using AKS virtual nodes |'
  prefs: []
  type: TYPE_TB
- en: '| Pricing | Free control plane, pay for nodes | Per hour cost for control plane
    and node costs | Free control plane, pay for nodes |'
  prefs: []
  type: TYPE_TB
- en: 'Table 17.1: Comparison between the three public cloud offerings'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are some key points to note:'
  prefs: []
  type: TYPE_NORMAL
- en: GKE tends to lead in Kubernetes version support and automatic updates.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AKS is considered by most to be the most user-friendly, especially for those
    already using Azure services.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EKS charges for the control plane, while GKE and AKS only charge for the worker
    nodes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All three services offer strong integration with their respective cloud ecosystems.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GKE is often praised for its advanced features and performance, leveraging Google’s
    expertise as the original creator of Kubernetes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Each service has unique strengths: GKE in performance and features, EKS in
    AWS ecosystem integration, and AKS in ease of use and Azure integration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The best choice often depends on your existing cloud infrastructure, requirements,
    and familiarity with the cloud provider’s ecosystem.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see, your choice of which of the three services to use is very much
    connected with which cloud services you are already running workloads in; as we
    have learned in the last three chapters, once your clusters have been launched,
    the experience is pretty much the same.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at how Microsoft Azure came to be, the history behind
    some of Microsoft’s container services, and how they eventually settled on AKS.
  prefs: []
  type: TYPE_NORMAL
- en: We then signed up for an Azure account and installed and configured the Azure
    CLI before launching our own AKS cluster. Once it was launched, we deployed the
    same workload we deployed to our GKE and Amazon EKS clusters.
  prefs: []
  type: TYPE_NORMAL
- en: Once the workload was deployed, we moved onto the Azure portal and looked at
    the options for gaining insights into our workload and cluster and some of the
    cluster management options.
  prefs: []
  type: TYPE_NORMAL
- en: We finally deleted the resources we launched and discussed how much the cluster
    would cost to run.
  prefs: []
  type: TYPE_NORMAL
- en: Out of the three public cloud services we have examined over the last three
    chapters, I personally would put Microsoft Azure AKS first; it has the most rounded
    and feature-rich offerings, alongside its ease of use. I would put Google’s offering,
    which we discussed in *Chapter 15*, *Kubernetes Clusters on Google Kubernetes
    Engine*, at a close second; it is good, but their pricing needs to be revised
    to rival Microsoft’s offering.
  prefs: []
  type: TYPE_NORMAL
- en: This leaves Amazon’s service, covered in *Chapter 16*, *Launching a Kubernetes
    Cluster on Amazon Web Services with Amazon Elastic Kubernetes Service*. AWS comes
    in as my least recommended service. It simply doesn’t feel as polished as the
    offerings by Microsoft and Google, and it should feel like you are launching a
    service to complement other services offered by the cloud provider. Yet, it feels
    like you are running a Kubernetes cluster in AWS.
  prefs: []
  type: TYPE_NORMAL
- en: My personal opinion aside, the critical takeaway from having launched a Kubernetes
    cluster in three very different public cloud services is that once you have your
    cluster up and running and your `kubectl` client configured to interact with it,
    the experience is pretty much the same and your workload doesn’t care where it
    is launched. You also don’t have to consider the differences between the three
    providers – just a few years ago, this seemed like an unthinkable situation, and
    genuinely cloud-agnostic workloads were just a pipe dream.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to explore the security aspects of Kubernetes,
    including authentication and authorization, admission controllers, network policies,
    and other important topics.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are links to more information on some of the topics and tools covered
    in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Microsoft Azure**: [https://azure.microsoft.com/](https://azure.microsoft.com/'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '**AKS**: [https://azure.microsoft.com/services/kubernetes-service/](https://azure.microsoft.com/services/kubernetes-service/'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '**AKS official documentation**: [https://docs.microsoft.com/en-us/azure/aks/](https://docs.microsoft.com/en-us/azure/aks/'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '**Microsoft Loves Linux**: [https://www.microsoft.com/en-us/windows-server/blog/2015/05/06/microsoft-loves-linux/](https://www.microsoft.com/en-us/windows-server/blog/2015/05/06/microsoft-loves-linux/'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '**Ballmer**: *“Linux is a cancer”*: [https://www.theregister.com/2001/06/02/ballmer_linux_is_a_cancer/](https://www.theregister.com/2001/06/02/ballmer_linux_is_a_cancer/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ballmer**: *I may have called Linux a cancer but now I love it*: [https://www.zdnet.com/article/ballmer-i-may-have-called-linux-a-cancer-but-now-i-love-it/](https://www.zdnet.com/article/ballmer-i-may-have-called-linux-a-cancer-but-now-i-love-it/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Linux is Most Used OS in Microsoft Azure – over 50 percent of VM cores*: [https://build5nines.com/linux-is-most-used-os-in-microsoft-azure-over-50-percent-fo-vm-cores/](https://build5nines.com/linux-is-most-used-os-in-microsoft-azure-over-50-percent-fo-vm-cores/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Join our community on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Join our community’s Discord space for discussions with the authors and other
    readers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/cloudanddevops](https://packt.link/cloudanddevops)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code119001106479081656.png)'
  prefs: []
  type: TYPE_IMG

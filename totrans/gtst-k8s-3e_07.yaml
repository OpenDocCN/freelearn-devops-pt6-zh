- en: Designing for Continuous Integration and Delivery
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计持续集成和交付
- en: This chapter will show the reader how to integrate their build pipeline and
    deployments with a Kubernetes cluster. It will cover the concept of using gulp.js
    and Jenkins in conjunction with your Kubernetes cluster. We'll also use Helm and
    Minikube to show you another demo of how Continuous Integration and Delivery works
    with newer, more advanced methods.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将向读者展示如何将构建管道和部署与 Kubernetes 集群集成。它将介绍如何将 gulp.js 和 Jenkins 与 Kubernetes 集群结合使用的概念。我们还将使用
    Helm 和 Minikube 展示如何通过更新的、更先进的方法来实现持续集成和交付。
- en: 'The following topics will be covered in the chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Integrating Kubernetes with a Continuous Deployment pipeline
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 Kubernetes 与持续部署管道集成
- en: Using gulp.js with Kubernetes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 gulp.js 与 Kubernetes
- en: Integrating Jenkins with Kubernetes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 Jenkins 与 Kubernetes 集成
- en: Installing and using Helm and Jenkins
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装并使用 Helm 和 Jenkins
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You'll need to have your Google Cloud Platform account enabled and logged in,
    or you can use a local Minikube instance of Kubernetes. You can also use the Play
    with Kubernetes app, designed for use over the web, at [https://labs.play-with-k8s.com/](https://labs.play-with-k8s.com/).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要启用并登录到你的 Google Cloud Platform 账户，或者你也可以使用本地的 Minikube Kubernetes 实例。你还可以使用为
    Web 设计的 Play with Kubernetes 应用，网址为 [https://labs.play-with-k8s.com/](https://labs.play-with-k8s.com/)。
- en: 'Here''s the GitHub repository for this chapter: [https://github.com/PacktPublishing/Getting-Started-with-Kubernetes-third-edition/tree/master/Code-files/Chapter07](https://github.com/PacktPublishing/Getting-Started-with-Kubernetes-third-edition/tree/master/Code-files/Chapter07)[.](https://github.com/PacktPublishing/Getting-Started-with-Kubernetes-third-edition/tree/master/Code%20files/Chapter%2007)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的 GitHub 仓库链接：[https://github.com/PacktPublishing/Getting-Started-with-Kubernetes-third-edition/tree/master/Code-files/Chapter07](https://github.com/PacktPublishing/Getting-Started-with-Kubernetes-third-edition/tree/master/Code-files/Chapter07)[.](https://github.com/PacktPublishing/Getting-Started-with-Kubernetes-third-edition/tree/master/Code%20files/Chapter%2007)
- en: Integrating Kubernetes with a continuous delivery pipeline
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Kubernetes 与持续交付管道集成
- en: Continuous integration and delivery are key components in modern development
    shops. **Continuous Integration/Continuous Delivery** (**CI/CD**) often easy to
    remove them after builds are run. In addition, if you already have a large portion
    of infrastructure available on your cluster, it can make sense to utilize the
    idle capacity for builds and testing.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 持续集成和交付是现代开发中的关键组成部分。**持续集成/持续交付** (**CI/CD**) 通常在构建运行后容易移除它们。此外，如果你的集群中已经有了大量基础设施，可以利用闲置容量进行构建和测试。
- en: 'In this article, we will explore two popular tools used in building and deploying
    software:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将探讨两种在构建和部署软件中常用的工具：
- en: '**gulp.js**: This is a simple task runner used to automate the build process
    using JavaScript and Node.js'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**gulp.js**：这是一个简单的任务运行器，用于通过 JavaScript 和 Node.js 自动化构建过程'
- en: '**Jenkins**: This is a fully-fledged continuous integration server'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Jenkins**：这是一个功能齐全的持续集成服务器'
- en: gulp.js
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: gulp.js
- en: gulp.js gives us the framework to do build as code. Similar to Infrastructure
    as code, this allows us to programmatically define our build process. We will
    walk through a short example to demonstrate how you can create a complete workflow,
    from a Docker image build through to the final Kubernetes service.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: gulp.js 为我们提供了构建作为代码的框架。类似于基础设施即代码，它允许我们以编程方式定义构建过程。我们将通过一个简短的示例来演示如何创建一个完整的工作流，从
    Docker 镜像构建到最终的 Kubernetes 服务。
- en: Prerequisites
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 先决条件
- en: For this section of the article, you will need a Node.js environment installed
    and ready, including the **node package manager** (**npm**). If you do not already
    have these packages installed, you can find instructions for installing them at
    [https://docs.npmjs.com/getting-started/installing-node](https://docs.npmjs.com/getting-started/installing-node).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文的这一部分，你需要安装并准备好 Node.js 环境，包括 **node 包管理器** (**npm**)。如果你还没有安装这些包，你可以在 [https://docs.npmjs.com/getting-started/installing-node](https://docs.npmjs.com/getting-started/installing-node)
    查找安装说明。
- en: You can check whether or not Node.js is installed correctly by using the `node
    -v` command.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `node -v` 命令检查 Node.js 是否正确安装。
- en: You'll also need Docker CE and a Docker Hub account to push a new image. You
    can find instructions to install Docker CE at [https://docs.docker.com/installation/](https://docs.docker.com/installation/). You
    can easily create a DockerHub account at [https://hub.docker.com/](https://hub.docker.com/).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: After you have your credentials, you can log in with the CLI using the `$ docker
    login` command.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: gulp.js build example
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start by creating a project directory named `node-gulp`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, we will install the `gulp` package and then check whether it''s ready
    by running the `npm` command with the version flag, as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You may need to open a new Terminal window to make sure that `gulp` is on your
    path. Also, make sure to navigate back to your `node-gulp` directory with the
    following command:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, we will install `gulp` locally in our project folder, along with the
    `gulp-git` and `gulp-shell` plugins, as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Finally, we need to create a Kubernetes controller and service definition file,
    as well as a `gulpfile.js` file, to run all of our tasks. Again, these files are
    available in the book file bundle, should you wish to copy them straight over
    instead. Refer to the following `node-gulp-controller.yaml` file:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'As you can see in the preceding code, we have a basic controller. You will
    need to replace `<your username>/node-gulp:latest` with your Docker Hub username.
    Save the following code as `node-gulp-service.yaml` file:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, we have a simple service that selects the pods from our controller and
    creates an external load balancer for access, as earlier:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Finally, we have the preceding `gulpfile.js` file. This is where all of our
    build tasks are defined. Again, fill in your own Docker Hub username in both of
    the `<your username>/node-gulp` sections.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Looking through the file, first, we can see that the clone task downloads our
    image source code from GitHub. The pull tasks execute a `git` pull on the cloned
    repository. Next, the `docker-build` command builds an image from the `container-info`
    sub folder and pushes it to Docker Hub. Finally, we have the `create-kube-pod`
    and `update-kube-pod` commands. As you can probably guess, the `create-kube-pod`
    command creates our controller and service for the first time, whereas the `update-kube-pod`
    command simply replaces the controller.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go ahead and run these commands and see our end-to-end workflow:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The first time through, you can also run the `create-kube-pod` command, as
    follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This is all there is to it. If we run a quick `kubectl` describe command for
    the `node-gulp` service, we can get the external IP for our new service. Browse
    to that IP and you''ll see the familiar `container-info` application running.
    Note that the host starts with `node-gulp`, just as we named it in the previously
    mentioned pod definition:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/63c5096a-7997-48a6-b331-3d4c10924fda.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
- en: 'On subsequent updates, run the `pull` and `update-kube-pod` commands, as shown
    here:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This is a very simple example, but you can begin to see how easy it is to coordinate
    your build and deployment end to end with a few simple lines of code. Next, we
    will look at how to use Kubernetes to actually run builds using Jenkins.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常简单的示例，但你可以开始看到如何通过几行简单的代码轻松地协调你的构建和部署流程。接下来，我们将看看如何使用Kubernetes通过Jenkins来实际运行构建。
- en: The Kubernetes plugin for Jenkins
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jenkins的Kubernetes插件
- en: One way we can use Kubernetes for our CI/CD pipeline is to run our Jenkins build
    slaves in a containerized environment. Luckily, there is already a plugin, written
    by Carlos Sanchez, that allows you to run Jenkins slaves in Kubernetes' pods.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以利用Kubernetes来实现我们的CI/CD管道，其中一种方法是将Jenkins构建从属节点运行在容器化环境中。幸运的是，Carlos Sanchez已经写了一个插件，允许你在Kubernetes的Pod中运行Jenkins从属节点。
- en: Prerequisites
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前提条件
- en: You'll need a Jenkins server handy for this next example. If you don't have
    one you can use, there is a Docker image available at [https://hub.docker.com/_/jenkins/](https://hub.docker.com/_/jenkins/).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要准备一个Jenkins服务器来进行下一个示例。如果你没有可以使用的服务器，可以在[https://hub.docker.com/_/jenkins/](https://hub.docker.com/_/jenkins/)上使用一个Docker镜像。
- en: 'Running it from the Docker CLI is as simple as the following command:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 从Docker CLI运行它非常简单，只需要以下命令：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Installing plugins
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装插件
- en: Log in to your Jenkins server, and from your home dashboard, click on Manage
    Jenkins.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 登录到你的Jenkins服务器，在首页仪表盘上，点击 Manage Jenkins。
- en: 'A note for those installing a new Jenkins server: when you first log in to
    the Jenkins server, it asks you to install plugins. Choose the default ones, or
    no plugins will be installed!'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 给安装新Jenkins服务器的用户的提醒：当你第一次登录到Jenkins服务器时，它会要求你安装插件。请选择默认插件，否则将不会安装任何插件！
- en: 'Then, on the Manage Jenkins page, select Manage Plugins from the list, as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在Manage Jenkins页面上，从列表中选择 Manage Plugins，如下所示：
- en: '![](img/dfbe63c8-5fdd-492c-be72-213205d6e358.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dfbe63c8-5fdd-492c-be72-213205d6e358.png)'
- en: The main dashboard in Jenkins
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins的主仪表盘
- en: 'The credentials plugin is required, but should be installed by default. We
    can check the Installed tab if in doubt, as shown in the following screenshot:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 需要安装Credentials插件，但它应该已经默认安装。如果不确定，我们可以检查Installed标签，如下截图所示：
- en: '![](img/1c51766b-77d6-4705-b3c2-5a624cda4545.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1c51766b-77d6-4705-b3c2-5a624cda4545.png)'
- en: Installed plugins in Jenkins
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins中已安装的插件
- en: 'Next, let''s click on the Available tab. The Kubernetes plugin should be located
    under Cluster Management and Distributed Build or Misc (cloud). There are many
    plugins, so you can alternatively search for `Kubernetes` on the page. Check the
    box for Kubernetes plugin and click on Install without restart. This will install
    the Kubernetes plugin and the Durable Task Plugin:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们点击 Available 标签。Kubernetes插件应该位于Cluster Management和Distributed Build或Misc
    (cloud)下。插件很多，因此你也可以选择在页面上搜索 `Kubernetes`。勾选Kubernetes插件的框，然后点击 Install without
    restart。这将安装Kubernetes插件和Durable Task插件：
- en: '![](img/710037cf-a8ba-4264-b8cf-2a56a329cd8d.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/710037cf-a8ba-4264-b8cf-2a56a329cd8d.png)'
- en: The plugin installation screen in Jenkins
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins中的插件安装界面
- en: 'If you wish to install a nonstandard version, or just like to tinker, you can
    optionally download the plugins. The latest Kubernetes and durable task plugins
    can be found here:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望安装非标准版本，或者只是喜欢调试，你可以选择下载插件。最新的Kubernetes和Durable task插件可以在这里找到：
- en: '**Kubernetes plugin**: [https://wiki.jenkins-ci.org/display/JENKINS/Kubernetes+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Kubernetes+Plugin)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kubernetes plugin**: [https://wiki.jenkins-ci.org/display/JENKINS/Kubernetes+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Kubernetes+Plugin)'
- en: '**Durable task plugin**: [https://wiki.jenkins-ci.org/display/JENKINS/Durable+Task+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Durable+Task+Plugin)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Durable task plugin**: [https://wiki.jenkins-ci.org/display/JENKINS/Durable+Task+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Durable+Task+Plugin)'
- en: Next, we can click on the Advanced tab and scroll down to Upload plugin. Navigate
    to the `durable-task.hpi` file and click on Upload. You should see a screen that
    shows an installation progress bar. After a minute or two, it will update to Success.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以点击 Advanced 标签并向下滚动到 Upload plugin。定位到 `durable-task.hpi` 文件并点击 Upload。你应该会看到一个显示安装进度条的屏幕。经过一两分钟后，它会更新为 Success。
- en: Finally, install the main Kubernetes plugin. On the left-hand side, click on Manage
    Plugins and then the Advanced tab once again. This time, upload the `kubernetes.hpi` file
    and click on Upload. After a few minutes, the installation should be complete.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，安装主Kubernetes插件。在左侧，点击 Manage Plugins 然后再次点击 Advanced 标签。这次，上传 `kubernetes.hpi` 文件并点击 Upload。几分钟后，安装应该完成。
- en: Configuring the Kubernetes plugin
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Kubernetes插件
- en: 'Click on Back to Dashboard, or the Jenkins link in the top-left corner. Back
    on the main dashboard page, click on the Credentials link. Choose a domain from
    the list; in my case, I just used the default global credentials domain. Click
    on Add Credentials, and you''ll be presented with the following screen:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/82c08ce3-3d4c-4398-97a6-592365826a04.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
- en: The Add Credentials screen
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: 'Leave Kind as Username with password and Scope as Global (Jenkins, nodes, items,
    all child items, etc). Add your Kubernetes admin credentials. Remember that you
    can find these by running the following `config` command:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You can leave ID blank, fill in Description with something sensible, and then
    click on the OK button.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have our credentials saved, we can add our Kubernetes server. Click
    on the Jenkins link in the top-left corner, and then Manage Jenkins. From there,
    select Configure System and scroll all the way down to the Cloud section. Select
    Kubernetes from the Add a new cloud drop-down menu and a Kubernetes section will
    appear, as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/20a307c9-610e-4337-a4e1-690cb9512c13.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
- en: The new Kubernetes cloud settings page in Jenkins
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: You'll need to specify the URL for your master in the form of `https://<Master
    IP>/`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: Next, choose the credentials we added from the drop-down menu. Since Kubernetes
    uses a self-signed certificate by default, you'll also need to check the Disable
    https certificate check checkbox.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Click on Test Connection, and if all goes well, you should see Connection successful
    appear next to the button.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: If you are using an older version of the plugin, you may not see the Disable
    https certificate check checkbox. If this is the case, you will need to install
    the self-signed certificate directly on the Jenkins master.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we will add a pod template by choosing Kubernetes Pod Template from
    the Add Pod Template drop-down menu next to Images.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: This will create another new section. Use `jenkins-slave` for the Name and Labels
    section. Click on Add next to Containers and again use `jenkins-slave` for the
    Name. Use `csanchez/jenkins-slave` for the Docker Image and leave `/home/jenkins`
    for the Working Directory.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: 'Labels can be used later on in the build settings to force the build to use
    the Kubernetes cluster:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e9bdf8b9-1c38-4c1c-96d1-1fbf00b9086d.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
- en: Kubernetes cluster addition
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the pod template that expands the cluster addition, as shown in the
    following screenshot:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ac2a8088-3248-40f0-baad-b8c12475965a.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
- en: The Kubernetes pod template
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: Click on Save and you are all set. Now, new builds created in Jenkins can use
    the slaves in the Kubernetes pod we just created.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: Here is another note about firewalls. The Jenkins master will need to be reachable
    by all the machines in your Kubernetes cluster, as the pod could land anywhere.
    You can find out your port settings in Jenkins under Manage Jenkins | Configure
    Global Security.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Helm and Minikube
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's try setting up some CI/CD with other tools, so we can experiment with
    the newest offerings in the Kubernetes ecosystem. First, let's explore how easy
    it is to install Jenkins with Helm.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试使用其他工具设置一些 CI/CD，以便可以体验 Kubernetes 生态系统中的最新产品。首先，让我们探索如何使用 Helm 安装 Jenkins
    的简易性。
- en: 'First, open the Minikube dashboard so you can see what happens when we install
    various things. Do this with the following command:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，打开 Minikube 仪表板，这样你可以看到我们安装各种东西时发生了什么。使用以下命令来实现：
- en: '[PRE12]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let''s create a namespace for the Jenkins environment, as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为 Jenkins 环境创建一个命名空间，如下所示：
- en: '[PRE13]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, let''s create a template:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个模板：
- en: '[PRE14]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, you can create the namespace as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以按以下方式创建命名空间：
- en: '[PRE15]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'There are two ways to verify that it was actually created. First, you can take
    a look at the dashboard with the `minikube dashboard` command:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以验证它是否已实际创建。首先，你可以通过 `minikube dashboard` 命令查看仪表板：
- en: '![](img/243b7f12-05ec-4768-b829-9181f998a437.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/243b7f12-05ec-4768-b829-9181f998a437.png)'
- en: 'Secondly, you can look at the CLI with `kubectl get namespaces`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，你可以使用 `kubectl get namespaces` 查看 CLI：
- en: '[PRE16]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Let's create a persistent volume for Jenkins to take advantage of. This will
    allow us to persist data in the cluster when Minikube reboots. In a production
    environment, you'd need to use some type of block or driver for your storage.
    Let's create a `jenkins-volume.yaml` file called `jenkins-persist`.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为 Jenkins 创建一个持久化存储卷。这将允许我们在 Minikube 重启时将数据持久化到集群中。在生产环境中，你需要使用某种类型的存储块或驱动程序。让我们创建一个名为
    `jenkins-persist` 的 `jenkins-volume.yaml` 文件。
- en: 'Here''s what you''ll put into that file:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你需要放入该文件的内容：
- en: '[PRE17]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, let''s create the volume for Jenkins to use:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们为 Jenkins 创建存储卷：
- en: '[PRE18]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Great! Now, we''re ready to use Helm to install Jenkins nice and easily. Let''s
    use the following values file with our installation:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒！现在，我们准备好使用 Helm 来轻松安装 Jenkins。让我们使用以下 values 文件进行安装：
- en: '[PRE19]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now that we''ve set the values file, let''s use it to deploy Jenkins:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了 values 文件，让我们使用它来部署 Jenkins：
- en: '[PRE20]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We can get the randomly generated Jenkins secret by addressing the Kubernetes
    secret store API:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过访问 Kubernetes 密钥存储 API 来获取随机生成的 Jenkins 密钥：
- en: '[PRE21]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Verify that Jenkins has installed using the following commands:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令验证 Jenkins 是否已安装：
- en: '[PRE22]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Then, open up Jenkins' home page. You should be able to visit the home page
    at `http://192.168.99.100:3200`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，打开 Jenkins 的主页。你应该能够通过 `http://192.168.99.100:3200` 访问主页。
- en: Bonus fun
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有趣的额外内容
- en: '**fabric8** bills itself as an integration platform. It includes a variety
    of logging, monitoring, and continuous delivery tools. It also has a nice console,
    an API registry, and a 3D game that lets you shoot at your pods. It''s a very
    cool project, and it actually runs on Kubernetes. The website for the project
    can be found at [http://fabric8.io/](http://fabric8.io/).'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**fabric8** 自称为一个集成平台。它包括各种日志记录、监控和持续交付工具。它还拥有一个漂亮的控制台、一个 API 注册表和一个可以让你射击
    pods 的 3D 游戏。它是一个非常酷的项目，实际上是在 Kubernetes 上运行的。该项目的网站可以在 [http://fabric8.io/](http://fabric8.io/)
    找到。'
- en: fabric8 can be set up easily on your Kubernetes cluster with just a single command,
    so refer to [http://fabric8.io/guide/getStarted/gke.html/](http://fabric8.io/guide/getStarted/gke.html)
    for more information.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: fabric8 可以通过一个简单的命令在你的 Kubernetes 集群上轻松设置，因此请参考 [http://fabric8.io/guide/getStarted/gke.html/](http://fabric8.io/guide/getStarted/gke.html)
    了解更多信息。
- en: Summary
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We looked at two continuous integration tools that can be used with Kubernetes.
    We did a brief walk-through, examining how to deploy the gulp.js task on our cluster.
    We also looked at a new plugin used to integrate Jenkins build slaves into your
    Kubernetes cluster. You should now have a better sense of how Kubernetes can integrate
    with your own CI/CD pipeline.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们查看了两种可以与 Kubernetes 一起使用的持续集成工具。我们简要地演示了如何在集群中部署 gulp.js 任务。我们还看到了一个新插件，它用于将
    Jenkins 构建代理集成到 Kubernetes 集群中。你现在应该对 Kubernetes 如何与你自己的 CI/CD 流水线集成有了更清晰的认识。
- en: Questions
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What type of software does gulp.js enable us to build?
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: gulp.js 让我们能够构建什么类型的软件？
- en: What is the name of the popular CI/CD system that we installed?
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们安装的流行 CI/CD 系统的名称是什么？
- en: What is an alternative method of installation for Jenkins?
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Jenkins 的另一种安装方法是什么？
- en: What type of volume is required to run Jenkins on Kubernetes?
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Kubernetes 上运行 Jenkins 需要哪种类型的存储卷？
- en: What is the other requirement for running Jenkins on Kubernetes?
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Kubernetes 上运行 Jenkins 的另一个要求是什么？
- en: What kind of controller is used when deploying with gulp.js?
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署时使用的控制器是什么类型的？
- en: What tool did we use to install gulp.js?
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用了什么工具来安装 gulp.js？
- en: Further reading
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入阅读
- en: 'If you''d like some additional information on the Node.js and gulp.js ecosystems,
    check out these titles:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解有关 Node.js 和 gulp.js 生态系统的更多信息，可以查看以下书籍：
- en: '[https://www.packtpub.com/web-development/mastering-nodejs](https://www.packtpub.com/web-development/mastering-nodejs)'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/web-development/mastering-nodejs](https://www.packtpub.com/web-development/mastering-nodejs)'
- en: '[https://www.packtpub.com/web-development/learning-nodejs-development](https://www.packtpub.com/web-development/learning-nodejs-development)'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/web-development/learning-nodejs-development](https://www.packtpub.com/web-development/learning-nodejs-development)'
- en: 'If you''d like some additional guidance on how to use Jenkins, read the following:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望获得如何使用 Jenkins 的更多指导，请阅读以下内容：
- en: '[https://www.packtpub.com/networking-and-servers/learning-continuous-integration-jenkins](https://www.packtpub.com/networking-and-servers/learning-continuous-integration-jenkins)'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/networking-and-servers/learning-continuous-integration-jenkins](https://www.packtpub.com/networking-and-servers/learning-continuous-integration-jenkins)'
- en: '[https://www.packtpub.com/application-development/mastering-jenkins](https://www.packtpub.com/application-development/mastering-jenkins)'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/application-development/mastering-jenkins](https://www.packtpub.com/application-development/mastering-jenkins)'
- en: '[https://www.packtpub.com/virtualization-and-cloud/hands-continuous-integration-and-automation-jenkins-video](https://www.packtpub.com/virtualization-and-cloud/hands-continuous-integration-and-automation-jenkins-video)'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/virtualization-and-cloud/hands-continuous-integration-and-automation-jenkins-video](https://www.packtpub.com/virtualization-and-cloud/hands-continuous-integration-and-automation-jenkins-video)'

- en: Designing for Continuous Integration and Delivery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will show the reader how to integrate their build pipeline and
    deployments with a Kubernetes cluster. It will cover the concept of using gulp.js
    and Jenkins in conjunction with your Kubernetes cluster. We'll also use Helm and
    Minikube to show you another demo of how Continuous Integration and Delivery works
    with newer, more advanced methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Kubernetes with a Continuous Deployment pipeline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using gulp.js with Kubernetes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Jenkins with Kubernetes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and using Helm and Jenkins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You'll need to have your Google Cloud Platform account enabled and logged in,
    or you can use a local Minikube instance of Kubernetes. You can also use the Play
    with Kubernetes app, designed for use over the web, at [https://labs.play-with-k8s.com/](https://labs.play-with-k8s.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the GitHub repository for this chapter: [https://github.com/PacktPublishing/Getting-Started-with-Kubernetes-third-edition/tree/master/Code-files/Chapter07](https://github.com/PacktPublishing/Getting-Started-with-Kubernetes-third-edition/tree/master/Code-files/Chapter07)[.](https://github.com/PacktPublishing/Getting-Started-with-Kubernetes-third-edition/tree/master/Code%20files/Chapter%2007)'
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Kubernetes with a continuous delivery pipeline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Continuous integration and delivery are key components in modern development
    shops. **Continuous Integration/Continuous Delivery** (**CI/CD**) often easy to
    remove them after builds are run. In addition, if you already have a large portion
    of infrastructure available on your cluster, it can make sense to utilize the
    idle capacity for builds and testing.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this article, we will explore two popular tools used in building and deploying
    software:'
  prefs: []
  type: TYPE_NORMAL
- en: '**gulp.js**: This is a simple task runner used to automate the build process
    using JavaScript and Node.js'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Jenkins**: This is a fully-fledged continuous integration server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: gulp.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: gulp.js gives us the framework to do build as code. Similar to Infrastructure
    as code, this allows us to programmatically define our build process. We will
    walk through a short example to demonstrate how you can create a complete workflow,
    from a Docker image build through to the final Kubernetes service.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this section of the article, you will need a Node.js environment installed
    and ready, including the **node package manager** (**npm**). If you do not already
    have these packages installed, you can find instructions for installing them at
    [https://docs.npmjs.com/getting-started/installing-node](https://docs.npmjs.com/getting-started/installing-node).
  prefs: []
  type: TYPE_NORMAL
- en: You can check whether or not Node.js is installed correctly by using the `node
    -v` command.
  prefs: []
  type: TYPE_NORMAL
- en: You'll also need Docker CE and a Docker Hub account to push a new image. You
    can find instructions to install Docker CE at [https://docs.docker.com/installation/](https://docs.docker.com/installation/). You
    can easily create a DockerHub account at [https://hub.docker.com/](https://hub.docker.com/).
  prefs: []
  type: TYPE_NORMAL
- en: After you have your credentials, you can log in with the CLI using the `$ docker
    login` command.
  prefs: []
  type: TYPE_NORMAL
- en: gulp.js build example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start by creating a project directory named `node-gulp`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will install the `gulp` package and then check whether it''s ready
    by running the `npm` command with the version flag, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You may need to open a new Terminal window to make sure that `gulp` is on your
    path. Also, make sure to navigate back to your `node-gulp` directory with the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will install `gulp` locally in our project folder, along with the
    `gulp-git` and `gulp-shell` plugins, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we need to create a Kubernetes controller and service definition file,
    as well as a `gulpfile.js` file, to run all of our tasks. Again, these files are
    available in the book file bundle, should you wish to copy them straight over
    instead. Refer to the following `node-gulp-controller.yaml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see in the preceding code, we have a basic controller. You will
    need to replace `<your username>/node-gulp:latest` with your Docker Hub username.
    Save the following code as `node-gulp-service.yaml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we have a simple service that selects the pods from our controller and
    creates an external load balancer for access, as earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we have the preceding `gulpfile.js` file. This is where all of our
    build tasks are defined. Again, fill in your own Docker Hub username in both of
    the `<your username>/node-gulp` sections.
  prefs: []
  type: TYPE_NORMAL
- en: Looking through the file, first, we can see that the clone task downloads our
    image source code from GitHub. The pull tasks execute a `git` pull on the cloned
    repository. Next, the `docker-build` command builds an image from the `container-info`
    sub folder and pushes it to Docker Hub. Finally, we have the `create-kube-pod`
    and `update-kube-pod` commands. As you can probably guess, the `create-kube-pod`
    command creates our controller and service for the first time, whereas the `update-kube-pod`
    command simply replaces the controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go ahead and run these commands and see our end-to-end workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The first time through, you can also run the `create-kube-pod` command, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This is all there is to it. If we run a quick `kubectl` describe command for
    the `node-gulp` service, we can get the external IP for our new service. Browse
    to that IP and you''ll see the familiar `container-info` application running.
    Note that the host starts with `node-gulp`, just as we named it in the previously
    mentioned pod definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/63c5096a-7997-48a6-b331-3d4c10924fda.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On subsequent updates, run the `pull` and `update-kube-pod` commands, as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This is a very simple example, but you can begin to see how easy it is to coordinate
    your build and deployment end to end with a few simple lines of code. Next, we
    will look at how to use Kubernetes to actually run builds using Jenkins.
  prefs: []
  type: TYPE_NORMAL
- en: The Kubernetes plugin for Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One way we can use Kubernetes for our CI/CD pipeline is to run our Jenkins build
    slaves in a containerized environment. Luckily, there is already a plugin, written
    by Carlos Sanchez, that allows you to run Jenkins slaves in Kubernetes' pods.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You'll need a Jenkins server handy for this next example. If you don't have
    one you can use, there is a Docker image available at [https://hub.docker.com/_/jenkins/](https://hub.docker.com/_/jenkins/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Running it from the Docker CLI is as simple as the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Installing plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Log in to your Jenkins server, and from your home dashboard, click on Manage
    Jenkins.
  prefs: []
  type: TYPE_NORMAL
- en: 'A note for those installing a new Jenkins server: when you first log in to
    the Jenkins server, it asks you to install plugins. Choose the default ones, or
    no plugins will be installed!'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, on the Manage Jenkins page, select Manage Plugins from the list, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dfbe63c8-5fdd-492c-be72-213205d6e358.png)'
  prefs: []
  type: TYPE_IMG
- en: The main dashboard in Jenkins
  prefs: []
  type: TYPE_NORMAL
- en: 'The credentials plugin is required, but should be installed by default. We
    can check the Installed tab if in doubt, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1c51766b-77d6-4705-b3c2-5a624cda4545.png)'
  prefs: []
  type: TYPE_IMG
- en: Installed plugins in Jenkins
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s click on the Available tab. The Kubernetes plugin should be located
    under Cluster Management and Distributed Build or Misc (cloud). There are many
    plugins, so you can alternatively search for `Kubernetes` on the page. Check the
    box for Kubernetes plugin and click on Install without restart. This will install
    the Kubernetes plugin and the Durable Task Plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/710037cf-a8ba-4264-b8cf-2a56a329cd8d.png)'
  prefs: []
  type: TYPE_IMG
- en: The plugin installation screen in Jenkins
  prefs: []
  type: TYPE_NORMAL
- en: 'If you wish to install a nonstandard version, or just like to tinker, you can
    optionally download the plugins. The latest Kubernetes and durable task plugins
    can be found here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kubernetes plugin**: [https://wiki.jenkins-ci.org/display/JENKINS/Kubernetes+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Kubernetes+Plugin)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Durable task plugin**: [https://wiki.jenkins-ci.org/display/JENKINS/Durable+Task+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Durable+Task+Plugin)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we can click on the Advanced tab and scroll down to Upload plugin. Navigate
    to the `durable-task.hpi` file and click on Upload. You should see a screen that
    shows an installation progress bar. After a minute or two, it will update to Success.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, install the main Kubernetes plugin. On the left-hand side, click on Manage
    Plugins and then the Advanced tab once again. This time, upload the `kubernetes.hpi` file
    and click on Upload. After a few minutes, the installation should be complete.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Kubernetes plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Click on Back to Dashboard, or the Jenkins link in the top-left corner. Back
    on the main dashboard page, click on the Credentials link. Choose a domain from
    the list; in my case, I just used the default global credentials domain. Click
    on Add Credentials, and you''ll be presented with the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/82c08ce3-3d4c-4398-97a6-592365826a04.png)'
  prefs: []
  type: TYPE_IMG
- en: The Add Credentials screen
  prefs: []
  type: TYPE_NORMAL
- en: 'Leave Kind as Username with password and Scope as Global (Jenkins, nodes, items,
    all child items, etc). Add your Kubernetes admin credentials. Remember that you
    can find these by running the following `config` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You can leave ID blank, fill in Description with something sensible, and then
    click on the OK button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have our credentials saved, we can add our Kubernetes server. Click
    on the Jenkins link in the top-left corner, and then Manage Jenkins. From there,
    select Configure System and scroll all the way down to the Cloud section. Select
    Kubernetes from the Add a new cloud drop-down menu and a Kubernetes section will
    appear, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/20a307c9-610e-4337-a4e1-690cb9512c13.png)'
  prefs: []
  type: TYPE_IMG
- en: The new Kubernetes cloud settings page in Jenkins
  prefs: []
  type: TYPE_NORMAL
- en: You'll need to specify the URL for your master in the form of `https://<Master
    IP>/`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, choose the credentials we added from the drop-down menu. Since Kubernetes
    uses a self-signed certificate by default, you'll also need to check the Disable
    https certificate check checkbox.
  prefs: []
  type: TYPE_NORMAL
- en: Click on Test Connection, and if all goes well, you should see Connection successful
    appear next to the button.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using an older version of the plugin, you may not see the Disable
    https certificate check checkbox. If this is the case, you will need to install
    the self-signed certificate directly on the Jenkins master.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we will add a pod template by choosing Kubernetes Pod Template from
    the Add Pod Template drop-down menu next to Images.
  prefs: []
  type: TYPE_NORMAL
- en: This will create another new section. Use `jenkins-slave` for the Name and Labels
    section. Click on Add next to Containers and again use `jenkins-slave` for the
    Name. Use `csanchez/jenkins-slave` for the Docker Image and leave `/home/jenkins`
    for the Working Directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Labels can be used later on in the build settings to force the build to use
    the Kubernetes cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e9bdf8b9-1c38-4c1c-96d1-1fbf00b9086d.png)'
  prefs: []
  type: TYPE_IMG
- en: Kubernetes cluster addition
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the pod template that expands the cluster addition, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ac2a8088-3248-40f0-baad-b8c12475965a.png)'
  prefs: []
  type: TYPE_IMG
- en: The Kubernetes pod template
  prefs: []
  type: TYPE_NORMAL
- en: Click on Save and you are all set. Now, new builds created in Jenkins can use
    the slaves in the Kubernetes pod we just created.
  prefs: []
  type: TYPE_NORMAL
- en: Here is another note about firewalls. The Jenkins master will need to be reachable
    by all the machines in your Kubernetes cluster, as the pod could land anywhere.
    You can find out your port settings in Jenkins under Manage Jenkins | Configure
    Global Security.
  prefs: []
  type: TYPE_NORMAL
- en: Helm and Minikube
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's try setting up some CI/CD with other tools, so we can experiment with
    the newest offerings in the Kubernetes ecosystem. First, let's explore how easy
    it is to install Jenkins with Helm.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, open the Minikube dashboard so you can see what happens when we install
    various things. Do this with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create a namespace for the Jenkins environment, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s create a template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you can create the namespace as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'There are two ways to verify that it was actually created. First, you can take
    a look at the dashboard with the `minikube dashboard` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/243b7f12-05ec-4768-b829-9181f998a437.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Secondly, you can look at the CLI with `kubectl get namespaces`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Let's create a persistent volume for Jenkins to take advantage of. This will
    allow us to persist data in the cluster when Minikube reboots. In a production
    environment, you'd need to use some type of block or driver for your storage.
    Let's create a `jenkins-volume.yaml` file called `jenkins-persist`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s what you''ll put into that file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s create the volume for Jenkins to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Great! Now, we''re ready to use Helm to install Jenkins nice and easily. Let''s
    use the following values file with our installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we''ve set the values file, let''s use it to deploy Jenkins:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We can get the randomly generated Jenkins secret by addressing the Kubernetes
    secret store API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that Jenkins has installed using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Then, open up Jenkins' home page. You should be able to visit the home page
    at `http://192.168.99.100:3200`.
  prefs: []
  type: TYPE_NORMAL
- en: Bonus fun
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**fabric8** bills itself as an integration platform. It includes a variety
    of logging, monitoring, and continuous delivery tools. It also has a nice console,
    an API registry, and a 3D game that lets you shoot at your pods. It''s a very
    cool project, and it actually runs on Kubernetes. The website for the project
    can be found at [http://fabric8.io/](http://fabric8.io/).'
  prefs: []
  type: TYPE_NORMAL
- en: fabric8 can be set up easily on your Kubernetes cluster with just a single command,
    so refer to [http://fabric8.io/guide/getStarted/gke.html/](http://fabric8.io/guide/getStarted/gke.html)
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We looked at two continuous integration tools that can be used with Kubernetes.
    We did a brief walk-through, examining how to deploy the gulp.js task on our cluster.
    We also looked at a new plugin used to integrate Jenkins build slaves into your
    Kubernetes cluster. You should now have a better sense of how Kubernetes can integrate
    with your own CI/CD pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What type of software does gulp.js enable us to build?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the name of the popular CI/CD system that we installed?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is an alternative method of installation for Jenkins?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What type of volume is required to run Jenkins on Kubernetes?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the other requirement for running Jenkins on Kubernetes?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What kind of controller is used when deploying with gulp.js?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What tool did we use to install gulp.js?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you''d like some additional information on the Node.js and gulp.js ecosystems,
    check out these titles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/web-development/mastering-nodejs](https://www.packtpub.com/web-development/mastering-nodejs)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/web-development/learning-nodejs-development](https://www.packtpub.com/web-development/learning-nodejs-development)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you''d like some additional guidance on how to use Jenkins, read the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/networking-and-servers/learning-continuous-integration-jenkins](https://www.packtpub.com/networking-and-servers/learning-continuous-integration-jenkins)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/application-development/mastering-jenkins](https://www.packtpub.com/application-development/mastering-jenkins)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/virtualization-and-cloud/hands-continuous-integration-and-automation-jenkins-video](https://www.packtpub.com/virtualization-and-cloud/hands-continuous-integration-and-automation-jenkins-video)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL

["```\nimport http from 'k6/http';\nexport default function () {\n  http.get('http://www.acme.com');\n}\n```", "```\nimport { check } from 'k6';\nimport http from 'k6/http';\nexport default function () {\n  const res = http.get('http://www.acme.com');\n  check(res, {\n    'is status 200': (r) => r.status === 200,\n  },\n  { company: 'Acme' }\n  );\n}\n```", "```\nimport http from 'k6/http';\nexport const options = {\n  thresholds: {\n    http_req_failed: ['rate<0.01'], // http errors should be less than 1%\n    http_req_duration: ['p(95)<200'], // 95% of requests should be below 200ms\n  },\n};\nexport default function () {\n  http.get('http://www.acme.com');\n}\n```", "```\nimport http from 'k6/http';\nexport const options = {\n  vus: 100,\n  duration: '30m'\n};\nexport default function () {\n  http.get('http://www.acme.com');\n}\n```", "```\n$ k6 --help\n          /\\      |‾‾| /‾‾/   /‾‾/\n     /\\  /  \\     |  |/  /   /  /\n    /  \\/    \\    |     (   /   ‾‾\\\n   /          \\   |  |\\  \\ |  (‾)  |\n  / __________ \\  |__| \\__\\ \\_____/ .io\nUsage:\n  k6 [command]\nAvailable Commands:\n  archive     Create an archive\n  cloud       Run a test on the cloud\n  completion  Generate the autocompletion script for the specified shell\n  help        Help about any command\n  inspect     Inspect a script or archive\n  login       Authenticate with a service\n  pause       Pause a running test\n  resume      Resume a paused test\n  run         Start a test\n  scale       Scale a running test\n  stats       Show test metrics\n  status      Show test status\n  version     Show application version\n```"]
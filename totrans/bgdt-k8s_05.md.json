["```\n    pip3 install pyspark\n    ```", "```\n    spark-submit --version\n    ```", "```\njupyter lab\n```", "```\n    requests Python library if it is not available. Press *Shift* + *Enter* to run the code block.\n    ```", "```\n    import os\n    import requests\n    ```", "```\n    urls_dict = {\n    \"titanic.csv\": \"https://raw.githubusercontent.com/neylsoncrepalde/titanic_data_with_semicolon/main/titanic.csv\",\n    }\n    ```", "```\n    def get_titanic_data(urls):\n        for title, url in urls.items():\n          response = requests.get(url, stream=True)\n          with open(f\"data/titanic/{title}\", mode=\"wb\") as file:\n            file.write(response.content)\n        return True\n    ```", "```\n    os.makedirs('data/titanic', exist_ok=True)\n    get_titanic_data(urls_dict)\n    ```", "```\n    from pyspark.sql import SparkSession\n    from pyspark.sql import functions as f\n    ```", "```\n    spark = SparkSession.builder.appName(\"TitanicData\").getOrCreate()\n    ```", "```\n    titanic = (\n        spark\n        .read\n        .options(header=True, inferSchema=True, delimiter=\";\")\n        .csv('data/titanic/titanic.csv')\n    )\n    ```", "```\n    titanic.show()\n    ```", "```\n    new_df = df.select(\"column1\", \"column2\")\n    ```", "```\n    filtered_df = df.filter(df[\"age\"] > 20)\n    ```", "```\n    sorted_df = df.orderBy(\"salary\")\n    ```", "```\n    agg_df = df.groupBy(\"department\").avg(\"salary\")\n    ```", "```\n    df.count()\n    ```", "```\n    df.first()\n    ```", "```\n    df.show()\n    ```", "```\n    df.collect()\n    ```", "```\n    df.write.parquet(\"PATH-TO-SAVE\")\n    ```", "```\nnarrow_df = df.where(\"age > 20\")\n```", "```\ngrouped_df = df.groupBy(\"department\").avg(\"salary\")\n```", "```\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql import functions as f\nspark = SparkSession.builder.appName(\"TitanicData\").getOrCreate()\ntitanic = (\n    spark\n    .read\n    .options(header=True, inferSchema=True, delimiter=\";\")\n    .csv('data/titanic/titanic.csv')\n)\n```", "```\ntitanic.printSchema()\n```", "```\nfiltered = (\n    titanic\n    .filter(titanic.Age > 21)\n    .filter(titanic.Sex == \"male\")\n)\n```", "```\nfiltered.show()\n```", "```\nqueryp = (\n    titanic\n    .filter(titanic.Sex == \"male\")\n    .filter(titanic.Age > 21)\n    .groupBy('Pclass')\n    .agg(f.sum('Survived').alias('Survivors'))\n)\n```", "```\ntitanic.createOrReplaceTempView('titanic')\nquerysql = spark.sql(\"\"\"\n    SELECT\n        Pclass,\n        sum(Survived) as Survivors\n    FROM titanic\n    WHERE\n        Sex = 'male'\n        AND Age > 21\n    GROUP BY Pclass\n\"\"\")\n```", "```\nqueryp.explain('formatted')\nquerysql.explain('formatted')\n```", "```\nqueryp.show()\nquerysql.show()\n```", "```\n+------+---------+\n|Pclass|Survivors|\n+------+---------+\n|     1|       36|\n|     3|       22|\n|     2|        5|\n+------+---------+\n```", "```\nimport os\nimport requests\nurls_dict = {\n    \"names.tsv.gz\": \"https://datasets.imdbws.com/name.basics.tsv.gz\",\n    \"basics.tsv.gz\": \"https://datasets.imdbws.com/title.basics.tsv.gz\",\n    \"crew.tsv.gz\": \"https://datasets.imdbws.com/title.crew.tsv.gz\",\n    \"principals.tsv.gz\": \"https://datasets.imdbws.com/title.principals.tsv.gz\",\n    \"ratings.tsv.gz\": \"https://datasets.imdbws.com/title.ratings.tsv.gz\"\n}\ndef get_imdb_data(urls):\n    for title, url in urls.items():\n        response = requests.get(url, stream=True)\n      with open(f\"data/imdb/{title}\", mode=\"wb\") as file:\n        file.write(response.content)\n    return True\nos.makedirs('data/imdb', exist_ok=True)\nget_imdb_data(urls_dict)\n```", "```\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql import functions as f\nspark = SparkSession.builder.appName(\"IMDBData\").getOrCreate()\nspark.sparkContext.setLogLevel(\"ERROR\")\n```", "```\nschema_names = \"nconst string, primaryName string, birthYear int, deathYear int, primaryProfession string, knownForTitles string\"\nschema_basics = \"\"\"\ntconst string, titleType string, primaryTitle string, originalTitle string, isAdult int, startYear int, endYear int,\nruntimeMinutes double, genres string\n\"\"\"\nschema_crew = \"tconst string, directors string, writers string\"\nschema_principals = \"tconst string, ordering int, nconst string, category string, job string, characters string\"\nschema_ratings = \"tconst string, averageRating double, numVotes int\"\n```", "```\nnames = (\n    spark\n    .read\n    .schema(schema_names)\n    .options(header=True)\n    .csv('data/imdb/names.tsv.gz')\n)\nbasics = (\n    spark\n    .read\n    .schema(schema_basics)\n    .options(header=True)\n    .csv('data/imdb/basics.tsv.gz')\n)\ncrew = (\n    spark\n    .read\n    .schema(schema_crew)\n    .options(header=True)\n    .csv('data/imdb/crew.tsv.gz')\n)\nprincipals = (\n    spark\n    .read\n    .schema(schema_principals)\n    .options(header=True)\n    .csv('data/imdb/principals.tsv.gz')\n)\nratings = (\n    spark\n    .read\n    .schema(schema_ratings)\n    .options(header=True)\n    .csv('data/imdb/ratings.tsv.gz')\n)\n```", "```\nprint(\"NAMES Schema\")\nnames.printSchema()\nprint(\"BASICS Schema\")\nbasics.printSchema()\nprint(\"CREW Schema\")\ncrew.printSchema()\nprint(\"PRINCIPALS Schema\")\nprincipals.printSchema()\nprint(\"RATINGS Schema\")\nratings.printSchema()\n```", "```\nnames.show()\n```", "```\n+---------+-------------------+--------------------+\n|nconst   |        primaryName|      knownForTitles|\n+---------+-------------------+--------------------+\n|nm0000001|       Fred Astaire|tt0031983,tt00504...|\n|nm0000002|      Lauren Bacall|tt0038355,tt00373...|\n|nm0000003|    Brigitte Bardot|tt0049189,tt00544...|\n|nm0000004|       John Belushi|tt0078723,tt00725...|\n|nm0000005|     Ingmar Bergman|tt0050976,tt00839...|\n|nm0000006|     Ingrid Bergman|tt0034583,tt00368...|\n|nm0000007|    Humphrey Bogart|tt0037382,tt00425...|\n|nm0000008|      Marlon Brando|tt0078788,tt00708...|\n|nm0000009|     Richard Burton|tt0061184,tt00578...|\n|nm0000010|       James Cagney|tt0031867,tt00355...|\n|nm0000011|        Gary Cooper|tt0044706,tt00358...|\n|nm0000012|        Bette Davis|tt0031210,tt00566...|\n|nm0000013|          Doris Day|tt0045591,tt00494...|\n|nm0000014|Olivia de Havilland|tt0041452,tt00313...|\n|nm0000015|         James Dean|tt0049261,tt00485...|\n|nm0000016|    Georges Delerue|tt8847712,tt00699...|\n|nm0000017|   Marlene Dietrich|tt0052311,tt00512...|\n|nm0000018|       Kirk Douglas|tt0049456,tt00508...|\n|nm0000019|   Federico Fellini|tt0071129,tt00568...|\n|nm0000020|        Henry Fonda|tt0082846,tt00512...|\n+---------+-------------------+--------------------+\n```", "```\nnames = names.select(\n    'nconst', 'primaryName', 'birthYear', 'deathYear',\n    f.explode(f.split('knownForTitles', ',')).alias('knownForTitles')\n)\n```", "```\ncrew.show()\n```", "```\n+---------+-------------------+---------+\n|   tconst|          directors|  writers|\n+---------+-------------------+---------+\n|tt0000001|          nm0005690|       \\N|\n|tt0000002|          nm0721526|       \\N|\n|tt0000003|          nm0721526|       \\N|\n|tt0000004|          nm0721526|       \\N|\n|tt0000005|          nm0005690|       \\N|\n|tt0000006|          nm0005690|       \\N|\n|tt0000007|nm0005690,nm0374658|       \\N|\n|tt0000008|          nm0005690|       \\N|\n|tt0000009|          nm0085156|nm0085156|\n|tt0000010|          nm0525910|       \\N|\n|tt0000011|          nm0804434|       \\N|\n|tt0000012|nm0525908,nm0525910|       \\N|\n|tt0000013|          nm0525910|       \\N|\n|tt0000014|          nm0525910|       \\N|\n|tt0000015|          nm0721526|       \\N|\n|tt0000016|          nm0525910|       \\N|\n|tt0000017|nm1587194,nm0804434|       \\N|\n|tt0000018|          nm0804434|       \\N|\n|tt0000019|          nm0932055|       \\N|\n|tt0000020|          nm0010291|       \\N|\n+---------+-------------------+---------+\n```", "```\ncrew.filter(\"directors LIKE '%,%'\").show()\n```", "```\ncrew = crew.select(\n    'tconst', f.explode(f.split('directors', ',')).alias('directors'), 'writers'\n)\n```", "```\nonly_keanu = names.filter(\"primaryName = 'Keanu Reeves'\")\nonly_keanu.show()\n```", "```\nkeanus_movies = (\n    basics.select('tconst', 'primaryTitle', 'startYear')\n    .join(\n        only_keanu.select('primaryName', 'knownForTitles'),\n        basics.tconst == names.knownForTitles, how='inner'\n    )\n)\n```", "```\nkeanus_movies.explain('formatted')\n```", "```\n== Physical Plan ==\nAdaptiveSparkPlan (11)\n+- SortMergeJoin Inner (10)\n    :- Sort (4)\n    :  +- Exchange (3)\n    :     +- Filter (2)\n    :        +- Scan csv  (1)\n    +- Sort (9)\n      +- Exchange (8)\n         +- Generate (7)\n            +- Filter (6)\n               +- Scan csv  (5)\n```", "```\nkeanus_movies2 = (\n    basics.select(\n        'tconst', 'primaryTitle', 'startYear'\n    ).join(\n        f.broadcast(only_keanu.select('primaryName', 'knownForTitles')),\n        basics.tconst == names.knownForTitles, how='inner'\n    )\n)\n```", "```\nkeanus_movies2.explain('formatted')\n== Physical Plan ==\nAdaptiveSparkPlan (8)\n+- BroadcastHashJoin Inner BuildRight (7)\n    :- Filter (2)\n    :  +- Scan csv  (1)\n    +- BroadcastExchange (6)\n      +- Generate (5)\n         +- Filter (4)\n            +- Scan csv  (3)\n```", "```\nkeanus_movies3 = (\n    basics.select(\n        'tconst', 'primaryTitle', 'startYear'\n    ).join(\n        only_keanu.select('primaryName', 'knownForTitles').hint(\"shuffle_hash\"),\n        basics.tconst == names.knownForTitles, how='inner'\n    )\n)\n```", "```\nkeanu_movies3.explain(\"formatted\")\n== Physical Plan ==\nAdaptiveSparkPlan (9)\n+- ShuffledHashJoin Inner BuildRight (8)\n    :- Exchange (3)\n    :  +- Filter (2)\n    :     +- Scan csv  (1)\n    +- Exchange (7)\n      +- Generate (6)\n         +- Filter (5)\n            +- Scan csv  (4)\n```", "```\nkeanus_movies.show()\nkeanus2_movies.show()\nkeanus3_movies.show()\n```", "```\nbasics.createOrReplaceTempView('basics')\nnames.createOrReplaceTempView('names')\nkeanus_movies4 = spark.sql(\"\"\"\n    SELECT\n        b.primaryTitle,\n        b.startYear,\n        n.primaryName\n    FROM basics b\n    INNER JOIN names n\n        ON b.tconst = n.knownForTitles\n    WHERE n.primaryName = 'Keanu Reeves'\n\"\"\")\n```", "```\n(\n    names\n    .filter(\"primaryName in ('Tom Hanks', 'Meg Ryan')\")\n    .select('nconst', 'primaryName', 'knownForTitles')\n    .show()\n)\n```", "```\n+----------+-----------+--------------+\n|    nconst|primaryName|knownForTitles|\n+----------+-----------+--------------+\n| nm0000158|  Tom Hanks|     tt0094737|\n| nm0000158|  Tom Hanks|     tt1535109|\n| nm0000158|  Tom Hanks|     tt0162222|\n| nm0000158|  Tom Hanks|     tt0109830|\n| nm0000212|   Meg Ryan|     tt0120632|\n| nm0000212|   Meg Ryan|     tt0128853|\n| nm0000212|   Meg Ryan|     tt0098635|\n| nm0000212|   Meg Ryan|     tt0108160|\n|nm12744293|   Meg Ryan|    tt10918860|\n|nm14023001|   Meg Ryan|            \\N|\n| nm7438089|   Meg Ryan|     tt4837202|\n| nm9013931|   Meg Ryan|     tt6917076|\n| nm9253135|   Meg Ryan|     tt7309462|\n| nm9621674|   Meg Ryan|     tt7993310|\n+----------+-----------+--------------+\n```", "```\nmovies_together = (\n    principals\n    .filter(\"nconst in ('nm0000158', 'nm0000212')\")\n    .groupBy('tconst')\n    .agg(f.count('nconst').alias('nactors'))\n    .filter('nactors > 1')\n)\nmovies_together.show()\n```", "```\n+---------+-------+\n|   tconst|nactors|\n+---------+-------+\n|tt2831414|      2|\n|tt0128853|      2|\n|tt0099892|      2|\n|tt1185238|      2|\n|tt0108160|      2|\n|tt7875572|      2|\n|tt0689545|      2|\n+---------+-------+\n```", "```\nsubjoin = (\n    principals\n    .join(movies_together.select('tconst'), on='tconst', how='inner')\n    .join(names.select('nconst', 'primaryName'),\n          on='nconst', how='inner')\n    .join(basics.select('tconst', 'primaryTitle', 'startYear'),\n         on='tconst', how='inner')\n    .dropDuplicates()\n)\nsubjoin.show()\n```", "```\nsubjoin.cache()\n```", "```\n(\n    subjoin\n    .select('primaryTitle', 'startYear')\n    .dropDuplicates()\n    .orderBy(f.col('startYear').desc())\n    .show(truncate=False)\n)\n```", "```\n+-----------------------------------------+---------+\n|primaryTitle                             |startYear|\n+-----------------------------------------+---------+\n|Everything Is Copy                       |2015     |\n|Delivering 'You've Got Mail'             |2008     |\n|You've Got Mail                          |1998     |\n|Episode dated 10 December 1998           |1998     |\n|Sleepless in Seattle                     |1993     |\n|Joe Versus the Volcano                   |1990     |\n|Joe Versus the Volcano: Behind the Scenes|1990     |\n+-----------------------------------------+---------+\n```", "```\n(\n    subjoin\n    .filter(\"category in ('director', 'producer', 'writer')\")\n    .select('primaryTitle', 'startYear', 'primaryName', 'category')\n    .show()\n)\n```", "```\n(\n    subjoin.select('tconst', 'primaryTitle')\n    .dropDuplicates()\n    .join(ratings, on='tconst', how='inner')\n    .orderBy(f.col('averageRating').desc())\n    .show()\n)\n```", "```\n+---------+--------------------+-------------+--------+\n|   tconst|        primaryTitle|averageRating|numVotes|\n+---------+--------------------+-------------+--------+\n|tt7875572|Joe Versus the Vo...|          7.8|      12|\n|tt2831414|  Everything Is Copy|          7.4|    1123|\n|tt1185238|Delivering 'You'v...|          7.0|      17|\n|tt0108160|Sleepless in Seattle|          6.8|  188925|\n|tt0128853|     You've Got Mail|          6.7|  227513|\n|tt0099892|Joe Versus the Vo...|          5.9|   39532|\n|tt0689545|Episode dated 10 ...|          3.8|      11|\n+---------+--------------------+-------------+--------+\n```"]
- en: '18'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Future of Kubernetes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will look at the future of Kubernetes from multiple angles.
    We’ll start with the momentum of Kubernetes since its inception across dimensions
    such as community, ecosystem, and mindshare. Spoiler alert – Kubernetes won the
    container orchestration wars by a landslide. As Kubernetes grows and matures,
    the battle lines shift from beating competitors to fighting against its own complexity.
    Usability, tooling, and education will play a major role as container orchestration
    is still new, fast-moving, and not a well-understood domain. Then we will take
    a look at some very interesting patterns and trends, and finally, we will review
    my predictions from the second edition, and I will make some new predictions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The covered topics are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The Kubernetes momentum
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The importance of CNCF
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kubernetes extensibility
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Service mesh integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Serverless computing on Kubernetes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kubernetes and VMs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cluster autoscaling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ubiquitous operators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kubernetes for AI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kubernetes challenges
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Kubernetes momentum
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kubernetes is undeniably a juggernaut. Not only did Kubernetes beat all the
    other container orchestrators, but it is also the de facto solution on public
    clouds, utilized in many private clouds, and even VMware – the virtual machine
    company – is focused on Kubernetes solutions and integrating its products with
    Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes works very well in multi-cloud and hybrid-cloud scenarios due to
    its extensible design.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, Kubernetes makes inroads on the edge, too, with custom distributions
    that expand its broad applicability even more.
  prefs: []
  type: TYPE_NORMAL
- en: The Kubernetes project continues to release a new version every three months,
    like clockwork. The community just keeps growing.
  prefs: []
  type: TYPE_NORMAL
- en: The Kubernetes GitHub repository has almost 100,000 stars. One of the major
    drivers of this phenomenal growth is the **CNCF** (**Cloud Native Computing Foundation**).
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18998_18_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.1: Star History chart'
  prefs: []
  type: TYPE_NORMAL
- en: The importance of the CNCF
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The CNCF has become a very important organization in the cloud computing scene.
    While it is not Kubernetes-specific, the dominance of Kubernetes is undeniable.
    Kubernetes is the first project to graduate, and most of the other projects lean
    heavily toward Kubernetes. In particular, the CNCF offers certification and training
    only for Kubernetes. The CNCF, among other roles, ensures that cloud technologies
    will not suffer from vendor lock-in. Check out this crazy diagram of the entire
    CNCF landscape: [https://landscape.cncf.io](https://landscape.cncf.io).'
  prefs: []
  type: TYPE_NORMAL
- en: Project curation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The CNCF assigns maturity levels to projects: **graduated**, **incubating**,
    and **sandbox**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![CNCF maturity levels](img/B18998_18_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.2: CNCF maturity levels'
  prefs: []
  type: TYPE_NORMAL
- en: Projects start at a certain level – sandbox or incubating – and over time, can
    graduate. That doesn’t mean that only graduated projects can be safely used. Many
    incubating and even sandbox projects are used heavily in production. For example,
    etcd is the persistent state store of Kubernetes itself, and it is just an incubating
    project. Obviously, it is a highly trusted component. Virtual Kubelet is a sandbox
    project that powers AWS Fargate and Microsoft ACI. This is clearly enterprise-grade
    software.
  prefs: []
  type: TYPE_NORMAL
- en: The main benefit of the CNCF curation of projects is to help navigate the incredible
    ecosystem that grew around Kubernetes. When you look to extend your Kubernetes
    solution with additional technologies and tools, the CNCF projects are a good
    place to start.
  prefs: []
  type: TYPE_NORMAL
- en: Certification
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When technologies start to offer certification programs, you can tell they
    are here to stay. The CNCF offers several types of certifications:'
  prefs: []
  type: TYPE_NORMAL
- en: Certified Kubernetes for conforming Kubernetes distributions and installers
    (about 90).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kubernetes Certified Service Provider** (**KCSP**) for vetted service providers
    with deep Kubernetes experience (134 providers).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Certified Kubernetes Administrator** (**CKA**) for administrators.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Certified Kubernetes Application Developer** (**CKAD**) for developers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Certified Kubernetes Security Specialist** (**CKS**) for security experts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Training
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The CNCF offers training too. There is a free introduction to Kubernetes course
    and several paid courses that align with the CKA and CKAD certification exams.
    In addition, the CNCF maintains a list of Kubernetes training partners ([https://landscape.cncf.io/card-mode?category=kubernetes-training-partner&grouping=category](https://landscape.cncf.io/card-mode?category=kubernetes-training-partner&grouping=category)).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’re looking for free Kubernetes training, here are a couple of options:'
  prefs: []
  type: TYPE_NORMAL
- en: VMware Kubernetes academy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Kubernetes Engine on Coursera
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Community and education
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The CNCF also organizes conferences like KubeCon, CloudNativeCon, and meetups
    and maintains several communication avenues like Slack channels and mailing lists.
    It also publishes surveys and reports.
  prefs: []
  type: TYPE_NORMAL
- en: The number of attendees and participants keeps growing year after year.
  prefs: []
  type: TYPE_NORMAL
- en: Tooling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The number of tools to manage containers and clusters, the various add-ons,
    extensions, and plugins just keep growing. Here is a subset of the tools, projects,
    and companies that participate in the Kubernetes ecosystem:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Kubernetes Tooling](img/B18998_18_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.3: Kubernetes tooling'
  prefs: []
  type: TYPE_NORMAL
- en: The rise of managed Kubernetes platforms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pretty much every cloud provider has a solid managed Kubernetes offering these
    days. Sometimes there are multiple flavors and ways of running Kubernetes on a
    given cloud provider.
  prefs: []
  type: TYPE_NORMAL
- en: Public cloud Kubernetes platforms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are some of the prominent managed platforms:'
  prefs: []
  type: TYPE_NORMAL
- en: Google GKE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft AKS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon EKS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Digital Ocean
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Oracle Cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IBM Cloud Kubernetes service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alibaba ACK
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tencent TKE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Of course, you can always roll your own and use the public cloud providers just
    as infrastructure providers. This is a very common use case with Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: Bare metal, private clouds, and Kubernetes on the edge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here, you can find Kubernetes distributions that are designed or configured
    to run in special environments, often in your own data centers as a private cloud
    or in more restricted environments like edge computing on small devices:'
  prefs: []
  type: TYPE_NORMAL
- en: Google Anthos for GKE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenStack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rancher k3S
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kubernetes on Raspberry PI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: KubeEdge
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kubernetes PaaS (Platform as a Service)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This category of offerings aims to abstract some of the complexity of Kubernetes
    and put a simpler facade in front of it. There are many varieties here. Some of
    them cater to the multi-cloud and hybrid-cloud scenarios, some expose a function-as-a-service
    interface, and some just focus on a better installation and support experience:'
  prefs: []
  type: TYPE_NORMAL
- en: Google Cloud Run
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VMware PKS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Platform 9 PMK
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Giant Swarm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenShift
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rancher RKE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upcoming trends
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s talk about some of the technological trends in the Kubernetes world that
    will be important in the near future.
  prefs: []
  type: TYPE_NORMAL
- en: Security
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Security is, of course, a paramount concern for large-scale systems. Kubernetes
    is primarily a platform for managing containerized workloads. Those containerized
    workloads are often run in a multi-tenant environment. The isolation between tenants
    is super important. Containers are lightweight and efficient because they share
    an OS and maintain their isolation through various mechanisms like namespace isolation,
    filesystem isolation, and cgroup resource isolation. In theory, this should be
    enough. In practice, the surface area is large, and there were multiple breakouts
    out of container isolation.
  prefs: []
  type: TYPE_NORMAL
- en: To address this risk, multiple lightweight VMs were designed to add a hypervisor
    (machine-level virtualization) as an additional isolation level between the container
    and the OS kernel. The big cloud providers already support these technologies,
    and the Kubernetes CRI interface provides a streamlined way to take advantage
    of these more secure runtimes.
  prefs: []
  type: TYPE_NORMAL
- en: For example, FireCracker is integrated with containerd via firecracker-containerd.
    Google gVisor is another sandbox technology. It is a userspace kernel that implements
    most of the Linux system calls and provides a buffer between the application and
    the host OS. It is also available through containerd via gvisor-containerd-shim.
  prefs: []
  type: TYPE_NORMAL
- en: Networking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Networking is another area that is an ongoing source of innovation. The Kubernetes
    CNI allows any number of innovative networking solutions behind a simple interface.
    A major theme is the incorportation of eBPF – a relatively new Linux kernel technology
    – into Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: '**eBPF** stands for **extended Berkeley Packet Filter**. The core of eBPF is
    a mini-VM in the Linux kernel that executes special programs attached to kernel
    objects when certain events occur, such as a packet being transmitted or received.
    Originally, only sockets were supported, and the technology was called just BPF.
    Later, additional objects were added to the mix and that’s when the *e* for *extended*
    came along. eBPF’s claim to fame is its performance due to the fact it runs highly
    optimized compiled BPF programs in the kernel and doesn’t require extending the
    kernel with kernel modules.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many applications for eBPF:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Dynamic network control**: iptables-based approaches don’t scale very well
    in a dynamic environment like a Kubernetes cluster where you have a constantly
    changing set of pods and services. Replacing iptables with BPF programs is both
    more performant and more manageable. Cilium is focused on routing and filtering
    traffic using eBPF.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Monitoring connections**: Creating an up-to-date map of TCP connections between
    containers is possible by attaching a BPF program kprobes that track socket-level
    events. WeaveScope utilizes this capability by running an agent on each node that
    collects this information and sends it to a server that provides a visual representation
    through a slick UI.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Restricting syscalls**: The Linux kernel provides more than 300 system calls.
    In a security-sensitive container environment, it is highly desirable. The original
    seccomp facility was pretty rudimentary. In Linux 3.5, seccomp was extended to
    support BPF for advanced custom filters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Raw performance**: eBPF provides significant performance benefits, and projects
    like Calico took advantage and implemented a faster data plane that uses fewer
    resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom hardware and devices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Kubernetes manages nodes, networking, and storage at a relatively high level.
    But there are many benefits to integrating specific hardware at a fine-grained
    level. For example, GPUs, high-performance network cards, FPGAs, InfiniBand adapters,
    and other compute and networking and storage resources. This is where the device
    plugin framework comes in, which can be found here: [https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/device-plugins](https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/device-plugins).
    It has been in GA since Kubernetes 1.26, and there is ongoing innovation in this
    area. For example, monitoring device plugin resources is also in beta since Kubernetes
    1.15\. It is very interesting to see what devices will be harnessed to Kubernetes.
    The framework itself follows modern Kubernetes extensibility practices by utilizing
    gRPC.'
  prefs: []
  type: TYPE_NORMAL
- en: Service mesh
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The service mesh is arguably the most important trend in networking over the
    last couple of years. We covered service meshes in depth in *Chapter 14*, *Utilizing
    Service Meshes*. The adoption is impressive, and I predict that most Kubernetes
    distributions will provide a default service mesh and allow easy integration with
    other service meshes. The benefits that service meshes provide are just too valuable.
    It makes sense to provide a default platform that includes Kubernetes with an
    integrated service mesh. That said, Kubernetes itself will not absorb some service
    mesh and expose it through its API. This goes against the grain of keeping the
    core of Kubernetes small.
  prefs: []
  type: TYPE_NORMAL
- en: Google Anthos is a good example where Kubernetes + Knative + Istio are combined
    to provide a unified platform that provides an opinionated best-practices bundle
    that would take an organization a lot of time and resources to build on top of
    vanilla Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another push in this direction is the sidecar container KEP; information about
    it can be found here: [https://github.com/kubernetes/enhancements/blob/master/keps/sig-node/753-sidecar-containers/README.md](https://github.com/kubernetes/enhancements/blob/master/keps/sig-node/753-sidecar-containers/README.md).'
  prefs: []
  type: TYPE_NORMAL
- en: The sidecar container pattern has been a staple of Kubernetes from the get-go.
    After all, pods can contain multiple containers. But there was no notion of a
    main container or a sidecar container. All containers in the pod have the same
    status. Most service meshes use sidecar containers to intercept traffic and perform
    their jobs. Formalizing sidecar containers will help those efforts and push service
    meshes even further.
  prefs: []
  type: TYPE_NORMAL
- en: It’s not clear at this stage if Kubernetes and the service mesh will be hidden
    behind a simpler abstraction on most platforms or if they will be front and center.
  prefs: []
  type: TYPE_NORMAL
- en: Serverless computing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Serverless computing is another trend that is here to stay. We discussed it
    at length in *Chapter 12*, *Serverless Computing on Kubernetes*. Kubernetes and
    serverless can be combined on multiple levels. Kubernetes can utilize serverless
    cloud solutions like AWS Fargate and **AKS Azure Container Instances** (**ACI**)
    to save the cluster administrator from managing nodes. This approach also caters
    to integrating lightweight VMs transparently with Kubernetes since the cloud platforms
    don’t use naked Linux containers for their container-as-a-service platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Another avenue is to reverse the roles and expose containers as a service powered
    by Kubernetes under the covers. This is exactly what Google Cloud Run is doing.
    The lines blur here as there are multiple products from Google to manage containers
    and/or Kubernetes ranging from just GKE, through Anthos GKE (bring your own cluster
    to the GKE environment for your private data center), Anthos (managed Kubernetes
    + service mesh), and Anthos Cloud Run.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, there are functions-as-a-service and scale-to-zero projects running
    inside your Kubernetes cluster. Knative may become the leader here, as it is already
    used by many frameworks, and is deployed heavily through various Google products.
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes on the edge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Kubernetes is the poster boy of cloud-native computing, but with the **Internet
    of Things** (**IoT**) revolution, there is more need to perform computation at
    the edge of the network. Sending all data to the backend for processing suffers
    from several drawbacks:'
  prefs: []
  type: TYPE_NORMAL
- en: Latency
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Need for enough bandwidth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cost
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With edge locations collecting a lot of data via sensors, video cameras, etc.,
    the amount of edge data grows, and it makes more sense to perform more and more
    sophisticated processing at the edge. Kubernetes grew out of Google’s Borg, which
    was definitely not designed to run at the edge of the network. But Kubernetes’
    design proved to be flexible enough to accommodate it. I expect that we will see
    more and more Kubernetes deployments at the edge of the network, which will lead
    to very interesting systems that are composed of many Kubernetes clusters that
    will need to be managed centrally.
  prefs: []
  type: TYPE_NORMAL
- en: KubeEdge is an open-source framework that is built on top of Kubernetes and
    Mosquito – an open-source implementation of MQTT message broker – to provide a
    foundation for networking, application deployment, and metadata synchronization
    between the cloud and the edge.
  prefs: []
  type: TYPE_NORMAL
- en: Native CI/CD
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For developers, one of the most important questions is the construction of a
    CI/CD pipeline. There are many options and choosing between them can be difficult.
    The CD Foundation is an open source foundation that was formed to standardize
    concepts like pipelines and workflows, and define industry specifications that
    will allow different tools and communities to interoperate better.
  prefs: []
  type: TYPE_NORMAL
- en: 'The current projects are:'
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tekton
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spinnaker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jenkins X
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Screwdriver.cd
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ortelius
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CDEvents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pyrsia
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shipwright
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that only Jenkins and Tekton are considered graduated projects. The rest
    are incubating projects (even Spinnaker).
  prefs: []
  type: TYPE_NORMAL
- en: One of my favorite native CD projects, Argo CD, is not part of the CD Foundation.
    I actually opened a GitHub issue asking to submit Argo CD to the CDF, but the
    Argo team has decided that CNCF is a better fit for their project.
  prefs: []
  type: TYPE_NORMAL
- en: Another project to watch is CNB – Cloud Native Buildpacks. The project takes
    the source and creates OCI (think Docker) images. It is important for FaaS frameworks
    and native in-cluster CI. It is also a CNCF sandbox project.
  prefs: []
  type: TYPE_NORMAL
- en: Operators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Operator** pattern emerged in 2016 from CoreOS (acquired by RedHat, acquired
    by IBM) and gained a lot of success in the community. An Operator is a combination
    of custom resources and a controller used to manage an application. At my current
    job, I write operators to manage various aspects of infrastructure, and it is
    a joy. It is already the established way to distribute non-trivial applications
    to Kubernetes clusters. Check out [https://operatorhub.io/](https://operatorhub.io/)
    for a huge list of existing operators. I expect this trend to continue and intensify.
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes and AI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AI is the hottest trend right now. **Large language models** (**LLMs**) and
    **Generative Pre-trained Transforms** (**GPT**) surprised most professionals with
    their capabilities. The release of ChatGPT 3.5 by OpenAI was a watershed moment.
    AI suddenly excels in areas that were considered strongholds of human intelligence,
    such as creative writing, painting, understanding, answering nuanced questions,
    and, of course, coding. My perspective is that advanced AI is the solution to
    the big data problem. We learned to collect a lot of data, but analyzing and extracting
    insights from the data is a difficult and labor-intensive process. AI seems like
    the right technology to digest all the data and automatically understand, summarize,
    and organize it into a useful form to be used by humans and other systems (most
    likely AI-based systems).
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see why Kubernetes is such a great fit for AI workloads.
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes and AI synergy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Modern AI is all about deep learning networks and huge models with billions
    of parameters trained on massive datasets, often using dedicated hardware. Kubernetes
    is a perfect fit for such workloads as it quickly adapts to the workload’s needs,
    takes advantage of new and improved hardware, and provides strong observability.
  prefs: []
  type: TYPE_NORMAL
- en: 'The best evidence is the field. Kubernetes is at the core of the OpenAI pipeline,
    and additional companies are developing and deploying massive AI applications.
    Check out this article that shows how OpenAI pushes the envelope with Kubernetes
    and runs huge clusters with 7,500 nodes: [https://openai.com/research/scaling-kubernetes-to-7500-nodes](https://openai.com/research/scaling-kubernetes-to-7500-nodes).'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s consider training AI models on Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: Training AI models on Kubernetes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Training large AI models is potentially slow and very expensive. Organizations
    that partake in training AI models on Kubernetes benefit from many of its properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scalability**: Kubernetes provides a highly scalable infrastructure for deploying
    and managing AI workloads. With Kubernetes, it is possible to quickly scale resources
    up or down based on demand, enabling organizations to train AI models quickly
    and efficiently.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resource utilization**: Kubernetes allows for efficient resource utilization,
    enabling organizations to train AI models using the most cost-effective infrastructure.
    With Kubernetes, it is possible to automatically allocate and manage resources,
    ensuring that the right resources are available for the workload.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Flexibility**: Kubernetes provides a high degree of flexibility in terms
    of the infrastructure used for training AI models. Kubernetes supports a wide
    range of hardware, including GPUs, FPGAs, and TPUs, making it possible to use
    the most appropriate hardware for the workload.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Portability**: Kubernetes provides a highly portable infrastructure for deploying
    and managing AI workloads. Kubernetes supports a wide range of cloud providers
    and on-premises infrastructure, making it possible to train AI models in any environment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ecosystem**: Kubernetes has a vibrant ecosystem of open-source tools and
    frameworks that can be used for training AI models. For example, Kubeflow is a
    popular open-source framework for building and deploying machine learning workflows
    on Kubernetes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running AI-based systems on Kubernetes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you have trained your models and built your application on top of your
    models, you need to deploy and run it. Kubernetes is, of course, a great platform
    for deploying workloads in general. AI-based workloads are often designed for
    a reliable and quick super-human response. The high availability that Kubernetes
    offers and the ability to quickly scale up and down based on demand satisfy these
    requirements.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, if the system is designed to keep learning (as opposed to fixed
    pre-trained systems like GPTs), then Kubernetes offers strong security and control
    that support safe operation.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at the emerging field of AIOps.
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes and AIOps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AIOps is a paradigm that leverages AI and machine learning to automate and optimize
    the management of infrastructure. AIOps can help organizations improve the reliability,
    performance, and security of their IT infrastructure while reducing the burden
    on human engineers.
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes is a perfect target for practicing AIOps. It is fully accessible
    programmatically. It is often deployed with deep observability. Those two conditions
    are necessary and sufficient to enable AI to scrutinize the state of the system
    and take action when necessary.
  prefs: []
  type: TYPE_NORMAL
- en: The future of Kubernetes seems bright, but it has some challenges too.
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes challenges
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Is Kubernetes the answer to everything to do with infrastructure? Not at all.
    Let’s look at some challenges, such as Kubernetes’ complexity, and some alternative
    solutions for the problem of developing, deploying, and managing large-scale systems.
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes complexity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Kubernetes is a large, powerful, and extensible platform. It is mostly un-opinionated
    and very flexible. It has a huge surface area with a lot of resources and APIs.
    In addition, Kubernetes has a huge ecosystem. That translates to a system that
    is extremely difficult to learn and master. What does it say about Kubernetes’
    future? One likely scenario is that most developers will not interact with Kubernetes
    directly. Simplified solutions built on top of Kubernetes will be the primary
    access point for most developers.
  prefs: []
  type: TYPE_NORMAL
- en: If Kubernetes is fully abstracted, then it may become a threat to its future
    since Kubernetes, as the underlying implementation, might be replaced by the solution
    provider. The final users may not need to make any changes at all to their code
    or configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Another scenario is that more and more organizations negatively weigh the costs
    of building on top of Kubernetes compared to lightweight container orchestration
    platforms such as Nomad. This could lead to an exodus from Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at some technologies that may compete with Kubernetes in different
    areas.
  prefs: []
  type: TYPE_NORMAL
- en: Serverless function platforms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Serverless function platforms offer organizations and developers similar benefits
    to Kubernetes using a simpler (if less powerful) paradigm. Instead of modeling
    your system as a set of long-running applications and services, you just implement
    a set of functions that can be triggered on demand. You don’t need to manage clusters,
    node pools, and servers. Some solutions offer long-running services, too, either
    pre-packaged as containers or directly from source. We covered it thoroughly in
    *Chapter 12*, *Serverless Computing on Kubernetes*. As the serverless platforms
    get better and Kubernetes become more complicated, more organizations may prefer
    to at least start using serverless solutions and possibly migrate to Kubernetes
    later.
  prefs: []
  type: TYPE_NORMAL
- en: 'First and foremost, all cloud providers offer various serverless solutions.
    The pure cloud functions models are:'
  prefs: []
  type: TYPE_NORMAL
- en: AWS Lambda
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Cloud Functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are also multiple strong and easy-to-use solutions out there that are
    not associated with the big cloud providers:'
  prefs: []
  type: TYPE_NORMAL
- en: Cloudflare Workers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fly.io
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Render
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vercel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That concludes our coverage of Kubernetes challenges. Let’s summarize the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at the future of Kubernetes, and it looks great!
    The technical foundation, the community, the broad support, and the momentum are
    all very impressive. Kubernetes is still young, but the pace of innovation and
    stabilization is very encouraging. The modularization and extensibility principles
    of Kubernetes let it become the universal foundation for modern cloud-native applications.
    That said, there are some challenges to Kubernetes and it might not dominate each
    and every scenario. This is a good thing. Diversity, competition, and inspiration
    from other solutions will just make Kubernetes better.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you should have a clear idea of where Kubernetes is right now
    and where it’s going from here. You should be confident that Kubernetes is not
    just here to stay, but that it will be the leading container orchestration platform
    for many years to come and integrate with any major offering and environment you
    can imagine, from planet-scale public cloud platforms, private clouds, data centers,
    edge locations and all the way down to your development laptop and Raspberry Pi.
  prefs: []
  type: TYPE_NORMAL
- en: That’s it! This is the end of the book.
  prefs: []
  type: TYPE_NORMAL
- en: Now it’s up to you to use what you’ve learned and build amazing things with
    Kubernetes!
  prefs: []
  type: TYPE_NORMAL
- en: Join us on Discord!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Read this book alongside other users, cloud experts, authors, and like-minded
    professionals.
  prefs: []
  type: TYPE_NORMAL
- en: Ask questions, provide solutions to other readers, chat with the authors via.
    Ask Me Anything sessions and much more.
  prefs: []
  type: TYPE_NORMAL
- en: Scan the QR code or visit the link to join the community now.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/cloudanddevops](https://packt.link/cloudanddevops)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code844810820358034203.png)'
  prefs: []
  type: TYPE_IMG

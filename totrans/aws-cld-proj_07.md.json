["```\n {\n  \"meetingId\": \"GUID\",\n  \"startTime\": \"time when the meeting starts\",\n  \"endTime\": \"time when the meeting ends\",\n  \"duration\": \"duration of the meeting in minutes\",\n  \"attendeeName\": \"the name of the participant\",\n  \"email\": \"the email of the participant\",\n  \"status\": \"meeting request status\",\n  \"date\": \"meeting date\",\n  \"isConflict\": \"for a meeting request, define if there is any overlap with a pre-accepted meeting\"\n};\n```", "```\n export const API_URL = '[ApiUrl CloudFormation Output]';\n```", "```\n export const amplifyConfig = {\n  aws_project_region: 'AWS Region code where you deployed your application. E.g.: us-west-2',\n  aws_cognito_region: ' AWS Region code where you deployed your application. E.g.: us-west-2',\n  aws_user_pools_id: '[UserPoolId CloudFormation Output]',\n  aws_user_pools_web_client_id: '[ClientId CloudFormation Output]',\n  };\n```", "```\n $ npm install && npm run build\n```", "```\n def check_meeting_slot(prop_date, prop_start, prop_dur):\n#check if is there any conflict by querying the dynamoDB table for meeting already accepted at the proposed start time.\n```", "```\n def check_meeting_slot(prop_date, prop_start, prop_dur, min_time, max_time):\n#future work\n```", "```\n def lambda_handler(event, context):\n…\nresponse = bot.recognize_text(\nbotId = '${MeetyBot}',\nbotAliasId='TSTALIASID',\nlocaleId='en_US',\nsessionId='your_session_id',\ntext = user_input\n)\n…\n```"]
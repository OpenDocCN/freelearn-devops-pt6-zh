["```\n    $ sudo apt-get update\n    $ sudo apt-get install python3\n    $ sudo apt-get install python3-pip\n    $ sudo pip3 install virtualenv\n    ```", "```\n    $ sudo yum update\n    $ sudo yum install python3\n    $ sudo python3 -m pip install --upgrade pip\n    $ sudo python3 -m pip install virtualenv\n    ```", "```\n    $ brew install python3\n    $ curl -O https://bootstrap.pypa.io/get-pip.py\n    $ sudo python3 get-pip.py\n    $ sudo -H pip3 install virtualenv\n    ```", "```\n    C:\\> choco install python3\n    C:\\> pip install virtualenv \n    ```", "```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: aws-auth\n  namespace: kube-system\ndata:\n  mapRoles: |\n    - rolearn: <ARN of instance role (not instance profile)>\n      username: system:node:{{EC2PrivateDNSName}}\n      groups:\n        - system:bootstrappers\n        - system:nodes\n```", "```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: aws-auth\n```", "```\ndata:\n  mapUsers: |\n{% for user in map_users.system_masters %}\n    - userarn: \"{{ user.arn }}\"\n      username: \"{{ user.name }}\"\n      groups:\n        - system:masters\n{% endfor %}\n```", "```\n  mapRoles: |\n{% for role in map_roles.workers_roles %}\n    - rolearn: \"{{ role }}\"\n      username: {% raw -%} \"system:node:{{ '{{' }}EC2PrivateDNSName{{ '}}' }}\" {%- endraw %}\n      groups:\n        - system:bootstrappers\n        - system:nodes\n{% endfor %}\n{% for role in map_roles.system_masters %}\n    - rolearn: \"{{ role }}\"\n      username: {% raw -%} \"admin:{{ '{{' }}SessionName{{ '}}' }}\" {%- endraw %}\n      groups:\n        - system:masters\n{% endfor %}\n```", "```\n{% for namespace in namespaces_list %}\n---\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: {{ namespace.name }}\n  labels:\n    name: {{ namespace.name }}\n    owner: {{ namespace.owner }}    \n{% endfor %}\n```", "```\nmap_roles:\n  workers_roles:\n    - \"{{ worker_iam_role_arn }}\"\n  system_masters: []\nmap_users:\n  system_masters:\n    - arn: \"<ARN of the admin user>\"\n      name: \"admin\"\n```", "```\nnamespaces_list:\n- name: default-namespace\n  owner: admin\n```", "```\n[all]\nlocalhost\n[override]\nlocalhost\n```", "```\nmap_roles:\n  workers_roles: \n    - \"{{ worker_iam_role_arn }}\"\n  system_masters:\n    - \"<ARN of the admin-role user>\"\nmap_users:\n  system_masters:\n    - arn: \"arn:aws:iam::AWS_ACCOUNT_NO:user/packtclusters-admin\"\n      name: \"packtclusters-admin\"\n```", "```\nnamespaces_list:\n- name: packtsclusters-namespace\n  owner: packtclusters-admin\n```", "```\n# ansible/tasks/auth/aws-auth.yaml\n- name: deploy aws auth ConfigMap\n  k8s:\n    definition: \"{{ item }}\"\n    kubeconfig: \"{{ k8s_kubeconfig }}\"\n    state: \"{{ k8s_manifests_state }}\"\n    force: \"{{ k8s_force }}\"\n  loop: \n    - \"{{ lookup('template', k8s_manifests_base_dir + 'auth/aws-auth.yaml') | from_yaml_all | list }}\"\n  register: k8s_result\n  until: k8s_result is success\n  retries: 3\n  delay: 2\n  no_log: \"{{ k8s_no_log }}\"  \n```", "```\n# ansible/tasks/namespaces.yaml\n- name: create cluster namespaces\n  k8s:\n    definition: \"{{ item }}\"\n    kubeconfig: \"{{ k8s_kubeconfig }}\"\n    state: \"{{ k8s_manifests_state }}\"\n    force: \"{{ k8s_force }}\"\n  loop: \"{{ lookup('template', k8s_manifests_base_dir + 'namespaces/namespaces.yaml') | from_yaml_all | list }}\"\n  register: k8s_result\n  until: k8s_result is success\n  retries: 3\n  delay: 2\n  no_log: \"{{ k8s_no_log }}\"\n```", "```\n# ansible/cluster.yaml\n---\n- name: deploy k8s add-ons\n  hosts: localhost\n  connection: local\n  gather_facts: no\n```", "```\n  vars:\n    Ansible_python_interpreter: \"{{ Ansible_playbook_python }}\"\n    k8s_kubeconfig: ~/.kube/config\n    k8s_manifests_base_dir: templates/\n    k8s_manifests_state: present\n    k8s_force: false\n    k8s_no_log: false\n```", "```\n  tasks:\n  - import_tasks: tasks/aws-auth.yaml\n    tags: aws-auth\n  - import_tasks: tasks/namespaces.yaml\n    tags: namespaces\n```", "```\n    $ cd terraform/packtclusters\n    $ terraform init\n    $ terraform workspace select prod1\n    ```", "```\n    $ aws eks --region $(terraform output aws_region) update-kubeconfig --name $(terraform output cluster_full_name)\n    ```", "```\n    $ virtualenv $HOME/ansible-k8s-workspace\n    $ source $HOME/ansible-k8s-workspace/bin/activate\n    ```", "```\n    $ pip install ansible==2.9 openshift pyyaml requests\n    ```", "```\n    $ ansible-playbook -i \\\n    ../../ansible/inventories/packtclusters/ \\\n    -e \"worker_iam_role_arn=$(terraform output worker_iam_role_arn)\" \\\n    ../../ansible/cluster.yaml\n    ```", "```\n    packtclusters-namespace:\n    ```"]
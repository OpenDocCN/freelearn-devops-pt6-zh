- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Troubleshooting Security and Networking
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 排查安全性和网络问题
- en: 'So far in this book, we have talked about Kubernetes architecture, the application
    life cycle, security, and networking. I hope that since this is the last chapter,
    we can follow on from [*Chapter 9*](B18201_09.xhtml#_idTextAnchor340), *Troubleshooting
    Cluster Components and Applications*, to talk about security and networking troubleshooting.
    This chapter provides the general troubleshooting approaches for troubleshooting
    errors caused by RBAC restrictions or networking settings. We have touched upon
    how to enable Kubernetes RBAC in [*Chapter 6*](B18201_06.xhtml#_idTextAnchor192),
    *Securing Kubernetes*, and upon working with Kubernetes DNS in [*Chapter 7*](B18201_07.xhtml#_idTextAnchor235),
    *Demystifying Kubernetes Networking*. Be sure to go back to these chapters and
    review the important concepts before diving into this chapter. We’re going to
    cover the following main topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经讨论了 Kubernetes 架构、应用生命周期、安全性和网络。希望本章作为最后一章，能够承接 [*第 9 章*](B18201_09.xhtml#_idTextAnchor340)，*排查集群组件和应用*，继续讨论安全性和网络排查。本章提供了针对
    RBAC 限制或网络设置引起的错误的通用排查方法。我们在 [*第 6 章*](B18201_06.xhtml#_idTextAnchor192)，*确保 Kubernetes
    安全性* 中讲解了如何启用 Kubernetes RBAC，在 [*第 7 章*](B18201_07.xhtml#_idTextAnchor235)，*解密
    Kubernetes 网络* 中讲解了 Kubernetes DNS 的工作原理。在深入本章之前，务必回顾这些章节中的重要概念。我们将在本章讨论以下主要内容：
- en: Troubleshooting RBAC failures
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 排查 RBAC 故障
- en: Troubleshooting networking
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 排查网络故障
- en: Technical requirements
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To get started, we need to make sure your local machine meets the following
    technical requirements.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始，我们需要确保你的本地机器符合以下技术要求。
- en: 'In case you’re on Linux, we’re demonstrating examples with a `minikube` cluster
    – check out [*Chapter 2*](B18201_02.xhtml#_idTextAnchor035), *Installing and Configuring
    Kubernetes Clusters*. Make sure that your test environment meets the following
    requirements:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 Linux，我们将演示使用 `minikube` 集群的示例——请查看 [*第 2 章*](B18201_02.xhtml#_idTextAnchor035)，*安装和配置
    Kubernetes 集群*。确保你的测试环境满足以下要求：
- en: A compatible Linux host. We recommend a Debian-based Linux distribution such
    as Ubuntu 18.04 or later.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个兼容的 Linux 主机。我们推荐使用基于 Debian 的 Linux 发行版，如 Ubuntu 18.04 或更高版本。
- en: Make sure that your host machine has at least 2 GB of RAM, 2 CPU cores, and
    about 20 GB of free disk space.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保你的主机至少有 2 GB 的内存、2 个 CPU 核心和约 20 GB 的空闲磁盘空间。
- en: 'In case you’re on Windows 10 or Windows 11, make note of the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 Windows 10 或 Windows 11，请注意以下事项：
- en: 'We recommend updating Docker Desktop to the latest version and creating a local
    `docker-desktop` Kubernetes cluster. Refer to this article to understand how to
    set up a local Kubernetes cluster with Docker Desktop: [https://docs.docker.com/desktop/kubernetes/.](https://docs.docker.com/desktop/kubernetes/%0D)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们推荐将 Docker Desktop 更新到最新版本，并创建一个本地 `docker-desktop` Kubernetes 集群。参考这篇文章了解如何使用
    Docker Desktop 设置本地 Kubernetes 集群：[https://docs.docker.com/desktop/kubernetes/.](https://docs.docker.com/desktop/kubernetes/%0D)
- en: We also recommend using **Windows Subsystem for Linux 2** (**WSL 2**) to test
    the environment – refer to this article to see how to install WSL 2 ([https://docs.microsoft.com/en-us/windows/wsl/install](https://docs.microsoft.com/en-us/windows/wsl/install))
    and the following article to see how to set up the Docker Desktop WSL 2 backend
    ([https://docs.docker.com/desktop/windows/wsl/](https://docs.docker.com/desktop/windows/wsl/)).
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还推荐使用**Windows Subsystem for Linux 2**（**WSL 2**）来测试环境——参考这篇文章了解如何安装 WSL 2（[https://docs.microsoft.com/en-us/windows/wsl/install](https://docs.microsoft.com/en-us/windows/wsl/install)）以及以下文章了解如何设置
    Docker Desktop WSL 2 后端（[https://docs.docker.com/desktop/windows/wsl/](https://docs.docker.com/desktop/windows/wsl/)）。
- en: Troubleshooting RBAC failures
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 排查 RBAC 故障
- en: Troubleshooting any issues related to Kubernetes security seems a bit contradictory.
    As a matter of fact, most of the security layers of Kubernetes involve working
    with tooling that helps secure the 4C layers of Kubernetes, which involves security
    scanning, managing, and protection. To learn more about the 4C layers, please
    refer to [*Chapter 6*](B18201_06.xhtml#_idTextAnchor192), *Securing Kubernetes*.
    When it comes to troubleshooting security, the CKA exam is most often about the
    Kubernetes RBAC issue. Therefore, we’ll focus on showing an example of troubleshooting
    RBAC failures in Kubernetes in this section.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 排除与 Kubernetes 安全相关的任何问题似乎有点矛盾。事实上，Kubernetes 的大多数安全层涉及使用工具来帮助保护 Kubernetes
    的 4C 层，这包括安全扫描、管理和保护。要了解更多关于 4C 层的信息，请参考 [*第 6 章*](B18201_06.xhtml#_idTextAnchor192)，*Kubernetes
    安全性*。当涉及到排除安全问题时，CKA 考试最常见的是关于 Kubernetes 的 RBAC 问题。因此，我们将在本节中重点展示如何排除 Kubernetes
    中 RBAC 失败的示例。
- en: Initiating a minikube cluster
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动 minikube 集群
- en: This part is not covered by the CKA exam, but you may encounter this if you’re
    trying to deploy the `minikube` cluster by yourself following the instructions
    in [*Chapter 2*](B18201_02.xhtml#_idTextAnchor035), *Installing and Configuring
    the Kubernetes Cluster*. You will need to apply what we discussed in that chapter
    of the book whenever you’re trying to install a new `minikube` cluster in a virgin
    Linux VM.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分不包含在 CKA 考试中，但如果你按照 [*第 2 章*](B18201_02.xhtml#_idTextAnchor035)，*安装与配置 Kubernetes
    集群* 中的说明自己部署`minikube`集群时，可能会遇到这个问题。每当你尝试在全新的 Linux 虚拟机上安装一个新的`minikube`集群时，你需要应用我们在该章节中讨论的内容。
- en: 'After you have installed the `minikube` tools, you can start to spin up your
    local cluster using the following command:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完`minikube`工具后，你可以使用以下命令启动本地集群：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You may see the following error in your output:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会在输出中看到以下错误：
- en: '![Figure 10.1 – The drivers are not healthy ](img/Figure_10.1_B18201.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.1 – 驱动程序不健康](img/Figure_10.1_B18201.jpg)'
- en: Figure 10.1 – The drivers are not healthy
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.1 – 驱动程序不健康
- en: 'Your first instinct is to choose the correct drive and use the `sudo` command,
    as in the following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你下意识地选择正确的驱动程序并使用 `sudo` 命令，如下所示：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As a result, you may see the following output:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 结果，你可能会看到以下输出：
- en: '![Figure 10.2 – The service account per namespace ](img/Figure_10.2_B18201.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.2 – 每个命名空间的服务账户](img/Figure_10.2_B18201.jpg)'
- en: Figure 10.2 – The service account per namespace
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.2 – 每个命名空间的服务账户
- en: 'The preceding output was because of the Docker root privileges issue. The best
    practice is to manage Docker as a non-root user to avoid this issue. In order
    to achieve this, we need to add a user to a group called `docker`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的输出是由于 Docker 根权限问题。最佳实践是以非 root 用户管理 Docker，以避免这个问题。为了实现这一点，我们需要将一个用户添加到名为`docker`的组中：
- en: 'Create the `docker` group:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`docker`组：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Add your user to the group called `docker`:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的用户添加到名为`docker`的组中：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'From here you need to log in again or restart the Docker server so that your
    group membership is re-evaluated. However, we should activate the changes to the
    group by using the following command when we’re on the Linux OS:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此，你需要重新登录或重启 Docker 服务器，以便重新评估你的组成员资格。然而，在 Linux 操作系统上，我们应该通过以下命令激活对组的更改：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The next time, when you log in, use the following command if you want Docker
    to start on boot:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下次登录时，如果你希望 Docker 在启动时自动启动，可以使用以下命令：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After the preceding steps, you should be able to start `minikube` with the
    Docker driver by using the following command:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成上述步骤后，你应该能够通过以下命令使用 Docker 驱动程序启动`minikube`：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The preceding `minikube start` command has created a `minikube` cluster successfully
    if you are able to see an output similar to the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你能够看到类似以下的输出，说明之前的`minikube start`命令已经成功创建了`minikube`集群：
- en: '![Figure 10.3 – Starting the minikube cluster successfully ](img/Figure_10.3_B18201.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.3 – 成功启动 minikube 集群](img/Figure_10.3_B18201.jpg)'
- en: Figure 10.3 – Starting the minikube cluster successfully
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.3 – 成功启动 minikube 集群
- en: Although this section is not covered in the CKA exam, it’s highly recommended
    to get familiar with it in case you’re stuck when creating a `minikube` cluster.
    Once you get your `minikube` cluster up and running, we can get into managing
    a `minikube` cluster and troubleshooting RBAC as needed.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这一部分不包括在 CKA 考试中，但强烈建议熟悉它，以防在创建`minikube`集群时遇到问题。一旦你的`minikube`集群成功启动，我们就可以进入管理`minikube`集群并根据需要排除
    RBAC 问题。
- en: Managing a minikube cluster
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理 minikube 集群
- en: 'When it comes to managing a `minikube` cluster, we learned in [*Chapter 6*](B18201_06.xhtml#_idTextAnchor192),
    *Securing Kubernetes*, that we need to set `apiserver --authorization-mode` to
    `RBAC` in order to enable Kubernetes RBAC, as shown in the following example:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到管理`minikube`集群时，我们在[*第六章*](B18201_06.xhtml#_idTextAnchor192)《确保Kubernetes安全》中了解到，我们需要将`apiserver
    --authorization-mode`设置为`RBAC`，以启用Kubernetes RBAC，示例如下：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Make sure that our current context uses our default `minikube` and then use
    the following commands to create a new deployment in a specific namespace:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 确保我们的当前上下文使用的是默认的`minikube`，然后使用以下命令在特定命名空间中创建一个新的部署：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The preceding two commands create a namespace called `app`, and a new deployment
    called `rbac-nginx` within the `app` namespace.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 上述两个命令创建了一个名为`app`的命名空间，并在该命名空间中创建了一个名为`rbac-nginx`的新部署。
- en: 'Let’s define a new role called `rbac-user` in a namespace called `app` by using
    the following command:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下命令在名为`app`的命名空间中定义一个新的角色`rbac-user`：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We then need to create rolebinding to bind this role to the subjects, as is
    shown in the following command:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们需要创建角色绑定，将这个角色绑定到相关对象，如下所示命令所示：
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'As `rbac-user` only has to list and get permissions for pods, let’s try to
    use this profile for user impersonation to delete the deployment:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`rbac-user`仅具备列出和获取Pod的权限，让我们尝试使用这个配置文件进行用户模拟，以删除该部署：
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The output should look as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '[PRE12]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You can learn more about user impersonation from the official documentation
    here: [https://kubernetes.io/docs/reference/access-authn-authz/authentication/#user-impersonation](https://kubernetes.io/docs/reference/access-authn-authz/authentication/#user-impersonation)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从官方文档中了解更多关于用户模拟的信息：[https://kubernetes.io/docs/reference/access-authn-authz/authentication/#user-impersonation](https://kubernetes.io/docs/reference/access-authn-authz/authentication/#user-impersonation)
- en: 'To resolve the issue, we could update the role for `rbac-user` in the YAML
    definition, as in the following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们可以在YAML定义中更新`rbac-user`的角色，如下所示：
- en: '[PRE13]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We could use the `kubectl auth reconcile` command to create or update a YAML
    manifest file containing RBAC objects. Check the official documentation for more
    information ([https://kubernetes.io/docs/reference/access-authn-authz/rbac/#kubectl-auth-reconcile](https://kubernetes.io/docs/reference/access-authn-authz/rbac/#kubectl-auth-reconcile)):'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`kubectl auth reconcile`命令来创建或更新包含RBAC对象的YAML清单文件。更多信息请查阅官方文档（[https://kubernetes.io/docs/reference/access-authn-authz/rbac/#kubectl-auth-reconcile](https://kubernetes.io/docs/reference/access-authn-authz/rbac/#kubectl-auth-reconcile)）：
- en: '[PRE14]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The RBAC issue applies in the use case where different dev teams are sharing
    the cluster resources – as a Kubernetes administrator, you’re likely to access
    the cluster with full permission. Understanding this part will help you better
    govern the permissions among the dev team members for a better standard of security
    and compliance.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: RBAC问题出现在不同开发团队共享集群资源的使用场景中——作为Kubernetes管理员，你很可能以完全权限访问集群。了解这部分内容将帮助你更好地管理开发团队成员之间的权限，从而提高安全性和合规性的标准。
- en: Troubleshooting networking
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 排查网络问题
- en: In [*Chapter 7*](B18201_07.xhtml#_idTextAnchor235), *Demystifying Kubernetes
    Networking*, we learned that the Kubernetes DNS server creates DNS records (A/AAAA,
    SRV, and PTR records) for services and pods in Kubernetes. Those efforts allow
    you to contact Services with consistent DNS names in place of the IP addresses.
    The Kubernetes DNS server does this by scheduling a few copies of DNS pods and
    services on the Kubernetes cluster.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第七章*](B18201_07.xhtml#_idTextAnchor235)《解密Kubernetes网络》中，我们了解到Kubernetes
    DNS服务器为Kubernetes中的服务和Pod创建DNS记录（A/AAAA、SRV和PTR记录）。这些操作使你能够使用一致的DNS名称而不是IP地址来访问服务。Kubernetes
    DNS服务器通过在Kubernetes集群中调度多个DNS Pod和服务副本来实现这一点。
- en: In the following section, let’s talk about how to troubleshoot the Kubernetes
    DNS service.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将讨论如何排查Kubernetes DNS服务的问题。
- en: Troubleshooting a Kubernetes DNS server
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 排查Kubernetes DNS服务器的问题
- en: 'To troubleshoot the networking of Kubernetes, we start by checking the status
    of the DNS server. Using `minikube` as a local cluster this time, we use the following
    command to check whether the DNS server is up and running on your cluster:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为了排查Kubernetes的网络问题，我们首先检查DNS服务器的状态。使用`minikube`作为本地集群时，我们使用以下命令检查DNS服务器是否在你的集群中运行：
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The output should be similar to the following:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应类似于以下内容：
- en: '[PRE16]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: From the preceding output, we can see that the CoreDNS is up and running in
    our current `minikube` cluster. We can also do this by using the `kubectl get
    deploy core-dns -n kube-system` command.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: 'To get further details, we check out the CoreDNS deployment settings by using
    the `kubectl describe` command, as in the following:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The output is as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.4 – The minikube CoreDNS configurations ](img/Figure_10.4_B18201.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
- en: Figure 10.4 – The minikube CoreDNS configurations
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: 'As we said, the Kubernetes DNS service creates DNS records for services, so
    you contact services with a consistent DNS fully qualified hostnames instead of
    IP addresses. As it is located in the `kube-system` namespace, we can check it
    out by using the following command for our `minikube` cluster:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The output is as follows, which gives us the cluster IP of `kube-dns`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'To troubleshoot issues with the DNS server, we can use the `kubectl logs` command:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The preceding `kubectl logs` command shows the logs for a `coredns` pod named
    `coredns-64897985d-brqfl` and the output is similar to the following:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.5 – The minikube CoreDNS logs ](img/Figure_10.5_B18201.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
- en: Figure 10.5 – The minikube CoreDNS logs
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: The output shows whether the DNS server is up or not, and will log abnormal
    events if any exist. Once we know that the DNS server is up, we can take a look
    at how to troubleshoot the services deployed in the Kubernetes cluster in the
    following section.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting a service in Kubernetes
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To troubleshoot a service, let’s first deploy a new deployment called `svc-nginx`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The following output shows that it has been created successfully:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Let’s now take a look at exposing a service for the `svc-nginx` deployment.
    We’re using the following command to expose the `NodePort` service of the `nginx`
    pod on port `80`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The following output shows that it has been exposed successfully:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'As we learned from [*Chapter 7*](B18201_07.xhtml#_idTextAnchor235), *Demystifying
    Kubernetes Networking*, we know that we can expect the `nginx-svc` service to
    follow the general service DNS name pattern, which would be as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now, let’s take a look at the services currently in the `app` namespace of
    our Kubernetes cluster by using the following command:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We can see an output similar to the following:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.6 – A nginx-svc service in the Kubernetes app namespace  ](img/Figure_10.6_B18201.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
- en: Figure 10.6 – A nginx-svc service in the Kubernetes app namespace
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: 'From the preceding output, we can get a closer look at `nginx-svc` by using
    the following command:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The output of the preceding command is the following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.7 – A closer look at the nginx-svc service ](img/Figure_10.7_B18201.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
- en: Figure 10.7 – A closer look at the nginx-svc service
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding command shows that the IP address of the `nginx-svc` service
    is `10.101.34.154`, so let’s use the `nslookup` command to check out its DNS name:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Important Note
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: The preceding command creates a `busybox` pod in the default namespace. As by
    default, pods in the Kubernetes cluster can talk to each other, we could use a
    `sandbox` pod to test the connectivity to a different namespace.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding command will give you the following output:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.8 – Returning back the DNS name for nginx-svc  ](img/Figure_10.8_B18201.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
- en: Figure 10.8 – Returning back the DNS name for nginx-svc
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to test the connectivity by using a pod in the same namespace as
    `nginx-svc`, use the following command:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Based on the preceding output, we can see the DNS name for `nginx-svc` is `nginx-svc.app.svc.cluster.local`.
    Now, let’s get the DNS record of the `nginx-svc` service from the `app` namespace
    using the following command:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'You’ll see that the output is similar to the following:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now, let’s test out the connectivity of the `nginx-svc` service. We can use
    the `nginx-beta` deployment to see what’s coming back using `curl`. The complete
    command is as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The output is as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.9 – Returning the nginx main page  ](img/Figure_10.9_B18201.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
- en: Figure 10.9 – Returning the nginx main page
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: The preceding screenshot with 200 responses proves that the connectivity between
    the `nginx-beta` pod and the `nginx-svc` Service is OK, and that we managed to
    use `curl` on the main page of `nginx` with the DNS name of the `nginx` service.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: The approach that we discussed in this section works well when we want to quickly
    test the connectivity within the same namespace or to a different namespace. The
    latter would also work in a scenario where the network policy is deployed to restrict
    the connectivity between pods in different namespaces. Now, in the following section,
    let’s take a look at how to get a shell to debug the Kubernetes networking in
    case we need a longer session.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: Get a shell for troubleshooting
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Given the same scenario with the `svc-nginx` deployment in the `app` namespace,
    now let’s use the interactive shell to troubleshoot the networking.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: 'After we find the IP address of `nginx-svc`, `10.101.34.154`, let’s use the
    `nslookup` command to check out its DNS name – use the following command:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We’re now getting into the interactive shell:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'In this interactive shell, we log in as root, and we can use `nslookup` or
    another valid command to troubleshoot the networking:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The output is as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.10 – An interactive shell in BusyBox ](img/Figure_10.10_B18201.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
- en: Figure 10.10 – An interactive shell in BusyBox
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: 'There’s a handful of commands available in BusyBox, though `curl` isn’t one
    of them. So, let’s now get an `nginx` image with `curl` available. To know what
    the shell commands available in BusyBox are, refer to the following page: [https://hub.docker.com/_/busybox](https://hub.docker.com/_/busybox).'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use the following command to get to the interactive shell of the `nginx`
    pod and find the `nginx` pod:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Then, it will come back with the full name of the pod that the `svc-nginx`
    deployment created:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Let’s use the `kubectl exec` command to get the interactive shell:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 `kubectl exec` 命令获取交互式 shell：
- en: '[PRE38]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The preceding command will get you the interactive shell access, and then we
    can use the same `curl` command to test the connectivity:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将为您获取交互式 shell 访问权限，然后我们可以使用相同的 `curl` 命令测试连通性：
- en: '[PRE39]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'This technique comes in extremely handy in a case where a pod has one or more
    containers. Refer to this article to get more tips: [https://kubernetes.io/docs/tasks/debug/debug-application/get-shell-running-container/](https://kubernetes.io/docs/tasks/debug/debug-application/get-shell-running-container/).'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这项技术在 pod 包含一个或多个容器的情况下非常有用。参考本文获取更多提示：[https://kubernetes.io/docs/tasks/debug/debug-application/get-shell-running-container/](https://kubernetes.io/docs/tasks/debug/debug-application/get-shell-running-container/)。
- en: In this section, we have covered troubleshooting networking – the commands presented
    in this section are references that you can leverage in your real-life debugging
    session. Go back and practice a few times, make sure you get a proper understanding,
    and it will pay off.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们涵盖了网络故障排除 – 本节中介绍的命令是您在实际调试会话中可以利用的参考资料。回去练习几次，确保您得到适当的理解，它将会带来回报。
- en: Summary
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter has covered the approaches and use cases for Kubernetes RBAC and
    networking troubleshooting. Together with [*Chapter 8*](B18201_08.xhtml#_idTextAnchor293),
    *Monitoring and Logging Kubernetes Clusters and Applications*, and [*Chapter 9*](B18201_09.xhtml#_idTextAnchor340)*,
    Troubleshooting Cluster Components and Applications*, that covers 30% of the CKA
    content.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 本章已经涵盖了 Kubernetes RBAC 和网络故障排除的方法和用例。与 [*第 8 章*](B18201_08.xhtml#_idTextAnchor293)，*监控和日志记录
    Kubernetes 集群和应用*，以及 [*第 9 章*](B18201_09.xhtml#_idTextAnchor340)*，故障排除集群组件和应用程序*
    一起，覆盖了 CKA 内容的 30%。
- en: To get the most out of this chapter, go back and refer to [*Chapter 6*](B18201_06.xhtml#_idTextAnchor192),
    *Securing Kubernetes*, especially the section on how to enable Kubernetes RBAC,
    and to [*Chapter 7*](B18201_07.xhtml#_idTextAnchor235), *Demystifying Kubernetes*,
    to refresh how to work with Kubernetes DNS. Knowing how to work with Kubernetes
    DNS will help you lay the foundations for understanding other important concepts.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 要充分利用本章，回头参考 [*第 6 章*](B18201_06.xhtml#_idTextAnchor192)，*保护 Kubernetes*，特别是关于如何启用
    Kubernetes RBAC 的部分，以及 [*第 7 章*](B18201_07.xhtml#_idTextAnchor235)，*揭秘 Kubernetes*，以更新如何处理
    Kubernetes DNS 的部分。了解如何处理 Kubernetes DNS 将帮助您奠定理解其他重要概念的基础。
- en: Make sure that you check out the *FAQs* section in all the chapters for further
    references, as well as reading all the recommended documentation and articles.
    A good understanding of these materials will help you become more confident in
    your daily job as a Kubernetes administrator.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您查看所有章节中关于 *常见问题解答* 部分的参考资料，以及阅读所有推荐的文档和文章。对这些材料的良好理解将有助于您在日常工作中作为 Kubernetes
    管理员更加自信。
- en: Let’s stay tuned!
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们保持关注！
- en: FAQs
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见问题解答
- en: '*Where can I find a comprehensive guide to troubleshooting the Kubernetes services?*'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*我在哪里可以找到详细的 Kubernetes 服务故障排除指南？*'
- en: 'You can find the updated documentation within the official Kubernetes documentation:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在官方 Kubernetes 文档中找到更新后的文档：
- en: '[https://kubernetes.io/docs/tasks/debug/debug-application/debug-service/](https://kubernetes.io/docs/tasks/debug/debug-application/debug-service/)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://kubernetes.io/docs/tasks/debug/debug-application/debug-service/](https://kubernetes.io/docs/tasks/debug/debug-application/debug-service/)'
- en: Also highly recommended is focusing on this chapter together with [*Chapter
    9*](B18201_09.xhtml#_idTextAnchor340), *Troubleshooting Cluster Components and
    Applications*, as a complementary resource. This will help you gather a full view
    of the Kubernetes troubleshooting story.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 同时强烈建议集中精力研究本章与 [*第 9 章*](B18201_09.xhtml#_idTextAnchor340)，*故障排除集群组件和应用*，作为一个补充资源。这将帮助您全面了解
    Kubernetes 故障排除的故事。
- en: '*Where can I find a comprehensive guide to Kubernetes networking?*'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*我在哪里可以找到详细的 Kubernetes 网络故障排除指南？*'
- en: '[*Chapter 7*](B18201_07.xhtml#_idTextAnchor235) of this book, *Demystifying
    Kubernetes Networking*, touches upon most of the Kubernetes networking concepts,
    as well as troubleshooting examples – together with this chapter, this will help
    you work confidently on questions that could appear in the actual CKA exam. You
    can also bookmark the following article from the official Kubernetes documentation:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的 [*第 7 章*](B18201_07.xhtml#_idTextAnchor235)，*揭秘 Kubernetes 网络*，涵盖了大部分 Kubernetes
    网络概念，以及故障排除示例 – 与本章一起，这将帮助您对可能出现在实际 CKA 考试中的问题更加自信。您还可以收藏官方 Kubernetes 文档中的以下文章：
- en: '[https://kubernetes.io/docs/concepts/cluster-administration/networking/](https://kubernetes.io/docs/concepts/cluster-administration/networking/)'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://kubernetes.io/docs/concepts/cluster-administration/networking/](https://kubernetes.io/docs/concepts/cluster-administration/networking/)'
- en: Appendix - Mock CKA scenario-based practice test resolutions
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 - 模拟 CKA 场景练习测试解决方案
- en: '[*Chapter 2*](B18201_02.xhtml#_idTextAnchor035) – Installing and Configuring
    Kubernetes Clusters'
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[*第 2 章*](B18201_02.xhtml#_idTextAnchor035) – 安装和配置 Kubernetes 集群'
- en: 'You have two virtual machines: `master-0` and `worker-0`. Please complete the
    following mock scenarios.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 你有两台虚拟机：`master-0`和`worker-0`。请完成以下模拟场景。
- en: '**Scenario 1**'
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**场景 1**'
- en: Install the latest version of `kubeadm` , then create a basic kubeadm cluster
    on the `master-0` node, and get the node information.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 安装最新版本的`kubeadm`，然后在`master-0`节点上创建一个基本的 kubeadm 集群，并获取节点信息。
- en: 'Update the `apt package index`, add a Google Cloud public signing key, and
    set up the Kubernetes apt repository by running the following instructions:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`apt 软件包索引`，添加 Google Cloud 公共签名密钥，并通过执行以下指令设置 Kubernetes apt 仓库：
- en: '[PRE40]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Start by updating the apt package index, then install `kubelet` and `kubeadm`:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先更新 apt 软件包索引，然后安装`kubelet`和`kubeadm`：
- en: '[PRE41]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'At this point, if you haven’t installed `kubectl` yet, you can also install
    `kubelet`, `kubeadm`, and `kubectl` in one go:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此时，如果你还没有安装`kubectl`，你也可以一并安装`kubelet`、`kubeadm`和`kubectl`：
- en: '[PRE42]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Use the following command to pin the version of the utilities you’re installing:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令固定你正在安装的工具版本：
- en: '[PRE43]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'You can use the `kubeadm init` command to initialize the control-plane like
    a regular user, and gain sudo privileges from your master node machine by using
    the following command:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以使用`kubeadm init`命令以普通用户身份初始化控制平面，并通过以下命令从你的 master 节点机器获取 sudo 权限：
- en: '[PRE44]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'After your Kubernetes control-plane is initialized successfully, you can execute
    the following commands to configure `kubectl`:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Kubernetes 控制平面初始化成功后，你可以执行以下命令来配置`kubectl`：
- en: '[PRE45]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '**Scenario 2**'
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**场景 2**'
- en: SSH to `worker-0` and join it to the `master-0` node.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: SSH 登录到`worker-0`，并将其加入到`master-0`节点。
- en: 'You can use the following command to join the worker nodes to the Kubernetes
    cluster. This command can be used repeatedly each time you have new worker nodes
    to join with the token that you acquired from the output of the `kubeadm` control-plane:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下命令将工作节点加入到 Kubernetes 集群中。每次你有新的工作节点需要加入时，都可以使用这个命令，并使用从`kubeadm`控制平面输出中获取的
    token：
- en: '[PRE46]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '**Scenario 3 (optional)**'
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**场景 3（可选）**'
- en: Set up a local minikube cluster, and schedule your first workload called `hello
    Packt`.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 设置一个本地 minikube 集群，并调度一个名为`hello Packt`的工作负载。
- en: Note
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 注意事项
- en: Check out the *Installing and configuring Kubernetes cluster* section in [*Chapter
    2*](B18201_02.xhtml#_idTextAnchor035), to set up a single node minikube cluster.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [*第 2 章*](B18201_02.xhtml#_idTextAnchor035)中的*安装和配置 Kubernetes 集群*部分，以设置单节点
    minikube 集群。
- en: 'Let’s quickly run an app on the cluster called `helloPackt` using `busybox`:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`busybox`在集群中快速运行一个名为`helloPackt`的应用：
- en: '[PRE47]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[*Chapter 3*](B18201_03.xhtml#_idTextAnchor059) – Maintaining Kubernetes Clusters'
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[*第 3 章*](B18201_03.xhtml#_idTextAnchor059) – 维护 Kubernetes 集群'
- en: 'You have two virtual machines: `master-0` and `worker-0`. Please complete the
    following mock scenarios.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 你有两台虚拟机：`master-0`和`worker-0`。请完成以下模拟场景。
- en: '**Scenario 1**'
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**场景 1**'
- en: SSH to the `master-0` node, check the current `kubeadm` version, and upgrade
    to the latest `kubeadm` version. Check the current `kubectl` version, and upgrade
    to the latest `kubectl` version.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: SSH 登录到`master-0`节点，检查当前`kubeadm`版本，并升级到最新的`kubeadm`版本。检查当前`kubectl`版本，并升级到最新的`kubectl`版本。
- en: 'Start by checking the current version with the following commands once we’re
    in the master node:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在进入 master 节点后，通过以下命令首先检查当前版本：
- en: '[PRE48]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Check out the latest available versions:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 查看最新可用版本：
- en: '[PRE49]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Upgrade the `kubeadm` using the following command:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令升级`kubeadm`：
- en: '[PRE50]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Check if your cluster can be upgraded, and the available versions that your
    cluster can be upgraded to by using the following command:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令检查你的集群是否可以升级，以及集群可以升级到的可用版本：
- en: '[PRE51]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Use the following command to upgrade the `kubeadm`:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令升级`kubeadm`：
- en: '[PRE52]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '**Scenario 2**'
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**场景 2**'
- en: SSH to `worker-0` node, check the current `kubeadm` version, and upgrade to
    the latest `kubeadm` version. Check the current `kubelet` version, and upgrade
    to the latest `kubelet` version.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: SSH 登录到`worker-0`节点，检查当前`kubeadm`版本，并升级到最新的`kubeadm`版本。检查当前`kubelet`版本，并升级到最新的`kubelet`版本。
- en: 'Start by checking the current version with the following commands once we’re
    in the master node:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Check what the latest versions available are:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Upgrade the `kubelet` (which also upgrades the local `kubelet` configuration)
    with the following command:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Cordon the node so that we drain the workloads of preparing the node for maintenance
    using the following command:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Upgrade the `kubeadm` by using the following command:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Check if your cluster can be upgraded and the available versions that your
    cluster can be upgraded to by using the following command:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Use the following command to upgrade the `kubeadm`:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Restart the `kubelet` for the changes to take effect:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Finally, we can uncordon the worker node and it will return the node that is
    now shown as `uncordoned`:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '**Scenario 3**'
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SSH to the `master-0` node, and backup the `etcd` store.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following command to check the endpoint status:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Use the following command to backup `etcd`:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '**Scenario 4**'
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SSH to the `master-0` node, and restore the `etcd` store to the previous backup.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: 'Restore the `etcd` from a previous backup operation using the following command:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[*Chapter 4*](B18201_04.xhtml#_idTextAnchor080) – Application scheduling and
    lifecycle management'
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You have two virtual machines: `master-0` and `worker-0`, please complete the
    following mock scenarios.'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: Scenario 1
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SSH to the `worker-0` node, and provision a new pod called `ngnix` with a single
    container nginx.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following command:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Scenario 2
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SSH to `worker-0`, and then scale the `nginx` to 5 copies.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following command:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Scenario 3
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SSH to `worker-0`, set a `configMap` with a username and password, then attach
    a new pod with a busybox.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a yaml definition called `packt-cm.yaml` to define `ConfigMap` as the
    following:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Use the following command to deploy the yaml manifest:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Verify the `configMap` by using the following command:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Once you have `configMap` ready, create a yaml definition file to config the
    pod to consume the `configMap` as the following:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Use the following command to verify the `configMap` value:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Scenario 4
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SSH to `worker-0`, and create a nginx pod with an `initContainer` called `busybox`.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a yaml definition called `packt-pod.yaml` shown as follows:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Use the following command to deploy the yaml manifest:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Scenario 5
  id: totrans-261
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SSH to `worker-0`, and create a nginx pod and then a busybox container in the
    same pod.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a yaml definition called `packt-pod.yaml` shown as follows:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Use the following command to deploy the yaml manifest:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[*Chapter 5*](B18201_05.xhtml#_idTextAnchor149) – Demystifying Kubernetes Storage'
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You have two virtual machines: `master-0` and `worker-0`. Please complete the
    following mock scenarios.'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: Scenario 1
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new PV called `packt-data-pv` with a storage of 2GB, and two persistent
    volume claims (PVCs) requiring 1GB local storage each.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a yaml definition called `packt-data-pv.yaml` for persistent volume
    as the following:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Use the following command to deploy the yaml manifest:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Create a yaml definition called `packt-data-pvc1.yaml` for persistent volume
    claim as the following:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Create a yaml definition called `packt-data-pvc2.yaml` for persistent volume
    claim as the following:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Use the following command to deploy the yaml manifest:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Scenario 2
  id: totrans-281
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Provision a new pod called `packt-storage-pod`, and assign an available PV to
    this pod.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a yaml definition called `packt-data-pod.yaml` shown as follows:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Use the following command to deploy the yaml manifest:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Use the following command to see if the pod is up and running:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[*Chapter 6*](B18201_06.xhtml#_idTextAnchor192) – Securing Kubernetes'
  id: totrans-289
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You have two virtual machines: `master-0` and `worker-0`, please complete the
    following mock scenarios.'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: Scenario 1
  id: totrans-291
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new service account named `packt-sa` in a new namespace called `packt-ns`.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following command to create a new service account in the targeting
    namespace:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Scenario 2
  id: totrans-295
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a Role named `packt-role` and bind it with the RoleBinding `packt-rolebinding`.
    Map the `packt-sa` service account with `list` and `get` permissions.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following command to create a cluster role in the targeting namespace:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Use the following command to create a Role binding in the targeting namespace:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'To achieve the same result, you can create a yamldefinition called `packt-role.yaml`:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Create another yaml definition called `packt-pods-binding.yaml`:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'Use the following command to deploy the yaml manifest:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Verify the Role using the following command:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'Verify the rolebindings by using the following command:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Scenario 3
  id: totrans-311
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new pod named packt-pod with the `image busybox:1.28` in the namespace
    packt-ns. Expose port `80`. Then assign the service account `packt-sa` to the
    pod.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following command to create a deployment:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Export the deployment information in yaml specification form:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'Edit the yaml specification to reference the service account:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: Check out the *Implementing Kubernetes RBAC* section in [*Chapter 6*](B18201_06.xhtml#_idTextAnchor192)*,
    Securing Kubernetes* to get further information about how to implement RBAC.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B18201_07.xhtml#_idTextAnchor235) – Demystifying Kubernetes networking'
  id: totrans-320
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You have two virtual machines: `master-0` and `worker-0`. Please complete the
    following mock scenarios.'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: Scenario 1
  id: totrans-322
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Deploy a new deployment nginx with the latest image of nginx for 2 replicas,
    in a namespace called `packt-app`. The container is exposed on port `80`. Create
    a service type ClusterIP within the same namespace. Deploy a sandbox-nginx pod
    and make a call using `curl` to verify the connectivity to the nginx service.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following command to create nginx deployment in the targeting namespace:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'Use the following command to expose nginx deployment with a ClusterIP service
    in the targeting namespace:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'Use the following command to get the internal IP:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'Use the following command to get the endpoint:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'Use the following command to deploy a `sandbox-nginx` pod in the targeting
    namespace using your endpoint:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: Scenario 2
  id: totrans-334
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Expose the nginx deployment with the NodePort service type; the container is
    exposed on port `80`. Use the test-nginx pod to make a call using `curl` to verify
    the connectivity to the nginx service.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following command to create nginx deployment in the targeting namespace:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'Use the following command to get the internal IP:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'Use the following command to get the endpoint:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'Use the following command to deploy a test-nginx pod in the targeting namespace
    using your endpoint:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Scenario 3
  id: totrans-344
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make a call using `wget` or `curl` from the machine within the same network
    with that node, to verify the connectivity with the nginx NodePort service through
    the correct port.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: 'Call from `worker-2` using the following command:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'Alternatively, we can use `wget` as the following command:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: Scenario 4
  id: totrans-350
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the sandbox-nginx pod to `nslookup` the IP address of nginx NodePort service.
    See what is returned.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following command:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: Scenario 5
  id: totrans-354
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the sandbox-nginx pod to `nslookup` the DNS domain hostname of nginx NodePort
    service. See what is returned.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following command:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: Scenario 6
  id: totrans-358
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the sandbox-nginx pod to `nslookup` the DNS domain hostname of nginx pod.
    See what is returned.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following command:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[*Chapter 8*](B18201_08.xhtml#_idTextAnchor293) – Monitoring and logging Kubernetes
    Clusters and Applications'
  id: totrans-362
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You have two virtual machines: `master-0` and `worker-0`. Please complete the
    following mock scenarios.'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: Scenario 1
  id: totrans-364
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: List all the available pods in your current cluster and find what the most CPU-consuming
    pods are. Write the name to the `max-cpu.txt` file.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following command:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'

- en: '16'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '16'
- en: Diving into the Future
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 展望未来
- en: According to a recent CNCF survey report ([https://www.cncf.io/reports/cncf-annual-survey-2021/](https://www.cncf.io/reports/cncf-annual-survey-2021/)),
    96% of enterprises use or are considering utilizing Kubernetes. Containers in
    general, and Kubernetes in particular, appear to be used less as the technology
    matures. Organizations appear to be employing serverless and managed services
    more intensely than in the past, and users no longer need to know about or understand
    the underlying container technology.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 根据最近的 CNCF 调查报告（[https://www.cncf.io/reports/cncf-annual-survey-2021/](https://www.cncf.io/reports/cncf-annual-survey-2021/)），96%
    的企业正在使用或考虑使用 Kubernetes。一般来说，容器技术，尤其是 Kubernetes，似乎随着技术的成熟而使用频率降低。组织似乎比以往更 intensively
    使用无服务器和托管服务，且用户不再需要了解或理解底层的容器技术。
- en: The industry has seen an exponential increase in the use of cloud-native technology
    over recent years. Modernizing applications with Kubernetes and containers has
    been a common theme for many businesses. The de facto DevOps standard for established
    businesses and start-ups is **continuous integration/continuous deployment** (**CI/CD**)
    based on containers. The ideal platform for executing workloads at the edge is
    Kubernetes. Additionally, it has evolved into a hybrid computing platform that
    enables public cloud providers to operate their managed services in clusters set
    up in on-premises settings.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，随着云原生技术的广泛应用，行业中出现了指数级增长。使用 Kubernetes 和容器对应用程序进行现代化已经成为许多企业的共同主题。对于成熟企业和初创公司而言，基于容器的**持续集成/持续部署**（**CI/CD**）已成为事实上的
    DevOps 标准。Kubernetes 是执行边缘计算工作负载的理想平台。此外，Kubernetes 已发展为一个混合计算平台，允许公共云服务提供商在本地环境中设置的集群中运营其托管服务。
- en: Edge-based infrastructure presents a myriad of challenges in terms of managing
    resources and workloads. In a shorter period of time, thousands of edge nodes
    and remote edge nodes would need to be controlled. The edge architecture of organizations
    is made to offer more centralized independence from the cloud, high-security requirements,
    and minimal latency.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 基于边缘的基础设施在资源和工作负载管理方面面临诸多挑战。在较短的时间内，成千上万的边缘节点和远程边缘节点需要被控制。组织的边缘架构旨在提供更多的云独立性、高安全性要求和最低延迟。
- en: 'Throughout this book, we have covered the following implementation aspects
    that address IoT/Edge computing scenarios using MicroK8s:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中，我们已覆盖了以下实施方面，解决了使用 MicroK8s 的 IoT/边缘计算场景：
- en: Getting your Kubernetes cluster up and running
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动并运行 Kubernetes 集群
- en: Enabling core Kubernetes add-ons such as DNS and dashboards
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用核心的 Kubernetes 插件，如 DNS 和仪表盘
- en: Creating, scaling, and performing rolling updates on multi-node Kubernetes clusters
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建、扩展并执行多节点 Kubernetes 集群的滚动更新
- en: Working with various container networking options for networking – Calico/Flannel/Cilium
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用各种容器网络选项进行网络配置——Calico/Flannel/Cilium
- en: Setting up MetalLB, and Ingress options for load balancing
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 MetalLB 和 Ingress 选项以进行负载均衡
- en: Using OpenEBS storage replication for stateful applications
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 OpenEBS 存储复制进行有状态应用程序的管理
- en: Configuring Kubeflow and running AI/ML use cases
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 Kubeflow 并运行 AI/ML 用例
- en: Configuring service mesh integration with Istio/Linkerd
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置与 Istio/Linkerd 的服务网格集成
- en: Running serverless applications using Knative and OpenFaaS
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Knative 和 OpenFaaS 运行无服务器应用程序
- en: Configuring logging/monitoring options (Prometheus, Grafana, Elastic, Fluentd,
    and Kibana)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置日志记录/监控选项（Prometheus、Grafana、Elastic、Fluentd 和 Kibana）
- en: Configuring multi-node highly available Kubernetes clusters
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置多节点高可用的 Kubernetes 集群
- en: Configuring Kata Containers for secured containers
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 Kata 容器以实现安全容器
- en: Configuring strict confinement for running in isolation
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置严格的隔离运行环境
- en: Furthermore, we discussed the guidelines and best practices for designing and
    effectively implementing Kubernetes for your edge workloads in each chapter.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在每一章节中，我们还讨论了设计和有效实施 Kubernetes 用于边缘工作负载的指南和最佳实践。
- en: The importance of Kubernetes, the edge, and the cloud collaborating to drive
    sensible business decisions is becoming more and more evident as firms embrace
    digital transformation, Industry 4.0, industrial automation, smart manufacturing,
    and other advanced use cases.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 随着企业拥抱数字化转型、工业 4.0、工业自动化、智能制造及其他先进用例，Kubernetes、边缘计算与云计算的协同作用，推动理性商业决策的重要性变得越来越明显。
- en: 'Businesses that are transitioning to become digital-first enterprises increasingly
    rely on Kubernetes. Kubernetes is clearly the preferred platform for Edge computing,
    at least for those edges that require dynamic orchestration for apps and centralized
    administration of workloads. By enabling flexible and automated administration
    of applications over a disaggregated cloud environment, Kubernetes extends the
    advantages of cloud-native computing software development to the edge. In this
    final chapter, we’re going to cover the following main topics:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 正在转型为数字优先企业的企业越来越依赖 Kubernetes。Kubernetes 显然是边缘计算的首选平台，至少对于那些需要动态编排应用程序和集中管理工作负载的边缘设备来说。通过在解耦的云环境中实现灵活和自动化的应用管理，Kubernetes
    将云原生计算软件开发的优势扩展到边缘。在本章的最后，我们将讨论以下主要主题：
- en: How MicroK8s is uniquely positioned for accelerating IoT and Edge deployments
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MicroK8s 如何在加速 IoT 和边缘部署方面具有独特的优势
- en: Looking forward – Kubernetes trends and industry outlook
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 展望未来 – Kubernetes 趋势与行业前景
- en: How MicroK8s is uniquely positioned for accelerating IoT and Edge deployments
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MicroK8s 如何在加速 IoT 和边缘部署方面具有独特的优势
- en: 'Edge gateways must efficiently utilize computational resources while dealing
    with a variety of protocols, including Bluetooth, Wi-Fi, 3G, 4G, and 5G. It is
    challenging to operate Kubernetes directly on edge servers because edge gateways
    have constrained computational capabilities. Some of the problems include the
    following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 边缘网关必须高效利用计算资源，同时处理多种协议，包括蓝牙、Wi-Fi、3G、4G 和 5G。由于边缘网关的计算能力有限，直接在边缘服务器上操作 Kubernetes
    是具有挑战性的。以下是一些问题：
- en: For better monitoring and management, separating the control plane and worker
    nodes from the edge and transferring the control plane to the cloud, where the
    control plane and worker nodes take the workload.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了更好的监控和管理，将控制平面和工作节点从边缘分离，并将控制平面转移到云端，在那里控制平面和工作节点承担工作负载。
- en: Separating the cluster data store to handle heavy loads.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将集群数据存储分离以处理重负载。
- en: Making worker nodes specifically for incoming and outgoing traffic will improve
    traffic management.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 专门为进出流量设置工作节点将有助于改善流量管理。
- en: These problems will result in the development of several clusters, making the
    management of the entire infrastructure more challenging.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这些问题将导致多个集群的开发，从而使得整个基础设施的管理变得更加具有挑战性。
- en: MicroK8s comes to the rescue, as it serves as a bridge between edge clusters
    and mainstream Kubernetes. Running with limited resources necessitates a small
    footprint, and full-fledged cloud resource pools can be orchestrated. We have
    seen in the earlier chapters that MicroK8s leverages immutable containers in Kubernetes
    for improved security and simpler operations. It aids in the creation of self-healing,
    high-availability clusters that select the best nodes for the Kubernetes data
    store automatically. When one of the cluster database nodes fails, another node
    gets promoted without the requirement for an administrator. MicroK8s is easy to
    install and upgrade, and it has robust security, making it ideal for micro clouds
    and Edge computing.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: MicroK8s 迎难而上，它作为边缘集群和主流 Kubernetes 之间的桥梁。由于运行资源有限，因此需要较小的占用空间，同时可以协调完整的云资源池。我们在前面的章节中看到，MicroK8s
    利用 Kubernetes 中的不可变容器来提高安全性并简化操作。它有助于创建自愈的高可用集群，自动选择最佳节点来处理 Kubernetes 数据存储。当集群数据库节点之一发生故障时，另一个节点会自动提升，无需管理员干预。MicroK8s
    易于安装和升级，并且具备强大的安全性，非常适合微型云和边缘计算。
- en: Some of the notable challenges in operating IoT edge
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作 IoT 边缘的一些显著挑战
- en: 'In this section, we will look at some of the significant problems associated
    with IoT edge operations:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将探讨与 IoT 边缘操作相关的一些重大问题：
- en: '**Computation and resource constraints**: IoT edge devices’ CPU and memory
    resources are usually constrained, therefore, they must be utilized wisely and
    maintained for the solution’s mission-critical functionality.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**计算和资源限制**：IoT 边缘设备的 CPU 和内存资源通常受到限制，因此必须明智地利用这些资源，并保持解决方案的关键功能。'
- en: '**Remote and resource management**: A manual method for deploying, administering,
    and maintaining devices will be difficult and time-consuming when the cluster
    or edge network expands quickly. Some of the prominent issues are as follows:'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**远程和资源管理**：当集群或边缘网络快速扩展时，手动部署、管理和维护设备将变得困难且耗时。以下是一些突出问题：'
- en: Using device resources efficiently, including CPU, memory, networking, and edge-device
    I/O ports, as well as their remote monitoring and management
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高效利用设备资源，包括 CPU、内存、网络和边缘设备的 I/O 端口，以及它们的远程监控和管理。
- en: Controlling CPU cores and co-processing (for example, GPU) to specific workloads,
    as well as hosting and scaling any mix of apps
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 CPU 核心和协处理器（例如 GPU）分配给特定工作负载，并承载和扩展任意混合的应用程序。
- en: Updates that are automated, remote, and have the ability to roll back in order
    to avoid bricking of the devices
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化的远程更新，并具有回滚功能，以避免设备“砖化”。
- en: Easy migration to different backends and automated connection to one or more
    of the backends (such as the cloud or on-premises infrastructure)
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容易迁移到不同的后端，并自动连接到一个或多个后端（如云或本地基础设施）。
- en: A distributed, secure firewall that securely routes data over networks in accordance
    with the policies defined
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个分布式、安全的防火墙，根据定义的策略安全地在网络中路由数据。
- en: '**Security and trust**: The IoT edge devices must be protected from unauthorized
    access. High-scale environments pose serious challenges for device anonymity and
    traceability, as well as discovery, authentication, and trust building at the
    IoT edge. To guarantee that several IoT apps run in isolation from one another
    in the device, an extra security layer is a critical mandate.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全性和可信度**：IoT 边缘设备必须防止未经授权的访问。大规模环境对设备匿名性和可追溯性、发现、认证以及在 IoT 边缘构建信任提出了严峻挑战。为了确保多个
    IoT 应用在设备中相互隔离运行，额外的安全层是至关重要的。'
- en: '**Reliability and fault tolerance**: Self-managing and self-configuring solutions
    are needed on the edge network due to the volume of IoT devices in the system.
    IoT apps need to have the ability to fix any problems that develop throughout
    the course of their existence. Some of the frequent requirements in the IoT edge
    include resilience to failures and mitigating denial of service attacks.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可靠性和容错性**：由于系统中 IoT 设备的数量庞大，边缘网络需要自我管理和自我配置的解决方案。IoT 应用需要具备解决在其生命周期内出现的任何问题的能力。IoT
    边缘的常见要求包括抗故障能力和缓解拒绝服务攻击。'
- en: '**Scalability**: In the IoT ecosystem, sensors or actuators are increasingly
    in charge of everything. Both the volume and the number of data collection points
    are growing quickly. It is normal for hundreds of new sensors or actuators to
    be added in a short amount of time while the IoT environment is still operating
    in many applications (such as smart city and smart traffic systems). As a result,
    the requirement to scale the IoT ecosystem and data management is critical. Additionally,
    edge-based services are challenged by costs as well as other factors, including
    workload monitoring, storage capacity, dynamic resource allocation, and data transfer
    rate.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性**：在 IoT 生态系统中，传感器或执行器正在逐步负责所有操作。数据收集点的数量和规模都在迅速增长。在 IoT 环境中（如智能城市和智能交通系统）短时间内添加数百个新传感器或执行器是常见的，而该环境仍在多个应用中运行。因此，扩展
    IoT 生态系统和数据管理的需求至关重要。此外，边缘服务还面临成本以及其他因素的挑战，包括工作负载监控、存储容量、动态资源分配和数据传输速率。'
- en: '**Scheduling and load balancing**: To sustain massive systems where data is
    shared over several services, edge computing is totally dependent on load balancing
    and scheduling methods. It is necessary to make data, software, and infrastructure
    available at a lower cost in a safe, dependable, and adaptable way in order to
    assure optimal usage of computational resources. Additionally, a reliable system
    for scheduling and load balancing is required.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调度和负载均衡**：为了支持多个服务之间共享数据的大型系统，边缘计算完全依赖于负载均衡和调度方法。必须以安全、可靠和灵活的方式，以更低的成本提供数据、软件和基础设施，以确保计算资源的最优使用。此外，可靠的调度和负载均衡系统也是必不可少的。'
- en: Now that we’ve seen the major difficulties in managing IoT edge infrastructure,
    we’ll examine how MicroK8s Kubernetes is effective in resolving those challenges.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经了解了管理 IoT 边缘基础设施的主要难点，我们将探讨 MicroK8s Kubernetes 如何有效地解决这些挑战。
- en: How MicroK8s Kubernetes is benefiting edge devices
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MicroK8s Kubernetes 如何使边缘设备受益。
- en: 'MicroK8s is well positioned for expediting IoT and edge deployments due to
    its ability to improve Kubernetes'' productivity and reduce complexity. In this
    section, we will look at how MicroK8s Kubernetes is benefiting edge devices:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 MicroK8s 能够提高 Kubernetes 的生产力并减少复杂性，它在加速 IoT 和边缘部署方面占据了有利位置。在本节中，我们将看看 MicroK8s
    Kubernetes 如何使边缘设备受益：
- en: '**Scalability**: For many IoT solutions, scalability is the main concern. An
    infrastructure that can independently scale horizontally or vertically is necessary
    to support additional devices and process terabytes of data in real time. Compared
    to conventional virtual machines, containers can be generated faster since they
    are lightweight. One of MicroK8s Kubernetes’ primary advantages is its simplicity
    in scaling across network clusters, independence in scaling containers, and ability
    to restart automatically without affecting those services.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性**：对于许多物联网解决方案来说，可扩展性是主要关注点。必须有一个能够独立水平或垂直扩展的基础设施，才能支持额外的设备并实时处理TB级数据。与传统的虚拟机相比，容器因其轻量性而能更快速地生成。MicroK8s
    Kubernetes的主要优势之一就是它在网络集群中扩展的简便性、容器独立扩展的能力以及自动重启而不影响服务的能力。'
- en: '**High availability**: For IoT solutions to conduct crucial business functions,
    edge devices must be readily available and trustworthy. Due to the fact that each
    container has its own IP address, it is simple to distribute loads among them
    and restart applications when a container stops functioning. We have seen various
    examples of how to use the load balancing functionality and run multiple replicas
    for high availability. Also, we have looked at steps to set up an HA cluster to
    withstand component failures.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高可用性**：为了让物联网解决方案能够进行关键业务功能，边缘设备必须随时可用且可靠。由于每个容器都有自己的IP地址，因此可以轻松地在容器之间分配负载，并在容器停止工作时重新启动应用程序。我们已经看到如何利用负载均衡功能并运行多个副本以实现高可用性的各种示例。此外，我们还研究了如何设置HA集群以应对组件故障的步骤。'
- en: '**Efficient use of resources**: Due to its effective resource management, Kubernetes
    reduces the cost of hosting IoT applications. MicroK8s is the compact, optimized
    version of Kubernetes, which offers a layer of abstraction on top of hosted virtual
    machines, bare metal instances, or on the cloud. Administrators can focus on spreading
    out application service deployment across the most infrastructure possible, which
    lowers the overall cost of running infrastructure for an IoT application.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源的高效利用**：由于其有效的资源管理，Kubernetes降低了托管物联网应用的成本。MicroK8s是Kubernetes的紧凑版、优化版，它在托管的虚拟机、裸金属实例或云上提供了一层抽象。管理员可以专注于将应用服务部署到尽可能多的基础设施上，这样可以降低运行物联网应用的整体基础设施成本。'
- en: '**Deployment to the IoT Edge**: Deploying software updates to edge devices
    without disrupting services is a significant IoT challenge. Microservices that
    gradually roll out updates to services can be run via Kubernetes. A rolling update
    strategy is typically used in Kubernetes installations to roll out updates to
    pod versions. By leaving certain instances operating (such as Pod Disruption Budgets)
    at any given time while the updates are being made, it is possible to achieve
    zero service downtime. Old pods are only evicted after the new deployment version’s
    traffic-ready pods are enabled and ready to replace them. As a result, applications
    can be scaled horizontally or upward with a single command.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署到物联网边缘**：向边缘设备部署软件更新而不干扰服务是一个重要的物联网挑战。通过Kubernetes可以运行逐步推出更新的微服务。Kubernetes安装中通常采用滚动更新策略来推出Pod版本更新。通过在更新过程中保持某些实例（例如Pod中断预算）运行，能够实现零服务停机。旧的Pod仅在新部署版本的流量准备好的Pod启用并准备替换时才会被驱逐。因此，应用程序可以通过单个命令水平或垂直扩展。'
- en: '**Enabling DevOps for IoT**: To meet consumer needs, IoT solutions must be
    updated smoothly with no user downtime. Development teams can efficiently verify,
    roll out, and deploy changes to IoT services with the aid of CI/CD tools that
    are available for Kubernetes. Additionally, Kubernetes is supported by a number
    of cloud service providers, including Azure, Google Cloud, and AWS. As a result,
    switching to any cloud service will be simple in the future.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**为物联网启用DevOps**：为了满足消费者需求，物联网解决方案必须能够平滑地更新，且不会造成用户停机。开发团队可以利用Kubernetes中可用的CI/CD工具高效地验证、推出并部署物联网服务的变更。此外，Kubernetes得到多个云服务提供商的支持，包括Azure、Google
    Cloud和AWS。因此，将来切换到任何云服务都将变得简单。'
- en: IoT-dependent industries are concentrating on implementing mission-critical
    services in edge devices to increase the responsiveness of solutions and lower
    costs. Solutions that are getting built on the Kubernetes platforms offer a standard
    framework for implementing IoT services at the edge. Continuous advancements from
    the Kubernetes community make it possible to build IoT solutions that are scalable,
    reliable, and deployable in a distributed environment.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖物联网的行业正在集中力量在边缘设备上实现关键任务服务，以提高解决方案的响应能力并降低成本。基于Kubernetes平台构建的解决方案为在边缘实施物联网服务提供了标准框架。Kubernetes社区的持续进步使得构建可扩展、可靠且可以在分布式环境中部署的物联网解决方案成为可能。
- en: In the next section, we will look at some of the trends that are driving Kubernetes
    and its adoption.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨一些推动Kubernetes及其采用的趋势。
- en: Looking forward – Kubernetes trends and industry outlook
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 展望未来——Kubernetes趋势和行业前景
- en: 'According to a Gartner report titled *Emerging Technologies: Kubernetes and
    the Battle for Cloud-Native Infrastructure, October 2021*, “*By 2025, 85% of organizations
    will run containers in production, up from less than 30% in 2020*.” In this section,
    we will look at some of the key trends that are going to drive Kubernetes adoption
    and use in enterprises.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Gartner于*2021年10月发布的《新兴技术：Kubernetes与云原生基础设施之争》*报告，“*到2025年，85%的组织将在生产环境中运行容器，较2020年不到30%的比例大幅增长*。”在本节中，我们将探讨一些将推动企业采用Kubernetes的关键趋势。
- en: Trend 1 – security is still everyone’s concern
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 趋势1——安全仍然是每个人的关注点
- en: Significant security concerns are posed by containers and Kubernetes that are
    already well known. In the last 12 months, 93% of Kubernetes environments suffered
    at least one security incident. This is likely due to a number of problems, such
    as a lack of security expertise about containers and Kubernetes, insufficient
    or unsuitable security tooling, and central security teams that are unable to
    keep up with rapidly developing application development teams who consider security
    to be an afterthought.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 容器和Kubernetes已经带来了显著的安全隐患。过去12个月，93%的Kubernetes环境至少发生了一次安全事件。这可能是由于多个问题所致，例如缺乏容器和Kubernetes的安全专业知识、安全工具不足或不适用，以及安全团队未能跟上迅速发展的应用开发团队的步伐，后者往往将安全视为事后考虑。
- en: An application’s security posture can be affected by several configuration options
    in Kubernetes. There could be exposures due to misconfigurations in the container
    and Kubernetes environments. Businesses now know that they cannot adequately secure
    containerized environments if security is not incorporated into every phase of
    their development life cycle. DevSecOps methodology is now becoming an integral
    component of managing containerized environments.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的安全态势可能会受到Kubernetes中几个配置选项的影响。由于容器和Kubernetes环境中的配置错误，可能会出现暴露风险。现在企业已经知道，如果没有在开发生命周期的每个阶段都融入安全措施，就无法充分保障容器化环境的安全。DevSecOps方法论现在正成为管理容器化环境的重要组成部分。
- en: 'I have highlighted the need for DevSecOps in the recent *Kubernetes and cloud-native
    operations report, 2022*. Read more on the analysis and takeaways here: [https://juju.is/cloud-native-kubernetes-usage-report-2022#key-takeaways](https://juju.is/cloud-native-kubernetes-usage-report-2022#key-takeaways).'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我在最近的*Kubernetes和云原生操作报告，2022*中强调了DevSecOps的必要性。有关分析和要点，敬请阅读：[https://juju.is/cloud-native-kubernetes-usage-report-2022#key-takeaways](https://juju.is/cloud-native-kubernetes-usage-report-2022#key-takeaways)。
- en: Another aspect that could be affected is the software industry’s supply chain.
    The process of creating modern software involves combining and merging multiple
    parts that are freely accessible as open source projects. A vulnerable software
    component could seriously harm other parts of the application and entire deployments
    as well as the intricate software supply chain. In the following days, new initiatives,
    projects, and so on may be introduced to safeguard the software supply chain.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个可能受到影响的方面是软件行业的供应链。创建现代软件的过程涉及将多个开放源代码项目自由访问的部分进行组合和合并。一个脆弱的软件组件可能会严重损害应用程序的其他部分以及整个部署，甚至影响复杂的软件供应链。在接下来的日子里，可能会推出新的举措、项目等，以保障软件供应链的安全。
- en: The next breakthrough is the **extended Berkeley Packet Filter** (**eBPF**),
    which gives cloud-native developers the flexibility to create components for secure
    networking, service mesh, and observability. We have seen an example of using
    eBPF with Cilium in [*Chapter 6*](B18115_06.xhtml#_idTextAnchor085)*, Configuring
    Connectivity for Containers*. In the coming days, eBPF could become prevalent
    in the security and networking space.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个突破是**扩展伯克利数据包过滤器**（**eBPF**），它为云原生开发人员提供了灵活性，可以创建用于安全网络、服务网格和可观测性的组件。我们在[*第六章*](B18115_06.xhtml#_idTextAnchor085)，*配置容器连接性*中已经看到了使用
    eBPF 和 Cilium 的示例。在未来的日子里，eBPF 可能会在安全和网络领域变得普及。
- en: Trend 2 – GitOps for continuous deployment
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 趋势 2 – GitOps 用于持续部署
- en: GitOps provides well-known Git-based processes and is a crucial tool since it
    enables quick rollbacks and can be used as a single source of truth for state
    reconciliation.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: GitOps 提供了著名的基于 Git 的流程，是一个重要的工具，因为它支持快速回滚，并可以作为状态协调的唯一真实来源。
- en: Natively, there are many ways to integrate GitOps, including Flux CD, Argo CD,
    Google Anthos Config Management, Codefresh, and Weaveworks.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 本地集成 GitOps 的方法有很多，包括 Flux CD、Argo CD、Google Anthos 配置管理、Codefresh 和 Weaveworks。
- en: Tens of thousands of Kubernetes clusters running at the edge or in hybrid settings
    may now be easily managed using GitOps’ support for multitenant and multicluster
    deployments.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 成千上万的 Kubernetes 集群在边缘或混合环境中运行，现在可以轻松通过 GitOps 对多租户和多集群部署的支持进行管理。
- en: GitOps is thus rising to the top as the preferred method for continuous deployment.
    In the upcoming days, GitOps is going to become the gold standard for running
    and deploying Kubernetes apps and clusters.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，GitOps 正在成为持续部署的首选方法。在即将到来的日子里，GitOps 将成为运行和部署 Kubernetes 应用及集群的黄金标准。
- en: Trend 3 – App store for operators
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 趋势 3 – 操作员的应用商店
- en: Without requiring any additional technical expertise, Kubernetes can scale and
    manage stateless applications, including web apps, mobile backends, and API services.
    Kubernetes’ built-in capabilities handle these tasks simply.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 无需额外的技术专长即可扩展和管理无状态应用，包括 web 应用、移动后端和 API 服务。Kubernetes 内置的功能简单地处理这些任务。
- en: However, stateful applications, such as databases and monitoring systems, necessitate
    extra domain expertise that Kubernetes lacks. To scale, update, and reconfigure
    these applications requires an extra level of understanding of the applications
    that are deployed. To manage and automate the life cycle of an application, Kubernetes
    operators include this unique domain knowledge in their extensions.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，像数据库和监控系统这样的有状态应用需要额外的领域专长，而 Kubernetes 本身并不具备这些。为了扩展、更新和重新配置这些应用，需要额外的了解已部署应用的能力。为了管理和自动化应用生命周期，Kubernetes
    操作员将这些独特的领域知识包含在其扩展中。
- en: Kubernetes operators make these procedures scalable, repeatable, and standardized
    by eliminating laborious manual application administration duties.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 操作员通过消除繁琐的手动应用管理任务，使这些流程可扩展、可重复和标准化。
- en: Operators make it simpler for application developers to deploy and maintain
    the supporting services needed by their apps. Additionally, they offer a standardized
    method for distributing applications on Kubernetes clusters and lessen the requirements
    for support by spotting and fixing application issues for infrastructure engineers
    and vendors. We have seen an example of an operator pattern in [*Chapter 8*](B18115_08.xhtml#_idTextAnchor121),
    *Monitoring the Health of Infrastructure and Application*, where we deployed the
    Prometheus Operator for Kubernetes, which handles simplified monitoring definitions
    for Kubernetes services as well as Prometheus instance deployment and management.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 操作员使得应用开发人员更容易部署和维护其应用所需的支持服务。此外，操作员提供了在 Kubernetes 集群上分发应用的标准化方法，并通过发现并修复基础设施工程师和供应商的应用问题，减轻了对支持的要求。我们在[*第八章*](B18115_08.xhtml#_idTextAnchor121)，*监控基础设施和应用健康*中已经看到了操作员模式的示例，在该示例中，我们为
    Kubernetes 部署了 Prometheus Operator，简化了 Kubernetes 服务的监控定义，以及 Prometheus 实例的部署和管理。
- en: However, there is concern surrounding the “*true*” origin and accessibility
    of operators in order to alleviate the fundamental worries of organizations adopting
    new technologies, particularly open source solutions.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有关操作员的“*真实*”来源和可访问性存在担忧，以缓解组织采纳新技术，特别是开源解决方案时的根本性顾虑。
- en: Like Charmhub.io ([https://charmhub.io/](https://charmhub.io/)), there should
    be a central place such as an app store where people can publish and consume operators.
    There will be specific ownership of the artifacts, validation, and different flavors
    of them. And the “store” will have enough information for people to choose the
    right flavor, based on documentation, ratings, the different publishers, and so
    on.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 像 Charmhub.io（[https://charmhub.io/](https://charmhub.io/)）一样，应该有一个类似应用商店的中心平台，供人们发布和使用运维工具。这里会有特定的工件所有权、验证和不同的版本。而且这个“商店”将包含足够的信息，供人们根据文档、评分、不同的发布者等，选择合适的版本。
- en: 'I have outlined the *app store for operators* idea in the recent *Kubernetes
    and cloud-native operations report, 2022*. Read more about the analysis and takeaways
    here: [https://juju.is/cloud-native-kubernetes-usage-report-2022#key-takeaways](https://juju.is/cloud-native-kubernetes-usage-report-2022#key-takeaways).'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我在最近的 *Kubernetes 和云原生操作报告 2022* 中概述了 *面向运维人员的应用商店* 的想法。阅读更多分析和收获请访问：[https://juju.is/cloud-native-kubernetes-usage-report-2022#key-takeaways](https://juju.is/cloud-native-kubernetes-usage-report-2022#key-takeaways)。
- en: Trend 4 – Serverless computing and containers
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 趋势 4 – 无服务器计算与容器
- en: Analysts at Gartner anticipated the growth of serverless computing, or **function-as-a-service**
    (**FaaS**), much earlier ([https://blogs.gartner.com/tony-iams/containers-serverless-computing-pave-way-cloud-native-infrastructure/](https://blogs.gartner.com/tony-iams/containers-serverless-computing-pave-way-cloud-native-infrastructure/)).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Gartner 的分析师早在很久以前就预测了无服务器计算或 **功能即服务** (**FaaS**) 的增长（[https://blogs.gartner.com/tony-iams/containers-serverless-computing-pave-way-cloud-native-infrastructure/](https://blogs.gartner.com/tony-iams/containers-serverless-computing-pave-way-cloud-native-infrastructure/)）。
- en: Imagine that you have a complicated containerized system that is executing shared
    services (such as integration, database operations, and authentication) that are
    triggered by events. To offload complexity from your containerized setup, you
    can separate such duties into a serverless function rather than running them in
    a container.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，你有一个复杂的容器化系统，正在执行由事件触发的共享服务（例如集成、数据库操作和身份验证）。为了减轻容器化设置的复杂性，你可以将这些任务分离成一个无服务器函数，而不是在容器中运行它们。
- en: Additionally, a serverless application can be readily expanded using containers.
    In most scenarios, serverless functions save data; you may integrate and communicate
    stateful data between serverless and container architectures by mounting these
    services as Kubernetes Persistent Volumes.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，使用容器可以轻松扩展无服务器应用程序。在大多数场景中，无服务器函数用于保存数据；你可以通过将这些服务挂载为 Kubernetes 持久化存储卷，来在无服务器和容器架构之间集成并通信有状态数据。
- en: '**Kubernetes-based Event Driven Autoscaler** (**KEDA**) ([https://keda.sh/](https://keda.sh/))
    comes to the rescue for running event-driven Kubernetes workloads, such as containerized
    functions, as it provides fine-grained autoscaling. Functions’ runtimes receive
    event-driven scaling functionality from KEDA. Based on the load, KEDA can scale
    from *zero* instances (*when no events are happening*) out to *n* instances. By
    making custom metrics available to the Kubernetes autoscaler (*Horizontal Pod
    Autoscaler*), it enables autoscaling. Any Kubernetes cluster can replicate serverless
    function capabilities by utilizing functions, containers, and KEDA.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**基于 Kubernetes 的事件驱动自动扩展器** (**KEDA**)（[https://keda.sh/](https://keda.sh/)）帮助运行事件驱动的
    Kubernetes 工作负载，如容器化函数，因为它提供了细粒度的自动扩展功能。函数的运行时通过 KEDA 接受事件驱动的扩展功能。根据负载，KEDA 可以从
    *零* 个实例（*当没有事件发生时*）扩展到 *n* 个实例。通过使 Kubernetes 自动扩展器（*水平 Pod 自动扩展器*）能够使用自定义指标，它实现了自动扩展。任何
    Kubernetes 集群都可以通过利用函数、容器和 KEDA 来复制无服务器函数的能力。'
- en: '**Knative** ([https://knative.dev/docs/](https://knative.dev/docs/)) is another
    framework that integrates scaling, the Kubernetes Deployment model, and event
    and network routing. Through a Knative-service resource, the Knative platform,
    which is built on top of Kubernetes, adopts an opinionated stance on workload
    management. CloudEvents is the foundation of Knative, and Knative services are
    essentially functions that are triggered and scaled by events, whether they are
    CloudEvents events or straightforward HTTP requests. Knative scales quickly in
    response to changes in event rates because it uses a pod sidecar to monitor event
    rates. Additionally, Knative offers scaling to zero, enabling more precise workload
    scaling, ideal for microservices and functions.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**Knative**（[https://knative.dev/docs/](https://knative.dev/docs/)）是另一个框架，它整合了扩展、Kubernetes
    部署模型以及事件和网络路由。通过 Knative 服务资源，基于 Kubernetes 构建的 Knative 平台在工作负载管理方面采取了明确的立场。CloudEvents
    是 Knative 的基础，Knative 服务本质上是由事件触发并由事件进行扩展的函数，无论它们是 CloudEvents 事件还是简单的 HTTP 请求。Knative
    能够快速响应事件速率的变化，因为它使用 Pod 辅助容器来监控事件速率。此外，Knative 提供了零扩展功能，使工作负载扩展更加精确，特别适用于微服务和函数。'
- en: Traditional Kubernetes Deployments/Services are used to implement Knative services,
    and changes to Knative services (such as adding a new container image) generate
    simultaneous Kubernetes Deployment/Service resources. With the routing of HTTP
    traffic being a part of the Knative service resource description, this is used
    by Knative to implement the blue/green and canary deployment patterns.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的 Kubernetes 部署/服务用于实现 Knative 服务，并且对 Knative 服务的更改（如添加新的容器镜像）会生成相应的 Kubernetes
    部署/服务资源。由于 HTTP 流量的路由是 Knative 服务资源描述的一部分，Knative 利用这一点实现蓝绿部署和金丝雀部署模式。
- en: As a result, while designing the deployment of an application on Kubernetes,
    developers should use the Knative service resource and its associated resources
    for specifying event routing. Using Knative means developers will primarily be
    concerned with the Knative service, and Deployments are handled by the Knative
    platform, similar to how we frequently deal with Kubernetes today through deployment
    resources and let Kubernetes manage Pods.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在设计应用程序在 Kubernetes 上的部署时，开发人员应使用 Knative 服务资源及其相关资源来指定事件路由。使用 Knative 意味着开发人员主要关注
    Knative 服务，而部署由 Knative 平台处理，这类似于我们今天通过部署资源处理 Kubernetes，并让 Kubernetes 管理 Pods。
- en: '**OpenFaaS** is a framework for creating serverless functions using the Docker
    and Kubernetes container technologies. Any process can be packaged as a function,
    allowing it to consume a variety of web events without having to write boilerplate
    code over and over. It is an open source initiative that is gaining a lot of traction
    in the community.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**OpenFaaS** 是一个使用 Docker 和 Kubernetes 容器技术创建无服务器函数的框架。任何进程都可以包装成一个函数，使其能够消费各种
    Web 事件，而无需一遍又一遍地编写模板代码。这是一个开源倡议，在社区中获得了广泛的关注。'
- en: 'I have covered the OpenFaaS framework in my blog: [https://www.upnxtblog.com/index.php/2018/10/19/openfaas-tutorial-build-and-deploy-serverless-java-functions/](https://www.upnxtblog.com/index.php/2018/10/19/openfaas-tutorial-build-and-deploy-serverless-java-functions/).'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我在我的博客中介绍了 OpenFaaS 框架：[https://www.upnxtblog.com/index.php/2018/10/19/openfaas-tutorial-build-and-deploy-serverless-java-functions/](https://www.upnxtblog.com/index.php/2018/10/19/openfaas-tutorial-build-and-deploy-serverless-java-functions/)。
- en: In [*Chapter 10*](B18115_10.xhtml#_idTextAnchor157), *Going Serverless with
    Knative and OpenFaaS Frameworks*, we have looked at how to deploy samples on Knative
    and OpenFaaS platforms and used their endpoints to invoke them via the CLI. We
    also looked at how serverless frameworks scale down pods to zero when there are
    no requests and spin up new pods when there are more requests. We’ve also discussed
    some guiding principles to keep in mind when developing and deploying serverless
    applications.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第 10 章*](B18115_10.xhtml#_idTextAnchor157)，《使用 Knative 和 OpenFaaS 框架无服务器化》一章中，我们已经看过如何在
    Knative 和 OpenFaaS 平台上部署示例，并通过 CLI 使用其端点进行调用。我们还看到了无服务器框架如何在没有请求时将 Pods 缩放到零，并在有更多请求时启动新的
    Pods。我们还讨论了一些在开发和部署无服务器应用程序时需要牢记的指导原则。
- en: In the following days, there could be new initiatives and open source projects
    launched that could foster innovation on running serverless and containers.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的日子里，可能会有新的倡议和开源项目推出，这些项目有可能促进在无服务器和容器运行方面的创新。
- en: Trend 5 – AI/ML and data platforms
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 趋势 5 – 人工智能/机器学习与数据平台
- en: For workloads including **machine learning** and **artificial intelligence**
    (**ML** and **AI**), Kubernetes has been widely used. Organizations have experimented
    with a variety of techniques to deliver these capabilities, including manual scaling
    on bare metal, VM scaling on public cloud infrastructure, and **high-performance
    computing** (**HPC**) systems. However, AI algorithms frequently demand significant
    computational power.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 对于包括**机器学习**和**人工智能**（**ML**和**AI**）在内的工作负载，Kubernetes已被广泛使用。组织已尝试多种技术来交付这些能力，包括裸金属上的手动扩展、公共云基础设施上的虚拟机扩展以及**高性能计算**（**HPC**）系统。然而，AI算法通常需要大量的计算能力。
- en: Kubernetes may be the most effective and straightforward choice. The ability
    to package AI/ML workloads as containers and run them as clusters on Kubernetes
    gives AI projects flexibility, maximizes resource usage, and gives data scientists
    a self-service environment.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes可能是最有效且直接的选择。将AI/ML工作负载打包成容器并在Kubernetes上作为集群运行的能力，为AI项目提供了灵活性，最大化了资源使用，并为数据科学家提供了自服务环境。
- en: Without having to adjust GPU support for each workload, containers let data
    science teams build and reliably reproduce validated setups. NVIDIA and AMD have
    added experimental GPU support to the most recent version of Kubernetes. Additionally,
    NVIDIA offers a library of preloaded containers and GPU-optimized containerized
    ML applications ([https://developer.nvidia.com/ai-hpc-containers](https://developer.nvidia.com/ai-hpc-containers)).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 容器让数据科学团队能够构建并可靠地重现验证的设置，无需为每个工作负载调整GPU支持。NVIDIA和AMD已经为最新版本的Kubernetes添加了实验性的GPU支持。此外，NVIDIA还提供了一系列预加载容器和GPU优化的容器化ML应用程序（[https://developer.nvidia.com/ai-hpc-containers](https://developer.nvidia.com/ai-hpc-containers)）。
- en: In [*Chapter 9*](B18115_09.xhtml#_idTextAnchor136), *Using Kubeflow to Run AI/MLOps
    Workloads*, we went over how to set up an ML pipeline that will develop and deploy
    an example model using the Kubeflow ML platform. We also noticed that Kubeflow
    on MicroK8s is easy to set up and configure, as well as lightweight and capable
    of simulating real-world conditions while constructing, migrating, and deploying
    pipelines.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第9章*](B18115_09.xhtml#_idTextAnchor136)，《使用Kubeflow运行AI/MLOps工作负载》中，我们介绍了如何设置一个ML管道，使用Kubeflow
    ML平台开发和部署一个示例模型。我们还注意到，Kubeflow在MicroK8s上的设置和配置非常简单，且轻量级，能够在构建、迁移和部署管道时模拟现实世界的条件。
- en: We can expect to see more and more AI/ML and data platforms moving toward Kubernetes.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以预见，越来越多的AI/ML和数据平台将转向Kubernetes。
- en: Trend 6 – Stateful applications
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 趋势6 – 有状态应用
- en: Today, stateful applications are the norm. While technology innovations such
    as containers and microservices have simplified the development of cloud-based
    systems, their agility has made managing stateful processes more difficult.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，有状态应用已成为常态。尽管容器和微服务等技术创新简化了基于云系统的开发，但它们的敏捷性使得管理有状态进程变得更加困难。
- en: Stateful apps must be executed in containers more frequently. In complicated
    contexts such as the edge, public cloud, and hybrid cloud, containerized apps
    can streamline deployment and operations. For **CI/CD** to provide a seamless
    transition from development to production, maintaining the state is equally crucial.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 有状态应用必须更频繁地在容器中执行。在边缘、公共云和混合云等复杂环境中，容器化应用可以简化部署和运营。为了使**CI/CD**能够顺利从开发过渡到生产，保持状态同样至关重要。
- en: Kubernetes has made significant improvements to facilitate running stateful
    workloads by giving platform administrators and application developers the necessary
    abstractions. The abstractions ensure that different types of file and block storage
    are available wherever a container is scheduled.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes通过为平台管理员和应用开发者提供必要的抽象，做出了重大改进，以便运行有状态的工作负载。这些抽象确保了无论容器被调度到哪里，不同类型的文件和块存储都能可用。
- en: In [*Chapter 11*](B18115_11.xhtml#_idTextAnchor180), *Managing Storage Replication
    with OpenEBS*, we looked at how to configure and implement a PostgreSQL stateful
    workload utilizing the OpenEBS storage engine. We also looked at some Kubernetes
    storage best practices, as well as guidelines for choosing data engines.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第11章*](B18115_11.xhtml#_idTextAnchor180)，《使用OpenEBS管理存储复制》中，我们讨论了如何配置和实现利用OpenEBS存储引擎的PostgreSQL有状态工作负载。我们还讨论了一些Kubernetes存储的最佳实践，以及选择数据引擎的指导方针。
- en: To summarize, we can expect to see a strong trend toward automated security
    and continuous compliance for container and Kubernetes infrastructure in 2022,
    as well as the development of best practices. This will be especially important
    for businesses that must adhere to strict compliance standards.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，我们可以预见到，2022 年容器和 Kubernetes 基础设施的自动化安全性和持续合规性将成为强劲趋势，同时最佳实践的发展也会成为重点。这对那些必须遵守严格合规标准的企业尤为重要。
- en: Summary
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: To summarize, the importance of Kubernetes, the edge, and the cloud collaborating
    to drive sensible business decisions is becoming more and more evident as firms
    embrace digital transformation, Industry 4.0, industrial automation, smart manufacturing,
    and all the advanced use cases. We’ve also explored different deployment approaches
    that demonstrate how Kubernetes may be utilized to run edge workloads. Throughout
    this book, we have covered the majority of the implementation aspects of IoT/Edge
    computing applications using MicroK8s. Kubernetes is clearly the preferred platform
    for Edge computing.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，Kubernetes、边缘计算和云计算的协同作用，推动明智的商业决策，随着企业拥抱数字化转型、工业4.0、工业自动化、智能制造以及所有先进的应用案例，变得越来越显著。我们还探索了不同的部署方法，展示了
    Kubernetes 如何用于运行边缘工作负载。本书中，我们涵盖了使用 MicroK8s 实现物联网/边缘计算应用的大部分实施方面。Kubernetes 无疑是边缘计算的首选平台。
- en: We have also seen how MicroK8s is uniquely positioned for accelerating IoT and
    Edge deployments. Furthermore, we have looked at some of the key trends that are
    going to shape the future.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看到，MicroK8s 在加速物联网和边缘部署方面具有独特优势。此外，我们还探讨了将塑造未来的一些关键趋势。
- en: Congrats! You have successfully completed this book. As you continue on your
    Kubernetes journey, I’m confident that you would have benefited from the examples,
    scenarios, use cases, best practices, and recommendations that we discussed throughout
    this book.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您已经成功完成了本书。在继续您的 Kubernetes 之旅时，我相信您会从我们在本书中讨论的示例、场景、用例、最佳实践和建议中受益匪浅。
- en: In conclusion, Kubernetes, with its rapidly expanding ecosystem and variety
    of tools, support, and services, is quickly becoming a helpful tool, particularly
    as more organizations shift to the cloud.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，Kubernetes 以其快速扩展的生态系统以及多样化的工具、支持和服务，正迅速成为一种有用的工具，尤其是在越来越多的组织转向云计算的过程中。
- en: According to Canonical’s 2022 *Kubernetes and Cloud Native Operations Survey*
    (https://juju.is/cloud-native-kubernetes-usage-report-2022), 48% of respondents
    indicate the biggest barriers to migrating to or using Kubernetes and containers
    are a lack of in-house capabilities and limited staff.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 Canonical 2022 年的 *Kubernetes 和云原生操作调查*（https://juju.is/cloud-native-kubernetes-usage-report-2022），48%
    的受访者表示，迁移到或使用 Kubernetes 和容器的最大障碍是缺乏内部能力和人员有限。
- en: As indicated in the report, there is a skill deficit as well as a knowledge
    gap, which I believe this book can solve by covering crucial areas that are required
    to bring you up to speed in no time.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如报告所示，存在技能短缺和知识空白，我相信本书可以通过涵盖关键领域来帮助您快速掌握相关内容。
- en: To keep up with updates, you may subscribe to my blog at [https://www.upnxtblog.com](https://www.upnxtblog.com).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 若要跟上更新，您可以订阅我的博客：[https://www.upnxtblog.com](https://www.upnxtblog.com)。
- en: I also look forward to hearing about your experiences, opinions, and suggestions
    on [https://twitter.com/karthi4india](https://twitter.com/karthi4india).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我也期待听到您在 [https://twitter.com/karthi4india](https://twitter.com/karthi4india)
    上分享您的经历、意见和建议。
- en: The following are some excellent MicroK8s resources to support you on your journey.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些优秀的 MicroK8s 资源，助您在旅程中获得支持。
- en: Further reading
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Official MicroK8s documentation: [https://microk8s.io/docs](https://microk8s.io/docs).'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 官方 MicroK8s 文档：[https://microk8s.io/docs](https://microk8s.io/docs)。
- en: 'MicroK8s tutorials: [https://microk8s.io/docs/tutorials](https://microk8s.io/docs/tutorials).'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MicroK8s 教程：[https://microk8s.io/docs/tutorials](https://microk8s.io/docs/tutorials)。
- en: 'MicroK8s command reference: [https://microk8s.io/docs/command-reference](https://microk8s.io/docs/command-reference).'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MicroK8s 命令参考：[https://microk8s.io/docs/command-reference](https://microk8s.io/docs/command-reference)。
- en: 'Services and ports used: [https://microk8s.io/docs/services-and-ports](https://microk8s.io/docs/services-and-ports).'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用的服务和端口：[https://microk8s.io/docs/services-and-ports](https://microk8s.io/docs/services-and-ports)。
- en: 'If you are unable to resolve your problem and feel it is due to a bug in MicroK8s,
    please submit an issue to the project repository: [https://github.com/ubuntu/microk8s/issues/](https://github.com/ubuntu/microk8s/issues/).'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你无法解决问题，并且认为这是 MicroK8s 中的一个 bug，请提交问题到项目仓库：[https://github.com/ubuntu/microk8s/issues/](https://github.com/ubuntu/microk8s/issues/)。
- en: 'Contributing to MicroK8s documentation: [https://microk8s.io/docs/docs](https://microk8s.io/docs/docs).'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '贡献 MicroK8s 文档: [https://microk8s.io/docs/docs](https://microk8s.io/docs/docs)。'
- en: 'Contributing to MicroK8s: [https://github.com/canonical/microk8s/blob/master/docs/build.md](https://github.com/canonical/microk8s/blob/master/docs/build.md).'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '贡献 MicroK8s: [https://github.com/canonical/microk8s/blob/master/docs/build.md](https://github.com/canonical/microk8s/blob/master/docs/build.md)。'
- en: Frequently Asked Questions About MicroK8s
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于 MicroK8s 的常见问题解答
- en: 'The following FAQs are not exhaustive, but they are important for running your
    Kubernetes cluster:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 以下常见问题并不全面，但它们对于运行 Kubernetes 集群非常重要：
- en: How do I find out what the status of a deployment is?
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何查看部署的状态？
- en: Use the `kubectl get deployment <deployment>` command. If `DESIRED`, `CURRENT`,
    and `UP-TO-DATE` are all equal, then the deployment has succeeded.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `kubectl get deployment <deployment>` 命令。如果 `DESIRED`、`CURRENT` 和 `UP-TO-DATE`
    都相等，则说明部署已成功。
- en: How do I troubleshoot a pod with a `Pending` status?
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何排查状态为 `Pending` 的 pod？
- en: A pod with the Pending status cannot be scheduled onto a node. Inspecting the
    pod using `kubectl describe pod <pod>` will give you details on why the pod is
    stuck. Additionally, you can use the `kubectl logs <pod>` command to understand
    if there is contention.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 状态为 Pending 的 pod 不能被调度到节点上。使用 `kubectl describe pod <pod>` 命令可以查看 pod 卡住的原因。此外，你还可以使用
    `kubectl logs <pod>` 命令来了解是否存在竞争问题。
- en: The most common reason for this issue is some pod requesting more resources.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题最常见的原因是某些 pod 请求了更多的资源。
- en: How do I troubleshoot a `ContainerCreating` pod?
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何排查状态为 `ContainerCreating` 的 pod？
- en: Unlike a `Pending` pod, a ContainerCreating pod is scheduled onto the node but
    due to some other reason, it cannot start up properly. Using `kubectl describe
    pod <pod>` will give you details on why the pod is stuck on the ContainerCreating
    status.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `Pending` 状态的 pod 不同，`ContainerCreating` 状态的 pod 已经被调度到节点上，但由于某些其他原因，它无法正确启动。使用
    `kubectl describe pod <pod>` 可以查看 pod 卡住在 `ContainerCreating` 状态的原因。
- en: The most common reasons for the above issue include CNI errors from being started
    up properly. There could also be errors due to volume mount failures.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 上述问题的最常见原因包括 CNI 启动错误，也可能是由于卷挂载失败导致的错误。
- en: How do I troubleshoot a pod with a `CrashLoopBackoff` status?
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何排查状态为 `CrashLoopBackoff` 的 pod？
- en: When a pod fails due to an error, this is the standard error message. The `kubectl
    logs <pod>` command would usually show the error messages from the recent execution.
    From those messages, you can find out what caused the issue and resolve it.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个 pod 因为错误失败时，这是标准的错误信息。`kubectl logs <pod>` 命令通常会显示最近执行的错误信息。通过这些信息，你可以找出导致问题的原因并加以解决。
- en: If the container is still running, you can use the `kubectl exec -it <pod> --
    bash` command to enter the container shell and then debug it.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果容器仍在运行，你可以使用 `kubectl exec -it <pod> -- bash` 命令进入容器的 shell 进行调试。
- en: How do I roll back a particular deployment?
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何回滚特定的部署？
- en: If you use the `–record` parameter along with the `kubectl apply` command, Kubernetes
    stores the previous deployment in its history. You can then use `kubectl rollout
    history deployment <deployment>` to show prior deployments.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在执行 `kubectl apply` 命令时使用了 `–record` 参数，Kubernetes 会将上次的部署记录存储在历史记录中。你可以使用
    `kubectl rollout history deployment <deployment>` 命令查看历史部署。
- en: The last deployment can be restored using the `kubectl rollout undo deployment
    <deployment>` command.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `kubectl rollout undo deployment <deployment>` 命令恢复上次的部署。
- en: How do I force a pod to run on specific nodes?
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何强制将 pod 运行在特定的节点上？
- en: Some of the common methods that are used are the `nodeSelector` field and affinity
    and anti-affinity.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常用的方法包括使用 `nodeSelector` 字段以及亲和性和反亲和性。
- en: The simplest recommendation is to use a node selection constraint with the `nodeSelector`
    field in your pod definition to define which node labels the target node should
    have. Kubernetes uses that information to schedule only the nodes with the labels
    you specify.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的建议是，在 pod 定义中使用 `nodeSelector` 字段来定义目标节点应该具有的节点标签。Kubernetes 使用这些信息只将 pod
    调度到带有你指定标签的节点上。
- en: How do I force replicas to distribute on different nodes?
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何强制将副本分配到不同的节点？
- en: 'Kubernetes attempts node anti-affinity by default, but this is not a hard requirement;
    it is by best effort, but it will schedule many pods on the same node if that
    is the only option available. You can learn more about node selection here: [http://kubernetes.io/docs/user-guide/node-selection/](http://kubernetes.io/docs/user-guide/node-selection/).'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 默认尝试节点反亲和性，但这不是一个硬性要求；它是尽力而为，但如果没有其他选择，它将在同一节点上调度许多 pod。您可以在这里了解更多关于节点选择的信息：[http://kubernetes.io/docs/user-guide/node-selection/](http://kubernetes.io/docs/user-guide/node-selection/)。
- en: How do I list all the pods on a node?
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何列出节点上的所有 pod？
- en: 'Use the following command:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令：
- en: '[PRE0]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: A more detailed kubectl cheat sheet can be found at [https://kubernetes.io/docs/reference/kubectl/cheatsheet/](https://kubernetes.io/docs/reference/kubectl/cheatsheet/).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 更详细的 kubectl 技巧表可以在 [https://kubernetes.io/docs/reference/kubectl/cheatsheet/](https://kubernetes.io/docs/reference/kubectl/cheatsheet/)
    找到。
- en: How do I monitor a pod that is always running?
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何监视一个始终运行的 pod？
- en: To do this, you can make use of the liveness probe feature.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，您可以利用存活探针功能。
- en: A liveness probe always checks whether an application in a pod is running, and
    if this check fails, the container gets restarted. This is useful in many situations
    where the container is running but the application inside it crashes.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 存活探针始终检查 pod 中的应用程序是否在运行，如果检查失败，则容器将被重新启动。这在容器运行但其中的应用程序崩溃的许多情况下非常有用。
- en: 'The following code snippet demonstrates the liveness probe feature:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段演示了存活探针功能：
- en: '[PRE1]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: What is the difference between replication controllers and replica sets?
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制控制器和副本集之间有什么区别？
- en: The selectors are the sole distinction between replication controllers and replica
    sets. Replication controllers are no longer supported in the most recent version
    of Kubernetes, and their specifications don’t mention selectors either.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 选择器是复制控制器和副本集之间的唯一区别。 Kubernetes 的最新版本不再支持复制控制器，它们的规范也不提及选择器。
- en: More details can be found at [https://Kubernetes.io/docs/concepts/workloads/controllers/replicaset/](https://Kubernetes.io/docs/concepts/workloads/controllers/replicaset/).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 更多详细信息可在 [https://Kubernetes.io/docs/concepts/workloads/controllers/replicaset/](https://Kubernetes.io/docs/concepts/workloads/controllers/replicaset/)
    找到。
- en: What is the role of `kube-proxy`?
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`kube-proxy`的角色是什么？'
- en: 'The following are the roles and responsibilities of `kube-proxy`:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是`kube-proxy`的角色和责任：
- en: For every service, it assigns a random port to the node it’s running on and
    assigns a proxy to the service.
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于每个服务，它会向其运行的节点分配一个随机端口，并为服务分配代理。
- en: Installs and maintains iptable rules that intercept incoming connections to
    a virtual IP and port and also routes them to the port.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装并维护 iptable 规则，拦截传入到虚拟 IP 和端口的连接，并将其路由到端口。
- en: The kube-proxy component oversees host subnetting and makes services available
    to other components. Since kube-proxy manages network communication, shutting
    down the control plane does not prevent a node from handling traffic. It operates
    similarly to a service. The connection will be forwarded by iptables to kube-proxy,
    which will then use a proxy to connect to one of the service’s pods. Whatever
    is in the endpoints is routed through kube-proxy using the target address.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: kube-proxy 组件负责主机子网化，并使服务可用于其他组件。由于 kube-proxy 管理网络通信，关闭控制平面不会阻止节点处理流量。它的操作方式类似于服务。连接将通过
    iptables 转发到 kube-proxy，然后 kube-proxy 将使用代理连接到服务的一个 pod。无论端点中有什么，kube-proxy 都将使用目标地址通过转发。
- en: How do I test the deployment manifest without executing it?
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在不执行部署清单的情况下测试它？
- en: 'To test the manifest, use the `--dry-run` flag. This is extremely useful for
    determining whether the YAML syntax is appropriate for a specific Kubernetes object
    and also ensures that a spec contains the required key-value pairs:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试清单，请使用`--dry-run`标志。这对于确定 YAML 语法是否适合特定的 Kubernetes 对象非常有用，并确保规范包含所需的键值对：
- en: '[PRE2]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How do I package a Kubernetes application?
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何打包 Kubernetes 应用程序？
- en: 'Helm is a package manager that allows users to package, configure, and deploy
    Kubernetes applications and services. You can learn more about Helm here: [https://helm.sh/](https://helm.sh/).'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: Helm 是一个允许用户打包、配置和部署 Kubernetes 应用程序和服务的包管理器。您可以在这里了解更多关于 Helm 的信息：[https://helm.sh/](https://helm.sh/)。
- en: For a quick-start guide, please refer to [https://www.upnxtblog.com/index.php/2019/12/02/helm-3-0-0-is-outhere-is-what-has-changed/](https://www.upnxtblog.com/index.php/2019/12/02/helm-3-0-0-is-outhere-is-what-has-changed/).
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 若要查看快速入门指南，请参见[https://www.upnxtblog.com/index.php/2019/12/02/helm-3-0-0-is-outhere-is-what-has-changed/](https://www.upnxtblog.com/index.php/2019/12/02/helm-3-0-0-is-outhere-is-what-has-changed/)。
- en: What are `init` containers?
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是`init`容器？
- en: In Kubernetes, a pod can have several containers. The `init` container runs
    before any other containers in the pod.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 中，一个 Pod 可以包含多个容器。`init` 容器会在 Pod 中的其他容器之前运行。
- en: The following is an example that defines a simple pod with two `init` containers.
    The first is waiting for `myservice`, while the second is waiting for `mydb`.
    When both `init` containers are finished, the pod executes the app container from
    its `spec:` section.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例，定义了一个简单的 Pod，其中包含两个 `init` 容器。第一个等待 `myservice`，第二个等待 `mydb`。当两个 `init`
    容器都完成后，Pod 会根据其 `spec:` 部分执行应用容器。
- en: 'More details can be found here: [https://kubernetes.io/docs/concepts/workloads/pods/init-containers/](https://kubernetes.io/docs/concepts/workloads/pods/init-containers/).'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 更多详情请参见此处：[https://kubernetes.io/docs/concepts/workloads/pods/init-containers/](https://kubernetes.io/docs/concepts/workloads/pods/init-containers/)。
- en: 'The following code snippet demonstrates how `initContainers` works:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段展示了`initContainers`是如何工作的：
- en: '[PRE3]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How can I drain the pods from nodes for maintenance?
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何将 Pod 从节点中驱逐进行维护？
- en: 'Use the `drain` command, as follows:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`drain`命令，方法如下：
- en: '[PRE4]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: When you execute the preceding command, it designates the node as unscheduled
    for newer pods and then evicts or deletes the existing pods.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 当你执行上述命令时，它会将节点标记为不调度新的 Pod，然后驱逐或删除现有的 Pod。
- en: 'Once you have finished maintaining the node and you want to join the cluster,
    issue the `uncordon` command, as follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你完成了节点的维护并希望将其重新加入集群，执行`uncordon`命令，方法如下：
- en: '[PRE5]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: More details can be found at [https://kubernetes.io/docs/tasks/administer-cluster/safely-drain-node/](https://kubernetes.io/docs/tasks/administer-cluster/safely-drain-node/).
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 更多详情请参见[https://kubernetes.io/docs/tasks/administer-cluster/safely-drain-node/](https://kubernetes.io/docs/tasks/administer-cluster/safely-drain-node/)。
- en: What is a pod security policy?
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是 Pod 安全策略？
- en: Pod security policies in Kubernetes are configurations that govern which security
    features a pod has access to. They are a form of cluster-level resource that helps
    you control a pod’s security.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 中的 Pod 安全策略是控制 Pod 可以访问哪些安全功能的配置。它们是一种集群级资源，帮助你控制 Pod 的安全性。
- en: More details can be found at [https://kubernetes.io/docs/concepts/security/pod-security-policy/](https://kubernetes.io/docs/concepts/security/pod-security-policy/).
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 更多详情请参见[https://kubernetes.io/docs/concepts/security/pod-security-policy/](https://kubernetes.io/docs/concepts/security/pod-security-policy/)。
- en: What is `ResourceQuota` and why do we need it?
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是`ResourceQuota`，我们为什么需要它？
- en: The `ResourceQuota` object limits aggregate resource consumption per namespace.
    It can limit the number of objects that can be generated in a namespace by type,
    as well as the total amount of compute resources that resources in that project
    can consume.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`ResourceQuota` 对象限制每个命名空间的资源总消耗。它可以限制在命名空间中根据类型生成的对象数量，以及该项目中资源所能消耗的计算资源总量。'
- en: More details can be found at [https://kubernetes.io/docs/concepts/policy/resource-quotas/](https://kubernetes.io/docs/concepts/policy/resource-quotas/).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 更多详情请参见[https://kubernetes.io/docs/concepts/policy/resource-quotas/](https://kubernetes.io/docs/concepts/policy/resource-quotas/)。

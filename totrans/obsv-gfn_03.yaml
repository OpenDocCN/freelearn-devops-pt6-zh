- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setting Up a Learning Environment with Demo Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter guides you through setting up a **learning environment** for the
    practical examples throughout this book and for independent experimentation. As
    Grafana Labs offers a free tier of their cloud service, we will use this for the
    storage and searching of data. To produce rich, useful data, we will use the **OpenTelemetry**
    demo application. This demo application deploys the services needed to run the
    OpenTelemetry Astronomy Shop locally. These applications are written in many different
    languages and are instrumented to produce metrics, logs, and distributed traces.
    This application will help you interact directly (and via load generators) with
    real applications and see observability telemetry in real time in the Grafana
    Labs instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Grafana Cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the prerequisite tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the OpenTelemetry Demo application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring telemetry from the demo application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Troubleshooting your OpenTelemetry demo application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We assume you are working on at least Windows 10 version 2004, macOS version
    11, or a relatively recent installation of Linux (e.g., Ubuntu 20.10 or later);
    earlier versions are not supported. We will be using the OpenTelemetry Collector
    version 0.73.1 and the OpenTelemetry Demo version 0.26.0\. Full installation instructions
    for these components are provided in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: All commands and configuration files to complete these steps are included in
    the GitHub repository at [https://github.com/PacktPublishing/Observability-with-Grafana/tree/main/chapter3](https://github.com/PacktPublishing/Observability-with-Grafana/tree/main/chapter3).
    You'll find the *Code in Action* videos for this chapter at [https://packt.link/GNFyp](https://packt.link/GNFyp).
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Grafana Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Grafana Cloud is a hosted platform-as-a-service observability tool. It offers
    the ability to quickly create infrastructure to receive and store log, metric,
    and trace data as well as tools to visualize the data. We are using Grafana Cloud
    to reduce the technical skill needed to engage with this book, although all the
    open source components from Grafana that we will introduce can be deployed locally
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: Grafana Cloud offers free access. In this chapter, we will first set up a cloud
    account and familiarize ourselves with the administration and use of the tools.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Grafana Labs introduces changes on a regular basis. The information and screenshots
    in this chapter are based on Grafana version 10.2, which was released in October
    2023.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up an account
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Creating a free Grafana Cloud account is simple. To do this, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://www.grafana.com](https://www.grafana.com) and click on **Create**
    **Free Account**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Sign up using any of the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A Google account
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: A GitHub account
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: A Microsoft account
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: An Amazon account
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: An email address
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Choose a team URL. This is the URL used to access your Grafana instance. In
    our sample setup, we chose `observabilitywithgrafana`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.1 – Creating a Grafana stack](img/B18277_figure_3.1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.1 – Creating a Grafana stack
  prefs: []
  type: TYPE_NORMAL
- en: Choose a deployment region from the available list and then wait for a few minutes
    for your Grafana account to be created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When the account creation is completed, you will see a screen titled **GET
    STARTED**, as shown in the following screenshot. We encourage you to explore the
    screens in Grafana, but for this introduction, you can just click on **I’m already
    familiar** **with Grafana**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.2 – Get started with Grafana](img/B18277_figure_3.2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.2 – Get started with Grafana
  prefs: []
  type: TYPE_NORMAL
- en: 'Then click on the Grafana icon in the top-left corner to return to the home
    screen, and finally, click on **Stacks**, which you will find just under the welcome
    message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.3 – Welcome to Grafana Cloud](img/B18277_figure_3.3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.3 – Welcome to Grafana Cloud
  prefs: []
  type: TYPE_NORMAL
- en: This will take you to the Grafana Cloud Portal, which will look like this.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.4 – The Grafana Cloud Portal](img/B18277_figure_3.4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.4 – The Grafana Cloud Portal
  prefs: []
  type: TYPE_NORMAL
- en: Before we set up the local data-producing environment, let’s take a few moments
    to explore the basics of the Grafana Cloud Portal and your new Grafana Stack.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the Grafana Cloud Portal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The home page of the portal shows your subscription and billing information,
    as well as details about your single Grafana Stack. When you first sign up for
    a **Cloud Free** subscription, you will be granted access to a 14-day trial for
    Cloud Pro. To access your instance of Grafana, you need to click on the **Launch**
    button in the **Grafana** section. This gives you access to view data you send
    to Grafana Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: 'A full Grafana **Stack** consists of the following installations:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Visualization**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Grafana instance
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Metrics**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Prometheus remote write endpoint
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A Graphite endpoint
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A Mimir backend storage instance
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Logs**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Loki endpoint
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A Loki backend storage instance
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Traces**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Tempo endpoint
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A Tempo backend storage instance
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Alerting**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An Alerting instance for managing Prometheus-based alerts
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Load testing**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A k6 cloud runner
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Profiling**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Pyroscope endpoint
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A Pyroscope backend storage instance
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s take a look at some of the sections you can access in your portal:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Security**: In this section, you can manage **access policies** and **access
    tokens**, **Open Authorization** (**OAuth**), **Security Assertion Markup Language**
    (**SAML**), and **Lightweight Directory Access** **Protocol** (**LDAP**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access policies are scoped to a **realm**; a realm can cover a specific stack,
    or it can cover the entire organization.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Support**: This section gives access to support from the community via **Community
    Forums**, and from Grafana Labs via **Support Ticket** and **Chat** **with Support**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Billing**: The **Billing** section is where invoices and subscriptions are
    managed. A Cloud Free subscription provides a monthly limit of 10,000 metrics,
    50 GB logs and 50 GB traces, 50 GB profiles, as well as three **Incident Response
    & Management** (**IRM**) users and 500 k6 **virtual user hours** (**VUh**). This
    subscription is plenty for the demo applications we will be using during the book
    and similar small demo, personal-use installations. For larger installations,
    Grafana Cloud also offers two additional tiers, Cloud Pro and Cloud Advanced.
    These tiers give access to different key features, with Cloud Advanced being geared
    toward enterprise-level installations. Grafana then bills based on ingest and
    active users in different areas. Grafana provides a very easy-to-use monthly cost
    estimation tool:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 3.5 – Grafana cost estimator](img/B18277_figure_3.5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.5 – Grafana cost estimator
  prefs: []
  type: TYPE_NORMAL
- en: With a Cloud Free subscription, you will only have access to a single stack.
    With a subscription to **Cloud Pro** or **Cloud Advanced**, you will be able to
    create multiple stacks in your account. These stacks can be in different regions.
  prefs: []
  type: TYPE_NORMAL
- en: '**Org Settings**: Here, you can manage the users who can access Grafana Cloud.
    You can also update your avatar, organization name, and any plugins or dashboards
    you have shared with the community.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that you have explored the Grafana Cloud Portal and have an overview of
    managing a Grafana Cloud account, let’s explore the Grafana instance in your cloud
    stack.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the Grafana instance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The main way to interact with the tools provided by the Grafana Stack is to
    access the **Grafana instance**. This instance provides visualization tools to
    view the data that is collected by the rest of the Grafana stack or other linked
    tools. To access your Grafana instance, you can click on the **Launch** button
    in your Cloud Portal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.6 – Launching Grafana](img/B18277_figure_3.6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.6 – Launching Grafana
  prefs: []
  type: TYPE_NORMAL
- en: To access it more directly, you can use the direct URL based on the team name
    selected during account creation. For instance, our sample account has the URL
    `https://observabilitywithgraf``ana.grafana.net`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have accessed Grafana, you will be greeted with a home page that shows
    your current usage. Navigation is done using the menu available at the top left
    of the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.7 – The main navigation panel in Grafana](img/B18277_figure_3.7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.7 – The main navigation panel in Grafana
  prefs: []
  type: TYPE_NORMAL
- en: Let’s talk through the different sections available in the menu shown in the
    preceding figure.
  prefs: []
  type: TYPE_NORMAL
- en: Dashboards and Starred dashboards
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The **Dashboards** section allows you to create, import, organize, and tag
    dashboards in your Grafana installation. Under **Dashboards**, you can also access
    **Playlists**, **Snapshot**, **Library panels**, and **Reporting**:'
  prefs: []
  type: TYPE_NORMAL
- en: The **Playlists** subsection lets you manage groups of dashboards that are displayed
    in a sequence, for instance, on TVs in an office.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Snapshot** tab gives you the ability to take a snapshot of a dashboard
    with the data to share. This will give the recipients the ability to explore the
    data much better than by sharing a simple screenshot.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Library panels** provides reusable panels that can be used in multiple dashboards
    to aid in offering a standardized UI.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, **Reporting** allows you to automatically generate PDFs from any dashboard
    and send them to interested parties on a schedule.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Starred** dashboards section lets you customize the UI by saving dashboards
    you frequently use at the top of the menu. We will explore using dashboards more
    fully in [*Chapter 8*](B18277_08.xhtml#_idTextAnchor172).
  prefs: []
  type: TYPE_NORMAL
- en: Explore
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Explore** is the way to get direct access to the data that is connected to
    the Grafana instance. This is the foundation of building custom dashboards and
    exploring data to understand the current state of the system. We will look at
    this briefly later in this chapter in the section titled *Exploring telemetry
    from the demo application*, and in a lot more detail in *Chapters 4*, *5*, and
    *6*.'
  prefs: []
  type: TYPE_NORMAL
- en: Alerts & IRM
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The **Alerts & IRM** section contains Grafana’s **Alerting**, **OnCall**, and
    **Incident** systems for IRM, as well as machine learning capabilities and the
    SLO service. These can help with identifying anomalies in the system (for more
    details on this, you can refer to [*Chapter 9*](B18277_09.xhtml#_idTextAnchor183)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.8 – Alerts & IRM](img/B18277_figure_3.8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.8 – Alerts & IRM
  prefs: []
  type: TYPE_NORMAL
- en: '**Alerting**, or Alertmanager, allows teams to manage rules for when an alert
    should be triggered. It also gives teams control over the method of notification
    used for the alert and whether there are any schedules for when to alert. Grafana
    **Alerting** is geared toward notifying an individual team of alerts in their
    system, and it has been battle-tested by many organizations.'
  prefs: []
  type: TYPE_NORMAL
- en: '**OnCall** and **Incident** form Grafana’s IRM toolkit. This gives organizations
    the ability to receive notifications from many monitoring systems and manage schedules
    and escalation chains, as well as giving high-level visibility of sent, acknowledged,
    resolved, and silenced alerts. The **Incident** section gives organizations the
    ability to start incidents. These follow predefined processes for involving the
    right people and communicating with stakeholders. Once the incident is initiated,
    Grafana can record key moments during the incident process ready for any post-incident
    processes. Both **OnCall** and **Incident** are aimed at organizations that need
    a central hub to manage the technical aspects of problem and incident management.
    [*Chapter 9*](B18277_09.xhtml#_idTextAnchor183) will explore these tools in greater
    detail and show you how to configure them.'
  prefs: []
  type: TYPE_NORMAL
- en: Performance testing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Performance testing** area is where the k6 performance testing tool is
    integrated with the Grafana UI, allowing teams to manage tests and projects. k6
    allows your teams to use the same performance testing tools in the CI/CD pipeline
    as they use to test against production. k6 will be covered in [*Chapter 13*](B18277_13.xhtml#_idTextAnchor239).
  prefs: []
  type: TYPE_NORMAL
- en: Observability
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Observability** section brings together Kubernetes infrastructure and
    application monitoring, with synthetic tests used to simulate critical user journeys
    in your application alongside frontend **real user monitoring** (**RUM**) and
    **profiles** from Pyroscope. By combining these data sources, you gain an end-to-end
    view of the current performance of your products.
  prefs: []
  type: TYPE_NORMAL
- en: Connections
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The **Connections** section is an administrative area to set up and manage
    connections from Grafana to the 160+ data sources and infrastructure components
    that it can connect and show data from. Some examples of available connections
    are Elastisearch, Datadog, Splunk, AWS, Azure, cert-manager, GitHub, Ethereum,
    and Snowflake. The page to configure these connections is shown in the following
    figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.9 – Connections screen](img/B18277_figure_3.9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.9 – Connections screen
  prefs: []
  type: TYPE_NORMAL
- en: Administration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The **Administration** panel allows for the management of many aspects of Grafana,
    from plugins and recorded queries to users, authentication, teams, and service
    accounts:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.10 – Administration panel](img/B18277_figure_3.10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.10 – Administration panel
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve explored the Grafana Cloud Portal, let’s prepare your local environment
    to send data.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the prerequisite tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Grafana is much more exciting with data! To build a realistic view of how Grafana
    works and can help your organization, we have chosen to install the OpenTelemetry
    demo application. This is a demonstration web store that sells telescopes and
    other observational equipment. We’ll take you through the installation process
    to get this running locally on your machine.
  prefs: []
  type: TYPE_NORMAL
- en: But first, there are a few prerequisites that your local environment has, and
    they depend on the operating system you use.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will explain how to install the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Tools based on your operating system:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Windows Subsystem for Linux version** **2** (**WSL2**)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: macOS Homebrew
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker or Podman
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A single-node Kubernetes cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Helm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing WSL2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'WSL is a way of running a Linux filesystem and tools directly on Windows. This
    is used to give a standard set of commands and tools across operating systems.
    It is possible to run these systems outside of WSL, but the processes are much
    easier using WSL. Follow these steps to set up WSL2:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a PowerShell terminal or Windows Command Prompt as an administrator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command to install WSL2:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will install the Ubuntu distribution of Linux.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You should see a message that Ubuntu is installing and then you will be prompted
    for a new UNIX username. If you see any other message, you may have a version
    of WSL installed already; please refer to the Microsoft website to address this.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create a new user for your Ubuntu installation by entering a username and password.
    These do not need to match your Windows username and password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Upgrade packages by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'It is recommended to install the Windows Terminal to use WSL. This can be downloaded
    from the Microsoft Store: https://learn[.microsoft.com/en-us/windows/terminal/install](http://.microsoft.com/en-us/windows/terminal/install).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: More detailed instructions on how to complete this installation process and
    troubleshoot any issues that may arise can be found at [https://learn.microsoft.com/en-us/windows/wsl/install](https://learn.microsoft.com/en-us/windows/wsl/install).
  prefs: []
  type: TYPE_NORMAL
- en: Installing Homebrew
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Homebrew** is a package management tool for macOS. To install it on your
    system, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a terminal window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command to install Homebrew:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ brew install wget
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Detailed instructions on this installation can be found at [https://brew.sh/](https://brew.sh/).
  prefs: []
  type: TYPE_NORMAL
- en: Installing container orchestration tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Docker** and **Podman** are both **container orchestration tools**. Docker
    has been the de facto standard for about a decade. Podman is a newer tool. It
    was first released in 2018\. The major functions of Docker are also offered in
    Podman, but support and information may be more difficult to find.'
  prefs: []
  type: TYPE_NORMAL
- en: In 2021, Docker made licensing changes that became fully effective in January
    2023\. These licensing changes may impact readers using devices belonging to businesses.
    We will only provide instructions for Docker, but we will highlight the potential
    issues, so you are aware of them. The aim of providing a container orchestration
    tool is to run a single-node Kubernetes cluster on that tool.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker Desktop
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The following sections briefly describe how **Docker Desktop** can be installed
    on Windows, macOS, and Linux. Let’s look at the Windows installation process first.
  prefs: []
  type: TYPE_NORMAL
- en: Windows installation
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To install Docker Desktop on Windows, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://docs.docker.com/desktop/install/windows-install/](https://docs.docker.com/desktop/install/windows-install/)
    and download the latest Docker installer `.``exe` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the installation package. You will be prompted to enable WSL2\. Select **Yes**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After installation, start Docker Desktop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Settings** | **General**. Select the **Use WSL2 based** **engine**
    checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Apply &** **Restart**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In your WSL terminal, validate the Docker installation by running the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: macOS installation
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'For the macOS installation of Docker Desktop, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://docs.docker.com/desktop/install/mac-install/](https://docs.docker.com/desktop/install/mac-install/)
    and download the latest Docker installer for your Mac.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the installation package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In your terminal, validate the Docker installation by running the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Linux installation
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Linux users may consider using Podman Desktop as it has better native support
    for Linux environments. Installation instructions are available at [https://podman-desktop.io/docs/Installation/linux-install](https://podman-desktop.io/docs/Installation/linux-install).
  prefs: []
  type: TYPE_NORMAL
- en: 'However, if you do wish to use Docker, please follow the installation guide
    provided as the process will vary by distribution: https://docs.docker.com/desktop/install/linux-install/.'
  prefs: []
  type: TYPE_NORMAL
- en: The full documentation can be found at https://docs.docker.com/desktop/.
  prefs: []
  type: TYPE_NORMAL
- en: With a base system that now supports containerization, let’s set up a single-node
    Kubernetes cluster. This will be used to easily and repeatably install the OpenTelemetry
    demo application.
  prefs: []
  type: TYPE_NORMAL
- en: Installing a single-node Kubernetes cluster
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are a few different tools to run local Kubernetes clusters, including
    **Kubernetes in Docker** (**KinD**), **Minikube**, and **MicroK8s**. However,
    we have chosen to use **k3d** due to the ease of installation across operating
    systems. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install k3d using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Full details can be found at [https://k3d.io/stable/](https://k3d.io/stable/).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a k3d cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Validate the cluster status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With a Kubernetes cluster installed, we now need a way to install applications
    easily. OpenTelemetry provides Helm charts, which allow us to deploy applications
    to Kubernetes; we will install Helm to use these.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Helm
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Helm** is a package manager for Kubernetes clusters. A lot of infrastructure-level
    components are provided as Helm charts for installation, and OpenTelemetry is
    no exception. To install Helm, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install Helm using the following command (details can be found at [https://helm.sh/docs/intro/install/](https://helm.sh/docs/intro/install/)):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Validate the Helm installation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With our local system ready to start running applications, we can now install
    the demo application provided by OpenTelemetry.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the OpenTelemetry Demo application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we need to send data from our local machine to our Grafana Cloud instance,
    we need to provide some credentials and tell our local machine where to send data.
    Before we install the demo application, we need to set up access tokens so we
    can send data to our Grafana Cloud stack.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up access credentials
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Access tokens allow the Open Telemetry application to send data securely to
    your Grafana Cloud stack. To set up an access token, we need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Grafana Cloud Portal, select **Access Policies** in the **Security**
    section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Create** **access policy**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose a name and display name, and set **Realm** to **All Stacks**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Write** scope for metrics, logs, and traces and click **Create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the new access policy, click **Add token**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give the token a name and set the expiration date. Click **Create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, copy the token and save it securely.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we’ve created our token, let’s download the GitHub repository for this
    book and set it up.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the repository and adding credentials and endpoints
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Git repository contains configuration files for each of the chapters that
    will use live data. Downloading the repository is simple. Go to the Git repository:
    [https://github.com/PacktPublishing/Observability-with-Grafana](https://github.com/PacktPublishing/Observability-with-Grafana).
    Click on the green **Code** button and follow the instructions to clone the repository.
    Once downloaded, the repository should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.11 – Observability with Grafana repo](img/B18277_figure_3.11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.11 – Observability with Grafana repo
  prefs: []
  type: TYPE_NORMAL
- en: 'To set up the demo application, we need to add the token we saved in the previous
    section and the correct endpoints in the `OTEL-Creds.yaml` file. The information
    you will need is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Password**: This is the token you saved earlier and is shared by each telemetry
    type'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Username**: This is specific to each telemetry type'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Endpoint**: This is also specific to each telemetry type'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s take Loki as an example of how to get this information. In the Grafana
    Cloud Portal, do the following to get the correct information:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Send Logs** button in the Loki box. At the top of the page is
    an information box that looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.12 – Grafana Data Source settings](img/B18277_figure_3.12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.12 – Grafana Data Source settings
  prefs: []
  type: TYPE_NORMAL
- en: The **User** field is used as the username.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `/loki/api/v1/push` to the end of the URL
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For metrics, add `/api/prom/push` to the end of the URL
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For traces, remove `https://` and add `:443` to the end of the URL
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add this information into the relevant fields in the `OTEL-Creds.yaml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With Loki completed, we can follow the same process for Prometheus (click **Send
    Metrics**) and Tempo (click **Send Traces**).
  prefs: []
  type: TYPE_NORMAL
- en: These instructions are repeated and expanded on in the `README.md` file in the
    repository. With the credentials saved, we are now ready to deploy OpenTelemetry.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the OpenTelemetry Collector
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the credentials file updated, we can now install the Helm chart for the
    OpenTelemetry Collector. This is the component that will collect and transmit
    the data produced by the demo application. To proceed with the installation, perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the OpenTelemetry repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the collector with Helm:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Validate that the installation was successful:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We are now ready to install the OpenTelemetry demo application.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the OpenTelemetry demo application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The OpenTelemetry demo application is an example web store that sells telescopes
    and other tools to observe the universe. To install this demo application, follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the demo application with Helm:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Validate that the installation was successful. This process may take a few
    minutes on the first install:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ kubectl port-forward svc/owg-demo-frontendproxy 8080:8080 &
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open a port for browser spans:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check you can access the OpenTelemetry demo application on http://localhost:8080:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.13 – OpenTelemetry demo application](img/B18277_figure_3.13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.13 – OpenTelemetry demo application
  prefs: []
  type: TYPE_NORMAL
- en: Explore the OpenTelemetry demo application to generate some data. Take some
    time to add items to your cart and purchase them. While a load generator is part
    of the installation, it is worth getting familiar with the application as it will
    help put the telemetry generated in context.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that you have an application that produces data, let’s start exploring that
    data.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring telemetry from the demo application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Assuming the installation was successful, you will have data flowing into your
    Grafana instance. To view these, head to your Grafana instance, either from your
    team URL or by clicking **Launch** in the Cloud Portal.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the front page, you should see information detailing your current or billable
    usage of logs, metrics, and traces. If everything is correct, these should all
    be greater than 0\. It may take a few minutes for this to show up completely,
    sometimes up to an hour:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.14 – Grafana Cloud usage](img/B18277_figure_3.14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.14 – Grafana Cloud usage
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t see usage for metrics, logs, and traces, you might need to troubleshoot.
    We have included some tips at the end of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the menu and select **Explore**. This will take you to the page to
    run queries on the telemetry from the demo application. The highest-level concept
    in Grafana is a **data source**. These are selectable just below the main menu.
    Each data source is a connection from the Grafana instance to either a component
    in the Grafana Stack or a connection to another tool. Each data source is self-contained.
    The data source menu can be seen in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.15 – Data source menu](img/B18277_figure_3.15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.15 – Data source menu
  prefs: []
  type: TYPE_NORMAL
- en: You will see that there are data sources for **logs**, **prom** (Prometheus
    metrics), and **traces**. There are other data sources, but for this chapter,
    we will only concentrate on these three, as they are the data sources related
    to the Grafana Stack we have provisioned.
  prefs: []
  type: TYPE_NORMAL
- en: These data sources relate to our Loki, Mimir, and Tempo components, used to
    collect logs, metrics, and traces, respectively. We’ll discuss these next.
  prefs: []
  type: TYPE_NORMAL
- en: Logs in Loki
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Loki stores the log data produced by the demo application. Let’s have a quick
    look at the interface for a Loki data source and see some of the log data the
    demo application is producing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the `grafanacloud-<team name>-logs` data source. In **Label filters**,
    add **exporter = OTLP** and click **Run query**. You should now see a screen like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18277_figure_3.16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Fig 3.16 – Reviewing logs
  prefs: []
  type: TYPE_NORMAL
- en: 'The upper area of the screen is where you enter and modify your query. In the
    middle of the screen, you will see the volume of logs returned by your search
    over time. This can provide a lot of contextual information at a glance. The lower
    part of the screen displays the results of your query:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.17 Query panel details](img/B18277_figure_3.17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.17 Query panel details
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s break the preceding screenshot down into its components:'
  prefs: []
  type: TYPE_NORMAL
- en: You can select the time range and add the query to various tools by clicking
    on **Add**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the buttons at the bottom of this section, you can use **Add query** to
    produce a more complex analysis of the data. **Query history** lets you review
    your query history. **Query inspector** helps to understand how your query is
    performing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Builder** or **Code** selector allows you to switch between the UI-focused
    query builder you see by default and a query language entry box, which is useful
    for directly entering queries.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Kick start your query** button will give you some starter queries and
    the **Label browser** button will let you explore the labels currently available
    in your collected log data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, the **Explain query** slider will give you a detailed explanation of
    each step of the query you currently have.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s take a look at the components in the query result panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.18 – Query result panel details](img/B18277_figure_3.18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.18 – Query result panel details
  prefs: []
  type: TYPE_NORMAL
- en: 'These components can be used as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: You can customize the display of this data to show the timestamp, highlight
    any unique labels, wrap lines, or prettify JSON.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can also apply deduplication.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can choose to view the oldest or newest log events first.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, you can download the data as `.txt` or `.json`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will look at these features in more depth in [*Chapter 4*](B18277_04.xhtml#_idTextAnchor092)
    and introduce the LogQL query language.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have familiarized yourself with the query panels for logs in a
    Loki data source, let’s see how querying metrics from a Mimir data source is very
    similar.
  prefs: []
  type: TYPE_NORMAL
- en: Metrics in Prometheus/Mimir
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Grafana uses similar repeating blocks for querying data. In this section, we
    will explore how to query metrics.
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the **grafanacloud-<team name>-prom** data source. In the **Metric**
    dropdown, select **kafka_consumer_commit_rate** and leave **Label filters** blank.
    Click on **Run query** and you should see a screen like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.19 – Kafka consumer commit rate](img/B18277_figure_3.19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.19 – Kafka consumer commit rate
  prefs: []
  type: TYPE_NORMAL
- en: Similar to Loki, we have a query section at the top, although the structure
    is slightly different. The major difference is the **Options** section, which
    controls how the data is presented. **Legend** manages the graph’s legend display.
    The **Format** option allows you to select between a **Time series** representation
    (the graph shown in the preceding screenshot); a **Table** representation, showing
    each value of each time series; and a **Heatmap** representation. The **Type**
    selector allows you to select either a range of time, the latest instant of each
    time series, or both. The **Exemplars** slider will show trace data that is linked
    to each metric.
  prefs: []
  type: TYPE_NORMAL
- en: The bottom section shows the data, with options to display it in different ways.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see how Grafana represents multiple plots, from the **Metric** dropdown,
    select **process_runtime_jvm_cpu_utilization_ratio** and click **Run query**.
    You should see a chart like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.20 – JVM CPU utilization](img/B18277_figure_3.20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.20 – JVM CPU utilization
  prefs: []
  type: TYPE_NORMAL
- en: Each of the plotted lines in the chart in the preceding screenshot represents
    the CPU utilization of a different service running in the demo application. We
    will look at these features in more depth in [*Chapter 5*](B18277_05.xhtml#_idTextAnchor106)
    and introduce the PromQL query language.
  prefs: []
  type: TYPE_NORMAL
- en: A Tempo trace data source is very similar to a Loki log data source and a Mimir
    metric data source. Let’s look at this now.
  prefs: []
  type: TYPE_NORMAL
- en: Traces in Tempo
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Traces use a little bit more querying, as we have to find and select an individual
    trace, and then show the spans in the trace in detail.
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the **grafanacloud-<team name>-traces** data source. For **Query type**,
    choose **Search**, for **Service Name**, select **checkoutservice**, and click
    **Run query**. You should see a screen like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.21 – Selecting a trace](img/B18277_figure_3.21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.21 – Selecting a trace
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on one of the **Trace ID** links and you will see a screen like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.22 – Trace view](img/B18277_figure_3.22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.22 – Trace view
  prefs: []
  type: TYPE_NORMAL
- en: This view shows the split view that Grafana offers. This can be accessed from
    any data source and can provide the ability to use linked data points to move
    between logs, metrics, and traces to see the same point in time or event in each
    of the telemetry types. If you select the bar between the panels, indicated by
    the number **1** in the preceding screenshot, you can make the trace view bigger
    by clicking and dragging.
  prefs: []
  type: TYPE_NORMAL
- en: Looking through the trace, each line represents a span with information on which
    service was involved alongside specific information from that service. For example,
    **checkoutservice** will show you the count of items in the cart and the shipping
    amount. The bars with each span show the total time that span took and are stacked
    to represent the relative start and end times of the span. You might see that
    **productcatalogueservice** takes up a significant portion of the time in the
    transaction in *Figure 3**.21*.
  prefs: []
  type: TYPE_NORMAL
- en: Adding your own applications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is possible to add your own application to this demo installation. The OpenTelemetry
    Collector has been deployed with receivers available for OTLP-formatted data on
    port `4317` for gRPC data and `4318` for HTTP(s) data. To deploy your application,
    it will need to be packaged as a container and then just follow a standard deployment
    mechanism for a Kubernetes deployment. Please do note that k3d is opinionated
    and by default uses Flannel and Traefik for networking and ingress, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve understood this demo application, let’s look at some troubleshooting
    tips that will help you if you’re facing any issues while setting it up or using
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting your OpenTelemetry Demo installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are various things that could go wrong while using this application, so
    this section is not necessarily exhaustive. We will assume that all the prerequisite
    tools were installed correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s first take a look at the correct formatting of Grafana credentials.
  prefs: []
  type: TYPE_NORMAL
- en: Checking Grafana credentials
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If the OpenTelemetry Collector is giving authentication errors, or you are not
    receiving data from it, it is likely that the credentials are not formatted correctly.
    These details are entered into the `OTEL-Creds.yaml` file from this book’s Git
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Grafana credentials should be formed like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Username**: Number, typically six digits.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Password**: API token, which is a long string of letters and numbers. When
    troubleshooting the token there are some important considerations:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The same token can be shared by all the exporters.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Access policy** associated with the API token needs to be able to write
    logs, metrics and traces. This can be checked in the Grafana Cloud portal.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`loki`: `https://logs-prod-006.grafana.net/loki/api/v1/push`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`prometheusremotewrite`: `https://prometheus-prod-13-prod-us-east-0.grafana.net/api/prom/push`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`otlp` (`tempo`): `tempo-prod-04-prod-us-east-0.grafana.net:443`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The OTLP endpoint for Tempo is different from the others.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you notice that you have made a mistake, you will need to use `helm upgrade`
    to deploy the changes you make to the `OTEL-Creds.yaml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: $ kubectl get pods --selector=app.kubernetes.io/instance=owg
  prefs: []
  type: TYPE_NORMAL
- en: NAME                              READY   STATUS    RESTARTS   AGE
  prefs: []
  type: TYPE_NORMAL
- en: owg-opentelemetry-collector-567579558c-std2x   1/1     Running   0          6h26m
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: $ kubectl logs owg-opentelemetry-collector-567579558c-std2x
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: $ helm upgrade owg open-telemetry/opentelemetry-collector -f OTEL-Collector.yaml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Part 2: Implement Telemetry in Grafana'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This part of the book will take you through the different telemetry sources,
    explaining what they are, when to use them, and problems to watch out for. You
    will look at integrations with major cloud vendors: AWS, Azure, and Google. This
    part will also investigate real user monitoring with Faro, profiling with Pyroscope,
    and performance with k6.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This part has the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B18277_04.xhtml#_idTextAnchor092), *Looking at Logs with Grafana
    Loki*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B18277_05.xhtml#_idTextAnchor106), *Monitoring with Metrics Using
    Grafana Mimir and Prometheus*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B18277_06.xhtml#_idTextAnchor134), *Tracing Technicalities with
    Grafana Tempo*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B18277_07.xhtml#_idTextAnchor147), *Interrogating Infrastructure
    with Kubernetes, AWS, GCP, and Azure*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL

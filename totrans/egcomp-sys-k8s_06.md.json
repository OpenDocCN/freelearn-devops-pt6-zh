["```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: minimal-ingress\n  annotations:\n    kubernetes.io/ingress.class: nginx\n    nginx.ingress.kubernetes.io/rewrite-target: /\nspec:\n  rules:\n  - http:\n      paths:\n      - path: /testpath\n        pathType: Prefix\n        backend:\n          service:\n            name: test\n            port:\n              number: 80\n```", "```\n$ kubectl apply -f minimal-ingress.yaml\n```", "```\n    $ curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3\n    ```", "```\n    $ chmod 700 get_helm.sh\n    $ ./get_helm.sh\n    ```", "```\n    $ helm repo add jetstack https://charts.jetstack.io\n    ```", "```\n    $ helm repo update\n    ```", "```\n    $ helm install \\\n    cert-manager jetstack/cert-manager \\\n    --namespace cert-manager \\\n    --create-namespace \\\n    --version v1.5.4 \\\n    --set prometheus.enabled=false \\\n    --set webhook.timeoutSeconds=4 \\\n    --set prometheus.enabled=false \\\n    --set installCRDs=true\n    ```", "```\n    apiVersion: cert-manager.io/v1\n    kind: ClusterIssuer\n    metadata:\n      name: self-signed-issuer\n    spec:\n      selfSigned: {}\n    ```", "```\n    apiVersion: cert-manager.io/v1\n    kind: Issuer\n    metadata:\n      name: letsencrypt-staging\n    spec:\n      acme:\n        server: https://acme-staging-v02.api.letsencrypt.org/directory\n        email: user@example.com\n        privateKeySecretRef:\n          name: letsencrypt-staging\n        solvers:\n        - http01:\n            ingress:\n              class:  nginx\n    ```", "```\n    $ kubectl apply -f self-signed-issuer.yaml -f letsencrypt-staging.yaml\n    ```", "```\n    $ kubectl create ns nginx-ingress\n    ```", "```\n    $ helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx \n    $ helm repo update \n    ```", "```\n    $ helm install nginx-ingress ingress-nginx/ingress-nginx -n nginx-ingress\n    ```", "```\n    $ helm list -n nginx-ingress\n    ```", "```\n    $ IP_LOADBALANCER=$(kubectl get svc nginx-ingress-ingress-nginx-controller --output jsonpath='{.status.loadBalancer.ingress[0].ip}' -n nginx-ingress)\n    ```", "```\n$ echo $IP_LOADBALANCER\n```", "```\n    $ helm uninstall nginx-ingress -n nginx-ingress\n    ```", "```\n    $ kubectl create deploy myapp --image=nginx\n    ```", "```\n    $ kubectl expose deploy myapp --type=ClusterIP --port=80\n    ```", "```\n    apiVersion: networking.k8s.io/v1\n    kind: Ingress\n    metadata:\n      name: myapp-ingress-tls-nginx\n      annotations:\n        kubernetes.io/ingress.class: \"nginx\"\n        cert-manager.io/cluster-issuer: self-signed-issuer\n    spec:\n      tls:\n      - hosts:\n          - 192.168.0.241.nip.io\n        secretName: myapp-tls-nginx\n      rules:\n      - host: 192.168.0.241.nip.io\n        http:\n          paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name: myapp\n                port:\n                  number: 80\n    ```", "```\ncert-manager.io/cluster-issuer: letsencrypt-staging\n```", "```\n    192.168.0.241 myapp-test-nginx.test\n    ```", "```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: myapp-ingress-tls-nginx\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\n    cert-manager.io/cluster-issuer: self-signed-issuer\nspec:\n  tls:\n  - hosts:\n      - myapp-test-nginx.test\n    secretName: myapp-tls-nginx\n  rules:\n  - host: myapp-test-nginx.test\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: myapp\n            port:\n              number: 80\n```", "```\n    $ kubectl apply -f myapp-ingress-tls-nginx.yaml\n    ```", "```\n$ curl -k https://192.168.0.240.nip.io\nor \n$ curl -k https://myapp-test-nginx.test\n```", "```\n    $ kubectl delete -f myapp-ingress.yaml\n    ```", "```\n    $ IP_LOADBALANCER=$(kubectl get svc traefik --output jsonpath='{.status.loadBalancer.ingress[0].ip}' -n kube-system)\n    ```", "```\n$ echo $IP_LOADBALANCER\n```", "```\n192.168.0.240 myapp-test-traefik.test\n```", "```\n    apiVersion: networking.k8s.io/v1\n    kind: Ingress\n    metadata:\n      name: myapp-ingress-traefik\n      annotations:\n        kubernetes.io/ingress.class: \"traefik\"\n        cert-manager.io/cluster-issuer: self-signed-issuer\n        traefik.ingress.kubernetes.io/router.tls: \"true\"\n    spec:\n      tls:\n      - hosts:\n          - myapp-test-traefik.test\n        secretName: myapp-tls-traefik\n      rules:\n      - host: myapp-test-traefik.test\n        http:\n          paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name: myapp\n                port:\n                  number: 80\n    ```", "```\n    $ kubectl apply -f myapp-ingress-tls-traefik.yaml\n    ```", "```\n    apiVersion: networking.k8s.io/v1\n    kind: Ingress\n    metadata:\n      name: myapp-ingress-traefik\n      annotations:\n        kubernetes.io/ingress.class: \"traefik\"\n        cert-manager.io/cluster-issuer: self-signed-issuer\n        traefik.ingress.kubernetes.io/router.tls: \"true\"\n    spec:\n      tls:\n      - hosts:\n          - myapp-test-traefik.test\n        secretName: myapp-tls-traefik\n      rules:\n      - host: myapp-test-traefik.test\n        http:\n          paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name: myapp\n                port:\n                  number: 80\n    ```", "```\n    $ kubectl apply -f myapp-ingress-tls-traefik.yaml\n    ```", "```\n    $ kubectl apply -f https://projectcontour.io/quickstart/contour.yaml\n    ```", "```\n    $ IP_LOADBALANCER=$(kubectl get svc envoy--output jsonpath='{.status.loadBalancer.ingress[0].ip}' -n projectcontour)\n    ```", "```\n$ echo $IP_LOADBALANCER\n```", "```\n192.168.0.242 myapp-test-contour.test\n```", "```\n    apiVersion: networking.k8s.io/v1\n    kind: Ingress\n    metadata:\n      name: myapp-ingress-tls-contour\n      annotations:\n        kubernetes.io/ingress.class: \"contour\"\n        cert-manager.io/cluster-issuer: self-signed-issuer\n    spec:\n      tls:\n      - hosts:\n          - myapp-test-contour.test\n        secretName: myapp-tls-contour\n      rules:\n      - host: myapp-test-contour.test\n        http:\n          paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name: myapp\n                port:\n                  number: 80\n    ```", "```\n    $ kubectl apply –f myapp-ingress-tls-contour\n    ```", "```\napiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: myapp-tls-contour\nspec:\n  commonName: myapp-test-contour.test\n  dnsNames:\n  - myapp-test-contour.test\n  issuerRef:\n    name: self-signed-issuer\n    kind: ClusterIssuer\n  secretName: httpbinproxy\n```", "```\nmyapp-ingress-http-proxy-tls-contour.yaml\napiVersion: projectcontour.io/v1\nkind: HTTPProxy\nmetadata:\n  name: myapp-ingress-http-proxy-tls-contour\nspec:\n  virtualhost:\n    fqdn: myapp-test-contour.test\n    tls:\n      secretName: myapp-tls-contour\n    rateLimitPolicy:\n      local:\n        requests: 3\n        unit: minute\n        burst: 1\n  routes:\n  - services:\n    - name: myapp\n      port: 80\n```", "```\n$ curl -k https://myapp-test-contour.test\n```", "```\n    $ kubectl logs -f deploy/nginx-ingress-ingress-nginx-controller -n nginx-ingress\n    ```", "```\n    $ kubectl logs -f deploy/traefik -n kube-system\n    ```", "```\n    $ kubectl logs -f deploy/contour -n projectcontour\n    ```", "```\n$ kubectl get svc\n$ kubectl get ingresses\n```", "```\n$ kubectl get OBJECT_NAME\n```"]
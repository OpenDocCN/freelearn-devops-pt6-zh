["```\nterraform {\n...\n  backend \"s3\" {\n    bucket = \"state-bucket\"\n    key    = \"eks-state\"\n    region = \"eu-west-1\"\n  }\n```", "```\n$ terraform init\n```", "```\n$ terraform plan\n```", "```\n$ terraform apply\n```", "```\n$ terraform apply -target=aws_kms_key.a\n```", "```\n$ terraform import aws_kms_key.a 136c1dcb-42b0-4b9a-a569-152b9aba63e1\n```", "```\nmodule \"eks_ksm_vpc\" {\n  source  = \"terraform-aws-modules/vpc/aws\"\n  version = \"5.0.0\"\n  name = \"eks-ksm-vpc\"\n  cidr = \"10.0.0.0/16\"\n  azs  = slice(var.availability_zones, 0, 3)\n  private_subnets = [\"10.0.1.0/24\", \"10.0.2.0/24\", \"10.0.3.0/24\"]\n  public_subnets  = [\"10.0.4.0/24\", \"10.0.5.0/24\", \"10.0.6.0/24\"]\n  enable_nat_gateway   = true\n  single_nat_gateway   = true\n  enable_dns_hostnames = true\n...\n}\n```", "```\nmodule \"eks\" {\n  source  = \"terraform-aws-modules/eks/aws\"\n  ...\n  cluster_name    = var.cluster_name\n  vpc_id          = module.eks_ksm_vpc.vpc_id\n  subnet_ids      = module.eks_ksm_vpc.private_subnets\n  cluster_endpoint_public_access = true\n  eks_managed_node_group_defaults = {\n    ami_type = \"AL2_x86_64\"\n  }\n  create_cloudwatch_log_group = true\n  eks_managed_node_groups = {\n    one = {\n      ...\n      min_size     = 1\n    }\n  }\n}\n```", "```\n$ aws eks --region eu-west-1 update-kubeconfig --name eks-ksm-cluster\n```", "```\n$ kubectl get nodes\nNAME                                  STATUS   ROLES    AGE    VERSION\nip-10-0-2-231.eu-west-1.compute.internal   Ready    <none>   6m5s   v1.24.15-eks-a5565ad\n```", "```\nresource \"aws_secretsmanager_secret\" \"ksm_service_token\" {\n  name = \"service-token\"\n  replica {\n    region = \"eu-central-1\"\n  }\n  recovery_window_in_days {\n    ...\n  }\n}\n```", "```\nresource \"aws_secretsmanager_secret_version\" \"ksm_service_token_first_version\" {\n  secret_id     = aws_secretsmanager_secret.ksm_service_token.id\n  secret_string = \"a-service-token\"\n}\n```", "```\nresource \"aws_iam_role\" \"eks_secret_reader_role\" {\n  name = \"eks-secret-reader\"\n  assume_role_policy = jsonencode({\n    Version = \"2012-10-17\",\n    Statement = [\n      {\n        Effect = \"Allow\",\n        \"Principal\": {\n          \"Federated\": \"arn:aws:iam::${data.aws_caller_identity.current.account_id}:oidc-provider/${module.ksm_eks.oidc_provider}\"\n        }\n        \"Action\": \"sts:AssumeRoleWithWebIdentity\",\n        \"Condition\": {\n          \"StringEquals\": {\n            \"${module.ksm_eks.oidc_provider}:aud\": \"sts.amazonaws.com\",\n            \"${module.ksm_eks.oidc_provider}:sub\": \"system:serviceaccount:default:service-token-reader\"\n        }\n      }\n      }\n    ]\n  })\n}\nresource \"aws_iam_role_policy_attachment\" \"esrrs\" {\n  policy_arn = aws_iam_policy.ksm_service_token_reader.arn\n  role       = aws_iam_role.eks_secret_reader_role.name\n}\n```", "```\n$ aws secretsmanager create-secret --name service-token --secret-string a-service-token  --add-replica-regions Region=eu-central-1\n```", "```\n...\n$ aws iam create-role --role-name eks-secret-reader --assume-role-policy-document file://eks-reader-trust-policy.json\n...\n$ aws iam create-policy --policy-name get-service-token --policy-document  file://policy.json\n...\n$ aws iam attach-role-policy --role-name eks-secret-reader --policy-arn arn:aws:iam::$account_id:policy/get-service-token\n```", "```\n$ helm repo add secrets-store-csi-driver https://kubernetes-sigs.github.io/secrets-store-csi-driver/charts\n$ helm install -n kube-system csi-secrets-store secrets-store-csi-driver/secrets-store-csi-driver\n$ helm repo add aws-secrets-manager https://aws.github.io/secrets-store-csi-driver-provider-aws $ helm install -n kube-system secrets-provider-aws aws-secrets-manager/secrets-store-csi-driver-provider-aws\n```", "```\n$ kubectl get daemonset -n kube-system\nNAME         DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR              AGE   <none>                     47m\n...\nsecrets-provider-aws-secrets-store-csi-driver-provider-aws   1         1         1       1            1           kubernetes.io/os=linux     44s\n```", "```\napiVersion: secrets-store.csi.x-k8s.io/v1\nkind: SecretProviderClass\nmetadata:\n  name: service-token\nspec:\n  provider: aws\n  parameters:\n    objects: |\n        - objectName: \"arn:aws:secretsmanager:eu-west-1:1111111:secret:service_token-IJ2VLg\"\n```", "```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  annotations:\n    eks.amazonaws.com/role-arn: \"arn:aws:iam::11111:role/eks-secret-reader\"\n  name: service-token-reader\n  namespace: default\n```", "```\nkind: Pod\napiVersion: v1\nmetadata:\n  name: nginx\nspec:\n  serviceAccountName: service-token-reader\n  containers:\n  - image: nginx\n    name: nginx\n    volumeMounts:\n    - name: secret-from-asm\n      mountPath: \"/mnt/secrets-store\"\n      readOnly: true\n  volumes:\n    - name: secret-from-asm\n      csi:\n        driver: secrets-store.csi.k8s.io\n        readOnly: true\n        volumeAttributes:\n          secretProviderClass: \"service-token\"\n```", "```\n$ kubectl exec -it nginx cat /mnt/secrets-store/arn:aws:secretsmanager:eu-west-1:274402012893:secret:service_token-IJ2VLg\n```", "```\nfields @timestamp, @message, @logStream, @log\n| filter @message like 'audit-test'\n| sort @timestamp desc\n| limit 20\n```", "```\n{\n    \"userIdentity\": {\n        \"type\": \"AssumedRole\",\n        \"principalId\": \"id:secrets-store-csi-driver-provider-aws\",\n        \"arn\": \"arn:aws:sts::1111111:assumed-role/eks-secret-reader/secrets-store-csi-driver-provider-aws\",\n    ...\n        }\n    },\n    \"eventSource\": \"secretsmanager.amazonaws.com\",\n    \"eventName\": \"GetSecretValue\",\n    ...\n    \"requestParameters\": {\n        \"secretId\": \"arn:aws:secretsmanager:eu-west-1:11111111:secret:service_token-93z7he\"\n    },\n    \"responseElements\": null,\n    ...\n}\n```", "```\nresource \"aws_kms_key\" \"ksm_kms_key\" {\n  description             = \"ksm_kms_key\"\n  deletion_window_in_days = 30\n  enable_key_rotation     = true\n}\n```", "```\nmodule \"ksm_eks\" {\n    ...\n  create_kms_key = false\n  cluster_encryption_config = {\n    resources = [\"secrets\"]\n    provider_key_arn = aws_kms_key.ksm_kms_key.arn\n  }\n  ...\n}\n```", "```\n{\n    \"eventSource\": \"kms.amazonaws.com\",\n    \"eventName\": \"Decrypt\",\n    \"awsRegion\": \"eu-west-1\",\n    \"sourceIPAddress\": \"secretsmanager.amazonaws.com\",\n    \"userAgent\": \"secretsmanager.amazonaws.com\",\n    \"requestParameters\": {\n        \"encryptionContext\": {\n            \"SecretARN\": \"arn:aws:secretsmanager:eu-west-1:1212222223:secret:service_token-93z7he\",\n            \"SecretVersionId\": \"278A157C-EA85-4211-9854-D329D3C9089F\"\n        },\n        \"encryptionAlgorithm\": \"SYMMETRIC_DEFAULT\"\n    },\n    \"resources\": [\n        {\n            \"ARN\": \"arn:aws:kms:eu-west-1:111111111:key/aaaaaaa-aaaa-458f-b8d1-aefa58b68d8a\"\n        }\n    ],\n    \"eventType\": \"AwsApiCall\",\n}\n```"]
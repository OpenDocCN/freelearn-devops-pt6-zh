- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Securing and Accessing Clusters on EKS
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在EKS上保护和访问集群
- en: This chapter will introduce the general concepts for authentication and authorization
    in Kubernetes, and will also discuss the differences between these concepts and
    **Elastic Kubernetes Service** (**EKS**). We will also look at how to configure
    EKS and client tools to securely communicate.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍Kubernetes中认证和授权的一般概念，还将讨论这些概念与**弹性Kubernetes服务**（**EKS**）之间的差异。我们还将了解如何配置EKS和客户端工具以安全地进行通信。
- en: 'Authentication verifies the identity of a user or service, and authorization
    manages what they can do. In this chapter, we will review the mechanism used in
    EKS to implement authentication and authorization so you to use them to build
    secure clusters. Specifically, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 认证验证用户或服务的身份，授权则管理他们可以执行的操作。在本章中，我们将回顾EKS中实现认证和授权的机制，以便你可以利用这些机制构建安全的集群。具体而言，我们将讨论以下主题：
- en: Understanding key Kubernetes concepts
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解关键的Kubernetes概念
- en: Configuring EKS cluster access
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置EKS集群访问
- en: Understanding key Kubernetes concepts
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解关键的Kubernetes概念
- en: 'Kubernetes clusters have two categories of users: service accounts managed
    by Kubernetes, and normal users (administrators, developers, etc.). **Kubernetes**
    (**K8s**) is extensible by design and supports multiple authentication plugins.
    We will focus on the most common one, client certificates, while discussing generic
    user authentication/authorization in Kubernetes.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes集群有两类用户：由Kubernetes管理的服务账户和普通用户（如管理员、开发人员等）。**Kubernetes**（**K8s**）具有可扩展性，支持多个认证插件。我们将重点讨论最常见的客户端证书，同时讨论Kubernetes中的通用用户认证/授权。
- en: Using the client certificates’ plugin, users are considered authenticated when
    they furnish a valid certificate signed by the cluster’s **certificate** **authority**
    (**CA**).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 使用客户端证书插件时，用户在提供由集群**证书** **授权机构**（**CA**）签名的有效证书时会被视为已认证。
- en: With a valid certificate, Kubernetes determines the username from the common
    name field in the `/CN=bob`) while the group information is provided in the `/O=dev`).
    From this point onwards, the **role-based access control** (**RBAC**) sub-system
    will determine whether the user is authorized to perform a particular operation
    on a resource.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有有效证书后，Kubernetes从`/CN=bob`中的常用名称字段确定用户名，而组信息则提供在`/O=dev`中。从此时起，**基于角色的访问控制**（**RBAC**）子系统将决定用户是否有权限在资源上执行特定操作。
- en: The following diagram illustrates this concept. Please note that service accounts
    will be discussed in [*Chapter 13*](B18129_13.xhtml#_idTextAnchor193), *Using
    IAM for Granting Access* *to Applications*.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示说明了这一概念。请注意，服务账户将在[*第13章*](B18129_13.xhtml#_idTextAnchor193)中讨论，*使用IAM授予应用程序访问权限*。
- en: '![Figure 6.1 – Standard Kubernetes RBAC sub-system](img/B18129_06_01.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![图6.1 – 标准Kubernetes RBAC子系统](img/B18129_06_01.jpg)'
- en: Figure 6.1 – Standard Kubernetes RBAC sub-system
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1 – 标准Kubernetes RBAC子系统
- en: 'In order to generate the certificate for a normal user, you need to generate
    a PKI private key and CSR using an operating system tool such as OpenSSL (see
    the following example) and then export the CSR request in base64 encoding for
    signing by the cluster CA:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为普通用户生成证书，你需要使用操作系统工具（如OpenSSL）生成PKI私钥和CSR（见下例），然后将CSR请求以base64编码导出，由集群CA进行签名：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The resulting encoded string can be submitted to the K8s cluster for signing
    using the `CertificateSigningRequest` kind. An example is shown here:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的编码字符串可以通过`CertificateSigningRequest`类型提交给K8s集群进行签名。以下是一个示例：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now that we understand how standard K8s authentication works, let’s move on
    to how it works in EKS by default.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了标准K8s认证的工作原理，接下来让我们看看它在EKS中的默认工作方式。
- en: Understanding the default EKS authentication method
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解默认的EKS认证方法
- en: Managing users, groups, and certificates for one or more K8s clusters can be
    an operational challenge. Thankfully, EKS offloads this by default to the AWS
    **Identity and Access Management** (**IAM**) service. IAM is a globally distributed
    service that allows you to create users and groups, as well as assign AWS permissions
    including the AWS EKS API.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 管理一个或多个K8s集群的用户、组和证书可能是一个运营挑战。幸运的是，EKS默认将此任务转交给AWS **身份和访问管理**（**IAM**）服务。IAM是一个全球分布的服务，允许你创建用户和组，并分配包括AWS
    EKS API在内的AWS权限。
- en: By default, when you create an EKS cluster, the IAM entity that creates that
    cluster is automatically granted `system:masters` permissions, effectively making
    it the system administrator role for the EKS cluster. This means that without
    additional configuration, the IAM identity used for cluster creation is the only
    identity that can perform any functions on the EKS cluster.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: This is a typical error when starting out with EKS, as a CI/CD pipeline may
    be used to create your cluster, but its IAM identity is different to that of the
    regular users. Therefore, when they go to interact with the cluster, they have
    no K8s privileges. The EKS cluster comes pre-integrated with AWS IAM. The following
    diagram illustrates how the user and the EKS cluster interact with the IAM service.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2 – EKS authentication flow](img/B18129_06_02.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
- en: Figure 6.2 – EKS authentication flow
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now discuss in detail each of the steps in the EKS authentication flow
    shown in *Figure 6**.2*:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '0. The starting point is for the client to retrieve the cluster configuration
    and update your `update-kubeconfig` CLI command is the simplest way to do this
    and will use the `DescribeCluster` API operation. Any user using this API call
    must have an IAM identity and the privilege to use this API to automatically update
    the config file. An example is shown here for the cluster called `mycluster`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'A bearer token now needs to be generated and used in each EKS API (`get-token`
    CLI command or automatically using the AWS IAM Authenticator:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The bearer token is added to the request either manually (on the `kubectl` command
    line for example) or automatically by the IAM authenticator/`kubectl` command.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This bearer token is now validated against the AWS IAM service using a token—`authentication-webhook`—which
    is being used by the IAM authenticator service in EKS. If it is valid, then a
    request is passed to the K8s RBAC sub-system.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The set of permissions granted by IAM policies associated with an authenticated
    IAM identity has no bearing EKS cluster permissions. The bridge between the IAM
    and RBAC sub-systems is the `aws-auth` ConfigMap that provides the mappings between
    IAM principals (roles/users/groups) and Kubernetes subjects (users/groups).
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The operation (in the case of authorization) is returned to the client, or alternatively
    they receive a "not authorized" response.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: So far, we’ve discussed how user identities are authenticated. The next section
    describes how the request from an authenticated user is authorized.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the aws-auth ConfigMap for authorization
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will see how to configure and maintain the `aws-auth` ConfigMap later on
    in this section, but it’s important to understand that this ConfigMap manages
    the relationship between the AWS IAM identity, and the Kubernetes identity and
    permissions. Without a corresponding entry in the `aws-auth` ConfigMap, IAM users
    or groups won’t have any permissions to perform any K8s operations, regardless
    of what permissions are assigned through the IAM role or policy.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: 'EKS uses **OpenID Connect** (**OIDC**) identity providers as a method to authenticate/authorize
    users to your cluster. This means that each cluster is given a unique OIDC identity
    that can be used as a trusted entity in the AWS IAM policy. You can validate the
    identity of the cluster using the following command:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: OIDC identity providers can be used with AWS IAM or with other OIDC-compliant
    providers. This means you can manage users/passwords and permissions in a platform
    such as GitHub Enterprise or GitLab instead of AWS IAM, and use the OIDC provider
    to authenticate/authorize users. You can associate one OIDC identity provider
    to your cluster so you cannot use IAM and another identity provider.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the cluster endpoint
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, we have talked about the ability to authenticate and authorize operations
    on an EKS cluster; however, to do so you will need to be able to communicate with
    the cluster’s endpoint over HTTPS. Once you’ve updated your `certificate-authority-data`).
    How you access that endpoint will depend on how you have configured your EKS endpoint,
    either as public only, private only, or both.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: 'As discussed previously, EKS is a managed service, so the control plane (API/etcd)
    servers run in a VPC managed by AWS. The worker nodes (typically EC2) run in the
    customer’s VPC and communicate with the control plane using whatever IP address
    is returned through the DNS lookup of the server. The following diagram illustrates
    how the user accesses public or private EKS endpoints:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.3 – EKS endpoint access](img/B18129_06_03.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
- en: Figure 6.3 – EKS endpoint access
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps needed to access EKS endpoint, as shown in the preceding diagram,
    are as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: The initial requirement is to obtain the EKS cluster’s DNS name. In most user
    access scenarios, this step has already been done using the `update-kubeconfig`
    CLI command but when worker nodes are created, they will make a call to the AWS
    EKS API to get the cluster configuration and DNS information. At time of writing,
    the AWS EKS API is a public API only (no private endpoint) so all worker nodes
    need access to the public API through a NAT, internet, and/or transit gateway.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For public endpoints, the DNS name resolves to a public **Network Load Balancer**
    (**NLB**) hosted in the AWS-managed VPC. This means all user and worker node communication
    goes through this public endpoint (although worker node traffic doesn’t leave
    the AWS backbone).
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For a private endpoint, the DNS name resolves to the private endpoint attached
    to the customer’s VPC (this uses a privately hosted Route 53 zone managed by AWS).
    More specifically, it resolves to a VPC private IP address, meaning it is only
    accessible in the VPC or through a private connection using a transit gateway,
    a VPN, and/or Direct Connect. In this case, the private connection between the
    customer’s VPC and the VPC managed by AWS is bidirectional, being used by the
    control plane and the users/worker nodes.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于私有端点，DNS名称解析到附加到客户VPC的私有端点（这使用由AWS管理的私有托管Route 53区域）。更具体地说，它解析到VPC私有IP地址，这意味着它只能在VPC内部或通过使用传输网关、VPN和/或Direct
    Connect的私有连接进行访问。在这种情况下，客户的VPC和AWS管理的VPC之间的私有连接是双向的，由控制平面和用户/工作节点共同使用。
- en: It is possible to enable both public and private endpoints, in which case users
    can access the K8s API through the public NLB, and also through the private endpoint.
    In this model, all API server/worker node communication occurs through the private
    endpoint.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 可以启用公共和私有端点，在这种情况下，用户可以通过公共NLB访问K8s API，也可以通过私有端点访问。在此模型中，所有API服务器/工作节点通信都通过私有端点进行。
- en: Configuring EKS cluster access
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置EKS集群访问
- en: In this section, we will look in more detail at the configuration of the two
    key files needed to securely access your cluster, `kubeconfig` and `aws-auth`,
    along with the use of IP controls to secure EKS endpoints.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将更详细地查看访问集群所需的两个关键文件的配置：`kubeconfig`和`aws-auth`，以及如何使用IP控制来保护EKS端点。
- en: Configuring .kube/config
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置.kube/config
- en: 'The `clusters` list has an entry for each cluster you want to access, containing
    both the DNS name and the TLS certificate to allow communication to take place.
    These entries can be added manually or through the `update-kubeconfig` CLI command.
    The following is an example `kubeconfig` file:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`clusters`列表中包含每个要访问的集群条目，包含DNS名称和TLS证书以允许通信。这些条目可以手动添加或通过`update-kubeconfig`
    CLI命令添加。以下是一个示例`kubeconfig`文件：'
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `context` section in the `kubeconfig` file is used to group access parameters
    together for a client tool such as kubectl. You can have different contexts to
    access a single cluster. In the following example, we are grouping the `myuser`
    user and `mycluster` cluster together in the `mycontext` context:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`kubeconfig`文件中的`context`部分用于将访问参数分组到一个客户端工具中，例如kubectl。你可以为访问单个集群创建不同的上下文。在以下示例中，我们将`myuser`用户和`mycluster`集群组合到`mycontext`上下文中：'
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Finally, the `users` section in the `kubeconfig` file holds the specific parameters
    for the user (associated with the context). In the following example, the user
    uses the `aws eks get-token` command to automatically provide the bearer token
    for authentication based on the IAM identity configured for the caller of the
    `mycluster` cluster, which is in the `eu-central-1` Region in account `111999`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`kubeconfig`文件中的`users`部分保存与上下文相关的用户特定参数。在以下示例中，用户使用`aws eks get-token`命令基于为`mycluster`集群调用者配置的IAM身份自动提供承载令牌，该集群位于`eu-central-1`区域，账户ID为`111999`：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Configuring your `kubeconfig` file is a critical part of establishing communication
    with the EKS cluster and the following commands can be used to validate/view the
    configuration:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 配置你的`kubeconfig`文件是与EKS集群建立通信的关键部分，以下命令可用于验证/查看配置：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: So far, we’ve reviewed the way a K8s client, such as kubectl, can provide the
    identity of a user to the API servers. The next section reviews how that user’s
    identity is authorized using the `aws-auth` Config Map.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经回顾了K8s客户端（如kubectl）如何向API服务器提供用户身份。下一部分将回顾如何使用`aws-auth`配置映射授权该用户身份。
- en: Configuring the aws-auth Config Map
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置aws-auth配置映射
- en: 'A correctly configured client’s `kubeconfig` file provides the bearer token
    that allows EKS to identify and validate the user. Once their identity has been
    validated, the RBAC subsystem and `aws-auth` ConfigMap will then validate whether
    they have the correct permissions. We add users’ permissions via role details
    in the ConfigMap, under the `data` section. Each entry supports the following
    parameters:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 正确配置的客户端`kubeconfig`文件提供承载令牌，使EKS能够识别和验证用户。一旦验证了身份，RBAC子系统和`aws-auth`配置映射将验证用户是否具有正确的权限。我们通过在配置映射的`data`部分中的角色详细信息来添加用户权限。每个条目支持以下参数：
- en: '`groups`: A list of Kubernetes groups to which the role is mapped.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`groups`：角色映射到的Kubernetes组列表。'
- en: '`rolearn`: The ARN of the IAM role associated with the user bearer token.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`username`: A username within Kubernetes to map to the IAM role. As discussed
    previously, this is something that is not used and need not be mapped to an existing
    user.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the following example, the `myIAMRole` IAM role in account `111999` is mapped
    to the `system:masters` group and assigned the K8s username of `creator-account`.
    This is an example of the default configuration you will see in the `aws-auth`
    ConfigMap:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You can modify the ConfigMap directly using either `kubectl` or an IAC tool
    such as `eksctl` as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This approach is not advised as there is no version/change control. A better
    approach is to place the ConfigMap manifest into a Git repository and then use
    a CI/CD pipeline to push/pull changes. You can still use `kubectl` or `eksctl`
    to make the changes, but it’s done using a file under version control and managed
    through an audited pipeline that could have any number of build checks or tests.
    Typically, the following steps will be followed for the deployment of the EKS
    cluster and the incremental management of ConfigMap:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Deploy the EKS cluster using your preferred infrastructure-as-code tool and/or
    pipeline.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Export the default `aws-auth` ConfigMap into a separate version-controlled
    repository/manifest with its own deployment pipeline. This can be done by running
    the following command:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Leverage a suitable code review process, to add new groups/users and role mappings.
    Please note, the IAM role referenced in the configuration must exist, due to which
    it must be created first in the AWS IAM service.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update your cluster using a push (CI/CD) or pull (GitOps) method using the
    following command:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Steps 3 and 4 need to be repeated on an ongoing basis as you add and delete
    users/groups to and from the `aws-auth` file.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: So far, we’ve discussed how users are authenticated/authorized when a request
    arrives at the K8s API server endpoint. In the next section, we consider how you
    can secure access to the API endpoint.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: Protecting EKS endpoints
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'On the whole, it is generally better to use private EKS endpoints. While accessing
    any EKS endpoint requires a valid TLS certificate (if using client certificates)
    and the appropriate IAM/RBAC permissions, if these were compromised and you had
    a public endpoint, then your cluster would be accessible from anywhere in the
    world. If you need to use a public endpoint, then make sure to configure public
    access CIDR ranges to restrict which public IP addresses have access. In the following
    example, access to the `mycluster` public cluster has been restricted to a single
    `/32` IP address:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The EKS API network interfaces are protected by a separate security group that
    provides stateful IP ingress protection. So, while EKS private endpoints can only
    be accessed from the VPC or connected private networks, the security groups associated
    with the API endpoint (shown as `securityGroupIds` in the following example) can
    be used as an additional control to restrict access to any specific IP addresses:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Please note that the API security groups are different from the `clusterSecurityGroupId`
    security group, which is used to protect worker nodes.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: With that, you have now understood or have at least gained familiarity with
    how EKS performs authentication and authorization and how to protect your API
    endpoints. We’ll now revisit the key learning points from this chapter.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored the basic concepts of authentication and authorization
    in native Kubernetes and how EKS differs. We described how EKS, by default, is
    integrated with AWS IAM and that a bearer code needs to be generated by a client
    tool such as `kubectl` in order for EKS to authenticate the user. This bearer
    code can be generated manually using the `get-token` CLI action or automatically
    using the `kubeconfig` file and will be submitted on every API request and be
    automatically validated by EKS.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: We also described how the `aws-auth` ConfigMap is used by the Kubernetes RBAC
    sub-system to accept or deny any API request. It is important to place this file
    under version control and manage changes using a CI/CD pipeline as, by default,
    only the cluster creator has permission to do anything on the cluster.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we talked about how you can secure access to the API endpoints using
    IP whitelisting and/or security groups and how it is typically better to use private
    clusters.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss Kubernetes networking and how EKS can be
    configured to use an **AWS Virtual Private** **Cloud** (**VPC**).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: Further readings
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Overview of the AWS IAM authenticator:'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.aws.amazon.com/eks/latest/userguide/install-aws-iam-authenticator.html](https://docs.aws.amazon.com/eks/latest/userguide/install-aws-iam-authenticator.html)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: 'Overview of webhook authentication in K8s:'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://kubernetes.io/docs/reference/access-authn-autWhz/authentication/#webhook-token-authentication](https://kubernetes.io/docs/reference/access-authn-autWhz/authentication/#webhook-token-authentication)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: 'Overview of the AWS OIDC Provider Integration:'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/awsdocs/amazon-eks-user-guide/blob/master/doc_source/authenticate-oidc-identity-provider.md](https://github.com/awsdocs/amazon-eks-user-guide/blob/master/doc_source/authenticate-oidc-identity-provider.md)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL

- en: <st c="0">4</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2">Building a Serverless Recipe-Sharing Application</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="50">In the previous chapter, you developed a recipe sharing application
    with a frontend hosted on Amazon S3 and CloudFront, and a backend using Amazon
    EC2 instances and DynamoDB.</st> <st c="226">For the end user, only the functionalities
    and the overall user experience are visible, but it is up to the provider to define
    how to architect the application and which technologies</st> <st c="409">to use.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="416">Traditional application deployment involves provisioning and managing
    servers, configuring environments, scaling resources, applying security patches,
    and monitoring system health.</st> <st c="598">This approach requires significant
    operational overhead and often leads to inefficient resource utilization as resources
    are provisioned for</st> <st c="739">peak demand.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="751">In contrast, serverless computing abstracts away the underlying
    infrastructure, allowing developers to focus solely on writing code.</st> <st
    c="885">With serverless, the provisioning, scaling, and server management are
    handled by the cloud provider, enabling a more agile, event-driven approach with
    a</st> <st c="1038">pay-as-you-go model.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1058">Event-driven architectures consist of separate services that interact
    with each other through events.</st> <st c="1161">When a user requests to create
    a new recipe, for example, that request becomes an event.</st> <st c="1250">This
    event then triggers the necessary code to handle the business logic related to
    creating the recipe.</st> <st c="1355">By using this approach, the system doesn’t
    need to have all the resources prepared and allocated in advance.</st> <st c="1464">Instead,
    it responds to events as they occur, making the architecture more efficient</st>
    <st c="1549">and adaptable.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1563">In this chapter, you will experiment with the adoption of serverless
    technologies by rearchitecting your recipe-sharing application with solely</st>
    <st c="1708">serverless technologies.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1732">In summary, this chapter covers the following topics</st> <st c="1786">in
    order:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1795">What you are going to build – the latest version of the recipe
    sharing application solely supported by</st> <st c="1899">serverless technologies</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1922">How you are going to build it – Amazon API Gateway and Lambda for
    the backend and Amazon Cognito</st> <st c="2020">for authentication</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="2038">Building it – through CloudFormation and using the</st> <st c="2090">AWS
    console</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="2101">How to improve the solution – support media content for your recipes
    and extend authentication to the end users for a more</st> <st c="2225">customized
    experience</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="2246">By the end of this chapter, you will gain hands-on experience in
    rearchitecting a dynamic web application using AWS serverless technologies such
    as Lambda, API Gateway, Cognito, S3, and DynamoDB.</st> <st c="2443">You will
    also understand the benefits of serverless computing, such as scalability and
    cost-effectiveness, in modern</st> <st c="2560">application development.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2584">Technical requirements</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2607">To follow along and implement your serverless version of the recipe-sharing
    application, you will need to have access to your own</st> <st c="2738">AWS account.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2750">Also, this book has a dedicated folder within its GitHub repository,
    where you can find the necessary code snippets to follow</st> <st c="2877">along:</st>
    [<st c="2884">https://github.com/PacktPublishing/AWS-Cloud-Projects/tree/main/chapter4/code</st>](https://github.com/PacktPublishing/AWS-Cloud-Projects/tree/main/chapter4/code)<st
    c="2961">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2962">Scenario</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2971">After successfully deploying your personal website for your CV
    as part of</st> [*<st c="3046">Chapter 2</st>*](B22051_02.xhtml#_idTextAnchor032)<st
    c="3055">, you have had your first experience with cloud technologies and started
    gaining confidence in this area.</st> <st c="3161">In the previous chapter, with
    your recipe-sharing application, you evolved to a more complex application with
    a backend to handle recipe operations such as creation, deletion, and retrieval,
    and your user base grew more</st> <st c="3381">than expected.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3395">Your application is now considered one of the most popular apps
    for recipes and cooking.</st> <st c="3485">You are spending more time scaling
    and managing infrastructure than investing in improving your application based
    on valuable user feedback, not to mention the impact in terms of cost as the application’s
    popularity continues</st> <st c="3711">to grow.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3719">Last month, you attended a conference about serverless technologies,
    and you learned that they really fit your needs.</st> <st c="3838">The more you
    explore, the more you realize that they can provide a more efficient, scalable,
    and cost-effective solution for your recipe-sharing application.</st> <st c="3996">With
    serverless architectures, you can focus on writing code and building features
    without worrying about provisioning and managing servers or infrastructure, which
    is exactly what you are</st> <st c="4185">looking for.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4197">After some research, you decide to rearchitect your application
    to leverage AWS serverless services to benefit from automatic scaling, pay-per-use
    pricing, and reduced</st> <st c="4366">operational overhead.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4387">Requirements</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="4400">As you have done in the previous chapter, you will start by gathering
    the requirements for this project.</st> <st c="4506">This will serve as</st> <st
    c="4524">the baseline for all the technical choices you will make next, so it
    is important to have a clear view of the objectives</st> <st c="4646">and restrictions.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4663">Overall, you still want to serve two</st> <st c="4701">different
    profiles:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="4720">Admin</st>**<st c="4726">: Platform owner responsible for creating
    and</st> <st c="4773">managing recipes</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="4789">End users or consumers</st>**<st c="4812">: Access the shared
    recipes and put likes on the</st> <st c="4862">preferred ones</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="4876">Considering that this project is an evolution from the previous
    one, let us focus on the changes and break down the</st> <st c="4993">new requirements.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5010">Business requirements</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="5032">With your previous</st> <st c="5051">recipe-sharing application,
    you exceeded all the expectations.</st> <st c="5115">As of now, when people think
    about cooking and are looking for inspiration, they go directly to your application
    and your market is not restricted to the US.</st> <st c="5273">Instead, you are
    evenly distributed between the US, Europe, and Asia with 41%, 35%, and 20% geo-distribution
    respectively, with the remaining 4% spread across the globe, and you reached a
    total of 150 thousand users in the</st> <st c="5496">last year.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5506">Due to your success, you were able to sign more than one contract
    with companies from different segments (ads, food delivery, and food producers),
    but your growth plans continue.</st> <st c="5686">As you move forward, you have
    identified the following key objectives to</st> <st c="5759">focus on:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5768">Achieve 10% yearly</st> <st c="5788">user growth</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="5799">Improve</st> <st c="5808">your</st> <st c="5812">cost-effectiveness</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="5831">Functional requirements</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="5855">Regarding functional requirements, you do not expect major changes
    compared to the previous chapter, so to</st> <st c="5962">summarize, these are</st>
    <st c="5984">as follows:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5995">Two different profiles (admin</st> <st c="6026">and user)</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="6035">Simple</st> <st c="6043">user interface</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="6057">Responsiveness</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="6072">With the time you’ve been spending managing the infrastructure,
    you did not have much time to invest in creating new functionalities for your
    application.</st> <st c="6228">However, based on the feedback received from the
    users, you want to include two</st> <st c="6308">new features:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6321">Authentication</st> <st c="6337">and authorization</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="6354">Ability to add likes to recipes, and sort</st> <st c="6397">by
    it</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="6402">Mockups are a good strategy to create a visual representation of
    the expected behavior of your application, as you saw in the previous chapter.</st>
    <st c="6547">Therefore, for this section, you will do a similar exercise, focusing
    only on the new features planned, as shown in</st> *<st c="6663">Figures 4.1</st>*<st
    c="6674">,</st> *<st c="6676">4.2</st>*<st c="6679">, and</st> *<st c="6685">4.3</st>*<st
    c="6688">. For the home page you will keep the same layout, as shown in</st> [*<st
    c="6751">Chapter 3</st>*](B22051_03.xhtml#_idTextAnchor054)<st c="6760">,</st>
    *<st c="6762">Figure 3</st>**<st c="6770">.1</st>*<st c="6772">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="6773">You do not expect different profiles to access your application,
    so the same division applies: users</st> <st c="6875">and admins.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6886">Note</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6891">We will not list the features that are maintained, such as the
    access to the list of recipe titles, since it was covered in the previous chapter
    and we want to avoid duplication.</st> <st c="7071">Assuming you are following
    along, you should be familiar with the initial requirements, and if that is not
    the case, we recommend reviewing them in the</st> *<st c="7223">Requirements</st>*
    <st c="7235">section from the</st> <st c="7253">previous chapter.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7270">Let us explore each profile</st> <st c="7298">and the changes expected
    in terms of interface</st> <st c="7346">and behavior:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="7359">/user</st>`<st c="7365">: Like a</st> <st c="7375">specific recipe.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 4.1 – UI Mockup User Page](img/B22051_04_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="7557">Figure 4.1 – UI Mockup User Page</st>
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="7589">/admin</st>`<st c="7596">: Restrict access to the admin portal
    with an authentication mechanism, with a simple form if a user tries to access
    the admin page, as depicted in</st> *<st c="7745">Figure 4</st>**<st c="7753">.2</st>*<st
    c="7755">.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 4.2 – UI mockup – authentication](img/B22051_04_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="7840">Figure 4.2 – UI mockup – authentication</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7879">Non-functional requirements</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="7907">With the popularity</st> <st c="7927">increase of your application,
    cost and scalability are the new goals.</st> <st c="7998">Also, you want to accelerate
    feature rollout by shifting the time you spend managing infrastructure to application
    innovation.</st> <st c="8125">To summarize, here is what</st> <st c="8152">we
    need:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8160">Cost-effectiveness</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="8179">Event-driven architecture</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="8205">Low</st> <st c="8210">infrastructure management</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="8235">Technical requirements</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="8258">Compared to the previous chapter</st> <st c="8292">and considering
    the overall feedback of your users, you want this re-architecture to be as smooth
    as possible with no impact on the current users in terms of the interface and
    user experience.</st> <st c="8485">You want to keep the previous technical choices
    and project from a programming language and frameworks standpoint, as much</st>
    <st c="8608">as possible.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8620">As part of your latest research, you want to base your new platform
    architecture to use solely</st> <st c="8716">serverless technologies.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8740">Data requirements</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="8758">This latest version is an extension of your previous one, and all
    the data requirements still apply.</st> <st c="8860">Your application is all about
    storing and managing recipes, which are composed of a set of steps</st> <st c="8956">and
    ingredients, but one of the features you want to implement is adding likes to
    a recipe.</st> <st c="9049">For the operations you perform over a recipe, you
    must do</st> <st c="9107">the following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="9121">List the recipes</st>**<st c="9138">: Present a list of the</st>
    <st c="9163">recipes created.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="9179">Delete a recipe</st>**<st c="9195">: If an admin no longer wants
    a specific recipe to be part of their portfolio, it should be possible to delete</st>
    <st c="9307">the item.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="9316">Create a recipe</st>**<st c="9332">: Create a new recipe to
    share with</st> <st c="9369">the users.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="9379">Like a recipe</st>**<st c="9393">: Increase the number of likes
    in a</st> <st c="9430">specific recipe.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="9446">Based on the operations listed, the only change you need to support
    is to store the number of likes per recipe, so you define a recent version for
    your recipe document as seen in the</st> `<st c="9630">recipe_example_2.json</st>`
    <st c="9651">recipe example:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: <st c="9750">Architecture patterns</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="9772">Each project is different, but</st> <st c="9803">there are some
    commonalities that can and should be leveraged when designing your applications.</st>
    <st c="9900">AWS has a dedicated portal for serverless architectures and patterns
    called</st> **<st c="9976">Serverless Land</st>** <st c="9991">(</st>[<st c="9993">https://serverlessland.com/</st>](https://serverlessland.com/)<st
    c="10020">), composed of the latest</st> <st c="10046">information, blogs, videos,
    code, and learning resources for serverless in AWS.</st> <st c="10127">It is always
    a good starting point whenever you are planning to build a</st> <st c="10199">serverless
    application.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10222">Compared to traditional deployment strategies, serverless implies
    a different paradigm and a good understanding of the core services is key.</st>
    <st c="10364">AWS offers a serverless developer guide (</st>[<st c="10405">https://docs.aws.amazon.com/serverless/latest/devguide/welcome.html</st>](https://docs.aws.amazon.com/serverless/latest/devguide/welcome.html)<st
    c="10473">), with learning paths for the core services, and is also a great resource
    for</st> <st c="10553">serverless-related information.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10584">Lastly, as stated in the previous</st> <st c="10619">chapters,
    each AWS service has a dedicated page with all the service-related information.</st>
    <st c="10709">For example, in the case of AWS Lambda, you can access it</st> <st
    c="10767">at</st> [<st c="10770">https://aws.amazon.com/lambda/</st>](https://aws.amazon.com/lambda/)<st
    c="10800">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10801">Architecture</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="10814">Whilst user experience and interface should be as similar as possible
    compared to the previous version of the recipe-sharing application developed in</st>
    [*<st c="10965">Chapter 3</st>*](B22051_03.xhtml#_idTextAnchor054)<st c="10974">,
    the platform architecture is where the</st> <st c="11014">majority of the changes
    should</st> <st c="11046">be noted.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11055">In this chapter, you will follow the same top-down approach when
    designing your architecture.</st> <st c="11150">You will be starting with the
    highest abstraction level and moving down to the component level architecture,
    where you define each of the services used and how all of them fit together to
    build</st> <st c="11344">your application.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11361">Looking at the different architecture layers, you will follow
    the same structure you had in the previous chapter, with three well-defined layers,
    like what is shown in</st> [*<st c="11530">Chapter 3</st>*](B22051_03.xhtml#_idTextAnchor054)<st
    c="11539">,</st> *<st c="11541">Figure 3</st>**<st c="11549">.4</st>*<st c="11551">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="11553">Presentation layer</st>**<st c="11571">: How to host and serve</st>
    <st c="11596">your frontend</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="11609">Compute layer</st>**<st c="11623">: How to incorporate and
    execute</st> <st c="11657">business logic</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="11671">Data layer</st>**<st c="11682">: Where to store and retrieve</st>
    <st c="11713">your data</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="11722">The Presentation and Compute layers use an API as the interface
    between the two layers.</st> <st c="11811">The API is responsible for exposing
    the endpoints to perform all the actions to execute and abstract the business
    logic.</st> <st c="11932">In this case, and taking into consideration the requirements,
    the main update is the inclusion of the new feature for liking a recipe, as represented
    in</st> *<st c="12085">Figure 4</st>**<st c="12093">.3</st>*<st c="12095">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.3 – API structure](img/B22051_04_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="12189">Figure 4.3 – API structure</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12215">Here is</st> <st c="12224">the</st> <st c="12227">breakdown:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="12238">GET /auth</st>`<st c="12248">: Test</st> <st c="12256">authorization
    flow</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="12274">GET /recipes</st>`<st c="12287">: Get the list</st> <st c="12303">of
    recipes</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="12313">GET /health</st>`<st c="12325">: Simple health</st> <st c="12342">check
    endpoint</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="12356">DELETE</st> <st c="12364">/recipes/{recipe_id}</st>`<st c="12384">:
    Delete a specific recipe by</st> <st c="12415">its ID</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="12421">POST /recipes</st>`<st c="12435">: Create a new</st> <st c="12451">recipe
    record</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="12464">PUT /reci</st><st c="12474">pes/like/{recipe_id}</st>`<st c="12495">:
    increase</st> <st c="12507">recipes’ likes</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="12521">Besides the endpoint for adding likes, we also added the</st>
    `<st c="12579">/auth</st>` <st c="12584">endpoint, which, despite not being used
    for the application, serves as a learning resource for understanding the authentication
    and endpoint</st> <st c="12726">protection workflow.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '*<st c="12746">Figure 4</st>**<st c="12755">.4</st>* <st c="12757">represents
    the architecture you will implement, based on all the requirements.</st> <st c="12837">The
    frontend will use the same approach as in the previous chapter, with S3 and CloudFront
    for hosting and serving.</st> <st c="12953">The data layer will still use DynamoDB
    to store recipe data.</st> <st c="13014">However, you will introduce Amazon Cognito
    as an authentication service to restrict recipe management activities to authorized
    users.</st> <st c="13148">For the API, you will use Amazon API</st> <st c="13185">Gateway
    and associate it with AWS Lambda functions to implement the API</st> <st c="13257">endpoint
    functionalities.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.4 – AWS architecture for your new recipe-sharing application](img/B22051_04_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="13445">Figure 4.4 – AWS architecture for your new recipe-sharing application</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="13514">Each of the services mentioned, as well as the main advantages
    and reasons for these choices, will be</st> <st c="13617">described next.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="13632">AWS services</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="13645">Choosing from the</st> <st c="13664">vast number of services available
    can be challenging, and a good understanding of the requirements is key for the
    decision.</st> <st c="13788">Part of the services were covered in previous chapters,
    so to avoid duplication, we’ll only mention the advantages for the current use
    case if not referenced before, and point to the relevant chapter for a</st> <st
    c="13994">detailed explanation.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14015">Amazon Simple Storage Service (S3)</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="14050">Amazon S3 is an example</st> <st c="14075">of a serverless technology
    that you should already be familiar with, as it was explained in</st> <st c="14167">detail
    in the previous two chapters.</st> <st c="14204">If you want to review it, we
    recommend checking the details in</st> *<st c="14267">Chapters 2</st>* <st c="14277">and</st>
    *<st c="14282">3</st>*<st c="14283">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14284">Amazon CloudFront</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="14302">Just like Amazon S3, CloudFront has</st> <st c="14338">been extensively
    used in the</st> <st c="14367">previous project of this book, and it was covered
    in the previous AWS Services sections in both</st> *<st c="14464">Chapters 2</st>*
    <st c="14474">and</st> *<st c="14479">3</st>*<st c="14480">. To review it, we
    recommend checking the details in the</st> <st c="14537">previous chapters.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14555">Amazon DynamoDB</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="14571">Data requirements have been the</st> <st c="14603">main drivers
    for choosing database</st> <st c="14638">technologies.</st> <st c="14653">In this
    chapter, the data requirements did not change, so Amazon DynamoDB keeps being
    our choice.</st> <st c="14751">The main characteristics and advantages were described
    in the</st> *<st c="14813">AWS Services</st>* <st c="14825">section in the previous
    chapter, so if you want to get a detailed explanation and understanding of DynamoDB,
    we recommend</st> <st c="14948">reviewing that.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14963">AWS CloudFormation</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="14982">As you did in the previous</st> <st c="15010">chapter, you will
    continue to use AWS CloudFormation (CloudFormation) as your</st> **<st c="15088">Infrastructure
    as Code</st>** <st c="15110">(</st>**<st c="15112">IaC</st>**<st c="15115">) tool.</st>
    <st c="15124">CloudFormation was explained in detail in</st> <st c="15166">the
    previous chapter, so for a detailed</st> <st c="15205">explanation of the service
    and its advantages, we recommend reviewing</st> <st c="15276">that chapter.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15289">Amazon Cognito</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="15304">Amazon Cognito is a fully</st> <st c="15330">managed service that
    provides authentication, authorization, and user management for</st> <st c="15416">your
    web and mobile applications.</st> <st c="15450">With Amazon Cognito, you can easily
    implement features such as user sign-up, sign-in, and account recovery.</st> <st
    c="15558">It supports various authentication methods, including user pools (for
    managing your application’s own user directory) and identity pools (for integrating
    with social media or enterprise identity providers).</st> <st c="15765">Amazon
    Cognito integrates seamlessly with other AWS services, such as Amazon API Gateway,
    which are also part of your serverless architecture.</st> <st c="15908">This integration
    enables you to implement</st> <st c="15949">serverless authentication</st> <st
    c="15976">and authorization mechanisms for your API, ensuring that only authenticated
    users can access and perform actions within</st> <st c="16096">your application.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16113">Amazon Lambda</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="16127">Amazon Lambda is a serverless</st> <st c="16158">computing service
    that allows you to run code without provisioning or managing servers.</st> <st
    c="16246">With Lambda, you can focus on writing your application code, and AWS
    takes</st> <st c="16321">care of provisioning an</st><st c="16344">d managing
    the underlying compute resources.</st> <st c="16390">Lambda automatically scales
    your code’s execution in response to incoming events or requests, ensuring that
    your application can handle fluctuations in traffic without</st> <st c="16558">manual
    intervention.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16578">Lambda provides support for various programming languages, with
    Python being one of the supported runtimes that fits your technical requirements.</st>
    <st c="16725">Furthermore, Lambda seamlessly integrates with other AWS services
    such as Amazon API Gateway, enabling you to create event-driven architectures
    and develop applications that are highly scalable, resilient to failures,</st>
    <st c="16943">and cost-effective.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16962">API Gateway</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="16974">Amazon API Gateway is</st> <st c="16996">a fully managed service
    that makes it easy to create, publish, maintain, monitor, and secure APIs at any
    scale.</st> <st c="17109">It acts as the front door for your serverless application,
    handling client requests and routing them to the appropriate backend services,
    such as AWS</st> <st c="17259">Lambda functions.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17276">Amazon API Gateway supports</st> <st c="17304">two types of RESTful
    APIs:</st> **<st c="17332">REST APIs</st>** <st c="17341">and</st> **<st c="17346">HTTP
    APIs</st>**<st c="17355">. Choosing between the two</st> <st c="17381">must be
    based on the features supported.</st> <st c="17423">REST APIs provide more advanced
    features such as API versioning, request/response data</st> <st c="17509">transformations,
    caching, and comprehensive access control mechanisms, while HTTP can be considered
    if you are looking for a simplified and cost-effective option that does not require</st>
    <st c="17694">advanced features.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17712">If you want to know how to choose between HTTP and REST APIs in
    Amazon API Gateway, you can</st> <st c="17805">access</st> [<st c="17812">https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-vs-rest.html</st>](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-vs-rest.html)<st
    c="17894">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17895">Coding the solution</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="17915">Now is the time to put all the</st> <st c="17947">concepts into
    action by coding the solution described so far, reviewing and improving the services
    you already used in previous chapters, and getting familiar with the new services
    introduced in</st> <st c="18142">this architecture.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="18160">Cloning the project</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="18180">As you have been doing in the</st> <st c="18210">previous chapter,
    the first step is to copy the project locally from the Git repository associated
    with this book.</st> <st c="18326">If you were following along with the previous
    chapter, you should have already a copy of the Git repository on your local machine.</st>
    <st c="18457">If this is not the case, you can either clone it directly from the
    Git repository associated with this book or download it as a</st> <st c="18585">ZIP
    file.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="18594">Navigate to the</st> `<st c="18611">chapter4/code</st>` <st c="18624">folder.</st>
    <st c="18633">Inside, you will find two subfolders, as shown in</st> *<st c="18683">Figure
    4</st>**<st c="18691">.5</st>*<st c="18693">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="18695">frontend</st>`<st c="18703">: Contains the code for</st> <st
    c="18728">your frontend.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="18742">platform</st>`<st c="18751">: Contains a CloudFormation template
    to deploy the main infrastructure for</st> <st c="18827">your application.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 4.5 – Chapter 4 folder structure](img/B22051_04_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="18875">Figure 4.5 –</st> [<st c="18888">Chapter 4</st>](B22051_04.xhtml#_idTextAnchor089)
    <st c="18897">folder structure</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="18914">Solution deployment</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="18934">Now, it is time to</st> <st c="18953">deploy all your application
    infrastructure through the CloudFormation template called</st> `<st c="19040">ch4-application-template.yaml</st>`<st
    c="19069">, which is located in the</st> `<st c="19095">/platform</st>` <st c="19104">subfolder
    of your</st> `<st c="19123">chapter4/code</st>` <st c="19136">folder (</st>`<st
    c="19145">chapter4/code/platform/ch4-application-template.yaml</st>`<st c="19198">).</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19201">In</st> *<st c="19205">Table 4.1</st>*<st c="19214">, you can
    see all the resources created by your CloudFormation template, but feel free to
    explore the code itself and try to map it to the architecture presented in</st>
    *<st c="19379">Figure 4</st>**<st c="19387">.4</st>*<st c="19389">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '| **<st c="19390">Template</st>** | **<st c="19399">ch4-application-template.yaml</st>**
    |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="19429">Frontend</st> | <st c="19438">CloudFront</st> <st c="19450">and
    S3</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="19456">Backend</st> |'
  prefs: []
  type: TYPE_TB
- en: <st c="19464">1 HTTP API with</st> <st c="19481">6 endpoints</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="19492">6 lambda functions, one for</st> <st c="19521">each endpoint</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="19534">1 Cognito</st> <st c="19545">user pool</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| <st c="19554">Data store</st> | <st c="19565">DynamoDB</st> |'
  prefs: []
  type: TYPE_TB
- en: <st c="19574">Table 4.1 – CloudFormation template details</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19618">From the console, go to the CloudFormation service (</st>[<st
    c="19671">https://console.aws.amazon.com/cloudformation/</st>](https://console.aws.amazon.com/cloudformation/)<st
    c="19718">) and select the region where you want your application.</st> <st c="19776">You
    can select the AWS region in the drop-down menu located in the upper-right corner
    of your console window, as shown in</st> *<st c="19898">Figure 4</st>**<st c="19906">.6</st>*<st
    c="19908">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.6 – Console access to CloudFormation](img/B22051_04_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="19952">Figure 4.6 – Console access to CloudFormation</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19997">Why is important to choose a region?</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20034">In AWS, services can be classified as either regional or global
    based on their availability and data replication mechanisms.</st> <st c="20160">Regional
    services are deployed and operate within a specific AWS region, while global services
    are designed to provide a consistent experience across</st> <st c="20310">multiple
    regions.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20327">CloudFormation is an example of a</st> <st c="20361">regional
    service.</st> <st c="20380">Thus, it is crucial to pick the right region because
    it ensures that your resources are deployed closer to your target users, providing
    lower latency and the best</st> <st c="20543">user experience.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20559">To proceed with stack creation, follow</st> <st c="20599">these
    steps:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20611">Click on</st> **<st c="20621">Create Stack</st>**<st c="20633">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="20634">In the</st> **<st c="20642">Prerequisite – Prepare template</st>**
    <st c="20673">section, select</st> **<st c="20690">Choose an</st>** **<st c="20700">existing
    template</st>**<st c="20717">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="20718">In the</st> **<st c="20726">Specify template</st>** <st c="20742">section,
    choose</st> **<st c="20759">Upload a</st>** **<st c="20768">template file</st>**<st
    c="20781">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="20782">Click on</st> **<st c="20792">Choose file</st>**<st c="20803">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="20804">Select the template from</st> <st c="20829">the</st> `<st c="20834">chapter4/code/platform</st>`
    <st c="20856">folder.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="20864">Click</st> **<st c="20871">Next</st>**<st c="20875">. Your</st>
    **<st c="20882">Create Stack</st>** <st c="20894">window should look like</st>
    *<st c="20919">Figure 4</st>**<st c="20927">.7</st>*<st c="20929">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.7 – A CloudFormation Create stack form](img/B22051_04_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="22003">Figure 4.7 – A CloudFormation Create stack form</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="22050">The next step is to</st> <st c="22071">configure the parameters
    in your CloudFormation stack.</st> <st c="22126">In</st> *<st c="22129">Table
    4.2</st>*<st c="22138">, you can find a detailed explanation of</st> <st c="22179">each
    parameter.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '| **<st c="22194">Parameter</st>** | **<st c="22204">Description</st>** |'
  prefs: []
  type: TYPE_TB
- en: '| `<st c="22216">APIName</st>` | <st c="22224">The name you want to associate
    with</st> <st c="22261">your API</st> |'
  prefs: []
  type: TYPE_TB
- en: '| `<st c="22269">UserEmail</st>` | <st c="22279">The email you associate with
    your user must be valid, as you will receive a temporary password and need to
    verify the</st> <st c="22398">email later</st> |'
  prefs: []
  type: TYPE_TB
- en: '| `<st c="22409">UserPoolName</st>` | <st c="22422">The name you will give
    to your Cognito</st> <st c="22462">User Pool</st> |'
  prefs: []
  type: TYPE_TB
- en: '| `<st c="22471">Username</st>` | <st c="22480">Later, this is the username
    you will use to log in to</st> <st c="22535">your application</st> |'
  prefs: []
  type: TYPE_TB
- en: <st c="22551">Table 4.2 – CloudFormation templates parameters</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="22599">An example of the parameters windows is shown in</st> *<st c="22649">Figure
    4</st>**<st c="22657">.8</st>*<st c="22659">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.8 – Stack parameters in CloudFormation](img/B22051_04_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="23186">Figure 4.8 – Stack parameters in CloudFormation</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="23233">You can proceed</st> <st c="23250">until the last page.</st> <st
    c="23271">Acknowledge the creation of the IAM Roles that will be used to provide
    access to the lambda functions for performing operations to the DynamoDB table,
    namely, to delete a recipe, and</st> <st c="23454">click</st> **<st c="23460">Submit</st>**<st
    c="23466">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.9 – CloudFormation stack submission](img/B22051_04_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="23920">Figure 4.9 – CloudFormation stack submission</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="23964">Wait until the stack status changes to</st> **<st c="24004">CREATE_COMPLETE</st>**<st
    c="24019">, as depicted in</st> *<st c="24036">Figure 4</st>**<st c="24044">.10</st>*<st
    c="24047">. This will mean that all the resources are provisioned and you can</st>
    <st c="24115">now proceed.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.10 – CloudFormation Stack Created status](img/B22051_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="24192">Figure 4.10 – CloudFormation Stack Created status</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="24241">In our case, it took</st> <st c="24263">around five minutes for
    the stack to be deployed but take into consideration that this</st> <st c="24350">may
    vary.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="24359">Important note</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="24374">If you have been following along with the previous chapter (</st>[*<st
    c="24435">Chapter 3</st>*](B22051_03.xhtml#_idTextAnchor054)<st c="24445">) and
    forgot to clean up all the resources created in that chapter, you may encounter
    issues when attempting to deploy the CloudFormation template in this chapter.</st>
    <st c="24610">The deployment may fail because in AWS, DynamoDB table names must
    be unique within a region in a single account.</st> <st c="24723">Since this chapter
    is an evolution of the previous one, we used the same table name for storing</st>
    <st c="24819">the recipes.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="24831">To resolve this issue, please ensure that you have properly cleaned
    up and deleted all the resources in the previous chapter, as described in the</st>
    *<st c="24978">Clean up</st>* <st c="24986">section, before proceeding with</st>
    <st c="25019">this one.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="25028">Frontend configuration and deployment</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="25066">With all the AWS services</st> <st c="25092">provisioned, it’s
    now time for configuring your frontend and deploying</st> <st c="25164">the</st>
    <st c="25168">files.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="25174">Navigate to the</st> `<st c="25191">…/frontend/src/configs</st>`
    <st c="25213">folder, and you will find</st> <st c="25240">two files:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="25250">aws-exports.ts</st>`<st c="25265">: This file is used to configure
    your authentication with data from the Cognito</st> <st c="25346">user pool.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="25356">configs.tsx</st>`<st c="25368">: This file is used to configure
    your application, namely the API URL</st> <st c="25439">to use.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="25446">Let’s look at them</st> <st c="25466">in detail.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="25476">aws-exports.ts</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="25491">This file is composed of four</st> <st c="25522">configuration
    variables:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="25546">AWS_PROJECT_REGION</st>`<st c="25565">: The</st> <st c="25571">region
    you deployed</st> <st c="25592">your solution</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="25605">AWS_COGNITO_REGION</st>`<st c="25624">: Your Cognito user</st>
    <st c="25645">Pool region</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="25656">AWS_USER_POOLS_ID</st>`<st c="25674">: The ID of your</st> <st
    c="25692">user pool</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="25701">AWS_USER_POOLS_WEB_CLIENT_ID</st>`<st c="25730">: The client
    ID of your Cognito User</st> <st c="25768">Pool application</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="25784">configs.tsx:</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="25797">This config file is composed of</st> <st c="25830">seven</st>
    <st c="25836">configurations:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="25851">CONFIG_MAX_INGREDIENTS</st>`<st c="25874">: Max ingredients
    in</st> <st c="25896">a recipe</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="25904">CONFIG_MAX_STEPS</st>`<st c="25921">: Max steps in</st> <st
    c="25937">a recipe</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="25945">CONFIG_MAX_RECIPES</st>`<st c="25964">: Max</st> <st c="25971">recipes
    supported</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="25988">CONFIG_USER_PAGE_TITLE</st>`<st c="26011">: Title for</st> <st
    c="26024">user page</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="26033">CONFIG_ADMIN_PAGE_TITLE</st>`<st c="26057">: Title for</st>
    <st c="26070">admin page</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="26080">CONFIG_appConfig</st>`<st c="26097">: Object with page title
    and icon (icons</st> <st c="26139">in</st> `<st c="26142">/frontend/public/</st>`<st
    c="26159">)</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="26161">CONFIG_API_URL</st>`<st c="26175">:</st> <st c="26178">API endpoint</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="26190">All the mandatory values needed as part of the configuration files
    can be found in the</st> **<st c="26278">Outputs</st>** <st c="26285">tab of the
    CloudFormation template you</st> <st c="26325">just deployed.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="26339">To access it, follow</st> <st c="26361">these steps:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="26373">Go to the CloudFormation console</st> <st c="26407">at</st> [<st
    c="26410">https://console.aws.amazon.com/cloudformation/</st>](https://console.aws.amazon.com/cloudformation/)<st
    c="26456">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="26457">Click on</st> <st c="26467">your stack.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="26478">On the right</st> <st c="26492">menu, select the</st> **<st c="26509">Outputs</st>**
    <st c="26516">Tab, as shown in</st> *<st c="26534">Figure 4</st>**<st c="26542">.11</st>*<st
    c="26545">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.11 – CloudFormation Outputs tab](img/B22051_04_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="27122">Figure 4.11 – CloudFormation Outputs tab</st>
  prefs: []
  type: TYPE_NORMAL
- en: '*<st c="27162">Table 4.3</st>* <st c="27172">maps the Stack outputs with the
    configuration files’ parameters (</st>`<st c="27238">aws-exports.ts</st>` <st
    c="27253">and</st> `<st c="27258">config.tsx</st>`<st c="27268">).</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '| **<st c="27271">File</st>** | **<st c="27276">Parameter</st>** | **<st c="27286">Cloudformation</st>**
    **<st c="27302">Stack outputs</st>** |'
  prefs: []
  type: TYPE_TB
- en: '| `<st c="27315">aws-exports.ts</st>` | `<st c="27330">aws_project_region</st>`
    | `<st c="27349">CognitoRegion</st>` |'
  prefs: []
  type: TYPE_TB
- en: '| `<st c="27363">aws_cognito_region</st>` | `<st c="27382">CognitoRegion</st>`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `<st c="27396">aws_user_pools_id</st>` | `<st c="27414">UserPoolId</st>`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `<st c="27425">aws_user_pools_web_client_id</st>` | `<st c="27454">UserPoolClientId</st>`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `<st c="27471">configs.tsx</st>` | `<st c="27483">CONFIG_API_URL</st>` |
    `<st c="27498">HttpApiEndpoint</st>` |'
  prefs: []
  type: TYPE_TB
- en: <st c="27514">Table 4.3 – Mapping between CloudFormation Outputs and aws-exports.ts
    parameters</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="27595">Paste the values</st> <st c="27612">in each of the files respectively,
    and by the end, your parameters’</st> `<st c="27681">aws-exports.ts</st>` <st
    c="27695">file should look like</st> *<st c="27718">Figure 4</st>**<st c="27726">.12</st>*<st
    c="27729">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.12 – Example of a configuration file (aws-exports.ts)](img/B22051_04_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="27990">Figure 4.12 – Example of a configuration file (aws-exports.ts)</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="28052">and</st> `<st c="28057">config.tsx</st>` <st c="28067">file should
    look like</st> *<st c="28090">Figure 4</st>**<st c="28098">.13</st>*<st c="28101">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.13 – Example of configuration file (config.tsx)](img/B22051_04_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="28526">Figure 4.13 – Example of configuration file (config.tsx)</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="28582">4.</st> <st c="28586">Save</st> <st c="28591">the files.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="28601">Once you’ve updated the configuration files, you can initiate
    the</st> `<st c="28668">build</st>` <st c="28673">process to transform the code
    into a web-ready bundle that can be served to browsers.</st> <st c="28760">In
    our example, we utilized</st> `<st c="28788">npm</st>` <st c="28791">as the</st>
    <st c="28798">package manager, so you’ll need to install the dependencies and
    kick off the</st> `<st c="28876">build</st>` <st c="28881">process:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: <st c="28921">Note that the previous command should be run at the root of the</st>
    `<st c="28986">frontend</st>` <st c="28994">folder.</st> <st c="29003">To test
    whether you are at the root, you can use the</st> <st c="29056">following command:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: <st c="29105">The result is a folder with the files needed to be copied to our
    S3 buckets.</st> <st c="29183">The folder name may vary but is typically</st>
    `<st c="29225">build/</st>` <st c="29231">or</st> `<st c="29235">dist/</st>`<st
    c="29240">. It is created at the frontend root, as you can see in</st> *<st c="29296">Figure
    4</st>**<st c="29304">.14</st>*<st c="29307">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.14 – Frontend folder structure](img/B22051_04_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="29478">Figure 4.14 – Frontend folder structure</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="29517">Now, the last step is to copy the build folder to S3, with the</st>
    <st c="29581">following instructions:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="29604">Locate the</st> <st c="29616">S3 bucket.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="29626">First, you need to find the S3 bucket that you created earlier
    using the CloudFormation template.</st> <st c="29725">The name of the bucket should
    start with</st> `<st c="29766">frontend-chapter-4-</st>`<st c="29785">, followed
    by a random string of characters (e.g.,</st> `<st c="29836">frontend-chapter-4-XXXXX</st>`<st
    c="29860">).</st> <st c="29864">Click on its name to</st> <st c="29885">open it.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="29893">Add files from the</st> `<st c="29913">d</st><st c="29914">ist</st>`
    <st c="29917">folder.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="29925">Inside the S3 bucket, click on the</st> **<st c="29961">Upload</st>**
    <st c="29967">button.</st> <st c="29976">This will allow you to upload files from
    your local</st> <st c="30028">machine to the</st> <st c="30043">S3 bucket.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="30053">Add the necessary content to</st> <st c="30083">the bucket.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="30094">First click on</st> `<st c="30132">dist</st>` <st c="30136">folder
    on your local machine, select all the files inside the folder, and confirm.</st>
    <st c="30220">Next, on the S3 console, click</st> `<st c="30277">dist</st>` <st
    c="30281">folder on your local machine, select the</st> `<st c="30323">assets</st>`
    <st c="30329">folder,</st> <st c="30338">and confirm.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="30350">Optionally, you can just drag the content to the S3 window, but
    regardless of the method you use, your S3</st> **<st c="30457">Upload</st>** <st
    c="30463">window should look like</st> *<st c="30488">Figure 4</st>**<st c="30496">.15</st>*<st
    c="30499">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.15 – Frontend files uploaded to S3](img/B22051_04_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="30803">Figure 4.15 – Frontend files uploaded to S3</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="30846">File names are auto-generated by the</st> `<st c="30884">build</st>`
    <st c="30889">process, so your names are probably different than the ones in the
    preceding figure.</st> <st c="30975">Make sure that you have the</st> <st c="31003">following
    files:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="31019">i</st>``<st c="31021">ndex.html</st>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="31030">i</st>``<st c="31032">ndex-XXXXXX.css</st>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="31047">i</st>``<st c="31049">ndex-XXXXXX.js</st>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="31063">Static files you may have included in your application, for</st>
    <st c="31124">example, images</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="31139">After that, at the bottom, click</st> <st c="31173">on</st> **<st
    c="31176">Upload</st>**<st c="31182">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="31183">You’ve just finalized all the</st> <st c="31214">deployment and
    configuration of your application, and now it is time to</st> <st c="31286">test
    it.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="31294">Test and explore your application</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '<st c="31328">This last section is all</st> <st c="31354">about testing and
    exploring your application, and we divided it into two parts: backend and frontend.</st>
    <st c="31456">Unlike the previous</st> <st c="31475">chapter, let’s start with</st>
    <st c="31502">the frontend!</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="31515">We’ve made the CloudFront URL available as an output in the CloudFormation
    Stack, so you can get it with the</st> `<st c="31625">CloudFrontDistributionUrl</st>`
    <st c="31650">output.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="31658">You can also get the value directly from</st> <st c="31700">the
    console:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="31712">Go to the CloudFront console</st> <st c="31742">at</st> [<st c="31745">https://console.aws.amazon.com/cloudfront/</st>](https://console.aws.amazon.com/cloudfront/)<st
    c="31787">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="31788">Click on</st> **<st c="31798">Distributions</st>** <st c="31811">on
    the</st> <st c="31819">left menu.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="31829">Select the distribution</st> <st c="31854">you created.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="31866">Copy the</st> **<st c="31876">Distribution domain name</st>**
    <st c="31900">value from the</st> **<st c="31916">Details</st>** <st c="31923">section,
    as depicted in</st> *<st c="31948">Figure 4</st>**<st c="31956">.16</st>*<st c="31959">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.16 – CloudFront distribution console](img/B22051_04_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="32200">Figure 4.16 – CloudFront distribution console</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="32245">If you copy and paste the URL into the browser, you should be
    able to access your newly created application, as is shown in</st> *<st c="32370">Figure
    4</st>**<st c="32378">.17</st>*<st c="32381">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.17 – Application frontend example](img/B22051_04_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="32421">Figure 4.17 – Application frontend example</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="32463">Your new application is composed of</st> <st c="32500">three elements:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="32515">Status (Not Authenticated)</st>**<st c="32542">: This component
    will help you understand whether you are</st> <st c="32601">authenticated by changing
    the description and color.</st> <st c="32654">Also, if you are authenticated,
    it will</st> <st c="32693">highlight and show your current</st> <st c="32726">access
    token.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="32739">USERS</st>**<st c="32745">: Navigate to the</st> **<st c="32764">Users</st>**
    <st c="32769">page.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="32775">ADMIN</st>**<st c="32781">: Navigate to the</st> **<st c="32800">Admin</st>**
    <st c="32805">page.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="32811">Let us have</st> <st c="32824">a look.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="32831">Admin page</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="32842">One of the improvements of this new solution is the authentication.</st>
    <st c="32911">To test it, navigate to the admin page, and you should be prompted
    to authenticate, as you can see in</st> *<st c="33013">Figure 4</st>**<st c="33021">.18</st>*<st
    c="33024">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.18 – Authentication form](img/B22051_04_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="33110">Figure 4.18 – Authentication form</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="33143">With the deployment</st> <st c="33164">of the application CloudFormation
    template, you should have received an email similar to</st> *<st c="33253">Figure
    4</st>**<st c="33261">.19</st>* <st c="33264">to the user email you defined as
    a parameter during the stack deployment process, with a temporary password for
    the username you</st> <st c="33394">also defined.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.19 – Temporary password email example](img/B22051_04_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="33709">Figure 4.19 – Temporary password email example</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="33755">Use these values as your username and password and continue.</st>
    <st c="33817">You should be prompted to define a new password, so proceed with
    it and click on</st> **<st c="33898">Change password</st>**<st c="33913">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="33914">You have your new password defined, so the last step is to verify
    your email for account</st> <st c="34004">recovery purposes.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.20 – Email verification form](img/B22051_04_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="34094">Figure 4.20 – Email verification form</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="34131">Select your email address and click on</st> **<st c="34171">Verify</st>**<st
    c="34177">. With this action, you should receive a new email containing</st> <st
    c="34238">your verification code, as shown in</st> *<st c="34275">Figure 4</st>**<st
    c="34283">.21</st>*<st c="34286">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.21 – Account verification email example](img/B22051_04_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="34489">Figure 4.21 – Account verification email example</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="34537">Paste the verification code and proceed.</st> <st c="34579">You
    have now finalized the authentication setup, and your interface should look like</st>
    *<st c="34664">Figure 4</st>**<st c="34672">.22</st>*<st c="34675">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.22 – Admin page after authentication](img/B22051_04_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="34929">Figure 4.22 – Admin page after authentication</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="34974">As you can see, the authentication status component has changed
    color and is now saying that you are</st> <st c="35076">authenticated as your
    username.</st> <st c="35108">In our case, that username is</st> `<st c="35138">admin</st>`<st
    c="35143">. Also, if you hover over the access token, you will be able to access
    the current</st> <st c="35226">access token.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.23 – Tooltip with access token](img/B22051_04_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="35882">Figure 4.23 – Tooltip with access token</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="35921">Feel free to navigate the application by clicking the left arrow
    and going back to the admin page, and you will see that you will remain authenticated
    until you sign out.</st> <st c="36093">Back to the admin console; start by creating
    some recipes to explore the</st> <st c="36166">user experience.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="36182">Note that we added a new functionality to our application, as
    per the requirements, giving the ability for users to like our recipes.</st> <st
    c="36317">Additionally, we can sort our recipes by likes and, for example, delete
    the recipes with few likes, as shown in</st> *<st c="36429">Figure 4</st>**<st
    c="36437">.24</st>*<st c="36440">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.24 – Admin user experience with number of likes per recipe](img/B22051_04_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="36756">Figure 4.24 – Admin user experience with number of likes per recipe</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="36823">User page</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="36833">The</st> **<st c="36838">User</st>** <st c="36842">page is like
    in the</st> <st c="36863">previous chapter, but we have added the new feature
    of likes for</st> <st c="36928">the recipes.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="36940">Navigate to the</st> **<st c="36957">User</st>** <st c="36961">page,
    choose a recipe, and click</st> **<st c="36995">Like</st>**<st c="36999">. This
    should increase the number of likes of the specific recipe, as shown in</st> *<st
    c="37078">Figure 4</st>**<st c="37086">.25</st>*<st c="37089">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.25 – Example of adding a like to a recipe as a regular user](img/B22051_04_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="37300">Figure 4.25 – Example of adding a like to a recipe as a regular
    user</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="37368">If you want to play around with the likes functionality, just
    refresh the page and the like button will be available</st> <st c="37486">again.</st>
    <st c="37493">Lastly, try to change the sort to choose the most popular recipe
    according to</st> <st c="37571">user feedback.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="37585">Testing and exploring the backend</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="37619">Your backend is now built</st> <st c="37646">with an HTTP API
    gateway with a Lambda</st> <st c="37684">function for each endpoint responsible
    for executing the associated action.</st> <st c="37761">For example, let’s explore
    the</st> `<st c="37792">delete</st>` <st c="37798">function:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: <st c="38255">The</st> `<st c="38260">delete</st>` <st c="38266">function is</st>
    <st c="38278">responsible for deleting a specific recipe in DynamoDB based on</st>
    <st c="38343">the ID.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="38350">So, for every</st> <st c="38364">execution, the API gateway will
    trigger the Lambda function associated.</st> <st c="38437">In this case, the function
    will grab</st> `<st c="38474">recipe_id</st>` <st c="38483">from the path and
    call the</st> `<st c="38511">delete_item</st>` <st c="38522">API for</st> <st
    c="38531">your table.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="38542">Go ahead and explore the</st> <st c="38568">other examples:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="38583">Navigate to the API Gateway console</st> <st c="38620">at</st>
    [<st c="38623">https://console.aws.amazon.com/apigateway</st>](https://console.aws.amazon.com/apigateway)<st
    c="38664">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="38665">Select your API with the name you gave as part of the CloudFormation</st>
    <st c="38735">Stack parameters.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="38752">Select the option API:</st> `<st c="38776">[your</st>` `<st c="38782">API
    name]</st>`<st c="38791">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="38792">Click on</st> **<st c="38802">Integrations</st>** <st c="38814">from
    the</st> <st c="38824">left menu.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="38834">Select the route you want</st> <st c="38861">to explore.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="38872">Click on the blue arrow on the</st> **<st c="38904">Lambda Function</st>**
    <st c="38919">field.</st> <st c="38927">This will redirect you to the Lambda page
    of your specific</st> <st c="38986">Lambda function.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.26 – Lambda function access through API Gateway console](img/B22051_04_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="39415">Figure 4.26 – Lambda function access through API Gateway console</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="39479">Your application is</st> <st c="39500">protected by Cognito authentication
    since you cannot access the admin page</st> <st c="39574">without being authenticated.</st>
    <st c="39604">However, what would happen if a user tried to directly access</st>
    <st c="39666">the API?</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="39674">That is where API authorization comes into the picture.</st> <st
    c="39731">For this application, we have already configured authentication for
    the specific routes defined in the requirements sections, and you can explore
    it in the API</st> <st c="39891">Gateway console:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="39907">Navigate to the API Gateway</st> <st c="39936">console</st> [<st
    c="39944">https://console.aws.amazon.com/apigateway</st>](https://console.aws.amazon.com/apigateway)<st
    c="39985">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="39986">Select your API with the name you gave as part of the CloudFormation</st>
    <st c="40056">Stack parameters.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="40073">Select the option API:</st> `<st c="40097">[your</st>` `<st c="40103">API
    name]</st>`<st c="40112">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="40113">Click on</st> **<st c="40123">Authorization</st>** <st c="40136">from
    the</st> <st c="40146">left menu.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="40156">You should see something that looks like</st> *<st c="40198">Figure
    4</st>**<st c="40206">.27</st>*<st c="40209">, with two endpoints with an authenticator
    associated.</st> <st c="40264">In this case, that’s</st> **<st c="40285">JWT Auth</st>**<st
    c="40293">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.27 – API Gateway authorization pane](img/B22051_04_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="41004">Figure 4.27 – API Gateway authorization pane</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="41048">From the authorizer</st> <st c="41068">details on the right, you
    can see that it expects an authorization token in the</st> **<st c="41149">Authorization</st>**
    <st c="41162">header and will verify it based on your Cognito user</st> <st c="41216">pool
    configuration.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="41235">To understand the behavior, we</st> <st c="41266">have created
    the</st> `<st c="41284">/auth</st>` <st c="41289">route that, at this moment,
    does not require authorization, meaning it is publicly accessible.</st> <st c="41385">We
    will make some changes to understand how to make it a protected route and require
    an</st> <st c="41473">authorization token.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="41493">For this example, we used</st> `<st c="41520">curl</st>`<st c="41524">,
    but you can perform the same test with other tools, for</st> <st c="41582">example,
    Postman:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="41599">Perform a</st> `<st c="41610">Get</st>` <st c="41613">request
    to the</st> `<st c="41629">API_URL/auth</st>` <st c="41641">endpoint.</st> <st
    c="41652">You should have this value in your</st> `<st c="41687">config.tsx</st>`
    <st c="41697">file, but in case you do not have it available, you can access your</st>
    **<st c="41766">Outputs</st>** <st c="41773">tab from the</st> <st c="41787">CloudFormation
    console:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="42069">On the</st> **<st c="42077">Select an authorizer to view its details</st>**
    <st c="42117">dropdown,</st> <st c="42128">select</st> **<st c="42135">CognitoAuthorizer</st>**<st
    c="42152">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="42153">Click on</st> **<st c="42163">Attach Authorizer</st>**<st c="42180">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.28 – Authorizer attachment process](img/B22051_04_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="42404">Figure 4.28 – Authorizer attachment process</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="42447">Your</st> **<st c="42453">Authorization</st>** <st c="42466">menu
    should now include the</st> **<st c="42495">JWT Auth</st>** <st c="42503">mark
    in front of the</st> **<st c="42525">/auth</st>** <st c="42530">|</st> **<st c="42533">GET</st>**
    <st c="42536">option, as shown in</st> *<st c="42557">Figure 4</st>**<st c="42565">.29</st>*<st
    c="42568">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.29 – Routes Authorizers’ page](img/B22051_04_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="42616">Figure 4.29 – Routes Authorizers’ page</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="42654">Perform the</st> <st c="42667">request again and confirm that
    we get an</st> `<st c="42708">Unauthorized</st>` <st c="42720">response:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="42965">Change the request to include the authorization token.</st> <st
    c="43021">To get the authorization token, follow</st> <st c="43060">these steps:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="43072">Go to your application in</st> <st c="43099">your browser.</st>
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="43112">Navigate to the</st> **<st c="43129">Admin</st>** <st c="43134">console.</st>
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="43143">If you are not authenticated, proceed with the</st> <st c="43191">sign-in
    process.</st>
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="43207">On the</st> **<st c="43215">Admin</st>** <st c="43220">page, hover
    over the access token and copy the full access token, as shown in</st> *<st c="43299">Figure
    4</st>**<st c="43307">.23</st>*<st c="43310">.</st>
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="43311">Now try to perform the same request but pass the</st> `<st c="43361">Authorization</st>`
    <st c="43374">header with the value you copied from your</st> <st c="43418">admin
    console:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: <st c="43562">With this change, you are able to perform requests to this</st>
    <st c="43622">route again.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="43634">Try to change a single character in your long JWT and you will
    note that modifying even a single character in your token means it will become
    invalid and any requests associated with that token will be</st> <st c="43836">rejected
    because the signature verification will fail, preventing</st> <st c="43903">unauthorized
    access.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="43923">Clean up</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="43932">One of the main advantages</st> <st c="43960">of using serverless
    technologies is that they provide a pay-as-you-go model by design, meaning you
    only pay for what you use.</st> <st c="44086">However, in the long term, you may
    incur costs if you leave the application up and running, so it is recommended
    to clean your infrastructure if you are not using it anymore.</st> <st c="44261">Since
    we deployed it with an IaC, the clean-up process is very straightforward, and
    is composed of</st> <st c="44360">two steps:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="44370">Empty</st> <st c="44377">the bucket:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="44388">Go to the S3 console in your</st> <st c="44418">AWS account.</st>
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="44430">Select your frontend s3 bucket (the name of the bucket should
    start with</st> `<st c="44504">frontend-chapter-4-</st>`<st c="44523">, followed
    by a</st> <st c="44539">random string).</st>
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="44554">Click on</st> **<st c="44564">Empty</st>**<st c="44569">; This
    will</st> <st c="44582">delete all the content inside</st> <st c="44612">your
    bucket.</st>
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.30 – Process of emptying an S3 bucket](img/B22051_04_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="44972">Figure 4.30 – Process of emptying an S3 bucket</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="45018">Delete the</st> <st c="45030">CloudFormation stack:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="45051">Go to the CloudFormation console in your</st> <st c="45093">AWS
    account.</st>
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="45105">Select the stack</st> <st c="45123">you created.</st>
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="45135">Click</st> <st c="45142">on</st> **<st c="45145">Delete</st>**<st
    c="45151">.</st>
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '<st c="45152">Note: If you don’t see your CloudFormation stack on the list,
    try to change the region in the upper-right corner and select the region where
    you deployed your application.</st> <st c="45325">After that, you should proceed
    with the deletion process described and represented in</st> *<st c="45411">Figure
    4</st>**<st c="45419">.31</st>*<st c="45422">.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.31 – CloudFormation Stack deletion](img/B22051_04_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="45698">Figure 4.31 – CloudFormation Stack deletion</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="45741">With the previous</st> <st c="45759">steps, you successfully removed
    all the resources created for the</st> <st c="45826">recipe-sharing application.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="45853">Rearchitecting your recipe-sharing application using serverless
    technologies has been an exciting experiment.</st> <st c="45964">However, as with
    any project, there are always opportunities for improvement.</st> <st c="46042">The
    next section will explore potential enhancements and future considerations to
    further refine your serverless</st> <st c="46155">recipe-sharing application.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="46182">Future work</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="46194">Congratulations, you have built a new version of your recipe-sharing
    application with solely serverless technologies and you can now scale based on
    utilization without worrying about your application’s infrastructure.</st> <st
    c="46413">This new recipe-sharing application already incorporates some of the
    future work highlighted in the previous chapter, for example, authentication or
    utilization of secure protocols, but there is always room</st> <st c="46620">for
    improvement.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="46636">Enrich your application with media content</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="46679">So far, your application shows a</st> <st c="46712">set of ingredients
    and steps, which is the minimum required to follow a recipe.</st> <st c="46793">However,
    the first thing people look for is a photo of the expected result and your application
    still lacks this feature.</st> <st c="46915">As future work, you could invest
    in adding photos and videos to your recipe to improve the user experience and
    enrich the</st> <st c="47037">recipe content.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="47052">User profile</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="47065">With your current authentication mechanism, only authorized users
    can manage the recipes, but for the end users, you have almost no visibility of
    their preferences and profiles.</st> <st c="47244">The likes feature gives</st>
    <st c="47267">you a notion of how popular a recipe is, but that does not mean
    it fits everyone’s preferences.</st> <st c="47364">For example, a user may have
    some food restrictions and if you could offer a more customized experience, this
    would probably increase your application’s popularity.</st> <st c="47529">As a
    future project, you could invest in letting your users create their own profiles,
    with their own preferences and food restrictions, and shortlist recipes based
    on</st> <st c="47697">their preferences.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="47715">In the last chapter, there was already a long list of possible
    improvements.</st> <st c="47793">Most of those still apply to this version of
    your application, for example, caching the content or defining a monitoring and
    logging platform, so we only focused on two additional features to add to the
    current</st> <st c="48003">list of</st> <st c="48012">future work.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '*<st c="48024">Figure 4</st>**<st c="48033">.32</st>* <st c="48036">demonstrates
    how your architecture could look based on the two proposed improvements</st> <st
    c="48122">we highlighted.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.32 – Final architecture](img/B22051_04_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="48353">Figure 4.32 – Final architecture</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="48385">Note that an Amazon S3 bucket was added to the data layer, which
    will be responsible for storing all the media content related to each recipe.</st>
    <st c="48529">As a learning exercise, think about how you can store the paths
    of the recipe photos and try to</st> <st c="48625">implement them.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="48640">As a hint, you could</st> <st c="48662">follow the same logic
    you have currently for ingredients and steps, and store the paths of each media
    file in an array inside the</st> <st c="48792">recipe document…</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="48808">Summary</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="48816">In this chapter, you invested in rearchitecting your previous
    application, and it is now more robust and feature-rich.</st> <st c="48936">Moreover,
    you focused only on serverless technologies such as Amazon API Gateway for our
    API, Amazon Cognito for the authentication layer, and Amazon Lambda for compute,
    and it should be clear how these technologies offer advantages in terms of scalability,
    cost efficiency, and operational effort.</st> <st c="49235">For the unchanged
    components such as Amazon S3 and Amazon CloudFront for the frontend, or Amazon
    DynamoDB as the data layer, you were able to practice and review it, so you should
    be more proficient</st> <st c="49434">with them.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="49444">In the next chapter, you will explore machine learning using AWS
    technologies to develop an</st> <st c="49537">image analyzer.</st>
  prefs: []
  type: TYPE_NORMAL

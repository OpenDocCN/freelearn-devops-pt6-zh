- en: <st c="0">4</st>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="0">4</st>
- en: <st c="2">Building a Serverless Recipe-Sharing Application</st>
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="2">构建无服务器食谱分享应用</st>
- en: <st c="50">In the previous chapter, you developed a recipe sharing application
    with a frontend hosted on Amazon S3 and CloudFront, and a backend using Amazon
    EC2 instances and DynamoDB.</st> <st c="226">For the end user, only the functionalities
    and the overall user experience are visible, but it is up to the provider to define
    how to architect the application and which technologies</st> <st c="409">to use.</st>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="50">在上一章中，你开发了一个食谱分享应用，前端托管在 Amazon S3 和 CloudFront 上，后端使用 Amazon EC2
    实例和 DynamoDB。</st> <st c="226">对于最终用户来说，只能看到功能和整体用户体验，但由提供者定义如何架构应用以及使用哪些技术</st>
    <st c="409">来实现。</st>
- en: <st c="416">Traditional application deployment involves provisioning and managing
    servers, configuring environments, scaling resources, applying security patches,
    and monitoring system health.</st> <st c="598">This approach requires significant
    operational overhead and often leads to inefficient resource utilization as resources
    are provisioned for</st> <st c="739">peak demand.</st>
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="416">传统的应用部署涉及服务器的配置和管理、环境配置、资源扩展、安全补丁应用以及系统健康监控。</st> <st c="598">这种方法需要大量的操作开销，并且常常导致资源利用效率低下，因为资源是为</st>
    <st c="739">高峰需求而配置的。</st>
- en: <st c="751">In contrast, serverless computing abstracts away the underlying
    infrastructure, allowing developers to focus solely on writing code.</st> <st
    c="885">With serverless, the provisioning, scaling, and server management are
    handled by the cloud provider, enabling a more agile, event-driven approach with
    a</st> <st c="1038">pay-as-you-go model.</st>
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="751">相比之下，无服务器计算抽象化了底层基础设施，使开发者能够专注于编写代码。</st> <st c="885">使用无服务器计算时，资源的配置、扩展和服务器管理由云提供商处理，从而实现更灵活、事件驱动的方法，并且采用</st>
    <st c="1038">按需付费模式。</st>
- en: <st c="1058">Event-driven architectures consist of separate services that interact
    with each other through events.</st> <st c="1161">When a user requests to create
    a new recipe, for example, that request becomes an event.</st> <st c="1250">This
    event then triggers the necessary code to handle the business logic related to
    creating the recipe.</st> <st c="1355">By using this approach, the system doesn’t
    need to have all the resources prepared and allocated in advance.</st> <st c="1464">Instead,
    it responds to events as they occur, making the architecture more efficient</st>
    <st c="1549">and adaptable.</st>
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1058">事件驱动架构由通过事件相互作用的独立服务组成。</st> <st c="1161">例如，当用户请求创建一个新食谱时，该请求就变成了一个事件。</st>
    <st c="1250">这个事件会触发必要的代码来处理与创建食谱相关的业务逻辑。</st> <st c="1355">通过使用这种方法，系统无需提前准备和分配所有资源。</st>
    <st c="1464">相反，它会在事件发生时响应，从而使架构更加高效</st> <st c="1549">且具有适应性。</st>
- en: <st c="1563">In this chapter, you will experiment with the adoption of serverless
    technologies by rearchitecting your recipe-sharing application with solely</st>
    <st c="1708">serverless technologies.</st>
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1563">在本章中，你将通过完全采用</st> <st c="1708">无服务器技术重新架构你的食谱分享应用，来尝试采用无服务器技术。</st>
- en: <st c="1732">In summary, this chapter covers the following topics</st> <st c="1786">in
    order:</st>
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1732">总之，本章涵盖了以下主题</st> <st c="1786">按顺序：</st>
- en: <st c="1795">What you are going to build – the latest version of the recipe
    sharing application solely supported by</st> <st c="1899">serverless technologies</st>
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1795">你将要构建的内容——一个完全由</st> <st c="1899">无服务器技术支持的最新版本的食谱分享应用</st>
- en: <st c="1922">How you are going to build it – Amazon API Gateway and Lambda for
    the backend and Amazon Cognito</st> <st c="2020">for authentication</st>
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1922">你将如何构建它——使用 Amazon API Gateway 和 Lambda 作为后端，Amazon Cognito</st>
    <st c="2020">用于身份验证</st>
- en: <st c="2038">Building it – through CloudFormation and using the</st> <st c="2090">AWS
    console</st>
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="2038">构建它——通过 CloudFormation 并使用</st> <st c="2090">AWS 控制台</st>
- en: <st c="2101">How to improve the solution – support media content for your recipes
    and extend authentication to the end users for a more</st> <st c="2225">customized
    experience</st>
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="2101">如何改进解决方案——支持食谱的媒体内容，并将身份验证扩展到最终用户，以便提供更</st> <st c="2225">个性化的体验</st>
- en: <st c="2246">By the end of this chapter, you will gain hands-on experience in
    rearchitecting a dynamic web application using AWS serverless technologies such
    as Lambda, API Gateway, Cognito, S3, and DynamoDB.</st> <st c="2443">You will
    also understand the benefits of serverless computing, such as scalability and
    cost-effectiveness, in modern</st> <st c="2560">application development.</st>
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2246">在本章结束时，你将获得动手实践经验，通过使用AWS无服务器技术（如Lambda、API Gateway、Cognito、S3和DynamoDB）重新架构一个动态Web应用。</st>
    <st c="2443">你还将理解无服务器计算的好处，如可扩展性和成本效益，在现代</st> <st c="2560">应用开发中的应用。</st>
- en: <st c="2584">Technical requirements</st>
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="2584">技术要求</st>
- en: <st c="2607">To follow along and implement your serverless version of the recipe-sharing
    application, you will need to have access to your own</st> <st c="2738">AWS account.</st>
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2607">要跟随并实现食谱共享应用的无服务器版本，你需要拥有自己的</st> <st c="2738">AWS帐户。</st>
- en: <st c="2750">Also, this book has a dedicated folder within its GitHub repository,
    where you can find the necessary code snippets to follow</st> <st c="2877">along:</st>
    [<st c="2884">https://github.com/PacktPublishing/AWS-Cloud-Projects/tree/main/chapter4/code</st>](https://github.com/PacktPublishing/AWS-Cloud-Projects/tree/main/chapter4/code)<st
    c="2961">.</st>
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2750">此外，本书的GitHub代码库中有一个专门的文件夹，你可以在其中找到跟随学习所需的代码片段：</st> [<st c="2884">https://github.com/PacktPublishing/AWS-Cloud-Projects/tree/main/chapter4/code</st>](https://github.com/PacktPublishing/AWS-Cloud-Projects/tree/main/chapter4/code)<st
    c="2961">。</st>
- en: <st c="2962">Scenario</st>
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="2962">场景</st>
- en: <st c="2971">After successfully deploying your personal website for your CV
    as part of</st> [*<st c="3046">Chapter 2</st>*](B22051_02.xhtml#_idTextAnchor032)<st
    c="3055">, you have had your first experience with cloud technologies and started
    gaining confidence in this area.</st> <st c="3161">In the previous chapter, with
    your recipe-sharing application, you evolved to a more complex application with
    a backend to handle recipe operations such as creation, deletion, and retrieval,
    and your user base grew more</st> <st c="3381">than expected.</st>
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2971">在成功部署个人网站作为你的简历的一部分后，</st> [*<st c="3046">第二章</st>*](B22051_02.xhtml#_idTextAnchor032)<st
    c="3055">，你首次接触了云技术，并开始在这一领域建立信心。</st> <st c="3161">在上一章中，借助你的食谱共享应用，你将一个更复杂的应用演变为有后台处理的应用，后台负责处理食谱操作，如创建、删除和检索，用户基础也增长得超出了预期。</st>
- en: <st c="3395">Your application is now considered one of the most popular apps
    for recipes and cooking.</st> <st c="3485">You are spending more time scaling
    and managing infrastructure than investing in improving your application based
    on valuable user feedback, not to mention the impact in terms of cost as the application’s
    popularity continues</st> <st c="3711">to grow.</st>
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3395">你的应用现在被认为是最受欢迎的食谱和烹饪应用之一。</st> <st c="3485">你花在扩展和管理基础设施上的时间越来越多，而不是基于有价值的用户反馈来改进应用，更不用说随着应用的受欢迎程度不断</st>
    <st c="3711">增长，成本方面的影响了。</st>
- en: <st c="3719">Last month, you attended a conference about serverless technologies,
    and you learned that they really fit your needs.</st> <st c="3838">The more you
    explore, the more you realize that they can provide a more efficient, scalable,
    and cost-effective solution for your recipe-sharing application.</st> <st c="3996">With
    serverless architectures, you can focus on writing code and building features
    without worrying about provisioning and managing servers or infrastructure, which
    is exactly what you are</st> <st c="4185">looking for.</st>
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3719">上个月，你参加了一场关于无服务器技术的会议，你了解到这些技术非常适合你的需求。</st> <st c="3838">你越是深入探索，越意识到它们可以为你的食谱共享应用提供更高效、可扩展且具有成本效益的解决方案。</st>
    <st c="3996">使用无服务器架构，你可以专注于编写代码和构建功能，而无需担心配置和管理服务器或基础设施，这正是你所</st> <st c="4185">寻找的。</st>
- en: <st c="4197">After some research, you decide to rearchitect your application
    to leverage AWS serverless services to benefit from automatic scaling, pay-per-use
    pricing, and reduced</st> <st c="4366">operational overhead.</st>
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4197">经过一些研究后，你决定重新架构你的应用，利用AWS无服务器服务，以便受益于自动扩展、按需计费和减少</st> <st c="4366">操作开销。</st>
- en: <st c="4387">Requirements</st>
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="4387">需求</st>
- en: <st c="4400">As you have done in the previous chapter, you will start by gathering
    the requirements for this project.</st> <st c="4506">This will serve as</st> <st
    c="4524">the baseline for all the technical choices you will make next, so it
    is important to have a clear view of the objectives</st> <st c="4646">and restrictions.</st>
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4400">如同前一章中所做的，你将从收集该项目的需求开始。</st> <st c="4506">这将作为</st> <st c="4524">所有技术选择的基础，因此必须清楚地了解目标</st>
    <st c="4646">和限制。</st>
- en: <st c="4663">Overall, you still want to serve two</st> <st c="4701">different
    profiles:</st>
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4663">总体来说，你仍然希望服务于两种</st> <st c="4701">不同的用户类型：</st>
- en: '**<st c="4720">Admin</st>**<st c="4726">: Platform owner responsible for creating
    and</st> <st c="4773">managing recipes</st>'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="4720">管理员</st>**<st c="4726">：平台所有者，负责创建和</st> <st c="4773">管理食谱</st>'
- en: '**<st c="4789">End users or consumers</st>**<st c="4812">: Access the shared
    recipes and put likes on the</st> <st c="4862">preferred ones</st>'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="4789">最终用户或消费者</st>**<st c="4812">：访问共享的食谱并点赞</st> <st c="4862">喜欢的食谱</st>'
- en: <st c="4876">Considering that this project is an evolution from the previous
    one, let us focus on the changes and break down the</st> <st c="4993">new requirements.</st>
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4876">考虑到这个项目是前一个项目的升级版，我们将专注于变化并分解</st> <st c="4993">新的需求。</st>
- en: <st c="5010">Business requirements</st>
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="5010">业务需求</st>
- en: <st c="5032">With your previous</st> <st c="5051">recipe-sharing application,
    you exceeded all the expectations.</st> <st c="5115">As of now, when people think
    about cooking and are looking for inspiration, they go directly to your application
    and your market is not restricted to the US.</st> <st c="5273">Instead, you are
    evenly distributed between the US, Europe, and Asia with 41%, 35%, and 20% geo-distribution
    respectively, with the remaining 4% spread across the globe, and you reached a
    total of 150 thousand users in the</st> <st c="5496">last year.</st>
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5032">凭借你之前的</st> <st c="5051">食谱分享应用，你超出了所有的预期。</st> <st c="5115">到目前为止，当人们想到烹饪并寻找灵感时，他们会直接使用你的应用，且你的市场不局限于美国。</st>
    <st c="5273">相反，你的用户分布均匀，分别为美国41%、欧洲35%、亚洲20%，其余4%分布在全球其他地区，去年你达到了15万用户。</st>
- en: <st c="5506">Due to your success, you were able to sign more than one contract
    with companies from different segments (ads, food delivery, and food producers),
    but your growth plans continue.</st> <st c="5686">As you move forward, you have
    identified the following key objectives to</st> <st c="5759">focus on:</st>
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5506">由于你的成功，你能够与来自不同领域（广告、外卖和食品生产）的公司签订多个合同，但你的增长计划仍在继续。</st> <st c="5686">在前进的过程中，你已经确定了以下关键目标来</st>
    <st c="5759">专注：</st>
- en: <st c="5768">Achieve 10% yearly</st> <st c="5788">user growth</st>
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="5768">实现10%的年</st> <st c="5788">用户增长</st>
- en: <st c="5799">Improve</st> <st c="5808">your</st> <st c="5812">cost-effectiveness</st>
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="5799">提高</st> <st c="5808">你的</st> <st c="5812">成本效益</st>
- en: <st c="5831">Functional requirements</st>
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="5831">功能需求</st>
- en: <st c="5855">Regarding functional requirements, you do not expect major changes
    compared to the previous chapter, so to</st> <st c="5962">summarize, these are</st>
    <st c="5984">as follows:</st>
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5855">关于功能需求，相比前一章你不期望有重大变化，因此，概括起来，这些是</st> <st c="5962">如下：</st>
- en: <st c="5995">Two different profiles (admin</st> <st c="6026">and user)</st>
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="5995">两种不同的用户类型（管理员</st> <st c="6026">和用户）</st>
- en: <st c="6035">Simple</st> <st c="6043">user interface</st>
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="6035">简单</st> <st c="6043">的用户界面</st>
- en: <st c="6057">Responsiveness</st>
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="6057">响应能力</st>
- en: <st c="6072">With the time you’ve been spending managing the infrastructure,
    you did not have much time to invest in creating new functionalities for your
    application.</st> <st c="6228">However, based on the feedback received from the
    users, you want to include two</st> <st c="6308">new features:</st>
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6072">由于你一直在管理基础设施，没能投入太多时间去为应用开发新功能。</st> <st c="6228">然而，根据用户反馈，你希望增加两个</st>
    <st c="6308">新功能：</st>
- en: <st c="6321">Authentication</st> <st c="6337">and authorization</st>
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="6321">身份验证</st> <st c="6337">和授权</st>
- en: <st c="6354">Ability to add likes to recipes, and sort</st> <st c="6397">by
    it</st>
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="6354">能够对食谱进行点赞，并按点赞排序</st> <st c="6397">进行排序</st>
- en: <st c="6402">Mockups are a good strategy to create a visual representation of
    the expected behavior of your application, as you saw in the previous chapter.</st>
    <st c="6547">Therefore, for this section, you will do a similar exercise, focusing
    only on the new features planned, as shown in</st> *<st c="6663">Figures 4.1</st>*<st
    c="6674">,</st> *<st c="6676">4.2</st>*<st c="6679">, and</st> *<st c="6685">4.3</st>*<st
    c="6688">. For the home page you will keep the same layout, as shown in</st> [*<st
    c="6751">Chapter 3</st>*](B22051_03.xhtml#_idTextAnchor054)<st c="6760">,</st>
    *<st c="6762">Figure 3</st>**<st c="6770">.1</st>*<st c="6772">.</st>
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6402">模拟图是创建应用程序预期行为的可视化表现的好策略，正如你在上一章中看到的那样。</st> <st c="6547">因此，在这一部分，你将进行类似的练习，只关注计划中的新特性，如</st>
    *<st c="6663">图 4.1</st>*<st c="6674">、</st> *<st c="6676">4.2</st>*<st c="6679">和</st>
    *<st c="6685">4.3</st>*<st c="6688">所示。对于主页，你将保持相同的布局，如</st> [*<st c="6751">第
    3 章</st>*](B22051_03.xhtml#_idTextAnchor054)<st c="6760">，</st> *<st c="6762">图
    3</st>**<st c="6770">.1</st>*<st c="6772">。</st>
- en: '<st c="6773">You do not expect different profiles to access your application,
    so the same division applies: users</st> <st c="6875">and admins.</st>'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6773">你不指望不同的个人资料访问你的应用程序，因此相同的划分适用：用户</st> <st c="6875">和管理员。</st>
- en: <st c="6886">Note</st>
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6886">注意</st>
- en: <st c="6891">We will not list the features that are maintained, such as the
    access to the list of recipe titles, since it was covered in the previous chapter
    and we want to avoid duplication.</st> <st c="7071">Assuming you are following
    along, you should be familiar with the initial requirements, and if that is not
    the case, we recommend reviewing them in the</st> *<st c="7223">Requirements</st>*
    <st c="7235">section from the</st> <st c="7253">previous chapter.</st>
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6891">我们不会列出那些保持不变的功能，如访问食谱标题列表，因为这些内容已经在上一章中讨论过，我们希望避免重复。</st> <st c="7071">假设你已经跟上了进度，你应该已经熟悉了初步需求，如果不熟悉，我们建议你回顾一下上一章中的</st>
    *<st c="7223">需求</st>* <st c="7235">部分。</st>
- en: <st c="7270">Let us explore each profile</st> <st c="7298">and the changes expected
    in terms of interface</st> <st c="7346">and behavior:</st>
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7270">让我们探索每个个人资料</st> <st c="7298">以及界面</st> <st c="7346">和行为方面的预期变化：</st>
- en: '`<st c="7359">/user</st>`<st c="7365">: Like a</st> <st c="7375">specific recipe.</st>'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="7359">/user</st>`<st c="7365">：像一个</st> <st c="7375">特定食谱。</st>'
- en: '![Figure 4.1 – UI Mockup User Page](img/B22051_04_1.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.1 – UI 模拟用户页面](img/B22051_04_1.jpg)'
- en: <st c="7557">Figure 4.1 – UI Mockup User Page</st>
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7557">图 4.1 – UI 模拟用户页面</st>
- en: '`<st c="7589">/admin</st>`<st c="7596">: Restrict access to the admin portal
    with an authentication mechanism, with a simple form if a user tries to access
    the admin page, as depicted in</st> *<st c="7745">Figure 4</st>**<st c="7753">.2</st>*<st
    c="7755">.</st>'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="7589">/admin</st>`<st c="7596">：通过身份验证机制限制对管理员门户的访问，当用户尝试访问管理员页面时，提供一个简单的表单，如</st>
    *<st c="7745">图 4</st>**<st c="7753">.2</st>*<st c="7755">所示。</st>'
- en: '![Figure 4.2 – UI mockup – authentication](img/B22051_04_2.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.2 – UI 模拟图 – 身份验证](img/B22051_04_2.jpg)'
- en: <st c="7840">Figure 4.2 – UI mockup – authentication</st>
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7840">图 4.2 – UI 模拟图 – 身份验证</st>
- en: <st c="7879">Non-functional requirements</st>
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="7879">非功能性需求</st>
- en: <st c="7907">With the popularity</st> <st c="7927">increase of your application,
    cost and scalability are the new goals.</st> <st c="7998">Also, you want to accelerate
    feature rollout by shifting the time you spend managing infrastructure to application
    innovation.</st> <st c="8125">To summarize, here is what</st> <st c="8152">we
    need:</st>
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '<st c="7907">随着你的应用程序的普及，成本和可扩展性成为新的目标。</st> <st c="7927">此外，你希望通过将管理基础设施的时间转向应用程序创新来加速功能的推出。</st>
    <st c="7998">总结一下，我们需要：</st> '
- en: <st c="8160">Cost-effectiveness</st>
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="8125">成本效益</st>
- en: <st c="8179">Event-driven architecture</st>
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="8160">事件驱动架构</st>
- en: <st c="8205">Low</st> <st c="8210">infrastructure management</st>
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="8205">低</st> <st c="8210">基础设施管理</st>
- en: <st c="8235">Technical requirements</st>
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="8235">技术需求</st>
- en: <st c="8258">Compared to the previous chapter</st> <st c="8292">and considering
    the overall feedback of your users, you want this re-architecture to be as smooth
    as possible with no impact on the current users in terms of the interface and
    user experience.</st> <st c="8485">You want to keep the previous technical choices
    and project from a programming language and frameworks standpoint, as much</st>
    <st c="8608">as possible.</st>
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8258">与上一章相比</st> <st c="8292">并考虑到用户的整体反馈，你希望这次重新架构能够尽可能平滑，不对当前用户的界面和用户体验产生影响。</st>
    <st c="8485">你希望在编程语言和框架的选择上，尽可能保持之前的技术选型和项目结构。</st> <st c="8608">尽量保持不变。</st>
- en: <st c="8620">As part of your latest research, you want to base your new platform
    architecture to use solely</st> <st c="8716">serverless technologies.</st>
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8620">作为最新研究的一部分，你希望将新的平台架构仅基于</st> <st c="8716">无服务器技术。</st>
- en: <st c="8740">Data requirements</st>
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="8740">数据需求</st>
- en: <st c="8758">This latest version is an extension of your previous one, and all
    the data requirements still apply.</st> <st c="8860">Your application is all about
    storing and managing recipes, which are composed of a set of steps</st> <st c="8956">and
    ingredients, but one of the features you want to implement is adding likes to
    a recipe.</st> <st c="9049">For the operations you perform over a recipe, you
    must do</st> <st c="9107">the following:</st>
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8758">这个最新版本是你之前版本的扩展，所有数据需求仍然适用。</st> <st c="8860">你的应用程序的核心是存储和管理食谱，食谱由一系列步骤</st>
    <st c="8956">和食材组成，但你想实现的一个功能是给食谱添加点赞。</st> <st c="9049">对于你在食谱上执行的操作，你必须进行以下操作：</st>
- en: '**<st c="9121">List the recipes</st>**<st c="9138">: Present a list of the</st>
    <st c="9163">recipes created.</st>'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="9121">列出食谱</st>**<st c="9138">：展示已创建的</st> <st c="9163">食谱列表。</st>'
- en: '**<st c="9179">Delete a recipe</st>**<st c="9195">: If an admin no longer wants
    a specific recipe to be part of their portfolio, it should be possible to delete</st>
    <st c="9307">the item.</st>'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="9179">删除食谱</st>**<st c="9195">：如果管理员不再希望某个特定的食谱出现在他们的目录中，应该允许删除</st>
    <st c="9307">该项。</st>'
- en: '**<st c="9316">Create a recipe</st>**<st c="9332">: Create a new recipe to
    share with</st> <st c="9369">the users.</st>'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="9316">创建食谱</st>**<st c="9332">：创建一个新的食谱以便与</st> <st c="9369">用户分享。</st>'
- en: '**<st c="9379">Like a recipe</st>**<st c="9393">: Increase the number of likes
    in a</st> <st c="9430">specific recipe.</st>'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="9379">点赞食谱</st>**<st c="9393">：增加特定食谱的点赞数。</st>'
- en: <st c="9446">Based on the operations listed, the only change you need to support
    is to store the number of likes per recipe, so you define a recent version for
    your recipe document as seen in the</st> `<st c="9630">recipe_example_2.json</st>`
    <st c="9651">recipe example:</st>
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9446">根据列出的操作，你需要支持的唯一更改是存储每个食谱的点赞数，因此你定义了一个更新版的食谱文档，如下所示：</st> `<st
    c="9630">recipe_example_2.json</st>` <st c="9651">食谱示例：</st>
- en: '[PRE0]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: <st c="9750">Architecture patterns</st>
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="9750">架构模式</st>
- en: <st c="9772">Each project is different, but</st> <st c="9803">there are some
    commonalities that can and should be leveraged when designing your applications.</st>
    <st c="9900">AWS has a dedicated portal for serverless architectures and patterns
    called</st> **<st c="9976">Serverless Land</st>** <st c="9991">(</st>[<st c="9993">https://serverlessland.com/</st>](https://serverlessland.com/)<st
    c="10020">), composed of the latest</st> <st c="10046">information, blogs, videos,
    code, and learning resources for serverless in AWS.</st> <st c="10127">It is always
    a good starting point whenever you are planning to build a</st> <st c="10199">serverless
    application.</st>
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9772">每个项目都有其独特之处，但</st> <st c="9803">在设计应用时，有一些共性是可以并且应该加以利用的。</st>
    <st c="9900">AWS 提供了一个专门的无服务器架构和模式门户，叫做</st> **<st c="9976">Serverless Land</st>**
    <st c="9991">(</st>[<st c="9993">https://serverlessland.com/</st>](https://serverlessland.com/)<st
    c="10020">)，包含了最新的</st> <st c="10046">无服务器架构的资讯、博客、视频、代码和学习资源，专门面向 AWS。</st> <st
    c="10127">每当你计划构建无服务器应用时，它总是一个很好的起点。</st>
- en: <st c="10222">Compared to traditional deployment strategies, serverless implies
    a different paradigm and a good understanding of the core services is key.</st>
    <st c="10364">AWS offers a serverless developer guide (</st>[<st c="10405">https://docs.aws.amazon.com/serverless/latest/devguide/welcome.html</st>](https://docs.aws.amazon.com/serverless/latest/devguide/welcome.html)<st
    c="10473">), with learning paths for the core services, and is also a great resource
    for</st> <st c="10553">serverless-related information.</st>
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10222">与传统的部署策略相比，Serverless意味着一种不同的范式，深入理解核心服务是关键。</st> <st c="10364">AWS
    提供了一个无服务器开发者指南（</st>[<st c="10405">https://docs.aws.amazon.com/serverless/latest/devguide/welcome.html</st>](https://docs.aws.amazon.com/serverless/latest/devguide/welcome.html)<st
    c="10473">），其中包括核心服务的学习路径，并且也是关于</st> <st c="10553">无服务器相关信息的绝佳资源。</st>
- en: <st c="10584">Lastly, as stated in the previous</st> <st c="10619">chapters,
    each AWS service has a dedicated page with all the service-related information.</st>
    <st c="10709">For example, in the case of AWS Lambda, you can access it</st> <st
    c="10767">at</st> [<st c="10770">https://aws.amazon.com/lambda/</st>](https://aws.amazon.com/lambda/)<st
    c="10800">.</st>
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10584">最后，正如前几章所述，每个 AWS 服务都有专门的页面，包含所有服务相关信息。</st> <st c="10619">例如，对于
    AWS Lambda，您可以访问它</st> <st c="10709">在</st> [<st c="10770">https://aws.amazon.com/lambda/</st>](https://aws.amazon.com/lambda/)<st
    c="10800">。</st>
- en: <st c="10801">Architecture</st>
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="10801">架构</st>
- en: <st c="10814">Whilst user experience and interface should be as similar as possible
    compared to the previous version of the recipe-sharing application developed in</st>
    [*<st c="10965">Chapter 3</st>*](B22051_03.xhtml#_idTextAnchor054)<st c="10974">,
    the platform architecture is where the</st> <st c="11014">majority of the changes
    should</st> <st c="11046">be noted.</st>
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10814">尽管用户体验和界面应尽可能与之前版本的食谱分享应用程序保持一致，</st> [*<st c="10965">第3章</st>*](B22051_03.xhtml#_idTextAnchor054)<st
    c="10974">，但平台架构是需要重点注意变化的地方。</st>
- en: <st c="11055">In this chapter, you will follow the same top-down approach when
    designing your architecture.</st> <st c="11150">You will be starting with the
    highest abstraction level and moving down to the component level architecture,
    where you define each of the services used and how all of them fit together to
    build</st> <st c="11344">your application.</st>
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11055">在本章中，您将采用与设计架构时相同的自上而下的方法。</st> <st c="11150">您将从最高抽象层开始，逐步深入到组件级架构，在这里定义所使用的每个服务，以及它们如何协调工作以构建</st>
    <st c="11344">您的应用程序。</st>
- en: <st c="11361">Looking at the different architecture layers, you will follow
    the same structure you had in the previous chapter, with three well-defined layers,
    like what is shown in</st> [*<st c="11530">Chapter 3</st>*](B22051_03.xhtml#_idTextAnchor054)<st
    c="11539">,</st> *<st c="11541">Figure 3</st>**<st c="11549">.4</st>*<st c="11551">:</st>
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11361">查看不同的架构层时，您将遵循与上一章相同的结构，包含三个明确定义的层次，就像在</st> [*<st c="11530">第3章</st>*](B22051_03.xhtml#_idTextAnchor054)<st
    c="11539">中展示的那样，</st> *<st c="11541">图 3</st>**<st c="11549">.4</st>*<st c="11551">：</st>
- en: '**<st c="11553">Presentation layer</st>**<st c="11571">: How to host and serve</st>
    <st c="11596">your frontend</st>'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="11553">展示层</st>**<st c="11571">：如何托管和提供</st> <st c="11596">前端</st>'
- en: '**<st c="11609">Compute layer</st>**<st c="11623">: How to incorporate and
    execute</st> <st c="11657">business logic</st>'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="11609">计算层</st>**<st c="11623">：如何整合和执行</st> <st c="11657">业务逻辑</st>'
- en: '**<st c="11671">Data layer</st>**<st c="11682">: Where to store and retrieve</st>
    <st c="11713">your data</st>'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="11671">数据层</st>**<st c="11682">：存储和检索</st> <st c="11713">您的数据</st>'
- en: <st c="11722">The Presentation and Compute layers use an API as the interface
    between the two layers.</st> <st c="11811">The API is responsible for exposing
    the endpoints to perform all the actions to execute and abstract the business
    logic.</st> <st c="11932">In this case, and taking into consideration the requirements,
    the main update is the inclusion of the new feature for liking a recipe, as represented
    in</st> *<st c="12085">Figure 4</st>**<st c="12093">.3</st>*<st c="12095">:</st>
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11722">展示层和计算层通过 API 作为这两层之间的接口。</st> <st c="11811">该 API 负责暴露端点，执行所有操作以执行并抽象出业务逻辑。</st>
    <st c="11932">在这种情况下，考虑到需求，主要更新是新增了对食谱点赞的新功能，如</st> *<st c="12085">图 4</st>**<st
    c="12093">.3</st>*<st c="12095">所示：</st>
- en: '![Figure 4.3 – API structure](img/B22051_04_3.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.3 – API 结构](img/B22051_04_3.jpg)'
- en: <st c="12189">Figure 4.3 – API structure</st>
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12189">图 4.3 – API 结构</st>
- en: <st c="12215">Here is</st> <st c="12224">the</st> <st c="12227">breakdown:</st>
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12215">以下是</st> <st c="12224">具体</st> <st c="12227">说明：</st>
- en: '`<st c="12238">GET /auth</st>`<st c="12248">: Test</st> <st c="12256">authorization
    flow</st>'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="12238">GET /auth</st>`<st c="12248">: 测试</st> <st c="12256">授权流程</st>'
- en: '`<st c="12274">GET /recipes</st>`<st c="12287">: Get the list</st> <st c="12303">of
    recipes</st>'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="12274">GET /recipes</st>`<st c="12287">: 获取菜谱列表</st> <st c="12303">的接口</st>'
- en: '`<st c="12313">GET /health</st>`<st c="12325">: Simple health</st> <st c="12342">check
    endpoint</st>'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="12313">GET /health</st>`<st c="12325">: 简单健康</st> <st c="12342">检查端点</st>'
- en: '`<st c="12356">DELETE</st> <st c="12364">/recipes/{recipe_id}</st>`<st c="12384">:
    Delete a specific recipe by</st> <st c="12415">its ID</st>'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="12356">DELETE</st> <st c="12364">/recipes/{recipe_id}</st>`<st c="12384">:
    删除特定的菜谱，使用</st> <st c="12415">其ID</st>'
- en: '`<st c="12421">POST /recipes</st>`<st c="12435">: Create a new</st> <st c="12451">recipe
    record</st>'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="12421">POST /recipes</st>`<st c="12435">: 创建新的</st> <st c="12451">菜谱记录</st>'
- en: '`<st c="12464">PUT /reci</st><st c="12474">pes/like/{recipe_id}</st>`<st c="12495">:
    increase</st> <st c="12507">recipes’ likes</st>'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="12464">PUT /reci</st><st c="12474">pes/like/{recipe_id}</st>`<st c="12495">:
    增加菜谱的喜欢数</st>'
- en: <st c="12521">Besides the endpoint for adding likes, we also added the</st>
    `<st c="12579">/auth</st>` <st c="12584">endpoint, which, despite not being used
    for the application, serves as a learning resource for understanding the authentication
    and endpoint</st> <st c="12726">protection workflow.</st>
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12521">除了添加喜欢的端点外，我们还增加了</st> `<st c="12579">/auth</st>` <st c="12584">端点，尽管该端点并未用于应用程序，但它作为理解认证和端点</st>
    <st c="12726">保护工作流的学习资源。</st>
- en: '*<st c="12746">Figure 4</st>**<st c="12755">.4</st>* <st c="12757">represents
    the architecture you will implement, based on all the requirements.</st> <st c="12837">The
    frontend will use the same approach as in the previous chapter, with S3 and CloudFront
    for hosting and serving.</st> <st c="12953">The data layer will still use DynamoDB
    to store recipe data.</st> <st c="13014">However, you will introduce Amazon Cognito
    as an authentication service to restrict recipe management activities to authorized
    users.</st> <st c="13148">For the API, you will use Amazon API</st> <st c="13185">Gateway
    and associate it with AWS Lambda functions to implement the API</st> <st c="13257">endpoint
    functionalities.</st>'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '*<st c="12746">图4</st>**<st c="12755">.4</st>* <st c="12757">代表了你将实现的架构，基于所有的要求。</st>
    <st c="12837">前端将使用与上一章相同的方法，利用S3和CloudFront进行托管和服务。</st> <st c="12953">数据层仍将使用DynamoDB来存储菜谱数据。</st>
    <st c="13014">然而，你将引入Amazon Cognito作为认证服务，将菜谱管理活动限制为授权用户。</st> <st c="13148">对于API，你将使用Amazon
    API</st> <st c="13185">Gateway并将其与AWS Lambda函数关联，以实现API</st> <st c="13257">端点功能。</st>'
- en: '![Figure 4.4 – AWS architecture for your new recipe-sharing application](img/B22051_04_4.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图4.4 – 用于你的新菜谱共享应用程序的AWS架构](img/B22051_04_4.jpg)'
- en: <st c="13445">Figure 4.4 – AWS architecture for your new recipe-sharing application</st>
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="13445">图4.4 – 用于你的新菜谱共享应用程序的AWS架构</st>
- en: <st c="13514">Each of the services mentioned, as well as the main advantages
    and reasons for these choices, will be</st> <st c="13617">described next.</st>
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="13514">接下来将描述每个提到的服务，以及选择这些服务的主要优势和原因。</st>
- en: <st c="13632">AWS services</st>
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="13632">AWS服务</st>
- en: <st c="13645">Choosing from the</st> <st c="13664">vast number of services available
    can be challenging, and a good understanding of the requirements is key for the
    decision.</st> <st c="13788">Part of the services were covered in previous chapters,
    so to avoid duplication, we’ll only mention the advantages for the current use
    case if not referenced before, and point to the relevant chapter for a</st> <st
    c="13994">detailed explanation.</st>
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="13645">从大量可用服务中进行选择可能具有挑战性，理解需求是做出决策的关键。</st> <st c="13788">部分服务已经在前几章中介绍过，为避免重复，我们将仅提及当前用例的优势（如果之前没有提到），并指向相关章节以获取</st>
    <st c="13994">详细解释。</st>
- en: <st c="14015">Amazon Simple Storage Service (S3)</st>
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="14015">Amazon Simple Storage Service (S3)</st>
- en: <st c="14050">Amazon S3 is an example</st> <st c="14075">of a serverless technology
    that you should already be familiar with, as it was explained in</st> <st c="14167">detail
    in the previous two chapters.</st> <st c="14204">If you want to review it, we
    recommend checking the details in</st> *<st c="14267">Chapters 2</st>* <st c="14277">and</st>
    *<st c="14282">3</st>*<st c="14283">.</st>
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="14050">Amazon S3 是一种无服务器技术的例子，你应该已经熟悉它，因为它在</st> <st c="14167">前两章中有详细解释。</st>
    <st c="14204">如果你想复习，可以参考</st> *<st c="14267">第 2 章</st>* <st c="14277">和</st>
    *<st c="14282">第 3 章</st>*<st c="14283">。</st>
- en: <st c="14284">Amazon CloudFront</st>
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="14284">Amazon CloudFront</st>
- en: <st c="14302">Just like Amazon S3, CloudFront has</st> <st c="14338">been extensively
    used in the</st> <st c="14367">previous project of this book, and it was covered
    in the previous AWS Services sections in both</st> *<st c="14464">Chapters 2</st>*
    <st c="14474">and</st> *<st c="14479">3</st>*<st c="14480">. To review it, we
    recommend checking the details in the</st> <st c="14537">previous chapters.</st>
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="14302">与 Amazon S3 类似，CloudFront 在本书的前一个项目中</st> <st c="14338">被广泛使用，且在前面的
    AWS 服务章节中有详细覆盖，涉及</st> *<st c="14464">第 2 章</st>* <st c="14474">和</st> *<st c="14479">第
    3 章</st>*<st c="14480">。要复习相关内容，我们建议查阅前面的章节。</st>
- en: <st c="14555">Amazon DynamoDB</st>
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="14555">Amazon DynamoDB</st>
- en: <st c="14571">Data requirements have been the</st> <st c="14603">main drivers
    for choosing database</st> <st c="14638">technologies.</st> <st c="14653">In this
    chapter, the data requirements did not change, so Amazon DynamoDB keeps being
    our choice.</st> <st c="14751">The main characteristics and advantages were described
    in the</st> *<st c="14813">AWS Services</st>* <st c="14825">section in the previous
    chapter, so if you want to get a detailed explanation and understanding of DynamoDB,
    we recommend</st> <st c="14948">reviewing that.</st>
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="14571">数据需求一直是选择数据库</st> <st c="14603">技术的主要驱动因素。</st> <st c="14638">在本章中，数据需求没有变化，因此
    Amazon DynamoDB 依然是我们的选择。</st> <st c="14751">其主要特性和优势在</st> *<st c="14813">AWS
    服务</st>* <st c="14825">章节中已描述，因此，如果你希望详细了解 DynamoDB，我们建议</st> <st c="14948">查看该部分内容。</st>
- en: <st c="14963">AWS CloudFormation</st>
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="14963">AWS CloudFormation</st>
- en: <st c="14982">As you did in the previous</st> <st c="15010">chapter, you will
    continue to use AWS CloudFormation (CloudFormation) as your</st> **<st c="15088">Infrastructure
    as Code</st>** <st c="15110">(</st>**<st c="15112">IaC</st>**<st c="15115">) tool.</st>
    <st c="15124">CloudFormation was explained in detail in</st> <st c="15166">the
    previous chapter, so for a detailed</st> <st c="15205">explanation of the service
    and its advantages, we recommend reviewing</st> <st c="15276">that chapter.</st>
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="14982">如同你在前一章中所做的那样，你将继续使用 AWS CloudFormation（CloudFormation）作为你的</st>
    **<st c="15088">基础设施即代码</st>** <st c="15110">(</st>**<st c="15112">IaC</st>**<st
    c="15115">) 工具。</st> <st c="15124">CloudFormation 在</st> <st c="15166">前一章中有详细解释，因此我们建议你查看该章节，以了解该服务及其优势。</st>
- en: <st c="15289">Amazon Cognito</st>
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="15289">Amazon Cognito</st>
- en: <st c="15304">Amazon Cognito is a fully</st> <st c="15330">managed service that
    provides authentication, authorization, and user management for</st> <st c="15416">your
    web and mobile applications.</st> <st c="15450">With Amazon Cognito, you can easily
    implement features such as user sign-up, sign-in, and account recovery.</st> <st
    c="15558">It supports various authentication methods, including user pools (for
    managing your application’s own user directory) and identity pools (for integrating
    with social media or enterprise identity providers).</st> <st c="15765">Amazon
    Cognito integrates seamlessly with other AWS services, such as Amazon API Gateway,
    which are also part of your serverless architecture.</st> <st c="15908">This integration
    enables you to implement</st> <st c="15949">serverless authentication</st> <st
    c="15976">and authorization mechanisms for your API, ensuring that only authenticated
    users can access and perform actions within</st> <st c="16096">your application.</st>
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="15304">Amazon Cognito 是一项完全托管的服务，提供认证、授权和用户管理功能，用于</st> <st c="15416">你的
    Web 和移动应用程序。</st> <st c="15450">使用 Amazon Cognito，你可以轻松实现用户注册、登录和账户恢复等功能。</st>
    <st c="15558">它支持多种认证方式，包括用户池（用于管理应用程序的用户目录）和身份池（用于与社交媒体或企业身份提供者集成）。</st> <st
    c="15765">Amazon Cognito 与其他 AWS 服务（如 Amazon API Gateway）无缝集成，这些服务也是你无服务器架构的一部分。</st>
    <st c="15908">这种集成使你能够实现</st> <st c="15949">无服务器认证</st> <st c="15976">和授权机制，以确保只有经过认证的用户才能访问并执行操作，</st>
    <st c="16096">确保你的应用程序安全。</st>
- en: <st c="16113">Amazon Lambda</st>
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="16113">Amazon Lambda</st>
- en: <st c="16127">Amazon Lambda is a serverless</st> <st c="16158">computing service
    that allows you to run code without provisioning or managing servers.</st> <st
    c="16246">With Lambda, you can focus on writing your application code, and AWS
    takes</st> <st c="16321">care of provisioning an</st><st c="16344">d managing
    the underlying compute resources.</st> <st c="16390">Lambda automatically scales
    your code’s execution in response to incoming events or requests, ensuring that
    your application can handle fluctuations in traffic without</st> <st c="16558">manual
    intervention.</st>
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="16127">Amazon Lambda 是一个无服务器</st> <st c="16158">计算服务，允许您在无需配置或管理服务器的情况下运行代码。</st>
    <st c="16246">使用 Lambda，您可以专注于编写应用程序代码，AWS 会处理</st> <st c="16321">底层计算资源的配置</st><st
    c="16344">和管理。</st> <st c="16390">Lambda 会根据传入的事件或请求自动扩展代码执行，确保您的应用程序能够处理流量波动，而无需</st>
    <st c="16558">人工干预。</st>
- en: <st c="16578">Lambda provides support for various programming languages, with
    Python being one of the supported runtimes that fits your technical requirements.</st>
    <st c="16725">Furthermore, Lambda seamlessly integrates with other AWS services
    such as Amazon API Gateway, enabling you to create event-driven architectures
    and develop applications that are highly scalable, resilient to failures,</st>
    <st c="16943">and cost-effective.</st>
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="16578">Lambda 支持多种编程语言，其中 Python 是符合您技术要求的支持运行时之一。</st> <st c="16725">此外，Lambda
    无缝集成了其他 AWS 服务，如 Amazon API Gateway，使您能够创建事件驱动的架构并开发高度可扩展、容错且</st> <st c="16943">具成本效益的应用程序。</st>
- en: <st c="16962">API Gateway</st>
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="16962">API Gateway</st>
- en: <st c="16974">Amazon API Gateway is</st> <st c="16996">a fully managed service
    that makes it easy to create, publish, maintain, monitor, and secure APIs at any
    scale.</st> <st c="17109">It acts as the front door for your serverless application,
    handling client requests and routing them to the appropriate backend services,
    such as AWS</st> <st c="17259">Lambda functions.</st>
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="16974">Amazon API Gateway 是</st> <st c="16996">一个完全托管的服务，使您能够轻松创建、发布、维护、监控和保护任何规模的
    API。</st> <st c="17109">它作为您的无服务器应用程序的入口，处理客户端请求并将其路由到适当的后端服务，如 AWS</st> <st c="17259">Lambda
    函数。</st>
- en: <st c="17276">Amazon API Gateway supports</st> <st c="17304">two types of RESTful
    APIs:</st> **<st c="17332">REST APIs</st>** <st c="17341">and</st> **<st c="17346">HTTP
    APIs</st>**<st c="17355">. Choosing between the two</st> <st c="17381">must be
    based on the features supported.</st> <st c="17423">REST APIs provide more advanced
    features such as API versioning, request/response data</st> <st c="17509">transformations,
    caching, and comprehensive access control mechanisms, while HTTP can be considered
    if you are looking for a simplified and cost-effective option that does not require</st>
    <st c="17694">advanced features.</st>
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="17276">Amazon API Gateway 支持</st> <st c="17304">两种类型的 RESTful API：</st>
    **<st c="17332">REST API</st>** <st c="17341">和</st> **<st c="17346">HTTP API</st>**<st
    c="17355">。选择两者之一</st> <st c="17381">必须基于所支持的功能。</st> <st c="17423">REST API 提供更多高级功能，如
    API 版本控制、请求/响应数据</st> <st c="17509">转换、缓存和全面的访问控制机制，而如果您需要一个不包含</st> <st c="17694">高级功能的简化且具有成本效益的选项，可以考虑使用
    HTTP。</st>
- en: <st c="17712">If you want to know how to choose between HTTP and REST APIs in
    Amazon API Gateway, you can</st> <st c="17805">access</st> [<st c="17812">https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-vs-rest.html</st>](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-vs-rest.html)<st
    c="17894">.</st>
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="17712">如果您想了解如何在 Amazon API Gateway 中选择 HTTP API 和 REST API，您可以</st>
    <st c="17805">访问</st> [<st c="17812">https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-vs-rest.html</st>](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-vs-rest.html)<st
    c="17894">。</st>
- en: <st c="17895">Coding the solution</st>
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="17895">编码解决方案</st>
- en: <st c="17915">Now is the time to put all the</st> <st c="17947">concepts into
    action by coding the solution described so far, reviewing and improving the services
    you already used in previous chapters, and getting familiar with the new services
    introduced in</st> <st c="18142">this architecture.</st>
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="17915">现在是将所有</st> <st c="17947">概念付诸实践的时刻，通过编码实现到目前为止描述的解决方案，审视并改进您在前面章节中已使用的服务，并熟悉本架构中引入的新服务。</st>
- en: <st c="18160">Cloning the project</st>
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="18160">克隆项目</st>
- en: <st c="18180">As you have been doing in the</st> <st c="18210">previous chapter,
    the first step is to copy the project locally from the Git repository associated
    with this book.</st> <st c="18326">If you were following along with the previous
    chapter, you should have already a copy of the Git repository on your local machine.</st>
    <st c="18457">If this is not the case, you can either clone it directly from the
    Git repository associated with this book or download it as a</st> <st c="18585">ZIP
    file.</st>
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="18180">正如你在</st> <st c="18210">上一章中所做的那样，第一步是从与本书相关联的 Git 仓库中将项目复制到本地。</st>
    <st c="18326">如果你已经跟随上一章，你应该已经在本地计算机上有该 Git 仓库的副本。</st> <st c="18457">如果不是这种情况，你可以直接从与本书相关的
    Git 仓库中克隆，或者将其下载为</st> <st c="18585">ZIP 文件。</st>
- en: <st c="18594">Navigate to the</st> `<st c="18611">chapter4/code</st>` <st c="18624">folder.</st>
    <st c="18633">Inside, you will find two subfolders, as shown in</st> *<st c="18683">Figure
    4</st>**<st c="18691">.5</st>*<st c="18693">:</st>
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="18594">导航到</st> `<st c="18611">chapter4/code</st>` <st c="18624">文件夹。</st>
    <st c="18633">在其中，你会找到两个子文件夹，如</st> *<st c="18683">图 4</st>**<st c="18691">.5</st>*<st
    c="18693">所示：</st>
- en: '`<st c="18695">frontend</st>`<st c="18703">: Contains the code for</st> <st
    c="18728">your frontend.</st>'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="18695">前端</st>`<st c="18703">: 包含你的前端代码。</st>'
- en: '`<st c="18742">platform</st>`<st c="18751">: Contains a CloudFormation template
    to deploy the main infrastructure for</st> <st c="18827">your application.</st>'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="18742">平台</st>`<st c="18751">: 包含一个 CloudFormation 模板，用于部署你应用程序的主要基础设施。</st>'
- en: '![Figure 4.5 – Chapter 4 folder structure](img/B22051_04_5.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.5 – 第 4 章文件夹结构](img/B22051_04_5.jpg)'
- en: <st c="18875">Figure 4.5 –</st> [<st c="18888">Chapter 4</st>](B22051_04.xhtml#_idTextAnchor089)
    <st c="18897">folder structure</st>
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="18875">图 4.5 –</st> [<st c="18888">第 4 章</st>](B22051_04.xhtml#_idTextAnchor089)
    <st c="18897">文件夹结构</st>
- en: <st c="18914">Solution deployment</st>
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="18914">解决方案部署</st>
- en: <st c="18934">Now, it is time to</st> <st c="18953">deploy all your application
    infrastructure through the CloudFormation template called</st> `<st c="19040">ch4-application-template.yaml</st>`<st
    c="19069">, which is located in the</st> `<st c="19095">/platform</st>` <st c="19104">subfolder
    of your</st> `<st c="19123">chapter4/code</st>` <st c="19136">folder (</st>`<st
    c="19145">chapter4/code/platform/ch4-application-template.yaml</st>`<st c="19198">).</st>
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="18934">现在，时机已到，</st> <st c="18953">通过名为</st> `<st c="19040">ch4-application-template.yaml</st>`<st
    c="19069">的 CloudFormation 模板部署你的所有应用基础设施，该模板位于</st> `<st c="19095">/platform</st>`
    <st c="19104">子文件夹中，位于你的</st> `<st c="19123">chapter4/code</st>` <st c="19136">文件夹内（</st>`<st
    c="19145">chapter4/code/platform/ch4-application-template.yaml</st>`<st c="19198">）。</st>
- en: <st c="19201">In</st> *<st c="19205">Table 4.1</st>*<st c="19214">, you can
    see all the resources created by your CloudFormation template, but feel free to
    explore the code itself and try to map it to the architecture presented in</st>
    *<st c="19379">Figure 4</st>**<st c="19387">.4</st>*<st c="19389">.</st>
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="19201">在</st> *<st c="19205">表 4.1</st>*<st c="19214">中，你可以看到由你的 CloudFormation
    模板创建的所有资源，但可以随意探索代码本身，并尝试将其与</st> *<st c="19379">图 4</st>**<st c="19387">.4</st>*<st
    c="19389">中的架构进行匹配。</st>
- en: '| **<st c="19390">Template</st>** | **<st c="19399">ch4-application-template.yaml</st>**
    |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| **<st c="19390">模板</st>** | **<st c="19399">ch4-application-template.yaml</st>**
    |'
- en: '| <st c="19429">Frontend</st> | <st c="19438">CloudFront</st> <st c="19450">and
    S3</st> |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| <st c="19429">前端</st> | <st c="19438">CloudFront</st> <st c="19450">和 S3</st>
    |'
- en: '| <st c="19456">Backend</st> |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| <st c="19456">后端</st> |'
- en: <st c="19464">1 HTTP API with</st> <st c="19481">6 endpoints</st>
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="19464">1 个 HTTP API，拥有</st> <st c="19481">6 个端点</st>
- en: <st c="19492">6 lambda functions, one for</st> <st c="19521">each endpoint</st>
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="19492">6 个 lambda 函数，每个对应一个</st> <st c="19521">端点</st>
- en: <st c="19534">1 Cognito</st> <st c="19545">user pool</st>
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="19534">1 Cognito</st> <st c="19545">用户池</st>
- en: '|'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| <st c="19554">Data store</st> | <st c="19565">DynamoDB</st> |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| <st c="19554">数据存储</st> | <st c="19565">DynamoDB</st> |'
- en: <st c="19574">Table 4.1 – CloudFormation template details</st>
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="19574">表 4.1 – CloudFormation 模板详情</st>
- en: <st c="19618">From the console, go to the CloudFormation service (</st>[<st
    c="19671">https://console.aws.amazon.com/cloudformation/</st>](https://console.aws.amazon.com/cloudformation/)<st
    c="19718">) and select the region where you want your application.</st> <st c="19776">You
    can select the AWS region in the drop-down menu located in the upper-right corner
    of your console window, as shown in</st> *<st c="19898">Figure 4</st>**<st c="19906">.6</st>*<st
    c="19908">.</st>
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 从控制台进入 CloudFormation 服务（[https://console.aws.amazon.com/cloudformation/](https://console.aws.amazon.com/cloudformation/)），并选择你希望应用程序所在的区域。你可以在控制台窗口右上角的下拉菜单中选择
    AWS 区域，如*图 4.6*所示。
- en: '![Figure 4.6 – Console access to CloudFormation](img/B22051_04_6.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.6 – 控制台访问 CloudFormation](img/B22051_04_6.jpg)'
- en: <st c="19952">Figure 4.6 – Console access to CloudFormation</st>
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.6 – 控制台访问 CloudFormation
- en: <st c="19997">Why is important to choose a region?</st>
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么选择区域很重要？
- en: <st c="20034">In AWS, services can be classified as either regional or global
    based on their availability and data replication mechanisms.</st> <st c="20160">Regional
    services are deployed and operate within a specific AWS region, while global services
    are designed to provide a consistent experience across</st> <st c="20310">multiple
    regions.</st>
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在 AWS 中，服务可以根据其可用性和数据复制机制分为区域服务或全球服务。区域服务部署并在特定 AWS 区域内运行，而全球服务旨在提供跨**多个区域**的一致体验。
- en: <st c="20327">CloudFormation is an example of a</st> <st c="20361">regional
    service.</st> <st c="20380">Thus, it is crucial to pick the right region because
    it ensures that your resources are deployed closer to your target users, providing
    lower latency and the best</st> <st c="20543">user experience.</st>
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: CloudFormation 是一个**区域服务**的例子。因此，选择正确的区域至关重要，因为这确保了你的资源部署在离目标用户更近的位置，从而提供更低的延迟和最佳的**用户体验**。
- en: <st c="20559">To proceed with stack creation, follow</st> <st c="20599">these
    steps:</st>
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 要继续创建堆栈，请按以下步骤操作：
- en: <st c="20611">Click on</st> **<st c="20621">Create Stack</st>**<st c="20633">.</st>
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建堆栈**。
- en: <st c="20634">In the</st> **<st c="20642">Prerequisite – Prepare template</st>**
    <st c="20673">section, select</st> **<st c="20690">Choose an</st>** **<st c="20700">existing
    template</st>**<st c="20717">.</st>
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**前提条件 – 准备模板**部分，选择**选择一个现有模板**。
- en: <st c="20718">In the</st> **<st c="20726">Specify template</st>** <st c="20742">section,
    choose</st> **<st c="20759">Upload a</st>** **<st c="20768">template file</st>**<st
    c="20781">.</st>
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**指定模板**部分，选择**上传模板文件**。
- en: <st c="20782">Click on</st> **<st c="20792">Choose file</st>**<st c="20803">.</st>
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**选择文件**。
- en: <st c="20804">Select the template from</st> <st c="20829">the</st> `<st c="20834">chapter4/code/platform</st>`
    <st c="20856">folder.</st>
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`chapter4/code/platform`文件夹中选择模板。
- en: <st c="20864">Click</st> **<st c="20871">Next</st>**<st c="20875">. Your</st>
    **<st c="20882">Create Stack</st>** <st c="20894">window should look like</st>
    *<st c="20919">Figure 4</st>**<st c="20927">.7</st>*<st c="20929">.</st>
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**。你的**创建堆栈**窗口应显示为*图 4.7*。
- en: '![Figure 4.7 – A CloudFormation Create stack form](img/B22051_04_7.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.7 – 一个 CloudFormation 创建堆栈表单](img/B22051_04_7.jpg)'
- en: <st c="22003">Figure 4.7 – A CloudFormation Create stack form</st>
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.7 – 一个 CloudFormation 创建堆栈表单
- en: <st c="22050">The next step is to</st> <st c="22071">configure the parameters
    in your CloudFormation stack.</st> <st c="22126">In</st> *<st c="22129">Table
    4.2</st>*<st c="22138">, you can find a detailed explanation of</st> <st c="22179">each
    parameter.</st>
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是配置你在 CloudFormation 堆栈中的参数。在*表 4.2*中，你可以找到每个参数的详细说明。
- en: '| **<st c="22194">Parameter</st>** | **<st c="22204">Description</st>** |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| **参数** | **描述** |'
- en: '| `<st c="22216">APIName</st>` | <st c="22224">The name you want to associate
    with</st> <st c="22261">your API</st> |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| `<APIName>` | 你希望与之关联的API名称 |'
- en: '| `<st c="22269">UserEmail</st>` | <st c="22279">The email you associate with
    your user must be valid, as you will receive a temporary password and need to
    verify the</st> <st c="22398">email later</st> |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| `<st c="22269">UserEmail</st>` | <st c="22279">你关联到用户的电子邮件必须有效，因为你会收到一个临时密码，并且稍后需要验证该</st>
    <st c="22398">电子邮件</st> |'
- en: '| `<st c="22409">UserPoolName</st>` | <st c="22422">The name you will give
    to your Cognito</st> <st c="22462">User Pool</st> |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| `<st c="22409">UserPoolName</st>` | <st c="22422">你将为Cognito</st> <st c="22462">用户池</st>命名
    |'
- en: '| `<st c="22471">Username</st>` | <st c="22480">Later, this is the username
    you will use to log in to</st> <st c="22535">your application</st> |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| `<st c="22471">Username</st>` | <st c="22480">稍后，这将是你用来登录</st> <st c="22535">应用程序</st>的用户名
    |'
- en: <st c="22551">Table 4.2 – CloudFormation templates parameters</st>
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="22551">表 4.2 – CloudFormation 模板参数</st>
- en: <st c="22599">An example of the parameters windows is shown in</st> *<st c="22649">Figure
    4</st>**<st c="22657">.8</st>*<st c="22659">.</st>
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="22599">参数窗口的示例如</st> *<st c="22649">图 4</st>**<st c="22657">.8</st>*<st
    c="22659">所示。</st>
- en: '![Figure 4.8 – Stack parameters in CloudFormation](img/B22051_04_8.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.8 – CloudFormation 堆栈参数](img/B22051_04_8.jpg)'
- en: <st c="23186">Figure 4.8 – Stack parameters in CloudFormation</st>
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="23186">图 4.8 – CloudFormation 堆栈参数</st>
- en: <st c="23233">You can proceed</st> <st c="23250">until the last page.</st> <st
    c="23271">Acknowledge the creation of the IAM Roles that will be used to provide
    access to the lambda functions for performing operations to the DynamoDB table,
    namely, to delete a recipe, and</st> <st c="23454">click</st> **<st c="23460">Submit</st>**<st
    c="23466">.</st>
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="23233">你可以继续操作</st> <st c="23250">直到最后一页。</st> <st c="23271">确认创建IAM角色，这些角色将用于提供对Lambda函数的访问权限，以执行对DynamoDB表的操作，即删除一个食谱，然后</st>
    <st c="23454">点击</st> **<st c="23460">提交</st>**<st c="23466">。</st>
- en: '![Figure 4.9 – CloudFormation stack submission](img/B22051_04_9.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.9 – CloudFormation 堆栈提交](img/B22051_04_9.jpg)'
- en: <st c="23920">Figure 4.9 – CloudFormation stack submission</st>
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="23920">图 4.9 – CloudFormation 堆栈提交</st>
- en: <st c="23964">Wait until the stack status changes to</st> **<st c="24004">CREATE_COMPLETE</st>**<st
    c="24019">, as depicted in</st> *<st c="24036">Figure 4</st>**<st c="24044">.10</st>*<st
    c="24047">. This will mean that all the resources are provisioned and you can</st>
    <st c="24115">now proceed.</st>
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="23964">等待堆栈状态更改为</st> **<st c="24004">CREATE_COMPLETE</st>**<st c="24019">，如</st>
    *<st c="24036">图 4</st>**<st c="24044">.10</st>*<st c="24047">所示。这意味着所有资源已成功配置，你现在可以</st>
    <st c="24115">继续操作。</st>
- en: '![Figure 4.10 – CloudFormation Stack Created status](img/B22051_04_10.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.10 – CloudFormation 堆栈创建状态](img/B22051_04_10.jpg)'
- en: <st c="24192">Figure 4.10 – CloudFormation Stack Created status</st>
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="24192">图 4.10 – CloudFormation 堆栈创建状态</st>
- en: <st c="24241">In our case, it took</st> <st c="24263">around five minutes for
    the stack to be deployed but take into consideration that this</st> <st c="24350">may
    vary.</st>
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="24241">在我们的案例中，堆栈部署大约花费了</st> <st c="24263">五分钟，但请考虑到这</st> <st c="24350">可能会有所不同。</st>
- en: <st c="24359">Important note</st>
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="24359">重要说明</st>
- en: <st c="24374">If you have been following along with the previous chapter (</st>[*<st
    c="24435">Chapter 3</st>*](B22051_03.xhtml#_idTextAnchor054)<st c="24445">) and
    forgot to clean up all the resources created in that chapter, you may encounter
    issues when attempting to deploy the CloudFormation template in this chapter.</st>
    <st c="24610">The deployment may fail because in AWS, DynamoDB table names must
    be unique within a region in a single account.</st> <st c="24723">Since this chapter
    is an evolution of the previous one, we used the same table name for storing</st>
    <st c="24819">the recipes.</st>
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="24374">如果你已经跟随前一章节（</st>[*<st c="24435">第3章</st>*](B22051_03.xhtml#_idTextAnchor054)<st
    c="24445">）并且忘记清理该章节中创建的所有资源，你可能会在尝试部署本章节中的CloudFormation模板时遇到问题。</st> <st c="24610">部署可能会失败，因为在AWS中，DynamoDB表名在单个账户的同一区域内必须是唯一的。</st>
    <st c="24723">由于本章节是前一章节的扩展，我们使用了相同的表名来存储</st> <st c="24819">食谱。</st>
- en: <st c="24831">To resolve this issue, please ensure that you have properly cleaned
    up and deleted all the resources in the previous chapter, as described in the</st>
    *<st c="24978">Clean up</st>* <st c="24986">section, before proceeding with</st>
    <st c="25019">this one.</st>
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="24831">要解决此问题，请确保按照</st> *<st c="24978">清理</st>* <st c="24986">章节中的描述，正确清理并删除前一章节中的所有资源，然后再继续进行本章节。</st>
- en: <st c="25028">Frontend configuration and deployment</st>
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="25028">前端配置和部署</st>
- en: <st c="25066">With all the AWS services</st> <st c="25092">provisioned, it’s
    now time for configuring your frontend and deploying</st> <st c="25164">the</st>
    <st c="25168">files.</st>
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有 AWS 服务配置完成后，接下来是配置前端并部署文件。
- en: <st c="25174">Navigate to the</st> `<st c="25191">…/frontend/src/configs</st>`
    <st c="25213">folder, and you will find</st> <st c="25240">two files:</st>
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 转到`…/frontend/src/configs`文件夹，您将找到两个文件：
- en: '`<st c="25250">aws-exports.ts</st>`<st c="25265">: This file is used to configure
    your authentication with data from the Cognito</st> <st c="25346">user pool.</st>'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="25250">aws-exports.ts</st>`：此文件用于配置您与 Cognito 用户池的数据认证。'
- en: '`<st c="25356">configs.tsx</st>`<st c="25368">: This file is used to configure
    your application, namely the API URL</st> <st c="25439">to use.</st>'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="25356">configs.tsx</st>`：此文件用于配置您的应用程序，即要使用的 API URL。'
- en: <st c="25446">Let’s look at them</st> <st c="25466">in detail.</st>
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细看看它们。
- en: <st c="25476">aws-exports.ts</st>
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`aws-exports.ts`'
- en: <st c="25491">This file is composed of four</st> <st c="25522">configuration
    variables:</st>
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件由四个配置变量组成：
- en: '`<st c="25546">AWS_PROJECT_REGION</st>`<st c="25565">: The</st> <st c="25571">region
    you deployed</st> <st c="25592">your solution</st>'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="25546">AWS_PROJECT_REGION</st>`：您部署解决方案的区域'
- en: '`<st c="25605">AWS_COGNITO_REGION</st>`<st c="25624">: Your Cognito user</st>
    <st c="25645">Pool region</st>'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="25605">AWS_COGNITO_REGION</st>`：您的 Cognito 用户池区域'
- en: '`<st c="25656">AWS_USER_POOLS_ID</st>`<st c="25674">: The ID of your</st> <st
    c="25692">user pool</st>'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="25656">AWS_USER_POOLS_ID</st>`：您的用户池 ID'
- en: '`<st c="25701">AWS_USER_POOLS_WEB_CLIENT_ID</st>`<st c="25730">: The client
    ID of your Cognito User</st> <st c="25768">Pool application</st>'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="25701">AWS_USER_POOLS_WEB_CLIENT_ID</st>`：您的 Cognito 用户池应用程序的客户端 ID'
- en: <st c="25784">configs.tsx:</st>
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: configs.tsx：
- en: <st c="25797">This config file is composed of</st> <st c="25830">seven</st>
    <st c="25836">configurations:</st>
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 该配置文件包含七个配置项：
- en: '`<st c="25851">CONFIG_MAX_INGREDIENTS</st>`<st c="25874">: Max ingredients
    in</st> <st c="25896">a recipe</st>'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="25851">CONFIG_MAX_INGREDIENTS</st>`：一个配方中的最大食材数'
- en: '`<st c="25904">CONFIG_MAX_STEPS</st>`<st c="25921">: Max steps in</st> <st
    c="25937">a recipe</st>'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="25904">CONFIG_MAX_STEPS</st>`：一个配方中的最大步骤数'
- en: '`<st c="25945">CONFIG_MAX_RECIPES</st>`<st c="25964">: Max</st> <st c="25971">recipes
    supported</st>'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="25945">CONFIG_MAX_RECIPES</st>`：支持的最大配方数'
- en: '`<st c="25988">CONFIG_USER_PAGE_TITLE</st>`<st c="26011">: Title for</st> <st
    c="26024">user page</st>'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="25988">CONFIG_USER_PAGE_TITLE</st>`：用户页面的标题'
- en: '`<st c="26033">CONFIG_ADMIN_PAGE_TITLE</st>`<st c="26057">: Title for</st>
    <st c="26070">admin page</st>'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="26033">CONFIG_ADMIN_PAGE_TITLE</st>`：管理员页面的标题'
- en: '`<st c="26080">CONFIG_appConfig</st>`<st c="26097">: Object with page title
    and icon (icons</st> <st c="26139">in</st> `<st c="26142">/frontend/public/</st>`<st
    c="26159">)</st>'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="26080">CONFIG_appConfig</st>`：包含页面标题和图标的对象（图标在`/frontend/public/`中）'
- en: '`<st c="26161">CONFIG_API_URL</st>`<st c="26175">:</st> <st c="26178">API endpoint</st>'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="26161">CONFIG_API_URL</st>`：API 端点'
- en: <st c="26190">All the mandatory values needed as part of the configuration files
    can be found in the</st> **<st c="26278">Outputs</st>** <st c="26285">tab of the
    CloudFormation template you</st> <st c="26325">just deployed.</st>
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 所有作为配置文件一部分的必填值都可以在您刚刚部署的 CloudFormation 模板的**<st c="26278">Outputs</st>**标签中找到。
- en: <st c="26339">To access it, follow</st> <st c="26361">these steps:</st>
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问它，请按以下步骤操作：
- en: <st c="26373">Go to the CloudFormation console</st> <st c="26407">at</st> [<st
    c="26410">https://console.aws.amazon.com/cloudformation/</st>](https://console.aws.amazon.com/cloudformation/)<st
    c="26456">.</st>
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到 CloudFormation 控制台：[https://console.aws.amazon.com/cloudformation/](https://console.aws.amazon.com/cloudformation/)。
- en: <st c="26457">Click on</st> <st c="26467">your stack.</st>
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击您的堆栈。
- en: <st c="26478">On the right</st> <st c="26492">menu, select the</st> **<st c="26509">Outputs</st>**
    <st c="26516">Tab, as shown in</st> *<st c="26534">Figure 4</st>**<st c="26542">.11</st>*<st
    c="26545">.</st>
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右侧菜单中，选择**输出**标签，如*图4.11*所示。
- en: '![Figure 4.11 – CloudFormation Outputs tab](img/B22051_04_11.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![图4.11 – CloudFormation 输出标签](img/B22051_04_11.jpg)'
- en: <st c="27122">Figure 4.11 – CloudFormation Outputs tab</st>
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.11 – CloudFormation 输出标签
- en: '*<st c="27162">Table 4.3</st>* <st c="27172">maps the Stack outputs with the
    configuration files’ parameters (</st>`<st c="27238">aws-exports.ts</st>` <st
    c="27253">and</st> `<st c="27258">config.tsx</st>`<st c="27268">).</st>'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '*表4.3* 映射了Stack输出与配置文件的参数（`aws-exports.ts`和`config.tsx`）。'
- en: '| **<st c="27271">File</st>** | **<st c="27276">Parameter</st>** | **<st c="27286">Cloudformation</st>**
    **<st c="27302">Stack outputs</st>** |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| **文件** | **参数** | **Cloudformation** **Stack 输出** |'
- en: '| `<st c="27315">aws-exports.ts</st>` | `<st c="27330">aws_project_region</st>`
    | `<st c="27349">CognitoRegion</st>` |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| `aws-exports.ts` | `aws_project_region` | `CognitoRegion` |'
- en: '| `<st c="27363">aws_cognito_region</st>` | `<st c="27382">CognitoRegion</st>`
    |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| `aws_cognito_region` | `CognitoRegion` |'
- en: '| `<st c="27396">aws_user_pools_id</st>` | `<st c="27414">UserPoolId</st>`
    |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| `aws_user_pools_id` | `UserPoolId` |'
- en: '| `<st c="27425">aws_user_pools_web_client_id</st>` | `<st c="27454">UserPoolClientId</st>`
    |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| `aws_user_pools_web_client_id` | `UserPoolClientId` |'
- en: '| `<st c="27471">configs.tsx</st>` | `<st c="27483">CONFIG_API_URL</st>` |
    `<st c="27498">HttpApiEndpoint</st>` |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| `configs.tsx` | `CONFIG_API_URL` | `HttpApiEndpoint` |'
- en: <st c="27514">Table 4.3 – Mapping between CloudFormation Outputs and aws-exports.ts
    parameters</st>
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 表4.3 – CloudFormation 输出与`aws-exports.ts`参数之间的映射
- en: <st c="27595">Paste the values</st> <st c="27612">in each of the files respectively,
    and by the end, your parameters’</st> `<st c="27681">aws-exports.ts</st>` <st
    c="27695">file should look like</st> *<st c="27718">Figure 4</st>**<st c="27726">.12</st>*<st
    c="27729">.</st>
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 将每个文件中的值粘贴到相应的位置，最终，您的参数`aws-exports.ts`文件应该如下所示，*见图4.12*。
- en: '![Figure 4.12 – Example of a configuration file (aws-exports.ts)](img/B22051_04_12.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![图4.12 – 配置文件示例（aws-exports.ts）](img/B22051_04_12.jpg)'
- en: <st c="27990">Figure 4.12 – Example of a configuration file (aws-exports.ts)</st>
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.12 – 配置文件示例（aws-exports.ts）
- en: <st c="28052">and</st> `<st c="28057">config.tsx</st>` <st c="28067">file should
    look like</st> *<st c="28090">Figure 4</st>**<st c="28098">.13</st>*<st c="28101">.</st>
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 并且`config.tsx`文件应该如下所示，*见图4.13*。
- en: '![Figure 4.13 – Example of configuration file (config.tsx)](img/B22051_04_13.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![图4.13 – 配置文件示例（config.tsx）](img/B22051_04_13.jpg)'
- en: <st c="28526">Figure 4.13 – Example of configuration file (config.tsx)</st>
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.13 – 配置文件示例（config.tsx）
- en: <st c="28582">4.</st> <st c="28586">Save</st> <st c="28591">the files.</st>
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 4. 保存文件。
- en: <st c="28601">Once you’ve updated the configuration files, you can initiate
    the</st> `<st c="28668">build</st>` <st c="28673">process to transform the code
    into a web-ready bundle that can be served to browsers.</st> <st c="28760">In
    our example, we utilized</st> `<st c="28788">npm</st>` <st c="28791">as the</st>
    <st c="28798">package manager, so you’ll need to install the dependencies and
    kick off the</st> `<st c="28876">build</st>` <st c="28881">process:</st>
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦更新了配置文件，您可以启动`build`过程，将代码转化为可供浏览器使用的网页打包文件。在我们的示例中，我们使用`npm`作为包管理器，所以您需要安装依赖并启动`build`过程：
- en: '[PRE1]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: <st c="28921">Note that the previous command should be run at the root of the</st>
    `<st c="28986">frontend</st>` <st c="28994">folder.</st> <st c="29003">To test
    whether you are at the root, you can use the</st> <st c="29056">following command:</st>
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，之前的命令应在`frontend`文件夹的根目录下运行。为了测试您是否处于根目录，可以使用以下命令：
- en: '[PRE2]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: <st c="29105">The result is a folder with the files needed to be copied to our
    S3 buckets.</st> <st c="29183">The folder name may vary but is typically</st>
    `<st c="29225">build/</st>` <st c="29231">or</st> `<st c="29235">dist/</st>`<st
    c="29240">. It is created at the frontend root, as you can see in</st> *<st c="29296">Figure
    4</st>**<st c="29304">.14</st>*<st c="29307">.</st>
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="29105">结果是一个文件夹，里面包含需要复制到我们 S3 存储桶中的文件。</st> <st c="29183">文件夹名称可能不同，但通常是</st>
    `<st c="29225">build/</st>` <st c="29231">或</st> `<st c="29235">dist/</st>`<st
    c="29240">。它创建在前端根目录下，如你在</st> *<st c="29296">图 4</st>**<st c="29304">.14</st>*<st
    c="29307">中所见。</st>
- en: '![Figure 4.14 – Frontend folder structure](img/B22051_04_14.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.14 – 前端文件夹结构](img/B22051_04_14.jpg)'
- en: <st c="29478">Figure 4.14 – Frontend folder structure</st>
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="29478">图 4.14 – 前端文件夹结构</st>
- en: <st c="29517">Now, the last step is to copy the build folder to S3, with the</st>
    <st c="29581">following instructions:</st>
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="29517">现在，最后一步是将构建文件夹复制到 S3，使用以下指令：</st>
- en: <st c="29604">Locate the</st> <st c="29616">S3 bucket.</st>
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="29604">定位到</st> <st c="29616">S3 存储桶。</st>
- en: <st c="29626">First, you need to find the S3 bucket that you created earlier
    using the CloudFormation template.</st> <st c="29725">The name of the bucket should
    start with</st> `<st c="29766">frontend-chapter-4-</st>`<st c="29785">, followed
    by a random string of characters (e.g.,</st> `<st c="29836">frontend-chapter-4-XXXXX</st>`<st
    c="29860">).</st> <st c="29864">Click on its name to</st> <st c="29885">open it.</st>
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="29626">首先，你需要找到之前使用 CloudFormation 模板创建的 S3 存储桶。</st> <st c="29725">存储桶的名称应以</st>
    `<st c="29766">frontend-chapter-4-</st>`<st c="29785">开头，后面跟着一串随机字符（例如，</st> `<st
    c="29836">frontend-chapter-4-XXXXX</st>`<st c="29860">）。</st> <st c="29864">点击其名称以</st>
    <st c="29885">打开它。</st>
- en: <st c="29893">Add files from the</st> `<st c="29913">d</st><st c="29914">ist</st>`
    <st c="29917">folder.</st>
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="29893">从</st> `<st c="29913">d</st><st c="29914">ist</st>` <st c="29917">文件夹中添加文件。</st>
- en: <st c="29925">Inside the S3 bucket, click on the</st> **<st c="29961">Upload</st>**
    <st c="29967">button.</st> <st c="29976">This will allow you to upload files from
    your local</st> <st c="30028">machine to the</st> <st c="30043">S3 bucket.</st>
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="29925">在 S3 存储桶内，点击</st> **<st c="29961">上传</st>** <st c="29967">按钮。</st>
    <st c="29976">这将允许你从本地机器上传文件到</st> <st c="30028">S3 存储桶。</st>
- en: <st c="30053">Add the necessary content to</st> <st c="30083">the bucket.</st>
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="30053">将必要的内容添加到</st> <st c="30083">存储桶中。</st>
- en: <st c="30094">First click on</st> `<st c="30132">dist</st>` <st c="30136">folder
    on your local machine, select all the files inside the folder, and confirm.</st>
    <st c="30220">Next, on the S3 console, click</st> `<st c="30277">dist</st>` <st
    c="30281">folder on your local machine, select the</st> `<st c="30323">assets</st>`
    <st c="30329">folder,</st> <st c="30338">and confirm.</st>
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="30094">首先，点击</st> `<st c="30132">dist</st>` <st c="30136">文件夹，在本地机器上选择该文件夹中的所有文件并确认。</st>
    <st c="30220">接下来，在 S3 控制台中，点击</st> `<st c="30277">dist</st>` <st c="30281">文件夹，选择</st>
    `<st c="30323">assets</st>` <st c="30329">文件夹，</st> <st c="30338">并确认。</st>
- en: <st c="30350">Optionally, you can just drag the content to the S3 window, but
    regardless of the method you use, your S3</st> **<st c="30457">Upload</st>** <st
    c="30463">window should look like</st> *<st c="30488">Figure 4</st>**<st c="30496">.15</st>*<st
    c="30499">.</st>
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="30350">你也可以选择将内容直接拖拽到 S3 窗口中，但无论你使用哪种方法，你的 S3</st> **<st c="30457">上传</st>**
    <st c="30463">窗口应该像</st> *<st c="30488">图 4</st>**<st c="30496">.15</st>*<st c="30499">所示。</st>
- en: '![Figure 4.15 – Frontend files uploaded to S3](img/B22051_04_15.jpg)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.15 – 前端文件上传到 S3](img/B22051_04_15.jpg)'
- en: <st c="30803">Figure 4.15 – Frontend files uploaded to S3</st>
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="30803">图 4.15 – 前端文件上传到 S3</st>
- en: <st c="30846">File names are auto-generated by the</st> `<st c="30884">build</st>`
    <st c="30889">process, so your names are probably different than the ones in the
    preceding figure.</st> <st c="30975">Make sure that you have the</st> <st c="31003">following
    files:</st>
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="30846">文件名由</st> `<st c="30884">构建</st>` <st c="30889">过程自动生成，因此你的文件名可能与前面图示中的不同。</st>
    <st c="30975">确保你有以下文件：</st> <st c="31003">以下文件：</st>
- en: '`<st c="31019">i</st>``<st c="31021">ndex.html</st>`'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="31019">i</st>``<st c="31021">ndex.html</st>`'
- en: '`<st c="31030">i</st>``<st c="31032">ndex-XXXXXX.css</st>`'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="31030">i</st>``<st c="31032">ndex-XXXXXX.css</st>`'
- en: '`<st c="31047">i</st>``<st c="31049">ndex-XXXXXX.js</st>`'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="31047">i</st>``<st c="31049">ndex-XXXXXX.js</st>`'
- en: <st c="31063">Static files you may have included in your application, for</st>
    <st c="31124">example, images</st>
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="31063">你可能已在应用程序中包含的静态文件，例如，图片</st>
- en: <st c="31139">After that, at the bottom, click</st> <st c="31173">on</st> **<st
    c="31176">Upload</st>**<st c="31182">.</st>
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="31139">之后，在页面底部，点击</st> <st c="31173">按钮</st> **<st c="31176">上传</st>**<st
    c="31182">。</st>
- en: <st c="31183">You’ve just finalized all the</st> <st c="31214">deployment and
    configuration of your application, and now it is time to</st> <st c="31286">test
    it.</st>
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="31183">你刚刚完成了所有的</st> <st c="31214">部署和配置工作，现在是时候</st> <st c="31286">测试它了。</st>
- en: <st c="31294">Test and explore your application</st>
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="31294">测试并探索你的应用</st>
- en: '<st c="31328">This last section is all</st> <st c="31354">about testing and
    exploring your application, and we divided it into two parts: backend and frontend.</st>
    <st c="31456">Unlike the previous</st> <st c="31475">chapter, let’s start with</st>
    <st c="31502">the frontend!</st>'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="31328">这一部分主要讲解测试和探索你的应用，我们将其分为两部分：后端和前端。</st> <st c="31456">与前一章不同，今天我们从</st>
    <st c="31475">前端开始！</st>
- en: <st c="31515">We’ve made the CloudFront URL available as an output in the CloudFormation
    Stack, so you can get it with the</st> `<st c="31625">CloudFrontDistributionUrl</st>`
    <st c="31650">output.</st>
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="31515">我们已经将 CloudFront URL 作为输出提供在 CloudFormation Stack 中，因此你可以通过</st>
    `<st c="31625">CloudFrontDistributionUrl</st>` <st c="31650">输出获取它。</st>
- en: <st c="31658">You can also get the value directly from</st> <st c="31700">the
    console:</st>
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="31658">你也可以直接从</st> <st c="31700">控制台获取值：</st>
- en: <st c="31712">Go to the CloudFront console</st> <st c="31742">at</st> [<st c="31745">https://console.aws.amazon.com/cloudfront/</st>](https://console.aws.amazon.com/cloudfront/)<st
    c="31787">.</st>
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="31712">进入 CloudFront 控制台</st> <st c="31742">访问</st> [<st c="31745">https://console.aws.amazon.com/cloudfront/</st>](https://console.aws.amazon.com/cloudfront/)<st
    c="31787">。</st>
- en: <st c="31788">Click on</st> **<st c="31798">Distributions</st>** <st c="31811">on
    the</st> <st c="31819">left menu.</st>
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="31788">点击左侧菜单中的</st> **<st c="31798">分发</st>** <st c="31811">。</st>
- en: <st c="31829">Select the distribution</st> <st c="31854">you created.</st>
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="31829">选择你创建的分发。</st>
- en: <st c="31866">Copy the</st> **<st c="31876">Distribution domain name</st>**
    <st c="31900">value from the</st> **<st c="31916">Details</st>** <st c="31923">section,
    as depicted in</st> *<st c="31948">Figure 4</st>**<st c="31956">.16</st>*<st c="31959">.</st>
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="31866">复制</st> **<st c="31876">分发域名</st>** <st c="31900">值，来自</st> **<st
    c="31916">详细信息</st>** <st c="31923">部分，如</st> *<st c="31948">图 4</st>**<st c="31956">.16</st>*<st
    c="31959">所示。</st>
- en: '![Figure 4.16 – CloudFront distribution console](img/B22051_04_16.jpg)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.16 – CloudFront 分发控制台](img/B22051_04_16.jpg)'
- en: <st c="32200">Figure 4.16 – CloudFront distribution console</st>
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="32200">图 4.16 – CloudFront 分发控制台</st>
- en: <st c="32245">If you copy and paste the URL into the browser, you should be
    able to access your newly created application, as is shown in</st> *<st c="32370">Figure
    4</st>**<st c="32378">.17</st>*<st c="32381">.</st>
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="32245">如果你将 URL 复制并粘贴到浏览器中，你应该能够访问你新创建的应用，正如在</st> *<st c="32370">图 4</st>**<st
    c="32378">.17</st>*<st c="32381">中所示。</st>
- en: '![Figure 4.17 – Application frontend example](img/B22051_04_17.jpg)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.17 – 应用前端示例](img/B22051_04_17.jpg)'
- en: <st c="32421">Figure 4.17 – Application frontend example</st>
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="32421">图 4.17 – 应用前端示例</st>
- en: <st c="32463">Your new application is composed of</st> <st c="32500">three elements:</st>
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="32463">你的新应用由</st> <st c="32500">三个元素组成：</st>
- en: '**<st c="32515">Status (Not Authenticated)</st>**<st c="32542">: This component
    will help you understand whether you are</st> <st c="32601">authenticated by changing
    the description and color.</st> <st c="32654">Also, if you are authenticated,
    it will</st> <st c="32693">highlight and show your current</st> <st c="32726">access
    token.</st>'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="32515">状态（未认证）</st>**<st c="32542">：该组件将通过更改描述和颜色帮助你了解是否已认证。</st>
    <st c="32601">此外，如果你已认证，它将</st> <st c="32693">高亮显示并展示你当前的</st> <st c="32726">访问令牌。</st>'
- en: '**<st c="32739">USERS</st>**<st c="32745">: Navigate to the</st> **<st c="32764">Users</st>**
    <st c="32769">page.</st>'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="32739">用户</st>**<st c="32745">：导航到</st> **<st c="32764">用户</st>**
    <st c="32769">页面。</st>'
- en: '**<st c="32775">ADMIN</st>**<st c="32781">: Navigate to the</st> **<st c="32800">Admin</st>**
    <st c="32805">page.</st>'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="32775">管理员</st>**<st c="32781">：导航到</st> **<st c="32800">管理员</st>**
    <st c="32805">页面。</st>'
- en: <st c="32811">Let us have</st> <st c="32824">a look.</st>
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="32811">让我们来</st> <st c="32824">看一下。</st>
- en: <st c="32831">Admin page</st>
  id: totrans-253
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="32831">管理员页面</st>
- en: <st c="32842">One of the improvements of this new solution is the authentication.</st>
    <st c="32911">To test it, navigate to the admin page, and you should be prompted
    to authenticate, as you can see in</st> *<st c="33013">Figure 4</st>**<st c="33021">.18</st>*<st
    c="33024">.</st>
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="32842">这个新解决方案的一个改进是身份验证。</st> <st c="32911">要进行测试，导航到管理员页面，您应该会被提示进行身份验证，如</st>
    *<st c="33013">图 4</st>**<st c="33021">.18</st>*<st c="33024">所示。</st>
- en: '![Figure 4.18 – Authentication form](img/B22051_04_18.jpg)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.18 – 身份验证表单](img/B22051_04_18.jpg)'
- en: <st c="33110">Figure 4.18 – Authentication form</st>
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="33110">图 4.18 – 身份验证表单</st>
- en: <st c="33143">With the deployment</st> <st c="33164">of the application CloudFormation
    template, you should have received an email similar to</st> *<st c="33253">Figure
    4</st>**<st c="33261">.19</st>* <st c="33264">to the user email you defined as
    a parameter during the stack deployment process, with a temporary password for
    the username you</st> <st c="33394">also defined.</st>
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="33143">通过部署应用程序 CloudFormation 模板，您应已收到类似</st> *<st c="33253">图 4</st>**<st
    c="33261">.19</st>* <st c="33264">的邮件，发送到您在堆栈部署过程中定义为参数的用户电子邮件，包含用于您所定义的用户名的临时密码。</st>
- en: '![Figure 4.19 – Temporary password email example](img/B22051_04_19.jpg)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.19 – 临时密码邮件示例](img/B22051_04_19.jpg)'
- en: <st c="33709">Figure 4.19 – Temporary password email example</st>
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="33709">图 4.19 – 临时密码邮件示例</st>
- en: <st c="33755">Use these values as your username and password and continue.</st>
    <st c="33817">You should be prompted to define a new password, so proceed with
    it and click on</st> **<st c="33898">Change password</st>**<st c="33913">.</st>
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="33755">使用这些值作为您的用户名和密码并继续。</st> <st c="33817">您应该会被提示定义新密码，请继续并点击</st>
    **<st c="33898">更改密码</st>**<st c="33913">。</st>
- en: <st c="33914">You have your new password defined, so the last step is to verify
    your email for account</st> <st c="34004">recovery purposes.</st>
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="33914">您已经定义了新密码，最后一步是验证您的电子邮件以便进行账户恢复。</st>
- en: '![Figure 4.20 – Email verification form](img/B22051_04_20.jpg)'
  id: totrans-262
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.20 – 邮件验证表单](img/B22051_04_20.jpg)'
- en: <st c="34094">Figure 4.20 – Email verification form</st>
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="34094">图 4.20 – 邮件验证表单</st>
- en: <st c="34131">Select your email address and click on</st> **<st c="34171">Verify</st>**<st
    c="34177">. With this action, you should receive a new email containing</st> <st
    c="34238">your verification code, as shown in</st> *<st c="34275">Figure 4</st>**<st
    c="34283">.21</st>*<st c="34286">.</st>
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="34131">选择您的电子邮件地址并点击</st> **<st c="34171">验证</st>**<st c="34177">。通过此操作，您应收到一封新邮件，包含</st>
    <st c="34238">您的验证代码，如</st> *<st c="34275">图 4</st>**<st c="34283">.21</st>*<st
    c="34286">所示。</st>
- en: '![Figure 4.21 – Account verification email example](img/B22051_04_21.jpg)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.21 – 账户验证邮件示例](img/B22051_04_21.jpg)'
- en: <st c="34489">Figure 4.21 – Account verification email example</st>
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="34489">图 4.21 – 账户验证邮件示例</st>
- en: <st c="34537">Paste the verification code and proceed.</st> <st c="34579">You
    have now finalized the authentication setup, and your interface should look like</st>
    *<st c="34664">Figure 4</st>**<st c="34672">.22</st>*<st c="34675">.</st>
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="34537">粘贴验证代码并继续。</st> <st c="34579">现在您已完成身份验证设置，您的界面应如下所示：</st> *<st
    c="34664">图 4</st>**<st c="34672">.22</st>*<st c="34675">。</st>
- en: '![Figure 4.22 – Admin page after authentication](img/B22051_04_22.jpg)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.22 – 身份验证后的管理员页面](img/B22051_04_22.jpg)'
- en: <st c="34929">Figure 4.22 – Admin page after authentication</st>
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="34929">图 4.22 – 身份验证后的管理员页面</st>
- en: <st c="34974">As you can see, the authentication status component has changed
    color and is now saying that you are</st> <st c="35076">authenticated as your
    username.</st> <st c="35108">In our case, that username is</st> `<st c="35138">admin</st>`<st
    c="35143">. Also, if you hover over the access token, you will be able to access
    the current</st> <st c="35226">access token.</st>
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="34974">如您所见，身份验证状态组件已经改变颜色，现在显示您已</st> <st c="35076">以您的用户名认证。</st> <st
    c="35108">在我们的例子中，用户名是</st> `<st c="35138">admin</st>`<st c="35143">。此外，如果您将鼠标悬停在访问令牌上，您将能够访问当前的</st>
    <st c="35226">访问令牌。</st>
- en: '![Figure 4.23 – Tooltip with access token](img/B22051_04_23.jpg)'
  id: totrans-271
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.23 – 带有访问令牌的工具提示](img/B22051_04_23.jpg)'
- en: <st c="35882">Figure 4.23 – Tooltip with access token</st>
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="35882">图 4.23 – 带有访问令牌的工具提示</st>
- en: <st c="35921">Feel free to navigate the application by clicking the left arrow
    and going back to the admin page, and you will see that you will remain authenticated
    until you sign out.</st> <st c="36093">Back to the admin console; start by creating
    some recipes to explore the</st> <st c="36166">user experience.</st>
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="35921">您可以自由浏览应用程序，点击左箭头返回管理员页面，您将看到在未退出登录前您保持认证状态。</st> <st c="36093">返回管理员控制台；首先创建一些食谱，来体验</st>
    <st c="36166">用户体验。</st>
- en: <st c="36182">Note that we added a new functionality to our application, as
    per the requirements, giving the ability for users to like our recipes.</st> <st
    c="36317">Additionally, we can sort our recipes by likes and, for example, delete
    the recipes with few likes, as shown in</st> *<st c="36429">Figure 4</st>**<st
    c="36437">.24</st>*<st c="36440">.</st>
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="36182">请注意，根据要求，我们为应用程序添加了一个新功能，使用户可以点赞我们的食谱。</st> <st c="36317">此外，我们还可以根据点赞数对食谱进行排序，例如删除点赞数少的食谱，如</st>
    *<st c="36429">图 4.24</st>*<st c="36437">所示。</st>
- en: '![Figure 4.24 – Admin user experience with number of likes per recipe](img/B22051_04_24.jpg)'
  id: totrans-275
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.24 – 管理员用户体验，显示每个食谱的点赞数](img/B22051_04_24.jpg)'
- en: <st c="36756">Figure 4.24 – Admin user experience with number of likes per recipe</st>
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="36756">图 4.24 – 管理员用户体验，显示每个食谱的点赞数</st>
- en: <st c="36823">User page</st>
  id: totrans-277
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="36823">用户页面</st>
- en: <st c="36833">The</st> **<st c="36838">User</st>** <st c="36842">page is like
    in the</st> <st c="36863">previous chapter, but we have added the new feature
    of likes for</st> <st c="36928">the recipes.</st>
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="36833">该</st> **<st c="36838">用户</st>** <st c="36842">页面与</st> <st c="36863">上一章类似，但我们为</st>
    <st c="36928">食谱添加了点赞的新功能。</st>
- en: <st c="36940">Navigate to the</st> **<st c="36957">User</st>** <st c="36961">page,
    choose a recipe, and click</st> **<st c="36995">Like</st>**<st c="36999">. This
    should increase the number of likes of the specific recipe, as shown in</st> *<st
    c="37078">Figure 4</st>**<st c="37086">.25</st>*<st c="37089">.</st>
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="36940">导航到</st> **<st c="36957">用户</st>** <st c="36961">页面，选择一个食谱，点击</st>
    **<st c="36995">喜欢</st>**<st c="36999">。这应该会增加特定食谱的点赞数，如</st> *<st c="37078">图
    4.25</st>*<st c="37086">所示</st>。
- en: '![Figure 4.25 – Example of adding a like to a recipe as a regular user](img/B22051_04_25.jpg)'
  id: totrans-280
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.25 – 作为普通用户向食谱添加点赞的示例](img/B22051_04_25.jpg)'
- en: <st c="37300">Figure 4.25 – Example of adding a like to a recipe as a regular
    user</st>
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="37300">图 4.25 – 作为普通用户向食谱添加点赞的示例</st>
- en: <st c="37368">If you want to play around with the likes functionality, just
    refresh the page and the like button will be available</st> <st c="37486">again.</st>
    <st c="37493">Lastly, try to change the sort to choose the most popular recipe
    according to</st> <st c="37571">user feedback.</st>
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="37368">如果您想体验点赞功能，只需刷新页面，点赞按钮将重新出现</st> <st c="37486">。</st> <st c="37493">最后，尝试更改排序，以根据</st>
    <st c="37571">用户反馈选择最受欢迎的食谱。</st>
- en: <st c="37585">Testing and exploring the backend</st>
  id: totrans-283
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="37585">测试和探索后端</st>
- en: <st c="37619">Your backend is now built</st> <st c="37646">with an HTTP API
    gateway with a Lambda</st> <st c="37684">function for each endpoint responsible
    for executing the associated action.</st> <st c="37761">For example, let’s explore
    the</st> `<st c="37792">delete</st>` <st c="37798">function:</st>
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="37619">您的后端现在是通过 HTTP API 网关构建的，每个端点都有一个 Lambda</st> <st c="37646">函数，负责执行相关的操作。</st>
    <st c="37761">例如，接下来我们来看看</st> `<st c="37792">delete</st>` <st c="37798">功能：</st>
- en: '[PRE3]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: <st c="38255">The</st> `<st c="38260">delete</st>` <st c="38266">function is</st>
    <st c="38278">responsible for deleting a specific recipe in DynamoDB based on</st>
    <st c="38343">the ID.</st>
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="38255">`delete`</st> <st c="38260">功能负责根据</st> <st c="38278">ID 在 DynamoDB
    中删除特定食谱。</st>
- en: <st c="38350">So, for every</st> <st c="38364">execution, the API gateway will
    trigger the Lambda function associated.</st> <st c="38437">In this case, the function
    will grab</st> `<st c="38474">recipe_id</st>` <st c="38483">from the path and
    call the</st> `<st c="38511">delete_item</st>` <st c="38522">API for</st> <st
    c="38531">your table.</st>
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="38350">因此，每次</st> <st c="38364">执行时，API 网关将触发关联的 Lambda 函数。</st> <st
    c="38437">在这种情况下，函数将从路径中获取</st> `<st c="38474">recipe_id</st>` <st c="38483">并调用</st>
    `<st c="38511">delete_item</st>` <st c="38522">API，用于</st> <st c="38531">您的表。</st>
- en: <st c="38542">Go ahead and explore the</st> <st c="38568">other examples:</st>
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="38542">继续探索其他示例：</st>
- en: <st c="38583">Navigate to the API Gateway console</st> <st c="38620">at</st>
    [<st c="38623">https://console.aws.amazon.com/apigateway</st>](https://console.aws.amazon.com/apigateway)<st
    c="38664">.</st>
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="38583">进入API网关控制台</st> <st c="38620">并访问</st> [<st c="38623">https://console.aws.amazon.com/apigateway</st>](https://console.aws.amazon.com/apigateway)<st
    c="38664">。</st>
- en: <st c="38665">Select your API with the name you gave as part of the CloudFormation</st>
    <st c="38735">Stack parameters.</st>
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="38665">选择您在CloudFormation</st> <st c="38735">堆栈参数中指定的API名称。</st>
- en: <st c="38752">Select the option API:</st> `<st c="38776">[your</st>` `<st c="38782">API
    name]</st>`<st c="38791">.</st>
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="38752">选择API选项：</st> `<st c="38776">[您的</st>` `<st c="38782">API名称]</st>`<st
    c="38791">。</st>
- en: <st c="38792">Click on</st> **<st c="38802">Integrations</st>** <st c="38814">from
    the</st> <st c="38824">left menu.</st>
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="38792">点击左侧菜单中的</st> **<st c="38802">集成</st>** <st c="38814">选项。</st>
- en: <st c="38834">Select the route you want</st> <st c="38861">to explore.</st>
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="38834">选择您想要</st> <st c="38861">探索的路由。</st>
- en: <st c="38872">Click on the blue arrow on the</st> **<st c="38904">Lambda Function</st>**
    <st c="38919">field.</st> <st c="38927">This will redirect you to the Lambda page
    of your specific</st> <st c="38986">Lambda function.</st>
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="38872">点击</st> **<st c="38904">Lambda函数</st>** <st c="38919">字段中的蓝色箭头。</st>
    <st c="38927">这将把您重定向到您特定的</st> <st c="38986">Lambda函数的页面。</st>
- en: '![Figure 4.26 – Lambda function access through API Gateway console](img/B22051_04_26.jpg)'
  id: totrans-295
  prefs: []
  type: TYPE_IMG
  zh: '![图4.26 – 通过API网关控制台访问Lambda函数](img/B22051_04_26.jpg)'
- en: <st c="39415">Figure 4.26 – Lambda function access through API Gateway console</st>
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="39415">图4.26 – 通过API网关控制台访问Lambda函数</st>
- en: <st c="39479">Your application is</st> <st c="39500">protected by Cognito authentication
    since you cannot access the admin page</st> <st c="39574">without being authenticated.</st>
    <st c="39604">However, what would happen if a user tried to directly access</st>
    <st c="39666">the API?</st>
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="39479">您的应用程序已</st> <st c="39500">通过Cognito身份验证进行保护，因为您无法在未经过身份验证的情况下访问管理员页面。</st>
    <st c="39574">但是，如果用户试图直接访问</st> <st c="39666">API，会发生什么呢？</st>
- en: <st c="39674">That is where API authorization comes into the picture.</st> <st
    c="39731">For this application, we have already configured authentication for
    the specific routes defined in the requirements sections, and you can explore
    it in the API</st> <st c="39891">Gateway console:</st>
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="39674">这就是API授权发挥作用的地方。</st> <st c="39731">对于这个应用程序，我们已经为要求部分中定义的特定路由配置了身份验证，您可以在API</st>
    <st c="39891">网关控制台中进行探索：</st>
- en: <st c="39907">Navigate to the API Gateway</st> <st c="39936">console</st> [<st
    c="39944">https://console.aws.amazon.com/apigateway</st>](https://console.aws.amazon.com/apigateway)<st
    c="39985">.</st>
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="39907">进入API网关</st> <st c="39936">控制台</st> [<st c="39944">https://console.aws.amazon.com/apigateway</st>](https://console.aws.amazon.com/apigateway)<st
    c="39985">。</st>
- en: <st c="39986">Select your API with the name you gave as part of the CloudFormation</st>
    <st c="40056">Stack parameters.</st>
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="39986">选择您在CloudFormation</st> <st c="40056">堆栈参数中指定的API名称。</st>
- en: <st c="40073">Select the option API:</st> `<st c="40097">[your</st>` `<st c="40103">API
    name]</st>`<st c="40112">.</st>
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="40073">选择API选项：</st> `<st c="40097">[您的</st>` `<st c="40103">API名称]</st>`<st
    c="40112">。</st>
- en: <st c="40113">Click on</st> **<st c="40123">Authorization</st>** <st c="40136">from
    the</st> <st c="40146">left menu.</st>
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="40113">点击左侧菜单中的</st> **<st c="40123">授权</st>** <st c="40136">选项。</st>
- en: <st c="40156">You should see something that looks like</st> *<st c="40198">Figure
    4</st>**<st c="40206">.27</st>*<st c="40209">, with two endpoints with an authenticator
    associated.</st> <st c="40264">In this case, that’s</st> **<st c="40285">JWT Auth</st>**<st
    c="40293">.</st>
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="40156">您应该能看到类似于</st> *<st c="40198">图4</st>**<st c="40206">.27</st>*<st
    c="40209">的内容，其中包含两个端点，并且与一个身份验证器相关联。</st> <st c="40264">在这种情况下，使用的是</st> **<st
    c="40285">JWT Auth</st>**<st c="40293">。</st>
- en: '![Figure 4.27 – API Gateway authorization pane](img/B22051_04_27.jpg)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
  zh: '![图4.27 – API网关授权面板](img/B22051_04_27.jpg)'
- en: <st c="41004">Figure 4.27 – API Gateway authorization pane</st>
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="41004">图4.27 – API网关授权面板</st>
- en: <st c="41048">From the authorizer</st> <st c="41068">details on the right, you
    can see that it expects an authorization token in the</st> **<st c="41149">Authorization</st>**
    <st c="41162">header and will verify it based on your Cognito user</st> <st c="41216">pool
    configuration.</st>
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="41048">在右侧的授权器</st> <st c="41068">详细信息中，您可以看到它期望在</st> **<st c="41149">Authorization</st>**
    <st c="41162">头中接收授权令牌，并会根据您的Cognito用户池配置进行验证。</st>
- en: <st c="41235">To understand the behavior, we</st> <st c="41266">have created
    the</st> `<st c="41284">/auth</st>` <st c="41289">route that, at this moment,
    does not require authorization, meaning it is publicly accessible.</st> <st c="41385">We
    will make some changes to understand how to make it a protected route and require
    an</st> <st c="41473">authorization token.</st>
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: <st c="41493">For this example, we used</st> `<st c="41520">curl</st>`<st c="41524">,
    but you can perform the same test with other tools, for</st> <st c="41582">example,
    Postman:</st>
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: <st c="41599">Perform a</st> `<st c="41610">Get</st>` <st c="41613">request
    to the</st> `<st c="41629">API_URL/auth</st>` <st c="41641">endpoint.</st> <st
    c="41652">You should have this value in your</st> `<st c="41687">config.tsx</st>`
    <st c="41697">file, but in case you do not have it available, you can access your</st>
    **<st c="41766">Outputs</st>** <st c="41773">tab from the</st> <st c="41787">CloudFormation
    console:</st>
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: <st c="42069">On the</st> **<st c="42077">Select an authorizer to view its details</st>**
    <st c="42117">dropdown,</st> <st c="42128">select</st> **<st c="42135">CognitoAuthorizer</st>**<st
    c="42152">.</st>
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="42153">Click on</st> **<st c="42163">Attach Authorizer</st>**<st c="42180">.</st>
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.28 – Authorizer attachment process](img/B22051_04_28.jpg)'
  id: totrans-313
  prefs: []
  type: TYPE_IMG
- en: <st c="42404">Figure 4.28 – Authorizer attachment process</st>
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: <st c="42447">Your</st> **<st c="42453">Authorization</st>** <st c="42466">menu
    should now include the</st> **<st c="42495">JWT Auth</st>** <st c="42503">mark
    in front of the</st> **<st c="42525">/auth</st>** <st c="42530">|</st> **<st c="42533">GET</st>**
    <st c="42536">option, as shown in</st> *<st c="42557">Figure 4</st>**<st c="42565">.29</st>*<st
    c="42568">.</st>
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.29 – Routes Authorizers’ page](img/B22051_04_29.jpg)'
  id: totrans-316
  prefs: []
  type: TYPE_IMG
- en: <st c="42616">Figure 4.29 – Routes Authorizers’ page</st>
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: <st c="42654">Perform the</st> <st c="42667">request again and confirm that
    we get an</st> `<st c="42708">Unauthorized</st>` <st c="42720">response:</st>
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: <st c="42965">Change the request to include the authorization token.</st> <st
    c="43021">To get the authorization token, follow</st> <st c="43060">these steps:</st>
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="43072">Go to your application in</st> <st c="43099">your browser.</st>
  id: totrans-321
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="43112">Navigate to the</st> **<st c="43129">Admin</st>** <st c="43134">console.</st>
  id: totrans-322
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="43143">If you are not authenticated, proceed with the</st> <st c="43191">sign-in
    process.</st>
  id: totrans-323
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="43207">On the</st> **<st c="43215">Admin</st>** <st c="43220">page, hover
    over the access token and copy the full access token, as shown in</st> *<st c="43299">Figure
    4</st>**<st c="43307">.23</st>*<st c="43310">.</st>
  id: totrans-324
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="43311">Now try to perform the same request but pass the</st> `<st c="43361">Authorization</st>`
    <st c="43374">header with the value you copied from your</st> <st c="43418">admin
    console:</st>
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: <st c="43562">With this change, you are able to perform requests to this</st>
    <st c="43622">route again.</st>
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="43562">通过此更改，你可以再次向该</st> <st c="43622">路由发起请求。</st>
- en: <st c="43634">Try to change a single character in your long JWT and you will
    note that modifying even a single character in your token means it will become
    invalid and any requests associated with that token will be</st> <st c="43836">rejected
    because the signature verification will fail, preventing</st> <st c="43903">unauthorized
    access.</st>
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="43634">尝试更改你长 JWT 中的一个字符，你会注意到，即使只是修改一个字符，令牌也会变得无效，与该令牌相关的任何请求都会</st>
    <st c="43836">被拒绝，因为签名验证将失败，防止</st> <st c="43903">未经授权的访问。</st>
- en: <st c="43923">Clean up</st>
  id: totrans-329
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="43923">清理</st>
- en: <st c="43932">One of the main advantages</st> <st c="43960">of using serverless
    technologies is that they provide a pay-as-you-go model by design, meaning you
    only pay for what you use.</st> <st c="44086">However, in the long term, you may
    incur costs if you leave the application up and running, so it is recommended
    to clean your infrastructure if you are not using it anymore.</st> <st c="44261">Since
    we deployed it with an IaC, the clean-up process is very straightforward, and
    is composed of</st> <st c="44360">two steps:</st>
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="43932">使用无服务器技术的主要优势之一</st> <st c="43960">是它们通过设计提供按需付费的模型，这意味着你只为实际使用的部分付费。</st>
    <st c="44086">然而，从长远来看，如果你让应用继续运行，可能会产生费用，因此建议在不再使用时清理你的基础设施。</st> <st c="44261">由于我们通过基础设施即代码（IaC）进行部署，清理过程非常简单，包含以下</st>
    <st c="44360">两个步骤：</st>
- en: <st c="44370">Empty</st> <st c="44377">the bucket:</st>
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="44370">清空</st> <st c="44377">桶：</st>
- en: <st c="44388">Go to the S3 console in your</st> <st c="44418">AWS account.</st>
  id: totrans-332
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="44388">进入你的</st> <st c="44418">AWS 账户中的 S3 控制台。</st>
- en: <st c="44430">Select your frontend s3 bucket (the name of the bucket should
    start with</st> `<st c="44504">frontend-chapter-4-</st>`<st c="44523">, followed
    by a</st> <st c="44539">random string).</st>
  id: totrans-333
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="44430">选择你的前端 S3 桶（桶的名称应以</st> `<st c="44504">frontend-chapter-4-</st>`<st
    c="44523">开头，后跟一个</st> <st c="44539">随机字符串）。</st>
- en: <st c="44554">Click on</st> **<st c="44564">Empty</st>**<st c="44569">; This
    will</st> <st c="44582">delete all the content inside</st> <st c="44612">your
    bucket.</st>
  id: totrans-334
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="44554">点击</st> **<st c="44564">清空</st>**<st c="44569">；这将</st> <st c="44582">删除桶内的所有内容。</st>
- en: '![Figure 4.30 – Process of emptying an S3 bucket](img/B22051_04_30.jpg)'
  id: totrans-335
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.30 – 清空 S3 桶的过程](img/B22051_04_30.jpg)'
- en: <st c="44972">Figure 4.30 – Process of emptying an S3 bucket</st>
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="44972">图 4.30 – 清空 S3 桶的过程</st>
- en: <st c="45018">Delete the</st> <st c="45030">CloudFormation stack:</st>
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="45018">删除</st> <st c="45030">CloudFormation 堆栈：</st>
- en: <st c="45051">Go to the CloudFormation console in your</st> <st c="45093">AWS
    account.</st>
  id: totrans-338
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="45051">进入你的</st> <st c="45093">AWS 账户中的 CloudFormation 控制台。</st>
- en: <st c="45105">Select the stack</st> <st c="45123">you created.</st>
  id: totrans-339
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="45105">选择你创建的堆栈。</st>
- en: <st c="45135">Click</st> <st c="45142">on</st> **<st c="45145">Delete</st>**<st
    c="45151">.</st>
  id: totrans-340
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="45135">点击</st> <st c="45142">**删除**</st><st c="45151">。</st>
- en: '<st c="45152">Note: If you don’t see your CloudFormation stack on the list,
    try to change the region in the upper-right corner and select the region where
    you deployed your application.</st> <st c="45325">After that, you should proceed
    with the deletion process described and represented in</st> *<st c="45411">Figure
    4</st>**<st c="45419">.31</st>*<st c="45422">.</st>'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="45152">注意：如果你在列表中看不到你的 CloudFormation 堆栈，尝试在右上角更改区域，选择你部署应用的区域。</st>
    <st c="45325">之后，你应该继续进行删除过程，该过程在</st> *<st c="45411">图 4</st>**<st c="45419">.31</st>*<st
    c="45422">中描述并表示。</st>
- en: '![Figure 4.31 – CloudFormation Stack deletion](img/B22051_04_31.jpg)'
  id: totrans-342
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.31 – CloudFormation 堆栈删除](img/B22051_04_31.jpg)'
- en: <st c="45698">Figure 4.31 – CloudFormation Stack deletion</st>
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="45698">图 4.31 – CloudFormation 堆栈删除</st>
- en: <st c="45741">With the previous</st> <st c="45759">steps, you successfully removed
    all the resources created for the</st> <st c="45826">recipe-sharing application.</st>
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="45741">通过之前的</st> <st c="45759">步骤，你成功移除了为</st> <st c="45826">食谱分享应用创建的所有资源。</st>
- en: <st c="45853">Rearchitecting your recipe-sharing application using serverless
    technologies has been an exciting experiment.</st> <st c="45964">However, as with
    any project, there are always opportunities for improvement.</st> <st c="46042">The
    next section will explore potential enhancements and future considerations to
    further refine your serverless</st> <st c="46155">recipe-sharing application.</st>
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: <st c="46182">Future work</st>
  id: totrans-346
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="46194">Congratulations, you have built a new version of your recipe-sharing
    application with solely serverless technologies and you can now scale based on
    utilization without worrying about your application’s infrastructure.</st> <st
    c="46413">This new recipe-sharing application already incorporates some of the
    future work highlighted in the previous chapter, for example, authentication or
    utilization of secure protocols, but there is always room</st> <st c="46620">for
    improvement.</st>
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: <st c="46636">Enrich your application with media content</st>
  id: totrans-348
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="46679">So far, your application shows a</st> <st c="46712">set of ingredients
    and steps, which is the minimum required to follow a recipe.</st> <st c="46793">However,
    the first thing people look for is a photo of the expected result and your application
    still lacks this feature.</st> <st c="46915">As future work, you could invest
    in adding photos and videos to your recipe to improve the user experience and
    enrich the</st> <st c="47037">recipe content.</st>
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: <st c="47052">User profile</st>
  id: totrans-350
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="47065">With your current authentication mechanism, only authorized users
    can manage the recipes, but for the end users, you have almost no visibility of
    their preferences and profiles.</st> <st c="47244">The likes feature gives</st>
    <st c="47267">you a notion of how popular a recipe is, but that does not mean
    it fits everyone’s preferences.</st> <st c="47364">For example, a user may have
    some food restrictions and if you could offer a more customized experience, this
    would probably increase your application’s popularity.</st> <st c="47529">As a
    future project, you could invest in letting your users create their own profiles,
    with their own preferences and food restrictions, and shortlist recipes based
    on</st> <st c="47697">their preferences.</st>
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: <st c="47715">In the last chapter, there was already a long list of possible
    improvements.</st> <st c="47793">Most of those still apply to this version of
    your application, for example, caching the content or defining a monitoring and
    logging platform, so we only focused on two additional features to add to the
    current</st> <st c="48003">list of</st> <st c="48012">future work.</st>
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: '*<st c="48024">Figure 4</st>**<st c="48033">.32</st>* <st c="48036">demonstrates
    how your architecture could look based on the two proposed improvements</st> <st
    c="48122">we highlighted.</st>'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.32 – Final architecture](img/B22051_04_32.jpg)'
  id: totrans-354
  prefs: []
  type: TYPE_IMG
- en: <st c="48353">Figure 4.32 – Final architecture</st>
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: <st c="48385">Note that an Amazon S3 bucket was added to the data layer, which
    will be responsible for storing all the media content related to each recipe.</st>
    <st c="48529">As a learning exercise, think about how you can store the paths
    of the recipe photos and try to</st> <st c="48625">implement them.</st>
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: <st c="48640">As a hint, you could</st> <st c="48662">follow the same logic
    you have currently for ingredients and steps, and store the paths of each media
    file in an array inside the</st> <st c="48792">recipe document…</st>
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: <st c="48808">Summary</st>
  id: totrans-358
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="48816">In this chapter, you invested in rearchitecting your previous
    application, and it is now more robust and feature-rich.</st> <st c="48936">Moreover,
    you focused only on serverless technologies such as Amazon API Gateway for our
    API, Amazon Cognito for the authentication layer, and Amazon Lambda for compute,
    and it should be clear how these technologies offer advantages in terms of scalability,
    cost efficiency, and operational effort.</st> <st c="49235">For the unchanged
    components such as Amazon S3 and Amazon CloudFront for the frontend, or Amazon
    DynamoDB as the data layer, you were able to practice and review it, so you should
    be more proficient</st> <st c="49434">with them.</st>
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: <st c="49444">In the next chapter, you will explore machine learning using AWS
    technologies to develop an</st> <st c="49537">image analyzer.</st>
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL

["```\n$ kubectl create ns appmesh-system\n$ eksctl create iamserviceaccount --cluster myipv4cluster --namespace appmesh-system --name appmesh-controller --attach-policy-arn  arn:aws:iam::aws:policy/AWSCloudMapFullAccess,arn:aws:iam::aws:policy/AWSAppMeshFullAccess --override-existing-serviceaccounts --approve\n…..\n454 created serviceaccount \"appmesh-system/appmesh-controller\"\n```", "```\n$ helm install appmesh-controller eks/appmesh-controller --namespace appmesh-system --set region=eu-central-1 --set serviceAccount.create=false --set serviceAccount.name=appmesh-controller\n…..\nAWS App Mesh controller installed!\n$ kubectl -n appmesh-system get all\nNAME  READY   STATUS    RESTARTS   AGE\npod/appmesh-controller-xx   1/1     Running   0          105s\nNAME TYPE    CLUSTER-IP     EXTERNAL-IP   PORT(S)   AGE\nservice/appmesh-controller-webhook-service   ClusterIP   10.100.20.50   <none>        443/TCP   105s\nNAME  READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.apps/appmesh-controller   1/1     1  1   105s\nNAME  DESIRED CURRENT   READY   AGE\nreplicaset.apps/appmesh-controller-xx   1   1  1       105s\n$ kubectl get crds | grep appmesh\n….\nvirtualgateways.appmesh.k8s.aws 2022-12-20T21:45:42Z\nvirtualnodes.appmesh.k8s.aws    2022-12-20T21:45:42Z\nvirtualrouters.appmesh.k8s.aws  2022-12-20T21:45:42Z\nvirtualservices.appmesh.k8s.aws 2022-12-20T21:45:42Z\n```", "```\napiVersion: appmesh.k8s.aws/v1beta2\nkind: Mesh\nmetadata:\n  name: webapp\nspec:\n  namespaceSelector:\n    matchLabels:\n      mesh: webapp\n```", "```\n    ---\n    kind: Namespace\n    apiVersion: v1\n    metadata:\n      name: green\n      labels:\n        name: green\n    ```", "```\n    ---\n    apiVersion: apps/v1\n    kind: Deployment\n    metadata:\n      namespace: green\n      name: green-v1\n    spec:\n      selector:\n        matchLabels:\n          app.kubernetes.io/name: green-v1\n      replicas: 2\n      template:\n        metadata:\n          labels:\n            app.kubernetes.io/name: green-v1\n        spec:\n          containers:\n          - image: 112233.dkr.ecr…/green:0.0.1\n            imagePullPolicy: Always\n            name: backend\n            ports:\n            - containerPort: 8081\n    ```", "```\n    ---\n    apiVersion: v1\n    kind: Service\n    metadata:\n      namespace: green\n      name: green-v1\n      labels:\n        version: v1\n    spec:\n      ports:\n        - port: 8081\n          protocol: TCP\n      selector:\n        app.kubernetes.io/name: green-v1\n    ```", "```\n    $ kubectl get svc -n green\n    NAME  TYPE   CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE\n    green-v1  ClusterIP   10.100.192.178   <none>  8081/TCP   8h\n    ```", "```\n    ---\n    kind: Namespace\n    apiVersion: v1\n    metadata:\n      name: blue\n      labels:\n        name: blue\n    ```", "```\n    ---\n    apiVersion: apps/v1\n    kind: Deployment\n    metadata:\n      namespace: blue\n      name: blue-v1\n    spec:\n      selector:\n        matchLabels:\n          app.kubernetes.io/name: blue-v1\n      replicas: 2\n      template:\n        metadata:\n          labels:\n            app.kubernetes.io/name: blue-v1\n        spec:\n          containers:\n          - image: 112233.dkr.ecr…blue:0.0.1\n            imagePullPolicy: Always\n            name: blue-v1\n            ports:\n            - containerPort: 8080\n    ```", "```\n    ---\n    apiVersion: v1\n    kind: Service\n    metadata:\n      namespace: blue\n      name: blue-v1\n      labels:\n        version: v1\n    spec:\n      ports:\n        - port: 8080\n          protocol: TCP\n      selector:\n        app.kubernetes.io/name: blue-v1\n    ```", "```\n    $ kubectl get svc -n blue\n    NAME   TYPE   CLUSTER-IP     EXTERNAL-IP   PORT(S)    AGE\n    blue-v1   ClusterIP   10.100.223.120   <none> 8080/TCP   8h\n    ```", "```\n    kind: Namespace\n    apiVersion: v1\n    metadata:\n      name: consumer\n      labels:\n        name: consumer\n    ```", "```\n    apiVersion: apps/v1\n    kind: Deployment\n    metadata:\n      namespace: consumer\n      name: consumer\n    spec:\n      selector:\n        matchLabels:\n          app.kubernetes.io/name: consumer\n      replicas: 1\n      template:\n        metadata:\n          labels:\n            app.kubernetes.io/name: consumer\n        spec:\n          containers:\n          - image: alpine/curl\n            command:\n            - sleep\n            - \"36000\"\n            imagePullPolicy: IfNotPresent\n            ports:\n            - containerPort: 22\n            name: consumer\n          restartPolicy: Always\n    ```", "```\n    $ kubectl get po -n consumer\n    NAME                    READY   STATUS    RESTARTS   AGE\n    consumer-123   1/1     Running   0          13s\n    ```", "```\n    $ kubectl exec -it -n consumer consumer-123 – sh\n    / # curl http://green-v1.green:8081/id\n    {\"id\":\"green\"}\n    / # curl http://green-v1.green:8081/query\n    {\"message\":\"hello from green\"}\n    / # curl http://blue-v1.blue:8080/id\n    {\"id\":\"blue\"}\n    / # curl http://blue-v1.blue:8080/query\n    {\"message\":\"hello from blue\"}\n    ```", "```\n$ kubectl label namespace consumer mesh=webapp\n$ kubectl label namespace consumer appmesh.k8s.aws/sidecarInjectorWebhook=enabled\n$ kubectl label namespace blue mesh=webapp\n$ kubectl label namespace blue appmesh.k8s.aws/sidecarInjectorWebhook=enabled\n$ kubectl label namespace green mesh=webapp\n$ kubectl label namespace green appmesh.k8s.aws/sidecarInjectorWebhook=enabled\n```", "```\n---\napiVersion: appmesh.k8s.aws/v1beta2\nkind: VirtualNode\nmetadata:\n  name: green-v1\n  namespace: green\nspec:\n  podSelector:\n    matchLabels:\n      app.kubernetes.io/name: green-v1\n  listeners:\n    - portMapping:\n        port: 8081\n        protocol: http\n      healthCheck:\n        protocol: http\n        path: '/id'\n        healthyThreshold: 2\n        unhealthyThreshold: 2\n        timeoutMillis: 2000\n        intervalMillis: 5000\n  serviceDiscovery:\n    dns:\n      hostname: green-v1.green.svc.cluster.local\n```", "```\n---\napiVersion: appmesh.k8s.aws/v1beta2\nkind: VirtualNode\nmetadata:\n  name: blue-v1\n  namespace: blue\nspec:\n  podSelector:\n    matchLabels:\n      app.kubernetes.io/name: blue-v1\n  listeners:\n    - portMapping:\n        port: 8080\n        protocol: http\n      healthCheck:\n        protocol: http\n        path: '/id'\n        healthyThreshold: 2\n        unhealthyThreshold: 2\n        timeoutMillis: 2000\n        intervalMillis: 5000\n  serviceDiscovery:\n    dns:\n      hostname: blue-v1.blue.svc.cluster.local\n```", "```\n$ kubectl get virtualnode --all-namespaces\nNAMESPACE   NAME  ARN                AGE\nblue  blue-v1    arn:aws:appmesh:eu-central-1:112233:mesh/webapp/virtualNode/blue-v1_blue     2m50s\ngreen       green-v1   arn:aws:appmesh:eu-central-1:112233:mesh/webapp/virtualNode/green-v1_green   103s\n$ aws appmesh list-virtual-nodes --mesh-name webapp\n{\n    \"virtualNodes\": [\n        {\n….\n            \"virtualNodeName\": \"blue-v1_blue\",\n….\n        },\n        {\n….\n            \"virtualNodeName\": \"green-v1_green\",\n…..}]}\n```", "```\n$ kubectl get po -n blue\nNAME                      READY   STATUS    RESTARTS   AGE\nblue-v1-684cc59d8-5kczs   1/1     Running   0          23h\nblue-v1-684cc59d8-nfvf9   1/1     Running   0          23h\n$ kubectl rollout restart deployment blue-v1 -n blue\ndeployment.apps/blue-v1 restarted\n$ kubectl get po -n blue\nNAME                       READY   STATUS    RESTARTS   AGE\nblue-v1-6bdfb49995-8789s   2/2     Running   0          8s\nblue-v1-6bdfb49995-zzsw4   2/2     Running   0          10s\n```", "```\n---\napiVersion: appmesh.k8s.aws/v1beta2\nkind: VirtualService\nmetadata:\n  name: blue\n  namespace: blue\nspec:\n  awsName: blue.blue.svc.cluster.local\n  provider:\n    virtualNode:\n      virtualNodeRef:\n        name: blue-v1\n        namespace: blue\n```", "```\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: blue\n  namespace: blue\n  labels:\n    app.kubernetes.io/name: blue\nspec:\n  ports:\n  - port: 8080\n    name: http\n```", "```\n$ kubectl get virtualservice --all-namespaces\nNAMESPACE   NAME    ARN                             AGE\nblue   blue    arn:aws:appmesh:eu-central-1:112233:mesh/webapp/virtualService/blue.blue.svc.cluster.local     37s\ngreen       green   arn:aws:appmesh:eu-central-1:112233:mesh/webapp/virtualService/green.green.svc.cluster.local   25s\n$ kubectl get svc --all-namespaces\nNAMESPACE    NAME     TYPE  CLUSTER-IP       ..\nblue  blue     ClusterIP   10.100.217.243   <none>  8080/TCP .\nblue  blue-v1  ClusterIP   10.100.50.46     <none>  8080/TCP .\ngreen green    ClusterIP   10.100.100.13    <none>  8081/TCP .\ngreen green-v1 ClusterIP   10.100.51.214    <none>  8081/TCP .\n….\n```", "```\n---\napiVersion: appmesh.k8s.aws/v1beta2\nkind: VirtualNode\nmetadata:\n  name: consumer\n  namespace: consumer\nspec:\n  podSelector:\n    matchLabels:\n      app.kubernetes.io/name: consumer\n  listeners:\n    - portMapping:\n        port: 8082\n        protocol: http\n  backends:\n    - virtualService:\n        virtualServiceRef:\n          namespace: blue\n                     name: blue\n    - virtualService:\n        virtualServiceRef:\n                    namespace: green\n                   name: green\n  serviceDiscovery:\n    dns:\n      hostname: consumer.consumer.svc.cluster.local\n```", "```\n$ kubectl rollout restart deployment consumer  -n consumer\ndeployment.apps/consumer restarted\n$ kubectl get po -n consumer\nNAME          READY   STATUS    RESTARTS   AGE\nconsumer-1122\\. 2/2     Running   0          105s\n$ aws appmesh describe-virtual-node --virtual-node-name consumer_consumer --mesh-name webapp\n{\n    \"virtualNode\": {\n        \"status\": {\n            \"status\": \"ACTIVE\"\n….}\n```", "```\n$ kubectl exec -it -n consumer consumer-1122  -- sh\nDefaulted container \"consumer\" out of: consumer, envoy, proxyinit (init)\n/ # curl -s http://blue.blue.svc.cluster.local:8080/id\n{\"id\":\"blue\"}\n/ # curl -s http://green.green.svc.cluster.local:8081/id\n{\"id\":\"green\"}\n```", "```\n---\napiVersion: appmesh.k8s.aws/v1beta2\nkind: VirtualRouter\nmetadata:\n  name: app-router\n  namespace: consumer\nspec:\n  listeners:\n    - portMapping:\n        port: 8085\n        protocol: http\n  routes:\n    - name: app-route\n      httpRoute:\n        match:\n          prefix: /id\n        action:\n          weightedTargets:\n            - virtualNodeRef:\n                name: green-v1\n                namespace: green\n              weight: 100\n              port: 8081\n            - virtualNodeRef:\n                name: blue-v1\n                namespace: blue\n              weight: 0\n              port: 8080\n```", "```\n---\napiVersion: appmesh.k8s.aws/v1beta2\nkind: VirtualService\nmetadata:\n  name: myapp\n  namespace: consumer\nspec:\n  awsName: myapp.consumer.svc.cluster.local\n  provider:\n    virtualRouter:\n      virtualRouterRef:\n        name: app-router\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: myapp\n  namespace: consumer\n  labels:\n    app.kubernetes.io/name: consumer\nspec:\n  ports:\n  - port: 8085\n    name: http\n```", "```\nbackends:\n    - virtualService:\n        virtualServiceRef:\n          namespace: blue\n          name: blue\n    - virtualService:\n        virtualServiceRef:\n          namespace: green\n          name: green\n    - virtualService:\n        virtualServiceRef:\n          name: myapp\n```", "```\n$ kubectl exec -it -n consumer consumer-1122  -- sh\nDefaulted container \"consumer\" out of: consumer, envoy, proxyinit (init)\n/ # curl -s http://myapp.consumer.svc.cluster.local:8085/id\n{\"id\":\"green\"}\n/ # curl -s http://myapp.consumer.svc.cluster.local:8085/id\n{\"id\":\"green\"}\n```", "```\nroutes:\n    - name: app-route\n      httpRoute:\n        match:\n          prefix: /id\n        action:\n          weightedTargets:\n            - virtualNodeRef:\n                name: green-v1\n                namespace: green\n              weight: 50\n              port: 8081\n            - virtualNodeRef:\n                name: blue-v1\n                namespace: blue\n              weight: 50\n              port: 8080\n```", "```\n/ # curl -s http://myapp.consumer.svc.cluster.local:8085/id\n{\"id\":\"green\"}\n/ # curl -s http://myapp.consumer.svc.cluster.local:8085/id\n{\"id\":\"blue\"}\n/ # curl -s http://myapp.consumer.svc.cluster.local:8085/id\n{\"id\":\"green\"}\n/ # curl -s http://myapp.consumer.svc.cluster.local:8085/id\n{\"id\":\"blue\"}\n```", "```\n$ kubectl create namespace internet\n$ kubectl label namespace internet gateway=in-gw\n$ kubectl label namespace internet mesh=webapp\n```", "```\n---\napiVersion: appmesh.k8s.aws/v1beta2\nkind: VirtualGateway\nmetadata:\n  name: in-gw\n  namespace: internet\nspec:\n  namespaceSelector:\n    matchLabels:\n      gateway: in-gw\n  podSelector:\n    matchLabels:\n      app: in-gw\n  listeners:\n    - portMapping:\n        port: 8088\n        protocol: http\n```", "```\n---\napiVersion: appmesh.k8s.aws/v1beta2\nkind: GatewayRoute\nmetadata:\n  name: myapp-route\n  namespace: internet\nspec:\n  httpRoute:\n    match:\n      prefix: \"/\"\n    action:\n      target:\n        virtualService:\n          virtualServiceRef:\n            name: myapp\n            port: 8085\n            namespace: consumer\n```", "```\n$ kubectl get virtualgateway --all-namespaces\nNAMESPACE   NAME          ARN                   AGE\ninternet    in-gw   arn:aws:appmesh:eu-central-1:112233:mesh/webapp/virtualGateway/in-gw_internet   7m37s\n```", "```\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: in-gw\n  namespace: internet\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: in-gw\n  template:\n    metadata:\n      labels:\n        app: in-gw\n    spec:\n      containers:\n        - name: envoy\n          image: 840364872350.dkr.ecr.eu-central-1.amazonaws.com/aws-appmesh-envoy:v1.24.0.0-prod\n          env:\n          - name: APPMESH_RESOURCE_ARN\n            value: \"arn:aws:appmesh:eu-central-1:112233:mesh/webapp/virtualGateway/in-gw_internet\"\n          - name: ENVOY_LOG_LEVEL\n            value: \"debug\"\n          ports:\n            - containerPort: 8088\n```", "```\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: in-gw\n  namespace: internet\n  annotations:\n    service.beta.kubernetes.io/aws-load-balancer-type: external\n    service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: ip\n    service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing\nspec:\n  ports:\n    - port: 80\n      targetPort: 8088\n      protocol: TCP\n  type: LoadBalancer\n  loadBalancerClass: service.k8s.aws/nlb\n  selector:\n    app: in-gw\n```", "```\n$ kubectl get svc -n internet\nNAME TYPE  CLUSTER-IP     EXTERNAL-IP     PORT(S)        AGE\nin-gw   LoadBalancer   10.100.12.98   k8s-internet-ingw-1122.elb.eu-central-1.amazonaws.com   80:30644/TCP   53m\n$ curl -s http://k8s-internet-ingw-1122.elb.eu-central-1.amazonaws.com/id\n{\"id\":\"blue\"}\n$ curl -s http://k8s-internet-ingw-1122.elb.eu-central-1.amazonaws.com/id\n{\"id\":\"green\"}\n```", "```\n$ aws servicediscovery create-private-dns-namespace --name prod.eu --description 'european production private DNS namespace' --vpc vpc-0614a71963e68bc86\n{\n    \"OperationId\": \"pqrexzv7e5tn7wq64wiph6ztyb4c5ut3-5k7jsu2f\"\n}\n$ aws servicediscovery get-operation  --operation-id pqrexzv7e5tn7wq64wiph6ztyb4c5ut3-5k7jsu2f\n{\n    \"Operation\": {\n        \"Status\": \"SUCCESS\",\n        \"CreateDate\": 1672566290.293,\n        \"Id\": \"pqrexzv7e5tn7wq64wiph6ztyb4c5ut3-5k7jsu2f\",\n        \"UpdateDate\": 1672566327.657,\n        \"Type\": \"CREATE_NAMESPACE\",\n        \"Targets\": {\n            \"NAMESPACE\": \"ns-pj3fxdidxmcgax7e\"\n        }\n    }\n}}\n```", "```\n$ aws servicediscovery create-service   --name myapp   --description 'Discovery service for the myapp service'   --namespace-id ns-pj3fxdidxmcgax7e   --dns-config 'RoutingPolicy=MULTIVALUE,DnsRecords=[{Type=A,TTL=300}]'   --health-check-custom-config FailureThreshold=1\n{\"Service\": {\n        \"Description\": \"Discovery service for the myapp service\",\n        ……..\n        \"NamespaceId\": \"ns-pj3fxdidxmcgax7e\",\n        \"Arn\": \"arn:aws:servicediscovery:eu-central-1:076637564853:service/srv-kc6c4f2mqt2buibx\",\n        \"Name\": \"myapp\"\n    }\n```", "```\nserviceDiscovery:\n    dns:\n      hostname: blue-v1.blue.svc.cluster.local\n```", "```\nserviceDiscovery:\n    awsCloudMap:\n      namespaceName: prod.eu\n      serviceName: myapp\n```", "```\n$ kubectl get po -n blue -o wide\nNAME  READY   STATUS    RESTARTS   AGE     IP      …..\nblue-v1-12   2/2     Running   0  7m35s   192.168.88.141   …\nblue-v1-22   2/2     Running   0  7m35s   192.168.42.137   …\n$ $ aws servicediscovery list-instances --service-id srv-kc6c4f2mqt2buibx\n{\n    \"Instances\": [\n        {\n            \"Attributes\": {\n                \"AWS_INSTANCE_IPV4\": \"192.168.42.137\",\n                \"AWS_INIT_HEALTH_STATUS\": \"HEALTHY\",\n                ….},\n        {\n            \"Attributes\": {\n                \"AWS_INSTANCE_IPV4\": \"192.168.88.141\",\n                \"AWS_INIT_HEALTH_STATUS\": \"HEALTHY\",\n                ….}]}\n```", "```\nsh-4.2$ dig myapp.prod.eu\n<<>> DiG 9.11.4-P2-RedHat-9.11.4-26.P2.amzn2.5.2 <<>> myapp.prod.eu\n………\n;myapp.prod.eu.                 IN      A\n;; ANSWER SECTION:\nmyapp.prod.eu.          300     IN      A       192.168.88.141\nmyapp.prod.eu.          300     IN      A       192.168.42.137\n…..\n```", "```\n          env:\n          - name: ENVOY_LOG_LEVEL\n            value: \"debug\"\n```", "```\n$ kubectl port-forward -n green green-v1-cf45dcc99-fbdh7   8080:9901\n```", "```\n$ curl -X POST http://localhost:8080/logging\nactive loggers:\n  admin: info\n  alternate_protocols_cache: info\n$ curl -X POST http://localhost:8080/logging?level=debug\nactive loggers:\n  admin: debug\n  alternate_protocols_cache: debug\n….\n$ kubectl logs -n green green-v1-cf45dcc99-fbdh7 envoy\n```"]
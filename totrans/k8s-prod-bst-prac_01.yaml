- en: '*Chapter 1*: Introduction to Kubernetes Infrastructure and Production-Readiness'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 1 章*：Kubernetes 基础设施与生产就绪简介'
- en: With more and more organizations adopting Kubernetes for their infrastructure
    management, it is becoming the industry de facto standard for orchestrating and
    managing distributed applications both in the cloud and on premises.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 随着越来越多的组织采纳 Kubernetes 来管理基础设施，它正成为行业事实上的标准，用于在云端和本地环境中编排和管理分布式应用程序。
- en: Whether you are an individual contributor who is migrating their company's applications
    to the cloud or you are a decision-maker leading a cloud transformation initiative,
    you should plan the journey to Kubernetes and understand its challenges.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你是将公司应用迁移到云端的个人贡献者，还是领导云转型项目的决策者，你都应该规划 Kubernetes 的迁移之路，并了解其面临的挑战。
- en: If this book has a core purpose, it is guiding you through the journey of building
    a production-ready Kubernetes infrastructure while avoiding the common pitfalls.
    This is our reason for writing about this topic, as we have witnessed failures
    and successes through the years of building and operating Kubernetes clusters
    on different scales. We are sure that you can avoid a lot of these failures, saving
    time and money, increasing reliability, and fulfilling your business goals.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果本书有一个核心目的，那就是引导你构建一个生产就绪的 Kubernetes 基础设施，同时避免常见的陷阱。这是我们撰写此主题的原因，因为我们在多年的
    Kubernetes 集群建设和运营过程中见证了失败与成功。我们相信，你可以避免许多失败，节省时间和成本，提高可靠性，达成你的业务目标。
- en: In this chapter, you will learn about how to deploy Kubernetes production clusters
    with best practices. We will explain the roadmap that we will follow for the rest
    of the book, and explain foundational concepts that are commonly used to design
    and implement Kubernetes clusters. Understanding these concepts and the related
    principles are the key to building and operating production infrastructure. Besides,
    we will set your expectations about the book's scope.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何使用最佳实践部署 Kubernetes 生产集群。我们将解释本书接下来要遵循的路线图，并解释设计和实施 Kubernetes 集群时常用的基础概念。理解这些概念及相关原则是构建和运营生产基础设施的关键。此外，我们还将设定你对本书内容范围的预期。
- en: We will go through the core problems that this book will solve and briefly cover
    topics such as Kubernetes production challenges, a production-readiness characteristics,
    the cloud-native landscape, and infrastructure design and management principles.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将讨论它将解决的核心问题，并简要涵盖诸如 Kubernetes 生产挑战、生产就绪特性、云原生环境以及基础设施设计与管理原则等主题。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: The basics of Kubernetes infrastructure
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 基础设施的基础知识
- en: Why Kubernetes is challenging in production
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么 Kubernetes 在生产中具有挑战性
- en: Kubernetes production-readiness
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 生产就绪性
- en: Kubernetes infrastructure best practices
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 基础设施最佳实践
- en: Cloud-native approach
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云原生方法
- en: The basics of Kubernetes infrastructure
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes 基础设施的基础知识
- en: If you are reading this book, you already made your decision to take your Kubernetes
    infrastructure to an advanced level, which means you are beyond the stage of evaluating
    the technology. To build production infrastructure, the investment remains a burden
    and it still needs a solid justification to the business and the leadership within
    your organization. We will try to be very specific in this section about why we
    need a reliable Kubernetes infrastructure, and to clarify the challenges you should
    expect in production.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在阅读本书，说明你已经决定将 Kubernetes 基础设施提升到一个更高级别，这意味着你已经超越了评估技术的阶段。要构建生产级基础设施，投资仍然是一个负担，并且仍然需要向企业和组织领导层提供有力的理由。我们将在本节中尽可能具体地说明为什么我们需要一个可靠的
    Kubernetes 基础设施，并澄清你在生产环境中应该预见到的挑战。
- en: Kubernetes adoption is exploding across organizations all over the world, and
    we expect this growth to continue to increase, as the **International Data Corporation**
    (**IDC**) predicts that around 95 percent of new microservices will be deployed
    in containers by 2021\. Most companies find that containers and Kubernetes help
    to optimize costs, simplify deployment and operations, and decrease time to market,
    as well as play a pivotal role in the hybrid cloud strategies. Similarly, Gartner
    predicts that more than 70 percent of organizations will run two or more containerized
    applications in production by 2021 compared to less than 20 percent in 2019.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 在全球范围内的采用正在迅猛增长，预计这种增长将继续增加，因为**国际数据公司**（**IDC**）预测，到 2021 年，约 95%
    的新微服务将部署在容器中。大多数公司发现，容器和 Kubernetes 有助于优化成本、简化部署和操作、缩短上市时间，并在混合云策略中发挥重要作用。类似地，Gartner
    预测，到 2021 年，超过 70% 的组织将运行两个或更多容器化应用程序，而 2019 年这一比例不到 20%。
- en: Kubernetes components
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubernetes 组件
- en: '"Kubernetes (K8s) is an open-source system for automating deployment, scaling,
    and management of containerized applications."'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: “Kubernetes（K8s）是一个开源系统，用于自动化容器化应用程序的部署、扩展和管理。”
- en: – kubernetes.io
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: – kubernetes.io
- en: As we are concerned about building a reliable Kubernetes cluster, we will cover
    an overview of the Kubernetes cluster architecture and its components, and then
    you will learn about production challenges.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们关注构建一个可靠的 Kubernetes 集群，我们将介绍 Kubernetes 集群架构及其组件的概述，然后你将了解生产中的挑战。
- en: Kubernetes has a distributed systems architecture – specifically, a client-server
    one. There are one or more master nodes, and this is where Kubernetes runs its
    control plane components.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 具有分布式系统架构——特别是客户端-服务器架构。这里有一个或多个主节点，Kubernetes 在这些节点上运行控制平面组件。
- en: 'There are worker nodes where Kubernetes deploys the pods and the workloads.
    A single cluster can manage up to 5,000 nodes. The Kubernetes cluster architecture
    is shown in the following diagram:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 部署 pod 和工作负载的地方是工作节点。一个集群最多可以管理 5000 个节点。Kubernetes 集群架构如以下图所示：
- en: '![Figure 1.1 – Kubernetes cluster architecture](img/B16192_01_001.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.1 – Kubernetes 集群架构](img/B16192_01_001.jpg)'
- en: Figure 1.1 – Kubernetes cluster architecture
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1 – Kubernetes 集群架构
- en: The preceding diagram represents a typical highly available Kubernetes cluster
    architecture with the core components. It shows how the Kubernetes parts communicate
    with each other. Although you have a basic understanding of the Kubernetes cluster
    architecture, we will need to refresh this knowledge over the next section because
    we will interact with most of these components in deeper detail when creating
    and tuning the cluster configuration.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 上述图表展示了一个典型的高可用性 Kubernetes 集群架构，包括核心组件。它展示了 Kubernetes 各部分之间是如何相互通信的。虽然你已经对
    Kubernetes 集群架构有了基本的了解，但我们仍然需要在接下来的章节中刷新这一知识，因为我们将在创建和调整集群配置时与这些组件进行更深入的互动。
- en: Control plane components
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 控制平面组件
- en: 'Control plane components are the core software pieces that construct the Kubernetes
    master nodes. All of them together belong to the Kubernetes project, except `etcd`,
    which is a separate project on its own. These components follow a distributed
    systems architecture and can easily scale horizontally to increase cluster capacity
    and provide high availability:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 控制平面组件是构建 Kubernetes 主节点的核心软件部分。除 `etcd` 外，它们都属于 Kubernetes 项目，`etcd` 是一个独立的项目。这些组件遵循分布式系统架构，可以轻松地水平扩展以增加集群容量并提供高可用性：
- en: '`kube-apiserver`: The API server is the manager of the cluster components and
    it is the interface responsible for handling and serving the management APIs and
    middling the communication between cluster components.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kube-apiserver`：API 服务器是集群组件的管理者，负责处理和提供管理 API，充当集群组件之间通信的中介。'
- en: '`etcd`: This is a distributed, highly available key-value data store that acts
    as the backbone of the cluster and stores all of its data.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`etcd`：这是一个分布式、高可用的键值数据存储，作为集群的核心支撑，存储着所有数据。'
- en: '`kube-controller-manager`: This manages the controller processes that control
    the cluster – for example, the node controller that controls the nodes, the replication
    controller that controls the deployments, and the endpoint controller that controls
    services endpoints exposed in the cluster.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kube-controller-manager`：它管理控制集群的控制器进程——例如，控制节点的节点控制器、控制部署的复制控制器，以及控制集群中暴露的服务端点的端点控制器。'
- en: '`kube-scheduler`: This component is responsible for scheduling the pods across
    the nodes. It decides which pod goes to which node according to the scheduling
    algorithm, available resources, and the placement configuration.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kube-scheduler`：该组件负责在各个节点之间调度 Pod。它根据调度算法、可用资源和位置配置决定哪些 Pod 运行在哪些节点上。'
- en: Node components
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 节点组件
- en: 'Node components are a set of software agents that run on every worker node
    to maintain the running pods and provide network proxy services and the base runtime
    environment for the containers:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 节点组件是一组在每个工作节点上运行的软件代理，用于维护正在运行的 Pod，并提供网络代理服务以及容器的基础运行时环境：
- en: '`kubelet`: An agent service that runs on each node in the cluster, this periodically
    takes a set of pod specs (a manifest file in YAML format that describes a pod
    specification) and ensures that the pods described through these specs are running
    properly. Also, it is responsible for reporting to the master on the health of
    the node where it is running.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubelet`：这是一个在集群中每个节点上运行的代理服务，它会定期获取一组 Pod 规格（描述 Pod 规格的 YAML 格式清单文件），并确保通过这些规格描述的
    Pod 正常运行。此外，它还负责向主节点报告其运行的节点的健康状况。'
- en: '`kube-proxy`: This is an agent service that runs on each node in the cluster
    to create, update, and delete network roles on the nodes, usually using Linux
    iptables. These network rules allow inter-pod and intra-pod communication inside
    and outside of the Kubernetes cluster.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kube-proxy`：这是一个代理服务，在集群中的每个节点上运行，用于在节点上创建、更新和删除网络角色，通常使用 Linux iptables。
    这些网络规则允许 Kubernetes 集群内外部的 Pod 之间进行通信。'
- en: '`containerd` to run containers, and `kubevirt` and `virtlet` to run virtual
    machines.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`containerd` 用于运行容器，而 `kubevirt` 和 `virtlet` 用于运行虚拟机。'
- en: Why Kubernetes is challenging in production
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么 Kubernetes 在生产环境中充满挑战
- en: Kubernetes could be easy to install, but it is complex to operate and maintain.
    Kubernetes in production brings challenges and difficulties along the way, from
    scaling, uptime, and security, to resilience, observability, resources utilization,
    and cost management. Kubernetes has succeeded in solving container management
    and orchestration, and it created a standard layer above the compute services.
    However, Kubernetes still lacks proper or complete support for some essential
    services, such as **Identity and Access Management** (**IAM**), storage, and image
    registries.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 安装起来可能很简单，但操作和维护却非常复杂。Kubernetes 在生产环境中会带来许多挑战和困难，涵盖从扩展、正常运行时间和安全性，到弹性、可观察性、资源利用和成本管理等方面。Kubernetes
    在解决容器管理和调度方面取得了成功，并在计算服务之上创建了一个标准层。然而，Kubernetes 仍然缺乏对一些关键服务的适当或完整支持，例如**身份和访问管理**（**IAM**）、存储和镜像仓库。
- en: Usually, a Kubernetes cluster belongs to a bigger company's production infrastructure,
    which includes databases, IAM, **Lightweight Directory Access Protocol** (**LDAP**),
    messaging, streaming, and others. Bringing a Kubernetes cluster to production
    requires connecting it to these external infrastructure parts.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，一个 Kubernetes 集群属于一个更大的公司生产基础设施的一部分，其中包括数据库、IAM、**轻量级目录访问协议**（**LDAP**）、消息传递、流媒体等。将
    Kubernetes 集群投入生产需要将其与这些外部基础设施连接起来。
- en: Even during cloud transformation projects, we expect Kubernetes to manage and
    integrate with the on-premises infrastructure and services, and this takes production
    complexity to a next level.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是在云转型项目中，我们也希望 Kubernetes 管理并与本地基础设施和服务进行集成，这将生产环境的复杂性提升到一个新的层次。
- en: Another challenge occurs when teams start adopting Kubernetes with the assumption
    that it will solve the scaling and uptime problems that their apps have, but they
    usually do not plan for day-2 issues. This ends up with catastrophic consequences
    regarding security, scaling, uptime, resource utilization, cluster migrations,
    upgrades, and performance tuning.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个挑战出现在团队开始采用 Kubernetes 时，他们假设它能够解决应用程序的扩展性和正常运行时间问题，但通常没有规划好第二天的运维问题。这最终会导致在安全性、扩展性、正常运行时间、资源利用、集群迁移、升级和性能调优方面出现灾难性的后果。
- en: Besides the technical challenges, there are management challenges, especially
    when we use Kubernetes across large organizations that have multiple teams, and
    if the organization is not well prepared to have the right team structure to operate
    and manage its Kubernetes infrastructure. This could lead to teams struggling
    to align around standard tools, best practices, and delivery workflows.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 除了技术挑战外，还有管理上的挑战，特别是在我们将Kubernetes应用于拥有多个团队的大型组织时，如果该组织未能做好准备，未能建立适当的团队结构来运营和管理Kubernetes基础设施，这可能会导致团队在标准工具、最佳实践和交付工作流上难以达成一致。
- en: Kubernetes production-readiness
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes生产就绪
- en: '"Your offering is production-ready when it exceeds customer expectations in
    a way that allows for business growth."'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: “当你的产品超越客户预期，以支持业务增长的方式提供时，它就是生产就绪的。”
- en: – Carter Morgan, Developer Advocate, Google
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: – 卡特·摩根（Carter Morgan），开发者倡导者，Google
- en: Production-readiness is the goal we need to achieve throughout this book, and
    we may not have a definitive definition for this buzzword. It could mean a cluster
    capable to serve production workloads and real traffic in a reliable and secure
    fashion. We can further extend this definition, but what many experts agree on
    is that there is a minimum set of requirements that you need to fulfill before
    you mark your cluster as production-ready.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 生产就绪是我们在本书中需要实现的目标，尽管我们可能没有一个明确的定义来界定这个流行词。它可能意味着一个能够以可靠且安全的方式服务生产工作负载和真实流量的集群。我们可以进一步扩展这个定义，但许多专家一致认为，在你将集群标记为生产就绪之前，有一组最基本的要求需要你满足。
- en: 'We have gathered and categorized these readiness requirements according to
    the typical Kubernetes production layers (illustrated in the following diagram).
    We understand that there are still different production use cases for each organization,
    and product growth and business objectives are deeply affecting these use cases
    and hence the production readiness requirements. However, we can fairly consider
    the following production-ready checklist as an essential list for most mainstream
    use:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们根据典型的Kubernetes生产层（如下图所示）收集并分类了这些准备要求。我们理解，每个组织的生产使用场景仍然不同，产品增长和业务目标深刻影响着这些使用场景，从而影响生产准备要求。然而，我们可以合理地认为以下生产就绪检查清单是大多数主流用例的必备清单：
- en: '![Figure 1.2 – Kubernetes infrastructure layers](img/B16192_01_002.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.2 – Kubernetes基础设施层](img/B16192_01_002.jpg)'
- en: Figure 1.2 – Kubernetes infrastructure layers
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2 – Kubernetes基础设施层
- en: This diagram describes the typical layers of Kubernetes infrastructure. There
    are six layers, which include physical, on-premises, or cloud infrastructure;
    the infrastructure services layer; the cluster layer; the cluster services layer;
    the applications supporting services layer; and finally, the applications layer.
    You will learn about these layers in depth while navigating this book and see
    how to design a Kubernetes production architecture that brings these layers seamlessly
    together.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 该图描述了Kubernetes基础设施的典型层次。共有六个层次，包括物理、本地或云基础设施；基础设施服务层；集群层；集群服务层；应用支持服务层；最后是应用层。你将在本书中深入了解这些层次，并了解如何设计一个能够无缝集成这些层次的Kubernetes生产架构。
- en: The production-readiness checklist
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生产就绪检查清单
- en: We have categorized the production-readiness checklist items and mapped them
    to the corresponding infrastructure layers. Each checklist item represents a design
    and implementation concern that you need to fulfill to consider your cluster a
    production-ready. Throughout this book, we will cover the checklist items and
    their design and implementation details.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经将生产就绪检查清单项进行了分类，并将它们映射到相应的基础设施层次。每个检查清单项代表了一个设计和实施的关注点，你需要完成这些才能认为你的集群已经准备好投入生产。在本书中，我们将涵盖检查清单项及其设计和实施的详细信息。
- en: Cluster infrastructure
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 集群基础设施
- en: 'The following checklist items cover the production-readiness requirements on
    the cluster level:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 以下检查清单项涵盖了集群层面的生产就绪要求：
- en: '`etcd` on two separate node groups. This is generally to ease `etcd` operations,
    such as upgrades and backups, and to decrease the radius of control plane failures.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在两个独立的节点组上运行`etcd`。这样做通常是为了简化`etcd`的操作，如升级和备份，并减少控制平面故障的影响范围。
- en: Also, for large Kubernetes clusters, this allows `etcd` to get proper resource
    allocation by running it on certain node types that fulfill its extensive I/O
    needs.
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，对于大型Kubernetes集群，这可以通过在特定节点类型上运行`etcd`，从而为其分配适当的资源，以满足其大量I/O需求。
- en: Finally, avoid deploying pods to the control plane nodes.
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后，避免将 Pods 部署到控制平面节点。
- en: '**Run a highly available workers group**: You can achieve this by running a
    group or more of worker nodes with three or more instances. If you are running
    these workers groups using one of the public cloud providers, you should deploy
    them within an auto-scaling group and in different availability zones.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行高可用的工作节点组**：您可以通过运行一个或多个具有三个或更多实例的工作节点组来实现。如果您使用公共云提供商来运行这些工作节点组，您应该将它们部署在自动伸缩组内，并分布在不同的可用区。'
- en: Another essential requirement to achieve worker high availability is to deploy
    the Kubernetes cluster auto scaler, which enables worker nodes to horizontally
    upscale and downscale based on the cluster utilization.
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实现工作节点高可用性的另一个基本要求是部署 Kubernetes 集群自动扩展器，它允许工作节点根据集群的使用情况进行水平扩展和缩减。
- en: '**Use a shared storage management solution**: You should consider using a shared
    storage management solution to persist and manage stateful apps'' data. There
    are plenty of choices, either open source or commercial, such as AWS **Elastic
    Block Store** (**EBS**), **Elastic File System** (**EFS**), Google Persistent
    Disk, Azure Disk Storage, ROOK, Ceph, and Portworx. There is no right or wrong
    choice among them, but it all depends on your application use case and requirements.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用共享存储管理解决方案**：您应该考虑使用共享存储管理解决方案来持久化和管理有状态应用程序的数据。有很多选择，无论是开源还是商业的，例如 AWS
    **弹性块存储**（**EBS**）、**弹性文件系统**（**EFS**）、Google Persistent Disk、Azure 磁盘存储、ROOK、Ceph
    和 Portworx。它们之间没有绝对对错的选择，但取决于您的应用场景和需求。'
- en: '**Deploy infrastructure observability stack**: Collecting logs and metrics
    on the infrastructure level for nodes, network, storage, and other infrastructure
    components is essential for monitoring a cluster''s infrastructure, and also to
    get useful insights about the cluster''s performance, utilization, and troubleshooting
    outages.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署基础设施可观测性栈**：收集关于节点、网络、存储和其他基础设施组件的日志和指标对于监控集群的基础设施至关重要，同时也有助于获得集群性能、利用率和故障排除的有用信息。'
- en: You should deploy a monitoring and alerting stack, such as Node Exporter, Prometheus,
    and Grafana, and deploy a central logging stack, such as ELK (Elasticsearch, Logstash,
    and Kibana). Alternatively, you can consider a complete commercial solution, such
    as Datadog, New Relic, AppDynamics, and so on.
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您应该部署一个监控和警报栈，如 Node Exporter、Prometheus 和 Grafana，并部署一个集中式日志栈，如 ELK（Elasticsearch、Logstash
    和 Kibana）。另外，您还可以考虑使用完整的商业解决方案，如 Datadog、New Relic、AppDynamics 等。
- en: Fulfilling the previous requirements will ensure the production-readiness of
    the cluster infrastructure. Later in this book, we will show you in more detail
    how to achieve each of these requirements through infrastructure design, Kubernetes
    configuration tuning, and third-party tools usage.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 完成上述要求将确保集群基础设施的生产就绪性。稍后本书中，我们将更详细地展示如何通过基础设施设计、Kubernetes 配置调优和第三方工具使用来实现这些要求。
- en: Cluster services
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 集群服务
- en: 'The following checklist items cover the production-readiness requirements on
    the cluster services level:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 以下检查清单项涵盖了集群服务级别的生产就绪要求：
- en: '**Control cluster access**: Kubernetes introduces authentication and authorization
    choices and lets the cluster''s admin configure them according to their needs.
    As a best practice, you should ensure authentication and authorization configuration
    is tuned and in place. Integrate with an external authentication provider to authenticate
    cluster''s users, such as LDAP, **OpenID Connect** (**OIDC**), and AWS IAM.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制集群访问**：Kubernetes 引入了认证和授权选项，并允许集群管理员根据需要配置它们。作为最佳实践，您应该确保身份验证和授权配置已调优并到位。集成外部身份验证提供者来验证集群用户，如
    LDAP、**OpenID Connect**（**OIDC**）和 AWS IAM。'
- en: For authorization, you need to configure the cluster to enable **Role-Based
    Access Control** (**RBAC**), **Attribute-Based Access Control** (**ABAC**), and
    webhooks.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于授权，您需要配置集群以启用 **基于角色的访问控制**（**RBAC**）、**基于属性的访问控制**（**ABAC**）和 Webhooks。
- en: '`kube-system` namespace. For all other namespaces that host your apps pods,
    we recommend assigning a restrictive default PSP.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kube-system` 命名空间。对于托管应用程序 Pods 的所有其他命名空间，我们建议分配一个限制性的默认 PSP。'
- en: '**Enforce custom policies and rules**: Rules and policy enforcement are essential
    for every Kubernetes cluster. This is true for both a small single-tenant cluster
    and a large multi-tenant one. Kubernetes introduces native objects to achieve
    this purpose, such as pod security policies, network policies, resource limits,
    and quotas.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**强制执行自定义策略和规则**：规则和策略的强制执行对每个 Kubernetes 集群都至关重要。这适用于小型单租户集群和大型多租户集群。Kubernetes
    引入了本地对象来实现这一目的，如 Pod 安全策略、网络策略、资源限制和配额。'
- en: For custom rules enforcement, you may deploy an open policy agent, such as OPA
    Gatekeeper. This will enable you to enforce rules such as pods must have resource
    limits in place, namespaces must have specific labels, images must be from known
    repositories, and many others.
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于自定义规则的强制执行，您可以部署一个开放政策代理，如 OPA Gatekeeper。这将使您能够强制执行规则，如 pod 必须设置资源限制、命名空间必须具有特定标签、镜像必须来自已知的仓库等，其他规则也可以执行。
- en: '**Deploy and fine-tune the cluster DNS**: Running a DNS for Kubernetes clusters
    is essential for name resolution and service connectivity. Managed Kubernetes
    comes with cluster DNS pre-deployed, such as CoreDNS. For self-managed clusters,
    you should consider deploying CoreDNS too. As a best practice, you should fine-tune
    CoreDNS to minimize errors and failure rates, optimize performance, and adjust
    caching, and resolution time.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署并微调集群 DNS**：运行 Kubernetes 集群的 DNS 对于名称解析和服务连接至关重要。托管 Kubernetes 已经预部署了集群
    DNS，例如 CoreDNS。对于自我管理的集群，您也应该考虑部署 CoreDNS。作为最佳实践，您应该微调 CoreDNS 以减少错误和故障率，优化性能，调整缓存和解析时间。'
- en: '**Deploy and restrict network policies**: Kubernetes allows all traffic between
    the pods inside a single cluster. This behavior is insecure in a multi-tenant
    cluster. As a best practice, you need to enable network policies in your cluster,
    and create a deny-all default policy to block all traffic among the pods, then
    you create network policies with less restrictive ingress/egress rules to allow
    the traffic whenever it is needed for between specific pods.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署并限制网络策略**：Kubernetes 允许单个集群内的所有 Pod 之间进行流量交换。这种行为在多租户集群中是不安全的。作为最佳实践，您需要在集群中启用网络策略，创建一个默认的拒绝所有流量的策略来阻止
    Pod 之间的所有流量，然后根据需要创建具有较少限制的 ingress/egress 规则的网络策略，以允许特定 Pod 之间的流量。'
- en: '`kube-scan` for security configuration scanning, `kube-bench` for security
    benchmarking, and Sonobuoy to run Kubernetes standard conformance tests against
    the cluster.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kube-scan` 用于安全配置扫描，`kube-bench` 用于安全基准测试，Sonobuoy 用于对集群运行 Kubernetes 标准符合性测试。'
- en: '`etcd` database.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`etcd` 数据库。'
- en: '`control-plane`, `kubelet`, container runtime, and more. You should deploy
    a monitoring and alerting stack such as Node Exporter, Prometheus, and Grafana,
    and deploy a central logging stack, such as EFK (Elasticsearch, Fluentd, and Kibana).'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`control-plane`、`kubelet`、容器运行时等。您应该部署一个监控和告警栈，如 Node Exporter、Prometheus 和
    Grafana，并部署一个中央日志栈，如 EFK（Elasticsearch、Fluentd 和 Kibana）。'
- en: Fulfilling the previous requirements will ensure the production-readiness of
    the cluster services. Later in this book, we will show you in more detail how
    to achieve each of these requirements through Kubernetes configuration tuning
    and third-party tools usage.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 完成以上要求将确保集群服务的生产就绪性。在本书后面，我们将更详细地介绍如何通过 Kubernetes 配置调整和第三方工具的使用来实现这些要求。
- en: Apps and deployments
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用和部署
- en: 'The following checklist items cover the production-readiness requirements on
    the apps and deployments level:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 以下清单项涵盖了应用和部署级别的生产就绪要求：
- en: '**Automate images quality and vulnerability scanning**: An app image that runs
    a low-quality app or that is written with poor-quality specs can harm the cluster
    reliability and other apps running on it. The same goes for images with security
    vulnerabilities. For that, you should run a pipeline to scan images deployed to
    the cluster for security vulnerabilities and deviations from quality standards.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化镜像质量和漏洞扫描**：运行低质量应用或使用不良规格编写的应用镜像可能会影响集群的可靠性以及在集群中运行的其他应用。安全漏洞的镜像也是如此。为此，您应运行一个流水线，扫描部署到集群中的镜像，查找安全漏洞和偏离质量标准的情况。'
- en: '**Deploy Ingress Controller**: By default, you can expose Kubernetes services
    outside the cluster using load balancers and node ports. However, the majority
    of the apps have advanced routing requirements, and deploying an Ingress Controller
    such as Nginx''s Ingress Controller is a de facto solution that you should include
    in your cluster.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署 Ingress 控制器**：默认情况下，你可以使用负载均衡器和节点端口将 Kubernetes 服务暴露到集群外部。然而，大多数应用有更复杂的路由需求，部署像
    Nginx 的 Ingress 控制器这样的解决方案是你应该在集群中使用的事实标准。'
- en: '`Secrets` object that eases the creation and management of secrets and certificates
    inside the cluster. In addition to that, you can extend secrets object by deploying
    other third-party services, such as Sealed Secrets for encrypted secrets, and
    Cert-Manager to automate certificates from certificate providers such as Let''s
    Encrypt or Vault.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Secrets` 对象有助于在集群内创建和管理秘密及证书。除此之外，你还可以通过部署其他第三方服务来扩展 Secrets 对象，例如使用 Sealed
    Secrets 进行加密秘密管理，使用 Cert-Manager 自动管理来自证书提供商（如 Let''s Encrypt 或 Vault）的证书。'
- en: '**Deploy apps observability stack**: You should make use of Kubernetes'' built-in
    monitoring capabilities, such as defining readiness and liveness probes for the
    pods. Besides that, you should deploy a central logging stack for the applications''
    pods. Deploy a blackbox monitoring solution or use a managed service to monitor
    your apps'' endpoints. Finally, consider using application performance monitoring
    solutions, such as New Relic APM, Datadog APM, AppDynamics APM, and more.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署应用可观察性栈**：你应该利用 Kubernetes 内置的监控功能，例如为 Pod 定义就绪和存活探针。除此之外，还应部署一个中央日志栈来监控应用的
    Pod。部署一个黑盒监控解决方案，或使用托管服务来监控应用的端点。最后，考虑使用应用性能监控解决方案，如 New Relic APM、Datadog APM、AppDynamics
    APM 等。'
- en: Fulfilling the previous requirements will ensure the production-readiness of
    the apps and deployments. Later in this book, we will show you in more detail
    how to achieve each of these requirements through Kubernetes configuration tuning
    and third-party tool usage.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 满足上述要求将确保应用和部署具备生产就绪性。本书后续将详细介绍如何通过 Kubernetes 配置调整和第三方工具的使用来实现这些要求。
- en: Kubernetes infrastructure best practices
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes 基础设施最佳实践
- en: We have learned about the basics of Kubernetes infrastructure and have got a
    high-level understanding of the production readiness characteristics of the Kubernetes
    clusters. Now, you are ready to go through the infrastructure best practices and
    design principles that will lead you through the way building and operating your
    production clusters.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了 Kubernetes 基础设施的基本知识，并对 Kubernetes 集群的生产就绪性特征有了初步的理解。现在，你已经准备好深入学习基础设施最佳实践和设计原则，这些将引导你建立和运营生产集群的过程。
- en: The 12 principles of infrastructure design and management
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基础设施设计和管理的 12 项原则
- en: Building a resilient and reliable Kubernetes infrastructure requires more than
    just getting your cluster up and running with a provisioning tool. Solid infrastructure
    design is a sequence of architecture decisions and their implementation. Luckily,
    many organizations and experts put these principles and architectural decisions
    into real tests.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个具有弹性和可靠性的 Kubernetes 基础设施不仅仅是使用配置工具让你的集群运行起来。稳固的基础设施设计是一系列架构决策及其实施的结果。幸运的是，许多组织和专家已经将这些原则和架构决策付诸实际测试。
- en: 'The following list summarizes the core principles that may lead the decision-maker
    through the Kubernetes infrastructure design process, and throughout this book,
    you will learn about these principles in detail, and apply them along the way:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表总结了可能引导决策者进行 Kubernetes 基础设施设计的核心原则，在本书中，你将详细学习这些原则，并在实践中应用它们：
- en: '**Go managed**: Although managed services could looks pricier than self-hosted
    ones, it is still preferred over them. In almost every scenario, a managed service
    is more efficient and reliable than its self-hosted counterpart. We apply this
    principle to Kubernetes managed services such as **Google Kubernetes Engine**
    (**GKE**), **Azure Kubernetes Service** (**AKS**), and **Elastic Kubernetes Service**
    (**EKS**). This goes beyond Kubernetes to every infrastructure service, such as
    databases, object stores, cache, and many others. Sometimes, the managed service
    could be less customizable or more expensive than a self-hosted one, but in every
    other situation, you should always consider first the managed service.'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Go 管理服务**：尽管托管服务看起来比自托管服务更贵，但它仍然比自托管服务更受青睐。在几乎所有场景中，托管服务比自托管服务更高效且更可靠。我们将这一原则应用于
    Kubernetes 托管服务，如 **Google Kubernetes Engine**（**GKE**）、**Azure Kubernetes Service**（**AKS**）和
    **Elastic Kubernetes Service**（**EKS**）。这一原则不仅适用于 Kubernetes，还适用于每一项基础设施服务，如数据库、对象存储、缓存以及许多其他服务。有时，托管服务可能比自托管服务可定制性差或更昂贵，但在其他所有情况下，您应该始终优先考虑托管服务。'
- en: '**Simplify**: Kubernetes is not a simple platform, either to set up or operate.
    It solves the complexity of managing internet scale workloads in a world where
    applications could scale up to serve millions of users, where cloud-native and
    microservices architectures are the chosen approach for most modern apps.'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**简化**：Kubernetes 不是一个简单的平台，无论是设置还是操作。它解决了在一个应用程序可以扩展到为数百万用户提供服务的互联网规模工作负载管理的复杂性，在这个世界中，云原生和微服务架构是大多数现代应用程序的首选方法。'
- en: For infrastructure creation and operation, we do not need to add another layer
    of complexity as the infrastructure itself is meant to be a seamless and transparent
    to the products. Organization's primary concern and focus should remain the product
    not the infrastructure.
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于基础设施的创建和操作，我们不需要增加额外的复杂性，因为基础设施本身旨在对产品透明并无缝对接。组织的主要关注点和焦点应始终是产品，而非基础设施。
- en: Here comes the simplification principle; it does not mean applying trivial solutions
    but simplifying the complex ones. This leads us to decisions such as choosing
    fewer Kubernetes clusters to operate, or avoiding multi-cloud; as long as we do
    not have a solid use case to justify it.
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这就是简化原则的作用，它并不意味着应用琐碎的解决方案，而是简化复杂的解决方案。这使我们做出像选择更少的 Kubernetes 集群进行操作，或者避免多云等决策；只要我们没有一个坚实的用例来证明其必要性。
- en: The simplification principle applies to the infrastructure features and services
    we deploy to the cluster, as it could be very attractive to add every single service
    as we think it will make a powerful and feature-rich cluster. On the contrary,
    this will end up complicating the operations and decreasing platform reliability.
    Besides, we can apply the same principle to the technology stack and tools we
    choose, as unifying the tools and technology stack across the teams is proven
    to be more efficient than having a set of inhomogeneous tools that end up hard
    to manage, and even if one of these tools is best for a specific use case, simplicity
    always pays back.
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 简化原则适用于我们部署到集群的基础设施功能和服务，因为将每个服务都加到集群中可能看起来很有吸引力，我们会认为这样可以构建一个功能强大且富有特性的集群。相反，这样做最终会使操作复杂化，并降低平台的可靠性。此外，我们也可以将同样的原则应用于我们选择的技术栈和工具，因为统一团队之间的工具和技术栈被证明比使用一套不一致的工具更高效，后者最终难以管理，即使这些工具中的某一个对特定用例来说是最佳选择，简化总是会带来回报。
- en: '**Everything as Code (XaC)**: This is the default practice for modern infrastructure
    and DevOps teams. It is a recommended approach to use declarative **infrastructure
    as code** (**IaC**) and **configuration as code** (**CaC**) tools and technologies
    over their imperative counterparts.'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**一切皆代码（XaC）**：这是现代基础设施和 DevOps 团队的默认实践。推荐的做法是使用声明式的 **基础设施即代码**（**IaC**）和
    **配置即代码**（**CaC**）工具与技术，优于它们的命令式对等工具。'
- en: '**Immutable infrastructure**: Immutability is an infrastructure provisioning
    concept and principle where we replace system components for each deployment instead
    of updating them in place. We always create immutable components from images or
    a declarative code, where we can build, test, and validate these immutable systems
    and get the same predictable results every time. Docker images and AWS EC2 AMI
    are examples of this concept.'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**不可变基础设施**：不可变性是一种基础设施配置概念和原则，在每次部署时，我们会替换系统组件，而不是在原地更新它们。我们始终通过镜像或声明式代码创建不可变组件，在这些组件上我们可以构建、测试并验证这些不可变系统，每次都能得到相同的可预测结果。Docker
    镜像和 AWS EC2 AMI 就是这一概念的例子。'
- en: This important principle leads us to achieve one of the desired characteristics
    of Kubernetes clusters, which is treating clusters as cattle instead of pets.
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个重要原则使我们能够实现 Kubernetes 集群的一个目标特性，即将集群视为牲畜而非宠物。
- en: '**Automation**: We live in the era of software automation, as we tend to automate
    everything; it is more efficient and easier to manage and scale, but we need to
    take automation with Kubernetes to a further level. Kubernetes comes to automate
    the containers'' life cycle, and it also comes with advanced automation concepts,
    such as operators and GitOps, which are efficient and can literally automate the
    automations.'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**自动化**：我们生活在一个软件自动化的时代，我们倾向于将一切自动化；这样更高效，管理和扩展也更容易，但我们需要将 Kubernetes 中的自动化提升到更高的层次。Kubernetes
    用于自动化容器生命周期管理，它还带来了先进的自动化概念，如操作员（Operators）和 GitOps，它们高效且能真正实现自动化的自动化。'
- en: '**Standardization**: Having a set of standards helps to reduce teams'' struggle
    with aligning and working together, eases the scaling of the processes, improves
    the overall quality, and increases productivity. This becomes essential for companies
    and teams planning to use Kubernetes in production, as this involves integrating
    with different infrastructure parts, migrating services from on-premises to the
    cloud, and way more complexities.'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**标准化**：拥有一套标准有助于减少团队在对齐和协作中的困难，简化流程的扩展，提升整体质量，并增加生产力。这对计划在生产环境中使用 Kubernetes
    的公司和团队来说至关重要，因为这涉及到与不同基础设施部分的集成、将服务从本地迁移到云端，以及更多的复杂性。'
- en: 'Defining your set of standards covers processes for operations runbooks and
    playbooks, as well as technology standardization as using Docker, Kubernetes,
    and standard tools across teams. These tools should have specific characteristics:
    open source but battle-tested in production, support the other principles, such
    as Infrastructure as code, immutability, being cloud-agnostic, and being simple
    to use, and deploy with minimum infrastructure.'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 定义一套标准涵盖了操作手册和执行手册的流程，以及技术标准化，例如在团队中使用 Docker、Kubernetes 和标准工具。这些工具应具备特定的特点：开源但经过生产环境验证，支持其他原则，如基础设施即代码、不变性、云中立，并且易于使用和部署，且基础设施要求最低。
- en: '**Source of truth**: Having a single source of truth is a cornerstone and an
    enabler to modern infrastructure management and configuration. Source code control
    systems such as Git are the standard choice to store and version infrastructure
    code, where having a single and dedicated source code repository for infrastructure
    is a recommended practice.'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**真实数据来源**：拥有单一的数据源是现代基础设施管理和配置的基石和推动力。源代码控制系统，如 Git，是存储和版本控制基础设施代码的标准选择，其中拥有一个专门用于基础设施的源代码仓库是一种推荐的做法。'
- en: '**Design for availability**: Kubernetes is a key enabler for the high availability
    of both the infrastructure and the application layers. Having high availability
    as a design pillar since day 1 is critical for getting the full power of Kubernetes,
    so at every design level, you should consider high availability, starting from
    the cloud and **Infrastructure as a Service** (**IaaS**) level by choosing multi-zone
    or region architecture, then going through the Kubernetes layer by designing a
    multi-master cluster, and finally, the application layer by deploying multiple
    replicas of each service.'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**设计可用性**：Kubernetes 是基础设施和应用层高可用性的关键推动力。自第一天起就将高可用性作为设计支柱，对充分发挥 Kubernetes
    的全部功能至关重要。因此，在每个设计层面，您都应考虑高可用性，从云层和**基础设施即服务**（**IaaS**）层开始，通过选择多区域或多可用区架构，然后在
    Kubernetes 层设计多主集群，最后在应用层部署每个服务的多个副本。'
- en: '**Cloud-agnostic**: Being cloud-agnostic means that you can run your workloads
    on any cloud with a minimal vendor-lock, but take care of getting obsessed with
    the idea, and make it as a goal on its own. Docker and Kubernetes are the community''s
    answer to creating and managing cloud-agnostic platforms. This principle also
    goes further to include other technologies and tool selection (think Terraform
    versus CloudFormation).'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**云中立**：云中立意味着你可以在任何云平台上运行工作负载，且尽量减少对特定供应商的依赖，但要注意不要过于痴迷于这个理念，也不要将其作为唯一目标。Docker
    和 Kubernetes 是社区应对创建和管理云中立平台的解决方案。这一原则也延伸到其他技术和工具的选择（例如 Terraform 与 CloudFormation
    的对比）。'
- en: '**Business continuity**: Public cloud with its elasticity solved one problem
    that always hindered the business continuity for the online services, especially
    when it made scaling infrastructure almost instant, which enabled small businesses
    to have the same infrastructure luxury that was previously only for the giant
    tech companies.'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**业务持续性**：公有云通过其弹性解决了一个长期困扰在线服务业务连续性的问题，特别是在几乎实现即时扩展基础设施的情况下，使得小型企业也能享受到以前只有大型科技公司才能拥有的基础设施奢侈。'
- en: However, coping with the increased scaling needs and making it real-time remains
    a challenge, and with introducing containers to deploy and run workload apps become
    easy to deploy and scale in seconds. This put the pressure back on Kubernetes
    and the underlying infrastructure layers to support such massive real-time scaling
    capabilities of the containers. You need to make a scaling decision for the future
    to support business expansion and continuity. Questions such as whether to use
    a single large cluster versus smaller multiple clusters, how to manage the infrastructure
    cost, what the nodes' right sizes are, and what the efficient resource utilization
    strategy is…all of these questions require specific answers and important decisions
    to be taken!
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然而，应对日益增长的扩展需求并实现实时性仍然是一个挑战，随着容器的引入，部署和运行工作负载应用变得可以在几秒钟内轻松部署和扩展。这将压力重新转移到了Kubernetes和底层基础设施层面，要求它们支持容器的实时扩展能力。你需要为未来做出扩展决策，以支持业务扩展和持续性。诸如是否使用单一大型集群还是多个较小集群，如何管理基础设施成本，节点的合适大小是什么，以及高效的资源利用策略是什么等问题……所有这些问题都需要具体的答案和重要的决策！
- en: '**Plan for failures**: A lot of distributed systems characteristics apply to
    Kubernetes containerized apps; specifically, fault tolerance, where we expect
    failures, and we plan for system components failures. When designing a Kubernetes
    cluster, you have to design it to survive outages and failures by using high-availability
    principles. But you also have to intentionally plan for failures. You can achieve
    this through applying chaos engineering ideas, disaster recovery solutions, infrastructure
    testing, and infrastructure CI/CD.'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**为故障做好计划**：许多分布式系统特性适用于Kubernetes容器化应用；特别是容错性，我们预期会发生故障，并为系统组件故障做出规划。在设计Kubernetes集群时，你必须使用高可用性原则来设计它，以便在发生中断和故障时依然能生存下来。但你还必须有意识地为故障做计划。你可以通过应用混沌工程思想、灾难恢复解决方案、基础设施测试和基础设施CI/CD来实现这一目标。'
- en: '**Operational efficiency**: Companies usually underestimate the effort required
    to operate containers in production – what to expect on day 2 and beyond, and
    how to get prepared for outages, cluster upgrades, backups, performance tuning,
    resource utilization, and cost control. At this phase, companies need to figure
    out how to deliver changes continuously to an increasing number of production
    and non-production environments, and without the proper operations practices,
    this could create bottlenecks and slow down the business growth, and moreover,
    lead to unreliable systems that cannot fulfill customers'' expectations. We witnessed
    successful Kubernetes production rollouts, but eventually, things fell apart because
    of operations teams and the weak practices.'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**操作效率**：公司通常低估了在生产环境中操作容器所需的努力——如何应对第二天及以后的问题，以及如何为故障、集群升级、备份、性能调优、资源利用和成本控制做好准备。在这个阶段，公司需要弄清楚如何持续交付更改到不断增加的生产和非生产环境中，如果没有适当的操作实践，这可能会造成瓶颈并减缓业务增长，更严重的是，导致系统不可靠，无法满足客户的期望。我们见证了成功的Kubernetes生产环境部署，但最终，由于运维团队和薄弱的实践，事情还是崩溃了。'
- en: These 12 principles are proven to be a common pattern for successful large scale
    cloud infrastructure rollouts. We will apply these principles through most of
    this book's chapters, and we will try to highlight each principle when we make
    a relevant technical decision based on it.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这12条原则已被证明是成功的大规模云基础设施部署的常见模式。我们将在本书的大部分章节中应用这些原则，并在做出相关技术决策时，尽量突出每一条原则。
- en: Applications definition and deployment
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用定义和部署
- en: 'Probably, a successful and efficient Kubernetes cluster will not save an application''s
    poor design and implementation. Usually, when an application does not follow containerization
    best practices and a highly available design, it will end up losing the cloud-native
    benefits provided by the underlying Kubernetes:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '**Containerization**: This is the de facto standard delivery and deployment
    form of cloud workloads. For production reliability, containerization best practices
    play a vital role. You will learn about this principle in detail over the upcoming
    chapters. Bad practices could lead to production instability and catastrophic
    outages, such as ignoring containers'' graceful shutdown and processes termination
    signals, and improper application retries to connect to dependent services.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Applications'' high availability**: This is by deploying two or more app
    replicas and making use of Kubernetes'' advanced placement techniques (node selectors,
    taints, Affinity, and labeling) to deploy the replicas into different nodes and
    availability zones, as well as defining pod disruption policies.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Application monitoring**: This is done by defining readiness and liveness
    probes with different checks, deploying **Application Performance Monitoring**
    (**APM**), and using the famous monitoring approaches, such as RED (Rate, Errors,
    and Duration), and USE (Utilization, Saturation, and Errors).'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Deployment strategy**: Kubernetes and cloud-native make deployments easier
    than ever. These frequent deployments bring benefits to the businesses, such as
    reducing time to market, faster customer feedback on new features, and increasing
    product quality overall. However, there are downsides to these as well, as frequent
    deployments could affect product reliability and uptime if you do not plan and
    manage properly. This is when defining a deployment and rollback strategy (rolling
    update, recreate, canary, blue/green, and deployment) comes in place as one of
    the best practices for application deployments.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The consideration of these four areas will ensure smooth application deployment
    and operations into the Kubernetes cluster, though further detailed technical
    decisions should be taken under each of these areas, based on your organization's
    preferences and Kubernetes use case.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Processes, team, and culture
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cloud transformation came with shocking changes to organizations' culture and
    processes, and the way they manage and operate infrastructure and applications.
    DevOps is a reflection of this deep impact of adopting the cloud mentality to
    organizations' culture, as it affected how companies do dev and ops and how their
    internal teams are organized.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: Day after another, the line between dev and ops is getting thinner, and by introducing
    Kubernetes and the cloud-native approaches DevOps teams are reshaping into a **Site
    Reliability Engineering** (**SRE**) model and also hiring dedicated platform teams,
    as both approaches consider recommended practices for structuring teams to manage
    and operate Kubernetes.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: Cloud-native approach
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Cloud Native Computing Foundation** (**CNCF**) defines cloud-native as
    scalable applications running in modern dynamic environments that use technologies
    such as containers, microservices, and declarative APIs. Kubernetes is the first
    CNCF project, and it is the world's most popular container orchestration platform.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: Cloud-native computing uses an open source and modern commercial third-party
    software stack to build, package, and deploy applications as microservices. Containers
    and container orchestrators such as Kubernetes are key elements in the cloud-native
    approach, and both are enabling achieving a cloud-native state and satisfying
    the 12-factor app methodology requirements. These techniques enable resource utilization,
    distributed system reliability, scaling, and observability, among others.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: The 12-factor app methodology
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: 'The 12-factor app methodology defines the characteristics and design aspects
    for developers and DevOps engineers building and operating software-as-a-service.
    It is tightly coupled with cloud-native architecture and methods. Find out more
    about it here: [https://12factor.net/](https://12factor.net/).'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: The Cloud Native Computing Foundation
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In 2014, Google open sourced Kubernetes, which works much like their internal
    orchestrator, Borg. Google has been using Borg in their data centers to orchestrate
    containers and workloads for many years. Later, Google partnered with the Linux
    Foundation to create CNCF, and Borg implementation was rewritten in Go, renamed
    to Kubernetes. After that, a lot of technology companies joined CNCF, including
    Google''s cloud rivals: Microsoft and Amazon.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: CNCF's purpose is building and managing platforms and solutions for modern application
    development. It supervises and coordinates the open source technologies and projects
    that support cloud-native software development, but there are also key projects
    by commercial providers.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: Why we should care about cloud-native
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'CNCF states the following:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '"Companies are realizing that they need to be a software company, even if they
    are not in the software business. For example, Airbnb is revolutionizing the hospitality
    industry and more traditional hotels are struggling to compete. Cloud native allows
    IT and software to move faster. Adopting cloud native technologies and practices
    enables companies to create software in-house, allows business people to closely
    partner with IT people, keep up with competitors and deliver better services to
    their customers. CNCF technologies enable cloud portability without vendor lock-in."'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: CNCF cloud-native recommendations and software stack are a cornerstone to high-quality
    up-to-date Kubernetes infrastructure, and this is a critical part of the production-grade
    infrastructure that we intend to deliver and operate. Following CNCF and keeping
    track of their solutions landscape is one of the best practices that Kubernetes
    platform creators and users should keep at the top of their checklists.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: Cloud-native landscape and ecosystem
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The cloud-native landscape is a combination of open source and commercial software
    projects supervised and supported by CNCF and its members. CNCF classified these
    projects according to the cloud-native functionalities and the infrastructure
    layers. Basically, the landscape has four layers:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '**Provisioning**: This layer has projects for infrastructure automation and
    configuration management, such as Ansible and Terraform, and container registry,
    such as Quay and Harbor, then security and appliance, such as Falco, TUF, and
    Aqua, and finally, key management, such as Vault.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Runtime**: This layer has projects for container runtime, such as containerd
    and CRI-O, cloud-native storage, such as Rook and Ceph, and finally, cloud-native
    networking plugins, such as CNI, Calico, and Cilium.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Orchestration and management**: This is where Kubernetes belongs as a schedular
    and orchestrator, as well as other key projects, such as CoreDNS, Istio, Envoy,
    gRPC, and KrakenD.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**App definition and development**: This layer is mainly about applications
    and their life cycle, where it covers CI/CD tools, such as Jenkins and Spinnaker,
    builds and app definition, such as Helm and Packer, and finally, distributed databases,
    streaming, and messaging.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The CNCF ecosystem provides recommendations that cover every aspect of the cloud-native
    and Kubernetes needs. Whenever applicable, we will make use of these CNCF projects to
    fulfill cluster requirements.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: Cloud-native trail map
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **cloud native trail map** is CNCF's recommended path through the cloud-native
    landscape. While this roadmap is meant for cloud-native transformations, it still
    intersects with our Kubernetes path to production, as deploying Kubernetes as
    the orchestration manager is a major milestone during this trail map.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: We have to admit that most Kubernetes users are starting their cloud transformation
    journeys or are in the middle of it, so understanding this trail map is a cornerstone
    for planning and implementing a successful Kubernetes rollout.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: 'CNCF recommends the following stages for any cloud-native transformation that
    is also supported by different projects through the cloud-native landscape:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '**Containerization**: Containers are the packaging standard for cloud-native
    applications, and this is the first stage that you should undergo to cloud-migrate
    your applications. Docker containers prove to be efficient, lightweight, and portable.'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Continuous Integration and Continuous Delivery/Deployment (CI/CD)**: CI/CD
    is the second natural step after containerizing your applications, where you automate
    building the containers images whenever there are code changes, which eases testing
    and application delivery to different environments, including development, test,
    stage, and even further to production.'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Orchestration and application definition**: Once you deploy your applications''
    containers and automate this process, you will face container life cycle management
    challenges, and you will end up creating a lot of automation scripts to handle
    containers'' restart, scaling, log management, health checks, and scheduling.
    This is where orchestrators come onto the scene; they provide these management
    services out of the box, and with orchestrators such as Kubernetes, you get far
    more container life cycle management, but also an infrastructure layer to manage
    cloud underlayers and a base for your cloud-native and microservices above it.'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Observability and analysis**: Monitoring and logging are integral parts of
    cloud-native applications; this information and metrics allow you to operate your
    systems efficiently, gain feasibility, and maintain healthy applications and **service-level
    objectives** (**SLOs**).'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Service proxy, discovery, and mesh**: In this stage, your cloud-native apps
    and services are getting complex and you will look for providing discovery services,
    DNS, advanced load balancing and routing, A/B testing, canary testing and deployments,
    rate limiting, and access control.'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Networking and policy**: Kubernetes and distributed containers networking
    models bring complexity to your infrastructure, and this creates an essential
    need for having a standard yet flexible networking standard, such as CNCF CNI.
    Therefore, you need to deploy compliant plugins such as Calico, Cilium, or Weave
    to support network policies, data filtering, and other networking requirements.'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Distributed database and storage**: The cloud-native app model is about scalability,
    and conventional databases could not match the speed of the cloud-native scaling
    requirements. This is where CNCF distributed databases fill the gap.'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Streaming and messaging**: CNCF proposes using gRPC or NATS, which provide
    higher performance than JSON-REST. gRPC is a high-performance open source RPC
    framework. NATS is a simple and secure messaging system that can run anywhere,
    from large servers and cloud instances to Edge gateways and IoT devices.'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Container registry and runtime**: A container registry is a centralized place
    to store and manage the container images. Choosing the right registry with features
    that include performance, vulnerability analysis, and access control is an essential
    stage within the cloud-native journey. Runtime is the software layer that is responsible
    for running your containers. Usually, when you start the containerization stage
    you will use a Docker runtime, but eventually, you may consider CNCF-supported
    runtimes, such as CRI-O or containerd.'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Software distribution**: **The Update Framework** (**TUF**) and its Notary
    implementation are both projects that are sponsored by CNCF, and they provide
    modern and cloud-native software distribution.'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is wise to treat the preceding cloud-native transformation stages as a recommended
    path. It is unlikely that companies will follow this roadmap rigidly; however,
    it is a great basis to kick off your cloud transformation journey.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building a production-grade and reliable Kubernetes infrastructure and clusters
    is more than just provisioning a cluster and deploying applications to it. It
    is a continuous journey that combines infrastructure and services planning, design,
    implementation, CI/CD, operations, and maintenance.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: Every aspect comes with its own set of technical decisions to make, best practices
    to follow, and challenges to overcome.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: By now, you have a brief understanding of Kubernetes infrastructure basics,
    production challenges, and readiness features. Finally, we looked at the industry
    best practices for building and managing successful Kubernetes productions and
    learned about the cloud-native approach.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn the practical details of how to design and
    architect a successful Kubernetes cluster and the related infrastructure, while
    exploring the technical and architectural decisions, choices, and alternatives
    that you need to handle when rolling out your production clusters.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can refer to the following book if you are unfamiliar with basic Kubernetes
    concepts:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '*Getting Started with Kubernetes – Third Edition*: [https://www.packtpub.com/virtualization-and-cloud/getting-started-kubernetes-third-edition](https://www.packtpub.com/virtualization-and-cloud/getting-started-kubernetes-third-edition)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL

- en: '15'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Designing Your Own Edge Computing System
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, the success of a project is not the technology – it is the way that
    you design and execute it. Edge computing systems can start as a small startup
    idea, so you can use it to reference the lean canvas business plan template to
    do the first draft of the idea that you have to create the system. But what if
    we have some similar template adapted to edge computing? This is where the Edge
    Computing System Design Canvas can help you. The idea of this diagram is to give
    you a tool to create the first draft of all the things you need to create an edge
    computing system, and you can consider the chapters of this book as building blocks
    to create your own. In this chapter, we are going to explore cloud providers that
    you can use to host your services, some best practices to take into consideration,
    software that you can explore to build your edge computing system, and other use
    cases that you can explore to create a system if it’s not covered in this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the edge computing system design canvas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using managed services from cloud providers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Existing hardware for your projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring complementary software for your system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recommendations to build your edge computing system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring additional edge computing use cases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more details, check out this resource on GitHub: [https://github.com/PacktPublishing/Edge-Computing-Systems-with-Kubernetes/tree/main/ch15](https://github.com/PacktPublishing/Edge-Computing-Systems-with-Kubernetes/tree/main/ch15)'
  prefs: []
  type: TYPE_NORMAL
- en: Using the edge computing system design canvas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The edge computing system design canvas is based on the lean canvas business
    plan template, with the idea to have a tool to help people create and organize
    their edge computing systems by filling in a sheet of paper with what they need
    to start building their systems. Let’s take a look at the different areas that
    our canvas template covers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.1 – Edge computing system design canvas'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_15_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.1 – Edge computing system design canvas
  prefs: []
  type: TYPE_NORMAL
- en: Our template covers 14 areas that you can consider while designing the systems.
    First, you have to define the purpose of the system and the features to implement.
    Then, while filling this template, you can annotate in parallel the challenges,
    people, and costs to build the system. After that, you can define whether you
    are going to use automation in your system. In this category, we can talk about
    CI/CD pipelines and versioning. Later, you have to define how to manage your data,
    in which format, and then what security practices you are going to implement.
    The last two sections include what you are going to run at the edge and what type
    of devices and sensors you will use. Finally, you have to define which parts of
    the system are going to run in the cloud, how to communicate between the edge
    and the cloud, the metrics to collect from the edge, and which metrics are going
    to persist at the edge or in the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s explore some questions that you can use to fill in this sheet of
    paper. The idea is that you must fill it in no more than 10 minutes, similar to
    how the lean canvas works.
  prefs: []
  type: TYPE_NORMAL
- en: Purpose
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you know, you have to define why you want to build this system – that is,
    the main reason for this system to exist. You can discuss the following questions
    with your team:'
  prefs: []
  type: TYPE_NORMAL
- en: What is the purpose of the system?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is it going to do?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What problem will it resolve?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here, you can list the top five features of your system. You can describe them
    in terms of the functionality of system attributes such as availability, reliability,
    and so on. Some questions that you can ask are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: What are the main features of your system?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What functionalities do these features bring to the clients?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are the unique features of this system?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Challenges
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here, you have to detect the happy paths and potential blockers to build your
    system. Some questions that you can ask are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: What are the challenges of running software at the edge or in the cloud?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What challenges will be faced when edge devices communicate with the cloud in
    the system?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can complement these questions with other ones that evaluate the level of
    complexity of other technical areas to build the system.
  prefs: []
  type: TYPE_NORMAL
- en: People
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here, you have to evaluate people that are working in the system and define
    basic skills for future hiring. You can ask questions such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: What are the necessary skills to build the systems?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How many people are necessary to build the system?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How will the project be managed? Will this be in quarters, semesters, 2-week
    sprints, or in another way?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Costs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here, you have to calculate possible costs to buy hardware, run third-party
    services, and more. You can ask questions such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: What is the cost of my devices?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the cost of my sensors?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the cost of my cloud provider?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Who are my hardware providers?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What additional costs do I have to consider?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here, you have to evaluate the automation processes and code versioning. This
    is where you can fill in all the things related to CI/CD pipelines, data pipelines,
    GitOps, testing, and more. You can ask questions such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: What process is going to be automated?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How will code versioning be implemented?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do you need CI/CD or GitOps?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How will software testing be implemented?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here, you have to define how to manage data. This includes the format, databases,
    data ingestion, storage, and more. You can ask the following questions to define
    how to manage data in your system:'
  prefs: []
  type: TYPE_NORMAL
- en: Does the system use NoSQL databases?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does the system use SQL databases?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What type of data (JSON, CSV, and so on) the system is going to use?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What characteristics does my database need? This includes high availability,
    persistence, concurrency, partition tolerance, and others. You can use the CAP
    theorem to choose the best database to fit your needs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here, you can evaluate the security of data and the services. This book doesn’t
    cover this topic in particular, but you can ask the following questions to evaluate
    some minimal aspects of security within your system:'
  prefs: []
  type: TYPE_NORMAL
- en: Which security strategies are going to be implemented in your system?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Where does data encryption need to be used in the system?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How does system authentication work in the system?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, you have to list and decide which devices are going to run
    at the edge. Here, you can find ARM devices and edge clusters. You have to decide
    which technologies you are going to use to run on your edge devices. You can ask
    the following questions to evaluate this:'
  prefs: []
  type: TYPE_NORMAL
- en: What is going to run at the edge?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which software is going to run on your devices?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does the system need a single or multi-node cluster running at the edge?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does the software run using virtual machines, containers, binaries, or something
    else?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Devices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section is related to listing the possible devices to use in your systems
    and the additional hardware that you can use with them. You can ask the following
    questions to gather an initial list of possible devices that you can use:'
  prefs: []
  type: TYPE_NORMAL
- en: What type of processor will your devices use? ARM or x86_64?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What additional hardware does my device need to use?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How will the devices be powered? Using batteries or DC?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How will the devices manage local time?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What amount of memory for your firmware and data storage will be available for
    your device?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sensors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The goal of this section is to list possible sensors and how to get data from
    them. Then, you must transform this information into metrics or variables to measure
    the environment. You can use the following questions to analyze the things related
    to sensors:'
  prefs: []
  type: TYPE_NORMAL
- en: Which sensors are you going to use?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are the sensors going to measure?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do the sensors need a source of power? What type of power do they need?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How will the sensors be calibrated?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section is designed to evaluate which parts of the system have to run
    in the cloud, what managed services you are going to use if necessary, and if
    there are third-party services that could be used to reduce and simplify the time
    implementation of your system. To evaluate this, you can ask the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: What cloud provider fits your system needs the most?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What managed services does the system need?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are there any third-party services that could be critical to use in the system?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Communication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section is the result of communicating with the edge and the cloud layer.
    This is where you will define how the layers will communicate with each other,
    which protocols you are going to use, whether the communication is in real time
    or not, and whether your devices will use special protocols to communicate with
    each other. To fill in this section, you can ask the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: How will the edge devices transfer data to the cloud?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What type of communication is going to be used to communicate with the edge
    devices and the cloud? This could be sockets, the REST API, gRPC, and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does the system use Lora, Wi-Fi, Bluetooth, Sigfox, or other protocols to communicate
    to your devices at the edge or on the cloud?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Will the communication be synchronous or asynchronous to store data?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metrics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Your sensors at the edge generate data that will be transformed into metrics
    to be shown in a dashboard. However, these metrics to be defined. The goal of
    this section is to define the metrics to use and visualize them. These metrics
    are created using the edge recollected data. To define these metrics, you can
    ask the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: What type of metrics is the system going to collect? Golden metrics, weather
    metrics, or something else?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which metrics will be generated and used in the system? This can include latency,
    temperature, speed, and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How is the system going to visualize the collected data?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is the system going to use dashboard software to visualize data, such as Grafana
    or similar?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Please use the different chapters of this book as building blocks to create
    your system. You can use the templates at [https://github.com/PacktPublishing/Edge-Computing-Systems-with-Kubernetes/blob/main/ch15/docs/EdgeComputingSystemDesignCanvas.pdf](https://github.com/PacktPublishing/Edge-Computing-Systems-with-Kubernetes/blob/main/ch15/docs/EdgeComputingSystemDesignCanvas.pdf)
    that are ready to print and design your edge computing system. Now, it’s time
    to look at the relevant managed services from the top three cloud providers.
  prefs: []
  type: TYPE_NORMAL
- en: Using managed services from cloud providers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is important to choose the right cloud provider. Several cloud providers
    are available, but the top three are **Amazon Web Services** (**AWS**), Google
    Cloud, and Azure. Let’s look at the different managed services that you can use
    with these cloud providers:'
  prefs: []
  type: TYPE_NORMAL
- en: '**AWS**: You can use virtual machines with EC2 and Graviton 2 ARM instances
    to test software that you will run at the edge. Fargate is a service that you
    can use to deploy applications in containers. It provides several options. For
    instance, you can scale the service automatically, something similar to what Kubernetes
    does. **Elastic Kubernetes Service** (**EKS**) is the managed service of AWS for
    Kubernetes. It’s a very strong solution for EKS, but compared to other services,
    you have to do more manual steps for certain tasks, such as scaling the solution.
    Talking about databases, you can use Aurora as a MySQL or Postgres instance. You
    can use other managed services based on Redis or Elastic Cache. For file storage,
    you can use S3 services. Finally, for complete serverless solutions, you can deploy
    Lambda functions, which run small portions of code on demand. AWS also has an
    IoT platform to connect devices running at the edge. AWS offers some certified
    devices to work with its platform. The official website is [https://aws.amazon.com](https://aws.amazon.com).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google Cloud**: This cloud provider includes virtual machines, which are
    the same as AWS EC2 instances. This service is part of the Compute Engine services
    called VM instances. Google Cloud also offers ARM instances via the Tau instance
    type. It provides the Cloud Run service, which runs containers, and **Google Kubernetes
    Engine** (**GKE**), which is a Kubernetes-managed service that is simpler to manage
    than EKS, and it’s a much more stable solution. For databases, you can use Memory
    Store, a self-managed Redis service, and Cloud SQL, which is similar to AWS Aurora.
    However, in terms of databases, Google has less prebuild options than AWS, though
    it works pretty similarly. It can run as MySQL, Postgres, and SQL server. It has
    its own way to manage storage using cloud storage and works similar to S3 by using
    buckets to store information. Finally, it also has a serverless capability with
    Cloud Functions, which are similar to AWS Lambda. One of the main differences
    in Google Cloud is that its service definitions are compatible with open source
    projects. For example, Flask is compatible with Cloud Functions, and Cloud Run
    is compatible in some way with Knative. One of the major advantages of using Google
    Cloud is its compatibility with open source projects. Google Cloud also has its
    own IoT solution, similar to AWS, but it also works with some open source hardware
    and devices, such as Coral USB Accelerators or the Coral Dev Board. The official
    website can be found at [https://cloud.google.com](https://cloud.google.com).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure**: This feels like a combination of AWS and Google Cloud and provides
    similar tools. It has virtual machines services, and it also supports ARM processors
    with the Dpsv5 and Epsv5 instances. It also has **Azure Kubernetes Service** (**AKS**),
    which is the managed Kubernetes service for Azure. AKS has some disabled features
    that are a little bit complicated to configure, even with the correct configuration,
    so it feels less mature compared to AWS and Google Cloud. It is also a little
    bit more expensive, but it depends on the quantity and size of cluster nodes that
    your system needs. AKS is less mature than AWS and Google Kubernetes managed services.
    Azure also has Azure Container Instances, which are used to run containers such
    as AWS Fargate and Google Cloud Run. For databases, it offers Azure Cosmos DB,
    which provides a database-managed service such as AWS Aurora or Google Cloud SQL.
    This database offers compatibility with Cassandra, SQL Server, MongoDB, and Gremlin,
    which is similar to Neo4J. Cosmos DB is more like the NoSQL version of Aurora
    and Cloud SQL. It also has an enterprise Redis service by default. Talking about
    serverless functions, it provides Azure Functions, which support languages such
    as Python and TypeScript, and some proprietary languages owned by Microsoft such
    as C# and PowerShell scripting. Azure in the context of IoT has more options to
    connect your devices and has a lot of certified hardware designed to run with
    Azure. It feels like this platform is frequently innovating. The official website
    can be found at [https://azure.microsoft.com](https://azure.microsoft.com).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For this specific kind of book, you can also consider the **Civo** cloud, which
    provides a managed K3s service that you can use to play around with K3s. The official
    website can be found at [https://www.civo.com](https://www.civo.com).
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: Take a look at the official website of each cloud provider for updates about
    their current services.
  prefs: []
  type: TYPE_NORMAL
- en: 'All this information was just a brief introduction to what these cloud providers
    offer, so not all the facilities of each cloud provider have been covered. Maybe
    you are thinking about who the best cloud provider is. The answer depends on what
    you prefer for certain solutions because of current service contracts, previous
    software adoption, and so on. Some cloud provider services are better in some
    situations than others, and your team will have to spend some time evaluating
    this. The cost of a service can change depending on the size of the services on
    each cloud provider. To help with your decision, you can think about the following
    questions:'
  prefs: []
  type: TYPE_NORMAL
- en: Is the managed services price of the provider fair to substitute for a self-managed
    service that the system is planning to use?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is the learning curve of the managed service adoption worthwhile and will it
    affect the deadline of the project?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does the cloud provider include the majority of services that need to be implemented
    in the system without using another cloud provider?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does the cloud provider include support and good documentation to use their
    services?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does the adoption of the selected cloud provider allow you to keep running your
    applications without you having to make many modifications to the source code
    of your application?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are some questions that you can ask the team of your project, and they
    could act as a good starting point to evaluate a cloud provider. Now, let’s explore
    some hardware that you can use in your edge computing systems.
  prefs: []
  type: TYPE_NORMAL
- en: Existing hardware for your projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There is plenty of hardware that you can use for your edge computing projects.
    Let’s look at a small list of hardware that you can use for your projects. The
    following list includes microcomputers such as the Raspberry Pi and microcontrollers
    such as Arduino:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Coral Dev Board**: This is a board designed by Google that uses the Coral
    Accelerator to run ML applications. It is a reasonable size and provides processing
    power to run machine learning applications. For more information, check out [https://coral.ai/products/dev-board](https://coral.ai/products/dev-board).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rock Pi**: This device is similar to a Raspberry Pi but includes a Mali GPU,
    which can be used to process machine learning applications. It also has other
    board versions that you can use to run at the edge. For more information, check
    out [https://rockpi.org](https://rockpi.org).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pine64**: This is a community platform that creates boards that have ARM
    processors. It also has another product that can be used at the edge, similar
    to the Raspberry Pi. For more information, check out [https://www.pine64.org](https://www.pine64.org).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ESP32**: This is a commonly used microcontroller that you can program to
    read information with sensors at the edge. There are plenty of distributors with
    a lot of variations of the ESP32 that already integrate sensors. For more information,
    check out [https://heltec.org/proudct_center/esp-arduino](https://heltec.org/proudct_center/esp-arduino).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MicroPython**: This board is designed to run Python. It has a lot of features
    that can be used to quickly prototype a device to capture data at the edge. For
    more information, check out [https://micropython.org](https://micropython.org).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NVIDIA Jetson Nano**: This device is designed by NVIDIA and has a powerful
    GPU. It has a lot of power to run processes and it could be a good option for
    running intensive tasks, including machine learning. For more information, check
    out [https://developer.nvidia.com/embedded/jetson-nano-developer-kit](https://developer.nvidia.com/embedded/jetson-nano-developer-kit).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that there are devices that could just be used to prototype a solution,
    though it is not recommended to run them in a production scenario. Check out the
    *Further reading* section to find other devices. Now, let’s explore some complementary
    software that you can use at the edge to create your system.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring complementary software for your system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are other pieces of software that you can use if some of the examples
    in this book don’t fit your system needs. Some examples are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Crossplane**: This is used to deploy infrastructure using Kubernetes. Crossplane
    can give you the abstraction to do this. For more information, check out [https://crossplane.io](https://crossplane.io).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Thanos**: This is a Prometheus cluster that you can use to scale your Prometheus
    services. For more information, check out [https://thanos.io](https://thanos.io).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Argo**: This is a whole ecosystem that you can use to implement GitOps, workflows,
    and event management. It is a powerful piece of software. Argo can also run on
    ARM devices. For more information, check out [https://argoproj.github.io](https://argoproj.github.io).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Containerd**: If K3s is too big for your solution, then you may wish to use
    containers. Containerd can give you this abstraction without extra services. For
    more information, check out [https://containerd.io](https://containerd.io).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rancher**: This is a Kubernetes distribution that you can use to manage all
    your clusters at the edge so that you can have a single dashboard application
    to manage and monitor all your clusters in a single place. For more information,
    check out [https://rancher.com](https://rancher.com).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**KubeSphere**: This is similar to Rancher but has a different approach so
    that it’s more developer-friendly; Racher is more operations-friendly. For more
    information, check out [https://kubesphere.io](https://kubesphere.io).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OpenEBS**: This is an alternative to Longhorn that has pretty good support
    and options for storage. For more information, check out [https://openebs.io](https://openebs.io).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**KubeEdge**: This is a modification of K3s that’s used to distribute your
    nodes across the cloud and the edge. It also supports MQTT protocols. For more
    information, check out [https://kubeedge.io](https://kubeedge.io).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Akri**: This is a Kubernetes resource interface that can easily expose your
    devices in the tiny edge, such as cameras or USB devices, as resources in a Kubernetes
    cluster. For more information, check out [https://docs.akri.sh](https://docs.akri.sh).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can also explore the graduated, incubated, and sandbox projects of CNCF
    at [https://www.cncf.io](https://www.cncf.io) and the landscape at [https://landscape.cncf.io](https://landscape.cncf.io)
    to explore more options that you can add to your project. Now, let’s continue
    with some useful recommendations when creating your system.
  prefs: []
  type: TYPE_NORMAL
- en: Recommendations to build your edge computing system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here is a list of recommendations that you can consider when designing your
    edge computing system:'
  prefs: []
  type: TYPE_NORMAL
- en: Take your time when designing the system. You can do this on paper, which will
    save you a lot of time when building your system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Measure the progress of building your system. Without measure, there is no pressure.
    You can use the Scrum and Kanban agile methodologies to manage the progress of
    your project. It’s very important to plan.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Invest time in making a **proof of concept** (**POC**) after deciding which
    technology, cloud provider, or a third party you will use. This will be critical
    to have a constant process when building your system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Invest time in documentation. This is the only way you don’t lose knowledge
    if someone has left the job.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Version the code of your projects. This is a healthy best practice to ensure
    you don’t lose important code in your project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use encryption. Evaluate the places where you can find sensible data in the
    system and encrypt it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use secrets as a general rule. This book contains a lot of examples that don’t
    use secrets to simplify the examples. However, in a real-world scenario, using
    secrets is a must.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Think as a hacker. Sometimes, you have to think about the worst-case scenarios
    to consider how people can steal your information.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Invest in professionals with experience but don’t forget newbies. When hiring
    people for the project, pay attention to the experience that someone in the team
    can give you but remember that the youngest talents could have innovative ideas.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With that, you have a set of recommendations for building an edge computing
    system. Next, let’s explore other use cases for edge computing.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring additional edge computing use cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To finalize this book, here are some use cases that you can explore and implement
    using edge computing technologies:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Healthcare**: In this system, data could be processed or analyzed locally.
    Sometimes, this information could be processed using artificial intelligence.
    This system can integrate local sensors and process information at the edge.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Industry 4.0**: This is related to the use of edge computing and IoT for
    manufacturing processes, where you can process information at the edge with ARM
    devices to reduce latency when interconnecting systems and data processing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Autonomous vehicles**: This industry is constantly growing with the emerging
    market of electric cars. This use case employs cameras, augmented reality, and
    computer vision with the goal of cars driving autonomously.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Gaming**: This use case focuses on sharing the processing between the cloud
    and high-end user devices such as consoles to reduce the lag of video games.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security**: In security use cases, cameras could be used for monitoring and
    detecting dangerous behaviors in people or to prevent robberies. These kinds of
    systems usually use object detection and artificial intelligence for this purpose.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Agriculture**: This could be applied to smart farms or gardens, to monitor
    plants and perform actions such as watering. This use case has some contact with
    IoT technologies and long-distance protocols such as LoRa.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Smart cities**: This use case has a lot of applications, such as smart traffic,
    which consists of monitoring traffic and its safety, thus improving the traffic
    flow in a city.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Logistics**: This use case improves the delivery time of packages, optimizes
    delivery routes and fuel consumption, and so on. This could present a competitive
    advantage for companies in the market.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are plenty of other use cases that you can explore. Check out the *Further
    reading* section for more information. Now, let’s summarize what we have learned
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about some complementary content for designing and
    implementing edge computing systems. First, we covered an edge computing system
    design canvas and asked some useful questions that could be used to quickly start
    designing your system. After that, we explored the top cloud providers with managed
    services that can be used with edge computing systems and some hardware that can
    be used for this purpose. Finally, we looked at some complementary software to
    use as recommendations and other use cases to explore. With all this information,
    you can organize and quickly start building an edge computing system. This content
    could be useful for organizing all the ideas behind your edge computing systems.
    Thank for reading this book – I hope you enjoyed it.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are a few questions to validate your new knowledge:'
  prefs: []
  type: TYPE_NORMAL
- en: How can you use the edge computing systems design canvas to design an edge computing
    system?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What cloud providers can you use to complement your system?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What complementary software or hardware you can use to build your system?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What other use cases can be implemented with edge computing?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Please refer to the following references for more information on the topics
    covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Cloud Native Computing Foundation: [https://www.cncf.io](https://www.cncf.io)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Azure Certified Device catalog: [https://devicecatalog.azure.com](https://devicecatalog.azure.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Azure IoT developer Kit: [https://microsoft.github.io/azure-iot-developer-kit](https://microsoft.github.io/azure-iot-developer-kit)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Adafruit: [https://www.adafruit.com](https://www.adafruit.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'M5stack electronics store: [https://shop.m5stack.com/collections](https://shop.m5stack.com/collections)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'EMQX, The Most Scalable MQTT Broker for IoT: [https://www.emqx.io](https://www.emqx.io)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Seeed Studio IoT store: [https://www.seeedstudio.com](https://www.seeedstudio.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '12 Real-Life Edge Computing Use Cases: [https://www.scitechsociety.com/12-real-life-edge-computing-use-cases](https://www.scitechsociety.com/12-real-life-edge-computing-use-cases)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Edge Analytics in Transportation and Logistics Space: A Case Study: [https://www.skillsire.com/read-blog/174_edge-analytics-in-transportation-and-logistics-space-a-case-study.html](https://www.skillsire.com/read-blog/174_edge-analytics-in-transportation-and-logistics-space-a-case-study.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'How Kubernetes is shaping the future of cars: [https://thechief.io/c/editorial/how-kubernetes-is-shaping-the-future-of-cars](https://thechief.io/c/editorial/how-kubernetes-is-shaping-the-future-of-cars)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Edge Use Cases for Retail, Warehousing, and Logistics: [https://stlpartners.com/articles/edge-computing/edge-use-cases-for-retail-warehousing-and-logistics](https://stlpartners.com/articles/edge-computing/edge-use-cases-for-retail-warehousing-and-logistics)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Edge Computing Use Cases Driving Innovation: [https://www.section.io/blog/edge-compute-use-cases](https://www.section.io/blog/edge-compute-use-cases)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'IoT vs. Edge Computing: What’s the difference: [https://developer.ibm.com/articles/iot-vs-edge-computing](https://developer.ibm.com/articles/iot-vs-edge-computing)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL

["```\n    echo https://my-url-location.topsecret.com \\\n      > secreturl.txt\n    ```", "```\n    echo 'superSecretToken' > secrettoken.txt\n    ```", "```\n    kubectl create secret generic myapi-url-token \\\n      --from-file=./secreturl.txt --from-file=./secrettoken.txt\n    ```", "```\n    kubectl get secrets\n    ```", "```\n    kubectl describe secrets myapi-url-token\n    ```", "```\n    kubectl get -o yaml secrets/myapi-url-token\n    ```", "```\n    echo 'c3VwZXJTZWNyZXRUb2tlbgo=' | base64 -d\n    echo 'aHR0cHM6Ly9teS1zZWNyZXQtdXJsLWxvY2F0aW9uLnRvcHNlY3JldC5jb20K'| base64 -d\n    ```", "```\n    echo 'superSecretToken' | base64\n    ```", "```\n    c3VwZXJTZWNyZXRUb2tlbgo=\n    ```", "```\n    echo 'https://my-secret-url-location.topsecret.com' | base64\n    ```", "```\n    aHR0cHM6Ly9teS1zZWNyZXQtdXJsLWxvY2F0aW9uLnRvcHNlY3JldC5jb20K\n    ```", "```\n    1   apiVersion: v1\n    2   kind: Secret\n    3   metadata:\n    4     name: myapiurltoken-yaml\n    5   type: Opaque\n    6   data:\n    7     url: aHR0cHM6Ly9teS1zZWNyZXQtdXJsLWxvY2F0aW9uLnRvcHNlY3JldC5jb20K\n    8     token: c3VwZXJTZWNyZXRUb2tlbgo=\n    ```", "```\n    kubectl create -f myfirstsecret.yaml\n    ```", "```\n    kubectl get secrets\n    ```", "```\n    kubectl create secret generic myapiurltoken-literal \\\n      --from-literal=token='superSecretToken' \\\n      --from-literal=url=https://my-secret-url-location.topsecret.com\n    ```", "```\n    kubectl get secrets\n    ```", "```\n    1   apiVersion: v1\n    2   kind: Pod\n    3   metadata:\n    4     name: secret-using-env\n    5   spec:\n    6     containers:\n    7     - name: nginx\n    8       image: nginx\n    9       env:\n    10        - name: SECRET_URL\n    11          valueFrom:\n    12            secretKeyRef:\n    13              name: myapi-url-token\n    14              key: secreturl.txt\n    15        - name: SECRET_TOKEN\n    16          valueFrom:\n    17            secretKeyRef:\n    18              name: myapi-url-token\n    19              key: secrettoken.txt\n    20    restartPolicy: Never\n    ```", "```\n    kubectl create -f pod-with-env-secrets.yaml\n    ```", "```\n    kubectl exec -it secret-using-env -- sh\n    echo $SECRET_URL\n    echo $SECRET_TOKEN\n    ```", "```\n    1   apiVersion: v1\n    2   kind: Pod\n    3   metadata:\n    4     name: secret-using-volume\n    5   spec:\n    6     containers:\n    7     - name: nginx\n    8       image: nginx\n    9       volumeMounts:\n    10      - name: secretvolume\n    11        mountPath: \"/etc/secrets\"\n    12        readOnly: true\n    13    volumes:\n    14    - name: secretvolume\n    15      secret:\n    16        secretName: myapi-url-token\n    ```", "```\n        kubectl create -f pod-with-vol-secret.yaml\n        ```", "```\n        kubectl exec -it secret-using-volume -- sh\n        cd /etc/secrets/\n        cat secreturl.txt\n        cat secrettoken.txt\n        ```", "```\n    kubectl describe pod secret-using-env | grep Node\n    ```", "```\n    kubectl describe pod secret-using-env | grep 'Container ID'\n    ```", "```\n    INSTANCE=<provide instance number>\n    DOCKERID=<provide Docker ID>\n    VMSS=$(az vmss list --query '[].name' -o tsv)\n    RGNAME=$(az vmss list --query '[].resourceGroup' -o tsv)\n    ```", "```\n    az vmss run-command invoke -g $RGNAME -n $VMSS --command-id \\\n    RunShellScript --instance-id $INSTANCE --scripts \\\n    \"docker inspect -f '{{ .Config.Env }}' $DOCKERID\" \\\n    -o yaml | grep SECRET\n    ```", "```\naz vmss run-command invoke -g $RGNAME -n $VMSS --command-id \\\nRunShellScript --instance-id $INSTANCE --scripts \\\n\"crictl inspect --output yaml $DOCKERID\" \\\n-o yaml | grep SECRET\n```", "```\nkubectl delete pod --all\nkubectl delete secret myapi-url-token \\\nmyapiurltoken-literal myapiurltoken-yaml\n```", "```\n    az aks pod-identity add --resource-group rg-handsonaks \\\n      --cluster-name handsonaks --namespace default \\\n      --name csi-to-key-vault \\\n      --identity-resource-id <Managed identity resource ID>\n    ```", "```\n    kubectl get azureidentity\n    ```", "```\n    helm repo add csi-secrets-store-provider-azure \\\n      https://raw.githubusercontent.com/Azure/secrets-store-csi-driver-provider-azure/master/charts\n    ```", "```\n    helm install csi-secrets \\\n      csi-secrets-store-provider-azure/csi-secrets-store-provider-azure\n    ```", "```\n    kubectl get crd\n    ```", "```\n    az account show --query tenantId\n    ```", "```\n    1   apiVersion: secrets-store.csi.x-k8s.io/v1alpha1\n    2   kind: SecretProviderClass\n    3   metadata:\n    4     name: key-vault-secret-file\n    5   spec:\n    6     provider: azure\n    7     parameters:\n    8       usePodIdentity: \"true\"\n    9       keyvaultName: \"<key vault name>\"\n    10      objects:  |\n    11        array:\n    12          - |\n    13            objectName: k8s-secret-demo\n    14            objectType: secret        \n    15      tenantId: \"<your tenant ID>\"\n    ```", "```\n    kubectl create -f secretproviderclass-file.yaml\n    ```", "```\n    1   kind: Pod\n    2   apiVersion: v1\n    3   metadata:\n    4     name: csi-demo-file\n    5     labels:\n    6       aadpodidbinding: \"csi-to-key-vault\"\n    7   spec:\n    8     containers:\n    9       - name: nginx\n    10        image: nginx\n    11        volumeMounts:\n    12        - name: keyvault\n    13          mountPath: \"/mnt/secrets-store\"\n    14          readOnly: true\n    15    volumes:\n    16      - name: keyvault\n    17        csi:\n    18          driver: secrets-store.csi.k8s.io\n    19          readOnly: true\n    20          volumeAttributes:\n    21            secretProviderClass: \"key-vault-secret-file\"\n    ```", "```\n    kubectl create -f pod-keyvault-file.yaml\n    ```", "```\n    kubectl get pods -w\n    ```", "```\n    kubectl exec -it csi-demo-file -- sh\n    cd /mnt/secrets-store\n    cat k8s-secret-demo\n    ```", "```\n    1   apiVersion: secrets-store.csi.x-k8s.io/v1alpha1\n    2   kind: SecretProviderClass\n    3   metadata:\n    4     name: key-vault-secret-env\n    5   spec:\n    6     provider: azure\n    7     parameters:\n    8       usePodIdentity: \"true\"\n    9       keyvaultName: \"<key vault name>\"\n    10      objects:  |\n    11        array:\n    12          - |\n    13            objectName: k8s-secret-demo\n    14            objectType: secret\n    15      tenantId: \"<tenant ID>\"\n    16    secretObjects:\n    17    - secretName: key-vault-secret\n    18      type: Opaque\n    19      data:\n    20      - objectName: k8s-secret-demo\n    21        key: secret-content \n    ```", "```\n    kubectl create -f secretproviderclass-env.yaml\n    ```", "```\n    1   apiVersion: v1\n    2   kind: Pod\n    3   metadata:\n    4     name: csi-demo-env\n    5     labels:\n    6       aadpodidbinding: \"csi-to-key-vault\"\n    7   spec:\n    8     containers:\n    9     - name: nginx\n    10      image: nginx\n    11      env:\n    12        - name: KEYVAULT_SECRET\n    13          valueFrom:\n    14            secretKeyRef:\n    15              name: key-vault-secret\n    16              key: secret-content\n    17      volumeMounts:\n    18        - name: keyvault\n    19          mountPath: \"/mnt/secrets-store\"\n    20          readOnly: true\n    21    volumes:\n    22      - name: keyvault\n    23        csi:\n    24          driver: secrets-store.csi.k8s.io\n    25          readOnly: true\n    26          volumeAttributes:\n    27            secretProviderClass: \"key-vault-secret-env\" \n    ```", "```\n    kubectl create -f pod-keyvault-env.yaml\n    ```", "```\n    kubectl get pods -w\n    ```", "```\n    kubectl exec -it csi-demo-env -- sh\n    echo $KEYVAULT_SECRET\n    ```", "```\n    kubectl get secret\n    ```", "```\n    kubectl delete -f pod-keyvault-env.yaml\n    kubectl get secret\n    ```", "```\nkubectl delete -f .\nhelm delete csi-secrets\naz aks pod-identity delete --resource-group rg-handsonaks \\\n  --cluster-name handsonaks --namespace default \\\n  --name csi-to-key-vault \naz group delete -n csi-key-vault --yes\n```"]
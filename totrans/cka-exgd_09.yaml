- en: '9'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Troubleshooting Cluster Components and Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Troubleshooting is one of the main tasks performed during your daily work as
    a Kubernetes administrator. This chapter introduces the general approaches to
    troubleshooting errors caused by cluster component failure and the issues that
    can occur during application deployments.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes troubleshooting general practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Troubleshooting cluster components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Troubleshooting applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get started, we need to make sure our local machine meets the technical requirements
    described as follows.
  prefs: []
  type: TYPE_NORMAL
- en: 'In case you’re on Linux, see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A compatible Linux host. We recommend a Debian-based Linux distribution such
    as Ubuntu 18.04 or later.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure your host machine has at least 2 GB RAM, 2 CPU cores, and about 20
    GB of free disk space.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In case you’re on Windows 10 or Windows 11, see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We recommend updating Docker Desktop to the latest version and creating a Docker
    Desktop local Kubernetes cluster. Check out this article to learn about how to
    set up a local Kubernetes cluster with Docker Desktop: [https://docs.docker.com/desktop/kubernetes/](https://docs.docker.com/desktop/kubernetes/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We also recommend using **Windows Subsystem for Linux 2** (**WSL 2**) to test
    the environment. Refer to this article to see how to install WSL ([https://docs.microsoft.com/en-us/windows/wsl/install](https://docs.microsoft.com/en-us/windows/wsl/install))
    and the following article to see how to set up the Docker Desktop WSL 2 backend:
    [https://docs.docker.com/desktop/windows/wsl/](https://docs.docker.com/desktop/windows/wsl/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once you’re set up, you can check whether you’re currently set to the correct
    Kubernetes cluster using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will print out the current cluster in the output. In
    our case, it was similar to the following, as we’re on Windows with a Kubernetes
    local cluster created by Docker Desktop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If you’ve been following our demonstration along the way in this book, you’ll
    have noticed that most of the demonstration was on a `minikube` cluster. In this
    case, the output would be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You may have used your local machine to connect with a few different Kubernetes
    clusters – you can use `kubectl config view` to check which is the current cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.1 – Local cluster context information  ](img/Figure_9.01_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.1 – Local cluster context information
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about how to organize cluster access using `kubeconfig` and how
    to configure access to multiple clusters, refer to [*Chapter 6*](B18201_06.xhtml#_idTextAnchor192),
    *Securing Kubernetes*.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will use `docker-desktop` to understand how to troubleshoot
    local Kubernetes clusters. Note that the same set of commands is also applied
    to `minikube`. Let’s start by talking about the general practice of Kubernetes
    troubleshooting.
  prefs: []
  type: TYPE_NORMAL
- en: General practices in Kubernetes troubleshooting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have talked about the common tasks performed as a part of the daily job as
    a Kubernetes administrator a lot in this book, especially in the previous chapters.
    In real life, upon the stage of the project that you’re involved in, a Kubernetes
    administrator is likely to be involved in the installation and set-up of Kubernetes
    cluster phase, applications deployment, and managing the security and networking
    aspects of things for Kubernetes. In addition to the aforementioned tasks, operating
    and maintaining Kubernetes clusters and applications deployed on the cluster also
    form some of the key responsibilities of a Kubernetes administrator. Therefore,
    acquiring good troubleshooting skills will greatly help in this scenario.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting Kubernetes clusters is a combination of identifying, diagnosing,
    and remediating an issue – the problem statement covers Kubernetes cluster components,
    nodes, networking, and security. Additionally, the problem statement also covers
    the application level, such as pods, or even the container level. We’ll cover
    troubleshooting Kubernetes cluster components and the application level, including
    pods and containers, in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s important to take an outside-in approach and gradually narrow down the
    scope to identify the root cause of an issue. This means we can rationalize the
    process using the following recommendations:'
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring plays a vital role in identifying potential problems and finding
    their root causes. In [*Chapter 8*](B18201_08.xhtml#_idTextAnchor293), *Monitoring
    and Logging Kubernetes Clusters and Applications*, we covered how to monitor Kubernetes
    cluster components, as well as applications, together with the instructions about
    logging, which helps you make your first steps.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metrics analysis is the first step shortly after you detect a potential issue.
    Although sometimes the problem statements may not be as they seem, you can make
    the troubleshooting easier by starting with analyzing metrics from the cluster
    and node level to get a high-level view, then moving down to the application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sometimes, metrics may not tell you the whole story. In this case, analyzing
    the logs will help you piece the information together better. At this point, if
    you find that you have a better idea about the issue that occurred, it’s about
    time to dive deep into those logs and find the root cause, as compared to the
    one you thought was the culprit. However, it’s still a good idea to go back one
    level higher to see whether anything in the process was missing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you have found the issue, an actionable remediation plan is required if
    you want to prevent the issue from ever happening again, rather than just applying
    a quick fix to the issue. This step will contribute to your future success and
    make your daily job much easier. Maintenance and troubleshooting work becomes
    a daily operation task after the initial setup – it is a key component of your
    daily job as a Kubernetes administrator.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the actual CKA exam, troubleshooting holds more weight and some of the given
    scenarios are quite time-consuming, as it is usually stressful to find the root
    cause within a limited time window. However, as a candidate, you can confidently
    plan your time ahead once you’re certain about the fact that you have done an
    overall great job with the other high-value questions, such as the ones about
    application deployment, networking, and backup etcd storage. The troubleshooting
    exam questions usually appear in the second half of the CKA exam – you can usually
    start by analyzing the Kubernetes cluster components. There is a higher chance
    the questions will be about `kubelet` on the worker node and then escalate to
    the application level. Be mindful of performing the troubleshooting and fixing
    the issue on the correct node before moving on.
  prefs: []
  type: TYPE_NORMAL
- en: Based on the aforementioned outside-in approach, let’s talk about troubleshooting
    the cluster component first.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting cluster components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Troubleshooting cluster components includes the Kubernetes system processes
    on the master node and worker node. We’ll take a look at some common troubleshooting
    scenarios in this section and will be starting from a higher-level view.
  prefs: []
  type: TYPE_NORMAL
- en: Inspecting the cluster
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Inspecting the cluster and node is usually the first step toward detecting
    the issues on the control plane. We can do that using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The output renders the addresses of the control plane components and services:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.2 – Rendering the cluster information  ](img/Figure_9.02_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.2 – Rendering the cluster information
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want further information for debugging and diagnosis, use the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command gives an output that is huge and contains a lot of information
    – hence, we’ve only displayed the key part in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.3 – The Kubernetes cluster logs ](img/Figure_9.03_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.3 – The Kubernetes cluster logs
  prefs: []
  type: TYPE_NORMAL
- en: The preceding screenshot shows the log information and is very helpful for finding
    the root causes. Although we could get good information out of the control plane
    and cluster logs, you’ll get errors for the workloads running on top of it quite
    often, which can happen because of the node availability or capability. Let’s
    take a look at troubleshooting approaches with the node in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Inspecting the node
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Inspecting the node using the following command will help you get the current
    state of your current cluster and nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.4 – The Kubernetes node information  ](img/Figure_9.04_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.4 – The Kubernetes node information
  prefs: []
  type: TYPE_NORMAL
- en: The preceding screenshot shows that the only worker node that we have here is
    in the `Ready` status. When you have multiple nodes, you will see a list of nodes
    in the output.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `ROLES` column shows the role of your node – it could be a `control-plane`,
    `etcd`, or `worker`:'
  prefs: []
  type: TYPE_NORMAL
- en: The `control-plane` role runs the Kubernetes master components, besides `etcd`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `etcd` role runs the etcd store. Refer to [*Chapter 3*](B18201_03.xhtml#_idTextAnchor059),
    *Maintaining Kubernetes Clusters*, to learn more about the etcd store.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `worker` role runs the Kubernetes worker node – that’s where your containerized
    workloads land.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `STATUS` column shows the current condition of the running nodes – the
    ideal status that we all love is `Ready`. Examples of the possible conditions
    are listed in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Node condition** | **What does that mean?** |'
  prefs: []
  type: TYPE_TB
- en: '| `Ready` | The node is healthy and ready to accept pods. |'
  prefs: []
  type: TYPE_TB
- en: '| `DiskPressure` | The disk capacity is low. |'
  prefs: []
  type: TYPE_TB
- en: '| `MemoryPressure` | The node memory is low. |'
  prefs: []
  type: TYPE_TB
- en: '| `PIDPressure` | Too many processes are running on the node. |'
  prefs: []
  type: TYPE_TB
- en: '| `NetworkUnavailable` | The networking is incorrectly configured. |'
  prefs: []
  type: TYPE_TB
- en: '| `SchedulingDisabled` | This is not a condition in the Kubernetes API but
    it appears after you cordon a node. Refer to [*Chapter 3*](B18201_03.xhtml#_idTextAnchor059),
    *Maintaining Kubernetes Clusters*, to learn about how to perform a version upgrade
    on a Kubernetes cluster using `kubeadm` when you need to cordon the nodes. |'
  prefs: []
  type: TYPE_TB
- en: Table 9.1 - Different node conditions and what they mean
  prefs: []
  type: TYPE_NORMAL
- en: Another column that is very interesting from the aforementioned output is the
    `VERSION` column – this one shows the Kubernetes version running on this node.
    Kubernetes versions here mean the Kubernetes master components version, the etcd
    version, or `kubelet` version, vary from node role to node role. Refer to [*Chapter
    3*](B18201_03.xhtml#_idTextAnchor059), *Maintaining Kubernetes Clusters*, to learn
    about upgrading versions on the Kubernetes nodes.
  prefs: []
  type: TYPE_NORMAL
- en: 'In case you do have suspicions about the node, you can use the following command
    to inspect the node information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be similar to the following. As you can see, you can get
    more detailed information from this as compared to the `kubectl get node` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.5 – The kubectl describe node output information  ](img/Figure_9.05_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.5 – The kubectl describe node output information
  prefs: []
  type: TYPE_NORMAL
- en: 'To get the most value out of the preceding command, we could check out the
    `Conditions` section, which should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.6 – Getting the node condition information ](img/Figure_9.06_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.6 – Getting the node condition information
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding screenshots show the detailed node condition information, as
    we explained earlier in this chapter. It is also possible to get the allocated
    resource information from the same output, which shows the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.7 – Getting the node resource consumption information ](img/Figure_9.07_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.7 – Getting the node resource consumption information
  prefs: []
  type: TYPE_NORMAL
- en: The value from the preceding screenshot is to understand the current consumption
    of the cluster in terms of CPU, memory, and storage.
  prefs: []
  type: TYPE_NORMAL
- en: 'The same output also helps you get an overview of the resource requests and
    limits from the individual pods running in the current cluster, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.8 – Get the pod resource consumption information ](img/Figure_9.08_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.8 – Get the pod resource consumption information
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to envision this output in a more structured way, you can use the
    following command to make it look more similar to a `yaml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.9 – Getting the node information in YAML ](img/Figure_9.09_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.9 – Getting the node information in YAML
  prefs: []
  type: TYPE_NORMAL
- en: 'With the preceding output, pay attention in particular to the section called
    `nodeInfo`, which gives you an overview of the OS image, architecture, kernel
    version, `kubeProxy` version, `kubelet` version, and os:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.10 – Getting pod resource consumption information ](img/Figure_9.10_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.10 – Getting pod resource consumption information
  prefs: []
  type: TYPE_NORMAL
- en: 'In case you don’t want that full overview of the Kubernetes node and want to
    focus on getting the memory of the current running process in your Kubernetes
    cluster, you can run the following command within the Kubernetes node:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is refined and should look similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.11 – Checking on the consumption information of the processes ](img/Figure_9.11_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.11 – Checking on the consumption information of the processes
  prefs: []
  type: TYPE_NORMAL
- en: 'As we explained earlier in this chapter, `DiskPressure` is also a key factor
    in the health status of the worker node. You can use the following command to
    check the available disk storage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The output looks similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.12 – The available disk information ](img/Figure_9.12_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.12 – The available disk information
  prefs: []
  type: TYPE_NORMAL
- en: After checking on the cluster and node information, we can go to the next step,
    which is checking on the Kubernetes components.
  prefs: []
  type: TYPE_NORMAL
- en: Inspecting the Kubernetes components
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We could make this checking easier and more effective by examining the processes
    in the `kube-system` namespace – that’s where you’ll find most of them and be
    able to export some handy information such as configurations, diagnosis logs,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting a system-reserved process
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Check for errors in a system-reserved process using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In case you have multiple nodes, you can add the `-o wide` flag to see which
    pods are running on which node:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'As you may already know from the previous chapters, this command will print
    out the system-reserved processes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.13 – The system-reserved process ](img/Figure_9.13_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.13 – The system-reserved process
  prefs: []
  type: TYPE_NORMAL
- en: 'When you see any process that is not in the `Running` status, it means that
    it was unhealthy – you can use the `kubectl describe pod` command to check on
    it. The following is an example to check out the `kube-proxy` status:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will print out the full descriptive information of the
    `kube-proxy-9rfxs` pod. However, as this pod presents the `kube-proxy` component,
    we can narrow the pod information down further by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The output prints out the node name and its allocated IP address:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You can double-check this by using the `kubectl get node -o wide` command,
    which will print out the IP address of the `docker-desktop` node too. It provides
    the same IP address as the following (here is a partial output):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.14 – Node-related information ](img/Figure_9.14_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.14 – Node-related information
  prefs: []
  type: TYPE_NORMAL
- en: 'From the output of the `kubectl describe` pod, `kube-proxy-9rfxs -n kubectl`,
    we know the `kube-proxy` is a DaemonSet – refer to [*Chapter 4*](B18201_04.xhtml#_idTextAnchor080),
    *Application Scheduling and Lifecycle Management*, to refresh the details about
    DaemonSets. In the case that you have multiple nodes and want to see which pod
    is on which node, you can also use the following command to check out your `kube-proxy`
    DaemonSet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is similar to the following, in which you can find useful information
    such as `Pod Status` and `pod template`, which shows you the details of this pod:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.15 – The kube-proxy DaemonSet information ](img/Figure_9.15_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.15 – The kube-proxy DaemonSet information
  prefs: []
  type: TYPE_NORMAL
- en: 'Knowing the pod configuration from the preceding output is not enough. When
    the pod is not up and running for some reason, the logs are much handier, especially
    when the `Events` section is `none` (as can be seen in the preceding screenshot
    ). We can use the following command to check the pod logs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command prints out logs similar to the following, which will
    give you more details about what has happened:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.16 – The pod logs information ](img/Figure_9.16_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.16 – The pod logs information
  prefs: []
  type: TYPE_NORMAL
- en: After covering master node troubleshooting, when troubleshooting is needed in
    the worker node, we should start by troubleshooting the `kubelet` agent – let’s
    get into this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting the kubelet agent
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After checking on the node status, we could SSH to that worker node if you’re
    not there already, and use the following command to check on the `kubelet` status:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.17 – The kubelet agent status and logs ](img/Figure_9.17_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.17 – The kubelet agent status and logs
  prefs: []
  type: TYPE_NORMAL
- en: 'The important part of the preceding screenshot is the status of `kubelet`,
    as can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.18 – The kubelet agent status ](img/Figure_9.18_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.18 – The kubelet agent status
  prefs: []
  type: TYPE_NORMAL
- en: 'In the case that the status is not `active (running)`, we could use `journalctl`
    to obtain the logs on the `kubelet` service on the worker node. The following
    command shows how to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will print out log details similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.19 – The kubelet service detailed logs ](img/Figure_9.19_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.19 – The kubelet service detailed logs
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, it’s up to you to find out what the main issue in the logs is. The following
    shows an example of the problem statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.20 – A sample kubelet agent error in the logs ](img/Figure_9.20_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.20 – A sample kubelet agent error in the logs
  prefs: []
  type: TYPE_NORMAL
- en: 'Refer to [*Chapter 6*](B18201_06.xhtml#_idTextAnchor192), *Securing Kubernetes*,
    to learn about how to organize cluster access using `kubeconfig`. Once you have
    fixed the issue, you should restart the `kubelet` agent using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Note that in the CKA exam, sometimes there isn’t any real issue. After you have
    checked on the lost logs using the `journalctl -u kubelet.service` command, you
    could use some help from `systemctl restart kubelet` to reboot the `kubelet` agent
    to fix the issue.
  prefs: []
  type: TYPE_NORMAL
- en: Aside from issues with the cluster components, we often encounter application
    failures, the latter perhaps more often in the daily routine of working with Kubernetes
    clusters. So, let’s now take a look at troubleshooting applications.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we’ll focus on troubleshooting containerized applications deployed
    on the Kubernetes cluster. This commonly covers issues with containerized-application-related
    Kubernetes objects, including pods, containers, services, and StatefulSets. The
    troubleshooting skill that you will learn in this section will be helpful throughout
    your CKA exam.
  prefs: []
  type: TYPE_NORMAL
- en: Getting a high-level view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To troubleshoot the application failures, we have to start by getting a high-level
    view. The following command is the best way to get all the information at once:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, we can use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The following output shows the pods up and running per namespace, within which
    you can easily find which pods have failed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.21 – Listing pods per namespace ](img/Figure_9.21_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.21 – Listing pods per namespace
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of the output information, note the `NAMESPACE`, `READY`,
    and `STATUS` columns – they will tell you in which namespace pods are up and running
    and how many copies. If you’re certain about the failures that are happening on
    certain pods in a certain namespace, then you can move on to the next section
    to inspect the namespace events.
  prefs: []
  type: TYPE_NORMAL
- en: Inspecting namespace events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To inspect the namespace events, you can use the following command to find
    out what happened to the applications that were deployed in the `default` namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.22 – The Kubernetes events ](img/Figure_9.22_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.22 – The Kubernetes events
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the preceding screenshot, we have some valuable columns:'
  prefs: []
  type: TYPE_NORMAL
- en: The `TYPE` column shows the event type – it could be `Normal` or `Warning`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `REASON` column is tied to the behaviors of the events.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `OBJECT` column shows to which object this event is attached.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `MESSAGE` column shows what happened to a specific pod or container.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To know more about events, check out this blog to help you extract value from
    the Kubernetes event feed: [https://www.cncf.io/blog/2021/12/21/extracting-value-from-the-kubernetes-events-feed/](https://www.cncf.io/blog/2021/12/21/extracting-value-from-the-kubernetes-events-feed/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also sort the `events` list by most recent by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'It will return the events sorted by their creation timestamp as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.23 – The Kubernetes events by timestamp  ](img/Figure_9.23_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.23 – The Kubernetes events by timestamp
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, if we wanted to check out the events in a namespace called `app`,
    we could use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.24 – The Kubernetes events per namespace by timestamp  ](img/Figure_9.24_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.24 – The Kubernetes events per namespace by timestamp
  prefs: []
  type: TYPE_NORMAL
- en: The preceding output proves that we’re able to print out the events per namespace
    and sort them by creation time stamp.
  prefs: []
  type: TYPE_NORMAL
- en: Up until this point, we’re certain about which pod or container the issue occurred
    in. Now, let’s take a closer look at the failing pods.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting failing pods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once we narrow things down to the point where we know which pod is failing,
    we can use a command to get the pod status running in that namespace. The following
    is the command to get a failing pod called `old-busybox` in a namespace called
    `app`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Your output will be similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.25 – Getting the failing pod in the namespace ](img/Figure_9.25_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.25 – Getting the failing pod in the namespace
  prefs: []
  type: TYPE_NORMAL
- en: 'We may notice that the `STATUS` shows there is an image error (`ErrImagePull`).
    Now, we can use the `kubectl describe` pod command to get more details:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command prints an overview of the failing part, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.26 – Describing the failing pods in a namespace ](img/Figure_9.26_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.26 – Describing the failing pods in a namespace
  prefs: []
  type: TYPE_NORMAL
- en: 'You may notice there is a section called `Events` where the events related
    to this pod are displayed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_9.27_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.27 – The failing pod events
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also use `kubectl logs` to get some information about the erroneous
    pod and the output will give you more detailed information. Let’s use the same
    example to get the logs of a pod called `old-busybox`, as shown in the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'From the previous few outputs, we know the image was not correct. As this is
    a pod, we can use the following command to export the pod definition to a `yaml`
    file called `my-old-pod.yaml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also examine the content of this `yaml` file using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command gives us the full configuration of the pod called `old-busybox`.
    However, we found the key part of this file is the section called `image`, as
    shown in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.28 – The failing pod specification ](img/Figure_9.28_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.28 – The failing pod specification
  prefs: []
  type: TYPE_NORMAL
- en: 'We can edit this exported file locally using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'You’ll see that you can edit the YAML file when you’re in `EDIT` mode as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.29 – Editing the pod-exported YAML specification ](img/Figure_9.29_B18201.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.29 – Editing the pod-exported YAML specification
  prefs: []
  type: TYPE_NORMAL
- en: 'After you’re done with the editing, you need to delete the old pod using the
    `kubectl delete` command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, deploy `my-old-pod` using the `kubectl apply -f` command, and then you’ll
    see the pod is up and running again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: For a failing pod that was initiated by deployment, you can use `kubectl edit
    deploy < your deployment >` to live-edit the pod and fix the error. It helps to
    quickly fix a range of errors. To learn more about how the deployment live-edit
    works, refer to [*Chapter 4*](B18201_04.xhtml#_idTextAnchor080), *Application
    Scheduling and Lifecycle Management*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The failing pods include the following cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Failing type** | **How to debug?** |'
  prefs: []
  type: TYPE_TB
- en: '| Pending | Use the `kubectl describe` command – sometimes, it is a scheduling
    issue because of no available nodes or exceeding the resource. Make sure you check
    the node status and use the `top` command to check out the resource allocation.
    |'
  prefs: []
  type: TYPE_TB
- en: '| CrashLoopBackOff | Use the `kubectl describe` and `kubectl log` commands
    – sometimes, it was caused by cluster components, so make sure you narrow the
    error down by using the outside-in approach. |'
  prefs: []
  type: TYPE_TB
- en: '| Completed | Use the `kubectl describe` command to find out why it happened
    and then fix it. |'
  prefs: []
  type: TYPE_TB
- en: '| Error | Use the `kubectl describe` command to find out why it happened and
    then fix it. |'
  prefs: []
  type: TYPE_TB
- en: '| ImagePullBackOff | `kubectl` describes and mostly needs to export the YAML
    file, then update the image. Also possible to use the `set image` command. |'
  prefs: []
  type: TYPE_TB
- en: Table 9.2 - Failing pods and how to fix them
  prefs: []
  type: TYPE_NORMAL
- en: Knowing about pod troubleshooting comes in handy and applies to most cases,
    in particular in the microservices architecture where there is mainly one container
    per pod. When it comes to multiple containers in a pod or a pod containing init
    containers, we’ll need to execute a command on the pod to troubleshoot – let’s
    take a look at those cases now.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting init containers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In [*Chapter 4*](B18201_04.xhtml#_idTextAnchor080), *Application Scheduling
    and Lifecycle Management*, of this book, we learned about init containers, as
    we deployed init containers in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use the following command to check the status for the `initContainer`
    of this pod:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'In my case, the printed output looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The preceding output shows that the `initContainer` is not ready.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use the following command to check the logs for the `initContainer`
    of the pod to understand why and fix the issue:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, `initContainer` also has its status – the following are the common
    ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Failing type** | **What does that mean?** |'
  prefs: []
  type: TYPE_TB
- en: '| `Init: X/Y` | The pod has `Y` init containers in total and `X` of them are
    completed |'
  prefs: []
  type: TYPE_TB
- en: '| `Init: Error` | `initContainer` failed to execute correctly |'
  prefs: []
  type: TYPE_TB
- en: '| `Init:CrashLoopBackOff` | `initContainer` is failing repeatedly |'
  prefs: []
  type: TYPE_TB
- en: '| `Pending` | The pod is pending, so it has not started the `initContainer`
    execution yet |'
  prefs: []
  type: TYPE_TB
- en: '| `PodInitializing` | The `initContainer` is executed and now the pod is initiating
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Running` | The `initContainer` is executed and now the pod is up and running
    |'
  prefs: []
  type: TYPE_TB
- en: Familiarity with these statuses will help you define when and how to take further
    steps to debug containers.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covered cluster troubleshooting and application troubleshooting
    from the cluster, the node, and then down to the pod level – this is an end-to-end,
    outside-in approach. As a Kubernetes administrator, acquiring good troubleshooting
    skills will help you to provide better value to your organization greatly.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll focus on Kubernetes security, networking troubleshooting
    use cases, and some more end-to-end troubleshooting scenarios. Stay tuned!
  prefs: []
  type: TYPE_NORMAL
- en: FAQs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Where can I find a comprehensive guide to troubleshooting the clusters?*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can find the updated information from the official Kubernetes documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://kubernetes.io/docs/tasks/debug/debug-cluster/](https://kubernetes.io/docs/tasks/debug/debug-cluster/)'
  prefs: []
  type: TYPE_NORMAL
- en: '*Where can I find a comprehensive guide to troubleshooting the applications?*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can find the updated information from the official Kubernetes documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://kubernetes.io/docs/tasks/debug/debug-application/](https://kubernetes.io/docs/tasks/debug/debug-application/)'
  prefs: []
  type: TYPE_NORMAL

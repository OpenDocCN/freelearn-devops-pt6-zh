["```\n    $ ssh ubuntu@YOUR_VM_IP\n    ```", "```\n    $ curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC=\"--write-kubeconfig-mode 644 --no-deploy traefik --disable traefik --disable servicelb\" sh -s -\n    ```", "```\n$ PUBLIC_IP=YOUR_PUBLIC_IP|YOUR_PRIVATE_IP\n```", "```\n$ curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC=\"--write-kubeconfig-mode 644 --no-deploy traefik --disable traefik --tls-san \"$PUBLIC_IP\" --node-external-ip \"$PUBLIC_IP\" --disable servicelb\" sh -s -\n```", "```\n    $ kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.10.2/manifests/namespace.yaml\n    ```", "```\n    apiVersion: v1 \n    kind: ConfigMap \n    metadata: \n    namespace: metallb-system \n    name: config \n    data: \n    config: | \n    address-pools: \n    - name: default \n    protocol: layer2 \n    addresses: \n          - 192.168.0.240-192.168.0.250\n    ```", "```\n    $ kubectl apply -f config.yaml\n    ```", "```\n    $ kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.10.2/manifests/metallb.yaml\n    ```", "```\n    $ helm repo add metallb https://metallb.github.io/metallb\n    ```", "```\n    $ helm install metallb -n metallb-system metallb/metallb\n    ```", "```\n    $ helm install metallb -n metallb-system metallb/metallb -f values.yaml\n    ```", "```\n    configInline\n      address-pools:\n       - name: default\n         protocol: layer2\n         addresses:\n         - 192.168.0.240-192.168.0.250\n    ```", "```\n    $ kubectl apply -f config.yaml\n    ```", "```\n    $ ssh ubuntu@NODE_IP\n    ```", "```\n    $ kubectl run nginx --image=nginx --restart=Never\n    ```", "```\n    $ kubectl expose pod/nginx --port=8001 \\\n      --target-port=80 \\\n      --type=LoadBalancer\n    ```", "```\n    $ kubectl get services\n    ```", "```\n    $ curl http://EXTERNAL_IP:8001\n    ```", "```\n    $ ssh ubuntu@NODE_IP\n    ```", "```\n    $ sudo apt install -y nfs-common\n    ```", "```\n    $ kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v1.3.1/deploy/longhorn.yaml\n    ```", "```\n    apiVersion: v1\n    kind: PersistentVolumeClaim\n    metadata:\n      name: longhorn-volv-pvc\n    spec:\n      accessModes:\n        - ReadWriteMany\n      storageClassName: longhorn\n      resources:\n        requests:\n          storage: 2Gi\n    ```", "```\n    $ kubectl create -f pvc.yaml\n    ```", "```\n    echo \"\n    apiVersion: v1\n    kind: Pod\n    metadata:\n      name: volume-test\n      namespace: default\n    spec:\n      containers:\n      - name: volume-test\n        image: nginx:stable-alpine\n        imagePullPolicy: IfNotPresent\n        volumeMounts:\n        - name: volv\n          mountPath: /data\n        ports:\n        - containerPort: 80\n      volumes:\n      - name: volv\n        persistentVolumeClaim:\n          claimName: longhorn-volv-pvc\" > pod.yaml\n    ```", "```\n    $ kubectl create -f pod.yaml\n    ```", "```\n    $ kubectl port-forward svc/longhorn-frontend -n longhorn-system 8080:80\n    ```", "```\n    $ kubectl get pods –n longhonr-system\n    ```", "```\n    $ kubectl get pv\n    ```", "```\n    $ kubectl get pvc\n    ```", "```\n    $ kubectl get pods\n    ```", "```\n    $ /usr/local/bin/k3s-killall.sh\n    ```", "```\n    $ curl -sfL https://get.k3s.io | sh -\n    ```", "```\n    $ curl -sfL https://get.k3s.io | INSTALL_K3S_CHANNEL=latest sh -\n    ```", "```\n    $ curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION=vX.Y.Z-rc1 sh -\n    ```", "```\n    $ /usr/local/bin/k3s-killall.sh\n    ```", "```\n    $ sudo systemctl restart k3s\n    ```", "```\n    $ sudo systemctl restart k3s\n    ```", "```\n    $ sudo systemctl restart k3s-agent\n    ```", "```\n    $ sudo service k3s restart\n    ```", "```\n    $ sudo service k3s-agent restart\n    ```", "```\n    $ ssh ubuntu@NODE_IP\n    ```", "```\n    $ k3s-killall.sh\n    ```", "```\n    $ sudo cd /var/lib/rancher/k3s\n    ```", "```\n    $ sudo cp -R /var/lib/rancher/k3s folder_of_destination\n    ```", "```\n    $ mysqldump -h YOUR_HOST -u YOUR_USER -pYOUR_PASSWORD k3s > output.sql\n    ```", "```\n    $ mysql -h YOUR_HOST -u YOUR_USER -pYOUR_PASSWORD k3s < output.sql\n    ```", "```\n    $ curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC=\"server --cluster-init\" sh -s -\n    ```", "```\n    $ TOKEN=YOUR_TOKEN\n    ```", "```\n    $ curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC=\"server \n    --server https://MASTER_IP:6443\" K3S_TOKEN=$TOKEN sh -s -\n    ```", "```\n    $ k3s etcd-snapshot --name=mysnapshot\n    ```", "```\n    $ k3s server \\\n    --cluster-reset \\\n    --cluster-reset-restore-path=<PATH-TO-SNAPSHOT>\n    ```", "```\n    --etcd-snapshot-schedule-cron\n    ```"]
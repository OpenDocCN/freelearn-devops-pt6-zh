- en: '*Chapter 7*: Deploying a Hosted Cluster with Rancher'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For teams that don't want to manage any servers, Rancher provides the ability
    to deploy and manage hosted Kubernetes services such as **Google Kubernetes Engine**
    (**GKE**), **Amazon Elastic Container Service for Kubernetes** (**Amazon EKS**),
    or **Azure Kubernetes Service** (**AKS**). This chapter will cover the pros and
    cons of using a hosted cluster versus an RKE cluster. Then, we'll cover the requirements
    and limitations of this type of cluster. At that point, we'll go through the process
    of prepping the cloud provider. Then, we'll go over setting up EKS, GKE, and AKS
    clusters using Rancher. Finally, we'll cover the maintenance tasks needed for
    ongoing cluster management.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: How can Rancher manage a hosted cluster?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requirements and limitations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rules for architecting a solution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prepping the cloud provider
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installation steps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ongoing maintenance tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can Rancher manage a hosted cluster?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the first questions I get is, *what is a hosted cluster?* The short
    answer is that it''s a Kubernetes cluster created and managed by a cloud provider
    such as Google, Amazon, or Azure but with Rancher managing the configuration of
    the cluster. Rancher uses a cloud provider''s API and their SDK to create the
    cluster the same way you would as an end user through their web console or a command-line
    tool. As of Rancher v2.6, the current list of supported cloud providers is as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**GKE**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazom EKS**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AKS**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Alibaba Cloud Container Service for Kubernetes**) (**Alibaba ACK**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tencent Kubernetes Engine** (**Tencent TKE**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Huawei Cloud Container Engine** (**Huawei CCE**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rancher does this by having a set of controllers in the Rancher leader pod.
    Each cloud provider has its controller, and each controller uses a Go library
    for communicating with the cloud provider. Rancher uses a process wherein Rancher
    stores the cluster's configuration as a specification in the cluster object. For
    example, EKS is stored under `Spec.EKSConfig`. For this section, we will go over
    the v1 controllers first and then the new v2 controllers.
  prefs: []
  type: TYPE_NORMAL
- en: With the original v1 controllers, which are found in Rancher v2.0â€“2.4, the cluster
    config was stored in this object and was only updated when Rancher or a user changed.
    If you were to create an EKS cluster in Rancher and then make a change in the
    AWS console, that change wouldn't be reflected in Rancher, which would overwrite
    your change during the next update event. This means the source of truth for these
    types of clusters is Rancher, and at the time of writing, these clusters cannot
    be detached from Rancher and managed externally.
  prefs: []
  type: TYPE_NORMAL
- en: The new v2 controllers are only available for EKS and GKE, added to Rancher
    v2.5.8 and later. The idea of configuration synchronization was added to allow
    changes made outside Rancher to be synced to it. This is done by two operators
    called eks-operator and gke-operator. The operator stores the configuration for
    the cloud provider as `Spec.EKSStatus` and `Spec.GKEStatus`. These objects are
    refreshed every 5 minutes from the cloud provider. The local configuration of
    the cluster is stored as `Spec.EKSConfig` and `Spec.GKEConfig`, which represent
    the desired state of the cluster with most of the fields in the `config section`
    being `NULL`. Rancher keeps these values `NULL` until they are set in Rancher.
    Once the value has been set in Rancher, the operator uses the cloud provider's
    SDK to update the cluster. Once the cloud has been updated, the `Status` specs
    will get updated. If you change the cluster outside Rancher, that change will
    get picked up by it, and if the managed field is different, it will get overwritten.
  prefs: []
  type: TYPE_NORMAL
- en: One question that always comes up is, *what is the difference between building
    a hosted cluster in Rancher and building it outside Rancher and then importing
    it?* The answer to this question depends on the type of cluster. If it's an EKS
    or GKE cluster, you'll import the cluster, and Rancher will detect the cluster
    type. Then, assuming Rancher has the correct permissions, Rancher will *convert*
    this cluster into a hosted cluster. At that point, the cluster can be managed
    in the same manner it would be if Rancher created it. We will be covering more
    about importing clusters into Rancher in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Requirements and limitations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we understand what a hosted cluster is and how it works in Rancher,
    we will move on to the requirements and limitations of a hosted cluster in Rancher,
    along with the design limitations and constraints when choosing a hosted cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Basic requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Rancher needs permissions from a cloud provider to be able to create a cluster
    and its related services. The required permissions will vary, depending upon the
    cloud provider. The links to the official Rancher documentation for each cloud
    provider type are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Google Kubernetes Engine: [https://rancher.com/docs/rancher/v2.6/en/cluster-provisioning/hosted-kubernetes-clusters/gke/](https://rancher.com/docs/rancher/v2.6/en/cluster-provisioning/hosted-kubernetes-clusters/gke/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Amazon EKS: [https://rancher.com/docs/rancher/v2.6/en/cluster-provisioning/hosted-kubernetes-clusters/eks/](https://rancher.com/docs/rancher/v2.6/en/cluster-provisioning/hosted-kubernetes-clusters/eks/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'AKS: [https://rancher.com/docs/rancher/v2.6/en/cluster-provisioning/hosted-kubernetes-clusters/aks/](https://rancher.com/docs/rancher/v2.6/en/cluster-provisioning/hosted-kubernetes-clusters/aks/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The rest of the cloud providers can be found at [https://rancher.com/docs/rancher/v2.6/en/cluster-provisioning/hosted-kubernetes-clusters/](https://rancher.com/docs/rancher/v2.6/en/cluster-provisioning/hosted-kubernetes-clusters/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is recommended that Rancher be configured using a dedicated service account
    with the least permissions possible.
  prefs: []
  type: TYPE_NORMAL
- en: Rancher will need access to a cloud provider's API endpoint, which means that
    Rancher will need internet access directly or via an HTTP(S) proxy. If you are
    using a private API such as AWS's API gateway, that will need to be configured
    in Rancher.
  prefs: []
  type: TYPE_NORMAL
- en: Rancher will need access to the Kubernetes-API endpoint for the cluster from
    the Rancher servers.
  prefs: []
  type: TYPE_NORMAL
- en: It is recommended that cloud service accounts are configured in Rancher under
    a dedicated service account such as local admin, and this account should be the
    admin permissions in Rancher.
  prefs: []
  type: TYPE_NORMAL
- en: Design limitations and considerations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some settings such as the available regions are hardcoded in Rancher, meaning
    that if a cloud provider adds a new region, it might not be available in the Rancher
    UI until you upgrade Rancher.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: For the v2 controllers, you can work around the limitations in the Rancher UI
    by creating the cluster outside Rancher and then importing it.
  prefs: []
  type: TYPE_NORMAL
- en: The Kubernetes versions that are available in the Rancher UI may not match what
    the cloud provider allows. For example, if you are running an older version of
    Rancher, you might have v1.13 available in the drop-down menu, but because Amazon
    no longer supports this version, you will get an error in Rancher stating that
    the cluster creation failed.
  prefs: []
  type: TYPE_NORMAL
- en: 'More cloud providers will assume that the cluster being built will have public
    internet access and public IP addresses assigned to the nodes, load balancers,
    and a Kube-API endpoint if you want to set up an air-gapped or private IP-only
    cluster. You will need to work with the cloud provider to configure the additional
    firewall rules, routes, and other settings required for this cluster. The following
    are the documentations for using the private endpoints in Rancher:'
  prefs: []
  type: TYPE_NORMAL
- en: For EKS private-only endpoints, Rancher provides documentation for the additional
    steps needed, which are located at https://rancher.com/docs/rancher/v2.5/en/cluster-admin/editing-clusters/eks-config-reference/#private-only-api-endpoints.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the GKE private endpoint, you can find the documentation at https://rancher.com/docs/rancher/v2.5/en/cluster-admin/editing-clusters/gke-config-reference/#private-cluster.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: At the time of writing, this type of configuration is not very mature and has
    several bugs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Snapshots and backups are not a thing. Unlike an RKE/2 cluster, most of the
    hosted clusters do not provide you access to the etcd backup and do not provide
    an etcd backup option. If the cluster is lost or a user makes a mistake (for example,
    deleting the wrong namespace), your only option is to redeploy. There are third-party
    tools such as Velero that can address this shortcoming, and we will cover them
    later on in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The permissions Rancher requires can be too great for some security teams to
    approve. Rancher does provide a list of the minimum EKS permissions, located at
    [https://rancher.com/docs/rancher/v2.5/en/cluster-provisioning/hosted-kubernetes-clusters/eks/permissions/](https://rancher.com/docs/rancher/v2.5/en/cluster-provisioning/hosted-kubernetes-clusters/eks/permissions/).
    It is important to note that some features may not work with a lower set of permissions,
    and it may require tuning.
  prefs: []
  type: TYPE_NORMAL
- en: The cost of load balancers with hosted clusters can be greater than an RKE/2
    cluster. This is because most cloud providers will deploy an external load balancer
    instead of the shared load balancer, the Ingress NGINX Controller, that RKE/2
    uses. Note that you can work around this limitation by deploying nginx-ingress
    with an external load balancer in front of it.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we have covered the requirements and limitations. In the next
    section, we are going to use that knowledge along with additional rules and example
    designs to help us architect a solution that meets your needs.
  prefs: []
  type: TYPE_NORMAL
- en: Rules for architecting a solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll cover some of the standard designs and the pros and cons
    of each. It is important to note that each environment is unique and will require
    tuning for the best performance and experience. It's also important to note that
    all CPU, memory, and storage sizes are recommended starting points and may need
    to be increased or decreased by your workloads and deployment processes. Also,
    we'll be covering designs for the major infrastructure providers (Amazon EKS and
    GKE), but you should be able to translate the core concepts for other infrastructure
    providers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before designing a solution, you should be able to answer the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: Will multiple environments be sharing the same cluster?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Will production and non-production workloads be on the same cluster?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What level of availability does this cluster require?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Will this cluster be spanning multiple data centers in a metro cluster environment?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How much latency will there be between nodes in the cluster?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How many pods will be hosted in the cluster?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are the average and maximum size of pods for deployment in the cluster?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Will you need GPU support for some of your applications?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Will you need to provide storage to your applications?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you need storage, do you need only `ReadWriteOnce` (RWO) or will you need
    `ReadWriteMany` (RWX)?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's start with Amazon EKS.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon EKS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: EKS is the most mature cloud provider when it comes to **Kubernetes as a Service**
    (**KaaS**). Because of this, EKS is one of the most flexible solutions, but some
    limitations and rules need to be followed when creating an EKS cluster in Rancher.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **pros** of Amazon EKS are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: EKS supports enormous clusters, with the current limits being 3,000 nodes per
    cluster with 737 pods per node (depending on node size).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EKS supports third-party **Container Network Interface** (**CNI**) providers
    such as Calico.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EKS natively supports `ReadWriteOnce` storage. The provisioner comes pre-installed.
    You can find more details about this storage class at [https://docs.aws.amazon.com/eks/latest/userguide/ebs-csi.html](https://docs.aws.amazon.com/eks/latest/userguide/ebs-csi.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For workloads that require `ReadWriteMany`, EKS supports **Elastic File System**
    (**EFS**), managed by NFS share from Amazon. You can find more details about this
    at [https://docs.aws.amazon.com/eks/latest/userguide/efs-csi.html](https://docs.aws.amazon.com/eks/latest/userguide/efs-csi.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Because Amazon controls both the cloud networking and the cluster overlay network,
    you can assign IP addresses from your **Virtual Private Cloud** (**VPC**) directly
    to pods inside your cluster. This allows other Amazon services to communicate
    with pods directly. You can find more details about this at [https://docs.aws.amazon.com/eks/latest/userguide/pod-networking.html](https://docs.aws.amazon.com/eks/latest/userguide/pod-networking.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EKS has direct integration between EKS and AWS load balancers. This allows you
    to deploy both an **Application Load Balancer** (**ALB**) as a layer 7/HTTP(S)
    load balancer and a **Network Load Balancer** (**NLB**) as a layer 4/TCP load
    balancer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **cons** of Amazon EKS are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: EKS limits the number of pods per node based on the node size. For example,
    `t2.nano` only supports four pods per node. With so few available pods, most services
    such as the CNI, node exporters, and log collectors will use up all available
    slots of the node before any application pods can be started. `t2.large` or larger
    is generally recommended. You can find a list of all the node sizes versus the
    maximum pod count at [https://github.com/awslabs/amazon-eks-ami/blob/master/files/eni-max-pods.txt](https://github.com/awslabs/amazon-eks-ami/blob/master/files/eni-max-pods.txt).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the time of writing, EKS doesn't have an automatic node repair process, so
    if a node crashes and doesn't recover, that node will not be replaced until you
    force a replacement. You can find more details about this limitation at [https://aws.amazon.com/premiumsupport/knowledge-center/eks-node-status-ready/](https://aws.amazon.com/premiumsupport/knowledge-center/eks-node-status-ready/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Several manual steps are required when doing upgrades. Amazon has these steps
    documented at [https://docs.aws.amazon.com/eks/latest/userguide/update-cluster.html](https://docs.aws.amazon.com/eks/latest/userguide/update-cluster.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let's talk about GKE.
  prefs: []
  type: TYPE_NORMAL
- en: GKE
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: GKE is the second-most mature cloud provider when it comes to KaaS. This is
    because Google created Kubernetes and still drives a lot of the integration and
    development work for core Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **pros** of GKE are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: GKE has the broadest range of supported Kubernetes (three significant releases),
    and GKE is typically very up to date with new releases. You can find more details
    about the release schedule and versions at [https://cloud.google.com/kubernetes-engine/docs/release-notes#latest_versions](https://cloud.google.com/kubernetes-engine/docs/release-notes#latest_versions).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With GKE, you can enable Autopilot on your cluster, and with that, you can fully
    automate the upgrade process for your cluster. This includes both the control
    plane and the worker node level. You can find the documentation for Autopilot
    at [https://cloud.google.com/kubernetes-engine/docs/concepts/autopilot-overview](https://cloud.google.com/kubernetes-engine/docs/concepts/autopilot-overview).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can set the release channel for your cluster to be rapid, which gives you
    releases every couple of weeks to the regular channel (which is the default option)
    and provides an update every 2 to 3 months. Finally, you can select the stable
    channel, which is very similar to regular, the difference being that it is the
    last channel to get updates. This allows even more time for accurate user testing.
    You can find more details about this at [https://cloud.google.com/kubernetes-engine/docs/concepts/release-channels](https://cloud.google.com/kubernetes-engine/docs/concepts/release-channels).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GKE provides automatic node repair; if a node fails, GKE can and will automatically
    replace it. It does this using the node status, which helps if kubelet crashes
    when the OS stays running, but the node is effectively dead in the cluster. You
    can learn more about this process at [https://cloud.google.com/kubernetes-engine/docs/how-to/node-auto-repair](https://cloud.google.com/kubernetes-engine/docs/how-to/node-auto-repair).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GKE is unique because you can select Google's container-optimized OS, a stripped-down
    OS designed for security and stability. Alternatively, you can choose an Ubuntu-based
    image. You can also mix and match inside a cluster. The complete list of node
    images is available at [https://cloud.google.com/kubernetes-engine/docs/concepts/node-images](https://cloud.google.com/kubernetes-engine/docs/concepts/node-images).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GKE supports Windows Server containers. This is done by adding Windows workers
    nodes to your GKE cluster. The limitation of Windows nodes in GKE can be found
    at [https://cloud.google.com/kubernetes-engine/docs/concepts/windows-server-gke](https://cloud.google.com/kubernetes-engine/docs/concepts/windows-server-gke).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GKE allows you to remotely access worker nodes using an SSH client, which is
    excellent for troubleshooting node and application issues.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **cons** of GKE are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: GKE will only provide 99.95% of the **service-level agreement** (**SLA**) if
    you use regional clusters, which costs extra. The details about this cost can
    be found at https://cloud.google.com/kubernetes-engine/pricing#cluster_management_fee_and_free_tier.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the time of writing, GKE does not have a government cloud option. All the
    currently supported regions can be found at [https://cloud.google.com/compute/docs/regions-zones](https://cloud.google.com/compute/docs/regions-zones).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lastly, we'll talk about AKS.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Azure Kubernetes Service (AKS)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AKS is the new kid on the block when it comes to KaaS, but Microsoft has been
    investing a lot in AKS and has closed the feature gap very quickly.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **pros** of AKS are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: AKS follows Microsoft's standard monthly patch schedule as they do with their
    OSes. They also publish their releases on their GitHub page, which is located
    at [https://github.com/Azure/AKS/releases](https://github.com/Azure/AKS/releases).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AKS has automatic node repair whereas Microsoft Azure uses both node agents
    and the node status in the cluster to trigger a repair. Azure's restoration process
    is less advanced than the other cloud providers, as it will try rebooting the
    node before reimaging it and then giving up. Finally, if that fails, an Azure
    engineer will investigate the issue. You read more about this process at [https://docs.microsoft.com/en-us/azure/aks/node-auto-repair](https://docs.microsoft.com/en-us/azure/aks/node-auto-repair).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AKS fully supports integration with **Azure Active Directory** (**Azure AD**).
    This allows you to assign permissions inside your cluster using Azure AD users
    and groups. For more details, visit [https://docs.microsoft.com/en-us/azure/aks/managed-aad](https://docs.microsoft.com/en-us/azure/aks/managed-aad).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AKS has Visual Studio Code extensions that allow developers to run and debug
    their code directly on their laptop as if it was part of the AKS cluster. Bridge
    to Kubernetes is basically like creating a VPN connection in your cluster so that
    pods running on your computer can directly communicate with the clusters and other
    pods running in the cluster. You can learn more about how this works at [https://docs.microsoft.com/en-us/visualstudio/bridge/overview-bridge-to-kubernetes?view=vs-2019](https://docs.microsoft.com/en-us/visualstudio/bridge/overview-bridge-to-kubernetes?view=vs-2019).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **cons** of AKS are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The upgrade process for AKS has some manual steps.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The automatic cluster upgrade is in public preview. You can see the current
    status at [https://azure.microsoft.com/en-us/updates/public-preview-automatic-cluster-upgrades-in-aks/](https://azure.microsoft.com/en-us/updates/public-preview-automatic-cluster-upgrades-in-aks/).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Some settings such as network policies can only be set when creating clusters
    and cannot be enabled afterward. You can find more details at https://docs.microsoft.com/en-us/azure/aks/use-network-policies#create-an-aks-cluster-and-enable-network-policy.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AKS will only provide 99.95% of the SLA if you use regional clusters, which
    increases the cost of the cluster. Details about this cost can be found at [https://azure.microsoft.com/en-us/pricing/details/bandwidth/](https://azure.microsoft.com/en-us/pricing/details/bandwidth/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we understand the pros and cons of each of the major hosted providers,
    we are going to dive into getting everything set up in the cloud provider and
    in Rancher so that we can start creating clusters.
  prefs: []
  type: TYPE_NORMAL
- en: Prepping the cloud provider
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before creating a hosted cluster in Rancher, we need to prepare the cloud provider
    for Rancher. In this section, we'll be covering setting up permissions in the
    three major hosted Kubernetes clusters, which are EKS, GKE, and AKS.
  prefs: []
  type: TYPE_NORMAL
- en: We'll start with Amazon EKS.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon EKS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The prerequisites are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: You should already have an AWS subscription created and available to use.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You'll need permissions in AWS to be able to create **Identity and Access Management**
    (**IAM**) policies.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your Rancher server(s) should be able to reach AWS API public or private endpoints.
    You can read more about Amazon's API Gateway private endpoint at [https://aws.amazon.com/blogs/compute/introducing-amazon-api-gateway-private-endpoints/](https://aws.amazon.com/blogs/compute/introducing-amazon-api-gateway-private-endpoints/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EKS will require a VPC to be created, and you should work with your networking
    team to make it. Amazon has a tutorial located at [https://docs.aws.amazon.com/eks/latest/userguide/create-public-private-vpc.html](https://docs.aws.amazon.com/eks/latest/userguide/create-public-private-vpc.html)
    that covers creating a VPC.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You should have a dedicated service account in AWS for Rancher.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You should have a dedicated service account in Rancher, and this account should
    have admin-level permissions. You can use the local admin account for this role.
    For this section, we will assume that you will be using the local admin account.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setup permissions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here are the setup permissions for Rancher:'
  prefs: []
  type: TYPE_NORMAL
- en: If you do not already have a dedicated service account in AWS, you should follow
    the steps at [https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html.](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html.)
    For this section, we are going to use the name `rancher` for this service account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have the service account, we will assign an IAM policy to that account.
    This policy gives Rancher the permissions it needs to create an EKS cluster. The
    minimum required permissions can be found at https://rancher.com/docs/rancher/v2.6/en/cluster-provisioning/hosted-kubernetes-clusters/eks/#minimum-eks-permissions,
    and the steps for creating an IAM policy and attaching it to a service account
    can be found at [https://docs.aws.amazon.com/eks/latest/userguide/EKS_IAM_user_policies.html](https://docs.aws.amazon.com/eks/latest/userguide/EKS_IAM_user_policies.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We now need to create access and secret key pair, and the process for doing
    this can be found at https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html#Using_CreateAccessKey.
    It is important to note that as per Amazon's best practices guide for access keys,
    you should set an expiration time for the access key. This will require you to
    rotate it though. The best practices guide can be found at [https://docs.aws.amazon.com/general/latest/gr/aws-access-keys-best-practices.html](https://docs.aws.amazon.com/general/latest/gr/aws-access-keys-best-practices.html),
    and you can find the documentation for rotating access keys at [https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html#rotating_access_keys_console](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html#rotating_access_keys_console).
    You should also store this key in a safe place if it is needed in the future.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, you should log into the Rancher web UI as the local admin or
    your dedicated service account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the web UI, navigate to **Cluster Management** and then to **Cloud Credentials**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, click on the **Create** button and select **Amazon** from the list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Fill in the following form. You should give this credential a name that lets
    you know it''s for Amazon and what subscription it''s a part of â€“ for example,
    you might call it `AWS-Prod`. The Rancher UI will test whether the credentials
    are correct but will not validate that the account has all the permissions that
    Rancher will need. Also, the default region doesn''t matter and can be changed
    at any time. It is also important to note that the access key will be visible,
    but the secret key is encrypted and cannot be quickly recovered from Rancher:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.1 â€“ The Cloud Credential setup wizard for Amazon'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B18053_07_001.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.1 â€“ The Cloud Credential setup wizard for Amazon
  prefs: []
  type: TYPE_NORMAL
- en: For more details about the cloud credentials, please go to [https://rancher.com/docs/rancher/v2.5/en/user-settings/cloud-credentials/](https://rancher.com/docs/rancher/v2.5/en/user-settings/cloud-credentials/).
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's move on to GKE.
  prefs: []
  type: TYPE_NORMAL
- en: GKE
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The prerequisites are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: You should already have a Google cloud project created and available to use.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You'll need permissions in GCP to be able to create and assign roles.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your Rancher server(s) should be able to reach the GCP API public or private
    endpoints. You can read more about private access options for services at [https://cloud.google.com/vpc/docs/private-access-options](https://cloud.google.com/vpc/docs/private-access-options).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As with AWS, you should have dedicated service accounts in both GCP and Rancher.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you want to use a private GKE cluster, you should review Rancher's documentation,
    [https://rancher.com/docs/rancher/v2.6/en/cluster-admin/editing-clusters/gke-config-reference/private-clusters/](https://rancher.com/docs/rancher/v2.6/en/cluster-admin/editing-clusters/gke-config-reference/private-clusters/),
    for all the additional steps and costs required for this type of cluster.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setup permissions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here are the setup permissions for Rancher:'
  prefs: []
  type: TYPE_NORMAL
- en: If you do not already have a dedicated service account in GCP, you should follow
    the steps located at [https://cloud.google.com/compute/docs/access/create-enable-service-accounts-for-instances](https://cloud.google.com/compute/docs/access/create-enable-service-accounts-for-instances).
    For this section, we are going to use the name `rancher` for this service account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that we have the service account, we will assign the following default
    roles to the rancher service account: `compute.viewer`, `viewer`, `container.admin`,
    and `iam.serviceAccountUser`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Instead of an API key pair, GCP uses a private key for service accounts. You'll
    need to save the key in JSON format. You can find a detailed set of instructions
    at https://cloud.google.com/iam/docs/creating-managing-service-account-keys#creating_service_account_keys.
    You must keep this key for future use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, you should log into the Rancher web UI as the local admin or
    your dedicated service account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Cluster Management** for the web UI and then to **Cloud Credentials**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, click on the **Create** button and select **Google** from the list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Fill in the following form. You should give this credential a name that lets
    you know it''s for Google and what project it''s a part of â€“ for example, you
    might call it `GCP-Prod`. The Rancher UI will test whether the credentials are
    correct but will not validate that the account has all the permissions that Rancher
    will need:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.2 â€“ The Cloud Credential setup wizard for Google'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B18053_07_002.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.2 â€“ The Cloud Credential setup wizard for Google
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, let's delve into AKS.
  prefs: []
  type: TYPE_NORMAL
- en: AKS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The prerequisites are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: You should already have an Azure subscription created and available to use.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You'll need permissions in Azure AD to be able to create an app registration.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your Rancher server(s) should be able to reach the Azure API public or private
    endpoints. You can read more about private access options for services at [https://docs.microsoft.com/en-us/azure/api-management/api-management-using-with-internal-vnet?tabs=stv2](https://docs.microsoft.com/en-us/azure/api-management/api-management-using-with-internal-vnet?tabs=stv2).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure doesn't need a dedicated service account, but as with AWS and GCP, Rancher
    should have one.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You should have the Azure command-line tool already installed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You should have a resource group created for the AKS clusters and related services.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setup permissions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here are the setup permissions for Rancher:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command. You''ll want to document the output, as we''ll need
    it later:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We now want to assign the contributor role to the service principal using the
    following command. Please note that you''ll need the app and subscription ID from
    the previous command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: At this point, you should log into the Rancher web UI as the local admin or
    your dedicated service account.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigate to **Cluster Management** for the web UI and then to **Cloud Credentials**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, click on the **Create** button and select **Azure** from the list.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Fill in the following form. You should give this credential a name that lets
    you know it''s for Azure and what project it''s a part of â€“ for example, you might
    call it `AZ-Prod`. The Rancher UI will test that the credentials are correct but
    will not validate that the account has all the permissions that Rancher will need.
    For the **Environment** field, **AzurePublicCloud** is the most common option
    unless you are using a government subscription:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 7.3 â€“ The Cloud Credential setup wizard for Azure'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B18053_07_003.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.3 â€“ The Cloud Credential setup wizard for Azure
  prefs: []
  type: TYPE_NORMAL
- en: For the other cloud providers, you can find the steps at [https://rancher.com/docs/rancher/v2.6/en/cluster-provisioning/hosted-kubernetes-clusters/](https://rancher.com/docs/rancher/v2.6/en/cluster-provisioning/hosted-kubernetes-clusters/).
    At this point, Rancher should have access to the cloud provider. In the next section,
    we will go through creating some hosted clusters.
  prefs: []
  type: TYPE_NORMAL
- en: Installation steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we're going to create a hosted cluster, mainly using the default
    settings. For the examples, we will be continuing to use EKS, GKE, and AKS. Most
    of these settings can be translated for other cloud providers. It is important
    to note that you must already have the cloud credentials for each provider and
    environment you want to configure. It is also recommended that you keep Rancher
    up to date as cloud providers are constantly changing, and you might run into
    a bug simply because you are on an older version of Rancher. The latest stable
    versions can be found at [https://github.com/rancher/rancher#latest-release](https://github.com/rancher/rancher#latest-release).
  prefs: []
  type: TYPE_NORMAL
- en: We'll start with Amazon EKS.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon EKS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps show you how to set up EKS using Rancher:'
  prefs: []
  type: TYPE_NORMAL
- en: Log into Rancher using the service account that we used during the cloud credentials
    creation step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Browse the **Cluster Management** page, click on **Clusters**, and then click
    the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, from the list, select **Amazon EKS**, at which point you should be prompted
    with a cluster setup wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You''ll want to give the cluster a name. This name can be changed later, but
    it is recommended not to change it, as that can lead to a name mismatch, which
    would then lead to a user deleting the wrong resource. Also, the description field
    is a freeform field that can provide additional information such as who owns this
    cluster or who should be contacted about this cluster; some users will use this
    field to post maintenance messages such as `Scheduled maintenance every Friday
    at 7 PM CDT`. This can be changed at any time. The bottom section assigns the
    cloud credential to this cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.4 â€“ The cluster creation wizard for Amazon EKS'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B18053_07_004.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.4 â€“ The cluster creation wizard for Amazon EKS
  prefs: []
  type: TYPE_NORMAL
- en: The rest of the wizard will fill in the default values. You can change them
    as you see fit, but you should know what you are changing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The final step is to define the node groups. This includes settings such as
    the size of the node, the **Amazon Machine Image** (**AMI**) image, and the pool
    size. After defining the cluster, you should click the **Create** button, at which
    point Rancher will start the cluster creation process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The details for all the different settings can be found at [https://rancher.com/docs/rancher/v2.6/en/cluster-admin/editing-clusters/eks-config-reference/](https://rancher.com/docs/rancher/v2.6/en/cluster-admin/editing-clusters/eks-config-reference/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The cluster will go into the **Updating** status, depending on the cluster's
    size and Amazon's request queue. This process can take anywhere from 2 to 60 minutes.
    Please note that the wait is primarily dependent on Amazon and how busy they are.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's move on to GKE.
  prefs: []
  type: TYPE_NORMAL
- en: GKE
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, let''s look at the installation steps for GKE:'
  prefs: []
  type: TYPE_NORMAL
- en: Follow the same steps as you did for EKS, but this time, select **Google GKE**
    from the options menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The main difference is the **Account access** section, as it may ask you to
    re-enter the cloud credentials and Google project ID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The details for all the different settings can be found at [https://rancher.com/docs/rancher/v2.6/en/cluster-admin/editing-clusters/gke-config-reference/](https://rancher.com/docs/rancher/v2.6/en/cluster-admin/editing-clusters/gke-config-reference/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Again, the final step of clicking the **Create** button will cause Rancher to
    start the cluster creation process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The cluster will go into the **Updating** status, depending on the cluster's
    size and Google request queue. This process usually takes around 15 minutes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Lastly, let's look into AKS.
  prefs: []
  type: TYPE_NORMAL
- en: AKS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Lastly, the installation procedure for AKS is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Follow the same steps for EKS and GKE, but this time, select **Azure AKS** from
    the options menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The details for all the different settings can be found at [https://rancher.com/docs/rancher/v2.6/en/cluster-admin/editing-clusters/aks-config-reference/](https://rancher.com/docs/rancher/v2.6/en/cluster-admin/editing-clusters/aks-config-reference/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is important to note that the network policy is a setting that can only be
    enabled when creating clusters. You can find details about the different options
    at https://docs.microsoft.com/en-us/azure/aks/use-network-policies#differences-between-azure-and-calico-policies-and-their-capabilities.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Again, the final step of clicking the **Create** button will cause Rancher to
    start the cluster creation process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The cluster will go into the **Updating** status, depending on the cluster's
    size and Microsoft's request queue. This process usually takes around 60 minutes.
    From experience, the first cluster in a subscription takes the longest, with additional
    clusters being faster.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, we should have a Kubernetes cluster from one or more of the cloud
    providers and be able to easily repeat this process for as many different clusters
    as we need. This leads us into the final section on what do you do after your
    cluster is up and running.
  prefs: []
  type: TYPE_NORMAL
- en: Ongoing maintenance tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After creating a cluster, a few ongoing maintenance tasks need to be done to
    keep it running in a healthy state.
  prefs: []
  type: TYPE_NORMAL
- en: The first recommended task is setting up backups. But because these are hosted
    clusters, we can't take an etcd backup as we would with an RKE1/2 cluster. So,
    we'll need to use a third-party tool such as `kubectl apply` on the backup files.
    We will be covering these tools in an upcoming chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The second recommended task is testing and documenting how an upgrade impacts
    your applications. As most cloud providers will do a force drain of a node during
    a scheduled upgrade, you'll want to test how your application handles this kind
    of drain. For example, if you are using a multi-master database such as MariaDB
    Galera Cluster, do your database pods rebuild faster than the worker nodes are
    drained? A typical way to test this is by changing the node image to simulate
    the effects of a Kubernetes upgrade. This is because most providers don't allow
    you to downgrade your clusters. So, being able to repeat this test over and over
    again is not possible.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the different types of hosted clusters that
    Rancher can deploy, including the requirements and limitations of each. We then
    covered the rules of architecting each type of cluster, including some of the
    pros and cons of each solution. We finally went into detail about the steps for
    creating each type of cluster. We ended the chapter by going over the major ongoing
    maintenance tasks.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will cover importing an externally managed cluster into Rancher.
  prefs: []
  type: TYPE_NORMAL

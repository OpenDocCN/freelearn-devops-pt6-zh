["```\n\n    $ mkdir -p genai-eks-demo\n    versions.tf file that defines a list of Terraform providers and their respective versions. A versions.tf file from our GitHub repository at https://github.com/PacktPublishing/Kubernetes-for-Generative-AI-Solutions/blob/main/ch3/versions.tf:\n\n    ```", "```\n\n    data \"aws_availability_zones\" \"azs\" {\n      filter {\n        name   = \"opt-in-status\"\n        values = [\"opt-in-not-required\"]\n      }\n    }\n    locals {\n      name     = \"eks-demo\"\n      region   = \"us-west-2\"\n      vpc_cidr = \"10.0.0.0/16\"\n      azs      = slice (data.aws_availability_zones.azs.names, 0, 3)\n    }\n    ```", "```\n\n    ```", "```\n\n    provider \"aws\" {\n      region = local.region\n    }\n    provider \"kubernetes\" {\n      host                   = module.eks.cluster_endpoint\n      cluster_ca_certificate = base64decode(module.eks.cluster_certificate_authority_data)\n      exec {\n        api_version = \"client.authentication.k8s.io/v1beta1\"\n        command     = \"aws\"\n        args = [\"eks\", \"get-token\", \"--cluster-name\", module.eks.cluster_name]\n      }\n    }\n    provider \"helm\" {\n      kubernetes {\n        host                   = module.eks.cluster_endpoint\n        cluster_ca_certificate = base64decode(module.eks.cluster_certificate_authority_data)\n        exec {\n          api_version = \"client.authentication.k8s.io/v1beta1\"\n          command     = \"aws\"\n          args = [\"eks\", \"get-token\", \"--cluster-name\", module.eks.cluster_name]\n        }\n      }\n    }\n    ```", "```\n\n    module \"vpc\" {\n      source = \"terraform-aws-modules/vpc/aws\"\n      version = \"~> 5.21\"\n      name = local.name\n      cidr = local.vpc_cidr\n      azs = local.azs\n      private_subnets = [for k, v in local.azs: cidrsubnet(local.vpc_cidr, 4, k)]\n      public_subnets = [for k, v in local.azs: cidrsubnet(local.vpc_cidr, 8, k + 48)]\n      enable_nat_gateway = true\n      single_nat_gateway = true\n      public_subnet_tags = {\n        \"kubernetes.io/role/elb\" = 1\n      }\n      private_subnet_tags = {\n        \"kubernetes.io/role/internal-elb\" = 1\n        \"karpenter.sh/discovery\" = local.name\n      }\n    }\n    output vpc_id {\n        description = \"VPC ID\"\n        value = \"${module.vpc.vpc_id}\"\n    }\n    ```", "```\n\n    $ terraform init\n    $ terraform plan\n    $ terraform apply -auto-approve\n    ```", "```\n\n    Apply complete! Resources: 23 added, 0 changed, 0  destroyed.\n    Outputs:\n    vpc_id = \"vpc-1234567890\"\n    ```", "```\n\n    module \"eks\" {\n      source = \"terraform-aws-modules/eks/aws\"\n      version = \"~> 20.36\"\n      cluster_name = local.name\n      cluster_version = \"1.32\"\n      enable_cluster_creator_admin_permissions = true\n      cluster_endpoint_public_access = true\n      vpc_id = module.vpc.vpc_id\n      subnet_ids = module.vpc.private_subnets\n      eks_managed_node_groups = {\n        eks-mng = {\n          instance_types = [\"m5.large\",\"m6i.large\",\"m6a.large\",\"m7i.large\",\"m7a.large\"]\n          max_size = 3\n          desired_size = 2\n        }\n      }\n      node_security_group_tags = {\n        \"karpenter.sh/discovery\" = local.name\n      }\n    }\n    output \"configure_kubectl\" {\n      description = \"Configure kubectl\"\n      value = \"aws eks --region ${local.region} update-kubeconfig --name ${module.eks.cluster_name}\"\n    }\n    ```", "```\n\n    $ terraform init\n    $ terraform plan\n    $ terraform apply -auto-approve\n    ```", "```\n    Apply complete! Resources: 33 added, 0 changed, 0 destroyed.\n    Outputs:\n    configure_kubectl = \"aws eks --region us-west-2 update-kubeconfig --name eks-demo\"\n    vpc_id = \"vpc-1234567890\"\n    ```", "```\n    $ aws eks --region us-west-2 update-kubeconfig --name eks-demo\n    ```", "```\n\n    module \"eks_blueprints_addons\" {\n      source = \"aws-ia/eks-blueprints-addons/aws\"\n      version = \"~> 1.21\"\n      cluster_name = module.eks.cluster_name\n      cluster_endpoint = module.eks.cluster_endpoint\n      cluster_version = module.eks.cluster_version\n      oidc_provider_arn = module.eks.oidc_provider_arn\n      enable_aws_load_balancer_controller = true\n    ...\n    }\n    module \"karpenter\" {\n      source = \"terraform-aws-modules/eks/aws//modules/karpenter\"\n    ...\n    }\n    ```", "```\n\n    $ terraform init\n    $ terraform plan\n    $ terraform apply -auto-approve\n    ```", "```\n\n    $ kubectl get nodes -o wide\n    $ kubectl get pods -A -o wide\n    ```", "```\n\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-pod\nspec:\n  containers:\n  - name: nginx\n    image: nginx:latest\n    ports:\n    - containerPort: 80\n```", "```\n\nresource \"aws_ecr_repository\" \"my-llama\" {\n  name = \"my-llama\"\n  image_tag_mutability = \"MUTABLE\"\n}\noutput \"ecr_push_cmds\" {\n  description = \"Command to authenticate with ECR and push the container image.\"\n  value = <<EOT\n  aws ecr get-login-password --region ${local.region} | docker login --username AWS --password-stdin ${aws_ecr_repository.my-llama.repository_url}\n  docker tag my-llama ${aws_ecr_repository.my-llama.repository_url}\n  docker push ${aws_ecr_repository.my-llama.repository_url}\n  EOT\n}\n```", "```\n\n$ terraform plan\n$ terraform apply -auto-approve\n```", "```\n\n$ terraform output -raw ecr_push_cmds\n  aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin 123456789012.dkr.ecr.us-west-2.amazonaws.com/my-llama\n  docker tag my-llama 123456789012.dkr.ecr.us-west-2.amazonaws.com/my-llama\n  docker push 123456789012.dkr.ecr.us-west-2.amazonaws.com/my-llama\n```", "```\n\n$ kubectl create deploy my-llama --image 123456789012.dkr.ecr.us-west-2.amazonaws.com/my-llama\ndeployment.apps/my-llama created\n```", "```\n\n$ kubectl get deploy my-llama\nNAME       READY   UP-TO-DATE   AVAILABLE   AGE\nmy-llama   1/1     1            1           6m\n```", "```\n\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: my-llama-svc\n  name: my-llama-svc\n  annotations:\n    service.beta.kubernetes.io/aws-load-balancer-type: \"external\"\n    service.beta.kubernetes.io/aws-load-balancer-scheme: \"internet-facing\"\nspec:\n  ports:\n  - port: 80\n    protocol: TCP\n    targetPort: 5000\n  type: LoadBalancer\n  selector:\n    app: my-llama\n```", "```\n\n$ kubectl apply -f my-llama-svc.yaml\nservice/my-llama-svc created\n$ export NLB_URL=$(kubectl get svc my-llama-svc -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')\n$ echo $NLB_URL\n```", "```\n\n$ kubectl describe pod -l app=my-llama\n$ kubectl logs -f -l app=my-llama\n$ kubectl describe svc my-llama-svc\n```", "```\n\n$ curl -X POST http://$NLB_URL/predict -H \"Content-Type: application/json\" -d '{\"prompt\":\"Create a poem about humanity?\",\"sys_msg\":\"You are a helpful, respectful, and honest assistant. Always provide safe, unbiased, and positive responses. Avoid harmful, unethical, or illegal content. If a question is unclear or incorrect, explain why. If unsure, do not provide false information.\"}' | jq .\n```"]
- en: <st c="0">3</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2">Building a Recipe-Sharing Application</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="39">A</st> **<st c="42">web application</st>** <st c="57">is a</st> <st
    c="62">software program that is accessible from a web browser, such as Google
    Chrome or Mozilla Firefox, through the internet and can be as simple and informative
    as the example in</st> [*<st c="237">Chapter 2</st>*](B22051_02.xhtml#_idTextAnchor032)<st
    c="246">, where you made your CV available to end users, up to including complex
    business logic and critical data</st> <st c="352">management capabilities.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="376">A web application can be decomposed into two parts: the</st> **<st
    c="433">frontend</st>** <st c="441">and the</st> **<st c="450">backend</st>**<st
    c="457">. The frontend, visible to users, is commonly built using HTML, CSS, JavaScript,
    and modern frameworks such as React.js or Vue.js.</st> <st c="588">The backend
    will handle business logic, authentication, data processing, and communication
    with external services and databases, and is normally developed using programming
    languages such as Python, Java, or C#.</st> <st c="800">The communication between
    the frontend and the backend is done typically through an</st> **<st c="884">application
    programming interface</st>** <st c="917">(</st>**<st c="919">API</st>**<st c="922">),
    allowing developers to abstract the complexity and efficiently reuse functionality
    across</st> <st c="1016">different applications.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1039">In this chapter, you will work on an application for sharing recipes,
    where a user can create, delete, or read their recipes.</st> <st c="1166">Moreover,
    you will implement both a backend and a frontend to develop a fully functional</st>
    <st c="1255">web application.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1271">In summary, this chapter covers the following topics</st> <st c="1325">in
    order:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1334">What you are going to build – an application to</st> <st c="1383">share
    recipes</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1396">How you are going to build it – using S3 and CloudFront for the
    frontend, EC2 to host your API and DynamoDB as the data store for</st> <st c="1527">your
    recipes</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1539">Building it – through CloudFormation and using the</st> <st c="1591">AWS
    console</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1602">How to improve the solution – improve the monitoring and application
    logging, enforce secure protocols to access your application, and</st> <st c="1738">implement
    authentication</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1762">By the end of this chapter, you will have hands-on experience in
    building a dynamic web application on AWS, leveraging different services for specific
    purposes, and understanding the basics of frontend and</st> <st c="1969">backend
    development.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1989">Technical requirements</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2012">To build and deploy your own recipe-sharing application, you need
    to have access to an AWS account, and optionally a domain if you want to implement
    secure communication through HTTPS.</st> <st c="2198">It is important to recall
    that, as you will see from the chapter, we offer a second option configured with
    HTTP that does not require the ownership of</st> <st c="2349">a domain.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2358">Also, this book has a dedicated folder within its GitHub repository,
    where you can find the necessary code snippets to follow</st> <st c="2485">along:</st>
    [<st c="2492">https://github.com/PacktPublishing/AWS-Cloud-Projects/tree/main/chapter3/code</st>](https://github.com/PacktPublishing/AWS-Cloud-Projects/tree/main/chapter3/code)<st
    c="2569">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2570">Scenario</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2579">In the</st> <st c="2586">last chapter, you worked on a personal
    website to share your CV, which is already becoming popular among recruiters,
    and other peers are looking for similar ways to share their resumes.</st> <st
    c="2773">That is great for your professional life, and you start thinking about
    how cloud technologies could help you in your side projects and hobbies; one of
    those has to do with your</st> <st c="2950">cooking skills.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2965">You spend a lot of your free time creating recipes and reinventing
    desserts, and you usually write them down in a notebook.</st> <st c="3090">In
    parallel, you have started your own profile on social media, and you already have
    800,000 followers that react to the photos of your dishes and ask you for the
    recipes.</st> <st c="3262">Because you are getting so popular, friends and family
    have started calling you “the chef,” and often ask you for some suggestions for
    specific recipes that they have tried in</st> <st c="3438">the past.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3447">Up till now, you have had to go search in your recipe notebook,
    take a photo, and share it, but with time and the number of recipes you have authored,
    it is becoming unmanageable, and you need to think of</st> <st c="3653">an alternative.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3668">While getting familiar with cloud technologies, you start looking
    for alternatives to your current method of sharing recipes for your second cloud
    project, a project called Recipe</st> <st c="3849">Sharing Application.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3869">Requirements</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="3882">Before we start</st> <st c="3899">answering</st> *<st c="3909">how</st>*
    <st c="3912">we are going to solve this problem, it is important to clarify</st>
    *<st c="3976">what</st>* <st c="3980">we are going to build and structure it in
    a clear and concise list of requirements, as we introduced in</st> [*<st c="4085">Chapter
    1</st>*](B22051_01.xhtml#_idTextAnchor014) <st c="4094">and exemplified in</st>
    [*<st c="4114">Chapter 2</st>*](B22051_02.xhtml#_idTextAnchor032)<st c="4123">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4124">In this</st> <st c="4132">project, you want to develop a recipe-sharing
    application to provide a convenient platform for people to discover, share, and
    access different recipes.</st> <st c="4285">Unlike the previous chapter, this
    application will need to handle dynamic content inherent to recipe management.</st>
    <st c="4398">There are different key personas that will access</st> <st c="4448">your
    application:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="4465">Platform admin</st>**<st c="4480">: The platform owner, who
    may want to create a new recipe, maintain it, or even</st> <st c="4561">delete
    it.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="4571">End users/consumers</st>**<st c="4591">: The end user, who uses
    the platform for accessing a specific recipe, and should not be able to create,
    change, or delete</st> <st c="4715">any record.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="4726">Actual implementation should be the last step of application development,
    and an accurate and detailed requirement-gathering exercise is key to defining
    a clear</st> <st c="4888">development plan.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4905">The technologies you use, the services you adopt, and the architecture
    you design should be the consequence of the requirements, technical and non-technical,
    that you list to achieve</st> <st c="5089">your objective.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5104">Business requirements</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="5126">After the</st> <st c="5137">market study you perform, and the amount
    of likes and comments you get during the week, you conclude that people tend to
    spend more time cooking on Fridays and Saturdays, especially for dinnertime.</st>
    <st c="5335">You also analyze the geo-distribution of your users, and 85% are
    located in the US, 12% in Europe, and the remaining 3% are spread across</st>
    <st c="5473">the globe.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5483">You are approached by a food delivery service that wants to sign
    an ads contract with you, but they only agree if you reach a total of 100,000
    active users in your application.</st> <st c="5661">Until then, you will have
    no revenue stream for</st> <st c="5709">your application.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5726">Based on these findings and the potential revenue opportunity,
    you have identified the following key</st> <st c="5828">business requirements:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5850">Reach 100,000 users globally before the end of</st> <st c="5898">the
    year</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="5906">Increase presence</st> <st c="5925">in Europe</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="5934">Become cost-effectiveness to support growth without</st> <st c="5987">significant
    cost</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="6003">Functional requirements</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="6027">Your</st> <st c="6032">application should serve two different profiles:</st>
    *<st c="6082">admins</st>* <st c="6088">and</st> *<st c="6093">end users</st>*<st
    c="6102">. For the initial project, you will start with two different pages,</st>
    `<st c="6170">/user</st>` <st c="6175">for the end users and</st> `<st c="6198">/admin</st>`
    <st c="6204">for admins, to support the two</st> <st c="6236">different personas.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6255">You also aim to create a seamless experience through a simple UI.</st>
    <st c="6322">Additionally, you want your application to be responsive and support
    different devices, such as tablets, mobile phones,</st> <st c="6442">and laptops.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6454">One crucial step for describing the functional requirements is
    creating a mockup of the interface, as shown in</st> *<st c="6566">Figures 3.1</st>*<st
    c="6577">,</st> *<st c="6579">3.2</st>*<st c="6582">,</st> <st c="6584">and</st>
    *<st c="6588">3.3</st>*<st c="6591">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1 – UI mockup home page](img/B22051_03_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="6646">Figure 3.1 – UI mockup home page</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6678">Let us break down the different functionalities</st> <st c="6727">and
    interfaces:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="6742">/</st>``<st c="6744">user</st>`<st c="6748">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="6750">Access the list of</st> <st c="6769">recipe titles</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="6782">Ability to choose a specific recipe and access all</st> <st c="6834">the
    details</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="6845">Responsive</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 3.2 – The User Page UI mockup](img/B22051_03_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="7025">Figure 3.2 – The User Page UI mockup</st>
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="7061">/</st>``<st c="7063">admin</st>`<st c="7068">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="7070">Access the list of</st> <st c="7089">recipe titles</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="7102">Ability to</st> <st c="7114">delete recipes</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="7128">Support</st> <st c="7137">recipe creation</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="7152">Control</st> <st c="7161">the maximum amount of ingredients, steps,
    and</st> <st c="7207">recipes supported</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="7224">Responsive</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 3.3 – The Admin Page UI mockup](img/B22051_03_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="7414">Figure 3.3 – The Admin Page UI mockup</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7451">Non-functional requirements</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="7479">Your</st> <st c="7484">application needs to handle spiky access
    patterns since expected utilization should only increase close to meal times.</st>
    <st c="7604">Also, you plan to increase your user base in Europe in the upcoming
    months, so you need to prepare your application to serve users globally.</st>
    <st c="7745">Also, cost-effectiveness is crucial since you do not have an income
    stream from your application.</st> <st c="7843">To summarize, here is what</st>
    <st c="7870">you need:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7879">Global distribution to serve users spread across</st> <st c="7929">the
    globe</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="7938">Auto-scaling to handle the spiky</st> <st c="7972">usage pattern</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="7985">Cost-effectiveness</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="8004">Technical requirements</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="8027">As stated</st> <st c="8037">in the</st> *<st c="8045">Functional
    requirements</st>* <st c="8068">section, you want to support multiple devices,
    so your application needs to be responsive to keep a consistent and good user
    experience.</st> <st c="8206">So, for the frontend, you want a framework that
    simplifies responsiveness and accelerates the development process.</st> <st c="8321">For
    the backend, you want to adopt Python as the programming language due to its simplicity,
    versatility, and large ecosystem of libraries and frameworks</st> <st c="8474">as
    well as the support for the AWS SDK.</st> <st c="8515">Besides all the interaction
    with AWS services, you will need to develop your API and for that, you choose
    FastAPI, a modern web framework built in Python and designed to be highly performant,
    user friendly, and lightweight.</st> <st c="8739">Here’s what we</st> <st c="8754">will
    use:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8763">Modern frontend framework –</st> <st c="8792">React.js</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="8800">Backend programming language –</st> <st c="8832">Python</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="8838">FastAPI as the framework for</st> <st c="8868">API development</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="8883">Data requirements</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="8901">In your</st> <st c="8909">application, you are dealing with recipes,
    and there are several ways to store them.</st> <st c="8995">Recipes can be stored
    as single documents, and there is no relationship between records or items.</st>
    <st c="9093">You do not expect to run any complex queries over your data, and
    instead, you want to implement simple operations to do</st> <st c="9213">the following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="9227">List the recipes</st>**<st c="9244">: Present a list of the</st>
    <st c="9269">recipes created.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="9285">Delete a recipe</st>**<st c="9301">: If an admin no longer wants
    a specific recipe to be part of the portfolio, it should be possible to delete</st>
    <st c="9411">the item.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="9420">Create a recipe</st>**<st c="9436">: Create a new recipe to
    share with</st> <st c="9473">the users.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="9483">Also, you are aiming for a highly scalable data store that requires
    minimum to no maintenance effort, ideally a management service.</st> <st c="9616">As
    the structure of your recipe document, you designed</st> `<st c="9671">recipe_example.json</st>`<st
    c="9690">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: <st c="9764">Considering the average size of a recipe containing 10 steps and
    10 ingredients, you reach a value of 1 KB per recipe.</st> <st c="9884">In terms
    of read operations, assuming that for 20,000 concurrent users</st> <st c="9955">during
    peak time, you have 20,000 concurrent read operations, and you want to ensure
    performance consistency even during</st> <st c="10076">peak hours.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10087">Architecture patterns</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="10109">The</st> <st c="10114">AWS Architecture Center offers a comprehensive
    collection of resources crafted by cloud architecture experts from AWS Partners,
    with solutions that are tested and recommended and can be used as a starting point.</st>
    <st c="10326">For this project, AWS presents an architecture pattern that fully
    applies to your scenario:</st> *<st c="10418">Deploy a React-based single-page
    application to Amazon S3 and CloudFront</st>* <st c="10490">(</st>[<st c="10492">https://docs.aws.amazon.com/prescriptive-guidance/latest/patterns/deploy-a-react-based-single-page-application-to-amazon-s3-and-cloudfront.html</st>](https://docs.aws.amazon.com/prescriptive-guidance/latest/patterns/deploy-a-react-based-single-page-application-to-amazon-s3-and-cloudfront.html)<st
    c="10635">).</st> <st c="10639">Reading this prescriptive guidance will give you
    an overview of the process you</st> <st c="10719">will follow.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10731">To dive deep into each AWS service, the AWS documentation is probably
    the best source of information.</st> <st c="10834">Each service has its own documentation,
    and it is highly recommended to have a look and go through it to grasp both basic
    to more advanced concepts.</st> <st c="10983">Moreover, it is important to understand
    the role of AWS in your projects.</st> <st c="11057">AWS will support, host, and
    help you with your requirements, but generic web development knowledge is essential.</st>
    <st c="11170">Before proceeding with the implementation, it’s crucial to understand
    some key concepts related to your application architecture.</st> <st c="11300">For
    example, you should be able to</st> <st c="11335">answer the</st> <st c="11346">following
    questions:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11366">What is a</st> **<st c="11377">single-page application</st>**
    <st c="11400">(</st>**<st c="11402">SPA</st>**<st c="11405">) and how does it
    differ from traditional</st> <st c="11448">web applications?</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="11465">What is the role of an API in your application?</st> <st c="11514">Why
    do you</st> <st c="11525">need one?</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="11534">For the first question, a</st> **<st c="11561">SPA</st>** <st
    c="11564">is a web application that loads a single HTML page and dynamically updates
    that page as the user interacts with the app.</st> <st c="11686">In contrast to
    traditional multi-page applications, where each user action requires loading a
    new page from the server, SPAs load all the necessary HTML, CSS, and JavaScript
    files initially, and subsequent interactions occur seamlessly through JavaScript
    and requests to</st> <st c="11957">the server.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11968">Ensure that you can answer the remaining ones to build solid knowledge
    before jumping</st> <st c="12055">into AWS.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12064">Architecture</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="12077">By now, you</st> <st c="12089">should be familiar with the technologies
    you are going to use, and you may already have a small proof of concept working
    locally.</st> <st c="12220">The next step is to create your diagram with the architecture
    that will support your project.</st> *<st c="12314">Figure 3</st>**<st c="12322">.4</st>*
    <st c="12324">is an abstract diagram referencing the main layers that compose
    your full architecture and is a good starting point for</st> <st c="12445">architecture
    design.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.4 – Abstract architecture](img/B22051_03_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="12531">Figure 3.4 – Abstract architecture</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12565">End users interact with the presentation layer to get the frontend
    application, and perform requests to the compute layer, but never access the data
    layer directly.</st> <st c="12731">Instead, the compute layer is responsible for
    performing the data operations through</st> <st c="12816">an API.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12823">Designing your API is crucial to ensure you use the right model
    to perform all the data operations you will need, and both data and functional
    requirements should be taken into consideration.</st> *<st c="13016">Figure 3</st>**<st
    c="13024">.5</st>* <st c="13026">represents your initial API structure based on
    the</st> <st c="13078">analysis performed.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.5 – API structure](img/B22051_03_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="13167">Figure 3.5 – API structure</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="13193">Here’s</st> <st c="13201">the breakdown:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="13215">GET /recipes</st>`<st c="13228">: This gets the list</st> <st
    c="13250">of recipes.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="13261">GET /health</st>`<st c="13273">: This is a simple health</st>
    <st c="13300">check endpoint.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="13315">DELETE /recipes/{recipe_id}</st>`<st c="13343">: This deletes
    a specific recipe with a</st> <st c="13384">defined ID.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="13395">POST /recipes</st>`<st c="13409">: This creates a new</st> <st
    c="13431">recipe record.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="13445">With all this</st> <st c="13459">in mind, you should be able to
    proceed with the complete architecture with the respective AWS services.</st>
    <st c="13564">For your frontend, like the solution used in the previous chapter,
    you will use Amazon S3 and Amazon CloudFront to serve your application.</st> <st
    c="13703">The compute layer is implemented in Amazon EC2, and that’s where you
    plan to deploy your API.</st> <st c="13797">For the data layer, after considering
    all the requirements, you end up choosing Amazon DynamoDB as your data store.</st>
    <st c="13913">For simplicity, you will group both the compute and data layers
    in a single layer called the backend, and by the end, your architecture diagram
    should look like</st> *<st c="14074">Figure 3</st>**<st c="14082">.6</st>*<st
    c="14084">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.6 – AWS architecture for your recipe-sharing application](img/B22051_03_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="14191">Figure 3.6 – AWS architecture for your recipe-sharing application</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14256">With the</st> <st c="14266">high-level architecture in place,
    let’s dive deeper into the specific AWS services you’ve chosen to build this solution
    and understand how they align with the requirements</st> <st c="14438">defined
    earlier.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14454">AWS services</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="14467">AWS has</st> <st c="14476">available, at the time of this writing,
    more than 200 services to support different purposes and with different levels
    of management.</st> <st c="14610">Choosing AWS services is an important exercise,
    and the choices should be driven by the pre-defined requirements and not the opposite.</st>
    <st c="14745">In this section, you will explore the services adopted in your solution,
    and understand how they align with the requirements defined.</st> <st c="14879">Parts
    of the services have already been covered in the previous chapters.</st> <st c="14953">So,
    to avoid content duplication, we will briefly mention the advantages of the current
    use case and reference the chapter where you can find a</st> <st c="15097">detailed
    explanation.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15118">Amazon S3</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="15128">Your</st> <st c="15133">frontend is a SPA built in React.js, and
    it translates into static files, such as HTML, CSS, and JavaScript, that should
    be treated as objects.</st> <st c="15278">As explained in</st> [*<st c="15294">Chapter
    2</st>*](B22051_02.xhtml#_idTextAnchor032)<st c="15303">, S3 is a scalable, highly
    available, and durable object storage service provided by AWS, and overall, a
    cost-effective solution for hosting static websites,</st> <st c="15461">including
    SPAs.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15476">Important note</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15491">S3 is designed to guarantee the 11 9s of data durability.</st>
    <st c="15550">This means that, if you store 10,000 objects in S3, you could expect
    to lose at most one of those objects every 10 million years due to hardware failures
    or other potential causes of</st> <st c="15733">data loss.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15743">If you want to dive deep into Amazon S3 architecture, we recommend
    watching the</st> *<st c="15824">AWS re:Invent 2023 - Dive deep on Amazon S3</st>*
    <st c="15867">session:</st> [<st c="15877">https://www.youtube.com/watch?v=sYDJYqvNeXU</st>](https://www.youtube.com/watch?v=sYDJYqvNeXU)<st
    c="15920">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15921">Amazon CloudFront</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="15939">You plan for</st> <st c="15953">your application to serve users
    globally and want to ensure a secure access protocol with HTTPS not supported
    in S3\.</st> <st c="16070">These are just two of many reasons to include CloudFront
    as part of your architecture, and for a more detailed explanation of the service
    and its advantages, we recommend checking the</st> *<st c="16254">AWS services</st>*
    <st c="16266">section in</st> [*<st c="16278">Chapter 2</st>*](B22051_02.xhtml#_idTextAnchor032)<st
    c="16287">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16288">Amazon Virtual Private Cloud (VPC)</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**<st c="16323">Amazon VPC</st>** <st c="16334">allows</st> <st c="16342">you
    to create a logically isolated virtual network in the AWS cloud.</st> <st c="16411">It
    enables you to define a virtual networking environment where you can launch and</st>
    <st c="16494">manage AWS resources, such as</st> **<st c="16524">Amazon Elastic
    Compute Cloud (EC2)</st>** <st c="16558">instances, in a secure and controlled
    manner.</st> <st c="16605">As part of the VPC configuration, you can define your
    network topology with multiple subnets, which can be public or private, meaning
    with or without internet access, respectively, to segregate your traffic and increase
    the</st> <st c="16829">security posture.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16846">Amazon EC2</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="16857">From the</st> <st c="16866">technical requirements, you decide
    to develop your own API, and now you need a service to deploy and host it.</st>
    <st c="16977">Amazon EC2 allows you to provision virtual machines (instances)
    inside your VPC to run your applications, or, in this case, your API.</st> <st
    c="17111">EC2 offers a wide range of instance types with different configurations
    of CPU, memory, storage, and networking capacity, allowing you to choose the right
    instance type for your specific application requirements, ensuring optimal performance</st>
    <st c="17353">and cost-effectiveness.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17376">EC2 offers different pricing models that bring additional cost-effectiveness
    if you have a clear view of your requirements, as well as an on-demand option
    with a pure pay-as-you-go model, which is what you will choose for</st> <st c="17599">this
    project.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17612">If you want to learn</st> <st c="17634">more about EC2 pricing
    models and how they work, you can read about it in the AWS</st> <st c="17716">documentation:</st>
    [<st c="17731">https://docs.aws.amazon.com/whitepapers/latest/how-aws-pricing-works/amazon-ec2.html</st>](https://docs.aws.amazon.com/whitepapers/latest/how-aws-pricing-works/amazon-ec2.html)<st
    c="17815">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17816">Application Load Balancer (ALB)</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="17848">An ALB is a</st> <st c="17861">fully managed load-balancing</st>
    <st c="17890">solution designed to distribute traffic across multiple targets,
    namely EC2 instances.</st> <st c="17977">Being a managed solution, it is highly
    scalable by design and automatically scales according to the traffic load.</st>
    <st c="18091">Moreover, and considering your requirements, ALB brings two</st>
    <st c="18151">main advantages:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="18167">Health checking</st>**<st c="18183">: Every</st> <st c="18191">load
    balancer needs to have at least one target group, and you can configure health
    checks to your targets to ensure traffic is only sent to healthy targets, avoiding
    a bad user experience and increasing the resilience and fault-tolerance levels
    of</st> <st c="18441">your application.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="18458">SSL termination</st>**<st c="18474">: ALBs</st> <st c="18481">support
    SSL termination, offloading the computational burden of encryption and decryption
    from your</st> <st c="18582">EC2 instances.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="18596">ALBs also</st> <st c="18607">integrate with AWS Web Application
    Firewall out of the box, and this would bring additional security against common
    attacks, such as</st> <st c="18740">SQL injection,</st> **<st c="18755">cross-site
    scripting</st>** <st c="18775">(</st>**<st c="18777">XSS</st>**<st c="18780">),
    and other web</st> <st c="18798">application vulnerabilities.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="18826">Amazon DynamoDB</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="18842">Choosing your</st> <st c="18856">database solution should be driven
    by your data and requirements.</st> <st c="18923">For this project, you need to
    store recipes as single documents.</st> <st c="18988">Also, you have defined requirements
    around query consistency and high performance, even with many concurrent</st>
    <st c="19097">query operations.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="19114">Amazon DynamoDB</st>** <st c="19130">is a fully</st> <st c="19141">managed
    NoSQL database service, more specifically a key-value and document store that
    delivers single-digit millisecond performance at any scale.</st> <st c="19288">By
    choosing DynamoDB, you will leverage the native high availability due to data
    replication performed under the hood with a pay-as-you-go model and automatic
    scaling to handle spiky workloads, like the case of</st> <st c="19499">your application.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19516">Important note</st>
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="19531">DynamoDB is by nature a distributed service, but this should
    not be a blocker even if you need high consistency.</st> <st c="19645">DynamoDB
    offers two types of consistency models: eventually consistent (default) and strongly
    consistent.</st> <st c="19751">With the last option, you can ensure high consistency
    and data integrity by ensuring the data returned is always up</st> <st c="19867">to
    date.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19875">If you want to know more about the story of DynamoDB, the lessons
    learned after the 10th anniversary, and the future plans, check out this article
    from Amazon</st> <st c="20035">Science:</st> [<st c="20044">https://www.amazon.science/latest-news/amazons-dynamodb-10-years-later</st>](https://www.amazon.science/latest-news/amazons-dynamodb-10-years-later)<st
    c="20114">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20115">AWS CloudFormation</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="20134">In</st> [*<st c="20138">Chapter 1</st>*](B22051_01.xhtml#_idTextAnchor014)<st
    c="20147">, we briefly</st> <st c="20160">touched on AWS CloudFormation as a tool
    to provision infrastructure, but considering this is the first chapter where it
    will be extensively used, we will dive a bit deeper into it and explain it in</st>
    <st c="20358">more detail.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="20370">CloudFormation</st>** <st c="20385">is an</st> **<st c="20392">Infrastructure
    as Code</st>** <st c="20414">(</st>**<st c="20416">IaC</st>**<st c="20419">) service
    that allows you to define</st> <st c="20456">and provision</st> <st c="20469">AWS
    resources in a declarative way, described as template documents that can be written
    either in YAML or JSON.</st> <st c="20582">Like any IaC tool, CloudFormation enables
    infrastructure automation in its life cycle, from creation and update to deletion.</st>
    <st c="20707">It supports drift detection to identify any changes that may be
    performed outside the template, which can cause inconsistencies.</st> <st c="20836">Making
    manual changes to resources managed by CloudFormation is not recommended because
    it can result in configuration drift, where the actual state of the resources
    differs from what is defined in</st> <st c="21034">the template.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21047">One of the key benefits of CloudFormation is its ability to manage
    and provision resources as a single unit, known as a stack.</st> <st c="21175">This
    stack can include resources from various AWS services, such as EC2 instances,
    VPCs, S3 buckets, and more.</st> <st c="21286">CloudFormation takes care of creating
    and configuring these resources in the correct order, based on the dependencies
    defined in</st> <st c="21415">the template.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21428">Coding the solution</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="21448">By now, you</st> <st c="21460">should have a solid understanding
    of the core services used, the reasons behind the services chosen, and most importantly,
    how everything aligns with your requirements.</st> <st c="21630">You are finally
    able to proceed with the</st> <st c="21671">actual implementation.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21693">Cloning the project</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="21713">If you are</st> <st c="21724">following along with the previous
    chapters, you should have already cloned the repository associated with this book,
    but if you just arrived, start by cloning the repo, or optionally download the
    repository as a</st> <st c="21936">ZIP file.</st> <st c="21947">The repository
    is structured with folders for each chapter, and all the code for this chapter
    is located</st> <st c="22052">in</st> `<st c="22055">chapter3/code</st>`<st c="22068">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="22069">Inside the</st> `<st c="22081">chapter3/code</st>` <st c="22094">folder,
    you will find three subfolders, as shown in</st> *<st c="22147">Figure 3</st>**<st
    c="22155">.7</st>*<st c="22157">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="22159">frontend</st>`<st c="22167">: This contains the code for</st>
    <st c="22197">your frontend</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="22210">backend</st>`<st c="22218">: This contains the code for</st>
    <st c="22248">your API</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="22256">platform</st>`<st c="22265">: This contains two different CloudFormation
    templates to deploy the main infrastructure for</st> <st c="22359">your application</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 3.7 – The Chapter 3 folder structure](img/B22051_03_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="22415">Figure 3.7 – The</st> [<st c="22432">Chapter 3</st>](B22051_03.xhtml#_idTextAnchor054)
    <st c="22441">folder structure</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="22458">Why do you have two different</st> <st c="22489">templates available?</st>
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="22509">A SPA has two types of connections: one to retrieve the frontend
    resources from CloudFront, and another to communicate with the backend through
    JavaScript API requests from the browser, as represented in</st> *<st c="22714">Figure
    3</st>**<st c="22722">.6</st>*<st c="22724">.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="22725">While CloudFront automatically provides HTTPS for delivering your
    frontend resources, your API requires additional configuration.</st> <st c="22856">To
    secure the API with HTTPS, you’ll need to own a domain and issue a certificate
    to</st> <st c="22941">prove ownership.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="22957">We understand that you may not own one domain right now nor want
    to purchase one, and that should not be a blocker to deploy your application,
    so we’ve got</st> <st c="23114">you covered!</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="23126">We’ve worked on two different options for this section, and thus
    the two different templates in the</st> `<st c="23227">platform</st>` <st c="23235">folder.</st>
    <st c="23244">The following table maps the options with the templates, and will
    help you choose the</st> <st c="23330">right path:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **<st c="23341">Description</st>** | **<st c="23353">CloudFormation Template</st>**
    | **<st c="23377">Recommended</st>** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **<st c="23389">Option 1</st>** | <st c="23398">You either own a domain or
    are willing to purchase one to configure HTTPS communication to</st> <st c="23490">your
    API</st> | `<st c="23498">ch3-https-complete.yaml</st>` | <st c="23522">Yes</st>
    |'
  prefs: []
  type: TYPE_TB
- en: '| **<st c="23526">Option 2</st>** | <st c="23535">You want to test the application
    without owning or purchasing</st> <st c="23598">a domain</st> | `<st c="23606">ch3-http.yaml</st>`
    | <st c="23620">No</st> |'
  prefs: []
  type: TYPE_TB
- en: <st c="23623">Table 3.1 – Mapping between the CloudFormation template and the
    option you want to follow</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="23713">A detailed explanation</st> <st c="23737">of the differences between
    HTTP and HTTPS is beyond the scope of this book, but if you want to know more,
    you can read the following</st> <st c="23870">article:</st> [<st c="23879">https://aws.amazon.com/compare/the-difference-between-https-and-http/</st>](https://aws.amazon.com/compare/the-difference-between-https-and-http/)<st
    c="23948">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="23949">The steps you follow depend on the option you choose.</st> <st
    c="24004">To simplify the process, steps specific to option 1 will be marked as</st>
    *<st c="24074">(Option 1 Only)</st>*<st c="24089">, and steps for option 2 will
    be marked as</st> *<st c="24132">(Option 2 Only)</st>*<st c="24147">. Steps without
    any marking apply to both options.</st> <st c="24198">Consider that, even if you
    choose option 2, it’s recommended to read the HTTPS configuration steps for option
    1 to gain</st> <st c="24318">more knowledge.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="24333">Important note</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="24348">While this application and CloudFormation templates are designed
    to work in any AWS region, if you choose option 1, you must use the same region
    for creating the certificate and deploying the solution.</st> <st c="24551">This
    is because option 1 requires creating a certificate using AWS Certificate Manager,
    which is a</st> <st c="24650">regional service.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="24667">Section 1 – DNS configuration and certificate issuing (option
    1 only)</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="24737">To</st> <st c="24741">configure HTTPS, you need to own a domain
    and prove ownership by obtaining a certificate, and this section covers configuring
    your DNS service and issuing a certificate for</st> <st c="24914">your domain.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="24926">Domains are purchased from domain registrars, which manage the
    reservation and registration of internet domain names.</st> <st c="25045">In AWS,
    Route 53 can serve as both your domain registrar for</st> <st c="25106">purchasing
    domains as well as a DNS service for managing them.</st> <st c="25169">Alternatively,
    you can choose popular third-party registrars, such as GoDaddy or Namecheap, among
    others, to purchase</st> <st c="25287">your domain.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="25299">DNS configuration in Route 53</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="25329">For this</st> <st c="25339">example, we just bought a domain from
    a third-party provider, and we will demonstrate how to set up DNS management in
    Route 53 for a domain bought outside</st> <st c="25494">Route 53.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="25503">From the console, go to the Route 53 service by typing</st> `<st
    c="25559">route 53</st>` <st c="25567">in the search bar, as shown in</st> *<st
    c="25599">Figure 3</st>**<st c="25607">.8</st>*<st c="25609">, or you can access
    it directly through the following</st> <st c="25663">link:</st> [<st c="25669">https://console.aws.amazon.com/route53</st>](https://console.aws.amazon.com/route53)<st
    c="25707">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.8 – Console access to Route 53 service](img/B22051_03_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="25733">Figure 3.8 – Console access to Route 53 service</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="25780">On the left pane of the Route 53 console, do</st> <st c="25826">the
    following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="25840">Click on</st> **<st c="25850">Hosted Zones</st>**<st c="25862">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="25863">Then, select</st> **<st c="25877">Create</st>** **<st c="25884">Hosted
    Zone</st>**<st c="25895">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="25896">Fill the</st> `<st c="25967">awscloudprojects.site</st>`<st c="25988">).</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="25991">Select</st> **<st c="25999">Public Hosted Zone</st>** <st c="26017">as</st>
    <st c="26021">the type.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="26030">Press</st> **<st c="26037">Create</st>** **<st c="26044">Hosted
    Zone</st>**<st c="26055">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="26056">Your configuration window should look like</st> *<st c="26100">Figure
    3</st>**<st c="26108">.9</st>*<st c="26110">, except for the</st> **<st c="26127">Domain</st>**
    **<st c="26134">name</st>** <st c="26138">field.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.9 – Route 53 hosted zone creation form](img/B22051_03_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="26955">Figure 3.9 – Route 53 hosted zone creation form</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="27002">If you</st> <st c="27009">return to the</st> **<st c="27024">Hosted
    Zones</st>** <st c="27036">menu, you should be able to see your domain listed.</st>
    <st c="27089">To access the nameservers associated with your hosted zone, follow</st>
    <st c="27156">these steps:.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="27169">Click on the domain</st> <st c="27190">you created.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="27202">Take note of the associated nameservers as you will need them
    to configure the</st> <st c="27282">DNS next.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="27291">You should have four nameserver values as part of your hosted
    zone details as shown in</st> *<st c="27379">Figure 3</st>**<st c="27387">.10</st>*<st
    c="27390">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.10 – Hosted zone details](img/B22051_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="27599">Figure 3.10 – Hosted zone details</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="27632">The following steps involve updating the nameservers for your
    domain, which may vary depending on your domain registrar.</st> <st c="27754">Regardless
    of your registrar, AWS provides step-by-step guides for configuring nameservers
    with popular</st> <st c="27858">registrars:</st> [<st c="27870">https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/migrate-dns-domain-in-use.html</st>](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/migrate-dns-domain-in-use.html)<st
    c="27958">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="27959">Important note</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="27974">A</st> **<st c="27977">hosted zone</st>** <st c="27988">in Amazon
    Route 53 is a container that holds all the DNS records and routing configurations
    for a specific domain name and its subdomains.</st> <st c="28128">It allows you
    to manage and route traffic to your AWS resources or external resources based
    on your defined</st> <st c="28236">routing policies.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="28253">Certificate issuing</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="28273">You will now proceed</st> <st c="28295">with the certificate-issuing
    process with the</st> **<st c="28341">AWS Certificate Manager</st>** <st c="28364">(</st>**<st
    c="28366">ACM</st>**<st c="28369">) service.</st> <st c="28381">From the console,
    go to the ACM service</st> <st c="28421">at</st> [<st c="28424">https://console.aws.amazon.com/acm</st>](https://console.aws.amazon.com/acm)<st
    c="28458">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.11 – Console access to the ACM service](img/B22051_03_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="28488">Figure 3.11 – Console access to the ACM service</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="28535">To issue a certificate for your domain, you need to follow</st>
    <st c="28595">these steps:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="28607">Click on the</st> **<st c="28621">Request a</st>** **<st c="28631">certificate</st>**
    <st c="28642">button.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="28650">On the</st> **<st c="28658">Certificate Type</st>** <st c="28674">screen,
    select the</st> **<st c="28694">Request a public certificate</st>** <st c="28722">option
    and</st> <st c="28734">click</st> **<st c="28740">Next</st>**<st c="28744">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="28745">Fill out the required information on the form.</st> <st c="28793">Most
    fields can be left with their default values, but for the</st> `<st c="28981">app.example.com</st>`<st
    c="28996">,</st> `<st c="28998">api.example.com</st>`<st c="29013">).</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<st c="29101">*.example.com</st>`<st c="29114">).</st>'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="29117">Ensure that</st> **<st c="29130">Validation method</st>** <st
    c="29147">is set to</st> **<st c="29158">DNS validation</st>**<st c="29172">,
    as recommended</st> <st c="29189">by AWS.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="29196">Click</st> **<st c="29203">Request</st>**<st c="29210">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*<st c="29211">Figure 3</st>**<st c="29220">.12</st>* <st c="29223">depicts
    the</st> <st c="29235">final state of the form, containing all the</st> <st c="29280">necessary
    fields.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.12 – Certificate request form](img/B22051_03_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="30092">Figure 3.12 – Certificate request form</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="30130">After requesting the certificate, you will see it listed with
    the</st> **<st c="30197">pending validation</st>** <st c="30215">status.</st>
    <st c="30224">To validate the certificate and prove domain ownership, you need
    to create a DNS record in your</st> <st c="30320">hosted zone.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="30332">If your domain is managed by Route 53, you can click</st> **<st
    c="30386">Create Records in Route 53</st>** <st c="30412">for an easier setup,
    as you can see in</st> *<st c="30452">Figure 3</st>**<st c="30460">.13</st>*<st
    c="30463">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.13 – Certificate validation with a DNS record](img/B22051_03_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="30655">Figure 3.13 – Certificate validation with a DNS record</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="30709">Before proceeding, you need to wait until the status changes to</st>
    **<st c="30774">Issued</st>** <st c="30780">as in</st> *<st c="30787">Figure 3</st>**<st
    c="30795">.14</st>*<st c="30798">. If everything is well configured, it should
    not take more than 10 minutes, but it can take up to a couple of hours, as per
    the AWS</st> <st c="30931">documentation (</st>[<st c="30946">https://aws.amazon.com/certificate-manager/faqs/</st>](https://aws.amazon.com/certificate-manager/faqs/)<st
    c="30995">).</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.14 – ACM certificates list](img/B22051_03_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="31272">Figure 3.14 – ACM certificates list</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="31307">The</st> <st c="31312">final step is to note down</st> `<st c="31339">certificateARN</st>`<st
    c="31353">, which you’ll need to input as a parameter in the</st> <st c="31404">CloudFormation
    template:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="31428">Navigate to the ACM console in the region where you created</st>
    <st c="31489">the certificate.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="31505">Select</st> **<st c="31513">List Certificates</st>** <st c="31530">from
    the</st> <st c="31540">left pane.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="31550">Locate your “Issued” certificate, as shown in</st> *<st c="31597">Figure
    3</st>**<st c="31605">.14</st>*<st c="31608">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="31609">Click on the certificate, and under</st> **<st c="31646">Certificate
    status</st>**<st c="31664">, you’ll</st> <st c="31673">find</st> **<st c="31678">ARN</st>**<st
    c="31681">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.15 – Certificate ARN access](img/B22051_03_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="31848">Figure 3.15 – Certificate ARN access</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="31884">Important note</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="31899">In AWS, an ARN is a unique identifier for an AWS service.</st>
    <st c="31958">It follows this</st> <st c="31974">format:</st> `<st c="31982">arn:partition:service:region:account-id:resource-type/resource-id</st>`<st
    c="32047">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="32048">Section 2 – Solution deployment</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="32080">Now, you</st> <st c="32090">will deploy the infrastructure to
    support your application, both the frontend and backend, with the CloudFormation
    templates available in your</st> `<st c="32233">chapter3/code</st>` <st c="32246">folder.</st>
    <st c="32255">Depending on the option you choose, you pick a different template,
    and it will also create different components, as you can see in the</st> <st c="32390">next
    table.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **<st c="32401">Option 1</st>****<st c="32410">(</st>****<st c="32412">HTTPS
    configured)</st>** | **<st c="32429">Option 2</st>****<st c="32438">(</st>****<st
    c="32440">HTTP configured)</st>** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **<st c="32456">Template</st>** | `<st c="32465">ch3-https-complete.yaml</st>`
    | `<st c="32489">ch3-http.yaml</st>` |'
  prefs: []
  type: TYPE_TB
- en: '| **<st c="32503">Frontend</st>** | <st c="32512">CloudFront</st> <st c="32524">and
    S3</st> | <st c="32530">CloudFront</st> <st c="32542">and S3</st> |'
  prefs: []
  type: TYPE_TB
- en: '| **<st c="32548">Backend</st>** |'
  prefs: []
  type: TYPE_TB
- en: <st c="32556">1 VPC</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="32562">2</st> <st c="32565">public subnets</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="32579">2</st> <st c="32582">private subnets</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="32597">1 private</st> <st c="32608">EC2 instance</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="32620">1 ALB</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="32626">1</st> <st c="32629">NAT gateway</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="32640">EC2 instance role with minimum permissions to interact with DynamoDB</st>
    <st c="32710">recipes table</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="32723">1 VPC</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="32729">1</st> <st c="32732">public subnets</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="32746">1 public</st> <st c="32756">EC2 instance</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="32768">EC2 instance role with minimum permissions to interact with DynamoDB</st>
    <st c="32838">recipes table</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| **<st c="32851">Data store</st>** | <st c="32862">DynamoDB</st> | <st c="32871">DynamoDB</st>
    |'
  prefs: []
  type: TYPE_TB
- en: <st c="32880">Table 3.2 – Resource creation for each CloudFormation template</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="32943">From the console, go to the CloudFormation service at</st> [<st
    c="32998">https://console.aws.amazon.com/cloudformation/</st>](https://console.aws.amazon.com/cloudformation/)<st
    c="33044">. If you are following option 1, ensure you choose the same region you
    did for the certificate in the drop-down region list located in</st> <st c="33178">the
    upper-right corner of the console, as shown in</st> *<st c="33230">Figure 3</st>**<st
    c="33238">.16</st>*<st c="33241">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.16 – Console access to CloudFormation](img/B22051_03_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="33275">Figure 3.16 – Console access to CloudFormation</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="33321">To proceed with stack creation, follow</st> <st c="33361">these
    steps:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="33373">Click on</st> **<st c="33383">Create Stack</st>**<st c="33395">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="33396">In the</st> **<st c="33404">Prerequisite – Prepare Template</st>**
    <st c="33435">section, select</st> **<st c="33452">Choose an</st>** **<st c="33462">existing
    template</st>**<st c="33479">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="33480">In the</st> **<st c="33488">Specify Template</st>** <st c="33504">section,
    choose</st> **<st c="33521">Upload a</st>** **<st c="33530">template file</st>**<st
    c="33543">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="33544">Click on</st> **<st c="33554">Choose file</st>**<st c="33565">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="33566">Select the template from the</st> `<st c="33596">chapter3/code/platform</st>`
    <st c="33618">folder according to the option you</st> <st c="33654">are following.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="33668">Click</st> **<st c="33675">Next</st>**<st c="33679">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="33680">Your</st> **<st c="33686">Create Stack</st>** <st c="33698">window
    should look like</st> *<st c="33723">Figure 3</st>**<st c="33731">.17</st>*<st
    c="33734">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.17 – The CloudFormation Create stack form](img/B22051_03_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="34810">Figure 3.17 – The CloudFormation Create stack form</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="34860">The next step is</st> <st c="34878">to configure the parameters
    in your CloudFormation stack.</st> <st c="34936">Parameters allow you to create
    dynamic and environment-specific resource configurations, promoting better security
    and maintainability of your infrastructure as code.</st> <st c="35103">In</st>
    *<st c="35106">Table 3.3</st>*<st c="35115">, we explain the purpose of each parameter
    and which ones apply to your</st> <st c="35187">chosen option.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '| **<st c="35201">Parameter</st>** | **<st c="35211">Description</st>** | **<st
    c="35223">Option 1</st>****<st c="35232">(HTTPS</st>** **<st c="35240">configured)</st>**
    | **<st c="35251">Option 2</st>****<st c="35260">(HTTP</st>** **<st c="35267">configured)</st>**
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `<st c="35278">InstanceType</st>` | <st c="35291">Choose the EC2 instance
    type from the four available options; the default is the free</st> <st c="35378">tier,</st>
    `<st c="35384">t3.micro</st>`<st c="35392">.</st> | <st c="35393">Yes</st> | <st
    c="35397">Yes</st> |'
  prefs: []
  type: TYPE_TB
- en: '| `<st c="35401">LatestAmiId</st>` | <st c="35413">The</st> **<st c="35418">Amazon
    Machine Image</st>** <st c="35438">(</st>**<st c="35440">AMI</st>**<st c="35443">)
    to be used in your EC2 instance.</st> <st c="35479">By default, it will use the
    most</st> <st c="35512">recent AMI.</st> | <st c="35523">Yes</st> | <st c="35527">Yes</st>
    |'
  prefs: []
  type: TYPE_TB
- en: '| `<st c="35531">GitRepoURL</st>` | <st c="35542">The code repo URL (</st><st
    c="35562">e.g.,</st> [<st c="35569">https://github.com/packtpublishing/aws-cloud-projects</st>](https://github.com/packtpublishing/aws-cloud-projects)<st
    c="35622">).</st> | <st c="35625">Yes</st> | <st c="35629">Yes</st> |'
  prefs: []
  type: TYPE_TB
- en: '| `<st c="35633">ALBCertificateArn</st>` | <st c="35651">The ARN of your recently</st>
    <st c="35677">created certificate.</st> | <st c="35697">Yes</st> | <st c="35701">No</st>
    |'
  prefs: []
  type: TYPE_TB
- en: <st c="35704">Table 3.3 – CloudFormation template parameters</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="35751">In</st> *<st c="35755">Figure 3</st>**<st c="35763">.18</st>*<st
    c="35766">, you</st> <st c="35771">can see an example of the expected state of
    the</st> `<st c="35907">ALBCertificateArn</st>` <st c="35924">does</st> <st c="35930">not
    exist.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.18 – Stack parameters in CloudFormation](img/B22051_03_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="36545">Figure 3.18 – Stack parameters in CloudFormation</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="36593">Proceed</st> <st c="36601">further, acknowledge the creation of</st>
    `<st c="36639">IAMPolicy</st>` <st c="36648">for controlling API access to the
    DynamoDB table, and</st> <st c="36703">click</st> **<st c="36709">Submit</st>**<st
    c="36715">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.19 – CloudFormation stack submission](img/B22051_03_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="37159">Figure 3.19 – CloudFormation stack submission</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="37204">The resources for your application are now being provisioned.</st>
    <st c="37267">You need to wait until the stack status changes to</st> **<st c="37318">CREATE_COMPLETE</st>**<st
    c="37333">. You should be able to see a status like</st> *<st c="37375">Figure
    3</st>**<st c="37383">.20</st>*<st c="37386">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.20 – CloudFormation stack created status](img/B22051_03_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="37452">Figure 3.20 – CloudFormation stack created status</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="37501">In our case, it</st> <st c="37518">took around 10 minutes for
    the stack to be deployed, but take into consideration that this</st> <st c="37609">may
    vary.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="37618">Section 3 – Additional configurations (option 1 only)</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="37672">You</st> <st c="37677">are almost there!</st> <st c="37695">You
    just need one additional configuration to have your application up and running,
    which is the creation of a subdomain record in your hosted zone pointing to the
    ALB.</st> <st c="37864">This will also enable a friendly API name such as</st>
    `<st c="37914">api.<your_domain></st>`<st c="37931">. Follow</st> <st c="37940">these
    steps:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="37952">Go to the</st> **<st c="37963">Route</st>** **<st c="37969">53</st>**
    <st c="37971">console.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="37980">Select your domain’s</st> <st c="38002">hosted zone.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="38014">Click on</st> **<st c="38024">Create record</st>**<st c="38037">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="38038">In the</st> `<st c="38129">api</st>`<st c="38132">).</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="38135">For</st> **<st c="38140">Record type</st>**<st c="38151">, select</st>
    **<st c="38160">A -</st>** **<st c="38164">IPv4 address</st>**<st c="38176">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="38177">Click on the toggle under</st> **<st c="38204">Record name</st>**
    <st c="38215">to</st> <st c="38219">enable</st> **<st c="38226">Alias</st>**<st
    c="38231">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="38232">In the</st> **<st c="38240">Route traffic to</st>** <st c="38256">dropdown,
    select</st> **<st c="38274">Alias to Application and Classic</st>** **<st c="38307">Load
    Balancer</st>**<st c="38320">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="38321">Choose the AWS region where your application</st> <st c="38367">is
    deployed.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="38379">In the</st> **<st c="38387">Choose Load Balancer</st>** <st c="38407">section,
    select the ALB associated with your</st> <st c="38453">CloudFormation stack.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="38474">If</st> <st c="38478">you have multiple load balancers in the
    selected region, you can find the correct load balancer DNS name by checking the</st>
    **<st c="38599">Outputs</st>** <st c="38606">section of your CloudFormation stack
    in the</st> <st c="38651">CloudFormation console.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="38674">Click the</st> **<st c="38685">Create records</st>** <st c="38699">button
    to save the</st> <st c="38719">new record.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="38730">Your record creation form should look like</st> *<st c="38774">Figure
    3</st>**<st c="38782">.21</st>*<st c="38785">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.21 – The Route 53 alias record for your ALB](img/B22051_03_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="39316">Figure 3.21 – The Route 53 alias record for your ALB</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="39368">Before you move to the next section, take note of the DNS record
    you created, as you will need to use it in the</st> <st c="39481">next section.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="39494">Section 4 – Frontend configuration and deployment</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="39544">The</st> <st c="39549">CloudFormation stack has already deployed
    the required services for the frontend, and the only pending step is to copy the
    application files to S3\.</st> <st c="39697">But prior to that, you will need
    to modify some configurations in your application.</st> <st c="39781">Since React
    development is not the primary focus of this book, we’ve created the config file
    with parameters to customize</st> <st c="39903">your application.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="39920">Navigate to the</st> `<st c="39937">…/frontend/src/configs/configs.tsx</st>`
    <st c="39971">file within the project folder, where the configuration file</st>
    <st c="40033">is located.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="40044">The config file is composed of seven</st> <st c="40082">configuration
    variables:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="40106">CONFIG_MAX_INGREDIENTS</st>`<st c="40129">: Max ingredients
    in</st> <st c="40151">a recipe</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="40159">CONFIG_MAX_STEPS</st>`<st c="40176">: Max steps in</st> <st
    c="40192">a recipe</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="40200">CONFIG_MAX_RECIPES</st>`<st c="40219">: Max</st> <st c="40226">recipes
    supported</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="40243">CONFIG_USER_PAGE_TITLE</st>`<st c="40266">: Title for</st> <st
    c="40279">user page</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="40288">CONFIG_ADMIN_PAGE_TITLE</st>`<st c="40312">: Title for</st>
    <st c="40325">admin page</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="40335">CONFIG_appConfig</st>`<st c="40352">: Object with page title
    and icon (icons</st> <st c="40394">in</st> `<st c="40397">/frontend/public/</st>`<st
    c="40414">)</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="40416">API_URL</st>`<st c="40423">:</st> <st c="40426">API endpoint</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 3.22 – Example of a configuration file (config.tsx)](img/B22051_03_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="40872">Figure 3.22 – Example of a configuration file (config.tsx)</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="40930">All the configs besides</st> `<st c="40955">API_URL</st>` <st
    c="40962">are optional and serve solely to apply small application customizations,
    so we will focus now on the API endpoint configuration.</st> `<st c="41092">API_URL</st>`<st
    c="41099">, as the name</st> <st c="41113">suggests, is the endpoint used to send
    requests, and depending on the option you are following, you need to get this
    value from</st> <st c="41241">different places.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="41258">Solution for option 1</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="41280">In this option, you should have by now created the Route 53 record
    with an alias record for your ALB, and that’s the value you should use for the</st>
    `<st c="41427">API_URL</st>` <st c="41434">parameter.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="41445">For example, in our case, as per</st> *<st c="41479">Figure 3</st>**<st
    c="41487">.22</st>*<st c="41490">, we created an</st> `<st c="41506">api.awscloudprojects.site</st>`
    <st c="41531">record, so</st> `<st c="41543">API_URL</st>` <st c="41550">should
    be set to</st> `<st c="41568">https://api.awscloudprojects.site</st>` <st c="41601">(don’t
    forget to include</st> <st c="41627">the protocol).</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="41641">Solution for option 2</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="41663">If you are following this option, it means you don’t have a DNS
    record created for your API, nor an ALB provisioned.</st> <st c="41781">Moreover,
    because you didn’t set up HTTPS, the protocol used to access your API is HTTP.</st>
    <st c="41870">So, in this case, you need to provide the EC2</st> <st c="41916">public
    DNS.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="41927">You can access the EC2 running instances through</st> [<st c="41977">https://console.aws.amazon.com/ec2/home?-Instances:instanceState=running</st>](https://console.aws.amazon.com/ec2/home?-Instances:instanceState=running)<st
    c="42049">, but optionally, you can access the DNS of the newly deployed instance
    in the CloudFormation</st> `<st c="42180">APIDNSName</st>` <st c="42190">output.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="42198">After setting the</st> `<st c="42217">API_URL</st>` <st c="42224">config,
    you can save the file and proceed to the build process, which involves several
    steps to convert the code into a production-ready bundle that can be served to
    web browsers.</st> <st c="42405">In our example, we used</st> `<st c="42429">npm</st>`
    <st c="42432">as the package manager, so you need to run the</st> <st c="42480">following
    command:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: <st c="42529">The result is a folder with the files needed to be copied to our
    S3 buckets.</st> <st c="42607">The folder name may vary but it is typically</st>
    `<st c="42652">build/</st>` <st c="42658">or</st> `<st c="42662">dist/</st>` <st
    c="42667">and is created at the frontend root, as you can see in</st> *<st c="42723">Figure
    3</st>**<st c="42731">.23</st>*<st c="42734">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.23 – Folder structure after build command](img/B22051_03_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="42794">Figure 3.23 – Folder structure after build command</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="42844">Now, the last</st> <st c="42859">step is to copy the build folder
    to S3, with the</st> <st c="42908">following instructions:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="43093">frontend-chapter-3-</st>` <st c="43112">followed by a random
    string of characters (e.g.,</st> `<st c="43162">frontend-chapter-3-XXXXX</st>`<st
    c="43186">).</st> <st c="43190">Click on its name to</st> <st c="43211">open it.</st>'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="43219">Add files from the</st> `<st c="43239">dist</st>` <st c="43243">folder.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="43251">Inside the S3 bucket, click on the</st> **<st c="43287">Upload</st>**
    <st c="43293">button.</st> <st c="43302">This will allow you to upload files from
    your local machine to the</st> <st c="43369">S3 bucket.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<st c="43458">dist</st>` <st c="43462">folder on your local machine, select
    all the files inside the folder, and confirm.</st> <st c="43546">Next, on the
    S3 console, click on</st> `<st c="43603">dist</st>` <st c="43607">folder on your
    local machine, select the</st> `<st c="43649">assets</st>` <st c="43655">folder,</st>
    <st c="43664">and confirm.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="43676">Optionally, you can just drag the content to the S3 window, but
    despite the method you use, your S3 upload window should look like</st> *<st c="43808">Figure
    3</st>**<st c="43816">.24</st>*<st c="43819">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.24 – Frontend files uploaded to S3](img/B22051_03_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="44189">Figure 3.24 – Frontend files uploaded to S3</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="44232">Note</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="44237">The filenames are auto-generated by the build process, so probably,
    your names are different than the ones in the</st> <st c="44352">preceding figure.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="44369">Just make</st> <st c="44379">sure that you have the</st> <st c="44403">following
    files:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="44419">i</st>``<st c="44421">ndex.html</st>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="44430">i</st>``<st c="44432">ndex-XXXXXX.css</st>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="44447">i</st>``<st c="44449">ndex-XXXXXX.js</st>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="44463">Static files you may have included in your application, for</st>
    <st c="44524">example, images</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="44539">After that, at the bottom, click</st> <st c="44573">on</st> **<st
    c="44576">Upload</st>**<st c="44582">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="44583">You’ve just finalized all the deployment and configuration of
    your application, and now is the time to</st> <st c="44687">test it.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="44695">Section 5 – Testing and exploring your application</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '<st c="44746">This last</st> <st c="44757">section is all about testing and
    exploring your application, and</st> <st c="44822">we divided it into two parts:
    the backend and the frontend.</st> <st c="44882">Let’s start with</st> <st c="44899">the
    backend!</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="44911">Testing and exploring the backend</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="44945">By now, you</st> <st c="44957">should have an API running in an
    EC2 instance, and once again, depending on the option you’ve chosen, you need
    to use different URLs for testing and the value you’ve used for the</st> `<st
    c="45137">API_URL</st>` <st c="45144">parameter in the</st> `<st c="45162">config.tsx</st>`
    <st c="45172">file you updated in the previous section.</st> <st c="45215">To
    test your API, you can send a request to one of the endpoints, and if everything
    is working properly, you should get a response and a success</st> <st c="45360">status
    code.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="45372">To perform the tests, you</st> <st c="45399">can define your endpoint
    as</st> `<st c="45427">{API_URL}/{ROUTE}</st>`<st c="45444">, where</st> `<st
    c="45452">API_URL</st>` <st c="45459">is the URL you used in the</st> `<st c="45487">config.tsx</st>`
    <st c="45497">file in the previous section.</st> <st c="45528">Here,</st> `<st
    c="45534">ROUTE</st>` <st c="45539">is the specific route you want</st> <st c="45571">to
    reach.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="45580">There are different tools to perform the requests, and it is up
    to you to choose the tool you want to use, but if you prefer a visual tool, you
    can use, for example, Postman, or instead go with a programmatic approach by running
    a</st> `<st c="45812">curl</st>` <st c="45816">command.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="45825">In the following code, you can see an example of a</st> `<st c="45877">curl</st>`
    <st c="45881">command issued to our API endpoint at the</st> `<st c="45924">/recipes</st>`
    <st c="45932">route to get the list of</st> <st c="45958">recipes created:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: <st c="46160">Regardless of the method you use, if you try to do a</st> `<st
    c="46214">GET</st>` <st c="46217">request to the</st> `<st c="46233">/recipes</st>`
    <st c="46241">endpoint, you should get an empty object because you haven’t created
    any recipe yet, and a</st> `<st c="46333">200</st>` <st c="46336">status code
    of success, which proves the functioning of</st> <st c="46393">your API.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="46402">Testing and exploring the frontend</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="46437">For the</st> <st c="46446">final test, you will explore the frontend
    application and ensure all the functionalities you defined in the</st> `<st c="46554">requirements</st>`
    <st c="46566">section</st> <st c="46574">work</st> <st c="46580">as intended.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="46592">To access your frontend, you need to do</st> <st c="46633">the
    following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="46647">Go to the</st> **<st c="46658">CloudFront</st>** <st c="46668">console.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="46677">Select the distribution you created with the CloudFormation stack.</st>
    <st c="46745">(If you have more than one distribution and you are not sure which
    one is the one created by the</st> <st c="46842">stack, open the CloudFormation</st>
    <st c="46873">service, go to the stack you created earlier, and check the output
    value</st> <st c="46946">for</st> `<st c="46950">CloudFrontDistributionId</st>`<st
    c="46974">.)</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="46976">Copy the URL of the distribution (it should follow the</st> <st
    c="47032">structure</st> `<st c="47042">https://XXXXXX.cloudfront.net/</st>`<st
    c="47072">).</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="47075">If you prefer, you can also get this value from the</st> `<st
    c="47188">CloudFrontDistributionUrl</st>`<st c="47213">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="47214">If you copy and paste the URL into the browser, you should be
    able to access your newly created application and navigate between the</st> **<st
    c="47348">Users</st>** <st c="47353">and</st> **<st c="47358">Admin</st>** <st
    c="47363">pages.</st> <st c="47371">If you try to access the</st> **<st c="47396">Admin</st>**
    <st c="47401">page, you should get the same experience as</st> *<st c="47446">Figure
    3</st>**<st c="47454">.25</st>*<st c="47457">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.25 – The Recipe Sharing Application Admin page](img/B22051_03_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="47616">Figure 3.25 – The Recipe Sharing Application Admin page</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="47671">Because you have not created any recipes yet, the list should
    be empty, so try creating some recipes, and try to see the difference experience
    between the</st> **<st c="47827">Admin</st>** <st c="47832">and</st> **<st c="47837">User</st>**
    <st c="47841">pages to ensure the right functional requirements</st> <st c="47892">were
    fulfilled.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="47907">If you followed option 1, you should be able to see the recipes
    being added, deleted, and listed as expected, but for option 2, there are some
    additional steps</st> <st c="48068">to perform.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="48079">Enabling HTTP communication in your browser (option 2 only)</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="48139">Despite</st> <st c="48148">security being a constant concern,
    modern browsers already bring protections to make it easier to maintain a secure
    posture on the internet.</st> <st c="48289">In this example, we are using Google
    Chrome, but this also applies to other browsers, such as</st> <st c="48383">Mozilla
    Firefox.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="48399">If you look closer, on the left of our URL there is an alert saying</st>
    **<st c="48468">Not Secure</st>**<st c="48478">, as in</st> *<st c="48486">Figure
    3</st>**<st c="48494">.26</st>*<st c="48497">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.26 – Recipe Sharing Application Not Secure warning](img/B22051_03_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="48582">Figure 3.26 – Recipe Sharing Application Not Secure warning</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="48641">This happens because HTTP is not a secure protocol, and your application
    is trying to make HTTP requests to your API.</st> <st c="48760">Moreover, your
    application running in a CloudFront domain is making requests to a different domain
    over HTTP (an EC2 instance domain), which commonly</st> <st c="48910">looks suspicious.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="48927">For deeper troubleshooting, you can open the console inside the
    developer tools, and see that we are getting the</st> <st c="49041">following
    error:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.27 – Console error example](img/B22051_03_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="49384">Figure 3.27 – Console error example</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="49419">Only for demo purposes, you can instruct your bro</st><st c="49469">wser
    to overpass its default behaviors and accept HTTP connections, but it is very
    important to highlight that while it may serve for this exercise, it is not a
    best practice and should not be</st> <st c="49663">done regularly.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="49678">If you want to skip this blocker, you can do</st> <st c="49724">the
    following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="49738">Click on the red</st> **<st c="49756">Not Secure</st>** <st c="49766">notice/</st>**<st
    c="49774">View site information</st>** <st c="49796">button on the left of the</st>
    <st c="49823">URL bar.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="49831">Go to the</st> <st c="49842">site’s</st> **<st c="49849">Settings</st>**<st
    c="49857">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="49858">Scroll down to</st> **<st c="49874">Insecure content</st>**<st
    c="49890">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="49891">Change from</st> **<st c="49904">Block (Default)</st>** <st c="49919">to</st>
    **<st c="49923">Allow</st>**<st c="49928">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="49929">These instructions</st> <st c="49948">apply to Google Chrome and
    may vary depending on the version or the browser used.</st> <st c="50031">After
    that, your application should work properly and requests will</st> <st c="50099">be
    authorized.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="50113">Testing and exploring your DynamoDB table</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="50155">The last part to</st> <st c="50172">test is the integration between</st>
    <st c="50204">your API and your data layer in DynamoDB, where your recipe data
    is stored.</st> <st c="50281">If you want to explore resource creation and deletion,
    follow</st> <st c="50343">these steps:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="50355">Go to the</st> **<st c="50366">DynamoDB</st>** <st c="50374">page
    in your</st> <st c="50388">AWS account.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="50400">Click on</st> **<st c="50410">Explore items</st>** <st c="50423">on
    the</st> <st c="50431">left menu.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="50441">Select your</st> <st c="50454">recipes table.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="50468">List the items in your table while you test the operations on
    your application for creating and deleting recipes.</st> <st c="50583">These operations
    should be reflected in your DynamoDB</st> **<st c="50637">Explore</st>** **<st
    c="50645">items</st>** <st c="50650">console.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*<st c="50659">Figure 3</st>**<st c="50668">.28</st>* <st c="50671">shows how
    recipes are stored in DynamoDB after recipe creation.</st> <st c="50736">As an
    exercise, compare the structure of your DynamoDB items with the requirements defined
    at the beginning of</st> <st c="50847">the chapter.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.28 – Exploring DynamoDB recipes table](img/B22051_03_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="51229">Figure 3.28 – Exploring DynamoDB recipes table</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="51275">Section 6 – Cleaning up</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="51299">Although</st> <st c="51309">we tried to adopt services that are
    included in the AWS Free Tier, and the majority of the services adopted are serverless
    and auto-scale based on demand, if you leave your application running, you may
    incur costs in the future, so this section explains how to delete all the resources
    in your AWS account associated with</st> <st c="51631">this project.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="51644">One of the main advantages of using IaC, especially in this CloudFormation
    example, is the streamlining of infrastructure provision</st> <st c="51777">and
    deletion.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="51790">To delete all the resources created, you just need to perform</st>
    <st c="51853">two steps:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="51993">frontend-chapter-3-</st>` <st c="52012">followed by a random
    string of characters (</st><st c="52056">e.g.,</st> `<st c="52063">frontend-chapter-3-XXXXX</st>`<st
    c="52087">)).</st>'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="52091">Click on</st> **<st c="52101">Empty</st>** <st c="52106">– this
    will delete all the content inside</st> <st c="52149">your bucket.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.29 – The process of emptying an S3 bucket](img/B22051_03_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="52474">Figure 3.29 – The process of emptying an S3 bucket</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="52524">Delete the</st>** **<st c="52536">CloudFormation stack</st>**<st
    c="52556">:</st>'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="52558">Go to the CloudFormation console in your</st> <st c="52599">AWS
    account.</st>
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="52611">Select the stack</st> <st c="52629">you created.</st>
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="52641">Click</st> <st c="52648">on</st> **<st c="52651">Delete</st>**<st
    c="52657">.</st>
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="52658">Note</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="52663">If you don’t see your CloudFormation stack on the list, try to
    change the region in the upper-right corner and select the region where you deployed
    your application.</st> <st c="52830">After that, you should proceed with the deletion
    process described and represented in</st> *<st c="52916">Figure 3</st>**<st c="52924">.30</st>*<st
    c="52927">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.30 – CloudFormation stack deletion](img/B22051_03_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="53348">Figure 3.30 – CloudFormation stack deletion</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="53391">Cleaning up the certificate and DNS management configuration (option
    1)</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="53463">If you followed</st> <st c="53479">the first option and created
    the</st> <st c="53513">certificate as well as configured the DNS, you need to
    perform these</st> <st c="53582">additional steps:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="53599">Delete</st>** **<st c="53607">the certificate</st>**<st c="53622">:</st>'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="53624">Go to the</st> **<st c="53634">Certificate Manager</st>** <st
    c="53653">console in your</st> <st c="53670">AWS account.</st>
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="53682">Select the certificate</st> <st c="53706">you created.</st>
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="53718">Click</st> <st c="53725">on</st> **<st c="53728">Delete</st>**<st
    c="53734">.</st>
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.31 – Certificate deletion](img/B22051_03_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="54046">Figure 3.31 – Certificate deletion</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="54080">Note</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="54085">If you don’t see your certificate on the list, try to change the
    region in the upper-right corner and select the region where you deployed your
    application.</st> <st c="54243">After that, you should proceed with the deletion
    process described and represented in</st> *<st c="54329">Figure 3</st>**<st c="54337">.31</st>*
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="54340">Clean up the DNS</st>**<st c="54357">: If you want to keep
    managing the DNS in Route 53, you can just</st> <st c="54423">delete</st> <st
    c="54430">the record you created for</st> <st c="54457">your API:</st>'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="54466">Go to the</st> **<st c="54477">Route 53</st>** <st c="54485">console
    in your</st> <st c="54502">AWS account.</st>
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="54514">Select</st> **<st c="54522">Hosted Zones</st>** <st c="54534">on
    the</st> <st c="54542">left pane.</st>
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="54552">Select the hosted zone you created for</st> <st c="54592">your
    domain.</st>
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="54604">Select the record for</st> <st c="54627">the API.</st>
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="54635">Click on</st> **<st c="54645">Delete record</st>**<st c="54658">.</st>
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.32 – DNS record cleanup](img/B22051_03_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="55098">Figure 3.32 – DNS record cleanup</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="55130">Additionally, if you want to stop using Route 53 for your domain,
    delete the hosted zone in Route 53 and update the nameservers with your domain
    registrar to point to your new</st> <st c="55307">DNS service.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="55319">Future work</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="55331">Congratulations, you</st> <st c="55353">have a fully functional
    web application to store and share recipes!</st> <st c="55421">But for all the
    projects you develop, it is crucial to keep in mind that there are always points
    of improvement for your architectures, and you should always conduct a regular
    review to understand the improvement points.</st> <st c="55642">That’s what you
    are going to</st> <st c="55671">do now.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="55678">Using secure protocols</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="55701">It’s</st> <st c="55707">clear why HTTP is not a good option.</st>
    <st c="55744">So, if you followed option 2, the first improvement you could focus
    on is to migrate to option 1 and configure HTTPS for</st> <st c="55865">API communication.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="55883">Infrastructure auto-scaling</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="55911">By</st> <st c="55915">now, regardless of the option you followed,
    you have one EC2 instance supporting your backend, but what happens if the load
    increas</st><st c="56046">es?</st> <st c="56051">A lack of compute resources brings
    a bad user experience and can lead to instance failure, so how can you cope with
    a</st> <st c="56169">failed instance?</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="56185">Architecting with failure in mind is the path for resilient applications.</st>
    <st c="56260">So, it is always a good practice to ask ourselves, what happens
    if this component fails?</st> <st c="56349">In our case, what happens if our EC2
    instance with the API fails, for example, due to extra load?</st> <st c="56447">To
    ensure resilience and scalability, you should</st> <st c="56496">automate API
    provisioning using, for example, AWS</st> **<st c="56546">Auto Scaling</st>**
    **<st c="56559">groups</st>** <st c="56565">(</st>**<st c="56567">ASGs</st>**<st
    c="56571">).</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="56574">An ASG automatically provisions and terminates EC2 instances based
    on defined metrics, such as average CPU usage.</st> <st c="56689">You can create
    an AMI, which is a pre-configured virtual machine image that includes all the
    necessary configurations and code to run your backend, and associate it with the
    ASG.</st> <st c="56868">To have some boundaries on the number of instances to
    provision, you could set a minimum and maximum instance count, say four instances
    as the upper limit, and be sure you will never pass that limit.</st> <st c="57068">By
    monitoring the instance state, the ASG will launch new instances from the AMI
    when the metric exceeds a threshold and terminate instances when the metric falls
    below</st> <st c="57237">another threshold.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="57255">This approach provides auto-healing by replacing unhealthy instances
    and automatic scaling based on the defined metric, making the API resilient</st>
    <st c="57401">and scalable.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="57414">Managed hosting and CI/CD</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="57440">During</st> <st c="57448">this chapter, you experienced the building
    process that involves changing the application locally, building it and copying
    the files to the S3 bucket, which is very error prone.</st> <st c="57626">Also,
    while, by now, you are the only developer working on the application, it is common
    to have a team of developers working together, and the current deployment method
    is challenging</st> <st c="57811">for col</st><st c="57818">laboration.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="57830">AWS offers a</st> <st c="57843">service that already manages both
    hosting and</st> **<st c="57890">continuous integration and continuous deployment</st>**
    <st c="57938">(</st>**<st c="57940">CI/CD</st>**<st c="57945">) pipelines</st>
    <st c="57957">that simplifies the process of building, deploying, and hosting
    modern SPAs like your recipe-sharing application.</st> <st c="58072">With Amplify,
    you can connect your code repository (e.g., GitHub, AWS CodeCommit) and configure
    a CI/CD pipeline that builds, tests, and deploys your application whenever changes
    are pushed to the reposit</st><st c="58276">ory.</st> <st c="58282">For hosting,
    Amplify leverages S3 and CloudFront, similar to the setup you have now, so you
    would keep benefiting from all the advantages mentioned in the</st> *<st c="58437">AWS
    services</st>* <st c="58449">section earlier in</st> <st c="58469">this chapter.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="58482">Authentication</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="58497">When you</st> <st c="58507">made the requests to your API, you
    did not need to use any authentication mechanism.</st> <st c="58592">It means
    that anyone in the world, just with the endpoint URL, could perform requests,
    create recipes, and delete them, which is not ideal.</st> <st c="58732">Implementing
    authentication into your application is crucial for ensuring the security and
    privacy of your data, especially when dealing with</st> <st c="58874">sensitive
    data.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="58889">Amazon Cognito</st>** <st c="58904">is an</st> <st c="58911">AWS
    service that simplifies the process of adding user authentication and authorization
    to your web and mobile applications.</st> <st c="59036">It acts as a user identity
    provider, allowing you to manage user sign-up, sign-in, and access control, among
    other features.</st> <st c="59161">There will be more on this in the</st> <st
    c="59195">next chapter.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="59208">Logging and monitoring</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="59231">You can only act on</st> <st c="59251">something that you measure,
    and with the current architecture, you do not have any visibility on what is happening
    in your application.</st> <st c="59388">How many accesses are you getting?</st>
    <st c="59423">Where are your users located?</st> <st c="59453">Were there any
    errors in the last</st> <st c="59487">24 hours?</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="59496">Although</st> <st c="59506">sometimes used interchangeably, monitoring
    and logging are two different, but complementary, concepts.</st> **<st c="59609">Logging</st>**
    <st c="59616">involves recording historical events, errors, and activities that
    occur within your application, while</st> **<st c="59720">monitoring</st>** <st
    c="59730">focuses on collecting and analyzing data about the performance, health,
    and</st> <st c="59807">operational state.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="59825">As a part of the AWS services portfolio, you can find CloudWatch,
    a comprehensive monitoring and logging solution that breaks down into two services:
    CloudWatch Logs for logging and</st> <st c="60007">CloudWatch Metrics for monitoring.</st>
    <st c="60043">By</st> <st c="60045">leveraging these services, we could get insights
    into our application’s behavior, performance,</st> <st c="60141">and health.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="60152">So, as an improvement, you could ship your application logs to
    CloudWatch Logs, as well as create a monitoring dashboard with metrics from all
    your application components, including CloudFront, S3, EC2, and DynamoDB.</st>
    <st c="60370">This would provide you with a holistic view of your application
    and give you the tools to</st> <st c="60460">analyze it.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="60471">Caching</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="60479">Recipes</st> <st c="60487">are created once, accessed many times,
    and are not supposed to change often, being a great candidate for data caching.</st>
    <st c="60607">If you analyze your current setup, every time a user refreshes the
    page or selects a recipe, there is a request being sent and a read operation being
    performed in your database, and this could be improved both from a performance
    as well as a</st> <st c="60849">cost perspective.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="60866">DynamoDB Accelerator</st>** <st c="60887">(</st>**<st c="60889">DAX</st>**<st
    c="60892">) is a</st> <st c="60900">fully managed, clustered in-memory cache for
    DynamoDB.</st> <st c="60955">It is designed to improve the read performance of
    DynamoDB by caching frequent queries and responses.</st> <st c="61057">DAX is
    compatible with the DynamoDB API, which means you can integrate it with your existing
    applications without making significant code changes.</st> <st c="61204">But this
    is not the</st> <st c="61224">only option.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="61236">For the cache layer, you could use any caching technology, such
    as Redis or Memcached, which are available as a managed solution with</st> <st
    c="61371">Amazon ElastiCache.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="61390">These are just six of many examples you could find for future
    work in your application, so our challenge to you is to try to find other options
    and always ask yourself: what can I improve in my</st> <st c="61585">current architecture?</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="61606">We will leave with an example of an improved version of our application
    considering the future work mentioned before, depicted in</st> *<st c="61737">Figure
    3</st>**<st c="61745">.33</st>*<st c="61748">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.33 – Final architecture](img/B22051_03_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="61891">Figure 3.33 – Final architecture</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="61923">Compared to</st> <st c="61936">the initial architecture shown
    in</st> *<st c="61970">Figure 3</st>**<st c="61978">.6</st>*<st c="61980">, this
    new version already includes part of the future work proposed.</st> <st c="62050">On
    the top, CloudWatch will bring monitoring capabilities and give you more visibility
    of your application, help you understand the errors that occurred in the past,
    and, most importantly, act in a timely manner during an event.</st> <st c="62279">As
    explained in the chapter, this architecture follows the security best practices
    and allows only HTTPS as the access protocol for your application.</st> <st c="62429">For
    that, you configure your domain in Route 53 and issue a certificate to prove your
    ownership</st> <st c="62525">of it.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="62531">For your data layer, and taking into consideration that recipes
    are usually stable and do not get many changes after being published, you adopted
    DAX as the caching layer to improve the</st> <st c="62717">user experience by
    getting up to a 10 times performance improvement – from milliseconds to microseconds
    to get</st> <st c="62829">an item.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="62837">Summary</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="62845">In this chapter, you practiced the framework introduced in</st>
    [*<st c="62905">Chapter 1</st>*](B22051_01.xhtml#_idTextAnchor014) <st c="62914">for
    architecture design.</st> <st c="62940">Compared to the previous chapter, you
    now have a more robust application that handles dynamic content, and you ended
    up with a fully functional recipe-sharing application, which can be used as a
    starting point and applied to any project you</st> <st c="63181">think of.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="63190">You had the opportunity to experience the build and deployment
    process of a SPA to AWS using S3 and CloudFront, which can serve thousands</st>
    <st c="63329">of users.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="63338">You explored new AWS services, such as DynamoDB, EC2, and ALB.</st>
    <st c="63402">You also learned the power of IaC with CloudFormation.</st> <st
    c="63457">Additionally, you saw how to configure HTTPS with a custom domain associated
    with an ALB, and why HTTP is</st> <st c="63563">not recommended.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="63579">Lastly, you explored possible improvements to your application
    to make it more scalable, cost-effective,</st> <st c="63685">and secure.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="63696">In the next chapter, you will take your current recipe-sharing
    application to the next level and understand how to architect an application solely
    with</st> <st c="63849">serverless technologies.</st>
  prefs: []
  type: TYPE_NORMAL

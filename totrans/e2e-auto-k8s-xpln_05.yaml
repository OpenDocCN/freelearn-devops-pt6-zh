- en: '*Chapter 3*: Automating Infrastructure with Crossplane'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第三章*：使用 Crossplane 自动化基础设施'
- en: It is time to stop being abstract about ideas and deep-dive into details. Starting
    with this chapter, we will go on a hands-on journey to implement what we have
    learned and explore different Crossplane concepts at the same time. Trying out
    the examples given in this book will ensure that we have the ideas and experience
    to practice modern infrastructure engineering in our day-to-day jobs. This chapter
    will specifically cover the detailed architecture of Crossplane and its out-of-the-box
    features.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候不再仅仅抽象地讨论理念，而是深入细节了。从这一章开始，我们将进行一场实践之旅，实施我们所学的内容，并同时探索不同的 Crossplane 概念。在本书中给出的示例将确保我们掌握了现代基础设施工程的理念和经验，并能在日常工作中加以实践。本章将特别详细介绍
    Crossplane 的架构及其开箱即用的功能。
- en: 'The following are the topics covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题如下：
- en: Understanding Custom Resource Definitions and custom controllers
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解自定义资源定义和自定义控制器
- en: Understanding the Crossplane architecture
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 Crossplane 架构
- en: Installing Crossplane
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Crossplane
- en: Installing and configuring providers
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和配置提供者
- en: Multiple provider configuration
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多提供者配置
- en: An example of POSTGRES provisioning
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: POSTGRES 配置示例
- en: Understanding Custom Resource Definitions and custom controllers
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解自定义资源定义和自定义控制器
- en: Understanding the concept of **Custom Resource Definitions** (**CRDs**) and
    custom controllers in Kubernetes is vital to know how Crossplane works. Before
    getting into the Crossplane architecture, we will take a quick look at CRDs and
    custom controllers.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 理解 Kubernetes 中**自定义资源定义**（**CRD**）和自定义控制器的概念，对于了解 Crossplane 的工作原理至关重要。在深入
    Crossplane 架构之前，我们将快速回顾一下 CRD 和自定义控制器。
- en: Terminology
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 术语
- en: The term **resources** in Kubernetes represents a collection of objects of a
    similar kind. Pods, Services, Deployments, namespaces, and many more are the in-built
    object kinds. Each resource has the respective API endpoints at kube-apiserver.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 中，**资源**一词代表一组相似类型的对象。Pods、Services、Deployments、命名空间等是内建的对象类型。每个资源在
    kube-apiserver 上都有相应的 API 端点。
- en: CRDs are the way to extend the in-built resources list. It adds a new resource
    kind, including a set of API endpoints at kube-apiserver, to operate over the
    new resource. The term CRD precisely indicates what it does. The new resource
    added to Kubernetes using a CRD is called a **Custom Resource** (**CR**). Storing
    and retrieving a structured object defined with a CRD is not helpful unless backed
    by a custom controller. Custom controllers are our addition to the in-built controllers.
    They generally operate over a CR to perform specific actions in a control loop
    for each API event of a given resource. [*Chapter 1*](B17830_01_ePub.xhtml#_idTextAnchor014),
    *Introducing the New Operating Model*, has already covered the concept of a control
    loop. Refer to the *Control theory* section if you want to brush up on the idea.
    Note that the custom controllers do not necessarily always work with a CR. They
    can work with any existing resources to extend its functionality, which is not
    in the scope of our discussion. The Prometheus operator is one of the most famous
    and widely used examples of adding a few new CRs and controllers into the Kubernetes
    cluster to perform monitoring of workloads.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: CRD 是扩展内建资源列表的方式。它添加了一种新的资源类型，包括在 kube-apiserver 上的一组 API 端点，用以操作该新资源。CRD 这一术语准确地表明了它的功能。通过
    CRD 添加到 Kubernetes 的新资源称为**自定义资源**（**CR**）。除非有自定义控制器的支持，否则存储和检索通过 CRD 定义的结构化对象是没有意义的。自定义控制器是我们对内建控制器的扩展。它们通常在控制循环中对
    CR 进行操作，以便对给定资源的每个 API 事件执行特定操作。[*第一章*](B17830_01_ePub.xhtml#_idTextAnchor014)，*介绍新操作模型*，已经讲解了控制循环的概念。如果你想复习这一理念，请参阅*控制理论*部分。请注意，自定义控制器不一定总是与
    CR 一起工作。它们可以与任何现有资源一起工作，以扩展其功能，这不在我们讨论的范围内。Prometheus 操作符是将少量新 CR 和控制器添加到 Kubernetes
    集群中，用于监控工作负载的最著名和广泛使用的示例之一。
- en: Terminology
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 术语
- en: The term **operator** when applied to Prometheus is a term coined by CoreOS.
    Operators are nothing but a combination of *CRD + a custom controller + application
    focus*.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当“**操作符**”一词应用于 Prometheus 时，它是 CoreOS 提出的术语。操作符不过是*CRD + 自定义控制器 + 应用聚焦*的组合。
- en: Adding a new CRD
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加新 CRD
- en: 'While there are a few ways to add CRDs to Kubernetes, let''s add CRDs by creating
    a `yaml` file and applying the same on the cluster. The `yaml` file provides a
    structure to the CR. The following are the key attributes of a CRD YAML:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然有几种方法可以将 CRD 添加到 Kubernetes 中，但我们通过创建一个 `yaml` 文件并将其应用于集群来添加 CRD。`yaml` 文件为
    CR 提供了一个结构。以下是 CRD YAML 的主要属性：
- en: '`apiextensions.k8s.io/v1beta1`.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`apiextensions.k8s.io/v1beta1`。'
- en: '`CustomResourceDefinition`.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CustomResourceDefinition`。'
- en: The `clouddbs.book.imarunrk.com`, where `clouddbs` is the plural name and `book.imarunrk.com`
    is a newly defined API group. The term plural name is nothing but a representation
    of the resource name in the plural format. For example, the plural format of the
    existing resource pod is pods. We can always use that with kubectl commands (`kubectl
    get pods`).
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clouddbs.book.imarunrk.com`，其中 `clouddbs` 是复数名称，而 `book.imarunrk.com` 是新定义的
    API 组。复数名称仅仅是资源名称的复数表示。例如，现有资源 pod 的复数格式是 pods。我们总是可以使用它来执行 kubectl 命令（`kubectl
    get pods`）。'
- en: '**Spec** is the section under which we define the details of the CR. The attributes
    of this section include the API group, version, scope, and name. This section
    also describes the validation requirements of the API itself, such as the parameter
    list, their data types, and whether they are a required parameter.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Spec** 是定义 CR 详细信息的部分。该部分的属性包括 API 组、版本、作用域和名称。此部分还描述了 API 本身的验证要求，例如参数列表、数据类型以及它们是否是必填参数。'
- en: 'The following is a sample CRD YAML that represents a cloud database resource.
    It takes a couple of mandatory parameters, the database type, and the cloud provider
    name:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例 CRD YAML，表示一个云数据库资源。它包含几个必需的参数：数据库类型和云提供商名称：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Executing the following YAML code will enable new rest endpoints at kube-apiserver
    to create, modify, and delete the CloudDB resource:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下 YAML 代码将在 kube-apiserver 上启用新的 REST 端点，用于创建、修改和删除 CloudDB 资源：
- en: '[PRE25]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The next step is to write the custom controller to manage the CR API events.
    We can write a controller in many different languages using different open source
    frameworks. Writing a controller is an advanced topic that is covered later in
    [*Chapter 7*](B17830_07_ePub.xhtml#_idTextAnchor109), *Extending and Scaling Crossplane*.
    Crossplane providers are nothing but controllers to manage external infrastructure
    resources – generally, cloud providers' managed services. For now, we must remember
    that controllers implement functions to execute three actions – observe, analyze,
    and react in a control loop. In the preceding example, the control loop will create,
    update, and delete the cloud database based on the resource's creation, update,
    and delete API events.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是编写自定义控制器来管理 CR API 事件。我们可以使用不同的开源框架，用许多不同的编程语言来编写控制器。编写控制器是一个高级话题，会在稍后的[*第
    7 章*](B17830_07_ePub.xhtml#_idTextAnchor109)中详细讲解，*扩展与扩展 Crossplane*。Crossplane
    提供程序其实就是用来管理外部基础设施资源的控制器——通常是云提供商的托管服务。目前，我们必须记住，控制器实现了三个操作的功能——观察、分析和响应控制循环。在前面的示例中，控制循环将根据资源的创建、更新和删除
    API 事件来创建、更新和删除云数据库。
- en: Working with the CRD
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 CRD
- en: 'Once we have the CRD and controller in place, we can start creating and managing
    the cloud database with `kubectl`. It will work very similarly to other in-built
    resources such as the Pod. The following YAML is an example of creating Amazon
    RDS:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了 CRD 和控制器，就可以开始使用 `kubectl` 创建和管理云数据库。它的工作方式与其他内置资源（如 Pod）非常相似。以下 YAML
    是创建 Amazon RDS 的示例：
- en: '[PRE27]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Applying the following command will create a new CloudDB resource:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 应用以下命令将创建一个新的 CloudDB 资源：
- en: '[PRE34]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Note that the preceding YAML will not create an RDS, as we have not developed
    and deployed a controller. The example is to explain how CRDs and custom controllers
    work. Now that we have learned about CRDs and custom controllers, it's time to
    look at the Crossplane architecture in detail.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，前面的 YAML 不会创建 RDS，因为我们还没有开发和部署控制器。该示例是为了说明 CRD 和自定义控制器是如何工作的。现在我们已经了解了 CRD
    和自定义控制器，是时候详细查看 Crossplane 架构了。
- en: Understanding the Crossplane architecture
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Crossplane 架构
- en: 'From what we know so far, Crossplane is nothing but a set of Kubernetes custom
    controllers and CRDs representing external infrastructure resources. If you take
    a closer look, Crossplane is much more than a combination of CRDs and custom controllers.
    Crossplane has four key components. The components are as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们目前所知，Crossplane 仅仅是一组表示外部基础设施资源的 Kubernetes 自定义控制器和 CRD。如果你仔细观察，Crossplane
    远不止是 CRD 和自定义控制器的组合。Crossplane 有四个关键组件。组件如下：
- en: Managed resources
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 托管资源
- en: Providers
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供者
- en: Composite resources
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组合资源
- en: The Crossplane core
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Crossplane 核心
- en: Managed resources
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 托管资源
- en: 'A **Managed Resource** (**MR**) connects a CRD and respective custom controller
    to represent a single external infrastructure resource. MRs are in a one-to-one
    mapping with infrastructure resources. For example, CloudSQLInstance is an MR
    representing Google Cloud SQL. The following diagram depicts the MR mapping for
    Amazon RDS and Google Cloud Storage:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**托管资源**（**MR**）将一个 CRD 和相应的自定义控制器连接起来，以表示一个单独的外部基础设施资源。MR 与基础设施资源是一一对应的。例如，CloudSQLInstance
    是一个表示 Google Cloud SQL 的 MR。下图展示了 Amazon RDS 和 Google Cloud Storage 的 MR 映射：'
- en: '![Figure 3.1 – MR mapping'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.1 – MR 映射'
- en: '](img/Figure_3.1_B17830.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.1_B17830.jpg)'
- en: Figure 3.1 – MR mapping
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1 – MR 映射
- en: 'The **Crossplane Resource Model** (**XRM**) is the open standard used when
    developing an MR. The XRM is an opinionated extension of the **Kubernetes Resource
    Model** (**KRM**). The XRM sets the standards for external resource naming, dependency
    management, package management, and so on. MRs are the basic building blocks on
    which everything else in Crossplane is made. We can use MRs directly to provision
    an external infrastructure, but this is very rarely done. The best practice is
    to compose a higher-level API above an MR to consume. We will look at *how* and
    *why* in a later section of this chapter, as well as a dedicated chapter to address
    this aspect in detail. The following YAML represents the provisioning of CloudSQLInstance
    directly using an MR:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**Crossplane 资源模型**（**XRM**）是开发 MR 时使用的开放标准。XRM 是 **Kubernetes 资源模型**（**KRM**）的一个有观点的扩展。XRM
    设定了外部资源命名、依赖管理、包管理等方面的标准。MR 是构建 Crossplane 中一切的基本构件。我们可以直接使用 MR 来配置外部基础设施，但这很少发生。最佳实践是在
    MR 之上组合一个更高层次的 API 来进行使用。我们将在本章后续部分以及专门的章节中深入探讨 *如何* 和 *为什么* 要这样做。以下 YAML 表示直接使用
    MR 来配置 CloudSQLInstance：'
- en: '[PRE36]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The YAML will provision a GCP Cloud SQL instance with the resource constraints
    mentioned in the configurations. Since MR is the low-level Crossplane construct
    mapping to the infrastructure provider API, it will directly support all the attributes
    available in the infrastructure API. The reconciliation control loop of Crossplane
    controllers will fill default values assigned by the infrastructure API for the
    features not provided in the configuration YAML. This concept of MR is called
    late initialization. Whatever we provide under the `forProvider:` section will
    represent the attributes of the infrastructure API. If someone or a parallel process
    performs an unauthorized change to the infrastructure resource, Crossplane will
    roll back the changes to the source of truth mentioned in the YAML. The remaining
    parts of the configuration will help to determine other Crossplane behavior. For
    example, the preceding YAML has `writeConnectionSecretToRef:` to decide how to
    save the database credentials. There can be many more such behavior controls,
    which we will learn as we go further. The following commands can help look at
    the details of the created GCP resource and clean up the resources after testing:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 该 YAML 将根据配置中提到的资源约束来创建一个 GCP Cloud SQL 实例。由于 MR 是映射到基础设施提供程序 API 的低级 Crossplane
    构件，它将直接支持基础设施 API 中所有可用的属性。Crossplane 控制器的调和控制循环将为配置 YAML 中未提供的功能填充由基础设施 API 分配的默认值。MR
    的这一概念被称为延迟初始化。我们在 `forProvider:` 部分提供的内容将代表基础设施 API 的属性。如果有人或并行进程对基础设施资源进行了未经授权的更改，Crossplane
    将回滚这些更改，并恢复 YAML 中提到的事实来源。配置的其余部分将有助于确定 Crossplane 的其他行为。例如，前面的 YAML 中有 `writeConnectionSecretToRef:`
    用于决定如何保存数据库凭证。可能还会有更多此类行为控制，我们将在后面的内容中进一步学习。以下命令可以帮助查看已创建的 GCP 资源的详细信息，并在测试后清理资源：
- en: '[PRE50]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: We can also import the existing provisioned infrastructure into the Crossplane
    ecosystem. The MR checks whether the resources named in the configuration YAML
    already exist before fresh provisioning. When we build that YAML for the existing
    infrastructure, we can provide the authorized attributes that need to be maintained
    by the reconciliation loop under `forProvider`. In the next chapter, we will look
    at an example of importing existing infrastructure into Crossplane.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将现有的已配置基础设施导入到 Crossplane 生态系统中。MR 会在进行新资源配置之前检查配置 YAML 中指定的资源是否已经存在。当我们为现有基础设施构建
    YAML 文件时，可以提供需要由对接循环在 `forProvider` 下维护的授权属性。在下一章中，我们将查看如何将现有基础设施导入到 Crossplane
    的示例。
- en: Tip
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: One of the possible Crossplane behavior controls is the deletion policy, specified
    with an attribute called **deletionPolicy**. It can have two possible values –
    **Delete**, which is the default, and **Orphan**. While Delete will remove the
    resource from the infrastructure provider, Orphan will just remove the Crossplane
    reference.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Crossplane 行为控制的一个可能选项是删除策略，通过一个名为 **deletionPolicy** 的属性指定。它有两个可能的值——**Delete**（默认值）和
    **Orphan**。Delete 会从基础设施提供者中移除资源，而 Orphan 仅仅移除 Crossplane 的引用。
- en: Providers
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提供者
- en: Providers are a group of related MRs packaged together as a bundle. Each cloud
    vendor, other infrastructure services such as Rook (the cloud-native storage for
    Kubernetes – [https://rook.io/](https://rook.io/)), and software tools such as
    Helm have a provider package. The format of these packages is nothing but a container
    image. Installing a provider can be done either with a configuration YAML or using
    a Helm package. It requires a ProviderConfig configuration before we can start
    using these packages. The ProviderConfig resource helps us to set up the infrastructure
    vendor credentials. We will look at provider installation and ProviderConfig setup
    in the next section of the chapter.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 提供者是一组相关的 MRs，打包成一个捆绑包。每个云服务供应商、其他基础设施服务（例如 Rook——Kubernetes 的云原生存储，[https://rook.io/](https://rook.io/)）以及像
    Helm 这样的软件工具都有各自的提供者包。这些包的格式就是一个容器镜像。安装一个提供者可以通过配置 YAML 文件或使用 Helm 包来完成。在我们开始使用这些包之前，必须先配置一个
    ProviderConfig 配置。ProviderConfig 资源帮助我们设置基础设施供应商的凭证。我们将在本章的下一节中讨论提供者的安装和 ProviderConfig
    的设置。
- en: 'The following figure represents the AWS and GCP providers extending Crossplane
    for the respective cloud resource provisioning:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 下图表示 AWS 和 GCP 提供者扩展 Crossplane，用于相应的云资源配置：
- en: '![Figure 3.2 – A provider view'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.2 – 提供者视图'
- en: '](img/Figure_3.2_B17830.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.2_B17830.jpg)'
- en: Figure 3.2 – A provider view
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.2 – 提供者视图
- en: Composite resources
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组合资源
- en: 'Every organization is different in its structure, size, operating model, technology
    maturity, compliance, and security requirements. All these aspects will directly
    create a set of rules as policies for infrastructure provisioning and usage. Also,
    there is a complexity in assembling multiple pieces of the infrastructure stack.
    Composing is a way to build our custom infrastructure APIs above one or more MR
    APIs. These custom APIs can encode all the policy guidelines and assemble multiple
    pieces of infrastructure into simple, easy-to-use infrastructure recipes. These
    APIs are called **Composite Resources** (**XRs**). The critical aspect is that
    Crossplane allows us to define such resources in a no-code way, just with configurations.
    In the absence of a Crossplane composite, we will end up building complex Kubernetes
    custom controllers. Composition and **Composite Resource Definition** (**XRD**)
    are the configurations that we use to compose a higher-level XR API. XRD defines
    the schema of the new custom API that we are building. It''s the definition of
    a new CRD. Composition is the configuration that provides a mapping between the
    new CRD schema and the existing MRs. Once the new XR resource is available, we
    can start provisioning the infrastructure recipes using a resource claim object.
    The Claim API is something that gets created when we add a new XR API, provided
    we have asked for it in the XRD configuration. The Claim and XR APIs are almost
    the same with minor differences, which we will explore in an upcoming section.
    The following diagram represents how we can use CloudSQLInstance, a firewall,
    and network MRs from the GCP provider to construct an XPOSTGRES database composite:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 每个组织在其结构、规模、运营模式、技术成熟度、合规性和安全要求方面都有所不同。所有这些方面将直接创造一套用于基础设施供应和使用的政策规则。此外，组装基础设施堆栈的多个组件也存在复杂性。组合是一种方法，它可以在一个或多个MR
    API之上构建我们定制的基础设施API。这些自定义API可以编码所有的政策指导原则，并将多个基础设施组件组装成简单、易于使用的基础设施配方。这些API被称为**复合资源**（**XRs**）。关键点是，Crossplane允许我们以无代码的方式定义这些资源，仅通过配置即可实现。在没有Crossplane复合的情况下，我们最终将不得不构建复杂的Kubernetes自定义控制器。Composition和**复合资源定义**（**XRD**）是我们用来组合更高层次XR
    API的配置。XRD定义了我们正在构建的新自定义API的架构，它是一个新的CRD定义。Composition是提供新CRD架构和现有MR之间映射关系的配置。一旦新的XR资源可用，我们就可以使用资源声明对象开始供应基础设施配方。Claim
    API是当我们添加新的XR API时创建的，前提是我们在XRD配置中请求了它。Claim和XR API几乎相同，只有一些细微的差别，我们将在后续章节中探讨。下图展示了我们如何使用GCP提供商的CloudSQLInstance、防火墙和网络MR来构建一个XPOSTGRES数据库复合资源：
- en: '![Figure 3.3 – A composite resource'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.3 – 复合资源'
- en: '](img/Figure_3.3_B17830.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.3_B17830.jpg)'
- en: Figure 3.3 – A composite resource
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.3 – 复合资源
- en: 'We have thousands of cloud-managed services with many attributes requiring
    a detailed configuration. It adds a significant cognitive load to shortlist the
    options and implement the resource provisioning, with good guardrail settings
    that suit our organization''s needs. Every product team in an organization cannot
    take up this level of cognitive load. Usually, organizations use a platform team
    to abstract the cognitive load. The composing layer is for platform teams to build
    such abstractions. Crossplane enables us to expose these abstractions as Kubernetes
    APIs, allowing self-service for the product teams. The following diagram represents
    the platform and product team interaction model:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有成千上万的云管理服务，具有许多需要详细配置的属性。这给筛选选项和实施资源供应带来了显著的认知负担，需要设置适合我们组织需求的良好护栏。每个产品团队都无法承担这种程度的认知负担。通常，组织会使用平台团队来抽象这种认知负担。组合层是供平台团队构建这种抽象的。Crossplane使我们能够将这些抽象作为Kubernetes
    API暴露，从而为产品团队提供自助服务。下图展示了平台团队和产品团队的互动模型：
- en: '![Figure 3.4 – Product and platform team interaction'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.4 – 产品团队和平台团队互动'
- en: '](img/Figure_3.4_B17830.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.4_B17830.jpg)'
- en: Figure 3.4 – Product and platform team interaction
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.4 – 产品团队和平台团队互动
- en: Crossplane core
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Crossplane核心
- en: 'Before setting up the providers we are interested in and building XRs above
    that, we need to have a Crossplane core component installed in the cluster. This
    component provides the primitives required to manage multiple providers, build
    new XRs, and build new packages. Again, the core component is a bundle of CRDs
    and custom controllers. It is the glue that holds everything else about Crossplane
    together. The following figure represents how all the pieces fit within the Kubernetes
    ecosystem:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置我们感兴趣的提供者并在其上构建 XR 之前，我们需要在集群中安装 Crossplane 核心组件。该组件提供了管理多个提供者、构建新 XR 和新包所需的原语。再次强调，核心组件是
    CRD 和自定义控制器的集合。它是将 Crossplane 其他所有部分联系在一起的粘合剂。下图展示了所有组件如何在 Kubernetes 生态系统中配合工作：
- en: '![Figure 3.5 – All the pieces of Crossplane'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.5 – Crossplane 的所有组件'
- en: '](img/Figure_3.5_B17830.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.5_B17830.jpg)'
- en: Figure 3.5 – All the pieces of Crossplane
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.5 – Crossplane 的所有组件
- en: 'Let''s revisit some of the acronyms that we have used so far, which we will
    use going forward:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下迄今为止使用过的一些缩写，今后我们将继续使用它们：
- en: '**CRD** stands for **Custom Resource Definition**, a way to extend the Kubernetes
    API to support new resource types.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CRD** 代表 **自定义资源定义**，它是一种扩展 Kubernetes API 以支持新资源类型的方法。'
- en: CRs are the resources defined with the CRD. **CR** stands for **Custom Resource**.
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CR 是通过 CRD 定义的资源。**CR** 代表 **自定义资源**。
- en: '**XRM** stands for **Crossplane Resource Model**, an extension of the **Kubernetes
    Resource Model**. It is a set of rules set by Crossplane on how to build an XR
    or MR.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**XRM** 代表 **跨平面资源模型**，是 **Kubernetes 资源模型** 的扩展。它是 Crossplane 制定的一套规则，用于构建
    XR 或 MR。'
- en: '**MRs** are nothing but **Managed Resources**, a combination of a CRD and custom
    controllers in a one-to-one mapping with external infrastructure resources.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MRs** 仅仅是 **托管资源**，它是 CRD 和自定义控制器与外部基础设施资源一对一映射的组合。'
- en: '**XRD** stands for **Composite Resource Definition**, a definition for building
    a custom infrastructure API above Crossplane.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**XRD** 代表 **组合资源定义**，它是构建自定义基础设施 API 的定义，位于 Crossplane 之上。'
- en: '**XR** stands for **Composite Resource**, which represents a custom infrastructure
    API built with Crossplane.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**XR** 代表 **组合资源**，它表示使用 Crossplane 构建的自定义基础设施 API。'
- en: Installing Crossplane
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Crossplane
- en: 'I have set up a local Kubernetes cluster on my Macintosh computer. We will
    make this cluster the Crossplane control plane for provisioning resources from
    Google Cloud Platform in our tutorials. To follow the tutorials, we assume that
    you already have access to a Kubernetes cluster. If you need help setting up a
    local Kubernetes cluster, refer to [https://kind.sigs.k8s.io/](https://kind.sigs.k8s.io/).
    kind is one of the simplest ways to set up a local Kubernetes cluster, but you
    can work on the tutorials with any Kubernetes cluster setup. The following screenshot
    gives a quick glimpse at cluster information, versions, and node details:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经在我的 Macintosh 电脑上设置了一个本地 Kubernetes 集群。我们将在教程中将此集群作为 Crossplane 控制平面，从 Google
    Cloud Platform 中提供资源。为了跟随教程，我们假设你已经能够访问一个 Kubernetes 集群。如果你需要帮助设置本地 Kubernetes
    集群，请参考 [https://kind.sigs.k8s.io/](https://kind.sigs.k8s.io/)。kind 是设置本地 Kubernetes
    集群的最简单方式之一，但你可以使用任何 Kubernetes 集群设置进行教程操作。以下截图快速展示了集群信息、版本和节点详情：
- en: '![Figure 3.6 – Cluster information, versions, and node details'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.6 – 集群信息、版本和节点详情'
- en: '](img/Figure_3.6_B17830.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.6_B17830.jpg)'
- en: Figure 3.6 – Cluster information, versions, and node details
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.6 – 集群信息、版本和节点详情
- en: 'While there are a few ways to install Crossplane in Kubernetes, we will install
    it with a Helm chart. Make sure you have Helm installed. Installing Helm is pretty
    simple on both Macintosh and Windows with the `brew` or `choco` package managers.
    The following commands can install `helm` in your environment:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然有几种方法可以在 Kubernetes 中安装 Crossplane，我们将通过 Helm 图表来安装它。确保你已经安装了 Helm。在 Macintosh
    和 Windows 上，通过 `brew` 或 `choco` 包管理器安装 Helm 非常简单。以下命令可以在你的环境中安装 `helm`：
- en: '[PRE55]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'For more installation options, visit [https://helm.sh/docs/intro/install/](https://helm.sh/docs/intro/install/).
    For Crossplane installation, we need a minimum Kubernetes version of v1.16.0 and
    a minimum Helm version of v3.0.0\. Master and stable are the two flavors of Crossplane
    available. Master has the latest commits, but this version may have stability
    issues. Stable is a version that is ready for community use and recommended for
    production usage. We will be using the stable version of the Crossplane in this
    tutorial. The installation of Crossplane is done in three steps, as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多安装选项，请访问 [https://helm.sh/docs/intro/install/](https://helm.sh/docs/intro/install/)。对于
    Crossplane 安装，我们需要至少 v1.16.0 的 Kubernetes 版本和至少 v3.0.0 的 Helm 版本。Crossplane 有
    Master 和 Stable 两个版本。Master 版本包含最新的提交，但可能会有稳定性问题。Stable 版本是为社区使用准备的，建议用于生产环境。在本教程中，我们将使用
    Crossplane 的 Stable 版本。Crossplane 的安装分为三步，如下所示：
- en: Create a new target namespace called `crossplane-system` for installation.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的目标命名空间 `crossplane-system` 用于安装。
- en: Add and update the Crossplane repository to the `helm` repo list.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 Crossplane 仓库添加并更新到 `helm` 仓库列表中。
- en: Install Crossplane with `helm` in the target namespace.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在目标命名空间中使用 `helm` 安装 Crossplane。
- en: 'The code is as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 代码如下：
- en: '[PRE59]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'The Crossplane Helm chart supports quite a few template values for custom configuration
    options. Replica count is one example, which specifies how many Crossplane Pods
    are to run for a high-availability setup. Have a look at all possible configuration
    options available for the Crossplane Helm template at Artifact Hub. The installation
    screenshot is as follows:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: Crossplane Helm 图表支持许多模板值，用于自定义配置选项。副本数就是其中一个例子，它指定在高可用性设置中要运行多少个 Crossplane
    Pod。可以在 Artifact Hub 上查看 Crossplane Helm 模板的所有可能配置选项。安装截图如下：
- en: '![Figure 3.7 – Crossplane installation'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.7 – Crossplane 安装'
- en: '](img/Figure_3.7_B17830.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.7_B17830.jpg)'
- en: Figure 3.7 – Crossplane installation
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.7 – Crossplane 安装
- en: 'We can remove the Crossplane installation with the standard `helm delete` command:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用标准的 `helm delete` 命令来删除 Crossplane 安装：
- en: '[PRE66]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'A screenshot of the result is as follows:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 结果截图如下：
- en: '![Figure 3.8 – Crossplane installation health'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.8 – Crossplane 安装健康状况'
- en: '](img/Figure_3.8_B17830.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.8_B17830.jpg)'
- en: Figure 3.8 – Crossplane installation health
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.8 – Crossplane 安装健康状况
- en: Now that we have installed Crossplane, we will learn how to install and configure
    the providers in the following section.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了 Crossplane，接下来的部分将教你如何安装和配置提供程序。
- en: Installing and configuring providers
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和配置提供程序
- en: 'Once we have the Crossplane core component installed in the Kubernetes cluster,
    the next step is installing and configuring the Crossplane provider. We will install
    and configure the GCP provider, which is the scope of our tutorial. We can do
    this in a three-step process:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们在 Kubernetes 集群中安装了 Crossplane 核心组件，接下来的步骤是安装和配置 Crossplane 提供程序。在本教程中，我们将安装和配置
    GCP 提供程序。我们可以通过三步过程来完成：
- en: Setting up a cloud account
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置云账户
- en: Installing a provider
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装提供程序
- en: Configuring the provider
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置提供程序
- en: We will look at each of these aspects in detail with a step-by-step guide in
    the following sections.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的部分中通过逐步指南详细讲解这些方面。
- en: Setting up a cloud account
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置云账户
- en: 'We need to have a Google Cloud account with the project and billing setup enabled.
    Google Cloud offers $300 credit for new users to learn and experiment for a maximum
    of 3 months, provided you have a credit card. It will be more than enough for
    us to learn Crossplane and other infrastructure automation concepts. All we need
    to do is log on to the Google Cloud account to fill out a form and start the free
    trial. The next step is to create a separate project space for us to experiment
    with Crossplane. You can create a new project by clicking the project dropdown
    on the top bar of the GCP console and clicking on **NEW PROJECT**, as shown in
    the following screenshot:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要拥有一个启用了项目和计费设置的 Google Cloud 账户。Google Cloud 为新用户提供 300 美元的信用额度，供用户学习和实验，最多
    3 个月，前提是你拥有信用卡。这对于我们学习 Crossplane 和其他基础设施自动化概念来说绰绰有余。我们需要做的就是登录 Google Cloud 账户，填写表单并开始免费试用。接下来的步骤是为我们实验
    Crossplane 创建一个单独的项目空间。你可以通过点击 GCP 控制台顶部栏的项目下拉菜单，然后点击 **NEW PROJECT** 来创建一个新项目，如下图所示：
- en: '![Figure 3.9 – Creating a new GCP project'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.9 – 创建一个新的 GCP 项目'
- en: '](img/Figure_3.9_B17830.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.9_B17830.jpg)'
- en: Figure 3.9 – Creating a new GCP project
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.9 – 创建一个新的 GCP 项目
- en: 'Once we have a GCP account, free credits, and the project started, the next
    step is to enable all the needed cloud API access. We are going to do that with
    the `gcloud` CLI. Download the CLI from [https://cloud.google.com/sdk/docs/install](https://cloud.google.com/sdk/docs/install)
    and follow these steps:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们拥有GCP帐户、免费额度和项目启动，下一步就是启用所有所需的云API访问。我们将使用`gcloud` CLI来完成此操作。请从[https://cloud.google.com/sdk/docs/install](https://cloud.google.com/sdk/docs/install)下载CLI并按照以下步骤操作：
- en: 'Install the `gcloud` CLI after the download:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载后安装`gcloud` CLI：
- en: '[PRE68]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Initialize the SDK with the cloud credentials and project:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用云凭证和项目初始化SDK：
- en: '[PRE69]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '`gcloud init` will redirect us to a web browser to authenticate with the Google
    account. Once we can successfully provide necessary access, we must select the
    project when asked for it by the CLI. Now, we should be able to enable the required
    cloud services with the following commands:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`gcloud init`将引导我们通过浏览器进行身份验证。一旦我们成功提供必要的访问权限，CLI会要求我们选择项目。现在，我们应该能够使用以下命令启用所需的云服务：'
- en: '[PRE70]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'A screenshot of the result is as follows:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 结果截图如下：
- en: '![Figure 3.10 – Enabling the cloud APIs'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.10 – 启用云API'
- en: '](img/Figure_3.10_B17830.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.10_B17830.jpg)'
- en: Figure 3.10 – Enabling the cloud APIs
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.10 – 启用云API
- en: 'Once we are done enabling the API access for the project, the next step is
    to create a service account and extract the credentials required to set up the
    GCP Crossplane provider. It involves a few steps:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 完成启用项目的API访问后，下一步是创建服务帐户并提取设置GCP Crossplane提供程序所需的凭证。它涉及几个步骤：
- en: 'Find the project ID to use in the necessary upcoming commands:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找项目ID，以便在接下来的必要命令中使用：
- en: '[PRE75]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Create the service account, get the name, and enable the required roles on
    the service account. Note that `crossplane-330620` in all the following commands
    is my Google project ID. You will replace that with your Google project ID. Use
    the preceding command to explore the list of your project IDs. Similarly, `crossplane-service-account@crossplane-330620.iam.gserviceaccount.com`
    is the name of the created service account in my GCP environment. Replace this
    with your service account name. You can get your service account name by executing
    the second command in the following code block to list the service accounts:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建服务帐户，获取名称，并在服务帐户上启用所需的角色。请注意，以下所有命令中的`crossplane-330620`是我的Google项目ID，您需要将其替换为您的Google项目ID。使用之前的命令来查看您的项目ID列表。类似地，`crossplane-service-account@crossplane-330620.iam.gserviceaccount.com`是我在GCP环境中创建的服务帐户名称。将其替换为您的服务帐户名称。您可以通过执行以下代码块中的第二个命令来列出服务帐户，以获取您的服务帐户名称：
- en: '[PRE76]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'To extract the service account file, use the first command, as follows:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下第一个命令提取服务帐户文件：
- en: '[PRE77]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Finally, create a Kubernetes Secret with the service account file. The Secret
    will be referred to when we make a provider configuration, which you will see
    in the next section:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，使用服务帐户文件创建一个Kubernetes Secret。该Secret将在我们进行提供程序配置时被引用，您将在下一部分看到：
- en: '[PRE78]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Installing a provider
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装提供程序
- en: 'Let''s now install the GCP Crossplane provider. We have to run the following
    provider resource YAML with the latest GCP provider container image version. The
    current available stable version is v0.18.0\. Update the version accordingly when
    you are executing:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们安装GCP Crossplane提供程序。我们需要运行以下提供程序资源YAML，并使用最新的GCP提供程序容器镜像版本。当前可用的稳定版本是v0.18.0。执行时请根据需要更新版本：
- en: '[PRE79]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Apply the YAML and validate whether the provider container is running:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 应用YAML并验证提供程序容器是否正在运行：
- en: '[PRE85]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'A screenshot of the result is as follows:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 结果截图如下：
- en: '![Figure 3.11 – Running the GCP provider'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.11 – 运行GCP提供程序'
- en: '](img/Figure_3.11_B17830.jpg)'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.11_B17830.jpg)'
- en: Figure 3.11 – Running the GCP provider
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.11 – 运行GCP提供程序
- en: Configuring the provider
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置提供程序
- en: 'The final step is to set up provider configuration for authentication using
    the `ProviderConfig` Crossplane API. Preparing the credentials can be slightly
    different for each provider, depending on the construct for authentication by
    the infrastructure vendor. In the case of GCP, it will be a service account, it''s
    a service principle for Azure, an IAM for AWS, and so on. The following YAML will
    configure credentials for the GCP provider:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是使用`ProviderConfig` Crossplane API设置提供程序配置以进行身份验证。准备凭证对于每个提供程序可能略有不同，具体取决于基础设施供应商的身份验证构造。对于GCP，它将是服务帐户；对于Azure，它是服务主体；对于AWS，它是IAM，依此类推。以下YAML将为GCP提供程序配置凭证：
- en: '[PRE87]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'A couple of crucial aspects of GCP provider configuration are the project ID
    reference and the service account credentials. We need to provide our GCP project
    ID under `projectID:`. We will not have this configuration element for other infrastructure
    provider configurations such as AWS. Note that the provider configuration mentioned
    previously references the Kubernetes Secrets. Apply the YAML and validate the
    provider configuration with the following commands:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: GCP 提供者配置的几个关键方面包括项目 ID 引用和服务帐户凭据。我们需要在`projectID:`下提供我们的 GCP 项目 ID。对于其他基础设施提供者配置（如
    AWS），我们没有这个配置元素。请注意，前面提到的提供者配置引用了 Kubernetes Secrets。应用 YAML 文件并通过以下命令验证提供者配置：
- en: '[PRE99]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'A screenshot of the result is as follows:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 结果截图如下：
- en: '![Figure 3.12 – The GCP provider config'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.12 – GCP 提供者配置'
- en: '](img/Figure_3.12_B17830.jpg)'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.12_B17830.jpg)'
- en: Figure 3.12 – The GCP provider config
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.12 – GCP 提供者配置
- en: With this, we are concluding Crossplane installation, GCP provider setup, and
    configuration. Other provider setups also mostly look like GCP. Now, the environment
    is ready for provisioning GCP resources with an MR, or we can start composing
    our XR API above the MR.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些步骤，我们完成了 Crossplane 安装、GCP 提供者设置和配置。其他提供者设置也大致与 GCP 相似。现在，环境已准备好通过 MR 配置
    GCP 资源，或者我们可以开始在 MR 之上编写 XR API。
- en: Multiple provider configuration
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多提供者配置
- en: 'We can have multiple ProviderConfig configured against a provider. It''s like
    having many credentials or cloud accounts to access the cloud platform and choosing
    the appropriate credentials based on the given context. When provisioning the
    infrastructure resources with an MR or XR, we specify `providerConfigRef:` to
    determine which ProviderConfig to use in the given context. If `providerConfigRef:`
    is not available in an MR or XR, Crossplane refers to the ProviderConfig named
    `default`. This way of organizing infrastructure resources under different credentials
    can help us manage infrastructure billing and maintain resources concerning the
    organizational structure in groups. The following YAML will provision POSTGRES
    from GCP using the provider config named `gcp-credentials-project-1`, which we
    created in the preceding section:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以配置多个 ProviderConfig 对应一个提供者。就像拥有多个凭据或云账户来访问云平台，并根据给定的上下文选择合适的凭据一样。在使用 MR
    或 XR 配置基础设施资源时，我们通过 `providerConfigRef:` 指定在给定上下文中使用哪个 ProviderConfig。如果在 MR 或
    XR 中没有提供 `providerConfigRef:`，Crossplane 将引用名为 `default` 的 ProviderConfig。通过这种方式将基础设施资源组织在不同凭据下，可以帮助我们管理基础设施账单，并根据组织结构以组的方式维护资源。以下
    YAML 文件将使用前面章节中创建的名为 `gcp-credentials-project-1` 的提供者配置，从 GCP 配置 POSTGRES：
- en: '[PRE101]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'The following figure represents multiple teams using different provider configs:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示表示多个团队使用不同的提供者配置：
- en: '![Figure 3.13 – Multiple provider configuration'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.13 – 多提供者配置'
- en: '](img/Figure_3.13_B17830.jpg)'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.13_B17830.jpg)'
- en: Figure 3.13 – Multiple provider configuration
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.13 – 多提供者配置
- en: An example of POSTGRES provisioning
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: POSTGRES 配置示例
- en: 'It''s time that we go through an actual provisioning experience. We will create
    a POSTGRES instance in GCP using `CloudSQLInstance`, an MR available in the GCP
    Crossplane provider. Direct provisioning of infrastructure resources with an MR
    or XR is not a good strategy. Instead, we should be using the claim object created
    with XR for provisioning. The next chapter is devoted to covering these topics.
    Currently, we are using an MR for resource provisioning to understand the basic
    building blocks of Crossplane. We are going to use the following attributes while
    provisioning the resource:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候进行实际的配置体验了。我们将使用 GCP 中的 `CloudSQLInstance`，它是 GCP Crossplane 提供者中可用的 MR，来创建一个
    POSTGRES 实例。通过 MR 或 XR 直接配置基础设施资源并不是一个好的策略。相反，我们应该使用通过 XR 创建的 claim 对象来进行配置。下一章将专门讨论这些主题。目前，我们使用
    MR 进行资源配置，以便理解 Crossplane 的基本构建模块。在配置资源时，我们将使用以下属性：
- en: The name of the resource provisioned should be `db-gcp`.
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置的资源名称应为 `db-gcp`。
- en: The region of provisioning will be `us-central`.
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置的区域将是 `us-central`。
- en: We will request POSTGRES version 9.6 – `POSTGRES_9_6`.
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将请求 POSTGRES 版本 9.6 – `POSTGRES_9_6`。
- en: The size of the data disk should be 20 GB.
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据磁盘的大小应该是 20 GB。
- en: The GCP tier of the database should be `db-g1-small`.
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库的 GCP 等级应该是 `db-g1-small`。
- en: Create the resource under the `gcp-credentials-project-1` provider configuration.
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `gcp-credentials-project-1` 提供者配置下创建资源。
- en: Database credentials should go to a `crossplane-system` namespace with a Secret
    named `db-conn`.
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库凭证应放入 `crossplane-system` 命名空间，并使用名为 `db-conn` 的 Secret。
- en: 'These are just a few possible parameters. The complete API documentation for
    CloudSQLInstance is available at [https://doc.crds.dev/github.com/crossplane/provider-gcp/database.gcp.crossplane.io/CloudSQLInstance/v1beta1@v0.18.0](https://doc.crds.dev/github.com/crossplane/provider-gcp/database.gcp.crossplane.io/CloudSQLInstance/v1beta1@v0.18.0).
    Note that there is a required tag against a few API parameters, which are mandatory
    in YAML. The following YAML code will provision GCP POSTGRES with the mentioned
    attributes:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是一些可能的参数。CloudSQLInstance 的完整 API 文档可以在 [https://doc.crds.dev/github.com/crossplane/provider-gcp/database.gcp.crossplane.io/CloudSQLInstance/v1beta1@v0.18.0](https://doc.crds.dev/github.com/crossplane/provider-gcp/database.gcp.crossplane.io/CloudSQLInstance/v1beta1@v0.18.0)
    查阅。请注意，有一些 API 参数是必填的，这些在 YAML 中是强制要求的。以下 YAML 代码将根据指定的属性配置 GCP 的 POSTGRES：
- en: '[PRE115]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: 'Once you apply the YAML code, you can see the resources provisioned in the
    GCP console. Use the following command to look at the states. Note that, initially,
    we will see the status as pending creation (`PENDING_CREATE`), and it will soon
    become runnable (`RUNNABLE`). Also, we can see that the database credentials are
    available in the Secrets:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用 YAML 代码，你可以在 GCP 控制台中看到配置的资源。使用以下命令查看资源的状态。注意，初始时，我们会看到状态为待创建（`PENDING_CREATE`），随后会变为可运行（`RUNNABLE`）。另外，我们还可以看到数据库凭证已经出现在
    Secrets 中：
- en: '![Figure 3.14 – Database provisioning'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.14 – 数据库配置'
- en: '](img/Figure_3.14_B17830.jpg)'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.14_B17830.jpg)'
- en: Figure 3.14 – Database provisioning
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.14 – 数据库配置
- en: 'Suppose we look at the database details in the GCP console and change the database
    machine type. Crossplane will restore it to the original tier mentioned in the
    YAML code. It was fun to try that and see the status change. Initially, it will
    go into maintenance mode when we change the console, and then Crossplane will
    realize that something was changed to put the resource out of sync. Then, Crossplane
    will bring it back to its original state. Please refer to the following screenshot
    and go through values in each column (`STATE`, `SYNCED`, and `READY`):'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们在 GCP 控制台查看数据库详细信息，并更改数据库机器类型，Crossplane 会将其恢复到 YAML 代码中提到的原始级别。尝试更改并查看状态变化很有趣。初始时，当我们更改控制台设置时，系统会进入维护模式，然后
    Crossplane 会发现有更改，使资源处于不同步状态。接着，Crossplane 会将资源恢复到原始状态。请参考以下截图并查看每列中的值（`STATE`、`SYNCED`
    和 `READY`）：
- en: '![Figure 3.15 – The reconciliation loop'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.15 – 协调循环'
- en: '](img/Figure_3.15_B17830.jpg)'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.15_B17830.jpg)'
- en: Figure 3.15 – The reconciliation loop
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.15 – 协调循环
- en: 'And finally, the resources will sync. We can clean up the provisioned resources
    based on the deletion policy:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，资源将同步。我们可以根据删除策略清理配置的资源：
- en: '![Figure 3.16 – The final state'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.16 – 最终状态'
- en: '](img/Figure_3.16_B17830.jpg)'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.16_B17830.jpg)'
- en: Figure 3.16 – The final state
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.16 – 最终状态
- en: Tip
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: If you want to create the resource in the vendor infrastructure with a name
    different from that of the Crossplane resource claim, use the `crossplane.io/external-name:my-special-name`
    annotation in the metadata section.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在供应商基础设施中创建一个与 Crossplane 资源声明不同名称的资源，可以在元数据部分使用 `crossplane.io/external-name:my-special-name`
    注解。
- en: All the examples discussed throughout this book can be referred to at [https://github.com/PacktPublishing/End-to-End-Automation-with-Kubernetes-and-Crossplane](https://github.com/PacktPublishing/End-to-End-Automation-with-Kubernetes-and-Crossplane).
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中讨论的所有示例都可以参考 [https://github.com/PacktPublishing/End-to-End-Automation-with-Kubernetes-and-Crossplane](https://github.com/PacktPublishing/End-to-End-Automation-with-Kubernetes-and-Crossplane)。
- en: Summary
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We started with understanding CRDs and custom controllers, and then the Kubernetes
    resource extension point concept, which are the building blocks of Crossplane.
    Then, we went through various Crossplane components, their architecture, and how
    those components fit together. Finally, we undertook some hands-on work by installing
    Crossplane and its GCP provider, and experimenting with Postgres database provisioning.
    Now we know how Crossplane works end to end, which brings us to the end of the
    chapter. In the next chapter, we will learn advanced Crossplane concepts.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从理解 CRD 和自定义控制器开始，然后了解 Kubernetes 资源扩展点的概念，这些都是 Crossplane 的构建块。接着，我们讲解了各种
    Crossplane 组件、它们的架构以及这些组件如何协同工作。最后，我们通过安装 Crossplane 及其 GCP 提供程序，并进行 Postgres
    数据库配置的实验，进行了动手操作。现在，我们已经了解了 Crossplane 的完整工作流程，这也标志着本章的结束。在下一章中，我们将学习更高级的 Crossplane
    概念。

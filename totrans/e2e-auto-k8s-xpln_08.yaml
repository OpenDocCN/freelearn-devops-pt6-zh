- en: '*Chapter 6*: More Crossplane Patterns'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第六章*: 更多 Crossplane 模式'
- en: Following the previous chapter, we will continue to discover more Crossplane
    patterns that are key to building a state-of-the-art infrastructure automation
    platform. We will cover different topics, such as managing dependencies between
    resources, propagating secrets, using the Crossplane Helm provider, trade-off
    points in defining the XR API boundary, and monitoring the Crossplane control
    plane using Prometheus. Throughout the chapter, we will use examples with a hands-on
    journey to understand these concepts. We have been using GCP in all the previous
    chapters. In this chapter, we will use both GCP and AWS to learn Crossplane. Finally,
    we will learn more debugging skills, which are vital for day-to-day platform development
    and operations.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 紧接着上一章，我们将继续探索更多关键的 Crossplane 模式，这些模式对于构建先进的基础设施自动化平台至关重要。我们将涵盖不同的主题，如管理资源之间的依赖关系、传播秘密、使用
    Crossplane Helm 提供商、定义 XR API 边界时的权衡点，以及使用 Prometheus 监控 Crossplane 控制平面。在本章中，我们将通过示例和实践过程来理解这些概念。在之前的所有章节中，我们使用的是
    GCP，本章中我们将同时使用 GCP 和 AWS 来学习 Crossplane。最后，我们将学习更多调试技能，这对于日常平台开发和运维至关重要。
- en: 'The following are the topics covered in the chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题如下：
- en: AWS provider setup
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS 提供商设置
- en: Managing dependencies
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理依赖关系
- en: Secret propagation hands-on
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 秘密传播实践
- en: Helm provider hands-on
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Helm 提供商实践
- en: Defining API boundaries
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义 API 边界
- en: Alerts and monitoring
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 警报与监控
- en: More troubleshooting patterns
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更多故障排除模式
- en: AWS provider setup
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS 提供商设置
- en: 'Some of the examples in this chapter will use AWS as the cloud provider. Apart
    from GCP, we are covering AWS to establish what it takes to work with a new cloud
    provider. It will help us realize how working with one cloud provider will enable
    us to be competent enough to handle any cloud provider in Crossplane. We can look
    at the AWS provider setup in the following three steps:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的一些示例将使用 AWS 作为云提供商。除了 GCP，我们还将介绍 AWS，以帮助我们了解如何与新云提供商合作。它将帮助我们认识到，与一个云提供商合作能使我们具备足够的能力来处理
    Crossplane 中的任何云提供商。我们可以通过以下三个步骤来设置 AWS 提供商：
- en: Creating an AWS account and IAM user
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 AWS 账户和 IAM 用户
- en: Creating the Kubernetes secret
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 Kubernetes 秘密
- en: Provider and ProviderConfig setup
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供商和 ProviderConfig 设置
- en: Creating an AWS account and IAM user
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 AWS 账户和 IAM 用户
- en: 'You can register with AWS and use some of its services free, provided you have
    a credit card. You can read more about the AWS free tier at [https://aws.amazon.com/free/free-tier-faqs/](https://aws.amazon.com/free/free-tier-faqs/).
    Once you have the free account created, the next step is to create a new IAM user.
    The following screenshots will cover the different stages in the IAM user creation.
    Go to the **IAM** section in the AWS web console and click **Add a user**. Select
    the credentials type as an access key shown in the following screenshot:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以注册 AWS 并免费使用其部分服务，前提是你有信用卡。你可以在[https://aws.amazon.com/free/free-tier-faqs/](https://aws.amazon.com/free/free-tier-faqs/)阅读有关
    AWS 免费套餐的更多信息。一旦你创建了免费账户，下一步就是创建一个新的 IAM 用户。以下截图将展示 IAM 用户创建的不同阶段。进入 AWS 网络控制台中的**IAM**部分，然后点击**添加用户**。选择凭证类型为访问密钥，如下截图所示：
- en: '![Figure 6.1 – Creating a user'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.1 – 创建用户](img/B17830_06_01.jpg)'
- en: '](img/B17830_06_01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17830_06_01.jpg)'
- en: Figure 6.1 – Creating a user
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.1 – 创建用户
- en: The next step is to add the user to an access group. If you don’t have a user
    group already, you can use the **Create group** button and create a new group
    with appropriate access control. Alternatively, we can attach an existing access
    policy to the user or copy permissions from a current user. Ensure that you have
    added the required permissions for the resources provisioned through Crossplane.
    I have provided an **AdministratorAccess** role to provide full access to all
    AWS resources.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是将用户添加到访问组中。如果你还没有用户组，可以使用**创建组**按钮，创建一个具有适当访问控制的新组。或者，我们可以将现有的访问策略附加到用户，或从当前用户复制权限。确保你已为通过
    Crossplane 配置的资源添加了所需的权限。我已提供**AdministratorAccess**角色，以便为所有 AWS 资源提供完全访问权限。
- en: '![Figure 6.2 – Add user to group'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.2 – 将用户添加到组中](img/B17830_06_02.jpg)'
- en: '](img/B17830_06_02.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17830_06_02.jpg)'
- en: Figure 6.2 – Add user to group
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.2 – 将用户添加到组中
- en: 'Now you will have the access ID and secret of the new IAM user in the AWS console,
    which will be helpful for Crossplane AWS Provider configuration:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你将在 AWS 控制台中获得新 IAM 用户的访问 ID 和密钥，这对 Crossplane AWS 提供商配置非常有帮助：
- en: '![Figure 6.3 – New IAM user'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.3 – 新的 IAM 用户](img/B17830_06_03.jpg)'
- en: '](img/B17830_06_03.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17830_06_03.jpg)'
- en: Figure 6.3 – New IAM user
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.3 – 新的 IAM 用户
- en: The next step is to use the access key ID and the secret key of the IAM user
    to configure the Kubernetes secret.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是使用 IAM 用户的访问密钥 ID 和秘密密钥来配置 Kubernetes 秘密。
- en: Creating the Kubernetes secret
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 Kubernetes 秘密
- en: Creating the Kubernetes secret starts with setting up the AWS CLI in your local
    environment. It will be a simple step to download the installable and perform
    the installation. Follow the installation instructions at [https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html](https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html).
    Next, we can create the AWS login profile using the `aws configure --profile default`
    command. It will ask for the access key ID, secret access key, default region,
    and output format. The access key ID and the secret key are what we got while
    creating the IAM user. You can ignore the default region and output format.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 Kubernetes 秘密从在本地环境中设置 AWS CLI 开始。这将是一个简单的步骤，只需下载安装包并执行安装即可。按照[https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html](https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html)上的安装说明进行操作。接下来，我们可以使用
    `aws configure --profile default` 命令创建 AWS 登录配置文件。它会要求输入访问密钥 ID、秘密访问密钥、默认区域和输出格式。访问密钥
    ID 和秘密密钥是在创建 IAM 用户时获得的。你可以忽略默认区域和输出格式。
- en: '![Figure 6.4 – Login profile'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.4 – 登录配置文件'
- en: '](img/B17830_06_04.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17830_06_04.jpg)'
- en: Figure 6.4 – Login profile
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.4 – 登录配置文件
- en: 'The next step is to create the Kubernetes secret using the preceding profile.
    Execute the following commands:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是使用前面创建的配置文件创建 Kubernetes 秘密。执行以下命令：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Refer to the following screenshot where the Kubernetes secret is created:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 参见以下截图，其中 Kubernetes 秘密被创建：
- en: '![Figure 6.5 – Kubernetes secret creation'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.5 – Kubernetes 秘密创建'
- en: '](img/B17830_06_05.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17830_06_05.jpg)'
- en: Figure 6.5 – Kubernetes secret creation
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.5 – Kubernetes 秘密创建
- en: We are now done with the creation of Kubernetes secrets. The following section
    will look at the AWS provider installation and setup in the Crossplane environment.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经完成了 Kubernetes 秘密的创建。接下来的章节将讨论 Crossplane 环境中 AWS 提供者的安装和设置。
- en: AWS provider and ProviderConfig setup
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AWS 提供者和 ProviderConfig 设置
- en: 'Install Crossplane AWS provider by applying the following YAML to the cluster.
    The configuration has two parts to it. The provider configuration will install
    the AWS provider, and `ControllerConfig` enables debugging mode to the provider
    pod logs. It is not mandatory to have the `ControllerConfig` configuration. The
    example here will be helpful when you want to debug an issue. Note that the `ControllerConfig`
    name refers to the provider configuration:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将以下 YAML 应用到集群，安装 Crossplane AWS 提供者。该配置分为两部分。提供者配置将安装 AWS 提供者，`ControllerConfig`
    启用提供者 pod 日志的调试模式。`ControllerConfig` 配置不是必须的。这里的示例在你需要调试问题时会很有帮助。请注意，`ControllerConfig`
    名称指代的是提供者配置：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Finally, apply the following provider configuration YAML referring to the secret:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，应用以下提供者配置 YAML，参照该机密：
- en: '[PRE22]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We are ready to create the resources from the AWS free tier and experiment.
    All the setup instructions are available at [https://github.com/PacktPublishing/End-to-End-Automation-with-Kubernetes-and-Crossplane/tree/main/Chapter06/Hand-on-examples/aws-setup](https://github.com/PacktPublishing/End-to-End-Automation-with-Kubernetes-and-Crossplane/tree/main/Chapter06/Hand-on-examples/aws-setup).
    Execute the `rds.yaml` file to validate whether the AWS provider setup is down
    proper. The following screenshot refers to the successful provisioning of an RDS
    resource from AWS:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经准备好从 AWS 免费套餐中创建资源并进行实验。所有设置说明可以在[https://github.com/PacktPublishing/End-to-End-Automation-with-Kubernetes-and-Crossplane/tree/main/Chapter06/Hand-on-examples/aws-setup](https://github.com/PacktPublishing/End-to-End-Automation-with-Kubernetes-and-Crossplane/tree/main/Chapter06/Hand-on-examples/aws-setup)找到。执行
    `rds.yaml` 文件以验证 AWS 提供者设置是否正确。以下截图显示了成功从 AWS 配置 RDS 资源：
- en: '![Figure 6.6 – RDS provisioning'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.6 – RDS 配置'
- en: '](img/B17830_06_06.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17830_06_06.jpg)'
- en: Figure 6.6 – RDS provisioning
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.6 – RDS 配置
- en: This completes the AWS setup activities. The following section will look at
    resource referencing to manage dependencies between the resources.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了 AWS 设置活动。接下来的章节将讨论资源引用，以管理资源之间的依赖关系。
- en: Managing dependencies
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理依赖关系
- en: 'One external resource referencing another resource is a recurring pattern in
    infrastructure. For example, we may want to provision our Kubernetes cluster in
    a specific **Virtual Private Network** (**VPN**). The S3 bucket policy definition
    referring to the S3 bucket is another example. We could go on with many such examples.
    From the perspective of building an XR API, there will be a requirement to establish
    dependencies between external resources within a given XR or in a nested XRs scenario,
    or between resources in independent XRs. Crossplane offers three different ways
    to refer one resource from another. Each of these options has its use case:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在基础设施中，一个外部资源引用另一个资源是一个常见的模式。例如，我们可能希望在特定的**虚拟私人网络**（**VPN**）中配置我们的Kubernetes集群。引用S3桶的S3桶策略定义也是一个例子。我们可以列举许多这样的例子。从构建XR
    API的角度来看，可能需要在给定的XR或嵌套XR场景中，或者在独立XR之间建立外部资源之间的依赖关系。Crossplane提供了三种不同的方式来引用一个资源。每种方式都有其特定的使用场景：
- en: '`UserPolicyAttachment`. It can attach an IAM user to a `Policy` object. Here,
    the reference to the `Policy` object can be done using the attribute called `PolicyARN`
    (ARN reference). Similarly, a `User` object reference can be executed using the
    `UserName` attribute (name reference).'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UserPolicyAttachment`。它可以将IAM用户附加到 `Policy` 对象。在这里，可以通过名为 `PolicyARN`（ARN引用）的属性引用
    `Policy` 对象。类似地，也可以使用 `UserName` 属性（名称引用）来执行 `User` 对象的引用。'
- en: '`selector` attribute. `selector` is an attribute that instructs Crossplane
    to look for the referring resources based on the conditions specified in its sub-attributes.
    `MatchControllerRef` and `MatchLabels` are the sub-attributes of the `selector`
    attribute. The `MatchControllerRef` value will be `true`, guiding Crossplane to
    look for the referring resources within the XR. The second attribute, `MatchLabels`,
    drives Crossplane to look for referring resources with the specified labels. If
    the selector identifies more than one recourse, one of the resources is selected
    randomly. If the direct reference attribute discussed in the previous option is
    present in the configuration, the `selector` attributes will be ignored.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`selector` 属性。`selector` 是一个属性，指示Crossplane根据其子属性中指定的条件查找引用的资源。`MatchControllerRef`
    和 `MatchLabels` 是 `selector` 属性的子属性。`MatchControllerRef` 的值将为 `true`，指引Crossplane在XR内查找引用的资源。第二个属性，`MatchLabels`，则驱使Crossplane查找具有指定标签的引用资源。如果selector识别到多个资源，则会随机选择其中一个。如果配置中存在前面提到的直接引用属性，则会忽略`selector`属性。'
- en: '`MatchControllerRef` value. It guides the Crossplane to look for matching resources
    outside the XR.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MatchControllerRef` 值。它指引Crossplane在XR外查找匹配的资源。'
- en: Tip
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 提示
- en: We can use two strategies to identify the value for direct reference configuration.
    We can create the resources with a predictable name to reconstruct them again
    at the reference point. It is similar to what we discussed about external resource
    names in the last chapter. If the unique identifier is a cloud-generated ID such
    as ARN, copy the identifier to a custom-defined status attribute (XR API response)
    for usage at a later point in time.
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以使用两种策略来确定直接引用配置的值。我们可以创建具有可预测名称的资源，以便在引用点重新构建它们。这类似于我们在上一章讨论的外部资源名称。如果唯一标识符是云生成的ID，例如ARN，则将标识符复制到自定义定义的状态属性（XR
    API响应）中，以供后续使用。
- en: Don’t worry if it’s confusing. Let’s look at the resource reference with a couple
    of hands-on examples. The first example will cover the direct and selector configurations
    within and nested XR.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果感到困惑，不必担心。让我们通过几个实际的例子来看一下资源引用。第一个例子将涵盖在XR内和嵌套XR中的直接和选择器配置。
- en: Resource reference within and nested XR
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在XR内部和嵌套XR中的资源引用
- en: 'The example will be a real-world scenario. We will create an S3 bucket with
    a specific IAM policy and create an IAM user who can access the bucket. The following
    are the managed resources involved in the example:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子将是一个实际场景。我们将创建一个具有特定IAM策略的S3桶，并创建一个可以访问该桶的IAM用户。以下是示例中涉及的托管资源：
- en: '`Bucket`: This is an MR to create an S3 bucket. We will use this to provision
    the bucket in a specific region.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Bucket`：这是一个MR，用于创建一个S3桶。我们将使用它在特定区域中配置桶。'
- en: '`Policy`: This is the MR part of the AWS IAM resources list. It is helpful
    in defining usage guidelines for a given resource. In the example here, we will
    create a policy with full access to read and edit all objects in the bucket.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Policy`：这是 AWS IAM 资源列表中的 MR 部分。它有助于为给定资源定义使用指南。在这里的示例中，我们将创建一个具有完全访问权限的策略，以便读取和编辑桶中的所有对象。'
- en: '`User`: The MR represents the AWS IAM user. We will create a new user to access
    the created bucket.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`User`：MR 代表 AWS IAM 用户。我们将创建一个新用户以访问已创建的桶。'
- en: '`UserPolicyAttachment`: This is again part of the list of resources under AWS
    IAM. This MR will attach a policy to a user. We will link the bucket policy we
    created to the user.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UserPolicyAttachment`：这也是 AWS IAM 资源列表中的一部分。该 MR 将把一个策略附加到用户上。我们将把创建的桶策略链接到该用户。'
- en: 'You can see that there is a requirement for referring one resource from another.
    For example, a `Policy` resource would have to refer to the bucket name to build
    the policy configuration. Another example is `UserPolicyAttachment`, referring
    to the `Policy` and `User` resources to attach them. The following diagram will
    represent the relation between the resources, their reference option, and the
    XR boundary:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，某些资源需要相互引用。例如，`Policy` 资源必须引用桶名称以构建策略配置。另一个例子是 `UserPolicyAttachment`，它引用
    `Policy` 和 `User` 资源以将它们附加起来。下图将表示资源之间的关系、它们的引用选项以及 XR 边界：
- en: '![Figure 6.7 – Resource reference within and nested XR'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.7 – 资源引用与嵌套 XR'
- en: '](img/B17830_06_07.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17830_06_07.jpg)'
- en: Figure 6.7 – Resource reference within and nested XR
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.7 – 资源引用与嵌套 XR
- en: 'The complete example with XRD, composition, and Claim is available at [https://github.com/PacktPublishing/End-to-End-Automation-with-Kubernetes-and-Crossplane/tree/main/Chapter06/Hand-on-examples/same-nested-xr-reference](https://github.com/PacktPublishing/End-to-End-Automation-with-Kubernetes-and-Crossplane/tree/main/Chapter06/Hand-on-examples/same-nested-xr-reference).
    Let’s look at some of the essential code snippets to get comfortable with the
    example and the concept. Bucket name reference within the policy document is the
    first snippet we will see. Both `Policy` and `Bucket` MRs are in the same composition.
    The requirement is to refer to the bucket ARN name within the policy document
    JSON. Thankfully ARN identifiers have a predictable format, and we can construct
    the ARN from the bucket’s name. The bucket’s name is already available as both
    MRs are in the same composition, and the bucket name is an XR API input. Following
    is the code snippet showing the resource reference discussed. It patches the policy
    document attribute using the `CombineFromComposite` patch type. Here, the bucket
    name is embedded directly using an `fmt` string operation:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 带有 XRD、组合和声明的完整示例可在 [https://github.com/PacktPublishing/End-to-End-Automation-with-Kubernetes-and-Crossplane/tree/main/Chapter06/Hand-on-examples/same-nested-xr-reference](https://github.com/PacktPublishing/End-to-End-Automation-with-Kubernetes-and-Crossplane/tree/main/Chapter06/Hand-on-examples/same-nested-xr-reference)
    上查看。让我们先看一些关键的代码片段，以便熟悉这个示例和概念。桶名称在策略文档中的引用是我们将看到的第一个片段。`Policy` 和 `Bucket` MR
    都在同一组合中。要求是在策略文档 JSON 中引用桶的 ARN 名称。幸运的是，ARN 标识符有一个可预测的格式，我们可以根据桶的名称构造 ARN。桶的名称已经可用，因为这两个
    MR 位于同一组合中，并且桶名称是 XR API 输入。以下是展示所讨论资源引用的代码片段。它使用 `CombineFromComposite` 补丁类型修补策略文档属性。在这里，桶名称通过
    `fmt` 字符串操作直接嵌入：
- en: '[PRE33]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Next, we will look at how the `Policy` resource ARN is extracted to pass it
    on to the inner nested `XR - XIAMResourceUser`. It works in two steps:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将查看如何提取 `Policy` 资源的 ARN，并将其传递给内部嵌套的 `XR - XIAMResourceUser`。这个过程分为两步：
- en: Patch the ARN identifier of the `Policy` object back into the API response attribute.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `Policy` 对象的 ARN 标识符重新插入到 API 响应属性中。
- en: Patch the extracted ARN identifier as an API input to the nested XR (`XIAMResourceUser`).
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将提取的 ARN 标识符作为 API 输入，传递给嵌套 XR（`XIAMResourceUser`）。
- en: 'Note that initially, `XIAMResourceUser` will fail till the `Policy` object
    is wholly created and ARN is available. It is the typical control-plane behavior
    to make the resources eventually consistent. Following is the code snippet of
    the ARN patching from two resources, `Policy` and `XIAMResourceUser`:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，初始情况下，`XIAMResourceUser` 将失败，直到 `Policy` 对象完全创建并且 ARN 可用。这是典型的控制平面行为，确保资源最终一致性。以下是来自两个资源
    `Policy` 和 `XIAMResourceUser` 的 ARN 补丁代码片段：
- en: '[PRE55]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Finally, we will look at the code snippet of the `UserPolicyAttachment` resource,
    where we have two external resources (`User` and `Policy`) using the different
    referencing methods. The policy reference will be made directly with the ARN identifier,
    and the user reference will be made using the selector. Refer to the following
    code:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将查看`UserPolicyAttachment`资源的代码片段，其中包含了两个外部资源（`User`和`Policy`），使用了不同的引用方法。策略引用将直接使用
    ARN 标识符，而用户引用则使用选择器。请参考以下代码：
- en: '[PRE62]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'To execute the example yourself and validate the references, follow the next
    steps:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 若要自己执行示例并验证引用，请按照以下步骤操作：
- en: Apply XRDs and compositions to the target Crossplane.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 XRD 和组合应用于目标 Crossplane。
- en: Next, apply the Claim configuration. It will create all the required resources
    and establish the required dependencies.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，应用 Claim 配置。它将创建所有所需资源并建立必要的依赖关系。
- en: 'The following screenshot shows successful bucket creation in AWS:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了在 AWS 中成功创建桶：
- en: '![Figure 6.8 – S3 bucket provisioned'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.8 – S3 桶已配置'
- en: '](img/B17830_06_08.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17830_06_08.jpg)'
- en: Figure 6.8 – S3 bucket provisioned
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.8 – S3 桶已配置
- en: 'The following screenshot shows all the execution steps of the example:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了该示例的所有执行步骤：
- en: '![Figure 6.9 – Example execution'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.9 – 示例执行'
- en: '](img/B17830_06_09.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17830_06_09.jpg)'
- en: Figure 6.9 – Example execution
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.9 – 示例执行
- en: 'Also, note that the `User` object is created with the `Policy` resource attached
    in the AWS console:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请注意，在 AWS 控制台中，`User` 对象是与附加的 `Policy` 资源一起创建的：
- en: '![Figure 6.10 – Created user execution'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.10 – 创建的用户执行'
- en: '](img/B17830_06_10.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17830_06_10.jpg)'
- en: Figure 6.10 – Created user execution
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.10 – 创建的用户执行
- en: 'Finally, refer to the screenshot showing the events where `XIAMResourceUser`
    fails owing to the unavailability of the policy ARN. It will work automatically
    once the policy ARN is available:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，查看以下截图，展示了由于策略 ARN 不可用导致 `XIAMResourceUser` 失败的事件。一旦策略 ARN 可用，它将自动生效：
- en: '![Figure 6.11 – XIAMResourceUser failure event'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.11 – XIAMResourceUser 失败事件'
- en: '](img/B17830_06_11.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17830_06_11.jpg)'
- en: Figure 6.11 – XIAMResourceUser failure event
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.11 – XIAMResourceUser 失败事件
- en: Information
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: Please note that we have not used `MatchLabels` in our selector reference. Only
    `MatchControllerRef` was used with `true` as the value. In this case, there was
    only one `User` object in the same composition, which can be referred to without
    any issue. We will use `MatchLabels` if we have more than one `User` object within
    the composition or if we want to refer to a recourse external to the current composition.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在我们的选择器引用中并没有使用 `MatchLabels`。只有 `MatchControllerRef` 被设置为 `true` 作为值。在这种情况下，同一组合中只有一个
    `User` 对象，可以无问题地引用。如果组合中有多个 `User` 对象，或者我们想要引用当前组合外的资源，我们将使用 `MatchLabels`。
- en: We are done with the exploration of referring resources within and nested XR.
    We will refer to a resource outside the composition in the following section.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了对内部和嵌套 XR 中资源引用的探索。接下来我们将在下一节中引用组合外部的资源。
- en: Referring to an outside resource
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引用外部资源
- en: 'To refer to a resource outside the composition, we will use `MatchLabels` and
    `MatchControllerRef`. `MatchControllerRef` should be specified as `false`. This
    would refer to an outside resource, MR, or another resource inside a Claim/XR.
    We will modify the last example into two independent XRs and ensure that the `UserPolicyAttachment`
    object can refer to the `Policy` object from an independent XR using label selectors.
    The following diagram will represent the relation between the resources, their
    reference option, and the XR boundary:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 要引用组合外的资源，我们将使用 `MatchLabels` 和 `MatchControllerRef`。`MatchControllerRef` 应该被设置为
    `false`。这将引用外部资源、MR 或另一个位于 Claim/XR 内部的资源。我们将把最后一个示例修改为两个独立的 XR，并确保 `UserPolicyAttachment`
    对象能够使用标签选择器引用独立 XR 中的 `Policy` 对象。以下图示将表示资源之间的关系、它们的引用选项和 XR 边界：
- en: '![Figure 6.12 – Referring to an outside resource'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.12 – 引用外部资源'
- en: '](img/B17830_06_12.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17830_06_12.jpg)'
- en: Figure 6.12 – Referring to an outside resource
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.12 – 引用外部资源
- en: 'Note that the XRs are not nested here. The `XMyBucket` XR will not have `XIAMResourceUser`
    as one of the resources. Providing a scenario where both XRs are independent,
    the `Policy` object must refer to the XR using a label selector. Let’s look at
    a couple of essential code snippets that reference resources using selector labels.
    Following is the code that adds a couple of labels to the `Policy` resource. The
    first label, `resourceType`, is added directly to the metadata. The second label,
    `resourceName`, is patched using the bucket name, which is the input parameter
    for the XR:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这里XRs没有嵌套。`XMyBucket` XR不会将`XIAMResourceUser`作为其中的资源。在这两个XR独立的情况下，`Policy`对象必须通过标签选择器引用XR。让我们看几个重要的代码片段，这些片段通过选择器标签引用资源。以下是将几个标签添加到`Policy`资源的代码。第一个标签`resourceType`被直接添加到元数据中。第二个标签`resourceName`通过桶名称进行补丁，这是XR的输入参数：
- en: '[PRE87]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'The next part of the code will patch both `resourceName` and `resourceType`
    labels to the `UserPolicyAttachment` resource. It will be patched under policyArnSelector’s
    `MatchLabels` attribute. Both label values are part of the XR API input. You can
    decide on your predictable labeling strategy to make this discovery process standard.
    Note that the `MatchControllerRef` value is `true` for the `User` object reference
    within the XR and `false` for the `Policy` object reference across the XR:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的下一部分将把`resourceName`和`resourceType`标签应用到`UserPolicyAttachment`资源。它将在policyArnSelector的`MatchLabels`属性下进行补丁处理。这两个标签值是XR
    API输入的一部分。您可以根据自己的预测标签策略来标准化这一发现过程。请注意，XR中的`User`对象引用的`MatchControllerRef`值为`true`，而`Policy`对象引用的`MatchControllerRef`值为`false`：
- en: '[PRE103]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'The example discussed is available at [https://github.com/PacktPublishing/End-to-End-Automation-with-Kubernetes-and-Crossplane/tree/main/Chapter06/Hand-on-examples/different-xr-reference](https://github.com/PacktPublishing/End-to-End-Automation-with-Kubernetes-and-Crossplane/tree/main/Chapter06/Hand-on-examples/different-xr-reference).
    To fully experience resource provisioning, apply `composition-IAM.yaml`, `composition-bucket.yaml`,
    `xrd-IAM.yaml`, and `xrd-bucket.yaml` to the target Crossplane cluster. It will
    create both XRs and their respective compositions. Then, apply `claim-bucket.yaml`
    and `claim-iam.yaml` to create the resources. The following screenshot covers
    full execution of the example:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 所讨论的示例可以在[https://github.com/PacktPublishing/End-to-End-Automation-with-Kubernetes-and-Crossplane/tree/main/Chapter06/Hand-on-examples/different-xr-reference](https://github.com/PacktPublishing/End-to-End-Automation-with-Kubernetes-and-Crossplane/tree/main/Chapter06/Hand-on-examples/different-xr-reference)找到。要完全体验资源配置，应用`composition-IAM.yaml`、`composition-bucket.yaml`、`xrd-IAM.yaml`和`xrd-bucket.yaml`到目标Crossplane集群。这将创建两个XR及其各自的组合。然后，应用`claim-bucket.yaml`和`claim-iam.yaml`来创建资源。以下截图展示了示例的完整执行过程：
- en: '![Figure 6.13 – Referring to an outside resource – Example'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.13 – 引用外部资源 – 示例'
- en: '](img/B17830_06_13.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17830_06_13.jpg)'
- en: Figure 6.13 – Referring to an outside resource – Example
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.13 – 引用外部资源 – 示例
- en: Like *Figure 6.10*, the `User` object will be created with the `Policy` resource
    attached in the AWS console. We have now completed our exploration of resource
    references. The following section will look at secret propagation with a hands-on
    example.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 如*图6.10*所示，`User`对象将在AWS控制台中创建，并附加上`Policy`资源。我们现在已经完成了对资源引用的探讨。接下来的部分将通过一个动手示例来讲解密钥传播。
- en: Secret propagation hands-on
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 密钥传播动手操作
- en: 'Secret propagation is a critical Crossplane pattern, as all resources provisioned
    generally require credentials to access the resource. We covered the same topic
    in [*Chapter 4*](B17830_04_ePub.xhtml#_idTextAnchor056), as theory. Now, we will
    go through a hands-on journey using a real-world example. Before jumping into
    the example, let’s brush up on the concept quickly in a few points:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 密钥传播是一个关键的 Crossplane 模式，因为所有配置的资源通常都需要凭证来访问资源。我们在[*第4章*](B17830_04_ePub.xhtml#_idTextAnchor056)中已经讨论过相同的话题，这是理论部分。现在，我们将通过一个实际案例进行动手操作。在深入示例之前，让我们快速回顾一下这个概念的几个要点：
- en: Define the list of secret keys in XRD using the `ConnectionSecretKeys` attribute.
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`ConnectionSecretKeys`属性在XRD中定义密钥列表。
- en: Define the namespace and secret name under the respective resource using the
    `WriteConnectionSecretToRef` configuration.
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`WriteConnectionSecretToRef`配置定义各自资源下的命名空间和密钥名称。
- en: Finally, populate the secret keys defined in the XRD using the `ConnectionDetails`
    configuration.
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，使用`ConnectionDetails`配置填充在XRD中定义的密钥。
- en: 'We will expand the hands-on example used for resource reference with nested
    XR to learn configurations for storing the secret. We created an S3 bucket, its
    policy, and an IAM user to access the bucket in that specific example. The example
    will not be fully finished until we extract the bucket details and IAM credentials
    into secrets. That is what we will exactly try to do in this example. The bucket
    details are already available in the Bucket resource, but we need to create a
    new resource named `AccessKey` attached to the created user for IAM credentials.
    The following diagram will represent the two XRs, their resources, and the secret
    key storage structure:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将扩展用于资源引用的实践示例，并使用嵌套的 XR 来学习存储秘密的配置。在这个特定的示例中，我们创建了一个 S3 存储桶、其策略以及一个用于访问该存储桶的
    IAM 用户。直到我们将存储桶详情和 IAM 凭证提取到秘密中，示例才算完全完成。这正是我们在此示例中要做的。存储桶的详细信息已在 Bucket 资源中，但我们需要创建一个新的名为`AccessKey`的资源，附加到已创建的用户上，以获取
    IAM 凭证。以下图表将表示两个 XR、它们的资源以及秘密密钥存储结构：
- en: '![Figure 6.14 – Secret propagation'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.14 – 秘密传播'
- en: '](img/B17830_06_14.jpg)'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17830_06_14.jpg)'
- en: Figure 6.14 – Secret propagation
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.14 – 秘密传播
- en: 'Let’s look at some of the critical code snippets from the example. Following
    is the code from `XIAMWithCredential` and `XBucketWithCredential` to list the
    secret keys:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看示例中的一些关键代码片段。以下是来自`XIAMWithCredential`和`XBucketWithCredential`的代码，用于列出秘密密钥：
- en: '[PRE122]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: 'It was a simple list of secret keys under the `ConnectionSecretKeys` attribute
    in the XRD YAML. The secret name and storage namespace must be pushed to the resource
    to copy the secret key. Note that the namespace for the secret is automatically
    extracted out of the Claim. Following is the code from `AccessKey` and the `Bucket`
    resource to define the secret name and storage namespace:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 它只是一个简单的在 XRD YAML 文件中列出`ConnectionSecretKeys`属性下的秘密密钥列表。秘密名称和存储命名空间必须推送到资源中，以复制秘密密钥。请注意，秘密的命名空间会自动从声明中提取出来。以下是来自`AccessKey`和`Bucket`资源的代码，用于定义秘密名称和存储命名空间：
- en: '[PRE129]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: 'The final configuration we will look at is the actual copy of secrets into
    the keys defined at XRD. The following is the code from `AccessKey` and the `Bucket`
    resource to perform the same:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要查看的最终配置是将秘密复制到 XRD 中定义的密钥中。以下是来自`AccessKey`和`Bucket`资源的代码，用于执行相同操作：
- en: '[PRE154]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[PRE162]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: 'The example discussed is available at [https://github.com/PacktPublishing/End-to-End-Automation-with-Kubernetes-and-Crossplane/tree/main/Chapter06/Hand-on-examples/secret-propagation](https://github.com/PacktPublishing/End-to-End-Automation-with-Kubernetes-and-Crossplane/tree/main/Chapter06/Hand-on-examples/secret-propagation).
    To fully experience the secret creation in the Kubernetes cluster, create the
    XR, composition, and Claim from the preceding link. The following screenshot covers
    the complete example execution:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 讨论的示例可以在[https://github.com/PacktPublishing/End-to-End-Automation-with-Kubernetes-and-Crossplane/tree/main/Chapter06/Hand-on-examples/secret-propagation](https://github.com/PacktPublishing/End-to-End-Automation-with-Kubernetes-and-Crossplane/tree/main/Chapter06/Hand-on-examples/secret-propagation)找到。要在
    Kubernetes 集群中完整体验秘密创建，请从前述链接创建 XR、组合和声明。以下截图展示了完整的示例执行过程：
- en: '![Figure 6.15 – Secret propagation'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.15 – 秘密传播'
- en: '](img/B17830_06_15.jpg)'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17830_06_15.jpg)'
- en: Figure 6.15 – Secret propagation
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.15 – 秘密传播
- en: 'Once the resources are created in their entirety, you will see that the secrets
    are available inside the alpha namespace:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦资源完全创建，您将看到秘密已在 alpha 命名空间中可用：
- en: '![Figure 6.16 – Created secret'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.16 – 创建的秘密'
- en: '](img/B17830_06_16.jpg)'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17830_06_16.jpg)'
- en: Figure 6.16 – Created secret
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.16 – 创建的秘密
- en: Information
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: May organizations prefer to store secrets in a key vault rather than Kubernetes
    secrets. There is an example on the Crossplane website to execute this integration
    at [https://crossplane.io/docs/v1.6/guides/vault-injection.html](https://crossplane.io/docs/v1.6/guides/vault-injection.html).
    The Crossplane team is working on a more straightforward way to do this using
    an MR. The MR will represent the specific external vault resource and push the
    secrets accordingly. Keep watching the Crossplane release.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 一些组织可能更愿意将秘密存储在密钥库中，而不是 Kubernetes 秘密。Crossplane 网站上有一个示例，可以执行此集成，网址为[https://crossplane.io/docs/v1.6/guides/vault-injection.html](https://crossplane.io/docs/v1.6/guides/vault-injection.html)。Crossplane
    团队正在通过 MR 提供一种更简便的方式来实现这一点。MR 将代表特定的外部密钥库资源，并相应地推送秘密。请持续关注 Crossplane 的更新。
- en: This concludes our exploration of secrets. The next section of this chapter
    will use the Crossplane Helm provider to deploy an application in a remote Kubernetes
    cluster. It will continue what we looked at in [*Chapter 5*](B17830_05_ePub.xhtml#_idTextAnchor074),
    in the *Managing external software resources* section.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 这就结束了我们对密钥的探索。本章的下一部分将使用 Crossplane Helm 提供者在远程 Kubernetes 集群中部署应用程序。它将继续我们在[*第
    5 章*](B17830_05_ePub.xhtml#_idTextAnchor074)中在*管理外部软件资源*部分中讨论的内容。
- en: Helm provider hands-on
  id: totrans-293
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Helm 提供者实操
- en: It is exciting to introduce this aspect of Crossplane. It is precisely the crossroads
    where it unifies infrastructure automation and application automation. After creating
    an infrastructure resource, we would be interested in doing additional operations.
    For example, after deploying a Kubernetes cluster, we would be interested in setting
    up Prometheus or deploying an application in the remote Kubernetes cluster. Helm
    Crossplane provider can perform this operation.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 介绍 Crossplane 的这一方面令人兴奋。它恰恰是将基础设施自动化和应用程序自动化统一的交汇点。在创建基础设施资源后，我们会对进行其他操作感兴趣。例如，在部署完
    Kubernetes 集群后，我们会想要设置 Prometheus 或在远程 Kubernetes 集群中部署应用程序。Helm Crossplane 提供者可以执行此操作。
- en: 'Similarly, after provisioning a database, we will be interested in creating
    tables. SQL provider can perform these activities from Crossplane. The examples
    open a way to define all application dependencies in Crossplane and package them
    along with infrastructure. This section will go through a hands-on journey to
    experiment with Crossplane Helm provider. We will use GCP to create a Kubernetes
    cluster. It will fit well within the free tier limits. The following diagram represents
    how the Helm provider works inside the Crossplane ecosystem to manage application
    deployment in a remote Kubernetes cluster:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，在配置完数据库后，我们将有兴趣创建表。SQL 提供者可以从 Crossplane 执行这些操作。示例展示了一种方法，可以在 Crossplane
    中定义所有应用程序依赖，并将它们与基础设施一起打包。此部分将通过实践演示来实验 Crossplane Helm 提供者。我们将使用 GCP 创建一个 Kubernetes
    集群，它将完全符合免费套餐的限制。以下图示表示 Helm 提供者如何在 Crossplane 生态系统内部工作，以管理远程 Kubernetes 集群中的应用程序部署：
- en: '![Figure 6.17 – Helm provider and GKE'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.17 – Helm 提供者和 GKE'
- en: '](img/B17830_06_17.jpg)'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17830_06_17.jpg)'
- en: Figure 6.17 – Helm provider and GKE
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.17 – Helm 提供者和 GKE
- en: 'Let’s look at the details of how different components work together to manage
    applications using Helm in a few steps:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下不同组件如何通过几个步骤协同工作来使用 Helm 管理应用程序的细节：
- en: With your existing GCP provider and provider configuration, we can create a
    `Cluster.container.gcp.crossplane.io` MR.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用现有的 GCP 提供者和提供者配置，我们可以创建一个 `Cluster.container.gcp.crossplane.io` MR。
- en: Define the namespace and secret name in the MR to store the remote cluster credentials.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 MR 中定义命名空间和密钥名称，以存储远程集群凭据。
- en: Install the Helm provider in the Crossplane control plane using the respective
    configuration YAML.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用相应的配置 YAML 在 Crossplane 控制平面中安装 Helm 提供者。
- en: Next, set up the provider configuration for Helm provider using the Kubernetes
    credentials and GCP credentials stored in the Kubernetes secrets.
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用存储在 Kubernetes 密钥中的 Kubernetes 凭据和 GCP 凭据，为 Helm 提供者设置提供者配置。
- en: Now we can create the Helm releases in the remote GKE cluster using the `Release.helm.crossplane.io`
    MR.
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以使用 `Release.helm.crossplane.io` MR 在远程 GKE 集群中创建 Helm 发布。
- en: 'Refer to the following code for the Helm provider configuration YAML:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '请参考以下代码，了解 Helm 提供者配置的 YAML： '
- en: '[PRE164]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: 'The following is the configuration for the Helm provider GKE. It requires credentials
    from both the Kubernetes cluster and the cloud provider. The secret reference
    under the credentials section refers to a specific Kubernetes cluster. The secret
    reference under the identity section refers to the GCP cloud credentials. The
    identity section of credentials may not be available for other cloud providers.
    Ensure that the Kubernetes APIs are enabled for the GCP cloud credentials:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 Helm 提供者 GKE 的配置。它需要来自 Kubernetes 集群和云提供商的凭据。在凭据部分下的密钥引用指向特定的 Kubernetes
    集群。身份部分下的密钥引用指向 GCP 云凭据。凭据的身份部分对于其他云提供商可能不可用。请确保 Kubernetes API 已为 GCP 云凭据启用：
- en: '[PRE170]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '[PRE176]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '[PRE181]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '[PRE189]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: 'Before applying the provider configuration, we must ensure that the GKE cluster
    is created and that its credentials are stored secretly. All examples of the Helm
    provider experiment are available at [https://github.com/PacktPublishing/End-to-End-Automation-with-Kubernetes-and-Crossplane/tree/main/Chapter06/Hand-on-examples/helm-provider](https://github.com/PacktPublishing/End-to-End-Automation-with-Kubernetes-and-Crossplane/tree/main/Chapter06/Hand-on-examples/helm-provider).
    Apply `GKE.yaml` to create the cluster. Refer to the following screenshot of GKE
    cluster creation, Helm provider installation, and provider configuration setup:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用提供程序配置之前，我们必须确保 GKE 集群已创建，并且其凭证已秘密存储。所有 Helm 提供程序实验的示例可在 [https://github.com/PacktPublishing/End-to-End-Automation-with-Kubernetes-and-Crossplane/tree/main/Chapter06/Hand-on-examples/helm-provider](https://github.com/PacktPublishing/End-to-End-Automation-with-Kubernetes-and-Crossplane/tree/main/Chapter06/Hand-on-examples/helm-provider)
    中找到。应用 `GKE.yaml` 来创建集群。参见以下 GKE 集群创建、Helm 提供程序安装和提供程序配置设置的截图：
- en: '![Figure 6.18 – GKE and Helm provider setup'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.18 – GKE 和 Helm 提供程序设置'
- en: '](img/B17830_06_18.jpg)'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17830_06_18.jpg)'
- en: Figure 6.18 – GKE and Helm provider setup
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.18 – GKE 和 Helm 提供程序设置
- en: 'Now we can start managing application deployment in the GKE cluster using Helm.
    The release is the MR construct available in Helm provider used to manage applications.
    Release MR has the following vital configurations:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以开始使用 Helm 在 GKE 集群中管理应用程序部署了。Release 是 Helm 提供程序中用于管理应用程序的 MR 构造。Release
    MR 具有以下关键配置：
- en: The `spec.forProvider.chart` configuration will hold basic information about
    the chart, such as the repository name, chart name, and version.
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spec.forProvider.chart` 配置将保存图表的基本信息，例如仓库名称、图表名称和版本。'
- en: '`spec.forProvider.valuesFrom`, `spec.forProvider.values`, and `spec.forProvider.set`
    are the three different ways to provide the values for the Helm templated variables.
    If we set the values for the same variable in multiple ways, then the order of
    preference will be the same as the order mentioned previously.'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spec.forProvider.valuesFrom`、`spec.forProvider.values` 和 `spec.forProvider.set`
    是为 Helm 模板变量提供值的三种不同方式。如果我们以多种方式为相同的变量设置值，则优先顺序将与前述顺序相同。'
- en: '`spec.forProvider.patchesFrom` will be helpful in specifying post-rendering
    patches to override values at the last mile before deployment.'
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spec.forProvider.patchesFrom` 在指定后渲染补丁以在部署前最后一公里覆盖值时将非常有用。'
- en: 'Refer to a simple `Release` configuration:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 参见一个简单的 `Release` 配置：
- en: '[PRE190]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '[PRE191]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '[PRE192]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '[PRE193]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '[PRE195]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '[PRE196]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '[PRE197]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '[PRE198]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '[PRE199]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '[PRE200]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '[PRE201]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '[PRE202]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: 'Applying the preceding configuration will create the hello world example in
    the GKE cluster. Refer to the following screenshot with application deployment:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 应用前述配置将会在 GKE 集群中创建 hello world 示例。参见以下应用部署的截图：
- en: '![Figure 6.19 – Crossplane Helm deployment'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.19 – Crossplane Helm 部署'
- en: '](img/B17830_06_19.jpg)'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17830_06_19.jpg)'
- en: Figure 6.19 – Crossplane Helm deployment
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.19 – Crossplane Helm 部署
- en: 'The same `Release` MR from the Crossplane Helm provider also handles upgrades
    to our initial release of the Helm chart. We can change the required chart information,
    values, or patches and re-apply the YAML to upgrade our release. Apply `Helm-test-deploy-upgrade.yaml`,
    which changes the container version to move our release version. Before creating
    an upgraded release, the `Release controller` MR checks any actual change to the
    configuration. It will make sure that there are no unnecessary releases. Refer
    to the following screenshot showing an upgraded release:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 来自 Crossplane Helm 提供程序的相同 `Release` 合并请求（MR）也处理了我们初始发布的 Helm 图表的升级。我们可以更改所需的图表信息、值或补丁，并重新应用
    YAML 文件以升级我们的发布。应用 `Helm-test-deploy-upgrade.yaml`，该文件将更改容器版本以更新发布版本。在创建升级后的发布之前，`Release
    controller` 合并请求会检查配置的任何实际更改。它会确保没有不必要的发布。参见下面的截图，显示了升级后的发布：
- en: '![Figure 6.20 – Crossplane Helm release upgrade'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.20 – Crossplane Helm 发布升级'
- en: '](img/B17830_06_20.jpg)'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17830_06_20.jpg)'
- en: Figure 6.20 – Crossplane Helm release upgrade
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.20 – Crossplane Helm 发布升级
- en: This concludes our Helm experimentation for now. The following section will
    rescue us from code and help us learn some guiding principles to define the XR
    API boundaries.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们当前的 Helm 实验。接下来的部分将带我们脱离代码，帮助我们学习一些指导原则，以定义 XR API 边界。
- en: Tip
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: In all our examples, we referred to composition directly with its name in the
    Claim/XRs. We can also refer to the composition using label selectors after adding
    the respective labels in the composition metadata.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们所有的示例中，我们直接在声明/跨平台请求（Claim/XRs）中使用名称引用了组件。我们也可以在组件元数据中添加相应标签后，使用标签选择器引用组件。
- en: Defining API boundaries
  id: totrans-366
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义 API 边界
- en: 'We expect platform engineers to compose all the infrastructure and application
    automation concerns in XR APIs. How to define an API boundary is a bit tricky.
    It’s because many conflicting trade-off points are influencing the API boundaries.
    Let’s start with the fact that we wanted to compose every resource required for
    an application and its infrastructure in a single composition. Here are some considerations
    that will not allow us to do that:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 我们期望平台工程师将所有基础设施和应用自动化的关注点组合到 XR API 中。如何定义 API 边界有点棘手。因为有许多冲突的权衡点影响着 API 边界。让我们从我们希望将应用程序及其基础设施所需的每个资源组合到一个单一的组合开始。以下是一些使我们无法做到这一点的考虑因素：
- en: There would be many security and architecture policies that need to centralize.
    We cannot add them again and again in multiple compositions.
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 会有许多需要集中管理的安全和架构策略。我们不能在多个组合中反复添加它们。
- en: Some resources may have compliance requirements and must be composed separately
    for audit purposes.
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些资源可能有合规要求，必须单独组成以便审计。
- en: Overly big compositions are difficult to read, understand, debug, and refactor.
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过于庞大的组合很难阅读、理解、调试和重构。
- en: Testing a bulk composition is difficult.
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试大规模组合是困难的。
- en: Every application will require some customization to the infrastructure recipe,
    provided we have a bulk composition. We will fork the main code for customization.
    It will be challenging to maintain as we grow.
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个应用程序都需要对基础设施配方进行一些定制，前提是我们有一个大规模组合。我们将分叉主代码以进行定制。随着规模增长，这将变得难以维护。
- en: Specific infrastructure such as the network layer is owned by a particular team.
    It must be composed separately and referred to in the required XR.
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特定的基础设施，如网络层，属于特定团队。它必须单独组成，并在需要的 XR 中引用。
- en: There could be more reasons depending upon your organization’s realities. In
    summary, we must build small XR APIs and organize them together with resource
    references and nested XRs. As soon as we talk about small XR APIs, API boundary
    questions arise. Which are the resources that make sense to be composed together?
    It is something like what we do in the world of microservices. A merge versus
    a split trade-off is something that we always do in microservices.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你所在组织的实际情况，可能会有更多的原因。总的来说，我们必须构建小型的 XR API，并将它们与资源引用和嵌套 XR 一起组织。当我们谈论小型 XR
    API 时，API 边界的问题就会出现。哪些资源组合在一起是有意义的？这就像我们在微服务世界中所做的事情。合并与拆分的权衡是我们在微服务中总是要做的事情。
- en: Tip
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: It’s challenging to get the boundary correct on the first go. We should do our
    initial trade-off analysis, which provides an initial boundary and then evolves
    in iterations based on real-world experience.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一次尝试时，很难正确确定边界。我们应该进行初步的权衡分析，提供一个初步的边界，然后根据实际经验迭代演变。
- en: Earlier in our S3 bucket example, we composed the bucket and its policy in a
    single XR. The second nested XR was holding the IAM user and policy attachment
    resource. This design can ensure that the IAM XR can be used with other resources.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的 S3 桶示例中，我们将桶和其策略组合在一个单一的 XR 中。第二个嵌套 XR 持有 IAM 用户和策略附加资源。这个设计确保了 IAM XR
    可以与其他资源一起使用。
- en: Information
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: Later in [*Chapter 10*](B17830_10_ePub.xhtml#_idTextAnchor154), *Onboarding
    Applications with Crossplane*, we will do a trade-off analysis of a hands-on journey
    example to analyze the impact of different API boundaries.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 稍后在 [*第 10 章*](B17830_10_ePub.xhtml#_idTextAnchor154)，《使用 Crossplane 完成应用程序入职》中，我们将进行一次权衡分析，结合实际操作示例来分析不同
    API 边界的影响。
- en: 'The following diagram covers different factors influencing the trade-off analysis:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表涵盖了影响权衡分析的不同因素：
- en: '![Figure 6.21 – Crossplane Helm release upgrade'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.21 – Crossplane Helm 发布升级'
- en: '](img/B17830_06_21.jpg)'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17830_06_21.jpg)'
- en: Figure 6.21 – Crossplane Helm release upgrade
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.21 – Crossplane Helm 发布升级
- en: This concludes the API boundary discussion. In the following section of the
    chapter, we will explore monitoring the Crossplane control plane.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 这部分讨论结束了 API 边界。在本章接下来的部分，我们将探讨监控 Crossplane 控制平面。
- en: Alerts and monitoring
  id: totrans-385
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 警报和监控
- en: 'Prometheus and Grafana, the popular tools in the Kubernetes world, can be used
    for Crossplane monitoring as well. Before starting, we should ensure that the
    Crossplane pod can emit metrics. It is as simple as setting the metrics parameter
    to `true` (`--set metrics.enabled=true`) during the Helm deployment of Crossplane.
    We can do it either at the first Crossplane release or upgrade the Helm release
    using the following command:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: Prometheus 和 Grafana 是 Kubernetes 世界中流行的工具，也可以用于 Crossplane 监控。在开始之前，我们应该确保
    Crossplane pod 能够发出指标。只需在部署 Crossplane 时将 metrics 参数设置为 `true`（`--set metrics.enabled=true`）即可。这可以在第一次发布
    Crossplane 时完成，或者使用以下命令升级 Helm 发布：
- en: '[PRE203]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '[PRE204]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '[PRE205]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: 'We can split the monitoring and alert setup into three parts:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将监控和告警设置分为三个部分：
- en: Enable Prometheus to scrape metrics.
  id: totrans-392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用 Prometheus 抓取指标。
- en: Set up monitoring alerts.
  id: totrans-393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置监控告警。
- en: Enable the Grafana dashboard.
  id: totrans-394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用 Grafana 仪表板。
- en: We can start first with metric scraping.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从指标抓取开始。
- en: Enabling Prometheus to scrape metrics
  id: totrans-396
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用 Prometheus 抓取指标
- en: 'First, we must set up Prometheus in the Kubernetes control plane. We will do
    this installation using the Prometheus operator. You can look at the quick start
    guide at [https://prometheus-operator.dev/docs/prologue/quick-start/](https://prometheus-operator.dev/docs/prologue/quick-start/).
    The following are the simple steps to get the Prometheus operator installed:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须在 Kubernetes 控制平面中设置 Prometheus。我们将通过 Prometheus 操作器进行此安装。您可以查看 [https://prometheus-operator.dev/docs/prologue/quick-start/](https://prometheus-operator.dev/docs/prologue/quick-start/)
    上的快速入门指南。以下是安装 Prometheus 操作器的简单步骤：
- en: '[PRE207]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '[PRE208]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '[PRE209]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '[PRE210]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: '[PRE211]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '[PRE212]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '[PRE213]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '[PRE214]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '[PRE215]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '[PRE216]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: 'All configurations required for the monitoring example are available at [https://github.com/PacktPublishing/End-to-End-Automation-with-Kubernetes-and-Crossplane/tree/main/Chapter06/Hand-on-examples/monitoring](https://github.com/PacktPublishing/End-to-End-Automation-with-Kubernetes-and-Crossplane/tree/main/Chapter06/Hand-on-examples/monitoring).
    Once you have Prometheus installed, the next step is to ask Prometheus to scrape
    the metrics from the Crossplane and GCP provider pods. We need to add `ControllerConfig`
    to the GCP provider to define the metrics port. Configuration of the same is available
    in `GCP-Provider.yaml`. Then, we can configure `PodMonitor`, which instructs Prometheus
    to scrape metrics from a specific POD at a given port. Configuration of the same
    is available in `monitor.yaml`. Once these steps are done, we can start looking
    at the controller reconciliation metrics in the Prometheus console. Create a GCP
    `CloudSQLInstance` instance with an incorrect configuration, which will not reconcile,
    and look at the reconciliation failure metrics. The following is the Prometheus
    query for the reconciliation failure metrics from `CloudSQLInstance`:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 监控示例所需的所有配置可以在 [https://github.com/PacktPublishing/End-to-End-Automation-with-Kubernetes-and-Crossplane/tree/main/Chapter06/Hand-on-examples/monitoring](https://github.com/PacktPublishing/End-to-End-Automation-with-Kubernetes-and-Crossplane/tree/main/Chapter06/Hand-on-examples/monitoring)
    中找到。一旦您安装了 Prometheus，下一步就是让 Prometheus 从 Crossplane 和 GCP 提供程序 pod 中抓取指标。我们需要向
    GCP 提供程序添加 `ControllerConfig`，以定义指标端口。相应的配置可以在 `GCP-Provider.yaml` 中找到。然后，我们可以配置
    `PodMonitor`，指示 Prometheus 在指定端口从特定 POD 中抓取指标。相应的配置可以在 `monitor.yaml` 中找到。完成这些步骤后，我们可以开始在
    Prometheus 控制台中查看控制器调和指标。创建一个配置错误的 GCP `CloudSQLInstance` 实例，该实例将无法调和，并查看调和失败的指标。以下是从
    `CloudSQLInstance` 获取调和失败指标的 Prometheus 查询：
- en: '[PRE217]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: 'Refer to the following screenshot where we are looking at the reconciliation
    failure metrics for `CloudSQLInstance`:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考以下截图，我们正在查看 `CloudSQLInstance` 的调和失败指标：
- en: '![Figure 6.22 – Metrics'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.22 – 指标'
- en: '](img/B17830_06_22.jpg)'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17830_06_22.jpg)'
- en: Figure 6.22 – Metrics
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.22 – 指标
- en: The next step is to set up monitoring alerts for the reconciliation failure
    scenarios.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是为调和失败场景设置监控告警。
- en: Setting up monitoring alerts
  id: totrans-415
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置监控告警
- en: 'We can also set up alerts for this reconciliation error using the following
    configuration. It may be too much to trigger alerts for every reconciliation failure.
    Additionally, some of the reconciliation errors are expected scenarios. For example,
    if one resource is referring to another, the referring resource will fail to reconcile
    until the referred resource is provisioned. The following alert configuration
    is configured to throw an alert only if the reconciliation error exceeds 20 times
    within a 5-minute window:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用以下配置为此协调错误设置警报。为每个协调失败触发警报可能有些过多。此外，某些协调错误是预期的场景。例如，如果一个资源引用了另一个资源，那么在被引用的资源未被提供之前，引用资源的协调会失败。以下警报配置仅在协调错误超过
    20 次，并且在 5 分钟窗口内发生时触发警报：
- en: '[PRE218]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: '[PRE219]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: '[PRE220]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: '[PRE221]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: '[PRE222]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: '[PRE223]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: '[PRE224]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: '[PRE225]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: '[PRE226]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: '[PRE227]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: '[PRE228]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: '[PRE229]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: '[PRE230]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: '[PRE231]'
  id: totrans-430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: '[PRE232]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: '[PRE233]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: '[PRE234]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: '[PRE235]'
  id: totrans-434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: 'Refer to the following screenshot where we are looking at the reconciliation
    failure alert:'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见以下截图，我们正在查看协调失败警报：
- en: '![Figure 6.23 – Alerts'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.23 – 警报'
- en: '](img/B17830_06_23.jpg)'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17830_06_23.jpg)'
- en: Figure 6.23 – Alerts
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.23 – 警报
- en: Information
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: The list of metrics emitted by Crossplane is an area to be improved. We should
    get detailed metrics around compositions and Claims. We can expect more enhancements
    happening soon from the Crossplane community.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: Crossplane 发出的指标列表是一个需要改进的领域。我们应当获得关于组合和声明的详细指标。我们可以期待 Crossplane 社区很快会做出更多的改进。
- en: The final step involves setting up the Grafana dashboard to visualize the metrics
    and errors better.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是设置 Grafana 仪表板，以更好地可视化指标和错误。
- en: Enabling the Grafana dashboard
  id: totrans-442
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用 Grafana 仪表板
- en: 'Finally, we can set up a Grafana dashboard to visualize the metrics, logs,
    and alerts. The Grafana dashboard will already be installed in the cluster as
    part of the Prometheus Operator. What we must do additionally is to set up a dashboard
    for the Crossplane control plane. At `grafana.json` in the Git repository, I have
    added a sample dashboard configuration from the Crossplane community. Import the
    JSON into Grafana and look through the metrics. Refer to the following Grafana
    screenshot, which indicates that CloudSQLInstance is the active controller running
    the reconciliation loop:'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以设置一个 Grafana 仪表板来可视化指标、日志和警报。Grafana 仪表板已经作为 Prometheus Operator 的一部分安装在集群中。我们需要做的额外工作是为
    Crossplane 控制平面设置一个仪表板。在 Git 仓库中的 `grafana.json` 文件里，我添加了来自 Crossplane 社区的示例仪表板配置。将
    JSON 导入 Grafana 并查看指标。请参见以下 Grafana 截图，显示 CloudSQLInstance 是运行协调循环的活动控制器：
- en: '![Figure 6.24 – Grafana metrics view'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.24 – Grafana 指标视图'
- en: '](img/B17830_06_24.jpg)'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17830_06_24.jpg)'
- en: Figure 6.24 – Grafana metrics view
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.24 – Grafana 指标视图
- en: We will conclude the monitoring concepts here and move on to the final section
    of the chapter, which covers a few troubleshooting patterns.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在这里结束监控概念的讨论，并进入本章的最后部分，介绍几个故障排除模式。
- en: More troubleshooting patterns
  id: totrans-448
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多故障排除模式
- en: 'We explored different troubleshooting patterns in the last couple of chapters
    and earlier in this chapter. It covered ways to look at resource references in
    the resource description to move from composition to the MR, using the event logs
    in the resource description, and enabling Crossplane/provider pod logs to debug.
    This section will add a couple more debugging skills to enhance our platform development
    skills. The following are the new patterns we will look at:'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章节和本章节的前面部分，我们探讨了不同的故障排除模式。它涵盖了查看资源描述中的资源引用，以从组合转移到 MR，使用资源描述中的事件日志，启用 Crossplane/provider
    pod 日志进行调试的方法。本节将增加一些调试技巧，以提升我们的平台开发技能。以下是我们将要查看的新模式：
- en: '`ControllerConfig` (the configuration we used earlier to enable debugging and
    expose the metrics port).'
  id: totrans-450
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ControllerConfig`（我们之前用来启用调试和暴露指标端口的配置）。'
- en: '**Hung resources**: Sometimes, we may notice that the resources are hung, and
    we cannot delete them. It should be because of the finalizers. We should patch
    the resource with an empty finalizer and delete it again. This will guarantee
    resource deletion only in the Crossplane control plane. It is not guaranteed that
    the resource is deleted from the external provider. We must visit the external
    provider console to validate whether the resources are deleted. The following
    code will render the finalizers empty:'
  id: totrans-451
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**挂起的资源**：有时，我们可能会注意到资源被挂起，并且无法删除它们。这通常是由于 finalizer 导致的。我们应当用空的 finalizer
    修补该资源，然后再次删除它。这将确保仅在 Crossplane 控制平面中删除资源。不能保证资源从外部提供商处删除。我们必须访问外部提供商控制台，以验证资源是否已删除。以下代码将
    finalizer 设为空：'
- en: '[PRE236]'
  id: totrans-452
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE236]'
- en: Summary
  id: totrans-453
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter covered many new Crossplane patterns required to build the state-of-the-art
    resource composing control plane. I am explicitly mentioning the resource composing
    control plane instead of the infrastructure composing control plane because we
    no longer compose only external cloud provider resources. We experimented with
    resource referencing, secret propagation, and Helm deployment with the help of
    hands-on examples. We also looked at setting up monitoring with another hands-on
    example. In addition to these hands-on journeys, we also learned some debugging
    skills and ways to define our API boundaries.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了构建最先进资源编排控制平面所需的许多新的 Crossplane 模式。我特别提到资源编排控制平面，而不是基础设施编排控制平面，因为我们不再仅仅编排外部云提供商的资源。在实际操作示例的帮助下，我们实验了资源引用、秘密传播和
    Helm 部署。我们还通过另一个实践示例探讨了如何设置监控。除了这些动手实践，我们还学习了一些调试技巧以及定义 API 边界的方法。
- en: The next chapter will cover different ways to extend and scale Crossplane.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将介绍扩展和规模化 Crossplane 的不同方法。

["```\n$ kubectl get configmaps \n```", "```\n$ kubectl get cm \n```", "```\n$  kubectl get configmaps -A\nNAMESPACE         NAME                                                   DATA   AGE\ndefault           kube-root-ca.crt                                       1      23d\nkube-node-lease   kube-root-ca.crt                                       1      23d\nkube-public       cluster-info                                           1      23d\nkube-public       kube-root-ca.crt                                       1      23d\n...<removed for brevity>... \n```", "```\n$ kubectl create configmap my-first-configmap\nconfigmap/my-first-configmap created \n```", "```\n$ kubectl get cm\nNAME                 DATA   AGE\nmy-first-configmap   0      42s \n```", "```\n# ~/my-second-configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-second-configmap \n```", "```\n$ kubectl apply -f ~/my-second-configmap.yaml\nconfigmap/my-second-configmap created \n```", "```\n$  kubectl get cm\nNAME                  DATA   AGE\nkube-root-ca.crt      1      23d\nmy-first-configmap    0      5s\nmy-second-configmap   0      2s \n```", "```\n$ kubectl create cm my-third-configmap --from-literal=color=blue\nconfigmap/my-third-configmap created \n```", "```\n$ kubectl create cm my-fourth-configmap --from-literal=color=blue --from-literal=version=1 --from-literal=environment=prod\nconfigmap/my-fourth-configmap created \n```", "```\n$ kubectl get cm\nNAME                  DATA   AGE\nmy-first-configmap    0      9m30s\n**my-fourth-configmap   3      6m23s**\nmy-second-configmap   0      8m2s\nmy-third-configmap    1      7m9s \n```", "```\n$ kubectl get cm my-fourth-configmap -o yaml\napiVersion: v1\ndata:\n  color: blue\n  environment: prod\n  version: \"1\"\nkind: ConfigMap\nmetadata:\n  creationTimestamp: \"2024-08-10T06:20:49Z\"\n  name: my-fourth-configmap\n  namespace: default\n  resourceVersion: \"25647\"\n  uid: 3c8477dc-f3fe-4d69-b66a-403679a88450 \n```", "```\n# ~/my-fifth-configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-fifth-configmap\ndata:\n  color: \"blue\"\n  version: \"1\"\n  environment: \"prod\" \n```", "```\n$ kubectl apply -f my-fifth-configmap.yaml\nconfigmap/my-fifth-configmap created \n```", "```\n$ echo \"I'm just a dummy config file\" >> $HOME/configfile.txt \n```", "```\n$ kubectl create cm my-sixth-configmap --from-literal=color=yellow --from-file=$HOME/configfile.txt\nconfigmap/my-sixth-configmap created \n```", "```\n$ kubectl get cm my-sixth-configmap\nNAME                  DATA   AGE\nmy-sixth-configmap    2      38s \n```", "```\n# ~/my-seventh-configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-seventh-configmap\ndata:\n  color: \"green\"\n  configfile.txt: |\n    I'm another configuration file. \n```", "```\n$ kubectl apply -f my-seventh-configmap.yaml\nconfigmap/my-seventh-configmap created \n```", "```\n$ kubectl get configmap/my-seventh-configmap\nNAME                   DATA   AGE\nmy-seventh-configmap   2      36s \n```", "```\n# ~/my-env-file.env\nhello=world\ncolor=blue\nrelease=1.0\nproduction=true \n```", "```\n$ kubectl create cm my-eight-configmap --from-env-file my-env-file.env\nconfigmap/my-eight-configmap created \n```", "```\n$ kubectl get cm my-eight-configmap\nNAME                 DATA   AGE\nmy-eight-configmap   4      7s \n```", "```\n$ kubectl describe cm my-fourth-configmap\nName:         my-fourth-configmap\nNamespace:    default\nLabels:       <none>\nAnnotations:  <none>\nData\n====\ncolor:\n----\nblue\nenvironment:\n----\nprod\nversion:\n----\n1\nBinaryData\n====\nEvents:  <none> \n```", "```\n# flask-pod-with-configmap.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: flask-pod-with-configmap\n  labels:\n    app: my-flask-app\nspec:\n  containers:\n    - name: flask-with-configmap\n      image: quay.io/iamgini/my-flask-app:1.0\n      env:\n        - name: COLOR # Any other name works here.\n          valueFrom:\n            configMapKeyRef:\n              name: my-third-configmap\n              key: color \n```", "```\n$ kubectl apply -f flask-pod-with-configmap.yaml\npod/flask-pod-with-configmap created\n$ kubectl get pod\nNAME                       READY   STATUS    RESTARTS   AGE\nflask-pod-with-configmap   1/1     Running   0          5s \n```", "```\n$ kubectl exec pods/flask-pod-with-configmap -- env\nPATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nHOSTNAME=flask-pod-with-configmap\n**COLOR=blue**\nKUBERNETES_PORT_443_TCP=tcp://10.96.0.1:443\n...<removed for brevity>... \n```", "```\n$ kubectl expose pod flask-pod-with-configmap --port=8081 --target-port=5000 --type=NodePort \n```", "```\n$ kubectl port-forward flask-pod-with-configmap 20000:5000\nForwarding from 127.0.0.1:20000 -> 5000\nForwarding from [::1]:20000 -> 5000 \n```", "```\n20000 to the target port 5000 temporarily. You can now access the application in your local browser using the address 127.0.0.1:20000.\n```", "```\n# flask-pod-with-configmap-all.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: flask-pod-with-configmap-all\nspec:\n  containers:\n    - name: flask-with-configmap\n      image: quay.io/iamgini/my-flask-app:1.0\n      envFrom:\n        - configMapRef:\n            name: my-fourth-configmap \n```", "```\n$ kubectl apply -f flask-pod-with-configmap-all.yaml\npod/ flask-pod-with-configmap-all created \n```", "```\n$ kubectl exec pods/flask-pod-with-configmap-all -- env\nPATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nHOSTNAME=flask-pod-with-configmap-all\nenvironment=prod\nversion=1\ncolor=blue\nKUBERNETES_PORT_443_TCP_PORT=443\nKUBERNETES_PORT_443_TCP_ADDR=10.96.0.1\n...<removed for brevity>... \n```", "```\n# flask-pod-with-configmap-volume.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: flask-pod-with-configmap-volume\nspec:\n  containers:\n    - name: flask-with-configmap-volume\n      image: quay.io/iamgini/my-flask-app:1.0\n      volumeMounts:\n        - name: configuration-volume # match the volume name\n          mountPath: /etc/conf\n  volumes:\n    - name: configuration-volume\n      configMap:\n        name: my-sixth-configmap # Configmap name goes here \n```", "```\n$ kubectl apply -f flask-pod-with-configmap-volume.yaml\npod/flask-pod-with-configmap-volume created \n```", "```\n$  kubectl exec pods/flask-pod-with-configmap-volume -- ls /etc/conf\ncolor\nconfigfile.txt \n```", "```\n$ kubectl exec pods/flask-pod-with-configmap-volume -- cat /etc/conf/color\nyellow\n$ kubectl exec pods/flask-pod-with-configmap-volume -- cat /etc/conf/configfile.txt\nI'm just a dummy config file \n```", "```\n$ kubectl delete cm my-first-configmap\nconfigmap \"my-first-configmap\" deleted \n```", "```\n$ kubectl delete cm my-sixth-configmap\nconfigmap \"my-sixth-configmap\" deleted \n```", "```\n$ kubectl apply -f flask-pod-with-configmap-volume.yaml\npod/flask-pod-with-configmap-volume created\n$ kubectl get pod\nNAME                              READY   STATUS              RESTARTS   AGE\nflask-pod-with-configmap-volume   0/1     ContainerCreating   0          61s \n```", "```\n$ kubectl describe pod flask-pod-with-configmap-volume\nName:             flask-pod-with-configmap-volume\nNamespace:        default\n...<removed for brevity>...\nEvents:\n  Type     Reason       Age               From               Message\n  ----     ------       ----              ----               -------\n  Normal   Scheduled    71s               default-scheduler  Successfully assigned default/flask-pod-with-configmap-volume to minikube-m03\n  **Warning  FailedMount  7s (x8 over 71s)  kubelet            MountVolume.SetUp failed for volume \"configuration-volume\" : configmap \"my-sixth-configmap\" not found** \nContainerCreating state.\n```", "```\n# immutable-configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: immutable-configmap\ndata:\n  color: \"blue\"\n  version: \"1.0\"\n  environment: \"prod\"\nimmutable: true \n```", "```\n$ kubectl get secret -A \n```", "```\n$ kubectl create secret generic my-first-secret --from-literal='db_password=my-db-password' \n```", "```\n$ kubectl get secrets\nNAME              TYPE     DATA   AGE\nmy-first-secret   Opaque   1      37s \n```", "```\n$ kubectl get secrets my-first-secret -o yaml\napiVersion: v1\ndata:\n  db_password: bXktZGItcGFzc3dvcmQ=\nkind: Secret\nmetadata:\n  creationTimestamp: \"2024-08-10T13:13:32Z\"\n  name: my-first-secret\n  namespace: default\n  resourceVersion: \"36719\"\n  uid: 7ccf5120-d1c5-4874-ba4b-894274fd27e6\ntype: Opaque \n```", "```\n$ echo -n 'my-db-password' | base64\nbXktZGItcGFzc3dvcmQ= \n```", "```\n# ~/secret-from-file.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: my-second-secret\ntype: Opaque\ndata:\n    db_password: bXktZGItcGFzc3dvcmQ= \n```", "```\n$ kubectl apply -f ~/secret-from-file.yaml \n```", "```\n$ kubectl get secret my-second-secret -o yaml\napiVersion: v1\ndata:\n  db_password: bXktZGItcGFzc3dvcmQ=\nkind: Secret\n...<removed for brevity>...\ntype: Opaque \n```", "```\n# ~/secret-from-file-stringData.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: my-secret-stringdata\ntype: Opaque\nstringData:\n  db_password: my-db-password \n```", "```\nkubectl apply -f secret-from-file-stringData.yaml\nsecret/my-secret-stringdata created \n```", "```\n$ kubectl get secrets my-secret-stringdata -o yaml\napiVersion: v1\ndata:\n  db_password: bXktZGItcGFzc3dvcmQ=\nkind: Secret\n...<removed for brevity>...\n  name: my-secret-stringdata\n  namespace: default\n  resourceVersion: \"37229\"\n  uid: 5078124b-7318-44df-a2da-a30ea5088e3f\ntype: Opaque \n```", "```\n$ echo -n 'mypassword' > ./password.txt \n```", "```\n$ kubectl create secret generic mypassword --from-file=./password.txt\nsecret/mypassword created \n```", "```\n$ kubectl describe secret/mypassword\nName:         mypassword\nNamespace:    default\nLabels:       <none>\nAnnotations:  <none>\nType:  Opaque\nData\n====\npassword.txt:  10 bytes \n```", "```\n$ kubectl get secret my-second-secret -o yaml\napiVersion: v1\ndata:\n  db_password: bXktZGItcGFzc3dvcmQ=\nkind: Secret\nmetadata:\n  creationTimestamp: \"2024-02-13T04:15:56Z\"\n  name: my-second-secret\n  namespace: default\n  resourceVersion: \"90372\"\n  uid: 94b7b529-baed-4844-8097-f6c2a001fa7b\ntype: Opaque \n```", "```\n$  echo 'bXktZGItcGFzc3dvcmQ=' | base64 --decode\nmy-db-password \n```", "```\n# flask-pod-with-secret.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: flask-pod-with-secret\n  labels:\n    app: flask-with-secret\nspec:\n  containers:\n    - name: flask-with-secret\n      image: quay.io/iamgini/my-flask-app:1.0\n      env:\n        - name: PASSWORD_ENV_VAR # Name of env variable\n          valueFrom:\n            secretKeyRef:\n              name: my-first-secret # Name of secret object\n              key: db_password # Name of key in secret object \n```", "```\n$ kubectl apply -f flask-pod-with-secret.yaml \n```", "```\n$  kubectl exec pods/flask-pod-with-secret -- env\nPATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nHOSTNAME=flask-pod-with-secret\n**PASSWORD_ENV_VAR=my-db-password**\nKUBERNETES_SERVICE_PORT=443\n...<removed for brevity>... \n```", "```\n# secret-from-file-database.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: appdb-secret\ntype: Opaque\nstringData:\n  db_user: appadmin\n  db_password: appdbpassword \n```", "```\n$ kubectl apply -f secret-from-file-database.yaml\nsecret/appdb-secret created \n```", "```\n# flask-pod-with-secret-all.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: flask-pod-with-secret-all\n  labels:\n    app: flask-with-secret\nspec:\n  containers:\n    - name: flask-with-secret\n      image: quay.io/iamgini/my-flask-app:1.0\n      envFrom:\n        - secretRef:\n            name: appdb-secret # Name of the secret object \n```", "```\n$ kubectl apply -f flask-pod-with-secret-all.yaml\npod/flask-pod-with-secret-all created \n```", "```\n$ kubectl exec pods/flask-pod-with-secret-all -- env |grep -i app\ndb_user=appadmin\ndb_password=appdbpassword \n```", "```\n# flask-pod-with-secret-volume.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: flask-pod-with-secret-volume\n  labels:\n    app: flask-with-secret-volume\nspec:\n  containers:\n    - name: flask-with-secret\n      image: quay.io/iamgini/my-flask-app:1.0\n      volumeMounts:\n        - name: mysecret-volume\n          mountPath: '/etc/password-mounted-path'\n          readOnly: true  # Setting readOnly to true to prevent writes to the secret\n  volumes:\n    - name: mysecret-volume\n      secret:\n        secretName: my-second-secret # Secret name goes here \n```", "```\n$ kubectl apply -f flask-pod-with-secret-volume.yaml \n```", "```\n$ kubectl exec pods/flask-pod-with-secret-volume --  cat /etc/password-mounted-path/db_password\nmy-db-password \n```", "```\n$ kubectl delete secret my-first-secret\nsecret \"my-first-secret\" deleted \n```"]
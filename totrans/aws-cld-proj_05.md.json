["```\n data \"aws_iam_policy\" \"rekognition_policy\" {\n  arn = <st c=\"16531\">\"arn:aws:iam::aws:policy/AmazonRekognitionReadOnlyAccess\"</st> }\nresource \"aws_iam_role_policy_attachment\" \"codedeploy_service_role_policy_attach\" {\n   role        = aws_iam_role.lambda_role.name\n   policy_arn = \"${data.aws_iam_policy.rekognition_policy.arn}\"\n} <st c=\"16775\">data \"archive_file\" \"zip_the_python_code\"</st> {\n    type        = \"zip\"\n    source_file  = \"${path.module}/python/rekognition.py\"\n    output_path = \"${path.module}/python/rekognition.zip\"\n} <st c=\"16941\">resource \"aws_lambda_function\" \"terraform_lambda_func\" {</st><st c=\"16997\">filename                       = \"${path.module}/python/rekognition.zip\"</st>\n <st c=\"17048\">function_name                  = \"Detection_Lambda_Function\"</st> role                           = aws_iam_role.lambda_role.arn\n    handler                        = \"rekognition.lambda_handler\" <st c=\"17168\">runtime                        = \"python3.8\"</st> depends_on                     = [aws_iam_role_policy_attachment.attach_iam_policy_to_iam_role]\n}\n```", "```\n<st c=\"18564\">resource \"aws_api_gateway_rest_api\" \"my_api\"</st> {\n  name = \"my-api\"\n  description = \"My API Gateway\"\n  endpoint_configuration { <st c=\"18684\">types = [\"REGIONAL\"]</st> }\n} <st c=\"18709\">resource \"aws_api_gateway_resource\" \"root\"</st> {\n  rest_api_id = aws_api_gateway_rest_api.my_api.id\n  parent_id = aws_api_gateway_rest_api.my_api.root_resource_id <st c=\"18864\">path_part = \"friendly\"</st> }\n```", "```\n resource \"aws_api_gateway_method\" \"proxy\" {\n  rest_api_id = aws_api_gateway_rest_api.my_api.id\n  resource_id = aws_api_gateway_resource.root.id <st c=\"19347\">http_method = \"POST\"</st>\n <st c=\"19367\">authorization = \"NONE\"</st> }\nresource \"aws_api_gateway_integration\" \"lambda_integration\" {\n  rest_api_id = aws_api_gateway_rest_api.my_api.id\n  resource_id = aws_api_gateway_resource.root.id\n  http_method = aws_api_gateway_method.proxy.http_method <st c=\"19606\">integration_http_method = \"POST\"</st>\n <st c=\"19638\">type = \"AWS\"</st>\n <st c=\"19651\">uri = aws_lambda_function.terraform_lambda_func.invoke_arn</st> }\nresource \"aws_api_gateway_method_response\" \"proxy\" {\n  rest_api_id = aws_api_gateway_rest_api.my_api.id\n  resource_id = aws_api_gateway_resource.root.id\n  http_method = aws_api_gateway_method.proxy.http_method\n  status_code = \"200\"\n}\nresource \"aws_api_gateway_integration_response\" \"proxy\" {\n  rest_api_id = aws_api_gateway_rest_api.my_api.id\n  resource_id = aws_api_gateway_resource.root.id\n  http_method = aws_api_gateway_method.proxy.http_method\n  status_code = aws_api_gateway_method_response.proxy.status_code\n  depends_on = [\n    aws_api_gateway_method.proxy,\n    aws_api_gateway_integration.lambda_integration\n  ]\n}\n```", "```\n $ terraform apply\n```", "```\n aws_iam_policy.iam_policy_for_lambda: Creation complete after 1s [id=arn:aws:iam::381672823963:policy/aws_iam_policy_for_terraform_aws_lambda_role]\naws_api_gateway_rest_api.my_api: Creation complete after 1s [id=2g9sm87cnd]\naws_iam_role.lambda_role: Creation complete after 1s [id=Detection_Lambda_Function_Role]\naws_api_gateway_resource.root: Creation complete after 1s [id=06421l]\naws_iam_role_policy_attachment.codedeploy_service_role_policy_attach: Creation complete after 1s [id=Detection_Lambda_Function_Role-20240401171553538300000001]\naws_iam_role_policy_attachment.attach_iam_policy_to_iam_role: Creation complete after 1s [id=Detection_Lambda_Function_Role-20240401171553543900000002]\naws_api_gateway_method.proxy: Creation complete after 0s [id=agm-2g9sm87cnd-06421l-POST]\naws_api_gateway_method_response.proxy: Creation complete after 0s [id=agmr-2g9sm87cnd-06421l-POST-200]\naws_lambda_function.terraform_lambda_func: Creation complete after 15s [id=Detection_Lambda_Function]\naws_api_gateway_integration.lambda_integration: Creation complete after 0s [id=agi-2g9sm87cnd-06421l-POST]\naws_lambda_permission.apigw_lambda: Creation complete after 0s [id=AllowExecutionFromAPIGateway]\naws_api_gateway_integration_response.proxy: Creation complete after 0s [id=agir-2g9sm87cnd-06421l-POST-200]\naws_api_gateway_deployment.deployment: Creation complete after 1s [id=g5m5qa] <st c=\"22887\">Apply complete!</st> <st c=\"22903\">Resources: 13 added, 0 changed, 0 destroyed.</st> Outputs: <st c=\"22957\">deployment_invoke_url = \"https://2g9sm87cnd.execute-api.us-east-1.amazonaws.com/dev\"</st>\n```", "```\n rekognition_response = rekognition.detect_faces(\nImage=image, Attributes=['ALL']) <st c=\"23990\">if len(rekognition_response['FaceDetails']) != 1:</st> raise ValueError( <st c=\"24058\">'Please upload a picture with only one face'</st>)\nsmile = rekognition_response['FaceDetails'][0]['Smile']\neyesOpen = rekognition_response['FaceDetails'][0]['EyesOpen']\nresult = 'Bad Profile Photo' <st c=\"24252\">if smile['Value'] == True and eyesOpen['Value'] == True:</st>\n<st c=\"24355\">DetectFaces</st> API also returns a list of emotions identified in the person’s photo. The script is set up to save the list in a variable named <st c=\"24495\">Emotions</st>:\n\n```", "```\n\n\t\t\t<st c=\"24650\">Enhance the script to</st> <st c=\"24673\">take the person’s emotions into consideration before making the final verdict of a good or</st> <st c=\"24764\">bad photo.</st>\n\t\t\t<st c=\"24774\">Testing your application</st>\n\t\t\t<st c=\"24799\">Congratulations, you have a working photo</st> <st c=\"24842\">identification application in AWS, which identifies if a photo is professional-looking enough for</st> <st c=\"24940\">social media.</st>\n\t\t\t*<st c=\"24953\">Figure 5</st>**<st c=\"24962\">.4</st>* <st c=\"24964\">shows what you’ve deployed so far.</st> <st c=\"25000\">An API Gateway endpoint with a</st> `<st c=\"25031\">dev</st>` <st c=\"25034\">stage, configured with a</st> `<st c=\"25060\">/friendly</st>` <st c=\"25069\">resource path that supports the</st> `<st c=\"25102\">POST</st>` <st c=\"25106\">method.</st> <st c=\"25115\">This method invokes a Lambda, written in Python, that calls the Rekognition</st> `<st c=\"25191\">DetectFaces</st>` <st c=\"25202\">API and parses</st> <st c=\"25218\">the results.</st>\n\t\t\t![Figure 5.4 – Image analyzer API architecture](img/B22051_05_4.jpg)\n\n\t\t\t<st c=\"25373\">Figure 5.4 – Image analyzer API architecture</st>\n\t\t\t<st c=\"25417\">However, you</st> <st c=\"25430\">have not really tested it.</st> <st c=\"25458\">How do you know</st> <st c=\"25474\">it works?</st>\n\t\t\t<st c=\"25483\">This application does not have a user interface like the previous ones.</st> <st c=\"25556\">Nonetheless, there are multiple ways to interact with these types of HTTP applications, for example: using a terminal tool, such as</st> `<st c=\"25688\">curl</st>`<st c=\"25692\">, using an application, such as Postman, or using another application, such as a</st> <st c=\"25773\">Python script.</st>\n\t\t\t<st c=\"25787\">Start with Postman.</st> <st c=\"25808\">Postman is an API platform for building and using APIs.</st> <st c=\"25864\">If you do not have it installed, install it and</st> <st c=\"25912\">open it.</st>\n\t\t\t<st c=\"25920\">Select</st> `<st c=\"25928\">POST</st>` <st c=\"25932\">as the method and paste your previously noted deployment URL, followed by</st> `<st c=\"26007\">/friendly</st>` <st c=\"26016\">at the end of it in the URL field.</st> <st c=\"26052\">Navigate to the body section, select</st> `<st c=\"26089\">raw</st>`<st c=\"26092\">, and paste the</st> <st c=\"26108\">following code:</st>\n\n```", "```\n\n\t\t\t<st c=\"26141\">You are missing images to test this application.</st> <st c=\"26191\">Recall that your Lambda function received an image as an input.</st> <st c=\"26255\">You will find two images in the</st> `<st c=\"26287\">chapter5/code</st>` <st c=\"26300\">folder:</st> `<st c=\"26309\">goodphoto.jpeg</st>` <st c=\"26323\">and</st> `<st c=\"26328\">badphoto.png</st>`<st c=\"26340\">.</st>\n\t\t\t<st c=\"26341\">To send images over the wire, the easiest way is to use</st> `<st c=\"26398\">base64</st>` <st c=\"26404\">encoding.</st> <st c=\"26415\">Open your favorite terminal, navigate to where the images are located, and run the</st> `<st c=\"26498\">openssl</st>` <st c=\"26505\">command, replacing the</st> `<st c=\"26529\"><infile></st>` <st c=\"26537\">and</st> `<st c=\"26542\"><outfile></st>` <st c=\"26551\">variables with</st> `<st c=\"26567\">badphoto.png</st>` <st c=\"26579\">and</st> `<st c=\"26584\">badphoto.txt</st>` <st c=\"26596\">respectively.</st> <st c=\"26611\">This command creates a new file named</st> `<st c=\"26649\">badphoto.txt</st>`<st c=\"26661\">. Inside, you will find the</st> `<st c=\"26689\">base64</st>` <st c=\"26695\">representation of</st> <st c=\"26714\">your image:</st>\n\n```", "```\n\n\t\t\t<st c=\"26771\">Go back to</st> <st c=\"26783\">Postman and replace the body with your generated</st> `<st c=\"26832\">base64</st>` <st c=\"26838\">encoding.</st> <st c=\"26849\">Send the request.</st> <st c=\"26867\">The result should look like</st> *<st c=\"26895\">Figure 5</st>**<st c=\"26903\">.5</st>*<st c=\"26905\">. You receive a</st> `<st c=\"26921\">200 OK</st>` <st c=\"26927\">status code, with a</st> `<st c=\"26948\">Bad Profile Photo</st>` <st c=\"26965\">response in</st> <st c=\"26978\">the body.</st>\n\t\t\t![Figure 5.5 – Postman configuration](img/B22051_05_5.jpg)\n\n\t\t\t<st c=\"27755\">Figure 5.5 – Postman configuration</st>\n\t\t\t<st c=\"27789\">Do it again, this time with the good photo in the same directory, and observe how the response is different.</st> <st c=\"27899\">You can also do it more times with photos of yourself</st> <st c=\"27953\">or friends.</st>\n\t\t\t<st c=\"27964\">However, the initial focus of this project was to be integrated with other applications, many of them Python applications.</st> <st c=\"28088\">Open the</st> `<st c=\"28097\">interact.py</st>` <st c=\"28108\">file located in the</st> `<st c=\"28129\">chapter5/code</st>` <st c=\"28142\">folder.</st>\n\t\t\t<st c=\"28150\">In this file, you</st> <st c=\"28168\">will find a Python application that reads two arguments,</st> `<st c=\"28226\">url</st>` <st c=\"28229\">and</st> `<st c=\"28234\">image</st>`<st c=\"28239\">, from the standard input and sends a</st> `<st c=\"28277\">POST</st>` <st c=\"28281\">request to the received URL, with the image encoded in</st> `<st c=\"28337\">base64</st>` <st c=\"28343\">in</st> <st c=\"28347\">the body:</st>\n\n```", "```\n $ python3 interact.py <st c=\"29172\">invoke_url</st> goodphoto.jpeg\n```", "```\n $ terraform destroy\n```", "```\n\n```"]
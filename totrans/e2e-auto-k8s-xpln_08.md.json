["```\n# Set a variable with the profile name\n```", "```\nAWS_PROFILE=default\n```", "```\n# Create a configuration file with profile data\n```", "```\necho -e \"[$AWS_PROFILE]\\naws_access_key_id = $(aws configure get aws_access_key_id --profile $AWS_PROFILE)\\naws_secret_access_key = $(aws configure get aws_secret_access_key --profile $AWS_PROFILE)\" > aws-credentials.conf\n```", "```\n# Create kubernetes secret from the configuration file\n```", "```\nkubectl create secret generic aws-credentials -n crossplane-system --from-file=creds=./aws-credentials.conf\n```", "```\napiVersion: pkg.crossplane.io/v1alpha1\n```", "```\nkind: ControllerConfig\n```", "```\nmetadata:\n```", "```\n  name: debug-config\n```", "```\nspec:\n```", "```\n  args:\n```", "```\n    - --debug\n```", "```\n---\n```", "```\napiVersion: pkg.crossplane.io/v1\n```", "```\nkind: Provider\n```", "```\nmetadata:\n```", "```\n  name: provider-aws\n```", "```\nspec:\n```", "```\n  package: \"crossplane/provider-aws:v0.23.0\"\n```", "```\n  controllerConfigRef:\n```", "```\n    name: debug-config\n```", "```\napiVersion: aws.crossplane.io/v1beta1\n```", "```\nkind: ProviderConfig\n```", "```\nmetadata:\n```", "```\n  name: aws-credentials\n```", "```\nspec:\n```", "```\n  credentials:\n```", "```\n    source: Secret\n```", "```\n    secretRef:\n```", "```\n      namespace: crossplane-system\n```", "```\n      name: aws-credentials\n```", "```\n      key: creds\n```", "```\n- type: CombineFromComposite\n```", "```\n  toFieldPath: spec.forProvider.document\n```", "```\n  combine:\n```", "```\n    variables:\n```", "```\n    - fromFieldPath: spec.parameters.bucketName\n```", "```\n    - fromFieldPath: spec.parameters.bucketName\n```", "```\n    strategy: string\n```", "```\n    string:\n```", "```\n      fmt: |\n```", "```\n        {\n```", "```\n          \"Version\": \"2012-10-17\",\n```", "```\n          \"Statement\": [\n```", "```\n            {\n```", "```\n              \"Effect\": \"Allow\",\n```", "```\n              \"Action\": [ \"s3:*\" ],\n```", "```\n              \"Resource\": [\n```", "```\n                \"arn:aws:s3:::%s\",\n```", "```\n                \"arn:aws:s3:::%s/*\"\n```", "```\n              ]\n```", "```\n            }\n```", "```\n          ]\n```", "```\n        }\n```", "```\n# Policy - Patch API response with ARN\n```", "```\n- type: ToCompositeFieldPath\n```", "```\n  fromFieldPath: status.atProvider.arn\n```", "```\n  toFieldPath: status.policyARN\n```", "```\n# XIAMResourceUser - patch the policy arn as API input\n```", "```\n- fromFieldPath: status.policyARN\n```", "```\n  toFieldPath: spec.parameters.policyARN\n```", "```\n- base:\n```", "```\n  apiVersion: iam.aws.crossplane.io/v1beta1\n```", "```\n  kind: UserPolicyAttachment\n```", "```\n  spec:\n```", "```\n    providerConfigRef:\n```", "```\n      name: aws-credentials\n```", "```\n    forProvider:\n```", "```\n    # Selectors refer to the User from the same composition \n```", "```\n      userNameSelector:\n```", "```\n        matchControllerRef: true\n```", "```\n  patches:\n```", "```\n  # Patch the resource name\n```", "```\n  # <Type>-<Parent Type>-<Parent Resource Name>\n```", "```\n  - type: CombineFromComposite\n```", "```\n    toFieldPath: metadata.name\n```", "```\n    combine:\n```", "```\n      variables:\n```", "```\n      - fromFieldPath: spec.parameters.resourceType\n```", "```\n      - fromFieldPath: spec.parameters.resourceName\n```", "```\n      strategy: string\n```", "```\n      string:\n```", "```\n        fmt: \"policy-attachement-%s-%s\"\n```", "```\n  # Patch the policy ARN reference\n```", "```\n  - toFieldPath: spec.forProvider.policyArn\n```", "```\n    fromFieldPath: spec.parameters.policyARN\n```", "```\n- base:\n```", "```\n  apiVersion: iam.aws.crossplane.io/v1beta1\n```", "```\n  kind: Policy\n```", "```\n  metadata:\n```", "```\n    # Add labels one as the resource type\n```", "```\n    labels:\n```", "```\n      resourceType: bucket\n```", "```\n  spec:\n```", "```\n    providerConfigRef:\n```", "```\n      name: aws-credentials\n```", "```\n    forProvider:\n```", "```\n      path: \"/\"\n```", "```\n  patches:\n```", "```\n  # patch labels two from the resource name\n```", "```\n  - fromFieldPath: spec.parameters.bucketName\n```", "```\n    toFieldPath: metadata.labels[resourceName]\n```", "```\n- base:\n```", "```\n  apiVersion: iam.aws.crossplane.io/v1beta1\n```", "```\n  kind: UserPolicyAttachment\n```", "```\n  spec:\n```", "```\n    providerConfigRef:\n```", "```\n      name: aws-credentials\n```", "```\n    forProvider:\n```", "```\n      # refer to the IAM user from the same composition \n```", "```\n      userNameSelector:\n```", "```\n        matchControllerRef: true\n```", "```\n      policyArnSelector:\n```", "```\n        matchControllerRef: false\n```", "```\n  patches:\n```", "```\n  # Patch the policy ARN lable 1\n```", "```\n  - toFieldPath: spec.forProvider.policyArnSelector.matchLabels.resourceName\n```", "```\n    fromFieldPath: spec.parameters.resourceName\n```", "```\n  # Patch the policy ARN lable 2\n```", "```\n  - toFieldPath: spec.forProvider.policyArnSelector.matchLabels.resourceType\n```", "```\n    fromFieldPath: spec.parameters.resourceType\n```", "```\n# List of secrets defined in XRD - XBucketWithCredential\n```", "```\nconnectionSecretKeys:\n```", "```\n  - bucket_url\n```", "```\n# List of secrets defined in XRD - XIAMWithCredential\n```", "```\nconnectionSecretKeys:\n```", "```\n  - iam_username\n```", "```\n  - iam_password\n```", "```\n# Secret name and namespace patching for Bucket resource\n```", "```\n# Namespace to save the secret same as the resource namespace\n```", "```\n- fromFieldPath: spec.claimRef.namespace\n```", "```\n  toFieldPath: spec.writeConnectionSecretToRef.namespace\n```", "```\n# Generate and patch the kubernete secret name \n```", "```\n- fromFieldPath: spec.parameters.bucketName\n```", "```\n  toFieldPath: spec.writeConnectionSecretToRef.name\n```", "```\n  transforms:\n```", "```\n  - type: string\n```", "```\n    string:\n```", "```\n      fmt: \"details-bucket-%s\"\n```", "```\n# Secret name and namespace patching for AccessKey resource\n```", "```\n# Namespace to save the secret is the same as the resource\n```", "```\n- fromFieldPath: spec.parameters.secretNamespace\n```", "```\n  toFieldPath: spec.writeConnectionSecretToRef.namespace\n```", "```\n# Generate and patch the kubernete secret name \n```", "```\n- type: CombineFromComposite\n```", "```\n  toFieldPath: spec.writeConnectionSecretToRef.name\n```", "```\n  combine:\n```", "```\n    variables:\n```", "```\n    - fromFieldPath: spec.parameters.resourceType\n```", "```\n    - fromFieldPath: spec.parameters.resourceName\n```", "```\n    strategy: string\n```", "```\n    string:\n```", "```\n      fmt: \"credentials-%s-%s\"\n```", "```\n# Populate the connection secret keys from AccessKey secrets\n```", "```\nconnectionDetails:\n```", "```\n- name: iam_username\n```", "```\n  fromConnectionSecretKey: username\n```", "```\n- name: iam_password\n```", "```\n  fromConnectionSecretKey: password\n```", "```\n# Copy the endpoint secret key to bucketURL for \n```", "```\nconnectionDetails:\n```", "```\n- name: bucketURL\n```", "```\n  fromConnectionSecretKey: endpoint\n```", "```\napiVersion: pkg.crossplane.io/v1\n```", "```\nkind: Provider\n```", "```\nmetadata:\n```", "```\n  name: provider-helm\n```", "```\nspec:\n```", "```\n  package: crossplane/provider-helm:master\n```", "```\napiVersion: helm.crossplane.io/v1beta1\n```", "```\nkind: ProviderConfig\n```", "```\nmetadata:\n```", "```\n  name: helm-provider\n```", "```\nspec:\n```", "```\n  # GKE credentials \n```", "```\n  credentials:\n```", "```\n    source: Secret\n```", "```\n    secretRef:\n```", "```\n      name: secret-gke-for-helm-deployment\n```", "```\n      namespace: crossplane-system\n```", "```\n      key: kubeconfig\n```", "```\n  # GCP credentials\n```", "```\n  identity:\n```", "```\n    type: GoogleApplicationCredentials\n```", "```\n    source: Secret\n```", "```\n    secretRef:\n```", "```\n      name: gcp-account\n```", "```\n      namespace: crossplane-system\n```", "```\n      key: service-account\n```", "```\napiVersion: helm.crossplane.io/v1beta1\n```", "```\nkind: Release\n```", "```\nmetadata:\n```", "```\n  name: redis-crossplane-example\n```", "```\nspec:\n```", "```\n  providerConfigRef:\n```", "```\n    name: helm-provider\n```", "```\n  forProvider:\n```", "```\n    chart:\n```", "```\n      name: hello\n```", "```\n      repository: https://www.kleinloog.ch/hello-helm/\n```", "```\n      version: 0.3.0\n```", "```\n    namespace: default\n```", "```\n# Fresh install with metrics enables\n```", "```\nhelm install crossplane --namespace crossplane-system crossplane-stable/crossplane --set args='{--debug}' --set metrics.enabled=true\n```", "```\n# Helm upgrade with metrics enables\n```", "```\nhelm upgrade crossplane --namespace crossplane-system crossplane-stable/crossplane --set args='{--debug}' --set metrics.enabled=true\n```", "```\n# Step 1: Clone the Prometheus operator repository and switch to the folder\n```", "```\ngit clone https://github.com/prometheus-operator/kube-prometheus.git\n```", "```\ncd kube-prometheus\n```", "```\n# Step 2: Execute the initial setup instructions\n```", "```\nkubectl create -f manifests/setup\n```", "```\n# Step 3: Install the operator\n```", "```\nkubectl create -f manifests/\n```", "```\n# Step 4: Once the pods are up and running, view the dashboard after the port forward \n```", "```\nkubectl --namespace monitoring port-forward svc/Prometheus-k8s 9090\n```", "```\nhttp://localhost:9090/\n```", "```\nsum_over_time(controller_runtime_reconcile_errors_total{namespace=\"crossplane-system\", controller=\"managed/cloudsqlinstance.database.gcp.crossplane.io\"}[5m])\n```", "```\napiVersion: monitoring.coreos.com/v1\n```", "```\nkind: PrometheusRule\n```", "```\nmetadata:\n```", "```\n  name: sql-alerts\n```", "```\n  namespace: crossplane-system\n```", "```\n  labels:\n```", "```\n    app.kubernetes.io/part-of: crossplane\n```", "```\nspec:\n```", "```\n  groups:\n```", "```\n  - name: Crossplane\n```", "```\n    rules:\n```", "```\n    - alert: ReconciliationFailure\n```", "```\n      expr: sum_over_time(controller_runtime_reconcile_errors_total{namespace=\"crossplane-system\", controller=\"managed/cloudsqlinstance.database.gcp.crossplane.io\"}[5m]) > 20\n```", "```\n      for: 5m\n```", "```\n      labels:\n```", "```\n        severity: page\n```", "```\n      annotations:\n```", "```\nsummary: '{{ $labels.controller }} reconciliation has been failing for more than 20 time in the last 5 minutes.'\n```", "```\n    kubectl patch <resource-type> <resource-name> -p '{\"metadata\":{\"finalizers\": []}}' --type=merge\n    ```"]
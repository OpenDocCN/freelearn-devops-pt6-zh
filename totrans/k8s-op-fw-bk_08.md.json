["```\n$ make help\nUsage:\n  make <target>\nGeneral\n  help             Display this help.\nDevelopment\n  manifests        Generate WebhookConfiguration, ClusterRole and CustomResourceDefinition objects.\n  generate         Generate code containing DeepCopy, DeepCopyInto, and DeepCopyObject method implementations.\n  fmt              Run go fmt against code.\n  vet              Run go vet against code.\n  test             Run tests.\nBuild\n  build            Build manager binary.\n  run              Run a controller from your host.\n  docker-build     Build docker image with the manager.\n  docker-push      Push docker image with the manager.\nDeployment\n  install          Install CRDs into the K8s cluster specified in ~/.kube/config.\n  uninstall        Uninstall CRDs from the K8s cluster specified in ~/.kube/config.\n  deploy           Deploy controller to the K8s cluster specified in ~/.kube/config.\n  undeploy         Undeploy controller from the K8s cluster specified in ~/.kube/config.\n  controller-gen   Download controller-gen locally if necessary.\n  kustomize        Download kustomize locally if necessary.\n  envtest          Download envtest-setup locally if necessary.\n  bundle           Generate bundle manifests and metadata, then validate generated files.\n  bundle-build     Build the bundle image.\n  bundle-push      Push the bundle image.\n  opm              Download opm locally if necessary.\n  catalog-build    Build a catalog image.\n  catalog-push     Push a catalog image.\n```", "```\nbuild: generate fmt vet ## Build manager binary.\n```", "```\n  go build -o bin/manager main.go\n```", "```\n$ make build\n/home/nginx-operator/bin/controller-gen object:headerFile=\"hack/boilerplate.go.txt\" paths=\"./...\"\ngo fmt ./...\ngo vet ./...\ngo build -o bin/manager main.go\n```", "```\ndocker-build: test ## Build docker image with the manager.\n```", "```\n  docker build -t ${IMG} .\n```", "```\n# Build the manager binary\n```", "```\nFROM golang:1.17 as builder\n```", "```\nWORKDIR /workspace\n```", "```\n# Copy the Go Modules manifests\n```", "```\nCOPY go.mod go.mod\n```", "```\nCOPY go.sum go.sum\n```", "```\n# cache deps before building and copying source so that we don't need to re-download as much\n```", "```\n# and so that source changes don't invalidate our downloaded layer\n```", "```\nRUN go mod download\n```", "```\n# Copy the go source\n```", "```\nCOPY main.go main.go\n```", "```\nCOPY api/ api/\n```", "```\nCOPY controllers/ controllers/\n```", "```\nCOPY assets/ assets\n```", "```\n# Build\n```", "```\nRUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -o manager main.go\n```", "```\n# Use distroless as minimal base image to package the manager binary\n```", "```\n# Refer to https://github.com/GoogleContainerTools/distroless for more details\n```", "```\nFROM gcr.io/distroless/static:nonroot\n```", "```\nWORKDIR /\n```", "```\nCOPY --from=builder /workspace/manager . \n```", "```\nUSER 65532:65532\n```", "```\nENTRYPOINT [\"/manager\"]\n```", "```\n# Image URL to use all building/pushing image targets\n```", "```\nIMG ?= controller:latest\n```", "```\n$ IMG=docker.io/sample/nginx-operator:v0.1 make docker-build\n... \ndocker build -t docker.io/sample/nginx-operator:v0.1 .\n[+] Building 99.1s (18/18) FINISHED\n => [internal] load build definition from Dockerfile 0.0s\n => [builder  1/10] FROM docker.io/library/golang:1.17 21.0s\n => [builder  2/10] WORKDIR /workspace             2.3s\n => [builder  3/10] COPY go.mod go.mod             0.0s\n => [builder  4/10] COPY go.sum go.sum             0.0s\n => [builder  5/10] RUN go mod download            31.3s\n => [builder  6/10] COPY main.go main.go           0.0s\n => [builder  7/10] COPY api/ api/                 0.0s\n => [builder  8/10] COPY controllers/ controllers/ 0.0s\n => [builder  9/10] COPY assets/ assets            0.0s\n => [builder 10/10] RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -o manager main.go                     42.5s\n => [stage-1 2/3] COPY --from=builder /workspace/manager .\n => exporting to image                             0.2s\n => => exporting layers                            0.2s\n => => writing image sha256:dd6546d...b5ba118bdba4 0.0s\n => => naming to docker.io/sample/nginx-operator:v0.1\n```", "```\n$ docker images\nREPOSITORY              TAG       IMAGE ID       CREATED        SIZE\nsample/nginx-operator   v0.1      dd6546d2afb0   45 hours ago   48.9MB\n```", "```\n$ kind create cluster\nCreating cluster \"kind\" ...\n Ensuring node image (kindest/node:v1.21.1)  \n Preparing nodes   \n Writing configuration  \n Starting control-plane  \n Installing CNI  \n Installing StorageClass  \n Set kubectl context to \"kind-kind\"\nYou can now use your cluster with\nkubectl cluster-info --context kind-kind\nHave a nice day! \n```", "```\n$ kubectl cluster-info\nKubernetes master is running at https://127.0.0.1:56384\nCoreDNS is running at https://127.0.0.1:56384/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy\n```", "```\n$ IMG=docker.io/sample/nginx-operator:v0.1 make docker-push docker push docker.io/sample/nginx-operator:v0.1\nThe push refers to repository [docker.io/sample/nginx-operator]\n18452d09c8a6: Pushed 5b1fa8e3e100: Layer already exists \nv0.1: digest: sha256:5315a7092bd7d5af1dbb454c05c15c54131 bd3ab78809ad1f3816f05dd467930 size: 739\n```", "```\n$ export IMG=docker.io/sample/nginx-operator:v0.1 \n$ make docker-push\ndocker push docker.io/sample/nginx-operator:v0.1\nThe push refers to repository [docker.io/sample/nginx-operator]\n18452d09c8a6: Pushed 5b1fa8e3e100: Layer already exists \nv0.1: digest: sha256:5315a7092bd7d5af1dbb454c05c15c54131bd 3ab78809ad1f3816f05dd467930 size: 739\n```", "```\n$ make deploy\n/Users/sample/nginx-operator/bin/controller-gen rbac:roleName=manager-role crd webhook paths=\"./...\" output:crd:artifacts:config=config/crd/bases\ncd config/manager && /Users/sample/nginx-operator/bin/kustomize edit set image controller=docker.io/sample/nginx-operator:v0.1\n/Users/sample/nginx-operator/bin/kustomize build config/default | kubectl apply -f -\nnamespace/nginx-operator-system created\ncustomresourcedefinition.apiextensions.k8s.io/nginxoperators.operator.example.com created\nserviceaccount/nginx-operator-controller-manager created\nrole.rbac.authorization.k8s.io/nginx-operator-leader-election-role created\nclusterrole.rbac.authorization.k8s.io/nginx-operator-manager-role created\nclusterrole.rbac.authorization.k8s.io/nginx-operator-metrics-reader created\nclusterrole.rbac.authorization.k8s.io/nginx-operator-proxy-role created\nrolebinding.rbac.authorization.k8s.io/nginx-operator-leader-election-rolebinding created\nclusterrolebinding.rbac.authorization.k8s.io/nginx-operator-manager-rolebinding created\nclusterrolebinding.rbac.authorization.k8s.io/nginx-operator-proxy-rolebinding created\nconfigmap/nginx-operator-manager-config created\nservice/nginx-operator-controller-manager-metrics-service created\ndeployment.apps/nginx-operator-controller-manager created\n```", "```\n$ kubectl get namespaces\nNAME                    STATUS   AGE\ndefault                 Active   31m\nkube-node-lease         Active   31m\nkube-public             Active   31m\nkube-system             Active   31m\nlocal-path-storage      Active   31m\nnginx-operator-system   Active   54s\n```", "```\n$ kubectl get all -n nginx-operator-system\nNAME                                                     READY   STATUS    pod/nginx-operator-controller-manager-6f5f66795d-945pb   2/2     Running   \nNAME                                                        TYPE        service/nginx-operator-controller-manager-metrics-service   ClusterIP   \nNAME                                                READY   UP-TO-DATE  deployment.apps/nginx-operator-controller-manager   1/1     1            \nNAME                                                           DESIRED   replicaset.apps/nginx-operator-controller-manager-6f5f66795d   1\n```", "```\napiVersion: operator.example.com/v1alpha1\n```", "```\nkind: NginxOperator\n```", "```\nmetadata:\n```", "```\n  name: cluster\n```", "```\n  namespace: nginx-operator-system\n```", "```\nspec:\n```", "```\n  replicas: 1\n```", "```\n$ kubectl get pods -n nginx-operator-system\nNAME                                                 READY   STATUS    cluster-7855777498-rcwdj                             1/1     Running  \nnginx-operator-controller-manager-6f5f66795d-hzb8n   2/2     Running \n```", "```\napiVersion: operator.example.com/v1alpha1\n```", "```\nkind: NginxOperator\n```", "```\nmetadata:\n```", "```\n  creationTimestamp: \"2022-02-05T18:28:47Z\"\n```", "```\n  generation: 1\n```", "```\n  name: cluster\n```", "```\n  namespace: nginx-operator-system\n```", "```\n  resourceVersion: \"7116\"\n```", "```\n  uid: 66994aa7-e81b-4b18-8404-2976be3db1a7\n```", "```\nspec:\n```", "```\n  replicas: 2\n```", "```\nstatus:\n```", "```\n  conditions:\n```", "```\n  - lastTransitionTime: \"2022-02-05T18:28:47Z\"\n```", "```\n    message: operator successfully reconciling\n```", "```\n    reason: OperatorSucceeded\n```", "```\n    status: \"False\"\n```", "```\n    type: OperatorDegraded\n```", "```\n$ kubectl get pods -n nginx-operator-system\nNAME                                                 READY   STATUS    cluster-7855777498-rcwdj                             1/1     Running  \ncluster-7855777498-kzs25                             1/1     Running\nnginx-operator-controller-manager-6f5f66795d-hzb8n   2/2     Running \n```", "```\n$ kubectl get pods -n nginx-operator-system\nNAME                                                 READY   STATUS    cluster-7855777498-rcwdj                             1/1     Terminating  \ncluster-7855777498-kzs25                             1/1     Terminating\nnginx-operator-controller-manager-6f5f66795d-hzb8n   2/2     Running \n```", "```\n$ ls\ntotal 20K\ndrwxr-xr-x  8 ... .\ndrwxr-xr-x 21 ... ..\ndrwxr-xr-x 74 ... manifests\ndrwxr-xr-x 19 ... vendor\n-rwxr-xr-x  1 ... build.sh\n-rw-r--r--  1 ... 05 example.jsonnet\n-rw-r--r--  1 ... jsonnetfile.json\n-rw-r--r--  1 ... 04 jsonnetfile.lock.json\n```", "```\nlocal kp =\n```", "```\n  (import 'kube-prometheus/main.libsonnet') +\n```", "```\n  ...\n```", "```\n  {\n```", "```\n    values+:: {\n```", "```\n      common+: {\n```", "```\n        namespace: 'monitoring',\n```", "```\n      },\n```", "```\n      prometheus+: {\n```", "```\n        namespaces+: ['nginx-operator-system'],\n```", "```\n      },\n```", "```\n    },\n```", "```\n  };\n```", "```\n...\n```", "```\n$ ./build.sh example.jsonnet\n```", "```\n$ kubectl apply --server-side -f manifests/setup\n$ kubectl apply -f manifests/\n```", "```\n$ kubectl --namespace monitoring port-forward svc/prometheus-k8s 9090\nForwarding from 127.0.0.1:9090 -> 9090\nForwarding from [::1]:9090 -> 9090\n```", "```\n...\n```", "```\nbases:\n```", "```\n- ../crd\n```", "```\n- ../rbac\n```", "```\n- ../manager\n```", "```\n# ...\n```", "```\n# ... \n```", "```\n# [PROMETHEUS] To enable prometheus monitor, uncomment all sections with 'PROMETHEUS'.                                    - ../prometheus\n```", "```\n$ make docker-build\n...\n=> ERROR [builder 9/9] RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -o manager main.go                        2.1s\n------\n > [builder 9/9] RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -o manager main.go:\n#15 2.081 controllers/nginxoperator_controller.go:37:2: no required module provides package github.com/sample/nginx-operator/assets; to add it:\n#15 2.081  go get github.com/sample/nginx-operator/assets\n------\nexecutor failed running [/bin/sh -c CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -o manager main.go]: exit code: 1\nmake: *** [docker-build] Error 1\n```", "```\n$ make docker-push\ndocker push controller:latest\nThe push refers to repository [docker.io/library/controller] \n18452d09c8a6: Preparing \n5b1fa8e3e100: Preparing \ndenied: requested access to the resource is denied\nmake: *** [docker-push] Error 1\n```", "```\n$ kubectl get all -n nginx-operator-system\nNAME                READY   STATUS             RESTARTS   AGE\npod/nginx-operator… 1/2     ImagePullBackOff   0          34s\n```", "```\n$ make deploy\n... \nserviceaccount/nginx-operator-controller-manager created\nrole.rbac.authorization.k8s.io/nginx-operator-leader-election-role created\nclusterrole.rbac.authorization.k8s.io/nginx-operator-manager-role created\nclusterrole.rbac.authorization.k8s.io/nginx-operator-metrics-reader created\nclusterrole.rbac.authorization.k8s.io/nginx-operator-proxy-role created\n...\nerror: unable to recognize \"STDIN\": no matches for kind \"ServiceMonitor\" in version \"monitoring.coreos.com/v1\"\nmake: *** [deploy] Error 1\n```"]
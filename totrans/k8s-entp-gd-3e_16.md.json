["```\ncurl -L https://istio.io/downloadIstio | ISTIO_VERSION=1.20.3 TARGET_ARCH=x86_64 sh - \n```", "```\nexport PATH=\"$PATH:$PWD/istio-1.20.3/bin\" \n```", "```\nistioctl manifest install --set profile=demo \n```", "```\nThis will install the Istio 1.20.3 \"demo\" profile (with components: Istio core, Istiod, Ingress gateways, and Egress gateways) into the cluster. Proceed? (y/N) \n```", "```\n![](img/tick1.png) Istio core installed\n![](img/tick1.png) Istiod installed\n![](img/tick1.png) Egress gateways installed\n![](img/tick1.png) Ingress gateways installed\n![](img/tick1.png) Installation complete                                                                                                                                       Made this installation the default for injection and validation. \n```", "```\nistioctl manifest generate --set profile=demo > istio-kind.yaml \n```", "```\nistioctl verify-install -f istio-kind.yaml \n```", "```\nChecked 15 custom resource definitions\nChecked 3 Istio Deployments\nâœ” Istio is installed and verified successfully \n```", "```\ncurl -v testapp.10.3.1.248.nip.io \n```", "```\napiVersion: security.istio.io/v1beta1\nkind: AuthorizationPolicy\nmetadata:\n name: testapp-policy-deny\n namespace: testapp\nspec:\n  {} \n```", "```\nRBAC: access denied \n```", "```\napiVersion: security.istio.io/v1beta1\nkind: AuthorizationPolicy\nmetadata:\n name: testapp-policy-deny\n namespace: testapp\nspec:\n  rules:\n  - {} \n```", "```\nkubectl delete -f example1-policy.yaml -n testapp \n```", "```\nkubectl create -f example2-policy.yaml -n testapp \n```", "```\napiVersion: security.istio.io/v1beta1\nkind: AuthorizationPolicy\nmetadata:\n  name: nginx-get-allow\n  namespace: marketing\nspec:\n  selector:\n    matchLabels:\n      app: nginx-web\n  action: ALLOW\n  rules:\n  - to:\n    - operation:\n         methods: [\"GET\"] \n```", "```\ncurl -X PUT -d argument=value -d value1=dummy-data  http://testapp.10.3.1.248.nip.io/ \n```", "```\nRBAC: access denied \n```", "```\nkubectl delete -f example2-policy.yaml -n testapp \n```", "```\nmetadata:\n name: nginx-get-allow-source\n namespace: marketing\nspec:\n  selector:\n    matchLabels:\n      app: nginx\n  action: ALLOW\n  rules:\n  - from:\n    - source:\n        ipBlocks:\n        - 192.168.10.100 \n```", "```\napiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: sales-gateway\n  namespace: sales\nspec:\n  selector:\n    istio: ingressgateway\n  servers:\n  - port:\n      number: 443\n      name: http\n      protocol: HTTP\n    hosts:\n    - sales.foowidgets.com\n    tls:\n      mode: SIMPLE\n      serverCertificate: /etc/certs/servercert.pem\n      privateKey: /etc/certs/privatekey.pem \n```", "```\napp=istio-ingressgateway,chart=gateways,heritage=Tiller,install.operator.istio.io/owning-resource=unknown,istio.io/rev=default,istio=ingressgateway,operator.istio.io/component=IngressGateways,pod-template-hash=78c9969f6b,release=istio,service.istio.io/canonical-name=istio-ingressgateway,service.istio.io/canonical-revision=latest,sidecar.istio.io/inject=false \n```", "```\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nmetadata:\n  name: sales-entry-web-vs\n  namespace: sales\nspec:\n  hosts:\n  - entry.foowidgets.com\n  gateways:\n  - sales-gateway\n  http:\n  - route:\n    - destination:\n        port:\n          number: 443\n        host: entry \n```", "```\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: nginx\nspec:\n  host: nginx\n  trafficPolicy:\n    loadBalancer:\n      simple: ROUND_ROBIN\n  subsets:\n  - name: v1\n    labels:\n      version: nginx-v1\n  - name: v2\n    labels:\n      version: nginx-v2 \n```", "```\napiVersion: security.istio.io/v1beta1\nkind: PeerAuthentication\nmetadata:\n  name: mtls-policy\n  namespace: istio-system\nspec:\n  mtls:\n    mode: STRICT \n```", "```\napiVersion: security.istio.io/v1beta1\nkind: PeerAuthentication\nmetadata:\n  name: mtls-policy\n  namespace: sales\nspec:\n  mtls:\n    mode: STRICT \n```", "```\napiVersion: security.istio.io/v1beta1\nkind: RequestAuthentication\nmetadata:\n  name: demo-requestauth\n  namespace: demo\nspec:\n  selector:\n    matchLabels:\n      app: frontend\n  jwtRules:\n  - issuer: testing@secure.istio.io\n    jwksUri: https://raw.githubusercontent.com/istio/istio/release-1.11/security/tools/jwt/samples/jwks.json \n```", "```\n{ \"keys\":[ {\"e\":\"AQAB\",\"kid\":\"DHFbpoIUqrY8t2zpA2qXfCmr5VO5ZEr4RzHU_-envvQ\",\"kty\":\"RSA\",\"n\":\"xAE7eB6qugXyCAG3yhh7pkDkT65pHymX-P7KfIupjf59vsdo91bSP9C8H07pSAGQO1MV_xFj9VswgsCg4R6otmg5PV2He95lZdHtOcU5DXIg_pbhLdKXbi66GlVeK6ABZOUW3WYtnNHD-91gVuoeJT_DwtGGcp4ignkgXfkiEm4sw-4sfb4qdt5oLbyVpmW6x9cfa7vs2WTfURiCrBoUqgBo_-4WTiULmmHSGZHOjzwa8WtrtOQGsAFjIbno85jp6MnGGGZPYZbDAa_b3y5u-YpW7ypZrvD8BgtKVjgtQgZhLAGezMt0ua3DRrWnKqTZ0BJ_EyxOGuHJrLsn00fnMQ\"}]} \n```", "```\napiVersion: networking.istio.io/v1alpha3\nkind: ServiceEntry\nmetadata:\n  name: api-server\n  namespace: sales\nspec:\n  hosts:\n  - api.foowidgets.com\n  ports:\n  - number: 80\n    name: http\n    protocol: HTTP \n```", "```\napiVersion: networking.istio.io/v1beta1\nkind: Sidecar\nmetadata:\n  name: sales-sidecar\n  namespace: sales\nspec:\n  egress:\n  - hosts:\n    - \"./*\"\n    - \"istio-system/*\" \n```", "```\napiVersion: networking.istio.io/v1beta1\nkind: Sidecar\nmetadata:\n  name: sales-sidecar\n  namespace: sales\nspec:\n  egress:\n  - hosts:\n    - ./*\n    - istio-system/*\n    - sales2\n    - sales3 \n```"]
- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: K3s Advanced Configurations and Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covers more advanced configurations for your K3s clusters. By default,
    K3s includes a load balancer called KlipperLB, but it has some limitations. For
    example, you don't have to repeat a port while creating a service, and it affects
    the way that you use a regular load balancer and NodePort service. It works well
    for simple deployments. In case you need another load balancer instead of Klipper,
    we cover how to install **MetalLB**, a bare metal load balancer. Then, we cover
    how to use advanced storage configuration to support read/write access modes for
    storage volumes with Longhorn, substituting the default local storage class provided
    by K3s. After this, we will do some common cluster management, including upgrading
    K3s, backing up, and restoring the cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Bare metal load balancer with MetalLB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Longhorn for storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrading your cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backing up and restoring your K3s configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this chapter, you need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi 4 model B with 4 GB RAM (minimum suggested)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A cloud server or VM with Ubuntu 20.04 LTS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Helm v3 installed in your device or client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With this, we are ready to learn this advanced configuration for K3s. So, let's
    get started.
  prefs: []
  type: TYPE_NORMAL
- en: Bare metal load balancer with MetalLB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you are going to explore MetalLB as a bare metal load balancer,
    which can give you powerful features to expose your services at the edge.
  prefs: []
  type: TYPE_NORMAL
- en: Load balancer services in Kubernetes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before starting with KlipperLB, it's necessary to give some context about load
    balancers in Kubernetes. Kubernetes uses services to communicate or access your
    application. A ClusterIP service creates a DNS record, so this service could be
    reachable from within the cluster. A NodePort service exposes the service on each
    node's IP at a static port. This port is in the range of 30000–32767\. And, finally,
    Kubernetes supports a load balancer service that exposes the service externally
    using a cloud provider's load balancer. In the case of K3s, it's going to use
    KlipperLB by default.
  prefs: []
  type: TYPE_NORMAL
- en: KlipperLB and MetalLB as bare metal load balancers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Edge devices and edge computing don't have a lot of resources, so it is common
    to find clusters that only have a single node. Generally, a Kubernetes load balancer
    service depends on the implementation of a specific cloud provider. It also works
    in layer 4 (the transport layer) to transmit **Transmission Control Protocol**
    (**TCP**) and **User Datagram Protocol** (**UDP**) protocols, and this load balancer
    is connected to a NodePort service too. So, in the case of edge devices, K3s implements
    KlipperLB.
  prefs: []
  type: TYPE_NORMAL
- en: KlipperLB works really nicely on low-resource devices or environments as k3s'
    load balancer. But when you have multi-node clusters, maybe KlipperLB doesn't
    offer the best features for service availability. That's where MetalLB comes into
    the game. KlipperLB and MetalLB offer a bare metal load balancer service on Kubernetes.
    In this case, you can use these implementations on K3s.
  prefs: []
  type: TYPE_NORMAL
- en: KlipperLB and MetalLB – the goods and the bads
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, let's mention the pros and cons of each of those bare metal load balancers
    in terms of the implementation, dependencies, and use case. So, let's get started
    with KlipperLB.
  prefs: []
  type: TYPE_NORMAL
- en: 'The pros of KlipperLB are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Pretty lightweight
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simple to use with enough features for single node clusters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The cons of KlipperLB are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Depends on **hostPort** or available ports to expose a pod.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the port is not available, the load balancer service stays on the pending
    state.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Talking about MetalLB, it uses layer 2 (the data link layer) where the format
    of data is defined. In this way, MetalLB uses a node for load balancing and has
    its own advantages and disadvantages. The next table summarizes this information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16945_Table_3.1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In general, choose KlipperLB if you have a single node cluster and you want
    to avoid complex installations that use unique ports. Use MetalLB for multi-node
    clusters or installations where you can reuse ports and a more robust load balancer
    service.
  prefs: []
  type: TYPE_NORMAL
- en: Installing MetalLB
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You need a K3s installation with the `--disable servicelb` option; if you have
    a previous installation, you have to reinstall K3s. To install K3s with this option,
    follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in to your **virtual machine** (**VM**) or device using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install K3s using the following line. This applies to a simple ARM device for
    a basic installation without installing KlipperLB:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '(*Optional*) Install K3s using the following lines. First, set the `PUBLIC_IP`
    environment variable with the IP of your device or VM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, use the next lines to install K3s in a node that has a public IP:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a MetalLB namespace (`metallb-system`) with the official manifests,
    executing the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Before running the command to install MetalLB, you have to create a ConfigMap
    called `metallb-config` inside the `metallb-system` namespace. Let''s call this
    file `config.yaml` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create the ConfigMap by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install MetalLB with the official manifests by executing the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now that MetalLB is installed using YAML files, let's continue with the installation
    using Helm instead of YAML files.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: If you want to delete this or other installations, use the `delete` option instead
    of `apply` using the same command – for example, `kubectl delete -f YOUR_YAML_FILE`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In case you want to install MetalLB using Helm v3, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the Helm Chart repository of MetalLB using the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install MetalLB using Helm by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you want to install MetalLB with the `values.yaml` file, execute the following
    lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You have to create the `values.yaml` file, with the following example content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, you have to create the ConfigMap based on the installation using `kubectl`
    and change the namespace to `metallb-system` and the name to `metallb-config`.
    Then, apply `YAML`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: The `addresses` field corresponds to the range of IP addresses that MetalLB
    will use to assign to your services every time that you create a `LoadBalancer`
    service in Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: Now, MetalLB is installed and ready to use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now you have a fresh installation of MetalLB ready to use. Now you have to learn
    how to troubleshoot MetalLB in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting MetalLB
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sometimes, it''s necessary to troubleshoot our installations. If you are having
    trouble with your installation, here are some commands that you can use to troubleshoot
    a new installation of MetalLB. The following are steps and commands that you can
    use for this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in to your VM or device:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a pod to check whether your cluster can schedule pods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a service to expose the pod created previously and test whether the
    `LoadBalancer` service works:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute the following command if you want to check whether the services and
    port work to expose your services, which can be either `LoadBalancer` or `NodePort`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, perform an access check for the assigned external IP to the NGINX service
    and execute the following command to check that MetalLB exposed your service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In case you want to check the logs of MetalLB in case of errors, look at the
    next pods inside the `metallb-system` namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: Controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Speaker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now you know how to do basic troubleshooting of MetalLB. Let's move to a more
    advanced storage configuration using Longhorn in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Longhorn for storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In terms of persistent information, you will find two types of containers, stateless
    and stateful containers. A stateless or ephemeral container doesn't persist information
    generated inside a container. A stateful container can persist the information
    even when this is deleted. K3s includes, by default, a way to persist data using
    a storage type (called **storage class** in Kubernetes) called **local-path**.
    This storage is a basic and pretty lightweight implementation, designed for edge
    devices. A common feature used on Kubernetes is to have a persistent volume claim
    that allows your pods to consume (write and read data) from different nodes. And
    this is a persistence volume configuration with the access mode key, set as **ReadWriteMany**
    (**RWX**). This feature is often used in production scenarios and it's pretty
    important because it enables you to share information from your different services.
    Longhorn provides this feature in a pretty lightweight presentation and it's optimized
    for edge devices. Let's move to learn what Longhorn is and how you can install
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Why use Longhorn?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Longhorn is designed to be a distributed and hyper-converged storage stack.
    Hyper-converged storage means that virtualization software abstracts and pools
    storage. Longhorn doesn't use a lot of resources, which gives you the ability
    to use it for advanced storage in edge devices. You can even simplify your workflows
    of snapshots, backups, and even disaster recovery. So, if you are looking for
    lightweight and advanced edge solutions for storage, Longhorn can fit your needs.
    There are other options, such as Rook, but Longhorn is an easy piece of software
    that can give you extra storage power without having to sacrifice resource consumptions.
    So, let's move on to learn how to install it and create a simple **persistent
    volume claim** for a pod in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Longhorn with ReadWriteMany mode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install Longhorn, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in to your VM or device:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you want to install the ReadWriteMany PVC mode, you have to install `nfs-common`
    on each VM with Ubuntu installed in your cluster. For this, execute the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Apply the official Longhorn manifests, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: Longhorn will be installed in the `longhorn-system` namespace.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `pvc.yaml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Apply the `pvc.yaml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: You can use different PVC modes such as `ReadWriteOnce` or `ReadOnlyMany`. By
    default, the storage classes at least support `ReadWriteOnce`. So, `ReadWriteMany`
    is a special feature that uses `NFS` and is included in Longhorn.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, it''s time to create a pod using this PVC using the Longhorn storage class.
    To do this, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `pod.yaml` file to create a pod using the previously created PVC:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Apply the `pod.yaml` file to create the pod:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, you have Longhorn installed and running. So, let's move on to learn how
    to use the Longhorn UI in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Using Longhorn UI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to access the Longhorn UI, you have to check the services created
    on `longhorn-system` and execute a port-forward; if you installed MetalLB, you
    can create a `LoadBalancer` service to expose the Longhorn UI.
  prefs: []
  type: TYPE_NORMAL
- en: 'To access Longhorn with a port-forward, execute the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the next port-forward command locally in order to access the UI in your
    browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, open your browser at `http://localhost:8080`; you will see the following
    dashboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.1 – Longhorn UI'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_Figure_3.1.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.1 – Longhorn UI
  prefs: []
  type: TYPE_NORMAL
- en: 'With this dashboard, you can manage your **Persistent Volume Claims** (**PVCs**)
    using the UI; for more references, you can visit the following link: [https://longhorn.io/docs/1.3.1/deploy/accessing-the-ui](https://longhorn.io/docs/1.3.1/deploy/accessing-the-ui).'
  prefs: []
  type: TYPE_NORMAL
- en: Now you know how to install and use Longhorn. Let's go ahead and do some basic
    troubleshooting.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting Longhorn
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Using the preceding example as reference, to troubleshoot the PVC creation
    using Longhorn, you can use the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check whether the Longhorn pods are running successfully with the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check whether the PV was created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check whether the PVC was created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check whether the pod from `pod.yaml` using the new Longhorn storage class
    was created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With these commands, you can find errors that come up when a pod or deployment
    uses a PVC with the Longhorn storage class.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: The previous four commands will return errors in case something goes wrong.
    For more information about this, you can check [https://kubernetes.io/docs/tasks/configure-pod-container/configure-persistent-volume-storage](https://kubernetes.io/docs/tasks/configure-pod-container/configure-persistent-volume-storage)
    or [https://kubernetes.io/docs/concepts/storage/persistent-volumes/#class](https://kubernetes.io/docs/concepts/storage/persistent-volumes/#class).
  prefs: []
  type: TYPE_NORMAL
- en: Now, we are ready to learn another advanced topic about upgrading the cluster.
    So, let's move to the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Upgrading your cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, you want to be up to date with the new versions and features of K3s.
    The next sections explain how to perform these upgrading processes.
  prefs: []
  type: TYPE_NORMAL
- en: Upgrading using K3s Bash scripts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To perform an upgrade in your nodes, you have to follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you have to stop K3s on your device with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, you have to choose the version which you want to upgrade to. In general,
    there are three options – choose the latest or most stable channel, or pick a
    specific version. The next command will update your cluster to the latest stable
    version available:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, if you want to update to the latest version, which is not so stable, you
    can execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The last option is to pick a specific version. For this, you have to execute
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: You can visit [https://update.k3s.io/v1-release/channels](https://update.k3s.io/v1-release/channels)
    to check the latest, stable, or specific available version of K3s or the official
    site of k3s at [https://k3s.io](https://k3s.io) in the GitHub section.
  prefs: []
  type: TYPE_NORMAL
- en: Now you know how to upgrade your cluster using the K3s scripts. Let's move on
    to learn this manually in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Upgrading K3s manually
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to perform a manual upgrading of the K3s version, you can follow
    the following steps, based on the official K3s website documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download your desired version of the K3s binary from releases. To do this,
    check this link: [https://github.com/k3s-io/k3s/releases](https://github.com/k3s-io/k3s/releases).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the downloaded binary to the `/usr/local/bin` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Stop the old k3s binary. For this, you can execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Delete the old binary.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Launch the new K3s binary with the next command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, you know how to do the K3s manually, but there is something that you have
    to know, and that is to restart the service to apply the next changes. This is
    covered in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Restarting K3s
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you perform software or hardware upgrades, or when a restart is needed
    to fix errors, you can restart K3s services using `systemd` and **OpenRC**.
  prefs: []
  type: TYPE_NORMAL
- en: 'To restart K3s using `systemd`, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To restart the K3s service in your master node, execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To restart the K3s agent service in your agent nodes, execute the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To restart K3s using OpenRC, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To restart the K3s service in your master node, execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To restart the K3s-agent service in your agent nodes, execute the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now that you know all the necessary steps to upgrade your K3s cluster, it's
    time to move on to other advanced topics – backups and restorations. Let's move
    on to the next section to learn about this.
  prefs: []
  type: TYPE_NORMAL
- en: Backing up and restoring your K3s configurations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Backups and restoration of your Kubernetes objects are something to consider
    in production environments. This section explains how to perform these kinds of
    tasks for the default storage, SQLite, how to install and manage **etcd** on K3s,
    and basic resources if you are using the SQL backends of K3s.
  prefs: []
  type: TYPE_NORMAL
- en: Backups from SQLite
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you are using the default storage, SQLite, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in to your master node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Stop the K3s using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change to the `/var/lib/rancher/k3s/` directory server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Copy the folder server inside the `k3s` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Download this folder on another device if necessary.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Backups and restoring from the SQL database K3s backend
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are using external storage – let's say, for example, MySQL – you have
    to use a tool or the command to back up your database.
  prefs: []
  type: TYPE_NORMAL
- en: Backing up MySQL
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the case of MySQL, you can execute the following steps to back up your K3s
    configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: Get your database credentials to use the `mysqldump` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command to back up your database, which in this case is called
    `k3s`, using the `YOUR_USER` user, the `YOUR_PASSWORD` password, and an output
    file called `output.sql` from the `YOUR_HOST` host:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: 'You can modify the `YOUR_HOST`, `YOUR_USER`, and `YOUR_PASSWORD` values, the
    database name instead of `k3s`, and even the name of the output file to customize
    your backup command. The `–h` option can be optional if you are connected to the
    same host where the database is installed. By default, it connects to `localhost`.
    You can check this link for other examples to back up your MySQL: [https://www.tecmint.com/mysql-backup-and-restore-commands-for-database-administration](https://www.tecmint.com/mysql-backup-and-restore-commands-for-database-administration).'
  prefs: []
  type: TYPE_NORMAL
- en: Now the backup is ready to be used. In the next section, you are going to use
    the backup to restore your database.
  prefs: []
  type: TYPE_NORMAL
- en: Restoring MySQL
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now it is time to restore your database. Follow the next steps for the restoration:'
  prefs: []
  type: TYPE_NORMAL
- en: Get your database credentials to use the database with the `mysql` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command to restore your database backup. We are using the
    `k3s` database. Change `YOUR_HOST` and `YOUR_PASSWORD` parameters according to
    the database used as data storage for your `k3s` cluster. Finally, the `output.sql`
    file is used to load your backup and restore your database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: You can modify the values from the previous command to perform your restoration
    with the `output.sql` file.
  prefs: []
  type: TYPE_NORMAL
- en: Backing up and restoring other data storages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are using other K3s backends, such as PostgreSQL or `etcd`, you can check
    the official documentation for each database.
  prefs: []
  type: TYPE_NORMAL
- en: 'For PostgreSQL, check the following link: [https://www.postgresql.org/docs/8.3/backup-dump.html](https://www.postgresql.org/docs/8.3/backup-dump.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 'For `etcd`, check the following link: [https://etcd.io](https://etcd.io).'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have learned how to restore your MySQL data storage for your K3s
    cluster, let's move on to the next section to understand how to use `etcd` as
    your data storage.
  prefs: []
  type: TYPE_NORMAL
- en: Embedded etcd management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`etcd` is the default type of storage to store all the Kubernetes objects in
    your cluster. `etcd`, by default, was removed from K3s, but you can install it.
    K3s customized how `etcd` works for your cluster; this includes some custom features
    that you can''t find in a regular Kubernetes cluster that uses `etcd`. So, let''s
    get started with installing `etcd` in K3s.'
  prefs: []
  type: TYPE_NORMAL
- en: Installing the etcd backend
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to install it, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install K3s with the `etcd` backend, you have to execute the following command
    to include `etcd` in the K3s installation. This has to be executed in the master
    node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set your `TOKEN` variable, with the `YOUR_TOKEN` master token, to join the
    nodes to the cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, if you need a multi-cluster configuration, execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now that you have learned how to install the `etcd` feature for K3s, let's move
    on to the next section to learn how to create and restore `etcd` snapshots for
    your Kubernetes objects configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and restoring etcd snapshots
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'K3s includes an experimental feature to back up and restore `etcd`. In this
    section, you are going to learn how to perform `etcd` snapshots and restoration
    for `etcd`. The snapshots are enabled by default with this backend. These snapshots
    are stored in `/var/lib/rancher/k3s/server/db/snapshots`. To create a backup,
    manually execute the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a backup manually:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will generate a file inside the `snapshots` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'To restore your `etcd` from this backup, execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can automate the snapshot generation with the following option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For more references to configure this, visit this link: [https://rancher.com/docs/k3s/latest/en/backup-restore/#options](https://rancher.com/docs/k3s/latest/en/backup-restore/#options).'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can even use the official documentation of `etcd`: [https://github.com/etcd-io/website/blob/main/content/en/docs/v3.5/op-guide/recovery.md](https://github.com/etcd-io/website/blob/main/content/en/docs/v3.5/op-guide/recovery.md).'
  prefs: []
  type: TYPE_NORMAL
- en: That's how you manage your `etcd` snapshots. Now, let's take a recap of what
    we have covered in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covered common advanced configurations for Kubernetes edge clusters
    using Ubuntu and K3s. One of these common configurations was to install a bare
    metal load balancer using MetalLB. We also discussed the pros and cons of this
    as compared to the default K3s load balancer, KlipperLB, followed by the use cases
    of when to use each one. Then, we jumped to the advanced storage configurations
    of Longhorn, which is a really lightweight storage solution, and easy to install
    and configure for ReadWriteMany access modes for storage. Finally, we saw how
    to upgrade our cluster, and perform backups and restorations when using different
    data storage such as SQL or `etcd`. With all this knowledge, you are ready to
    create a production-ready cluster. In the next chapter, we are going to learn
    how to use k3OS to create your clusters using the K3s ISO image and overlay installation.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are a few questions to validate your new knowledge:'
  prefs: []
  type: TYPE_NORMAL
- en: When do you choose KlipperLB or MetalLB as a bare metal load balancer solution?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can I troubleshoot my MetalLB installation?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can I install Longhorn to get more robust data storage solutions for my
    deployments?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can I troubleshoot my Longhorn installation?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What other data storage solutions can I use instead of Longhorn?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the steps to upgrade my K3s clusters?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the steps to back up or restore my Kubernetes object configurations
    if I use a SQL backend or `etcd`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can refer to the following references for more information on the topics
    covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'What is the OSI Model?: [https://www.cloudflare.com/en-gb/learning/ddos/glossary/open-systems-interconnection-model-osi/](https://www.cloudflare.com/en-gb/learning/ddos/glossary/open-systems-interconnection-model-osi/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MetalLB official documentation: [https://metallb.universe.tf](https://metallb.universe.tf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MetalLB in layer 2 mode: [https://metallb.universe.tf/concepts/layer2](https://metallb.universe.tf/concepts/layer2)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Kubernetes 101: Why You Need To Use MetalLB: [https://www.youtube.com/watch?v=Ytc24Y0YrXE](https://www.youtube.com/watch?v=Ytc24Y0YrXE)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MetalLB ConfigMap configuration: [https://metallb.universe.tf/configuration](https://metallb.universe.tf/configuration)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Persistent Volumes: [https://kubernetes.io/docs/concepts/storage/persistent-volumes](https://kubernetes.io/docs/concepts/storage/persistent-volumes)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Volumes and Storage: [https://rancher.com/docs/k3s/latest/en/storage](https://rancher.com/docs/k3s/latest/en/storage)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Longhorn official page: [https://longhorn.io](https://longhorn.io)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Installing OpenEBS with RWM support: [https://docs.openebs.io/docs/next/rwm.html](https://docs.openebs.io/docs/next/rwm.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Installing Rook with RWM support: [https://rook.io/docs/nfs/v1.7](https://rook.io/docs/nfs/v1.7)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Upgrading a K3s cluster: [https://rancher.com/docs/k3s/latest/en/upgrades](https://rancher.com/docs/k3s/latest/en/upgrades)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Backing up and restoring a K3s cluster: [https://rancher.com/docs/k3s/latest/en/backup-restore](https://rancher.com/docs/k3s/latest/en/backup-restore)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Installation options: [https://rancher.com/docs/k3s/latest/en/installation/install-options/#registration-options-for-the-k3s-server](https://rancher.com/docs/k3s/latest/en/installation/install-options/#registration-options-for-the-k3s-server)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL

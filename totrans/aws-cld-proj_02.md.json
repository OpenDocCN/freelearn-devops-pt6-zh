["```\n <!DOCTYPE html>\n<html>\n<head>\n  <link href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css\" rel=\"stylesheet\">\n  <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n  <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n  <link href=\"https://fonts.googleapis.com/css2?family=Archivo+Narrow&family=Julius+Sans+One&family=Open+Sans&family=Source+Sans+Pro&display=swap\" rel=\"stylesheet\"> <st c=\"15492\"><link rel=\"stylesheet\" href=\"index.css\"></st> </head>\n<body>\n  <page size=\"A4\"> <st c=\"15565\"><div class=\"container\"></st>\n <st c=\"15588\"><div class=\"leftPanel\"></st> <img src=\"img/avatar.png\"/>\n        <div class=\"details\">\n          <div class=\"item bottomLineSeparator\">\n            <h2>\n              CONTACT\n            </h2>\n  ### OUTPUT OMMITED ###\n```", "```\n<st c=\"16228\"><p></st>This is a paragraph in HTML<st c=\"16260\"></p></st>\n```", "```\n <link href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css\" rel=\"stylesheet\">\n  <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n  <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n  <link href=\"https://fonts.googleapis.com/css2?family=Archivo+Narrow&family=Julius+Sans+One&family=Open+Sans&family=Source+Sans+Pro&display=swap\" rel=\"stylesheet\">\n  <link rel=\"stylesheet\" href=\"index.css\">\n```", "```\n h1 {\n  font-family: 'Julius Sans One', sans-serif;\n}\nh2 { /* Contact, Skills, Education, About me, Work Experience */\n  font-family: 'Archivo Narrow', sans-serif;\n}\nh3 { /* Accountant */\n  font-family: 'Open Sans', sans-serif;\n} <st c=\"20710\">.container {</st> display: flex;\n  flex-direction: row;\n  width: 100%;\n  height: 100%;\n} <st c=\"20788\">.leftPanel</st> {\n  width: 27%;\n  background-color: #484444;\n  padding: 0.7cm;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n## OUTPUT OMMITED ###\n```", "```\n {\n    \"Version\": \"2008-10-17\",\n    \"Id\": \"PolicyForCloudFrontPrivateContent\",\n    \"Statement\": [\n        {\n            \"Sid\": \"AllowCloudFrontServicePrincipal\",\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"Service\": \"cloudfront.amazonaws.com\"\n            },\n            \"Action\": \"s3:GetObject\",\n            \"Resource\": \"<st c=\"23796\">arn:aws:s3:::cloudprojectwebsitebucket/*\",</st> \"Condition\": {\n                \"StringEquals\": {\n                    \"AWS:SourceArn\": \"arn:aws:cloudfront::111111111111:distribution/E33NUQ32Z0XQZB\"\n                }\n            }\n        }\n    ]\n}\n```", "```\n https://<st c=\"24418\">index.html</st> at the end of the URL, right?\n\t\t\t<st c=\"24458\">Navigate to your CloudFront distribution and select</st> `<st c=\"24573\">index.html</st>` <st c=\"24583\">and save</st> <st c=\"24593\">your changes.</st>\n\t\t\t<st c=\"24606\">Your distribution state will change to</st> **<st c=\"24646\">Deploying</st>** <st c=\"24655\">momentarily, as shown in</st> *<st c=\"24681\">Figure 2</st>**<st c=\"24689\">.5</st>*<st c=\"24691\">, under the</st> **<st c=\"24703\">Last</st>** **<st c=\"24708\">modified</st>** <st c=\"24716\">column.</st>\n\t\t\t![Figure 2.5 – CloudFront distribution status during an update](img/B22051_02_5.jpg)\n\n\t\t\t<st c=\"24850\">Figure 2.5 – CloudFront distribution status during an update</st>\n\t\t\t<st c=\"24910\">When the distribution finishes propagating your changes, the status column shows the</st> **<st c=\"24996\">Enabled</st>** <st c=\"25003\">status, and the</st> **<st c=\"25020\">Last modified</st>** <st c=\"25033\">column shows a date as shown in</st> *<st c=\"25066\">Figure 2</st>**<st c=\"25074\">.6</st>*<st c=\"25076\">.</st>\n\t\t\t![Figure 2.6 – CloudFront distribution status after an update](img/B22051_02_6.jpg)\n\n\t\t\t<st c=\"25223\">Figure 2.6 – CloudFront distribution status after an update</st>\n\t\t\t<st c=\"25282\">Refresh your</st> <st c=\"25296\">CV page, this time without the path, as shown in the following line.</st> <st c=\"25365\">Remember to replace the highlighted string with your</st> <st c=\"25418\">own domain:</st>\n\n```", "```\n\n\t\t\t<st c=\"25469\">Et voilà!</st> <st c=\"25480\">Your CV is now online and available for recruiters to</st> <st c=\"25534\">visit it.</st>\n\t\t\t<st c=\"25543\">Monitoring the website</st>\n\t\t\t<st c=\"25566\">Your website is online, you</st> <st c=\"25594\">can share the URL with other people and they will always have access to your latest CV.</st> <st c=\"25683\">However, how do you know whether they actually accessed it, or whether they are having a</st> <st c=\"25772\">good experience?</st>\n\t\t\t<st c=\"25788\">You already know the answer; it’s</st> <st c=\"25823\">CloudWatch metrics:</st>\n\n\t\t\t\t1.  <st c=\"25842\">Navigate to the CloudWatch metrics</st> <st c=\"25878\">console (</st>[<st c=\"25887\">https://us-east-1.console.aws.amazon.com/cloudwatch/home?region=us-east-1#metricsV2</st>](https://us-east-1.console.aws.amazon.com/cloudwatch/home?region=us-east-1#metricsV2)<st c=\"25971\">).</st>\n\t\t\t\t2.  <st c=\"25974\">In the</st> **<st c=\"25982\">Browse</st>** <st c=\"25988\">tab, you will find all kinds of AWS services.</st> <st c=\"26035\">Select CloudFront, followed by</st> **<st c=\"26066\">Per-Distribution Metrics</st>**<st c=\"26090\">.</st>\n\t\t\t\t3.  <st c=\"26091\">If you have more than one distribution, you will need to identify the relevant one by ID.</st> <st c=\"26182\">If you just have one, select</st> **<st c=\"26211\">BytesDownloaded</st>**<st c=\"26226\">,</st> **<st c=\"26228\">Requests</st>**<st c=\"26236\">,</st> **<st c=\"26238\">5xxErrorRate</st>**<st c=\"26250\">,</st> <st c=\"26252\">and</st> **<st c=\"26256\">4xxErrorRate</st>**<st c=\"26268\">.</st>\n\n\t\t\t<st c=\"26269\">CloudWatch will plot a graphic for you on the top of your screen, like the one shown in</st> *<st c=\"26358\">Figure 2</st>**<st c=\"26366\">.7</st>*<st c=\"26368\">. At 16h25, 18K bytes were downloaded and some users were facing HTTP</st> `<st c=\"26438\">400</st>` <st c=\"26441\">errors.</st> <st c=\"26450\">These metrics were calculated as</st> <st c=\"26483\">five-minute averages.</st>\n\t\t\t![Figure 2.7 – CW metrics graph for CloudFront](img/B22051_02_7.jpg)\n\n\t\t\t<st c=\"26641\">Figure 2.7 – CW metrics graph for CloudFront</st>\n\t\t\t<st c=\"26685\">These metrics are free</st> <st c=\"26708\">and were automatically populated without you having to do anything other than just configuring CloudFront.</st> <st c=\"26816\">However, if you want more detailed metrics such as</st> **<st c=\"26867\">4xx</st>** <st c=\"26870\">and</st> **<st c=\"26875\">5xx</st>** <st c=\"26878\">error rates by the specific HTTP status code, or cache hits as a percentage of total cacheable requests, you can enable that in your CloudFront distribution at</st> <st c=\"27039\">a cost.</st>\n\t\t\t<st c=\"27046\">Explore CloudWatch metrics further and see what other metrics were automatically populated.</st> <st c=\"27139\">Here’s a hint: consider your file</st> <st c=\"27173\">storage service.</st>\n\t\t\t<st c=\"27189\">Cleaning up</st>\n\t\t\t<st c=\"27201\">AWS resources incur costs.</st> <st c=\"27229\">Although most services initially fall under the free tier, eventually that runs out, and you will incur costs.</st> <st c=\"27340\">We recommend that you delete every application after you are done playing</st> <st c=\"27414\">with it.</st>\n\t\t\t<st c=\"27422\">Start by deleting your</st> <st c=\"27445\">CloudFront distribution:</st>\n\n\t\t\t\t1.  <st c=\"27470\">Navigate to CloudFront</st> <st c=\"27494\">console (</st>[<st c=\"27503\">https://us-east-1.console.aws.amazon.com/cloudfront/v4/home?region=us-east-1#/distributions</st>](https://us-east-1.console.aws.amazon.com/cloudfront/v4/home?region=us-east-1#/distributions)<st c=\"27595\">).</st>\n\t\t\t\t2.  <st c=\"27598\">Select and disable your</st> <st c=\"27623\">CloudFront distribution.</st>\n\t\t\t\t3.  <st c=\"27647\">After it’s</st> <st c=\"27658\">disabled, delete</st> <st c=\"27676\">the distribution.</st>\n\n\t\t\t<st c=\"27693\">Next, delete your</st> <st c=\"27712\">S3 bucket:</st>\n\n\t\t\t\t1.  <st c=\"27722\">Navigate to S3</st> <st c=\"27738\">console (</st>[<st c=\"27747\">https://s3.console.aws.amazon.com/s3/home?region=us-east-1</st>](https://s3.console.aws.amazon.com/s3/home?region=us-east-1)<st c=\"27806\">).</st>\n\t\t\t\t2.  <st c=\"27809\">Select your bucket.</st> <st c=\"27830\">Inside, delete all three files.</st> <st c=\"27862\">Buckets can only be deleted if they</st> <st c=\"27898\">are empty.</st>\n\t\t\t\t3.  <st c=\"27908\">Delete</st> <st c=\"27916\">your bucket.</st>\n\n\t\t\t<st c=\"27928\">Future work</st>\n\t\t\t<st c=\"27940\">Congratulations, you now have a working static website hosted on AWS.</st> <st c=\"28011\">There are multiple features you can complement it with.</st> <st c=\"28067\">This section details a few ideas, but it doesn’t guide you through</st> <st c=\"28134\">their implementation.</st>\n\t\t\t<st c=\"28155\">Implementing custom DNS</st>\n\t\t\t<st c=\"28179\">Right now, your CV is at a</st> <st c=\"28207\">non-memorable URL.</st> <st c=\"28226\">It would be easier for you and others to remember if your URL was something such</st> <st c=\"28307\">as</st> `<st c=\"28310\">bestcandidatecv.com</st>`<st c=\"28329\">.</st>\n\t\t\t<st c=\"28330\">When you access a URL, in the backend, your workstation does a lookup of this URL to retrieve the IP address.</st> <st c=\"28441\">Then it connects to</st> <st c=\"28461\">that address.</st>\n\t\t\t<st c=\"28474\">To verify this behavior, open your favorite terminal and execute the following command; it returns a series of IP addresses.</st> <st c=\"28600\">Make sure you replace the URL with</st> <st c=\"28635\">your own:</st>\n\n```", "```\n\n\t\t\t<st c=\"28685\">CloudFront supports having custom</st> <st c=\"28720\">domain names.</st>\n\t\t\t<st c=\"28733\">To achieve it, first, you will need to register a new domain.</st> <st c=\"28796\">Domains are unique.</st> <st c=\"28816\">Within the AWS ecosystem, you can register a new domain using</st> **<st c=\"28878\">Route 53</st>**<st c=\"28886\">. However, you can also register your domain with other providers.</st> <st c=\"28953\">Domains</st> <st c=\"28961\">have a</st> <st c=\"28968\">yearly cost.</st>\n\t\t\t<st c=\"28980\">Secondly, you will need to create a DNS record inside your domain.</st> <st c=\"29048\">If you are managing your domain in Route 53, this will be done under hosted zones.</st> <st c=\"29131\">This DNS record points your new name to your CloudFront distribution</st> <st c=\"29200\">DNS name.</st>\n\t\t\t<st c=\"29209\">In simple terms, if someone looks up</st> `<st c=\"29247\">bestcandidatecv.com</st>`<st c=\"29266\">, the server will return</st> `<st c=\"29291\">d1hjtv5xjv873g.cloudfront.net</st>`<st c=\"29320\">, and then recursively,</st> <st c=\"29344\">the IP.</st>\n\t\t\t<st c=\"29351\">Lastly, you will need a</st> <st c=\"29376\">new certificate.</st> <st c=\"29393\">Navigate to your current CV website and check the certificate details.</st> <st c=\"29464\">They should look like</st> *<st c=\"29486\">Figure 2</st>**<st c=\"29494\">.8</st>*<st c=\"29496\">. This certificate is only valid for common names that end</st> <st c=\"29555\">with</st> `<st c=\"29560\">cloudfront.net</st>`<st c=\"29574\">.</st>\n\t\t\t![Figure 2.8 – CloudFront default certificate](img/B22051_02_8.jpg)\n\n\t\t\t<st c=\"29888\">Figure 2.8 – CloudFront default certificate</st>\n\t\t\t<st c=\"29931\">Since you will access your CV with a custom name, you will need a certificate that supports that naming.</st> <st c=\"30037\">Within the AWS ecosystem, you can use the</st> **<st c=\"30079\">AWS Certificate Manager</st>** <st c=\"30102\">(</st>**<st c=\"30104\">ACM</st>**<st c=\"30107\">) to issue a</st> <st c=\"30121\">new certificate.</st>\n\t\t\t<st c=\"30137\">If you are interested in implementing this feature, the AWS documentation details the whole</st> <st c=\"30230\">process:</st> [<st c=\"30239\">https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/CNAMEs.html</st>](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/CNAMEs.html)<st c=\"30317\">.</st>\n\t\t\t<st c=\"30318\">Taking security to the next level</st>\n\t\t\t<st c=\"30352\">Your website</st> <st c=\"30365\">is simple, and while static websites are generally considered less vulnerable to certain types of web attacks due to their lack of dynamic content and server-side</st> <st c=\"30528\">processing, they can still be targeted by various attacks, such as</st> **<st c=\"30596\">Distributed Denial-of-Service</st>** <st c=\"30625\">(</st>**<st c=\"30627\">DDoS</st>**<st c=\"30631\">) attacks, or</st> <st c=\"30646\">content injection.</st>\n\t\t\t<st c=\"30664\">For example, a malicious person can launch a DDoS attack on your website right before an interview.</st> <st c=\"30765\">Then during the interview, when you mention it, the website is not available, making you</st> <st c=\"30854\">look bad.</st>\n\t\t\t<st c=\"30863\">Security is a</st> <st c=\"30878\">huge topic, but some quick wins that you can implement are</st> <st c=\"30936\">AWS</st> **<st c=\"30941\">Web Application Firewall</st>** <st c=\"30965\">(</st>**<st c=\"30967\">WAF</st>**<st c=\"30970\">) and</st> <st c=\"30976\">AWS Shield.</st>\n\t\t\t<st c=\"30988\">Web Application Firewall</st>\n\t\t\t<st c=\"31013\">AWS WAF is a</st> <st c=\"31026\">web application firewall (not all AWS services are what the name implies) that helps to protect from common web exploits that could affect application availability, compromise security, or consume</st> <st c=\"31224\">excessive resources.</st>\n\t\t\t<st c=\"31244\">WAF is a managed service, and it offers managed rules</st> <st c=\"31299\">called</st> **<st c=\"31306\">rulesets</st>**<st c=\"31314\">. They are groups of security rules that protect you against common attacks and are automatically updated as new threats emerge.</st> <st c=\"31443\">This is especially useful if you are not a security expert, or if you don’t want to spend your time managing</st> <st c=\"31552\">security rules.</st>\n\t\t\t<st c=\"31567\">WAF is neatly integrated with CloudFront, and you can enable it by editing your CloudFront distribution.</st> <st c=\"31673\">It’s a one-click action.</st> <st c=\"31698\">Doing so creates a WAF web ACL for you with 3 Amazon-managed rulesets.</st> <st c=\"31769\">You can view them in your</st> <st c=\"31795\">WAF console.</st>\n\t\t\t<st c=\"31807\">You can add more rules to the created Web ACL, or if you want to, you can configure a custom web ACL and attach it to your</st> <st c=\"31931\">CloudFront distribution.</st>\n\t\t\t<st c=\"31955\">Your static website does not interact with user inputs.</st> <st c=\"32012\">In later chapters, as your application attack</st> <st c=\"32057\">surface increases, you will see more benefits</st> <st c=\"32104\">of WAF.</st>\n\t\t\t<st c=\"32111\">If you are</st> <st c=\"32122\">interested in implementing this feature, the AWS documentation details the whole</st> <st c=\"32204\">process:</st> [<st c=\"32213\">https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-awswaf.html</st>](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-awswaf.html)<st c=\"32308\">.</st>\n\t\t\t<st c=\"32309\">Shield</st>\n\t\t\t<st c=\"32316\">AWS Shield is</st> <st c=\"32330\">a managed DDoS protection service.</st> <st c=\"32366\">It is designed to safeguard applications running on AWS against DDoS attacks, which are attempts to make a website or application unavailable by overwhelming it with</st> <st c=\"32532\">malicious traffic.</st>\n\t\t\t<st c=\"32550\">Shield uses techniques such as traffic flow monitoring, network anomaly detection, and traffic scrubbing to identify and filter out</st> <st c=\"32683\">malicious traffic.</st>\n\t\t\t<st c=\"32701\">It has two offerings:</st> **<st c=\"32724\">Standard</st>** <st c=\"32732\">and</st> **<st c=\"32737\">Advanced</st>**<st c=\"32745\">.</st>\n\t\t\t<st c=\"32746\">You are</st> <st c=\"32754\">already using Shield Standard.</st> <st c=\"32786\">This tier is automatically enabled for all AWS customers at no additional cost.</st> <st c=\"32866\">It shields you from the most common and frequently occurring DDoS attacks targeting</st> <st c=\"32950\">web applications.</st>\n\t\t\t<st c=\"32967\">Shield</st> <st c=\"32975\">Advanced is an optional paid subscription that you can enable on a resource basis.</st> <st c=\"33058\">It provides additional detection and mitigation capabilities against more sophisticated and larger DDoS attacks, including those targeting higher layers (HTTP/HTTPS) and specific applications.</st> <st c=\"33251\">Shield Advanced integrates with services such as AWS WAF for more advanced</st> <st c=\"33326\">security controls.</st>\n\t\t\t<st c=\"33344\">We do</st> *<st c=\"33351\">not</st>* <st c=\"33354\">recommend that you enable Shield Advanced for this project.</st> <st c=\"33415\">It has a long subscription commitment, one year, and a big price tag for a personal project</st> <st c=\"33507\">at $3,000/month.</st>\n\t\t\t<st c=\"33523\">If you are interested in knowing more about</st> <st c=\"33568\">AWS Shield, visit the AWS documentation at</st> [<st c=\"33611\">https://aws.amazon.com/shield/</st>](https://aws.amazon.com/shield/)<st c=\"33641\">.</st>\n\t\t\t<st c=\"33642\">Having better observability</st>\n\t\t\t<st c=\"33670\">Logging</st> <st c=\"33679\">refers to the process of recording events, messages, and other information generated by an application during its execution.</st> <st c=\"33804\">It is an essential practice in software development and operations as it provides insights into the behavior, performance, and potential issues of</st> <st c=\"33951\">an application.</st>\n\t\t\t<st c=\"33966\">You configured and verified metrics for your static website, but not logs.</st> <st c=\"34042\">S3, CloudFront, WAF, and other AWS services have the ability to</st> <st c=\"34106\">generate logs.</st>\n\t\t\t<st c=\"34120\">Consider enabling CloudFront access logs.</st> <st c=\"34163\">They are log files that contain detailed information about every user request that CloudFront receives.</st> <st c=\"34267\">You can enable access logs by editing your</st> <st c=\"34310\">CloudFront distribution.</st>\n\t\t\t<st c=\"34334\">CloudFront logs contain 33 fields.</st> <st c=\"34370\">Since that’s too many to list, some important ones to have in mind are</st> <st c=\"34441\">as follows:</st>\n\n\t\t\t\t*   `<st c=\"34452\">date</st>`\n\t\t\t\t*   `<st c=\"34457\">time</st>`\n\t\t\t\t*   `<st c=\"34462\">c-ip</st>` <st c=\"34467\">– the IP address of</st> <st c=\"34488\">the viewer</st>\n\t\t\t\t*   `<st c=\"34498\">cs(UserAgent)</st>` <st c=\"34512\">– the</st> <st c=\"34519\">browser identifier</st>\n\t\t\t\t*   `<st c=\"34537\">x-edge-location</st>` <st c=\"34553\">– the physical location the request</st> <st c=\"34590\">entered from</st>\n\n\t\t\t<st c=\"34602\">Important note</st>\n\t\t\t<st c=\"34617\">Although this feature might not seem very useful for this specific project, having an observable solution is considered an industry best practice.</st> <st c=\"34765\">You will regret not having logs at the time of</st> <st c=\"34812\">troubleshooting issues.</st>\n\t\t\t<st c=\"34835\">Logs can be written</st> <st c=\"34856\">to various destinations, such as files, databases, or centralized logging services such as CloudWatch, Elasticsearch, or Splunk.</st> <st c=\"34985\">CloudFront logs are written to an S3 bucket of your choice.</st> <st c=\"35045\">If, later, you decide that you want to centralize your logs in CloudWatch, you can move them from S3\\.</st> <st c=\"35147\">AWS designed this architecture in a blog</st> <st c=\"35188\">post:</st> [<st c=\"35194\">https://aws.amazon.com/blogs/mt/sending-cloudfront-standard-logs-to-cloudwatch-logs-for-analysis/</st>](https://aws.amazon.com/blogs/mt/sending-cloudfront-standard-logs-to-cloudwatch-logs-for-analysis/)<st c=\"35291\">.</st>\n\t\t\t<st c=\"35292\">After you have access to your CloudFront log files, you can correlate them with your CloudWatch metrics and have a complete picture of your user experience.</st> <st c=\"35450\">For example, you will be able to tell, for the users having 4xx errors in</st> *<st c=\"35524\">Figure 2</st>**<st c=\"35532\">.7</st>*<st c=\"35534\">, which countries are they from, which browser versions are they running, and which SSL security ciphers they tried</st> <st c=\"35650\">to negotiate.</st>\n\t\t\t<st c=\"35663\">As mentioned, it’s also possible to enable logs for the other components of your architecture, such as S3\\.</st> <st c=\"35771\">Investigate the benefits of that on</st> <st c=\"35807\">your own.</st>\n\t\t\t<st c=\"35816\">If you are interested in implementing CloudFront access logs, the AWS documentation details the whole</st> <st c=\"35919\">process:</st> [<st c=\"35928\">https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/AccessLogs.html</st>](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/AccessLogs.html)<st c=\"36010\">.</st>\n\t\t\t<st c=\"36011\">Final architecture</st>\n\t\t\t<st c=\"36030\">The final architecture, after</st> <st c=\"36061\">enhancements, should look like the one in</st> *<st c=\"36103\">Figure 2</st>**<st c=\"36111\">.9</st>*<st c=\"36113\">. Notice the addition of WAF, Route 53, and Certificate Manager.</st> <st c=\"36178\">Your final architecture might look slightly different if you did not implement all</st> <st c=\"36261\">the enhancements.</st>\n\t\t\t![Figure 2.9 – Final static website architecture with improvements](img/B22051_02_9.jpg)\n\n\t\t\t<st c=\"36369\">Figure 2.9 – Final static website architecture with improvements</st>\n\t\t\t<st c=\"36433\">The final simplified traffic flow is</st> <st c=\"36471\">as follows:</st>\n\n\t\t\t\t1.  <st c=\"36482\">The client enters your custom URL in</st> <st c=\"36520\">its browser.</st>\n\t\t\t\t2.  <st c=\"36532\">Route 53 responds to the</st> <st c=\"36558\">DNS query.</st>\n\t\t\t\t3.  <st c=\"36568\">The client’s browser sends the HTTP request to</st> <st c=\"36616\">CloudFront IPs.</st>\n\t\t\t\t4.  <st c=\"36631\">The request is inspected</st> <st c=\"36657\">by WAF.</st>\n\t\t\t\t5.  <st c=\"36664\">CloudFront replies to the request, and returns the</st> <st c=\"36716\">static assets.</st>\n\t\t\t\t6.  <st c=\"36730\">The</st> <st c=\"36734\">client’s browser renders the</st> <st c=\"36764\">website locally.</st>\n\n\t\t\t<st c=\"36780\">All the components send metrics and logs to CW</st> <st c=\"36828\">as configured.</st>\n\t\t\t<st c=\"36842\">Summary</st>\n\t\t\t<st c=\"36850\">In this chapter, you learned what static websites are.</st> <st c=\"36906\">You also learned about the common files that compose them, such as HTML, CSS, and JavaScript.</st> <st c=\"37000\">You followed</st> [*<st c=\"37013\">Chapter 1</st>*](B22051_01.xhtml#_idTextAnchor014)<st c=\"37022\">’s methodology of requirements gathering, architecture patterns, service selection, and diagraming to draw the architecture of your own static website, a</st> <st c=\"37177\">personal page.</st>\n\t\t\t<st c=\"37191\">Then, using the AWS console, you</st> <st c=\"37225\">built it.</st>\n\t\t\t<st c=\"37234\">Lastly, you learned about multiple possible enhancements that can take your static website to a production-level website.</st> <st c=\"37357\">By now, you are capable of building globally distributed, highly available, highly resilient, secure</st> <st c=\"37458\">static websites.</st>\n\t\t\t<st c=\"37474\">In the next chapter, you are going to go beyond static websites and create a dynamic web application to share recipes.</st> <st c=\"37594\">You will put all your knowledge in static websites to use, but take it one</st> <st c=\"37669\">step further.</st>\n\n```"]
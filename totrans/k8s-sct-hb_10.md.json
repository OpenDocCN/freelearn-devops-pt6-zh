["```\nprovider \"google\" {\n  credentials = \"/path/to/credentials/file\"\n  project     = \"your-gcp-project\"\n  region      = \"us-central1\"\n}\n```", "```\n$ terraform init\n```", "```\nresource \"google_compute_network\" \"vpc\" {\n  name                    = \"${var.project_id}-vpc\"\n  auto_create_subnetworks = \"false\"\n  project = var.project_id\n}\n```", "```\nresource \"google_compute_subnetwork\" \"subnet\" {\n  name          = \"${var.project_id}-subnet\"\n  region        = var.region\n  network       = google_compute_network.vpc.name\n  ip_cidr_range = \"10.10.0.0/24\"\n  project = var.project_id\n}\n```", "```\nresource \"google_secret_manager_secret\" \"my_secret\" {\n  secret_id = \"my-secret\"\n  user_managed {\n      replicas {\n        location = var.location\n      }\n      replicas {\n        location = \"us-east1\"\n      }\n    }\n}\n```", "```\nresource \"google_secret_manager_secret_version\" \"my_secret_version\" {\n  secret = google_secret_manager_secret.my_secret.id\n  secret_data = \"secret-data\"\n}\n```", "```\nresource \"google_service_account\" \"my_service_account\" {\n  account_id   = \"read-secrets-service-account\"\n}\nresource \"google_secret_manager_secret_iam_binding\" \"my_secret_reader\" {\n  role   = \"roles/secretmanager.secretAccessor\"\n  secret_id = google_secret_manager_secret.my_secret.id\n  members = [\n    \"serviceAccount:${google_service_account.my_service_account.email}\"\n  ]\n}\n```", "```\nresource \"google_container_cluster\" \"gke_cluster\" {\n  name     = \"secrets-cluster\"\n  location = var.region\n  remove_default_node_pool = true\n  initial_node_count       = 1\n  network    = google_compute_network.vpc.name\n  subnetwork = google_compute_subnetwork.subnet.name\n  ...\n  workload_identity_config {\n    workload_pool = \"kube-secrets-book.svc.id.goog\"\n  }\n}\n```", "```\nresource \"google_container_node_pool\" \"primary_nodes\" {\n  name       = google_container_cluster.gke_cluster.name\n  cluster    = google_container_cluster.gke_cluster.name\n  version = data.google_container_engine_versions.gke_version.release_channel_latest_version[\"STABLE\"]\n  node_count = 1\n  node_config {\n    oauth_scopes = [\n      \"https://www.googleapis.com/auth/logging.write\",\n      \"https://www.googleapis.com/auth/monitoring\",\n    ]\n    machine_type = \"n1-standard-1\"\n    tags         = [\"gke-node\", \"${var.project_id}-gke\"]\n    disk_size_gb = 10\n    metadata = {\n      disable-legacy-endpoints = \"true\"\n    }\n  }\n}\n```", "```\n$ gcloud container clusters get-credentials secrets-cluster --region us-central1 --project kube-secrets-book\n$ kubectl get node\nNAME                    STATUS   ROLES    AGE     VERSION\ngke-secrets-cluster-secrets-cluster-9e54b21e-5kxw   Ready    <none>   9m41s   v1.27.3-gke.1700\ngke-secrets-cluster-secrets-cluster-b969915f-rfjz   Ready    <none>   9m35s   v1.27.3-gke.1700\n...\n```", "```\n$ helm repo add secrets-store-csi-driver https://kubernetes-sigs.github.io/secrets-store-csi-driver/charts\n$ helm install csi-secrets-store secrets-store-csi-driver/secrets-store-csi-driver --namespace kube-system\n$ kubectl apply -f https://raw.githubusercontent.com/GoogleCloudPlatform/secrets-store-csi-driver-provider-gcp/main/deploy/provider-gcp-plugin.yaml\n```", "```\n$ kubectl create serviceaccount read-secret --namespace=default\n$ kubectl annotate serviceaccount read-secret \\\n    --namespace=default \\\n    iam.gke.io/gcp-service-account=read-secrets-service-account@test-gcp-project.iam.gserviceaccount.com\n```", "```\napiVersion: secrets-store.csi.x-k8s.io/v1\nkind: SecretProviderClass\nmetadata:\n  name: app-secrets\nspec:\n  provider: gcp\n  parameters:\n    secrets: |\n      - resourceName: \"projects/project-i/secrets/my-secret/versions/latest\"\n        path: \"good1.txt\"\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n...\nspec:\n  serviceAccountName: mypodserviceaccount\n  containers:\n  - ...\n    volumeMounts:\n      - mountPath: \"/var/secrets\"\n        name: mysecret\n  volumes:\n  - name: mysecret\n    csi:\n      driver: secrets-store.csi.k8s.io\n      readOnly: true\n      volumeAttributes:\n        secretProviderClass: \"app-secrets\"\n```", "```\n$ kubectl create secret generic empty-secret\n```", "```\nprotoPayload.methodName=\"io.k8s.core.v1.secrets.create\"\nprotoPayload.@type=\"type.googleapis.com/google.cloud.audit.AuditLog\"\nresource.type=\"k8s_cluster\"\n```", "```\nresource.type=\"audited_resource\" AND\nresource.labels.service=\"secretmanager.googleapis.com\"\n```", "```\nresource \"google_kms_key_ring\" \"ksm_key_ring\" {\n  name     = \"ksm-key-ring\"\n  location = var.region\n}\nresource \"google_kms_crypto_key\" \"ksm_secret_key\" {\n  name = \"ksm-secret-encryption\"\n  key_ring = google_kms_key_ring.ksm_key_ring.id\n  lifecycle {\n    prevent_destroy = false\n  }\n}\n```", "```\ndata \"google_project\" \"project\" {}\nresource \"google_kms_crypto_key_iam_binding\" \"ksm_secret_key_encdec\" {\n  crypto_key_id = google_kms_crypto_key.ksm_secret_key.id\n  role          = \"roles/cloudkms.cryptoKeyEncrypterDecrypter\"\n  members = [\n \"serviceAccount:service-${data.google_project.project.number}@container-engine-robot.iam.gserviceaccount.com\"\n  ]\n}\n```", "```\nresource \"google_container_cluster\" \"gke_cluster\" {\n  name     = \"secrets-cluster\"\n  location = var.region\n...\n  database_encryption {\n    key_name = google_kms_crypto_key.ksm_secret_key.id\n    state = \"ENCRYPTED\"\n  }\n }\n```"]
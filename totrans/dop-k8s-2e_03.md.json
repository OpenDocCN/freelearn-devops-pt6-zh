["```\n// install minikube\n# brew cask install minikube\n==> Tapping caskroom/cask\n==> Linking Binary 'minikube-darwin-amd64' to '/usr/local/bin/minikube'.\n...\nminikube was successfully installed!\n```", "```\n// start the cluster (via minikube v0.30.0)\n# \nStarting local Kubernetes v1.12.1 cluster...\nStarting VM...\nGetting VM IP address...\nMoving files into cluster...\nDownloading kubeadm v1.12.1\nDownloading kubelet v1.12.1\nFinished Downloading kubeadm v1.12.1\nFinished Downloading kubelet v1.12.1\nSetting up certs...\nConnecting to cluster...\nSetting up kubeconfig...\nStarting cluster components...\nKubectl is now configured to use the cluster.\nLoading cached images from config file. \n```", "```\napiVersion: v1\n# cluster and certificate information\nclusters:\n- cluster:\n    certificate-authority: /Users/chloelee/.minikube/ca.crt\n    server: https://192.168.99.100:8443\n  name: minikube\n\n# context is the combination of cluster, user and namespace\ncontexts:\n- context:\n   cluster: minikube\n   user: minikube\n  name: minikube\ncurrent-context: minikube\nkind: Config\npreferences: {}\n\n# user information\n\nusers:  \n- name: minikube\nuser:\n  client-certificate: /Users/chloelee/.minikube/client.crt\n  client-key: /Users/chloelee/.minikube/client.key \n```", "```\n// check Kubernetes version\n# kubectl version\n\nClient Version: version.Info{Major:\"1\", Minor:\"12\", GitVersion:\"v1.12.0\", GitCommit:\"0ed33881dc4355495f623c6f22e7dd0b7632b7c0\", GitTreeState:\"clean\", BuildDate:\"2018-10-01T00:59:42Z\", GoVersion:\"go1.11\", Compiler:\"gc\", Platform:\"darwin/amd64\"}\nServer Version: version.Info{Major:\"1\", Minor:\"11\", GitVersion:\"v1.11.3\", GitCommit:\"a4529464e4629c21224b3d52edfe0ea91b072862\", GitTreeState:\"clean\", BuildDate:\"2018-09-09T17:53:03Z\", GoVersion:\"go1.10.3\", Compiler:\"gc\", Platform:\"linux/amd64\"} \n```", "```\nkubectl [command] [type] [name] [flags] \n```", "```\n// show detailed info for logs command\nkubectl logs --help\nPrint the logs for a container in a pod or specified resource. If the pod has only one container, the container name is optional.\n\nAliases:\nlogs, log\n\nExamples:\n  # Return snapshot logs from pod nginx with only one container\n  kubectl logs nginx\n\n  # Return snapshot logs for the pods defined by label app=nginx\n  kubectl logs -lapp=nginx  ...\nOptions\n...\n```", "```\napiVersion: Kubernetes API version \nkind: object type\nmetadata:\n  spec metadata, i.e. namespace, name, labels and annotations\nspec:\n  the spec of Kubernetes object \n```", "```\n// configuration file of namespace\n# cat 3-2-1_ns1.yml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: project1 // create namespace for project1\n# kubectl create -f 3-2-1_ns.yaml\nnamespace/project1 created // list namespace, the abbreviation of namespaces is ns. We could use `kubectl get ns` to list it as well.\n# kubectl get namespaces\nNAME          STATUS    AGE\ndefault       Active    1d\nkube-public   Active    1d\nkube-system   Active    1d\nproject1      Active    11s\n```", "```\n// run a nginx deployment in project1 ns\n# kubectl run nginx --image=nginx:1.12.0 --replicas=2 --port=80 --namespace=project1\n\ndeployment.apps/nginx created \n```", "```\n// We'll see the Pods if we explicitly specify --namespace\n# kubectl get pods --namespace=project1\nNAME                  READY STATUS  RESTARTS AGE\nnginx-8cdc99758-btgzj 1/1   Running 0        22s\nnginx-8cdc99758-xpk58 1/1   Running 0        22s\n```", "```\nlabels:\n  $key1: $value1\n  $key2: $value2\n```", "```\nselector:\n  $key1: $value1\n```", "```\nselector:\n  matchLabels:\n    $key1: $value1\n  matchExpressions:\n  - {key: $key2, operator: In, values: [$value1, $value2]}\n```", "```\nannotations:\n  $key1: $value1\n  $key2: $value2\n```", "```\n// get detailed info for `pods`\n# kubectl explain pods\nKIND: Pod\nVERSION: v1\n\nDESCRIPTION:\n     Pod is a collection of containers that can run on a host. This resource is\n     created by clients and scheduled onto hosts.\n\nFIELDS:\n   apiVersion <string>\n     APIVersion defines the versioned schema of this representation of an\n     object. Servers should convert recognized schemas to the latest internal\n     value, and may reject unrecognized values. More info:\n     https://git.k8s.io/community/contributors/devel/api-conventions.md#resources\n\n   kind <string>\n     Kind is a string value representing the REST resource this object\n     represents. Servers may infer this from the endpoint the client submits\n     requests to. Cannot be updated. In CamelCase. More info:\n     https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\n\n   metadata <Object>\n     Standard object's metadata. More info:\n     https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\n\n   spec <Object>\n     Specification of the desired behavior of the pod. More info:\n     https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status\n\n   status <Object>\n     Most recently observed status of the pod. This data may not be up to date.\n     Populated by the system. Read-only. More info:\n     https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status \n```", "```\n// an example for creating co-located and co-scheduled container by pod\n# cat 3-2-1_pod.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example\nspec:\n  containers:\n  - name: web\n    image: nginx\n  - name: centos\n    image: centos\n    command: [\"/bin/sh\", \"-c\", \"while : ;do curl http://localhost:80/; sleep 10; done\"]\n```", "```\n// create the resource by `kubectl create` - Create a resource by filename or stdin\n# kubectl create -f 3-2-1_pod.yaml\npod \"example\" created \n```", "```\n// get the current running pods \n# kubectl get pods\nNAME      READY     STATUS              RESTARTS   AGE\nexample   0/2       ContainerCreating   0          1s\n```", "```\n// get the current running pods\n# kubectl get pods\nNAME      READY     STATUS    RESTARTS   AGE\nexample   2/2       Running   0          3s\n```", "```\n// get stdout for centos\n# kubectl logs example -c centos\n<!DOCTYPE html>\n<html>\n<head>\n<title>Welcome to nginx!</title>\n...\n```", "```\n// get detailed information for a pod\n# kubectl describe pods example\nName:              example\nNamespace:         default\nPriority:          0\nPriorityClassName: <none>\nNode:              minikube/10.0.2.15\nStart Time:        Sun, 07 Oct 2018 15:15:36 -0400\nLabels:            <none>\nAnnotations:       <none>\nStatus:            Running\nIP:                172.17.0.4\nContainers:        ... \n```", "```\n web:\n Container ID: docker://d8284e14942cbe0b8a91f78afc132e09c0b522e8a311e44f6a9a60ac2ca7103a\n Image: nginx\n Image ID: docker-pullable://nginx@sha256:9ad0746d8f2ea6df3a17ba89eca40b48c47066dfab55a75e08e2b70fc80d929e\n Port: <none>\n Host Port: <none>\n State: Running\n Started: Sun, 07 Oct 2018 15:15:50 -0400\n Ready: True\n Restart Count: 0\n Environment: <none>\n Mounts:\n /var/run/secrets/kubernetes.io/serviceaccount from default-token-bm6vn (ro)\n```", "```\nConditions:\n Type Status\n Initialized True\n Ready True\n ContainersReady True\n PodScheduled True\n```", "```\nVolumes:\n default-token-bm6vn:\n Type: Secret (a volume populated by a Secret)\n SecretName: default-token-bm6vn\n Optional: false\n```", "```\nQoS Class: BestEffort\nNode-Selectors: <none>\nTolerations: node.kubernetes.io/not-ready:NoExecute for 300s\n node.kubernetes.io/unreachable:NoExecute for 300s\n```", "```\nEvents:\n Type Reason Age From Message\n ---- ------ ---- ---- -------\n Normal Scheduled 2m22s default-scheduler Successfully assigned default/example to minikube\n Normal Pulling 2m21s kubelet, minikube pulling image \"nginx\"\n Normal Pulled 2m8s kubelet, minikube Successfully pulled image \"nginx\"\n Normal Created 2m8s kubelet, minikube Created container\n Normal Started 2m8s kubelet, minikube Started container\n Normal Pulling 2m8s kubelet, minikube pulling image \"centos\"\n Normal Pulled 93s kubelet, minikube Successfully pulled image \"centos\"\n Normal Created 92s kubelet, minikube Created container\n Normal Started 92s kubelet, minikube Started container\n```", "```\n// an example for RS spec\n# cat 3-2-2_rs.yaml\napiVersion: apps/v1\nkind: ReplicaSet\nmetadata:\n  name: nginx\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      project: chapter3\n    matchExpressions:\n      - {key: version, operator: In, values: [\"0.1\", \"0.2\"]}\n  template:\n    metadata:\n      name: nginx\n      labels:\n        project: chapter3\n        service: web\n        version: \"0.1\"\n    spec:\n      containers:\n      - name: nginx\n        image: nginx\n        ports:\n        - containerPort: 80\n\n// create the RS\n# kubectl create -f 3-2-2_rs.yaml\nreplicaset.apps/nginx created \n```", "```\n// get current RSs\n# kubectl get rs\nNAME  DESIRED CURRENT READY AGE\nnginx 2       2       2     29s\n```", "```\n// get current running pod\n# kubectl get pods\nNAME          READY     STATUS    RESTARTS   AGE\nnginx-l5mdn   1/1       Running   0          11s\nnginx-pjjw9   1/1       Running   0          11s \n```", "```\n// manually create a pod with same labels\n# cat 3-2-2_rs_self_created_pod.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: our-nginx\n  labels:\n   project: chapter3\n   service: web\n   version: \"0.1\"\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n    ports:\n    - containerPort: 80\n// create a pod with same labels manually\n# kubectl create -f 3-2-2_rs_self_created_pod.yaml \npod \"our-nginx\" created \n```", "```\n// get pod status\n# kubectl get pods\nNAME          READY     STATUS        RESTARTS   AGE\nnginx-l5mdn   1/1       Running       0          4m\nnginx-pjjw9   1/1       Running       0          4m\nour-nginx     0/1       Terminating   0          4s \n```", "```\n// get pod status\n# kubectl get pods\nNAME          READY     STATUS    RESTARTS   AGE\nnginx-l5mdn   1/1       Running   0          5m\nnginx-pjjw9   1/1       Running   0          5m \n```", "```\n// change replica count from 2 to 5, default system editor will pop out. \nChange `replicas` number\n# kubectl edit rs nginx\nreplicaset.extensions/nginx edited \n```", "```\n// get RS information\n# kubectl get rs\nNAME      DESIRED   CURRENT   READY     AGE\nnginx     5         5         5         5m \n```", "```\n// describe RS resource `nginx`\n# kubectl describe rs nginx Name: nginx\nNamespace: default\nSelector: project=chapter3,version in (0.1,0.2)\nLabels: project=chapter3\n              service=web\n              version=0.1\nAnnotations: <none>\nReplicas: 5 current / 5 desired\nPods Status: 5 Running / 0 Waiting / 0 Succeeded / 0 Failed\nPod Template:\n  Labels: project=chapter3\n           service=web\n           version=0.1\n  Containers:\n   nginx:\n    Image: nginx\n    Port: 80/TCP\n    Host Port: 0/TCP\n    Environment: <none>\n    Mounts: <none>\n  Volumes: <none>\nEvents:\n  Type Reason Age From Message\n  ---- ------ ---- ---- -------\n  Normal SuccessfulCreate 3m34s replicaset-controller Created pod: nginx-l5mdn\n  Normal SuccessfulCreate 3m34s replicaset-controller Created pod: nginx-pjjw9\n  Normal SuccessfulDelete 102s replicaset-controller Deleted pod: our-nginx\n  Normal SuccessfulCreate 37s replicaset-controller Created pod: nginx-v9trs\n  Normal SuccessfulCreate 37s replicaset-controller Created pod: nginx-n95mv\n  Normal SuccessfulCreate 37s replicaset-controller Created pod: nginx-xgdhq \n```", "```\n// delete a rc\n# kubectl delete rs nginx\nreplicaset.extensions/nginx deleted\n\n// get pod status\n# kubectl get pods\nNAME          READY     STATUS        RESTARTS   AGE\nnginx-pjjw9   0/1       Terminating   0          29m \n```", "```\n// using kubectl run to launch the Pods\n# kubectl run nginx --image=nginx:1.12.0 --replicas=2 --port=80\ndeployment \"nginx\" created\n// check the deployment status\n# kubectl get deployments\nNAME      DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE\nnginx     2         2         2            2           4h\n```", "```\n// check if pods match our desired count\n# kubectl get pods\nNAME                     READY     STATUS        RESTARTS   AGE\nnginx-2371676037-2brn5   1/1       Running       0          4h\nnginx-2371676037-gjfhp   1/1       Running       0          4h \n```", "```\n// list replica sets\n# kubectl get rs\nNAME               DESIRED   CURRENT   READY     AGE\nnginx-2371676037   2         2         2         4h \n```", "```\n// expose port 80 to service port 80\n# kubectl expose deployment nginx --port=80 --target-port=80\nservice \"nginx\" exposed\n// list services\n# kubectl get services\nNAME         CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE\nkubernetes   10.0.0.1     <none>        443/TCP   3d\nnginx        10.0.0.94    <none>        80/TCP    5s \n```", "```\n// create deployments by spec\n# cat 3-2-3_deployments.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx\nspec:\n  replicas: 2\n  template:\n   metadata:\n    labels:\n     run: nginx\n   spec:\n    containers:\n    - name: nginx\n      image: nginx:1.12.0\n      ports:\n      - containerPort: 80\n---\nkind: Service\napiVersion: v1\nmetadata:\n  name: nginx\n  labels:\n   run: nginx\nspec:\n  selector:\n   run: nginx\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 80\n      name: http \n// create deployments and service\n# kubectl create -f 3-2-3_deployments.yaml\ndeployment \"nginx\" created\nservice \"nginx\" created­­­­ \n```", "```\n// add to Deployments.spec, save as 3-2-3_deployments_rollingupdate.yaml\nminReadySeconds: 3\nstrategy:\n  type: RollingUpdate\n  rollingUpdate:\n    maxSurge: 1\n    maxUnavailable: 1\n```", "```\n// list rs\n# kubectl get rs\nNAME             DESIRED CURRENT READY AGE\nnginx-596b999b89 2       2       2     2m\n\n// check detailed rs information\n# kubectl describe rs nginx-596b999b89\nName: nginx-596b999b89\nNamespace: default\nSelector: pod-template-hash=1526555645,run=nginx\nLabels: pod-template-hash=1526555645\n        run=nginx\nAnnotations: deployment.kubernetes.io/desired-replicas: 2\n             deployment.kubernetes.io/max-replicas: 3\n             deployment.kubernetes.io/revision: 1\nControlled By: Deployment/nginx\nReplicas: 2 current / 2 desired\nPods Status: 2 Running / 0 Waiting / 0 Succeeded / 0 Failed\nPod Template:\n  Labels: pod-template-hash=1526555645\n          run=nginx\n  Containers:\n   nginx:\n    Image: nginx:1.12.0\n    Port: 80/TCP\n    Host Port: 0/TCP\nEvents:\n  Type Reason Age From Message\n  ---- ------ ---- ---- -------\n  Normal SuccessfulCreate 3m41s replicaset-controller Created pod: nginx-596b999b89-th9rx\n  Normal SuccessfulCreate 3m41s replicaset-controller Created pod: nginx-596b999b89-2pp7b\n```", "```\n// create RS 1 with nginx 1.12.0 version\n# cat 3-2-3_rs1.yaml\napiVersion: apps/v1\nkind: ReplicaSet\nmetadata:\n  name: nginx-1.12\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      project: chapter3\n      service: web\n      version: \"0.1\" \n  template:\n    metadata:\n      name: nginx\n      labels:\n        project: chapter3\n        service: web\n        version: \"0.1\"\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.12.0\n        ports:\n        - containerPort: 80\n\n// create RS 2 with nginx 1.13.1 version\n# cat 3-2-3_rs2.yaml\n\napiVersion: apps/v1\nkind: ReplicaSet\nmetadata:\n  name: nginx-1.13\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      project: chapter3\n      service: web\n      version: \"0.2\" \n  template:\n    metadata:\n      name: nginx\n      labels:\n        project: chapter3\n        service: web\n        version: \"0.2\"\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.13.1\n        ports:\n        - containerPort: 80 \n```", "```\n// simple nginx service \n# cat 3-2-3_service.yaml\nkind: Service\napiVersion: v1\nmetadata:\n  name: nginx-service\nspec:\n  selector:\n   project: chapter3\n   service: web\n  ports:\n  - protocol: TCP\n    port: 80\n    targetPort: 80\n    name: http\n\n// create the RSs \n# kubectl create -f 3-2-3_rs1.yaml\nreplicaset.apps/nginx-1.12 created\n# kubectl create -f 3-2-3_rs2.yaml\nreplicaset.apps/nginx-1.13 created\n// create the service\n# kubectl create -f 3-2-3_service.yaml\nservice \"nginx-service\" created  \n```", "```\n// check nginx-service information\n# kubectl describe service nginx-service\nName:      nginx-service\nNamespace:    default\nLabels:      <none>\nAnnotations:    <none>\nSelector:    project=chapter3,service=web\nType:      ClusterIP\nIP:      10.0.0.188\nPort:      http  80/TCP \nEndpoints:    172.17.0.5:80,172.17.0.6:80,172.17.0.7:80 + 1 more...\nSession Affinity:  None\nEvents:      <none>\n```", "```\n// list current endpoints. Nginx-service endpoints are created and pointing to the ip of our 4 nginx pods.\n# kubectl get endpoints\nNAME            ENDPOINTS                                               AGE\nkubernetes      10.0.2.15:8443                                          2d\nnginx-service   172.17.0.5:80,172.17.0.6:80,172.17.0.7:80 + 1 more...   10s \n```", "```\n// access nginx service via ${NGINX_SERVICE_SERVICE_HOST}\n# cat 3-2-3_clusterip_chk.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: clusterip-chk\nspec:\n  containers:\n  - name: centos\n    image: centos\n    command: [\"/bin/sh\", \"-c\", \"while : ;do curl \nhttp://${NGINX_SERVICE_SERVICE_HOST}:80/; sleep 10; done\"] \n```", "```\n// check stdout, see if we can access nginx pod successfully\n# kubectl logs -f clusterip-chk\n% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                     Dload  Upload   Total   Spent    Left  Speed\n100   612  100   612    0     0   156k      0 --:--:-- --:--:-- --:--:--  199k\n ...\n<title>Welcome to nginx!</title>\n    ...  \n```", "```\n// write a nodeport type service\n# cat 3-2-3_nodeport.yaml\nkind: Service\napiVersion: v1\nmetadata:\n  name: nginx-nodeport\nspec:\n  type: NodePort\n  selector:\n    project: chapter3\n    service: web\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 80\n\n// create a nodeport service\n# kubectl create -f 3-2-3_nodeport.yaml\nservice \"nginx-nodeport\" created \n```", "```\n// create a service without selectors\n# cat 3-2-3_service_wo_selector_srv.yaml\nkind: Service\napiVersion: v1\nmetadata:\n  name: google-proxy\nspec:\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 80\n\n// create service without selectors\n# kubectl create -f 3-2-3_service_wo_selector_srv.yaml\nservice \"google-proxy\" created \n```", "```\n// get an IP from google.com\n# nslookup www.google.com\nServer:    192.168.1.1\nAddress:  192.168.1.1#53\n\nNon-authoritative answer:\nName:  google.com\nAddress: 172.217.0.238\n\n// create endpoints for the ip from google.com\n# cat 3-2-3_service_wo_selector_endpoints.yaml\nkind: Endpoints\napiVersion: v1\nmetadata:\n  name: google-proxy\nsubsets:\n  - addresses:\n      - ip: 172.217.0.238\n    ports:\n      - port: 80\n\n// create Endpoints\n# kubectl create -f 3-2-3_service_wo_selector_endpoints.yaml\nendpoints \"google-proxy\" created \n```", "```\n// pod for accessing google proxy\n# cat 3-2-3_proxy-chk.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: proxy-chk\nspec:\n  containers:\n  - name: centos\n    image: centos\n    command: [\"/bin/sh\", \"-c\", \"while : ;do curl -L http://${GOOGLE_PROXY_SERVICE_HOST}:80/; sleep 10; done\"]\n\n// create the pod\n# kubectl create -f 3-2-3_proxy-chk.yaml\npod \"proxy-chk\" created \n```", "```\n// get logs from proxy-chk\n# kubectl logs proxy-chk\n% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                     Dload  Upload   Total   Spent    Left  Speed\n100   219  100   219    0     0   2596      0 --:--:-- --:--:-- --:--:--  2607\n100   258  100   258    0     0   1931      0 --:--:-- --:--:-- --:--:--  1931\n<!doctype html><html itemscope=\"\" itemtype=\"http://schema.org/WebPage\" lang=\"en-CA\"> \n ... \n```", "```\n// create a secret by command line\n# kubectl create secret generic mypassword --from-file=./mypassword.txt\nsecret \"mypassword\" created \n```", "```\n// get the detailed info of the secret\n# kubectl get secret mypassword -o yaml\napiVersion: v1\ndata:\n  mypassword: bXlwYXNzd29yZA==\nkind: Secret\nmetadata:\n  creationTimestamp: 2017-06-13T08:09:35Z\n  name: mypassword\n  namespace: default\n  resourceVersion: \"256749\"\n  selfLink: /api/v1/namespaces/default/secrets/mypassword\n  uid: a33576b0-500f-11e7-9c45-080027cafd37\ntype: Opaque \n```", "```\n# echo \"bXlwYXNzd29yZA==\" | base64 --decode\nmypassword\n```", "```\n// example for how a Pod retrieve secret\n# cat 3-2-3_pod_vol_secret.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n name: secret-access\nspec:\n containers:\n - name: centos\n image: centos\n command: [\"/bin/sh\", \"-c\", \"while : ;do cat /secret/password-example; sleep 10; done\"]\n volumeMounts:\n - name: secret-vol\n mountPath: /secret\n readOnly: true\n volumes:\n - name: secret-vol\n secret:\n secretName: mypassword\n items:\n - key: mypassword\n path: password-example\n\n// create the pod \n# kubectl create -f 3-2-3_pod_vol_secret.yaml \npod \"secret-access\" created \n```", "```\n# kubectl describe pod secret-access\n...\nMounts:\n      /secret from secret-vol (ro)\n      /var/run/secrets/kubernetes.io/serviceaccount from default-token-jd1dq (ro)\n...  \n```", "```\n# kubectl describe pod secret-access\n...\nFailedMount  MountVolume.SetUp failed for volume \n\"kubernetes.io/secret/28889b1d-5015-11e7-9c45-080027cafd37-secret-vol\" (spec.Name: \"secret-vol\") pod \"28889b1d-5015-11e7-9c45-080027cafd37\" (UID: \"28889b1d-5015-11e7-9c45-080027cafd37\") with: secrets \"mypassword\" not found\n...  \n```", "```\n// secret example\n# cat 3-2-3_secret.yaml \napiVersion: v1 \nkind: Secret \nmetadata: \n name: mypassword \ntype: Opaque \ndata: \n mypassword: bXlwYXNzd29yZA==\n```", "```\n// example to use environment variable to retrieve the secret\n# cat 3-2-3_pod_ev_secret.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: secret-access-ev\nspec:\n  containers:\n  - name: centos\n    image: centos\n    command: [\"/bin/sh\", \"-c\", \"while : ;do echo $MY_PASSWORD; sleep 10; done\"]\n    env:\n       - name: MY_PASSWORD\n         valueFrom:\n          secretKeyRef:\n           name: mypassword\n           key: mypassword\n\n// create the pod \n# kubectl create -f 3-2-3_pod_ev_secret.yaml\npod \"secret-access-ev\" created \n```", "```\n// create configmap\n# kubectl create configmap example --from-file=config/app.properties --from-file=config/database.properties\nconfigmap \"example\" created  \n```", "```\n// check out detailed information for configmap\n# kubectl describe configmap example\nName:    example\nNamespace:  default\nLabels:    <none>\nAnnotations:  <none>\n\nData\n====\napp.properties:\n----\nname=DevOps-with-Kubernetes\nport=4420\n\ndatabase.properties:\n----\nendpoint=k8s.us-east-1.rds.amazonaws.com\nport=1521\n```", "```\ncat 3-2-3_pod_vol_configmap.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: configmap-vol\nspec:\n  containers:\n    - name: configmap\n      image: centos\n      command: [\"/bin/sh\", \"-c\", \"while : ;do cat /src/app/config/database.properties; sleep 10; done\"]\n      volumeMounts:\n        - name: config-volume\n          mountPath: /src/app/config\n  volumes:\n    - name: config-volume\n      configMap:\n        name: example\n\n// create configmap\n# kubectl create -f 3-2-3_pod_vol_configmap.yaml\npod \"configmap-vol\" created\n\n// check out the logs\n# kubectl logs -f configmap-vol\nendpoint=k8s.us-east-1.rds.amazonaws.com\nport=1521  \n```", "```\n# cat 3-2-3_pod_ev_configmap.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n name: configmap-ev\nspec:\n containers:\n - name: configmap\n image: centos\n command: [\"/bin/sh\", \"-c\", \"while : ;do echo $DATABASE_ENDPOINT; sleep 10; done\"]\n env:\n - name: DATABASE_ENDPOINT\n valueFrom:\n configMapKeyRef:\n name: example\n key: database.properties\n// create configmap\n# kubectl create -f 3-2-3_pod_ev_configmap.yaml\npod/configmap-ev created\n// check out the logs\n# kubectl logs configmap-ev\nendpoint=k8s.us-east-1.rds.amazonaws.com port=1521\n```", "```\n// generate base64 secret for MYSQL_PASSWORD and MYSQL_ROOT_PASSWORD\n# echo -n \"pass\" | base64\ncGFzcw==\n# echo -n \"mysqlpass\" | base64\nbXlzcWxwYXNz\n```", "```\n# cat secret.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mysql-user\ntype: Opaque\ndata:\n  password: cGFzcw==\n\n---\n# MYSQL_ROOT_PASSWORD\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mysql-root\ntype: Opaque\ndata:\n  password: bXlzcWxwYXNz\n\n// create mysql secret\n# kubectl create -f secret.yaml --record\nsecret \"mysql-user\" created\nsecret \"mysql-root\" created \n```", "```\n# cat config.yaml\nkind: ConfigMap\napiVersion: v1\nmetadata:\n  name: mysql-config\ndata:\n  user: user\n  database: db\n\n// create ConfigMap\n# kubectl create -f config.yaml --record\nconfigmap \"mysql-config\" created \n```", "```\n# cat mysql.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: lmysql\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      tier: database\n      version: \"5.7\"\n  template:\n    metadata:\n      labels:\n        tier: database\n        version: \"5.7\"\n    spec:\n      containers:\n      - name: lmysql\n        image: mysql:5.7\n        volumeMounts:\n          - mountPath: /var/lib/mysql\n            name: mysql-vol\n        ports:\n        - containerPort: 3306\n        env:\n        - name: MYSQL_ROOT_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: mysql-root\n              key: password\n        - name: MYSQL_DATABASE\n          valueFrom:\n            configMapKeyRef:\n              name: mysql-config\n              key: database\n        - name: MYSQL_USER\n          valueFrom:\n            configMapKeyRef:\n              name: mysql-config\n              key: user\n        - name: MYSQL_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: mysql-user\n              key: password\n      volumes:\n      - name: mysql-vol\n        hostPath:\n          path: /mysql/data\n  minReadySeconds: 10\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 1\n---\nkind: Service\napiVersion: v1\nmetadata:\n  name: lmysql-service\nspec:\n  selector:\n    tier: database\n  ports:\n    - protocol: TCP\n      port: 3306\n      targetPort: 3306\n      name: tcp3306 \n```", "```\n// create Redis deployment \n# cat redis.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: lcredis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      tier: cache\n      version: \"3.0\"\n  template:\n    metadata:\n      labels:\n        tier: cache\n        version: \"3.0\"\n    spec:\n      containers:\n      - name: lcredis\n        image: redis:3.0\n        ports:\n        - containerPort: 6379\n  minReadySeconds: 1\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 1\n---\nkind: Service\napiVersion: v1\nmetadata:\n  name: lcredis-service\nspec:\n  selector:\n    tier: cache\n  ports:\n    - protocol: TCP\n      port: 6379\n      targetPort: 6379\n      name: tcp6379\n\n// create redis deployements and service\n# kubectl create -f redis.yaml\ndeployment \"lcredis\" created\nservice \"lcredis-service\" created\n```", "```\n# cat kiosk-example.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: kiosk-example\nspec:\n  replicas: 5\n  selector:\n    matchLabels:\n      tier: frontend\n      version: \"3\"\n  template:\n    metadata:\n      labels:\n        tier: frontend\n        version: \"3\"\n      annotations:\n        maintainer: cywu\n    spec:\n      containers:\n      - name: kiosk-example\n        image: devopswithkubernetes/kiosk-example\n        ports:\n        - containerPort: 5000\n        env:\n        - name: REDIS_HOST\n          value: lcredis-service.default\n  minReadySeconds: 5\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 1\n---\nkind: Service\napiVersion: v1\nmetadata:\n  name: kiosk-service\nspec:\n  type: NodePort\n  selector:\n    tier: frontend\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 5000\n      name: tcp5000 \n// launch the spec\n # kubectl create -f kiosk-example.yaml\n deployment \"kiosk-example\" created\n service \"kiosk-service\" created \n```", "```\n# cat recorder-example.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: recorder-example\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n        tier: backend\n        version: \"3\"\n  template:\n    metadata:\n      labels:\n        tier: backend\n        version: \"3\"\n      annotations:\n        maintainer: cywu\n    spec:\n      containers:\n      - name: recorder-example\n        image: devopswithkubernetes/recorder-example\n        env:\n        - name: REDIS_HOST\n          value: lcredis-service.default\n        - name: MYSQL_HOST\n          value: lmysql-service.default\n        - name: MYSQL_USER\n          value: root\n        - name: MYSQL_ROOT_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: mysql-root\n              key: password\n  minReadySeconds: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 1\n\n// create recorder deployment\n # kubectl create -f recorder-example.yaml\n deployment \"recorder-example\" created \n```", "```\n// check deployment details\n# kubectl get deployments\nNAME               DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE\nkiosk-example      5         5         5            5           1h\nlcredis            1         1         1            1           1h\nlmysql             1         1         1            1           1h\nrecorder-example   3         3         3            3           1h \n```", "```\n// post ticket\n# curl -XPOST -F 'value=100' http://192.168.99.100:30520/tickets\nSUCCESS\n\n// get ticket\n# curl -XGET http://192.168.99.100:30520/tickets\n100\n```"]
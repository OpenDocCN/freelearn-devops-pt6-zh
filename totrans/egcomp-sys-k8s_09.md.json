["```\n    $ brew install kn\n    ```", "```\n$ brew upgrade kn\n```", "```\n    $ kubectl apply -f https://github.com/knative/serving/releases/download/knative-v1.2.0/serving-crds.yaml\n    $ kubectl apply -f https://github.com/knative/serving/releases/download/knative-v1.2.0/serving-core.yaml\n    ```", "```\n    $ kubectl apply -f https://github.com/knative/net-contour/releases/download/knative-v1.2.0/contour.yaml\n    ```", "```\n    $ kubectl apply -f https://github.com/knative/net-contour/releases/download/knative-v1.2.0/net-contour.yaml\n    ```", "```\n    $ kubectl patch configmap/config-network \\\n      --namespace knative-serving \\\n      --type merge \\\n      --patch '{\"data\":{\"ingress-class\":\"contour.ingress.networking.knative.dev\"}}'\n    ```", "```\n    $ EXTERNAL_IP=\"$(kubectl get svc envoy -n contour-external  -o=jsonpath='{.status.loadBalancer.ingress[0].ip}')\"\n    ```", "```\n    $ KNATIVE_DOMAIN=\"$EXTERNAL_IP.nip.io\"\n    $ kubectl patch configmap/config-domain \\\n    --namespace knative-serving \\\n    --type merge \\\n    --patch '{\"data\":{\"'$KNATIVE_DOMAIN'\":\"\"}}'\n    ```", "```\n    $ kubectl apply -f https://github.com/knative/serving/releases/download/knative-v1.2.0/serving-hpa.yaml\n    ```", "```\n    $ kubectl get pods -n knative-serving\n    ```", "```\nfrom flask import Flask\nfrom flask import jsonify\nimport os\nimport socket\napp = Flask(__name__)\nhost = socket.gethostname()\nmsg = os.environ['MESSAGE']\n@app.route('/')\ndef index():\n    return jsonify({\"host\":host,\"msg\":msg})\nif __name__ == '__main__': \n    app.run(host='0.0.0.0', port=5000, debug=True)\n```", "```\n    $ kn service create api \\\n    --image sergioarmgpl/app2demo \\\n    --port 5000 \\\n    --env MESSAGE=\"Knative demo v1\" \\\n    --revision-name=v1\n    ```", "```\nService 'api' created to latest revision 'api-v1' is available at URL:\nhttp://api.default.192.168.0.54.nip.io\n```", "```\n    $ curl http://api.default.$EXTERNAL_IP.nip.io\n    ```", "```\n{\n  \"host\": \"api-v1-deployment-84f568857d-cxv9z\",\n  \"msg\": \"Knative demo v1\"\n}\n```", "```\n    $ watch kubectl get pods\n    ```", "```\n    NAME             READY   STATUS\n    api-v1           2/2     Running\n    api-v1           2/2     Terminating\n    api-v1           1/2     Terminating\n    api-v1           0/2     Terminating\n    ```", "```\n    NAME             READY   STATUS\n    api-v1           0/2     Pending\n    api-v1           0/2     ContainerCreating\n    api-v1           1/2     Running\n    api-v1           2/2     Running\n    ```", "```\n    $ kn service list\n    ```", "```\n$ kn service list -n <YOUR_NAMESPACE>\n```", "```\n    $ kn revisions list\n    ```", "```\n    $ kn service create api --cluster-local \\\n    --image sergioarmgpl/app2demo \\\n    --port 5000 \\\n    --env MESSAGE=\"Knative demo v1\" \\\n    --revision-name=v1\n    ```", "```\nService 'api' created to latest revision 'api-v1' is available at URL:\nhttp://api.default.svc.cluster.local\n```", "```\n    $ kubectl run curl -it --rm --image=curlimages/curl:7.81.0 /bin/sh\n    ```", "```\n$ curl http://api.default.svc.cluster.local\n```", "```\n{\n  \"host\": \"api-v1-deployment-776c896776-vxhhk\",\n  \"msg\": \"Knative demo v1\"\n} \n```", "```\n    $ kn service delete hello\n    ```", "```\n    $ kn service update api \\\n    --env MESSAGE=\"Knative demo v2\" \\\n    --revision-name=v2\n    ```", "```\nService hello created to latest revision 'api-v2' is available at URL: http://api.default.192.168.0.54.nip.io\n```", "```\n    $ kn revisions list\n    ```", "```\nNAME     SERVICE   TRAFFIC \napi-v2   api       100%\napi-v1   api\n```", "```\n    $ kn service update api \\\n    --traffic api-v1=50 \\\n    --traffic @latest=50\n    ```", "```\nService 'api' with latest revision 'api-v2' (unchanged) is available at URL:\nhttp://api.default.192.168.0.54.nip.io\n```", "```\n    $ kn revisions list\n    ```", "```\nNAME     SERVICE   TRAFFIC\napi-v2   api       50%\napi-v1   api       50%\n```", "```\n    $ while true; do curl http://api.default.$EXTERNAL_IP.nip.io;echo \"\";sleep 0.3; done\n    ```", "```\n{\n  \"host\": \"api-v1-deployment-85f6f977b5-hcgdz\",\n  \"msg\": \"Knative demo v1\"\n}\n\n{\n  \"host\": \"api-v1-deployment-85f6f977b5-hcgdz\",\n  \"msg\": \"Knative demo v2\"\n}\n```", "```\n    $ kubectl get pods -o=custom-columns=NAME:.metadata.name,STATUS:.status.phase\n    ```", "```\nNAME                                 STATUS\napi-v1-deployment-85f6f977b5-jhss5   Running\napi-v2-deployment-b97859489-mtvjm    Running\n```", "```\n    $ kn service delete api\n    ```", "```\n$ kn service create api --cluster-local \\\n--image sergioarmgpl/app2demo \\\n--port 5000 \\\n--env MESSAGE=\"Knative demo v1\" \\\n--revision-name=v1 --target=api.yaml\n```", "```\napiVersion: serving.knative.dev/v1\nkind: Service\nmetadata:\n  labels:\n    networking.knative.dev/visibility: cluster-local\n  name: api\n  namespace: default\nspec:\n  template:\n    metadata:\n      annotations:\n        autoscaling.knative.dev/max-scale: \"5\"\n        containerConcurrency: 2\n      name: api-v1\n    spec:\n      containers:\n      - env:\n        - name: MESSAGE\n          value: \"Knative demo v1\"\n        image: sergioarmgpl/app2demo\n        name: \"\"\n        ports:\n        - containerPort: 5000\n```", "```\n$ kn service update api \\\n--traffic api-v1=50 \\\n--traffic @latest=50 --target=api.yaml\n```", "```\napiVersion: serving.knative.dev/v1\nkind: Service\nmetadata:\n  labels:\n    networking.knative.dev/visibility: cluster-local\n  name: api\n  namespace: default\nspec:\n  traffic:\n  - latestRevision: true\n    percent: 50\n  - latestRevision: false\n    percent: 50\n    revisionName: api-v1\n  template:\n    metadata:\n      annotations:\n        autoscaling.knative.dev/max-scale: \"5\"\n        containerConcurrency: \"2\"\n      name: api-v1\n    spec:\n      containers:\n      - env:\n        - name: MESSAGE\n          value: \"Knative demo v1\"\n        image: sergioarmgpl/app2demo\n        name: \"\"\n        ports:\n        - containerPort: 5000\n```", "```\n    $ kubectl apply -f https://github.com/knative/eventing/releases/download/knative-v1.2.0/eventing-crds.yaml\n    ```", "```\n    $ kubectl apply -f https://github.com/knative/eventing/releases/download/knative-v1.2.0/eventing-core.yaml\n    ```", "```\n    $ kubectl apply -f https://github.com/knative/eventing/releases/download/knative-v1.2.0/in-memory-channel.yaml\n    ```", "```\n    $ kubectl apply -f https://github.com/knative/eventing/releases/download/knative-v1.2.0/mt-channel-broker.yaml\n    ```", "```\n    $ kubectl apply -f https://github.com/knative/eventing/releases/download/knative-v1.2.0/eventing-sugar-controller.yaml\n    ```", "```\n    $ kubectl get pods -n knative-eventing -o=custom-columns=NAME:.metadata.name,STATUS:.status.phase\n    ```", "```\nNAME                                   STATUS\nmt-broker-filter-574dc4457f-pjs7z      Running\nimc-dispatcher-7fcb4b5d8c-qxrq2        Running\nmt-broker-controller-8d979648f-6st56   Running\nsugar-controller-6dd4c4bc5f-76kqc      Running\nmt-broker-ingress-5ddd6f8b5d-h94z5     Running\neventing-webhook-5968f79978-5nhlc      Running\neventing-controller-58875c5478-n8xzl   Running\nimc-controller-86cd7b7857-hpcpq        Running\n```", "```\nfrom flask import Flask, request\nfrom cloudevents.http import from_http\napp = Flask(__name__)\n\n@app.route(\"/\", methods=[\"POST\"])\ndef route():\n    event = from_http(request.headers, request.get_data())\n    app.logger.warning(event)\n    return \"\", 204\n\nif __name__ == \"__main__\":\n    app.run(debug=True, host='0.0.0.0',port=5000)\n```", "```\n    $ cat <<EOF | kubectl apply -f -\n    apiVersion: v1\n    kind: Namespace\n    metadata:\n      name: event-demo\n      labels:\n           eventing.knative.dev/injection: enabled\n    EOF\n    ```", "```\n    $ cat <<EOF | kubectl apply -f -\n    apiVersion: eventing.knative.dev/v1\n    kind: Broker\n    metadata:\n      name: default\n      namespace: event-demo\n      annotations:\n        eventing.knative.dev/broker.class: MTChannelBasedBroker\n    EOF\n    ```", "```\n    $ cat <<EOF | kubectl apply -f -\n    apiVersion: apps/v1 \n    kind: Deployment \n    metadata: \n    labels: \n    app: api-demo \n    name: api-demo \n    namespace: event-demo \n    spec: \n    replicas: 1 \n    selector: \n    matchLabels: \n    app: api-demo \n      template:\n    metadata: \n    labels: \n    app: api-demo \n    spec: \n    containers: \n    - image: sergioarmgpl/app3demo \n            name: app3demo\n            imagePullPolicy: Always\n    EOF\n    ```", "```\n    $ cat <<EOF | kubectl apply -f -\n    apiVersion: v1\n    kind: Service\n    metadata:\n      labels:\n        app: api-demo\n      name: api-demo\n      namespace: event-demo\n    spec:\n      ports:\n      - port: 80\n        protocol: TCP\n        targetPort: 5000\n      selector:\n        app: api-demo\n      type: ClusterIP\n    EOF\n    ```", "```\n    $ cat <<EOF | kubectl apply -f -\n    apiVersion: eventing.knative.dev/v1\n    kind: Trigger\n    metadata:\n      name: api-demo\n      namespace: event-demo\n    spec:\n      broker: default\n      filter:\n        attributes:\n          type: event.show\n      subscriber:\n        ref:\n          apiVersion: v1\n          kind: Service\n          name: api-demo\n    EOF\n    ```", "```\n    $ kubectl run -n event-demo curl -it --rm --image=curlimages/curl:7.81.0 /bin/sh\n    ```", "```\n    $ curl -v \"broker-ingress.knative-eventing.svc.cluster.local/event-demo/default\" \\\n    -X POST \\\n    -H \"Ce-Id: call-api-demo\" \\\n    -H \"Ce-specversion: 1.0\" \\\n    -H \"Ce-Type: event.show\" \\\n    -H \"Ce-Source: test-send\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\"msg\":\"Simple Event using Knative.\"}'\n    ```", "```\n* Connected to broker-ingress.knative-eventing.svc.cluster.local (10.43.130.39) port 80 (#0)\n> POST /event-demo/default HTTP/1.1\n> Host: broker-ingress.knative-eventing.svc.cluster.local\n> User-Agent: curl/7.81.0-DEV\n> Accept: */*\n> Ce-Id: 536808d3-88be-4077-9d7a-a3f162705f79\n> Ce-specversion: 0.3\n> Ce-Type: dev.knative.myevents.api-demo\n> Ce-Source: dev.knative.myevents/api-demo-source\n> Content-Type: application/json\n> Content-Length: 37\n>\n* Mark bundle as not supporting multiuse\n< HTTP/1.1 202 Accepted\n< Allow: POST, OPTIONS\n< Date: Thu, 24 Feb 2022 05:30:13 GMT\n< Content-Length: 0\n<\n* Connection #0 to host broker-ingress.knative-eventing.svc.cluster.local left intact\n```", "```\n    $ exit\n    ```", "```\n    $ kubectl -n event-demo logs -l app=api-demo --tail=50\n    ```", "```\n$ kubectl -n event-demo logs -f -l app=api-demo\n```", "```\n* Serving Flask app 'index' (lazy loading)\n* Environment: production\n   WARNING: This is a development server. Do not use it in a production deployment.\n   Use a production WSGI server instead.\n* Debug mode: on\n* Running on all addresses.\n   WARNING: This is a development server. Do not use it in a production deployment.\n* Running on http://10.42.0.42:5000/ (Press CTRL+C to quit)\n* Restarting with stat\n* Debugger is active!\n* Debugger PIN: 110-221-376\n[2022-02-27 06:02:02,107] WARNING in index: {'attributes': {'specversion': '1.0', 'id': 'call-api-demo', 'source': 'test-send', 'type': 'event.show', 'datacontenttype': 'application/json', 'knativearrivaltime': '2022-02-27T06:02:02.069191004Z', 'time': '2022-02-27T06:02:02.107288+00:00'}, 'data': {'msg': 'Simple Event using Knative.'}}\n```", "```\n    $ cat <<EOF | kubectl apply -f -\n    apiVersion: apps/v1 \n    kind: Deployment \n    metadata: \n    labels: \n    app: api-demo2 \n    name: api-demo2 \n    namespace: event-demo \n    spec: \n    replicas: 1 \n    selector: \n    matchLabels: \n    app: api-demo2 \n      template:\n    metadata: \n    labels: \n    app: api-demo2 \n    spec: \n    containers: \n          - image: sergioarmgpl/app3demo\n            name: app4\n            imagePullPolicy: Always\n    EOF\n    ```", "```\n    $ cat <<EOF | kubectl apply -f -\n    apiVersion: v1\n    kind: Service\n    metadata:\n      labels:\n        app: api-demo2\n      name: api-demo2\n      namespace: event-demo\n    spec:\n      ports:\n      - port: 80\n        protocol: TCP\n        targetPort: 5000\n      selector:\n        app: api-demo2\n      type: ClusterIP\n    EOF\n    ```", "```\n    $ cat <<EOF | kubectl apply -f -\n    apiVersion: eventing.knative.dev/v1\n    kind: Trigger\n    metadata:\n      name: api-demo2\n      namespace: event-demo\n    spec:\n      broker: default\n      filter:\n        attributes:\n          type: event.show.2\n      subscriber:\n        ref:\n          apiVersion: v1\n          kind: Service\n          name: api-demo2\n    EOF\n    ```", "```\n    $ curl -v \"broker-ingress.knative-eventing.svc.cluster.local/event-demo/default\" \\\n    -X POST \\\n    -H \"Ce-Id: call-api-demo2\" \\\n    -H \"Ce-specversion: 1.0\" \\\n    -H \"Ce-Type: event.show.2\" \\\n    -H \"Ce-Source: test-send\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\"msg\":\"Simple Event using Knative.\"}'\n    ```", "```\n    $ kubectl -n event-demo logs -l app=api-demo2 --tail=50\n    ```", "```\n    * Serving Flask app 'index' (lazy loading)\n    * Environment: production\n       WARNING: This is a development server. Do not use it in a production deployment.\n       Use a production WSGI server instead.\n    * Debug mode: on\n    * Running on all addresses.\n       WARNING: This is a development server. Do not use it in a production deployment.\n    * Running on http://10.42.0.43:5000/ (Press CTRL+C to quit)\n    * Restarting with stat\n    * Debugger is active!\n    * Debugger PIN: 602-982-734\n    [2022-02-27 06:16:07,689] WARNING in index: {'attributes': {'specversion': '1.0', 'id': 'call-api-demo2', 'source': 'test-send', 'type': 'event.show.2', 'datacontenttype': 'application/json', 'knativearrivaltime': '2022-02-27T06:16:07.654229185Z', 'time': '2022-02-27T06:16:07.688895+00:00'}, 'data': {'msg': 'Simple Event using Knative2.'}}\n    ```", "```\n    $ cat <<EOF | kubectl apply -f -\n    apiVersion: v1\n    kind: Namespace\n    metadata:\n      name: sequence-demo\n      labels:\n           eventing.knative.dev/injection: enabled\n    EOF\n    ```", "```\n    $ cat <<EOF | kubectl apply -f -\n    apiVersion: serving.knative.dev/v1\n    kind: Service\n    metadata:\n      name: step1\n      namespace: sequence-demo\n    spec:\n      template:\n        spec:\n          containers:\n            - image: sergioarmgpl/app4demo\n              ports:\n               - containerPort: 5000\n              env:\n                - name: MESSAGE\n                  value: \"step1\"\n    EOF\n    ```", "```\n    $ cat <<EOF | kubectl apply -f -\n    apiVersion: serving.knative.dev/v1\n    kind: Service\n    metadata:\n      name: step2\n      namespace: sequence-demo\n    spec:\n      template:\n        spec:\n          containers:\n            - image: sergioarmgpl/app4demo\n              ports:\n               - containerPort: 5000\n              env:\n                - name: MESSAGE\n                  value: \"step2\"\n    EOF\n    ```", "```\n    $ cat <<EOF | kubectl apply -f -\n    apiVersion: flows.knative.dev/v1\n    kind: Sequence\n    metadata:\n      name: sequence\n      namespace: sequence-demo\n    spec:\n      channelTemplate:\n        apiVersion: messaging.knative.dev/v1\n        kind: InMemoryChannel\n      steps:\n        - ref:\n            apiVersion: serving.knative.dev/v1\n            kind: Service\n            name: step1\n        - ref:\n            apiVersion: serving.knative.dev/v1\n            kind: Service\n            name: step2\n    EOF\n    ```", "```\n    $ cat <<EOF | kubectl apply -f -\n    apiVersion: eventing.knative.dev/v1\n    kind: Trigger\n    metadata:\n      name: sequence-trigger\n      namespace: sequence-demo\n    spec:\n      broker: default\n      filter:\n        attributes:\n          type: event.call.sequence\n      subscriber:\n        ref:\n          apiVersion: flows.knative.dev/v1\n          kind: Sequence\n          name: sequence\n    EOF\n    ```", "```\n    $ kubectl run -n sequence-demo curl -it --rm --image=curlimages/curl:7.81.0 /bin/sh\n    ```", "```\n    $ curl -v \"broker-ingress.knative-eventing.svc.cluster.local/sequence-demo/default\" \\\n    -X POST \\\n    -H \"Ce-Id: call-sequence-demo\" \\\n    -H \"Ce-specversion: 1.0\" \\\n    -H \"Ce-Type: event.call.sequence\" \\\n    -H \"Ce-Source: test-sequence\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\"SOME_VARIABLE\":\"Simple Sequence using Knative.\"}'\n    ```", "```\n*   Trying 10.43.130.39:80...\n* Connected to broker-ingress.knative-eventing.svc.cluster.local (10.43.130.39) port 80 (#0)\n> POST /sequence-demo/default HTTP/1.1\n> Host: broker-ingress.knative-eventing.svc.cluster.local\n> User-Agent: curl/7.81.0-DEV\n> Accept: */*\n> Ce-Id: call-sequence-demo\n> Ce-specversion: 1.0\n> Ce-Type: event.call.sequense\n> Ce-Source: test-sequence\n> Content-Type: application/json\n>\n* Mark bundle as not supporting multiuse\n< HTTP/1.1 202 Accepted\n< Allow: POST, OPTIONS\n< Date: Mon, 28 Feb 2022 01:00:50 GMT\n< Content-Length: 0\n<\n* Connection #0 to host broker-ingress.knative-eventing.svc.cluster.local left intact\n```", "```\n    $ kubectl logs deploy/step1-00001-deployment -n sequence-demo user-container\n    ```", "```\n[2022-02-28 01:06:54,364] WARNING in index: b'{\"SOME_VARIABLE\":\"Simple Sequence using Knative.\"}'\n[2022-02-28 01:06:54,365] WARNING in index: step1\n```", "```\n    $ kubectl logs deploy/step2-00001-deployment -n sequence-demo user-container\n    The output will look like:\n    [2022-02-28 01:07:02,623] WARNING in index: b'{\\n  \"ENV_VAR\": \"step1\"\\n}\\n'\n    [2022-02-28 01:07:02,624] WARNING in index: step2\n    ```"]
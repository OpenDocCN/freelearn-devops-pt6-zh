["```\napiVersion: v1 \nkind: Pod \nmetadata: \n  name: memory-pd \nspec: \n  containers: \n  - image: nginx:latest \n    ports: \n    - containerPort: 80 \n    name: memory-pd \n    volumeMounts: \n    - mountPath: /memory-pd \n      name: memory-volume \n  volumes: \n  - name: memory-volume \n    emptyDir: \n      medium: Memory \n```", "```\n$ kubectl create -f storage-memory.yaml\n$ kubectl exec memory-pd -- ls -lh | grep memory-pd\n```", "```\napiVersion: v1 \nkind: Pod \nmetadata: \n  name: test-gce \nspec: \n  containers: \n  - image: nginx:latest \n    ports: \n    - containerPort: 80 \n    name: test-gce \n    volumeMounts: \n    - mountPath: /usr/share/nginx/html \n      name: gce-pd \n  volumes: \n  - name: gce-pd \n    gcePersistentDisk: \n      pdName: mysite-volume-1 \n      fsType: ext4 \n```", "```\n$ kubectl create -f storage-gce.yaml \n$ kubectl describe pod/test-gce\n```", "```\n$ gcloud compute --project \"<Your project ID>\" ssh --zone \"<your gce zone>\" \"<Node running test-gce pod>\" \n```", "```\n$ sudo su -\n$ df -h | grep mysite-volume-1\n```", "```\n$ cd /var/lib/kubelet/plugins/kubernetes.io/gce-pd/mounts/mysite-volume-1\n$ vi index.html \n```", "```\n$ curl <Pod IP from Describe> \n```", "```\n$ kubectl delete pod/test-gce \n```", "```\napiVersion: v1 \nkind: ReplicationController \nmetadata: \n  name: http-pd \n  labels: \n    name: http-pd \nspec: \n  replicas: 3 \n  selector: \n    name: http-pd \n  template: \n    metadata: \n      name: http-pd \n      labels:\n        name: http-pd\n    spec: \n      containers: \n      - image: nginx:latest \n        ports: \n        - containerPort: 80 \n        name: http-pd \n        volumeMounts: \n        - mountPath: /usr/share/nginx/html \n          name: gce-pd \n      volumes: \n      - name: gce-pd \n        gcePersistentDisk: \n          pdName: mysite-volume-1 \n          fsType: ext4 \n          readOnly: true \n```", "```\napiVersion: v1 \nkind: Service \nmetadata: \n  name: http-pd \n  labels: \n    name: http-pd \nspec: \n  type: LoadBalancer \n  ports: \n  - name: http \n    protocol: TCP \n    port: 80 \n  selector: \n    name: http-pd \n```", "```\n$ kubectl describe service/http-pd\n```", "```\n$ aws ec2 create-volume --availability-zone=us-west-1a eu-west-1a --size=20 --volume-type=gp2\n```", "```\napiVersion: v1 \nkind: Pod \nmetadata: \n  name: test-aws \nspec: \n  containers: \n  - image: nginx:latest \n    ports: \n    - containerPort: 80 \n    name: test-aws \n    volumeMounts: \n    - mountPath: /usr/share/nginx/html \n      name: aws-pd \n  volumes: \n  - name: aws-pd \n    awsElasticBlockStore: \n      volumeID: aws://<availability-zone>/<volume-id> \n      fsType: ext4 \n```", "```\nkind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: demo-claim\nspec:\n  accessModes:\n  - ReadWriteOnce\n  volumeMode: Filesystem\n  resources:\n    requests:\n      storage: 1Gi\n  storageClassName: ssd\n  selector:\n    matchLabels:\n      release: \"aws-storage\"\n  matchExpressions:\n      - {key: environment, operator: In, values: [dev, stag, uat]}\n```", "```\nkind: StorageClass\napiVersion: storage.k8s.io/v1\nmetadata:\n name: Cinder-volume-01\nprovisioner: kubernetes.io/cinder\nparameters:\n resturl: \"http://192.168.10.10:8080\"\n restuser: \"\"\n secretNamespace: \"\"\n secretName: \"\"\nallowVolumeExpansion: true\n```", "```\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata: \n  name: durable-medium\nprovisioner: kubernetes.io/vsphere-volume\nparameters:\n  type: thin\n```", "```\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n name: webtier-vclaim-01\nspec:\n accessModes:\n   - ReadWriteMany\n storageClassName: durable-medium\n resources:\n   requests:\n     storage: 20Gi\n```", "```\n\"Name of Set\"-N\n```", "```\ndb-0\ndb-1\ndb-2\n```", "```\nkind: StorageClass\napiVersion: storage.k8s.io/v1\nmetadata:\n  name: solidstate\nprovisioner: kubernetes.io/gce-pd\nparameters:\n  type: pd-ssd\n  zone: us-central1-b\n```", "```\n$ kubectl create -f solidstate.yaml\n```", "```\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: whaleset\nspec:\n  serviceName: sayhey-svc\n  replicas: 3\n  template:\n    metadata:\n      labels:\n        app: sayhey\n    spec:\n      terminationGracePeriodSeconds: 10\n      containers:\n      - name: sayhey\n        image: jonbaier/httpwhalesay:0.2\n        command: [\"node\", \"index.js\", \"Whale it up!.\"]\n        ports:\n        - containerPort: 80\n          name: web\n        volumeMounts:\n        - name: www\n          mountPath: /usr/share/nginx/html\n  volumeClaimTemplates:\n  - metadata:\n      name: www\n      annotations:\n        volume.beta.kubernetes.io/storage-class: solidstate\n    spec:\n      accessModes: [ \"ReadWriteOnce\" ]\n      resources:\n        requests:\n          storage: 1Gi\n```", "```\n$ kubectl create -f sayhey-statefulset.yaml\n```", "```\n$ kubectl get statefulsets\n$ kubectl get pods\n```", "```\n$ kubectl get pv\n```", "```\n$ kubectl get pvc\n```", "```\napiVersion: v1\nkind: Service\nmetadata:\n  name: sayhey-svc\n  labels:\n    app: sayhey\nspec:\n  ports:\n  - port: 80\n    name: web\n  clusterIP: None\n  selector:\n    app: sayhey\n$ kubectl create -f sayhey-svc.yaml\n```", "```\n$ kubectl exec whaleset-0 -i -t bash\n```", "```\n$ curl sayhey-svc\n$ curl sayhey-svc.default.svc.cluster.local\n```", "```\n$ curl whaleset-1.sayhey-svc.default.svc.cluster.local\n```"]
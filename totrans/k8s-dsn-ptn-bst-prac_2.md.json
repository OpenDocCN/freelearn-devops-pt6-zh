["```\nkubectl get --raw /api/v1/namespaces/kube-system\n```", "```\nkubectl get --raw /api/v1/namespaces/kube-system | python -m json.tool\n\n```", "```\n{\n\"apiVersion\": \"v1\",\n\"kind\": \"Namespace\",\n\"metadata\": {\n    \"creationTimestamp\": \"2018-04-15T10:21:34Z\",\n    \"name\": \"kube-system\",\n    \"resourceVersion\": \"81\",\n    \"selfLink\": \"/api/v1/namespaces/kube-system\",\n    \"uid\": \"c5db1188-4096-11e8-903d-0800273b4d24\"\n},\n\n```", "```\nkubectl proxy --port=8080\n\n```", "```\ncurl http://localhost:8080/api/v1/namespaces/kube-system\n\n```", "```\n{\n\"apiVersion\":\"v1\",\n\"kind\":\"Namespace\",\n\"metadata\":{\n\"name\":\"packt-client\"\n}\n}\n```", "```\ncurl -X POST http://localhost:8080/api/v1/namespaces/ \\\n--header \"Content-Type: application/json\" \\\n--data \\\n'{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"name\":\"packt-client\"}}'\n\n```", "```\nkubectl delete namespace packt-client\n\n```", "```\nkubectl run curl --image=tutum/curl --rm -it\n\n```", "```\nls /var/run/secrets/kubernetes.io/serviceaccount/\n\n```", "```\nenv | grep KUBE \n```", "```\nAPISERVER=https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_SERVICE_PORT\nTOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)\nCACERT=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt\nNAMESPACE=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)\n```", "```\ncurl --header \"Authorization: Bearer $TOKEN\" --cacert\n$CACERT $APISERVER/api/v1/namespaces/kube-system \n```", "```\n// Create configuration outside the cluster config, err = clientcmd.BuildConfigFromFlags(\"\", kubeconfigPath)\n// Create configuration inside the cluster config, err = rest.InClusterConfig()\n```", "```\ntype Clientset struct {\n       ...\n       appsV1 *appsv1.AppsV1Client\n       ...\n       batchV1 *batchv1.BatchV1Client\n       coreV1 *corev1.CoreV1Client\n       eventsV1beta1 *eventsv1beta1.EventsV1beta1Client\n       networkingV1 *networkingv1.NetworkingV1Client\n\n       rbacV1 *rbacv1.RbacV1Client\n       storageV1beta1 *storagev1beta1.StorageV1beta1Client\n       storageV1 *storagev1.StorageV1Client\n }\n```", "```\n// Create clientset from configuration\n clientset, err := kubernetes.NewForConfig(config)\n\n```", "```\n// Request all pods from all namespaces\npods, err :=\nclientset.CoreV1().Pods(v1.NamespaceAll).List(metav1.ListOptions{})\n // Get deployment packt from the default namespace\ndeployments, err := clientset.AppsV1().Deployments(v1.NamespaceDefault).Get(\"packt\", metav1.GetOptions{})\n// Delete statefulset test from namespace packt\nclientset.AppsV1().StatefulSets(\"packt\").Delete(\"test\", &amp;metav1.DeleteOptions{})\n\n```", "```\ncd go\nmake build\n```", "```\n./client --kubeconfig=$HOME/.kube/config\n\n```", "```\nkubectl delete deployment go-client\n```", "```\n$ git clone --recursive https://github.com/kubernetes-client/\npython.git\n$ cd python\n$ python setup.py install\n```", "```\n$ pip install kubernetes\n```", "```\nfrom kubernetes import client, config\nimport time\nconfig.load_incluster_config()\nv1 = client.CoreV1Api()\nwhile True:\n         ret = v1.list_pod_for_all_namespaces(watch=False)\n         print('There are {:d} pods in the cluster:'.format(len(ret.items)))\n         for i in ret.items:\n                print('{:s}/{:s}'.format((i.metadata.namespace, i.metadata.name))\n         time.sleep(10)\n\n```", "```\nFROM python:3\nRUN pip install kubernetes\nADD . /client.py\nCMD [\"python\", \"./client.py\"]\n```", "```\nkubectl run python-client -it --image=onuryilmaz/k8sclient-example:python\n```", "```\n kubectl delete deployment python-client\n\n```"]
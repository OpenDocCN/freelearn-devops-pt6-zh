["```\n .\n├── app\n│   ├── index.css\n│   ├── index.html\n│   └── translate.py\n├── buildspec.yml\n├── ch2-files\n│   ├── index.css\n│   └── index.html\n├── cicd.tf\n├── dev.tfvars\n├── infrastructure.tf\n├── lambda\n│   ├── lambda.py\n│   └── lambda.zip\n└── variables.tf\n```", "```\n resource \"aws_s3_bucket\" \"english-bucket\" {\n  bucket = <st c=\"16266\">var.en_bucket_name</st> }\nresource \"aws_s3_bucket\" \"spanish-bucket\" {\n  bucket = <st c=\"16340\">var.es_bucket_name</st> }\n```", "```\n en_bucket_name = \"my-english-assets-bucket\"\nes_bucket_name = \"my-spanish-assets-bucket\"\n```", "```\n resource \"aws_cloudfront_distribution\" \"s3_distribution\" {\n  origin { domain_name              = aws_s3_bucket.english-bucket.bucket_regional_domain_name\n    origin_access_control_id = aws_cloudfront_origin_access_control.oac.id\n    origin_id                = local.s3_origin_id\n  }\n  enabled             = true\n  default_root_object = \"index.html\"\n  default_cache_behavior {\n    allowed_methods  = [\"DELETE\", \"GET\", \"HEAD\", \"OPTIONS\", \"PATCH\", \"POST\", \"PUT\"]\n    cached_methods   = [\"GET\", \"HEAD\"]\n    target_origin_id = local.s3_origin_id\n <st c=\"17271\">forwarded_values {</st>\n <st c=\"17289\">query_string = false</st>\n <st c=\"17310\">headers      = [\"Accept-Language\"]</st>\n <st c=\"17340\">cookies {</st>\n <st c=\"17350\">forward = \"none\"</st>\n <st c=\"17367\">}</st>\n <st c=\"17369\">}</st> lambda_function_association {\n      event_type = \"origin-request\"\n      lambda_arn = aws_lambda_function.terraform_lambda_func.qualified_arn\n    }\n    viewer_protocol_policy = \"allow-all\" <st c=\"17540\">min_ttl                = 0</st>\n <st c=\"17551\">default_ttl            = 1</st>\n <st c=\"17567\">max_ttl                = 1</st> } <st c=\"17582\">price_class = \"PriceClass_100\"</st> restrictions {\n    geo_restriction {\n      restriction_type = \"none\"\n    }\n  }\n  viewer_certificate {\n    cloudfront_default_certificate = true\n  }\n}\n```", "```\n import re\ndef handler(event, context):\n    request = event['Records'][0]['cf']['request']\n  viewerCountry = request['headers'].get('accept-language')\n    if viewerCountry:\n        countryCode = viewerCountry[0]['value'] <st c=\"20472\">if re.match(r'^es', countryCode):</st><st c=\"20505\">domainName = \"my-spanish-assets-bucket.s3.us-east-1.amazona</st><st c=\"20565\">ws.com</st><st c=\"20572\">\"</st> request['origin']['s3']['domainName'] = domainName\n            request['headers']['host'] = [{'key': 'host', 'value': domainName}]\n    return request\n```", "```\n resource \"aws_codepipeline\" \"codepipeline\" {\n  name     = \"tf-test-pipeline\"\n  role_arn = aws_iam_role.codepipeline_role.arn <st c=\"23005\">a</st><st c=\"23006\">rtifact_store</st> { location = aws_s3_bucket.codepipeline_bucket.bucket\n    type     = \"S3\"\n  }\n  stage { <st c=\"23096\">name = \"Source\"</st> action {\n      name             = \"Source\"\n      category         = \"Source\"\n      owner            = \"AWS\" <st c=\"23171\">provider         = \"CodeStarSourceConnection\"</st> version          = \"1\" <st c=\"23223\">output_artifacts = [\"source_output\"]</st> configuration = {\n        ConnectionArn    = aws_codestarconnections_connection.codestar_connection.arn <st c=\"23353\">FullRepositoryId = var.github_repository_url</st>\n <st c=\"23397\">BranchName       = \"main\"</st> }\n    }\n  }\n  stage { <st c=\"23432\">name = \"Build\"</st> action {\n      name             = \"Build\"\n      category         = \"Build\"\n      owner            = \"AWS\" <st c=\"23504\">provider         = \"CodeBuild\"</st><st c=\"23526\">input_artifacts  = [\"source_output\"]</st> output_artifacts = [\"build_output\"]\n      version          = \"1\"\n      configuration = { <st c=\"23631\">ProjectName = \"event-website\"</st> }\n    }\n  }\n}\n```", "```\n resource \"aws_codebuild_project\" \"translate\" {\n  name         = \"event-website\"\n  service_role = aws_iam_role.codebuild.arn\n  artifacts {\n    type = \"CODEPIPELINE\"\n  }\n  environment { <st c=\"24169\">compute_type = \"BUILD_LAMBDA_2GB\"</st> image        = \"aws/codebuild/amazonlinux-x86_64-lambda-standard:python3.12\"\n    type         = \"LINUX_LAMBDA_CONTAINER\"\n  }\n  source {\n    type      = \"CODEPIPELINE\" <st c=\"24339\">buildspec = file(\"buildspec.yml\")</st> }\n}\n```", "```\n version: 0.2\nphases:\n  build:commands:\n       - ls\n       - aws s3 sync . s3://my-english-assets-bucket\n       - aws s3 sync . s3://my-spanish-assets-bucket\n       - <st c=\"24797\">python translate.py en es index.html</st>\n <st c=\"24833\">- aws s3 cp es-index.html s3://my-spanish-assets-bucket/index.html</st>\n```", "```\n import boto3\nimport argparse\nparser = argparse.ArgumentParser() <st c=\"25774\">parser.add_argument(\"SourceLanguageCode\")</st>\n<st c=\"25815\">parser.add_argument(\"TargetLanguageCode\")</st>\n<st c=\"25857\">parser.add_argument(\"SourceFile\")</st> args = parser.parse_args()\ntranslate = boto3.client('translate')\nlocalFile = args.SourceFile\nfile = open(localFile, \"rb\")\ndata = file.read()\nfile.close() <st c=\"26047\">result = t</st><st c=\"26057\">ranslate.translate_document(</st>\n <st c=\"26086\">Document={</st>\n <st c=\"26097\">\"Content\": data,</st>\n <st c=\"26114\">\"ContentType\": \"text/html\"</st>\n <st c=\"26141\">},</st>\n <st c=\"26144\">SourceLanguageCode=args.SourceLanguageCode,</st>\n <st c=\"26188\">TargetLanguageCode=args.TargetLanguageCode</st>\n<st c=\"26231\">)</st> if \"TranslatedDocument\" in result:\n    fileName = localFile.split(\"/\")[-1]\n    tmpfile = f\"{args.TargetLanguageCode}-{fileName}\"\n    with open(tmpfile,  'w') as f:\n        f.write(result[\"TranslatedDocument\"][\"Content\"].decode('utf-8'))\n    print(\"Translated document \", tmpfile)\n```", "```\n terraform apply -var-file=\"dev.tfvars\"\n```", "```\n $ <st c=\"28501\">ls</st> index.css    index.html   translate.py\n$ <st c=\"28540\">git clone  https://github.com/IvoP1/chapter6-repo.git</st> Cloning into 'chapter6-repo'... warning: You appear to have cloned an empty repository. $ <st c=\"28683\">cp index.html index.css translate.py chapter6-repo/</st> $ <st c=\"28737\">cd chapter6-repo</st> $ chapter6-repo git:(main) ✗ <st c=\"28782\">ls</st> index.css    index.html   translate.py\n$ chapter6-repo git:(main) ✗ <st c=\"28849\">git add .</st> $ chapter6-repo git:(main) ✗ <st c=\"28889\">git commit -m \"1 version\"</st> $ chapter6-repo git:(main) <st c=\"28941\">git push</st> You are pushing to the remote origin at  https://github.com/IvoP1/chapter6-repo.git\nEnumerating objects: 5, done. Counting objects: 100% (5/5), done. Delta compression using up to 12 threads\nCompressing objects: 100% (5/5), done. Writing objects: 100% (5/5), 2.52 KiB | 2.52 MiB/s, done. Total 5 (delta 0), reused 0 (delta 0), pack-reused 0\nremote: Validating objects: 100%\nTo  https://github.com/IvoP1/chapter6-repo.git\n * [new branch]      main -> main\n  chapter6-repo git:(main)\n```"]
["```\n    % gcloud beta container --project \"istio-book-370122\" clusters create \"cluster1\" --zone \"australia-southeast1-a\" --no-enable-basic-auth --cluster-version \"1.23.12-gke.100\" --release-channel \"regular\" --machine-type \"e2-medium\" --image-type \"COS_CONTAINERD\" --disk-type \"pd-standard\" --disk-size \"30\" --num-nodes \"3\"\n    ```", "```\n    % gcloud beta container --project \"istio-book-370122\" clusters create \"cluster2\" --zone \"australia-southeast2-a\" --no-enable-basic-auth --cluster-version \"1.23.12-gke.100\" --release-channel \"regular\" --machine-type \"e2-medium\" --image-type \"COS_CONTAINERD\" --disk-type \"pd-standard\" --disk-size \"30\" --max-pods-per-node \"110\" --num-nodes \"3\"\n    ```", "```\n    % kubectl config view -o json | jq '.clusters[].name'\n    \"gke_istio-book-370122_australia-southeast1-a_primary-cluster\"\n    \"gke_istio-book-370122_australia-southeast2-a_primary2-cluster\"\n    \"minikube\"\n    ```", "```\nexport CTX_CLUSTER1=\"gke_istio-book-370122_australia-southeast1-a_primary-cluster\"\nexport CTX_CLUSTER2=\"gke_istio-book-370122_australia-southeast2-a_primary2-cluster\"\n```", "```\nopenssl@3 is keg-only, which means it was not symlinked into /opt/homebrew,\nbecause macOS provides LibreSSL.\n```", "```\n% export PATH=\"/opt/homebrew/opt/openssl@3/bin:$PATH\"\n% openssl version\nOpenSSL 3.0.7 1\n```", "```\n    % function join_by { local IFS=\"$1\"; shift; echo \"$*\"; }\n    ALL_CLUSTER_CIDRS=$(gcloud container clusters list –format='value(clusterIpv4Cidr)' | sort | uniq)\n    ALL_CLUSTER_CIDRS=$(join_by , $(echo \"${ALL_CLUSTER_CIDRS}\"))\n    ```", "```\n    % ALL_CLUSTER_NETTAGS=$(gcloud compute instances list –format='value(tags.items.[0])' | sort | uniq)\n    ALL_CLUSTER_NETTAGS=$(join_by , $(echo \"${ALL_CLUSTER_NETTAGS}\"))\n    ```", "```\n    % gcloud compute firewall-rules create primary-remote-shared-network \\\n      --allow=tcp,udp,icmp,esp,ah,sctp \\\n      --direction=INGRESS \\\n      --priority=900 \\\n      --source-ranges=\"${ALL_CLUSTER_CIDRS}\" \\\n      --target-tags=\"${ALL_CLUSTER_NETTAGS}\" –quiet\n    ```", "```\n        cluster1:\n\n        ```", "```\n        %gcloud container clusters delete cluster2 –zone \"australia-southeast2-a\"\n        ```", "```\n\n        ```", "```\n    % mkdir -p certs\n    % cd certs\n    % make -f ../tools/certs/Makefile.selfsigned.mk root-ca\n    generating root-key.pem\n    generating root-cert.csr\n    generating root-cert.pem\n    Certificate request self-signature ok\n    subject=O = Istio, CN = Root CA\n    ```", "```\n    % make -f ../tools/certs/Makefile.selfsigned.mk cluster1-cacerts\n    generating cluster1/ca-key.pem\n    generating cluster1/cluster-ca.csr\n    generating cluster1/ca-cert.pem\n    Certificate request self-signature ok\n    subject=O = Istio, CN = Intermediate CA, L = cluster1\n    generating cluster1/cert-chain.pem\n    Intermediate inputs stored in cluster1/\n    done\n    rm cluster1/cluster-ca.csr cluster1/intermediate.conf%\n    % ls cluster1\n    ca-cert.pem     ca-key.pem cert-chain.pem  root-cert.pem\n    ```", "```\n    % % make -f ../tools/certs/Makefile.selfsigned.mk cluster2-cacerts\n    generating cluster2/ca-key.pem\n    generating cluster2/cluster-ca.csr\n    generating cluster2/ca-cert.pem\n    Certificate request self-signature ok\n    subject=O = Istio, CN = Intermediate CA, L = cluster2\n    generating cluster2/cert-chain.pem\n    Intermediate inputs stored in cluster2/\n    done\n    rm cluster2/cluster-ca.csr cluster2/intermediate.conf\n    % ls cluster2\n    ca-cert.pem     ca-key.pem  cert-chain.pem  root-cert.pem\n    ```", "```\n     % export CTX_CLUSTER1=\" gke_istio-book-370122_australia-southeast1-a_primary-cluster\"\n    % export CTX_CLUSTER2=\" gke_istio-book-370122_australia-southeas1-b_remote-cluster\"\n    ```", "```\n    % kubectl create ns istio-system --context=\"${CTX_CLUSTER1}\"\n    namespace/istio-system created\n    % kubectl create ns istio-system --context=\"${CTX_CLUSTER2}\"\n    namespace/istio-system created\n    ```", "```\n    % kubectl create secret generic cacerts -n istio-system \\\n          --from-file=cluster1/ca-cert.pem \\\n          --from-file=cluster1/ca-key.pem \\\n          --from-file=cluster1/root-cert.pem \\\n          --from-file=cluster1/cert-chain.pem --context=\"${CTX_CLUSTER1}\"\n    secret/cacerts created\n    ```", "```\n    % kubectl create secret generic cacerts -n istio-system \\\n          --from-file=cluster2/ca-cert.pem \\\n          --from-file=cluster2/ca-key.pem \\\n          --from-file=cluster2/root-cert.pem \\\n          --from-file=cluster2/cert-chain.pem --context=\"${CTX_CLUSTER2}\"\n    secret/cacerts created\n    ```", "```\n    % kubectl --context=\"${CTX_CLUSTER1}\" label namespace istio-system topology.istio.io/network=network1\n    namespace/istio-system labeled\n    % kubectl --context=\"${CTX_CLUSTER2}\" label namespace istio-system topology.istio.io/network=network2\n    namespace/istio-system labeled\n    ```", "```\n    apiVersion: install.istio.io/v1alpha1\n    kind: IstioOperator\n    spec:\n      values:\n        global:\n          meshID: mesh1\n          multiCluster:\n            clusterName: cluster1\n          network: network1\n    ```", "```\n% istioctl install --set values.pilot.env.EXTERNAL_ISTIOD=true --context=\"${CTX_CLUSTER1}\" -f Chapter08/01-Cluster1.yaml\"\nThis will install the Istio 1.16.0 default profile with [\"Istio core\" \"Istiod\" \"Ingress gateways\"] components into the cluster. Proceed? (y/N) y\n Istio core installed\n Istiod installed\n Ingress gateways installed\n Installation complete\nMaking this installation the default for injection and validation.\n```", "```\n% samples/multicluster/gen-eastwest-gateway.sh \\\n    --mesh mesh1 --cluster cluster1 --network network1 | \\\n    istioctl --context=\"${CTX_CLUSTER1}\" install -y -f -\n Ingress gateways installed\n Installation complete\n```", "```\napiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: istiod-gateway\nspec:\n  selector:\n    istio: eastwestgateway\n  servers:\n    - port:\n        name: tls-istiod\n        number: 15012\n        protocol: tls\n      tls:\n        mode: PASSTHROUGH\n      hosts:\n        - \"*\"\n    - port:\n        name: tls-istiodwebhook\n        number: 15017\n        protocol: tls\n      tls:\n        mode: PASSTHROUGH\n      hosts:\n        - \"*\"\n```", "```\n  tls:\n  - match:\n    - port: 15012\n      sniHosts:\n      - \"*\"\n    route:\n    - destination:\n        host: istiod.istio-system.svc.cluster.local\n        port:\n          number: 15012\n  - match:\n    - port: 15017\n      sniHosts:\n      - \"*\"\n    route:\n    - destination:\n        host: istiod.istio-system.svc.cluster.local\n        port:\n          number: 443\n```", "```\n % kubectl apply --context=\"${CTX_CLUSTER1}\" -n istio-system -f \"samples/multicluster/expose-istiod.yaml\"\ngateway.networking.istio.io/istiod-gateway created\nvirtualservice.networking.istio.io/istiod-vs created\n```", "```\n    apiVersion: networking.istio.io/v1alpha3\n    kind: Gateway\n    metadata:\n      name: cross-network-gateway\n    spec:\n      selector:\n        istio: eastwestgateway\n      servers:\n        - port:\n            number: 15443\n            name: tls\n            protocol: TLS\n          tls:\n            mode: AUTO_PASSTHROUGH\n          hosts:\n            - \"*.local\"\n    ```", "```\n    % kubectl --context=\"${CTX_CLUSTER1}\" apply -n istio-system -f samples/multicluster/expose-services.yaml\n    gateway.networking.istio.io/cross-network-gateway created\n    ```", "```\napiVersion: install.istio.io/v1alpha1\nkind: IstioOperator\nspec:\n  profile: remote\n  values:\n    istiodRemote:\n      injectionPath: /inject/cluster/cluster2/net/network2\n    global:\n      remotePilotAddress: 35.189.54.43\n```", "```\n% kubectl --context=\"${CTX_CLUSTER2}\" annotate namespace istio-system topology.istio.io/controlPlaneClusters=cluster1\nnamespace/istio-system annotated\n```", "```\n% kubectl --context=\"${CTX_CLUSTER2}\" label namespace istio-system topology.istio.io/network=network2\nnamespace/istio-system labeled\n```", "```\nistioctl install --context=\"${CTX_CLUSTER2}\" -f \" Chapter08/01-Cluster2.yaml\"\nThis will install the Istio 1.16.0 remote profile with [\"Istiod remote\"] components into the cluster. Proceed? (y/N) y\n Istiod remote installed\n Installation complete\nMaking this installation the default for injection and validation.\n```", "```\n    % istioctl x create-remote-secret \\\n      --context=\"${CTX_CLUSTER2}\" \\\n      --name=cluster2 \\\n      --type=remote \\\n      --namespace=istio-system \\\n      --create-service-account=false | \\\n      kubectl apply -f - --context=\"${CTX__CLUSTER1}\"\n    secret/istio-remote-secret-cluster2 created\n    ```", "```\n% kubectl get mutatingwebhookconfiguration/istio-sidecar-injector --context=\"${CTX_CLUSTER2}\" -o json\n```", "```\n                \"caBundle\": \"..MWRNPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\",\n                \"url\": https://a5bcd3e72e1f04379a75247f8f718bb1-689248335.us-east-1.elb.amazonaws.com:15017/inject/cluster/cluster2/net/network2\n```", "```\n    % samples/multicluster/gen-eastwest-gateway.sh --mesh mesh1 --cluster \"${CTX_CLUSTER2}\" --network network2 > eastwest-gateway-1.yaml\n    % istioctl manifest generate -f eastwest-gateway-remote.yaml --set values.global.istioNamespace=istio-system | kubectl apply --context=\"${CTX_CLUSTER2}\" -f -\n    ```", "```\n    % kubectl apply -f manifests/charts/base/crds/crd-all.gen.yaml --context=\"${CTX_CLUSTER2}\"\n    ```", "```\n    % kubectl --context=\"${CTX_CLUSTER2}\" apply -n istio-system -f samples/multicluster/expose-services.yaml\n    ```", "```\n    % kubectl create ns chapter08 --context=\"${CTX_CLUSTER1}\"\n    % kubectl create ns chapter08 --context=\"${CTX_CLUSTER2}\"\n    % kubectl label namespace chapter08 istio-injection=enabled --context=\"${CTX_CLUSTER1}\"\n    % kubectl label namespace chapter08 istio-injection=enabled --context=\"${CTX_CLUSTER2}\"\n    ```", "```\n    % kubectl create configmap envoy-dummy --from-file=Chapter3/envoy-config-1.yaml -n chapter08 --context=\"${CTX_CLUSTER1}\"\n    % kubectl create configmap envoy-dummy --from-file=Chapter4/envoy-config-2.yaml -n chapter08 --context=\"${CTX_CLUSTER2}\"\n    ```", "```\n    % kubectl create -f \"Chapter08/01-envoy-proxy.yaml\" --namespace=chapter08 --context=\"${CTX_CLUSTER1}\"\n    % kubectl create -f \"Chapter08/02-envoy-proxy.yaml\" --namespace=chapter08 --context=\"${CTX_CLUSTER2}\"\n    ```", "```\n    % kubectl apply -f \"Chapter08/01-istio-gateway.yaml\" -n chapter08 --context=\"${CTX_CLUSTER2}\"\n    ```", "```\n    % kubectl get svc -n istio-system --context=\"${CTX_CLUSTER1}\"\n    NAME              TYPE              CLUSTER-IP    EXTERNAL-IP   PORT(S)     AGE\n    istio-eastwestgateway   LoadBalancer   10.0.7.123   35.189.54.43   15021:30141/TCP,15443:32354/TCP,15012:30902/TCP,15017:32082/TCP   22h\n    istio-ingressgateway   LoadBalancer   10.0.3.75   34.87.233.38   15021:30770/TCP,80:30984/TCP,443:31961/TCP                        22h\n    istiod  ClusterIP      10.0.6.149   <none>         15010/TCP,15012/TCP,443/TCP,15014/TCP                             22h\n    ```", "```\n    curl -Hhost:mockshop.com -s \"http://34.87.233.38\";echo \"\\\\n\"; done\n    V2----------Bootstrap Service Mesh Implementation with Istio----------V2\n    Bootstrap Service Mesh Implementation with Istio\n    Bootstrap Service Mesh Implementation with Istio\n    V2----------Bootstrap Service Mesh Implementation with Istio----------V2\n    Bootstrap Service Mesh Implementation with Istio\n    V2----------Bootstrap Service Mesh Implementation with Istio----------V2\n    V2----------Bootstrap Service Mesh Implementation with Istio----------V2\n    Bootstrap Service Mesh Implementation with Istio\n    V2----------Bootstrap Service Mesh Implementation with Istio----------V2\n    Bootstrap Service Mesh Implementation with Istio\n    ```", "```\n    $ istioctl uninstall --purge --context=\"${CTX_CLUSTER2}\"\n    All Istio resources will be pruned from the cluster\n    Proceed? (y/N) y\n     ..::istio-reader-clusterrole-istio-system.\n     Uninstall complete\n    % kubectl delete ns istio-system --context=\"${CTX_CLUSTER2}\"\n    namespace \"istio-system\" deleted\n    ```", "```\n    % function join_by { local IFS=\"$1\"; shift; echo \"$*\"; }\n    ALL_CLUSTER_CIDRS=$(gcloud container clusters list --format='value(clusterIpv4Cidr)' | sort | uniq)\n    ALL_CLUSTER_CIDRS=$(join_by , $(echo \"${ALL_CLUSTER_CIDRS}\"))\n    ```", "```\n% ALL_CLUSTER_NETTAGS=$(gcloud compute instances list --format='value(tags.items.[0])' | sort | uniq)\nALL_CLUSTER_NETTAGS=$(join_by , $(echo \"${ALL_CLUSTER_NETTAGS}\"))\n```", "```\n% gcloud compute firewall-rules create primary-remote-shared-network \\\n  --allow=tcp,udp,icmp,esp,ah,sctp \\\n  --direction=INGRESS \\\n  --priority=900 \\\n  --source-ranges=\"${ALL_CLUSTER_CIDRS}\" \\\n  --target-tags=\"${ALL_CLUSTER_NETTAGS}\" –quiet\nCreating firewall...⠹Created\nCreating firewall...done.\nNAME  NETWORK  DIRECTION  PRIORITY   ALLOW                     DENY  DISABLED\nprimary-remote-shared--network   default   INGRESS      900       tcp,udp,icmp,esp,ah,sctp        False\n```", "```\n    % kubectl --context=\"${CTX_CLUSTER2}\" annotate namespace istio-system topology.istio.io/controlPlaneClusters=cluster1\n    ```", "```\n    apiVersion: install.istio.io/v1alpha1\n    kind: IstioOperator\n    spec:\n      profile: remote\n      values:\n        istiodRemote:\n          injectionPath: /inject/cluster/cluster2/net/network1\n        global:\n          remotePilotAddress: 35.189.54.43\n    ```", "```\n% istioctl install --context=\"${CTX_CLUSTER2}\" -f  Chapter08/02-Cluster2.yaml -y\n✔ Istiod remote installed\n✔ Installation complete                                                                                                                                                      Making this installation the default for injection and validation.\nThank you for installing Istio 1.16\n```", "```\n    % istioctl x create-remote-secret --context=\"${CTX_CLUSTER2}\" --name=cluster2 |    kubectl apply -f - --context=\"${CTX_CLUSTER1}\"\n    secret/istio-remote-secret-cluster2 configured\n    ```", "```\n% for i in {1..10}; do curl -Hhost:mockshop.com -s \"http://34.129.4.32\";echo '\\n'; done\nBootstrap Service Mesh Implementation with Istio\nBootstrap Service Mesh Implementation with Istio\nV2----------Bootstrap Service Mesh Implementation with Istio----------V2\nBootstrap Service Mesh Implementation with Istio\nV2----------Bootstrap Service Mesh Implementation with Istio----------V2\nV2----------Bootstrap Service Mesh Implementation with Istio----------V2\nBootstrap Service Mesh Implementation with Istio\nBootstrap Service Mesh Implementation with Istio\nV2----------Bootstrap Service Mesh Implementation with Istio----------V2\nV2----------Bootstrap Service Mesh Implementation with Istio----------V2\n```", "```\n% gcloud container clusters delete remote-cluster --zone \"australia-southeast2\"\n% gcloud container clusters delete primary-cluster --zone \"australia-southeast1-a\"\n% gcloud firewall delete primary-remote-shared-network\n```", "```\n    % kubectl --context=\"${CTX_CLUSTER1}\" get namespace istio-system && kubectl --context=\"${CTX_CLUSTER1}\" label namespace istio-system topology.istio.io/network=network1\n    NAME           STATUS   AGE\n    istio-system   Active   3m38s\n    namespace/istio-system labelled\n    ```", "```\n    % kubectl --context=\"${CTX_CLUSTER2}\" get namespace istio-system && kubectl --context=\"${CTX_CLUSTER2}\" label namespace istio-system topology.istio.io/network=network2\n    NAME           STATUS   AGE\n    istio-system   Active   3m45s\n    namespace/istio-system labeled\n    ```", "```\n    % istioctl install --context=\"${CTX_CLUSTER1}\" -f \" Chapter08/01-Cluster1.yaml\" -n istio-system -y\n     Istio core installed\n     Istiod installed\n     Ingress gateways installed\n     Installation complete\n    ```", "```\n    % samples/multicluster/gen-eastwest-gateway.sh --mesh mesh1 --cluster cluster1 --network network1 | istioctl --context=\"${CTX_CLUSTER1}\" install -y -f -\n     Ingress gateways installed\n     Installation complete\n    ```", "```\n    % kubectl --context=\"${CTX_CLUSTER1}\" apply -n istio-system -f samples/multicluster/expose-services.yaml\n    gateway.networking.istio.io/cross-network-gateway created\n    ```", "```\n    apiVersion: install.istio.io/v1alpha1\n    kind: IstioOperator\n    spec:\n      values:\n        global:\n          meshID: mesh1\n          multiCluster:\n            clusterName: cluster2\n          network: network2\n    ```", "```\n% istioctl profile dump default\n```", "```\n% istioctl install --context=\"${CTX_CLUSTER2}\" -f \" Chapter08/03-Cluster3.yaml\" -y\n Istio core installed\n Istiod installed\n Ingress gateways installed\n Installation complete\n```", "```\n    % samples/multicluster/gen-eastwest-gateway.sh --mesh mesh1 --cluster cluster2 --network network2 | istioctl --context=\"${CTX_CLUSTER2}\" install -y -f -\n     Ingress gateways installed\n     Installation complete\n    % kubectl --context=\"${CTX_CLUSTER2}\" apply -n istio-system -f samples/multicluster/expose-services.yaml\n    gateway.networking.istio.io/cross-network-gateway created\n    ```", "```\n    % istioctl x create-remote-secret --context=\"${CTX_CLUSTER2}\" --name=cluster2 | kubectl apply -f - --context=\"${CTX_CLUSTER1}\"\n    secret/istio-remote-secret-cluster2 created\n    ```", "```\n    % istioctl x create-remote-secret --context=\"${CTX_CLUSTER1}\" --name=cluster1 | kubectl apply -f - --context=\"${CTX_CLUSTER2}\"\n    secret/istio-remote-secret-cluster1 configured\n    ```", "```\n% for i in {1..5}; do curl -Hhost:mockshop.com -s \"http://34.129.4.32\";echo '\\n'; done\nBootstrap Service Mesh Implementation with Istio\nV2----------Bootstrap Service Mesh Implementation with Istio----------V2\nBootstrap Service Mesh Implementation with Istio\nV2----------Bootstrap Service Mesh Implementation with Istio----------V2\nV2----------Bootstrap Service Mesh Implementation with Istio----------V2\n```", "```\n    % istioctl uninstall --purge --context=\"${CTX_CLUSTER2}\" -y\n      Uninstall complete\n    % istioctl uninstall --purge --context=\"${CTX_CLUSTER1}\" -y\n      Uninstall complete\n    ```", "```\n    % kubectl label namespace istio-system topology.istio.io/network- --context=\"${CTX_CLUSTER2}\"\n    namespace/istio-system unlabeled\n    ```", "```\n    % istioctl install --context=\"${CTX_CLUSTER1}\" -f  \"Chapter08/01-Cluster1.yaml\"\n    This will install the Istio 1.16.0 default profile with [\"Istio core\" \"Istiod\" \"Ingress gateways\"] components into the cluster. Proceed? (y/N) y\n    ✔ Istio core installed\n    ✔ Istiod installed\n    ✔ Ingress gateways installed\n    ✔ Installation complete                                                                                                                                                      Making this installation the default for injection and validation.\n    ```", "```\n    apiVersion: install.istio.io/v1alpha1\n    kind: IstioOperator\n    spec:\n      values:\n        global:\n          meshID: mesh1\n          multiCluster:\n            clusterName: cluster2\n          network: network1\n    ```", "```\n% istioctl install --context=\"${CTX_CLUSTER2}\" -f \"Chapter08/04-Cluster2.yaml\"\nThis will install the Istio 1.16.0 default profile with [\"Istio core\" \"Istiod\" \"Ingress gateways\"] components into the cluster. Proceed? (y/N) y\n✔ Istio core installed\n✔ Istiod installed\n✔ Ingress gateways installed\n✔ Installation complete\n```", "```\n    % istioctl x create-remote-secret --context=\"${CTX_CLUSTER2}\" --name=cluster2 | kubectl apply -f - --context=\"${CTX_CLUSTER1}\"\n    secret/istio-remote-secret-cluster2 created\n    ```", "```\n    % istioctl x create-remote-secret --context=\"${CTX_CLUSTER1}\" --name=cluster1 | kubectl apply -f - --context=\"${CTX_CLUSTER2}\"\n    secret/istio-remote-secret-cluster1 created\n    ```", "```\n% for i in {1..5}; do curl -Hhost:mockshop.com -s \"http://34.129.4.32\";echo '\\n'; done\nV2----------Bootstrap Service Mesh Implementation with Istio----------V2\nBootstrap Service Mesh Implementation with Istio\nV2----------Bootstrap Service Mesh Implementation with Istio----------V2\nBootstrap Service Mesh Implementation with Istio\nV2----------Bootstrap Service Mesh Implementation with Istio----------V2\n```", "```\n% gcloud container clusters delete primary1-cluster --zone \"australia-southeast2\"\n% gcloud container clusters delete primary2-cluster --zone \"australia-southeast1-a\"\n% gcloud firewall delete primary1-primary2-shared-network\n```"]
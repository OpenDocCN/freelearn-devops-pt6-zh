- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Communicating with Edge Devices across Long Distances Using LoRa
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用LoRa在长距离上与边缘设备通信
- en: '**Long Range** (**LoRa**) is a wireless protocol that you can use to receive
    and send data over long distances using low-powered devices. You can use these
    edge devices with solar panels or other sources of energy. Sometimes, your edge
    devices use batteries and are not connected to a common power source like we often
    find in our houses. When you are crafting edge systems, you could use edge devices
    using sensors that you have to configure. You could use prototype hardware platforms
    such as Arduino or devices such as ESP32 microcontrollers or a Raspberry Pi. These
    devices support LoRa modules to bring communication capabilities to your device,
    which is crucial for sending and receiving data from devices. In this chapter,
    we are going to explore how to take advantage of the LoRa wireless protocol to
    send or receive data from long distances. We will continue expanding the options
    for monitoring edge devices as in the previous chapter but now using the LoRa
    wireless protocol.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**长距离**（**LoRa**）是一种无线协议，您可以使用它通过低功耗设备在长距离上传输和接收数据。您可以将这些边缘设备与太阳能电池板或其他能源源一起使用。有时，您的边缘设备使用电池，并且没有像我们常在家中找到的那样连接到共同的电源。当您构建边缘系统时，您可以使用带有传感器的边缘设备，您需要配置这些传感器。您可以使用原型硬件平台，例如Arduino，或设备如ESP32微控制器或Raspberry
    Pi。这些设备支持LoRa模块，能够为您的设备提供通信功能，这对发送和接收设备之间的数据至关重要。在本章中，我们将探索如何利用LoRa无线协议从远距离发送或接收数据。我们将继续扩展上章中监控边缘设备的选项，但现在使用的是LoRa无线协议。'
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: LoRa wireless protocol and edge computing
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LoRa无线协议与边缘计算
- en: Deploying MySQL to store sensor data
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署MySQL以存储传感器数据
- en: Deploying a service to store sensor data in a MySQL database
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署服务以将传感器数据存储到MySQL数据库中
- en: Programming the ESP32 microcontroller to send sensor data
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编程ESP32微控制器以发送传感器数据
- en: Programming the ESP32 microcontroller to receive sensor data
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编程ESP32微控制器以接收传感器数据
- en: Visualizing data from ESP32 microcontrollers using MySQL and Grafana
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用MySQL和Grafana可视化ESP32微控制器的数据
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To deploy our databases in this chapter, you will need the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中部署我们的数据库，您将需要以下内容：
- en: A single or multi-node K3s cluster that can use ARM devices with MetalLB and
    Longhorn storage installed. This example will be tested using a Raspberry Pi 4B
    with 4 GB of RAM and using Ubuntu 20.04 or later for ARM 64-bit.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个单节点或多节点的K3s集群，可以使用已安装MetalLB和Longhorn存储的ARM设备。这个示例将在4 GB RAM的Raspberry Pi
    4B上测试，并使用Ubuntu 20.04或更高版本的ARM 64位系统。
- en: A Kubernetes cluster hosted in your public cloud provider (AWS, Azure, GCP)
    or your private cloud.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 托管在您的公共云提供商（AWS、Azure、GCP）或私有云中的Kubernetes集群。
- en: 2 ESP32 microcontrollers with the LoRa module installed. We are using the Heltec
    ESP32 + Lora v2 model; one to send and the other to receive data.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2个安装了LoRa模块的ESP32微控制器。我们使用的是Heltec ESP32 + Lora v2模型，一个用来发送数据，另一个用来接收数据。
- en: Arduino IDE installed on your Mac. You can use Windows since it’s pretty similar
    to configure, and it is also more stable when working with hardware.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Mac上安装Arduino IDE。您也可以使用Windows系统，因为它的配置与Mac类似，并且在与硬件配合使用时更稳定。
- en: A USB 2.0 A-Male to Micro B cable for programming your ESP32 devices.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一条USB 2.0 A型公头到Micro B型线，用于编程您的ESP32设备。
- en: A Keyes DHT11 sensor or similar connected to your edge device to read temperature
    and humidity.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个Keyes DHT11传感器或类似设备，连接到您的边缘设备以读取温度和湿度。
- en: '`kubectl` configured to be used in your local machine for your Kubernetes cloud
    cluster or your K3s cluster to avoid using the `--kubeconfig` parameter.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已配置`kubectl`以在您的本地机器上使用，用于您的Kubernetes云集群或K3s集群，从而避免使用`--kubeconfig`参数。
- en: Clone the GitHub repository at [https://github.com/PacktPublishing/Edge-Computing-Systems-with-Kubernetes/tree/main/ch12](https://github.com/PacktPublishing/Edge-Computing-Systems-with-Kubernetes/tree/main/ch12)
    if you want to run the YAML configurations using `kubectl apply` instead of copying
    the code from this book. Take a look at the `code` directory for Arduino source
    codes for Heltec devices and the `yaml` directory for YAML configurations. These
    are located inside the `ch12` directory.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您希望使用`kubectl apply`运行YAML配置文件，而不是从本书中复制代码，请克隆[https://github.com/PacktPublishing/Edge-Computing-Systems-with-Kubernetes/tree/main/ch12](https://github.com/PacktPublishing/Edge-Computing-Systems-with-Kubernetes/tree/main/ch12)中的GitHub仓库。查看`code`目录中Heltec设备的Arduino源代码和`yaml`目录中的YAML配置文件。这些文件位于`ch12`目录中。
- en: Now, let’s understand how our scenario of using LoRa devices, Prometheus, and
    Grafana is going to work.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: LoRa wireless protocol and edge computing
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'LoRa refers to a radio modulation technique for long distances, and together
    with LoRaWAN, it defines a network protocol that can be used to interconnect devices.
    LoRaWAN is also a network architecture that uses a start-of-start topology in
    which the gateway relays messages between edge devices. LoRa uses three popular
    frequencies: `433`, `868`, and `915`. `433` is sometimes used outdoors. `868`
    is used in Europe and `915` is used in America. LoRaWAN has gateway devices that
    can connect LoRa networks to the internet. LoRa is designed for low power, which
    is why LoRa is used for applications in IoT to interconnect devices across long
    distances.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: As we know, the goal of edge computing is to process data near the source. Therefore,
    LoRa allows us to implement edge computing and interconnect devices for long distances
    without using a lot of energy. Some use cases include agriculture, buildings,
    supply chain, logistics, geo localization applications, and more. Some common
    devices that support LoRa are Heltec ESP32 devices, which are designed for low
    power consumption. We are going to focus on configuring a Heltec ESP32 device
    with LoRa support in this chapter.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 'To start our use case implementation of using LoRa on the tiny edge to interact
    with a far edge Kubernetes cluster, let’s explore the following diagram:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.1 – Monitoring with ESP32 devices and LoRaWAN'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_12_01.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.1 – Monitoring with ESP32 devices and LoRaWAN
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: 'This diagram is divided into different layers. You can see how the data flows
    between the far edge, where LoRa communication is implemented, to the cloud layer.
    But first, let’s describe the different components of this use case that we want
    to implement:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '**Tiny edge**: In this layer, we are going to find the Heltec ESP32 devices,
    which you can classify as devices that send or receive data. This device sends
    data, reads data from the DHT11 sensor, and sends the information in JSON format
    using the LoRa protocol. The other devices read the information, send it across
    LoRa, and send it to the cluster on the far edge using a post request in a LAN.
    You can add as many devices to send data as you want.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Far edge**: Here, you can find a single or multi-node K3s cluster using ARM
    devices. This cluster provides the metrics service, which receives data in JSON
    format from the tiny edge. Once the data is received, the metrics service writes
    this data to the cloud layer in the MySQL deployment inside a Kubernetes cluster
    provisioned in the cloud provider. This could be Amazon, GCP, Azure, and so on.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Near edge**: This layer contains the local router that connects the local
    network to the internet. Keep in mind that the cluster in the far edge works as
    a gateway to send data from the LoRa network to the internet.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cloud layer**: Here, you can find the Kubernetes cluster, which contains
    MySQL and Grafana. MySQL stores data coming from your local sensors, while Grafana
    uses MySQL to create dashboards using your sensor data.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**云层**：在这里，您可以找到包含 MySQL 和 Grafana 的 Kubernetes 集群。MySQL 存储来自本地传感器的数据，而 Grafana
    使用 MySQL 来创建使用传感器数据的仪表板。'
- en: In summary, all your sensor data is coming from ESP32 devices, some equipped
    with sensors. These devices send and receive data using the LoRa protocol. When
    a receiver device receives information, it’s transformed into JSON format and
    then sent to a Kubernetes service located on the far edge. After this service
    receives this information, it’s forwarded to the cloud layer and stored in a MySQL
    database. MySQL is used by Grafana to show sensor data collected at the edge in
    real time. Now, let’s deploy our MySQL databases to store data.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，所有的传感器数据来自 ESP32 设备，其中一些设备配备了传感器。这些设备使用 LoRa 协议发送和接收数据。当接收设备收到信息时，它会将其转换为
    JSON 格式，然后发送到位于远程边缘的 Kubernetes 服务。此服务接收信息后，会将其转发到云层并存储在 MySQL 数据库中。MySQL 被 Grafana
    用来实时展示边缘收集的传感器数据。现在，让我们部署我们的 MySQL 数据库来存储数据。
- en: Deploying MySQL to store sensor data
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署 MySQL 以存储传感器数据
- en: 'Before you can store data from your devices using LoRa, you must deploy your
    database. For this, we are going to use MySQL. MySQL is a pretty popular database
    that you can use to store data from your sensor. The main advantage of using MySQL
    is that it is well documented, and you can find a lot of examples on the internet.
    For our deployment, we are going to use a `PersistentVolumeClaim` and the `mysql:8.0.28-oracle`
    image. Even if you decide to deploy your MySQL over the cloud or locally at the
    edge, you must use a `LoadBalancer` service so that you have an endpoint for the
    service that is going to store all sensor data. Our MySQL database will be deployed
    in the default namespace to simplify the implementation. To deploy our MySQL database,
    follow these steps:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 LoRa 从设备存储数据之前，必须部署数据库。为此，我们将使用 MySQL。MySQL 是一个非常流行的数据库，您可以用它来存储来自传感器的数据。使用
    MySQL 的主要优势在于它有良好的文档支持，您可以在互联网上找到许多示例。对于我们的部署，我们将使用 `PersistentVolumeClaim` 和
    `mysql:8.0.28-oracle` 镜像。即使您决定将 MySQL 部署到云端或本地边缘，也必须使用 `LoadBalancer` 服务，以便为存储所有传感器数据的服务提供端点。为了简化实现，我们的
    MySQL 数据库将在默认命名空间中部署。要部署我们的 MySQL 数据库，请按照以下步骤操作：
- en: 'Create a `PersistentVolumeClaim` with 5 GB of storage:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个具有 5 GB 存储空间的 `PersistentVolumeClaim`：
- en: '[PRE0]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Important Note
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Don’t forget to use ConfigMaps and Secrets for a more secure and advanced configuration.
    You can explore [*Chapter 10*](B16945_10_Final_PG.xhtml#_idTextAnchor198), *SQL
    and NoSQL Databases at the Edge*, for more details.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记使用 ConfigMaps 和 Secrets 进行更安全和高级的配置。您可以查看 [*第 10 章*](B16945_10_Final_PG.xhtml#_idTextAnchor198)，*边缘的
    SQL 和 NoSQL 数据库*，了解更多详细信息。
- en: 'Now, let’s deploy our MySQL database. Our deployment is going to use the previous
    `PersistentVolumeClaim`, called `db-pv-claim`, for this run:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们部署我们的 MySQL 数据库。我们的部署将使用之前的 `PersistentVolumeClaim`，即 `db-pv-claim`，进行此次运行：
- en: '[PRE1]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In this deployment, we are using some environment variables:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在此部署中，我们使用了一些环境变量：
- en: '`MYSQL_DATABASE`: Creates an initial database'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MYSQL_DATABASE`：创建一个初始数据库'
- en: '`MYSQL_USER`: Creates a super admin user for the database defined in `MYSQL_DATABASE`'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MYSQL_USER`：为在`MYSQL_DATABASE`中定义的数据库创建一个超级管理员用户。'
- en: '`MYSQL_PASSWORD`: Sets a password for the defined user in the `MYSQL_USER`
    variable'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MYSQL_PASSWORD`：为在 `MYSQL_USER` 变量中定义的用户设置密码。'
- en: '`MYSQL_ROOT_PASSWORD`: Sets a password for the root user'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MYSQL_ROOT_PASSWORD`：为 root 用户设置密码'
- en: Important Note
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: If you are using a multi-node cluster, use the `nodeSelector` option to prevent
    issues with the provisioned `PersistentVolumeClaim`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是多节点集群，请使用 `nodeSelector` 选项，以防止与已提供的 `PersistentVolumeClaim` 发生问题。
- en: 'Now, we need a `ClusterIP` service. This will be used inside Grafana to configure
    this MySQL database as a data source:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要一个 `ClusterIP` 服务。这将在 Grafana 中用作配置 MySQL 数据库的数据源：
- en: '[PRE2]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We also need a `LoadBalancer` service to expose MySQL. This service will be
    used to expose MySQL to the outside world. This could be over the internet or
    using an IP address inside your local network. Regardless, the provisioned load
    balancer IP address will be used inside your ESP32 devices. These ESP32 devices
    are going to send information to this endpoint, using our metrics service to finally
    store sensor data in MySQL. Let’s create this `LoadBalancer` service:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要一个 `LoadBalancer` 服务来暴露 MySQL。此服务将用于将 MySQL 暴露给外部世界。可以通过互联网或使用本地网络中的 IP
    地址进行暴露。无论哪种方式，配置的负载均衡器 IP 地址将用于 ESP32 设备中。这些 ESP32 设备将通过我们的指标服务向此端点发送信息，最终将传感器数据存储到
    MySQL 中。让我们创建这个 `LoadBalancer` 服务：
- en: '[PRE3]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now that MySQL is running, we have to create a table to store sensor data.
    To do so, follow these steps:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 MySQL 正在运行，我们需要创建一个表来存储传感器数据。为此，请按照以下步骤操作：
- en: 'Create a MySQL CLI client to run some commands to create the table where data
    will be stored:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 MySQL CLI 客户端，运行一些命令来创建存储数据的表格：
- en: '[PRE4]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Once you are inside, run the following command. This will ask you for a password.
    Use `lora123-` as your password:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 进入后，运行以下命令。系统会要求你输入密码。请使用 `lora123-` 作为密码：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The prompt will change to something similar to `mysql>`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 提示符将更改为类似`mysql>`的形式。
- en: 'Create the metric table and include the `device`, `temperature_c`, `temperature_f`,
    `humidity`, and `time` fields:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建指标表并包含 `device`、`temperature_c`、`temperature_f`、`humidity` 和 `time` 字段：
- en: '[PRE6]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: First, we must select the `sensor_data` database to create the table inside
    using the `use` command. Then, we must create the table metric using the `CREATE
    TABLE` command. We configure it so that each field has to have values. We use
    `DECIMAL(4,2)`, which means 4-2 = 2 integer numbers and 2 decimals. We store data
    using the format used by the `now()` MySQL function as `MONTH/DAY/YEAR HOUR:MINUTE:SECOND`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须使用 `use` 命令选择 `sensor_data` 数据库，然后使用 `CREATE TABLE` 命令创建表格 metric。我们配置每个字段都必须有值。我们使用
    `DECIMAL(4,2)`，这意味着 4-2 = 2 个整数位和 2 位小数。我们使用 `now()` MySQL 函数的格式来存储数据，格式为 `MONTH/DAY/YEAR
    HOUR:MINUTE:SECOND`。
- en: 'Here is a small explanation of what each field contains:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是对每个字段包含内容的简要说明：
- en: '`device`: This represents the number of the ESP32 Lora device that sends sensor
    data. This could be a number greater than 0.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`device`：表示发送传感器数据的 ESP32 Lora 设备编号。这个值应该是大于 0 的数字。'
- en: '`temperature_c`: This is the temperature measured in Celsius.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`temperature_c`：这是以摄氏度为单位测量的温度。'
- en: '`temperature_f`: This is the temperature measured in Fahrenheit.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`temperature_f`：这是以华氏度为单位测量的温度。'
- en: '`humidity`: Ambient humidity, measured as a percentage.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`humidity`：环境湿度，按百分比表示。'
- en: Exit the MySQL client using the `quit` command inside MySQL.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 MySQL 中的 `quit` 命令退出 MySQL 客户端。
- en: Exit the client using the `exit` command. After exiting, the pod will be deleted.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `exit` 命令退出客户端。退出后，Pod 将被删除。
- en: 'Get the MySQL IP address provisioned in the `LoadBalancer` service. To do so,
    run the following commands:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取在 `LoadBalancer` 服务中配置的 MySQL IP 地址。为此，请运行以下命令：
- en: '[PRE7]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `echo` command is going to show the IP address of your MySQL.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`echo` 命令将显示你的 MySQL IP 地址。'
- en: Now that our MySQL database has been deployed and is ready to be used, let’s
    deploy our metrics application on the far edge to store data in this MySQL database.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的 MySQL 数据库已经部署并准备好使用，接下来让我们在远端边缘部署我们的指标应用程序，以便将数据存储到这个 MySQL 数据库中。
- en: Deploying a service to store sensor data in a MySQL database
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署一个服务将传感器数据存储到 MySQL 数据库中。
- en: 'For this scenario, we need to deploy a service to store data in the previously
    deployed MySQL. We are going to call this `metrics`. The `metrics` service contains
    the following code:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此场景，我们需要部署一个服务将数据存储到先前部署的 MySQL 中。我们将其命名为 `metrics`。`metrics` 服务包含以下代码：
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This code has two endpoints:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码有两个端点：
- en: '`/`: This is only a test URL.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/`：这只是一个测试 URL。'
- en: '`/device`: This gets data from POST requests and writes it to MySQL by calling
    the `insert` function.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/device`：该端点从 POST 请求中获取数据，并通过调用 `insert` 函数将其写入 MySQL。'
- en: It also uses the `insert(data)` function to insert the data into the MySQL deployed
    in the cloud layer. This function takes the data coming from LoRaWAN and recalculates
    the temperature in Fahrenheit. Once stored, the data returns the process word.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 它还使用 `insert(data)` 函数将数据插入到部署在云层中的 MySQL 中。这个函数接收来自 LoRaWAN 的数据，并重新计算温度（华氏度）。一旦存储，数据将返回处理结果。
- en: 'This script also uses the following environment variables:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本还使用以下环境变量：
- en: '`HOST`: Defines the IP address where MySQL is listening'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HOST`：定义 MySQL 监听的 IP 地址。'
- en: '`MYSQL_USER`: The user to connect to the database'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MYSQL_USER`：用于连接数据库的用户名'
- en: '`MYSQL_PASSWORD`: The password used to connect to the database'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MYSQL_PASSWORD`：用于连接数据库的密码'
- en: '`MYSQL_DATABASE`: The database name where `metrics` is going to store data'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MYSQL_DATABASE`：`metrics` 将用于存储数据的数据库名称。'
- en: Our deployment in Kubernetes must have these variables set to work properly,
    without errors.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 Kubernetes 中的部署必须设置这些变量才能正常工作，否则会出现错误。
- en: Important Note
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: You can check the code on how to build a container based on this example at
    [https://github.com/sergioarmgpl/containers/tree/main/metric](https://github.com/sergioarmgpl/containers/tree/main/metric).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [https://github.com/sergioarmgpl/containers/tree/main/metric](https://github.com/sergioarmgpl/containers/tree/main/metric)
    查看如何基于此示例构建容器的代码。
- en: 'Now that we’ve looked at the code of the `metrics` service, let’s deploy `metrics`
    to start storing sensor data in this database. For this, follow these steps:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看过 `metrics` 服务的代码，让我们将 `metrics` 部署到设备上，开始将传感器数据存储到数据库中。为此，按照以下步骤操作：
- en: 'Deploy our `metrics` application so that it’s running:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署我们的 `metrics` 应用程序，使其处于运行状态：
- en: '[PRE9]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In this deployment, we are using the following values for the environment variables:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在此部署中，我们使用以下环境变量值：
- en: '`HOST`: This is the IP address of the `LoadBalancer` service that was created
    for our MySQL – that is, `192.168.0.240`. This will be the IP address that was
    returned in the last step of the previous section.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HOST`：这是为我们的 MySQL 创建的 `LoadBalancer` 服务的 IP 地址，也就是 `192.168.0.240`。这是上一步中返回的
    IP 地址。'
- en: '`MYSQL_USER`: The MySQL user. In this case, this is `lora_mysql`.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MYSQL_USER`：MySQL 用户名。在此情况下，用户名为 `lora_mysql`。'
- en: '`MYSQL_PASSWORD`: The password for `lora_mysql`. In this case, this is `lora123-`.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MYSQL_PASSWORD`：`lora_mysql` 的密码。在此情况下，密码为 `lora123-`。'
- en: '`MYSQL_DATABASE`: The name of the MySQL database where sensor data will be
    stored. In this case, this is `sensor_data`.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MYSQL_DATABASE`：用于存储传感器数据的 MySQL 数据库名称。在此情况下，名称为 `sensor_data`。'
- en: Important Note
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: You can customize all these values to fit your needs. Remember that you can
    use ConfigMaps or Secrets to secure your deployments. We are using hard-coded
    values just to simplify the implementation. Check out [*Chapter 10*](B16945_10_Final_PG.xhtml#_idTextAnchor198),
    *SQL and NoSQL Databases at the Edge*, for this kind of configuration.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以根据需要自定义所有这些值。记住，你可以使用 ConfigMaps 或 Secrets 来保护你的部署。我们仅为简化实现而使用硬编码值。关于此类配置，请查看
    [*第10章*](B16945_10_Final_PG.xhtml#_idTextAnchor198)，*边缘的 SQL 和 NoSQL 数据库*。
- en: 'Now, let’s create our `LoadBalancer` service for the `metrics` deployment.
    The provisioned IP address will be hard-coded inside the code of our ESP32 devices.
    To create the service, run the following code:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们为 `metrics` 部署创建 `LoadBalancer` 服务。已分配的 IP 地址将被硬编码到我们 ESP32 设备的代码中。创建服务时，运行以下代码：
- en: '[PRE10]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To obtain the provisioned IP address from the `metrics` service, run the following
    commands:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要获取 `metrics` 服务的已分配 IP 地址，运行以下命令：
- en: '[PRE11]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `echo` command will show the IP address of our `metrics` application. Take
    note of this value since it will be used to program our ESP32 devices. Let’s assume
    that this value is `192.168.0.241` for this scenario.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`echo` 命令将显示我们 `metrics` 应用程序的 IP 地址。记下这个值，因为它将在编程我们的 ESP32 设备时使用。假设此值为 `192.168.0.241`。'
- en: Now that we have deployed our `metrics` service on the far edge, let’s configure
    our ESP32 devices so that they can send and receive data.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将 `metrics` 服务部署到远端边缘，接下来让我们配置 ESP32 设备，以便它们能够发送和接收数据。
- en: Programming the ESP32 microcontroller to send sensor data
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编程 ESP32 微控制器以发送传感器数据
- en: ESP32 is a low-cost, low-power microcontroller chip and the successor of the
    ESP8266 microcontroller. In this chapter, we will be using the Heltec ESP32 +
    LoRa, which is an ESP32 microcontroller plus the capability to use the LoRa wireless
    protocol. This microcontroller can also send and receive data using the LoRa wireless
    protocol using the integrated SX1276 chip in this Heltec dashboard.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: ESP32 是一款低成本、低功耗的微控制器芯片，是 ESP8266 微控制器的继任者。在本章中，我们将使用 Heltec ESP32 + LoRa，它是一个
    ESP32 微控制器，带有使用 LoRa 无线协议的能力。此微控制器还可以使用集成的 SX1276 芯片通过 LoRa 无线协议发送和接收数据，能够在 Heltec
    仪表板上进行操作。
- en: 'Before configuring our device, we have to do the following:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置设备之前，我们需要做以下事情：
- en: Connect the DHT11 sensor to the Heltec ESP32 + LoRa device.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 DHT11 传感器连接到 Heltec ESP32 + LoRa 设备。
- en: Install the USB to UART bridge driver.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 USB 到 UART 桥接驱动程序。
- en: Install and configure Arduino IDE to program the Heltec ESP32 + LoRa device.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装并配置 Arduino IDE 来编程 Heltec ESP32 + LoRa 设备。
- en: Flash the Heltec ESP32 + Lora device.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 刷写Heltec ESP32 + LoRa设备。
- en: So, let’s get started by connecting a DHT11 sensor to our Heltec ESP32 + Lora
    device.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过将DHT11传感器连接到我们的Heltec ESP32 + LoRa设备开始。
- en: Configuring Heltec ESP32 + LoRa to read DHT11 sensor data
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置Heltec ESP32 + LoRa以读取DHT11传感器数据
- en: 'Heltec devices are often used for IoT, and ESP32 is a very popular device for
    IoT and LoRa implementations. You can find the official documentation for Heltec
    devices at [https://heltec-automation-docs.readthedocs.io/en/latest](https://heltec-automation-docs.readthedocs.io/en/latest).
    For our LoRa implementation, we are going to use the following diagram:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Heltec设备通常用于物联网，ESP32是物联网和LoRa实现中非常流行的设备。你可以在[https://heltec-automation-docs.readthedocs.io/en/latest](https://heltec-automation-docs.readthedocs.io/en/latest)找到Heltec设备的官方文档。对于我们的LoRa实现，我们将使用以下图示：
- en: '![Figure 12.2 – Heltec ESP32 reading data from the DHT11 schema'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '![图12.2 – Heltec ESP32读取DHT11数据的示意图'
- en: '](img/B16945_12_02.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_12_02.jpg)'
- en: Figure 12.2 – Heltec ESP32 reading data from the DHT11 schema
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.2 – Heltec ESP32读取DHT11数据的示意图
- en: 'To connect your Heltec ESP32 to your DHT11 sensor, follow these steps. This
    is the sender device:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 要将你的Heltec ESP32与DHT11传感器连接，请按照以下步骤操作。这是发送设备：
- en: Connect your LoRa antenna. This could affect the transmission range if the antenna
    is not connected.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接你的LoRa天线。如果天线未连接，这可能会影响传输范围。
- en: Connect your power source to the USB connection. You must use a USB 2.0 A-Male
    to Micro B cable.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将电源连接到USB接口。你必须使用USB 2.0 A型公头转Micro B型线缆。
- en: Connect your `PIN 17` with a wire to the `S` input in the DHT11 sensor.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的`PIN 17`通过导线连接到DHT11传感器的`S`输入端。
- en: Connect the GND (ground) to the `G` input in the DHT11 sensor.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将GND（地）连接到DHT11传感器的`G`输入端。
- en: Connect one of the 3V3 volt outputs to the `V` input in the DHT11 sensor.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其中一个3V3电压输出连接到DHT11传感器的`V`输入端。
- en: 'For your receiver device, just follow these steps:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 对于你的接收设备，只需按照以下步骤操作：
- en: Connect your LoRa antenna.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接你的LoRa天线。
- en: Connect your power source to the USB connection as your sender device.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将电源连接到USB接口，作为你的发送设备。
- en: Important Note
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Remember that you have to use a power source supply or a battery that gives
    you 3.5 or 5 volts. To learn more, check out [https://heltec-automation-docs.readthedocs.io/en/latest/esp32/index.html](https://heltec-automation-docs.readthedocs.io/en/latest/esp32/index.html).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，你需要使用一个能提供3.5或5伏电压的电源或电池。想了解更多信息，请查看[https://heltec-automation-docs.readthedocs.io/en/latest/esp32/index.html](https://heltec-automation-docs.readthedocs.io/en/latest/esp32/index.html)。
- en: With that, your sender and receiver devices are ready to upload some code. Now,
    let’s install all the software that we need to upload some code into our devices.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，你的发送和接收设备就可以准备好上传代码了。现在，让我们安装所有需要的软件下载代码到设备中。
- en: Installing the USB to UART bridge driver
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装USB到UART桥接驱动程序
- en: When installing the generic SiLabs CP210X driver that installs support for the
    USB to UART bridge, this driver is going to recognize your device on your computer.
    In this way, your Heltec device can connect to the computer and interact with
    Arduino IDE using serial communication.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 安装通用的SiLabs CP210X驱动程序时，该驱动程序将安装对USB到UART桥的支持，并识别你计算机上的设备。通过这种方式，你的Heltec设备可以连接到计算机，并使用串行通信与Arduino
    IDE进行交互。
- en: 'To install this driver, you can visit the following link for detailed instructions:
    [https://heltec-automation-docs.readthedocs.io/en/latest/general/establish_serial_connection.html](https://heltec-automation-docs.readthedocs.io/en/latest/general/establish_serial_connection.html).
    There, you can find the latest documentation to install the driver on Windows
    and Mac.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装此驱动程序，你可以访问以下链接以获取详细的安装说明：[https://heltec-automation-docs.readthedocs.io/en/latest/general/establish_serial_connection.html](https://heltec-automation-docs.readthedocs.io/en/latest/general/establish_serial_connection.html)。在该页面，你可以找到有关如何在Windows和Mac上安装驱动程序的最新文档。
- en: 'These instructions consist of downloading various drivers:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这些说明包括下载各种驱动程序：
- en: 'For Windows: [https://www.silabs.com/documents/public/software/CP210x_Windows_Drivers.zip](https://www.silabs.com/documents/public/software/CP210x_Windows_Drivers.zip)'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Windows：[https://www.silabs.com/documents/public/software/CP210x_Windows_Drivers.zip](https://www.silabs.com/documents/public/software/CP210x_Windows_Drivers.zip)
- en: 'For Mac: [https://www.silabs.com/documents/public/software/Mac_OSX_VCP_Driver.zip](https://www.silabs.com/documents/public/software/Mac_OSX_VCP_Driver.zip)'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Mac：[https://www.silabs.com/documents/public/software/Mac_OSX_VCP_Driver.zip](https://www.silabs.com/documents/public/software/Mac_OSX_VCP_Driver.zip)
- en: 'You must follow the wizard to install them, depending on your system. Once
    you have installed the driver, you can connect your device to your system and
    check if it was detected. For Mac, you can execute the following command:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You will see an output similar to the following:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This means that your device was detected. Some common problems may occur where
    your device can’t be recognized. This will be because of the cable that you are
    using; try to find a cable in an optimal condition for your computer to detect
    the device.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: 'For Windows, you will see that your device appears in the Hardware manager
    in the part of ports. Then, the device will appear like so:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: Silicon Labs CP210X USB to UART bridge (COM3)
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This means that your Heltec device was detected successfully.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: Now that your system recognizes the device, it’s time to install Arduino IDE
    to upload some code inside your Heltec device.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: Installing Arduino IDE
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Arduino IDE is a piece of software that you can use to upload code to your
    boards. In this case, we are using a board designed by Heltec, which is the one
    we called the Heltec device. To start using Arduino IDE, follow these steps:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: Download Arduino IDE by going to [https://www.arduino.cc/en/software](https://www.arduino.cc/en/software).
    This will depend on which operating system are you using. You can choose between
    Windows, Linux, or Mac. In this chapter, we are going to cover just Mac. We will
    use Arduino 1.8.19.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important Note
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: You can also follow the official page of Heltec, which explains how to install
    the Heltec driver and Arduino IDE for Windows and Mac. The quick start link is
    [https://heltec-automation-docs.readthedocs.io/en/latest/esp32/quick_start.html](https://heltec-automation-docs.readthedocs.io/en/latest/esp32/quick_start.html).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: Open Arduino IDE by clicking on its icon on your desktop or inside Launchpad
    on Mac.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click **File** | **Preferences** and paste [https://github.com/Heltec-Aaron-Lee/WiFi_Kit_series/releases/download/0.0.5/package_heltec_esp32_index.json](https://github.com/Heltec-Aaron-Lee/WiFi_Kit_series/releases/download/0.0.5/package_heltec_esp32_index.json)
    inside the **Additional Boards Manager URLs** field. Then, click **OK**. The new
    ESP32 board will be loaded in Arduino IDE:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.3 – Configuring Preferences to use the Heltec ESP32 device'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_12_03.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.3 – Configuring Preferences to use the Heltec ESP32 device
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, go to **Tools** | **Board** | **Boards Manager**:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.4 – The Boards Manager menu'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_12_04.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.4 – The Boards Manager menu
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: 'Search for `heltec` in the new pop-up dialog, then click **Install** to install
    it:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.5 – Searching for heltec on Boards Manager'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_12_05.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.5 – Searching for heltec on Boards Manager
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see something similar to the following:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.6 – Heltec board installed via Boards Manager'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_12_06.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.6 – Heltec board installed via Boards Manager
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, select the board by going to **Tools** | **Board** | **Heltec ESP32 Arduino**
    and select **WiFi LoRa 32(V2)**:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，通过进入**工具** | **板** | **Heltec ESP32 Arduino**并选择**WiFi LoRa 32(V2)**来选择开发板：
- en: '![Figure 12.7 – Setting WiFi LoRa 32(V2) as the default board'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '![图12.7 – 设置WiFi LoRa 32(V2)为默认开发板'
- en: '](img/B16945_12_07.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_12_07.jpg)'
- en: Figure 12.7 – Setting WiFi LoRa 32(V2) as the default board
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.7 – 设置WiFi LoRa 32(V2)为默认开发板
- en: Now, repeat this process by going to **Tools** | **Manage Libraries**, searching
    for the **DHT sensor** library from Adafruit, and choosing **Heltec ESP32 Dev-Boards**.
    Make sure you install it.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，通过进入**工具** | **管理库**，搜索Adafruit的**DHT传感器**库，并选择**Heltec ESP32 Dev-Boards**。确保安装它。
- en: With that, our Arduino IDE is ready to be used. Now, let’s learn about some
    configurations that you will need in case of errors.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们的Arduino IDE就准备好了。现在，让我们了解一些配置，以防出现错误。
- en: Troubleshooting Arduino IDE when using Heltec ESP32 + LoRa
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Heltec ESP32 + LoRa时的Arduino IDE故障排除
- en: macOS has some challenges, depending on your Mac version, but you can fix them.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: macOS可能会遇到一些挑战，这取决于你的Mac版本，但你可以解决这些问题。
- en: 'One is the esptool Python library. To fix it, follow these steps:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个问题是esptool Python库。为了解决它，按照以下步骤操作：
- en: 'Copy your current `esptool.py` file inside the `tools` folder. The command
    will look as follows:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将当前的`esptool.py`文件复制到`tools`文件夹中。命令将如下所示：
- en: '[PRE14]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Change the permissions for the `esptool.py` file:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改`esptool.py`文件的权限：
- en: '[PRE15]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Run the `esptool.py` file:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`esptool.py`文件：
- en: '[PRE16]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Sometimes, you have to install the serial library if the previous command returns
    an error. For this, you have several options. One is to install the library from
    scratch by going to [https://github.com/pyserial/pyserial/releases](https://github.com/pyserial/pyserial/releases).
    In this case, we are using version 3.4\. For this run, the following commands:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有时，如果上一个命令返回错误，你需要安装串行库。为此，你有几个选项。一个是从头开始安装库，方法是访问[https://github.com/pyserial/pyserial/releases](https://github.com/pyserial/pyserial/releases)。在这种情况下，我们使用的是3.4版本。为此运行以下命令：
- en: '[PRE17]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Then, try again if the `./esptool.py` command returns errors.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果`./esptool.py`命令返回错误，再次尝试。
- en: 'Depending on which Python version is installed on your computer, you can try
    this other alternative:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据你电脑上安装的Python版本，你可以尝试这个其他的解决方案：
- en: '[PRE18]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The last alternative is to use `easy_install` to install the pyserial library.
    To do so, run the following command:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后的一个解决方案是使用`easy_install`来安装pyserial库。为此，运行以下命令：
- en: '[PRE19]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Important Note
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'macOS Monterrey deletes Python 2.7 by default, so you have to install this
    Python version. You could stay with Python 3, but you have to open Arduino IDE
    with the `open /Applications/Arduino.app` command. You can find a more detailed
    way to fix these problems by watching the following video: [https://www.youtube.com/watch?v=zkyoghpT8_U](https://www.youtube.com/watch?v=zkyoghpT8_U).'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: macOS Monterrey默认删除Python 2.7，因此你必须安装该Python版本。你也可以使用Python 3，但你需要使用`open /Applications/Arduino.app`命令打开Arduino
    IDE。你可以通过观看以下视频，找到更详细的解决方案：[https://www.youtube.com/watch?v=zkyoghpT8_U](https://www.youtube.com/watch?v=zkyoghpT8_U)。
- en: 'Another problem to fix, depending on your Arduino version, is that Heltec installs
    its Wi-Fi library. So, when you try to compile and upload the program, sometimes,
    you will see some errors. To avoid these errors, you have two options:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个需要修复的问题是，Heltec安装了自己的Wi-Fi库，这取决于你的Arduino版本。因此，当你尝试编译和上传程序时，有时会看到一些错误。为避免这些错误，你有两个选项：
- en: Uninstall the default Arduino Wi-Fi library by going to **Tools** | **Manage
    libraries**. Then, find the Wi-Fi library from Arduino and uninstall it.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过进入**工具** | **管理库**卸载默认的Arduino Wi-Fi库。然后，找到Arduino的Wi-Fi库并将其卸载。
- en: 'Remove or rename the default Arduino Wi-Fi library folder by using the following
    commands:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令删除或重命名默认的Arduino Wi-Fi库文件夹：
- en: '[PRE20]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Important Note
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: On Windows, the installation is smooth, so you won’t have to fix this kind of
    issue.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，安装过程很顺利，因此你不需要修复这种问题。
- en: Now, it is time to upload some code to your devices using Arduino IDE.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候使用Arduino IDE将代码上传到设备上了。
- en: Uploading code to the ESP32 microcontroller to send sensor data
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 上传代码到ESP32微控制器以发送传感器数据
- en: 'Now, let’s upload our code to our Heltec devices. Let’s start with the sender
    device. This device is going to capture data from the DHT11 sensor and send it
    to the receiver device using the LoRa wireless protocol. Let’s create a new file
    by going to **File** | **New**. By default, you will see something similar to
    the following:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, replace it with the following code:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Let’s look at the preceding code in more detail:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: '`heltec.h`: We import the library to use the ESP32 + LoRa device. With this,
    you can use the Wi-Fi and LoRa wireless protocol.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DHT.h`: We import the library to read data from the DHT11 sensor.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BAND`: We set the band to use to connect the devices. For Europe, you have
    to use a value of `868E6`, while for America, you have to use `915E6`.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DHTPIN`: This is a constant value that we use to set the PIN that’s used to
    read data in our ESP32 device. In this case, we are using pin 17\. Keep in mind
    that the pin to use has to support digital information.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DHTTYPE`: This defines the type of sensor. The library that we are using supports
    the DHT11 and DHT12 sensors.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DEVICE`: This is the device number that is sending data. You must change this
    value every time you upload the code on a device, just to identify each device
    using a number.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DELAY`: This is the time to wait until sending the next sensor measure data.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setup()`: This function does an initial configuration for the Heltec device
    and sets the network ID for LoRa using `0xF3` – that is, the network ID for our
    devices. This value must be set between `0` and `0xFF`.'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sendTH()`: This function captures and sends the sensor data with the LoRa
    Wi-Fi protocol in the `{"t":26.2,"h":35.5,"d":1}` format, where `t` is the temperature
    in Celsius, `h` is the humidity in percentages, and `d` is the device number.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`loop()`: This function runs as a loop and calls `sendTH()` to capture and
    send sensor data using LoRa.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important Note
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: You can find the source code of the sender and receiver device at [https://github.com/PacktPublishing/Edge-Computing-Systems-with-Kubernetes/tree/main/ch12/code/arduino](https://github.com/PacktPublishing/Edge-Computing-Systems-with-Kubernetes/tree/main/ch12/code/arduino).
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: In summary, first, we set all the constant values to configure how to read data
    from the DHT11 sensor and send data using LoRa. Then, the setup is called to prepare
    reading data from the sensor and the initial configuration for LoRa. Finally,
    `loop()` runs as a loop that calls `sendTH()`, which sends and receives data.
    Once you have your device with this code, just turn it on to send data. To stop
    sending data, you must power off the device.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: 'Pay attention to the lines that contain the `Serial.println` command. This
    command prints information using the serial port. You can troubleshoot what is
    happening in your device using Arduino when your device is powered with your USB
    port from your laptop by opening `Serial.println` outputs inside the window:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.8 – Monitoring with Heltec ESP32 devices in Arduino'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_12_08.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.8 – Monitoring with Heltec ESP32 devices in Arduino
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: To connect your device to macOS, you need a USB A-to-USB C adaptor. If you need
    a power source with at least 5 volts, you can also use a battery bank instead
    of connecting the device to a laptop or a computer.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: Now that your Heltec sender device is working, you can start uploading the code
    for the receiver device.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: Programming the ESP32 microcontroller to receive sensor data
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we have to configure our Heltec ESP32 device to receive the sensor data
    and send it to the far edge cluster by doing a request across the wireless network.
    To start, we must create another file by clicking **File** | **New** and replacing
    the default content with the following code:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Let’s understand the code a little bit:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '`Heltec.h`, `WiFi.h`, `HTTPClient.h`: These are the libraries that we are using
    for the receiver. `Heltec.h` is used to send data with LoRa, `WiFi.h` is the Wi-Fi
    Heltec library to connect to the wireless network, and `HTTPClient.h` is used
    to send a request to our far edge server with the sensor data.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BAND`: Here, we set the same band that’s used in the sender device.'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`METRICS_IP`: This is the IP address of the `metrics` service in your cluster.
    To get this value, go to the *Deploying a service to store sensor data in a MySQL
    database* section. Replace this value before uploading the code to your device.'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setup()`: Here, we configure the Heltec device to receive data from the same
    LoRa network defined by `setSyncWord`. It also configures the Wi-Fi connection.'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`WIFISetUp(void)`: Here, we configure the Wi-Fi connection. To do so, you must
    replace `NET_NAME` with your network name and `PASSWORD` with the necessary password
    to access your connection.'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`callURL(String data)`: This calls the `metrics` service in your cluster. The
    URL to access it will be something like `http://METRICS_IP:3000/device`, but this
    function automatically generates this URL using the value of the `METRICS_IP`
    constant.'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onReceive(int packetSize)`: This receives information that’s been sent to
    the configured network using the LoRa protocol and then sends that information
    to the `metrics` service in the far edge cluster using an HTTP POST request.'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`loop()`: This function runs as a loop and calls `onReceive(int packetSize)`,
    which gets LoRa packets that contains sensor data. Then, it sends these to the
    `metrics` endpoint in the far edge cluster.'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To summarize, first, we configure the device so that we can connect to the same
    LoRa network. We must also configure the Wi-Fi, which has access to the far edge
    server. `loop()` constantly checks if it has received some data to send it to
    the `metrics` server in the far edge cluster.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: Now, upload the code to your device and turn it on, as we did in the *Programming
    the ESP32 microcontroller to send sensor data* section. With that, our devices
    have been configured, so let’s move to the last step and configure Grafana to
    show all our data in a dashboard, using the sensor data stored in MySQL.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing data from ESP32 microcontrollers using MySQL and Grafana
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let’s finish off our implementation of a real-time temperature and humidity
    system. For this, we are going to use Grafana to create our reports and MySQL
    as our source of data to feed the reports. You can deploy this software in Kubernetes
    in the cloud or a private cloud using a network that can be accessed by your edge
    clusters. In this section, we are assuming that we are using Kubernetes in the
    cloud. To start creating our reports, follow these steps:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the necessary namespace monitoring:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Create a ConfigMap to create a default data source that contains our MySQL
    connection:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This will be the default data source configured in your `grafana` deployment.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: You can use a `Secret` object to secure sensitive data, but we are using `ConfigMap`
    to simplify this example.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: 'Deploy Grafana so that it can use the previous ConfigMap by running the following
    code:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Let’s create the service to access Grafana:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Use `port-forward` to forward the previous Grafana service. This will help
    us connect to Grafana locally:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Go to `http://localhost:3000`. When the login page appears, use the username
    `admin` and password `admin` and click on the **Log in** button. After that, you
    will be you for new credentials:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.9 – Grafana login'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_12_09.jpg)'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.9 – Grafana login
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: 'After logging in, you can check that your default data source is set to MySQL
    by going to **Configuration** | **Data sources**:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.10 – Grafana configuration menu'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_12_10.jpg)'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.10 – Grafana configuration menu
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see something similar to the following:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.11 – sensor_data default data source'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_12_11.jpg)'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.11 – sensor_data default data source
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, click on **Create** | **Dashboard**:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.12 – Creating a dashboard ](img/B16945_12_12.jpg)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
- en: Figure 12.12 – Creating a dashboard
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, click **Add a new panel**:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.13 – Grafana – The Add panel page'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_12_13.jpg)'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.13 – Grafana – The Add panel page
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, configure the new dashboard with the following query and values:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'You must edit the default query by clicking on the pencil icon. Then, copy
    the previous query there:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.14 – Editing the default MySQL query'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_12_14.jpg)'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.14 – Editing the default MySQL query
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: 'We have set **Title** to **Device 1 Sensor Data** here. The new dashboard will
    look like this:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.15 – The New dashboard/Edit Panel window'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_12_15.jpg)'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.15 – The New dashboard/Edit Panel window
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: After changing the query if data is available, you will see a graph with three
    lines – one representing the temperature in Celsius, another representing the
    temperature in Fahrenheit, and the humidity as a percentage. Remember to set the
    dashboard to visualize the proper range of data – for example, to show data from
    the last 5 minutes – and refresh the dashboard every 5 seconds.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: After that, save your dashboard by clicking on the **Save** button.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important Note
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: Check out [*Chapter 11*](B16945_11_Final_PG.xhtml#_idTextAnchor213), *Monitoring
    the Edge with Prometheus and Grafana*, for more details about customizing your
    dashboard.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, your dashboard will look as follows:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.16 – ESP32 monitoring dashboard in Grafana'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_12_16.jpg)'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.16 – ESP32 monitoring dashboard in Grafana
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you are visualizing the data from your Heltec devices to send
    and receive data. This device interacts with your far edge cluster. If you chose
    to deploy Grafana and MySQL on the cloud, this scenario is also interacting with
    the cloud layer. All these components interact with each other to do their job.
    Remember that this is a simple implementation that you can extend to your own.
    Now, let’s summarize what we have learned in this chapter.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored how to implement an edge computing system by using
    LoRa devices to send and receive sensor data. Finally, we implemented a dashboard
    using MySQL and Grafana. In this way, the LoRa wireless protocol represents a
    way to implement lower-cost systems that need to transmit information close to
    the edge. Therefore, LoRa is a common choice as a transmission protocol for edge
    devices and IoT applications. In the next chapter, we are going to use a GPS module
    to extend the range of communication and databases to implement geolocation applications.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-292
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are a few questions to validate your new knowledge:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: What are the uses and advantages of using the LoRa wireless protocol?
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is LoRaWAN?
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can I use a Heltec ESP32 + LoRa device to send sensor data?
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can I use Arduino IDE to program ESP32 devices?
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can I create a simple gateway to send data coming from LoRaWAN to LAN?
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can I use MySQL and Grafana to create reports?
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-300
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Please refer to the following references for more information on the topics
    covered in this chapter:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: 'What is the LoRaWAN specification?: [https://lora-alliance.org/about-lorawan](https://lora-alliance.org/about-lorawan)'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'What is LoRa?: [https://www.semtech.com/lora/what-is-lora](https://www.semtech.com/lora/what-is-lora)'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'LoRa applications: [https://www.semtech.com/lora/lora-applications](https://www.semtech.com/lora/lora-applications)'
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'LoRaWAN Frequency Plans: [https://www.thethingsnetwork.org/docs/lorawan/frequency-plans](https://www.thethingsnetwork.org/docs/lorawan/frequency-plans).'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CP210x USB to UART Bridge VCP Drivers: [https://www.silabs.com/developers/usb-to-uart-bridge-vcp-drivers](https://www.silabs.com/developers/usb-to-uart-bridge-vcp-drivers)'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Arduino download software: [https://www.arduino.cc/en/software](https://www.arduino.cc/en/software)'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'HttpClient documentation and examples: [https://github.com/amcewen/HttpClient](https://github.com/amcewen/HttpClient)'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All fixes to run ESP32/Arduino on Arduino IDE and Platform I/O using MacOS
    Big Sur and Newer: [https://www.youtube.com/watch?v=zkyoghpT8_U](https://www.youtube.com/watch?v=zkyoghpT8_U)'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ESP32 + LoRa Heltec documentation: [https://heltec-automation-docs.readthedocs.io/en/latest/esp32/index.html](https://heltec-automation-docs.readthedocs.io/en/latest/esp32/index.html)'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Heltec Automation Docs Page: [https://heltec-automation-docs.readthedocs.io/en/latest](https://heltec-automation-docs.readthedocs.io/en/latest)'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Heltec ESP32 LoRaWAN library and examples: [https://github.com/HelTecAutomation/ESP32_LoRaWAN](https://github.com/HelTecAutomation/ESP32_LoRaWAN)'
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'WIFI LoRa 32(V2) Pinout Diagram: [http://resource.heltec.cn/download/WiFi_LoRa_32/WIFI_LoRa_32_V2.pdf](http://resource.heltec.cn/download/WiFi_LoRa_32/WIFI_LoRa_32_V2.pdf)'
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Provisioning Grafana: [https://github.com/grafana/grafana/blob/main/docs/sources/administration/provisioning/index.md](https://github.com/grafana/grafana/blob/main/docs/sources/administration/provisioning/index.md)'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL

- en: '12'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Communicating with Edge Devices across Long Distances Using LoRa
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Long Range** (**LoRa**) is a wireless protocol that you can use to receive
    and send data over long distances using low-powered devices. You can use these
    edge devices with solar panels or other sources of energy. Sometimes, your edge
    devices use batteries and are not connected to a common power source like we often
    find in our houses. When you are crafting edge systems, you could use edge devices
    using sensors that you have to configure. You could use prototype hardware platforms
    such as Arduino or devices such as ESP32 microcontrollers or a Raspberry Pi. These
    devices support LoRa modules to bring communication capabilities to your device,
    which is crucial for sending and receiving data from devices. In this chapter,
    we are going to explore how to take advantage of the LoRa wireless protocol to
    send or receive data from long distances. We will continue expanding the options
    for monitoring edge devices as in the previous chapter but now using the LoRa
    wireless protocol.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: LoRa wireless protocol and edge computing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying MySQL to store sensor data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying a service to store sensor data in a MySQL database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Programming the ESP32 microcontroller to send sensor data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Programming the ESP32 microcontroller to receive sensor data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualizing data from ESP32 microcontrollers using MySQL and Grafana
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To deploy our databases in this chapter, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A single or multi-node K3s cluster that can use ARM devices with MetalLB and
    Longhorn storage installed. This example will be tested using a Raspberry Pi 4B
    with 4 GB of RAM and using Ubuntu 20.04 or later for ARM 64-bit.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Kubernetes cluster hosted in your public cloud provider (AWS, Azure, GCP)
    or your private cloud.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2 ESP32 microcontrollers with the LoRa module installed. We are using the Heltec
    ESP32 + Lora v2 model; one to send and the other to receive data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arduino IDE installed on your Mac. You can use Windows since it’s pretty similar
    to configure, and it is also more stable when working with hardware.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A USB 2.0 A-Male to Micro B cable for programming your ESP32 devices.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Keyes DHT11 sensor or similar connected to your edge device to read temperature
    and humidity.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kubectl` configured to be used in your local machine for your Kubernetes cloud
    cluster or your K3s cluster to avoid using the `--kubeconfig` parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clone the GitHub repository at [https://github.com/PacktPublishing/Edge-Computing-Systems-with-Kubernetes/tree/main/ch12](https://github.com/PacktPublishing/Edge-Computing-Systems-with-Kubernetes/tree/main/ch12)
    if you want to run the YAML configurations using `kubectl apply` instead of copying
    the code from this book. Take a look at the `code` directory for Arduino source
    codes for Heltec devices and the `yaml` directory for YAML configurations. These
    are located inside the `ch12` directory.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let’s understand how our scenario of using LoRa devices, Prometheus, and
    Grafana is going to work.
  prefs: []
  type: TYPE_NORMAL
- en: LoRa wireless protocol and edge computing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'LoRa refers to a radio modulation technique for long distances, and together
    with LoRaWAN, it defines a network protocol that can be used to interconnect devices.
    LoRaWAN is also a network architecture that uses a start-of-start topology in
    which the gateway relays messages between edge devices. LoRa uses three popular
    frequencies: `433`, `868`, and `915`. `433` is sometimes used outdoors. `868`
    is used in Europe and `915` is used in America. LoRaWAN has gateway devices that
    can connect LoRa networks to the internet. LoRa is designed for low power, which
    is why LoRa is used for applications in IoT to interconnect devices across long
    distances.'
  prefs: []
  type: TYPE_NORMAL
- en: As we know, the goal of edge computing is to process data near the source. Therefore,
    LoRa allows us to implement edge computing and interconnect devices for long distances
    without using a lot of energy. Some use cases include agriculture, buildings,
    supply chain, logistics, geo localization applications, and more. Some common
    devices that support LoRa are Heltec ESP32 devices, which are designed for low
    power consumption. We are going to focus on configuring a Heltec ESP32 device
    with LoRa support in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start our use case implementation of using LoRa on the tiny edge to interact
    with a far edge Kubernetes cluster, let’s explore the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.1 – Monitoring with ESP32 devices and LoRaWAN'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_12_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.1 – Monitoring with ESP32 devices and LoRaWAN
  prefs: []
  type: TYPE_NORMAL
- en: 'This diagram is divided into different layers. You can see how the data flows
    between the far edge, where LoRa communication is implemented, to the cloud layer.
    But first, let’s describe the different components of this use case that we want
    to implement:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Tiny edge**: In this layer, we are going to find the Heltec ESP32 devices,
    which you can classify as devices that send or receive data. This device sends
    data, reads data from the DHT11 sensor, and sends the information in JSON format
    using the LoRa protocol. The other devices read the information, send it across
    LoRa, and send it to the cluster on the far edge using a post request in a LAN.
    You can add as many devices to send data as you want.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Far edge**: Here, you can find a single or multi-node K3s cluster using ARM
    devices. This cluster provides the metrics service, which receives data in JSON
    format from the tiny edge. Once the data is received, the metrics service writes
    this data to the cloud layer in the MySQL deployment inside a Kubernetes cluster
    provisioned in the cloud provider. This could be Amazon, GCP, Azure, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Near edge**: This layer contains the local router that connects the local
    network to the internet. Keep in mind that the cluster in the far edge works as
    a gateway to send data from the LoRa network to the internet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cloud layer**: Here, you can find the Kubernetes cluster, which contains
    MySQL and Grafana. MySQL stores data coming from your local sensors, while Grafana
    uses MySQL to create dashboards using your sensor data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In summary, all your sensor data is coming from ESP32 devices, some equipped
    with sensors. These devices send and receive data using the LoRa protocol. When
    a receiver device receives information, it’s transformed into JSON format and
    then sent to a Kubernetes service located on the far edge. After this service
    receives this information, it’s forwarded to the cloud layer and stored in a MySQL
    database. MySQL is used by Grafana to show sensor data collected at the edge in
    real time. Now, let’s deploy our MySQL databases to store data.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying MySQL to store sensor data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before you can store data from your devices using LoRa, you must deploy your
    database. For this, we are going to use MySQL. MySQL is a pretty popular database
    that you can use to store data from your sensor. The main advantage of using MySQL
    is that it is well documented, and you can find a lot of examples on the internet.
    For our deployment, we are going to use a `PersistentVolumeClaim` and the `mysql:8.0.28-oracle`
    image. Even if you decide to deploy your MySQL over the cloud or locally at the
    edge, you must use a `LoadBalancer` service so that you have an endpoint for the
    service that is going to store all sensor data. Our MySQL database will be deployed
    in the default namespace to simplify the implementation. To deploy our MySQL database,
    follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `PersistentVolumeClaim` with 5 GB of storage:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: Don’t forget to use ConfigMaps and Secrets for a more secure and advanced configuration.
    You can explore [*Chapter 10*](B16945_10_Final_PG.xhtml#_idTextAnchor198), *SQL
    and NoSQL Databases at the Edge*, for more details.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s deploy our MySQL database. Our deployment is going to use the previous
    `PersistentVolumeClaim`, called `db-pv-claim`, for this run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this deployment, we are using some environment variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '`MYSQL_DATABASE`: Creates an initial database'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MYSQL_USER`: Creates a super admin user for the database defined in `MYSQL_DATABASE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MYSQL_PASSWORD`: Sets a password for the defined user in the `MYSQL_USER`
    variable'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MYSQL_ROOT_PASSWORD`: Sets a password for the root user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: If you are using a multi-node cluster, use the `nodeSelector` option to prevent
    issues with the provisioned `PersistentVolumeClaim`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need a `ClusterIP` service. This will be used inside Grafana to configure
    this MySQL database as a data source:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We also need a `LoadBalancer` service to expose MySQL. This service will be
    used to expose MySQL to the outside world. This could be over the internet or
    using an IP address inside your local network. Regardless, the provisioned load
    balancer IP address will be used inside your ESP32 devices. These ESP32 devices
    are going to send information to this endpoint, using our metrics service to finally
    store sensor data in MySQL. Let’s create this `LoadBalancer` service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that MySQL is running, we have to create a table to store sensor data.
    To do so, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a MySQL CLI client to run some commands to create the table where data
    will be stored:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once you are inside, run the following command. This will ask you for a password.
    Use `lora123-` as your password:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The prompt will change to something similar to `mysql>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the metric table and include the `device`, `temperature_c`, `temperature_f`,
    `humidity`, and `time` fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: First, we must select the `sensor_data` database to create the table inside
    using the `use` command. Then, we must create the table metric using the `CREATE
    TABLE` command. We configure it so that each field has to have values. We use
    `DECIMAL(4,2)`, which means 4-2 = 2 integer numbers and 2 decimals. We store data
    using the format used by the `now()` MySQL function as `MONTH/DAY/YEAR HOUR:MINUTE:SECOND`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a small explanation of what each field contains:'
  prefs: []
  type: TYPE_NORMAL
- en: '`device`: This represents the number of the ESP32 Lora device that sends sensor
    data. This could be a number greater than 0.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`temperature_c`: This is the temperature measured in Celsius.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`temperature_f`: This is the temperature measured in Fahrenheit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`humidity`: Ambient humidity, measured as a percentage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exit the MySQL client using the `quit` command inside MySQL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exit the client using the `exit` command. After exiting, the pod will be deleted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Get the MySQL IP address provisioned in the `LoadBalancer` service. To do so,
    run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `echo` command is going to show the IP address of your MySQL.
  prefs: []
  type: TYPE_NORMAL
- en: Now that our MySQL database has been deployed and is ready to be used, let’s
    deploy our metrics application on the far edge to store data in this MySQL database.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying a service to store sensor data in a MySQL database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this scenario, we need to deploy a service to store data in the previously
    deployed MySQL. We are going to call this `metrics`. The `metrics` service contains
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This code has two endpoints:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/`: This is only a test URL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/device`: This gets data from POST requests and writes it to MySQL by calling
    the `insert` function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It also uses the `insert(data)` function to insert the data into the MySQL deployed
    in the cloud layer. This function takes the data coming from LoRaWAN and recalculates
    the temperature in Fahrenheit. Once stored, the data returns the process word.
  prefs: []
  type: TYPE_NORMAL
- en: 'This script also uses the following environment variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '`HOST`: Defines the IP address where MySQL is listening'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MYSQL_USER`: The user to connect to the database'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MYSQL_PASSWORD`: The password used to connect to the database'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MYSQL_DATABASE`: The database name where `metrics` is going to store data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Our deployment in Kubernetes must have these variables set to work properly,
    without errors.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: You can check the code on how to build a container based on this example at
    [https://github.com/sergioarmgpl/containers/tree/main/metric](https://github.com/sergioarmgpl/containers/tree/main/metric).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we’ve looked at the code of the `metrics` service, let’s deploy `metrics`
    to start storing sensor data in this database. For this, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Deploy our `metrics` application so that it’s running:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this deployment, we are using the following values for the environment variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '`HOST`: This is the IP address of the `LoadBalancer` service that was created
    for our MySQL – that is, `192.168.0.240`. This will be the IP address that was
    returned in the last step of the previous section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MYSQL_USER`: The MySQL user. In this case, this is `lora_mysql`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MYSQL_PASSWORD`: The password for `lora_mysql`. In this case, this is `lora123-`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MYSQL_DATABASE`: The name of the MySQL database where sensor data will be
    stored. In this case, this is `sensor_data`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: You can customize all these values to fit your needs. Remember that you can
    use ConfigMaps or Secrets to secure your deployments. We are using hard-coded
    values just to simplify the implementation. Check out [*Chapter 10*](B16945_10_Final_PG.xhtml#_idTextAnchor198),
    *SQL and NoSQL Databases at the Edge*, for this kind of configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s create our `LoadBalancer` service for the `metrics` deployment.
    The provisioned IP address will be hard-coded inside the code of our ESP32 devices.
    To create the service, run the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To obtain the provisioned IP address from the `metrics` service, run the following
    commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `echo` command will show the IP address of our `metrics` application. Take
    note of this value since it will be used to program our ESP32 devices. Let’s assume
    that this value is `192.168.0.241` for this scenario.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have deployed our `metrics` service on the far edge, let’s configure
    our ESP32 devices so that they can send and receive data.
  prefs: []
  type: TYPE_NORMAL
- en: Programming the ESP32 microcontroller to send sensor data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ESP32 is a low-cost, low-power microcontroller chip and the successor of the
    ESP8266 microcontroller. In this chapter, we will be using the Heltec ESP32 +
    LoRa, which is an ESP32 microcontroller plus the capability to use the LoRa wireless
    protocol. This microcontroller can also send and receive data using the LoRa wireless
    protocol using the integrated SX1276 chip in this Heltec dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before configuring our device, we have to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect the DHT11 sensor to the Heltec ESP32 + LoRa device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the USB to UART bridge driver.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install and configure Arduino IDE to program the Heltec ESP32 + LoRa device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Flash the Heltec ESP32 + Lora device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: So, let’s get started by connecting a DHT11 sensor to our Heltec ESP32 + Lora
    device.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Heltec ESP32 + LoRa to read DHT11 sensor data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Heltec devices are often used for IoT, and ESP32 is a very popular device for
    IoT and LoRa implementations. You can find the official documentation for Heltec
    devices at [https://heltec-automation-docs.readthedocs.io/en/latest](https://heltec-automation-docs.readthedocs.io/en/latest).
    For our LoRa implementation, we are going to use the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.2 – Heltec ESP32 reading data from the DHT11 schema'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_12_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.2 – Heltec ESP32 reading data from the DHT11 schema
  prefs: []
  type: TYPE_NORMAL
- en: 'To connect your Heltec ESP32 to your DHT11 sensor, follow these steps. This
    is the sender device:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect your LoRa antenna. This could affect the transmission range if the antenna
    is not connected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect your power source to the USB connection. You must use a USB 2.0 A-Male
    to Micro B cable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect your `PIN 17` with a wire to the `S` input in the DHT11 sensor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the GND (ground) to the `G` input in the DHT11 sensor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect one of the 3V3 volt outputs to the `V` input in the DHT11 sensor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For your receiver device, just follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect your LoRa antenna.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect your power source to the USB connection as your sender device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you have to use a power source supply or a battery that gives
    you 3.5 or 5 volts. To learn more, check out [https://heltec-automation-docs.readthedocs.io/en/latest/esp32/index.html](https://heltec-automation-docs.readthedocs.io/en/latest/esp32/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: With that, your sender and receiver devices are ready to upload some code. Now,
    let’s install all the software that we need to upload some code into our devices.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the USB to UART bridge driver
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When installing the generic SiLabs CP210X driver that installs support for the
    USB to UART bridge, this driver is going to recognize your device on your computer.
    In this way, your Heltec device can connect to the computer and interact with
    Arduino IDE using serial communication.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install this driver, you can visit the following link for detailed instructions:
    [https://heltec-automation-docs.readthedocs.io/en/latest/general/establish_serial_connection.html](https://heltec-automation-docs.readthedocs.io/en/latest/general/establish_serial_connection.html).
    There, you can find the latest documentation to install the driver on Windows
    and Mac.'
  prefs: []
  type: TYPE_NORMAL
- en: 'These instructions consist of downloading various drivers:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For Windows: [https://www.silabs.com/documents/public/software/CP210x_Windows_Drivers.zip](https://www.silabs.com/documents/public/software/CP210x_Windows_Drivers.zip)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For Mac: [https://www.silabs.com/documents/public/software/Mac_OSX_VCP_Driver.zip](https://www.silabs.com/documents/public/software/Mac_OSX_VCP_Driver.zip)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You must follow the wizard to install them, depending on your system. Once
    you have installed the driver, you can connect your device to your system and
    check if it was detected. For Mac, you can execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see an output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This means that your device was detected. Some common problems may occur where
    your device can’t be recognized. This will be because of the cable that you are
    using; try to find a cable in an optimal condition for your computer to detect
    the device.
  prefs: []
  type: TYPE_NORMAL
- en: 'For Windows, you will see that your device appears in the Hardware manager
    in the part of ports. Then, the device will appear like so:'
  prefs: []
  type: TYPE_NORMAL
- en: Silicon Labs CP210X USB to UART bridge (COM3)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This means that your Heltec device was detected successfully.
  prefs: []
  type: TYPE_NORMAL
- en: Now that your system recognizes the device, it’s time to install Arduino IDE
    to upload some code inside your Heltec device.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Arduino IDE
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Arduino IDE is a piece of software that you can use to upload code to your
    boards. In this case, we are using a board designed by Heltec, which is the one
    we called the Heltec device. To start using Arduino IDE, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download Arduino IDE by going to [https://www.arduino.cc/en/software](https://www.arduino.cc/en/software).
    This will depend on which operating system are you using. You can choose between
    Windows, Linux, or Mac. In this chapter, we are going to cover just Mac. We will
    use Arduino 1.8.19.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: You can also follow the official page of Heltec, which explains how to install
    the Heltec driver and Arduino IDE for Windows and Mac. The quick start link is
    [https://heltec-automation-docs.readthedocs.io/en/latest/esp32/quick_start.html](https://heltec-automation-docs.readthedocs.io/en/latest/esp32/quick_start.html).
  prefs: []
  type: TYPE_NORMAL
- en: Open Arduino IDE by clicking on its icon on your desktop or inside Launchpad
    on Mac.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click **File** | **Preferences** and paste [https://github.com/Heltec-Aaron-Lee/WiFi_Kit_series/releases/download/0.0.5/package_heltec_esp32_index.json](https://github.com/Heltec-Aaron-Lee/WiFi_Kit_series/releases/download/0.0.5/package_heltec_esp32_index.json)
    inside the **Additional Boards Manager URLs** field. Then, click **OK**. The new
    ESP32 board will be loaded in Arduino IDE:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.3 – Configuring Preferences to use the Heltec ESP32 device'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_12_03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.3 – Configuring Preferences to use the Heltec ESP32 device
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, go to **Tools** | **Board** | **Boards Manager**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.4 – The Boards Manager menu'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_12_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.4 – The Boards Manager menu
  prefs: []
  type: TYPE_NORMAL
- en: 'Search for `heltec` in the new pop-up dialog, then click **Install** to install
    it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.5 – Searching for heltec on Boards Manager'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_12_05.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.5 – Searching for heltec on Boards Manager
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see something similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.6 – Heltec board installed via Boards Manager'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_12_06.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.6 – Heltec board installed via Boards Manager
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, select the board by going to **Tools** | **Board** | **Heltec ESP32 Arduino**
    and select **WiFi LoRa 32(V2)**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.7 – Setting WiFi LoRa 32(V2) as the default board'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_12_07.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.7 – Setting WiFi LoRa 32(V2) as the default board
  prefs: []
  type: TYPE_NORMAL
- en: Now, repeat this process by going to **Tools** | **Manage Libraries**, searching
    for the **DHT sensor** library from Adafruit, and choosing **Heltec ESP32 Dev-Boards**.
    Make sure you install it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With that, our Arduino IDE is ready to be used. Now, let’s learn about some
    configurations that you will need in case of errors.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting Arduino IDE when using Heltec ESP32 + LoRa
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: macOS has some challenges, depending on your Mac version, but you can fix them.
  prefs: []
  type: TYPE_NORMAL
- en: 'One is the esptool Python library. To fix it, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy your current `esptool.py` file inside the `tools` folder. The command
    will look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the permissions for the `esptool.py` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the `esptool.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Sometimes, you have to install the serial library if the previous command returns
    an error. For this, you have several options. One is to install the library from
    scratch by going to [https://github.com/pyserial/pyserial/releases](https://github.com/pyserial/pyserial/releases).
    In this case, we are using version 3.4\. For this run, the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, try again if the `./esptool.py` command returns errors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Depending on which Python version is installed on your computer, you can try
    this other alternative:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The last alternative is to use `easy_install` to install the pyserial library.
    To do so, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: 'macOS Monterrey deletes Python 2.7 by default, so you have to install this
    Python version. You could stay with Python 3, but you have to open Arduino IDE
    with the `open /Applications/Arduino.app` command. You can find a more detailed
    way to fix these problems by watching the following video: [https://www.youtube.com/watch?v=zkyoghpT8_U](https://www.youtube.com/watch?v=zkyoghpT8_U).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Another problem to fix, depending on your Arduino version, is that Heltec installs
    its Wi-Fi library. So, when you try to compile and upload the program, sometimes,
    you will see some errors. To avoid these errors, you have two options:'
  prefs: []
  type: TYPE_NORMAL
- en: Uninstall the default Arduino Wi-Fi library by going to **Tools** | **Manage
    libraries**. Then, find the Wi-Fi library from Arduino and uninstall it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Remove or rename the default Arduino Wi-Fi library folder by using the following
    commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: On Windows, the installation is smooth, so you won’t have to fix this kind of
    issue.
  prefs: []
  type: TYPE_NORMAL
- en: Now, it is time to upload some code to your devices using Arduino IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading code to the ESP32 microcontroller to send sensor data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, let’s upload our code to our Heltec devices. Let’s start with the sender
    device. This device is going to capture data from the DHT11 sensor and send it
    to the receiver device using the LoRa wireless protocol. Let’s create a new file
    by going to **File** | **New**. By default, you will see something similar to
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, replace it with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s look at the preceding code in more detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '`heltec.h`: We import the library to use the ESP32 + LoRa device. With this,
    you can use the Wi-Fi and LoRa wireless protocol.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DHT.h`: We import the library to read data from the DHT11 sensor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BAND`: We set the band to use to connect the devices. For Europe, you have
    to use a value of `868E6`, while for America, you have to use `915E6`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DHTPIN`: This is a constant value that we use to set the PIN that’s used to
    read data in our ESP32 device. In this case, we are using pin 17\. Keep in mind
    that the pin to use has to support digital information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DHTTYPE`: This defines the type of sensor. The library that we are using supports
    the DHT11 and DHT12 sensors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DEVICE`: This is the device number that is sending data. You must change this
    value every time you upload the code on a device, just to identify each device
    using a number.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DELAY`: This is the time to wait until sending the next sensor measure data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setup()`: This function does an initial configuration for the Heltec device
    and sets the network ID for LoRa using `0xF3` – that is, the network ID for our
    devices. This value must be set between `0` and `0xFF`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sendTH()`: This function captures and sends the sensor data with the LoRa
    Wi-Fi protocol in the `{"t":26.2,"h":35.5,"d":1}` format, where `t` is the temperature
    in Celsius, `h` is the humidity in percentages, and `d` is the device number.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`loop()`: This function runs as a loop and calls `sendTH()` to capture and
    send sensor data using LoRa.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: You can find the source code of the sender and receiver device at [https://github.com/PacktPublishing/Edge-Computing-Systems-with-Kubernetes/tree/main/ch12/code/arduino](https://github.com/PacktPublishing/Edge-Computing-Systems-with-Kubernetes/tree/main/ch12/code/arduino).
  prefs: []
  type: TYPE_NORMAL
- en: In summary, first, we set all the constant values to configure how to read data
    from the DHT11 sensor and send data using LoRa. Then, the setup is called to prepare
    reading data from the sensor and the initial configuration for LoRa. Finally,
    `loop()` runs as a loop that calls `sendTH()`, which sends and receives data.
    Once you have your device with this code, just turn it on to send data. To stop
    sending data, you must power off the device.
  prefs: []
  type: TYPE_NORMAL
- en: 'Pay attention to the lines that contain the `Serial.println` command. This
    command prints information using the serial port. You can troubleshoot what is
    happening in your device using Arduino when your device is powered with your USB
    port from your laptop by opening `Serial.println` outputs inside the window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.8 – Monitoring with Heltec ESP32 devices in Arduino'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_12_08.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.8 – Monitoring with Heltec ESP32 devices in Arduino
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: To connect your device to macOS, you need a USB A-to-USB C adaptor. If you need
    a power source with at least 5 volts, you can also use a battery bank instead
    of connecting the device to a laptop or a computer.
  prefs: []
  type: TYPE_NORMAL
- en: Now that your Heltec sender device is working, you can start uploading the code
    for the receiver device.
  prefs: []
  type: TYPE_NORMAL
- en: Programming the ESP32 microcontroller to receive sensor data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we have to configure our Heltec ESP32 device to receive the sensor data
    and send it to the far edge cluster by doing a request across the wireless network.
    To start, we must create another file by clicking **File** | **New** and replacing
    the default content with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s understand the code a little bit:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Heltec.h`, `WiFi.h`, `HTTPClient.h`: These are the libraries that we are using
    for the receiver. `Heltec.h` is used to send data with LoRa, `WiFi.h` is the Wi-Fi
    Heltec library to connect to the wireless network, and `HTTPClient.h` is used
    to send a request to our far edge server with the sensor data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BAND`: Here, we set the same band that’s used in the sender device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`METRICS_IP`: This is the IP address of the `metrics` service in your cluster.
    To get this value, go to the *Deploying a service to store sensor data in a MySQL
    database* section. Replace this value before uploading the code to your device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setup()`: Here, we configure the Heltec device to receive data from the same
    LoRa network defined by `setSyncWord`. It also configures the Wi-Fi connection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`WIFISetUp(void)`: Here, we configure the Wi-Fi connection. To do so, you must
    replace `NET_NAME` with your network name and `PASSWORD` with the necessary password
    to access your connection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`callURL(String data)`: This calls the `metrics` service in your cluster. The
    URL to access it will be something like `http://METRICS_IP:3000/device`, but this
    function automatically generates this URL using the value of the `METRICS_IP`
    constant.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onReceive(int packetSize)`: This receives information that’s been sent to
    the configured network using the LoRa protocol and then sends that information
    to the `metrics` service in the far edge cluster using an HTTP POST request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`loop()`: This function runs as a loop and calls `onReceive(int packetSize)`,
    which gets LoRa packets that contains sensor data. Then, it sends these to the
    `metrics` endpoint in the far edge cluster.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To summarize, first, we configure the device so that we can connect to the same
    LoRa network. We must also configure the Wi-Fi, which has access to the far edge
    server. `loop()` constantly checks if it has received some data to send it to
    the `metrics` server in the far edge cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Now, upload the code to your device and turn it on, as we did in the *Programming
    the ESP32 microcontroller to send sensor data* section. With that, our devices
    have been configured, so let’s move to the last step and configure Grafana to
    show all our data in a dashboard, using the sensor data stored in MySQL.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing data from ESP32 microcontrollers using MySQL and Grafana
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let’s finish off our implementation of a real-time temperature and humidity
    system. For this, we are going to use Grafana to create our reports and MySQL
    as our source of data to feed the reports. You can deploy this software in Kubernetes
    in the cloud or a private cloud using a network that can be accessed by your edge
    clusters. In this section, we are assuming that we are using Kubernetes in the
    cloud. To start creating our reports, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the necessary namespace monitoring:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a ConfigMap to create a default data source that contains our MySQL
    connection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will be the default data source configured in your `grafana` deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: You can use a `Secret` object to secure sensitive data, but we are using `ConfigMap`
    to simplify this example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deploy Grafana so that it can use the previous ConfigMap by running the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s create the service to access Grafana:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use `port-forward` to forward the previous Grafana service. This will help
    us connect to Grafana locally:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go to `http://localhost:3000`. When the login page appears, use the username
    `admin` and password `admin` and click on the **Log in** button. After that, you
    will be you for new credentials:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.9 – Grafana login'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_12_09.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.9 – Grafana login
  prefs: []
  type: TYPE_NORMAL
- en: 'After logging in, you can check that your default data source is set to MySQL
    by going to **Configuration** | **Data sources**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.10 – Grafana configuration menu'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_12_10.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.10 – Grafana configuration menu
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see something similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.11 – sensor_data default data source'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_12_11.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.11 – sensor_data default data source
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, click on **Create** | **Dashboard**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.12 – Creating a dashboard ](img/B16945_12_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.12 – Creating a dashboard
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, click **Add a new panel**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.13 – Grafana – The Add panel page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_12_13.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.13 – Grafana – The Add panel page
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, configure the new dashboard with the following query and values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You must edit the default query by clicking on the pencil icon. Then, copy
    the previous query there:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.14 – Editing the default MySQL query'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_12_14.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.14 – Editing the default MySQL query
  prefs: []
  type: TYPE_NORMAL
- en: 'We have set **Title** to **Device 1 Sensor Data** here. The new dashboard will
    look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.15 – The New dashboard/Edit Panel window'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_12_15.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.15 – The New dashboard/Edit Panel window
  prefs: []
  type: TYPE_NORMAL
- en: After changing the query if data is available, you will see a graph with three
    lines – one representing the temperature in Celsius, another representing the
    temperature in Fahrenheit, and the humidity as a percentage. Remember to set the
    dashboard to visualize the proper range of data – for example, to show data from
    the last 5 minutes – and refresh the dashboard every 5 seconds.
  prefs: []
  type: TYPE_NORMAL
- en: After that, save your dashboard by clicking on the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: Check out [*Chapter 11*](B16945_11_Final_PG.xhtml#_idTextAnchor213), *Monitoring
    the Edge with Prometheus and Grafana*, for more details about customizing your
    dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, your dashboard will look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.16 – ESP32 monitoring dashboard in Grafana'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16945_12_16.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.16 – ESP32 monitoring dashboard in Grafana
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you are visualizing the data from your Heltec devices to send
    and receive data. This device interacts with your far edge cluster. If you chose
    to deploy Grafana and MySQL on the cloud, this scenario is also interacting with
    the cloud layer. All these components interact with each other to do their job.
    Remember that this is a simple implementation that you can extend to your own.
    Now, let’s summarize what we have learned in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored how to implement an edge computing system by using
    LoRa devices to send and receive sensor data. Finally, we implemented a dashboard
    using MySQL and Grafana. In this way, the LoRa wireless protocol represents a
    way to implement lower-cost systems that need to transmit information close to
    the edge. Therefore, LoRa is a common choice as a transmission protocol for edge
    devices and IoT applications. In the next chapter, we are going to use a GPS module
    to extend the range of communication and databases to implement geolocation applications.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are a few questions to validate your new knowledge:'
  prefs: []
  type: TYPE_NORMAL
- en: What are the uses and advantages of using the LoRa wireless protocol?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is LoRaWAN?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can I use a Heltec ESP32 + LoRa device to send sensor data?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can I use Arduino IDE to program ESP32 devices?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can I create a simple gateway to send data coming from LoRaWAN to LAN?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can I use MySQL and Grafana to create reports?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Please refer to the following references for more information on the topics
    covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'What is the LoRaWAN specification?: [https://lora-alliance.org/about-lorawan](https://lora-alliance.org/about-lorawan)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'What is LoRa?: [https://www.semtech.com/lora/what-is-lora](https://www.semtech.com/lora/what-is-lora)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'LoRa applications: [https://www.semtech.com/lora/lora-applications](https://www.semtech.com/lora/lora-applications)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'LoRaWAN Frequency Plans: [https://www.thethingsnetwork.org/docs/lorawan/frequency-plans](https://www.thethingsnetwork.org/docs/lorawan/frequency-plans).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CP210x USB to UART Bridge VCP Drivers: [https://www.silabs.com/developers/usb-to-uart-bridge-vcp-drivers](https://www.silabs.com/developers/usb-to-uart-bridge-vcp-drivers)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Arduino download software: [https://www.arduino.cc/en/software](https://www.arduino.cc/en/software)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'HttpClient documentation and examples: [https://github.com/amcewen/HttpClient](https://github.com/amcewen/HttpClient)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All fixes to run ESP32/Arduino on Arduino IDE and Platform I/O using MacOS
    Big Sur and Newer: [https://www.youtube.com/watch?v=zkyoghpT8_U](https://www.youtube.com/watch?v=zkyoghpT8_U)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ESP32 + LoRa Heltec documentation: [https://heltec-automation-docs.readthedocs.io/en/latest/esp32/index.html](https://heltec-automation-docs.readthedocs.io/en/latest/esp32/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Heltec Automation Docs Page: [https://heltec-automation-docs.readthedocs.io/en/latest](https://heltec-automation-docs.readthedocs.io/en/latest)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Heltec ESP32 LoRaWAN library and examples: [https://github.com/HelTecAutomation/ESP32_LoRaWAN](https://github.com/HelTecAutomation/ESP32_LoRaWAN)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'WIFI LoRa 32(V2) Pinout Diagram: [http://resource.heltec.cn/download/WiFi_LoRa_32/WIFI_LoRa_32_V2.pdf](http://resource.heltec.cn/download/WiFi_LoRa_32/WIFI_LoRa_32_V2.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Provisioning Grafana: [https://github.com/grafana/grafana/blob/main/docs/sources/administration/provisioning/index.md](https://github.com/grafana/grafana/blob/main/docs/sources/administration/provisioning/index.md)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL

- en: '15'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '15'
- en: Working with AWS Fargate
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 AWS Fargate
- en: Throughout this book, we have used **Elastic Compute Cloud** (**EC2**) instances
    as worker nodes for our **Elastic Kubernetes Service** (**EKS**) cluster, but
    **AWS Fargate** can be used as an alternative to host Pods. As we will see later
    on, Fargate can be used to provide a more secure operating environment for a Pod
    and can also be more cost-effective (but not always).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们使用 **弹性计算云**（**EC2**）实例作为我们的 **弹性 Kubernetes 服务**（**EKS**）集群的工作节点，但 **AWS
    Fargate** 可以作为替代方案来托管 Pods。正如我们稍后会看到的，Fargate 可以为 Pod 提供一个更安全的操作环境，并且通常也更加具有成本效益（但并非总是如此）。
- en: 'In some cases, you want to deploy a workload/application that runs infrequently,
    has a small memory/CPU footprint, and/or needs enhanced security, for example,
    creating a regular dump of a production database. Fargate can be used to meet
    all of these requirements. In this chapter, we will dive into more detail on how
    and when you should use AWS Fargate, as well as how it works with EKS to provide
    an alternative to EC2-based worker nodes. Specifically, we will cover the following
    topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，您可能需要部署一个工作负载/应用程序，该应用程序运行不频繁，内存/CPU 占用较小，并且/或者需要增强的安全性，例如定期创建生产数据库的转储。Fargate
    可以满足所有这些需求。在本章中，我们将详细探讨如何以及何时使用 AWS Fargate，以及它如何与 EKS 配合使用，提供 EC2 基础工作节点的替代方案。具体来说，我们将涵盖以下主题：
- en: What AWS Fargate is and how is it priced
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是 AWS Fargate，它的定价如何
- en: How to create a Fargate profile in EKS
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在 EKS 中创建 Fargate 配置文件
- en: How to deploy a Pod to a Fargate instance
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将 Pod 部署到 Fargate 实例
- en: How to troubleshoot common Fargate issues
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何排查常见的 Fargate 问题
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You should be familiar with YAML, AWS **Identity and Access Management** (**IAM**),
    and EKS architecture. Before getting started with this chapter, please ensure
    that the following is in place:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该熟悉 YAML、AWS **身份与访问管理**（**IAM**）和 EKS 架构。在开始本章之前，请确保以下内容已到位：
- en: Network connectivity to your EKS cluster API endpoint
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您与 EKS 集群 API 端点之间的网络连接
- en: The AWS `kubectl` binary are installed on your workstation
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的工作站已安装 AWS `kubectl` 二进制文件
- en: You have a basic understanding of AWS networking and EC2
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您对 AWS 网络和 EC2 有基本了解
- en: What is AWS Fargate?
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 AWS Fargate？
- en: 'AWS Fargate was developed as an alternative to EC2 to provide a *serverless*,
    container-native compute solution with three key design tenets:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Fargate 被开发为 EC2 的替代方案，提供一个 *无服务器*、容器原生的计算解决方案，具有三个关键设计原则：
- en: To be as secure as possible
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽可能安全
- en: To be reliable and scale to meet demand
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以便可靠并按需扩展
- en: To be cost-efficient
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成本效益
- en: 'If we compare the EC2-based EKS worker node and Fargate technical stacks, illustrated
    in *Figure 15**.1*, we can see that they are very similar. They run on physical
    servers, with both a virtual machine operating system and a container runtime
    that support a containerized application. The key difference is that Fargate is
    serverless, which means that you don’t need to care about the virtual machine
    operating system, container runtime, and so on, as this is all managed by AWS:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们比较基于 EC2 的 EKS 工作节点与 Fargate 技术栈（如 *图 15.1* 所示），我们会发现它们非常相似。它们运行在物理服务器上，都有虚拟机操作系统和容器运行时来支持容器化应用程序。关键的区别是
    Fargate 是无服务器的，这意味着您无需关心虚拟机操作系统、容器运行时等，因为这些都由 AWS 管理：
- en: '![Figure 15.1 – AWS Fargate versus EC2](img/Figure_15.1_B18838.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.1 – AWS Fargate 与 EC2](img/Figure_15.1_B18838.jpg)'
- en: Figure 15.1 – AWS Fargate versus EC2
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.1 – AWS Fargate 与 EC2
- en: The other main difference is that Fargate is really designed for small, bursty,
    or batch workloads, unlike EC2, which is traditionally used for more stable, long-running
    workloads. This means that the underlying physical compute fleet is optimized
    to maintain a high utilization/density, which in turn means it is operationally
    efficient and can therefore be much cheaper to use for the consumer.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个主要区别是，Fargate 确实是为小型、突发性或批处理工作负载设计的，不同于传统上用于更稳定、长时间运行工作负载的 EC2。这意味着底层物理计算机群已优化以保持高利用率/密度，这反过来意味着它在操作上更高效，因此对消费者来说，使用它的成本可以更低。
- en: 'The following workloads suit the use of Fargate over a more traditional EC2
    deployment:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下工作负载适合使用 Fargate 而不是更传统的 EC2 部署：
- en: If your production workload is small with the occasional burst, such as sporadic
    web traffic during the day but low to no traffic at night
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您的生产工作负载较小，偶尔会有突发情况，例如白天的零星网站流量，但晚上几乎没有流量
- en: If you have a small test/non-production environment that is used occasionally,
    then Fargate can be more efficient than an underutilized EC2 instance
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你有一个偶尔使用的小型测试/非生产环境，那么 Fargate 可能比一个未充分利用的 EC2 实例更高效。
- en: If your workload consists of a task that runs periodically, such as a batch
    or cron job
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你的工作负载由定期运行的任务组成，例如批处理或 cron 作业
- en: 'Another consideration is the use of **Firecracker**, which is a **Virtual Machine
    Manager** (**VMM**) developed by AWS and open source. Firecracker uses the concept
    of a **MicroVM** to create a small, secure, isolated environment to run containers
    that are very quick to create or destroy and provide fine-grained control over
    how **central processing unit** (**CPU**), **random access memory** (**RAM**),
    disk, and networking shares are allocated:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个需要考虑的因素是 **Firecracker**，这是一个由 AWS 开发并开源的 **虚拟机管理器** (**VMM**)。Firecracker
    使用 **MicroVM** 的概念来创建一个小型、安全、隔离的环境，用于运行容器，这些容器可以非常快速地创建或销毁，并提供对 **中央处理单元** (**CPU**)、**随机存取存储器**
    (**RAM**)、磁盘和网络共享资源分配的精细控制：
- en: '![Figure 15.2 – Fargate EKS architecture](img/Figure_15.2_B18838.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.2 – Fargate EKS 架构](img/Figure_15.2_B18838.jpg)'
- en: Figure 15.2 – Fargate EKS architecture
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.2 – Fargate EKS 架构
- en: Fargate uses EC2 Baremetal instances as its fleet and Firecracker to create
    and manage MicroVMs on these instances for multiple tenants (customers). Firecracker
    ensures that while a single Fargate EC2 host can support many MicroVMs from different
    AWS customers, they are all isolated through different **virtual machine** (**VM**)
    boundary controls.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Fargate 使用 EC2 Baremetal 实例作为其集群，并通过 Firecracker 在这些实例上为多个租户（客户）创建和管理 MicroVM。Firecracker
    确保，尽管单个 Fargate EC2 主机可以支持来自不同 AWS 客户的多个 MicroVM，但它们都通过不同的 **虚拟机** (**VM**) 边界控制进行隔离。
- en: A MicroVM will host a single Pod, and these Pods don’t share underlying kernels,
    CPU resources, memory resources, or **Elastic Network Interfaces** (**ENIs**)
    with another Pod. They are orchestrated through the Fargate EKS agent, which allows
    the K8s scheduler to schedule Pods on the Fargate fleet and connect it using the
    EKS AWS **virtual private cloud** (**VPC**) **Container Network Interface** (**CNI**)
    to private subnets (public subnets are not supported) in the customer’s VPC.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 MicroVM 将托管一个 Pod，这些 Pod 不会与其他 Pod 共享底层的内核、CPU 资源、内存资源或 **弹性网络接口** (**ENIs**)。它们通过
    Fargate EKS 代理进行编排，使得 K8s 调度器能够将 Pods 调度到 Fargate 集群，并通过 EKS AWS **虚拟私有云** (**VPC**)
    **容器网络接口** (**CNI**) 连接到客户 VPC 中的私有子网（不支持公共子网）。
- en: The K8s scheduler uses a **Fargate profile** to determine whether a Pod specification
    meets the requirements to be deployed onto the Fargate fleet. We will describe
    this process in more detail in the subsequent section.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: K8s 调度器使用 **Fargate 配置文件** 来确定一个 Pod 规格是否满足部署到 Fargate 集群的要求。我们将在后续部分更详细地描述这个过程。
- en: Now that we understand the general architecture, let’s look at how Fargate is
    priced.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了整体架构，让我们来看一下 Fargate 的定价方式。
- en: Understanding the Fargate pricing model
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Fargate 定价模型
- en: Fargate has a simple pricing model based on the duration for which you use the
    MicroVM/Pod (per-second granularity) and the vCPU/RAM and disk allocated to it.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Fargate 有一个简单的定价模型，基于你使用 MicroVM/Pod 的时长（按秒计费）以及分配给它的 vCPU/RAM 和磁盘。
- en: If we first look at a 2 CPU/4 GB EC2 instance with 30 GB of disk running 100%
    of the time, then based on on-demand pricing using the Frankfurt Region as an
    example, that would cost us approximately *$21/month*.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们首先查看一个 2 CPU/4 GB 内存、30 GB 磁盘的 EC2 实例，并且它 100% 的时间都在运行，那么基于按需定价，以法兰克福地区为例，成本大约为
    *$21/月*。
- en: If we use a Fargate Pod with 2 CPU/4 GB with 30 GB of disk running for 5 hours
    every day, based on on-demand pricing in the Frankfurt Region, that would cost
    us approximately *$10/month*.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用一个 2 CPU/4 GB 内存、30 GB 磁盘的 Fargate Pod，并且每天运行 5 小时，基于法兰克福地区的按需定价，成本大约为
    *$10/月*。
- en: At first glance, we can see that Fargate is less than half the price of an EC2
    instance! However, if we just double the duration of the Pod execution time from
    5 hours/day to 10 hours/day, then the cost goes up to $35/month, which is quite
    a bit more. Also, bear in mind that with the EC2 instance, we could run multiple
    Pods on an instance without incurring any additional costs, whereas with Fargate,
    every Pod would be an additional $10 or $35 (assuming they are configured the
    same and run for the same amount of time).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一开始我们可以看到，Fargate 的价格不到 EC2 实例的一半！然而，如果我们将 Pod 执行时间从每天 5 小时增加到 10 小时，那么成本将增加到每月
    $35，这就比之前贵了不少。此外，请记住，使用 EC2 实例时，我们可以在同一个实例上运行多个 Pods，而不会产生额外费用；而使用 Fargate 时，每个
    Pod 将额外收费 $10 或 $35（假设它们配置相同并运行相同的时间）。
- en: What you can see from this example is that while the Fargate pricing model is
    easy to understand, from a pure cost perspective, using Fargate for long-running
    workloads is not very effective, but for bursty, short-lived workloads, it will
    be cost-efficient. However, if you factor in the total cost of managing and operating
    EC2 instances, as opposed to the fact that AWS will manage and patch your Fargate
    ones, you may be able to build a business case around Fargate.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个例子中你可以看出，虽然 Fargate 的定价模型易于理解，但从纯粹的成本角度来看，使用 Fargate 处理长时间运行的工作负载并不是很有效，但对于突发性、短期的工作负载，它将具有成本效益。然而，如果你考虑到管理和运营
    EC2 实例的总成本，而不是 AWS 会管理和修补你的 Fargate 实例，你可能能够围绕 Fargate 建立一个商业案例。
- en: You should also bear in mind that most EC2 instances are not 100% utilized;
    in many cases, they barely touch 30% utilization. So, if you have an existing
    large EC2 estate (of more than 100 instances), Fargate may save you a lot of money
    as you can reduce the impact of higher Fargate costs with a reduction in costs
    in your EC2 estate. Now that we’ve looked at the Fargate pricing model, let’s
    consider how we can configure EKS to use Fargate.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要记住，大多数 EC2 实例并不是 100% 被利用的；在许多情况下，它们的利用率几乎只有 30%。因此，如果你已经拥有一个大型 EC2 实例群（超过
    100 个实例），Fargate 可能会为你节省大量费用，因为你可以通过减少 EC2 实例的成本来缓解 Fargate 较高费用的影响。现在我们已经了解了
    Fargate 的定价模型，接下来让我们考虑如何配置 EKS 来使用 Fargate。
- en: Creating an AWS Fargate profile in EKS
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 EKS 中创建 AWS Fargate 配置文件
- en: Understanding the AWS Fargate service is interesting, but we only covered it
    in this book to really give you some background. As Fargate is serverless, you
    really only need to understand how to get the Kubernetes scheduler to talk to
    the Fargate service and create the MicroVM, attach it to the network, and deploy
    the Pod. This is all done through the Fargate Profile, which will be discussed
    in detail in the following section.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 理解 AWS Fargate 服务很有趣，但我们在本书中只涵盖了它，主要是为了给你提供一些背景知识。由于 Fargate 是无服务器的，你实际上只需要了解如何让
    Kubernetes 调度器与 Fargate 服务通信，创建 MicroVM，连接到网络，并部署 Pod。这一切都是通过 Fargate 配置文件完成的，接下来的章节会详细讨论这个配置文件。
- en: Understanding how the AWS Fargate profile works
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 AWS Fargate 配置文件的工作原理
- en: 'When considering how to integrate the Fargate service with EKS, the AWS team
    made a conscious decision not to make users update their existing K8s manifests
    to support Fargate. Instead, the **profile** identifies which namespaces and/or
    labels will be used to host Pods on Fargate, and no changes are required in the
    Pod definition. The following diagram illustrates how this process works:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在考虑如何将 Fargate 服务与 EKS 集成时，AWS 团队做出了一个有意识的决定，即不要求用户更新现有的 K8s 清单以支持 Fargate。相反，**配置文件**确定了哪些命名空间和/或标签将用于在
    Fargate 上托管 Pods，并且在 Pod 定义中不需要进行任何更改。下图展示了这个过程是如何工作的：
- en: '![Figure 15.3 – Fargate profile workflow](img/Figure_15.3_B18838.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.3 – Fargate 配置文件工作流](img/Figure_15.3_B18838.jpg)'
- en: Figure 15.3 – Fargate profile workflow
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.3 – Fargate 配置文件工作流
- en: 'The steps shown in the previous diagram are detailed as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 上图所示的步骤详细如下：
- en: When a `Pod Create` API request is received by the API server (this could be
    an individual Pod spec, part of a deployment, or any other), it triggers an event
    that is captured by a custom webhook that is installed and managed by AWS in the
    EKS control plane.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当 API 服务器收到一个 `Pod Create` API 请求时（这可以是一个单独的 Pod 规范，部署的一部分，或其他任何内容），它会触发一个事件，这个事件会被
    AWS 在 EKS 控制平面中安装和管理的自定义 webhook 捕获。
- en: This webhook looks at the Fargate profile to determine whether the namespace
    or labels being used are serviced by the Fargate service. If it matches, it will
    change the scheduler name to use the **Fargate Scheduler** instead of the standard
    K8s scheduler.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个webhook查看Fargate配置文件，以确定正在使用的命名空间或标签是否由Fargate服务提供。如果匹配，它将更改调度器名称，使用**Fargate调度器**而不是标准的K8s调度器。
- en: The API server now writes the *intent* with the appropriate scheduler name to
    `etcd` to wait to be scheduled.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，API服务器将带有适当调度器名称的*意图*写入`etcd`，等待被调度。
- en: If the scheduler name has been changed to the Fargate scheduler, then it will
    eventually be picked up by that scheduler, which takes care of requesting the
    compute resources from the AWS Fargate fleet and orchestrating the creation of
    the MicroVM and attaching it to the customer VPC. The Fargate Scheduler is another
    component that is created and managed by AWS in the EKS control plane.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果调度器名称已经更改为Fargate调度器，那么它最终会被该调度器接管，调度器会负责从AWS Fargate集群请求计算资源，并协调创建MicroVM并将其附加到客户VPC上。Fargate调度器是AWS在EKS控制平面中创建和管理的另一个组件。
- en: As you can see, the Fargate profile controls how everything works. So now, let’s
    create one and see how it works.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，Fargate配置文件控制了所有的工作原理。那么现在，让我们创建一个并看看它是如何工作的。
- en: Creating and adjusting the Fargate profile
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建和调整Fargate配置文件
- en: 'The easiest way to create a Fargate profile is to use `eksctl`. Let’s first
    create a new namespace to host the workload using the following command:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 创建Fargate配置文件的最简单方法是使用`eksctl`。让我们首先使用以下命令创建一个新的命名空间来托管工作负载：
- en: '[PRE0]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We can then use `eksctl` to create (and verify) the Fargate profile and specify
    the new namespace as a target for Fargate (by default, you can have up to 10 profiles
    per cluster):'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用`eksctl`来创建（并验证）Fargate配置文件，并指定新的命名空间作为Fargate的目标（默认情况下，每个集群最多可以有10个配置文件）：
- en: '[PRE1]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now the profile is configured, let’s look at how we can use it.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在配置了配置文件，让我们看看如何使用它。
- en: Deploying a Pod to a Fargate instance
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Pod部署到Fargate实例
- en: You can see from the previous output `eksctl` has created not only the profile
    but also an execution role to allow Fargate Pods to use the AWS services and automatically
    assign the private subnets in the VPC.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 从之前的输出中可以看到，`eksctl`不仅创建了配置文件，还创建了一个执行角色，允许Fargate Pods使用AWS服务并自动分配VPC中的私有子网。
- en: 'If we now take one of the manifests previously used in this book and simply
    change the namespace to the `fargate-workload` namespace and deploy it, we will
    see the Pod is deployed on a Fargate instance rather than on EC2 workers:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在拿出本书中之前使用过的一个清单，并简单地将命名空间更改为`fargate-workload`命名空间并进行部署，我们会看到Pod被部署在Fargate实例上，而不是EC2工作节点上：
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If we look at the Pod that was deployed using the following commands, we can
    see it’s running on Fargate:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看使用以下命令部署的Pod，我们可以看到它运行在Fargate上：
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We can also verify in the Pod specification whether the scheduler has been
    set correctly and that the MicroVM is now registered as a node with our cluster
    using the following commands:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过以下命令验证Pod规范中调度器是否已正确设置，并且MicroVM是否已经作为节点注册到我们的集群中：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'While the Pod has been created, it is only accessible from inside the VPC (it
    will use the same security group as the EC2 base worker node) so we can add an
    NLB or ALB, as described in [*Chapter 14*](B18129_14.xhtml#_idTextAnchor205).
    A quick way to test connectivity to your Pod running on Fargate is to `curl` command,
    an example of which is as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Pod已经创建，但它只能从VPC内部访问（它将使用与EC2基础工作节点相同的安全组），因此我们可以添加一个NLB或ALB，如在[*第14章*](B18129_14.xhtml#_idTextAnchor205)中所述。测试连接到Fargate上运行的Pod的一种快速方法是使用`curl`命令，以下是一个示例：
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Fargate has a number of preconfigured vCPU and memory sizes; if you don’t specify
    a vCPU and memory combination, then the smallest available combination is used
    (0.25 vCPU and 0.5 GB memory). This can be validated using the `kubectl describe
    po` command, an example of which is as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Fargate有多个预配置的vCPU和内存大小；如果你没有指定vCPU和内存组合，那么将使用最小的可用组合（0.25 vCPU和0.5 GB内存）。可以使用`kubectl
    describe po`命令来验证这一点，以下是一个示例：
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If we adjust the Pod spec in our initial deployment and set some limits, it
    will then change the size of the Fargate instance. An example of a K8s manifest
    is shown in the following code snippet, which uses memory and CPU limits:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们调整初始部署中的Pod规格并设置一些限制，它将改变Fargate实例的大小。以下代码片段展示了一个使用内存和CPU限制的K8s清单示例：
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If we rerun the `describe` command after we update the deployment, we can see
    the provisioned capacity has increased:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在更新部署后重新运行 `describe` 命令，我们可以看到配置的容量已经增加：
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You can see that the limits and the Fargate annotation/size don’t exactly align!
    This is because there is 2 GiB set for memory in the manifest but 4 GB is assigned.
    This is because Fargate tries to match the manifest configuration to the set CPU/memory
    configurations that have been defined, and it will add some overhead (246 MB RAM)
    to support the required Kubernetes components (`kubelet`, `kube-proxy`, and `containerd`).
    Each Pod will also receive 20 GB of ephemeral storage that can be used to cache
    data, but this will be deleted when the Pod is deleted.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，限制和 Fargate 注解/大小并没有完全对齐！这是因为在清单中为内存设置了 2 GiB，但实际分配了 4 GB。这是因为 Fargate
    会尝试将清单配置与已定义的 CPU/内存配置匹配，并且会添加一些开销（246 MB 内存）以支持所需的 Kubernetes 组件（`kubelet`、`kube-proxy`
    和 `containerd`）。每个 Pod 还将获得 20 GB 的临时存储，可用于缓存数据，但当 Pod 被删除时，这些数据会被删除。
- en: 'It’s worth noting that if you run your Pod for an extended period of time,
    there is a possibility that AWS will patch your Pod, and this could lead to it
    being evicted and deleted. In order to mitigate this, you should use **Pod Disruption
    Budgets** (**PDBs**) to maintain a certain number of Pods and prevent eviction,
    as shown in the following code snippet:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，如果你长时间运行 Pod，AWS 可能会为你的 Pod 打补丁，这可能导致它被驱逐并删除。为了缓解这个问题，你应该使用 **Pod Disruption
    Budgets**（**PDBs**）来保持一定数量的 Pods 并防止驱逐，如下面的代码片段所示：
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Important note
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Depending on your K8s version, you may need to use the `apiVersion policy/v1beta1`
    beta policy.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的 K8s 版本，你可能需要使用 `apiVersion policy/v1beta1` 的 beta 策略。
- en: 'You can validate that the PDB is in place using the following command:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下命令验证 PDB 是否已设置：
- en: '[PRE10]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: While a PDB cannot guarantee your application resilience, it can go a certain
    way toward making sure operational issues don’t impact it. As AWS operates Fargate
    for you, most things happen seamlessly, but sometimes issues do occur. In the
    next section, let’s look at some common issues and how we can troubleshoot them.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 PDB 不能保证你的应用程序的弹性，但它可以在一定程度上确保操作问题不会影响它。由于 AWS 为你运营 Fargate，大多数事情都会无缝发生，但有时也会出现问题。在下一部分，我们将讨论一些常见问题以及如何排查它们。
- en: Troubleshooting common issues on Fargate
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Fargate 上排查常见问题
- en: The most common issue related to capacity is that occasionally, there will not
    be enough platform resources, and/or the CPU/RAM combination you want will not
    be supported. This results in the Pod status always being **PENDING**. If it is
    a platform issue, simply waiting and trying later (after 15/20 minutes) may resolve
    the issue; otherwise, adjust your Pod spec to support a different CPU/RAM combination.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 与容量相关的最常见问题是，有时平台资源不足，或者你想要的 CPU/RAM 配合不被支持。这会导致 Pod 状态始终为 **PENDING**。如果是平台问题，简单地等待并稍后重试（大约
    15/20 分钟后）可能会解决问题；否则，调整 Pod 规格以支持不同的 CPU/RAM 配合。
- en: 'If your Fargate nodes are shown as `Not Ready` when you run the `$ kubectl
    get nodes` command, ensure that the execution role they are using is also configured
    in the `aws-auth` ConfigMap, an example of which is shown as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在运行 `$ kubectl get nodes` 命令时看到你的 Fargate 节点显示为 `Not Ready`，请确保它们使用的执行角色也已在
    `aws-auth` ConfigMap 中配置，以下是一个示例：
- en: '[PRE11]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You may have issues with CoreDNS Pods staying in a PENDING state; this is normally
    due to the VPC DNS not being configured. The solution is to ensure you have `enableDNSHostnames`
    and `enableDNSSupport` set to `True` for your VPC.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会遇到 CoreDNS Pods 一直处于 PENDING 状态的问题；这通常是因为 VPC DNS 没有配置。解决方案是确保你的 VPC 中 `enableDNSHostnames`
    和 `enableDNSSupport` 设置为 `True`。
- en: 'If you have issues with the Fargate profile, make sure the target namespaces
    and labels are correctly configured in your cluster and Pod spec. There are some
    common processing rules that need to be considered:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在 Fargate 配置文件中遇到问题，确保目标命名空间和标签在你的集群和 Pod 规格中正确配置。需要考虑一些常见的处理规则：
- en: The Fargate Scheduler matches all conditions, so if namespaces and labels are
    used in the profile, then they must both be used in the manifest in order to be
    scheduled on a Fargate instance
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Fargate 调度程序会匹配所有条件，因此，如果在配置文件中使用了命名空间和标签，那么它们必须在清单中同时使用，才能在 Fargate 实例上调度。
- en: If multiple Fargate profiles exist and a Pod matches multiple profiles, it is
    scheduled using a random Fargate profile
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果存在多个 Fargate 配置文件且 Pod 匹配多个配置文件，则会使用随机的 Fargate 配置文件进行调度
- en: In this section, we have looked at what Fargate is, how it works and is configured,
    and how you can do some basic troubleshooting. We’ll now revisit the key learning
    points from this chapter.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们了解了 Fargate 的工作原理及其配置方式，并且掌握了一些基本的故障排除技巧。现在，我们将回顾本章的关键学习点。
- en: Summary
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we explored what Fargate is and how it works. You learned that
    Fargate is an AWS-managed service, so you really only need to focus on the Fargate
    profile and make sure that VPC networking and, optionally, load balancers are
    set up correctly for it all to work.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了 Fargate 是什么以及它是如何工作的。你了解到，Fargate 是 AWS 管理的服务，因此你只需要关注 Fargate 配置文件，并确保正确设置
    VPC 网络，必要时设置负载均衡器，这样一切就能正常工作。
- en: We also explored the technology and discovered that under the hood, Fargate
    uses a Firecracker MicroVM to provide complete isolation between your Pod and
    other Pods even if these are in the same cluster.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还探讨了这一技术，并发现 Fargate 在后台使用 Firecracker MicroVM 来提供完全的隔离，即使这些 Pod 位于同一集群中。
- en: We reviewed how the Fargate profile is used to match Pod spec labels and namespaces
    in the profile and assign them to the Fargate scheduler, which handles the orchestration
    with the AWS Fargate service to provision your Pod on a Fargate MicroVM and connect
    it to your VPC.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们回顾了 Fargate 配置文件如何用于匹配 Pod 规格标签和配置文件中的命名空间，并将它们分配给 Fargate 调度程序，该调度程序负责与 AWS
    Fargate 服务进行协调，以在 Fargate MicroVM 上配置您的 Pod，并将其连接到您的 VPC。
- en: We then looked at how you can use a Pod or deployment manifest unchanged by
    just matching the namespace and/or labels defined in the Fargate profile namespace.
    We also learned that adjusting the `Limits` or `Requests` resources in the manifest
    will change the size of the MicroVM (providing it matches one of the pre-defined
    CPU/RAM combinations).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，我们探讨了如何通过仅匹配 Fargate 配置文件中定义的命名空间和/或标签，使用不做更改的 Pod 或部署清单。我们还了解到，调整清单中的 `Limits`
    或 `Requests` 资源将改变 MicroVM 的大小（前提是它与预定义的 CPU/RAM 组合之一相匹配）。
- en: Finally, we reviewed some common issues with Fargate and how to fix them. You
    should now be able to describe when to use Fargate for an EKS workload and be
    able to configure a Fargate profile to allow developers to deploy Pods on a Fargate
    instance.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们回顾了一些 Fargate 常见问题及其解决方法。现在你应该能够描述何时使用 Fargate 来处理 EKS 工作负载，并能够配置 Fargate
    配置文件，以便开发人员能够在 Fargate 实例上部署 Pods。
- en: In the next chapter, we will look at how you can use a service mesh to provide
    greater security or better telemetry/logging.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何使用服务网格来提供更高的安全性或更好的遥测/日志记录。
- en: Further reading
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Understanding the Firecracker design: [https://github.com/firecracker-microvm/firecracker/blob/main/docs/design.md](https://github.com/firecracker-microvm/firecracker/blob/main/docs/design.md)'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解 Firecracker 设计：[https://github.com/firecracker-microvm/firecracker/blob/main/docs/design.md](https://github.com/firecracker-microvm/firecracker/blob/main/docs/design.md)
- en: 'Understanding how Fargate is priced: [https://aws.amazon.com/fargate/pricing/](https://aws.amazon.com/fargate/pricing/)'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解 Fargate 定价：[https://aws.amazon.com/fargate/pricing/](https://aws.amazon.com/fargate/pricing/)
- en: 'Understanding Fargate Pod configurations: [https://docs.aws.amazon.com/eks/latest/userguide/fargate-pod-configuration.html](https://docs.aws.amazon.com/eks/latest/userguide/fargate-pod-configuration.html)'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解 Fargate Pod 配置：[https://docs.aws.amazon.com/eks/latest/userguide/fargate-pod-configuration.html](https://docs.aws.amazon.com/eks/latest/userguide/fargate-pod-configuration.html)

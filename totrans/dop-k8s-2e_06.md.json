["```\n// launch a busybox container with `top` command, also, expose container port 8080 to host port 8000.\n# docker run -d -p 8000:8080 --name=busybox busybox top\n737e4d87ba86633f39b4e541f15cd077d688a1c8bfb83156d38566fc5c81f469 \n```", "```\n// show all the network interfaces in busybox container\n// docker exec <container_name> <command>\n# docker exec busybox ip link list\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue qlen 1\n   link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n2: sit0@NONE: <NOARP> mtu 1480 qdisc noop qlen 1\n   link/sit 0.0.0.0 brd 0.0.0.0\n53: eth0@if54: <BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN> \n mtu 1500 qdisc noqueue\n   link/ether 02:42:ac:11:00:07 brd ff:ff:ff:ff:ff:ff\n```", "```\n// show all the network interfaces from the host\n# ip link list\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue\n state UNKNOWN mode DEFAULT group default qlen 1\n   link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc \n pfifo_fast state UP mode DEFAULT group default qlen \n 1000\n   link/ether 08:00:27:ca:fd:37 brd ff:ff:ff:ff:ff:ff\n...\n54: vethfeec36a@if53: <BROADCAST,MULTICAST,UP,LOWER_UP> \n mtu 1500 qdisc noqueue master docker0 state UP mode \n DEFAULT group default\n   link/ether ce:25:25:9e:6c:07 brd ff:ff:ff:ff:ff:ff link-netnsid 5\n```", "```\n// list iptables nat rules. Showing only POSTROUTING rules which allows packets to be altered before they leave the host.\n# sudo iptables -t nat -nL POSTROUTING\nChain POSTROUTING (policy ACCEPT)\ntarget     prot opt source               destination\n...\nMASQUERADE  all  --  172.17.0.0/16        0.0.0.0/0\n...\n```", "```\n// list iptables nat rules\n# sudo iptables -t nat -nL\nChain PREROUTING (policy ACCEPT)\ntarget     prot opt source               destination\n...\nDOCKER     all  --  0.0.0.0/0            0.0.0.0/0            ADDRTYPE match dst-type LOCAL\n...\nChain OUTPUT (policy ACCEPT)\ntarget     prot opt source               destination\nDOCKER     all  --  0.0.0.0/0           !127.0.0.0/8          ADDRTYPE match dst-type LOCAL\n...\nChain DOCKER (2 references)\ntarget     prot opt source               destination\nRETURN     all  --  0.0.0.0/0            0.0.0.0/0\n...\nDNAT       tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:8000 to:172.17.0.7:8080\n...\n```", "```\n#cat 6-1-1_pod.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: example\nspec:\n  containers:\n   - name: web\n     image: nginx\n   - name: centos\n     image: centos\n     command: [\"/bin/sh\", \"-c\", \"while : ;do curl http://localhost:80/; sleep 10; done\"] \n // create the Pod\n#kubectl create -f 6-1-1_pod.yaml\npod/example created \n```", "```\n# kubectl describe pods example\nName:       example\nNode:       minikube/192.168.99.100\n...\nContainers:\n  web:\n    Container ID: docker:// d9bd923572ab186870284535044e7f3132d5cac11ecb18576078b9c7bae86c73\n    Image:        nginx\n...\ncentos:\n    Container ID: docker: //f4c019d289d4b958cd17ecbe9fe22a5ce5952cb380c8ca4f9299e10bf5e94a0f\n    Image:        centos\n...\n```", "```\n# docker ps\nCONTAINER ID        IMAGE                                      COMMAND                  CREATED             STATUS              PORTS                                      NAMES\nf4c019d289d4        36540f359ca3                               \"/bin/sh -c 'while : \"   2 minutes ago        Up 2 minutes k8s_centos_example_default_9843fc27-677b-11e7-9a8c-080027cafd37_1\nd9bd923572ab        e4e6d42c70b3                               \"nginx -g 'daemon off\"   2 minutes ago        Up 2 minutes k8s_web_example_default_9843fc27-677b-11e7-9a8c-080027cafd37_1\n4ddd3221cc47        gcr.io/google_containers/pause-amd64:3.0   \"/pause\"                 2 minutes ago        Up 2 minutes \n```", "```\n# docker inspect d9bd923572ab | grep NetworkMode\n\"NetworkMode\": \"container:4ddd3221cc4792207ce0a2b3bac5d758a5c7ae321634436fa3e6dd627a31ca76\",\n```", "```\n// start minikube with cni option\n# minikube start --network-plugin=cni\n...\nLoading cached images from config file.\nEverything looks great. Please enjoy minikube! \n```", "```\n# minikube ssh\n$ ifconfig \n...\nmybridge  Link encap:Ethernet  HWaddr 0A:58:0A:01:00:01\n          inet addr:10.1.0.1  Bcast:0.0.0.0 \n Mask:255.255.0.0\n...\n```", "```\n# kubectl create -f 6-1-1_pod.yaml\npod/example created\n# kubectl describe po example\nName:       example\nNamespace:  default\nNode:       minikube/10.0.2.15\nStart Time: Sun, 23 Jul 2017 14:24:24 -0400\nLabels:           <none>\nAnnotations:      <none>\nStatus:           Running\nIP:         10.1.0.4 \n```", "```\n# cat /etc/cni/net.d/k8s.conf\n{\n  \"name\": \"rkt.kubernetes.io\",\n  \"type\": \"bridge\",\n  \"bridge\": \"mybridge\",\n  \"mtu\": 1460,\n  \"addIf\": \"true\",\n  \"isGateway\": true,\n  \"ipMasq\": true,\n  \"ipam\": {\n    \"type\": \"host-local\",\n    \"subnet\": \"10.1.0.0/16\",\n    \"gateway\": \"10.1.0.1\",\n    \"routes\": [\n      {\n       \"dst\": \"0.0.0.0/0\"\n      }\n    ]\n  }\n}\n```", "```\n// check the rules in iptables \n# sudo iptables -t nat -nL\n... \nChain POSTROUTING (policy ACCEPT)\ntarget     prot opt source               destination\nKUBE-POSTROUTING  all  --  0.0.0.0/0            0.0.0.0/0            /* kubernetes postrouting rules */\nMASQUERADE  all  --  172.17.0.0/16        0.0.0.0/0\nCNI-25df152800e33f7b16fc085a  all  --  10.1.0.0/16          0.0.0.0/0            /* name: \"rkt.kubernetes.io\" id: \"328287949eb4d4483a3a8035d65cc326417ae7384270844e59c2f4e963d87e18\" */\nCNI-f1931fed74271104c4d10006  all  --  10.1.0.0/16          0.0.0.0/0            /* name: \"rkt.kubernetes.io\" id: \"08c562ff4d67496fdae1c08facb2766ca30533552b8bd0682630f203b18f8c0a\" */\n```", "```\n// create two pods with nginx and one service to observe default networking. Users are free to use any other kind of solution.\n# kubectl create -f chapter3/3-2-3_Service/3-2-3_rs1.yaml\nreplicaset.apps/nginx-1.12 created\n# kubectl create -f chapter3/3-2-3_Service/3-2-3_nodeport.yaml\nservice/nginx-nodeport created \n```", "```\n# kubectl describe svc nginx-nodeport\nName:             nginx-nodeport\nNamespace:        default\nSelector:         project=chapter3,service=web\nType:             NodePort\nIP:               10.0.0.167\nPort:             <unset>     80/TCP\nNodePort:         <unset>     32261/TCP\nEndpoints:        10.1.0.4:80,10.1.0.5:80\n...\n```", "```\n# sudo iptables -t nat -nL\n...\nChain KUBE-SERVICES (2 references)\ntarget     prot opt source               destination\nKUBE-SVC-37ROJ3MK6RKFMQ2B  tcp  --  0.0.0.0/0            10.0.0.167           /* default/nginx-nodeport: cluster IP */ tcp dpt:80\nKUBE-NODEPORTS  all  --  0.0.0.0/0            0.0.0.0/0            /* kubernetes service nodeports; NOTE: this must be the last rule in this chain */ ADDRTYPE match dst-type LOCAL\n\nChain KUBE-SVC-37ROJ3MK6RKFMQ2B (2 references)\ntarget     prot opt source               destination\nKUBE-SEP-SVVBOHTYP7PAP3J5  all  --  0.0.0.0/0            0.0.0.0/0            /* default/nginx-nodeport: */ statistic mode random probability 0.50000000000\nKUBE-SEP-AYS7I6ZPYFC6YNNF  all  --  0.0.0.0/0            0.0.0.0/0            /* default/nginx-nodeport: */\nChain KUBE-SEP-SVVBOHTYP7PAP3J5 (1 references)\ntarget     prot opt source               destination\nKUBE-MARK-MASQ  all  --  10.1.0.4             0.0.0.0/0            /* default/nginx-nodeport: */\nDNAT       tcp  --  0.0.0.0/0            0.0.0.0/0            /* default/nginx-nodeport: */ tcp to:10.1.0.4:80\nChain KUBE-SEP-AYS7I6ZPYFC6YNNF (1 references)\ntarget     prot opt source               destination\nKUBE-MARK-MASQ  all  --  10.1.0.5             0.0.0.0/0            /* default/nginx-nodeport: */\nDNAT       tcp  --  0.0.0.0/0            0.0.0.0/0            /* default/nginx-nodeport: */ tcp to:10.1.0.5:80\n...  \n```", "```\n// start over our minikube local\n# minikube delete && minikube start\n\n// enable ingress in minikube\n# minikube addons enable ingress\ningress was successfully enabled \n\n// check current setting for addons in minikube\n# minikube addons list\n- registry: disabled\n- registry-creds: disabled\n- addon-manager: enabled\n- dashboard: enabled\n- default-storageclass: enabled\n- kube-dns: enabled\n- heapster: disabled\n- ingress: enabled \n```", "```\n# cat chapter6/6-2-1_nginx.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n name: nginx\nspec:\n replicas: 2\n template:\n metadata:\n labels:\n project: chapter6\n service: nginx\n spec:\n containers:\n - name: nginx\n image: nginx\n ports:\n - containerPort: 80\n---\nkind: Service\napiVersion: v1\nmetadata:\n name: nginx\nspec:\n type: NodePort\n selector:\n project: chapter6\n service: nginx\n ports:\n - protocol: TCP\n port: 80\n targetPort: 80\n// create nginx RS and service\n# kubectl create -f chapter6/6-2-1_nginx.yaml\ndeployment.apps/nginx created\nservice/nginx created\n```", "```\n// another backend named echoserver\n# cat chapter6/6-2-1_echoserver.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: echoserver\nspec:\n  replicas: 1\n  template:\n    metadata:\n     name: echoserver\n     labels:\n      project: chapter6\n      service: echoserver\n   spec:\n     containers:\n     - name: echoserver\n       image: gcr.io/google_containers/echoserver:1.4\n      ports:\n     - containerPort: 8080\n---\n\nkind: Service\napiVersion: v1\nmetadata:\n  name: echoserver\nspec:\n  type: NodePort\n  selector:\n    project: chapter6\n    service: echoserver\n  ports:\n    - protocol: TCP\n      port: 8080\n      targetPort: 8080\n\n// create RS and SVC by above configuration file\n# kubectl create -f chapter6/6-2-1_echoserver.yaml\ndeployment.apps/echoserver created\nservice/echoserver created \n```", "```\n# cat chapter6/6-2-1_ingress.yaml\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: ingress-example\n  annotations:\n    nginx.ingress.kubernetes.io/rewrite-target: /\nspec:\n  rules:\n  - host: devops.k8s\n    http:\n      paths:\n      - path: /welcome\n        backend:\n          serviceName: nginx\n          servicePort: 80\n      - path: /echoserver\n        backend:\n          serviceName: echoserver\n          servicePort: 8080\n\n// create ingress\n# kubectl create -f chapter6/6-2-1_ingress.yaml\ningress.extensions/ingress-example created \n```", "```\n// normally host file located in /etc/hosts in linux\n# sudo sh -c \"echo `minikube ip` devops.k8s >> /etc/hosts\" \n```", "```\n# curl http://devops.k8s/welcome\n...\n<title>Welcome to nginx!</title>\n...\n// check echoserver \n# curl http://devops.k8s/echoserver\nCLIENT VALUES:\nclient_address=172.17.0.4\ncommand=GET\nreal path=/\nquery=nil\nrequest_version=1.1\nrequest_uri=http://devops.k8s:8080/ \n```", "```\n# kubectl apply -f \\\nhttps://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/rbac-kdd.yaml\nclusterrole.rbac.authorization.k8s.io/calico-node configured\nclusterrolebinding.rbac.authorization.k8s.io/calico-node configured\n```", "```\n# kubectl apply -f https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/kubernetes-datastore/calico-networking/1.7/calico.yaml\nconfigmap/calico-config created\nservice/calico-typha created\ndeployment.apps/calico-typha created\npoddisruptionbudget.policy/calico-typha created\ndaemonset.extensions/calico-node created\nserviceaccount/calico-node created\ncustomresourcedefinition.apiextensions.k8s.io/felixconfigurations.crd.projectcalico....\ncustomresourcedefinition.apiextensions.k8s.io/networkpolicies.crd.projectcalico.org created\n```", "```\n# kubectl get pods --namespace=kube-system\nNAME READY STATUS RESTARTS AGE\ncalico-node-ctxq8 2/2 Running 0 14m\n```", "```\n# kubectl create -f chapter6/6-2-1_nginx.yaml\nreplicaset \"nginx\" created\nservice \"nginx\" created\n// list the services\n# kubectl get svc\nNAME TYPE  CLUSTER-IP EXTERNAL-IP PORT(S) AGE\nkubernetes ClusterIP  10.96.0.1    <none> 443/TCP 36m\nnginx      NodePort   10.96.51.143 <none> 80:31452/TCP 5s\n```", "```\n# kubectl run busybox -i -t --image=busybox /bin/sh\nIf you don't see a command prompt, try pressing enter.\n/ # wget --spider 10.96.51.143\nConnecting to 10.96.51.143 (10.96.51.143:80)\n```", "```\n// declare a network policy\n# cat chapter6/6-3-1_networkpolicy.yaml\nkind: NetworkPolicy\napiVersion: networking.k8s.io/v1\nmetadata:\n  name: nginx-networkpolicy\nspec:\n  podSelector:\n    matchLabels:\n      service: nginx\n  ingress:\n  - from:\n    - podSelector:\n        matchLabels:\n          project: chapter6 \n```", "```\n// in busybox pod, or you could use `kubectl attach <pod_name> -c busybox -i -t` to re-attach to the pod \n# wget --spider --timeout=1 10.96.51.143\nConnecting to 10.96.51.143 (10.96.51.143:80)\nwget: download timed out \n```", "```\n// inside busybox pod\n/ # wget --spider 10.96.51.143 \nConnecting to 10.96.51.143 (10.96.51.143:80) \n```", "```\n# cat chapter6/6-3-1_np_denyall.yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: default-deny\nspec:\n  podSelector: {}\n  policyTypes:\n  - Ingress \n```", "```\n# cat chapter6/6-3-1_np_allowall.yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-all\nspec:\n  podSelector: {}\n  ingress:\n  - {} \n```", "```\n// get the latest istio\n# curl -L https://git.io/getLatestIstio | sh -\nDownloading istio-1.0.5 from https://github.com/istio/istio/releases/download/1.0.5/istio-1.0.5-osx.tar.gz ...\n\n// get into the folder\n# cd istio-1.0.5/\n\n```", "```\n# kubectl apply -f install/kubernetes/helm/istio/templates/crds.yaml\ncustomresourcedefinition.apiextensions.k8s.io/virtualservices.networking.istio.io created\ncustomresourcedefinition.apiextensions.k8s.io/destinationrules.networking.istio.io created\ncustomresourcedefinition.apiextensions.k8s.io/serviceentries.networking.istio.io created\ncustomresourcedefinition.apiextensions.k8s.io/gateways.networking.istio.io created\n...\n```", "```\n# kubectl apply -f install/kubernetes/istio-demo-auth.yaml\nnamespace/istio-system created\nconfigmap/istio-galley-configuration created\n...\nkubernetes.config.istio.io/attributes created\ndestinationrule.networking.istio.io/istio-policy created\ndestinationrule.networking.istio.io/istio-telemetry created\n```", "```\n// check services are launched successfully\n# kubectl get svc -n istio-system\nNAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE\ngrafana ClusterIP 10.98.182.66 <none> 3000/TCP 13s\nistio-citadel ClusterIP 10.105.65.6 <none> 8060/TCP,9093/TCP 13s\nistio-egressgateway ClusterIP 10.105.178.212 <none> 80/TCP,443/TCP 13s\nistio-galley ClusterIP 10.103.123.213 <none> 443/TCP,9093/TCP 13s\nistio-ingressgateway LoadBalancer 10.107.243.112 <pending> 80:31380/TCP,443:31390/TCP,31400:31400/TCP,15011:32320/TCP,8060:31750/TCP,853:30790/TCP,15030:30313/TCP,15031:30851/TCP 13s\nistio-pilot ClusterIP 10.104.123.60 <none> 15010/TCP,15011/TCP,8080/TCP,9093/TCP 13s\nistio-policy ClusterIP 10.111.227.237 <none> 9091/TCP,15004/TCP,9093/TCP 13s\nistio-sidecar-injector ClusterIP 10.107.43.206 <none> 443/TCP 13s\nistio-telemetry ClusterIP 10.103.118.119 <none> 9091/TCP,15004/TCP,9093/TCP,42422/TCP 13s\njaeger-agent ClusterIP None <none> 5775/UDP,6831/UDP,6832/UDP 11s\njaeger-collector ClusterIP 10.110.234.134 <none> 14267/TCP,14268/TCP 11s\njaeger-query ClusterIP 10.103.19.74 <none> 16686/TCP 12s\nprometheus ClusterIP 10.96.62.77 <none> 9090/TCP 13s\nservicegraph ClusterIP 10.100.191.216 <none> 8088/TCP 13s\ntracing ClusterIP 10.107.99.50 <none> 80/TCP 11s\nzipkin ClusterIP 10.98.206.168 <none> 9411/TCP 11s\n```", "```\n# kubectl get pods -n istio-system\nNAME READY STATUS RESTARTS AGE\ngrafana-7ffdd5fb74-hzwcn 1/1 Running 0 5m1s\nistio-citadel-55cdfdd57c-zzs2s 1/1 Running 0 5m1s\nistio-cleanup-secrets-qhbvk 0/1 Completed 0 5m3s\nistio-egressgateway-687499c95f-fbbwq 1/1 Running 0 5m1s\nistio-galley-76bbb946c8-9mw2g 1/1 Running 0 5m1s\nistio-grafana-post-install-8xxps 0/1 Completed 0 5m3s\nistio-ingressgateway-54f5457d68-n7xsj 1/1 Running 0 5m1s\nistio-pilot-7bf5674b9f-jnnvx 2/2 Running 0 5m1s\nistio-policy-75dfcf6f6d-nwvdn 2/2 Running 0 5m1s\nistio-security-post-install-stv2c 0/1 Completed 0 5m3s\nistio-sidecar-injector-9c6698858-gr86p 1/1 Running 0 5m1s\nistio-telemetry-67f94c555b-4mt4l 2/2 Running 0 5m1s\nistio-tracing-6445d6dbbf-8r5r4 1/1 Running 0 5m1s\nprometheus-65d6f6b6c-qrp6f 1/1 Running 0 5m1s\nservicegraph-5c6f47859-qzlml 1/1 Running 2 5m1s\n```", "```\n// launch sample application\n# kubectl run nginx --image=nginx\ndeployment.apps/nginx created\n\n// list pods\n# kubectl get po\nNAME READY STATUS RESTARTS AGE\nnginx-64f497f8fd-b7d4k 2/2 Running 0 3s\n```", "```\n# kubectl describe po nginx-64f497f8fd-b7d4k\nName: nginx-64f497f8fd-b7d4k\nNamespace: default\nLabels: pod-template-hash=2090539498\n run=nginx\nAnnotations: kubernetes.io/limit-ranger: LimitRanger plugin set: cpu request for container nginx\n sidecar.istio.io/status:\n {\"version\":\"50128f63e7b050c58e1cdce95b577358054109ad2aff4bc4995158c06924a43b\",\"initContainers\":[\"istio-init\"],\"containers\":[\"istio-proxy\"]...\nStatus: Running\nInit Containers:\n istio-init:\n Container ID: docker://3ec33c4cbc66682f9a6846ae6f310808da3a2a600b3d107a0d361b5deb6d3018\n Image: docker.io/istio/proxy_init:1.0.5\n...\nContainers:\n nginx:\n Container ID: docker://42ab7df7366c1838489be0c7264a91235d8e5d79510f3d0f078726165e95665a\n Image: nginx\n ...\n istio-proxy:\n Container ID: docker://7bdf7b82ce3678174dea12fafd2c7f0726bfffc562ed3505a69991b06cf32d0d\n Image: docker.io/istio/proxyv2:1.0.5\n Image ID: docker-pullable://istio/proxyv2@sha256:8b7d549100638a3697886e549c149fb588800861de8c83605557a9b4b20343d4\n Port: 15090/TCP\n Host Port: 0/TCP\n Args:\n proxy\n sidecar\n --configPath\n /etc/istio/proxy\n --binaryPath\n /usr/local/bin/envoy\n --serviceCluster\n istio-proxy\n --drainDuration\n 45s\n --parentShutdownDuration\n 1m0s\n --discoveryAddress\n istio-pilot.istio-system:15005\n --discoveryRefreshDelay\n 1s\n --zipkinAddress\n zipkin.istio-system:9411\n --connectTimeout\n 10s\n --proxyAdminPort\n 15000\n --controlPlaneAuthPolicy\n MUTUAL_TLS\n```"]
["```\n    $ /bin/bash build_push.sh <DOCKER_USERNAME> <IMAGE_TAG>\n    ```", "```\n    tags: <DOCKER_USER>/fluxappdemo\n    ```", "```\n    $ curl -s https://fluxcd.io/install.sh | sudo bash\n    ```", "```\n    $ brew install fluxcd/tap/flux\n    ```", "```\n    $ export GITHUB_USER=<YOUR_USER>\n    $ export GITHUB_TOKEN=<YOUR_GITHUB_TOKEN>\n    $ export DOCKER_USER=<YOUR_DOCKER_USERNAME>\n    ```", "```\n    $ git config --global user.email \"<YOUR_EMAIL>\"\n    $ git config --global user.name \"<YOUR_NAME>\"\n    ```", "```\n    $ CLUSTER_N=1\n    $ flux bootstrap github \\\n    --kubeconfig /etc/rancher/k3s/k3s.yaml \\\n    --components-extra=image-reflector-controller,image-automation-controller \\\n    --owner=$GITHUB_USER \\\n    --repository=fluxdemo-production \\\n    --branch=main \\\n    --path=./clusters/cluster$CLUSTER_N \\\n    --read-write-key \\\n    --personal\n    ```", "```\n    $ git clone https://github.com/$GITHUB_USER/fluxdemo-production.git\n    $ cd fluxdemo-production\n    ```", "```\n    $ mkdir -p ./clusters/cluster$CLUSTER_N/manifests\n    $ kubectl create ns production --dry-run=client -o YAML > ./clusters/cluster$CLUSTER_N/manifests/namespace.yaml\n    ```", "```\n$ flux create source helm helm-charts \\\n--kubeconfig /etc/rancher/k3s/k3s.yaml \\\n--url=https://sergiops.xyz/helm-charts \\\n--interval=1m \\\n--namespace=production \\\n--export > ./clusters/cluster$CLUSTER_N/manifests/helm-charts.yaml\n```", "```\n    $ flux create helmrelease app-demo --chart app-demo \\\n    --source HelmRepository/helm-charts.production \\\n    --chart-version 0.0.1 \\\n    --interval=1m \\\n    --namespace production \\\n    --export > ./clusters/cluster$CLUSTER_N/manifests/helm-release.yaml\n    ```", "```\ncat << EOF >> ./clusters/cluster$CLUSTER_N/manifests/helm-release.yaml\n  values:\n    replicaCount: 3\n    containerPort: 5000\n    dockerImage: $DOCKER_USER/fluxappdemo:RELEASE.2022-01-16T05-42-20Z # {\"\\$imagepolicy\": \"flux-system:app-demo\"}\n    namespace: \"production\"\n    domain: \"app-demo-cluster$CLUSTER_N.domain.tld\"\n    changeCause: \"First Deployment cluster $CLUSTER_N\"\n    message: \"cluster$CLUSTER_N\"\n    appname: \"app-demo-cluster$CLUSTER_N\"\n    node: \"machine$CLUSTER_N\"\nEOF\n```", "```\napiVersion: helm.toolkit.fluxcd.io/v2beta1\nkind: HelmRelease\nmetadata:\n  name: app-demo\n  namespace: production\nspec:\n  chart:\n    spec:\n      chart: app-demo\n      sourceRef:\n        kind: HelmRepository\n        name: helm-charts\n        namespace: production\n      version: 0.0.1\n  interval: 1m0s\n  values:\n    replicaCount: 3\n    containerPort: 5000\ndockerImage: <DOCKER_USER>/fluxappdemo:RELEASE.2022-01-16T05-42-20Z # {\"$imagepolicy\": \"flux-system:app-demo\"} \n    namespace: \"production\"\n    domain: \"app-demo-cluster1.domain.tld\"\n    changeCause: \"First Deployment cluster 1\"\n    message: \"cluster1\"\n    appname: \"app-demo-cluster1\"\n    node: \"machine1\"\n```", "```\n    $ flux create image repository app-demo \\\n    --kubeconfig /etc/rancher/k3s/k3s.yaml \\\n    --image=$DOCKER_USER/fluxappdemo \\\n    --namespace=flux-system \\\n    --interval=1m \\\n    --export > ./clusters/cluster$CLUSTER_N/manifests/app-demo-registry.yaml\n    ```", "```\n$ flux create image policy app-demo \\ \n--image-ref=app-demo \\ \n--namespace=flux-system \\ \n--select-alpha=asc \\\n--filter-regex='^RELEASE\\.(?P<timestamp>.*)Z$' \\\n--filter-extract='$timestamp' \\\n--export > ./clusters/cluster$CLUSTER_N/manifests/app-demo-policy.yaml\n```", "```\n    $ flux create image update flux-system \\\n    --git-repo-ref=flux-system \\\n    --git-repo-path=\"./clusters\" \\\n    --checkout-branch=main \\\n    --push-branch=main \\\n    --author-name=<AUTHOR_NAME> \\\n    --author-email=<AUTHOR_EMAIL> \\\n    --commit-template=\"{{range .Updated.Images}}{{println .}}{{end}}\" \\\n    --export > ./clusters/cluster$CLUSTER_N/manifests/flux-system-automation.yaml\n    ```", "```\n    $ git add -A\n    $ git commit -m \"feat: App YAML definitions\"\n    $ git push origin main\n    ```", "```\n    $ flux reconcile kustomization flux-system --with-source --kubeconfig /etc/rancher/k3s/k3s.yaml\n    ```", "```\n    $ IP_LOADBALANCER=$(kubectl get svc app-demo-cluster$CLUSTER_N-srv --output jsonpath='{.status.loadBalancer.ingress[0].ip}' -n production)\n    ```", "```\n$ echo $IP_LOADBALANCER\n```", "```\n    $ watch flux get images all --all-namespaces --kubeconfig /etc/rancher/k3s/k3s.yaml\n    ```", "```\n    $ flux get image repository app-demo --kubeconfig /etc/rancher/k3s/k3s.yaml --namespace=production\n    ```", "```\n    $ flux get image policy app-demo --kubeconfig /etc/rancher/k3s/k3s.yaml --namespace=production\n    ```", "```\n    $ flux get images all --all-namespaces --kubeconfig /etc/rancher/k3s/k3s.yaml\n    ```", "```\n    $ flux reconcile kustomization flux-system --with-source --kubeconfig /etc/rancher/k3s/k3s.yaml\n    ```", "```\n    $ watch flux get images all --all-namespaces --kubeconfig /etc/rancher/k3s/k3s.yaml\n    ```", "```\n    $ kubectl get deploy -n production\n    ```", "```\n    $ kubectl get pods -n production\n    ```", "```\n    $ flux create source git monitoring \\\n    --interval=30m \\\n    --kubeconfig /etc/rancher/k3s/k3s.yaml \\\n    --url=https://github.com/fluxcd/flux2 \\\n    --branch=main\n    ```", "```\n    $ flux create kustomization monitoring-stack \\\n    --interval=1h \\\n    --kubeconfig /etc/rancher/k3s/k3s.yaml \\\n    --prune=true \\\n    --source=monitoring \\\n    --path=\"./manifests/monitoring/kube-prometheus-stack\" \\\n    --health-check=\"Deployment/kube-prometheus-stack-operator.monitoring\" \\\n    --health-check=\"Deployment/kube-prometheus-stack-grafana.monitoring\" \\\n    --health-check-timeout=\"5m0s\"\n    ```", "```\n    $ flux create kustomization monitoring-config \\\n    --interval=1h \\\n    --kubeconfig /etc/rancher/k3s/k3s.yaml \\\n    --prune=true \\\n    --source=monitoring \\\n    --path=\"./manifests/monitoring/monitoring-config\"\n    ```", "```\n    $ kubectl -n monitoring port-forward svc/kube-prometheus-stack-grafana --address 0.0.0.0 3000:80\n    ```", "```\n$ flux uninstall -s --namespace=flux-system --kubeconfig /etc/rancher/k3s/k3s.yaml\n```"]
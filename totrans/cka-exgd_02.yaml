- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Installing and Configuring Kubernetes Clusters
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和配置 Kubernetes 集群
- en: This chapter introduces the different configurations of Kubernetes, which is
    the first step toward working with Kubernetes. We’ll get our hands dirty by setting
    up a Kubernetes cluster with a single worker node and then multiple worker nodes.
    This chapter familiarizes you with Kubernetes installations, which is one of the
    key skills that will serve in your daily job as a Kubernetes administrator.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了 Kubernetes 的不同配置，这是使用 Kubernetes 的第一步。我们将通过设置一个包含单个工作节点的 Kubernetes 集群，然后再扩展为多个工作节点，来进行实践。本章将帮助你熟悉
    Kubernetes 安装，这是作为 Kubernetes 管理员日常工作中的一项关键技能。
- en: 'In this chapter, we’re going to cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Hands-on Kubernetes tooling
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 工具实践
- en: Installing and configuring a Kubernetes cluster
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和配置 Kubernetes 集群
- en: Using `minikube` to set up a single node Kubernetes cluster
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `minikube` 设置单节点 Kubernetes 集群
- en: Using `kubeadm` to install a basic Kubernetes cluster
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `kubeadm` 安装基本的 Kubernetes 集群
- en: Setting up a highly available cluster with `kubeadm`
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `kubeadm` 设置高可用集群
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To get started, we need to make sure your local machine meets the technical
    requirements described as the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始工作，我们需要确保你的本地机器满足以下技术要求：
- en: A compatible Linux host – we recommend a Debian-based Linux distribution such
    as Ubuntu 18.04 or later.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 兼容的 Linux 主机 – 我们推荐使用基于 Debian 的 Linux 发行版，如 Ubuntu 18.04 或更高版本。
- en: Make sure your host machine has at least 2 GB RAM, 2 CPU cores, and about 20
    GB of free disk space.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保你的主机至少有 2 GB 的内存、2 个 CPU 核心，以及大约 20 GB 的空闲磁盘空间。
- en: Hands-on Kubernetes tooling
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes 工具实践
- en: There are a handful of Kubernetes tools on the market – we’ll start by covering
    some widely used Kubernetes tools to interact with the Kubernetes cluster. We’ll
    dive into some key tools with hands-on labs later in this chapter.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 市场上有许多 Kubernetes 工具 – 我们将首先介绍一些广泛使用的 Kubernetes 工具，用于与 Kubernetes 集群进行交互。我们将在本章后面通过实际操作深入讲解一些关键工具。
- en: Core tools
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 核心工具
- en: In this section, we are going to cover tools which are required to work with
    Kubernetes and containers.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍用于与 Kubernetes 和容器一起工作的工具。
- en: kubectl
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: kubectl
- en: '`kubectl` is a Kubernetes command-line tool used to talk to the Kubernetes
    cluster. It is hands down the most common and important utility that allows you
    to run commands against the Kubernetes cluster. There are a handful of `kubectl`
    commands available that will allow users to work with the Kubernetes cluster,
    such as deploying a containerized application, managing cluster resources, and
    monitoring and visualizing events and logs. We’ll cover most of the common `kubectl`
    commands with examples as we go through the process.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`kubectl` 是一个 Kubernetes 命令行工具，用于与 Kubernetes 集群进行交互。它无疑是最常用和最重要的工具，使你能够在 Kubernetes
    集群中运行命令。`kubectl` 提供了许多命令，允许用户执行与 Kubernetes 集群相关的操作，比如部署容器化应用程序、管理集群资源、监控和可视化事件与日志。我们将在整个过程中介绍大部分常用的
    `kubectl` 命令，并通过示例进行讲解。'
- en: 'To set up the `kubectl` utility, if you’re on Red Hat-based distributions such
    as CentOS or Fedora, check out the official article for further information: [https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#install-using-native-package-management](https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#install-using-native-package-management).
    You can use the following commands:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 `kubectl` 工具，如果你使用的是基于 Red Hat 的发行版，如 CentOS 或 Fedora，请参考官方文章获取更多信息：[https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#install-using-native-package-management](https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#install-using-native-package-management)。你可以使用以下命令：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you’re on Debian-based distributions such as Ubuntu 18.04, you can follow
    the following instructions:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是基于 Debian 的发行版，如 Ubuntu 18.04，可以按照以下说明进行操作：
- en: 'Firstly, you need to update the `apt` package index – then, you need to install
    the packages needed to use the Kubernetes `apt` repository by running the following
    commands sequentially:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，你需要更新 `apt` 包索引，然后，你需要按顺序运行以下命令来安装使用 Kubernetes `apt` 仓库所需的软件包：
- en: '[PRE1]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Download the Google Cloud public signing key and add the Kubernetes `apt` repository
    by using the following command:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载 Google Cloud 公共签名密钥，并使用以下命令添加 Kubernetes `apt` 仓库：
- en: '[PRE2]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, you’re ready to go. Make sure you update the `apt` package index with
    the new repository again and then install the `kubectl` utility using the `apt-get
    install` command:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以开始了。确保你再次更新 `apt` 包索引并使用 `apt-get install` 命令安装 `kubectl` 工具：
- en: '[PRE3]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can verify whether `kubectl` has been successfully installed by running
    the following command upon the completion of the previous steps:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在完成之前的步骤后，你可以通过运行以下命令来验证`kubectl`是否已经成功安装：
- en: '[PRE4]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You’ll see an output similar to the following if you have installed `kubectl`
    successfully:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你成功安装了`kubectl`，你将看到类似下面的输出：
- en: '![Figure 2.1 – A successful installation of kubectl ](img/Figure_2.01_B18201.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.1 – kubectl 安装成功](img/Figure_2.01_B18201.jpg)'
- en: Figure 2.1 – A successful installation of kubectl
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.1 – kubectl 安装成功
- en: For instructions on installing `kubectl` in different environments, please refer
    to [https://kubernetes.io/docs/tasks/tools/](https://kubernetes.io/docs/tasks/tools/).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 有关在不同环境中安装`kubectl`的说明，请参考[https://kubernetes.io/docs/tasks/tools/](https://kubernetes.io/docs/tasks/tools/)。
- en: Container runtimes
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 容器运行时
- en: 'Now, we are going to set up `containerd` as our container runtime by following
    these instructions:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将按照这些指示设置`containerd`作为我们的容器运行时：
- en: 'Update the `apt` index, add Docker’s official `GPG` key, and set up the `apt`
    repository by running the following instructions:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`apt`索引，添加Docker的官方`GPG`密钥，并通过运行以下指令设置`apt`仓库：
- en: '[PRE5]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Install the Docker engine and `containerd.io`:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Docker引擎和`containerd.io`：
- en: '[PRE6]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Validate that Docker has been installed successfully by using the following
    commands:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令验证Docker是否已经成功安装：
- en: '[PRE7]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You’ll see an output similar to the following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你成功安装了`kubectl`，你将看到类似下面的输出：
- en: '![Figure 2.2 – Docker is up and running ](img/Figure_2.02_B18201.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.2 – Docker 已启动并运行](img/Figure_2.02_B18201.jpg)'
- en: Figure 2.2 – Docker is up and running
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.2 – Docker 已启动并运行
- en: 'If you’re about to configure `containerd` as the container runtime, you can
    use the following command and set the configuration to `default`:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你准备将`containerd`配置为容器运行时，可以使用以下命令并将配置设置为`default`：
- en: '[PRE8]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Restart `containerd` to make sure the changes take effect:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重启`containerd`以确保更改生效：
- en: '[PRE9]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If you want to know more about how to set up CRI-O as a runtime, please check
    out the following link: [https://kubernetes.io/docs/setup/production-environment/container-runtimes/#cri-o](https://kubernetes.io/docs/setup/production-environment/container-runtimes/#cri-o).
    It will show you how `containerd` serves as a container runtime in the context
    of Kubernetes.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解如何设置CRI-O作为运行时，请查看以下链接：[https://kubernetes.io/docs/setup/production-environment/container-runtimes/#cri-o](https://kubernetes.io/docs/setup/production-environment/container-runtimes/#cri-o)。该链接将展示`containerd`如何在Kubernetes上下文中作为容器运行时工作。
- en: Deployment tools
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署工具
- en: 'To bootstrap a Kubernetes cluster, we rely on the deployment tools. There are
    lots of useful tools on the market to help spin up a Kubernetes cluster, of which
    a lot of them are vendor-affinity. Here, we will cover what’s requested in the
    CKA exam. That’s the primary reason that we focus on upstream Kubernetes and these
    tools will help bootstrap a cluster on-premises. The following tools help you
    set up a Kubernetes cluster and we’ll cover the detailed instructions while working
    with each of them in the next chapter:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要引导一个Kubernetes集群，我们依赖于部署工具。市面上有很多有用的工具可以帮助启动一个Kubernetes集群，其中许多是与供应商相关的。在这里，我们将介绍CKA考试中要求的工具。这也是我们专注于上游Kubernetes的主要原因，这些工具将帮助我们在本地启动集群。以下工具将帮助你设置Kubernetes集群，我们将在下一章中详细介绍每个工具的使用方法：
- en: '`kubeadm` is the most important tool to help you crack the exam exercises.
    It helps install and set up the Kubernetes cluster with best practices. With `kubeadm`,
    you can provision a single node cluster and, more importantly, multi-node clusters.
    This is the first choice for most large organizations that want to manage their
    own Kubernetes cluster and use their own on-premises servers.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubeadm`是帮助你通过考试练习的最重要工具。它帮助安装并设置Kubernetes集群，采用最佳实践。使用`kubeadm`，你可以配置单节点集群，更重要的是，多节点集群。这是大多数希望管理自己Kubernetes集群并使用自有本地服务器的公司首选的工具。'
- en: '`minikube` is a popular local Kubernetes that can be provisioned on your local
    laptop or a **virtual machine** (**VM**). It’s very lightweight, focusing on making
    it easy to learn and testing Kubernetes quickly.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`minikube`是一个流行的本地Kubernetes，可以在你的本地笔记本电脑或**虚拟机**（**VM**）上进行配置。它非常轻量，专注于使学习Kubernetes变得简单，并能够快速进行测试。'
- en: '`kind` is similar to `minikube`. It focuses on provisioning local Kubernetes
    clusters and some simple CI scenarios and development. It runs local Kubernetes
    clusters using a Docker runtime – it can run as a single node Kubernetes cluster
    or a Kubernetes multi-node cluster. You can test lots of useful, simple scenarios
    with `kind`.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kind` 类似于 `minikube`，它专注于本地 Kubernetes 集群的配置以及一些简单的 CI 场景和开发。它使用 Docker 运行时运行本地
    Kubernetes 集群——可以运行单节点 Kubernetes 集群或 Kubernetes 多节点集群。你可以使用 `kind` 测试许多有用的简单场景。'
- en: Other tools
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他工具
- en: Some of the other tools are not covered in the CKA exam – however, they will
    still come in handy in your daily work as a Kubernetes administrator.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一些其他工具不在 CKA 考试中覆盖——但是，它们在你作为 Kubernetes 管理员的日常工作中仍然会非常有用。
- en: Helm
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Helm
- en: Helm is a management tool for managing packages of pre-configured Kubernetes
    objects in the form of charts – we call these Helm charts.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Helm 是一个管理工具，用于管理以图表形式预配置的 Kubernetes 对象包——我们称这些为 Helm 图表。
- en: 'To install `helm`, you can follow the following instructions for a Debian-based
    distribution such as Ubuntu 18.04:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 `helm`，你可以按照以下针对基于 Debian 的发行版（例如 Ubuntu 18.04）的说明进行操作：
- en: 'Update the `apt` package index:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 `apt` 包索引：
- en: '[PRE10]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Install the packages to use the Helm `apt` repository with the following command:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令安装 Helm `apt` 仓库的相关软件包：
- en: '[PRE11]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Make sure you update the `apt` package index with the new repository again
    and then install Helm using the `apt-get install` command:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保再次使用新的仓库更新 `apt` 包索引，然后使用 `apt-get install` 命令安装 Helm：
- en: '[PRE12]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Use the following Helm command to validate its successful installation:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下 Helm 命令验证其安装是否成功：
- en: '[PRE13]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You’ll see output similar to the following:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到类似于以下内容的输出：
- en: '![Figure 2.3 – Successful installation of Helm ](img/Figure_2.03_B18201.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.3 – Helm 安装成功](img/Figure_2.03_B18201.jpg)'
- en: Figure 2.3 – Successful installation of Helm
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.3 – Helm 安装成功
- en: 'To know more ways to install Helm, check out the following link: [https://helm.sh/docs/intro/install/](https://helm.sh/docs/intro/install/).'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多安装 Helm 的方法，请查看以下链接：[https://helm.sh/docs/intro/install/](https://helm.sh/docs/intro/install/)。
- en: Kompose
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Kompose
- en: Most people who work with Docker will know about Docker Compose. Docker Compose
    is a tool used to define and run the multi-container applications containerized
    by Docker. It also uses a YAML file to define the application specifications.
    As more and more people are moving away from purely using Docker Swarm or Docker
    Desktop to take advantage of the enterprise-scale container orchestration system,
    Kompose comes in handy as a conversion tool for Docker Compose to contain orchestrators
    such as Kubernetes – the same structure works for Redhat OpenShift too.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数使用 Docker 的人都知道 Docker Compose。Docker Compose 是一个用于定义和运行由 Docker 容器化的多容器应用的工具。它也使用
    YAML 文件来定义应用程序的规格。随着越来越多的人不再单纯使用 Docker Swarm 或 Docker Desktop，而是利用企业级的容器编排系统，Kompose
    成为一个有用的转换工具，将 Docker Compose 转换为 Kubernetes 等容器编排系统——同样的结构也适用于 Redhat OpenShift。
- en: 'You can install Kompose by running the following instructions on your Ubuntu
    18.04:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在 Ubuntu 18.04 上运行以下说明来安装 Kompose：
- en: 'Fetch the `kompose` binary:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取 `kompose` 二进制文件：
- en: '[PRE14]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then, you can fetch a `docker compose` example file from the official website
    and test the `kompose convert` command as follows:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，你可以从官方网站获取一个 `docker compose` 示例文件，并按照如下方式测试 `kompose convert` 命令：
- en: '[PRE15]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Your output will look similar to the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你的输出将类似于以下内容：
- en: '![Figure 2.4 – A kompose convert command translating Docker compose into Kubernetes-native
    YAML-defined files  ](img/Figure_2.04_B18201.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.4 – 一个 `kompose convert` 命令将 Docker compose 转换为 Kubernetes 本地的 YAML 定义文件](img/Figure_2.04_B18201.jpg)'
- en: Figure 2.4 – A kompose convert command translating Docker compose into Kubernetes-native
    YAML-defined files
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.4 – 一个 `kompose convert` 命令将 Docker compose 转换为 Kubernetes 本地的 YAML 定义文件
- en: 'Then, deploy those YAML files to your local Kubernetes cluster by using the
    following command:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，使用以下命令将这些 YAML 文件部署到本地 Kubernetes 集群：
- en: '[PRE16]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Your output will look similar to the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你的输出将类似于以下内容：
- en: '![Figure 2.5 – Kubernetes Pods up and running  ](img/Figure_2.05_B18201.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.5 – Kubernetes Pods 启动成功](img/Figure_2.05_B18201.jpg)'
- en: Figure 2.5 – Kubernetes Pods up and running
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.5 – Kubernetes Pods 启动成功
- en: The preceding screenshot shows the Redis Pods running in your Kubernetes cluster.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的截图显示了在 Kubernetes 集群中运行的 Redis Pods。
- en: The dashboard
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 仪表盘
- en: You can install a web-based **user interface** (**UI**) to your Kubernetes cluster.
    It not only displays the cluster status and shows what’s going on with the Kubernetes
    cluster but also allows you to deploy containerized applications, troubleshoot,
    and manage the cluster and all related resources in the cluster.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以为 Kubernetes 集群安装一个基于 Web 的**用户界面**（**UI**）。它不仅显示集群状态并展示 Kubernetes 集群的运行情况，还允许您部署容器化应用程序、进行故障排除，并管理集群及其相关资源。
- en: 'The following is a sample dashboard:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例控制面板：
- en: '![Figure 2.6 – The Kubernetes dashboard ](img/Figure_2.06_B18201.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.6 – Kubernetes 控制面板](img/Figure_2.06_B18201.jpg)'
- en: Figure 2.6 – The Kubernetes dashboard
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.6 – Kubernetes 控制面板
- en: The dashboard is sometimes handy for quick monitoring of the cluster states
    from the UI and user-friendly for collaborating with people who are not familiar
    with `kubectl` commands.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 控制面板有时对从UI快速监控集群状态很有帮助，且对不熟悉`kubectl`命令的人来说，界面友好，便于协作。
- en: Installing and configuring a Kubernetes cluster
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和配置 Kubernetes 集群
- en: This section focuses on the installation of the Kubernetes cluster and the related
    configurations for it. With a good understanding gained from [*Chapter 1*](B18201_01.xhtml#_idTextAnchor015),
    where you learned about the Kubernetes cluster architecture and Kubernetes toolings,
    you will perform the Kubernetes cluster installation the hard way with `minikube`
    and `kubeadm`, and then update the cluster version.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 本节重点介绍 Kubernetes 集群的安装及其相关配置。通过在[*第1章*](B18201_01.xhtml#_idTextAnchor015)中获得的良好理解，您已经了解了
    Kubernetes 集群架构和 Kubernetes 工具，接下来您将通过`minikube`和`kubeadm`来进行 Kubernetes 集群安装，并且更新集群版本。
- en: Note that using `minikube` to spin up a single node cluster is not covered in
    the CKA exam but it comes quite handy when you’d like to test out Kubernetes in
    your local machine. The same goes for using `kubeadm` to install a Kubernetes
    multi-node cluster, as well as setting up a **highly available** (**HA**) Kubernetes
    cluster.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，使用`minikube`启动单节点集群并不包含在CKA考试范围内，但它在你想在本地机器上测试 Kubernetes 时非常有用。同样，使用`kubeadm`安装
    Kubernetes 多节点集群，以及设置**高可用**（**HA**）Kubernetes 集群也不在考试范围内。
- en: We expect you to learn both ways while putting more focus on the hands-on lab
    working with `kubeadm`. Starting with the next section, we’ll walk you through
    the process of installing a new Kubernetes cluster and configuration.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望您通过两种方式学习，但更侧重于通过`kubeadm`进行的动手实验。从下一个章节开始，我们将带您逐步完成安装新的 Kubernetes 集群及其配置的过程。
- en: Prerequisites for installing a Kubernetes cluster
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Kubernetes 集群的先决条件
- en: 'To get started, we need to make sure your local machine meets the following
    technical requirements for both `minikube` and `kubeadm`:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始，我们需要确保您的本地机器满足以下技术要求，以便同时支持`minikube`和`kubeadm`：
- en: A compatible Linux host – we recommend a Debian-based Linux distribution such
    as Ubuntu 18.04 or later.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个兼容的 Linux 主机 – 我们推荐使用基于 Debian 的 Linux 发行版，如 Ubuntu 18.04 或更高版本。
- en: Make sure your host machine has at least 2 GB RAM, 2 CPU cores, and about 20
    GB of free disk space.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保您的主机至少有 2 GB 内存、2 个 CPU 核心，以及大约 20 GB 的空闲磁盘空间。
- en: Internet connectivity, as you will need to download dependencies throughout
    the process.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络连接：因为在整个过程中，您需要下载依赖项。
- en: A container runtime is needed prior to creating a Kubernetes cluster. During
    the cluster creation process, the Kubernetes cluster automatically detects an
    installed container runtime by scanning through the Unix domain sockets, if there
    are any, within your local machine. The **Unix domain socket** uses **Transmission
    Control Protocol** (**TCP**) as the underlying transport protocol. It is used
    for bidirectional data communication happening on the same operating system. We
    talked about how to install and configure container runtime in [*Chapter 1*](B18201_01.xhtml#_idTextAnchor015)
    – please follow those instructions.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在创建 Kubernetes 集群之前，需要安装容器运行时。在集群创建过程中，Kubernetes 集群会通过扫描本地机器中的 Unix 域套接字（如果有的话）来自动检测已安装的容器运行时。**Unix
    域套接字**使用**传输控制协议**（**TCP**）作为底层传输协议。它用于同一操作系统上双向数据通信。我们在[*第1章*](B18201_01.xhtml#_idTextAnchor015)中讨论了如何安装和配置容器运行时，请按照其中的说明操作。
- en: Before we get started, let’s get the following checklist done.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，让我们完成以下清单：
- en: Checking whether swap is disabled
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查是否禁用了 swap
- en: 'For `kubeadm`, we have to disable `swap` in order to make `kubelet` work correctly,
    you can disable `swap` by doing the following:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`kubeadm`，我们必须禁用`swap`才能使`kubelet`正常工作，您可以通过以下步骤禁用`swap`：
- en: '[PRE17]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Checking the container runtime
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查容器运行时
- en: 'You can check the path to the Unix domain socket as instructed to verify your
    container runtime – this path is detectable by Kubernetes. Following the instructions
    to install Docker covered earlier in this chapter, you will find the Unix domain
    path under the `/var/run/dockershim.sock` path once you have installed the `kubelet`
    agent. To validate that Docker has been installed successfully, run the `docker
    ps` command:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以按照指示检查 Unix 域套接字的路径，以验证你的容器运行时 —— 这个路径可以被 Kubernetes 检测到。按照本章前面讲解的安装 Docker
    的指示，安装 `kubelet` 代理后，你会在 `/var/run/dockershim.sock` 路径下找到 Unix 域套接字路径。要验证 Docker
    是否已成功安装，可以运行 `docker ps` 命令：
- en: '[PRE18]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The outcome of the following command is as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令的输出结果如下：
- en: '![Figure 2.7 – Checking the Docker runtime ](img/Figure_2.07_B18201.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.7 – 检查 Docker 运行时](img/Figure_2.07_B18201.jpg)'
- en: Figure 2.7 – Checking the Docker runtime
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.7 – 检查 Docker 运行时
- en: 'If you have installed `containerd` as the container runtime, which we covered
    earlier in this chapter under the *Container runtimes* section, you will find
    the Unix domain path under the `/run/containerd/containerd.sock` path as the following:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经安装了 `containerd` 作为容器运行时，正如本章前面在*容器运行时*部分中讲解的那样，你会在 `/run/containerd/containerd.sock`
    路径下找到 Unix 域套接字路径，具体如下：
- en: '![Figure 2.8 – Checking the containerd runtime ](img/Figure_2.08_B18201.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.8 – 检查 containerd 运行时](img/Figure_2.08_B18201.jpg)'
- en: Figure 2.8 – Checking the containerd runtime
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.8 – 检查 containerd 运行时
- en: '`kubeadm` picks `docker` over `containerd` as the container runtime when both
    the `docker` and `containerd` runtimes are detected. At the time of writing, as
    announced at the beginning of Jan 2022, Kubernetes is removing `dockershim` in
    the upcoming v1.24 release. This is not surprising at all since it was first announced
    in Dec 2020 and Kubernetes’ built-in `dockershim` component was deprecated in
    Kubernetes v1.20\. In most cases, it won’t affect the applications running in
    Kubernetes or the build process of the containerized applications if the following
    conditions are satisfied:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当检测到 `docker` 和 `containerd` 两种容器运行时，`kubeadm` 会选择 `docker` 而非 `containerd`
    作为容器运行时。截止到写作本文时（2022年1月初宣布），Kubernetes 将在即将发布的 v1.24 版本中移除 `dockershim`。这并不令人惊讶，因为这一消息早在
    2020年12月就已宣布，Kubernetes 内置的 `dockershim` 组件在 Kubernetes v1.20 中已被弃用。在大多数情况下，只要满足以下条件，它不会影响
    Kubernetes 中运行的应用程序或容器化应用程序的构建过程：
- en: There’s no privileged root permission applied at the container level while it
    executes inside the pods using Docker commands and it restarts `docker.service`
    with `systemctl`
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在容器内部执行 Docker 命令时，容器级别不会应用特权的 root 权限，并且它使用 `systemctl` 重启 `docker.service`
- en: Docker configuration files such as /`etc/docker/daemon.json` are modified
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 配置文件，如 /`etc/docker/daemon.json` 已被修改
- en: 'At this point, the official Kubernetes documentation has published this article
    to help users check whether `dockershim` deprecation will impact them. Check it
    out here for more ways to check the dependencies on Docker: [https://kubernetes.io/docs/tasks/administer-cluster/migrating-from-dockershim/check-if-dockershim-deprecation-affects-you/#find-docker-dependencies](https://kubernetes.io/docs/tasks/administer-cluster/migrating-from-dockershim/check-if-dockershim-deprecation-affects-you/#find-docker-dependencies).'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，Kubernetes 官方文档已经发布了这篇文章，帮助用户检查 `dockershim` 弃用是否会影响他们。点击此处查看更多关于如何检查 Docker
    依赖的方式：[https://kubernetes.io/docs/tasks/administer-cluster/migrating-from-dockershim/check-if-dockershim-deprecation-affects-you/#find-docker-dependencies](https://kubernetes.io/docs/tasks/administer-cluster/migrating-from-dockershim/check-if-dockershim-deprecation-affects-you/#find-docker-dependencies)。
- en: Checking whether the ports required by Kubernetes are opened
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查 Kubernetes 所需的端口是否已开放
- en: 'We also need to check if certain ports are open on your local machines prior
    to installing `kubeadm`. You can use the `telnet` command to do so:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装 `kubeadm` 之前，我们还需要检查本地机器上是否打开了某些端口。你可以使用 `telnet` 命令来检查：
- en: '[PRE19]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You can check the official documentation to make sure the ports and protocols
    used by Kubernetes are available by visiting this link: [https://kubernetes.io/docs/reference/ports-and-protocols/](https://kubernetes.io/docs/reference/ports-and-protocols/).'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以查看官方文档，确保 Kubernetes 使用的端口和协议可用，访问此链接：[https://kubernetes.io/docs/reference/ports-and-protocols/](https://kubernetes.io/docs/reference/ports-and-protocols/)。
- en: Ensuring iptables sees bridged traffic
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 确保 iptables 看到桥接流量
- en: 'Make sure your Linux node’s `iptables` is correctly configured to be able to
    watch the bridged traffic. You can set the `net.bridge.bridge-nf-call-iptables`
    parameter to a value of `1`, just as we did here:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你的 Linux 节点的 `iptables` 配置正确，以便能够监控桥接流量。你可以将 `net.bridge.bridge-nf-call-iptables`
    参数设置为 `1`，就像我们在这里所做的那样：
- en: '[PRE20]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'You’ll see an output similar to the following:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到类似如下的输出：
- en: '![Figure 2.9 – iptables watching bridged traffic ](img/Figure_2.09_B18201.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.9 – iptables 监控桥接流量](img/Figure_2.09_B18201.jpg)'
- en: Figure 2.9 – iptables watching bridged traffic
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.9 – iptables 监控桥接流量
- en: The preceding screenshot shows the values in `iptables` have been updated.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的截图显示 `iptables` 中的值已更新。
- en: Checking whether you have installed kubectl
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查是否已安装 kubectl
- en: '`kubectl` is the command-line utility that you can use to talk to the Kubernetes
    cluster. Using the `kubectl version` command, you can verify whether `kubectl`
    has been successfully installed:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`kubectl` 是你可以用来与 Kubernetes 集群交互的命令行工具。使用 `kubectl version` 命令，你可以验证是否成功安装了
    `kubectl`：'
- en: '[PRE21]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'A successful installation will show an output similar to the following:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 成功安装将显示类似以下的输出：
- en: '![Figure 2.10 – Checking the kubectl version ](img/Figure_2.10_B18201.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.10 – 检查 kubectl 版本](img/Figure_2.10_B18201.jpg)'
- en: Figure 2.10 – Checking the kubectl version
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.10 – 检查 kubectl 版本
- en: Make sure you have completed the checklist in this section before moving on
    to the next section. These tools and requirements are essential and you may use
    them accordingly in the future.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续下一个部分之前，确保你已完成本节中的检查清单。这些工具和要求是必要的，你可以在未来根据需要使用它们。
- en: Using minikube to set up a single node Kubernetes cluster
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 minikube 设置单节点 Kubernetes 集群
- en: Creating a Kubernetes cluster using `minikube` is the easiest way to spin up
    a local Kubernetes cluster and it can be achieved in a matter of minutes. Here’s
    what you need to do.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `minikube` 创建 Kubernetes 集群是启动本地 Kubernetes 集群的最简单方法，并且可以在几分钟内完成。以下是你需要做的：
- en: Installing minikube
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 minikube
- en: 'Follow these steps to install `minikube`:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤安装 `minikube`：
- en: 'On your local or cloud-based Linux VM, use the `curl` command to retrieve the
    `minikube` binary, and then install it under `/usr/local/bin/minikube` as follows:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本地或云端的 Linux 虚拟机上，使用 `curl` 命令获取 `minikube` 二进制文件，然后将其安装到 `/usr/local/bin/minikube`
    下，如下所示：
- en: '[PRE22]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You can go to `/usr/local/bin/minikube` to check whether you have successfully
    installed the `minikube` binary before moving to the next steps or you can also
    check by typing the following command into the terminal:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在继续下一步之前，你可以前往 `/usr/local/bin/minikube` 检查是否成功安装了 `minikube` 二进制文件，或者你也可以通过在终端中输入以下命令进行检查：
- en: '[PRE23]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Using minikube to provision a single node Kubernetes cluster
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 minikube 配置单节点 Kubernetes 集群
- en: 'Follow these steps to use minikube to provision a single node Kubernetes cluster:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤使用 minikube 来配置单节点 Kubernetes 集群：
- en: 'When using `minikube` to provision a single node Kubernetes cluster, you can
    simply use the `minikube start` command:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `minikube` 配置单节点 Kubernetes 集群时，你可以简单地使用 `minikube start` 命令：
- en: '[PRE24]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'You can also set up the CPU cores and memory to start your `minikube` cluster
    by adding a `--memory` and `--cpus` flag as follows:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以通过添加 `--memory` 和 `--cpus` 标志来设置 CPU 核心和内存，启动你的 `minikube` 集群，如下所示：
- en: '[PRE25]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'After the command is executed, it kicks off the `minikube` cluster provisioning
    process. You’ll see an output similar to the following:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 执行命令后，它将启动 `minikube` 集群配置过程。你将看到类似如下的输出：
- en: '![Figure 2.11 – Spinning up a minikube cluster ](img/Figure_2.11_B18201.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.11 – 启动 minikube 集群](img/Figure_2.11_B18201.jpg)'
- en: Figure 2.11 – Spinning up a minikube cluster
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.11 – 启动 minikube 集群
- en: By the end, you will see a message telling you we’re ready to use the `minikube`
    Kubernetes cluster (as concluded in the preceding screenshot).
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你将看到一条消息，告诉你我们已经准备好使用 `minikube` Kubernetes 集群（如前面的截图所示）。
- en: Verifying the minikube cluster installation
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 验证 minikube 集群安装
- en: 'Your `minikube` cluster contains one node that serves as both the control plane
    and worker node. That means that once you have it set up, you can start to schedule
    workloads in your local Kubernetes cluster. You can use the following command
    to see whether the node is ready to use:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 你的 `minikube` 集群包含一个节点，既充当控制平面，又充当工作节点。这意味着，一旦设置好，你就可以开始在本地 Kubernetes 集群中调度工作负载。你可以使用以下命令查看该节点是否准备好使用：
- en: '[PRE26]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'You can also use the shortcut of this command:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用该命令的快捷方式：
- en: '[PRE27]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The output will show you the following:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将显示如下内容：
- en: The status of the node and whether it’s ready to use
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节点的状态及其是否准备好使用
- en: The role of that node
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节点的角色
- en: The Kubernetes version
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes版本
- en: The age of that node since it’s been deployed
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节点自部署以来的时间
- en: 'Here is the output:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出结果：
- en: '![Figure 2.12 – Checking the Docker runtime ](img/Figure_2.12_B18201.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![图2.12 – 检查Docker运行时](img/Figure_2.12_B18201.jpg)'
- en: Figure 2.12 – Checking the Docker runtime
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.12 – 检查Docker运行时
- en: Configuring the minikube cluster
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置minikube集群
- en: If you’d like to configure the `minikube` cluster without reprovisioning a new
    one, you need to stop the `minikube` cluster using the `minikube stop` command.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望配置`minikube`集群而不重新创建一个新的集群，你需要使用`minikube stop`命令停止`minikube`集群。
- en: The `minikube config set` command will help you apply the settings such as CPU
    and memory that you’ll allocate to the `minikube` cluster. After configuring the
    `minikube` cluster, you need to start the `minikube` cluster and from there, you’ll
    be working on the cluster with the new configurations.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`minikube config set`命令将帮助你应用分配给`minikube`集群的CPU和内存等设置。在配置`minikube`集群后，你需要启动`minikube`集群，之后你将使用新配置的集群进行操作。'
- en: 'Here’s the process to configure `minikube` using more memory and CPUs:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用更多内存和CPU配置`minikube`的过程：
- en: '[PRE28]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: After that, you can continue to play with the `minikube` cluster. In case you
    have any questions about how the commands work, use the `minikube config - - help`
    command to get help.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，你可以继续操作`minikube`集群。如果你对命令的使用有任何疑问，可以使用`minikube config --help`命令获取帮助。
- en: Deleting a minikube cluster
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除minikube集群
- en: 'The following command deletes all local Kubernetes clusters and all profiles:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令会删除所有本地Kubernetes集群和所有配置文件：
- en: '[PRE29]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'What you learned from this section can be used repeatedly every time you need
    a local Kubernetes cluster. You can replicate what you have learned from this
    section for quick testing of the latest Kubernetes release for most of the new
    features featured in the release note: [https://github.com/kubernetes/kubernetes/releases](https://github.com/kubernetes/kubernetes/releases).'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 你从本节学到的内容可以在每次需要本地Kubernetes集群时反复使用。你可以复制你在本节学到的内容，快速测试最新Kubernetes版本中发布说明中的大多数新功能：[https://github.com/kubernetes/kubernetes/releases](https://github.com/kubernetes/kubernetes/releases)。
- en: However, most enterprise-grade environments will not be satisfied with a single
    node cluster. They are mostly multi-node setups. In the next section, we will
    dive into creating a Kubernetes multi-node cluster with `kubeadm`.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，大多数企业级环境对单节点集群并不满足需求。它们大多是多节点设置。在下一节中，我们将深入探讨如何使用`kubeadm`创建一个Kubernetes多节点集群。
- en: Using kubeadm to install a basic Kubernetes cluster
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用kubeadm安装基本Kubernetes集群
- en: 'In this section, we will create a multi-node Kubernetes cluster using `kubeadm`.
    The following are the steps we need to achieve the goal:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用`kubeadm`创建一个多节点的Kubernetes集群。以下是我们需要执行的步骤：
- en: Install `kubeadm`.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装`kubeadm`。
- en: Bootstrap a master node where your control plane will be located
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动一个主节点，控制平面将位于该节点
- en: Install the network plugins (we will get to the detailed supported plugins later
    in this chapter and use Calico as an example in that section).
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装网络插件（我们将在本章后面详细介绍支持的插件，并在该部分使用Calico作为示例）。
- en: Bootstrap the worker nodes.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动工作节点。
- en: Join the worker nodes to the control plane.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将工作节点加入控制平面。
- en: Before getting started, you need to make sure your master node meets all the
    technical requirements listed in this chapter.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，你需要确保你的主节点满足本章列出的所有技术要求。
- en: 'We’ll deploy a basic Kubernetes cluster by going through the steps described
    in this section, as shown in *Figure 2.7*:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过本节描述的步骤部署一个基本的Kubernetes集群，如*图2.7*所示：
- en: '![Figure 2.13 – The workflow of using kubeadm to spin up a basic Kubernetes
    cluster ](img/Figure_2.13_B18201.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![图2.13 – 使用kubeadm启动基本Kubernetes集群的工作流程](img/Figure_2.13_B18201.jpg)'
- en: Figure 2.13 – The workflow of using kubeadm to spin up a basic Kubernetes cluster
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.13 – 使用kubeadm启动基本Kubernetes集群的工作流程
- en: 'The Kubernetes cluster will be similar to the architecture featured in *Figure
    2.14*:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes集群将类似于*图2.14*中展示的架构：
- en: '![Figure 2.14 – A standard multi-node Kubernetes cluster  ](img/Figure_2.14_B18201.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![图2.14 – 标准的多节点Kubernetes集群](img/Figure_2.14_B18201.jpg)'
- en: Figure 2.14 – A standard multi-node Kubernetes cluster
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.14 – 标准的多节点Kubernetes集群
- en: 'From now on, you can follow these instructions to create a multi-node Kubernetes
    cluster. To create a Kubernetes cluster using `kubeadm`, its default settings
    conform to best practices of setting up a standard Kubernetes cluster. This set
    of best practices is encapsulated as Kubernetes Conformance tests. Check out the
    details about the Kubernetes Conformance Program here: [https://kubernetes.io/blog/2017/10/software-conformance-certification/](https://kubernetes.io/blog/2017/10/software-conformance-certification/).'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，你可以按照这些指示创建一个多节点的Kubernetes集群。要使用`kubeadm`创建Kubernetes集群，其默认设置符合设置标准Kubernetes集群的最佳实践。这套最佳实践被封装为Kubernetes一致性测试。查看有关Kubernetes一致性计划的详细信息：[https://kubernetes.io/blog/2017/10/software-conformance-certification/](https://kubernetes.io/blog/2017/10/software-conformance-certification/)。
- en: Installing kubeadm
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装kubeadm
- en: 'We introduced setting up `docker` or `containerd` as the container runtime
    – we can then install `kubeadm` by following these instructions:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我们介绍了设置`docker`或`containerd`作为容器运行时 —— 然后，我们可以按照以下说明安装`kubeadm`：
- en: 'Update the `apt` package index, add the Google Cloud public signing key, and
    set up the Kubernetes `apt` repository by running the following instructions:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令，更新`apt`包索引，添加谷歌云公共签名密钥，并设置Kubernetes的`apt`仓库：
- en: '[PRE30]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Start by updating the `ap`t package index and then install `kubelet` and `kubeadm`:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先更新`apt`包索引，然后安装`kubelet`和`kubeadm`：
- en: '[PRE31]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Here, if you haven’t installed `kubectl` yet, you can also install `kubelet`,
    `kubeadm`, and `kubectl` in one go:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你还没有安装`kubectl`，你也可以一步安装`kubelet`、`kubeadm`和`kubectl`：
- en: '[PRE32]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Use the following command to pin the version of the utilities you’re installing:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令来固定你正在安装的工具版本：
- en: '[PRE33]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The output shows those packages are set on hold as shown in *Figure 2.9*:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示那些包已被设置为保持，如*图 2.9*所示：
- en: '![Figure 2.15 – Checking the containerd runtime ](img/Figure_2.15_B18201.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.15 – 检查containerd运行时](img/Figure_2.15_B18201.jpg)'
- en: Figure 2.15 – Checking the containerd runtime
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.15 – 检查containerd运行时
- en: 'From here, you can check whether `kubeadm` has been successfully installed
    by typing `kubeadm` into the command shell. Here’s the output of the command:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从这里，你可以通过在命令行中输入`kubeadm`来检查`kubeadm`是否已成功安装。以下是该命令的输出：
- en: '![Figure 2.16 – Checking the containerd runtime ](img/Figure_2.16_B18201.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.16 – 检查containerd运行时](img/Figure_2.16_B18201.jpg)'
- en: Figure 2.16 – Checking the containerd runtime
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.16 – 检查containerd运行时
- en: 'To verify that `kubelet` is present on the master node, you can use the `which
    kubelet` command, which returns the location of the `kubelet` agent:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要验证`kubelet`是否存在于主节点上，你可以使用`which kubelet`命令，该命令会返回`kubelet`代理的位置：
- en: '![Figure 2.17 – Checking kubelet’s presence ](img/Figure_2.17_B18201.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.17 – 检查kubelet是否存在](img/Figure_2.17_B18201.jpg)'
- en: Figure 2.17 – Checking kubelet’s presence
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.17 – 检查kubelet是否存在
- en: As you have successfully installed `kubeadm` and `kubelet`, you can now start
    initiating a control plane.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你已经成功安装了`kubeadm`和`kubelet`，现在可以开始初始化控制平面。
- en: 'Here, we will show an optional operation where you can use `images pull` to
    pre-pull the images that are required to set up the Kubernetes cluster:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将展示一个可选操作，你可以使用`images pull`来预拉取设置Kubernetes集群所需的镜像：
- en: '[PRE34]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The output should be similar to the following screenshot:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该类似于以下截图：
- en: '![Figure 2.18 – Pre-pulling the images ](img/Figure_2.18_B18201.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.18 – 预拉取镜像](img/Figure_2.18_B18201.jpg)'
- en: Figure 2.18 – Pre-pulling the images
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.18 – 预拉取镜像
- en: Note that the preceding operation is optional – you’re free to skip it and go
    straight to the next section.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，之前的操作是可选的 —— 你可以跳过它，直接进入下一节。
- en: Bootstrapping a master node
  id: totrans-222
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引导主节点
- en: 'You can use the `kubeadm init` command to initiate the control plane as a regular
    user and gain `sudo` privileges from your master node machine by using the following
    command:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`kubeadm init`命令以普通用户身份初始化控制平面，并通过以下命令获得来自主节点机器的`sudo`权限：
- en: '[PRE35]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'You will see an output similar to the following:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到类似于以下的输出：
- en: '![Figure 2.19 – The control plane initiated successfully ](img/Figure_2.19_B18201.jpg)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.19 – 控制平面成功启动](img/Figure_2.19_B18201.jpg)'
- en: Figure 2.19 – The control plane initiated successfully
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.19 – 控制平面成功启动
- en: 'After your Kubernetes `control-plane` is initialized successfully, you can
    execute the following commands to configure `kubectl`:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kubernetes的`control-plane`成功初始化后，你可以执行以下命令来配置`kubectl`：
- en: '[PRE36]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'If you’re a root user, you can use the following:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是root用户，你可以使用以下命令：
- en: '[PRE37]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Then, the next step is to deploy a pod network to the Kubernetes cluster.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，步骤是向Kubernetes集群部署pod网络。
- en: Installing the networking plugins
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装网络插件
- en: In order for the pods to talk to each other, you can deploy the networking by
    enabling **Container Network Interface** (**CNI**) plugin. The CNI plugins conform
    to the CNI specification, and as per the official Kubernetes documentation, Kubernetes
    follows the v0.4.0 release of the CNI specification.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让pods之间可以互相通信，你可以通过启用**容器网络接口**（**CNI**）插件来部署网络。CNI插件符合CNI规范，根据官方Kubernetes文档，Kubernetes遵循CNI规范的v0.4.0版本。
- en: 'There’s a wide range of networking plugins working with Kubernetes – we will
    dive into Kubernetes networking in [*Chapter 7*](B18201_07.xhtml#_idTextAnchor235),
    *Demystifying Kubernetes Networking*. Here are some add-ons options:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多网络插件可以与Kubernetes一起使用——我们将在[*第七章*](B18201_07.xhtml#_idTextAnchor235)《解密Kubernetes网络》中深入探讨Kubernetes网络。以下是一些附加选项：
- en: Calico
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Calico
- en: Flannel
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Flannel
- en: Weave Net
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Weave Net
- en: 'For all the possible options acknowledged by the Kubernetes community, please
    check out the official documentation: [https://kubernetes.io/docs/concepts/cluster-administration/addons/](https://kubernetes.io/docs/concepts/cluster-administration/addons/).
    You can check out the links from this page to get the installation instructions
    for the respective options.'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Kubernetes社区认可的所有可能选项，请查看官方文档：[https://kubernetes.io/docs/concepts/cluster-administration/addons/](https://kubernetes.io/docs/concepts/cluster-administration/addons/)。你可以通过该页面上的链接获取相应选项的安装说明。
- en: 'Here, we’re going to use the Calico plugin as the overlay network for our Kubernetes
    cluster. It is a Kubernetes CNI networking provider and it allows you to write
    up the network policies, which means that it supports a set of networking options
    to suit your different requirements. Here’s how we’ll approach it:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将使用Calico插件作为Kubernetes集群的覆盖网络。它是一个Kubernetes CNI网络提供者，允许你编写网络策略，这意味着它支持一系列的网络选项，以满足不同的需求。我们将按以下方式进行操作：
- en: 'Deploy the Tigera Calico `kubectl create -f` command:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署Tigera Calico的`kubectl create -f`命令：
- en: '[PRE38]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'You can use the `watch` command to monitor the pod status in the process:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以使用`watch`命令来监视pod状态：
- en: '[PRE39]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Alternatively, use the following alternative command:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，可以使用以下替代命令：
- en: '[PRE40]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Now, you can see the pods have a `Running` status:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以看到pods的状态为`Running`：
- en: '![Figure 2.20 – The control plane initiated successfully ](img/Figure_2.20_B18201.jpg)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![图2.20 – 控制平面已成功启动](img/Figure_2.20_B18201.jpg)'
- en: Figure 2.20 – The control plane initiated successfully
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.20 – 控制平面已成功启动
- en: 'For the Kubernetes cluster created by `kubeadm`, there’s a taint by default
    for master nodes. Therefore, we need to remove taints so that the master node
    is available to schedule pods. To remove the taint, you can use the following
    command:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于通过`kubeadm`创建的Kubernetes集群，主节点默认会有污点。因此，我们需要移除污点，以便主节点可以调度pods。要移除污点，可以使用以下命令：
- en: '[PRE41]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The following screenshot shows that the taint on the master node has been successfully
    removed:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示，主节点上的污点已成功移除：
- en: '![Figure 2.21 – Removing the taint on the master node successfully ](img/Figure_2.21_B18201.jpg)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![图2.21 – 成功移除主节点上的污点](img/Figure_2.21_B18201.jpg)'
- en: Figure 2.21 – Removing the taint on the master node successfully
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.21 – 成功移除主节点上的污点
- en: 'You can use the following command to check out the current nodes that are available:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以使用以下命令查看当前可用的节点：
- en: '[PRE42]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'To get more information from the node, you can use the following command:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要获取更多关于节点的信息，可以使用以下命令：
- en: '[PRE43]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The following screenshot shows the sample output:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了示例输出：
- en: '![Figure 2.22 – The Kubernetes node status ](img/Figure_2.22_B18201.jpg)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
  zh: '![图2.22 – Kubernetes节点状态](img/Figure_2.22_B18201.jpg)'
- en: Figure 2.22 – The Kubernetes node status
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.22 – Kubernetes节点状态
- en: From the preceding command output, you can see the Kubernetes node is operational
    after enabling the CNI networking and it has been assigned an internal IP address.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 从之前的命令输出中，可以看到在启用CNI网络后，Kubernetes节点已经正常运行，并且分配了一个内部IP地址。
- en: Bootstrapping the worker nodes
  id: totrans-263
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启动工作节点
- en: To add more worker nodes to the Kubernetes cluster, we will SSH to the client
    machine, and make sure the worker nodes meet the same technical requirements as
    the master node. Check out the *Prerequisites for installing a Kubernetes cluster*
    section of this chapter and refer to the information on `kubeadm` for more details.
    Make sure you have installed the container runtime and `kubeadm`, although `kubectl`
    is optional for worker nodes since we usually use the master node for management.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 要将更多工作节点添加到 Kubernetes 集群中，我们将通过 SSH 连接到客户端机器，并确保工作节点满足与主节点相同的技术要求。请查看本章中的*安装
    Kubernetes 集群的先决条件*部分，并参考 `kubeadm` 相关信息获取更多详细信息。确保已经安装了容器运行时和`kubeadm`，尽管对于工作节点来说，`kubectl`
    是可选的，因为我们通常使用主节点进行管理。
- en: Joining the worker nodes to the control plane
  id: totrans-265
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将工作节点加入控制平面
- en: We can go ahead with installing `kubeadm` for the master node after making sure
    that your worker nodes and local environment meet the technical requirements that
    we set, as we mentioned earlier in this section. As introduced in [*Chapter 1*](B18201_01.xhtml#_idTextAnchor015),
    *Kubernetes Overview*, the worker nodes are where your containerized workloads
    are up and running.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 在确保工作节点和本地环境满足我们之前设定的技术要求后，您可以继续为主节点安装`kubeadm`，正如本节早些时候提到的那样。正如在[*第 1 章*](B18201_01.xhtml#_idTextAnchor015)，《Kubernetes
    概述》中介绍的那样，工作节点是容器化工作负载运行的地方。
- en: 'You can use the following command to join the worker nodes to the Kubernetes
    cluster. This command can be used repeatedly each time you have to join new worker
    nodes:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下命令将工作节点加入 Kubernetes 集群。每次您需要加入新的工作节点时，都可以重复使用此命令：
- en: '[PRE44]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'You can actually go back and copy the output of the master node control plane,
    which would look similar to the following sample command:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 您实际上可以返回并复制主节点控制平面的输出，输出内容与以下示例命令类似：
- en: '[PRE45]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: You can use the preceding command to join the worker node to the control plane
    and set up your Kubernetes cluster with multiple worker nodes.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用前述命令将工作节点加入控制平面，并使用多个工作节点设置您的 Kubernetes 集群。
- en: Setting up a highly available cluster with kubeadm
  id: totrans-272
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 kubeadm 设置高可用集群
- en: 'In [*Chapter 1*](B18201_01.xhtml#_idTextAnchor015), *Kubernetes Overview*,
    we introduced the cluster architecture, which gives us two options: setting up
    a single node Kubernetes cluster for dev/test quick testing or setting up a multi-node
    Kubernetes cluster for more professional use, or even use in production. A standard
    configuration would be one master with multiple worker nodes. As we stated in
    the previous chapter, the Kubernetes master node is where the control plane resides.
    In the event of a master node going down, either the containerized workloads up
    and running in the worker nodes will still keep running until the worker node
    is off the grid for some reason or there are no available master nodes, meaning
    no new workloads will be scheduled to the worker node.'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第 1 章*](B18201_01.xhtml#_idTextAnchor015)，《Kubernetes 概述》中，我们介绍了集群架构，为我们提供了两种选择：设置单节点
    Kubernetes 集群用于开发/测试的快速测试，或设置多节点 Kubernetes 集群用于更专业的用途，甚至用于生产环境。标准配置通常是一个主节点和多个工作节点。正如我们在上一章中提到的，Kubernetes
    主节点是控制平面所在的位置。如果主节点宕机，容器化工作负载仍会在工作节点上运行，直到工作节点因某些原因下线，或者没有可用的主节点，这意味着不会有新的工作负载被调度到工作节点。
- en: 'There are two options available to build a HA Kubernetes cluster:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种可用选项来构建高可用性（HA）Kubernetes 集群：
- en: '**Building multiple master nodes**: This is the option where the control plane
    nodes and etcd members co-exist in the same master nodes. *Figure 2.16* shows
    the stacked etcd topology:'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建多个主节点**：这是控制平面节点和 etcd 成员共同存在于同一主节点中的选项。*图 2.16* 显示了堆叠的 etcd 拓扑结构：'
- en: '![Figure 2.23 – A stacked etcd topology for a HA kubeadm cluster ](img/Figure_2.23_B18201.jpg)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.23 – 高可用 kubeadm 集群的堆叠 etcd 拓扑结构](img/Figure_2.23_B18201.jpg)'
- en: Figure 2.23 – A stacked etcd topology for a HA kubeadm cluster
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.23 – 高可用 kubeadm 集群的堆叠 etcd 拓扑结构
- en: This topology makes the cluster more resilient compared to the basic Kubernetes
    cluster architecture that we built in this chapter, thanks to the redundancy of
    the master node. In case one master node goes down, it’s easy to switch to another
    available master node to ensure the health of the entire Kubernetes cluster.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 与本章中构建的基本 Kubernetes 集群架构相比，这种拓扑结构使集群更加具有弹性，这要归功于主节点的冗余性。如果一个主节点宕机，您可以轻松切换到另一个可用的主节点，以确保整个
    Kubernetes 集群的健康。
- en: However, in some cases where we need to manage the cluster and replicate the
    cluster information, the external etcd typology comes in.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在一些需要管理集群并复制集群信息的情况下，外部etcd拓扑结构会派上用场。
- en: '`kubeadm` HA topology architecture for an external etcd cluster is shown in
    *Figure 2.24*:'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubeadm`外部etcd集群的HA拓扑架构如*图2.24*所示：'
- en: '![Figure 2.24 – The topology for an external etcd HA kubeadm cluster ](img/Figure_2.24_B18201.jpg)'
  id: totrans-281
  prefs: []
  type: TYPE_IMG
  zh: '![图2.24 – 外部etcd HA kubeadm集群的拓扑结构](img/Figure_2.24_B18201.jpg)'
- en: Figure 2.24 – The topology for an external etcd HA kubeadm cluster
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.24 – 外部etcd HA kubeadm集群的拓扑结构
- en: As shown in *Figure 2.24*, the external etcd is a cluster and it communicates
    with the API server of each control plane. In the event of the control plane node
    going down, we won’t lose all the information stored in the etcd store. It also
    makes the control plane more decoupled and manageable, as we only need to add
    more control plane nodes. A loss of the control plane node won’t be as impactful
    as it would with the stacked etcd topology.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 如*图2.24*所示，外部etcd是一个集群，并与每个控制平面的API服务器进行通信。如果控制平面节点发生故障，我们不会丢失存储在etcd中的所有信息。它还使控制平面更加解耦和可管理，因为我们只需添加更多的控制平面节点。控制平面节点的丧失将不会像堆叠etcd拓扑结构中那样产生较大影响。
- en: Summary
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter covers the very first job for most Kubernetes administrators who
    are setting up a Kubernetes cluster with a single worker node or with multiple
    worker nodes. The various tools introduced in this chapter will help your daily
    routine at work beyond the exam. Nevertheless, this is also one of the most time-consuming
    tasks in the CKA exam. Practice, practice, and more practice will help you get
    the hang of it. Knowing the HA topology for a Kubernetes cluster will also help
    you address the requirements of the organization that you’ll be working for as
    a Kubernetes administrator. As you master the setup process for a basic Kubernetes
    cluster, it will become easier to apply your skills to different typologies.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了大多数Kubernetes管理员的首要任务，他们正在设置一个具有单个工作节点或多个工作节点的Kubernetes集群。本章介绍的各种工具将帮助你在工作中的日常操作，超越考试的需求。然而，这也是CKA考试中最耗时的任务之一。练习、练习、再练习将帮助你掌握它。了解Kubernetes集群的HA拓扑结构也将帮助你满足作为Kubernetes管理员在组织中的需求。当你掌握了基本Kubernetes集群的设置过程后，将更容易将你的技能应用于不同的拓扑结构。
- en: In the next chapter, we’ll talk about Kubernetes cluster maintenance, including
    some important topics such as upgrades to Kubernetes components, which is quite
    an essential task in the daily work of a Kubernetes administrator. Touching on
    external etcd typology in this chapter is just a start, as we’ll dive into more
    interesting work with etcd in the next chapter. Happy learning!
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论Kubernetes集群的维护，包括一些重要的话题，如Kubernetes组件的升级，这也是Kubernetes管理员日常工作中至关重要的任务。本章涉及外部etcd拓扑结构只是一个开始，因为我们将在下一章深入探讨与etcd相关的更有趣的工作。祝学习愉快！
- en: Mock CKA scenario-based practice test
  id: totrans-287
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模拟CKA场景练习测试
- en: You have two VMs, *master-0* and *worker-0*. Please complete the following mock
    scenarios.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 你有两台虚拟机，*master-0*和*worker-0*。请完成以下模拟场景。
- en: '**Scenario 1**:'
  id: totrans-289
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**场景1**：'
- en: Install the latest version of `kubeadm`, then create a basic `kubeadm` cluster
    on the `master-0` node, and get the node information.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 安装最新版本的`kubeadm`，然后在`master-0`节点上创建一个基本的`kubeadm`集群，并获取节点信息。
- en: '**Scenario 2**:'
  id: totrans-291
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**场景2**：'
- en: SSH to `worker-0` and join it to the `master-0` node.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 使用SSH连接到`worker-0`并将其加入`master-0`节点。
- en: '**Scenario 3 (optional)**:'
  id: totrans-293
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**场景3（可选）**：'
- en: Set up a local `minikube` cluster and schedule your first workload, called `hello
    Packt`
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 设置一个本地`minikube`集群并调度你的第一个工作负载，名为`hello Packt`
- en: You can find all the scenario resolutions in [*Appendix*](B18201_Appendix_A.xhtml#_idTextAnchor386)
    *- Mock CKA scenario-based practice test resolutions* of this book.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在本书的[*附录*](B18201_Appendix_A.xhtml#_idTextAnchor386)中找到所有场景解决方案，*模拟CKA场景练习测试解决方案*。
- en: FAQs
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见问题
- en: '*Where should I start to test the Kubernetes cluster?*'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*我应该从哪里开始测试Kubernetes集群？*'
- en: 'You can start on your local laptop or desktop on Windows, Linux, or Mac OS,
    and we recommend using VMware player or Hyper-V to spin up multiple VMs so you
    can test out a multinode scenario. Using Multipass from Canonical is also great
    for creating Ubuntu VMs and it supports Linux, Mac, and Windows. Check it out
    here: [https://multipass.run/](https://multipass.run/).'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您的本地笔记本电脑或桌面计算机开始，在 Windows、Linux 或 Mac OS 上，并推荐使用 VMware Player 或 Hyper-V
    来启动多个虚拟机，以便测试多节点场景。使用来自 Canonical 的 Multipass 也非常适合创建 Ubuntu 虚拟机，并支持 Linux、Mac
    和 Windows。在这里查看：[https://multipass.run/](https://multipass.run/)。
- en: Another option is to get a cloud subscription such as Microsoft Azure, AWS,
    or GCP, using which you can provision a VM with a click-through experience.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种选择是订阅云服务，如 Microsoft Azure、AWS 或 GCP，使用它们可以通过点击体验来创建虚拟机。
- en: '*Where can I find the latest Kubernetes release to test out?*'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*我在哪里可以找到最新的 Kubernetes 发布版来进行测试？*'
- en: 'The Kubernetes GitHub repository is where you can find all the releases as
    well as changelogs, and you can get the latest release and build it by yourself:
    [https://github.com/kubernetes/kubernetes](https://github.com/kubernetes/kubernetes).'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes GitHub 仓库是您可以找到所有发布版本和更改日志的地方，您可以获取最新的发布版并自行构建：[https://github.com/kubernetes/kubernetes](https://github.com/kubernetes/kubernetes)。
- en: We can also use `kubeadm` or `minikube` to get Kubernetes, as they are aligned
    with the Kubernetes source code delivery cycle and are up to date.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用 `kubeadm` 或 `minikube` 来获取 Kubernetes，因为它们与 Kubernetes 源代码交付周期保持一致且保持更新。

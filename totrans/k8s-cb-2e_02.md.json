["```\n$ kubectl version --short\nClient Version: v1.10.2\nServer Version: v1.10.2\n```", "```\nkubectl [command] [TYPE] [NAME] [flags]\n```", "```\n$ kubectl run my-first-nginx --image=nginx \"my-first-nginx\"\n```", "```\n$ cat nginx.yaml \napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-first-nginx\n  labels:\n    app: nginx\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx \n\n//specify -f (filename) \n$ kubectl create -f nginx.yaml \ndeployment.apps \"my-first-nginx\" created\n```", "```\n$ kubectl get deployment\nNAME             DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE\nmy-first-nginx   1         1         1            1           4s\n```", "```\n$ kubectl get deploy\nNAME             DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE\nmy-first-nginx   1         1         1            1           38s\n```", "```\n$ kubectl delete deploy my-first-nginx\ndeployment.extensions \"my-first-nginx\" deleted\n```", "```\n//display whole sub command options \n$ kubectl -h \n\n//display sub command \"get\" options \n$ kubectl get -h \n\n//display sub command \"run\" options \n$ kubectl run -h \n```", "```\n//this step only if you are using minikube\n$ minikube ssh\n                         _ _ \n            _ _ ( ) ( ) \n  ___ ___ (_) ___ (_)| |/') _ _ | |_ __ \n/' _ ` _ `\\| |/' _ `\\| || , < ( ) ( )| '_`\\ /'__`\\\n| ( ) ( ) || || ( ) || || |\\`\\ | (_) || |_) )( ___/\n(_) (_) (_)(_)(_) (_)(_)(_) (_)`\\___/'(_,__/'`\\____)\n\n//run docker pull to download CentOS docker image\n$ docker pull centos\nUsing default tag: latest\nlatest: Pulling from library/centos\nd9aaf4d82f24: Pull complete \nDigest: sha256:4565fe2dd7f4770e825d4bd9c761a81b26e49cc9e3c9631c58cfc3188be9505a\nStatus: Downloaded newer image for centos:latest\n```", "```\n$ cat my-first-pod.yaml \napiVersion: v1\nkind: Pod\nmetadata: \n  name: my-first-pod\nspec:\n  containers:\n  - name: my-nginx\n    image: nginx\n  - name: my-centos\n    image: centos\n    command: [\"/bin/sh\", \"-c\", \"while : ;do curl http://localhost:80/; sleep 10; done\"]\n```", "```\n$ kubectl create -f my-first-pod.yaml \npod \"my-first-pod\" created \n```", "```\n//still downloading Docker images (0/2)\n$ kubectl get pods\nNAME           READY     STATUS              RESTARTS   AGE\nmy-first-pod   0/2       ContainerCreating   0          14s\n\n//my-first-pod is running (2/2)\n$ kubectl get pods\nNAME           READY     STATUS    RESTARTS   AGE\nmy-first-pod   2/2       Running   0          1m\n```", "```\n//run bash on my-centos container\n//then access to TCP/80 using curl\n$ kubectl exec my-first-pod -it -c my-centos -- /bin/bash\n[root@my-first-pod /]# \n[root@my-first-pod /]# curl -L http://localhost:80\n<!DOCTYPE html>\n<html>\n<head>\n<title>Welcome to nginx!</title>\n<style>\n    body {\n        width: 35em;\n        margin: 0 auto;\n        font-family: Tahoma, Verdana, Arial, sans-serif;\n    }\n</style>\n</head>\n<body>\n<h1>Welcome to nginx!</h1>\n<p>If you see this page, the nginx web server is successfully installed and\nworking. Further configuration is required.</p>\n\n<p>For online documentation and support please refer to\n<a href=\"http://nginx.org/\">nginx.org</a>.<br/>\nCommercial support is available at\n<a href=\"http://nginx.com/\">nginx.com</a>.</p>\n\n<p><em>Thank you for using nginx.</em></p>\n</body>\n</html>\n```", "```\n//it indicates Node \"minikube\" runs my-first-pod \n$ kubectl get pods -o wide\nNAME           READY     STATUS    RESTARTS   AGE       IP           NODE\nmy-first-pod   2/2       Running   0          43m       172.17.0.2   minikube\n```", "```\n//just replace the name from my-first-pod to my-second-pod \n$ cat my-first-pod.yaml | sed -e 's/my-first-pod/my-second-pod/' > my-second-pod.yaml\n\n//metadata.name has been changed to my-second-pod\n$ cat my-second-pod.yaml \napiVersion: v1\nkind: Pod\nmetadata: \n  name: my-second-pod\nspec:\n  containers:\n  - name: my-nginx\n    image: nginx\n  - name: my-centos\n    image: centos\n    command: [\"/bin/sh\", \"-c\", \"while : ;do curl\nhttp://localhost:80/; sleep 10; done\"]\n\n//create second pod\n$ kubectl create -f my-second-pod.yaml \npod \"my-second-pod\" created\n\n//2 pods are running\n$ kubectl get pods\nNAME            READY     STATUS    RESTARTS   AGE\nmy-first-pod    2/2       Running   0          1h\nmy-second-pod   2/2       Running   0          43s\n```", "```\n//specify --all option to delete all pods\n$ kubectl delete pods --all\npod \"my-first-pod\" deleted\npod \"my-second-pod\" deleted\n\n//pods are terminating\n$ kubectl get pods\nNAME            READY     STATUS        RESTARTS   AGE\nmy-first-pod    2/2       Terminating   0          1h\nmy-second-pod   2/2       Terminating   0          3m\n```", "```\n$ cat my-first-replicaset.yaml\napiVersion: extensions/v1beta1\nkind: ReplicaSet\nmetadata:\n  name: my-first-replicaset\n  labels:\n    version: 0.0.1\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      project: My-Happy-Web\n      role: frontend\n  template:\n    metadata:\n      labels:\n        project: My-Happy-Web\n        role: frontend\n        env: dev\n    spec:\n      containers:\n      - name: happy-web\n        image: nginx:latest\n```", "```\n$ kubectl create -f my-first-replicaset.yaml\nreplicaset.extensions \"my-first-replicaset\" created\n```", "```\n// use subcommand \"get\" to list all ReplicaSets\n$ kubectl get rs\nNAME                  DESIRED   CURRENT   READY     AGE\nmy-first-replicaset   3         3         3         4s\n```", "```\n// specify that we want to check ReplicaSet called my-first-replicaset\n$ kubectl describe rs my-first-replicaset\nName:         my-first-replicaset\nNamespace:    default\nSelector:     project=My-Happy-Web,role=frontend\nLabels:       version=0.0.1\nAnnotations:  <none>\nReplicas:     3 current / 3 desired\nPods Status:  3 Running / 0 Waiting / 0 Succeeded / 0 Failed\nPod Template:\n  Labels:  env=dev\n           project=My-Happy-Web\n           role=frontend\n  Containers:\n   happy-web:\n    Image:        nginx:latest\n    Port:         <none>\n    Host Port:    <none>\n    Environment:  <none>\n    Mounts:       <none>\n  Volumes:        <none>\nEvents:\n  Type    Reason            Age   From                   Message\n  ----    ------            ----  ----                   -------\n  Normal  SuccessfulCreate  9s    replicaset-controller  Created pod: my-first-replicaset-8hg55\n  Normal  SuccessfulCreate  9s    replicaset-controller  Created pod: my-first-replicaset-wtphz\n  Normal  SuccessfulCreate  9s    replicaset-controller  Created pod: my-first-replicaset-xcrws\n```", "```\n// get the description according the name of Pod, please look at the Pod name shown on your screen, which should be different from this book.\n$ kubectl describe pod my-first-replicaset-xcrws\n```", "```\n// demonstrate to change the number of Pod replicas.\n$ kubectl get rs\nNAME                  DESIRED   CURRENT   READY     AGE\nmy-first-replicaset   3         3         3         2m\n\n// get in the editor, modify the replica number, then save and leave\n$ kubectl edit rs my-first-replicaset\n# Please edit the object below. Lines beginning with a '#' will be ignored,\n# and an empty file will abort the edit. If an error occurs while saving this file will be\n# reopened with the relevant failures.\n#\napiVersion: extensions/v1beta1\nkind: ReplicaSet\nmetadata:\n  creationTimestamp: 2018-05-05T20:48:38Z\n  generation: 1\n  labels:\n    version: 0.0.1\n  name: my-first-replicaset\n  namespace: default\n  resourceVersion: \"1255241\"\n  selfLink: /apis/extensions/v1beta1/namespaces/default/replicasets/my-first-replicaset\n  uid: 18330fa8-cd55-11e7-a4de-525400a9d353\nspec:\n  replicas: 4\n  selector:\n    matchLabels:\n...\nreplicaset \"my-first-replicaset\" edited\n$ kubectl get rs\nNAME                  DESIRED   CURRENT   READY     AGE\nmy-first-replicaset   4         4         4         4m\n```", "```\n$ time kubectl delete rs my-first-replicaset && kubectl get pod\nreplicaset.extensions \"my-first-replicaset\" deleted\nreal  0m2.492s\nuser  0m0.188s\nsys   0m0.048s\nNAME                        READY     STATUS        RESTARTS   AGE\nmy-first-replicaset-8hg55   0/1       Terminating   0          53m\nmy-first-replicaset-b6kr2   1/1       Terminating   0          48m\nmy-first-replicaset-wtphz   0/1       Terminating   0          53m\nmy-first-replicaset-xcrws   1/1       Terminating   0          53m\n```", "```\n// check ReplicaSet and the Pods\n $ kubectl get rs,pod\n NAME DESIRED CURRENT READY AGE\n rs/my-first-replicaset 3 3 3 14s\n NAME READY STATUS RESTARTS AGE\n po/my-first-replicaset-bxf45 1/1 Running 0 14s\n po/my-first-replicaset-r6wpx 1/1 Running 0 14s\n po/my-first-replicaset-vt6fd 1/1 Running 0 14s\n\n // remove certain Pod and check what happened\n $ kubectl delete pod my-first-replicaset-bxf45\n pod \"my-first-replicaset-bxf45\" deleted\n $ kubectl get rs,pod\n NAME DESIRED CURRENT READY AGE\n rs/my-first-replicaset 3 3 3 2m\n NAME READY STATUS RESTARTS AGE\n po/my-first-replicaset-dvbpg 1/1 Running 0 6s\n po/my-first-replicaset-r6wpx 1/1 Running 0 2m\n po/my-first-replicaset-vt6fd 1/1 Running 0 2m\n\n // check the event log as well\n $ kubectl describe rs my-first-replicaset\n (ignored)\n :\n Events:\n Type Reason Age From Message\n ---- ------ ---- ---- -------\n Normal SuccessfulCreate 2m replicaset-controller Created pod: my-first-replicaset-bxf45\n Normal SuccessfulCreate 2m replicaset-controller Created pod: my-first-replicaset-r6wpx\n Normal SuccessfulCreate 2m replicaset-controller Created pod: my-first-replicaset-vt6fd\n Normal SuccessfulCreate 37s replicaset-controller Created pod: my-first-replicaset-dvbpg\n```", "```\n// use subcommand \"run\" with tag restart=Never to create a Pod\n$ kubectl run standalone-pod --image=centos --labels=\"project=My-Happy-Web,role=frontend,env=test\" --restart=Never --command sleep 3600\npod \"standalone-pod\" created\n\n// check Pod along with the labels\n$ kubectl get pod -L project -L role -L env\nNAME             READY     STATUS    RESTARTS   AGE       PROJECT        ROLE       ENV\nstandalone-pod   1/1       Running   0          3m        My-Happy-Web   frontend   test\n```", "```\n$ kubectl create -f my-first-replicaset.yaml\nreplicaset.apps \"my-first-replicaset\" created\n\n// check the Pod again\n$ kubectl get pod -L project -L role -L env\nNAME                        READY     STATUS    RESTARTS   AGE       PROJECT        ROLE       ENV\nmy-first-replicaset-fgdc8   1/1       Running   0          14s       My-Happy-Web   frontend   dev\nmy-first-replicaset-flc9m   1/1       Running   0          14s       My-Happy-Web   frontend   dev\nstandalone-pod              1/1       Running   0          6m        My-Happy-Web   frontend   test\n```", "```\n$ kubectl describe pod standalone-pod\nName:           standalone-pod\nNamespace:      default\nNode:           ubuntu02/192.168.122.102\nStart Time:     Sat, 05 May 2018 16:57:14 -0400\nLabels:         env=test\n                project=My-Happy-Web\n                role=frontend\nAnnotations:    <none>\nStatus:         Running\nIP:             192.168.79.57\nControlled By:  ReplicaSet/my-first-replicaset ...\n```", "```\n// remove the ReplicaSet and check pods immediately\n$ kubectl delete rs my-first-replicaset && kubectl get pod\nreplicaset.extensions \"my-first-replicaset\" deleted\nNAME                        READY     STATUS        RESTARTS   AGE\nmy-first-replicaset-fgdc8   0/1       Terminating   0          1m\nmy-first-replicaset-flc9m   0/1       Terminating   0          1m\nstandalone-pod              0/1       Terminating   0          7m\n```", "```\n//create my-nginx Deployment (specify 3 replicas and nginx version 1.11.0)\n$ kubectl run my-nginx --image=nginx:1.11.0 --port=80 --replicas=3\ndeployment.apps \"my-nginx\" created\n\n//see status of my-nginx Deployment\n$ kubectl get deploy\nNAME       DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE\nmy-nginx   3         3         3            3           8s\n\n//see status of ReplicaSet\n$ kubectl get rs\nNAME                 DESIRED   CURRENT   READY     AGE\nmy-nginx-5d69b5ff7   3         3         3         11s\n\n//see status of Pod\n$ kubectl get pods\nNAME                       READY     STATUS    RESTARTS   AGE\nmy-nginx-5d69b5ff7-9mhbc   1/1       Running   0          14s\nmy-nginx-5d69b5ff7-mt6z7   1/1       Running   0          14s\nmy-nginx-5d69b5ff7-rdl2k   1/1       Running   0          14s\n```", "```\n//delete my-nginx Deployment\n$ kubectl delete deploy my-nginx\ndeployment.extensions \"my-nginx\" deleted\n\n//see status of ReplicaSet\n$ kubectl get rs\nNo resources found.\n\n//see status of Pod, it has been terminated\n$ kubectl get pods\nNAME                       READY     STATUS        RESTARTS   AGE\nmy-nginx-5d69b5ff7-9mhbc   0/1       Terminating   0          2m\nmy-nginx-5d69b5ff7-mt6z7   0/1       Terminating   0          2m\nmy-nginx-5d69b5ff7-rdl2k   0/1       Terminating   0          2m\n```", "```\n$ cat deploy.yaml \napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-nginx\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      run: my-nginx\n  template:\n    metadata:\n      labels:\n        run: my-nginx\n    spec:\n      containers:\n      - name: my-nginx\n        image: nginx:1.11.0\n        ports:\n        - containerPort: 80\n```", "```\n//use -f to specify YAML file\n$ kubectl create -f deploy.yaml --save-config --record\ndeployment.apps \"my-nginx\" created \n\n//check my-nginx Deployment\n$ kubectl get deploy\nNAME       DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE\nmy-nginx   3         3         3            3           5s\n\n$ kubectl describe deploy my-nginx\nName:                   my-nginx\nNamespace:              default\nCreationTimestamp:      Wed, 09 May 2018 03:40:09 +0000\nLabels:                 <none>\nAnnotations:            deployment.kubernetes.io/revision=1\n                        kubectl.kubernetes.io/last-applied-configuration={\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{},\"name\":\"my-nginx\",\"namespace\":\"default\"},\"spec\":{\"replicas\":3,\"selector\":{\"mat...\n                        kubernetes.io/change-cause=kubectl create --filename=deploy.yaml --save-config=true --record=true\nSelector:               run=my-nginx\nReplicas:               3 desired | 3 updated | 3 total | 3 available | 0 unavailable\nStrategyType:           RollingUpdate\nMinReadySeconds:        0\nRollingUpdateStrategy:  25% max unavailable, 25% max surge\nPod Template:\n  Labels:  run=my-nginx\n  Containers:\n   my-nginx:\n    Image:        nginx:1.11.0\n    Port:         80/TCP\n    Host Port:    0/TCP\n    Environment:  <none>\n    Mounts:       <none>\n  Volumes:        <none>\nConditions:\n  Type           Status  Reason\n  ----           ------  ------\n  Available      True    MinimumReplicasAvailable\n  Progressing    True    NewReplicaSetAvailable\nOldReplicaSets:  <none>\nNewReplicaSet:   my-nginx-54bb7bbcf9 (3/3 replicas created) Events:\n  Type    Reason             Age   From                   Message\n  ----    ------             ----  ----                   -------\n  Normal  ScalingReplicaSet  34s   deployment-controller  Scaled up replica set my-nginx-54bb7bbcf9 to 3\n```", "```\n$ kubectl set image deployment my-nginx my-nginx=nginx:1.12.0 --record\ndeployment.apps \"my-nginx\" image updated\n\n$ kubectl describe deploy my-nginx\nName:                   my-nginx\n…\n…\nConditions:\n  Type           Status  Reason\n  ----           ------  ------\n  Available      True    MinimumReplicasAvailable\n  Progressing    True    ReplicaSetUpdated\nOldReplicaSets:  my-nginx-54bb7bbcf9 (3/3 replicas created)\nNewReplicaSet:   my-nginx-77769b7666 (1/1 replicas created) Events:\n  Type    Reason             Age   From                   Message\n  ----    ------             ----  ----                   -------\n  Normal  ScalingReplicaSet  27s   deployment-controller  Scaled up replica set my-nginx-54bb7bbcf9 to 3\n  Normal  ScalingReplicaSet  2s    deployment-controller  Scaled up replica set my-nginx-77769b7666 to 1\n```", "```\n$ kubectl describe deploy my-nginx\nName:                   my-nginx\n…\n…\n  Type           Status  Reason\n  ----           ------  ------\n  Available      True    MinimumReplicasAvailable\n  Progressing    True    NewReplicaSetAvailable\nOldReplicaSets:  <none>\nNewReplicaSet:   my-nginx-77769b7666 (3/3 replicas created)\n```", "```\n$ kubectl get rs\nNAME                  DESIRED   CURRENT   READY     AGE\nmy-nginx-54bb7bbcf9   0         0         0         3m\nmy-nginx-77769b7666   3         3         3         3m\n```", "```\n$ kubectl rollout history deployment my-nginx\ndeployments \"my-nginx\"\nREVISION  CHANGE-CAUSE\n1         kubectl create --filename=deploy.yaml --save-config=true --record=true\n2         kubectl set image deployment/my-nginx my-nginx=nginx:1.12.0 --record=true\n```", "```\n        image: nginx:1.12.2\n```", "```\n$ kubectl apply -f deploy_1.12.2.yaml --record\ndeployment.apps \"my-nginx\" configured\n```", "```\n$ kubectl describe deploy my-nginx\nName:                   my-nginx\n…\n…\nPod Template:\n  Labels: run=my-nginx\n  Containers:\n   my-nginx:\n    Image: nginx:1.12.2\n...\n...\nConditions:\n  Type           Status  Reason\n  ----           ------  ------\n  Available      True    MinimumReplicasAvailable\n  Progressing    True    ReplicaSetUpdated\nOldReplicaSets: my-nginx-77769b7666 (3/3 replicas created)\nNewReplicaSet: my-nginx-69fbc98fd4 (1/1 replicas created)\n```", "```\n$ kubectl get rs\nNAME                  DESIRED   CURRENT   READY     AGE\nmy-nginx-54bb7bbcf9   0         0         0         7m\nmy-nginx-69fbc98fd4   3         3         3         1m\nmy-nginx-77769b7666   0         0         0         6m\n```", "```\n$ kubectl rollout history deployment my-nginx\ndeployments \"my-nginx\"\nREVISION  CHANGE-CAUSE\n1         kubectl create --filename=deploy.yaml --save-config=true --record=true\n2         kubectl set image deployment/my-nginx my-nginx=nginx:1.12.0 --record=true\n3         kubectl apply --filename=deploy_1.12.2.yaml --record=true\n```", "```\n$ kubectl rollout undo deployment my-nginx --to-revision=2\ndeployment.apps \"my-nginx\" rolled back'\n```", "```\n$ kubectl get rs\nNAME                  DESIRED   CURRENT   READY     AGE\nmy-nginx-54bb7bbcf9   0         0         0         8m\nmy-nginx-69fbc98fd4   0         0         0         2m\nmy-nginx-77769b7666   3         3         3         7m\n```", "```\n// check by command netstat with proper tags for showing the information we need, t:tcp, u:udp, l:listening, p:program, n:numeric address\n// use root privilege for grabbing all processes\n$ sudo netstat -tulpn | grep kube-proxy\ntcp        0      0 127.0.0.1:10249         0.0.0.0:*               LISTEN      2326/kube-proxy\ntcp6       0      0 :::31723                :::*                    LISTEN      2326/kube-proxy\ntcp6       0      0 :::10256                :::*                    LISTEN      2326/kube-proxy\n```", "```\n// using subcommand \"run\" with \"never\" restart policy, and without replica, you can get a Pod\n// here we create a nginx container with port 80 exposed to outside world of Pod\n$ kubectl run nginx-pod --image=nginx --port=80 --restart=\"Never\" --labels=\"project=My-Happy-Web,role=frontend,env=test\"\npod \"nginx-pod\" created\n\n// expose Pod \"nginx-pod\" with a Service officially with port 8080, target port would be the exposed port of pod\n$ kubectl expose pod nginx-pod --port=8080 --target-port=80 --name=\"nginx-service\"\nservice \"nginx-service\" exposed\n```", "```\n// \"svc\" is the abbreviate of Service, for the description's resource type\n$ kubectl describe svc nginx-service\nName:              nginx-service\nNamespace:         default\nLabels:            env=test\n                   project=My-Happy-Web\n                   role=frontend\nAnnotations:       <none>\nSelector:          env=test,project=My-Happy-Web,role=frontend\nType:              ClusterIP\nIP:                10.96.107.213\nPort:              <unset>  8080/TCP\nTargetPort:        80/TCP\nEndpoints:         192.168.79.24:80\nSession Affinity:  None\nEvents:            <none>\n```", "```\n// create a Pod and a Service for it\n$ kubectl run nginx-no-label --image=nginx --port=80 --restart=\"Never\" && kubectl expose pod nginx-no-label\npod \"nginx-no-label\" created\nservice \"nginx-no-label\" exposed\n// take a lookat the configurations of the Service\n$ kubectl describe svc nginx-no-label\nName:              nginx-no-label\nNamespace:         default\nLabels:            run=nginx-no-label\nAnnotations:       <none>\nSelector:          run=nginx-no-label Type:              ClusterIP\nIP:                10.105.96.243\nPort:              <unset>  80/TCP\nTargetPort:        80/TCP\nEndpoints:         192.168.79.10:80\nSession Affinity:  None\nEvents:            <none>\n```", "```\n// through leveraging tag \"--expose\", create the Service along with Pod\n$ kubectl run another-nginx-no-label --image=nginx --port=80 --restart=\"Never\" --expose\nservice \"another-nginx-no-label\" created\npod \"another-nginx-no-label\" created\n```", "```\n// using subcommand \"run\" and assign 2 replicas\n$ kubectl run nginx-deployment --image=nginx --port=80 --replicas=2 --labels=\"env=dev,project=My-Happy-Web,role=frontend\"\ndeployment.apps \"nginx-deployment\" created\n// explicitly indicate the selector of Service by tag \"--selector\", and assign the Service an external IP by tag \"--external-ip\"\n// the IP 192.168.122.102 demonstrated here is the IP of one of the Kubernetes node in system\n$ kubectl expose deployment nginx-deployment --port=8080 --target-port=80 --name=\"another-nginx-service\" --selector=\"project=My-Happy-Web,role=frontend\" --external-ip=\"192.168.122.102\"\nservice \"another-nginx-service\" exposed\n```", "```\n$ kubectl describe svc another-nginx-service\nName:              another-nginx-service\nNamespace:         default\nLabels:            env=dev\n                   project=My-Happy-Web\n                   role=frontend\nAnnotations:       <none>\nSelector:          project=My-Happy-Web,role=frontend\nType:              ClusterIP\nIP:                10.100.109.230\nExternal IPs:      192.168.122.102\nPort:              <unset>  8080/TCP\nTargetPort:        80/TCP\nEndpoints:         192.168.79.15:80,192.168.79.21:80,192.168.79.24:80\nSession Affinity:  None\nEvents:            <none>\n```", "```\n$ curl 192.168.122.102:8080\n<!DOCTYPE html>\n<html>\n<head>\n<title>Welcome to nginx!</title>\n...\n```", "```\n$ cat k8s-endpoint.yaml\napiVersion: v1\nkind: Endpoints\nmetadata:\n  name: k8s-ep\nsubsets:\n  - addresses:\n      - hostname: kubernetes-io\n        ip: 45.54.44.100\n    ports:\n      - port: 80\n```", "```\n// Give it a try!\n$ kubectl expose -f k8s-endpoint.yaml\nerror: cannot expose a { Endpoints}\n```", "```\n$ cat endpoint-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: k8s-ep\nspec:\n  ports:\n    - protocol: TCP\n      port: 8080\n      targetPort: 80\n```", "```\n// go create the Service and the endpoint\n$ kubectl create -f endpoint-service.yaml && kubectl create -f k8s-endpoint.yaml\nservice \"k8s-ep\" created\nendpoints \"k8s-ep\" created\n// verify the Service k8s-ep\n$ kubectl describe svc k8s-ep\nName:              k8s-ep\nNamespace:         default\nLabels:            <none>\nAnnotations:       <none>\nSelector:          <none>\nType:              ClusterIP\nIP:                10.105.232.226\nPort:              <unset>  8080/TCP\nTargetPort:        80/TCP\nEndpoints:         45.54.44.100:80\nSession Affinity:  None\nEvents:            <none>\n```", "```\n$ curl 10.105.232.226:8080\n```", "```\n// create a Service by expose an existed one\n// take the one we created for Deployment for example\n$ kubectl expose svc another-nginx-service --port=8081 --target-port=80 --name=yet-another-nginx-service --session-affinity=\"ClientIP\"\nservice \"yet-another-nginx-service\" exposed\n// check the newly created Service\n$ kubectl describe svc yet-another-nginx-service\nName:              yet-another-nginx-service\nNamespace:         default\nLabels:            env=dev\n                   project=My-Happy-Web\n                   role=frontend\nAnnotations:       <none>\nSelector:          project=My-Happy-Web,role=frontend\nType:              ClusterIP\nIP:                10.110.218.136\nPort:              <unset>  8081/TCP\nTargetPort:        80/TCP\nEndpoints:         192.168.79.15:80,192.168.79.21:80,192.168.79.24:80\nSession Affinity:  ClientIP\nEvents:            <none>\n```", "```\n// the resource abbreviation of endpoint is \"ep\", separate different resource types by comma\n$ kubectl delete svc,ep k8s-ep\nservice \"k8s-ep\" deleted\nError from server (NotFound): endpoints \"k8s-ep\" not found\n```", "```\n// run a Pod first, and ask it to be alive 600 seconds\n$ kubectl run my-1st-centos --image=centos --restart=Never sleep 600\npod \"my-1st-centos\" created\n// run a Deployment of nginx and its Service exposing port 8080 for nginx\n$ kubectl run my-nginx --image=nginx --port=80\ndeployment.apps \"my-nginx\" created\n$ kubectl expose deployment my-nginx --port=8080 --target-port=80 --name=\"my-nginx-service\"\nservice \"my-nginx-service\" exposed\n// run another pod\n$ kubectl run my-2nd-centos --image=centos --restart=Never sleep 600\npod \"my-2nd-centos\" created\n//Go check the environment variables on both pods.\n$ kubectl exec my-1st-centos -- /bin/sh -c export\n$ kubectl exec my-2nd-centos -- /bin/sh -c export\n```", "```\nexport MY_NGINX_SERVICE_PORT=\"tcp://10.104.218.20:8080\"\nexport MY_NGINX_SERVICE_PORT_8080_TCP=\"tcp://10.104.218.20:8080\"\nexport MY_NGINX_SERVICE_PORT_8080_TCP_ADDR=\"10.104.218.20\"\nexport MY_NGINX_SERVICE_PORT_8080_TCP_PORT=\"8080\"\nexport MY_NGINX_SERVICE_PORT_8080_TCP_PROTO=\"tcp\"\nexport MY_NGINX_SERVICE_SERVICE_HOST=\"10.104.218.20\"\nexport MY_NGINX_SERVICE_SERVICE_PORT=\"8080\"\n```", "```\n// For my-2nd-centos, getting information of Service by environment variables\n$ kubectl exec my-2nd-centos -- /bin/sh -c 'curl $MY_NGINX_SERVICE_SERVICE_HOST:$MY_NGINX_SERVICE_SERVICE_PORT'\n<!DOCTYPE html>\n<html>\n<head>\n<title>Welcome to nginx!</title>\n...\n```", "```\n// go accessing my-nginx-service by A record provided by kube-dns\n$ kubectl exec my-1st-centos -- /bin/sh -c 'curl my-nginx-service.default.svc.cluster.local:8080'\n$ kubectl exec my-2nd-centos -- /bin/sh -c 'curl my-nginx-service.default.svc.cluster.local:8080'\n```", "```\n// create a NodePort Service\n// the tag \"tcp\" is for indicating port configuration: SERVICE_PORT:TARGET_PORT\n$ kubectl create service nodeport my-nginx --tcp=8080:80\nservice \"my-nginx\" created\n$ kubectl describe svc my-nginx\nName:                     my-nginx\nNamespace:                default\nLabels:                   app=my-nginx\nAnnotations:              <none>\nSelector:                 app=my-nginx\nType:                     NodePort\nIP:                       10.105.106.134\nPort:                     8080-80  8080/TCP\nTargetPort:               80/TCP\nNodePort:                 8080-80  31336/TCP\nEndpoints:                <none>\nSession Affinity:         None\nExternal Traffic Policy:  Cluster\nEvents:                   <none>\n```", "```\n// run an nginx Deployment with the label as NodePort Service my-nginx's selector\n$ kubectl run test-nodeport --image=nginx --labels=\"app=my-nginx\"\ndeployment.apps \"test-nodeport\" created\n// check the Kubernetes node with Service port on the node\n$ curl ubuntu02:31336\n<!DOCTYPE html>\n<html>\n<head>\n<title>Welcome to nginx!</title>\n...\n```", "```\n$ kubectl create service externalname k8s-website --external-name kubernetes.io\nservice \"k8s-website\" created\n// create a CentOS Pod for testing the Service availability\n$ kubectl run my-centos --image=centos --restart=Never sleep 600\npod \"my-centos\" created\n//now you can check the Service by Service's DNS name\n$ kubectl exec -it my-centos -- /bin/sh -c 'curl k8s-website.default.svc.cluster.local '\n//Check all the Services we created in this section\n//ExternalName Service has no cluster IP as defined\n$ kubectl get svc\nNAME                   TYPE           CLUSTER-IP       EXTERNAL-IP     PORT(S)          AGE\nk8s-website            ExternalName   <none>           kubernetes.io   <none>           31m\nkubernetes             ClusterIP      10.96.0.1        <none>          443/TCP          14d\nmy-nginx               NodePort       10.105.106.134   <none>          8080:31336/TCP   1h\n```", "```\n// configuration file of emptyDir volume\n# cat 2-6-1_emptyDir.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: ubuntu\n  labels:\n    name: ubuntu\nspec:\n  containers:\n    - image: ubuntu\n      command:\n        - sleep\n        - \"3600\"\n      imagePullPolicy: IfNotPresent\n      name: ubuntu\n      volumeMounts:\n        - mountPath: /data-mount\n          name: data\n      volumes:\n        - name: data\n          emptyDir: {}\n\n// create pod by configuration file emptyDir.yaml\n# kubectl create -f 2-6-1_emptyDir.yaml\npod \"ubuntu\" created\n```", "```\n  \"Mounts\": [\n     ...\n  {\n                \"Type\": \"bind\",\n                \"Source\": \"/var/lib/kubelet/pods/98c7c676-e9bd-11e7-9e8d-080027ac331c/volumes/kubernetes.io~empty-dir/data\",\n                \"Destination\": \"/data-mount\",\n                \"Mode\": \"\",\n                \"RW\": true,\n                \"Propagation\": \"rprivate\"\n            }\n     ...\n]\n```", "```\nvolumes:\n    -\n      name: data\n      emptyDir:\n        medium: Memory\n```", "```\n# kubectl exec ubuntu df\nFilesystem 1K-blocks Used Available Use% Mounted on\n...\ntmpfs 1024036 0 1024036 0% /data-mount\n...\n```", "```\napiVersion: v1\n# cat 2-6-2_hostPath.yaml\nkind: Pod\nmetadata:\n  name: ubuntu\nspec:\n  containers:\n    -\n      image: ubuntu\n      command:\n        - sleep\n        - \"3600\"\n      imagePullPolicy: IfNotPresent\n      name: ubuntu\n      volumeMounts:\n        -\n          mountPath: /data-mount\n          name: data\n  volumes:\n    -\n      name: data\n      hostPath:\n path: /tmp/data\n```", "```\n\"Mounts\": [\n            {\n                \"Type\": \"bind\",\n                \"Source\": \"/tmp/data\",\n                \"Destination\": \"/data-mount\",\n                \"Mode\": \"\",\n                \"RW\": true,\n                \"Propagation\": \"rprivate\"\n            },\n                          ...\n    ]\n```", "```\n# configuration file of nfs volume\n$ cat 2-6-3_nfs.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nfs\nspec:\n  containers:\n    -\n      name: nfs\n      image: ubuntu\n      volumeMounts:\n          - name: nfs\n            mountPath: \"/data-mount\"\n  volumes:\n  - name: nfs\n    nfs:\n server: <your nfs server>\n path: \"/\"\n```", "```\nConditions:\n  Type Status\n  Ready True\nVolumes:\n  nfs:\n    Type: NFS (an NFS mount that lasts the lifetime of a pod)\n    Server: <your nfs server>\n    Path: /\n    ReadOnly: false\n```", "```\n\"Mounts\": [\n {\n            \"Source\": \"/var/lib/kubelet/pods/<id>/volumes/kubernetes.io~nfs/nfs\",\n            \"Destination\": \"/data-mount\",\n            \"Mode\": \"\",\n            \"RW\": true\n        },\n                          ...\n     ]\n```", "```\n$ cat 2-6-4_gfs-endpoint.yaml\nkind: Endpoints\napiVersion: v1\nmetadata:\n  name: glusterfs-cluster\nsubsets:\n  -\n    addresses:\n      -\n        ip: <gfs1 server ip>\n    ports:\n      -\n        port: 1\n  -\n    addresses:\n      -\n        ip: <gfs2 server ip>\n    ports:\n      -\n        port: 1\n\n# create endpoints\n$ kubectl create –f 2-6-4_gfs-endpoint.yaml\n```", "```\n$kubectl get endpoints\nNAME ENDPOINTS AGE\nglusterfs-cluster <gfs1>:1,<gfs2>:1 12m\n```", "```\n$ cat 2-6-4_glusterfs.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: ubuntu\nspec:\n  containers:\n    -\n      image: ubuntu\n      command:\n        - sleep\n        - \"3600\"\n      imagePullPolicy: IfNotPresent\n      name: ubuntu\n      volumeMounts:\n        -\n          mountPath: /data-mount\n          name: data\n  volumes:\n    -\n      name: data\n      glusterfs:\n endpoints: glusterfs-cluster\n path: gvol\n```", "```\nVolumes:\n  data:\n    Type: Glusterfs (a Glusterfs mount on the host that shares a pod's lifetime)\n    EndpointsName: glusterfs-cluster\n    Path: gvol\n    ReadOnly: false\n```", "```\n// pod scope example\n# cat 2-6-5_downward_api.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: downwardapi\n  labels:\n    env: demo\nspec:\n  containers:\n    -\n      name: downwardapi\n      image: ubuntu\n      command:\n        - sleep\n        - \"3600\"\n      volumeMounts:\n          - name: podinfo\n            mountPath: \"/data-mount\"\n  volumes:\n    - name: podinfo\n      downwardAPI:\n        items:\n          - path: metadata\n            fieldRef:\n fieldPath: metadata.labels\n```", "```\n// describe the pod\n# kubectl describe pod downwardapi\n...\n    Mounts:\n      /data-mount from podinfo (rw)\n...\nVolumes:\n  podinfo:\n    Type: DownwardAPI (a volume populated by information about the pod)\n    Items:\n      metadata.labels -> metadata\n```", "```\n# cat 2-6-5_downward_api_container.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: downwardapi-container\nspec:\n  containers:\n    -\n      name: downwardapi\n      image: ubuntu\n      command:\n        - sleep\n        - \"3600\"\n      volumeMounts:\n          - name: podinfo\n            mountPath: \"/data-mount\"\n  volumes:\n    - name: podinfo\n      downwardAPI:\n        items:\n          - path: \"cpu_limit\"\n            resourceFieldRef:\n containerName: downwardapi\n resource: limits.cpu\n```", "```\n{\n            \"Source\": \"/var/lib/kubelet/pods/<id>/volumes/kubernetes.io~downward-api/<volume name>\",\n            \"Destination\": \"/data-mount\",\n            \"Mode\": \"\",\n            \"RW\": true\n }\n```", "```\nspec:\n  containers:\n    - name: envsample-pod-info\n      env:\n        - name: MY_POD_IP\n          valueFrom:\n            fieldRef:\n              fieldPath: status.podIP\n```", "```\n// an example of how to use gitRepo volume type\n# cat 2-6-6_gitRepo.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: gitrepo\nspec:\n  containers:\n  - image: ubuntu\n    name: ubuntu\n    command:\n      - sleep\n      - \"3600\"\n    volumeMounts:\n    - mountPath: /app\n      name: app-git\n  volumes:\n  - name: app-git\n    gitRepo:\n repository: \"https://github.com/kubernetes-cookbook/second-edition.git\"\n revision: \"9d8e845e2f55a5c65da01ac4235da6d88ef6bcd0\"\n\n# kubectl create -f 2-6-6_gitRepo.yaml\npod \"gitrepo\" created\n```", "```\n# example of PV with NFS\n$ cat 2-6-7_pv.yaml\n  apiVersion: \"v1\"\n  kind: \"PersistentVolume\"\n  metadata:\n    name: \"pvnfs01\"\n  spec:\n    capacity:\n      storage: \"3Gi\"\n    accessModes:\n      - \"ReadWriteOnce\"\n    nfs:\n      path: \"/\"\n      server: \"<your nfs server>\"\n    persistentVolumeReclaimPolicy: \"Recycle\"\n\n# create the pv\n$ kubectl create -f 2-6-7_pv.yaml\npersistentvolume \"pvnfs01\" created\n```", "```\n# list current PVs\n$ kubectl get pv\nNAME LABELS CAPACITY ACCESSMODES STATUS CLAIM REASON AGE\npvnfs01 <none> 3Gi RWO Bound default/pvclaim01 37m\n```", "```\n# example of PersistentVolumeClaim\n$ cat claim.yaml\napiVersion: \"v1\"\nkind: \"PersistentVolumeClaim\"\nmetadata:\n  name: \"pvclaim01\"\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 1Gi\n\n# create the claim\n$ kubectl create -f claim.yaml\npersistentvolumeclaim \"pvclaim01\" created\n\n# list the PersistentVolumeClaim (pvc)\n$ kubectl get pvc\nNAME LABELS STATUS VOLUME CAPACITY ACCESSMODES AGE\npvclaim01 <none> Bound pvnfs01 3Gi RWO 59m\n```", "```\n# example of mounting into Pod\n$ cat nginx.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx\n  labels:\n    project: pilot\n    environment: staging\n    tier: frontend\nspec:\n  containers:\n    -\n      image: nginx\n      imagePullPolicy: IfNotPresent\n      name: nginx\n      volumeMounts:\n      - name: pv\n        mountPath: \"/usr/share/nginx/html\"\n      ports:\n      - containerPort: 80\n  volumes:\n    - name: pv\n      persistentVolumeClaim:\n claimName: \"pvclaim01\"\n\n# create the pod\n$ kubectl create -f nginx.yaml\npod \"nginx\" created\n```", "```\n# check the details of a pod\n$ kubectl describe pod nginx\n...\nVolumes:\n  pv:\n    Type: PersistentVolumeClaim (a reference to a PersistentVolumeClaim in the same namespace)\n    ClaimName: pvclaim01\n    ReadOnly: false\n...\n```", "```\n\"Mounts\": [\n        {\n            \"Source\": \"/var/lib/kubelet/pods/<id>/volumes/kubernetes.io~nfs/pvnfs01\",\n            \"Destination\": \"/usr/share/nginx/html\",\n            \"Mode\": \"\",\n            \"RW\": true\n        },\n                ...\n    ]\n```", "```\n# cat 2-6-8_gce/static_mount.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: gce-pd-pod\nspec:\n  containers:\n  - image: nginx\n    name: gce-pd-example\n    volumeMounts:\n    - mountPath: /mount-path\n      name: gce-pd\n      ports:\n        - containerPort: 80\n  volumes:\n  - name: gce-pd\n    gcePersistentDisk:\n pdName: example\n fsType: ext4\n```", "```\n// list storageclasses (sc)\n# kubectl get sc\nNAME PROVISIONER\nstandard (default) kubernetes.io/gce-pd\n```", "```\n// gce storage class\n# cat 2-6-8_gce/storageclass.yaml\nkind: StorageClass\napiVersion: storage.k8s.io/v1\nmetadata:\n  name: example\nprovisioner: kubernetes.io/gce-pd\nparameters:\n type: pd-standard\n zones: us-central1-a\n\n// create storage class\n# kubectl create -f storageclass.yaml\n   storageclass \"example\" created\n\n// check current storage classes\n# kubectl get sc\nNAME PROVISIONER\nexample kubernetes.io/gce-pd\n   standard (default) kubernetes.io/gce-pd\n```", "```\n# 2-6-8_gce/pvc.yaml\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: gce-example\nspec:\n  accessModes:\n    - ReadWriteOnce\n storageClassName: example\n resources:\n requests:\n storage: 5Gi\n\n// create pvc\n# kubectl create -f pvc.yaml\npersistentvolumeclaim \"gce-example\" created\n\n// check pvc status\n# kubectl get pvc\nNAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE\ngce-example Bound pvc-d04218e3-ede5-11e7-aef7-42010a8001f4 5Gi RWO example 1h\n```", "```\n# cat 2-6-8_gce/pod.yaml\nkind: Pod\napiVersion: v1\nmetadata:\n  name: gce-pd-pod\nspec:\n  volumes:\n    - name: gce-pd\n persistentVolumeClaim:\n claimName: gce-example\n containers:\n    - name: gce-pd-example\n      image: nginx\n      ports:\n        - containerPort: 80\n      volumeMounts:\n        - mountPath: /mount-path\n          name: gce-pd\n\n// create a pod\n# kubectl create -f pod.yaml\npod \"gce-pd-pod\" created\n\n// check the volume setting in pod\n# kubectl describe pod gce-pd-pod\n...\nContainers:\n  gce-pd-example:\n    Container ID: \n    Mounts:\n      /mount-path from gce-pd (rw)\n...\nVolumes:\n  gce-pd:\n    Type: PersistentVolumeClaim (a reference to a PersistentVolumeClaim in the same namespace)\n    ClaimName: gce-example\n    ReadOnly: false\n```", "```\n// example of how we used pre-created EBS volume.\n# cat 2-6-8_aws/static_mount.yaml\nkind: Deployment\napiVersion: apps/v1\nmetadata:\n  name: aws-ebs-deployment\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      run: nginx\n  template:\n    metadata:\n      labels:\n        run: nginx\n    spec:\n      volumes:\n - name: aws-ebs\n awsElasticBlockStore:\n volumeID: <ebs volume ID>\n fsType: ext4\n      containers:\n      - name: aws-ebs-example\n        image: nginx\n        ports:\n          - containerPort: 80\n        volumeMounts:\n          - mountPath: /mount-path\n            name: aws-ebs\n```", "```\n// declare a storage class\n# cat 2-6-8_aws/storageclass.yaml\nkind: StorageClass\napiVersion: storage.k8s.io/v1\nmetadata:\n  name: example-ebs\nprovisioner: kubernetes.io/aws-ebs\nparameters:\n type: io1\n zones: us-east-1a\n\n// create storage class\n# kubectl create -f storageclass.yaml\nstorageclass \"example-ebs\" created\n\n// check if example-ebs sc is created\n# kubectl get sc\nNAME PROVISIONER\ndefault kubernetes.io/aws-ebs\nexample-ebs kubernetes.io/aws-ebs\ngp2 (default) kubernetes.io/aws-ebs\n```", "```\n// declare a PVC\n# cat 2-6-8_aws/pvc.yaml\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: aws-example\nspec:\n accessModes:\n - ReadWriteOnce\n storageClassName: example-ebs\n resources:\n requests:\n storage: 5Gi\n\n// create a PVC\n# kubectl create -f pvc.yaml\npersistentvolumeclaim \"aws-example\" created\n\n// check if PVC has been created\n# kubectl get pvc\nNAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE\naws-example Bound pvc-d1cddc08-ee31-11e7-8582-022bb4c3719e 5Gi RWO example-ebs 5s\n```", "```\n// check if a PV is created by a PVC.\n# kubectl get pv\nNAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGE\npvc-d1cddc08-ee31-11e7-8582-022bb4c3719e 5Gi RWO Delete Bound default/aws-example example-ebs 36m\n```", "```\n// create a deployment\n# cat 2-6-8_aws/deployment.yaml\nkind: Deployment\napiVersion: apps/v1\nmetadata:\n  name: aws-ebs-deployment\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      run: nginx\n  template:\n    metadata:\n      labels:\n        run: nginx\n    spec:\n      volumes:\n      - name: aws-ebs\n        persistentVolumeClaim:\n claimName: aws-example\n      containers:\n      - name: aws-ebs-example\n        image: nginx\n        ports:\n          - containerPort: 80\n        volumeMounts:\n          - mountPath: /mount-path\n            name: aws-ebs\n```", "```\n// kubectl describe pod <pod_name>\n# kubectl describe pod aws-ebs-deployment-68bdc6f546-246s7\nContainers:\n  aws-ebs-example:\n    ...\n    Mounts:\n      /mount-path from aws-ebs (rw)\nVolumes:\n  aws-ebs:\n    Type: AWSElasticBlockStore (a Persistent Disk resource in AWS)\n    VolumeID: vol-0fccc3b0af8c17727\n    FSType: ext4\n    Partition: 0\n    ReadOnly: false\n...\n```", "```\n// assume we have a sensitive credential named access token.\n# cat 2-7-1_access-token\n9S!g0U61699r\n```", "```\nKubectl create secret <secret-type> --from-file <file1> (--from-file <file2> ...)\n```", "```\n# kubectl create secret generic access-token --from-file 2-7-1_access-token\nsecret \"access-token\" created\n```", "```\n// get the detailed information for a Secret.\n# kubectl get secret access-token -o yaml\napiVersion: v1\ndata:\n  2-7-1_access-token: OVMhZzBVNjE2OTlyCg==\nkind: Secret\nmetadata:\n  creationTimestamp: 2018-01-01T20:26:24Z\n  name: access-token\n  namespace: default\n  resourceVersion: \"127883\"\n  selfLink: /api/v1/namespaces/default/secrets/access-token\n  uid: 0987ec7d-ef32-11e7-ac53-080027ac331c\ntype: Opaque\n```", "```\n// decode encoded Secret\n# echo \"OVMhZzBVNjE2OTlyCg==\" | base64 --decode\n9S!g0U61699r\n```", "```\n// show directory structure\n# tree\n.\n├── 2-7-1_access-token-dir\n│ └── 2-7-1_access-token\n\n// create Secrets from a directory\n# kubectl create secret generic access-token --from-file 2-7-1_access-token-dir/\nsecret \"access-token\" created\n```", "```\n// create a Secret via plain text in command line\n# kubectl create secret generic access-token --from-literal=2-7-1_access-token=9S\\!g0U61699r\nsecret \"access-token\" created\n```", "```\n// check the details of a Secret\n# kubectl get secret access-token -o yaml\napiVersion: v1\ndata:\n  2-7-1_access-token: OVMhZzBVNjE2OTlyCg==\nkind: Secret\nmetadata:\n  creationTimestamp: 2018-01-01T21:44:32Z\n  name: access-token\n  ...\ntype: Opaque\n```", "```\n// encode Secret manually\n# echo '9S!g0U61699r' | base64\nOVMhZzBVNjE2OTlyCg==\n\n// create a Secret via configuration file, put encoded Secret into the file\n# cat 2-7-1_secret.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: access-token\ntype: Opaque\ndata:\n  2-7-1_access-token: OVMhZzBVNjE2OTlyCg==\n\n// create the resource\n# kubectl create -f 2-7-1_secret.yaml\nsecret \"access-token\" created\n\n```", "```\n// using access-token Secret inside a Pod\n# cat 2-7-2_env.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: secret-example-env\nspec:\n  containers:\n  - name: ubuntu\n    image: ubuntu\n    command: [\"/bin/sh\", \"-c\", \"while : ;do echo $ACCESS_TOKEN; sleep 10; done\"]\n    env:\n - name: ACCESS_TOKEN\n valueFrom:\n secretKeyRef:\n name: access-token\n key: 2-7-1_access-token\n\n// create a pod\n# kubectl create -f 2-7-2_env.yaml\npod \"secret-example-env\" created\n```", "```\n// check stdout logs\n# kubectl logs -f secret-example-env\n9S!g0U61699r\n```", "```\n# kubectl describe pods secret-example-env\nName: secret-example-env\n...\nEnvironment:\n      ACCESS_TOKEN: <set to the key '2-7-1_access-token' in secret 'access-token'> \n```", "```\n// example of using Secret volume\n# cat 2-7-3_volumes.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: secret-example-volume\nspec:\n  containers:\n  - name: ubuntu\n    image: ubuntu\n    command: [\"/bin/sh\", \"-c\", \"while : ;do cat /secret/token; sleep 10; done\"]\n    volumeMounts:\n      - name: secret-volume\n        mountPath: /secret\n        readOnly: true\n  volumes:\n    - name: secret-volume\n      secret:\n secretName: access-token\n items:\n - key: 2-7-1_access-token\n path: token\n\n// create the Pod\nkubectl create -f 2-7-3_volumes.yaml\npod \"secret-example-volume\" created\n```", "```\n// check the Pod details\n# kubectl describe pods secret-example-volume\nName: secret-example-volume\n...\nContainers:\n  ubuntu:\n    ...\n    Mounts:\n      /secret from secret-volume (ro)\n      ...\nVolumes:\n  secret-volume:\n    Type: Secret (a volume populated by a Secret)\n    SecretName: access-token\n    Optional: false\n...\n```", "```\n# kubectl logs -f secret-example-volume\n9S!g0U61699r\n```", "```\n# kubectl delete secret access-token\nsecret \"access-token\" deleted\n```", "```\n# kubectl describe pods secret-example-volume\n...\nEvents:\n  Warning FailedMount 53s (x8 over 1m) kubelet, minikube MountVolume.SetUp failed for volume \"secret-volume\" : secrets \"access-token\" not found\n```", "```\n# cat configmap/2-7-4_configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: config-example\ndata:\n  app.properties: |\n    name=kubernetes-cookbook\n    port=443\n\n// create configmap\n# kubectl create -f configmap/2-7-4_configmap.yaml\nconfigmap \"config-example\" created\n```", "```\n# cat configmap/2-7-4_env.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: configmap-env\nspec:\n  containers:\n    - name: configmap\n      image: ubuntu\n      command: [\"/bin/sh\", \"-c\", \"while : ;do echo $APP_NAME; sleep 10; done\"]\n      env:\n - name: APP_NAME\n valueFrom:\n configMapKeyRef:\n name: config-example\n key: app.properties\n\n// create the pod\n#kubectl create -f configmap/2-7-4_env.yaml\npod \"configmap-env\" created\n```", "```\n// using configmap in a pod\n# cat configmap/2-7-4_volumes.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: configmap-volume\nspec:\n  containers:\n    - name: configmap\n      image: ubuntu\n      command: [\"/bin/sh\", \"-c\", \"while : ;do cat /src/app/config/app.properties; sleep 10; done\"]\n      volumeMounts:\n      - name: config-volume\n        mountPath: /src/app/config\n  volumes:\n    - name: config-volume\n      configMap:\n name: config-example\n```", "```\n// using projected volume\n# cat 2-7-5_projected_volume.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: projected-volume-example\nspec:\n  containers:\n  - name: container-tes\n    image: ubuntu\n    command: [\"/bin/sh\", \"-c\", \"while : ;do cat /projected-volume/configmap && cat /projected-volume/token; sleep 10; done\"]\n    volumeMounts:\n    - name: projected-volume\n      mountPath: \"/projected-volume\"\n  volumes:\n  - name: projected-volume\n    projected:\n sources:\n      - secret:\n          name: access-token\n          items:\n            - key: 2-7-1_access-token\n              path: token\n      - configMap:\n          name: config-example\n          items:\n            - key: app.properties\n              path: configmap\n\n// create projected volume\n# kubectl create -f 2-7-5_projected_volume.yaml\npod \"projected-volume-example\" created\n```", "```\n# kubectl logs -f projected-volume-example\nname=kubernetes-cookbook\nport=443\n9S!g0U61699r\n```", "```\n# cat my-pod.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: my-pod\nspec:\n  containers:\n  - name: my-container\n    image: nginx \n\n# kubectl create -f my-pod.yaml\npod \"my-pod\" created\n\n# kubectl get pods\nNAME      READY     STATUS    RESTARTS   AGE\nmy-pod    0/1       Running   0          4s\n```", "```\n$ kubectl describe pod my-pod\nName:         my-pod\nNamespace:    default\nNode:         minikube/192.168.64.12\nStart Time:   Sat, 16 Dec 2017 10:53:38 -0800\nLabels:       <none>\nAnnotations:  <none>\nStatus:       Running\nIP:           172.17.0.3\nContainers:\n my-container:\n    Container ID:   docker://fcf36d0a96a49c5a08eb6de1ef27ca761b4ca1c6b4a3a4312df836cb8e0a5304\n    Image:          nginx\n    Image ID:       docker-pullable://nginx@sha256:2ffc60a51c9d658594b63ef5acfac9d92f4e1550f633a3a16d898925c4e7f5a7\n    Port:           <none>\n    State:          Running\n      Started:      Sat, 16 Dec 2017 10:54:43 -0800\n    Ready:          True\n    Restart Count:  0\n    Environment:    <none>\n    Mounts:\n      /var/run/secrets/kubernetes.io/serviceaccount from default-token-lmd62 (ro)\nConditions:\n  Type           Status\n  Initialized    True \n  Ready          True \n  PodScheduled   True \nVolumes:\n  default-token-lmd62:\n    Type:        Secret (a volume populated by a Secret)\n    SecretName:  default-token-lmd62\n    Optional:    false\nQoS Class:       BestEffort\nNode-Selectors:  <none>\nTolerations:     <none>\nEvents:\n  Type    Reason                 Age   From               Message\n  ----    ------                 ----  ----               -------\n  Normal  Scheduled              1m    default-scheduler  Successfully assigned my-pod to minikube\n  Normal  SuccessfulMountVolume  1m    kubelet, minikube  MountVolume.SetUp succeeded for volume \"default-token-lmd62\"\n  Normal  Pulling                1m    kubelet, minikube  pulling image \"nginx\"\n  Normal  Pulled                 50s   kubelet, minikube  Successfully pulled image \"nginx\"\n  Normal  Created                50s   kubelet, minikube  Created container\n  Normal  Started                50s   kubelet, minikube  Started container\n```", "```\n//delete previous Pod\n$ kubectl delete pod --all\npod \"my-pod\" deleted\n\n$ cat duplicate.yaml \napiVersion: v1\nkind: Pod\nmetadata:\n  name: my-pod\nspec:\n  containers:\n  - name: my-container\n    image: nginx\n  - name: my-container\n    image: centos\n    command: [\"/bin/sh\", \"-c\", \"while : ;do curl http://localhost:80/; sleep 3; done\"]\n\n$ kubectl create -f duplicate.yaml \nThe Pod \"my-pod\" is invalid: spec.containers[1].name: Duplicate value: \"my-container\"\n```", "```\n$ cat my-nginx.yaml \napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-nginx\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      run: my-label\n  template:\n    metadata:\n      labels:\n        run: my-label\n    spec:\n      containers:\n      - name: my-container\n        image: nginx\n        ports:\n        - containerPort: 80\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: my-nginx\nspec:\n  ports:\n    - protocol: TCP\n      port: 80\n  type: NodePort\n  selector:\n    run: my-label\n\n//create Deployment and Service\n$ kubectl create -f my-nginx.yaml \ndeployment.apps \"my-nginx\" created\nservice \"my-nginx\" created\n\n//Deployment \"my-nginx\" is created\n$ kubectl get deploy\nNAME       DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE\nmy-nginx   3         3         3            3           1m\n\n//Service \"my-nginx\" is also created\n$ kubectl get svc\nNAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE\nkubernetes ClusterIP 10.0.0.1 <none> 443/TCP 13d\nmy-nginx NodePort 10.0.0.246 <none> 80:31168/TCP 1m\n```", "```\n// check all Namespaces, \"ns\" is the resource abbreviation of Namespace\n$ kubectl get ns\nNAME          STATUS    AGE\ndefault       Active    15d\nkube-public   Active    15d\nkube-system   Active    15d\n```", "```\n$ cat my-first-namespace.yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: my-namespace\n\n// create the resource by subcommand \"create\"\n$ kubectl create -f my-first-namespace.yaml\nnamespace \"my-namespace\" created\n// list the namespaces again\n$ kubectl get ns\nNAME           STATUS    AGE\ndefault        Active    16d\nkube-public    Active    16d\nkube-system    Active    16d\nmy-namespace   Active    6s\n```", "```\n// run a Deployment with a flag specifying Namespace\n$ kubectl run my-nginx --image=nginx --namespace=my-namespace\ndeployment.apps \"my-nginx\" created\n```", "```\n$ kubectl get deployment\nNo resources found.\n```", "```\n// list any Deployment in all Namespaces\n$ kubectl get deployment --all-namespaces\nNAMESPACE      NAME                       DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE\nkube-system    calico-kube-controllers    1         1         1            1           16d\nkube-system    calico-policy-controller   0         0         0            0           16d\nkube-system    kube-dns                   1         1         1            1           16d\nmy-namespace   my-nginx                   1         1         1            1           1m\n\n// get Deployments from my-namespace\n$ kubectl get deployment --namespace=my-namespace\nNAME       DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE\nmy-nginx   1         1         1            1           1m\n```", "```\n// check the current context in kubeconfig\n$ kubectl config current-context\nkubernetes-admin@kubernetes\n```", "```\n// create a new context called \"my-context\"\n// the new context is going to follow the cluster and the user of current context, but attached with new Namespace\n//This is for kubeadm environment\n$ kubectl config set-context my-context --namespace=my-namespace --cluster=kubernetes --user=kubernetes-admin\nContext \"my-context\" created.\n```", "```\n// for minikube environemt\n$ kubectl config set-context my-context --namespace=my-namespace --cluster=minikube --user=minikube\n```", "```\n//check kubectlconfig for the new context\n$ kubectl config view\napiVersion: v1\nclusters:\n- cluster:\n    certificate-authority-data: REDACTED\n    server: https://192.168.122.101:6443\n  name: kubernetes\ncontexts:\n- context:\n    cluster: kubernetes\n    user: kubernetes-admin\n  name: kubernetes-admin@kubernetes\n- context:\n cluster: kubernetes namespace: my-namespace user: kubernetes-admin name: my-context current-context: kubernetes-admin@kubernetes\nkind: Config\npreferences: {}\nusers:\n- name: kubernetes-admin\n  user:\n    client-certificate-data: REDACTED\n    client-key-data: REDACTED\n```", "```\n$ kubectl config use-context my-context\nSwitched to context \"my-context\".\n// check current context\n$ kubectl config current-context\nmy-context\n```", "```\n$ kubectl get deployment\nNAME       DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE\nmy-nginx   1         1         1            1           20m\n\n//double check the namespace of resource\n$ kubectl describe deployment my-nginx\nName:                   my-nginx\nNamespace:              my-namespace CreationTimestamp:      Mon, 18 Dec 2017 15:39:46 -0500\nLabels:                 run=my-nginx\n:\n(ignored)\n```", "```\n// first, go ahead to remove the Namespace \"my-namespace\"\n$ kubectl delete ns my-namespace\nnamespace \"my-namespace\" deleted\n// check the Deployment again, the exited \"my-nginx\" is terminated\n$ kubectl get deployment\nNo resources found.\n\n// while trying to create anything, the error message showing the default Namespace is not existed\n$ kubectl run my-alpine --image=alpine\nError from server (NotFound): namespaces \"my-namespace\" not found\n```", "```\n// first solution: use set-context to update the Namespace\n// here we just leave Namespace empty, which means to use default Namespace\n$ kubectl config set-context my-context --namespace=\"\"\nContext \"my-context\" modified.\n\n// second solution: switch current context to another context\n// in this case, it is kubeadm environment\n$ kubectl config use-context kubernetes-admin@kubernetes\nSwitched to context \"kubernetes-admin@kubernetes\".\n```", "```\n// create a Namespace by YAML file\n$ kubectl create -f my-first-namespace.yaml\nnamespace \"my-namespace\" created            \n\n$ kubectl describe ns my-namespace\nName:         my-namespace\nLabels:       <none>\nAnnotations:  <none>\nStatus:       Active\n\nNo resource quota.\n\nNo resource limits.\n```", "```\n$ cat my-first-limitrange.yaml\napiVersion: v1\nkind: LimitRange\nmetadata:\n  name: my-limitrange\nspec:\n  limits:\n  - type: Pod\n    max:\n      cpu: 2\n      memory: 1Gi\n    min:\n      cpu: 200m\n      memory: 6Mi\n  - type: Container\n    default:\n      cpu: 300m\n      memory: 200Mi\n    defaultRequest:\n      cpu: 200m\n      memory: 100Mi\n    max:\n      cpu: 2\n      memory: 1Gi\n    min:\n      cpu: 100m\n      memory: 3Mi\n```", "```\n// create the limitrange by file with the flag of Namespace\n// the flag --namespace can be abbreviated to \"n\"\n$ kubectl create -f my-first-limitrange.yaml -n my-namespace\nlimitrange \"my-limitrange\" created\n\n// check the resource by subcommand \"get\"\n$ kubectl get limitrange -n my-namespace\nNAME            AGE\nmy-limitrange   23s\n\n// check the customized Namespace\n$ kubectl describe ns my-namespace\nName:         my-namespace\nLabels:       <none>\nAnnotations:  <none>\nStatus:       Active\n\nNo resource quota.\n\nResource Limits\n Type       Resource  Min   Max  Default Request  Default Limit  Max Limit/Request Ratio\n ----       --------  ---   ---  ---------------  -------------  -----------------------\n Pod        cpu       200m  2    -                -              -\n Pod        memory    6Mi   1Gi  -                -              -\n Container  memory    3Mi   1Gi  100Mi            200Mi          -\n Container  cpu       100m  2    200m             300m           -\n```", "```\n// Try to request an overcommitted Pod, check the error message\n$ kubectl run my-greedy-nginx --image=nginx --namespace=my-namespace --restart=Never --requests=\"cpu=4\"\nThe Pod \"my-greedy-nginx\" is invalid: spec.containers[0].resources.requests: Invalid value: \"4\": must be less than or equal to cpu limit\n```", "```\n$ kubectl delete -f my-first-limitrange.yaml -n=my-namespace\nlimitrange \"my-limitrange\" deleted\n$ kubectl describe ns my-namespace\nName:         my-namespace\nLabels:       <none>\nAnnotations:  <none>\nStatus:       Active\n\nNo resource quota.\n\nNo resource limits.\n```", "```\n  labels:\n    project: pilot\n    environment: develop\n    tier: frontend\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: pilot.dev.nginx\n labels:\n project: pilot\n environment: develop\n tier: frontend\nspec:\n  containers:\n    - name: nginx\n      image: nginx\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: pilot.dev.memcached\n labels:\n project: pilot\n environment: develop\n tier: cache\nspec:\n  containers:\n    - name: memcached\n      image: memcached\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: pilot.prod.nginx\n labels:\n project: pilot\n environment: production\n tier: frontend\nspec:\n  containers:\n    - name : nginx\n      image: nginx\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: pilot.prod.memcached\n labels:\n project: pilot\n environment: production\n tier: cache\nspec:\n  containers:\n    - name: memcached\n      image: memcached\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: poc.dev.httpd\n labels:\n project: poc\n environment: develop\n tier: frontend\nspec:\n  containers:\n    - name: httpd\n      image: httpd\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: poc.dev.memcached\n labels:\n project: poc\n environment: develop\n tier: cache\nspec:\n  containers:\n    - name: memcached\n      image: memcached\n```", "```\n$ kubectl create -f pilot-dev.yaml\npod \"pilot.dev.nginx\" created\npod \"pilot.dev.memcached\" created\n\n$ kubectl create -f pilot-prod.yaml\npod \"pilot.prod.nginx\" created\npod \"pilot.prod.memcached\" created\n\n$ kubectl create -f poc-dev.yaml\npod \"poc.dev.httpd\" created\npod \"poc.dev.memcached\" created\n```", "```\n$ kubectl describe pod poc.dev.memcache\nName: poc.dev.memcached\nNamespace: default\nNode: minikube/192.168.99.100\nStart Time: Sun, 17 Dec 2017 17:23:15 -0800\nLabels: environment=develop\n project=poc\n tier=cache\nAnnotations: <none>\nStatus: Running\n...\n```", "```\n$ kubectl get pods -l \"project=pilot\"\nNAME READY STATUS RESTARTS AGE\npilot.dev.memcached 1/1 Running 0 21m\npilot.dev.nginx 1/1 Running 0 21m\npilot.prod.memcached 1/1 Running 0 21m\npilot.prod.nginx 1/1 Running 0 21m\n```", "```\n$ kubectl get pods -l \"tier=frontend\"\nNAME READY STATUS RESTARTS AGE\npilot.dev.nginx 1/1 Running 0 21m\npilot.prod.nginx 1/1 Running 0 21m\npoc.dev.httpd 1/1 Running 0 21m\n```", "```\n$ kubectl get pods -l \"tier=frontend,environment=develop\"\nNAME READY STATUS RESTARTS AGE\npilot.dev.nginx 1/1 Running 0 22m\npoc.dev.httpd 1/1 Running 0 21m\n```", "```\n$ kubectl get pods -l \"tier=frontend,environment!=develop\"\nNAME READY STATUS RESTARTS AGE\npilot.prod.nginx 1/1 Running 0 29m\n```", "```\n$ kubectl get pods -l \"project in (pilot)\"\nNAME READY STATUS RESTARTS AGE\npilot.dev.memcached 1/1 Running 0 36m\npilot.dev.nginx 1/1 Running 0 36m\npilot.prod.memcached 1/1 Running 0 36m\npilot.prod.nginx 1/1 Running 0 36m\n\n```", "```\n$ kubectl get pods -l \"project in (pilot), tier in (frontend)\"\nNAME READY STATUS RESTARTS AGE\npilot.dev.nginx 1/1 Running 0 37m\npilot.prod.nginx 1/1 Running 0 37m\n```", "```\n$ kubectl get pods -l \"project in (pilot), tier in (frontend,cache)\"\nNAME READY STATUS RESTARTS AGE\npilot.dev.memcached 1/1 Running 0 37m\npilot.dev.nginx 1/1 Running 0 37m\npilot.prod.memcached 1/1 Running 0 37m\npilot.prod.nginx 1/1 Running 0 37m\n```", "```\n$ kubectl get pods -l \"project in (pilot), tier notin (frontend, backend)\"\nNAME READY STATUS RESTARTS AGE\npilot.dev.memcached 1/1 Running 0 50m\npilot.prod.memcached 1/1 Running 0 50m\n```", "```\n$ kubectl get pods -l \"project notin (pilot), environment=develop\"\nNAME READY STATUS RESTARTS AGE\npoc.dev.httpd 1/1 Running 0 2m\npoc.dev.memcached 1/1 Running 0 2m\n```", "```\n//check your selector filter is correct or not\n$ kubectl get pods -l 'environment=production,project=pilot,tier=frontend'\nNAME READY STATUS RESTARTS AGE\npilot.prod.nginx 1/1 Running 0 19m\n\n//create Service yaml that specify selector\n$ cat pilot-nginx-svc.yaml \napiVersion: v1\nkind: Service\nmetadata:\n  name: pilot-nginx-svc\nspec:\n  type: NodePort\n  ports:\n    - protocol: TCP\n      port: 80\n selector:\n    project: pilot\n    environment: production tier: frontend\n\n//create pilot-nginx-svc \n$ kubectl create -f pilot-nginx-svc.yaml \nservice \"pilot-nginx-svc\" created\n\n```", "```\n$ kubectl expose pod pilot.prod.nginx --name=pilot-nginx-svc2 --type=NodePort --port=80 --selector=\"project=pilot,environment=develop,tier=frontend\"\nservice \"pilot-nginx-svc2\" exposed\n```", "```\n$ cat deploy_set_selector.yaml \napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-nginx\nspec:\n  replicas: 3\n selector:\n matchExpressions:\n - {key: project, operator: In, values: [poc]}\n - {key: environment, operator: In, values: [staging]}\n - {key: tier, operator: NotIn, values: [backend,cache]}\n  template:\n    metadata:\n      labels:\n        project: poc\n        environment: staging\n        tier: frontend\n    spec:\n      containers:\n      - name: my-nginx\n        image: nginx\n        ports:\n        - containerPort: 80\n```", "```\n$ kubectl create -f deploy_set_selector.yaml\ndeployment.apps \"my-nginx\" created\n\n$ kubectl get rs\nNAME                  DESIRED   CURRENT   READY     AGE\nmy-nginx2-764d7cfff   3         3         3         19s\n\n$ kubectl describe rs my-nginx2-764d7cfff\nName:           my-nginx2-764d7cfff\nNamespace:      default\nSelector:       environment in (staging),pod-template-hash=320837999,project in (poc),tier notin (backend,cache)\n...\n...\nPod Template:\n  Labels:  environment=staging\n           pod-template-hash=320837999\n           project=poc\n           tier=frontend\n...\n...\n```"]
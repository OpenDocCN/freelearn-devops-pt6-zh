- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Building Applications and Pushing Them to Amazon ECR
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建应用并将其推送到 Amazon ECR
- en: A Kubernetes Pod consists of at least one container. These containers are stored
    in a public or private repository and pulled by a worker node when it receives
    a Pod specification and needs to deploy a container. This chapter looks at how
    you can use AWS **Elastic Container Registry** (**ECR**) to securely store container
    images using multiple repositories and allow EKS to use them when it deploys Pods.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 Kubernetes Pod 至少由一个容器组成。这些容器存储在公共或私有仓库中，并在工作节点接收到 Pod 规范并需要部署容器时被拉取。本章将介绍如何使用
    AWS **弹性容器注册表**（**ECR**）安全地存储容器镜像，使用多个仓库，并允许 EKS 在部署 Pod 时使用这些镜像。
- en: 'Specifically, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，我们将讨论以下主题：
- en: Introducing Amazon ECR
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍 Amazon ECR
- en: Understanding repository authentication
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解仓库认证
- en: Building and pushing a container image to ECR
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建并将容器镜像推送到 ECR
- en: Using advanced ECR features
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用高级 ECR 功能
- en: Using an ECR image in your EKS cluster
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 EKS 集群中使用 ECR 镜像
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The reader should have a familiarity with YAML, basic networking, and EKS architecture.
    Before getting started with this chapter, please ensure the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 读者应该对 YAML、基础网络以及 EKS 架构有一定了解。在开始本章之前，请确保以下几点：
- en: You have network connectivity to your EKS cluster API endpoint
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你能够访问 EKS 集群 API 端点
- en: The AWS CLI, Docker, and kubectl binary are installed on your workstation
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的工作站上已安装 AWS CLI、Docker 和 kubectl 二进制文件
- en: You have a basic understanding of Docker and Dockerfiles
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你对 Docker 和 Dockerfile 有基本了解
- en: Introducing Amazon ECR
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 Amazon ECR
- en: In [*Chapter 1*](B18129_01.xhtml#_idTextAnchor014), we talked about the general
    structure of a container and how it uses a union filesystem to create a layered
    image. This image format has become the **Open Container Initiative** (**OCI**)
    image specification, and various open source build tools such as Podman or BuildKit
    support this format.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第1章*](B18129_01.xhtml#_idTextAnchor014) 中，我们讨论了容器的一般结构以及它如何使用联合文件系统来创建分层镜像。这个镜像格式已成为
    **开放容器倡议**（**OCI**）镜像规范，Podman 或 BuildKit 等各种开源构建工具都支持这一格式。
- en: When you build an image using the `docker build` command, an image is created
    locally, which is fine for the local machine, but when you need to use that image
    in EKS or another Kubernetes distribution/service, you need to push it to a repository
    that can be accessed by other systems that make up your EKS cluster.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用 `docker build` 命令构建镜像时，镜像会在本地创建，这对于本地机器来说是可以的，但当你需要在 EKS 或其他 Kubernetes
    分发版/服务中使用该镜像时，你需要将其推送到一个仓库，以便其他系统能够访问，进而组成你的 EKS 集群。
- en: If you browse Docker Hub at [https://hub.docker.com/](https://hub.docker.com/)
    and log in, you can see multiple container images for Postgres, Redis, Python,
    and so on. Each image is tagged with a version tag such as 13.8 as well as potentially
    the latest tag, which will often (but not always) denote the latest version of
    a container image. Docker Hub is a public repository, which means it can be accessed
    from the internet. These are considered public repositories and can be accessed
    by anyone with a Docker Hub ID.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你浏览 [Docker Hub](https://hub.docker.com/) 并登录，你可以看到多个容器镜像，比如 Postgres、Redis、Python
    等。每个镜像都会有一个版本标签，如 13.8，以及可能的最新标签，这通常（但不总是）表示容器镜像的最新版本。Docker Hub 是一个公共仓库，意味着可以从互联网上访问。它们被认为是公共仓库，任何拥有
    Docker Hub ID 的人都可以访问。
- en: ECR hosts multiple repositories that in turn host multiple versions of a container
    image (as well as other OCI-compliant artifacts) in the same way Docker Hub does,
    but access is controlled through IAM and repository controls that you control
    and are often used to host containers that contain private code or configurations.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: ECR 托管多个仓库，这些仓库又托管多个版本的容器镜像（以及其他符合 OCI 标准的工件），就像 Docker Hub 一样，但访问控制通过 IAM 和仓库控制来管理，这些控制由你掌握，通常用于托管包含私有代码或配置的容器。
- en: 'The easiest way to understand ECR is to create a repository. The next example
    shows a simple Terraform configuration that will create a private repository called
    `myapp` in the current AWS account/region:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 理解 ECR 最简单的方法是创建一个仓库。下面的示例展示了一个简单的 Terraform 配置，它将在当前 AWS 账户/区域中创建一个名为 `myapp`
    的私有仓库：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Two key attributes in the ECR configuration are `image_tag_mutability` (which
    allows an image with an existing tag to upload, replacing the existing one) and
    `scan_on_push`, which will scan the image for basic vulnerabilities after it is
    uploaded (pushed).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: ECR配置中的两个关键属性是`image_tag_mutability`（允许使用现有标签的镜像上传，替换原有镜像）和`scan_on_push`，后者会在上传（推送）镜像后扫描该镜像的基本漏洞。
- en: The Terraform code will output the newly created repository URL (for example,
    `1122334.dkr.ecr.eu-central-1.amazonaws.com/myapp`), which we will use later to
    push a local image to ECR.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform代码将输出新创建的存储库URL（例如，`1122334.dkr.ecr.eu-central-1.amazonaws.com/myapp`），我们稍后将使用该URL将本地镜像推送到ECR。
- en: ECR is charged based on the size of the images that are stored in the registry
    as well as any data transfer costs for data leaving AWS. For example, assuming
    you are storing a total of 60 GB of software images, you will be charged for storage
    at $0.10 per GB equaling a total of $6/month, but charged nothing for data transfer
    in. Any EKS cluster within the same region pulling the images will not be charged
    for data transfer out. So, the total cost will equal $6/month.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: ECR的收费依据是存储在注册表中的镜像大小以及任何离开AWS的数据传输费用。例如，假设你存储了总共60GB的软件镜像，你将按每GB $0.10的价格收费，总计每月$6，但数据传入不收费。任何在同一地区的EKS集群拉取这些镜像时，不会收取数据传出费用。因此，总费用为每月$6。
- en: In reality, your costs will probably be lower as there is a Free Tier discount
    in the first year for private repositories and some free storage and transfer-out
    limits as well. Please refer to [https://aws.amazon.com/ecr/pricing/](https://aws.amazon.com/ecr/pricing/)
    for more information.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，您的费用可能会更低，因为在第一个年度对于私有存储库有免费层折扣，并且还包括一些免费的存储和传输出限额。有关更多信息，请参阅[https://aws.amazon.com/ecr/pricing/](https://aws.amazon.com/ecr/pricing/)。
- en: Let’s look at how ECR provides secure access to the repositories.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看ECR如何提供对存储库的安全访问。
- en: Understanding repository authentication
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解存储库认证
- en: As we discussed, ECR repositories can be private or public, and the security
    credentials you use to access these repositories will vary depending on the type
    of repository you create.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所讨论的，ECR存储库可以是私有的或公共的，您用来访问这些存储库的安全凭证将根据您创建的存储库类型而有所不同。
- en: Accessing ECR private repositories
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问ECR私有存储库
- en: Access to private repositories is controlled through AWS IAM and repository
    permissions. If you are using the native AWS API, then you can use the standard
    Signature Version 4 signing process used by API clients such as the AWS CLI or
    the Python `boto3` library.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 对私有存储库的访问通过AWS IAM和存储库权限进行控制。如果您使用原生AWS API，则可以使用API客户端（如AWS CLI或Python的`boto3`库）使用的标准签名版本4签名过程。
- en: 'In this chapter, we will use Docker commands to interact with the ECR repository,
    so we need to convert the AWS access and secret keys into something Docker will
    understand. This is done with the `aws ecr get-login-password` command and passing
    the output into the `docker login` command. An example is shown next:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用Docker命令与ECR存储库进行交互，因此我们需要将AWS的访问密钥和私密密钥转换为Docker能够理解的格式。这是通过`aws
    ecr get-login-password`命令实现的，并将输出传递给`docker login`命令。以下是一个示例：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Important note
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: Please note that credentials are valid for 12 hours, after which time the `docker
    login` command needs to be rerun.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，凭证的有效期为12小时，过后需要重新运行`docker login`命令。
- en: This now means Docker commands such as `docker pull` or `docker push` will have
    an authentication token that will allow them to interact with the ECR. In order
    to use the `aws ecr get-login-password` command, the user account being used must
    have the appropriate IAM permissions.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，像`docker pull`或`docker push`这样的Docker命令将带有一个认证令牌，允许它们与ECR进行交互。为了使用`aws
    ecr get-login-password`命令，所用的用户账户必须具有适当的IAM权限。
- en: 'The following IAM policy is the default one used by EKS worker nodes to both
    access and pull images, as well as retrieve an authorization token (`GetAuthorizationToken`
    is the underlying API call the `get-login-password` command calls):'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以下IAM策略是EKS工作节点用于访问和拉取镜像的默认策略，以及获取授权令牌（`GetAuthorizationToken`是`get-login-password`命令调用的底层API）。
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As well as the IAM permissions, every registry has the ability to apply individual
    policies. Typically, an IAM role such as the one shown previously is used to give
    broad access to the ECR service, and repository policies are used to restrict
    access to specific repositories. For example, the following Terraform resource
    adds a policy that would allow account `22334455` to push images to our repository:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 除了IAM权限，每个注册表还可以应用单独的策略。通常，如前所示的IAM角色用于授予对ECR服务的广泛访问权限，而仓库策略则用于限制对特定仓库的访问。例如，以下Terraform资源会添加一个策略，允许账户`22334455`将镜像推送到我们的仓库：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Important note
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: There are also registry-wide permissions you can apply that are used to scope
    access to the replication and pull through cache features, which will be discussed
    later in this chapter.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些可以应用的注册表级权限，这些权限用于限制访问复制和拉取缓存功能，后续章节会详细讨论这些内容。
- en: Also, note that `aws_ecr_repository.myapp.name` references the repository created
    previously and would need to be changed if you structure your Terraform repository
    or code differently.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，请注意`aws_ecr_repository.myapp.name`引用的是之前创建的仓库，如果你以不同的方式结构化你的Terraform仓库或代码，这个引用需要修改。
- en: One final note—there is no real difference between private and public ECR repositories
    as they are managed and costed in the same way. The key difference is public repositories
    allow anonymous users to pull images from them and are visible on the Amazon ECR
    Public Gallery. This means anyone can pull images and, as repositories have a
    cost element based on data transfer, *anonymous users pulling your images will
    contribute to your* *overall bill*!
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一条提示——私有和公共ECR仓库之间没有实际区别，它们的管理和计费方式相同。关键的区别在于，公共仓库允许匿名用户从中拉取镜像，并且在Amazon ECR公共画廊中可见。这意味着任何人都可以拉取镜像，而且由于仓库的费用基于数据传输，因此，*匿名用户拉取你的镜像将会增加你的*
    *整体账单*！
- en: We will use private ECR repositories only for EKS, so please refer to [https://docs.aws.amazon.com/AmazonECR/latest/public/what-is-ecr.html](https://docs.aws.amazon.com/AmazonECR/latest/public/what-is-ecr.html)
    if you want further information on public repositories.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将仅为EKS使用私有ECR仓库，因此如果你需要进一步了解公共仓库，请参考[https://docs.aws.amazon.com/AmazonECR/latest/public/what-is-ecr.html](https://docs.aws.amazon.com/AmazonECR/latest/public/what-is-ecr.html)。
- en: Now we understand how to authenticate with a private repository, let’s see how
    we build and push an image to our ECR repository.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经理解了如何通过认证访问私有仓库，接下来让我们看看如何构建并将镜像推送到我们的ECR仓库。
- en: Building and pushing a container image to ECR
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建并推送容器镜像到ECR
- en: If we consider a simple API using Python and FastAPI, shown next, we need to
    first package that up into a Docker image locally. We can then test if it is working
    locally before we push it to ECR. I’ve chosen Python and FastAPI as they are very
    simple to get up and running, but you can create the container using any language
    or framework.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们考虑一个使用Python和FastAPI的简单API，如下所示，首先需要将其打包成一个本地的Docker镜像。然后我们可以在本地测试它是否正常工作，再将其推送到ECR。我选择Python和FastAPI是因为它们非常简单，可以快速启动，但你也可以使用任何语言或框架来创建容器。
- en: 'The Python code in the `main.py` file is shown next:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`main.py`文件中的Python代码：
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We will also need a `requirements.txt` file, which will have the following
    entries:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要一个`requirements.txt`文件，里面包含以下条目：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We will use a simple Dockerfile (shown next) that creates an image using a
    non-root user, installs the necessary libraries through `pip` (in this case, FastAPI
    and Uvicorn), and then runs the server using the Docker `CMD` key:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个简单的Dockerfile（如下所示），它使用非root用户创建一个镜像，通过`pip`（在此情况下为FastAPI和Uvicorn）安装必要的库，然后使用Docker的`CMD`关键字启动服务器：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We can then build and run the container using the following Docker commands:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用以下Docker命令来构建并运行容器：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You now be able to curl `http://127.0.0.1:8080` to get a reply or `http://127.0.0.1:8080/docs`
    to get the API definition. Now that we have a working application, we can use
    the following commands to log in, tag, and push the image to our ECR repository
    we created in the previous section:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以通过`http://127.0.0.1:8080`发起curl请求获取回复，或者通过`http://127.0.0.1:8080/docs`获取API定义。现在我们有了一个可运行的应用程序，可以使用以下命令登录、标记并将镜像推送到我们在上一节中创建的ECR仓库：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If we now go into the AWS console, we will be able to view the image in our
    repository. As we enabled `scan_on_push`, we will also get a view of any vulnerabilities
    that the basic scanning has detected. This scanning uses the open source Clair
    project to perform the scan:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在进入 AWS 控制台，我们将能够查看我们仓库中的镜像。由于我们启用了`scan_on_push`，我们还可以查看基本扫描检测到的任何漏洞。此扫描使用开源
    Clair 项目来执行扫描：
- en: '![Figure 11.1 – Initial image details in ECR](img/B18129_11_01.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.1 – ECR 中初始镜像详情](img/B18129_11_01.jpg)'
- en: Figure 11.1 – Initial image details in ECR
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.1 – ECR 中初始镜像详情
- en: 'If we click on the **details** link in the bottom-right corner, we get a more
    detailed view of the issues, complete with a link to the **Common Vulnerabilities
    and Exposures** (**CVE**) number. An example is shown next that references the
    two critical issues identified in my image:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们点击右下角的**详情**链接，我们将看到问题的更详细视图，并附有指向**常见漏洞和暴露**（**CVE**）编号的链接。接下来的示例引用了我镜像中发现的两个严重问题：
- en: '![Figure 11.2 – Initial image scan output](img/B18129_11_02.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.2 – 初始镜像扫描输出](img/B18129_11_02.jpg)'
- en: Figure 11.2 – Initial image scan output
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.2 – 初始镜像扫描输出
- en: In most companies I have worked with, all the **CRITICAL** issues need to be
    removed, as a minimum, before the image can be considered *safe*. This might be
    the developers’, DevOps’, or platform engineers’ responsibility, but in reality,
    it’s everyone’s responsibility to make the image as secure as possible. Image
    remediation can be a time-consuming practice, but there are some simple things
    you can do!
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在我所工作的多数公司中，所有**严重**问题都需要在镜像被认为是*安全*之前修复。这可能是开发人员、DevOps 或平台工程师的责任，但实际上，确保镜像尽可能安全是每个人的责任。镜像修复可能是一个耗时的过程，但有一些简单的操作可以帮助你做到这一点！
- en: 'By simply changing the base image from `python:3.9` to `python:3.10-slim-bullseye`
    in the Dockerfile and tagging it as version 0.0.2, I have removed all the critical
    vulnerabilities, reduced the overall vulnerability count, *and* reduced the size
    of the image to nearly a quarter, which will really improve download time and
    save costs. This is shown next:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 通过简单地将 Dockerfile 中的基础镜像从`python:3.9`更改为`python:3.10-slim-bullseye`，并将其标记为版本
    0.0.2，我已经去除了所有严重漏洞，减少了整体漏洞数，*并*将镜像的大小减少了近四分之一，这将显著提高下载速度并节省成本。如下所示：
- en: '![Figure 11.3 – Improved container security posture and size](img/B18129_11_03.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.3 – 改进的容器安全态势和大小](img/B18129_11_03.jpg)'
- en: Figure 11.3 – Improved container security posture and size
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.3 – 改进的容器安全态势和大小
- en: So, we have our image uploaded into ECR, the **CRITICAL** vulnerabilities have
    been remediated, and the size has been optimized. Next, let’s look at some more
    advanced features of ECR before we demonstrate using that image in EKS.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们已经将镜像上传到 ECR，**严重**漏洞已被修复，镜像大小也得到了优化。接下来，在演示如何在 EKS 中使用该镜像之前，让我们先看看 ECR
    的一些更高级功能。
- en: Using advanced ECR features
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用高级 ECR 功能
- en: 'ECR has two advanced features that are useful when you are managing a large
    EKS environment: **pull through cache**, which allows a private repository to
    cache public images, and **cross-region replication**, where you replicate images
    to another region for use. Let’s explore both options.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: ECR 具有两个在管理大型 EKS 环境时非常有用的高级功能：**拉取缓存**，允许私有仓库缓存公共镜像，以及**跨区域复制**，将镜像复制到另一区域以供使用。让我们一起来探索这两个选项。
- en: Pull-through-cache explained
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拉取缓存解释
- en: Pull-through-cache allows a private repository to cache images from either the
    public ECR repositories or from Quay (please note that Docker Hub is not currently
    supported). We will use the public ECR repositories in this example, and this
    allows us to offer public images without giving public internet access to our
    worker nodes.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 拉取缓存允许私有仓库缓存来自公共 ECR 仓库或来自 Quay 的镜像（请注意，目前 Docker Hub 不被支持）。我们将在这个示例中使用公共 ECR
    仓库，这样我们就可以在不向公共互联网开放工作节点的情况下提供公共镜像。
- en: 'Let’s configure a rule in ECR using the following Terraform code; please note
    it’s done at the registry level, not at the repository level:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用以下 Terraform 代码在 ECR 中配置一个规则；请注意，它是在注册表级别配置的，而不是在仓库级别：
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Once this is deployed, we can log in and use the `ecr-public` prefix to pull
    images. The following example pulls the latest Alpine image:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦部署完成，我们可以登录并使用 `ecr-public` 前缀来拉取镜像。以下示例拉取最新的 Alpine 镜像：
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'A corresponding private repository has now been created (see the following
    screenshot), with the pull-through cache enabled:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一个相应的私有仓库现在已创建（见下图），并启用了拉取缓存：
- en: '![Figure 11.4 – Pull-through-cache-enabled repository](img/B18129_11_04.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.4 – 启用拉取缓存的仓库](img/B18129_11_04.jpg)'
- en: Figure 11.4 – Pull-through-cache-enabled repository
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.4 – 启用拉取缓存的仓库
- en: Now we understand how we work with repositories in a single region, let’s look
    at how we can work across different AWS regions.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了如何在单一区域内使用仓库，让我们来看看如何在不同的 AWS 区域之间工作。
- en: Cross-region replication
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跨区域复制
- en: You may want to deploy your application in multiple regions for **disaster recovery**
    (**DR**) reasons or for global reach. You can use cross-region replication to
    copy one, many, or all images from one region to another, or to multiple regions.
    You can do this in the same account or across different accounts, but bear in
    mind you need to set up a cross-account role if you want to replicate from one
    account to another.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能希望出于 **灾难恢复**（**DR**）原因或全球覆盖的需求，在多个区域部署你的应用程序。你可以使用跨区域复制，将一个、多个或所有镜像从一个区域复制到另一个区域，或者多个区域。你可以在同一账户内操作，也可以跨不同账户进行操作，但请记住，如果你想从一个账户复制到另一个账户，你需要设置跨账户角色。
- en: Looking at the Terraform configuration shown next, we can see it consists of
    two parts. The first is a `destination` rule that states which region and account
    will be the target for the replication. Please note you can have multiple destination
    rules. The second part is optional and specifies a `filter` rule to select the
    repositories to replicate.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 查看下图所示的 Terraform 配置，我们可以看到它由两部分组成。第一部分是一个 `destination` 规则，指定哪个区域和账户将作为复制的目标。请注意，您可以拥有多个目标规则。第二部分是可选的，指定一个
    `filter` 规则，用于选择要复制的仓库。
- en: 'In the example shown next, we will use the `myapp` prefix. If this is not used,
    all images are replicated:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图示例中，我们将使用 `myapp` 前缀。如果未使用此前缀，则所有镜像都会被复制：
- en: '[PRE11]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As only repository content pushed to a repository after replication is configured
    is replicated, we now need to push a new tag in order to see the image replicated
    to `eu-west-1`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 由于只有在配置了复制之后推送到仓库的内容才会被复制，现在我们需要推送一个新的标签，以便查看镜像是否成功复制到 `eu-west-1`。
- en: If you follow the commands shown in the *Building and pushing a container image
    to ECR* section, you can create a new image for the `myapp` repository and push
    it to ECR.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遵循 *构建并推送容器镜像到 ECR* 部分中的命令，你可以为 `myapp` 仓库创建一个新镜像并将其推送到 ECR。
- en: 'You will see it replicated to the region. If you use the AWS console and go
    to the relevant `repo/tag`, you can see the replication status. In the example
    shown next, `myapp:0.0.3` has been successfully replicated to `eu-west-1`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到它被复制到该区域。如果你使用 AWS 控制台并进入相关的 `repo/tag`，你可以查看复制状态。在下图示例中，`myapp:0.0.3` 已成功复制到
    `eu-west-1`：
- en: '![Figure 11.5 – Replication status for new image tag](img/B18129_11_05.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.5 – 新镜像标签的复制状态](img/B18129_11_05.jpg)'
- en: Figure 11.5 – Replication status for new image tag
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.5 – 新镜像标签的复制状态
- en: With this, we have explored the features and capabilities of ECR. Let’s look
    at the final section and see how we use ECR images in EKS.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们已经探讨了 ECR 的功能和特性。让我们来看最后一部分，看看如何在 EKS 中使用 ECR 镜像。
- en: Using an ECR image in your EKS cluster
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在你的 EKS 集群中使用 ECR 镜像
- en: EKS worker nodes can pull images from ECR as they should have the `AmazonEC2ContainerRegistryReadOnly`
    managed role applied to the worker nodes.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: EKS 工作节点可以从 ECR 拉取镜像，因为它们应该已应用 `AmazonEC2ContainerRegistryReadOnly` 管理角色。
- en: So, the only thing that needs to be done is to specify the full `<aws_account_id>.dkr.ecr.aws_region.amazonaws.com/<image-name>:<tag>`
    ECR path in your Kubernetes manifest or Helm chart.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，唯一需要做的就是在你的 Kubernetes 清单或 Helm 图表中指定完整的 `<aws_account_id>.dkr.ecr.aws_region.amazonaws.com/<image-name>:<tag>`
    ECR 路径。
- en: 'Building on [*Chapter 4*](B18129_04.xhtml#_idTextAnchor067), *Running Your
    First Application on EKS*, we create a deployment that uses our `myapp` container
    and a `NodePort` service that exposes that service outside the cluster. The only
    real difference is in the Pod spec, we reference the fully qualified image name.
    This is illustrated next. The first section defines the Kubernetes Deployment:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 基于 [*第 4 章*](B18129_04.xhtml#_idTextAnchor067)，*在 EKS 上运行你的第一个应用程序*，我们创建一个使用
    `myapp` 容器的部署，并且创建一个暴露该服务到集群外的 `NodePort` 服务。唯一的实际区别是在 Pod 规范中，我们引用了完全限定的镜像名称。下面是示例。第一部分定义了
    Kubernetes 部署：
- en: '[PRE12]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, we define the services:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们定义服务：
- en: '[PRE13]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'As this is a `NodePort` service, we can get the IP address of the host the
    Pod is running on by running the following command:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一个 `NodePort` 服务，我们可以通过运行以下命令获取 Pod 所在主机的 IP 地址：
- en: '[PRE14]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We can then curl `http://<hostIP>:32410`, and we will see the FastAPI response
    message.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用`curl http://<hostIP>:32410`，并将看到FastAPI响应信息。
- en: Important note
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Please make sure the correct routing and security group rules are set up to
    allow your client to connect to the worker node IP address on port `32410`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保正确配置路由和安全组规则，以允许您的客户端通过端口`32410`连接到工作节点的IP地址。
- en: In this section, we have looked at how you can host your private images and
    deploy them into EKS with minimal changes to your manifests. We’ll now revisit
    the key learning points from this chapter.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们已经讨论了如何托管私有镜像，并将其最小化修改后部署到EKS。接下来，我们将回顾本章的关键学习点。
- en: Summary
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we explored how we can use ECR to store, cache, and replicate
    container images. Using ECR comes at a cost, which is made up of the total size
    of all images in your repository and egress costs, but by using the scan-on-push
    capability of ECR we can identify and resolve critical dependencies as well as
    optimize the size of the image, supporting a better security posture and more
    cost-effective images.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了如何使用ECR存储、缓存和复制容器镜像。使用ECR会产生费用，这些费用包括您仓库中所有镜像的总大小以及外出流量费用，但通过使用ECR的推送扫描功能，我们可以识别并解决关键依赖问题，同时优化镜像大小，支持更好的安全性和更具成本效益的镜像。
- en: There are also more advanced features of ECR that allow us to support a DR strategy
    or deploy applications across multiple regions using cross-region replication
    as well as caching public images from the ECR public repositories or Quay. Finally,
    we looked at how you can configure IAM and repository policies to control access
    to the images inside and pull those images into EKS.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: ECR还有更多高级功能，允许我们支持灾难恢复（DR）策略或使用跨区域复制部署跨多个区域的应用程序，还可以从ECR公共仓库或Quay缓存公共镜像。最后，我们探讨了如何配置IAM和仓库策略来控制对镜像的访问，并将这些镜像拉入EKS。
- en: In the next chapter, we will look at how you can use the AWS storage driver
    to provide stateful storage to Pods as a source of your applications and Pods.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何使用AWS存储驱动程序为Pod提供有状态存储，以作为应用程序和Pod的数据源。
- en: Further reading
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'How the AWS Signature V4 signing process works: [https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html](https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html)'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS签名V4签名过程的工作原理：[https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html](https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html)
- en: 'Using the ECR Public Gallery: [https://docs.aws.amazon.com/AmazonECR/latest/public/public-gallery.html](https://docs.aws.amazon.com/AmazonECR/latest/public/public-gallery.html)'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ECR公共库：[https://docs.aws.amazon.com/AmazonECR/latest/public/public-gallery.html](https://docs.aws.amazon.com/AmazonECR/latest/public/public-gallery.html)
- en: 'Using Clair to scan your containers: [https://github.com/quay/clair](https://github.com/quay/clair)'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Clair扫描您的容器：[https://github.com/quay/clair](https://github.com/quay/clair)

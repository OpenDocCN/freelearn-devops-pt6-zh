["```\n    % terraform init\n    Initializing the backend...\n    Initializing provider plugins...\n    - Reusing previous version of hashicorp/aws from the dependency lock file\n    - Using previously-installed hashicorp/aws v4.26.0\n    Terraform has been successfully initialized!\n    ```", "```\n% terraform plan\n………\n~ cluster_endpoint       = \"https://647937631DD1A55F1FDDAB99E08DEE0C.gr7.us-east-1.eks.amazonaws.com\" -> (known after apply)\n```", "```\n    % terraform apply\n    ```", "```\n% aws eks --region $(terraform output -raw region) update-kubeconfig --name $(terraform output -raw cluster_name)\n```", "```\n% kubectl config current-context\n```", "```\n% kubectl config view -o json | jq '.contexts[].name'\n\"arn:aws:eks:us-east-1:803831378417:cluster/MultiClusterDemo-Cluster1-cluster\"\n\"minikube\"\n```", "```\n% kubectl config use-context \"arn:aws:eks:us-east-1:803831378417:cluster/MultiClusterDemo-Cluster1-cluster\"\nSwitched to context \"arn:aws:eks:us-east-1:803831378417:cluster/MultiClusterDemo-Cluster1-cluster\".\n```", "```\n% kubectl config use-context minikube\nSwitched to context \"minikube\".\n```", "```\n% kubectl create -f sockshop/devops/deploy/kubernetes/manifests/00-sock-shop-ns.yaml\n% kubectl create -f  sockshop/devops/deploy/kubernetes/manifests/* -n sock-shop\n```", "```\ntype: NodePort\n…..\n    nodePort: 30001\n```", "```\n$ kubectl apply -f Chapter4/ClusterIp-front-end-svc.yaml\n```", "```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  annotations:\n    kubernetes.io/ingress.class: istio\n  name: sockshop-istio-ingress\n  namespace: sock-shop\nspec:\n  rules:\n  - host: \"sockshop.com\"\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: front-end\n            port:\n              number: 80\n```", "```\n$ kubectl create -f Chapter4/1-istio-ingress.yaml\n```", "```\n$ kubectl get svc istio-ingressgateway -n istio-system -o wide\nNAME                   TYPE           CLUSTER-IP      EXTERNAL-IP     PORT(S)                                                                      AGE    SELECTOR\nistio-ingressgateway   LoadBalancer   10.97.245.106   10.97.245.106   15021:32098/TCP,80:31120/TCP,443:30149/TCP,31400:30616/TCP,15443:32339/TCP   6h9m   app=istio-ingressgateway,istio=ingressgateway\n```", "```\n$ kubectl get svc istio-ingressgateway -n istio-system\nNAME                   TYPE           CLUSTER-IP       EXTERNAL-IP                                                               PORT(S)                                                                      AGE\nistio-ingressgateway   LoadBalancer   172.20.143.136   a816bb2638a5e4a8c990ce790b47d429-1565783620.us-east-1.elb.amazonaws.com   15021:30695/TCP,80:30613/TCP,443:30166/TCP,31400:30402/TCP,15443:31548/TCP   29h\n```", "```\ncurl -HHost:sockshop.com http://a816bb2638a5e4a8c990ce790b47d429-1565783620.us-east-1.elb.amazonaws.com/\n```", "```\n    $ kubectl create ns chapter4\n    ```", "```\n    $ kubectl label namespace chapter4 istio-injection=enabled --overwrite\n    ```", "```\n    $ kubectl create configmap envoy-dummy --from-file=Chapter3/envoy-config-1.yaml -n chapter4\n    ```", "```\n    $ kubectl apply -f Chapter4/01-envoy-proxy.yaml\n    ```", "```\n    $ kubectl apply -f Chapter4/2-istio-ingress.yaml\n    ```", "```\n$ kubectl delete -f Chapter4/2-istio-ingress.yaml\n$ kubectl delete -f Chapter4/1-istio-ingress.yaml\n```", "```\napiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: chapter4-gateway\n  namespace: chapter4\nspec:\n  selector:\n    istio: ingressgateway\n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - \"sockshop.com\"\n    - \"mockshop.com\"\n```", "```\n---\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: sockshop\n  namespace: chapter4\nspec:\n  hosts:\n  - \"sockshop.com\"\n  gateways:\n  - chapter4-gateway\n  http:\n  - match:\n    - uri:\n        prefix: /\n    route:\n    - destination:\n        port:\n          number: 80\n        host: front-end.sock-shop.svc.cluster.local\n```", "```\n$ kubectl apply -f chapter4/3-istio-gateway.yaml\n```", "```\n    direct_response:\n                      status: 200\n                      body:\n                        inline_string: \"V2----------Bootstrap Service Mesh Implementation with Istio----------V2\"\n    ```", "```\n    $ kubectl create configmap envoy-dummy-2 --from-file=Chapter4/envoy-config-2.yaml -n chapter4\n    ```", "```\n    template:\n        metadata:\n          labels:\n            name: envoyproxy\n            version: v2\n    ```", "```\n    $ kubectl apply -f Chapter4/02-envoy-proxy.yaml\n    ```", "```\n        route:\n        - destination:\n            port:\n              number: 80\n            subset: v1\n            host: envoy-dummy-svc\n          weight: 10\n        - destination:\n            port:\n              number: 80\n            subset: v2\n            host: envoy-dummy-svc\n          weight: 90\n    ```", "```\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: envoy-destination\n  namespace: chapter4\nspec:\n  host: envoy-dummy-svc\n  subsets:\n  - name: v1\n    labels:\n      version: v1\n  - name: v2\n    labels:\n      version: v2\n```", "```\nkubectl apply -f Chapter4/4a-istio-gateway.yaml\n```", "```\n  route:\n    - destination:\n        port:\n          number: 80\n        subset: v1\n        host: envoydummy\n      weight: 100\n    mirror:\n      host: nginxdummy\n      subset: v2\n    mirrorPercentage:\n      value: 100.0\n```", "```\nkubectl apply -f utilities/nginx.yaml\n```", "```\nkubectl apply -f chapter4/4b-istio-gateway.yaml\n```", "```\n- match:\n    - uri:\n        prefix: /get\n    route:\n    - destination:\n        port:\n          number: 80\n        host: httpbin.org\n```", "```\napiVersion: networking.istio.io/v1alpha3\nkind: ServiceEntry\nmetadata:\n  name: httpbin-svc\n  namespace: chapter4\nspec:\n  hosts:\n  - httpbin.org\n  location: MESH_EXTERNAL\n  ports:\n  - number: 80\n    name: httpbin\n    protocol: http\n  resolution: DNS\n```", "```\n$ kubectl apply -f Chapter4/5a-istio-gateway.yaml\n```", "```\n    $openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -subj '/O=Sockshop Inc./CN=Sockshop.inc' -keyout Sockshop.inc.key -out Sockshop.inc.crt\n    ```", "```\n    $openssl req -out sockshop.com.csr -newkey rsa:2048 -nodes -keyout sockshop.com.key -subj \"/CN=sockshop.com/O=sockshop.inc\"\n    ```", "```\n    $openssl x509 -req -sha256 -days 365 -CA Sockshop.inc.crt -CAkey Sockshop.inc.key -set_serial 0 -in sockshop.com.csr -out sockshop.com.crt\n    ```", "```\n    $kubectl create -n istio-system secret tls sockshop-credential --key=sockshop.com.key --cert=sockshop.com.crt\n    ```", "```\n    kubectl apply -f Chapter4/6-istio-gateway.yaml\n    ```", "```\n  servers:\n  - port:\n      number: 443\n      name: https\n      protocol: HTTPS\n    tls:\n      mode: SIMPLE\n      credentialName: sockshop-credential\n    hosts:\n    - \"sockshop.com\"\n```", "```\n$ curl -v -HHost:sockshop.com --connect-to \"sockshop.com:443:a816bb2638a5e4a8c990ce790b47d429-1565783620.us-east-1.elb.amazonaws.com\" --cacert Sockshop.inc.crt  https://sockshop.com:443/\n```", "```\n$ curl -v -HHost:sockshop.com --resolve \"sockshop.com:56407:127.0.0.1\" http://sockshop.com:56407/\n```", "```\n* SSL connection using TLSv1.3 / AEAD-CHACHA20-POLY1305-SHA256\n* ALPN, server accepted to use h2\n* Server certificate:\n*  subject: CN=sockshop.com; O=sockshop.inc\n*  start date: Aug 12 06:45:27 2022 GMT\n*  expire date: Aug 12 06:45:27 2023 GMT\n*  common name: sockshop.com (matched)\n*  issuer: O=Sockshop Inc.; CN=Sockshop.inc\n*  SSL certificate verify ok.\n```", "```\n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - \"sockshop.com\"\n    tls:\n      httpsRedirect: true\n```", "```\n$ kubectl apply -f Chapter4/7-istio-gateway.yaml\n$ curl -v -HHost:sockshop.com --connect-to \"sockshop.com:80:a816bb2638a5e4a8c990ce790b47d429-1565783620.us-east-1.elb.amazonaws.com\" --cacert Sockshop.inc.crt  http://sockshop.com:80/\n```", "```\n* Mark bundle as not supporting multiuse\n< HTTP/1.1 301 Moved Permanently\n< location: https://sockshop.com/\n```", "```\n    $openssl req -out mockshop.com.csr -newkey rsa:2048 -nodes -keyout mockshop.com.key -subj \"/CN=mockshop.com/O=mockshop.inc\"\n    ```", "```\n    $openssl x509 -req -sha256 -days 365 -CA Sockshop.inc.crt -CAkey Sockshop.inc.key -set_serial 0 -in mockshop.com.csr -out mockshop.com.crt\n    ```", "```\n    $kubectl create -n istio-system secret tls mockshop-credential --key=mockshop.com.key --cert=mockshop.com.crt\n    ```", "```\n    - port:\n          number: 443\n          name: https-mockshop\n          protocol: HTTPS\n        tls:\n          mode: SIMPLE\n          credentialName: mockshop-credential\n        hosts:\n        - \"mockshop.com\"\n    ```", "```\n    kubectl apply -f Chapter4/8-istio-gateway.yaml\n    ```", "```\n    curl -v --head -HHost:sockshop.com --resolve \"sockshop.com:56408:127.0.0.1\" --cacert Sockshop.inc.crt https://sockshop.com:56408/\n    ```", "```\n* SSL connection using TLSv1.3 / AEAD-CHACHA20-POLY1305-SHA256\n* ALPN, server accepted to use h2\n* Server certificate:\n*  subject: CN=sockshop.com; O=sockshop.inc\n*  start date: Aug 12 06:45:27 2022 GMT\n*  expire date: Aug 12 06:45:27 2023 GMT\n*  common name: sockshop.com (matched)\n*  issuer: O=Sockshop Inc.; CN=Sockshop.inc\n*  SSL certificate verify ok.\n* Using HTTP2, server supports multiplexing\n```", "```\n    curl -v -HHost:mockshop.com --connect-to \"mockshop.com:443:a816bb2638a5e4a8c990ce790b47d429-1565783620.us-east-1.elb.amazonaws.com\" --cacert Sockshop.inc.crt  https://mockshop.com/\n    ```", "```\n    SSL connection using TLSv1.3 / AEAD-CHACHA20-POLY1305-SHA256\n    * ALPN, server accepted to use h2\n    * Server certificate:\n    *  subject: CN=mockshop.com; O=mockshop.inc\n    *  start date: Aug 12 23:47:27 2022 GMT\n    *  expire date: Aug 12 23:47:27 2023 GMT\n    *  common name: mockshop.com (matched)\n    *  issuer: O=Sockshop Inc.; CN=Sockshop.inc\n    *  SSL certificate verify ok.\n    * Using HTTP2, server supports multiplexing\n    ```", "```\n    $openssl req -out sni.sockshop.com.csr -newkey rsa:2048 -nodes -keyout sni.sockshop.com.key -subj \"/CN=*.sockshop.com/O=sockshop.inc\"\n    $openssl x509 -req -sha256 -days 365 -CA Sockshop.inc.crt -CAkey Sockshop.inc.key -set_serial 0 -in sni.sockshop.com.csr -out sni.sockshop.com.crt\n    $kubectl create -n istio-system secret tls sni-sockshop-credential --key=sni.sockshop.com.key --cert=sni.sockshop.com.crt\n    ```", "```\n    servers:\n      - port:\n          number: 443\n          name: https-sockshop\n          protocol: HTTPS\n        tls:\n          mode: SIMPLE\n          credentialName: sni-sockshop-credential\n        hosts:\n        - \"*.sockshop.com\"\n    ```", "```\n    kind: VirtualService\n    metadata:\n      name: sockshop\n      namespace: chapter4\n    spec:\n      hosts:\n      - \"*.sockshop.com\"\n      - \"sockshop.com\"\n    ```", "```\n    $ kubectl apply -f Chapter4/9-istio-gateway.yaml\n    ```", "```\n    $ curl -v -HHost:my.sockshop.com --connect-to \"my.sockshop.com:443:a816bb2638a5e4a8c990ce790b47d429-1565783620.us-east-1.elb.amazonaws.com\" --cacert Sockshop.inc.crt  https://my.sockshop.com/\n    ```", "```\n* SSL connection using TLSv1.3 / AEAD-CHACHA20-POLY1305-SHA256\n* ALPN, server accepted to use h2\n* Server certificate:\n*  subject: CN=*.sockshop.com; O=sockshop.inc\n*  start date: Aug 13 00:27:00 2022 GMT\n*  expire date: Aug 13 00:27:00 2023 GMT\n*  common name: *.sockshop.com (matched)\n*  issuer: O=Sockshop Inc.; CN=Sockshop.inc\n*  SSL certificate verify ok.\n* Using HTTP2, server supports multiplexing\n```", "```\n$ kubectl apply -f utilities/curl.yaml\n```", "```\n$ kubectl exec -it curl sh -n chapter4\n```", "```\n$ curl -v https://httpbin.org/get\n```", "```\n$ istioctl install -y --set profile=demo --set meshConfig.outboundTrafficPolicy.mode=REGISTRY_ONLY\n```", "```\n$ curl -v https://httpbin.org/get\ncurl: (35) OpenSSL SSL_connect: SSL_ERROR_SYSCALL in connection to httpbin.org:443\n```", "```\napiVersion: networking.istio.io/v1alpha3\nkind: ServiceEntry\nmetadata:\n  name: httpbin-svc\n  namespace: chapter4\nspec:\n  hosts:\n  - httpbin.org\n  location: MESH_EXTERNAL\n  resolution: DNS\n  ports:\n  - number: 443\n    name: https\n    protocol: HTTPS\n  - number: 80\n    name: http\n    protocol: HTTP\n```", "```\n$ kubectl apply -f Chapter4/10-a-istio-egress-gateway.yaml\n```", "```\n    apiVersion: networking.istio.io/v1alpha3\n    kind: Gateway\n    metadata:\n      name: istio-egressgateway\n      namespace: chapter4\n    spec:\n      selector:\n        istio: egressgateway\n      servers:\n      - port:\n          number: 80\n          name: http\n          protocol: HTTP\n        hosts:\n        - httpbin.org\n    ```", "```\n    spec:\n      hosts:\n      - httpbin.org\n      gateways:\n      - istio-egressgateway\n      - mesh\n    ```", "```\nhttp:\n  - match:\n    - gateways:\n      - mesh\n      port: 80\n    route:\n    - destination:\n        host: istio-egressgateway.istio-system.svc.cluster.local\n        subset: httpbin\n        port:\n          number: 80\n      weight: 100\n```", "```\n  - match:\n    - gateways:\n      - istio-egressgateway\n      port: 80\n    route:\n    - destination:\n        host: httpbin.org\n        port:\n          number: 80\n      weight: 100\n```", "```\n    apiVersion: networking.istio.io/v1alpha3\n    kind: DestinationRule\n    metadata:\n      name: rules-for-httpbin-egress\n      namespace: chapter4\n    spec:\n      host: istio-egressgateway.istio-system.svc.cluster.local\n      subsets:\n      - name: httpbin\n    ```", "```\n    kubectl apply -f Chapter4/10-b-istio-egress-gateway.yaml\n    ```"]
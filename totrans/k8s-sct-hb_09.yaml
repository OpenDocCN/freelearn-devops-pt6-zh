- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Exploring Cloud Secret Store on Azure
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 Azure 上的云秘密存储
- en: Previously, we did a deep dive into Secrets Manager on AWS. In this chapter,
    we shall focus on another popular cloud provider, Microsoft Azure. We will learn
    about Azure Key Vault, a solution provided by Azure to store Secrets and perform
    encryption and decryption. We will utilize Azure Key Vault in order to store Secrets
    and use them on our Kubernetes workloads and we also utilize Key Vault to encrypt
    the Secrets that reside on etcd.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们深入探讨了 AWS 上的 Secrets Manager。本章中，我们将关注另一个受欢迎的云服务提供商——微软 Azure。我们将学习 Azure
    提供的解决方案 Azure Key Vault，该方案用于存储 Secrets 并执行加密和解密操作。我们将利用 Azure Key Vault 来存储 Secrets，并在我们的
    Kubernetes 工作负载中使用它们，还将使用 Key Vault 来加密存储在 etcd 上的 Secrets。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Overview of Azure Key Vault
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure Key Vault 概览
- en: Introduction to Workload Identity
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作负载身份简介
- en: AKS cluster and Azure Key Vault integration
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AKS 集群与 Azure Key Vault 集成
- en: Auditing and logging
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 审计和日志记录
- en: Azure Key Vault for secret encryption
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure Key Vault 用于秘密加密
- en: By the end of this chapter, we should be able to store our Secrets in Azure
    Key Vault, retrieve them on a Kubernetes deployment, monitor secret access through
    auditing, and encrypt Kubernetes Secrets using Azure Key Vault.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，我们应该能够在 Azure Key Vault 中存储我们的 Secrets，在 Kubernetes 部署中检索它们，通过审计监控秘密访问，并使用
    Azure Key Vault 加密 Kubernetes Secrets。
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To link concepts with hands-on examples, we are leveraging a series of tools
    and platforms commonly used to interact with the Azure API and Kubernetes:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将概念与实践示例结合，我们使用了一系列常用的工具和平台，这些工具和平台通常用于与 Azure API 和 Kubernetes 交互：
- en: '**Azure (az) CLI** ([https://learn.microsoft.com/en-us/cli/azure/](https://learn.microsoft.com/en-us/cli/azure/))
    is a multi-platform set of command-line tools used in order to create and manage
    Azure resources'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure (az) CLI** ([https://learn.microsoft.com/en-us/cli/azure/](https://learn.microsoft.com/en-us/cli/azure/))
    是一套多平台的命令行工具，用于创建和管理 Azure 资源'
- en: '**Terraform** ([https://www.terraform.io/](https://www.terraform.io/)) is an
    infrastructure-as-code software solution that can be used to provision and manage
    infrastructure on the cloud'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Terraform** ([https://www.terraform.io/](https://www.terraform.io/)) 是一个基础设施即代码的软件解决方案，可用于在云中预配和管理基础设施'
- en: '**kubectl** ([https://kubernetes.io/docs/reference/kubectl/](https://kubernetes.io/docs/reference/kubectl/))
    is the command-line tool used for communicating with a Kubernetes cluster through
    the Kubernetes API'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**kubectl** ([https://kubernetes.io/docs/reference/kubectl/](https://kubernetes.io/docs/reference/kubectl/))
    是用于通过 Kubernetes API 与 Kubernetes 集群通信的命令行工具'
- en: Overview of Azure Key Vault
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure Key Vault 概览
- en: Azure Key Vault is a versatile service. It can be used as a secret storage.
    On Azure Key Vault, we can store cryptographic keys. Also, Azure Key Vault can
    be used to perform encryption and decryption operations.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Key Vault 是一项多功能服务。它可以作为秘密存储。在 Azure Key Vault 上，我们可以存储加密密钥。同时，Azure Key
    Vault 还可以用于执行加密和解密操作。
- en: Since it is a managed Azure service, it benefits from the features that Azure
    provides by default on its services.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 由于它是一个托管的 Azure 服务，因此它享有 Azure 默认提供的服务特性。
- en: 'The features of interest are as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 关注的特性如下：
- en: Azure RBAC and access policy
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure RBAC 和访问策略
- en: High availability
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高可用性
- en: Logging, auditing, and monitoring
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志记录、审计和监控
- en: Integration with other Azure components
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与其他 Azure 组件的集成
- en: We will take some time to examine these features that are crucial to the security
    of our Secrets.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将花一些时间来审视这些对我们秘密安全至关重要的特性。
- en: Azure RBAC and access policy
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Azure RBAC 和访问策略
- en: Every service on Azure is protected from unauthorized usage through an identity
    access management layer that Azure provides. This layer comes in the form of Azure’s
    RBAC and access policy. A security principal is an entity that has an identity
    on Azure and can be a user account, group account, or computer account. The legacy
    way of assigning permissions to security principals is through *access policies*.
    The recommended way to assign permissions is through **Azure role-based access
    control** (**Azure RBAC**). Azure RBAC will be our choice to secure Azure Key
    Vault as we progress through the chapter. By using Azure RBAC, we will control
    access to resources by creating role assignments.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 上的每个服务都通过 Azure 提供的身份访问管理层来保护免受未经授权的使用。该层通过 Azure 的 RBAC 和访问策略形式提供。安全主体是一个在
    Azure 上具有身份的实体，可以是用户账户、组账户或计算机账户。为安全主体分配权限的传统方法是通过 *访问策略*。推荐的权限分配方式是通过 **Azure
    基于角色的访问控制**（**Azure RBAC**）。随着本章的进行，Azure RBAC 将是我们保护 Azure Key Vault 的选择。通过使用
    Azure RBAC，我们将通过创建角色分配来控制对资源的访问。
- en: High availability
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高可用性
- en: When we create a Key Vault, we must specify the region where the Key Vault would
    be located. The contents of the Key Vault are replicated within this region. Also,
    the contents of the Key Vault will be replicated to a secondary region. Azure
    Key Vault contents are regionally highly available but also, they support disaster
    recovery out-of-the-box.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建一个 Key Vault 时，必须指定 Key Vault 所在的区域。Key Vault 的内容将在该区域内进行复制。同时，Key Vault
    的内容还将复制到辅助区域。Azure Key Vault 的内容在区域内具有高可用性，同时也支持开箱即用的灾难恢复。
- en: Imagine the scenario of a region becoming unavailable. Once the region becomes
    unavailable, the requests toward Azure Key Vault will be routed to the secondary
    region. This will happen automatically; there is no need to provision any extra
    Azure Key Vault resources or configure a fallback to a Key Vault residing in another
    region.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 假设某个区域不可用的场景。一旦该区域不可用，指向 Azure Key Vault 的请求将会被自动路由到辅助区域。这一过程是自动发生的，无需额外配置任何
    Azure Key Vault 资源或将 Key Vault 配置为在另一区域的备用。
- en: Logging, auditing, and monitoring
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日志记录、审计和监控
- en: In Azure, we have the option to audit the usage of a Key Vault. By enabling
    auditing, we can identify who accessed the data hosted on Azure Key Vault. We
    can achieve this by collecting the logs through **Diagnostic settings**. Resources
    on Azure produce logs, and those logs contain information about the resources
    and the operations that take place involving each resource. Based on the resource,
    the content of the logs may vary.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Azure 中，我们可以选择审计 Key Vault 的使用情况。通过启用审计，我们可以识别谁访问了托管在 Azure Key Vault 上的数据。我们可以通过
    **诊断设置** 收集日志来实现这一点。Azure 上的资源会生成日志，这些日志包含有关资源及其相关操作的信息。根据资源的不同，日志的内容可能会有所不同。
- en: '**Diagnostic settings** give us the option to stream those logs to various
    locations. By default, the logs will be streamed to an Azure storage account.
    Other options are to stream the logs to the Log Analytics workspace or to the
    Azure Event Hub.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**诊断设置** 让我们能够将这些日志流式传输到不同的位置。默认情况下，日志将流式传输到 Azure 存储账户。其他选项包括将日志流式传输到 Log
    Analytics 工作区或 Azure 事件中心。'
- en: Integration with other Azure components
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与其他 Azure 组件的集成
- en: An important benefit of Azure Key Vault is the integration with other Azure
    components. Azure Key Vault can be integrated with the Azure Application Gateway
    for traffic encryption or with the SQL Server offering from Azure, to encrypt
    the data. One of the components of interest is the Azure Kubernetes Service.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Key Vault 的一个重要优点是可以与其他 Azure 组件集成。Azure Key Vault 可以与 Azure 应用网关集成进行流量加密，或者与
    Azure 的 SQL Server 服务集成，对数据进行加密。一个值得关注的组件是 Azure Kubernetes 服务。
- en: This is enabled using the Kubernetes Secrets Store CSI Driver for Azure Key
    Vault. We saw in the previous chapter how the CSI Secret Store works.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过 Kubernetes Secrets Store CSI 驱动程序与 Azure Key Vault 配合启用。我们在上一章中已经了解了 CSI
    Secret Store 的工作原理。
- en: 'The following figure shows how the integration works:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示展示了集成是如何工作的：
- en: '![Figure 9.1 – Azure Key Vault integration](img/B20970_09_1.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.1 – Azure Key Vault 集成](img/B20970_09_1.jpg)'
- en: Figure 9.1 – Azure Key Vault integration
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.1 – Azure Key Vault 集成
- en: In this chapter, we will take advantage of Azure CSI Key Vault plugin and integrate
    it with Azure securely. The integration will involve a Kubernetes cluster in Azure
    using **Azure Kubernetes Service** (**AKS**). To integrate these two components,
    Azure Key Vault and the Kubernetes cluster, it is crucial to have fine-grained
    permissions from the cluster toward Azure Key Vault. For this, Azure provides
    us with the concept of Workload Identity.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将利用 Azure CSI Key Vault 插件并将其与 Azure 安全集成。该集成将涉及 Azure 上的 Kubernetes
    集群，使用 **Azure Kubernetes Service**（**AKS**）。要将这两个组件——Azure Key Vault 和 Kubernetes
    集群——集成起来，必须确保集群对 Azure Key Vault 具有细粒度的权限。为此，Azure 为我们提供了工作负载身份的概念。
- en: Introduction to Workload Identity
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作负载身份简介
- en: Workload Identity on AKS on Azure enables us to assign permissions to Kubernetes
    workloads so they can interact with Azure resources. For example, we have an Azure
    Key Vault that we use to store sensitive information. To interact with Azure Key
    Vault, we need some form of credentials. Workload Identities are machine identities
    representing software workloads that require identities to interact with Azure
    resources. Instead of creating an identity or a service principal, we can use
    Workload Identity by manually attaching their credentials to the service. This
    way, each service can have its own identity and authenticate by itself.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Azure 上的 AKS 上使用工作负载身份可以让我们为 Kubernetes 工作负载分配权限，从而使它们能够与 Azure 资源进行交互。例如，我们有一个用于存储敏感信息的
    Azure Key Vault。为了与 Azure Key Vault 进行交互，我们需要某种形式的凭证。工作负载身份是代表需要身份以与 Azure 资源交互的软件工作负载的机器身份。我们可以通过手动将凭证附加到服务上，使用工作负载身份，而无需创建身份或服务主体。这样，每个服务都可以拥有自己的身份并进行自我认证。
- en: In Kubernetes, we can assign a Workload Identity to our Pods. By granting the
    RBAC permissions to this identity, we will be able to interact with Azure Key
    Vault.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 中，我们可以为 Pod 分配工作负载身份。通过授予该身份 RBAC 权限，我们将能够与 Azure Key Vault 进行交互。
- en: 'Here is an example of how Workload Identity works:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是工作负载身份（Workload Identity）如何工作的示例：
- en: "![Figure 9.2 – \uFEFF Workload Identity behind the scenes (\uFEFFsource: https://learn.microsoft.com/en-us/azure/aks/workload-identity-overview?tabs=dotnet)](img/B20970_09_2.jpg)"
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.2 – 工作负载身份背后的机制（来源： https://learn.microsoft.com/en-us/azure/aks/workload-identity-overview?tabs=dotnet)](img/B20970_09_2.jpg)'
- en: 'Figure 9.2 – Workload Identity behind the scenes (source: [https://learn.microsoft.com/en-us/azure/aks/workload-identity-overview?tabs=dotnet](https://learn.microsoft.com/en-us/azure/aks/workload-identity-overview?tabs=dotnet))'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.2 – 工作负载身份背后的机制（来源：[https://learn.microsoft.com/en-us/azure/aks/workload-identity-overview?tabs=dotnet](https://learn.microsoft.com/en-us/azure/aks/workload-identity-overview?tabs=dotnet)）
- en: The official documentation of Azure has a detailed overview of how a Workload
    Identity requests a token from the Azure Active Directory and then uses that token
    to interact with an Azure resource ([https://learn.microsoft.com/en-us/azure/aks/workload-identity-overview](https://learn.microsoft.com/en-us/azure/aks/workload-identity-overview)).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 官方文档详细概述了工作负载身份如何从 Azure Active Directory 请求令牌，并使用该令牌与 Azure 资源进行交互（[https://learn.microsoft.com/en-us/azure/aks/workload-identity-overview](https://learn.microsoft.com/en-us/azure/aks/workload-identity-overview)）。
- en: Since we’ve acquired an understanding of the Workload Identity concept, we can
    proceed and learn more about how Azure enables the interaction between AKS and
    other Azure resources, such as Azure Key Vault.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经理解了工作负载身份（Workload Identity）的概念，现在可以继续了解 Azure 如何使 AKS 与其他 Azure 资源（例如
    Azure Key Vault）之间的交互。
- en: Integrating an AKS cluster and Azure Key Vault
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 AKS 集群与 Azure Key Vault 集成
- en: To integrate Kubernetes with Azure Key Vault, we need to have a cluster set
    up. There are various options to create a cluster and each choice applies to the
    needs of certain circumstances. We shall create a simple AKS cluster; the master
    will be publicly available, but the nodes will reside on a private subnet of a
    virtual network.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 Kubernetes 与 Azure Key Vault 集成，我们需要先设置一个集群。创建集群的选项有很多，每种选择适用于不同的场景。我们将创建一个简单的
    AKS 集群；主节点将公开可用，但节点将位于虚拟网络的私有子网中。
- en: We will provide some Terraform code for the scope of creating the cluster. Also,
    we shall provide the commands needed in case Terraform is not applicable.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将提供一些用于创建集群的 Terraform 代码。此外，如果 Terraform 不适用，我们也将提供所需的命令。
- en: Configuring the Terraform project
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置 Terraform 项目
- en: 'While creating the Terraform project, we will configure the state. The state
    can be saved in a storage account:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建 Terraform 项目时，我们将配置状态。状态可以保存在存储账户中：
- en: '[PRE0]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: By setting up the Terraform configuration, we can proceed and provision resources
    on Azure.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 通过设置 Terraform 配置，我们可以继续在 Azure 上配置资源。
- en: 'It is crucial to provision the resources for this chapter under one resource
    group:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 至关重要的是，在一个资源组下为本章配置资源：
- en: '[PRE1]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: By using a resource group, we logically separate our resources from other resources
    on our Azure account, specifically to the solution we want to implement.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用资源组，我们可以将我们的资源从 Azure 账户中的其他资源逻辑上分开，专门用于我们要实现的解决方案。
- en: 'Also, we shall create a storage account to persist logs from our services:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们将创建一个存储账户，以持久化来自我们服务的日志：
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As mentioned in the *Overview of Azure Key Vault* section, through **Diagnostics
    settings**, we can enable the logs of an Azure resource to be streamed to a storage
    account. The storage account we provisioned will serve this purpose.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如*Azure Key Vault 概述*部分所述，通过**诊断设置**，我们可以启用将 Azure 资源的日志流式传输到存储账户的功能。我们所配置的存储账户将用于此目的。
- en: We can now proceed with creating the network.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以继续创建网络。
- en: Provisioning the network
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置网络
- en: 'We will create a virtual network, and we will allocate a subset of private
    IPs. We shall also create a subnet on which we will be able to host the Kubernetes
    cluster nodes:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个虚拟网络，并分配一个子集的私有 IP。我们还将创建一个子网，在该子网上我们能够托管 Kubernetes 集群节点：
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `enforce_private_link_endpoint_network_policies` option is enabled. Through
    this option, the applications hosted in this subnet can access Azure components
    through the internal network.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 启用了`enforce_private_link_endpoint_network_policies`选项。通过此选项，托管在此子网中的应用程序可以通过内部网络访问
    Azure 组件。
- en: Provisioning the AKS cluster
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置 AKS 集群
- en: 'We will create an AKS cluster by creating the master and adding a default node
    pool:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过创建主节点并添加默认节点池来创建 AKS 集群：
- en: '[PRE4]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: An important thing to note is that we enable the **OpenID Connect** (**OIDC**)
    feature and the Workload Identity. This gives us the ability to assign roles to
    our Kubernetes workloads so that they can interact with Azure Key Vault.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的一点是，我们启用了**OpenID Connect**（**OIDC**）功能和工作负载身份。这使我们能够为我们的 Kubernetes 工作负载分配角色，以便它们能够与
    Azure Key Vault 交互。
- en: 'After using the `terraform apply` command, the cluster will be provisioned:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`terraform apply`命令后，集群将被配置：
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We have the option to implement a fully private cluster using the `private_cluster_enabled`
    option. In the repo, you can find the settings to create the bastion host to enable
    this action ([https://github.com/PacktPublishing/Kubernetes-Secrets-Handbook/blob/main/ch09/bastion.tf](https://github.com/PacktPublishing/Kubernetes-Secrets-Handbook/blob/main/ch09/bastion.tf)).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有选择通过`private_cluster_enabled`选项实现完全私有的集群。在代码库中，您可以找到创建堡垒主机以启用此操作的设置（[https://github.com/PacktPublishing/Kubernetes-Secrets-Handbook/blob/main/ch09/bastion.tf](https://github.com/PacktPublishing/Kubernetes-Secrets-Handbook/blob/main/ch09/bastion.tf)）。
- en: 'Alternatively, if we do not want to provision the cluster through Terraform,
    we can use the command line:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果我们不想通过 Terraform 配置集群，我们可以使用命令行：
- en: '[PRE6]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We can now successfully log in to our cluster:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以成功登录到集群：
- en: '[PRE7]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: By executing the preceding command, we will set up a configuration for the `kubectl`
    command. This configuration resides on the local `~/.kube/config` path of the
    workstation used to execute `kubectl` commands. Now we should be able to execute
    commands toward the cluster.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行上述命令，我们将为 `kubectl` 命令设置配置。该配置保存在用于执行 `kubectl` 命令的工作站的本地 `~/.kube/config`
    路径中。现在我们应该能够向集群执行命令。
- en: Creating a Key Vault
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 Key Vault
- en: We shall proceed and create a Key Vault resource; then, on that Key Vault, we
    shall create a key and a secret. We will assign fine-grained permissions to make
    it feasible to interact with the Key Vault through RBAC permissions.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续创建一个 Key Vault 资源；然后，在该 Key Vault 上，我们将创建一个密钥和一个机密。我们将分配细粒度的权限，使其能够通过 RBAC
    权限与 Key Vault 进行交互。
- en: 'First, we create the Azure Key Vault:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建 Azure Key Vault：
- en: '[PRE8]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As you can see, we enabled the RBAC option. Since we enabled RBAC, we will
    create an identity that can be used with our Kubernetes workloads:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们启用了 RBAC 选项。由于启用了 RBAC，我们将创建一个可以与我们的 Kubernetes 工作负载一起使用的身份：
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We created the identity and attached the permissions enabling us to use the
    Secrets and view them. The next step is to set up the credentials for the federated
    identity. We need to use the OIDC issuer URL from the cluster we provisioned previously:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已创建身份并附加了权限，允许我们使用机密并查看它们。下一步是为联邦身份设置凭据。我们需要使用我们之前配置的集群的 OIDC 发行者 URL：
- en: '[PRE10]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Alternatively, we can create the Key Vault through the command line:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以通过命令行创建 Key Vault：
- en: '[PRE11]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: By provisioning the identity credential, we can now interact with Azure Key
    Vault through Kubernetes. The federated identity credentials enable us to access
    resources protected by Active Directory. The federated credential that we used
    establishes a trust relationship with the identity provider of our AKS cluster
    and Active Directory. We allow the `service-token-reader` service account to impersonate
    `ksm-reader-identity`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 通过配置身份凭证，我们现在可以通过 Kubernetes 与 Azure Key Vault 进行交互。联合身份凭证使我们能够访问受 Active Directory
    保护的资源。我们使用的联合凭证建立了与 AKS 集群和 Active Directory 身份提供者之间的信任关系。我们允许`service-token-reader`服务账户模拟`ksm-reader-identity`。
- en: Reading Secrets from the Key Vault
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从 Key Vault 读取 Secrets
- en: We have our AKS cluster set up and our `kubectl` command is ready to execute
    commands to the cluster. So far, we have not had to install any plugins. This
    is because the plugins were enabled when creating the AKS cluster.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经设置好了 AKS 集群，并且我们的`kubectl`命令已准备好执行集群命令。到目前为止，我们没有安装任何插件。这是因为插件在创建 AKS 集群时已启用。
- en: 'We can check this by running the following command on the CSI plugin:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在 CSI 插件上运行以下命令来检查这一点：
- en: '[PRE12]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The CSI driver that will enable us to fetch credentials from the Key Vault
    is already enabled. Along with the CSI driver, we have a new object type created
    on Kubernetes: `SecretProviderClass`. This custom resource is used to provide
    driver configurations and provider-specific parameters to the CSI driver. In Kubernetes,
    a **custom resource** is an extension of the Kubernetes API. We specify a new
    kind of object that is accessed through the Kubernetes API just like all the other
    Kubernetes resources. We can find more information on custom resources through
    the official documentation ([https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/](https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/)).'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使我们从 Key Vault 获取凭证的 CSI 驱动程序已经启用。与 CSI 驱动程序一起，我们在 Kubernetes 中创建了一个新的对象类型：`SecretProviderClass`。这个自定义资源用于为
    CSI 驱动程序提供驱动程序配置和供应商特定的参数。在 Kubernetes 中，**自定义资源**是 Kubernetes API 的扩展。我们指定了一种新的对象类型，通过
    Kubernetes API 访问，就像访问所有其他 Kubernetes 资源一样。我们可以通过官方文档了解有关自定义资源的更多信息（[https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/](https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/)）。
- en: 'We will create `SecretProviderClass`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建`SecretProviderClass`：
- en: '[PRE13]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We can now provision the service account that will have the identity attached:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以配置将附加身份的服务账户：
- en: '[PRE14]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Essentially, the identity used is the identity that we provisioned previously
    with the purpose of interacting with Azure Key Vault.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，所使用的身份是我们之前配置的身份，目的是与 Azure Key Vault 进行交互。
- en: 'After applying the following, we can set up a Pod that will use the Key Vault
    credentials:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 应用以下配置后，我们可以设置一个 Pod，使用 Key Vault 凭证：
- en: '[PRE15]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: As of now, we have achieved our main goal, which is to use Key Vault Secrets
    through Azure Key Vault. We did achieve access to the Key Vault Secrets, so the
    next thing to check is whether auditing of Key Vault access is feasible.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经实现了主要目标，即通过 Azure Key Vault 使用 Key Vault Secrets。我们确实已访问了 Key Vault
    Secrets，接下来要检查的是是否可以对 Key Vault 访问进行审计。
- en: Auditing and logging
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 审计和日志记录
- en: In the previous section, we created the Key Vault on Azure. Azure provides us
    with the option to enable auditing for the resources we provision.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分中，我们在 Azure 上创建了 Key Vault。Azure 提供了为我们所创建的资源启用审计的选项。
- en: In our case, we add a block that enables us to store the audit logs of Key Vault
    access to a storage account.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，我们添加了一个块，使我们能够将 Key Vault 访问的审计日志存储到一个存储账户中。
- en: 'Let us perform the Terraform code:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行 Terraform 代码：
- en: '[PRE16]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We’ve enabled Azure to capture the logs needed for auditing through a storage
    account.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经启用了 Azure 通过存储账户捕获所需的审计日志。
- en: Important note
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Take note that we have set a retention policy on the log. At the time of writing,
    it has been announced that the **Diagnostic Settings Storage Retention** feature
    is being deprecated, thus the retention for logs and metrics should be configured
    through Azure Storage Lifecycle Management.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们已经为日志设置了保留策略。撰写本文时，已宣布**诊断设置存储保留**功能将被弃用，因此，日志和指标的保留应通过 Azure 存储生命周期管理进行配置。
- en: If we navigate to the bucket, there should be a container created on that storage
    account. The container will have the name `insights-logs-auditevent`, and the
    files in the container will be in the JSON format.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们导航到存储桶，应该会在该存储帐户中创建一个容器。容器将命名为 `insights-logs-auditevent`，并且容器中的文件将是 JSON
    格式。
- en: 'Let us examine one of the files:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们查看其中一个文件：
- en: '[PRE17]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We can see the category and the operation. Also, the identity is the one we
    attached to Kubernetes previously. Through audit logs, we can identify the actions
    that took place, the actor of those actions, and the resource upon which the actions
    took place, which in our case is the Key Vault we provisioned.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到类别和操作。此外，身份是我们之前附加到 Kubernetes 的身份。通过审计日志，我们可以识别发生的操作、操作的执行者以及操作发生的资源，在我们的案例中是我们配置的
    Key Vault。
- en: Azure Key Vault for secret encryption
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure 密钥库用于机密加密
- en: So far, we’ve used Azure Key Vault to store sensitive Secrets. What we want
    to identify is whether we can use Azure Key Vault to encrypt the Secrets that
    reside on etcd.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已使用 Azure Key Vault 存储敏感机密。我们想要识别的是，是否可以使用 Azure Key Vault 对存储在 etcd
    上的机密进行加密。
- en: We’ve already created a Key Vault. We shall use that Key Vault to create a *key*
    used for KMS purposes.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了一个 Key Vault。我们将使用该 Key Vault 创建一个用于 KMS 目的的*密钥*。
- en: 'We will create a key first:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先创建一个密钥：
- en: '[PRE18]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Take note that we can also specify a rotation policy:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们还可以指定一个轮换策略：
- en: '[PRE19]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: When we create the Kubernetes cluster, we can use this key to encrypt the Secrets
    we create.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建 Kubernetes 集群时，可以使用此密钥来加密我们创建的机密。
- en: 'In the AKS section, we shall put this option:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在 AKS 部分，我们将添加此选项：
- en: '[PRE20]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We’ve successfully encrypted our Secrets on etcd using Azure Key Vault as a
    KMS. We can also check this through the audit logs:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功地使用 Azure Key Vault 作为 KMS 在 etcd 上加密了我们的机密。我们还可以通过审计日志检查这一点：
- en: '[PRE21]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: As we can see, Azure Key Vault is actively being used to decrypt the Secrets
    hosted on AKS. The `KeyDecrypt` operation indicates the decryption operations.
    An equivalent operation will take place for encrypting the Secrets on AKS. This
    hardens the security of our Secrets management.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，Azure Key Vault 正在积极用于解密托管在 AKS 上的机密。`KeyDecrypt` 操作表示解密操作。加密机密的相应操作也会在
    AKS 上执行。这增强了我们机密管理的安全性。
- en: Summary
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we managed to create an AKS cluster that would be able to read
    Secrets from Azure Key Vault. We identified the RBAC permissions needed to achieve
    encrypting and decrypting of the Secrets. We also increased the security by encrypting
    the Secrets on etcd, using Azure Key Vault as a KMS for Kubernetes. Lastly, we
    could identify the usage of Azure Key Vault through the audit logs.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们成功创建了一个能够从 Azure 密钥库读取机密的 AKS 集群。我们确定了实现机密加密和解密所需的 RBAC 权限。我们还通过将机密加密存储在
    etcd 上，使用 Azure 密钥库作为 Kubernetes 的 KMS，从而增强了安全性。最后，我们可以通过审计日志识别 Azure 密钥库的使用情况。
- en: In the next chapter, we will focus on another popular cloud provider, Google
    Cloud Platform. We will explore the secret storage option on GCP and its integration
    with the Kubernetes offering of GCP, as well as the secret encryption options.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将重点介绍另一家流行的云服务提供商——Google Cloud Platform（GCP）。我们将探索 GCP 上的机密存储选项及其与
    GCP 的 Kubernetes 提供的集成，以及机密加密选项。

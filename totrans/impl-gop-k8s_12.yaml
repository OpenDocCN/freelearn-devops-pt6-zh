- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Observability with GitOps
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitOps中的可观察性
- en: Welcome to a focused exploration of integrating observability into Kubernetes
    environments through the lens of **GitOps** practices. As cloud-native applications
    grow in complexity and scale, the ability to observe, understand, and react to
    their behavior becomes increasingly critical. This chapter is designed to bridge
    the gap between traditional operational methods and the dynamic, automated world
    of GitOps, offering a pathway to more resilient, responsive, and efficient systems.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到通过**GitOps**实践深入探索在Kubernetes环境中集成可观察性的专题。随着云原生应用的复杂性和规模不断增长，能够观察、理解并应对其行为变得愈发重要。本章旨在弥合传统操作方法与GitOps的动态自动化世界之间的鸿沟，提供一个通向更加可靠、响应迅速和高效的系统的路径。
- en: At the heart of this journey is the fusion of **Site Reliability Engineering**
    (**SRE**) principles with the GitOps framework. GitOps, a term that has rapidly
    gained traction in the DevOps community, leverages the power of Git as a single
    source of truth for declarative infrastructure and applications. By applying GitOps,
    we not only automate and streamline deployment processes but also enhance the
    observability and manageability of Kubernetes environments.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本次旅程的核心是将**站点可靠性工程**（**SRE**）原则与GitOps框架相融合。GitOps是一个在DevOps社区中迅速崛起的术语，它利用Git作为声明式基础设施和应用程序的唯一真实来源。通过应用GitOps，我们不仅可以自动化和简化部署流程，还能增强Kubernetes环境的可观察性和可管理性。
- en: This chapter delves into the essential concepts of **observability** within
    the GitOps paradigm, distinguishing between internal and external observability
    to provide a comprehensive understanding of system states. Internal observability
    sheds light on the workings within the system—through **metrics**, **logs**, and
    **traces**—while external observability focuses on the experience outside the
    system, such as user interactions and external dependencies.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章深入探讨了**GitOps**范式中**可观察性**的核心概念，区分了内部和外部可观察性，以便全面理解系统状态。内部可观察性通过**指标**、**日志**和**追踪**来揭示系统内部的工作原理，而外部可观察性则关注系统外部的体验，如用户互动和外部依赖。
- en: A significant emphasis is placed on **SLO-driven** performance management. **Service-Level
    Objectives** (**SLOs**) serve as a quantifiable measure of performance and reliability,
    guiding our efforts in system optimization and improvement. Coupled with the **DevOps
    Research and Assessment** (**DORA**) metrics—deployment frequency, lead time for
    changes, change failure rate, and time to restore service—this approach offers
    a robust framework for assessing and enhancing the effectiveness of GitOps practices.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**SLO驱动**的性能管理被赋予了显著的重视。**服务水平目标**（**SLOs**）作为衡量性能和可靠性的量化标准，指导着我们在系统优化和改进方面的努力。结合**DevOps研究与评估**（**DORA**）指标——部署频率、变更的交付时间、变更失败率和恢复服务的时间——这一方法为评估和提升GitOps实践的有效性提供了一个强有力的框架。'
- en: Furthermore, the chapter introduces the concept of distributed tracing, a critical
    component in understanding the flow of requests through microservices architectures.
    Implementing distributed tracing, with tools such as **Linkerd** within a GitOps
    workflow, provides deep insights into the interactions and dependencies of system
    components, facilitating rapid diagnosis and resolution of issues.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，本章介绍了分布式追踪的概念，这是理解请求在微服务架构中流动的关键组件。在GitOps工作流中实施分布式追踪，借助如**Linkerd**等工具，可以深入了解系统组件之间的互动和依赖关系，帮助快速诊断和解决问题。
- en: Lastly, we address the setup of monitoring and alerting systems using cutting-edge
    tools such as **OpenTelemetry**. This setup is crucial for proactive system management,
    allowing teams to detect and respond to anomalies before they escalate into more
    significant issues.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们讨论了使用如**OpenTelemetry**等前沿工具来设置监控和报警系统。这一设置对于主动管理系统至关重要，使团队能够在问题升级为更大问题之前及时发现并应对异常。
- en: This chapter mainly talks about theories and ideas. It’s a good idea to read
    everything from start to finish. After you’re done, you’ll get to put some of
    these ideas together in a special way and try them out yourself with a real example.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章主要讨论理论和思路，建议从头到尾阅读。读完后，你将能够将这些思路以特别的方式结合起来，并通过一个真实的例子亲自尝试。
- en: Embarking on this intermediate guide to observability with GitOps, you are taking
    a step toward mastering the art and science of maintaining highly observable,
    performant, and reliable cloud-native applications. Let’s dive in and unlock the
    full potential of your Kubernetes deployments.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 开始阅读这篇中级GitOps可观察性指南，你正在迈向掌握保持高度可观察、性能优越、可靠的云原生应用程序的艺术与科学的一步。让我们深入探讨，释放Kubernetes部署的全部潜力。
- en: 'As such, the following main topics are covered in the chapter:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，本章涵盖了以下主要主题：
- en: Exploring the fundamentals of SRE for GitOps and Kubernetes
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索GitOps和Kubernetes的SRE基础
- en: Understanding internal versus external observability
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解内部与外部可观察性的区别
- en: Exploring SLO-driven multi-stage performance with DORA
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索基于SLO的多阶段性能与DORA
- en: Implementing distributed tracing in GitOps with Linkerd
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在GitOps中使用Linkerd实现分布式追踪
- en: Implementing monitoring in GitOps with tools such as Uptime Kuma and OpenTelemetry
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Uptime Kuma和OpenTelemetry等工具在GitOps中实现监控
- en: Looking at alerting strategies in a GitOps framework
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在GitOps框架中查看告警策略
- en: Scaling observability with GitOps
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用GitOps扩展可观察性
- en: Exploring the fundamentals of SRE for GitOps and Kubernetes
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索GitOps和Kubernetes的SRE基础
- en: In the evolving landscape of cloud-native applications, the integration of SRE
    principles with GitOps and Kubernetes represents a significant leap toward operational
    excellence. This section aims to provide a concise overview of these foundational
    concepts, equipping you with the knowledge to apply SRE practices effectively
    within your GitOps workflows and Kubernetes environments.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在不断发展的云原生应用程序领域，将SRE原则与GitOps和Kubernetes相结合，代表了向操作卓越迈出的重要一步。本节旨在提供这些基础概念的简要概述，帮助你掌握如何在GitOps工作流和Kubernetes环境中有效应用SRE实践。
- en: The intersection of SRE with GitOps
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SRE与GitOps的交集
- en: SRE is a discipline that incorporates aspects of software engineering into the
    realm of IT operations. The core philosophy of SRE is to treat operations as if
    they were a software problem, focusing on automating and optimizing system reliability
    and performance. Google introduced SRE to maintain large-scale services with high
    availability and performance goals. The key principles include defining clear
    SLOs, reducing organizational silos, embracing risk, and automating manual tasks.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: SRE是一门将软件工程的各个方面融入IT运维领域的学科。SRE的核心理念是将运维视为一个软件问题，专注于自动化和优化系统的可靠性和性能。Google推出SRE是为了维持具有高可用性和高性能目标的大规模服务。其关键原则包括定义明确的SLO，减少组织之间的壁垒，拥抱风险，并自动化手动任务。
- en: GitOps is a paradigm that applies Git’s version-control systems to manage infrastructure
    and application configurations. It emphasizes automation, immutability, and declarative
    specifications, making it an ideal framework for implementing SRE practices. GitOps
    enables teams to apply software development principles such as **code review**,
    **version control**, and **continuous integration/continuous deployment** (**CI/CD**)
    to infrastructure management, ensuring consistency, reliability, and speed.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: GitOps是一种将Git版本控制系统应用于管理基础设施和应用配置的范式。它强调自动化、不变性和声明性规范，使其成为实现SRE实践的理想框架。GitOps使团队能够将软件开发原则，如**代码审查**、**版本控制**和**持续集成/持续部署**（**CI/CD**）应用于基础设施管理，确保一致性、可靠性和速度。
- en: SRE principles in a Kubernetes context
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubernetes环境中的SRE原则
- en: Kubernetes, an open source platform for automating deployment, scaling, and
    operations of application containers, complements the GitOps approach by providing
    a dynamic and scalable environment for managing containerized applications.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes是一个开源平台，用于自动化应用容器的部署、扩展和操作，它通过提供一个动态和可扩展的环境来管理容器化应用程序，从而补充了GitOps方法。
- en: 'Integrating SRE principles into Kubernetes through GitOps involves several
    key practices:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 通过GitOps将SRE原则集成到Kubernetes中涉及几个关键实践：
- en: '**Automating Deployment and Scaling**: Use GitOps to automate the deployment
    of Kubernetes resources and applications, ensuring they meet predefined SLOs.
    Automating scaling decisions based on traffic patterns or system load helps maintain
    performance and reliability.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化部署和扩展**：利用GitOps自动化Kubernetes资源和应用程序的部署，确保它们符合预定义的SLO。根据流量模式或系统负载自动化扩展决策，帮助保持性能和可靠性。'
- en: '**Error Budgets and Risk Management**: Define error budgets as part of your
    SLOs to balance the rate of change with system stability. GitOps can help enforce
    these budgets by automating rollback or deployment procedures based on error budget
    consumption.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误预算与风险管理**：将错误预算定义为 SLO 的一部分，以平衡变更速率与系统稳定性。GitOps 可以通过根据错误预算的消耗自动回滚或部署程序来帮助执行这些预算。'
- en: '**Monitoring and Observability**: Implement comprehensive monitoring and observability
    frameworks to track the health of your services. Kubernetes offers built-in tools
    such as Prometheus for monitoring and Grafana for visualization, which can be
    integrated into your GitOps pipeline for real-time insights and alerting.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控与可观察性**：实现全面的监控与可观察性框架，以跟踪服务的健康状况。Kubernetes 提供了内置的工具，如用于监控的 Prometheus
    和用于可视化的 Grafana，可以集成到你的 GitOps 管道中，实现实时洞察和警报。'
- en: '**Incident Management**: Automate incident response within your GitOps workflow.
    Use Kubernetes’ self-healing features, such as auto-restarting failed containers
    and rolling updates, to minimize downtime and maintain service availability.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件管理**：在你的 GitOps 工作流中自动化事件响应。利用 Kubernetes 的自愈功能，如自动重启失败的容器和滚动更新，来最小化停机时间并保持服务可用性。'
- en: The integration of SRE principles with GitOps and Kubernetes offers a powerful
    approach to managing cloud-native applications. By focusing on automation, monitoring,
    and reliability, teams can achieve higher levels of efficiency and performance.
    This foundational knowledge serves as a stepping stone toward mastering the complexities
    of modern IT operations, enabling you to build and maintain resilient and scalable
    systems in an ever-changing technological landscape.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 将 SRE 原则与 GitOps 和 Kubernetes 相结合，提供了一种强大的方法来管理云原生应用程序。通过专注于自动化、监控和可靠性，团队可以实现更高效和更高性能的水平。这些基础知识为掌握现代
    IT 操作的复杂性奠定了基础，使你能够在不断变化的技术环境中构建和维护具有韧性和可扩展性的系统。
- en: In the next section, we look at the difference between internal and external
    observability and how to achieve optimal system performance by balancing the two
    observabilities.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨内部可观察性与外部可观察性之间的区别，以及如何通过平衡这两种可观察性来实现系统性能的最佳状态。
- en: Understanding internal (white box) versus external (black box) observability
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解内部（白盒）与外部（黑盒）可观察性的区别
- en: Understanding the nuances of internal versus external observability is crucial
    for effectively managing and optimizing cloud-native applications. This distinction
    guides how we monitor and interpret the behavior of systems deployed using GitOps
    practices in Kubernetes environments. Here, we delve into what constitutes internal
    and external observability, their respective roles, and how to leverage both to
    achieve a comprehensive view of your system’s *health* and *performance*.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 理解内部可观察性与外部可观察性之间的细微差别，对于有效管理和优化云原生应用程序至关重要。这一区分指导我们如何监控和解读通过 GitOps 实践在 Kubernetes
    环境中部署的系统行为。在这里，我们深入探讨了什么构成了内部和外部可观察性，它们各自的角色，以及如何利用这两者实现对系统的全面*健康*和*性能*的视角。
- en: Internal or white box observability explained
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内部或白盒可观察性的解释
- en: '**Internal observability** focuses on the metrics, logs, and traces that are
    generated from within the system itself. It’s akin to looking under the hood of
    a car while it’s running to gauge the health and performance of its engine and
    other components. In the context of Kubernetes and GitOps, internal observability
    involves the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**内部可观察性** 专注于从系统内部生成的指标、日志和追踪。这类似于在汽车运行时检查引擎和其他组件的健康状况与性能。在 Kubernetes 和 GitOps
    的背景下，内部可观察性涉及以下内容：'
- en: '**Metrics**: Numerical data that represents the state of your system at any
    given moment. This could include CPU usage, memory consumption, network I/O, and
    more.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**指标**：表示系统在任何给定时刻状态的数值数据。这可能包括 CPU 使用率、内存消耗、网络 I/O 等。'
- en: '**Logs**: Text records of events that have occurred within your system. Logs
    are invaluable for debugging issues and understanding the sequence of events leading
    up to an incident.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志**：记录系统中发生的事件的文本记录。日志对于调试问题和理解导致事件发生的顺序至关重要。'
- en: '**Traces**: Detailed information about requests as they flow through your system,
    highlighting how different components interact and where bottlenecks or failures
    occur.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**追踪**：有关请求在系统中流动的详细信息，突出显示不同组件如何交互，以及瓶颈或故障发生的位置。'
- en: To make it clear what is meant by *internal* in this context, *Figure 12**.1*
    has been created. However, before explaining the diagram in detail, the framework
    should be explained. This chapter is not about explaining tools such as OpenTelemetry
    (see [*1*] in the *Further reading* section at the end of the chapter), **Grafana
    Loki** [*2*], **Prometheus** [*3*], or **Jaeger** [*4*]. Nor is it about the detailed
    workings of how OpenTelemetry functions and how best to configure it – that would
    require a chapter or even a book of its own. Later in the chapter, the basic functionality
    of OpenTelemetry will be outlined, along with the necessary context for GitOps.
    Therefore, we will view *Figure 12**.1* as a black box, focusing on what happens
    in a Kubernetes cluster and how internal observability relates to it.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了明确在此上下文中“*内部*”的含义，创建了 *图 12**.1*。然而，在详细解释图表之前，应该先解释框架。本章并不是要解释 OpenTelemetry
    等工具（请参见本章末尾的[*1*]“进一步阅读”部分）、**Grafana Loki** [*2*]、**Prometheus** [*3*] 或 **Jaeger**
    [*4*]。也不是要详细阐述 OpenTelemetry 的工作原理及最佳配置方法——这将需要一章甚至一本专门的书。稍后将在本章中概述 OpenTelemetry
    的基本功能，以及 GitOps 的必要背景。因此，我们将 *图 12**.1* 视为一个黑箱，专注于 Kubernetes 集群中的发生的事件，以及内部可观测性与其之间的关系。
- en: '![Figure 12.1: Internal observability with OpenTelemetry](img/B22100_12_01.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.1：使用 OpenTelemetry 的内部可观测性](img/B22100_12_01.jpg)'
- en: 'Figure 12.1: Internal observability with OpenTelemetry'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.1：使用 OpenTelemetry 的内部可观测性
- en: Important note – logs format
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示 – 日志格式
- en: To ensure that collected system and application logs (*Figure 12**.1*) can be
    effectively utilized, they must be in a standardized and structured format. This
    format should enable the easy extraction and analysis of relevant information.
    The analyzed data can then be translated into concrete SLOs that help monitor
    and ensure the performance and reliability of services.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保收集到的系统和应用日志（*图 12**.1*）能够有效地利用，它们必须采用标准化和结构化的格式。这个格式应该能够便于提取和分析相关信息。分析后的数据可以转化为具体的
    SLO（服务水平目标），帮助监控和确保服务的性能与可靠性。
- en: 'Here’s a brief classification of the tools that will serve as endpoints in
    *Figure 12**.1*:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是作为 *图 12**.1* 中终端的工具的简要分类：
- en: '**OpenTelemetry** is a unified observability framework for collecting, processing,
    and exporting telemetry data (logs, metrics, and traces) to help understand software
    performance and behavior'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OpenTelemetry** 是一个统一的可观测性框架，用于收集、处理和导出遥测数据（日志、指标和追踪数据），帮助理解软件的性能和行为。'
- en: '**Grafana Loki** is a log aggregation system optimized for storing and querying
    massive amounts of log data efficiently, integrating seamlessly with Grafana for
    visualization'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Grafana Loki** 是一个日志聚合系统，经过优化，能够高效地存储和查询大量日志数据，并与 Grafana 无缝集成，进行可视化展示。'
- en: '**Prometheus** is an open source monitoring system with a powerful query language
    designed to record real-time metrics in a time-series database'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Prometheus** 是一个开源监控系统，拥有强大的查询语言，专为在时间序列数据库中记录实时指标而设计。'
- en: '**Jaeger** is a distributed tracing system that enables you to monitor and
    troubleshoot transactions in complex distributed systems'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Jaeger** 是一个分布式追踪系统，允许你监控和排查复杂分布式系统中的事务。'
- en: In our example, everything runs within a Kubernetes cluster. For instance, we
    have a web app, such as an online store, which generates application logs such
    as which user has logged in, system logs such as unexpected shutdowns, metrics
    such as the CPU and RAM usage of individual containers, and traces that map the
    journey of requests through the application’s components (*1* in *Figure 12**.1*).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，一切都运行在 Kubernetes 集群中。例如，我们有一个 web 应用，如在线商店，它会生成应用日志，例如用户登录记录，系统日志，如意外关机记录，指标数据，如单个容器的
    CPU 和内存使用情况，以及追踪数据，映射请求在应用组件中的流转路径（*1* 在 *图 12**.1* 中）。
- en: Then, the **OpenTelemetry Collector** (*2* in *Figure 12**.1*) gathers metrics,
    logs, and traces and enriches them with relevant data such as timestamps, service
    names, and environment details. Subsequently, the exporter, which is part of the
    Collector, makes logs, metrics, and traces available to the appropriate endpoints
    (*3* in *Figure 12**.1*).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，**OpenTelemetry Collector**（*2* 在 *图 12**.1* 中）收集指标、日志和追踪数据，并通过相关数据如时间戳、服务名称和环境详情进行增强。随后，Collector
    中的一部分导出器将日志、指标和追踪数据提供给适当的终端（*3* 在 *图 12**.1* 中）。
- en: For example, the logs are pushed to Grafana Loki, which can then be used by
    Grafana as a database. The metrics are pushed to Prometheus, which can also serve
    as a database for Grafana. The traces are pushed to Jaeger, which can likewise
    act as a database for Grafana. This enables the construction of observability
    dashboards and alerts in Grafana, providing comprehensive insights into the system’s
    performance and health.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，日志被推送到 Grafana Loki，Grafana 可以将其用作数据库。指标被推送到 Prometheus，它也可以作为 Grafana 的数据库。追踪数据被推送到
    Jaeger，Jaeger 同样可以作为 Grafana 的数据库。这使得可以在 Grafana 中构建可观测性仪表板和警报，从而提供对系统性能和健康状况的全面洞察。
- en: Of course, one could argue that the nodes can be globally distributed, and the
    collection of logs can also occur across distributed clusters, and so on.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，也可以争辩说，节点可以是全球分布式的，日志的收集也可以跨分布式集群进行，等等。
- en: However, the key understanding here is that *internal* refers to the production
    of logs, metrics, and traces by the running pods on the nodes.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这里需要理解的关键是，*内部*指的是运行节点上的 Pod 生成日志、指标和追踪数据。
- en: I hope it has become clear at this point what is meant by *internal* and that
    everything here pertains to the system level on the nodes, the application logs
    that are written on the nodes, or the network overlay level between the nodes
    through which packets are sent (service mesh).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望到此为止，*内部*的含义已经变得清晰，并且所有内容都涉及到节点层面的系统，或者是写入节点上的应用日志，或者是节点之间通过网络覆盖层传输数据包（服务网格）的网络层面。
- en: External or black box observability defined
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 外部或黑盒可观测性定义
- en: '**External observability**, on the other hand, is concerned with understanding
    the system from an outsider’s perspective, primarily focusing on the experience
    of the end users. It measures the output of your system and how changes within
    the system affect those outputs. Key aspects include the following:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**外部可观测性**，另一方面，关注的是从外部者的角度理解系统，主要关注最终用户的体验。它衡量系统的输出以及系统内部的变化如何影响这些输出。关键方面包括以下内容：'
- en: '**User Experience Metrics**: These metrics gauge the responsiveness and reliability
    of your application from the user’s viewpoint, such as page load times, transaction
    completion rates, and error rates.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户体验指标**：这些指标从用户的角度衡量应用程序的响应能力和可靠性，如页面加载时间、交易完成率和错误率。'
- en: '**Synthetic Monitoring**: Simulated user interactions with your application
    to test and measure its performance and availability from various locations around
    the world.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**合成监控**：通过模拟用户与应用程序的交互来测试和衡量其在全球各地的性能和可用性。'
- en: '**Dependency Checks**: Monitoring the health and performance of external services
    your application relies on. This helps in identifying whether an issue within
    your system is due to an external dependency.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**依赖检查**：监控应用程序所依赖的外部服务的健康状况和性能。这有助于确定系统中的问题是否源自外部依赖。'
- en: This section focuses on examining external monitoring. To simplify it for better
    visualization, we use a service called Uptime Kuma [*5*] in *Figure 12**.2*. For
    instance, it runs on a Kubernetes cluster and monitors a web app, such as an online
    store, through a URL accessible on the internet. For our example, to better illustrate
    the external aspect, we use the `packthub` website.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 本节重点讨论外部监控。为了更好地可视化，我们使用一个名为 Uptime Kuma[*5*]的服务，如*图12.2*所示。例如，它运行在 Kubernetes
    集群上，并通过一个可在互联网上访问的 URL 监控 Web 应用，如在线商店。为了更好地说明外部方面，我们使用 `packthub` 网站作为示例。
- en: Getting external observability means using system-wide metrics that are not
    part of the core functionality of our application. This includes monitoring external
    services and third-party components such as networking and CPU usage. For example,
    within a Kubernetes cluster, an internal service in the same namespace can be
    directly monitored. Alternatively, in a different namespace, monitoring can be
    done via internal DNS names. This approach does not operate at the system level
    of the nodes but through permitted accesses in the overlay network using a service
    mesh with kube-proxy
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 获取外部可观测性意味着使用系统范围的度量标准，这些度量标准并不是我们应用程序核心功能的一部分。这包括监控外部服务和第三方组件，如网络和 CPU 使用情况。例如，在
    Kubernetes 集群中，同一命名空间中的内部服务可以直接进行监控。或者，在不同的命名空间中，也可以通过内部 DNS 名称进行监控。这种方法并不在节点的系统层面上运作，而是通过在覆盖网络中使用服务网格与
    kube-proxy 进行允许的访问。
- en: Important note
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: Uptime Kuma is a self-hosted monitoring tool that can run on a Kubernetes cluster
    to keep tabs on services such as web applications. By monitoring accessible URLs
    over the internet, such as an online store, it provides insights into the uptime
    and performance of these services from an external perspective. This external
    monitoring extends beyond merely watching over system metrics at the node level,
    enabling the observation of services across namespaces through internal DNS names,
    facilitated by the Kubernetes networking model and service meshes.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Uptime Kuma是一款自托管的监控工具，可以在Kubernetes集群中运行，监控像Web应用程序这样的服务。通过监控互联网可访问的URL，如在线商店，它从外部视角提供关于这些服务的正常运行时间和性能的洞察。这种外部监控不仅仅是监控节点级别的系统指标，还能通过Kubernetes网络模型和服务网格，通过内部DNS名称观察跨命名空间的服务。
- en: In *Figure 12**.2*, a simple *HTTP(s)* check is set up, expecting a `200`–`299`
    code. This allows for external monitoring of a site and setting up alerts for
    when the site goes down, the certificate expires, or the response time increases.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图12.2*中，设置了一个简单的*HTTP(s)*检查，期望返回`200`–`299`代码。这允许对站点进行外部监控，并在站点停机、证书到期或响应时间增加时设置警报。
- en: '![Figure 12.2: External observability with Uptime Kuma](img/B22100_12_02.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图12.2：使用Uptime Kuma的外部可观测性](img/B22100_12_02.jpg)'
- en: 'Figure 12.2: External observability with Uptime Kuma'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.2：使用Uptime Kuma的外部可观测性
- en: In *Figure 12**.3*, you can see the uptime, which is at 100%. Additionally,
    you can see when the certificate expires and what the response or average response
    time is.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图12.3*中，你可以看到正常运行时间为100%。此外，你还可以看到证书何时过期以及响应时间或平均响应时间。
- en: '![Figure 12.3: External observability with Uptime Kuma – dashboard part 1](img/B22100_12_03.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图12.3：使用Uptime Kuma的外部可观测性 – 仪表板第1部分](img/B22100_12_03.jpg)'
- en: 'Figure 12.3: External observability with Uptime Kuma – dashboard part 1'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.3：使用Uptime Kuma的外部可观测性 – 仪表板第1部分
- en: The second part of the dashboard (*Figure 12**.4*) displays the response time
    for a specific interval, as well as the current `200` code.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 仪表板的第二部分（*图12.4*）显示了特定时间间隔内的响应时间，以及当前的`200`代码。
- en: '![Figure 12.4: External observability with Uptime Kuma – dashboard part 2](img/B22100_12_04.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图12.4：使用Uptime Kuma的外部可观测性 – 仪表板第2部分](img/B22100_12_04.jpg)'
- en: 'Figure 12.4: External observability with Uptime Kuma – dashboard part 2'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.4：使用Uptime Kuma的外部可观测性 – 仪表板第2部分
- en: At this point, it should hopefully have been clarified what is meant by *external*
    and how this can be implemented with the help of tools such as Uptime Kuma. This
    allows for the determination of **Service Level Agreements** (**SLAs**), which,
    depending on the criticality or contract, can be extremely important. Understanding
    this with alerting is also crucial.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，应该已经澄清了*外部*的含义，以及如何借助像Uptime Kuma这样的工具来实现这一点。这使得可以确定**服务级别协议**（**SLA**），根据紧急程度或合同的不同，SLA可能极其重要。理解这一点并配合警报是非常关键的。
- en: Balancing internal and external observability
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 平衡内部和外部可观测性
- en: 'To achieve optimal system performance and reliability, it’s essential to balance
    internal and external observability. Internal observability allows you to diagnose
    and resolve issues within your infrastructure and applications, while external
    observability ensures that those fixes translate into a better user experience.
    The integration of GitOps practices into Kubernetes enhances this balance by automating
    the deployment and management of observability tools and practices:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现最佳的系统性能和可靠性，平衡内部和外部可观测性是至关重要的。内部可观测性使你能够诊断并解决基础设施和应用程序中的问题，而外部可观测性则确保这些修复能转化为更好的用户体验。将GitOps实践集成到Kubernetes中，通过自动化部署和管理可观测性工具和实践，增强了这种平衡：
- en: '**Implementing Observability in GitOps**: Use Git repositories to define your
    observability stack, ensuring that monitoring, logging, and tracing tools are
    automatically deployed and configured across all environments consistently.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在GitOps中实施可观测性**：使用Git仓库定义你的可观测性堆栈，确保监控、日志记录和追踪工具在所有环境中被一致地自动部署和配置。'
- en: '**Automated Feedback Loops**: Establish automated feedback loops that integrate
    observability data into your GitOps workflows. This can help in automatically
    rolling back changes that negatively impact system performance or user experience.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化反馈回路**：建立自动化反馈回路，将可观测性数据集成到你的GitOps工作流中。这可以帮助自动回滚对系统性能或用户体验产生负面影响的更改。'
- en: In conclusion, mastering the interplay between internal and external observability
    is key to maintaining and optimizing cloud-native applications. By leveraging
    both perspectives, teams can ensure that their systems are not only running smoothly
    internally but are also delivering the desired outcomes and experiences for their
    users. Integrating these observability practices into your GitOps and Kubernetes
    strategies enables a more proactive, data-driven approach to system management
    and improvement.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，掌握内部与外部可观察性之间的相互作用是保持和优化云原生应用程序的关键。通过利用这两个视角，团队可以确保其系统不仅在内部运行顺利，而且能够为用户提供期望的结果和体验。将这些可观察性实践融入到GitOps和Kubernetes策略中，能够实现一种更为主动、数据驱动的系统管理和改进方法。
- en: The next section is about useful metrics that can be collected to gain insights
    into the deployment across multiple stages or clusters.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将介绍可以收集的有用指标，以便获得跨多个阶段或集群的部署洞察。
- en: Exploring SLO-driven multi-stage performance with DORA
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索基于SLO的多阶段性能与DORA
- en: In the realm of cloud-native applications, particularly those managed through
    GitOps in Kubernetes environments, the adoption of SLOs and the integration of
    DORA metrics offer a strategic framework for achieving and sustaining high performance.
    This approach combines the precision of SLOs with the insights provided by DORA
    metrics to guide continuous improvement across multiple stages or clusters of
    application development and deployment.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在云原生应用程序领域，特别是在Kubernetes环境中通过GitOps进行管理的应用程序，采用SLO和集成DORA指标提供了一种战略框架，用于实现并保持高性能。这种方法将SLO的精确性与DORA指标提供的洞察力相结合，以指导应用程序开发和部署的多个阶段或集群中的持续改进。
- en: At this point (*Figure 12**.5*), it is about observing the metrics, which are
    defined by the company as indicators such as latency, error rate, and so on, and
    how GitOps helps to measure performance and reliability throughout the CI/CD procedure.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 此时（*图12.5*），它是关于观察公司定义的指标，如延迟、错误率等，GitOps如何帮助在整个CI/CD过程中衡量性能和可靠性。
- en: '![Figure 12.5: How GitOps with DORA and SLOs contribute to observability](img/B22100_12_05.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图12.5：GitOps与DORA和SLO如何促进可观察性](img/B22100_12_05.jpg)'
- en: 'Figure 12.5: How GitOps with DORA and SLOs contribute to observability'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.5：GitOps与DORA和SLO如何促进可观察性
- en: The performance and efficiency of an application or its entire stack can be
    evaluated over several Kubernetes clusters. GitOps plays a crucial role not just
    in facilitating the distributed deployment of applications throughout these clusters
    but also in enabling a more profound comprehension of system behaviors, thereby
    fostering ongoing enhancements in the processes of software delivery.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在多个Kubernetes集群中评估应用程序或整个堆栈的性能和效率。GitOps不仅在促进应用程序在这些集群中的分布式部署中起着关键作用，还能使团队更深入地理解系统行为，从而促进软件交付过程中的持续改进。
- en: 'Let’s first understand what an SLO is and the role of DORA:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先了解什么是SLO以及DORA的作用：
- en: '**Understanding SLOs**: SLOs are specific, measurable goals that reflect the
    desired level of service performance and reliability. SLOs are derived from **Service-Level
    Indicators** (**SLIs**), which are the quantitative measures of service levels,
    such as latency, error rates, or uptime. Setting SLOs involves determining the
    acceptable thresholds for these indicators, and balancing the need for reliability
    with the desire for innovation and rapid development.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**理解SLO**：SLO是具体且可衡量的目标，反映了期望的服务性能和可靠性水平。SLO源自**服务级别指标**（**SLI**），它们是衡量服务水平的定量指标，如延迟、错误率或正常运行时间。设定SLO涉及确定这些指标的可接受阈值，并在保证可靠性与追求创新和快速开发之间找到平衡。'
- en: '**The Role of DORA Metrics**: The **DORA** metrics (**deployment frequency**,
    **lead time for changes**, **change failure rate**, and **time to restore service**)
    serve as key indicators of DevOps performance. These metrics provide insights
    into the efficiency and effectiveness of software delivery processes, helping
    teams to identify areas for improvement. In a GitOps context, these metrics can
    be closely monitored to ensure that the automation and orchestration provided
    by GitOps workflows are optimizing the software delivery pipeline.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DORA指标的作用**：**DORA**指标（**部署频率**、**变更交付时间**、**变更失败率**和**恢复服务时间**）作为DevOps性能的关键指标。这些指标提供了软件交付流程效率和有效性的洞察，帮助团队识别改进的领域。在GitOps的上下文中，这些指标可以被密切监控，以确保GitOps工作流提供的自动化和编排正在优化软件交付流水线。'
- en: Integrating SLOs with DORA metrics
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集成SLO与DORA指标
- en: 'The integration of SLOs with DORA metrics creates a powerful framework for
    managing performance in Kubernetes environments:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 将SLO与DORA指标结合创建了一个强大的框架，用于管理Kubernetes环境中的性能：
- en: '**Deployment Frequency and SLOs**: By aligning deployment frequency with SLOs,
    teams can ensure that they are releasing new features and updates at a pace that
    does not compromise service reliability.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署频率和SLOs**：通过将部署频率与SLO对齐，团队可以确保发布新功能和更新的速度不会影响服务的可靠性。'
- en: '**Lead Time for Changes and SLOs**: Monitoring the lead time for changes in
    relation to SLO performance can help teams streamline their development and deployment
    processes, ensuring that changes are made swiftly without affecting service quality.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**变更交付时间和SLOs**：监控变更交付时间与SLO性能的关系，可以帮助团队简化开发和部署流程，确保变更迅速实施而不影响服务质量。'
- en: '**Change Failure Rate and SLOs**: Keeping the change failure rate within the
    thresholds defined by SLOs ensures that most changes enhance rather than detract
    from service performance.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**变更失败率和SLOs**：将变更失败率保持在SLO定义的阈值范围内，确保大多数变更能增强而非削弱服务性能。'
- en: '**Time to Restore Service and SLOs**: In instances where service levels drop
    below SLO thresholds, the time to restore service metric becomes crucial. Quick
    restoration not only meets SLO requirements but also minimizes disruption to end
    users.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**恢复服务时间和SLOs**：当服务水平低于SLO阈值时，恢复服务的时间指标变得至关重要。快速恢复不仅能满足SLO要求，还能最大限度地减少对终端用户的干扰。'
- en: Applying a multi-stage approach
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用多阶段方法
- en: 'A multi-stage approach to SLO-driven performance leverages DORA metrics at
    each stage of the GitOps workflow:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: SLO驱动的多阶段性能方法在GitOps工作流的每个阶段利用DORA指标：
- en: '**Planning**: Use SLOs to define performance and reliability goals at the outset
    of a project or feature development'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**规划**：在项目或功能开发开始时，使用SLO定义性能和可靠性目标。'
- en: '**Development**: Integrate DORA metrics into the development process to track
    progress and ensure that coding practices align with SLOs'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发**：将DORA指标集成到开发过程中，跟踪进展并确保编码实践与SLO对齐。'
- en: '**Deployment**: Automate deployment processes through GitOps to maintain a
    high deployment frequency while adhering to SLO-defined performance criteria'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署**：通过GitOps自动化部署流程，保持高频率的部署，并遵守SLO定义的性能标准。'
- en: '**Observation**: Continuously monitor SLIs and DORA metrics post-deployment
    to assess whether SLOs are being met and identify areas for improvement'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**观察**：在部署后持续监控SLI和DORA指标，以评估是否达到SLO并识别改进的领域。'
- en: Incorporating SLO-driven performance strategies and DORA metrics into GitOps
    and Kubernetes practices offers a structured path to enhancing the *reliability*,
    *efficiency*, and *quality* of cloud-native applications. This approach not only
    optimizes operational processes but also fosters a culture of continuous improvement,
    ensuring that organizations can adapt and thrive in the fast-paced world of cloud
    computing. To incorporate this feedback loop, the SRE team should collaborate
    with application developers to obtain end-to-end improvement.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 将以SLO为驱动的性能策略和DORA指标融入GitOps和Kubernetes实践，为提升云原生应用的*可靠性*、*效率*和*质量*提供了一个结构化的路径。这种方法不仅优化了运营流程，还促进了持续改进的文化，确保组织能够在快速发展的云计算世界中适应并蓬勃发展。为了实现这一反馈循环，SRE团队应与应用开发人员合作，获得端到端的改进。
- en: The following section provides an overview of integrating traces with GitOps,
    which improves the observability and reliability of cloud-native applications
    by automating the deployment and configuration of Linkerd via GitOps practices.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的部分概述了如何通过 GitOps 集成跟踪，通过自动化 Linkerd 的部署和配置来提高云原生应用程序的可观察性和可靠性实践。
- en: Implementing distributed tracing in GitOps with Linkerd
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 GitOps 工作流中实现使用 Linkerd 的分布式跟踪
- en: In the complex ecosystem of cloud-native applications, understanding the intricate
    web of service interactions is crucial for diagnosing issues, optimizing performance,
    and ensuring reliability. Distributed tracing emerges as a vital tool in this
    context, offering visibility into the flow of requests across microservices.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在复杂的云原生应用程序生态系统中，理解服务交互的复杂网是诊断问题、优化性能和确保可靠性的关键。分布式跟踪作为这一背景中的重要工具，提供了对跨微服务请求流的可见性。
- en: Important note – tracing OpenTelemetry versus Linkerd
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明 - 跟踪 OpenTelemetry 与 Linkerd
- en: While OpenTelemetry was mentioned previously for distributed tracing, it is
    important to explain the difference between OpenTelemetry and Linkerd and their
    preferred use cases. OpenTelemetry is a collection of tools, APIs, and SDKs used
    to instrument, generate, collect, and export telemetry data (metrics, logs, and
    traces) to help understand software performance and behavior.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然之前提到过 OpenTelemetry 用于分布式跟踪，但重要的是要解释 OpenTelemetry 和 Linkerd 之间的区别及其首选用例。OpenTelemetry
    是一组工具、API 和 SDK，用于对软件性能和行为进行仪表化、生成、收集和导出遥测数据（指标、日志和跟踪），以帮助理解软件的性能和行为。
- en: Linkerd is preferred when you need a robust service mesh to manage and observe
    service-to-service communication within a Kubernetes environment, particularly
    when you want seamless integration without modifying your application code.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在您需要在 Kubernetes 环境中管理和观察服务之间通信时，特别是在不修改应用程序代码的情况下实现无缝集成时，首选 Linkerd 作为强大的服务网格。
- en: 'When integrated into a GitOps workflow with Kubernetes, tools such as Linkerd
    can streamline the deployment and management of distributed tracing, enhancing
    observability and operational efficiency:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 当与 Kubernetes 的 GitOps 工作流集成时，诸如 Linkerd 之类的工具可以简化分布式跟踪的部署和管理，增强可观察性和操作效率：
- en: '**Distributed Tracing**: Distributed tracing provides a detailed view of how
    requests traverse through the various services in a microservices architecture.
    Each request is tagged with a unique identifier, enabling the tracking of its
    journey and interactions across services. This visibility is invaluable for pinpointing
    failures, understanding latencies, and optimizing service interactions.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分布式跟踪**：分布式跟踪提供了对请求如何在微服务架构中的各个服务之间传播的详细视图。每个请求都标记有唯一标识符，可以跟踪其路径和在服务之间的交互。这种可见性对于定位故障、理解延迟和优化服务交互至关重要。'
- en: '**Why Linkerd for Distributed Tracing?**: Linkerd is a lightweight, open source
    service mesh designed for Kubernetes. It provides critical features such as secure
    service-to-service communication, observability, and reliability without requiring
    modifications to your code. Linkerd’s support for distributed tracing allows developers
    and operators to gain insights into the request path, latency contributions by
    various services, and the overall health of the service mesh.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**为什么选择 Linkerd 进行分布式跟踪？**：Linkerd 是专为 Kubernetes 设计的轻量级开源服务网格。它提供了关键功能，如安全的服务间通信、可观察性和可靠性，无需修改您的代码。Linkerd
    对分布式跟踪的支持允许开发人员和运维人员深入了解请求路径、各个服务的延迟贡献以及服务网格的整体健康状况。'
- en: 'Integrating Linkerd into your GitOps workflows involves defining the service
    mesh configuration and the distributed tracing settings within your Git repository.
    This GitOps approach ensures that the deployment and configuration of Linkerd
    are fully automated, consistent, and traceable across all environments. Let’s
    break down the integration process:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Linkerd 集成到您的 GitOps 工作流中涉及在 Git 仓库中定义服务网格配置和分布式跟踪设置。这种 GitOps 方法确保 Linkerd
    的部署和配置完全自动化、一致且可追溯，适用于所有环境。让我们逐步分解集成过程：
- en: '**Installation** **and Configuration**:'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装和配置**：'
- en: '**Define Linkerd Installation**: Use Git to manage the declarative specifications
    for Linkerd’s installation and configuration, ensuring that it aligns with your
    organization’s security and observability requirements.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定义 Linkerd 安装**：使用 Git 管理 Linkerd 安装和配置的声明规范，确保与您组织的安全性和可观察性要求保持一致。'
- en: '**Automate Deployment**: Utilize GitOps with Argo CD to automate the deployment
    of Linkerd into your Kubernetes clusters. This automation includes the installation
    of the Linkerd control plane and the injection of Linkerd sidecars into your service
    pods.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化部署**：利用 Argo CD 和 GitOps 自动化将 Linkerd 部署到 Kubernetes 集群中。此自动化包括安装 Linkerd
    控制平面和将 Linkerd sidecar 注入到服务 Pod 中。'
- en: '**Configure** **Distributed Tracing**:'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置** **分布式追踪**：'
- en: '**Trace Collector Integration**: Specify configurations for integrating Linkerd
    with a distributed tracing system (such as Jaeger or Zipkin) within your Git repository.
    This includes setting up Linkerd to send trace data to the collector.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**追踪收集器集成**：在 Git 仓库中指定配置，以将 Linkerd 与分布式追踪系统（如 Jaeger 或 Zipkin）集成。这包括配置 Linkerd
    将追踪数据发送到收集器。'
- en: '**Service Annotation**: Annotate your Kubernetes service manifests to enable
    tracing with Linkerd. These annotations instruct Linkerd sidecars to participate
    in distributed tracing by forwarding trace data.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务注释**：在 Kubernetes 服务清单中添加注释，以启用与 Linkerd 的追踪。这些注释指示 Linkerd sidecar 参与分布式追踪并转发追踪数据。'
- en: '**Visualization** **and Analysis**:'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可视化** **和分析**：'
- en: '**Leverage Tracing Dashboards**: Utilize the integrated tracing dashboards
    provided by Jaeger (*Figure 12**.6*) or Zipkin to visualize and analyze trace
    data. These tools offer powerful capabilities to filter, search, and drill down
    into the details of individual traces.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**利用追踪仪表板**：使用 Jaeger（*图 12.6*）或 Zipkin 提供的集成追踪仪表板来可视化和分析追踪数据。这些工具提供强大的功能，能够筛选、搜索并深入查看单个追踪的详细信息。'
- en: '![Figure 12.6: Jaeger UI for distributed tracing of service calls in a Kubernetes
    cluster](img/B22100_12_06.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.6：Jaeger UI 用于在 Kubernetes 集群中分布式追踪服务调用](img/B22100_12_06.jpg)'
- en: 'Figure 12.6: Jaeger UI for distributed tracing of service calls in a Kubernetes
    cluster'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.6：Jaeger UI 用于在 Kubernetes 集群中分布式追踪服务调用
- en: Implementing distributed tracing with Linkerd in a GitOps framework significantly
    enhances the observability and reliability of cloud-native applications. By automating
    the deployment and configuration of Linkerd through GitOps, teams can ensure a
    consistent and scalable approach to monitoring microservices interactions. This
    capability is essential for maintaining high-performance, resilient applications
    in the dynamic landscape of Kubernetes environments.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GitOps 框架中实施 Linkerd 的分布式追踪显著增强了云原生应用程序的可观察性和可靠性。通过 GitOps 自动化部署和配置 Linkerd，团队可以确保监控微服务交互的一致性和可扩展性。这一能力对于在
    Kubernetes 环境的动态变化中保持高性能和弹性应用至关重要。
- en: In the next part of the chapter, we will look at how tools such as Uptime Kuma
    and OpenTelemetry can help to enable both external and internal observability
    with the help of GitOps.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的下一部分，我们将讨论如何通过 GitOps 的帮助，使用像 Uptime Kuma 和 OpenTelemetry 这样的工具启用外部和内部的可观察性。
- en: Implementing monitoring in GitOps with tools such as Uptime Kuma and OpenTelemetry
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 GitOps 中实施监控，使用像 Uptime Kuma 和 OpenTelemetry 这样的工具
- en: In the dynamic and distributed world of cloud-native applications, effective
    monitoring and alerting are essential for ensuring system reliability, performance,
    and security. Integrating these practices within a GitOps framework not only streamlines
    the deployment and management of monitoring tools but also aligns operational
    practices with the principles of **Infrastructure as Code** (**IaC**). This approach,
    particularly when leveraging powerful tools such as OpenTelemetry, provides a
    cohesive and automated methodology for observing system behaviors and responding
    to incidents from the internal point of view. But you also have tools, such as
    Uptime Kuma, that enable the external observability of services.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在云原生应用程序的动态和分布式世界中，有效的监控和告警对于确保系统的可靠性、性能和安全性至关重要。将这些实践整合到 GitOps 框架中，不仅简化了监控工具的部署和管理，还使操作实践与**基础设施即代码**（**IaC**）的原则保持一致。特别是当利用
    OpenTelemetry 等强大工具时，这种方法提供了一个连贯且自动化的体系，用于观察系统行为并从内部视角响应事件。同时，你也可以使用像 Uptime Kuma
    这样的工具来实现服务的外部可观察性。
- en: '**Monitoring** in a GitOps framework involves collecting, analyzing, and displaying
    metrics and logs from across your infrastructure and applications. This data-driven
    approach allows teams to understand system performance, identify trends, and detect
    anomalies. By defining monitoring configurations and dashboards as code within
    a Git repository, teams can apply version control, review processes, and automated
    deployments to monitoring infrastructure, ensuring consistency and reliability.
    The distribution of these dashboards, for example, can be deployed across an *N*
    number of clusters using GitOps.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在GitOps框架中的**监控**涉及从整个基础设施和应用程序中收集、分析和展示指标和日志。这种数据驱动的方法使团队能够了解系统性能、识别趋势并检测异常。通过将监控配置和仪表板作为代码定义在Git仓库中，团队可以将版本控制、审查流程和自动化部署应用于监控基础设施，确保一致性和可靠性。例如，这些仪表板的分发可以通过GitOps部署到*N*个集群中。
- en: Uptime Kuma – the external watchdog for your online services
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Uptime Kuma – 您在线服务的外部看门狗
- en: '**Uptime Kuma** is an open source monitoring tool designed to track the uptime,
    downtime, and performance of various services and websites. It’s a self-hosted
    solution, meaning it runs on your own hardware or cloud infrastructure, providing
    full control over your monitoring environment. Uptime Kuma offers a user-friendly
    interface and is becoming a popular choice among developers and system administrators
    for its simplicity, flexibility, and cost-effectiveness. Uptime Kuma operates
    by sending requests to your services or websites at regular intervals and monitoring
    their responses to determine their availability and response time.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '**Uptime Kuma**是一个开源监控工具，旨在跟踪各种服务和网站的正常运行时间、停机时间和性能。它是一个自托管的解决方案，意味着它运行在您的硬件或云基础设施上，提供对监控环境的完全控制。Uptime
    Kuma提供了一个用户友好的界面，因其简洁性、灵活性和高性价比，正在成为开发人员和系统管理员的热门选择。Uptime Kuma通过定期向您的服务或网站发送请求并监控其响应来确定其可用性和响应时间。'
- en: In comparison, **Datadog** and **Prometheus with Grafana** offer different approaches
    to monitoring. Datadog is a comprehensive, cloud-based monitoring and analytics
    platform that provides end-to-end visibility into the performance of your applications,
    infrastructure, and logs. It is particularly known for its integration capabilities
    with a wide range of third-party services and its advanced analytics features.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，**Datadog**和**Prometheus与Grafana**提供了不同的监控方法。Datadog是一个全面的云基础监控和分析平台，提供端到端的应用程序、基础设施和日志性能可视化。它特别以其与广泛的第三方服务的集成能力和先进的分析功能而闻名。
- en: Prometheus, on the other hand, is an open source monitoring and alerting toolkit
    designed primarily for reliability and scalability. It excels at collecting and
    storing time-series data, which can then be visualized using Grafana, a powerful
    open source platform for monitoring and observability. Grafana allows users to
    create customizable dashboards to visualize metrics collected by Prometheus. While
    Prometheus supports monitoring various protocols such as HTTP, HTTPS, DNS, TCP,
    and ICMP ping through the use of exporters such as Blackbox Exporter, it requires
    additional setup and configuration to achieve this.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，Prometheus是一个开源监控和告警工具包，主要设计用于可靠性和可扩展性。它擅长收集和存储时间序列数据，然后可以使用Grafana（一个强大的开源监控与可观察性平台）进行可视化。Grafana允许用户创建可定制的仪表板，以可视化Prometheus收集的指标。虽然Prometheus通过使用诸如Blackbox
    Exporter之类的导出器支持监控HTTP、HTTPS、DNS、TCP和ICMP Ping等各种协议，但实现这一点需要额外的设置和配置。
- en: In the following subsections, we take a look at various key features and strengths
    of Uptime Kuma in order to gain a better understanding of the tool.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的各个小节中，我们将探讨Uptime Kuma的各种关键功能和优势，以便更好地理解该工具。
- en: Key Features
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关键功能
- en: 'The key features of Uptime Kuma are as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Uptime Kuma的主要功能如下：
- en: '**Multi-Protocol Support**: Uptime Kuma supports monitoring via HTTP(S), TCP,
    DNS, and more'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多协议支持**：Uptime Kuma支持通过HTTP(S)、TCP、DNS等协议进行监控。'
- en: '**Customizable Alerts**: Users can configure alerts based on various criteria
    and choose their preferred notification methods'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可定制的警报**：用户可以根据各种标准配置警报，并选择他们偏好的通知方式。'
- en: '**Performance Metrics**: Tracks response times, allowing users to monitor the
    performance of their services in addition to their availability'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能指标**：跟踪响应时间，使用户能够监控其服务的性能，而不仅仅是可用性。'
- en: '**SSL Certificate Monitoring**: It can monitor the expiration of SSL certificates,
    alerting users before their certificates expire'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SSL 证书监控**：可以监控 SSL 证书的过期情况，在证书过期前提醒用户'
- en: '**Ping Monitoring**: Offers the ability to monitor the availability and latency
    of servers using ICMP ping'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ping 监控**：提供使用 ICMP ping 监控服务器可用性和延迟的功能'
- en: Core functionalities
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 核心功能
- en: 'Here’s a breakdown of its core functionalities and how it works:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是其核心功能及工作原理的详细介绍：
- en: '**Monitoring Services**: Uptime Kuma can monitor various types of services
    including HTTP(S) websites, TCP ports, HTTP(s) endpoints with specific expected
    statuses, DNS records, and more. It allows users to configure the monitoring intervals,
    timeouts, and specific conditions that define the availability of each service.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控服务**：Uptime Kuma 可以监控多种类型的服务，包括 HTTP(S) 网站、TCP 端口、具有特定预期状态的 HTTP(s) 端点、DNS
    记录等。它允许用户配置监控间隔、超时和定义每项服务可用性的特定条件。'
- en: '**Alerts and Notifications**: When a service goes down or meets specific conditions
    set by the user (e.g., high response time), Uptime Kuma can send alerts through
    various channels. It supports numerous notification methods including email, SMS
    (through third-party services), Telegram, Discord, Slack, and more, ensuring that
    users are promptly informed about status changes.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**告警和通知**：当服务停机或满足用户设置的特定条件（例如高响应时间）时，Uptime Kuma 可以通过多种渠道发送告警。它支持多种通知方式，包括电子邮件、短信（通过第三方服务）、Telegram、Discord、Slack
    等，确保用户能及时收到状态变化的通知。'
- en: '**Status Page**: Uptime Kuma provides a public or private status page that
    displays the uptime status of all monitored services. This page can be used to
    communicate with team members or customers about the current status of various
    services, enhancing transparency and trust.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**状态页面**：Uptime Kuma 提供一个公开或私有的状态页面，显示所有监控服务的运行状态。此页面可以用来与团队成员或客户沟通各种服务的当前状态，增强透明度和信任度。'
- en: '**Detailed Reporting**: It offers detailed reports and analytics on the uptime,
    downtime, and response times of monitored services. These insights can help identify
    patterns, potential issues, and areas for improvement in your infrastructure or
    application performance.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**详细的报告**：它提供关于监控服务的正常运行时间、停机时间和响应时间的详细报告和分析。这些信息有助于识别模式、潜在问题以及改善基础设施或应用性能的领域。'
- en: '**Easy Setup and Configuration**: Setting up Uptime Kuma is straightforward.
    It can be deployed on various platforms including Docker, which makes it easy
    to install and run on most environments. The web-based interface provides a simple
    and intuitive way to add and configure the services you want to monitor.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简单的设置和配置**：Uptime Kuma 的设置过程非常简单。它可以部署在多个平台上，包括 Docker，这使得它在大多数环境中都容易安装和运行。基于
    Web 的界面提供了一种简单直观的方式来添加和配置你想要监控的服务。'
- en: Uptime Kuma is a versatile and user-friendly tool for monitoring the uptime
    and performance of websites and services. Its self-hosted nature gives users full
    control over their monitoring setup, making it a secure and customizable option
    for businesses and individual users alike. With its broad protocol support, flexible
    alerting system, and detailed analytics, Uptime Kuma provides a comprehensive
    solution for ensuring the reliability and performance of online services.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: Uptime Kuma 是一个多功能且易于使用的工具，用于监控网站和服务的正常运行时间及性能。其自托管特性使用户能够完全控制监控设置，从而为企业和个人用户提供了一个安全且可定制的选择。凭借其广泛的协议支持、灵活的告警系统和详细的分析功能，Uptime
    Kuma 为确保在线服务的可靠性和性能提供了全面的解决方案。
- en: OpenTelemetry – a unified observability framework
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OpenTelemetry – 一个统一的可观察性框架
- en: OpenTelemetry is an open source observability framework designed to provide
    comprehensive insights into the behavior of software applications. It achieves
    this by collecting, processing, and exporting telemetry data – specifically logs,
    metrics, and traces. OpenTelemetry aims to make it easy for developers and operators
    to gain visibility into their systems, helping to debug, optimize, and ensure
    the reliability of applications across various environments.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: OpenTelemetry 是一个开源的可观察性框架，旨在提供对软件应用程序行为的全面洞察。它通过收集、处理和导出遥测数据——具体来说是日志、指标和追踪——来实现这一目标。OpenTelemetry
    旨在使开发人员和运维人员轻松获得系统的可见性，帮助调试、优化，并确保应用程序在各种环境中的可靠性。
- en: Key features
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 主要功能
- en: 'At the core of OpenTelemetry is **instrumentation**, a process that involves
    integrating OpenTelemetry libraries or agents into your application code or runtime
    environment. This integration allows OpenTelemetry to capture detailed telemetry
    data from the application:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: OpenTelemetry的核心是**仪表化**，这是一种将OpenTelemetry库或代理集成到应用程序代码或运行时环境中的过程。此集成使OpenTelemetry能够从应用程序捕获详细的遥测数据：
- en: '**Manual Instrumentation**: Developers can manually instrument their code using
    the OpenTelemetry API. This involves adding specific code snippets that generate
    telemetry data such as custom metrics, logs, or traces for specific operations
    within the application.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**手动仪表化**：开发人员可以使用OpenTelemetry API手动仪表化代码。这包括添加特定的代码片段，以生成遥测数据，如自定义指标、日志或用于应用程序中具体操作的跟踪。'
- en: '**Automatic Instrumentation**: OpenTelemetry provides auto-instrumentation
    agents that can be attached to an application. These agents automatically capture
    telemetry data without requiring modifications to the application code, ideal
    for legacy systems or for common libraries and frameworks.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动仪表化**：OpenTelemetry提供了可以附加到应用程序的自动仪表化代理。这些代理自动捕获遥测数据，无需修改应用程序代码，非常适合遗留系统或常见库和框架。'
- en: 'OpenTelemetry collects three main types of telemetry data:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: OpenTelemetry收集三种主要类型的遥测数据：
- en: '**Logs**: Records of discrete events that have occurred within the application,
    providing detailed context about operations, errors, and other significant activities'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志**：记录应用程序中发生的离散事件，提供有关操作、错误和其他重要活动的详细上下文。'
- en: '**Metrics**: Numerical data that represents the measurements of different aspects
    of the application and system performance over time, such as request rates, error
    counts, and resource utilization'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**指标**：表示应用程序和系统性能各个方面的数值数据，随着时间的推移，诸如请求率、错误计数和资源利用率等。'
- en: '**Traces**: Detailed information about the execution paths of transactions
    or requests as they travel through the application and its services, showing how
    different parts of the system interact'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跟踪**：关于事务或请求执行路径的详细信息，它们在应用程序及其服务中流动，展示了系统不同部分如何互动。'
- en: Core functionalities
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 核心功能
- en: 'Here’s a breakdown of its core functionalities and how it works:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是其核心功能及其工作原理的细分：
- en: '**Processing and Enrichment**: Once telemetry data is collected, OpenTelemetry
    can process and enrich this data. Processing may include aggregating metrics,
    filtering logs, or adding additional context to traces to make the data more useful
    and meaningful. This step is crucial for reducing noise and enhancing the relevance
    of the data collected.'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**处理与增强**：一旦遥测数据被收集，OpenTelemetry可以处理并增强这些数据。处理可能包括聚合指标、过滤日志或向跟踪中添加额外的上下文，以使数据更有用和有意义。这一步骤对于减少噪音并增强收集数据的相关性至关重要。'
- en: '**Exporting Data**: OpenTelemetry supports exporting telemetry data to a wide
    range of backend observability platforms where the data can be analyzed, visualized,
    and monitored. It provides exporters for popular monitoring solutions, cloud-native
    observability tools, and custom backends. The OpenTelemetry Collector, a component
    that can be deployed as part of your infrastructure, plays a key role in this
    process. It can receive, process, and export telemetry data from multiple sources,
    acting as a central hub for observability data.'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**导出数据**：OpenTelemetry支持将遥测数据导出到各种后端可观察性平台，在这些平台上可以分析、可视化和监控数据。它为流行的监控解决方案、云原生可观察性工具和自定义后端提供导出工具。OpenTelemetry
    Collector是一个可以作为基础设施的一部分部署的组件，在这一过程中起着关键作用。它可以接收、处理并导出来自多个来源的遥测数据，充当可观察性数据的中央枢纽。'
- en: '**Analysis and Action**: The final step in the OpenTelemetry workflow involves
    analyzing the exported telemetry data using observability platforms. These platforms
    allow teams to visualize data through dashboards, set up alerts based on specific
    conditions, and derive insights that can inform troubleshooting, performance optimization,
    and decision-making processes.'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**分析与行动**：OpenTelemetry工作流中的最后一步是使用可观察性平台分析导出的遥测数据。这些平台允许团队通过仪表盘可视化数据，基于特定条件设置警报，并从中提取可用于故障排除、性能优化和决策过程的见解。'
- en: Implementing monitoring with OpenTelemetry
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实现OpenTelemetry监控
- en: 'Here’s how you can implement monitoring with OpenTelemetry in GitOps:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何在GitOps中实现OpenTelemetry监控：
- en: '**Define Monitoring Configuration as Code**: Store OpenTelemetry Collector
    configurations in your Git repository, specifying how data is collected, processed,
    and exported. This setup ensures that monitoring configurations are subject to
    the same review and deployment practices as application code.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将监控配置定义为代码**：将 OpenTelemetry Collector 配置存储在 Git 仓库中，指定数据的收集、处理和导出方式。此设置确保监控配置与应用代码一样，受到相同的审查和部署实践的管理。'
- en: '**Automated Deployment of Monitoring Infrastructure**: Use GitOps pipelines
    to automatically deploy and update OpenTelemetry Collectors and other monitoring
    components across your Kubernetes clusters. This automation guarantees that monitoring
    infrastructure is consistently deployed across all environments.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控基础设施的自动化部署**：使用 GitOps 管道自动部署和更新 OpenTelemetry Collectors 以及其他监控组件，覆盖您的
    Kubernetes 集群。此自动化确保监控基础设施在所有环境中始终如一地部署。'
- en: '**Instrumentation of Applications**: Incorporate OpenTelemetry SDKs into your
    application code to capture detailed performance metrics and traces. Managing
    SDK configurations through Git allows for controlled updates and consistency across
    services.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序的仪器化**：将 OpenTelemetry SDK 集成到您的应用代码中，以捕获详细的性能指标和追踪信息。通过 Git 管理 SDK 配置，能够实现受控更新并确保跨服务的一致性。'
- en: OpenTelemetry provides a unified and vendor-neutral framework to capture, process,
    and export telemetry data, enabling developers and operators to achieve deep observability
    in their applications. By streamlining the collection of logs, metrics, and traces,
    and making this data easily exportable to analysis tools, OpenTelemetry facilitates
    a better understanding of software performance and behavior, ultimately improving
    the reliability and efficiency of applications.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: OpenTelemetry 提供了一个统一且供应商中立的框架，用于捕获、处理和导出遥测数据，使开发人员和运维人员能够深入观察应用的性能。通过简化日志、指标和追踪的收集，并使这些数据能够轻松导出到分析工具，OpenTelemetry
    有助于更好地理解软件的性能和行为，最终提升应用的可靠性和效率。
- en: OpenTelemetry offers a single, vendor-agnostic framework for collecting traces,
    metrics, and logs from applications and infrastructure. It simplifies the instrumentation
    of code and the deployment of agents, providing a standardized way to gather telemetry
    data that can be analyzed by various observability platforms.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: OpenTelemetry 提供了一个统一的、供应商中立的框架，用于从应用和基础设施收集追踪、指标和日志。它简化了代码的仪器化和代理的部署，提供了一种标准化的方式来收集遥测数据，这些数据可以由各种可观察性平台进行分析。
- en: The next part deals with the possible alerting strategies that can be integrated
    into a GitOps framework.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 下一部分讨论了可以集成到 GitOps 框架中的可能警报策略。
- en: Looking at alerting strategies in a GitOps framework
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看 GitOps 框架中的警报策略
- en: 'Effective alerting is about notifying the right people with the right information
    at the right time. Within a GitOps framework, alerting rules and notification
    configurations are defined as code and managed alongside application and infrastructure
    configurations:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 有效的警报是指在正确的时间，将正确的信息通知给正确的人。在 GitOps 框架内，警报规则和通知配置作为代码定义，并与应用和基础设施配置一起进行管理：
- en: '**Define Alerting Rules as Code**: Store definitions for alerting rules within
    your Git repository, specifying the conditions under which alerts should be triggered.
    This approach enables version control and automated deployment of alerting rules,
    ensuring that they are consistently applied.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将警报规则定义为代码**：将警报规则的定义存储在 Git 仓库中，指定触发警报的条件。这种方法能够实现版本控制和警报规则的自动化部署，确保它们得到一致的应用。'
- en: '**Integration with Notification Channels**: Configure integrations with notification
    channels (such as email, Slack, or PagerDuty) as part of your GitOps workflows.
    This ensures that alert notifications are reliably sent to the appropriate teams
    or individuals.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与通知渠道的集成**：将与通知渠道（如电子邮件、Slack 或 PagerDuty）的集成配置作为 GitOps 工作流的一部分。这样可以确保警报通知可靠地发送给合适的团队或个人。'
- en: '**Feedback Loops for Continuous Improvement**: Implement feedback loops that
    use monitoring and alerting data to inform development and operations practices.
    Incorporating this feedback into your GitOps processes facilitates continuous
    improvement of both application performance and operational efficiency.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续改进的反馈循环**：实施反馈循环，利用监控和警报数据来指导开发和运维实践。将这些反馈融入到 GitOps 流程中，有助于持续改进应用性能和运营效率。'
- en: '*Figure 12**.7* visualizes how GitOps can be used with Argo CD to deploy rules
    and notification channels as code across different clusters:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 12.7* 展示了如何将 GitOps 与 Argo CD 一起使用，以将规则和通知通道作为代码部署到不同的集群中：'
- en: '![Figure 12.7: Continuous improvement with GitOps and observability](img/B22100_12_07.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.7：通过 GitOps 和可观察性实现持续改进](img/B22100_12_07.jpg)'
- en: 'Figure 12.7: Continuous improvement with GitOps and observability'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.7：通过 GitOps 和可观察性实现持续改进
- en: The developers or platform engineers can use the information from the observation
    in the form of a feedback lock to optimize their applications. This can then be
    used, for example, to define new rules if something has been overlooked and, thanks
    to the GitOps approach, it can be rolled out across an *N* number of clusters.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员或平台工程师可以利用观察得到的信息，通过反馈锁的形式优化他们的应用。这可以用于例如在某些事情被忽视时定义新规则，并且借助 GitOps 方法，可以在
    *N* 个集群中推行这些规则。
- en: Some relevant alerting rules
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一些相关的警报规则
- en: 'Here are a few insights from different projects on how platform engineers’
    teams define rulesets and deploy Kubernetes clusters everywhere to help developers
    better understand their applications and live the SRE approach:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是来自不同项目的一些见解，说明平台工程师团队如何定义规则集并在各处部署 Kubernetes 集群，帮助开发人员更好地理解他们的应用，并践行 SRE
    方法：
- en: '**Dynamically Adjust Thresholds**: Implement rules that adjust thresholds based
    on historical data or current load to minimize false alarms and increase the relevance
    of notifications.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动态调整阈值**：实施规则，根据历史数据或当前负载调整阈值，以最小化误报并提高通知的相关性。'
- en: '**Monitor Dependencies**: Set up rules to monitor dependencies between services
    and components to proactively identify potential issues before they impact user
    experience.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控依赖关系**：设置规则来监控服务和组件之间的依赖关系，主动识别潜在问题，以免它们影响用户体验。'
- en: '**Ensure Log Completeness**: Establish rules that check for the completeness
    and structuring of logs. This helps improve the effectiveness of troubleshooting
    and analysis.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**确保日志完整性**：建立规则，检查日志的完整性和结构化。这有助于提高故障排除和分析的有效性。'
- en: '**Resource Utilization Alerts**: Create rules to monitor the utilization of
    resources such as CPU, memory, and disk space. Set alerts for when usage approaches
    critical thresholds, indicating potential overcommitment or resource exhaustion.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源利用率警报**：创建规则来监控 CPU、内存和磁盘空间等资源的利用情况。设置警报，当使用接近临界阈值时，表明可能出现过度承诺或资源耗尽的风险。'
- en: '**Latency Monitoring**: Implement rules to monitor the latency of critical
    operations or API calls. High latency can be an early indicator of system strain
    or overcommitment in processing resources.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**延迟监控**：实施规则来监控关键操作或 API 调用的延迟。高延迟可能是系统负载过重或处理资源过度承诺的早期指示。'
- en: '**Node Overcommitment in Kubernetes**: It’s one of my absolute favorite alerting
    rules, which has already helped an enormous number of teams, especially those
    with many small, tailored clusters. It helps prevent performance degradation and
    ensure the reliability of applications running on Kubernetes by monitoring and
    alerting on node overcommitment. By setting up alerting rules for node overcommitment,
    teams can detect when the demand on a node exceeds its capacity, allowing them
    to take preemptive actions to prevent performance degradation and ensure that
    applications remain reliable. This approach not only improves system stability
    but also supports optimal resource utilization, making it a highly valuable practice
    for maintaining the health and efficiency of Kubernetes clusters.'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kubernetes 中的节点过度承诺**：这是我最喜欢的警报规则之一，已经帮助了大量团队，尤其是那些拥有许多小型定制集群的团队。通过监控和警报节点过度承诺，它帮助防止性能下降，并确保在
    Kubernetes 上运行的应用程序的可靠性。通过为节点过度承诺设置警报规则，团队可以在节点需求超过其容量时及时采取预防措施，防止性能下降，确保应用程序保持可靠。这种方法不仅提高了系统的稳定性，还支持了资源的最佳利用，是维护
    Kubernetes 集群健康和高效的重要实践。'
- en: Diving deeper into node overcommitment in Kubernetes
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 深入了解 Kubernetes 中的节点过度承诺
- en: 'I’ll break down the **node overcommitment in Kubernetes** rule a little further
    here so that it becomes clear why such a simple rule and the associated alerting
    are attached to it:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在这里进一步拆解 **Kubernetes 中的节点过度承诺** 规则，让大家清楚为什么如此简单的规则及其相关警报会附加在此规则上：
- en: '**Sustainability in Resource Utilization**: Monitoring node overcommitment
    can lead to more efficient use of computational resources, reducing energy consumption
    and contributing to the sustainability goals of an organization. Efficient resource
    utilization minimizes unnecessary workloads and idle resources, aligning with
    eco-friendly practices.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源利用的可持续性**：监控节点过度承诺可以更高效地使用计算资源，减少能源消耗，并有助于组织的可持续发展目标。高效的资源利用减少了不必要的工作负载和空闲资源，符合环保实践。'
- en: Important note
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: '**FinOps**, or **Financial Operations**, is a practice that combines systems,
    best practices, and culture to help organizations manage and optimize cloud costs
    more effectively. It focuses on creating a collaborative cross-functional team
    approach that brings financial accountability to the variable spend model of the
    cloud, enabling faster, more informed business decisions.'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '**FinOps**，即**财务运营**，是一种结合了系统、最佳实践和文化的做法，旨在帮助组织更有效地管理和优化云成本。它专注于创建一个跨职能团队合作的方式，将财务问责制引入云的可变支出模型，从而使企业能够做出更快速、更明智的决策。'
- en: '**FinOps and Cost Optimization**: By preventing overcommitment and optimizing
    resource allocation, organizations can adhere to FinOps principles, ensuring that
    cloud spending is aligned with business value. Alerting on node overcommitment
    helps avoid over-provisioning and underutilization, leading to significant cost
    savings and more predictable cloud expenses.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**FinOps与成本优化**：通过防止过度承诺和优化资源分配，组织可以遵循FinOps原则，确保云支出与业务价值相一致。针对节点过度承诺发出警报有助于避免过度配置和资源未充分利用，从而带来显著的成本节约和更可预测的云开支。'
- en: '**Enhanced Application Performance**: Proactively managing node resources ensures
    that applications have access to the necessary computational power when needed,
    enhancing user experience and application performance.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**增强的应用性能**：主动管理节点资源确保应用程序在需要时能够获得所需的计算能力，从而提升用户体验和应用性能。'
- en: '**Reliability and Availability**: Avoiding the overcommitment of nodes contributes
    to the overall reliability and availability of services, as resources are balanced,
    and potential points of failure are minimized.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可靠性和可用性**：避免节点过度承诺有助于提升服务的整体可靠性和可用性，因为资源得到了平衡，潜在的故障点得到了最小化。'
- en: '**Scalability**: Effective monitoring and management of node overcommitment
    prepare the infrastructure for scalability, allowing for smooth scaling operations
    that accommodate growing workloads without compromising performance or incurring
    unnecessary costs.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性**：有效的监控和管理节点过度承诺为基础设施的可扩展性做好准备，使得在不影响性能或产生不必要成本的情况下，可以平稳地扩展以适应不断增长的工作负载。'
- en: Integrating these considerations into Kubernetes resource management practices
    not only addresses immediate operational concerns but also positions organizations
    to better align their technical strategies with environmental sustainability,
    financial accountability, and long-term scalability.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 将这些考虑因素融入Kubernetes资源管理实践中，不仅解决了即时的运营问题，还使组织能够更好地将技术战略与环境可持续性、财务问责制和长期可扩展性对齐。
- en: Adopting monitoring and alerting strategies within a GitOps framework provides
    a systematic and automated approach to observability. Leveraging tools such as
    OpenTelemetry within this framework enhances the granularity and utility of telemetry
    data, driving more informed decision-making and operational resilience. This methodology
    not only ensures high levels of system performance and reliability but also fosters
    a culture of continuous improvement and operational excellence in cloud-native
    environments.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在GitOps框架中采用监控和警报策略提供了一种系统化和自动化的可观察性方法。在该框架内利用像OpenTelemetry这样的工具可以增强遥测数据的粒度和实用性，从而推动更为明智的决策制定和运营弹性。这种方法不仅确保了系统性能和可靠性的高水平，还促进了云原生环境中持续改进和卓越运营的文化。
- en: The last section of the chapter is about how scaling observability can be achieved
    with the help of GitOps.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的最后部分讨论了如何借助GitOps实现可观察性的扩展。
- en: Scaling observability with GitOps
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用GitOps扩展可观察性
- en: As organizations grow and their technology stacks become more complex, ensuring
    effective observability at scale becomes a formidable challenge. Cloud-native
    architectures, microservices, and dynamic environments, all managed through practices
    such as GitOps, introduce a level of complexity that traditional observability
    strategies struggle to accommodate. This section explores the advanced practices,
    tooling, and organizational strategies necessary to achieve comprehensive observability
    at scale, ensuring that systems are not only observable but also manageable, regardless
    of their size and complexity.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 随着组织的增长以及技术栈的日益复杂，确保在大规模环境下的有效可观察性变得异常具有挑战性。云原生架构、微服务和动态环境，所有这些都通过如GitOps等实践进行管理，带来了传统可观察性策略难以适应的复杂性。
    本节探讨了为实现大规模的全面可观察性所必需的先进实践、工具和组织策略，确保系统不仅是可观察的，而且是可管理的，无论其规模和复杂性如何。
- en: Scaling observability components
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展可观察性组件
- en: 'The foundation of observability at scale lies in efficiently managing the three
    pillars: *logging*, *monitoring*, and *tracing*. Each of these components must
    be scaled thoughtfully to handle the vast amounts of data generated by large,
    distributed systems without compromising the speed or accuracy of insights derived
    from the data. Efficient data management is not only essential for technical performance
    but also for cost management, as the volume of data stored and analyzed can significantly
    impact project expenses.'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 大规模可观察性的基础在于有效地管理三大支柱：*日志记录*、*监控*和*追踪*。这三个组件必须经过深思熟虑地扩展，以处理大型分布式系统生成的大量数据，同时不影响从数据中得出见解的速度或准确性。高效的数据管理不仅对技术性能至关重要，还对成本管理至关重要，因为存储和分析的数据量会显著影响项目开销。
- en: 'In the following, we look at how logging, monitoring, and tracing at scale
    behave:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探讨在大规模环境下，日志记录、监控和追踪的行为表现：
- en: '**Logging at Scale**: Implement structured logging to standardize log formats
    across services, making them easier to aggregate and analyze. Utilize centralized
    logging solutions that can handle high volumes of data, providing powerful search
    and analysis tools to quickly derive insights from logs.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**大规模日志记录**：实施结构化日志记录，以标准化服务之间的日志格式，使它们更容易聚合和分析。利用集中式日志解决方案，处理大量数据，提供强大的搜索和分析工具，从日志中快速得出见解。'
- en: '**Monitoring at Scale**: Leverage scalable monitoring solutions that support
    high-frequency data collection and can dynamically adjust to the changing topology
    of cloud-native environments. Adopt service meshes such as Linkerd or Istio, which
    provide built-in observability features for Kubernetes clusters, reducing the
    overhead on individual services.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**大规模监控**：利用支持高频数据收集的可扩展监控解决方案，并能够根据云原生环境的拓扑变化动态调整。采用像Linkerd或Istio这样的服务网格，它们为Kubernetes集群提供内置的可观察性功能，减少了对单个服务的开销。'
- en: '**Tracing at Scale**: Distributed tracing becomes critical in microservices
    architectures to track the flow of requests across services. Solutions such as
    Jaeger, Zipkin, or those provided by service meshes, integrated with OpenTelemetry,
    offer scalable tracing capabilities. Implement trace sampling strategies to balance
    the granularity of trace data with the overhead of collecting and storing that
    data.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**大规模追踪**：在微服务架构中，分布式追踪变得至关重要，用于追踪请求在各个服务之间的流动。像Jaeger、Zipkin或服务网格提供的解决方案，结合OpenTelemetry，提供可扩展的追踪功能。实施追踪采样策略，平衡追踪数据的粒度与收集和存储数据的开销。'
- en: Advanced tooling for observability at scale
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 大规模可观察性的高级工具
- en: Adopting the right tools is crucial for managing observability at scale. Tools
    such as *Prometheus for monitoring*, *Elasticsearch for logging*, and *OpenTelemetry
    for instrumentation* are chosen because they are open source, follow OpenTelemetry
    guidelines, and provide robust, community-supported solutions. When integrated
    into a GitOps workflow, these tools ensure that observability infrastructure can
    be deployed, scaled, and managed as efficiently as the applications and services
    they monitor.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 采用合适的工具对于大规模管理可观察性至关重要。像*Prometheus用于监控*、*Elasticsearch用于日志记录*、以及*OpenTelemetry用于仪表化*这样的工具之所以被选用，是因为它们是开源的，遵循OpenTelemetry指南，并提供强大的社区支持解决方案。将这些工具集成到GitOps工作流中，确保可观察性基础设施可以像其所监控的应用程序和服务一样高效地部署、扩展和管理。
- en: We can use GitOps practices to dynamically configure observability tools based
    on the current needs and scale of the system. This includes the automatic scaling
    of data storage, processing capabilities, and the deployment of additional monitoring
    or tracing agents as the system grows.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 GitOps 实践，根据系统当前的需求和规模动态配置可观察性工具。这包括根据系统的增长自动扩展数据存储、处理能力，并部署额外的监控或追踪代理。
- en: Another good idea is to incorporate AI and ML techniques for anomaly detection
    and predictive analytics, helping to sift through the noise in large datasets
    and identify emerging issues before they impact users.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个不错的想法是结合 AI 和 ML 技术进行异常检测和预测分析，帮助在大数据集中筛选噪声，并在问题影响用户之前识别潜在问题。
- en: In the next subsection, we will examine how to cultivate a culture of observability
    through cross-functional collaboration, continuous education, and strategic feedback
    loops.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的子章节中，我们将探讨如何通过跨职能合作、持续教育和战略性反馈循环来培养可观察性文化。
- en: Organizational strategies for effective observability
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有效可观察性的组织策略
- en: 'Observability at scale is not just a technical challenge but also an organizational
    one. Cultivating a culture of observability requires involvement from across the
    organization, from developers to operations to business stakeholders:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 大规模的可观察性不仅仅是技术挑战，还是一个组织性挑战。培养可观察性的文化需要整个组织的参与，从开发人员到运维人员，再到业务利益相关者：
- en: '**Cross-Functional Teams**: Encourage collaboration between development, operations,
    and business teams to ensure that observability goals align with business objectives
    and operational requirements. This collaboration fosters a shared understanding
    of what needs to be observed and why.'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跨职能团队**：鼓励开发、运维和业务团队之间的合作，确保可观察性目标与业务目标和操作需求对齐。这种合作促进了对需要观察的内容及其原因的共同理解。'
- en: '**Education and Advocacy**: Invest in training and resources to ensure that
    teams understand the importance of observability and how to effectively leverage
    tools and practices at scale. Advocacy for observability as a fundamental aspect
    of system design and operation ensures its integration throughout the development
    life cycle.'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**教育与倡导**：投资培训和资源，确保团队理解可观察性的重要性，并能够在大规模环境中有效利用工具和实践。倡导可观察性作为系统设计和操作的基本组成部分，确保其在整个开发生命周期中得到整合。'
- en: '**Continuous Feedback Loops**: Establish feedback loops that bring observability
    data back into the development process, informing decision-making and driving
    continuous improvement. This includes using observability data to refine performance
    baselines, adjust alerting thresholds, and prioritize development efforts.'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续反馈循环**：建立反馈循环，将可观察性数据反馈到开发过程中，帮助决策并推动持续改进。这包括利用可观察性数据来优化性能基准、调整告警阈值，并优先考虑开发工作。'
- en: Achieving observability at scale requires a comprehensive approach that extends
    beyond just tooling to encompass organizational practices and culture. By integrating
    scalable observability tools with GitOps workflows, leveraging advanced data processing
    techniques, and fostering a culture of collaboration and continuous improvement,
    organizations can ensure that their systems remain observable, manageable, and
    performant, regardless of scale. This holistic approach not only addresses the
    technical challenges of observability at scale but also aligns observability practices
    with broader business objectives, driving value and competitive advantage in today’s
    dynamic and complex technology landscape.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在大规模实现可观察性需要一种全面的方法，不仅仅是依赖工具，还要涵盖组织的实践和文化。通过将可扩展的可观察性工具与 GitOps 工作流结合，利用先进的数据处理技术，培养协作和持续改进的文化，组织可以确保其系统在任何规模下都能保持可观察、可管理和高效。这个全面的方法不仅解决了大规模可观察性的技术挑战，还将可观察性实践与更广泛的商业目标对齐，从而在当今动态复杂的技术环境中推动价值和竞争优势。
- en: In the next part, I’ll share insights to help you decide which tools might be
    useful for your setup.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我将分享一些洞察，帮助你决定哪些工具可能对你的配置有用。
- en: Selecting the right observability tools for specific use cases
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为特定用例选择合适的可观察性工具
- en: Choosing the right observability tools depends on your specific monitoring needs
    and desired outcomes. It’s often not easy, as many use cases sound similar but
    have different requirements. Here are some insights to help you combine different
    tools for the optimal observability stack. The goal is not to find the perfect
    tool but to focus on the different layers of observability. To clarify the understanding
    and different requirements for observability, I’ve added possible stakeholders.
    This list is not exhaustive but includes key stakeholders and their interests
    based on various real projects. I hope these insights will help you get the most
    out of your observability setup.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 选择合适的可观测性工具取决于你的具体监控需求和预期结果。通常这并不容易，因为许多使用场景看似相似，但要求不同。以下是一些见解，帮助你将不同的工具组合成最佳的可观测性堆栈。目标不是找到完美的工具，而是专注于不同的可观测性层级。为了更清晰地理解可观测性及其不同需求，我已添加了可能的相关方。这份清单并不详尽，但包含了基于多个实际项目的关键相关方及其利益。我希望这些见解能够帮助你充分利用可观测性设置。
- en: Important note
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: This section focuses less on GitOps itself and more on when to use which tools,
    providing a comprehensive view of observability. Many questions may arise, such
    as, “*I understand GitOps with observability, but which tools should I use and
    when?*” By exploring various use cases, we hope to give you a sense of which tool
    is the right one for each specific scenario.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 本节更多地关注何时使用哪些工具，而不是 GitOps 本身，提供了可观测性的全面视角。许多问题可能会出现，比如，“*我理解了带有可观测性的 GitOps，但我应该在何时使用哪些工具？*”通过探索各种使用场景，我们希望帮助你了解每种特定场景下哪个工具最适合。
- en: Let’s explore some common scenarios and the tools that best fit each use case.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索一些常见场景及最适合每种使用场景的工具。
- en: '**Monitoring the availability of applications and the expiry** **of certificates**:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '**监控应用程序的可用性和证书的过期**：'
- en: '**Use Case**: You want to ensure your application is available, assign SLAs,
    monitor SSL certificate expiry, and receive alerts.'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用场景**：你希望确保应用程序可用，分配 SLA，监控 SSL 证书过期，并接收警报。'
- en: '**Recommended Tool**: Uptime Kuma'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**推荐工具**：Uptime Kuma'
- en: '**Explanation**: Uptime Kuma is ideal for this scenario as it supports multi-protocol
    monitoring (HTTP(S), TCP, DNS), and provides customizable alerts for downtime
    and SSL certificate expiration. It is user-friendly and cost-effective, making
    it a good choice for straightforward uptime monitoring.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**解释**：Uptime Kuma 非常适合这种场景，因为它支持多协议监控（HTTP(S)、TCP、DNS），并提供可定制的停机和 SSL 证书过期提醒。它操作简单且性价比高，非常适合进行基础的可用性监控。'
- en: '**Stakeholders**:'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**相关方**：'
- en: '**Service Owner**: Monitors overall service health to ensure that all services
    are running'
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务负责人**：监控整体服务健康，确保所有服务正常运行'
- en: '**Developer**: Understands how changes impact the user experience and diagnoses
    issues in production'
  id: totrans-230
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发人员**：理解变更如何影响用户体验，并诊断生产环境中的问题'
- en: '**Customer**: Ensures that the service meets the provided SLAs'
  id: totrans-231
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户**：确保服务满足所提供的 SLA'
- en: '**Monitoring Resource Utilization and** **Application Logs**:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '**监控资源利用率和** **应用日志**：'
- en: '**Use Case**: You need to track metrics such as CPU, RAM, and storage usage,
    and analyze application logs. You also want to be notified when these metrics
    exceed certain thresholds.'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用场景**：你需要追踪 CPU、RAM 和存储使用情况等指标，并分析应用日志。你还希望在这些指标超过某个阈值时接收通知。'
- en: '**Recommended Tools**: Prometheus + Grafana-Stack + Alertmanager'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**推荐工具**：Prometheus + Grafana-Stack + Alertmanager'
- en: '**Explanation**: Prometheus excels at collecting and storing time-series data,
    which includes resource utilization metrics. Grafana-Stack not only provides robust
    visualization capabilities, allowing you to create detailed dashboards, but also
    offers the ability to collect and enrich logs. Alertmanager integrates with Prometheus
    to handle alerting based on the defined thresholds.'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**解释**：Prometheus 擅长收集和存储时间序列数据，包括资源利用率指标。Grafana-Stack 不仅提供强大的可视化功能，允许创建详细的仪表盘，还能够收集和丰富日志。Alertmanager
    与 Prometheus 集成，用于基于预定义阈值处理警报。'
- en: '**Stakeholders**:'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**相关方**：'
- en: '**Site Reliability Engineer**: Monitors system health and resource usage to
    ensure reliability and performance'
  id: totrans-237
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**站点可靠性工程师**：监控系统健康和资源使用情况，确保系统的可靠性和性能'
- en: '**Developer**: Uses logs and metrics to debug and optimize application performance'
  id: totrans-238
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发人员**：使用日志和指标调试和优化应用性能'
- en: '**DevOps Engineer**: Automates monitoring and alerting to streamline operations'
  id: totrans-239
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DevOps 工程师**：自动化监控和警报，以简化操作'
- en: '**Detecting Unusual Application Behavior on** **Host System**:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '**检测应用程序在** **主机系统中的异常行为**:'
- en: '**Use Case**: You want to be notified if an application performs unauthorized
    actions on the host system, such as opening a shell.'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用场景**: 你希望在应用程序对主机系统执行未授权操作（例如打开 shell）时获得通知。'
- en: '**Recommended Tools**: Falco + Prometheus + Alertmanager'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**推荐工具**: Falco + Prometheus + Alertmanager'
- en: '**Explanation**: Falco is a runtime security tool that detects anomalous behavior
    in your applications and host systems. It integrates with Prometheus for monitoring
    and Alertmanager for handling alerts, providing a comprehensive solution for detecting
    and responding to security threats.'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**说明**: Falco 是一个运行时安全工具，它可以检测应用程序和主机系统中的异常行为。它与 Prometheus 集成用于监控，并与 Alertmanager
    配合处理警报，为检测和响应安全威胁提供了全面的解决方案。'
- en: '**Stakeholders**:'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**利益相关者**:'
- en: '**Security Team**: Monitors and responds to potential security threats'
  id: totrans-245
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全团队**: 监控并响应潜在的安全威胁'
- en: '**System Administrator**: Ensures system integrity and compliance'
  id: totrans-246
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**系统管理员**: 确保系统的完整性和合规性'
- en: '**Tracing Packet Loss and** **Identifying Bottlenecks**:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '**追踪数据包丢失和** **识别瓶颈**:'
- en: '**Use Case**: You need to understand why packets are being lost and where requests
    are experiencing delays, without modifying the application code.'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用场景**: 你需要了解为何数据包丢失以及请求在哪些地方遇到延迟，而不需要修改应用程序代码。'
- en: '**Recommended Tools**: Linkerd + Jaeger'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**推荐工具**: Linkerd + Jaeger'
- en: '**Explanation**: Linkerd is a lightweight service mesh that provides observability
    into service-to-service communication without requiring code changes. Jaeger is
    a distributed tracing system that integrates with Linkerd to trace requests through
    your microservices, helping you identify and optimize performance bottlenecks.'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**说明**: Linkerd 是一个轻量级的服务网格，它能够提供服务间通信的可观察性，而无需修改代码。Jaeger 是一个分布式追踪系统，它与 Linkerd
    集成，追踪请求在微服务中的流动，帮助你识别并优化性能瓶颈。'
- en: '**Stakeholders**:'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**利益相关者**:'
- en: '**Network Engineer**: Diagnoses and resolves network-related issues'
  id: totrans-252
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络工程师**: 诊断并解决与网络相关的问题'
- en: '**Developer**: Identifies and fixes performance bottlenecks in the application'
  id: totrans-253
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发者**: 识别并修复应用程序中的性能瓶颈'
- en: '**Site Reliability Engineer**: Identifies and fixes performance bottlenecks
    to ensure system reliability'
  id: totrans-254
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**站点可靠性工程师**: 识别并修复性能瓶颈，以确保系统的可靠性'
- en: '**Customizing and Enriching Logs via** **an SDK**:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '**通过** **SDK** 定制和丰富日志:'
- en: '**Use Case**: You want to adjust and enrich application logs using an SDK.'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用场景**: 你想通过 SDK 调整和丰富应用日志。'
- en: '**Recommended** **Tool**: OpenTelemetry'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**推荐** **工具**: OpenTelemetry'
- en: '**Explanation**: OpenTelemetry provides comprehensive support for collecting,
    processing, and exporting telemetry data (logs, metrics, and traces). It allows
    for both manual and automatic instrumentation of your code, enabling detailed
    customization and enrichment of logs.'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**说明**: OpenTelemetry 提供了全面的支持，用于收集、处理和导出遥测数据（日志、指标和追踪）。它支持手动和自动化的代码仪表化，允许对日志进行详细的定制和丰富。'
- en: '**Stakeholders**:'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**利益相关者**:'
- en: '**Developer**: Customizes and enriches logs for better debugging and performance
    monitoring'
  id: totrans-260
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发者**: 定制和丰富日志，以便更好地进行调试和性能监控'
- en: '**Site Reliability Engineer**: Customizes and enriches logs to ensure system
    reliability and performance'
  id: totrans-261
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**站点可靠性工程师**: 定制和丰富日志，以确保系统的可靠性和性能'
- en: All the tools mentioned are open source. This is important because using open
    source tools ensures that we avoid vendor lock-in, rely on a strong community,
    and have the flexibility to contribute and receive help as needed.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 所有提到的工具都是开源的。这一点很重要，因为使用开源工具可以确保我们避免厂商锁定，依赖强大的社区，并且在需要时具有灵活性，可以进行贡献并获取帮助。
- en: In the next section, let’s understand how observability with GitOps affects
    our daily work in the company.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将了解 GitOps 中的可观察性如何影响我们在公司中的日常工作。
- en: Enterprise-level best practices with observability and GitOps
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 企业级最佳实践：具有可观察性和 GitOps 的最佳实践
- en: I don’t know whether these are really the best practices for enterprise. I can
    only say that what is shared in this section is good practice that works in many
    different projects for us and share these insights with you. In this section,
    I will provide detailed insights into how GitOps maximizes the efficiency and
    effectiveness of our observability stack.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 我不知道这些是否真的是企业级的最佳实践。我只能说，在本节中分享的内容是我们在多个不同项目中使用的良好实践，并将这些见解与大家分享。在本节中，我将提供关于
    GitOps 如何最大化我们可观察性堆栈的效率和效果的详细见解。
- en: In the following, we look at how different stakeholders use the GitOps approach
    to generate added value for themselves.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探讨不同的利益相关者如何使用 GitOps 方法为自己创造附加价值。
- en: '**Service Owner**: GitOps allows service owners, responsible for multiple services
    across different clusters, to define their Grafana dashboards once and roll them
    out as *ConfigMaps* across all relevant clusters independently. This approach
    also applies to the alerts for their respective services.'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务负责人**：GitOps 允许负责多个集群中不同服务的服务负责人，只需定义一次其 Grafana 仪表盘，然后可以独立地将其作为 *ConfigMaps*
    在所有相关集群中推广。这一方法也适用于他们各自服务的警报。'
- en: '**Platform Teams**: GitOps enables us, as a platform team, to deploy our monitoring
    stack irrespective of the number of clusters. This capability allows us to efficiently
    monitor our infrastructure and the services provided, expand the stack as needed,
    and maintain it effortlessly.'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平台团队**：GitOps 使我们作为平台团队能够部署我们的监控栈，而不受集群数量的限制。这一能力使我们能够高效地监控我们的基础设施和提供的服务，按需扩展栈，并轻松维护。'
- en: '**Trainees**: For instance, our trainees can define their own Grafana dashboards
    to integrate sensors that measure the clearance height under bridges in Hamburg.
    These dashboards are defined once and can then be rolled out across all necessary
    clusters.'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实习生**：例如，我们的实习生可以定义自己的 Grafana 仪表盘，以集成用于测量汉堡市桥梁下净空高度的传感器。这些仪表盘只需定义一次，然后就可以在所有必要的集群中推广。'
- en: '**Service Providers**: These are responsible for services such as RabbitMQ
    (message broker) on multiple clusters and use the GitOps approach to deploy alert
    configurations across all clusters and integrate them into their external alerting
    systems.'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务提供商**：这些负责多个集群中的服务，如 RabbitMQ（消息中间件），并使用 GitOps 方法在所有集群中部署警报配置，并将其集成到外部警报系统中。'
- en: '**Developers**: These use a similar approach as the service providers to deliver
    their software with the corresponding dashboards and alerts.'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发人员**：这些人员采用与服务提供商类似的方法，通过相应的仪表盘和警报交付他们的软件。'
- en: '**Security Teams**: An emerging but promising practice is involving security
    teams in observability processes. However, this does not work because, for example,
    security teams in our projects are used to regulating rules independently in the
    company’s interests. To achieve this, they use their own tools, which cause additional
    overheads.'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全团队**：一种新兴但前景广阔的做法是将安全团队纳入可观察性流程。然而，这种做法并未成功，因为例如，在我们的项目中，安全团队习惯于根据公司利益独立制定规则。为此，他们使用自己的工具，这会造成额外的开销。'
- en: '**FinOps Departments**: This currently does not work because the observability
    topic and the Kubernetes platform are both technically too complex. For example,
    creating budget alerts over YAML manifests based on the calculated costs of a
    *Namespace* corresponding to a project is challenging.'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**财务运维部门**：目前，这一做法无法实施，因为可观察性主题和 Kubernetes 平台在技术上都过于复杂。例如，根据与项目相对应的 *Namespace*
    计算的成本，通过 YAML 清单创建预算警报是具有挑战性的。'
- en: Currently, in most projects, platform teams handle security aspects by rolling
    out Falco rules and Prometheus alert configurations, for instance, to detect unwanted
    syscalls such as shell openings on a node, and trigger alerts accordingly. However,
    this often increases the responsibility burden and can result in alerts not being
    thoroughly investigated.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，在大多数项目中，平台团队通过推出 Falco 规则和 Prometheus 警报配置来处理安全问题，例如，检测节点上的不必要的系统调用，如 shell
    打开，并据此触发警报。然而，这通常会增加责任负担，可能导致警报未被彻底调查。
- en: The GitOps approach significantly enhances our observability practices by saving
    time and costs, providing our stakeholders with the necessary autonomy, and boosting
    overall motivation. By creating an environment where teams can manage their observability
    configurations without the constant back-and-forth of tickets, we foster independence
    and a healthy error culture. Teams understand that if something goes wrong, a
    simple commit revert will restore the previous state, making the process more
    resilient and reliable. This approach transforms collaboration across different
    departments, ensuring that observability is seamlessly integrated into our development
    and operational workflows.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: GitOps方法显著提升了我们的可观察性实践，通过节省时间和成本，向利益相关者提供必要的自主权，并提高整体动力。通过创建一个让团队能够管理他们的可观察性配置，而无需不断往返工单的环境，我们促进了独立性和健康的错误文化。团队明白，如果出现问题，简单的提交回滚就能恢复到之前的状态，从而使得流程更加可靠和具有韧性。这种方法改变了不同部门之间的协作，确保了可观察性无缝融入我们的开发和运维工作流中。
- en: Intrinsic motivation drives a fundamental technical understanding of observability
    within the company, which is a significant advantage. This leads to better engagement
    and innovation. Empowering all employees to contribute to and improve the observability
    stack makes the organization more resilient, adaptable, and better prepared to
    tackle new challenges. This collaborative approach not only enhances team efficiency
    but also promotes a culture of continuous improvement and shared responsibility.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 内在动机驱动了公司内部对可观察性的基本技术理解，这是一个显著的优势。这有助于提高员工的参与度和创新能力。赋能所有员工为可观察性栈做出贡献并加以改进，使得组织更加具有韧性、适应性，并且更好地准备应对新的挑战。这种协作方法不仅提升了团队效率，还促进了持续改进和共同责任的文化。
- en: And to be honest, I really like the way the culture changes! This is a point
    that we could not achieve with traditional DevOps with CI/CD, although DevOps
    ironically describes exactly that of the culture.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 坦白说，我真的很喜欢文化的变化方式！这是我们在传统的DevOps和CI/CD中无法实现的一点，尽管DevOps具有讽刺意味地正好描述了这种文化。
- en: Summary
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This comprehensive chapter traversed the intricate landscape of observability
    within cloud-native applications, emphasizing its critical role across various
    dimensions of GitOps and Kubernetes environments. Starting with the foundational
    principles of SRE, we explored how these practices are seamlessly integrated into
    GitOps workflows, enhancing the reliability and performance of Kubernetes deployments.
    The distinction between internal and external observability was clarified, underscoring
    the importance of a balanced approach for comprehensive system insight. We further
    delved into the strategic implementation of SLO-driven performance metrics aligned
    with DORA indicators, offering a structured framework for continuous improvement.
    Through the lens of Linkerd, we examined the deployment of distributed tracing
    within GitOps, highlighting the enhanced visibility and diagnostic capabilities
    it brings to microservices architectures. Monitoring and alerting strategies,
    empowered by tools such as OpenTelemetry, were discussed to establish proactive
    incident management and system health monitoring. Finally, scaling observability
    to meet the demands of growing and complex systems was addressed, showcasing the
    necessity of advanced tooling, organizational strategies, and a culture that prioritizes
    observability. This chapter encapsulated a holistic view of implementing and scaling
    observability in modern cloud-native ecosystems, ensuring that systems are not
    only observable but also resilient and efficient.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 本章全面探讨了云原生应用中的可观察性，强调了它在GitOps和Kubernetes环境中各个维度中的关键作用。从SRE的基础原则入手，我们探索了这些实践如何无缝地融入GitOps工作流，提升了Kubernetes部署的可靠性和性能。明确了内部和外部可观察性的区别，突出了平衡方法对全面系统洞察的重要性。我们进一步深入探讨了与DORA指标对齐的SLO驱动的性能指标的战略实施，提供了一个持续改进的结构化框架。通过Linkerd的视角，我们审视了在GitOps中部署分布式追踪，突显了它为微服务架构带来的增强可视性和诊断能力。讨论了通过OpenTelemetry等工具支持的监控和告警策略，以建立主动的事件管理和系统健康监控。最后，针对满足日益复杂和庞大系统需求的可观察性扩展进行了探讨，展示了先进工具、组织策略以及重视可观察性的文化的必要性。本章概述了在现代云原生生态系统中实施和扩展可观察性的整体视角，确保系统不仅可观察，而且具有韧性和高效性。
- en: But the most important thing to learn should hopefully be that observability
    is versatile and not just logs, metrics, and traces!
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 但最重要的学习内容应该是，希望你能理解可观察性是多元化的，不仅仅是日志、指标和追踪！
- en: In the next chapter, we will look at the security part with GitOps and take
    a look at the attack possibilities with Argo CD and how these can be minimized.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将探讨与GitOps相关的安全部分，并查看使用Argo CD时的攻击可能性以及如何将这些风险降到最低。
- en: References
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[*1*] [https://opentelemetry.io](https://opentelemetry.io)'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*1*] [https://opentelemetry.io](https://opentelemetry.io)'
- en: '[*2*] [https://github.com/grafana/loki](https://github.com/grafana/loki)'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*2*] [https://github.com/grafana/loki](https://github.com/grafana/loki)'
- en: '[*3*] [https://github.com/prometheus/prometheus](https://github.com/prometheus/prometheus)'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*3*] [https://github.com/prometheus/prometheus](https://github.com/prometheus/prometheus)'
- en: '[*4*] [https://github.com/jaegertracing/jaeger](https://github.com/jaegertracing/jaeger)'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*4*] [https://github.com/jaegertracing/jaeger](https://github.com/jaegertracing/jaeger)'
- en: '[*5*] [https://github.com/louislam/uptime-kuma](https://github.com/louislam/uptime-kuma)'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*5*] [https://github.com/louislam/uptime-kuma](https://github.com/louislam/uptime-kuma)'

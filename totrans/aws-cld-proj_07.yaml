- en: <st c="0">7</st>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="0">7</st>
- en: <st c="2">Implementing a Chatbot Using Machine Learning</st>
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="2">使用机器学习实现聊天机器人</st>
- en: <st c="47">In the previous chapters, you already had the opportunity to experiment
    and familiarize yourself with</st> **<st c="150">Artificial Intelligence</st>**
    <st c="173">(</st>**<st c="175">AI</st>**<st c="177">) technologies for different
    domains.</st> <st c="216">Starting with computer vision</st> <st c="245">by analyzing
    your photos to the automation of text translation, you should, by now, have two
    fully functional projects that demonstrate the power of AI in modern applications,
    but that is just the tip of</st> <st c="450">the iceberg.</st>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="47">在前面的章节中，你已经有机会进行实验并熟悉</st> **<st c="150">人工智能</st>** <st c="173">（</st>**<st
    c="175">AI</st>**<st c="177">）技术在不同领域的应用。</st> <st c="216">从计算机视觉开始</st> <st c="245">通过分析你的照片到文本翻译的自动化，你现在应该已经有了两个完全功能的项目，展示了
    AI 在现代应用中的强大力量，但这只是冰山一角。</st>
- en: <st c="462">In today’s digital landscape, users increasingly look for engaging
    and interactive experiences within applications, and chatbots have emerged as
    a powerful way to fulfill this demand, leveraging</st> **<st c="658">Natural Language
    Processing</st>** <st c="685">(</st>**<st c="687">NLP</st>**<st c="690">) and</st>
    <st c="697">conversational AI to provide personalized, real-time assistance and
    foster a sense of</st> <st c="783">human-like interaction.</st>
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="462">在今天的数字化环境中，用户越来越倾向于在应用程序中寻找有趣和互动的体验，而聊天机器人已经成为一种强大的方式来满足这一需求，利用</st>
    **<st c="658">自然语言处理</st>** <st c="685">（</st>**<st c="687">NLP</st>**<st c="690">）和</st>
    <st c="697">对话式 AI 提供个性化、实时的帮助，并促进一种</st> <st c="783">类人互动的感觉。</st>
- en: <st c="806">In summary, this chapter covers the following topics,</st> <st c="861">in
    order:</st>
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="806">总结来说，本章涵盖以下主题，</st> <st c="861">按顺序：</st>
- en: <st c="870">What you are going to build – a chatbot application for</st> <st
    c="927">scheduling meetings</st>
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="870">你将构建的内容 - 一个用于</st> <st c="927">安排会议</st>的聊天机器人应用程序
- en: <st c="946">How you are going to build it – using</st> <st c="985">Amazon Lex</st>
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="946">你将如何构建它 - 使用</st> <st c="985">Amazon Lex</st>
- en: <st c="995">Building it – through CloudFormation and using the</st> <st c="1047">AWS
    console</st>
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="995">构建它 - 通过 CloudFormation 并使用</st> <st c="1047">AWS 控制台</st>
- en: <st c="1058">How to improve the solution – extend your chatbot with additional
    features from</st> <st c="1139">Amazon Lex</st>
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1058">如何改进解决方案 - 使用来自</st> <st c="1139">Amazon Lex</st> <st c="1786">扩展你的聊天机器人功能</st>
- en: <st c="1149">Throughout this chapter, you will improve your knowledge of AI
    technologies and explore the use case of developing a chatbot to help schedule
    meetings without any human interaction.</st> <st c="1332">By the end of the chapter,
    you will understand how Amazon Lex works and, more importantly, how to incorporate
    a chatbot into your</st> <st c="1462">own projects.</st>
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1149">在本章中，你将提升对 AI 技术的理解，并探索开发聊天机器人以帮助安排会议而无需人工干预的用例。</st> <st c="1332">在本章结束时，你将了解
    Amazon Lex 的工作原理，更重要的是，如何将聊天机器人整合到你的</st> <st c="1462">项目中。</st>
- en: <st c="1475">Technical requirements</st>
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="1475">技术要求</st>
- en: <st c="1498">To set up your own chatbot application, you will require access
    to an AWS account.</st> <st c="1582">This book has a dedicated folder within its
    GitHub repository where you can find the necessary code snippets to follow</st>
    <st c="1701">along:</st> [<st c="1708">https://github.com/PacktPublishing/AWS-Cloud-Projects/tree/main/chapter7/code</st>](https://github.com/PacktPublishing/AWS-Cloud-Projects/tree/main/chapter7/code)<st
    c="1785">.</st>
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1498">要设置你自己的聊天机器人应用程序，你需要访问 AWS 账户。</st> <st c="1582">本书在其 GitHub 仓库中有一个专用文件夹，你可以在其中找到必要的代码片段来跟随</st>
    <st c="1701">进行操作：</st> [<st c="1708">https://github.com/PacktPublishing/AWS-Cloud-Projects/tree/main/chapter7/code</st>](https://github.com/PacktPublishing/AWS-Cloud-Projects/tree/main/chapter7/code)<st
    c="1785">。</st>
- en: <st c="1786">Scenario</st>
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="1786">场景</st>
- en: <st c="1795">After successfully</st> <st c="1815">building and deploying several
    applications leveraging cloud and serverless technologies, you have become proficient
    in these modern architectures.</st> <st c="1963">However, one area that still
    demands critical time and effort is scheduling meetings.</st> <st c="2049">On
    average, you need three or more interactions to coordinate availability, discuss
    agenda items, and finalize logistics for each meeting.</st> <st c="2188">This
    back-and-forth communication can be tedious and time-consuming, often distracting
    you from more</st> <st c="2289">important tasks.</st>
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1795">在成功</st> <st c="1815">构建和部署多个利用云和无服务器技术的应用后，你已经熟练掌握了这些现代架构。</st>
    <st c="1963">然而，仍然需要大量时间和精力的一个领域是会议安排。</st> <st c="2049">平均而言，你需要三次或更多的互动才能协调可用时间、讨论议程事项并最终确定每个会议的后勤安排。</st>
    <st c="2188">这种来回沟通可能既乏味又耗时，经常使你从更</st> <st c="2289">重要的任务中分心。</st>
- en: <st c="2305">While exploring ways to optimize and accelerate these repetitive
    processes, you stumble upon the concept of chatbots.</st> <st c="2424">With your
    growing interest in AI and its practical applications, you realize that chatbots
    could be more than just conversational interfaces – they could potentially handle
    specific actions and</st> <st c="2618">automate workflows.</st>
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2305">在探索如何优化和加速这些重复性流程时，你偶然发现了聊天机器人这一概念。</st> <st c="2424">随着你对AI及其实际应用的兴趣日益增长，你意识到聊天机器人不仅仅是对话界面——它们可能处理特定的操作并且</st>
    <st c="2618">自动化工作流。</st>
- en: <st c="2637">The idea of creating a chatbot to streamline the meeting scheduling
    process piques your interest.</st> <st c="2736">By leveraging NLP and conversational
    AI, a well-designed chatbot could understand meeting-related requests and automatically
    create the</st> <st c="2872">meeting requests.</st>
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2637">创建一个聊天机器人来简化会议安排流程的想法引起了你的兴趣。</st> <st c="2736">通过利用自然语言处理（NLP）和对话式AI，一个设计良好的聊天机器人可以理解与会议相关的请求，并自动创建</st>
    <st c="2872">会议请求。</st>
- en: '<st c="2889">Excited by the potential efficiency gains and the opportunity
    to apply your AI knowledge, you decide to embark on a new project: developing
    an intelligent chatbot application to change the way you schedule meetings.</st>
    <st c="3106">With the right combination of cloud technologies, serverless architectures,
    and AI capabilities, you aim to create a seamless, conversational experience that
    can automate the entire meeting scheduling process, freeing up valuable time and
    allowing you to focus on more</st> <st c="3375">strategic tasks.</st>'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2889">受到提高效率潜力的激励，并希望能应用你的AI知识，你决定开始一个新项目：开发一个智能聊天机器人应用，改变会议安排的方式。</st>
    <st c="3106">通过云技术、无服务器架构和AI能力的正确结合，你的目标是创建一个无缝的对话体验，自动化整个会议安排过程，节省宝贵时间，让你能够专注于更多</st>
    <st c="3375">战略性任务。</st>
- en: <st c="3391">Requirements</st>
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="3391">需求</st>
- en: <st c="3404">Now you will start by gathering the requirements for this project.</st>
    <st c="3472">This exercise, aligned with what you’ve done so far for the previous
    chapters, will help you design your application and define the technical choices
    for</st> <st c="3626">the implementation.</st>
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3404">现在，你将开始收集该项目的需求。</st> <st c="3472">这项练习与你在前几章所做的工作相一致，将帮助你设计应用程序并定义技术选择，以便进行</st>
    <st c="3626">实现。</st>
- en: <st c="3645">Gathering requirements implies understanding the profiles that
    will be interacting with your application, the actions they will perform, and
    any constraints you may have from a technical and</st> <st c="3837">functional
    standpoint.</st>
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3645">收集需求意味着要理解将与应用程序互动的用户角色、他们将执行的操作，以及从技术和</st> <st c="3837">功能角度可能存在的任何限制。</st>
- en: <st c="3859">Overall, you still want to serve two different personas interacting
    with</st> <st c="3933">your application:</st>
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3859">总的来说，你仍然希望服务于与</st> <st c="3933">你的应用互动的两类不同用户：</st>
- en: '**<st c="3950">End user/meeting requester</st>**<st c="3977">: Part of the
    platform that is publicly accessible with a chatbot to help</st> <st c="4052">schedule
    meetings.</st>'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="3950">最终用户/会议请求者</st>**<st c="3977">：平台的一部分，公开可访问，配有聊天机器人帮助</st> <st
    c="4052">安排会议。</st>'
- en: '**<st c="4070">Admin/meeting owner</st>**<st c="4090">: Manage meeting requests
    with a calendar view of the</st> <st c="4145">accepted meetings.</st>'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="4070">管理员/会议所有者</st>**<st c="4090">：通过日历视图管理会议请求并查看已接受的</st> <st c="4145">会议。</st>'
- en: <st c="4163">These requirements can be translated into functional, non-functional,
    and</st> <st c="4238">data requirements.</st>
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这些需求可以被翻译为功能需求、非功能需求和数据需求。
- en: <st c="4256">Functional requirements</st>
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 功能需求
- en: <st c="4280">With your</st> <st c="4291">applications’ personas well defined,
    you can break down the functional requirements per</st> <st c="4379">user type:</st>
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在你定义好应用程序的用户角色后，你可以按用户类型细分功能需求：
- en: '**<st c="4389">Meeting requester</st>**<st c="4407">:</st>'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**会议请求者**：'
- en: <st c="4409">Applications should be publicly available and not</st> <st c="4459">require
    authentication.</st>
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序应公开可用，并且不需要身份验证。
- en: <st c="4482">Responsive so anyone can interact with your application over</st>
    <st c="4544">any device.</st>
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应式设计，以便任何人都可以通过任何设备与应用程序进行互动。
- en: <st c="4555">Your chatbot should be able to handle small typos in</st> <st c="4609">the
    inputs.</st>
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的聊天机器人应能够处理输入中的小错误。
- en: <st c="4620">Ability to understand descriptive dates such as “tomorrow” or “</st><st
    c="4684">next Monday”.</st>
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解描述性日期的能力，如“明天”或“下周一”。
- en: '**<st c="4698">Meeting owner</st>**<st c="4712">:</st>'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**会议拥有者**：'
- en: <st c="4714">List pending meeting requests, and the ability to approve or</st>
    <st c="4775">reject them.</st>
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出待处理的会议请求，并具有批准或**拒绝**它们的能力。
- en: <st c="4787">Include a calendar with all the approved meetings where the admin</st>
    <st c="4854">can navigate.</st>
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括一个显示所有已批准会议的日历，管理员可以在其中进行导航。
- en: <st c="4867">The calendar should support different views by day, week,</st>
    <st c="4926">and month.</st>
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日历应支持按天、周和月不同的视图。
- en: <st c="4936">The admin page should only be available</st> <st c="4977">through
    authentication.</st>
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理员页面应仅通过身份验证访问。
- en: <st c="5000">Conflicting meetings should not be rejected by the chatbot; if
    the proposed slot is already taken, the application should include a warning sign
    associated with the</st> <st c="5166">meeting request.</st>
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发生冲突的会议不应被聊天机器人拒绝；如果提议的时间段已被占用，应用程序应包含一个与会议请求相关的警告标志。
- en: '<st c="5182">While listing the primary functionalities or capabilities is an
    effective approach to defining functional requirements, complementing them with
    visual representations can significantly enhance value and accelerate the development
    process.</st> <st c="5422">With this in mind, you have created two simple mockups:
    one for the end user interface and another for the admin</st> <st c="5535">interface,
    as depicted in</st> *<st c="5561">Figures 7.1</st>* <st c="5572">and</st> *<st
    c="5577">7.2</st>*<st c="5580">, respectively:</st>'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 列出主要功能或能力是定义功能需求的有效方法，然而，通过视觉表示来补充它们可以显著提升价值并加速开发过程。考虑到这一点，你创建了两个简单的原型：一个是面向终端用户界面的，另一个是面向管理员界面的，如*图
    7.1* 和 *7.2* 所示：
- en: '**<st c="5595">/home</st>** <st c="5601">looks</st> <st c="5608">like this:</st>'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**/home** 看起来是这样的：'
- en: '![Figure 7.1 – UI mockup of the user page](img/B22051_07_1.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.1 – 用户页面的 UI 原型](img/B22051_07_1.jpg)'
- en: <st c="5672">Figure 7.1 – UI mockup of the user page</st>
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.1 – 用户页面的 UI 原型
- en: '**<st c="5711">/admin</st>** <st c="5718">looks</st> <st c="5725">like this:</st>'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**/admin** 看起来是这样的：'
- en: '![Figure 7.2 – UI mockup of the admin page](img/B22051_07_2.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.2 – 管理员页面的 UI 原型](img/B22051_07_2.jpg)'
- en: <st c="5894">Figure 7.2 – UI mockup of the admin page</st>
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.2 – 管理员页面的 UI 原型
- en: <st c="5934">Non-functional requirements</st>
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 非功能需求
- en: <st c="5962">Based on your</st> <st c="5977">research, you found that conversational
    AI is a hot topic nowadays due to the emergence of generative AI technologies
    and large language models specialized in</st> <st c="6136">chatbot development.</st>
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 基于你的研究，你发现由于生成性 AI 技术的出现以及专门用于聊天机器人开发的大型语言模型，当前对话式 AI 成为一个热门话题。
- en: <st c="6156">For this first project, you want to start with a simple solution
    by adopting a managed service that is easily configurable and requires the least
    amount of</st> <st c="6313">maintenance effort.</st>
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个初步项目，你希望通过采用一个易于配置、维护工作量最小的托管服务来启动一个简单的解决方案。
- en: <st c="6332">Moreover, you want to keep this solution as optimized as possible
    from a cost standpoint and, whenever possible, adopt serverless technologies to
    leverage a pure</st> <st c="6495">pay-as-you-go model.</st>
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6332">此外，从成本角度出发，你希望尽可能优化这个解决方案，并且在可能的情况下，采用无服务器技术，以利用纯粹的</st> <st c="6495">按需付费模式。</st>
- en: <st c="6515">Data requirements</st>
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="6515">数据需求</st>
- en: <st c="6533">Your application’s</st> <st c="6553">purpose is to store and manage
    meetings.</st> <st c="6594">It is crucial to review the operations you want to
    perform to help you define the right data structure.</st> <st c="6698">Let’s start
    with the operations you want to perform over the</st> <st c="6759">meeting requests:</st>
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6533">你的应用程序的</st> <st c="6553">目的是存储和管理会议。</st> <st c="6594">审查你想要执行的操作至关重要，这将帮助你定义正确的数据结构。</st>
    <st c="6698">让我们从你想要在会议请求上执行的操作开始：</st>
- en: '**<st c="6776">Create a meeting</st>**<st c="6793">: Create a</st> <st c="6805">new
    meeting.</st>'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="6776">创建会议</st>**<st c="6793">：创建一个</st> <st c="6805">新的会议。</st>'
- en: '**<st c="6817">Get pending meeting requests</st>**<st c="6846">: Show a list
    of the meeting requests with a</st> **<st c="6892">Pending</st>** <st c="6899">status
    to either accept or reject, with a warning for</st> <st c="6954">overlapping requests.</st>'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="6817">获取待定会议请求</st>**<st c="6846">：显示待定状态的会议请求列表，供你选择接受或拒绝，并且会警告</st>
    **<st c="6892">待定</st>** <st c="6899">的重叠请求。</st>'
- en: '**<st c="6975">Change meeting status</st>**<st c="6997">: Change the status
    of a pending meeting to accepted</st> <st c="7051">or rejected.</st>'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="6975">更改会议状态</st>**<st c="6997">：将待定会议的状态更改为已接受</st> <st c="7051">或已拒绝。</st>'
- en: '**<st c="7063">Check approved meetings within a time window</st>**<st c="7108">:
    The ability to get a list of the approved meetings to include in</st> <st c="7176">your
    calendar.</st>'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="7063">检查时间窗口内的已批准会议</st>**<st c="7108">：获取已批准会议的列表，以便将其包含在</st> <st
    c="7176">你的日历中。</st>'
- en: <st c="7190">Considering the</st> <st c="7206">operations listed, a meeting
    can be described</st> <st c="7253">as</st> `<st c="7256">meeting_example.json</st>`<st
    c="7276">:</st>
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7190">考虑到</st> <st c="7206">列出的操作，可以将会议描述为</st> `<st c="7256">meeting_example.json</st>`<st
    c="7276">：</st>
- en: '[PRE0]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: <st c="7686">There is no relationship between meetings, and you do not foresee
    any need to run complex queries, so you want to adopt a high-performing, serverless
    data service that supports the</st> <st c="7867">execution of all the</st> <st
    c="7889">enumerated actions.</st>
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7686">会议之间没有关系，你也不预见需要运行复杂查询，因此你希望采用高性能的无服务器数据服务，支持执行所有</st> <st c="7867">列举的操作。</st>
- en: <st c="7908">Architecture patterns</st>
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="7908">架构模式</st>
- en: <st c="7930">AI solutions have</st> <st c="7948">the potential to bring significant
    value to businesses across various industries, but often, finding the resources
    to plan them from scratch can be time-consuming, expensive, and complex.</st>
    <st c="8137">As part of the AWS Solutions Library, AWS has a dedicated section
    called</st> **<st c="8210">Solutions for Artificial Intelligence</st>** <st c="8247">(</st>[<st
    c="8249">https://aws.amazon.com/solutions/ai/</st>](https://aws.amazon.com/solutions/ai/)<st
    c="8285">), with a curated set</st> <st c="8308">of architectures that can help
    you accelerate AI adoption and decrease the time to embed it in your current products.</st>
    <st c="8426">These solutions belong to different domains, ranging from predictive
    analytics and computer vision to personalization and recommendation, among others.</st>
    <st c="8578">This is always a good place to start when thinking about an AI project</st>
    <st c="8649">in AWS.</st>
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7930">AI 解决方案有</st> <st c="7948">潜力为各行各业的企业带来显著的价值，但通常，从零开始规划这些方案可能既费时又昂贵，并且复杂。</st>
    <st c="8137">作为 AWS 解决方案库的一部分，AWS 拥有一个名为</st> **<st c="8210">人工智能解决方案</st>** <st
    c="8247">（</st>[<st c="8249">https://aws.amazon.com/solutions/ai/</st>](https://aws.amazon.com/solutions/ai/)<st
    c="8285">），其中包含了一组精选的</st> <st c="8308">架构，可以帮助你加速 AI 的采用，并缩短将其嵌入当前产品的时间。</st>
    <st c="8426">这些解决方案属于不同的领域，涵盖从预测分析和计算机视觉到个性化和推荐等多个领域。</st> <st c="8578">当你在 AWS
    上思考 AI 项目时，这是一个很好的起点。</st> <st c="8649">。</st>
- en: <st c="8656">More specifically, there is a subsection</st> <st c="8698">called</st>
    **<st c="8705">Chatbots & Virtual Assistants</st>** <st c="8734">(</st>[<st c="8736">https://aws.amazon.com/solutions/ai/chatbots-virtual-assistants/</st>](https://aws.amazon.com/solutions/ai/chatbots-virtual-assistants/)<st
    c="8800">).</st> <st c="8804">It is part of the language understanding domain,
    which can be a good baseline for</st> <st c="8886">this project.</st>
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8656">更具体地说，有一个子部分</st> <st c="8698">名为</st> **<st c="8705">聊天机器人与虚拟助手</st>**
    <st c="8734">(</st>[<st c="8736">https://aws.amazon.com/solutions/ai/chatbots-virtual-assistants/</st>](https://aws.amazon.com/solutions/ai/chatbots-virtual-assistants/)<st
    c="8800">)</st> <st c="8804">它是语言理解领域的一部分，可以作为此项目的良好基础。</st>
- en: <st c="8899">Architecture</st>
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="8899">架构</st>
- en: <st c="8912">To architect your</st> <st c="8930">applications, it is key to
    define the building blocks that compose them.</st> <st c="9004">Starting from
    the higher level, you defined a layered approach composed of</st> <st c="9079">four
    layers:</st>
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8912">要架构化你的</st> <st c="8930">应用程序，关键是要定义组成它们的构建块。</st> <st c="9004">从更高层次开始，你定义了一个由四个层组成的分层方法：</st>
    <st c="9079">四个层：</st>
- en: '**<st c="9091">Presentation layer</st>**<st c="9110">: How to host and serve</st>
    <st c="9135">your frontend</st>'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="9091">展示层</st>**<st c="9110">：如何托管和提供</st> <st c="9135">前端</st>'
- en: '**<st c="9148">Compute layer</st>**<st c="9162">: How to incorporate and execute</st>
    <st c="9196">business logic</st>'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="9148">计算层</st>**<st c="9162">：如何集成和执行</st> <st c="9196">业务逻辑</st>'
- en: '**<st c="9210">Data layer</st>**<st c="9221">: Where to store and retrieve</st>
    <st c="9252">your data</st>'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="9210">数据层</st>**<st c="9221">：用于存储和检索</st> <st c="9252">数据</st>'
- en: '**<st c="9261">Chatbot layer</st>**<st c="9275">: Layer responsible for developing</st>
    <st c="9311">your chatbot</st>'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="9261">聊天机器人层</st>**<st c="9275">：负责开发</st> <st c="9311">聊天机器人的层</st>'
- en: <st c="9323">For the presentation layer, you decided to adopt a similar strategy
    to the one you used in the previous chapter and develop a single-page application
    in React.</st> <st c="9484">For your compute layer, you started by designing the
    API that will be the interface between your frontend and the business logic included
    in your compute layer.</st> <st c="9645">Considering your functional requirements,
    you listed the various actions to be performed and structured your API as represented
    in</st> *<st c="9776">Figure 7</st>**<st c="9784">.3</st>*<st c="9786">:</st>
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9323">对于展示层，你决定采用与上一章相似的策略，并使用 React 开发单页面应用。</st> <st c="9484">对于计算层，你从设计
    API 开始，该 API 将作为前端与计算层中包含的业务逻辑之间的接口。</st> <st c="9645">考虑到你的功能需求，你列出了需要执行的各种操作，并按照</st>
    *<st c="9776">图 7</st>**<st c="9784">.3</st>*<st c="9786">中所示的方式结构化了你的 API：</st>
- en: '**<st c="9788">GET /meetings</st>**<st c="9801">: Get the list of approved
    meetings within a</st> <st c="9847">time window</st>'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="9788">GET /meetings</st>**<st c="9801">：获取在指定时间窗口内已批准的会议列表</st> <st
    c="9847">时间窗口</st>'
- en: '**<st c="9858">GET /pending</st>**<st c="9871">: Get the list of pending</st>
    <st c="9898">meeting requests</st>'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="9858">GET /pending</st>**<st c="9871">：获取待处理的会议请求列表</st> <st c="9898">会议请求</st>'
- en: '**<st c="9914">POST /chatbot</st>**<st c="9928">: Interact with the chatbot
    by sending the</st> <st c="9972">user prompts</st>'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="9914">POST /chatbot</st>**<st c="9928">：通过发送用户提示与聊天机器人进行交互</st> <st
    c="9972">用户提示</st>'
- en: '**<st c="9984">PUT /status</st>**<st c="9996">: Change the status of a meeting
    request to approved</st> <st c="10050">or rejected</st>'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="9984">PUT /status</st>**<st c="9996">：将会议请求的状态更改为批准</st> <st c="10050">或拒绝</st>'
- en: '![Figure 7.3 – API structure](img/B22051_07_3.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.3 – API 结构](img/B22051_07_3.jpg)'
- en: <st c="10107">Figure 7.3 – API structure</st>
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10107">图 7.3 – API 结构</st>
- en: '*<st c="10133">Figure 7</st>**<st c="10142">.4</st>* <st c="10144">illustrates</st>
    <st c="10156">the architecture you will implement based on all</st> <st c="10206">the
    requirements.</st>'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*<st c="10133">图 7</st>**<st c="10142">.4</st>* <st c="10144">展示了你将在满足所有需求的基础上实施的架构。</st>'
- en: '![Figure 7.4 – AWS architecture for your chatbot application](img/B22051_07_4.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.4 – 你聊天机器人应用的 AWS 架构](img/B22051_07_4.jpg)'
- en: <st c="10469">Figure 7.4 – AWS architecture for your chatbot application</st>
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10469">图 7.4 – 你聊天机器人应用的 AWS 架构</st>
- en: <st c="10527">The frontend will be hosted and served through a combination of
    S3 and CloudFront services.</st> <st c="10620">For the API, you will leverage
    Amazon API Gateway HTTP API with endpoints that map the actions</st> <st c="10715">you
    have listed.</st> <st c="10732">After reviewing the data requirements, you have
    chosen DynamoDB as your data store.</st> <st c="10816">The last component is the
    chatbot, and after conducting research, you have selected Amazon Lex as a managed
    solution due to its cost-effectiveness, simplicity, and overall integration with
    other AWS services such as Lambda functions, allowing you to extend your chatbot’s
    capabilities and perform actions on</st> <st c="11124">your behalf.</st>
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10527">前端将通过 S3 和 CloudFront 服务的结合进行托管和提供。</st> <st c="10620">对于 API，您将利用
    Amazon API Gateway HTTP API，使用与您列出的操作相映射的端点。</st> <st c="10715">在审查数据需求后，您选择了
    DynamoDB 作为您的数据存储。</st> <st c="10732">最后一个组件是聊天机器人，经过研究后，您选择了 Amazon Lex 作为托管解决方案，因其具有成本效益、简便性以及与其他
    AWS 服务如 Lambda 函数的整体集成，能够扩展您的聊天机器人的功能并在</st> <st c="11124">您的代理下执行操作。</st>
- en: <st c="11136">Each of the services mentioned and the main advantages and reasons
    for these choices will be</st> <st c="11230">described next.</st>
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11136">接下来将描述提到的每个服务及其主要优点和选择原因。</st>
- en: <st c="11245">AWS services</st>
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="11245">AWS 服务</st>
- en: <st c="11258">Selecting from</st> <st c="11274">the extensive range of available
    services can be a daunting task, and a thorough understanding of the requirements
    is crucial for making an informed decision.</st> <st c="11433">Some of the services
    have already been covered in previous chapters, so to avoid redundancy, we will
    only highlight the advantages specific to the current use case if they have not
    been previously mentioned and provide references to the relevant chapters where
    you can find</st> <st c="11707">detailed explanations.</st>
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11258">从</st> <st c="11274">丰富的可用服务范围中选择可能是一项艰巨的任务，充分理解需求对于做出明智的决策至关重要。</st>
    <st c="11433">一些服务在前面的章节中已经介绍过，因此为了避免重复，我们将只突出当前用例中特有的优点，前提是这些优点之前未曾提及，并提供相关章节的参考，您可以在其中找到</st>
    <st c="11707">详细解释。</st>
- en: <st c="11729">Amazon CloudFront and Amazon Simple Storage Service (S3)</st>
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="11729">Amazon CloudFront 和 Amazon 简单存储服务（S3）</st>
- en: <st c="11786">We have</st> <st c="11795">extensively</st> <st c="11806">covered
    Amazon</st> <st c="11822">S3 and Amazon</st> <st c="11835">CloudFront for hosting
    a single-page application frontend.</st> <st c="11895">These two AWS services
    played a crucial role in the previous projects mentioned, and if you want to review
    them, we recommend checking</st> *<st c="12030">Chapters 2</st>* <st c="12040">and</st>
    *<st c="12045">3</st>*<st c="12046">.</st>
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11786">我们已经</st> <st c="11795">广泛</st> <st c="11806">介绍了 Amazon</st>
    <st c="11822">S3 和 Amazon</st> <st c="11835">CloudFront 用于托管单页面应用程序的前端。</st> <st
    c="11895">这两项 AWS 服务在前面提到的项目中发挥了至关重要的作用，如果您想回顾它们，建议查看</st> *<st c="12030">第 2
    章</st>* <st c="12040">和</st> *<st c="12045">第 3 章</st>*<st c="12046">。</st>
- en: <st c="12047">Amazon DynamoDB</st>
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="12047">Amazon DynamoDB</st>
- en: <st c="12063">Amazon</st> <st c="12071">DynamoDB was introduced in</st> [*<st
    c="12098">Chapter 3</st>*](B22051_03.xhtml#_idTextAnchor054) <st c="12107">as
    part</st> <st c="12116">of the first version of the recipe-sharing application.</st>
    <st c="12172">If you are not familiar with the service and its purpose, we recommend
    reviewing</st> [*<st c="12253">Chapter 3</st>*](B22051_03.xhtml#_idTextAnchor054)<st
    c="12262">’s</st> *<st c="12266">AWS</st>* *<st c="12270">services</st>* <st c="12278">section.</st>
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12063">Amazon</st> <st c="12071">DynamoDB 在</st> [*<st c="12098">第 3
    章</st>*](B22051_03.xhtml#_idTextAnchor054) <st c="12107">中介绍，作为第一版食谱共享应用程序的一部分。</st>
    <st c="12172">如果您不熟悉该服务及其用途，建议查看</st> [*<st c="12253">第 3 章</st>*](B22051_03.xhtml#_idTextAnchor054)<st
    c="12262">的</st> *<st c="12266">AWS</st>* *<st c="12270">服务</st>* <st c="12278">部分。</st>
- en: <st c="12287">Amazon Cognito, Amazon API Gateway, and Amazon Lambda</st>
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="12287">Amazon Cognito、Amazon API Gateway 和 Amazon Lambda</st>
- en: <st c="12341">Amazon API</st> <st c="12353">Gateway</st> <st c="12361">has been</st>
    <st c="12370">used</st> <st c="12375">for the</st> <st c="12383">API</st> <st
    c="12386">layer, Amazon Lambda for the compute layer, and Amazon Cognito for authentication
    in previous projects due to their seamless integration.</st> <st c="12525">If
    you wish to explore any of these services in depth, detailed explanations are
    provided in</st> [*<st c="12618">Chapter 4</st>*](B22051_04.xhtml#_idTextAnchor089)<st
    c="12627">.</st>
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12341">Amazon API</st> <st c="12353">网关</st> <st c="12361">已被</st> <st
    c="12370">用于</st> <st c="12375">API</st> <st c="12383">层，Amazon Lambda 用于计算层，Amazon
    Cognito 用于身份验证，这些都因其无缝集成在之前的项目中被使用。</st> <st c="12525">如果你希望深入了解这些服务，可以参考</st>
    [*<st c="12618">第4章</st>*](B22051_04.xhtml#_idTextAnchor089)<st c="12627">。</st>
- en: <st c="12628">Amazon Lex</st>
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="12628">Amazon Lex</st>
- en: <st c="12639">Amazon Lex</st> <st c="12650">is an</st> <st c="12657">AWS service
    that makes it easy to build conversational interfaces, called chatbots or virtual
    assistants.</st> <st c="12763">As part of the AWS AI services, Amazon Lex simplifies
    and streamlines the creation of applications where users can communicate through
    voice or text, understand their intents, respond in a natural and human way and,
    most importantly, perform actions as responses to users’ requests.</st> <st c="13046">Being
    a managed service, with Amazon Lex, you do not need to manage any infrastructure,
    and therefore, you do not have to pay for any</st> <st c="13180">unused capacity.</st>
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12639">Amazon Lex</st> <st c="12650">是一个</st> <st c="12657">AWS 服务，它使得构建对话界面（称为聊天机器人或虚拟助手）变得更加简单。</st>
    <st c="12763">作为 AWS AI 服务的一部分，Amazon Lex 简化并简化了创建用户可以通过语音或文本交流、理解其意图、以自然和人类的方式回应，并且最重要的是，根据用户请求执行操作的应用程序。</st>
    <st c="13046">作为一种托管服务，使用 Amazon Lex 时，你不需要管理任何基础设施，因此，你也不需要为任何</st> <st c="13180">未使用的容量支付费用。</st>
- en: <st c="13196">With Amazon Lex, you can leverage more than 25 languages and locales,
    at the time of this writing, which</st> <st c="13302">makes it easier to build
    versatile chatbots that can serve users across</st> <st c="13374">the world.</st>
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="13196">使用 Amazon Lex，你可以利用超过 25 种语言和地区设置，截至目前，这</st> <st c="13302">使得构建多功能聊天机器人变得更加容易，可以服务全球范围内的用户。</st>
- en: <st c="13384">Amazon Lex has some basic concepts associated that are important
    to familiarize yourself with before configuring</st> <st c="13498">your chatbot:</st>
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="13384">Amazon Lex 有一些基本概念，了解这些概念在配置</st> <st c="13498">你的聊天机器人之前非常重要：</st>
- en: '`<st c="13935">AMAZON.FallbackIntent</st>`<st c="13956">, which is used whenever
    no other intent can</st> <st c="14001">be identified.</st>'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="13935">AMAZON.FallbackIntent</st>`<st c="13956">，当无法识别其他意图时将会使用此意图。</st>'
- en: '**<st c="14015">Utterances</st>**<st c="14026">: These are one or more sentences
    you need to provide when configuring each intent, which the chatbot will use to
    identify the intent based on the user input.</st> <st c="14186">For example, following
    the case of this chapter, the utterances associated with the Book Meetings intent
    could be</st> <st c="14300">as follows:</st>'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="14015">语句（Utterances）</st>**<st c="14026">：这些是配置每个意图时需要提供的一个或多个句子，聊天机器人将根据用户输入使用这些语句来识别意图。</st>
    <st c="14186">例如，按照本章的案例，与“预定会议”意图相关的语句可能如下：</st>'
- en: <st c="14311">“I want to book</st> <st c="14328">a meeting”</st>
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="14311">“我想预定</st> <st c="14328">一个会议”</st>
- en: <st c="14338">“Help me book</st> <st c="14353">a meeting”</st>
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="14338">“帮我预定</st> <st c="14353">一个会议”</st>
- en: '**<st c="14363">Slots</st>**<st c="14369">: Slots are pieces of information
    that Amazon Lex needs to gather from the user to successfully fulfill an intent.</st>
    <st c="14485">Each slot is associated with a slot type, which defines the kind
    of data expected for that slot.</st> <st c="14582">AWS already provides built-in
    slot types such as numbers or dates, but you can extend it by creating custom
    slot types.</st> <st c="14702">Following the example of this chapter, examples
    of slots could be any information needed to schedule a meeting, such as the attendee’s
    name, the date, the</st> <st c="14856">time to start, and the duration of</st>
    <st c="14892">the meeting.</st>'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="14363">插槽（Slots）</st>**<st c="14369">：插槽是 Amazon Lex 需要从用户那里收集的信息，以便成功完成一个意图。</st>
    <st c="14485">每个插槽都与一个插槽类型相关联，该类型定义了该插槽期望的数据种类。</st> <st c="14582">AWS 已经提供了内置的插槽类型，如数字或日期，但你也可以通过创建自定义插槽类型来扩展它。</st>
    <st c="14702">根据本章的示例，插槽的例子可以是安排会议所需的任何信息，比如与会者的姓名、日期、</st> <st c="14856">开始时间以及会议的持续时间。</st>'
- en: <st c="14904">Besides these basic blocks, Amazon Lex integrates with other services
    from the AWS landscape, namely Amazon Lambda.</st> <st c="15021">There, you can
    trigger a Lambda function upon achieving a specific state, for example, the fulfillment
    of the intent.</st> <st c="15139">This integration, in the context of this project’s
    scope, will enable you to trigger a Lambda function to store the meeting details</st>
    <st c="15271">collected during the</st> <st c="15291">conversation with the user
    in a data store of</st> <st c="15338">your choice.</st>
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="14904">除了这些基础模块外，Amazon Lex还与AWS生态系统中的其他服务进行集成，尤其是Amazon Lambda。</st>
    <st c="15021">在那里，你可以在达到特定状态时触发Lambda函数，例如，意图的完成。</st> <st c="15139">在本项目的范围内，这种集成将使你能够触发Lambda函数，将会议详情</st>
    <st c="15271">在</st> <st c="15291">与用户对话过程中收集的</st> <st c="15338">信息存储到你选择的数据存储中。</st>
- en: <st c="15350">Coding the solution</st>
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="15350">编码解决方案</st>
- en: <st c="15370">After understanding the architecture and all the AWS services
    that comprise it, now it’s time to implement the solution based on the requirements
    and</st> <st c="15521">technologies selected.</st>
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="15370">在了解了架构和构成该架构的所有AWS服务之后，现在是时候根据所选的需求和</st> <st c="15521">技术实现解决方案了。</st>
- en: <st c="15543">Cloning the project</st>
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="15543">克隆项目</st>
- en: <st c="15563">The first step is to clone</st> <st c="15590">the Git repository
    associated with this book, as mentioned in the</st> *<st c="15657">Technical requirements</st>*
    <st c="15679">section.</st> <st c="15689">If you are following along from the
    previous chapter, you should have it already cloned locally, but if you are just
    starting with this chapter, check whether you can clone it from Git or download
    it as a</st> <st c="15894">ZIP file.</st>
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="15563">第一步是克隆</st> <st c="15590">与本书相关的Git仓库，正如在</st> *<st c="15657">技术要求</st>*
    <st c="15679">部分提到的。</st> <st c="15689">如果你从上一章开始跟随，应该已经将其克隆到本地，但如果你现在才开始本章，检查是否能从Git克隆或下载为</st>
    <st c="15894">ZIP文件。</st>
- en: <st c="15903">Navigate to the</st> `<st c="15920">chapter7/code</st>` <st c="15933">folder,
    and inside you will find</st> <st c="15967">two subfolders:</st>
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="15903">导航到</st> `<st c="15920">chapter7/code</st>` <st c="15933">文件夹，里面你会发现</st>
    <st c="15967">两个子文件夹：</st>
- en: '`<st c="15982">frontend</st>`<st c="15991">: Contains the code for</st> <st
    c="16016">your frontend.</st>'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="15982">frontend</st>`<st c="15991">：包含你的前端代码。</st>'
- en: '`<st c="16030">platform</st>`<st c="16039">: Includes the CloudFormation template
    to deploy the main infrastructure for</st> <st c="16117">your application.</st>'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="16030">platform</st>`<st c="16039">：包括部署应用主基础设施的CloudFormation模板。</st>'
- en: <st c="16134">Solution deployment</st>
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="16134">解决方案部署</st>
- en: <st c="16154">Start by deploying</st> <st c="16174">all your application infrastructure
    through the CloudFormation template found in the</st> `<st c="16259">/platform</st>`
    <st c="16268">folder.</st> *<st c="16277">Table 7.1</st>* <st c="16286">lists
    all the resources created by your template that map to the architecture presented
    in</st> *<st c="16378">Figure 7</st>**<st c="16386">.4</st>*<st c="16388">.</st>
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="16154">首先通过</st> <st c="16174">在</st> `<st c="16259">/platform</st>`
    <st c="16268">文件夹中找到的CloudFormation模板部署你的所有应用基础设施。</st> *<st c="16277">表7.1</st>*
    <st c="16286">列出了模板创建的所有资源，这些资源对应于</st> *<st c="16378">图7</st>**<st c="16386">.4</st>*<st
    c="16388">中展示的架构。</st>
- en: '| **<st c="16389">Template</st>** | **<st c="16398">Ch7-application-template.yaml</st>**
    |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| **<st c="16389">模板</st>** | **<st c="16398">Ch7-application-template.yaml</st>**
    |'
- en: '| --- | --- |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| <st c="16428">Frontend</st> | <st c="16437">CloudFront</st> <st c="16449">and
    S3</st> |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| <st c="16428">前端</st> | <st c="16437">CloudFront</st> <st c="16449">和S3</st>
    |'
- en: '| <st c="16455">Backend</st> | <st c="16463">DynamoDB</st> |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| <st c="16455">后端</st> | <st c="16463">DynamoDB</st> |'
- en: '| <st c="16472">Authentication</st> | <st c="16487">Cognito</st> <st c="16496">User
    Pool</st> |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| <st c="16472">认证</st> | <st c="16487">Cognito</st> <st c="16496">用户池</st>
    |'
- en: '| <st c="16505">Backend</st> | <st c="16513">One HTTP API with</st> <st c="16532">four
    endpoints</st><st c="16546">Four lambda functions, one for</st> <st c="16578">each
    endpoint</st><st c="16591">One Cognito</st> <st c="16604">user pool</st> |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| <st c="16505">后端</st> | <st c="16513">一个HTTP API，具有</st> <st c="16532">四个端点</st><st
    c="16546">四个Lambda函数，每个端点一个</st><st c="16578">一个Cognito</st> <st c="16604">用户池</st>
    |'
- en: '| <st c="16613">Data store</st> | <st c="16624">DynamoDB</st> |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| <st c="16613">数据存储</st> | <st c="16624">DynamoDB</st> |'
- en: '| <st c="16633">Chatbot</st> | <st c="16641">One</st> <st c="16646">Lex Chatbot</st><st
    c="16657">One lambda function to be triggered by</st> <st c="16697">the chatbot</st>
    |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| <st c="16633">聊天机器人</st> | <st c="16641">One</st> <st c="16646">Lex 聊天机器人</st><st
    c="16657">一个由</st> <st c="16697">聊天机器人触发的 Lambda 函数</st> |'
- en: <st c="16708">Table 7.1 – CloudFormation template details</st>
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="16708">表 7.1 – CloudFormation 模板详情</st>
- en: <st c="16752">From the console, go to the CloudFormation service at</st> [<st
    c="16807">https://console.aws.amazon.com/cloudformation/</st>](https://console.aws.amazon.com/cloudformation/)
    <st c="16853">and select the AWS region where you want to host</st> <st c="16903">your
    application.</st>
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="16752">从控制台，前往 CloudFormation 服务，网址为</st> [<st c="16807">https://console.aws.amazon.com/cloudformation/</st>](https://console.aws.amazon.com/cloudformation/)
    <st c="16853">并选择您想要托管</st> <st c="16903">应用程序的 AWS 区域。</st>
- en: <st c="16920">Important note – Choosing the AWS region for this project</st>
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="16920">重要提示 – 为此项目选择 AWS 区域</st>
- en: <st c="16978">Service availability is one of the reasons behind choosing an
    AWS region for your projects.</st> <st c="17071">Amazon Lex, the service you will
    use for your chatbot, is one example of a service that is not available in all
    AWS regions.</st> <st c="17196">Trying to deploy a CloudFormation template in
    a region where Amazon Lex is not available would cause an error.</st> <st c="17307">You
    can see the full list of AWS regions supported</st> <st c="17358">at</st> [<st
    c="17361">https://docs.aws.amazon.com/general/latest/gr/lex.html</st>](https://docs.aws.amazon.com/general/latest/gr/lex.html)<st
    c="17415">.</st>
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="16978">服务可用性是选择 AWS 区域用于项目的原因之一。</st> <st c="17071">您将用于聊天机器人的 Amazon
    Lex 服务就是一个不可在所有 AWS 区域中使用的服务示例。</st> <st c="17196">尝试在没有 Amazon Lex 服务的区域部署 CloudFormation
    模板将导致错误。</st> <st c="17307">您可以在以下链接查看支持的 AWS 区域完整列表：</st> <st c="17358">在</st>
    [<st c="17361">https://docs.aws.amazon.com/general/latest/gr/lex.html</st>](https://docs.aws.amazon.com/general/latest/gr/lex.html)<st
    c="17415">。</st>
- en: <st c="17416">Region selection is available through the drop-down menu located
    in the upper-right corner, as depicted in</st> *<st c="17524">Figure 7</st>**<st
    c="17532">.5</st>*
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="17416">区域选择可以通过位于右上角的下拉菜单完成，如</st> *<st c="17524">图 7</st>**<st c="17532">.5</st>*所示。
- en: '![Figure 7.5 – Console access to CloudFormation and AWS Region dropdown menu](img/B22051_07_5.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.5 – 控制台访问 CloudFormation 和 AWS 区域下拉菜单](img/B22051_07_5.jpg)'
- en: <st c="17745">Figure 7.5 – Console access to CloudFormation and AWS Region dropdown
    menu</st>
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="17745">图 7.5 – 控制台访问 CloudFormation 和 AWS 区域下拉菜单</st>
- en: <st c="17819">To deploy the CloudFormation stack associated with this project,
    follow</st> <st c="17892">these steps:</st>
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="17819">要部署与此项目相关的 CloudFormation 堆栈，请按照以下步骤操作：</st>
- en: <st c="17904">Click</st> <st c="17910">on</st> **<st c="17914">Create Stack</st>**<st
    c="17926">.</st>
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="17904">点击</st> <st c="17910">在</st> **<st c="17914">创建堆栈</st>**<st c="17926">。</st>
- en: <st c="17927">In the</st> **<st c="17935">Prerequisite – Prepare Template</st>**
    <st c="17966">section, select</st> **<st c="17983">Choose an</st>** **<st c="17993">existing
    template</st>**<st c="18010">.</st>
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="17927">在</st> **<st c="17935">前提 – 准备模板</st>** <st c="17966">部分，选择</st>
    **<st c="17983">选择一个</st>** **<st c="17993">现有模板</st>**<st c="18010">。</st>
- en: <st c="18011">In the</st> **<st c="18019">Specify template</st>** <st c="18035">section,
    choose</st> **<st c="18052">Upload a</st>** **<st c="18061">template file</st>**<st
    c="18074">.</st>
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="18011">在</st> **<st c="18019">指定模板</st>** <st c="18035">部分，选择</st> **<st
    c="18052">上传模板文件</st>**<st c="18074">。</st>
- en: <st c="18075">Click on</st> **<st c="18085">Choose file</st>**<st c="18096">.</st>
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="18075">点击</st> **<st c="18085">选择文件</st>**<st c="18096">。</st>
- en: <st c="18097">Select the template from the</st> `<st c="18127">chapter7/code/platform</st>`
    <st c="18149">folder.</st>
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="18097">从</st> `<st c="18127">chapter7/code/platform</st>` <st c="18149">文件夹中选择模板。</st>
- en: <st c="18157">Click</st> **<st c="18164">Next</st>**<st c="18168">.</st>
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="18157">点击</st> **<st c="18164">下一步</st>**<st c="18168">。</st>
- en: <st c="18169">Your</st> **<st c="18175">Create stack</st>** <st c="18187">window
    should look like</st> *<st c="18212">Figure 7</st>**<st c="18220">.6</st>*<st
    c="18222">.</st>
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="18169">您的</st> **<st c="18175">创建堆栈</st>** <st c="18187">窗口应该如下所示</st>
    *<st c="18212">图 7</st>**<st c="18220">.6</st>*<st c="18222">。</st>
- en: '![Figure 7.6 –CloudFormation Create stack form](img/B22051_07_6.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.6 – CloudFormation 创建堆栈表单](img/B22051_07_6.jpg)'
- en: <st c="19321">Figure 7.6 –CloudFormation Create stack form</st>
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="19321">图 7.6 – CloudFormation 创建堆栈表单</st>
- en: <st c="19365">Next, you will be asked</st> <st c="19389">to configure the parameters
    in your CloudFormation stack.</st> <st c="19448">In</st> *<st c="19451">Table
    7.2</st>*<st c="19460">, you can find a detailed explanation of</st> <st c="19501">each
    parameter.</st>
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将被要求配置 CloudFormation 堆栈中的参数。在*表 7.2*中，您可以找到每个参数的详细解释。
- en: '| **<st c="19516">Parameter</st>** | **<st c="19526">Description</st>** |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| **参数** | **描述** |'
- en: '| `<st c="19538">APIName</st>` | <st c="19546">This is the project’s</st> <st
    c="19569">API name.</st> |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| `APIName` | 这是项目的 API 名称。 |'
- en: '| `<st c="19578">UserEmail</st>` | <st c="19588">This is the email address
    you want to associate with your user.</st> <st c="19653">This must be a valid
    email address because you will receive the temporary password and verify</st>
    <st c="19747">it later.</st> |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| `UserEmail` | 这是您希望与用户关联的电子邮件地址。必须是有效的电子邮件地址，因为您稍后将收到临时密码并进行验证。 |'
- en: '| `<st c="19756">UserPoolName</st>` | <st c="19769">This is the name you will
    give to your Cognito</st> <st c="19817">User Pool.</st> |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| `UserPoolName` | 这是您为 Cognito 用户池命名的名称。 |'
- en: '| `<st c="19827">Username</st>` | <st c="19836">Later in your application,
    this is the username you will use to</st> <st c="19901">log in.</st> |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| `用户名` | 在您的应用中，稍后您将使用此用户名进行登录。 |'
- en: <st c="19908">Table 7.2 – CloudFormation template parameters</st>
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 表 7.2 – CloudFormation 模板参数
- en: '*<st c="19955">Figure 7</st>**<st c="19964">.7</st>* <st c="19966">shows an
    example of how your stack configurations should look after filling out all the
    parameters.</st> <st c="20067">The values shown serve as an example; your values</st>
    <st c="20117">may differ.</st>'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7.7* 显示了填写完所有参数后，堆栈配置应呈现的样子。所示的值仅为示例，您的值可能会有所不同。'
- en: '![Figure 7.7 – Stack parameters in CloudFormation](img/B22051_07_7.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.7 – CloudFormation 中的堆栈参数](img/B22051_07_7.jpg)'
- en: <st c="20649">Figure 7.7 – Stack parameters in CloudFormation</st>
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.7 – CloudFormation 中的堆栈参数
- en: <st c="20696">You can click</st> **<st c="20711">Next</st>** <st c="20715">and</st>
    <st c="20720">proceed to the last page, where you will be requested to acknowledge
    the creation of IAM roles.</st> <st c="20816">This notification is related to
    the roles to be created and associated with each of the lambda functions, to provide
    the minimum permissions to interact with the DynamoDB table where the meetings</st>
    <st c="21012">are stored.</st>
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以点击**下一步**，继续到最后一页，系统会要求您确认创建 IAM 角色。此通知与将要创建并与每个 Lambda 函数关联的角色有关，以提供与 DynamoDB
    表进行交互的最小权限，其中存储了会议数据。
- en: <st c="21023">Click</st> **<st c="21030">Submit</st>** <st c="21036">and wait
    until the stack status changes to</st> **<st c="21080">CREATE_COMPLETE</st>**<st
    c="21095">, as depicted in</st> *<st c="21112">Figure 7</st>**<st c="21120">.8</st>*<st
    c="21122">.</st>
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**提交**，然后等待堆栈状态变化为**CREATE_COMPLETE**，如*图 7.8*所示。
- en: '![Figure 7.8 – CloudFormation stack created status](img/B22051_07_8.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.8 – CloudFormation 堆栈创建状态](img/B22051_07_8.jpg)'
- en: <st c="21188">Figure 7.8 – CloudFormation stack created status</st>
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.8 – CloudFormation 堆栈创建状态
- en: <st c="21236">This will mean</st> <st c="21251">that all the resources are provisioned,
    and you can</st> <st c="21304">now proceed.</st>
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着所有资源已经配置完毕，您现在可以继续操作。
- en: <st c="21316">Frontend configuration and deployment</st>
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 前端配置和部署
- en: <st c="21354">Now that all the</st> <st c="21371">necessary AWS services have
    been provisioned, it is time to configure your frontend application and deploy</st>
    <st c="21479">the files.</st>
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在所有必要的 AWS 服务已被配置完毕，是时候配置前端应用并部署文件了。
- en: <st c="21489">Navigate to the</st> `<st c="21506">…/frontend/src/configs</st>`
    <st c="21528">folder, and you will find</st> <st c="21555">two files:</st>
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到`…/frontend/src/configs`文件夹，您将找到两个文件：
- en: '`<st c="21565">aws-exports.ts</st>`<st c="21580">: Configure your application
    authentication, with data from the Cognito User Pool.</st> <st c="21664">This
    file is composed of four</st> <st c="21694">configuration variables:</st>'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="21565">aws-exports.ts</st>`<st c="21580">：使用来自 Cognito 用户池的数据配置您的应用程序认证。</st>
    <st c="21664">该文件由四个</st> <st c="21694">配置变量组成：</st>'
- en: '`<st c="21718">AWS_PROJECT_REGION</st>`<st c="21737">: The region where you
    deployed</st> <st c="21770">your solution</st>'
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="21718">AWS_PROJECT_REGION</st>`<st c="21737">：部署解决方案的区域</st>'
- en: '`<st c="21783">AWS_COGNITO_REGION</st>`<st c="21802">: Your Cognito user Pool
    region (the same as the</st> <st c="21852">previous variable)</st>'
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="21783">AWS_COGNITO_REGION</st>`<st c="21802">：Cognito 用户池的区域（与</st>
    <st c="21852">上一个变量相同）</st>'
- en: '`<st c="21870">AWS_USER_POOLS_ID</st>`<st c="21888">: The ID of your</st> <st
    c="21906">user pool</st>'
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="21870">AWS_USER_POOLS_ID</st>`<st c="21888">：您的用户池的 ID</st>'
- en: '`<st c="21915">AWS_USER_POOLS_WEB_CLIENT_ID</st>`<st c="21944">: The client
    ID of your Cognito User</st> <st c="21982">Pool application</st>'
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="21915">AWS_USER_POOLS_WEB_CLIENT_ID</st>`<st c="21944">：您的 Cognito
    用户池应用程序的客户端 ID</st>'
- en: '`<st c="21998">configs.tsx</st>`<st c="22010">: Define the URL of your API
    to be used in your application.</st> <st c="22072">The</st> `<st c="22076">configs.tsx</st>`
    <st c="22087">file is composed of one</st> <st c="22112">configuration variable:</st>'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="21998">configs.tsx</st>`<st c="22010">：定义应用程序中要使用的 API 的 URL。</st>
    <st c="22072">`configs.tsx` 文件由一个</st> <st c="22087">配置变量组成：</st>'
- en: '`<st c="22135">CONFIG_API_URL</st>`<st c="22150">:</st> <st c="22153">API endpoint</st>'
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="22135">CONFIG_API_URL</st>`<st c="22150">：</st> <st c="22153">API 终端点</st>'
- en: <st c="22165">To simplify the process of obtaining these values, we have already
    included them in the</st> **<st c="22254">Outputs</st>** <st c="22261">section
    of our</st> **<st c="22277">CloudFormation</st>** <st c="22291">template.</st>
    <st c="22302">To access it, follow</st> <st c="22323">these steps:</st>
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="22165">为了简化获取这些值的过程，我们已经将它们包含在我们的</st> **<st c="22254">Outputs</st>**
    <st c="22261">部分中</st> **<st c="22277">CloudFormation</st>** <st c="22291">模板。</st>
    <st c="22302">要访问它，请按照</st> <st c="22323">以下步骤：</st>
- en: <st c="22335">Go to the CloudFormation console</st> <st c="22369">at</st> [<st
    c="22372">https://console.aws.amazon.com/cloudformation/</st>](https://console.aws.amazon.com/cloudformation/)<st
    c="22418">.</st>
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="22335">转到 CloudFormation 控制台</st> <st c="22369">在</st> [<st c="22372">https://console.aws.amazon.com/cloudformation/</st>](https://console.aws.amazon.com/cloudformation/)<st
    c="22418">。</st>
- en: <st c="22419">Click on</st> <st c="22429">your stack.</st>
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="22419">单击</st> <st c="22429">您的堆栈。</st>
- en: <st c="22440">On the right menu, select the</st> **<st c="22471">Outputs</st>**
    <st c="22478">tab, as shown in</st> *<st c="22496">Figure 7</st>**<st c="22504">.9</st>*<st
    c="22506">.</st>
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="22440">在右侧菜单中，选择</st> **<st c="22471">Outputs</st>** <st c="22478">选项卡，如</st>
    *<st c="22496">图 7</st>**<st c="22504">.9</st>*<st c="22506">所示。</st>
- en: '![Figure 7.9 – CloudFormation stack Outputs tab](img/B22051_07_9.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.9 – CloudFormation 堆栈输出选项卡](img/B22051_07_9.jpg)'
- en: <st c="23113">Figure 7.9 – CloudFormation stack Outputs tab</st>
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="23113">图 7.9 – CloudFormation 堆栈输出选项卡</st>
- en: '*<st c="23158">Table 7.3</st>* <st c="23168">maps</st> <st c="23173">the Stack
    outputs with the</st> <st c="23201">configuration files:</st>'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '*<st c="23158">表 7.3</st>* <st c="23168">将</st> <st c="23173">堆栈输出与</st> <st
    c="23201">配置文件进行映射：</st>'
- en: '| **<st c="23221">File</st>** | **<st c="23226">Parameter name</st>** | **<st
    c="23241">Cloudformation</st>** **<st c="23257">stack outputs</st>** |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| **<st c="23221">文件</st>** | **<st c="23226">参数名称</st>** | **<st c="23241">Cloudformation</st>**
    **<st c="23257">堆栈输出</st>** |'
- en: '| `<st c="23270">aws-exports.ts</st>` | `<st c="23285">aws_user_pools_id</st>`
    | `<st c="23303">UserPoolId</st>` |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| `<st c="23270">aws-exports.ts</st>` | `<st c="23285">aws_user_pools_id</st>`
    | `<st c="23303">UserPoolId</st>` |'
- en: '| `<st c="23314">aws_user_pools_web_client_id</st>` | `<st c="23343">ClientId</st>`
    |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| `<st c="23314">aws_user_pools_web_client_id</st>` | `<st c="23343">ClientId</st>`
    |'
- en: '| `<st c="23352">configs.tsx</st>` | `<st c="23364">API_URL</st>` | `<st c="23372">CognitoUserPoolId</st>`
    |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| `<st c="23352">configs.tsx</st>` | `<st c="23364">API_URL</st>` | `<st c="23372">CognitoUserPoolId</st>`
    |'
- en: <st c="23390">Table 7.3 – Mapping between CloudFormation outputs and aws-exports.ts
    parameters</st>
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="23390">表 7.3 – CloudFormation 输出与 aws-exports.ts 参数之间的映射</st>
- en: <st c="23471">4.</st> <st c="23475">Save</st> <st c="23480">the files.</st>
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="23471">4.</st> <st c="23475">保存</st> <st c="23480">文件。</st>
- en: <st c="23490">By the end, your configuration files should look</st> <st c="23540">like
    this:</st>
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="23490">最终，您的配置文件应如下所示：</st>
- en: '**<st c="23550">configs.tsx</st>**'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '**<st c="23550">configs.tsx</st>**'
- en: '[PRE1]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**<st c="23619">aws-exports.tsx</st>**'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '**<st c="23619">aws-exports.tsx</st>**'
- en: '[PRE2]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: <st c="23977">After updating the configuration files, you can begin the</st>
    `<st c="24036">build</st>` <st c="24041">process to convert the code into a web-optimized
    bundle that can be served to browsers.</st> <st c="24130">In our example, we used</st>
    `<st c="24154">npm</st>` <st c="24157">as the package</st> <st c="24172">manager,
    so you’ll need to install the dependencies and start the</st> `<st c="24239">build</st>`
    <st c="24244">process:</st>
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="23977">更新配置文件后，你可以开始</st> `<st c="24036">构建</st>` <st c="24041">过程，将代码转换为可以提供给浏览器的网络优化包。</st>
    <st c="24130">在我们的示例中，我们使用了</st> `<st c="24154">npm</st>` <st c="24157">作为包管理器，因此你需要安装依赖项并启动</st>
    `<st c="24239">构建</st>` <st c="24244">过程：</st>
- en: '[PRE3]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: <st c="24284">Note</st>
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="24284">注意</st>
- en: <st c="24289">The previous command should be executed in the</st> `<st c="24337">root</st>`
    <st c="24341">directory of the</st> `<st c="24359">frontend</st>` <st c="24367">folder.</st>
    <st c="24376">To verify whether you are at the root, use the</st> <st c="24423">following
    command:</st>
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="24289">前面的命令应在</st> `<st c="24337">根</st>` <st c="24341">目录下执行，目录位于</st>
    `<st c="24359">frontend</st>` <st c="24367">文件夹中。</st> <st c="24376">要验证是否在根目录下，请使用以下命令：</st>
- en: '`<st c="24441">$</st>` `<st c="24444">pwd</st>`'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`<st c="24441">$</st>` `<st c="24444">pwd</st>`'
- en: '`<st c="24447">…/</st>``<st c="24449">chapter7/code/frontend</st>`'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`<st c="24447">…/</st>``<st c="24449">chapter7/code/frontend</st>`'
- en: <st c="24472">The</st> `<st c="24477">build</st>` <st c="24482">process generates
    a folder containing the files that need to be uploaded to our S3 buckets.</st>
    <st c="24575">The folder name may vary, but it is typically</st> `<st c="24621">build/</st>`
    <st c="24627">or</st> `<st c="24631">dist/</st>`<st c="24636">, and it is created
    within the</st> `<st c="24667">root</st>` <st c="24671">directory of the</st>
    <st c="24689">frontend application.</st>
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="24472">构建</st> `<st c="24477">过程会生成一个文件夹，其中包含需要上传到我们的 S3 存储桶的文件。</st>
    <st c="24575">文件夹的名称可能不同，但通常为</st> `<st c="24621">build/</st>` <st c="24627">或</st>
    `<st c="24631">dist/</st>`<st c="24636">，并且会在</st> `<st c="24667">根</st>` <st
    c="24671">目录下创建，该目录位于</st> <st c="24689">前端应用程序的根目录中。</st>
- en: <st c="24710">The last step is to copy the build folder to S3, with the</st>
    <st c="24769">following instructions:</st>
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="24710">最后一步是将构建文件夹复制到 S3，按以下说明操作：</st>
- en: <st c="24792">Firstly, you need to locate the S3 bucket that you created earlier
    using the CloudFormation template.</st> <st c="24895">The bucket’s name should
    start with</st> `<st c="24931">frontend-chapter-7-</st>` <st c="24950">followed
    by a random sequence of characters (</st><st c="24996">e.g.,</st> `<st c="25003">frontend-chapter-7-XXXXX</st>`<st
    c="25027">).</st>
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="24792">首先，你需要找到之前使用 CloudFormation 模板创建的 S3 存储桶。</st> <st c="24895">存储桶的名称应以</st>
    `<st c="24931">frontend-chapter-7-</st>` <st c="24950">开头，后跟一串随机字符（</st><st c="24996">例如，</st>
    `<st c="25003">frontend-chapter-7-XXXXX</st>`<st c="25027">）。</st>
- en: <st c="25030">Click on the bucket’s name to</st> <st c="25061">open it.</st>
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="25030">点击存储桶的名称以</st> <st c="25061">打开它。</st>
- en: <st c="25069">Within the S3 bucket, locate and click on the</st> **<st c="25116">Upload</st>**
    <st c="25122">button.</st> <st c="25131">This action will enable you to transfer
    files from your local machine to the</st> <st c="25208">S3 bucket.</st>
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="25069">在 S3 存储桶中，找到并点击</st> **<st c="25116">上传</st>** <st c="25122">按钮。</st>
    <st c="25131">此操作将使你能够将文件从本地机器传输到</st> <st c="25208">S3 存储桶。</st>
- en: <st c="25218">Click on</st> `<st c="25258">dist</st>` <st c="25262">folder on
    your local machine.</st> <st c="25293">Select all the files inside the folder
    and confirm (you should have two files at the root of the</st> `<st c="25390">dist</st>`
    <st c="25394">folder:</st> `<st c="25403">index.html</st>` <st c="25413">and</st>
    `<st c="25418">penguin.png</st>`<st c="25429">).</st>
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="25218">点击</st> `<st c="25258">dist</st>` <st c="25262">文件夹，在你的本地机器上。</st>
    <st c="25293">选择文件夹中的所有文件并确认（你应该在</st> `<st c="25390">dist</st>` <st c="25394">文件夹的根目录下看到两个文件：</st>
    `<st c="25403">index.html</st>` <st c="25413">和</st> `<st c="25418">penguin.png</st>`<st
    c="25429">）。</st>
- en: <st c="25432">Next, click on</st> `<st c="25471">dist</st>` <st c="25475">folder
    on your local machine, select the</st> `<st c="25517">assets</st>` <st c="25523">folder,</st>
    <st c="25532">and confirm.</st>
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="25432">接下来，点击</st> `<st c="25471">dist</st>` <st c="25475">文件夹，在你的本地机器上，选择</st>
    `<st c="25517">assets</st>` <st c="25523">文件夹，</st> <st c="25532">并确认。</st>
- en: <st c="25544">Now your</st> <st c="25554">S3</st> **<st c="25557">Upload</st>**
    <st c="25563">window should look like</st> *<st c="25588">Figure 7</st>**<st c="25596">.10</st>*<st
    c="25599">.</st>
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="25544">现在你的</st> <st c="25554">S3</st> **<st c="25557">上传</st>** <st
    c="25563">窗口应该如下所示：</st> *<st c="25588">图 7</st>**<st c="25596">.10</st>*<st c="25599">。</st>
- en: '![Figure 7.10 – Frontend files uploaded to S3](img/B22051_07_10.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.10 – 上传到 S3 的前端文件](img/B22051_07_10.jpg)'
- en: <st c="25900">Figure 7.10 – Frontend files uploaded to S3</st>
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 7.10 – 上传到 S3 的前端文件**'
- en: <st c="25943">Note that the file names are automatically generated during the
    build process, so the names you see might differ from the ones shown in the preceding
    figure.</st> <st c="26102">However, ensure that you have the</st> <st c="26136">following
    files:</st>
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，文件名是在构建过程中自动生成的，因此您看到的文件名可能与前面图示中显示的不同。**但是，请确保您拥有以下文件：**
- en: '`<st c="26152">i</st>``<st c="26154">ndex.html</st>`'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="26152">i</st>``<st c="26154">ndex.html</st>`'
- en: '`<st c="26163">assets/index-XXXXXX.css</st>`'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="26163">assets/index-XXXXXX.css</st>`'
- en: '`<st c="26187">assets/index-XXXXXX.js</st>`'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="26187">assets/index-XXXXXX.js</st>`'
- en: <st c="26210">Static files you may have included in your application, for</st>
    <st c="26271">example, images</st>
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可能在应用程序中包含的静态文件，例如图像
- en: <st c="26286">Scroll down to the bottom of the page and click</st> <st c="26335">on</st>
    **<st c="26338">Upload</st>**<st c="26344">.</st>
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动到页面底部并点击**Upload**。
- en: <st c="26345">You have now completed the deployment and configuration process
    for your application, and</st> <st c="26435">you can proceed to the</st> <st c="26459">chatbot
    setup.</st>
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已经完成了应用程序的部署和配置过程，可以继续进行**聊天机器人设置**。
- en: <st c="26473">Amazon Lex configuration and build</st>
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**Amazon Lex 配置和构建**'
- en: <st c="26508">You are almost</st> <st c="26524">done, and</st> <st c="26533">the
    only step left is the configuration of your chatbot.</st> <st c="26591">Most of
    the configurations were already performed by the CloudFormation template, and
    you were just left with the lambda function integration to perform the actions
    based on</st> <st c="26765">the conversation.</st>
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经几乎完成，剩下的唯一步骤是配置您的聊天机器人。大部分配置已经通过 CloudFormation 模板完成，您只需进行 lambda 函数集成，以根据**对话**执行相应操作。
- en: <st c="26782">To finalize it, follow</st> <st c="26806">these steps:</st>
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成这一步，请按照以下步骤操作：
- en: <st c="26818">Go to the Amazon Lex console in the region where you deployed
    the CloudFormation stack</st> <st c="26906">at</st> [<st c="26909">https://console.aws.amazon.com/lexv2/home?</st>](https://console.aws.amazon.com/lexv2/home?)<st
    c="26951">.</st>
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到您部署 CloudFormation 堆栈的区域中的 Amazon Lex 控制台，网址为[https://console.aws.amazon.com/lexv2/home?](https://console.aws.amazon.com/lexv2/home?)。
- en: <st c="26952">On the left menu,</st> <st c="26971">select</st> **<st c="26978">Bots</st>**<st
    c="26982">.</st>
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧菜单中，选择**Bots**。
- en: <st c="26983">In the</st> **<st c="26991">Bots</st>** <st c="26995">list, select</st>
    **<st c="27009">MeetyBot</st>**<st c="27017">, as shown in</st> *<st c="27031">Figure
    7</st>**<st c="27039">.11</st>*<st c="27042">.</st>
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Bots**列表中，选择**MeetyBot**，如*图 7.11*所示。
- en: '![Figure 7.11 – Amazon Lex bot selection](img/B22051_07_11.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.11 – 选择 Amazon Lex 机器人](img/B22051_07_11.jpg)'
- en: <st c="27165">Figure 7.11 – Amazon Lex bot selection</st>
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 7.11 – 选择 Amazon Lex 机器人**'
- en: <st c="27203">Under the</st> **<st c="27214">Deployment</st>** <st c="27224">section,
    select</st> **<st c="27241">Aliases</st>** <st c="27248">and click on</st> **<st
    c="27262">TestBotAlias</st>**<st c="27274">, as depicted in</st> *<st c="27291">Figure
    7</st>**<st c="27299">.12</st>*<st c="27302">.</st>
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Deployment**部分，选择**Aliases**，并点击**TestBotAlias**，如*图 7.12*所示。
- en: '![Figure 7.12 – Amazon Lex bot alias section](img/B22051_07_12.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.12 – Amazon Lex 机器人别名部分](img/B22051_07_12.jpg)'
- en: <st c="27746">Figure 7.12 – Amazon Lex bot alias section</st>
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 7.12 – Amazon Lex 机器人别名部分**'
- en: <st c="27788">From the</st> **<st c="27798">Languages</st>** <st c="27807">list,
    select</st> **<st c="27821">English (US)</st>**<st c="27833">.</st>
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**Languages**列表中，选择**English (US)**。
- en: <st c="27834">In the</st> `<st c="27885">bot-function-meety</st>` <st c="27903">as
    the</st> <st c="27910">source, and</st> `<st c="27923">$LATEST</st>` <st c="27930">as</st>
    <st c="27934">the version, as shown in</st> *<st c="27959">Figure 7</st>**<st
    c="27967">.13</st>*<st c="27970">.</st>
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<st c="27885">bot-function-meety</st>` <st c="27903">作为</st> <st c="27910">源，</st>
    `<st c="27923">$LATEST</st>` <st c="27930">作为版本，如</st> *<st c="27959">图 7</st>**<st
    c="27967">.13</st>*<st c="27970">所示。</st>
- en: <st c="27971">Click</st> **<st c="27978">Save</st>**<st c="27982">.</st>
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**<st c="27978">保存</st>**<st c="27982">。</st>
- en: '![Figure 7.13 – Lambda function selection for your chatbot](img/B22051_07_13.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.13 – 选择 Lambda 函数用于您的聊天机器人](img/B22051_07_13.jpg)'
- en: <st c="28194">Figure 7.13 – Lambda function selection for your chatbot</st>
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="28194">图 7.13 – 选择 Lambda 函数用于您的聊天机器人</st>
- en: <st c="28250">The last step is to configure the triggering of the function whenever
    the BookMeeting intent is fulfilled.</st> <st c="28358">For that, do</st> <st
    c="28371">the following:</st>
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="28250">最后一步是配置函数的触发条件，当 BookMeeting 意图完成时触发该函数。</st> <st c="28358">为此，执行以下操作：</st>
- en: <st c="28385">On the left menu, select</st> **<st c="28411">Intents</st>** <st
    c="28418">under the</st> **<st c="28429">English (</st>****<st c="28438">US)</st>**
    <st c="28442">menu.</st>
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="28385">在左侧菜单中，选择**<st c="28411">意图</st>** <st c="28418">在</st> **<st
    c="28429">英语 (</st>**<st c="28438">美国)</st>** <st c="28442">菜单下。</st>
- en: <st c="28448">Click on the</st> **<st c="28462">BookMeeting</st>** <st c="28473">intent.</st>
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="28448">点击**<st c="28462">BookMeeting</st>** <st c="28473">意图。</st>
- en: <st c="28481">Scroll down to the</st> **<st c="28501">Fullfilment</st>** <st
    c="28512">section and click on the toggle button to make it active.</st> <st c="28571">This
    will ensure the lambda function is triggered every time this intent is fulfilled.</st>
    <st c="28658">You can see the expected status in</st> *<st c="28693">Figure 7</st>**<st
    c="28701">.14</st>*<st c="28704">.</st>
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="28481">滚动到**<st c="28501">完成</st>** <st c="28512">部分，并点击切换按钮将其激活。</st>
    <st c="28571">这样可以确保每次此意图被完成时，Lambda 函数都会被触发。</st> <st c="28658">您可以在*<st c="28693">图
    7</st>**<st c="28701">.14</st>*<st c="28704">中看到预期状态。</st>
- en: '![Figure 7.14 – Amazon Lex chatbot – fulfillment configuration](img/B22051_07_14.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.14 – Amazon Lex 聊天机器人 – 完成配置](img/B22051_07_14.jpg)'
- en: <st c="28897">Figure 7.14 – Amazon Lex chatbot – fulfillment configuration</st>
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="28897">图 7.14 – Amazon Lex 聊天机器人 – 完成配置</st>
- en: <st c="28957">Click</st> <st c="28964">on</st> **<st c="28967">Save Intent</st>**
    <st c="28978">in</st> <st c="28981">the</st> <st c="28986">bottom right.</st>
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="28957">点击</st> <st c="28964">**<st c="28967">保存意图</st>**</st> <st c="28978">在右下角。</st>
- en: <st c="28999">Select</st> **<st c="29007">Build</st>** <st c="29012">in the</st>
    <st c="29020">top right.</st>
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**<st c="29007">构建</st>** <st c="29012">在右上角。</st>
- en: <st c="29030">The build process of your chatbot should take around two minutes.</st>
    <st c="29097">Wait until you see a green banner with a success message, as shown
    in</st> *<st c="29167">Figure 7</st>**<st c="29175">.15</st>*<st c="29178">.</st>
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="29030">您的聊天机器人构建过程应该需要大约两分钟。</st> <st c="29097">等待直到您看到绿色横幅和成功消息，如</st>
    *<st c="29167">图 7</st>**<st c="29175">.15</st>*<st c="29178">所示。</st>
- en: '![Figure 7.15 – Success message from the Amazon Lex build process](img/B22051_07_15.jpg)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.15 – 来自 Amazon Lex 构建过程的成功消息](img/B22051_07_15.jpg)'
- en: <st c="29240">Figure 7.15 – Success message from the Amazon Lex build process</st>
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="29240">图 7.15 – 来自 Amazon Lex 构建过程的成功消息</st>
- en: <st c="29303">Congratulations!</st> <st c="29321">You have successfully finished
    the deployment and configuration of your application, and</st> <st c="29410">you
    should now have a fully functional</st> <st c="29449">project.</st> <st c="29458">It
    is time to test</st> <st c="29477">it out!</st>
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="29303">恭喜！</st> <st c="29321">您已经成功完成了应用程序的部署和配置，</st> <st c="29410">现在应该已经拥有一个完全功能的</st>
    <st c="29449">项目。</st> <st c="29458">是时候进行测试了！</st>
- en: <st c="29484">Test and explore your application</st>
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="29484">测试并探索您的应用程序</st>
- en: <st c="29518">By now, everything</st> <st c="29538">should be ready to be tested.</st>
    <st c="29568">To access your application, do</st> <st c="29599">the following:</st>
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="29518">到目前为止，一切</st> <st c="29538">应该已经准备好进行测试。</st> <st c="29568">要访问您的应用程序，请执行</st>
    <st c="29599">以下操作：</st>
- en: <st c="29613">Go to the CloudFront console</st> <st c="29643">at</st> [<st c="29646">https://console.aws.amazon.com/cloudformation/</st>](https://console.aws.amazon.com/cloudformation/)<st
    c="29692">.</st>
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="29613">前往 CloudFront 控制台</st> <st c="29643">在</st> [<st c="29646">https://console.aws.amazon.com/cloudformation/</st>](https://console.aws.amazon.com/cloudformation/)<st
    c="29692">。</st>
- en: <st c="29693">Select the stack you deployed as part of</st> <st c="29735">this
    chapter.</st>
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择你在本章中部署的堆栈。
- en: <st c="29748">Go to the</st> **<st c="29759">Outputs</st>** <st c="29766">tab.</st>
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**输出**选项卡。
- en: <st c="29771">Click on the</st> `<st c="29785">CloudFrontDistributionUrl</st>`
    <st c="29810">value as shown in</st> *<st c="29829">Figure 7</st>**<st c="29837">.16</st>*<st
    c="29840">.</st>
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 `<CloudFrontDistributionUrl>` 值，如*图 7.16*所示。
- en: '![Figure 7.16 – CloudFormation Outputs tab](img/B22051_07_16.jpg)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.16 – CloudFormation 输出选项卡](img/B22051_07_16.jpg)'
- en: <st c="30451">Figure 7.16 – CloudFormation Outputs tab</st>
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.16 – CloudFormation 输出选项卡
- en: <st c="30491">This should redirect you to your application, which is expected
    to be like</st> *<st c="30567">Figure 7</st>**<st c="30575">.17</st>*<st c="30578">.</st>
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会将你重定向到你的应用程序，预计会像*图 7.17*那样。
- en: '![Figure 7.17 – Application homepage](img/B22051_07_17.jpg)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.17 – 应用首页](img/B22051_07_17.jpg)'
- en: <st c="31034">Figure 7.17 – Application homepage</st>
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.17 – 应用首页
- en: <st c="31068">This is the page where users can interact with a chatbot to schedule
    meetings.</st> <st c="31148">By clicking on the chat icon, you will be able to
    initiate</st> <st c="31207">a conversation.</st>
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 这是用户可以与聊天机器人互动以安排会议的页面。通过点击聊天图标，你将能够启动对话。
- en: <st c="31222">As discussed in the</st> *<st c="31243">AWS services</st>* <st
    c="31255">section, utterances are predefined within an intent to help identify
    and understand the</st> <st c="31344">user’s request.</st>
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 如*AWS 服务*部分中讨论的那样，表达式是预定义在意图中的，用于帮助识别和理解用户的请求。
- en: <st c="31359">This chapter’s</st> <st c="31374">CloudFormation template creates
    a chatbot composed of</st> <st c="31429">three intents:</st>
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的 CloudFormation 模板创建了一个由三个意图组成的聊天机器人：
- en: '**<st c="31443">StartMeety</st>**<st c="31454">: This is the first intent responsible
    for the</st> <st c="31502">welcome message</st>'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**StartMeety**：这是第一个负责欢迎消息的意图。'
- en: '**<st c="31517">BookMeeting</st>**<st c="31529">: The intent responsible for
    booking</st> <st c="31567">a meeting</st>'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**BookMeeting**：负责预定会议的意图。'
- en: '**<st c="31576">FallbackIntent</st>**<st c="31591">: Default intent to be triggered
    whenever no other intent can be identified based on the</st> <st c="31681">user
    input</st>'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**FallbackIntent**：当无法基于用户输入识别其他意图时触发的默认意图。'
- en: <st c="31691">Explore and customize your chatbot</st>
  id: totrans-241
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 探索并自定义你的聊天机器人
- en: <st c="31726">To explore the utterances, responses, and logic of each of the
    intents, do</st> <st c="31802">the following:</st>
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看每个意图的表达、响应和逻辑，请执行以下操作：
- en: <st c="31816">Navigate to the Amazon Lex console in the region where you deployed
    the CloudFormation stack</st> <st c="31910">at</st> [<st c="31913">https://console.aws.amazon.com/lexv2/home?</st>](https://console.aws.amazon.com/lexv2/home?)<st
    c="31955">.</st>
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入你部署了 CloudFormation 堆栈的区域的 Amazon Lex 控制台 [https://console.aws.amazon.com/lexv2/home?](https://console.aws.amazon.com/lexv2/home?)。
- en: <st c="31956">On the left menu,</st> <st c="31975">select</st> **<st c="31982">Bots</st>**<st
    c="31986">.</st>
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧菜单中，选择**Bots**。
- en: <st c="31987">Select</st> **<st c="31995">MeetyBot</st>**<st c="32003">.</st>
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**MeetyBot**。
- en: <st c="32004">Under</st> **<st c="32011">English (US)</st>**<st c="32023">,
    click</st> <st c="32031">on</st> **<st c="32034">Intents</st>**<st c="32041">.</st>
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**英语（美国）**下，点击**意图**。
- en: <st c="32042">Your console should look like</st> *<st c="32073">Figure 7</st>**<st
    c="32081">.18</st>*<st c="32084">.</st>
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你的控制台应该像*图 7.18*那样。
- en: '![Figure 7.18 – Amazon Lex Bot Intents section](img/B22051_07_18.jpg)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.18 – Amazon Lex 机器人意图部分](img/B22051_07_18.jpg)'
- en: <st c="32654">Figure 7.18 – Amazon Lex Bot Intents section</st>
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.18 – Amazon Lex 机器人意图部分
- en: <st c="32698">Click on the</st> **<st c="32712">StartMeety</st>** <st c="32722">intent.</st>
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**StartMeety**意图。
- en: <st c="32730">Scroll down</st> <st c="32743">to the</st> **<st c="32750">Sample
    utterances</st>** <st c="32767">section to review the pre-defined utterances for
    this intent, as shown in</st> *<st c="32842">Figure 7</st>**<st c="32850">.19</st>*<st
    c="32853">.</st>
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动到**样本话语**部分，查看该意图的预定义话语，如图*7.19*所示。
- en: '![Figure 7.19 – Amazon Lex chatbot intent sample utterances](img/B22051_07_19.jpg)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.19 – Amazon Lex 聊天机器人意图样本话语](img/B22051_07_19.jpg)'
- en: <st c="33482">Figure 7.19 – Amazon Lex chatbot intent sample utterances</st>
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.19 – Amazon Lex 聊天机器人意图样本话语
- en: <st c="33539">These are currently the ones available to identify the StartMeety
    intent, but feel free to add others or customize the existing one at will.</st>
    <st c="33681">After any change, ensure you save the intent and rebuild the chatbot,
    as described in the</st> <st c="33771">previous section.</st>
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是当前用于识别StartMeety意图的可用话语，但你可以自由添加其他话语或根据需要自定义现有的。更改后，请确保保存该意图并重新构建聊天机器人，正如前一节所述。
- en: <st c="33788">Do the same exercise for the BookMeeting intent.</st> <st c="33838">In
    this case, Amazon Lex expects different utterances, and</st> <st c="33897">unlike
    the StartMeety intent, it also includes five slots as the pieces of data needed
    to fulfils</st> <st c="33995">the intent:</st>
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 对BookMeeting意图执行相同的操作。在这种情况下，Amazon Lex期望不同的样本话语，而且与StartMeety意图不同，它还包括五个槽位，这些是实现该意图所需的数据元素：
- en: '**<st c="34006">FullName</st>**<st c="34015">: The name of</st> <st c="34030">the
    attendee</st>'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**FullName**：与会者的姓名'
- en: '**<st c="34042">MeetingDate</st>**<st c="34054">: The date the user wants</st>
    <st c="34081">to meet</st>'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MeetingDate**：用户希望见面的日期'
- en: '**<st c="34088">MeetingStime</st>**<st c="34101">: The start time of</st> <st
    c="34122">the meeting</st>'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MeetingStime**：会议的开始时间'
- en: '**<st c="34133">MeetingDuration</st>**<st c="34149">: The duration of the meeting,
    which should be either 30 or</st> <st c="34210">60 minutes</st>'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MeetingDuration**：会议的持续时间，应该是30分钟或60分钟'
- en: '**<st c="34220">AttendeeEmail</st>**<st c="34234">: The email the user wants
    to use to</st> <st c="34272">be contacted</st>'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AttendeeEmail**：用户希望用于联系的电子邮件'
- en: <st c="34284">We recommend spending some time exploring each slot and the prompt
    used by the chatbot to request it.</st> <st c="34387">As mentioned earlier, feel
    free to customize the prompts and slots according to</st> <st c="34467">your preference.</st>
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议花一些时间探索每个槽位以及聊天机器人用来请求它们的提示。如前所述，欢迎根据你的偏好自定义提示和槽位。
- en: <st c="34483">After getting familiar with all the configurations of your chatbot,
    you can proceed and start a conversation in your application to book</st> <st
    c="34621">a meeting.</st>
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在熟悉了聊天机器人的所有配置后，你可以继续并在你的应用程序中开始一次对话以预定会议。
- en: <st c="34631">Test your chatbot</st>
  id: totrans-263
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试你的聊天机器人
- en: <st c="34649">With your chatbot and its intents configured, now it is time to
    test its behavior in</st> <st c="34735">your application:</st>
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 配置好你的聊天机器人及其意图后，现在是时候在你的应用程序中测试其行为了：
- en: <st c="34752">Begin by using one of the utterances defined in the StartMeety
    Intent, and take note of the</st> <st c="34845">chatbot’s response.</st>
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从使用在StartMeety意图中定义的某个话语开始，并注意聊天机器人的响应。
- en: '![Figure 7.20 – Initial chatbot response from the StartMeety intent](img/B22051_07_20.jpg)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.20 – 来自StartMeety意图的初始聊天机器人响应](img/B22051_07_20.jpg)'
- en: <st c="34955">Figure 7.20 – Initial chatbot response from the StartMeety intent</st>
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.20 – 来自StartMeety意图的初始聊天机器人响应
- en: <st c="35020">Here, you</st> <st c="35031">can see that, based on the input
    that matches one of the sample utterances of the StartMeety intent, the chatbot
    responded with a welcome message as configured in</st> <st c="35194">the intent.</st>
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到，根据与StartMeety意图的某个样本话语匹配的输入，聊天机器人响应了一个欢迎消息，正如在该意图中配置的那样。
- en: <st c="35205">In this example, you can see that the chatbot identified and acknowledged
    the intent and</st> <st c="35295">replied accordingly.</st>
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，你可以看到聊天机器人识别并确认了该意图，并作出了相应的回复。
- en: <st c="35315">Next, you can respond with one of the utterances defined in the
    BookMeeting intent, so the chatbot can</st> <st c="35419">identify it.</st>
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="35315">接下来，你可以使用 BookMeeting 意图中定义的某个语句进行响应，这样聊天机器人就能</st> <st c="35419">识别该语句。</st>
- en: '![Figure 7.21 – BookMeeting intent conversation flow](img/B22051_07_21.jpg)'
  id: totrans-271
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.21 – BookMeeting 意图对话流程](img/B22051_07_21.jpg)'
- en: <st c="35529">Figure 7.21 – BookMeeting intent conversation flow</st>
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="35529">图 7.21 – BookMeeting 意图对话流程</st>
- en: <st c="35579">The chatbot identified the intent and started asking questions
    to gather the slot values with the</st> <st c="35678">objective of fulfilling
    it.</st> <st c="35706">Note that the chatbot was able to interpret the</st> **<st
    c="35754">tomorrow</st>** <st c="35762">statement based on the</st> <st c="35786">current
    date.</st>
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="35579">聊天机器人识别了意图，并开始提问以收集槽值，目的是</st> <st c="35678">实现该意图。</st> <st c="35706">请注意，聊天机器人能够根据</st>
    **<st c="35754">明天</st>** <st c="35762">的语句推断出</st> <st c="35786">当前日期。</st>
- en: <st c="35799">As part of the BookMeeting intent, your chatbot is configured
    to perform a confirmation before proceeding.</st> <st c="35907">Here, a user can
    either proceed or cancel the request, as shown in</st> *<st c="35974">Figure 7</st>**<st
    c="35982">.22</st>*<st c="35985">.</st>
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="35799">作为 BookMeeting 意图的一部分，你的聊天机器人被配置为在继续之前进行确认。</st> <st c="35907">在此，用户可以选择继续或取消请求，如</st>
    *<st c="35974">图 7</st>**<st c="35982">.22</st>*<st c="35985">所示。</st>
- en: '![Figure 7.22 – Chatbot confirmation prompt](img/B22051_07_22.jpg)'
  id: totrans-275
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.22 – 聊天机器人确认提示](img/B22051_07_22.jpg)'
- en: <st c="36153">Figure 7.22 – Chatbot confirmation prompt</st>
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="36153">图 7.22 – 聊天机器人确认提示</st>
- en: <st c="36194">Upon confirmation, your intent reached the fulfillment state,
    and as per the bot configuration, the</st> `<st c="36295">bot-function-meety lambda</st>`
    <st c="36320">function was triggered.</st> <st c="36345">The lambda function has
    three</st> <st c="36375">main actions:</st>
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="36194">确认后，你的意图达到了实现状态，并且根据机器人配置，</st> `<st c="36295">bot-function-meety
    lambda</st>` <st c="36320">函数被触发。</st> <st c="36345">lambda 函数包含三个</st> <st c="36375">主要操作：</st>
- en: <st c="36388">Evaluate whether there are any previously accepted meetings that
    could conflict with the proposed meeting time, according to the slot</st> <st
    c="36523">values provided.</st>
  id: totrans-278
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="36388">根据提供的槽值，评估是否有任何已接受的会议可能与提议的会议时间发生冲突。</st>
- en: <st c="36539">Create the meeting request and store it in the</st> <st c="36587">DynamoDB
    table.</st>
  id: totrans-279
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="36539">创建会议请求并将其存储在</st> <st c="36587">DynamoDB 表中。</st>
- en: <st c="36602">Respond with a customized message to the end user acknowledging
    the</st> <st c="36671">meeting request.</st>
  id: totrans-280
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="36602">向最终用户发送自定义消息，确认</st> <st c="36671">会议请求。</st>
- en: '![Figure 7.23 – Chatbot final response](img/B22051_07_23.jpg)'
  id: totrans-281
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.23 – 聊天机器人最终响应](img/B22051_07_23.jpg)'
- en: <st c="36844">Figure 7.23 – Chatbot final response</st>
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="36844">图 7.23 – 聊天机器人最终响应</st>
- en: <st c="36880">If you want to</st> <st c="36896">explore the lambda function
    code in detail, follow</st> <st c="36947">these steps:</st>
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="36880">如果你想要</st> <st c="36896">详细查看 lambda 函数代码，请按照</st> <st c="36947">以下步骤进行操作：</st>
- en: <st c="36959">Go to the AWS Lambda console in the region where you deployed
    the CloudFormation stack</st> <st c="37047">at</st> [<st c="37050">https://console.aws.amazon.com/lambda/</st>](https://console.aws.amazon.com/lambda/)<st
    c="37088">.</st>
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="36959">前往你部署 CloudFormation 堆栈的区域中的 AWS Lambda 控制台</st> <st c="37047">，网址为</st>
    [<st c="37050">https://console.aws.amazon.com/lambda/</st>](https://console.aws.amazon.com/lambda/)<st
    c="37088">。</st>
- en: <st c="37089">On the left menu,</st> <st c="37108">select</st> **<st c="37115">Functions</st>**<st
    c="37124">.</st>
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="37089">在左侧菜单中，</st> <st c="37108">选择</st> **<st c="37115">函数</st>**<st
    c="37124">。</st>
- en: <st c="37125">Click on the</st> `<st c="37139">bot-function-meety</st>` <st
    c="37157">function.</st>
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="37125">点击</st> `<st c="37139">bot-function-meety</st>` <st c="37157">函数。</st>
- en: <st c="37167">Scroll down to the</st> **<st c="37187">Code Source</st>** <st
    c="37198">section, and you will find all the code included in this</st> <st c="37256">lambda
    function.</st>
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="37167">向下滚动至</st> **<st c="37187">代码源</st>** <st c="37198">部分，你将找到所有包含在此</st>
    <st c="37256">lambda 函数中的代码。</st>
- en: <st c="37272">You have already examined how a user can initiate meeting requests
    through conversations with your chatbot.</st> <st c="37381">Now, it is time to
    delve into the</st> **<st c="37415">Admin</st>** <st c="37420">page, where you
    can review the accepted meetings in your calendar and manage the pending</st>
    <st c="37510">meeting requests.</st>
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="37272">您已经检查了用户如何通过与您的聊天机器人对话发起会议请求。</st> <st c="37381">现在，是时候深入了解</st>
    **<st c="37415">管理员</st>** <st c="37420">页面，在那里您可以查看日历中的已接受会议并管理待处理的</st> <st
    c="37510">会议请求。</st>
- en: <st c="37527">Manage meeting requests through the admin portal</st>
  id: totrans-289
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="37527">通过管理员门户管理会议请求</st>
- en: <st c="37576">So far, you have tested your chatbot, namely its capabilities
    to handle meeting requests with a human-like conversation, and now you will explore
    how to manage the</st> <st c="37741">requests created.</st>
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="37576">到目前为止，您已经测试了您的聊天机器人，尤其是其通过类人对话处理会议请求的能力，现在您将探索如何管理已创建的</st> <st
    c="37741">请求。</st>
- en: <st c="37758">During the process of deploying your CloudFormation stack, you
    should have received an email like the one in</st> *<st c="37868">Figure 7</st>**<st
    c="37876">.24</st>* <st c="37879">with your username and a temporary password.</st>
    <st c="37925">This will be</st> <st c="37938">needed to finalize the authentication
    process and access the</st> **<st c="37999">Admin</st>** <st c="38004">page.</st>
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="37758">在部署 CloudFormation 堆栈的过程中，您应该已经收到一封类似于</st> *<st c="37868">图 7</st>**<st
    c="37876">.24</st>* <st c="37879">的电子邮件，里面包含了您的用户名和临时密码。</st> <st c="37925">这将用于</st>
    <st c="37938">完成身份验证过程并访问</st> **<st c="37999">管理员</st>** <st c="38004">页面。</st>
- en: '![Figure 7.24 – Email with a temporary password](img/B22051_07_24.jpg)'
  id: totrans-292
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.24 – 带有临时密码的电子邮件](img/B22051_07_24.jpg)'
- en: <st c="38305">Figure 7.24 – Email with a temporary password</st>
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="38305">图 7.24 – 带有临时密码的电子邮件</st>
- en: <st c="38350">To access the admin portal and manage the meeting requests, follow</st>
    <st c="38418">these steps:</st>
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="38350">要访问管理员门户并管理会议请求，请按照以下步骤操作：</st>
- en: <st c="38430">From your application’s homepage, click on</st> **<st c="38474">Sign
    In</st>**<st c="38481">.</st>
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="38430">在您的应用程序主页上，点击</st> **<st c="38474">登录</st>**<st c="38481">。</st>
- en: <st c="38482">Fill out the</st> **<st c="38496">Username</st>** <st c="38504">and</st>
    **<st c="38509">Password</st>** <st c="38517">fields with the values from the
    email you received</st> <st c="38569">and confirm.</st>
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="38482">填写</st> **<st c="38496">用户名</st>** <st c="38504">和</st> **<st
    c="38509">密码</st>** <st c="38517">字段，输入您收到的电子邮件中的值</st> <st c="38569">并确认。</st>
- en: <st c="38581">Set up a new password</st> <st c="38604">and proceed.</st>
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="38581">设置一个新密码</st> <st c="38604">并继续。</st>
- en: <st c="38616">Select your email and click on</st> **<st c="38648">Verify</st>**<st
    c="38654">. You will now receive an email with a</st> <st c="38693">temporary
    code.</st>
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="38616">选择您的电子邮件并点击</st> **<st c="38648">验证</st>**<st c="38654">。您现在将收到一封带有</st>
    <st c="38693">临时代码</st> <st c="38693">的电子邮件。</st>
- en: <st c="38708">Copy the verification code from your email and paste it into the</st>
    <st c="38774">confirmation form.</st>
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="38708">从您的电子邮件中复制验证码并将其粘贴到</st> <st c="38774">确认表单中。</st>
- en: <st c="38792">You have now finalized the authentication setup, and your interface
    should look like</st> *<st c="38878">Figure 7</st>**<st c="38886">.25</st>*<st
    c="38889">.</st>
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="38792">您现在已经完成了身份验证设置，您的界面应如下所示：</st> *<st c="38878">图 7</st>**<st c="38886">.25</st>*<st
    c="38889">。</st>
- en: '![Figure 7.25 – Admin page for managing meeting requests](img/B22051_07_25.jpg)'
  id: totrans-301
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.25 – 管理会议请求的管理员页面](img/B22051_07_25.jpg)'
- en: <st c="39367">Figure 7.25 – Admin page for managing meeting requests</st>
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="39367">图 7.25 – 管理会议请求的管理员页面</st>
- en: <st c="39421">The admin page is</st> <st c="39439">divided into two</st> <st
    c="39457">distinct sections:</st>
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="39421">管理员页面分为两个</st> <st c="39439">不同的部分：</st>
- en: <st c="39475">Meetings calendar, which displays all the</st> <st c="39518">accepted
    meetings.</st>
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="39475">会议日历，显示所有已接受的</st> <st c="39518">会议。</st>
- en: <st c="39536">Pending meetings section, which presents a list of meeting requests
    awaiting</st> <st c="39614">your action.</st>
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="39536">待处理会议部分，展示了等待</st> <st c="39614">您操作的会议请求列表。</st>
- en: <st c="39626">Within the</st> **<st c="39638">Actions</st>** <st c="39645">column,
    you have two buttons available:</st> **<st c="39686">Accept</st>** <st c="39692">and</st>
    **<st c="39697">Reject</st>**<st c="39703">. Clicking the</st> **<st c="39718">Accept</st>**
    <st c="39724">button will update the meeting request’s status to</st> **<st c="39776">Accepted</st>**<st
    c="39784">, while selecting the</st> **<st c="39806">Reject</st>** <st c="39812">button
    will mark it as</st> **<st c="39836">Rejected</st>**<st c="39844">. To observe
    the functionality, try accepting a meeting request and watch it appear in the</st>
    **<st c="39935">Meetings</st>** **<st c="39944">Calendar</st>** <st c="39952">calendar.</st>
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="39626">在</st> **<st c="39638">操作</st>** <st c="39645">列中，你有两个可用按钮：</st>
    **<st c="39686">接受</st>** <st c="39692">和</st> **<st c="39697">拒绝</st>**<st c="39703">。点击</st>
    **<st c="39718">接受</st>** <st c="39724">按钮会将会议请求的状态更新为</st> **<st c="39776">已接受</st>**<st
    c="39784">，而选择</st> **<st c="39806">拒绝</st>** <st c="39812">按钮则会将其标记为</st> **<st
    c="39836">已拒绝</st>**<st c="39844">。为了观察功能，尝试接受一个会议请求，并观看它出现在</st> **<st c="39935">会议</st>**
    **<st c="39944">日历</st>** <st c="39952">中。</st>
- en: <st c="39962">One of the functional requirements stated that you should receive
    a notification when a new meeting request overlaps with a previously accepted
    meeting.</st> <st c="40116">To test this behavior, perform the</st> <st c="40151">following
    steps:</st>
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="39962">一个功能要求是，当新的会议请求与之前接受的会议时间重叠时，你应该收到通知。</st> <st c="40116">要测试这个行为，请执行以下步骤：</st>
- en: <st c="40167">Open a new tab in your browser with the homepage (you can copy
    the URL from the</st> `<st c="40274">/admin</st>`<st c="40280">).</st>
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="40167">在浏览器中打开一个新标签，访问主页（你可以复制来自</st> `<st c="40274">/admin</st>`<st
    c="40280">）的 URL）。</st>
- en: <st c="40283">Attempt to schedule a meeting during the same time slot as an
    already</st> <st c="40354">accepted meeting.</st>
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="40969">尝试在与已接受会议相同的时间段安排一个新会议。</st>
- en: <st c="40371">Refresh the</st> **<st c="40384">Admin</st>** <st c="40389">page
    to display the new</st> <st c="40414">meeting request.</st>
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="40371">刷新</st> **<st c="40384">管理员</st>** <st c="40389">页面以显示新的</st>
    <st c="40414">会议请求。</st>
- en: <st c="40430">You can verify that the new request now displays a warning icon
    and a tooltip indicating that it conflicts with a previously accepted meeting,
    as illustrated in</st> *<st c="40592">Figure 7</st>**<st c="40600">.26</st>*<st
    c="40603">.</st>
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="40430">你可以验证，新请求现在会显示一个警告图标和一个工具提示，表示它与之前接受的会议冲突，如在</st> *<st c="40592">图
    7</st>**<st c="40600">.26</st>*<st c="40603">中所示。</st>
- en: '![Figure 7.26 – Conflicting meeting warning](img/B22051_07_26.jpg)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.26 – 会议冲突警告](img/B22051_07_26.jpg)'
- en: <st c="40744">Figure 7.26 – Conflicting meeting warning</st>
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="40744">图 7.26 – 会议冲突警告</st>
- en: <st c="40785">You now have a fully operational web application with a chatbot
    that can schedule meetings based on a conversation with an end user.</st> <st
    c="40919">Additionally, you can consult a calendar with all</st> <st c="40969">the
    meetings that happened in the past and manage your agenda for the</st> <st c="41039">upcoming
    meetings.</st>
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="40785">现在，你已经有了一个完全可操作的 Web 应用程序，配备了一个能够根据与终端用户对话安排会议的聊天机器人。</st> <st
    c="40919">此外，你还可以查看包含所有过去会议的日历，并管理你即将到来的会议日程。</st>
- en: <st c="41057">Clean up</st>
  id: totrans-315
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="41057">清理</st>
- en: <st c="41066">Aligned with your</st> <st c="41084">non-functional requirements,
    all the components of this architecture benefit from a pay-as-you-go model, meaning
    you pay only for what you use.</st> <st c="41229">Nevertheless, if you leave an
    application running for an extended period, you may incur unnecessary costs.</st>
    <st c="41336">Therefore, it is recommended to clean up your infrastructure when
    it is no longer in use.</st> <st c="41426">Since you deployed the application
    using IaC, the cleanup process is straightforward and involves</st> <st c="41524">two
    steps:</st>
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="41066">符合你的</st> <st c="41084">非功能性要求，架构中的所有组件都采用按需计费模式，这意味着你只需为使用的部分付费。</st>
    <st c="41229">然而，如果你让应用程序长时间运行，可能会产生不必要的费用。</st> <st c="41336">因此，建议在不再使用时清理你的基础设施。</st>
    <st c="41426">由于你是通过基础设施即代码（IaC）部署应用程序的，清理过程十分简单，包含</st> <st c="41524">两个步骤：</st>
- en: <st c="41534">Empty the</st> <st c="41545">S3 bucket:</st>
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="41534">清空</st> <st c="41545">S3 存储桶：</st>
- en: <st c="41555">Go to the S3 console in your</st> <st c="41585">AWS account.</st>
  id: totrans-318
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="41555">进入你的 AWS 账户中的 S3 控制台。</st>
- en: <st c="41597">Select your frontend S3 bucket (the name of the bucket should
    start with</st> `<st c="41671">frontend-chapter-7-</st>`<st c="41690">, followed
    by a</st> <st c="41706">random string).</st>
  id: totrans-319
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="41597">选择你的前端 S3 存储桶（存储桶的名称应以</st> `<st c="41671">frontend-chapter-7-</st>`<st
    c="41690">开头，后跟一个</st> <st c="41706">随机字符串）。</st>
- en: <st c="41721">Click on</st> **<st c="41731">Empty</st>**<st c="41736">; this
    will delete all the content inside</st> <st c="41779">your bucket.</st>
  id: totrans-320
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="41721">点击</st> **<st c="41731">空</st>**<st c="41736">；这将删除你存储桶中的所有内容。</st>
    <st c="41779">内容。</st>
- en: '![Figure 7.27 – Process of emptying an S3 bucket](img/B22051_07_27.jpg)'
  id: totrans-321
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.27 – 清空 S3 存储桶的过程](img/B22051_07_27.jpg)'
- en: <st c="42082">Figure 7.27 – Process of emptying an S3 bucket</st>
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="42082">图 7.27 – 清空 S3 存储桶的过程</st>
- en: <st c="42128">Delete the</st> <st c="42140">CloudFormation stack:</st>
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="42128">删除</st> <st c="42140">CloudFormation 堆栈：</st>
- en: <st c="42161">Navigate to the CloudFormation service console within your AWS
    account, ensuring you are in the same region where the initial deployment</st>
    <st c="42299">took place.</st>
  id: totrans-324
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="42161">在你的 AWS 账户中导航到 CloudFormation 服务控制台，确保你在最初部署时所在的相同区域。</st> <st
    c="42299">区域。</st>
- en: <st c="42310">Select the stack</st> <st c="42328">you created.</st>
  id: totrans-325
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="42310">选择你创建的堆栈。</st> <st c="42328">堆栈。</st>
- en: <st c="42340">Click on</st> **<st c="42350">Delete</st>**<st c="42356">, as
    shown in</st> *<st c="42370">Figure 7</st>**<st c="42378">.28</st>*<st c="42381">.</st>
  id: totrans-326
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="42340">点击</st> **<st c="42350">删除</st>**<st c="42356">，如</st> *<st c="42370">图
    7</st>**<st c="42378">.28</st>*<st c="42381">所示。</st>
- en: '![Figure 7.28 – CloudFormation stack deletion](img/B22051_07_28.jpg)'
  id: totrans-327
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.28 – CloudFormation 堆栈删除](img/B22051_07_28.jpg)'
- en: <st c="42669">Figure 7.28 – CloudFormation stack deletion</st>
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="42669">图 7.28 – CloudFormation 堆栈删除</st>
- en: <st c="42712">With these actions, all the resources created for this chapter
    should</st> <st c="42783">be deleted.</st>
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="42712">通过这些操作，应删除为本章节创建的所有资源。</st> <st c="42783">资源。</st>
- en: <st c="42794">While this project</st> <st c="42813">provides a solid foundation
    for your chatbot application, there are several enhancements and future considerations
    that can further improve its functionality and user experience.</st> <st c="42993">These
    will be presented in the</st> <st c="43024">next section.</st>
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="42794">虽然这个项目</st> <st c="42813">为你的聊天机器人应用程序提供了坚实的基础，但还有一些增强功能和未来的考虑事项，可以进一步提高其功能和用户体验。</st>
    <st c="42993">这些将在</st> <st c="43024">下一部分中介绍。</st>
- en: <st c="43037">Future work</st>
  id: totrans-331
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="43037">未来的工作</st>
- en: <st c="43049">Congratulations on successfully implementing the chatbot application!</st>
    <st c="43120">You have taken a significant step in harnessing the power of AWS
    for building intelligent conversational interfaces, and you now have the baseline
    for incorporating this technology into future projects.</st> <st c="43323">This
    project represents an initial version.</st> <st c="43367">We want to suggest some
    improvements and ideas you can implement to extend it and enrich</st> <st c="43456">your
    chatbot.</st>
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="43049">恭喜你成功实现了聊天机器人应用程序！</st> <st c="43120">你已经迈出了利用 AWS 构建智能对话界面的重要一步，并且现在你拥有了将这项技术融入未来项目的基础。</st>
    <st c="43323">这个项目代表了一个初始版本。</st> <st c="43367">我们希望提出一些改进建议和可以实施的想法，帮助你扩展和丰富</st>
    <st c="43456">你的聊天机器人。</st>
- en: <st c="43469">Extend the actions performed by your chatbot</st>
  id: totrans-333
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="43469">扩展你的聊天机器人执行的操作</st>
- en: <st c="43514">Your current chatbot</st> <st c="43536">can detect conflicts when
    a user attempts to schedule a meeting but consider expanding its capabilities
    by implementing logic to suggest available time slots to the user.</st> <st c="43707">Additionally,
    you could introduce a scheduling window, for instance, from 9 AM to 5 PM, and
    only accept meeting requests within</st> <st c="43835">that timeframe:</st>
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="43514">当前的聊天机器人</st> <st c="43536">能够检测用户尝试安排会议时的冲突，但可以考虑通过实现逻辑来扩展其功能，以向用户建议可用的时间段。</st>
    <st c="43707">此外，你可以引入一个调度窗口，例如从早上 9 点到下午 5 点，只接受该时间段内的会议请求：</st>
- en: '[PRE4]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: <st c="44027">You could improve this function, for example, by including two</st>
    <st c="44091">new arguments:</st>
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="44027">你可以通过包括两个</st> <st c="44091">新参数来改进此功能：</st>
- en: '`<st c="44105">min_time</st>`<st c="44114">: Defined by the admin, the earliest
    time to accept</st> <st c="44167">a meeting.</st>'
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="44105">min_time</st>`<st c="44114">: 由管理员定义，接受会议的最早时间。</st> <st c="44167">会议的时间。</st>'
- en: '`<st c="44177">max_time</st>`<st c="44186">: Defined by the admin, the latest
    time to accept</st> <st c="44237">a meeting.</st>'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="44177">max_time</st>`<st c="44186">: 由管理员定义，接受会议的最晚时间。</st> <st c="44237">会议的时间。</st>'
- en: <st c="44247">Now, inside your function, include the logic to test</st> <st
    c="44301">the following:</st>
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="44247">现在，在您的函数中，包含测试</st> <st c="44301">以下内容的逻辑：</st>
- en: <st c="44315">Whether the meeting’s proposed date is</st> <st c="44355">before</st>
    `<st c="44362">min_time</st>`<st c="44370">.</st>
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="44315">会议提议的日期是否为</st> <st c="44355">之前</st> `<st c="44362">min_time</st>`<st
    c="44370">。</st>
- en: <st c="44371">Whether the meeting’s end date is</st> <st c="44406">after</st>
    `<st c="44412">max_time</st>`<st c="44420">.</st>
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="44371">会议结束日期是否为</st> <st c="44406">之后</st> `<st c="44412">max_time</st>`<st
    c="44420">。</st>
- en: <st c="44421">Whether there is a conflict, and in case there is, query the DynamoDB
    table to get all the meetings happening on the proposed date and implement the
    logic to find an available slot considering the</st> <st c="44619">proposed duration.</st>
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="44421">是否存在冲突，如果存在，请查询 DynamoDB 表以获取在提议日期上发生的所有会议，并实现逻辑以考虑提议的时长查找可用的时段。</st>
- en: <st c="44637">Here is an example of the updated structure for your</st> `<st
    c="44691">check_meeting_slot</st>` <st c="44709">function, which incorporates
    the necessary parameters to extend the logic as</st> <st c="44787">described above:</st>
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="44637">以下是更新后的</st> `<st c="44691">check_meeting_slot</st>` <st c="44709">函数结构示例，它包含了扩展逻辑所需的参数，如上所述：</st>
- en: '[PRE5]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: <st c="44893">Feel free to explore and customize the</st> `<st c="44933">bot-function-meety</st>`
    <st c="44951">lambda function to incorporate these ideas or any other enhancements
    you envision for</st> <st c="45038">your chatbot.</st>
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="44893">随时探索并自定义</st> `<st c="44933">bot-function-meety</st>` <st c="44951">lambda
    函数，以便将这些想法或您设想的任何其他增强功能集成到</st> <st c="45038">您的聊天机器人中。</st>
- en: <st c="45051">Multilingual support</st>
  id: totrans-346
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="45051">多语言支持</st>
- en: <st c="45072">Currently, your</st> <st c="45089">chatbot only supports English,
    but Amazon Lex offers the capability to work with multiple languages.</st> <st
    c="45190">As a future enhancement, you could configure your chatbot to support
    additional languages, making it more accessible to users from different linguistic
    backgrounds.</st> <st c="45355">You can find the instructions on how to implement
    it in the AWS documentation</st> <st c="45433">at</st> [<st c="45436">https://docs.aws.amazon.com/lexv2/latest/dg/add-language.html</st>](https://docs.aws.amazon.com/lexv2/latest/dg/add-language.html)<st
    c="45497">.</st>
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="45072">目前，您的</st> <st c="45089">聊天机器人仅支持英语，但 Amazon Lex 提供了支持多语言的功能。</st>
    <st c="45190">作为未来的增强功能，您可以配置您的聊天机器人支持额外的语言，使其更容易为来自不同语言背景的用户所使用。</st> <st c="45355">您可以在
    AWS 文档中找到如何实现的说明</st> <st c="45433">，网址为</st> [<st c="45436">https://docs.aws.amazon.com/lexv2/latest/dg/add-language.html</st>](https://docs.aws.amazon.com/lexv2/latest/dg/add-language.html)<st
    c="45497">。</st>
- en: <st c="45498">Maintain user profiles for different sessions</st>
  id: totrans-348
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="45498">为不同的会话维护用户档案</st>
- en: <st c="45544">The CloudFormation</st> <st c="45564">deployment included a lambda
    function called</st> `<st c="45609">chatbot-meety</st>`<st c="45622">, which is
    responsible for interacting with your Amazon Lex chatbot by sending user inputs
    and receiving responses.</st> <st c="45738">One of the parameters when interacting
    with Amazon Lex is</st> `<st c="45796">sessionId</st>`<st c="45805">, which helps
    the service identify</st> <st c="45840">different conversations:</st>
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="45544">CloudFormation</st> <st c="45564">部署包括一个名为</st> `<st c="45609">chatbot-meety</st>`<st
    c="45622">的 lambda 函数，负责通过发送用户输入并接收响应与您的 Amazon Lex 聊天机器人进行交互。</st> <st c="45738">与
    Amazon Lex 交互时的参数之一是</st> `<st c="45796">sessionId</st>`<st c="45805">，它帮助服务识别</st>
    <st c="45840">不同的对话：</st>
- en: '[PRE6]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: <st c="46050">Currently, this value is hardcoded.</st> <st c="46087">You can
    see this in the preceding snippet where we used the</st> `<st c="46147">your_session_id</st>`
    <st c="46162">string, meaning there is no way for the chatbot to handle multiple</st>
    <st c="46229">concurrent conversations.</st> <st c="46256">Can you think about
    a strategy to create a unique identifier for</st> <st c="46321">each session?</st>
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="46050">目前，这个值是硬编码的。</st> <st c="46087">您可以在前面的代码片段中看到，我们使用了</st> `<st
    c="46147">your_session_id</st>` <st c="46162">字符串，这意味着聊天机器人无法处理多个</st> <st c="46229">并发对话。</st>
    <st c="46256">您能想到一个为</st> <st c="46321">每个会话创建唯一标识符的策略吗？</st>
- en: <st c="46334">Summary</st>
  id: totrans-352
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="46334">总结</st>
- en: <st c="46342">In this chapter, you embarked on a journey to develop an intelligent
    chatbot application that streamlines the meeting scheduling process.</st> <st
    c="46481">By leveraging the power of AWS services such as Amazon Lex, Lambda,
    API Gateway, and DynamoDB, you created a seamless, conversational experience that
    automates the entire meeting scheduling workflow.</st> <st c="46681">Specifically,
    in the chatbot development, you explored the intricacies of Amazon Lex, including
    intents, utterances, and slots, and learned how to customize and extend the chatbot’s
    capabilities.</st> <st c="46877">Overall, and in the previous three chapters,
    you have gained knowledge in the AI field and how to adopt these technologies
    with</st> <st c="47005">AWS services.</st>
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: <st c="47018">In the next chapter, you will explore the business intelligence
    domain and learn how to analyze</st> <st c="47115">clickstream data.</st>
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL

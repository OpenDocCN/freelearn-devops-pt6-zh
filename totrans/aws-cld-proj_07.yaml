- en: <st c="0">7</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2">Implementing a Chatbot Using Machine Learning</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="47">In the previous chapters, you already had the opportunity to experiment
    and familiarize yourself with</st> **<st c="150">Artificial Intelligence</st>**
    <st c="173">(</st>**<st c="175">AI</st>**<st c="177">) technologies for different
    domains.</st> <st c="216">Starting with computer vision</st> <st c="245">by analyzing
    your photos to the automation of text translation, you should, by now, have two
    fully functional projects that demonstrate the power of AI in modern applications,
    but that is just the tip of</st> <st c="450">the iceberg.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="462">In today’s digital landscape, users increasingly look for engaging
    and interactive experiences within applications, and chatbots have emerged as
    a powerful way to fulfill this demand, leveraging</st> **<st c="658">Natural Language
    Processing</st>** <st c="685">(</st>**<st c="687">NLP</st>**<st c="690">) and</st>
    <st c="697">conversational AI to provide personalized, real-time assistance and
    foster a sense of</st> <st c="783">human-like interaction.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="806">In summary, this chapter covers the following topics,</st> <st c="861">in
    order:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="870">What you are going to build – a chatbot application for</st> <st
    c="927">scheduling meetings</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="946">How you are going to build it – using</st> <st c="985">Amazon Lex</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="995">Building it – through CloudFormation and using the</st> <st c="1047">AWS
    console</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1058">How to improve the solution – extend your chatbot with additional
    features from</st> <st c="1139">Amazon Lex</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1149">Throughout this chapter, you will improve your knowledge of AI
    technologies and explore the use case of developing a chatbot to help schedule
    meetings without any human interaction.</st> <st c="1332">By the end of the chapter,
    you will understand how Amazon Lex works and, more importantly, how to incorporate
    a chatbot into your</st> <st c="1462">own projects.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1475">Technical requirements</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="1498">To set up your own chatbot application, you will require access
    to an AWS account.</st> <st c="1582">This book has a dedicated folder within its
    GitHub repository where you can find the necessary code snippets to follow</st>
    <st c="1701">along:</st> [<st c="1708">https://github.com/PacktPublishing/AWS-Cloud-Projects/tree/main/chapter7/code</st>](https://github.com/PacktPublishing/AWS-Cloud-Projects/tree/main/chapter7/code)<st
    c="1785">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1786">Scenario</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="1795">After successfully</st> <st c="1815">building and deploying several
    applications leveraging cloud and serverless technologies, you have become proficient
    in these modern architectures.</st> <st c="1963">However, one area that still
    demands critical time and effort is scheduling meetings.</st> <st c="2049">On
    average, you need three or more interactions to coordinate availability, discuss
    agenda items, and finalize logistics for each meeting.</st> <st c="2188">This
    back-and-forth communication can be tedious and time-consuming, often distracting
    you from more</st> <st c="2289">important tasks.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2305">While exploring ways to optimize and accelerate these repetitive
    processes, you stumble upon the concept of chatbots.</st> <st c="2424">With your
    growing interest in AI and its practical applications, you realize that chatbots
    could be more than just conversational interfaces – they could potentially handle
    specific actions and</st> <st c="2618">automate workflows.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2637">The idea of creating a chatbot to streamline the meeting scheduling
    process piques your interest.</st> <st c="2736">By leveraging NLP and conversational
    AI, a well-designed chatbot could understand meeting-related requests and automatically
    create the</st> <st c="2872">meeting requests.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="2889">Excited by the potential efficiency gains and the opportunity
    to apply your AI knowledge, you decide to embark on a new project: developing
    an intelligent chatbot application to change the way you schedule meetings.</st>
    <st c="3106">With the right combination of cloud technologies, serverless architectures,
    and AI capabilities, you aim to create a seamless, conversational experience that
    can automate the entire meeting scheduling process, freeing up valuable time and
    allowing you to focus on more</st> <st c="3375">strategic tasks.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3391">Requirements</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="3404">Now you will start by gathering the requirements for this project.</st>
    <st c="3472">This exercise, aligned with what you’ve done so far for the previous
    chapters, will help you design your application and define the technical choices
    for</st> <st c="3626">the implementation.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3645">Gathering requirements implies understanding the profiles that
    will be interacting with your application, the actions they will perform, and
    any constraints you may have from a technical and</st> <st c="3837">functional
    standpoint.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3859">Overall, you still want to serve two different personas interacting
    with</st> <st c="3933">your application:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="3950">End user/meeting requester</st>**<st c="3977">: Part of the
    platform that is publicly accessible with a chatbot to help</st> <st c="4052">schedule
    meetings.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="4070">Admin/meeting owner</st>**<st c="4090">: Manage meeting requests
    with a calendar view of the</st> <st c="4145">accepted meetings.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="4163">These requirements can be translated into functional, non-functional,
    and</st> <st c="4238">data requirements.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4256">Functional requirements</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="4280">With your</st> <st c="4291">applications’ personas well defined,
    you can break down the functional requirements per</st> <st c="4379">user type:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="4389">Meeting requester</st>**<st c="4407">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="4409">Applications should be publicly available and not</st> <st c="4459">require
    authentication.</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="4482">Responsive so anyone can interact with your application over</st>
    <st c="4544">any device.</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="4555">Your chatbot should be able to handle small typos in</st> <st c="4609">the
    inputs.</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="4620">Ability to understand descriptive dates such as “tomorrow” or “</st><st
    c="4684">next Monday”.</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="4698">Meeting owner</st>**<st c="4712">:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="4714">List pending meeting requests, and the ability to approve or</st>
    <st c="4775">reject them.</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="4787">Include a calendar with all the approved meetings where the admin</st>
    <st c="4854">can navigate.</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="4867">The calendar should support different views by day, week,</st>
    <st c="4926">and month.</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="4936">The admin page should only be available</st> <st c="4977">through
    authentication.</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="5000">Conflicting meetings should not be rejected by the chatbot; if
    the proposed slot is already taken, the application should include a warning sign
    associated with the</st> <st c="5166">meeting request.</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '<st c="5182">While listing the primary functionalities or capabilities is an
    effective approach to defining functional requirements, complementing them with
    visual representations can significantly enhance value and accelerate the development
    process.</st> <st c="5422">With this in mind, you have created two simple mockups:
    one for the end user interface and another for the admin</st> <st c="5535">interface,
    as depicted in</st> *<st c="5561">Figures 7.1</st>* <st c="5572">and</st> *<st
    c="5577">7.2</st>*<st c="5580">, respectively:</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="5595">/home</st>** <st c="5601">looks</st> <st c="5608">like this:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 7.1 – UI mockup of the user page](img/B22051_07_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="5672">Figure 7.1 – UI mockup of the user page</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="5711">/admin</st>** <st c="5718">looks</st> <st c="5725">like this:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 7.2 – UI mockup of the admin page](img/B22051_07_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="5894">Figure 7.2 – UI mockup of the admin page</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5934">Non-functional requirements</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="5962">Based on your</st> <st c="5977">research, you found that conversational
    AI is a hot topic nowadays due to the emergence of generative AI technologies
    and large language models specialized in</st> <st c="6136">chatbot development.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6156">For this first project, you want to start with a simple solution
    by adopting a managed service that is easily configurable and requires the least
    amount of</st> <st c="6313">maintenance effort.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6332">Moreover, you want to keep this solution as optimized as possible
    from a cost standpoint and, whenever possible, adopt serverless technologies to
    leverage a pure</st> <st c="6495">pay-as-you-go model.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6515">Data requirements</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="6533">Your application’s</st> <st c="6553">purpose is to store and manage
    meetings.</st> <st c="6594">It is crucial to review the operations you want to
    perform to help you define the right data structure.</st> <st c="6698">Let’s start
    with the operations you want to perform over the</st> <st c="6759">meeting requests:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="6776">Create a meeting</st>**<st c="6793">: Create a</st> <st c="6805">new
    meeting.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="6817">Get pending meeting requests</st>**<st c="6846">: Show a list
    of the meeting requests with a</st> **<st c="6892">Pending</st>** <st c="6899">status
    to either accept or reject, with a warning for</st> <st c="6954">overlapping requests.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="6975">Change meeting status</st>**<st c="6997">: Change the status
    of a pending meeting to accepted</st> <st c="7051">or rejected.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="7063">Check approved meetings within a time window</st>**<st c="7108">:
    The ability to get a list of the approved meetings to include in</st> <st c="7176">your
    calendar.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="7190">Considering the</st> <st c="7206">operations listed, a meeting
    can be described</st> <st c="7253">as</st> `<st c="7256">meeting_example.json</st>`<st
    c="7276">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: <st c="7686">There is no relationship between meetings, and you do not foresee
    any need to run complex queries, so you want to adopt a high-performing, serverless
    data service that supports the</st> <st c="7867">execution of all the</st> <st
    c="7889">enumerated actions.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7908">Architecture patterns</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="7930">AI solutions have</st> <st c="7948">the potential to bring significant
    value to businesses across various industries, but often, finding the resources
    to plan them from scratch can be time-consuming, expensive, and complex.</st>
    <st c="8137">As part of the AWS Solutions Library, AWS has a dedicated section
    called</st> **<st c="8210">Solutions for Artificial Intelligence</st>** <st c="8247">(</st>[<st
    c="8249">https://aws.amazon.com/solutions/ai/</st>](https://aws.amazon.com/solutions/ai/)<st
    c="8285">), with a curated set</st> <st c="8308">of architectures that can help
    you accelerate AI adoption and decrease the time to embed it in your current products.</st>
    <st c="8426">These solutions belong to different domains, ranging from predictive
    analytics and computer vision to personalization and recommendation, among others.</st>
    <st c="8578">This is always a good place to start when thinking about an AI project</st>
    <st c="8649">in AWS.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8656">More specifically, there is a subsection</st> <st c="8698">called</st>
    **<st c="8705">Chatbots & Virtual Assistants</st>** <st c="8734">(</st>[<st c="8736">https://aws.amazon.com/solutions/ai/chatbots-virtual-assistants/</st>](https://aws.amazon.com/solutions/ai/chatbots-virtual-assistants/)<st
    c="8800">).</st> <st c="8804">It is part of the language understanding domain,
    which can be a good baseline for</st> <st c="8886">this project.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8899">Architecture</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="8912">To architect your</st> <st c="8930">applications, it is key to
    define the building blocks that compose them.</st> <st c="9004">Starting from
    the higher level, you defined a layered approach composed of</st> <st c="9079">four
    layers:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="9091">Presentation layer</st>**<st c="9110">: How to host and serve</st>
    <st c="9135">your frontend</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="9148">Compute layer</st>**<st c="9162">: How to incorporate and execute</st>
    <st c="9196">business logic</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="9210">Data layer</st>**<st c="9221">: Where to store and retrieve</st>
    <st c="9252">your data</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="9261">Chatbot layer</st>**<st c="9275">: Layer responsible for developing</st>
    <st c="9311">your chatbot</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="9323">For the presentation layer, you decided to adopt a similar strategy
    to the one you used in the previous chapter and develop a single-page application
    in React.</st> <st c="9484">For your compute layer, you started by designing the
    API that will be the interface between your frontend and the business logic included
    in your compute layer.</st> <st c="9645">Considering your functional requirements,
    you listed the various actions to be performed and structured your API as represented
    in</st> *<st c="9776">Figure 7</st>**<st c="9784">.3</st>*<st c="9786">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="9788">GET /meetings</st>**<st c="9801">: Get the list of approved
    meetings within a</st> <st c="9847">time window</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="9858">GET /pending</st>**<st c="9871">: Get the list of pending</st>
    <st c="9898">meeting requests</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="9914">POST /chatbot</st>**<st c="9928">: Interact with the chatbot
    by sending the</st> <st c="9972">user prompts</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="9984">PUT /status</st>**<st c="9996">: Change the status of a meeting
    request to approved</st> <st c="10050">or rejected</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 7.3 – API structure](img/B22051_07_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="10107">Figure 7.3 – API structure</st>
  prefs: []
  type: TYPE_NORMAL
- en: '*<st c="10133">Figure 7</st>**<st c="10142">.4</st>* <st c="10144">illustrates</st>
    <st c="10156">the architecture you will implement based on all</st> <st c="10206">the
    requirements.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.4 – AWS architecture for your chatbot application](img/B22051_07_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="10469">Figure 7.4 – AWS architecture for your chatbot application</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10527">The frontend will be hosted and served through a combination of
    S3 and CloudFront services.</st> <st c="10620">For the API, you will leverage
    Amazon API Gateway HTTP API with endpoints that map the actions</st> <st c="10715">you
    have listed.</st> <st c="10732">After reviewing the data requirements, you have
    chosen DynamoDB as your data store.</st> <st c="10816">The last component is the
    chatbot, and after conducting research, you have selected Amazon Lex as a managed
    solution due to its cost-effectiveness, simplicity, and overall integration with
    other AWS services such as Lambda functions, allowing you to extend your chatbot’s
    capabilities and perform actions on</st> <st c="11124">your behalf.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11136">Each of the services mentioned and the main advantages and reasons
    for these choices will be</st> <st c="11230">described next.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11245">AWS services</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="11258">Selecting from</st> <st c="11274">the extensive range of available
    services can be a daunting task, and a thorough understanding of the requirements
    is crucial for making an informed decision.</st> <st c="11433">Some of the services
    have already been covered in previous chapters, so to avoid redundancy, we will
    only highlight the advantages specific to the current use case if they have not
    been previously mentioned and provide references to the relevant chapters where
    you can find</st> <st c="11707">detailed explanations.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11729">Amazon CloudFront and Amazon Simple Storage Service (S3)</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="11786">We have</st> <st c="11795">extensively</st> <st c="11806">covered
    Amazon</st> <st c="11822">S3 and Amazon</st> <st c="11835">CloudFront for hosting
    a single-page application frontend.</st> <st c="11895">These two AWS services
    played a crucial role in the previous projects mentioned, and if you want to review
    them, we recommend checking</st> *<st c="12030">Chapters 2</st>* <st c="12040">and</st>
    *<st c="12045">3</st>*<st c="12046">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12047">Amazon DynamoDB</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="12063">Amazon</st> <st c="12071">DynamoDB was introduced in</st> [*<st
    c="12098">Chapter 3</st>*](B22051_03.xhtml#_idTextAnchor054) <st c="12107">as
    part</st> <st c="12116">of the first version of the recipe-sharing application.</st>
    <st c="12172">If you are not familiar with the service and its purpose, we recommend
    reviewing</st> [*<st c="12253">Chapter 3</st>*](B22051_03.xhtml#_idTextAnchor054)<st
    c="12262">’s</st> *<st c="12266">AWS</st>* *<st c="12270">services</st>* <st c="12278">section.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12287">Amazon Cognito, Amazon API Gateway, and Amazon Lambda</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="12341">Amazon API</st> <st c="12353">Gateway</st> <st c="12361">has been</st>
    <st c="12370">used</st> <st c="12375">for the</st> <st c="12383">API</st> <st
    c="12386">layer, Amazon Lambda for the compute layer, and Amazon Cognito for authentication
    in previous projects due to their seamless integration.</st> <st c="12525">If
    you wish to explore any of these services in depth, detailed explanations are
    provided in</st> [*<st c="12618">Chapter 4</st>*](B22051_04.xhtml#_idTextAnchor089)<st
    c="12627">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12628">Amazon Lex</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="12639">Amazon Lex</st> <st c="12650">is an</st> <st c="12657">AWS service
    that makes it easy to build conversational interfaces, called chatbots or virtual
    assistants.</st> <st c="12763">As part of the AWS AI services, Amazon Lex simplifies
    and streamlines the creation of applications where users can communicate through
    voice or text, understand their intents, respond in a natural and human way and,
    most importantly, perform actions as responses to users’ requests.</st> <st c="13046">Being
    a managed service, with Amazon Lex, you do not need to manage any infrastructure,
    and therefore, you do not have to pay for any</st> <st c="13180">unused capacity.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="13196">With Amazon Lex, you can leverage more than 25 languages and locales,
    at the time of this writing, which</st> <st c="13302">makes it easier to build
    versatile chatbots that can serve users across</st> <st c="13374">the world.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="13384">Amazon Lex has some basic concepts associated that are important
    to familiarize yourself with before configuring</st> <st c="13498">your chatbot:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="13935">AMAZON.FallbackIntent</st>`<st c="13956">, which is used whenever
    no other intent can</st> <st c="14001">be identified.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="14015">Utterances</st>**<st c="14026">: These are one or more sentences
    you need to provide when configuring each intent, which the chatbot will use to
    identify the intent based on the user input.</st> <st c="14186">For example, following
    the case of this chapter, the utterances associated with the Book Meetings intent
    could be</st> <st c="14300">as follows:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="14311">“I want to book</st> <st c="14328">a meeting”</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="14338">“Help me book</st> <st c="14353">a meeting”</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="14363">Slots</st>**<st c="14369">: Slots are pieces of information
    that Amazon Lex needs to gather from the user to successfully fulfill an intent.</st>
    <st c="14485">Each slot is associated with a slot type, which defines the kind
    of data expected for that slot.</st> <st c="14582">AWS already provides built-in
    slot types such as numbers or dates, but you can extend it by creating custom
    slot types.</st> <st c="14702">Following the example of this chapter, examples
    of slots could be any information needed to schedule a meeting, such as the attendee’s
    name, the date, the</st> <st c="14856">time to start, and the duration of</st>
    <st c="14892">the meeting.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="14904">Besides these basic blocks, Amazon Lex integrates with other services
    from the AWS landscape, namely Amazon Lambda.</st> <st c="15021">There, you can
    trigger a Lambda function upon achieving a specific state, for example, the fulfillment
    of the intent.</st> <st c="15139">This integration, in the context of this project’s
    scope, will enable you to trigger a Lambda function to store the meeting details</st>
    <st c="15271">collected during the</st> <st c="15291">conversation with the user
    in a data store of</st> <st c="15338">your choice.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15350">Coding the solution</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="15370">After understanding the architecture and all the AWS services
    that comprise it, now it’s time to implement the solution based on the requirements
    and</st> <st c="15521">technologies selected.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15543">Cloning the project</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="15563">The first step is to clone</st> <st c="15590">the Git repository
    associated with this book, as mentioned in the</st> *<st c="15657">Technical requirements</st>*
    <st c="15679">section.</st> <st c="15689">If you are following along from the
    previous chapter, you should have it already cloned locally, but if you are just
    starting with this chapter, check whether you can clone it from Git or download
    it as a</st> <st c="15894">ZIP file.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15903">Navigate to the</st> `<st c="15920">chapter7/code</st>` <st c="15933">folder,
    and inside you will find</st> <st c="15967">two subfolders:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="15982">frontend</st>`<st c="15991">: Contains the code for</st> <st
    c="16016">your frontend.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="16030">platform</st>`<st c="16039">: Includes the CloudFormation template
    to deploy the main infrastructure for</st> <st c="16117">your application.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="16134">Solution deployment</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="16154">Start by deploying</st> <st c="16174">all your application infrastructure
    through the CloudFormation template found in the</st> `<st c="16259">/platform</st>`
    <st c="16268">folder.</st> *<st c="16277">Table 7.1</st>* <st c="16286">lists
    all the resources created by your template that map to the architecture presented
    in</st> *<st c="16378">Figure 7</st>**<st c="16386">.4</st>*<st c="16388">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '| **<st c="16389">Template</st>** | **<st c="16398">Ch7-application-template.yaml</st>**
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="16428">Frontend</st> | <st c="16437">CloudFront</st> <st c="16449">and
    S3</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="16455">Backend</st> | <st c="16463">DynamoDB</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="16472">Authentication</st> | <st c="16487">Cognito</st> <st c="16496">User
    Pool</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="16505">Backend</st> | <st c="16513">One HTTP API with</st> <st c="16532">four
    endpoints</st><st c="16546">Four lambda functions, one for</st> <st c="16578">each
    endpoint</st><st c="16591">One Cognito</st> <st c="16604">user pool</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="16613">Data store</st> | <st c="16624">DynamoDB</st> |'
  prefs: []
  type: TYPE_TB
- en: '| <st c="16633">Chatbot</st> | <st c="16641">One</st> <st c="16646">Lex Chatbot</st><st
    c="16657">One lambda function to be triggered by</st> <st c="16697">the chatbot</st>
    |'
  prefs: []
  type: TYPE_TB
- en: <st c="16708">Table 7.1 – CloudFormation template details</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16752">From the console, go to the CloudFormation service at</st> [<st
    c="16807">https://console.aws.amazon.com/cloudformation/</st>](https://console.aws.amazon.com/cloudformation/)
    <st c="16853">and select the AWS region where you want to host</st> <st c="16903">your
    application.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16920">Important note – Choosing the AWS region for this project</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16978">Service availability is one of the reasons behind choosing an
    AWS region for your projects.</st> <st c="17071">Amazon Lex, the service you will
    use for your chatbot, is one example of a service that is not available in all
    AWS regions.</st> <st c="17196">Trying to deploy a CloudFormation template in
    a region where Amazon Lex is not available would cause an error.</st> <st c="17307">You
    can see the full list of AWS regions supported</st> <st c="17358">at</st> [<st
    c="17361">https://docs.aws.amazon.com/general/latest/gr/lex.html</st>](https://docs.aws.amazon.com/general/latest/gr/lex.html)<st
    c="17415">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17416">Region selection is available through the drop-down menu located
    in the upper-right corner, as depicted in</st> *<st c="17524">Figure 7</st>**<st
    c="17532">.5</st>*
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.5 – Console access to CloudFormation and AWS Region dropdown menu](img/B22051_07_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="17745">Figure 7.5 – Console access to CloudFormation and AWS Region dropdown
    menu</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17819">To deploy the CloudFormation stack associated with this project,
    follow</st> <st c="17892">these steps:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17904">Click</st> <st c="17910">on</st> **<st c="17914">Create Stack</st>**<st
    c="17926">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="17927">In the</st> **<st c="17935">Prerequisite – Prepare Template</st>**
    <st c="17966">section, select</st> **<st c="17983">Choose an</st>** **<st c="17993">existing
    template</st>**<st c="18010">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="18011">In the</st> **<st c="18019">Specify template</st>** <st c="18035">section,
    choose</st> **<st c="18052">Upload a</st>** **<st c="18061">template file</st>**<st
    c="18074">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="18075">Click on</st> **<st c="18085">Choose file</st>**<st c="18096">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="18097">Select the template from the</st> `<st c="18127">chapter7/code/platform</st>`
    <st c="18149">folder.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="18157">Click</st> **<st c="18164">Next</st>**<st c="18168">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="18169">Your</st> **<st c="18175">Create stack</st>** <st c="18187">window
    should look like</st> *<st c="18212">Figure 7</st>**<st c="18220">.6</st>*<st
    c="18222">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.6 –CloudFormation Create stack form](img/B22051_07_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="19321">Figure 7.6 –CloudFormation Create stack form</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19365">Next, you will be asked</st> <st c="19389">to configure the parameters
    in your CloudFormation stack.</st> <st c="19448">In</st> *<st c="19451">Table
    7.2</st>*<st c="19460">, you can find a detailed explanation of</st> <st c="19501">each
    parameter.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '| **<st c="19516">Parameter</st>** | **<st c="19526">Description</st>** |'
  prefs: []
  type: TYPE_TB
- en: '| `<st c="19538">APIName</st>` | <st c="19546">This is the project’s</st> <st
    c="19569">API name.</st> |'
  prefs: []
  type: TYPE_TB
- en: '| `<st c="19578">UserEmail</st>` | <st c="19588">This is the email address
    you want to associate with your user.</st> <st c="19653">This must be a valid
    email address because you will receive the temporary password and verify</st>
    <st c="19747">it later.</st> |'
  prefs: []
  type: TYPE_TB
- en: '| `<st c="19756">UserPoolName</st>` | <st c="19769">This is the name you will
    give to your Cognito</st> <st c="19817">User Pool.</st> |'
  prefs: []
  type: TYPE_TB
- en: '| `<st c="19827">Username</st>` | <st c="19836">Later in your application,
    this is the username you will use to</st> <st c="19901">log in.</st> |'
  prefs: []
  type: TYPE_TB
- en: <st c="19908">Table 7.2 – CloudFormation template parameters</st>
  prefs: []
  type: TYPE_NORMAL
- en: '*<st c="19955">Figure 7</st>**<st c="19964">.7</st>* <st c="19966">shows an
    example of how your stack configurations should look after filling out all the
    parameters.</st> <st c="20067">The values shown serve as an example; your values</st>
    <st c="20117">may differ.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.7 – Stack parameters in CloudFormation](img/B22051_07_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="20649">Figure 7.7 – Stack parameters in CloudFormation</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20696">You can click</st> **<st c="20711">Next</st>** <st c="20715">and</st>
    <st c="20720">proceed to the last page, where you will be requested to acknowledge
    the creation of IAM roles.</st> <st c="20816">This notification is related to
    the roles to be created and associated with each of the lambda functions, to provide
    the minimum permissions to interact with the DynamoDB table where the meetings</st>
    <st c="21012">are stored.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21023">Click</st> **<st c="21030">Submit</st>** <st c="21036">and wait
    until the stack status changes to</st> **<st c="21080">CREATE_COMPLETE</st>**<st
    c="21095">, as depicted in</st> *<st c="21112">Figure 7</st>**<st c="21120">.8</st>*<st
    c="21122">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.8 – CloudFormation stack created status](img/B22051_07_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="21188">Figure 7.8 – CloudFormation stack created status</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21236">This will mean</st> <st c="21251">that all the resources are provisioned,
    and you can</st> <st c="21304">now proceed.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21316">Frontend configuration and deployment</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="21354">Now that all the</st> <st c="21371">necessary AWS services have
    been provisioned, it is time to configure your frontend application and deploy</st>
    <st c="21479">the files.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21489">Navigate to the</st> `<st c="21506">…/frontend/src/configs</st>`
    <st c="21528">folder, and you will find</st> <st c="21555">two files:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="21565">aws-exports.ts</st>`<st c="21580">: Configure your application
    authentication, with data from the Cognito User Pool.</st> <st c="21664">This
    file is composed of four</st> <st c="21694">configuration variables:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="21718">AWS_PROJECT_REGION</st>`<st c="21737">: The region where you
    deployed</st> <st c="21770">your solution</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="21783">AWS_COGNITO_REGION</st>`<st c="21802">: Your Cognito user Pool
    region (the same as the</st> <st c="21852">previous variable)</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="21870">AWS_USER_POOLS_ID</st>`<st c="21888">: The ID of your</st> <st
    c="21906">user pool</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="21915">AWS_USER_POOLS_WEB_CLIENT_ID</st>`<st c="21944">: The client
    ID of your Cognito User</st> <st c="21982">Pool application</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="21998">configs.tsx</st>`<st c="22010">: Define the URL of your API
    to be used in your application.</st> <st c="22072">The</st> `<st c="22076">configs.tsx</st>`
    <st c="22087">file is composed of one</st> <st c="22112">configuration variable:</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="22135">CONFIG_API_URL</st>`<st c="22150">:</st> <st c="22153">API endpoint</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="22165">To simplify the process of obtaining these values, we have already
    included them in the</st> **<st c="22254">Outputs</st>** <st c="22261">section
    of our</st> **<st c="22277">CloudFormation</st>** <st c="22291">template.</st>
    <st c="22302">To access it, follow</st> <st c="22323">these steps:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="22335">Go to the CloudFormation console</st> <st c="22369">at</st> [<st
    c="22372">https://console.aws.amazon.com/cloudformation/</st>](https://console.aws.amazon.com/cloudformation/)<st
    c="22418">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="22419">Click on</st> <st c="22429">your stack.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="22440">On the right menu, select the</st> **<st c="22471">Outputs</st>**
    <st c="22478">tab, as shown in</st> *<st c="22496">Figure 7</st>**<st c="22504">.9</st>*<st
    c="22506">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.9 – CloudFormation stack Outputs tab](img/B22051_07_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="23113">Figure 7.9 – CloudFormation stack Outputs tab</st>
  prefs: []
  type: TYPE_NORMAL
- en: '*<st c="23158">Table 7.3</st>* <st c="23168">maps</st> <st c="23173">the Stack
    outputs with the</st> <st c="23201">configuration files:</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '| **<st c="23221">File</st>** | **<st c="23226">Parameter name</st>** | **<st
    c="23241">Cloudformation</st>** **<st c="23257">stack outputs</st>** |'
  prefs: []
  type: TYPE_TB
- en: '| `<st c="23270">aws-exports.ts</st>` | `<st c="23285">aws_user_pools_id</st>`
    | `<st c="23303">UserPoolId</st>` |'
  prefs: []
  type: TYPE_TB
- en: '| `<st c="23314">aws_user_pools_web_client_id</st>` | `<st c="23343">ClientId</st>`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `<st c="23352">configs.tsx</st>` | `<st c="23364">API_URL</st>` | `<st c="23372">CognitoUserPoolId</st>`
    |'
  prefs: []
  type: TYPE_TB
- en: <st c="23390">Table 7.3 – Mapping between CloudFormation outputs and aws-exports.ts
    parameters</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="23471">4.</st> <st c="23475">Save</st> <st c="23480">the files.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="23490">By the end, your configuration files should look</st> <st c="23540">like
    this:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="23550">configs.tsx</st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**<st c="23619">aws-exports.tsx</st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: <st c="23977">After updating the configuration files, you can begin the</st>
    `<st c="24036">build</st>` <st c="24041">process to convert the code into a web-optimized
    bundle that can be served to browsers.</st> <st c="24130">In our example, we used</st>
    `<st c="24154">npm</st>` <st c="24157">as the package</st> <st c="24172">manager,
    so you’ll need to install the dependencies and start the</st> `<st c="24239">build</st>`
    <st c="24244">process:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: <st c="24284">Note</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="24289">The previous command should be executed in the</st> `<st c="24337">root</st>`
    <st c="24341">directory of the</st> `<st c="24359">frontend</st>` <st c="24367">folder.</st>
    <st c="24376">To verify whether you are at the root, use the</st> <st c="24423">following
    command:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="24441">$</st>` `<st c="24444">pwd</st>`'
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="24447">…/</st>``<st c="24449">chapter7/code/frontend</st>`'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="24472">The</st> `<st c="24477">build</st>` <st c="24482">process generates
    a folder containing the files that need to be uploaded to our S3 buckets.</st>
    <st c="24575">The folder name may vary, but it is typically</st> `<st c="24621">build/</st>`
    <st c="24627">or</st> `<st c="24631">dist/</st>`<st c="24636">, and it is created
    within the</st> `<st c="24667">root</st>` <st c="24671">directory of the</st>
    <st c="24689">frontend application.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="24710">The last step is to copy the build folder to S3, with the</st>
    <st c="24769">following instructions:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="24792">Firstly, you need to locate the S3 bucket that you created earlier
    using the CloudFormation template.</st> <st c="24895">The bucket’s name should
    start with</st> `<st c="24931">frontend-chapter-7-</st>` <st c="24950">followed
    by a random sequence of characters (</st><st c="24996">e.g.,</st> `<st c="25003">frontend-chapter-7-XXXXX</st>`<st
    c="25027">).</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="25030">Click on the bucket’s name to</st> <st c="25061">open it.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="25069">Within the S3 bucket, locate and click on the</st> **<st c="25116">Upload</st>**
    <st c="25122">button.</st> <st c="25131">This action will enable you to transfer
    files from your local machine to the</st> <st c="25208">S3 bucket.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="25218">Click on</st> `<st c="25258">dist</st>` <st c="25262">folder on
    your local machine.</st> <st c="25293">Select all the files inside the folder
    and confirm (you should have two files at the root of the</st> `<st c="25390">dist</st>`
    <st c="25394">folder:</st> `<st c="25403">index.html</st>` <st c="25413">and</st>
    `<st c="25418">penguin.png</st>`<st c="25429">).</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="25432">Next, click on</st> `<st c="25471">dist</st>` <st c="25475">folder
    on your local machine, select the</st> `<st c="25517">assets</st>` <st c="25523">folder,</st>
    <st c="25532">and confirm.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="25544">Now your</st> <st c="25554">S3</st> **<st c="25557">Upload</st>**
    <st c="25563">window should look like</st> *<st c="25588">Figure 7</st>**<st c="25596">.10</st>*<st
    c="25599">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.10 – Frontend files uploaded to S3](img/B22051_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="25900">Figure 7.10 – Frontend files uploaded to S3</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="25943">Note that the file names are automatically generated during the
    build process, so the names you see might differ from the ones shown in the preceding
    figure.</st> <st c="26102">However, ensure that you have the</st> <st c="26136">following
    files:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="26152">i</st>``<st c="26154">ndex.html</st>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="26163">assets/index-XXXXXX.css</st>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="26187">assets/index-XXXXXX.js</st>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="26210">Static files you may have included in your application, for</st>
    <st c="26271">example, images</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="26286">Scroll down to the bottom of the page and click</st> <st c="26335">on</st>
    **<st c="26338">Upload</st>**<st c="26344">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="26345">You have now completed the deployment and configuration process
    for your application, and</st> <st c="26435">you can proceed to the</st> <st c="26459">chatbot
    setup.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="26473">Amazon Lex configuration and build</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="26508">You are almost</st> <st c="26524">done, and</st> <st c="26533">the
    only step left is the configuration of your chatbot.</st> <st c="26591">Most of
    the configurations were already performed by the CloudFormation template, and
    you were just left with the lambda function integration to perform the actions
    based on</st> <st c="26765">the conversation.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="26782">To finalize it, follow</st> <st c="26806">these steps:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="26818">Go to the Amazon Lex console in the region where you deployed
    the CloudFormation stack</st> <st c="26906">at</st> [<st c="26909">https://console.aws.amazon.com/lexv2/home?</st>](https://console.aws.amazon.com/lexv2/home?)<st
    c="26951">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="26952">On the left menu,</st> <st c="26971">select</st> **<st c="26978">Bots</st>**<st
    c="26982">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="26983">In the</st> **<st c="26991">Bots</st>** <st c="26995">list, select</st>
    **<st c="27009">MeetyBot</st>**<st c="27017">, as shown in</st> *<st c="27031">Figure
    7</st>**<st c="27039">.11</st>*<st c="27042">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.11 – Amazon Lex bot selection](img/B22051_07_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="27165">Figure 7.11 – Amazon Lex bot selection</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="27203">Under the</st> **<st c="27214">Deployment</st>** <st c="27224">section,
    select</st> **<st c="27241">Aliases</st>** <st c="27248">and click on</st> **<st
    c="27262">TestBotAlias</st>**<st c="27274">, as depicted in</st> *<st c="27291">Figure
    7</st>**<st c="27299">.12</st>*<st c="27302">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.12 – Amazon Lex bot alias section](img/B22051_07_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="27746">Figure 7.12 – Amazon Lex bot alias section</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="27788">From the</st> **<st c="27798">Languages</st>** <st c="27807">list,
    select</st> **<st c="27821">English (US)</st>**<st c="27833">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="27834">In the</st> `<st c="27885">bot-function-meety</st>` <st c="27903">as
    the</st> <st c="27910">source, and</st> `<st c="27923">$LATEST</st>` <st c="27930">as</st>
    <st c="27934">the version, as shown in</st> *<st c="27959">Figure 7</st>**<st
    c="27967">.13</st>*<st c="27970">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="27971">Click</st> **<st c="27978">Save</st>**<st c="27982">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.13 – Lambda function selection for your chatbot](img/B22051_07_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="28194">Figure 7.13 – Lambda function selection for your chatbot</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="28250">The last step is to configure the triggering of the function whenever
    the BookMeeting intent is fulfilled.</st> <st c="28358">For that, do</st> <st
    c="28371">the following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="28385">On the left menu, select</st> **<st c="28411">Intents</st>** <st
    c="28418">under the</st> **<st c="28429">English (</st>****<st c="28438">US)</st>**
    <st c="28442">menu.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="28448">Click on the</st> **<st c="28462">BookMeeting</st>** <st c="28473">intent.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="28481">Scroll down to the</st> **<st c="28501">Fullfilment</st>** <st
    c="28512">section and click on the toggle button to make it active.</st> <st c="28571">This
    will ensure the lambda function is triggered every time this intent is fulfilled.</st>
    <st c="28658">You can see the expected status in</st> *<st c="28693">Figure 7</st>**<st
    c="28701">.14</st>*<st c="28704">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.14 – Amazon Lex chatbot – fulfillment configuration](img/B22051_07_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="28897">Figure 7.14 – Amazon Lex chatbot – fulfillment configuration</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="28957">Click</st> <st c="28964">on</st> **<st c="28967">Save Intent</st>**
    <st c="28978">in</st> <st c="28981">the</st> <st c="28986">bottom right.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="28999">Select</st> **<st c="29007">Build</st>** <st c="29012">in the</st>
    <st c="29020">top right.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="29030">The build process of your chatbot should take around two minutes.</st>
    <st c="29097">Wait until you see a green banner with a success message, as shown
    in</st> *<st c="29167">Figure 7</st>**<st c="29175">.15</st>*<st c="29178">.</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 7.15 – Success message from the Amazon Lex build process](img/B22051_07_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="29240">Figure 7.15 – Success message from the Amazon Lex build process</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="29303">Congratulations!</st> <st c="29321">You have successfully finished
    the deployment and configuration of your application, and</st> <st c="29410">you
    should now have a fully functional</st> <st c="29449">project.</st> <st c="29458">It
    is time to test</st> <st c="29477">it out!</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="29484">Test and explore your application</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="29518">By now, everything</st> <st c="29538">should be ready to be tested.</st>
    <st c="29568">To access your application, do</st> <st c="29599">the following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="29613">Go to the CloudFront console</st> <st c="29643">at</st> [<st c="29646">https://console.aws.amazon.com/cloudformation/</st>](https://console.aws.amazon.com/cloudformation/)<st
    c="29692">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="29693">Select the stack you deployed as part of</st> <st c="29735">this
    chapter.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="29748">Go to the</st> **<st c="29759">Outputs</st>** <st c="29766">tab.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="29771">Click on the</st> `<st c="29785">CloudFrontDistributionUrl</st>`
    <st c="29810">value as shown in</st> *<st c="29829">Figure 7</st>**<st c="29837">.16</st>*<st
    c="29840">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.16 – CloudFormation Outputs tab](img/B22051_07_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="30451">Figure 7.16 – CloudFormation Outputs tab</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="30491">This should redirect you to your application, which is expected
    to be like</st> *<st c="30567">Figure 7</st>**<st c="30575">.17</st>*<st c="30578">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.17 – Application homepage](img/B22051_07_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="31034">Figure 7.17 – Application homepage</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="31068">This is the page where users can interact with a chatbot to schedule
    meetings.</st> <st c="31148">By clicking on the chat icon, you will be able to
    initiate</st> <st c="31207">a conversation.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="31222">As discussed in the</st> *<st c="31243">AWS services</st>* <st
    c="31255">section, utterances are predefined within an intent to help identify
    and understand the</st> <st c="31344">user’s request.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="31359">This chapter’s</st> <st c="31374">CloudFormation template creates
    a chatbot composed of</st> <st c="31429">three intents:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="31443">StartMeety</st>**<st c="31454">: This is the first intent responsible
    for the</st> <st c="31502">welcome message</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="31517">BookMeeting</st>**<st c="31529">: The intent responsible for
    booking</st> <st c="31567">a meeting</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="31576">FallbackIntent</st>**<st c="31591">: Default intent to be triggered
    whenever no other intent can be identified based on the</st> <st c="31681">user
    input</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="31691">Explore and customize your chatbot</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="31726">To explore the utterances, responses, and logic of each of the
    intents, do</st> <st c="31802">the following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="31816">Navigate to the Amazon Lex console in the region where you deployed
    the CloudFormation stack</st> <st c="31910">at</st> [<st c="31913">https://console.aws.amazon.com/lexv2/home?</st>](https://console.aws.amazon.com/lexv2/home?)<st
    c="31955">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="31956">On the left menu,</st> <st c="31975">select</st> **<st c="31982">Bots</st>**<st
    c="31986">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="31987">Select</st> **<st c="31995">MeetyBot</st>**<st c="32003">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="32004">Under</st> **<st c="32011">English (US)</st>**<st c="32023">,
    click</st> <st c="32031">on</st> **<st c="32034">Intents</st>**<st c="32041">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="32042">Your console should look like</st> *<st c="32073">Figure 7</st>**<st
    c="32081">.18</st>*<st c="32084">.</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 7.18 – Amazon Lex Bot Intents section](img/B22051_07_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="32654">Figure 7.18 – Amazon Lex Bot Intents section</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="32698">Click on the</st> **<st c="32712">StartMeety</st>** <st c="32722">intent.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="32730">Scroll down</st> <st c="32743">to the</st> **<st c="32750">Sample
    utterances</st>** <st c="32767">section to review the pre-defined utterances for
    this intent, as shown in</st> *<st c="32842">Figure 7</st>**<st c="32850">.19</st>*<st
    c="32853">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.19 – Amazon Lex chatbot intent sample utterances](img/B22051_07_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="33482">Figure 7.19 – Amazon Lex chatbot intent sample utterances</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="33539">These are currently the ones available to identify the StartMeety
    intent, but feel free to add others or customize the existing one at will.</st>
    <st c="33681">After any change, ensure you save the intent and rebuild the chatbot,
    as described in the</st> <st c="33771">previous section.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="33788">Do the same exercise for the BookMeeting intent.</st> <st c="33838">In
    this case, Amazon Lex expects different utterances, and</st> <st c="33897">unlike
    the StartMeety intent, it also includes five slots as the pieces of data needed
    to fulfils</st> <st c="33995">the intent:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="34006">FullName</st>**<st c="34015">: The name of</st> <st c="34030">the
    attendee</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="34042">MeetingDate</st>**<st c="34054">: The date the user wants</st>
    <st c="34081">to meet</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="34088">MeetingStime</st>**<st c="34101">: The start time of</st> <st
    c="34122">the meeting</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="34133">MeetingDuration</st>**<st c="34149">: The duration of the meeting,
    which should be either 30 or</st> <st c="34210">60 minutes</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="34220">AttendeeEmail</st>**<st c="34234">: The email the user wants
    to use to</st> <st c="34272">be contacted</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="34284">We recommend spending some time exploring each slot and the prompt
    used by the chatbot to request it.</st> <st c="34387">As mentioned earlier, feel
    free to customize the prompts and slots according to</st> <st c="34467">your preference.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="34483">After getting familiar with all the configurations of your chatbot,
    you can proceed and start a conversation in your application to book</st> <st
    c="34621">a meeting.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="34631">Test your chatbot</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="34649">With your chatbot and its intents configured, now it is time to
    test its behavior in</st> <st c="34735">your application:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="34752">Begin by using one of the utterances defined in the StartMeety
    Intent, and take note of the</st> <st c="34845">chatbot’s response.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.20 – Initial chatbot response from the StartMeety intent](img/B22051_07_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="34955">Figure 7.20 – Initial chatbot response from the StartMeety intent</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="35020">Here, you</st> <st c="35031">can see that, based on the input
    that matches one of the sample utterances of the StartMeety intent, the chatbot
    responded with a welcome message as configured in</st> <st c="35194">the intent.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="35205">In this example, you can see that the chatbot identified and acknowledged
    the intent and</st> <st c="35295">replied accordingly.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="35315">Next, you can respond with one of the utterances defined in the
    BookMeeting intent, so the chatbot can</st> <st c="35419">identify it.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.21 – BookMeeting intent conversation flow](img/B22051_07_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="35529">Figure 7.21 – BookMeeting intent conversation flow</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="35579">The chatbot identified the intent and started asking questions
    to gather the slot values with the</st> <st c="35678">objective of fulfilling
    it.</st> <st c="35706">Note that the chatbot was able to interpret the</st> **<st
    c="35754">tomorrow</st>** <st c="35762">statement based on the</st> <st c="35786">current
    date.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="35799">As part of the BookMeeting intent, your chatbot is configured
    to perform a confirmation before proceeding.</st> <st c="35907">Here, a user can
    either proceed or cancel the request, as shown in</st> *<st c="35974">Figure 7</st>**<st
    c="35982">.22</st>*<st c="35985">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.22 – Chatbot confirmation prompt](img/B22051_07_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="36153">Figure 7.22 – Chatbot confirmation prompt</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="36194">Upon confirmation, your intent reached the fulfillment state,
    and as per the bot configuration, the</st> `<st c="36295">bot-function-meety lambda</st>`
    <st c="36320">function was triggered.</st> <st c="36345">The lambda function has
    three</st> <st c="36375">main actions:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="36388">Evaluate whether there are any previously accepted meetings that
    could conflict with the proposed meeting time, according to the slot</st> <st
    c="36523">values provided.</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="36539">Create the meeting request and store it in the</st> <st c="36587">DynamoDB
    table.</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="36602">Respond with a customized message to the end user acknowledging
    the</st> <st c="36671">meeting request.</st>
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 7.23 – Chatbot final response](img/B22051_07_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="36844">Figure 7.23 – Chatbot final response</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="36880">If you want to</st> <st c="36896">explore the lambda function
    code in detail, follow</st> <st c="36947">these steps:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="36959">Go to the AWS Lambda console in the region where you deployed
    the CloudFormation stack</st> <st c="37047">at</st> [<st c="37050">https://console.aws.amazon.com/lambda/</st>](https://console.aws.amazon.com/lambda/)<st
    c="37088">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="37089">On the left menu,</st> <st c="37108">select</st> **<st c="37115">Functions</st>**<st
    c="37124">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="37125">Click on the</st> `<st c="37139">bot-function-meety</st>` <st
    c="37157">function.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="37167">Scroll down to the</st> **<st c="37187">Code Source</st>** <st
    c="37198">section, and you will find all the code included in this</st> <st c="37256">lambda
    function.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="37272">You have already examined how a user can initiate meeting requests
    through conversations with your chatbot.</st> <st c="37381">Now, it is time to
    delve into the</st> **<st c="37415">Admin</st>** <st c="37420">page, where you
    can review the accepted meetings in your calendar and manage the pending</st>
    <st c="37510">meeting requests.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="37527">Manage meeting requests through the admin portal</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="37576">So far, you have tested your chatbot, namely its capabilities
    to handle meeting requests with a human-like conversation, and now you will explore
    how to manage the</st> <st c="37741">requests created.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="37758">During the process of deploying your CloudFormation stack, you
    should have received an email like the one in</st> *<st c="37868">Figure 7</st>**<st
    c="37876">.24</st>* <st c="37879">with your username and a temporary password.</st>
    <st c="37925">This will be</st> <st c="37938">needed to finalize the authentication
    process and access the</st> **<st c="37999">Admin</st>** <st c="38004">page.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.24 – Email with a temporary password](img/B22051_07_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="38305">Figure 7.24 – Email with a temporary password</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="38350">To access the admin portal and manage the meeting requests, follow</st>
    <st c="38418">these steps:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="38430">From your application’s homepage, click on</st> **<st c="38474">Sign
    In</st>**<st c="38481">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="38482">Fill out the</st> **<st c="38496">Username</st>** <st c="38504">and</st>
    **<st c="38509">Password</st>** <st c="38517">fields with the values from the
    email you received</st> <st c="38569">and confirm.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="38581">Set up a new password</st> <st c="38604">and proceed.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="38616">Select your email and click on</st> **<st c="38648">Verify</st>**<st
    c="38654">. You will now receive an email with a</st> <st c="38693">temporary
    code.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="38708">Copy the verification code from your email and paste it into the</st>
    <st c="38774">confirmation form.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="38792">You have now finalized the authentication setup, and your interface
    should look like</st> *<st c="38878">Figure 7</st>**<st c="38886">.25</st>*<st
    c="38889">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.25 – Admin page for managing meeting requests](img/B22051_07_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="39367">Figure 7.25 – Admin page for managing meeting requests</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="39421">The admin page is</st> <st c="39439">divided into two</st> <st
    c="39457">distinct sections:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="39475">Meetings calendar, which displays all the</st> <st c="39518">accepted
    meetings.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="39536">Pending meetings section, which presents a list of meeting requests
    awaiting</st> <st c="39614">your action.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="39626">Within the</st> **<st c="39638">Actions</st>** <st c="39645">column,
    you have two buttons available:</st> **<st c="39686">Accept</st>** <st c="39692">and</st>
    **<st c="39697">Reject</st>**<st c="39703">. Clicking the</st> **<st c="39718">Accept</st>**
    <st c="39724">button will update the meeting request’s status to</st> **<st c="39776">Accepted</st>**<st
    c="39784">, while selecting the</st> **<st c="39806">Reject</st>** <st c="39812">button
    will mark it as</st> **<st c="39836">Rejected</st>**<st c="39844">. To observe
    the functionality, try accepting a meeting request and watch it appear in the</st>
    **<st c="39935">Meetings</st>** **<st c="39944">Calendar</st>** <st c="39952">calendar.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="39962">One of the functional requirements stated that you should receive
    a notification when a new meeting request overlaps with a previously accepted
    meeting.</st> <st c="40116">To test this behavior, perform the</st> <st c="40151">following
    steps:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="40167">Open a new tab in your browser with the homepage (you can copy
    the URL from the</st> `<st c="40274">/admin</st>`<st c="40280">).</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="40283">Attempt to schedule a meeting during the same time slot as an
    already</st> <st c="40354">accepted meeting.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="40371">Refresh the</st> **<st c="40384">Admin</st>** <st c="40389">page
    to display the new</st> <st c="40414">meeting request.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="40430">You can verify that the new request now displays a warning icon
    and a tooltip indicating that it conflicts with a previously accepted meeting,
    as illustrated in</st> *<st c="40592">Figure 7</st>**<st c="40600">.26</st>*<st
    c="40603">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.26 – Conflicting meeting warning](img/B22051_07_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="40744">Figure 7.26 – Conflicting meeting warning</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="40785">You now have a fully operational web application with a chatbot
    that can schedule meetings based on a conversation with an end user.</st> <st
    c="40919">Additionally, you can consult a calendar with all</st> <st c="40969">the
    meetings that happened in the past and manage your agenda for the</st> <st c="41039">upcoming
    meetings.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="41057">Clean up</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="41066">Aligned with your</st> <st c="41084">non-functional requirements,
    all the components of this architecture benefit from a pay-as-you-go model, meaning
    you pay only for what you use.</st> <st c="41229">Nevertheless, if you leave an
    application running for an extended period, you may incur unnecessary costs.</st>
    <st c="41336">Therefore, it is recommended to clean up your infrastructure when
    it is no longer in use.</st> <st c="41426">Since you deployed the application
    using IaC, the cleanup process is straightforward and involves</st> <st c="41524">two
    steps:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="41534">Empty the</st> <st c="41545">S3 bucket:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="41555">Go to the S3 console in your</st> <st c="41585">AWS account.</st>
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="41597">Select your frontend S3 bucket (the name of the bucket should
    start with</st> `<st c="41671">frontend-chapter-7-</st>`<st c="41690">, followed
    by a</st> <st c="41706">random string).</st>
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="41721">Click on</st> **<st c="41731">Empty</st>**<st c="41736">; this
    will delete all the content inside</st> <st c="41779">your bucket.</st>
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.27 – Process of emptying an S3 bucket](img/B22051_07_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="42082">Figure 7.27 – Process of emptying an S3 bucket</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="42128">Delete the</st> <st c="42140">CloudFormation stack:</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="42161">Navigate to the CloudFormation service console within your AWS
    account, ensuring you are in the same region where the initial deployment</st>
    <st c="42299">took place.</st>
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="42310">Select the stack</st> <st c="42328">you created.</st>
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="42340">Click on</st> **<st c="42350">Delete</st>**<st c="42356">, as
    shown in</st> *<st c="42370">Figure 7</st>**<st c="42378">.28</st>*<st c="42381">.</st>
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.28 – CloudFormation stack deletion](img/B22051_07_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="42669">Figure 7.28 – CloudFormation stack deletion</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="42712">With these actions, all the resources created for this chapter
    should</st> <st c="42783">be deleted.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="42794">While this project</st> <st c="42813">provides a solid foundation
    for your chatbot application, there are several enhancements and future considerations
    that can further improve its functionality and user experience.</st> <st c="42993">These
    will be presented in the</st> <st c="43024">next section.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="43037">Future work</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="43049">Congratulations on successfully implementing the chatbot application!</st>
    <st c="43120">You have taken a significant step in harnessing the power of AWS
    for building intelligent conversational interfaces, and you now have the baseline
    for incorporating this technology into future projects.</st> <st c="43323">This
    project represents an initial version.</st> <st c="43367">We want to suggest some
    improvements and ideas you can implement to extend it and enrich</st> <st c="43456">your
    chatbot.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="43469">Extend the actions performed by your chatbot</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="43514">Your current chatbot</st> <st c="43536">can detect conflicts when
    a user attempts to schedule a meeting but consider expanding its capabilities
    by implementing logic to suggest available time slots to the user.</st> <st c="43707">Additionally,
    you could introduce a scheduling window, for instance, from 9 AM to 5 PM, and
    only accept meeting requests within</st> <st c="43835">that timeframe:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: <st c="44027">You could improve this function, for example, by including two</st>
    <st c="44091">new arguments:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="44105">min_time</st>`<st c="44114">: Defined by the admin, the earliest
    time to accept</st> <st c="44167">a meeting.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="44177">max_time</st>`<st c="44186">: Defined by the admin, the latest
    time to accept</st> <st c="44237">a meeting.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="44247">Now, inside your function, include the logic to test</st> <st
    c="44301">the following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="44315">Whether the meeting’s proposed date is</st> <st c="44355">before</st>
    `<st c="44362">min_time</st>`<st c="44370">.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="44371">Whether the meeting’s end date is</st> <st c="44406">after</st>
    `<st c="44412">max_time</st>`<st c="44420">.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="44421">Whether there is a conflict, and in case there is, query the DynamoDB
    table to get all the meetings happening on the proposed date and implement the
    logic to find an available slot considering the</st> <st c="44619">proposed duration.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="44637">Here is an example of the updated structure for your</st> `<st
    c="44691">check_meeting_slot</st>` <st c="44709">function, which incorporates
    the necessary parameters to extend the logic as</st> <st c="44787">described above:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: <st c="44893">Feel free to explore and customize the</st> `<st c="44933">bot-function-meety</st>`
    <st c="44951">lambda function to incorporate these ideas or any other enhancements
    you envision for</st> <st c="45038">your chatbot.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="45051">Multilingual support</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="45072">Currently, your</st> <st c="45089">chatbot only supports English,
    but Amazon Lex offers the capability to work with multiple languages.</st> <st
    c="45190">As a future enhancement, you could configure your chatbot to support
    additional languages, making it more accessible to users from different linguistic
    backgrounds.</st> <st c="45355">You can find the instructions on how to implement
    it in the AWS documentation</st> <st c="45433">at</st> [<st c="45436">https://docs.aws.amazon.com/lexv2/latest/dg/add-language.html</st>](https://docs.aws.amazon.com/lexv2/latest/dg/add-language.html)<st
    c="45497">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="45498">Maintain user profiles for different sessions</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="45544">The CloudFormation</st> <st c="45564">deployment included a lambda
    function called</st> `<st c="45609">chatbot-meety</st>`<st c="45622">, which is
    responsible for interacting with your Amazon Lex chatbot by sending user inputs
    and receiving responses.</st> <st c="45738">One of the parameters when interacting
    with Amazon Lex is</st> `<st c="45796">sessionId</st>`<st c="45805">, which helps
    the service identify</st> <st c="45840">different conversations:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: <st c="46050">Currently, this value is hardcoded.</st> <st c="46087">You can
    see this in the preceding snippet where we used the</st> `<st c="46147">your_session_id</st>`
    <st c="46162">string, meaning there is no way for the chatbot to handle multiple</st>
    <st c="46229">concurrent conversations.</st> <st c="46256">Can you think about
    a strategy to create a unique identifier for</st> <st c="46321">each session?</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="46334">Summary</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="46342">In this chapter, you embarked on a journey to develop an intelligent
    chatbot application that streamlines the meeting scheduling process.</st> <st
    c="46481">By leveraging the power of AWS services such as Amazon Lex, Lambda,
    API Gateway, and DynamoDB, you created a seamless, conversational experience that
    automates the entire meeting scheduling workflow.</st> <st c="46681">Specifically,
    in the chatbot development, you explored the intricacies of Amazon Lex, including
    intents, utterances, and slots, and learned how to customize and extend the chatbot’s
    capabilities.</st> <st c="46877">Overall, and in the previous three chapters,
    you have gained knowledge in the AI field and how to adopt these technologies
    with</st> <st c="47005">AWS services.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="47018">In the next chapter, you will explore the business intelligence
    domain and learn how to analyze</st> <st c="47115">clickstream data.</st>
  prefs: []
  type: TYPE_NORMAL

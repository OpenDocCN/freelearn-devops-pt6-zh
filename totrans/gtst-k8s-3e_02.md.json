["```\n[node3 /]$ kubectl get componentstatuses\nNAME                 STATUS MESSAGE          ERROR\nscheduler            Healthy ok\ncontroller-manager   Healthy ok\netcd-0               Healthy {\"health\": \"true\"}\n```", "```\n[node3 /]$ kubectl get cs\n\nNAME                  STATUS       MESSAGE      ERROR\netcd-0                Unhealthy                 Get http://127.0.0.1:2379/health: dial tcp 127.0.0.1:2379: getsockopt: connection refused\ncontroller-manager    Healthy      ok\nscheduler             Healthy      ok\n```", "```\n$ kubectl get nodes -o json\n\"conditions\": [\n  {\n    \"type\": \"Ready\",\n    \"status\": \"True\"\n  }\n]\n```", "```\n$ mkdir book-examples\n$ cd book-examples\n$ mkdir 02_example\n$ cd 02_example\n```", "```\napiVersion: v1 \nkind: Pod \nmetadata: \n  name: node-js-pod \nspec: \n  containers: \n  - name: node-js-pod \n    image: bitnami/apache:latest \n    ports: \n    - containerPort: 80\n```", "```\n$ kubectl create -f nodejs-pod.yaml\npod \"node-js-pod\" created \n```", "```\n$ kubectl describe pods/node-js-pod\n```", "```\n$ kubectl exec node-js-pod -- curl <private ip address>\n\n--or--\n $ kubectl exec node-js-pod -- curl `kubectl get pod node-js-pod --template={{.status.podIP}}`\n```", "```\nmaster $ kubectl exec -it node-js-pod -- /bin/bash\nroot@node-js-pod:/opt/bitnami/apache/htdocs# exit\nmaster $ \n```", "```\n$ kubectl exec node-js-pod ls / \n$ kubectl exec node-js-pod ps aux\n$ kubectl exec node-js-pod -- uname -a\n```", "```\nkind: Service\napiVersion: v1\nmetadata:\n  name: gsw-k8s-3-service\nspec:\n  selector:\n    app: gswk8sApp\n  ports:\n  - protocol: TCP\n    port: 80\n    targetPort: 8080\n```", "```\napiVersion: v1 \nkind: ReplicationController \nmetadata: \n  name: node-js \n  labels: \n    name: node-js \nspec: \n  replicas: 3 \n  selector: \n    name: node-js \n  template: \n    metadata: \n      labels: \n        name: node-js \n    spec: \n      containers: \n      - name: node-js \n        image: jonbaier/node-express-info:latest \n        ports: \n        - containerPort: 80\n```", "```\napiVersion: v1 \nkind: Service \nmetadata: \n  name: node-js \n  labels: \n    name: node-js \nspec: \n  type: LoadBalancer \n  ports: \n  - port: 80 \n  selector: \n    name: node-js\n```", "```\n$ kubectl create -f nodejs-controller.yaml\n```", "```\nreplicationcontroller \"node-js\" created\n```", "```\n$ kubectl create -f nodejs-rc-service.yaml\n```", "```\nservice \"node-js\" created \n```", "```\n$ kubectl get services\n```", "```\n$ kubectl get pods\n```", "```\n$ kubectl describe pod/node-js-sjc03\n```", "```\n$ gcloud compute --project \"<Your project ID>\" ssh --zone \"<your gce zone>\" \"<Node from\npod describe>\"\n```", "```\n$ sudo docker ps --filter=\"name=node-js\"\n$ sudo docker stop <node-express container id>\n$ sudo docker rm <container id>\n$ sudo docker ps --filter=\"name=node-js\"\n```", "```\napiVersion: v1 \nkind: ReplicationController \nmetadata: \n  name: node-js-labels \n  labels: \n    name: node-js-labels \n    app: node-js-express \n    deployment: test \nspec: \n  replicas: 3 \n  selector: \n    name: node-js-labels \n    app: node-js-express \n    deployment: test \n  template: \n    metadata: \n      labels: \n        name: node-js-labels \n        app: node-js-express \n        deployment: test \n    spec: \n      containers: \n      - name: node-js-labels \n        image: jonbaier/node-express-info:latest \n        ports: \n        - containerPort: 80\n```", "```\napiVersion: v1 \nkind: Service \nmetadata: \n  name: node-js-labels \n  labels: \n    name: node-js-labels \n    app: node-js-express \n    deployment: test \nspec: \n  type: LoadBalancer \n  ports: \n  - port: 80 \n  selector: \n    name: node-js-labels \n    app: node-js-express \n    deployment: test\n```", "```\n$ kubectl create -f nodejs-labels-controller.yaml\n$ kubectl create -f nodejs-labels-service.yaml\n```", "```\n$ kubectl get rc -l deployment=test\n```", "```\n$ kubectl get services -l component\n```", "```\n$ kubectl get services -l \"name in (node-js,node-js-labels)\"\n```", "```\n$ kubectl delete rc -l deployment=demo\n```", "```\n$ kubectl delete service -l \"deployment in (test, production)\"\n```", "```\napiVersion: extensions/v1beta1 \nkind: ReplicaSet \nmetadata: \n  name: node-js-rs \nspec: \n  replicas: 3 \n  selector: \n    matchLabels: \n      app: node-js-express \n      deployment: test \n    matchExpressions: \n      - {key: name, operator: In, values: [node-js-rs]} \n  template: \n    metadata: \n      labels: \n        name: node-js-rs \n        app: node-js-express \n        deployment: test \n    spec: \n      containers: \n      - name: node-js-rs \n        image: jonbaier/node-express-info:latest \n        ports: \n        - containerPort: 80\n```", "```\napiVersion: v1 \nkind: ReplicationController \nmetadata: \n  name: node-js \n  labels: \n    name: node-js \nspec: \n  replicas: 3 \n  selector: \n    name: node-js \n  template: \n    metadata: \n      labels: \n        name: node-js \n    spec: \n      containers: \n      - name: node-js \n        image: jonbaier/node-express-info:latest \n        ports: \n        - containerPort: 80 \n        livenessProbe: \n          # An HTTP health check  \n          httpGet: \n            path: /status/ \n            port: 80 \n          initialDelaySeconds: 30 \n          timeoutSeconds: 1\n```", "```\n$ kubectl replace -f nodejs-health-controller.yaml\n```", "```\n$ kubectl delete pods -l name=node-js\n```", "```\n$ kubectl describe rc/node-js\n```", "```\n$ kubectl describe pods/node-js-7esbp\n```", "```\napiVersion: v1 \nkind: ReplicationController \nmetadata: \n  name: node-js \n  labels: \n    name: node-js \nspec: \n  replicas: 3 \n  selector: \n    name: node-js \n  template: \n    metadata: \n      labels: \n        name: node-js \n    spec: \n      containers: \n      - name: node-js \n        image: jonbaier/node-express-info:latest \n        ports: \n        - containerPort: 80 \n        livenessProbe: \n          # An HTTP health check  \n          httpGet: \n            path: / \n            port: 80 \n          initialDelaySeconds: 30 \n          timeoutSeconds: 1 \n        readinessProbe: \n          # An HTTP health check  \n          httpGet: \n            path: /status/ \n            port: 80 \n          initialDelaySeconds: 30 \n          timeoutSeconds: 1\n```", "```\n$ kubectl delete rc -l name=node-js-health\n$ kubectl create -f nodejs-health-controller-2.yaml\n```", "```\n$ kubectl delete rc -l name=node-js\n$ kubectl create -f nodejs-health-controller-2.yaml\n```", "```\nlivenessProbe: \n  exec: \n    command: \n    -/usr/bin/health/checkHttpServce.sh \n  initialDelaySeconds:90 \n  timeoutSeconds: 1\n```", "```\nlivenessProbe: \n  tcpSocket: \n    port: 80 \n  initialDelaySeconds: 15 \n  timeoutSeconds: 1\n```", "```\napiVersion: v1 \nkind: ReplicationController \nmetadata: \n  name: apache-hook \n  labels: \n    name: apache-hook \nspec: \n  replicas: 3 \n  selector: \n    name: apache-hook \n  template: \n    metadata: \n      labels: \n        name: apache-hook \n    spec: \n      containers: \n      - name: apache-hook \n        image: bitnami/apache:latest \n        ports: \n        - containerPort: 80 \n        lifecycle: \n          postStart: \n            httpGet: \n              path: http://my.registration-server.com/register/ \n              port: 80 \n          preStop: \n            exec: \n              command: [\"/usr/local/bin/apachectl\",\"-k\",\"graceful-\n              stop\"]\n```", "```\napiVersion: v1 \nkind: ReplicationController \nmetadata: \n  name: node-js-constraints \n  labels: \n    name: node-js-constraints \nspec: \n  replicas: 3 \n  selector: \n    name: node-js-constraints \n  template: \n    metadata: \n      labels: \n        name: node-js-constraints \n    spec: \n      containers: \n      - name: node-js-constraints \n        image: jonbaier/node-express-info:latest \n        ports: \n        - containerPort: 80 \n        resources: \n          limits: \n            memory: \"512Mi\" \n            cpu: \"1500m\"\n```", "```\n$ kubectl create -f nodejs-constraints-controller.yaml\n```", "```\n$ kubectl get pods\n$ kubectl describe pods/<pod-id>\n```"]
["```\n    C:\\Users\\OwG> wsl --install\n    ```", "```\n    sudo apt update && sudo apt upgrade\n    ```", "```\n    wget (used later in the setup process):\n\n    ```", "```\n\n    ```", "```\n    $ docker --version\n    Docker version 20.10.24, build 297e128\n    ```", "```\n    $ docker --version\n    Docker version 20.10.24, build 297e128\n    ```", "```\n    $ wget -q -O - https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash\n    ```", "```\n    $ k3d cluster create owg-otel-demo\n    ```", "```\n    $ kubectl get nodes\n    NAME             STATUS   ROLES                  AGE   VERSION\n    k3d-owg-otel-demo-server-0   Ready    control-plane,master   13d   v1.25.7+k3s1\n    ```", "```\n    $ wget –q –O - https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash\n    ```", "```\n    $ helm version\n    version.BuildInfo{Version:\"v3.11.3\", GitCommit:\"323249351482b3bbfc9f5004f65d400aa70f9ae7\", GitTreeState:\"clean\", GoVersion:\"go1.20.3\"}\n    ```", "```\n    $ helm repo add open-telemetry https://open-telemetry.github.io/opentelemetry-helm-charts\n    ```", "```\n    $ helm install --version '0.73.1' --values chapter3/OTEL-Collector.yaml --values OTEL-Creds.yaml owg open-telemetry/opentelemetry-collector\n    NAME: owg-otel-collector\n    LAST DEPLOYED: Sun May 14 13:53:16 2023\n    NAMESPACE: default\n    STATUS: deployed\n    REVISION: 1\n    …\n    ```", "```\n    $ kubectl get pods\n    NAME                         READY   STATUS    RESTARTS   AGE\n    owg-otel-collector-opentelemetry-collector-6b8fdddc9d-4tsj5   1/1     Running   0          2s\n    ```", "```\n    $ helm install --version '0.26.0' --values owg-demo open-telemetry/opentelemetry-demo\n    NAME: owg-otel-demo\n    LAST DEPLOYED: Mon May 15 21:58:37 2023\n    NAMESPACE: default\n    STATUS: deployed\n    REVISION: 1\n    …\n    ```", "```\n    frontendproxy access:\n\n    ```", "```\n\n    ```", "```\n    $ kubectl port-forward svc/owg-opentelemetry-collector 4318:4318 &\n    ```", "```\nhelm uninstall and then use the original instructions to reinstall.\n\t\t\tThe most common problem is with the access credentials, but sometimes you will need to look at the collector logs to understand what is happening. Let’s see how to do this now.\n\t\t\tReading logs from the OpenTelemetry Collector\n\t\t\tThe next place to investigate is the logs from the OpenTelemetry Collector.\n\t\t\tKubernetes allows you to directly read the logs from a Pod. To do this, you need the full Pod name, which you can get using the following command:\n\n```", "```\n\n\t\t\tIn this case, the full Pod name is `owg-opentelemetry-collector-567579558c-std2x`.\n\t\t\tTo read the logs, run the following command:\n\n```", "```\n\n\t\t\tLook for any warning or error-level events, which should give an indication of the issue that is occurring.\n\t\t\tSometimes, the default logging does not give enough information. Let’s see how we can increase the logging level.\n\t\t\tDebugging logs from the OpenTelemetry Collector\n\t\t\tIf the standard logs are not enough to resolve the problem, the OpenTelemetry Collector allows you to switch on **debug logging**. This is typically verbose, but it is very helpful in understanding the problem.\n\t\t\tAt the end of `OTEL-Creds.yaml`, we have included a section to manage the debug exporter. The verbosity can be set to `detailed`, `normal`, or `basic`.\n\t\t\tFor most use cases, switching to `normal` will offer enough information, but if this does not help you to address the problem, switch to `detailed`. Once this option is changed, you will need to redeploy the Helm chart:\n\n```", "```\n\n\t\t\tThis will restart the Pod, so you will need to get the new Pod ID. With that new ID, you can look at the logs; as we saw in the previous section, you should have a lot more detail.\n\t\t\tSummary\n\t\t\tIn this chapter, we have seen how to set up a Grafana Cloud account and the main screens available in the portal. We set up our local machine to run the OpenTelemetry demo application and installed the components for this. Finally, we looked a the data produced by the demo application in our Grafana Cloud account. This chapter has helped you set up an application that will produce data that is visible in your Grafana Cloud instance, so you can explore the more detailed concepts introduced later with real examples.\n\t\t\tIn the next chapter, we will begin to look in depth at logs and Loki, explaining how best to categorize data to give you great insights.\n\n```"]
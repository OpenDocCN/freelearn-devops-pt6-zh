- en: '*Chapter 17*: Creating and Using Helm Charts'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第17章*：创建和使用 Helm 图表'
- en: This chapter covers Helm, how Helm is used as a package manager for a Kubernetes
    cluster, and how it works. We then will be diving into creating a Helm chart from
    scratch, after which we'll be covering how to publish our new chart to a Kubernetes
    cluster. Finally, we'll cover taking a publicly available chart and customizing
    it to fit your needs.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了 Helm，Helm 作为 Kubernetes 集群的包管理器的使用方式，以及它的工作原理。接下来我们将深入讨论如何从零开始创建一个 Helm
    图表，之后将讲解如何将新创建的图表发布到 Kubernetes 集群。最后，我们将讨论如何获取一个公开可用的图表并根据需求进行定制。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下主要内容：
- en: What is a Helm chart?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是 Helm 图表？
- en: How does Helm work?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Helm 是如何工作的？
- en: How do I create a Helm chart?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建 Helm 图表？
- en: Deploying a Helm chart
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署 Helm 图表
- en: Customizing a public Helm chart
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定制一个公开的 Helm 图表
- en: What is a Helm chart?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 Helm 图表？
- en: Helm is a package management tool for Kubernetes deployments. Helm is similar
    to packagers such as `deb`/`dpkg` for Debian/Ubuntu-based systems. In that sense,
    a Helm chart is a set of Kubernetes deployment files that have been packaged into
    a single templatized file. In this section, we will cover why we need Helm and
    how it works behind the scenes.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Helm 是一个用于 Kubernetes 部署的包管理工具。Helm 类似于 Debian/Ubuntu 系统中的 `deb`/`dpkg` 包管理器。从这个角度来看，Helm
    图表是将一组 Kubernetes 部署文件打包成一个单一模板化文件。在本节中，我们将介绍为什么需要 Helm 以及它是如何在后台工作的。
- en: 'One of the questions that come up a lot when people start working with Kubernetes
    and Rancher is this: *Why do we need Helm?* But to answer this question, we need
    to understand how deployment was carried out before Helm, which was to have our
    developments as `ingress-nginx` on all your clusters using the same settings,
    images, and so on. Having that as just a flat YAML file that you deploy using
    `kubectl apply -f deployment.yaml` may work fine.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始使用 Kubernetes 和 Rancher 时，一个常见的问题是：*为什么我们需要 Helm？* 要回答这个问题，我们需要了解 Helm 之前是如何进行部署的。那时我们会在所有集群中使用相同的设置、镜像等来部署
    `ingress-nginx`。将其作为一个简单的 YAML 文件，通过 `kubectl apply -f deployment.yaml` 来部署可能是有效的。
- en: 'The issue that comes into play is this: what happens if one of your clusters
    is different? For example, you have a **Google Kubernetes Engine** (**GKE**) cluster
    and a **Rancher Kubernetes Engine** (**RKE**) cluster that might require different
    images; that is, GKE will use the public Docker Hub image, with your on-premises
    RKE cluster needing to come from a private registry. Without Helm, you are now
    going to need two different YAML files while also ensuring that they both stay
    in sync. Of course, you''ll need more than two different deployment files in the
    real world, so managing these files and keeping them in sync can become a nightmare.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个问题中，关键是：如果你的某个集群有所不同怎么办？例如，你可能有一个 **Google Kubernetes Engine** (**GKE**)
    集群和一个 **Rancher Kubernetes Engine** (**RKE**) 集群，它们可能需要不同的镜像；也就是说，GKE 将使用公共的 Docker
    Hub 镜像，而你的本地 RKE 集群则需要从私有注册表中获取镜像。如果没有 Helm，你就需要两个不同的 YAML 文件，并且需要确保它们保持同步。当然，在实际应用中，你可能需要更多不同的部署文件，因此管理这些文件并保持同步可能会变得非常复杂。
- en: 'Some people tried to solve this problem by writing scripts to find and replace
    values in deployments before deploying them—for example, your master deployment
    files might have their image value being set to something such as `ImageTagPlaceHolder`.
    Then, the script would look for this value and replace it using the `sed` command,
    like so: `` sed ''s/ImageTagPlaceHolder/my-private-registry/g` ``. This process
    works okay if you only update a couple of values, but the process starts breaking
    down once you need to do more complicated customizations. For example, an ingress
    for your `dev.example.com` defined in the `host` section, but in your production
    environment, you''ll need SSL certificate-defined, multiple hosts—that is, `www.example.com`,
    `example.com`, and so on. Doing this with Bash scripting becomes too crazy and,
    more importantly, error-prone.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 有些人尝试通过编写脚本，在部署之前查找并替换部署中的值来解决这个问题——例如，你的主部署文件中可能会将镜像值设置为 `ImageTagPlaceHolder`。然后，脚本会查找这个值，并使用
    `sed` 命令将其替换，例如： `` sed 's/ImageTagPlaceHolder/my-private-registry/g` ``。这种方法对于只更新几个值的情况有效，但当你需要做更复杂的定制时，这个过程就会出现问题。例如，你在
    `host` 部分定义了 `dev.example.com` 的 ingress，但在生产环境中，你需要根据 SSL 证书定义多个主机——也就是 `www.example.com`、`example.com`
    等等。用 Bash 脚本来做这些事情变得过于混乱，更重要的是，容易出错。
- en: Helm addresses this issue by having you define your deployment files as YAML
    files but with variables and `if` statements. The point is that you don't hardcode
    something such as your image tag in your deployment files; instead, you set it
    as a variable (that is, the `image` tag). Then, at the time of deployment, you
    feed values for those variables, and Helm takes care of building the final YAML
    files and then publishing them to the cluster. At the same time, Helm gives us
    the ability to define `if` statements in our deployment file, allowing us to modify
    the deployment based on user and cluster input. We'll be covering how this works
    in the next section.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Helm 通过让你将部署文件定义为 YAML 文件，并使用变量和`if`语句来解决这个问题。关键在于，你不会在部署文件中硬编码像镜像标签这样的内容；相反，你将其设定为一个变量（即`image`标签）。然后，在部署时，你为这些变量提供值，Helm
    会处理构建最终的 YAML 文件并将其发布到集群中。同时，Helm 还提供了在部署文件中定义 `if` 语句的能力，使我们能够根据用户和集群的输入修改部署。我们将在下一节中讲解这一工作原理。
- en: How does Helm work?
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Helm 是如何工作的？
- en: I have found that the best way to understand how Helm works is to start by understanding
    the directory structure, but first, we need to remember that most public Helm
    charts come as TGZ files, which is a compressed directory. Helm's first step is
    to download this file from a repository and decompress it into the directory structure
    shown in *Figure 17.1*. Note that we'll be covering more about public Helm charts
    later in this chapter under the *Customizing a public Helm chart* section, but
    in this section, we will cover what each of the four directories and files is
    for. We'll then tie them together and walk through how Helm uses them to deploy
    applications.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现理解 Helm 工作原理的最佳方法是从了解目录结构开始，但首先，我们需要记住，大多数公开的 Helm 图表都是以 TGZ 文件的形式发布的，这是一种压缩的目录结构。Helm
    的第一步是从仓库下载这个文件，并将其解压为图 17.1 中显示的目录结构。请注意，我们将在本章稍后的 *自定义公开 Helm 图表* 部分详细讨论公开 Helm
    图表，但在本节中，我们将介绍这四个目录和文件的作用。然后，我们将把它们联系在一起，并讲解 Helm 如何使用它们来部署应用程序。
- en: 'You can view an example of a Helm chart directory structure here:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里查看 Helm 图表目录结构的示例：
- en: '![Figure 17.1 – Helm chart directory structure'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 17.1 – Helm 图表目录结构'
- en: '](img/B18053_17_01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18053_17_01.jpg)'
- en: Figure 17.1 – Helm chart directory structure
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.1 – Helm 图表目录结构
- en: '`Chart.yaml` is a file that defines a chart as a whole, including the name
    of the chart, its version, a description, and more. You can find an example in
    *Figure 17.2* and at [https://github.com/PacktPublishing/Rancher-Deep-Dive/tree/main/ch17/hello-world/Chart.yaml](https://github.com/PacktPublishing/Rancher-Deep-Dive/tree/main/ch17/hello-world/Chart.yaml).
    As we can see, this file is mainly used to set the metadata for the chart, including
    the name of the chart, a description, keywords, sources, maintainers, and an icon.
    Rancher uses all this data to build its catalog page, which allows you to search
    by keyword and see icons for each chart in a repository. Rancher also expands
    this file using a set of annotations under the `catalog.cattle.io` path to add
    data such as `catalog.cattle.io/certified: rancher`, which tells the user that
    this is a certified chart that is covered under Rancher''s **service-level agreement**
    (**SLA**) and support. You can find an example of Rancher''s monitoring chart
    at [https://github.com/rancher/charts/blob/release-v2.6/charts/rancher-monitoring/100.1.2%2Bup19.0.3/Chart.yaml](https://github.com/rancher/charts/blob/release-v2.6/charts/rancher-monitoring/100.1.2%2Bup19.0.3/Chart.yaml).'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`Chart.yaml` 是一个定义整个图表的文件，包括图表的名称、版本、描述等内容。你可以在 *图 17.2* 和 [https://github.com/PacktPublishing/Rancher-Deep-Dive/tree/main/ch17/hello-world/Chart.yaml](https://github.com/PacktPublishing/Rancher-Deep-Dive/tree/main/ch17/hello-world/Chart.yaml)
    中找到一个示例。正如我们所见，这个文件主要用于设置图表的元数据，包括图表的名称、描述、关键字、来源、维护者和图标。Rancher 使用这些数据来构建其目录页面，允许你通过关键字搜索，并查看每个仓库中图表的图标。Rancher
    还通过在 `catalog.cattle.io` 路径下使用一组注解扩展这个文件，以添加如 `catalog.cattle.io/certified: rancher`
    的数据，这告诉用户这是一个经过认证的图表，且涵盖在 Rancher 的 **服务水平协议** (**SLA**) 和支持范围内。你可以在 [https://github.com/rancher/charts/blob/release-v2.6/charts/rancher-monitoring/100.1.2%2Bup19.0.3/Chart.yaml](https://github.com/rancher/charts/blob/release-v2.6/charts/rancher-monitoring/100.1.2%2Bup19.0.3/Chart.yaml)
    中找到 Rancher 监控图表的示例。'
- en: 'Have a look at the `Chart.yaml` example shown here:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看这里展示的 `Chart.yaml` 示例：
- en: '![Figure 17.2 – Chart.yaml example'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 17.2 – Chart.yaml 示例'
- en: '](img/B18053_17_02.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18053_17_02.jpg)'
- en: Figure 17.2 – Chart.yaml example
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.2 – Chart.yaml 示例
- en: The `templates` directory is one of the most critical parts of a Helm chart
    because this directory is where Helm stores all the template files for an application.
    It is important to note that all files inside this directory should be YAML files.
    Mixing other files into this directory has been known to cause weird bugs in Helm.
    By default, this directory is flat, with each object type being its own file—for
    example, you might have a file called `services.yaml` that includes all service
    records that need to be created, and another file called `ingress.yaml`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`templates` 目录是 Helm chart 中最关键的部分之一，因为该目录是 Helm 存储应用程序所有模板文件的地方。需要注意的是，该目录中的所有文件应该是
    YAML 文件。将其他类型的文件混入该目录已知会导致 Helm 出现奇怪的错误。默认情况下，该目录是扁平的，每种对象类型都有自己的文件——例如，您可能有一个名为
    `services.yaml` 的文件，其中包含所有需要创建的服务记录，还有另一个名为 `ingress.yaml` 的文件。'
- en: It is important to note that resources in a file need to be separated by three
    hyphens (`---`) per the YAML standard. This is great for simple deployments with
    one or two resources per type, but having all your resources in a single file
    can be challenging to manage at scale because the Helm/`kubectl` errors you get
    will have a line number; still, that line number will not be the line file in
    the file but will be the line number for that section. For example, suppose you
    have 10 ingresses defined in a single file, making the total file around 100 lines.
    Suppose you have an issue with the third ingress on *line 2* of that section.
    Your error message is only going to say `error located on line 2`, but you won't
    know which line 2\. Because of this, it is common to break up your template files
    into nested directories.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，文件中的资源需要根据 YAML 标准用三个连字符（`---`）分隔。这对于每种类型有一个或两个资源的简单部署非常好，但将所有资源放在一个文件中，在大规模管理时可能会遇到挑战，因为
    Helm/`kubectl` 的错误信息会指明行号，但该行号指的不是文件中的行号，而是该部分的行号。例如，假设您在一个文件中定义了 10 个 ingress，总文件大约有
    100 行。如果您在该部分的*第 2 行*遇到第三个 ingress 的问题，错误信息只会显示 `错误位于第 2 行`，但您不知道哪一行是第 2 行。由于这个原因，通常会将模板文件拆分到嵌套目录中。
- en: 'For example, you might create a folder for each resource type and then create
    a file for each resource (please see *Figure 17.3* for an example). Another example
    is breaking our folders down by component—we might create a folder for our frontend
    application and then have all resources that have made up that component: deployment,
    service, service account, **persistent volume claim** (**PVC**), and so on (please
    see *Figure 17.4*). I prefer sorting by component for any multi-tier application
    so that when I''m working on that component, everything for that component is
    in one spot. It also makes adding new components easy because I''ll just clone
    that whole folder, then go into the folder and start running find and replace
    commands but scoped to the folder.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以为每种资源类型创建一个文件夹，然后为每个资源创建一个文件（请参见*图 17.3*以了解示例）。另一个例子是按组件拆分我们的文件夹——我们可能为前端应用程序创建一个文件夹，然后将构成该组件的所有资源放在其中：部署、服务、服务帐户、**持久卷声明**（**PVC**）等（请参见*图
    17.4*）。我倾向于按组件对任何多层应用程序进行排序，这样当我在处理某个组件时，该组件的所有内容都会集中在一个地方。这样做还可以轻松添加新组件，因为我只需克隆整个文件夹，然后进入文件夹并开始运行查找和替换命令，作用范围限定在该文件夹内。
- en: 'In the following example, you can see that in this Helm chart we are grouping
    by component type, meaning that all deployments are in the same folder together,
    the same with all ingresses, and so on:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，您可以看到在这个 Helm chart 中，我们按组件类型进行分组，这意味着所有部署都在同一个文件夹中，所有 ingress 也在同一个文件夹中，依此类推：
- en: '![Figure 17.3 – Helm folder structure by resource type'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 17.3 – 按资源类型组织的 Helm 文件夹结构'
- en: '](img/B18053_17_03.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18053_17_03.jpg)'
- en: Figure 17.3 – Helm folder structure by resource type
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.3 – 按资源类型组织的 Helm 文件夹结构
- en: In the following example, you'll see that instead of grouping by *type*, we
    are grouping the different parts of the application. For example, we have the
    `apiserver` folder, which includes all resources that make up that component—that
    is, the deployment, ingress, and service. Then, we are repeating this process
    for each of these components of the application—that is, the frontend and the
    reporting service in this example. Personally, this is how I build Helm charts
    as I find it much easier to read, along with making it much easier to copy a component
    from one application to another. For example, I might reuse the frontend `frontend`
    folder into a new chart and start customizing it to fit the new application. The
    grouping-by-resource-type folder structure requires me to go into each folder
    and find all resources that make up that component. This process is, of course,
    error-prone as I might miss a resource.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，你会看到我们并不是按*类型*来分组，而是按应用程序的不同部分来分组。例如，我们有`apiserver`文件夹，它包含了构成该组件的所有资源——即部署、入口和服务。然后，我们对应用程序的每个组件重复这个过程——在这个例子中是前端和报告服务。就个人而言，我是这样构建Helm图表的，因为我觉得这种方式更容易阅读，同时也使得将一个组件从一个应用程序复制到另一个应用程序变得更加容易。例如，我可能会将前端的`frontend`文件夹重用到一个新的图表中，并开始根据新的应用程序进行定制。按资源类型分组的文件夹结构则要求我进入每个文件夹，查找构成该组件的所有资源。这个过程当然容易出错，因为我可能会漏掉某些资源。
- en: 'You can view the structure here:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里查看结构：
- en: '![Figure 17.4 – Helm folder structure by component'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '![图17.4 – 按组件分组的Helm文件夹结构'
- en: '](img/B18053_17_04.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18053_17_04.jpg)'
- en: Figure 17.4 – Helm folder structure by component
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.4 – 按组件分组的Helm文件夹结构
- en: 'The file you will be using the most as an end user is `values.yaml`; this is
    because this file sets the default values for the chart. Of course, this can range
    from setting global values such as the repository and the image pull policy to
    custom settings, such as setting database connection strings that will become
    a secret. We''ll be covering this file more in the next section, but the key thing
    to understand is that this file is the configuration file for the chart, and therefore
    having good documentation inside this file is very important. Also, this file
    is designed to be customizable, meaning you can add your own sections and settings.
    For example, you might add a section for each component—that is, for `frontend`,
    `apiserver`, `reporting`, and so on, as illustrated in the following screenshot:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最终用户，你将最常使用的文件是`values.yaml`；因为这个文件设置了图表的默认值。当然，这些值可以包括设置全局值，如仓库和镜像拉取策略，也可以包括自定义设置，如设置将成为秘密的数据库连接字符串。在下一节中，我们将更详细地介绍这个文件，但需要理解的关键点是，这个文件是图表的配置文件，因此在这个文件中有良好的文档记录非常重要。此外，这个文件是可定制的，意味着你可以添加自己的部分和设置。例如，你可以为每个组件添加一个部分——即`frontend`、`apiserver`、`reporting`等，如以下截图所示：
- en: '![Figure 17.5 – Helm custom values for each component'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '![图17.5 – 每个组件的Helm自定义值'
- en: '](img/B18053_17_05.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18053_17_05.jpg)'
- en: Figure 17.5 – Helm custom values for each component
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.5 – 每个组件的Helm自定义值
- en: Finally, the last important directory is `charts`. This directory greatly expands
    Helm's abilities by allowing you to define dependencies for other charts. For
    example, if we go back to our three-tier application and need a MySQL database
    as part of our deployment, we don't want to write and manage all the different
    resource files that a database running in Kubernetes might need when someone else
    has done all that work for us already. So, in the `charts` directory, we can add
    the official MySQL chart as a subfolder. This sub-folder is handled just like
    a normal Helm folder, meaning it has `Chart.yaml`, `templates`, `values.yaml`,
    and so on. You can, of course, define a dependency inside the `Chart.yaml` file
    using the `helm dependency` command, which handles downloading and updating subcharts
    in the `charts` directory, and this is the preferred method over manually merging
    changes from an external repository into your Helm chart, which—of course—is error-prone
    and time-consuming.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，另一个重要的目录是 `charts`。这个目录通过允许你为其他图表定义依赖关系，大大扩展了 Helm 的功能。例如，如果我们回到我们的三层应用程序，并且需要一个
    MySQL 数据库作为我们部署的一部分，我们不想编写和管理 Kubernetes 中运行的数据库可能需要的所有不同资源文件，特别是当别人已经为我们完成了这项工作时。因此，在
    `charts` 目录中，我们可以将官方 MySQL 图表作为子文件夹添加。这个子文件夹的处理方式与普通的 Helm 文件夹相同，这意味着它包含 `Chart.yaml`、`templates`、`values.yaml`
    等。你当然可以使用 `helm dependency` 命令在 `Chart.yaml` 文件中定义依赖关系，该命令负责下载和更新 `charts` 目录中的子图表，这是推荐的方法，而不是手动将外部仓库的更改合并到你的
    Helm 图表中，因为那样做容易出错且浪费时间。
- en: It is important to remember that if you need to customize a chart outside the
    `values.yaml` file—that is, changing a template file to work around a bug—then
    the `helm dependency` command will overwrite your changes, so it is recommended
    in that case to download the chart into that folder manually.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 需要记住的是，如果你需要在 `values.yaml` 文件之外自定义图表——即，更改模板文件以绕过一个 bug——那么 `helm dependency`
    命令会覆盖你的更改，因此建议在这种情况下手动将图表下载到该文件夹中。
- en: 'At this point, we understand the different parts that make up a Helm chart.
    Now, it''s time to walk through a deployment to understand how Helm works. This
    is what happens:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 到这个阶段，我们已经理解了组成 Helm 图表的不同部分。现在，是时候进行部署演练，理解 Helm 的工作原理。以下是发生的过程：
- en: Helm takes the `values.yaml` file and uses that as a base for its variables,
    at which point any command-line values using the `--set` option will overwrite
    those variables. The critical item here to understand is that any command-line
    setting overwrites anything with `values.yaml` and is only used for settings not
    set via the command-line options.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Helm 取 `values.yaml` 文件并将其作为变量的基础，此时，任何使用 `--set` 选项的命令行值将覆盖这些变量。这里需要理解的关键是，任何命令行设置都会覆盖
    `values.yaml` 中的内容，并且仅用于没有通过命令行选项设置的配置。
- en: Helm then starts processing the template files, replacing all variables with
    static values. As a part of this step, any `if` statements will be resolved.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Helm 然后开始处理模板文件，将所有变量替换为静态值。在这个步骤中，任何 `if` 语句都会被解析。
- en: 'Helm resolves any flow controls, including `if`/`else` statements. This allows
    you to add/remove sections of your configuration files using `if` statements.
    For example, you might wrap your ingress configuration in an `if` statement, allowing
    you to disable and enable it via the `values.yaml` file. Note that for ingresses,
    this is very common in most public charts. The other most common `if` statement
    is around Kubernetes versions as Kubernetes `if` statements, such as the following:
    if the Kubernetes version is v1.19 or below, use this section; else, use this
    section. This allows your chart to support a wide range of Kubernetes versions.
    You can see an example of this in action by looking at Rancher''s official chart
    template [https://github.com/rancher/rancher/blob/release/v2.6/chart/templates/ingress.yaml](https://github.com/rancher/rancher/blob/release/v2.6/chart/templates/ingress.yaml)
    or by looking at the following screenshot. I would also recommend looking at Helm''s
    official documentation, located at [https://helm.sh/docs/chart_template_guide/control_structures/](https://helm.sh/docs/chart_template_guide/control_structures/):'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Helm会解决所有的流程控制，包括`if`/`else`语句。这使得你可以使用`if`语句来添加或删除配置文件中的部分内容。例如，你可能会将入口配置包装在`if`语句中，从而可以通过`values.yaml`文件启用或禁用它。请注意，对于入口配置，这在大多数公共图表中非常常见。另一个最常见的`if`语句是关于Kubernetes版本的，例如Kubernetes的`if`语句，如下所示：如果Kubernetes版本是v1.19或以下，使用这个部分；否则，使用这个部分。这样可以使你的图表支持广泛的Kubernetes版本。你可以通过查看Rancher官方图表模板[https://github.com/rancher/rancher/blob/release/v2.6/chart/templates/ingress.yaml](https://github.com/rancher/rancher/blob/release/v2.6/chart/templates/ingress.yaml)来查看这一示例，或者查看以下截图。我还建议你查看Helm的官方文档，网址为[https://helm.sh/docs/chart_template_guide/control_structures/](https://helm.sh/docs/chart_template_guide/control_structures/)：
- en: '![Figure 17.6 – Rancher server Helm chart ingress example'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '![图17.6 – Rancher服务器Helm图表入口示例'
- en: '](img/B18053_17_06.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18053_17_06.jpg)'
- en: Figure 17.6 – Rancher server Helm chart ingress example
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.6 – Rancher服务器Helm图表入口示例
- en: Helm is ready to start making changes to your cluster, but it is important to
    note if you do an air-gapped deployment, it will simply output all the YAML files
    into a directory. You can find an example of this kind of deployment in the Rancher
    install documentation, located at [https://rancher.com/docs/rancher/v2.6/en/installation/other-installation-methods/air-gap/install-rancher/](https://rancher.com/docs/rancher/v2.6/en/installation/other-installation-methods/air-gap/install-rancher/).
    But if you are carrying out a standard install, Helm will start applying changes
    to the cluster in a set order, which can be found at [https://github.com/helm/helm/blob/release-3.0/pkg/releaseutil/kind_sorter.go#L27](https://github.com/helm/helm/blob/release-3.0/pkg/releaseutil/kind_sorter.go#L27).
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Helm已经准备好开始对你的集群进行更改，但需要注意的是，如果你进行的是隔离环境部署，它将只是将所有YAML文件输出到一个目录中。你可以在Rancher安装文档中找到这种部署的示例，文档位于[https://rancher.com/docs/rancher/v2.6/en/installation/other-installation-methods/air-gap/install-rancher/](https://rancher.com/docs/rancher/v2.6/en/installation/other-installation-methods/air-gap/install-rancher/)。但如果你执行的是标准安装，Helm将按照一定顺序开始对集群应用更改，这个顺序可以在[https://github.com/helm/helm/blob/release-3.0/pkg/releaseutil/kind_sorter.go#L27](https://github.com/helm/helm/blob/release-3.0/pkg/releaseutil/kind_sorter.go#L27)找到。
- en: 'The vital part of understanding this step is to understand that Helm uses a
    set of ownership labels/annotations to know which objects are under the control
    of that Helm release. Helm automatically applies an `app.kubernetes.io/managed-by:`
    label and `meta.helm.sh/release-name` and `meta.helm.sh/release-namespace` annotations
    to every resource it creates. If these are missing or different from Helm''s expectations,
    Helm will error out with an error message such as the one listed in the following
    screenshot. If you get this error, you have conflicts somewhere between charts—that
    is, two charts are trying to *own* the same object, which is not supported. To
    resolve this, you''ll need to update the labels and annotations to the correct
    release to modify your charts to prevent future conflicts:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 理解这一步骤的关键是理解Helm使用一组所有权标签/注解来确定哪些对象属于该Helm发布管理。Helm会自动为它创建的每个资源应用`app.kubernetes.io/managed-by:`标签和`meta.helm.sh/release-name`以及`meta.helm.sh/release-namespace`注解。如果这些标签或注解缺失或与Helm的预期不同，Helm会抛出错误，显示如以下截图所示的错误信息。如果你遇到此错误，说明你的图表之间存在冲突——即两个图表试图*拥有*相同的对象，这是不支持的。要解决这个问题，你需要更新标签和注解，确保它们与正确的发布版本匹配，修改你的图表以避免未来的冲突：
- en: '![Figure 17.7 – Helm ownership error message'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '![图17.7 – Helm所有权错误信息'
- en: '](img/B18053_17_07.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18053_17_07.jpg)'
- en: Figure 17.7 – Helm ownership error message
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.7 – Helm所有权错误信息
- en: After Helm has run the equivalent of `kubectl apply`, your application should
    start. You can run a post-install hook that runs a job or creates a ConfigMap/Secret
    with most charts running a job that might ping their application in a loop until
    it comes online, at which point the job will complete successfully. You can read
    more about this process in the official documentation at [https://helm.sh/docs/topics/charts_hooks/](https://helm.sh/docs/topics/charts_hooks/).
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Helm 执行相当于 `kubectl apply` 的操作后，你的应用程序应该会启动。你可以运行一个安装后钩子，执行一个作业或创建一个 ConfigMap/Secret，大多数图表会运行一个作业，可能会循环地
    ping 它们的应用程序，直到它上线为止，届时作业会成功完成。你可以在官方文档中阅读更多关于此过程的信息，链接：[https://helm.sh/docs/topics/charts_hooks/](https://helm.sh/docs/topics/charts_hooks/)。
- en: Now that we understand how an install works, the only other item is a Helm upgrade,
    which follows the same process but allows the object that already exists without
    erroring out. However, I usually recommend running Helm with the `helm upgrade
    –i` and `--install` flags, which allows you to use the same command to install
    and upgrade a Helm chart.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们理解了安装是如何工作的，唯一需要注意的就是 Helm 升级，它遵循相同的流程，但允许已存在的对象不会报错。然而，我通常建议使用 `helm upgrade
    –i` 和 `--install` 标志来运行 Helm，这样你可以使用相同的命令来安装和升级 Helm 图表。
- en: At this point, we understand how a Helm chart works. In the next section, we
    are going to create a Helm chart, and in the section after that, we are going
    to deploy the chart.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 到此，我们已经理解了 Helm 图表的工作原理。在接下来的部分，我们将创建一个 Helm 图表，在之后的部分中，我们将部署该图表。
- en: How do I create a Helm chart?
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我如何创建一个 Helm 图表？
- en: Helm makes creating charts very easy by using the `helm create mychart` command.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Helm 通过使用 `helm create mychart` 命令使创建图表变得非常简单。
- en: 'This command will create all base files needed to run a basic Helm chart. You
    can find an example output listed here:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将创建运行基本 Helm 图表所需的所有基础文件。你可以在此处查看示例输出：
- en: '![Figure 17.8 – helm create mychart command creates an example chart'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 17.8 – helm create mychart 命令创建一个示例图表'
- en: '](img/B18053_17_08.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18053_17_08.jpg)'
- en: Figure 17.8 – helm create mychart command creates an example chart
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.8 – helm create mychart 命令创建一个示例图表
- en: By default, this command will create a directory with the same name as the chart.
    When adding a Helm chart to a Git repository, it is widespread to rename this
    directory just `chart`, or if this application will have multiple charts from
    the same repository, you'll want to create a `charts` directory and move your
    new chart into that directory, keeping the name something easy to read/understand.
    This, of course, is a personal preference, with some teams choosing to move their
    Helm charts to their own repository.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，此命令将创建一个与图表同名的目录。当将 Helm 图表添加到 Git 仓库时，通常会将该目录重命名为 `chart`，或者如果该应用程序将来自同一仓库的多个图表，你可能想要创建一个
    `charts` 目录，并将新图表移动到该目录中，保持名称简洁易懂。当然，这只是个人偏好，一些团队选择将他们的 Helm 图表移动到自己的仓库中。
- en: At this point, your job is to start moving your deployment files into the template
    files. This is where you need to set all your variables that look like `{{ .Values.image.repository
    }}`. This variable suggests starting with the root `values` file. Then, go to
    the `image` section and grab the value for the repository `undertake` section.
    You can, of course, hardcode these values in the template file, but it is highly
    recommended to limit hardcoding values whenever possible and have the values defined
    in your `values.yaml` file. This is a must for any public Helm charts as there
    will be someone who needs to customize these values for their environment, and
    hardcoding the values just makes it harder for them. This is one of the reasons
    that default template files have a lot of settings defined. For example, the `nodeSelector`
    and `tolerations` settings are set up, even though a good number of people will
    never use these settings.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一点，你的工作是将部署文件移到模板文件中。这是你需要设置所有类似 `{{ .Values.image.repository }}` 的变量的地方。这个变量意味着从根
    `values` 文件开始。然后，进入 `image` 部分，获取仓库 `undertake` 部分的值。当然，你可以在模板文件中硬编码这些值，但强烈建议尽可能避免硬编码值，并将这些值定义在
    `values.yaml` 文件中。这对于任何公共 Helm 图表都是必须的，因为总会有人需要根据他们的环境自定义这些值，而硬编码这些值只会让他们更加困难。这也是默认模板文件有很多设置已定义的原因之一。例如，`nodeSelector`
    和 `tolerations` 设置已经配置好，尽管有相当多的人根本不会使用这些设置。
- en: Of course, the default template files do not cover all the different types of
    resources, so you might need to create your own. The process that I usually follow
    is to find a public chart with the resource type that I need, then simply copy
    and paste and modify it to suit my needs. Of course, as you create your chart,
    you'll need to test it, which is what we'll be covering in the next section.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，默认模板文件并没有涵盖所有不同类型的资源，因此你可能需要创建自己的资源文件。我通常遵循的过程是找到一个包含所需资源类型的公共 Helm 图表，然后简单地复制粘贴并修改它以满足我的需求。当然，在你创建图表时，你还需要对其进行测试，这将在下一节中讲解。
- en: Deploying a Helm chart
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署 Helm 图表
- en: As we covered in the last section, now that we have created our Helm chart,
    we need to deploy it to our cluster. This is done in two different ways, with
    the first one being a local chart and the second one being a remote chart—both
    of which we'll be covering in this section.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上一节中所讲，现在我们已经创建了 Helm 图表，需要将其部署到集群中。这可以通过两种不同的方式进行，第一种是本地图表，第二种是远程图表——我们将在本节中讨论这两种方式。
- en: 'Before publishing it, we need to have the chart files downloaded for local
    Helm charts, which are commonly used while testing a new chart. You''ll run a
    command such as `helm upgrade --install mychart ./chart --namespace mynamespace
    -f ./chart/values.yaml`. The important part of this command is the `./chart/`
    part, which tells Helm where the chart is located—in this example, it can be found
    in the `./chart/` directory. This, of course, should be the root directory of
    the chart—that is, where the `chart.yaml` file, `values.yaml` file, and so on
    are located. This kind of install is also common for use in **continuous integration/continuous
    deployment** (**CI/CD**) pipelines where you want to use Helm to templatize your
    deployments but don''t need to publish them for public/end-user consumption. An
    example of this is being used in the Drone pipeline shown in the following screenshot.
    As you can see, it is using an overwrite value of the Drone build number to set
    the image tag and pass the ingress host as a variable set at the pipeline level:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在发布之前，我们需要下载本地 Helm 图表的文件，这些文件在测试新图表时通常会用到。你会运行类似 `helm upgrade --install mychart
    ./chart --namespace mynamespace -f ./chart/values.yaml` 的命令。此命令的关键部分是 `./chart/`，它告诉
    Helm 图表所在的位置——在此示例中，它位于 `./chart/` 目录中。这个目录应该是图表的根目录，也就是 `chart.yaml` 文件、`values.yaml`
    文件等所在的地方。这种安装方式在**持续集成/持续部署**（**CI/CD**）流水线中也很常见，在这种场景下，你希望使用 Helm 来模板化部署，但不需要将它们发布给公众或最终用户使用。一个例子是在以下截图中显示的
    Drone 流水线中使用的。正如你所看到的，它使用了 Drone 构建号的覆盖值来设置镜像标签，并将 Ingress 主机作为流水线级别设置的变量传递：
- en: '![Figure 17.9 – Helm install locally in a Drone pipeline'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 17.9 – 在 Drone 流水线中本地安装 Helm'
- en: '](img/B18053_17_09.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18053_17_09.jpg)'
- en: Figure 17.9 – Helm install locally in a Drone pipeline
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.9 – 在 Drone 流水线中本地安装 Helm
- en: 'For example, consider the Drone pipeline using the Helm command listed in *Figure
    17.9*. For this step, I''m using a custom image that I have created called `supporttools/kube-builder`,
    which handles setting up `kubeconfig` and includes some standard tools such as
    `kubectl` and `helm`. You can see an illustration of this in the following screenshot:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑使用*图 17.9*所示的 Helm 命令的 Drone 流水线。在此步骤中，我使用的是一个我自己创建的自定义镜像，名为`supporttools/kube-builder`，它处理设置
    `kubeconfig` 并包括一些标准工具，如`kubectl`和`helm`。你可以在以下截图中看到它的示意图：
- en: '![Figure 17.10 – kube-builder example Drone step'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 17.10 – kube-builder 示例 Drone 步骤'
- en: '](img/B18053_17_10.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18053_17_10.jpg)'
- en: Figure 17.10 – kube-builder example Drone step
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.10 – kube-builder 示例 Drone 步骤
- en: You can find the complete example pipeline at [https://github.com/PacktPublishing/Rancher-Deep-Dive/tree/main/ch17/drone-pipeline-example](https://github.com/PacktPublishing/Rancher-Deep-Dive/tree/main/ch17/drone-pipeline-example).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [https://github.com/PacktPublishing/Rancher-Deep-Dive/tree/main/ch17/drone-pipeline-example](https://github.com/PacktPublishing/Rancher-Deep-Dive/tree/main/ch17/drone-pipeline-example)
    找到完整的示例流水线。
- en: The other Helm deployment type is a remote chart. The main difference is the
    fact that you'll be pointing Helm to a repository (Git or `helm repo update` command.
    Now, in the next section, we'll be covering how to customize a public Helm chart.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种 Helm 部署类型是远程图表。主要区别在于你将指向一个存储库（Git 或 `helm repo update` 命令）。在下一节中，我们将讲解如何自定义公共
    Helm 图表。
- en: Customizing a public Helm chart
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义公共 Helm 图表
- en: One of the tasks that everyone has to do someday when working with public Helm
    charts is to customize them to add some feature or setting that you need, or—in
    a more likely scenario—fix a bug. For example, some public Helm charts don't include
    the required settings to support **Pod Security Policy** (**PSP**) as enterprises
    and high-secure environments are mainly the only ones that use PSPs in the first
    place. It's something that some community members just don't test. There are,
    of course, many ways to make these kinds of changes to a public Helm chart.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用公共Helm chart时，最终每个人都必须做的一项任务就是根据需要自定义它们，添加一些功能或设置，或者——在更常见的情况下——修复一个bug。例如，一些公共Helm
    charts并没有包含支持**Pod安全策略**（**PSP**）所需的设置，因为企业和高安全性环境基本上是唯一使用PSP的地方。这是一些社区成员没有进行测试的内容。当然，有很多方法可以对公共Helm
    chart进行这些修改。
- en: But the primary way that I recommend is to fork the GitHub repository, create
    a new branch, and apply any needed changes. In this example, you'll want to add
    a section in the deployment to configure the `securityContext` section of the
    deployment(s) files and add the required `rbac.enable=false` and/or `psp.enabled=false`
    in the `values.yaml` file to allow users to enable and disable this feature as
    needed. Then, once you have made these changes, you'll want to create a **pull
    request** (**PR**) to merge this into the upstream repository. But in the meantime,
    you can deploy using the Helm local install option.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 但我推荐的主要方法是：先fork GitHub仓库，创建一个新分支，并应用任何必要的更改。在这个例子中，你需要在部署中添加一个部分，以配置部署文件中的`securityContext`部分，并在`values.yaml`文件中添加所需的`rbac.enable=false`和/或`psp.enabled=false`，以便用户根据需要启用或禁用此功能。然后，一旦你做出了这些更改，你需要创建一个**pull
    request**（**PR**）将其合并到上游仓库中。在此期间，你可以使用Helm的本地安装选项进行部署。
- en: The idea is to give back to the open source community when the PR is merged.
    Switching back to the public chart is a simple edit to the Helm command by swapping
    out the local path of the repository name. Of course, make sure you are updating
    documentation and command examples as part of your PR request.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这个想法是在PR合并后回馈给开源社区。切换回公共图表只需要通过替换本地路径和仓库名称来简单编辑Helm命令。当然，确保在PR请求中更新文档和命令示例。
- en: Summary
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter went over what Helm is and how it takes template files along with
    a set of values to create final deployment files that Helm can publish to a cluster.
    We then dove into creating a Helm chart and some of the best practices for structuring
    your chart for ease of use. We then went over how to install our newly created
    chart and integrate this process into a Drone pipeline. We then covered the topic
    of public Helm charts and how to customize them.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了Helm是什么，它如何将模板文件与一组值结合，创建Helm可以发布到集群的最终部署文件。然后我们深入探讨了如何创建一个Helm chart以及如何为方便使用而构建chart的最佳实践。接着，我们讲解了如何安装我们新创建的chart，并将这一过程集成到Drone管道中。最后，我们讨论了公共Helm
    chart的主题，以及如何自定义它们。
- en: The next chapter will cover cluster resource management and capacity planning;
    as we all know, running **development-operations** (**DevOps**) workloads can
    quickly get out of control in terms of resource spending, and in the next chapter
    will cover how to monitor and control costs in Kubernetes.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将涵盖集群资源管理和容量规划；我们都知道，运行**开发运维**（**DevOps**）工作负载时，资源消耗很容易失控，下一章将介绍如何在Kubernetes中监控和控制成本。

["```\n$ kubectl describe service/node-js-labels\n```", "```\nNODE_JS_PORT_80_TCP=tcp://10.0.103.215:80\nNODE_JS_PORT=tcp://10.0.103.215:80\nNODE_JS_PORT_80_TCP_PROTO=tcp\nNODE_JS_PORT_80_TCP_PORT=80\nNODE_JS_SERVICE_HOST=10.0.103.215\nNODE_JS_PORT_80_TCP_ADDR=10.0.103.215\nNODE_JS_SERVICE_PORT=80\n```", "```\napiVersion: v1 \nkind: Service \nmetadata: \n  name: node-js-internal \n  labels: \n    name: node-js-internal \nspec: \n  ports: \n  - port: 80 \n  selector: \n    name: node-js \n```", "```\n$ kubectl create -f nodejs-service-internal.yaml\n$ kubectl get services -l name=node-js-internal\n```", "```\n$ kubectl exec node-js-pod -- curl <node-js-internal IP>\n```", "```\napiVersion: v1 \nkind: Service \nmetadata: \n  name: node-js-nodeport \n  labels: \n    name: node-js-nodeport \nspec: \n  ports: \n  - port: 80 \n    nodePort: 30001 \n  selector: \n    name: node-js \n  type: NodePort \n```", "```\n$ kubectl create -f nodejs-service-nodeport.yaml\n```", "```\nhttp://<Minoion IP Address>:<NodePort>/\n```", "```\napiVersion: v1 \nkind: ReplicationController \nmetadata: \n  name: node-js-90 \n  labels: \n    name: node-js-90 \nspec: \n  replicas: 3 \n  selector: \n    name: node-js-90 \n  template: \n    metadata: \n      labels: \n        name: node-js-90 \n    spec: \n      containers: \n      - name: node-js-90 \n        image: jonbaier/node-express-info:latest \n        ports: \n        - containerPort: 80 \napiVersion: v1 \nkind: Service \nmetadata: \n  name: node-js-90 \n  labels: \n    name: node-js-90 \nspec: \n  type: LoadBalancer \n  ports: \n  - port: 90 \n    targetPort: 80 \n  selector: \n    name: node-js-90\n```", "```\nhttp://<external service IP>:90/\n```", "```\napiVersion: v1 \nkind: ReplicationController \nmetadata: \n  name: node-js-multi \n  labels: \n    name: node-js-multi \nspec: \n  replicas: 3 \n  selector: \n    name: node-js-multi \n  template: \n    metadata: \n      labels: \n        name: node-js-multi \n    spec:\n      containers: \n      - name: node-js-multi \n        image: jonbaier/node-express-multi:latest \n        ports: \n        - containerPort: 80 \n        - containerPort: 8888\napiVersion: v1 \nkind: Service \nmetadata: \n  name: node-js-multi \n  labels: \n    name: node-js-multi \nspec: \n  type: LoadBalancer \n  ports: \n  - name: http \n    protocol: TCP \n    port: 80 \n  - name: fake-admin-http \n    protocol: TCP \n    port: 8888 \n  selector: \n    name: node-js-multi \n```", "```\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: name-based-hosting\nspec:\n  rules:\n  - host: example01.foo.com\n    http:\n      paths:\n      - backend:\n          serviceName: sevice01\n          servicePort: 8080\n  - host: example02.foo.com\n    http:\n      paths:\n      - backend:\n          serviceName: sevice02\n          servicePort: 8080\n```", "```\n$ kubectl get rc --namespace=kube-system\n```", "```\napiVersion: v1\nkind: ReplicationController\nmetadata:\n  name: whale-ingress-a\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: whale-ingress-a\n    spec:\n      containers:\n      - name: sayhey\n        image: jonbaier/httpwhalesay:0.1\n        command: [\"node\", \"index.js\", \"Whale Type A, Here.\"]\n        ports:\n        - containerPort: 80\n---\napiVersion: v1\nkind: ReplicationController\nmetadata:\n  name: whale-ingress-b\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: whale-ingress-b\n    spec:\n      containers:\n      - name: sayhey\n        image: jonbaier/httpwhalesay:0.1\n        command: [\"node\", \"index.js\", \"Hey man, It's Whale B, Just\n        Chillin'.\"]\n        ports:\n        - containerPort: 80\n```", "```\napiVersion: v1\nkind: Service\nmetadata:\n  name: whale-svc-a\n  labels:\n    app: whale-ingress-a\nspec:\n  type: NodePort\n  ports:\n  - port: 80\n    nodePort: 30301\n    protocol: TCP\n    name: http\n  selector:\n    app: whale-ingress-a\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: whale-svc-b\n  labels:\n    app: whale-ingress-b\nspec:\n  type: NodePort\n  ports:\n  - port: 80\n    nodePort: 30284\n    protocol: TCP\n    name: http\n  selector:\n    app: whale-ingress-b\n---\napiVersion: v1\nkind: Service\nmetadata:\n name: whale-svc-default\n labels:\n   app: whale-ingress-a\nspec:\n  type: NodePort\n  ports:\n  - port: 80\n    nodePort: 30302\n    protocol: TCP\n    name: http\n  selector:\n    app: whale-ingress-a\n```", "```\n$ kubectl create -f whale-rcs.yaml $ kubectl create -f whale-svcs.yaml\n```", "```\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: whale-ingress\nspec:\n  rules:\n  - host: a.whale.hey\n    http:\n      paths:\n      - path: /\n        backend:\n          serviceName: whale-svc-a\n          servicePort: 80\n  - host: b.whale.hey\n    http:\n      paths:\n      - path: /\n        backend:\n          serviceName: whale-svc-b\n          servicePort: 80\n```", "```\n$ kubectl get ingress\n```", "```\n$ curl --resolve a.whale.hey:80:130.211.24.177 http://a.whale.hey/\n```", "```\n$ curl --resolve b.whale.hey:80:130.211.24.177 http://b.whale.hey/\n```", "```\n$ kubectl get endpoints\n```", "```\nNAME               ENDPOINTS\nhttp-pd            10.244.2.29:80,10.244.2.30:80,10.244.3.16:80\nkubernetes         10.240.0.2:443\nnode-js            10.244.0.12:80,10.244.2.24:80,10.244.3.13:80\n```", "```\napiVersion: v1 \nkind: Service \nmetadata: \n  name: custom-service \nspec: \n  type: LoadBalancer \n  ports: \n  - name: http \n    protocol: TCP \n    port: 80\n```", "```\napiVersion: v1 \nkind: Endpoints \nmetadata: \n  name: custom-service \nsubsets: \n- addresses: \n  - ip: <X.X.X.X> \n  ports: \n    - name: http \n      port: 80 \n      protocol: TCP \n```", "```\n$ kubectl describe service/custom-service\n```", "```\napiVersion: v1 \nkind: Service \nmetadata: \n  name: node-js-none \n  labels: \n    name: node-js-none \nspec: \n  clusterIP: None \n  ports: \n  - port: 80 \n  selector: \n    name: node-js \n```", "```\n$ kubectl exec node-js-pod -- curl node-js-none\n```", "```\n$ kubeadm init --feature-gates=CoreDNS=true\n```", "```\napiVersion: v1 \nkind: Namespace \nmetadata: \n  name: test\n```", "```\n$ kubectl create -f test-ns.yaml\n```", "```\napiVersion: v1 \nkind: Pod \nmetadata: \n  name: utility \n  namespace: test \nspec: \n  containers: \n  - image: debian:latest \n    command: \n      - sleep \n      - \"3600\" \n    name: utility \n```", "```\n$ kubectl describe namespace/test\n```", "```\napiVersion: v1 \nkind: ResourceQuota \nmetadata: \n  name: test-quotas \n  namespace: test \nspec: \n  hard:  \n    pods: 3 \n    services: 1 \n    replicationcontrollers: 1 \n```", "```\n$ kubectl create -f quota.yaml\n```", "```\n$ kubectl describe namespace/test\n```", "```\napiVersion: v1 \nkind: ReplicationController \nmetadata: \n  name: busybox-ns \n  namespace: test \n  labels: \n    name: busybox-ns \nspec: \n  replicas: 4 \n  selector: \n    name: busybox-ns \n  template: \n    metadata: \n      labels: \n        name: busybox-ns \n    spec: \n      containers: \n      - name: busybox-ns \n        image: busybox \n        command: \n          - sleep \n          - \"3600\" \n```", "```\nkubectl describe rc/busybox-ns\n```", "```\n$ kubectl describe rc/busybox-ns --namespace=test\n```"]
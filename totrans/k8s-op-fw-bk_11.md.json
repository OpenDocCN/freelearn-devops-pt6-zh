["```\noperator-sdk create api --group operator --version v1alpha1 --kind NginxOperator --resource --controller\n```", "```\nfunc (r *NginxOperatorReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {\n```", "```\n  if operatorCR.Spec.Port != nil {\n```", "```\n    deployment.Spec.Template.Spec.Containers[0].Ports[0].ContainerPort = *operatorCR.Spec.Port\n```", "```\n  }\n```", "```\nfunc (r *NginxOperatorReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {\n```", "```\n  if len(operatorCR.Spec.Ports) > 0 {\n```", "```\n    deployment.Spec.Template.Spec.Containers[0].Ports = operatorCR.Spec.Ports\n```", "```\n  }\n```", "```\n// NginxOperatorSpec defines the desired state of NginxOperator\n```", "```\ntype NginxOperatorSpec struct {\n```", "```\n   // Port is the port number to expose on the Nginx Pod\n```", "```\n   Port *int32 `json:\"port,omitempty\"`\n```", "```\n   // Replicas is the number of deployment replicas to scale\n```", "```\n   Replicas *int32 `json:\"replicas,omitempty\"`\n```", "```\n   // ForceRedploy is any string, modifying this field instructs\n```", "```\n   // the Operator to redeploy the Operand\n```", "```\n   ForceRedploy string `json:\"forceRedploy,omitempty\"`\n```", "```\n}\n```", "```\n// NginxOperatorSpec defines the desired state of NginxOperator\n```", "```\ntype NginxOperatorSpec struct {\n```", "```\n   // Ports defines the ContainerPorts exposed on the Nginx Pod\n```", "```\n   Ports []v1.ContainerPort `json:\"ports,omitempty\"\"`\n```", "```\n   // Replicas is the number of deployment replicas to scale\n```", "```\n   Replicas *int32 `json:\"replicas,omitempty\"`\n```", "```\n   // ForceRedploy is any string, modifying this field instructs\n```", "```\n   // the Operator to redeploy the Operand\n```", "```\n   ForceRedploy string `json:\"forceRedploy,omitempty\"`\n```", "```\n}\n```", "```\n$ operator-sdk create api --group operator --version v1alpha2 --kind NginxOperator --resource\nCreate Controller [y/n]\nn\nWriting kustomize manifests for you to edit...\nWriting scaffold for you to edit...\napi/v1alpha2/nginxoperator_types.go\nUpdate dependencies:\n$ go mod tidy\nRunning make:\n$ make generate\n/Users/mdame/nginx-operator/bin/controller-genobject:headerFile=\"hack/boilerplate.go.txt\" paths=\"./...\"\nNext: implement your new API and generate the manifests (e.g. CRDs,CRs) with:\n$ make manifests\n```", "```\npackage v1alpha2\n```", "```\nimport (\n```", "```\n   v1 \"k8s.io/api/core/v1\"\n```", "```\n   metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n```", "```\n)\n```", "```\nconst (\n```", "```\n   ReasonCRNotAvailable          = \"OperatorResourceNotAvailable\"\n```", "```\n   ReasonDeploymentNotAvailable  = \"OperandDeploymentNotAvailable\"\n```", "```\n   ReasonOperandDeploymentFailed = \"OperandDeploymentFailed\"\n```", "```\n   ReasonSucceeded               = \"OperatorSucceeded\"\n```", "```\n)\n```", "```\n// NginxOperatorSpec defines the desired state of NginxOperator\n```", "```\ntype NginxOperatorSpec struct {\n```", "```\n   // INSERT ADDITIONAL SPEC FIELDS - desired state of cluster\n```", "```\n   // Important: Run \"make\" to regenerate code after modifying this file\n```", "```\n   // Ports defines the ContainerPorts exposed on the Nginx Pod\n```", "```\n   Ports []v1.ContainerPort `json:\"ports,omitempty\"\"`\n```", "```\n   // Replicas is the number of deployment replicas to scale\n```", "```\n   Replicas *int32 `json:\"replicas,omitempty\"`\n```", "```\n   // ForceRedploy is any string, modifying this field instructs\n```", "```\n   // the Operator to redeploy the Operand\n```", "```\n   ForceRedploy string `json:\"forceRedploy,omitempty\"`\n```", "```\n}\n```", "```\n// NginxOperatorStatus defines the observed state of NginxOperator\n```", "```\ntype NginxOperatorStatus struct {\n```", "```\n   // Conditions is the list of the most recent status condition updates\n```", "```\n   Conditions []metav1.Condition `json:\"conditions\"`\n```", "```\n}\n```", "```\n//+kubebuilder:object:root=true\n```", "```\n//+kubebuilder:subresource:status\n```", "```\n//+kubebuilder:storageversion\n```", "```\n// NginxOperator is the Schema for the nginxoperators API\n```", "```\ntype NginxOperator struct {\n```", "```\n   metav1.TypeMeta   `json:\",inline\"`\n```", "```\n   metav1.ObjectMeta `json:\"metadata,omitempty\"`\n```", "```\n   Spec   NginxOperatorSpec   `json:\"spec,omitempty\"`\n```", "```\n   Status NginxOperatorStatus `json:\"status,omitempty\"`\n```", "```\n}\n```", "```\n//+kubebuilder:object:root=true\n```", "```\n// NginxOperatorList contains a list of NginxOperator\n```", "```\ntype NginxOperatorList struct {\n```", "```\n   metav1.TypeMeta `json:\",inline\"`\n```", "```\n   metav1.ListMeta `json:\"metadata,omitempty\"`\n```", "```\n   Items           []NginxOperator `json:\"items\"`\n```", "```\n}\n```", "```\nfunc init() {\n```", "```\n   SchemeBuilder.Register(&NginxOperator{}, &NginxOperatorList{})\n```", "```\n}\n```", "```\n//+kubebuilder:object:root=true\n```", "```\n//+kubebuilder:subresource:status\n```", "```\n//+kubebuilder:storageversion\n```", "```\n// NginxOperator is the Schema for the nginxoperators API\n```", "```\ntype NginxOperator struct {\n```", "```\n   metav1.TypeMeta   `json:\",inline\"`\n```", "```\n   metav1.ObjectMeta `json:\"metadata,omitempty\"`\n```", "```\n   Spec   NginxOperatorSpec   `json:\"spec,omitempty\"`\n```", "```\n   Status NginxOperatorStatus `json:\"status,omitempty\"`\n```", "```\n}\n```", "```\n$ make manifests\n$ git status\nOn branch master\nChanges not staged for commit:\n      modified:   config/crd/bases/operator.example.com_nginxoperators.yaml\n```", "```\napiVersion: apiextensions.k8s.io/v1\n```", "```\nkind: CustomResourceDefinition\n```", "```\nmetadata:\n```", "```\n  annotations:\n```", "```\n    controller-gen.kubebuilder.io/version: v0.7.0\n```", "```\n  creationTimestamp: null\n```", "```\n  name: nginxoperators.operator.example.com\n```", "```\nspec:\n```", "```\n  group: operator.example.com\n```", "```\n  names:\n```", "```\n    kind: NginxOperator\n```", "```\n    listKind: NginxOperatorList\n```", "```\n    plural: nginxoperators\n```", "```\n    singular: nginxoperator\n```", "```\n  scope: Namespaced\n```", "```\n  versions:\n```", "```\n  - name: v1alpha1\n```", "```\n    schema:\n```", "```\n      openAPIV3Schema:\n```", "```\n      ...\n```", "```\n    served: true\n```", "```\n    storage: false\n```", "```\n    subresources:\n```", "```\n      status: {}\n```", "```\n  - name: v1alpha2\n```", "```\n    schema:\n```", "```\n      openAPIV3Schema:\n```", "```\n      ...\n```", "```\n    served: true\n```", "```\n    storage: true\n```", "```\n    subresources:\n```", "```\n      status: {}\n```", "```\npackage conversion\n```", "```\nimport \"k8s.io/apimachinery/pkg/runtime\"\n```", "```\n// Convertible defines capability of a type to convertible i.e. it can be converted to/from a hub type.\n```", "```\ntype Convertible interface {\n```", "```\n      runtime.Object\n```", "```\n      ConvertTo(dst Hub) error\n```", "```\n      ConvertFrom(src Hub) error\n```", "```\n}\n```", "```\n// Hub marks that a given type is the hub type for conversion. This means that\n```", "```\n// all conversions will first convert to the hub type, then convert from the hub\n```", "```\n// type to the destination type. All types besides the hub type should implement\n```", "```\n// Convertible.\n```", "```\ntype Hub interface {\n```", "```\n      runtime.Object\n```", "```\n      Hub()\n```", "```\n}\n```", "```\npackage v1alpha2\n```", "```\n// Hub defines v1alpha2 as the hub version\n```", "```\nfunc (*NginxOperator) Hub() {}\n```", "```\npackage v1alpha1\n```", "```\nimport (\n```", "```\n   \"github.com/sample/nginx-operator/api/v1alpha2\"\n```", "```\n   v1 \"k8s.io/api/core/v1\"\n```", "```\n   \"k8s.io/utils/pointer\"\n```", "```\n   \"sigs.k8s.io/controller-runtime/pkg/conversion\"\n```", "```\n)\n```", "```\n// ConvertTo converts v1alpha1 to v1alpha2\n```", "```\nfunc (src *NginxOperator) ConvertTo(dst conversion.Hub) error {\n```", "```\n   return nil\n```", "```\n}\n```", "```\n// ConvertFrom converts v1alpha2 to v1alpha1\n```", "```\nfunc (dst *NginxOperator) ConvertFrom(src conversion.Hub) error {\n```", "```\n   return nil\n```", "```\n}\n```", "```\n// ConvertTo converts v1alpha1 to v1alpha2\n```", "```\nfunc (src *NginxOperator) ConvertTo(dst conversion.Hub) error {\n```", "```\n   objV1alpha2 := dst.(*v1alpha2.NginxOperator)\n```", "```\n   objV1alpha2.ObjectMeta = src.ObjectMeta\n```", "```\n   objV1alpha2.Status.Conditions = src.Status.Conditions\n```", "```\n   if src.Spec.Replicas != nil {\n```", "```\n      objV1alpha2.Spec.Replicas = src.Spec.Replicas\n```", "```\n   }\n```", "```\n   if len(src.Spec.ForceRedploy) > 0 {\n```", "```\n      objV1alpha2.Spec.ForceRedploy = src.Spec.ForceRedploy\n```", "```\n   }\n```", "```\n   if src.Spec.Port != nil {\n```", "```\n      objV1alpha2.Spec.Ports = make([]v1.ContainerPort, 0, 1)\n```", "```\n      objV1alpha2.Spec.Ports = append(objV1alpha2.Spec.Ports,\n```", "```\n        v1.ContainerPort{ContainerPort: *src.Spec.Port})\n```", "```\n   }\n```", "```\n   return nil\n```", "```\n}\n```", "```\n// ConvertFrom converts v1alpha2 to v1alpha1\n```", "```\nfunc (dst *NginxOperator) ConvertFrom(src conversion.Hub) error {\n```", "```\n   objV1alpha2 := src.(*v1alpha2.NginxOperator)\n```", "```\n   dst.ObjectMeta = objV1alpha2.ObjectMeta\n```", "```\n   dst.Status.Conditions = objV1alpha2.Status.Conditions\n```", "```\n   if objV1alpha2.Spec.Replicas != nil {\n```", "```\n      dst.Spec.Replicas = objV1alpha2.Spec.Replicas\n```", "```\n   }\n```", "```\n   if len(objV1alpha2.Spec.ForceRedploy) > 0 {\n```", "```\n      dst.Spec.ForceRedploy = objV1alpha2.Spec.ForceRedploy\n```", "```\n   }\n```", "```\n   if len(objV1alpha2.Spec.Ports) > 0 {\n```", "```\n      dst.Spec.Port = pointer.Int32(objV1alpha2.Spec.Ports[0].ContainerPort)\n```", "```\n   }\n```", "```\n   return nil\n```", "```\n}\n```", "```\n$ operator-sdk create webhook --conversion --version v1alpha2 --kind NginxOperator --group operator --force\nWriting kustomize manifests for you to edit...\nWriting scaffold for you to edit...\napi/v1alpha2/nginxoperator_webhook.go\nWebhook server has been set up for you.\nYou need to implement the conversion.Hub and conversion.Convertible interfaces for your CRD types.\nUpdate dependencies:\n$ go mod tidy\nRunning make:\n$ make generate\n/Users/mdame/nginx-operator/bin/controller-gen object:headerFile=\"hack/boilerplate.go.txt\" paths=\"./...\"\nNext: implement your new Webhook and generate the manifests with:\n$ make manifests\n```", "```\nresources:\n```", "```\n- bases/operator.example.com_nginxoperators.yaml\n```", "```\n#+kubebuilder:scaffold:crdkustomizeresource\n```", "```\npatchesStrategicMerge:\n```", "```\n# [WEBHOOK] To enable webhook, uncomment all the sections with [WEBHOOK] prefix.\n```", "```\n# patches here are for enabling the conversion webhook for each CRD\n```", "```\n- patches/webhook_in_nginxoperators.yaml\n```", "```\n#+kubebuilder:scaffold:crdkustomizewebhookpatch\n```", "```\n# [CERTMANAGER] To enable cert-manager, uncomment all the sections with [CERTMANAGER] prefix.                            # patches here are for enabling the CA injection for each CRD\n```", "```\n- patches/cainjection_in_nginxoperators.yaml\n```", "```\n#+kubebuilder:scaffold:crdkustomizecainjectionpatch \n```", "```\n# the following config is for teaching kustomize how to do kustomization for CRDs. \n```", "```\nconfigurations:\n```", "```\n- kustomizeconfig.yaml\n```", "```\n# The following patch enables a conversion webhook for the CRD\n```", "```\napiVersion: apiextensions.k8s.io/v1\n```", "```\nkind: CustomResourceDefinition\n```", "```\nmetadata:\n```", "```\n  name: nginxoperators.operator.example.com\n```", "```\nspec:\n```", "```\n  conversion:\n```", "```\n    strategy: Webhook\n```", "```\n    webhook:\n```", "```\n      clientConfig:\n```", "```\n        service:\n```", "```\n          namespace: system\n```", "```\n          name: webhook-service\n```", "```\n          path: /convert\n```", "```\n      conversionReviewVersions:\n```", "```\n       - v1\n```", "```\n      - v1alpha1\n```", "```\n      - v1alpha2\n```", "```\n...\n```", "```\nbases:\n```", "```\n- ../crd\n```", "```\n- ../rbac\n```", "```\n- ../manager\n```", "```\n# [WEBHOOK] To enable webhook, uncomment all the sections with [WEBHOOK] prefix including the one in\n```", "```\n# crd/kustomization.yaml\n```", "```\n- ../webhook\n```", "```\n# [CERTMANAGER] To enable cert-manager, uncomment all sections with 'CERTMANAGER'. 'WEBHOOK' components are required.\n```", "```\n- ../certmanager\n```", "```\n# [PROMETHEUS] To enable prometheus monitor, uncomment all sections with 'PROMETHEUS'.\n```", "```\n- ../prometheus\n```", "```\n...\n```", "```\n# [WEBHOOK] To enable webhook, uncomment all the sections with [WEBHOOK] prefix including the one in\n```", "```\n# crd/kustomization.yaml\n```", "```\n- manager_webhook_patch.yaml\n```", "```\n# [CERTMANAGER] To enable cert-manager, uncomment all sections with 'CERTMANAGER'.\n```", "```\n# Uncomment 'CERTMANAGER' sections in crd/kustomization.yaml to enable the CA injection in the admission webhooks.\n```", "```\n# 'CERTMANAGER' needs to be enabled to use ca injection\n```", "```\n#- webhookcainjection_patch.yaml\n```", "```\n# the following config is for teaching kustomize how to do var substitution\n```", "```\nvars:\n```", "```\n# [CERTMANAGER] To enable cert-manager, uncomment all sections with 'CERTMANAGER' prefix.\n```", "```\n- name: CERTIFICATE_NAMESPACE # namespace of the certificate CR\n```", "```\n  objref:\n```", "```\n    kind: Certificate\n```", "```\n    group: cert-manager.io\n```", "```\n    version: v1\n```", "```\n    name: serving-cert # this name should match the one in certificate.yaml\n```", "```\n  fieldref:\n```", "```\n    fieldpath: metadata.namespace\n```", "```\n- name: CERTIFICATE_NAME\n```", "```\n  objref:\n```", "```\n    kind: Certificate\n```", "```\n    group: cert-manager.io\n```", "```\n    version: v1\n```", "```\n    name: serving-cert # this name should match the one in certificate.yaml\n```", "```\n- name: SERVICE_NAMESPACE # namespace of the service\n```", "```\n  objref:\n```", "```\n    kind: Service\n```", "```\n    version: v1\n```", "```\n    name: webhook-service\n```", "```\n  fieldref:\n```", "```\n    fieldpath: metadata.namespace\n```", "```\n- name: SERVICE_NAME\n```", "```\n  objref:\n```", "```\n    kind: Service\n```", "```\n    version: v1\n```", "```\n    name: webhook-service\n```", "```\n resources:\n```", "```\n#- manifests.yaml\n```", "```\n- service.yaml\n```", "```\nfunc (*NginxOperatorReconciler) Reconcile(…) {\n```", "```\n  if len(operatorCR.Spec.Ports) > 0 {\n```", "```\n   deployment.Spec.Template.Spec.Containers[0].Ports = operatorCR.Spec.Ports\n```", "```\n  }\n```", "```\n}\n```", "```\n$ export IMG=docker.io/mdame/nginx-operator:v0.0.2\n$ make docker-build docker-push\n$ make deploy\n```", "```\napiVersion: operator.example.com/v1alpha1\n```", "```\nkind: NginxOperator\n```", "```\nmetadata:\n```", "```\n  name: cluster\n```", "```\n  namespace: nginx-operator-system\n```", "```\nspec:\n```", "```\n  replicas: 1\n```", "```\n  port: 8080\n```", "```\n$ kubectl apply -f sample-cr.yaml\n```", "```\n$ kubectl get -o yaml nginxoperators/cluster -n nginx-operator-system\napiVersion: operator.example.com/v1alpha2\nkind: NginxOperator\nmetadata:\n  ...\n  name: cluster\n  namespace: nginx-operator-system\n  resourceVersion: \"9032\"\n  uid: c22f6e2f-58a5-4b27-be6e-90fd231833e2\nspec:\n  ports:\n  - containerPort: 8080\n    protocol: TCP\n  replicas: 1\n...\n```", "```\n$ kubectl get -o yaml nginxoperators.v1alpha1.operator.example.com/cluster -n nginx-operator-system\napiVersion: operator.example.com/v1alpha1\nkind: NginxOperator\nmetadata:\n  name: cluster\n  namespace: nginx-operator-system\n  resourceVersion: \"9032\"\n  uid: c22f6e2f-58a5-4b27-be6e-90fd231833e2\nspec:\n  port: 8080\n  replicas: 1\n```", "```\napiVersion: operators.coreos.com/v1alpha1\n```", "```\nkind: ClusterServiceVersion\n```", "```\nmetadata:\n```", "```\n  annotations:\n```", "```\n    alm-examples: '[]'\n```", "```\n    capabilities: Basic Install\n```", "```\n  name: nginx-operator.v0.0.0\n```", "```\n  namespace: placeholder\n```", "```\nspec:\n```", "```\n  ...\n```", "```\n  replaces: nginx-operator.v0.0.1\n```", "```\n# VERSION defines the project version for the bundle. \n```", "```\n# Update this value when you upgrade the version of your project. \n```", "```\n# To re-generate a bundle for another specific version without changing the standard setup, you can:  \n```", "```\n# - use the VERSION as arg of the bundle target (e.g make bundle VERSION=0.0.2) \n```", "```\n# - use environment variables to overwrite this value (e.g export VERSION=0.0.2) \n```", "```\nVERSION ?= 0.0.2\n```", "```\n$ make bundle IMG=docker.io/sample/nginx-operator:v0.0.2\n```", "```\n$ export BUNDLE_IMG=docker.io/sample/nginx-bundle:v0.0.2\n$ make bundle-build bundle-push\n$ operator-sdk run bundle docker.io/same/nginx-bundle:v0.0.2\n```"]
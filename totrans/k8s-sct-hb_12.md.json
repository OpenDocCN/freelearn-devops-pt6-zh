["```\napiVersion: admissionregistration.k8s.io/v1\nkind: MutatingWebhookConfiguration\nmetadata:\n  name: secret-injector-webhook\nwebhooks:\n  - name: secret-injector.example.com\n    clientConfig:\n      service:\n        name: secret-injector-service\n        namespace: default\n        path: \"/mutate\"\n      caBundle: [CA_BUNDLE]\n    rules:\n      - operations: [\"CREATE\"]\n        apiGroups: [\"\"]\n        apiVersions: [\"v1\"]\n        resources: [\"pods\"]\n```", "```\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\n  name: externalsecrets.k8s.example.com\nspec:\n  group: k8s.example.com\n  versions:\n    - name: v1\n      served: true\n      storage: true\n  scope: Namespaced\n  names:\n    plural: externalsecrets\n    singular: externalsecret\n    kind: ExternalSecret\n    shortNames:\n      - esec\n```", "```\napiVersion: k8s.example.com/v1\nkind: ExternalSecret\nmetadata:\n     name: my-database-password\nspec:\nbackendType: awsSecretsManager\ndata:\n  - key: database-password\n    name: dbPassword\nregion: us-west-1\n```", "```\nkubectl apply -f my-external-secret.yaml\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: custom-api-server\nspec:\n  containers:\n  - name: custom-api-server\n    image: my-custom-api-server:latest\n    ports:\n    - containerPort: 443\n    volumeMounts:\n    - mountPath: /etc/custom-api-server\n      name: config\n  volumes:\n  - name: config\n    configMap:\n      name: custom-api-server-config\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: app-with-init-container\nspec:\n  initContainers:\n  - name: fetch-secrets\n    image: secret-fetcher:latest\n    volumeMounts:\n    - name: config-volume\n      mountPath: /config\n  containers:\n  - name: main-app\n    image: my-app:latest\n    volumeMounts:\n    - name: config-volume\n      mountPath: /config\n  volumes:\n  - name: config-volume\n    emptyDir: {}\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: app-with-sidecar\nspec:\n  containers:\n  - name: main-app\n    image: my-app:latest\n    volumeMounts:\n    - name: config-volume\n      mountPath: /config\n  - name: secret-refresher\n    image: secret-refresher:latest\n    volumeMounts:\n    - name: config-volume\n      mountPath: /config\n  volumes:\n  - name: config-volume\n    emptyDir: {}\n```", "```\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: node-level-agent\nspec:\n  selector:\n    matchLabels:\n      name: node-level-agent\n  template:\n    metadata:\n      labels:\n        name: node-level-agent\n    spec:\n      containers:\n      - name: agent\n        image: my-agent:latest\n        env:\n        - name: NODE_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: node-secret\n              key: secret-key\n```", "```\napiVersion: mycontroller/v1\nkind: EnvSecret\nmetadata:\n  name: database-creds\nspec:\n  externalRef: db-credentials-in-vault\n  target:\n    envVarName: DB_CREDS\n    podSelector:\n      matchLabels:\n        app: my-app\n```", "```\n       apiVersion: v1\n       kind: Secret\n       metadata:\n         name: my-secret\n       type: Opaque\n       data:\n         password: [base64_encoded_value]\n    sealed-secret.yaml is as follows:\n    ```", "```\n       apiVersion: bitnami.com/v1alpha1\n       kind: SealedSecret\n       metadata:\n         name: my-secret\n         namespace: default\n       spec:\n         encryptedData:\n           password: [encrypted_value]\n    ```", "```\n       apiVersion: v1\n       kind: Pod\n       metadata:\n         name: my-app\n       spec:\n         containers:\n         - name: app\n           image: my-app:latest\n           env:\n           - name: PASSWORD\n             valueFrom:\n               secretKeyRef:\n                 name: my-secret\n                 key: password\n    ```", "```\n        kube-system namespace:\n\n        ```", "```\n\n        ```", "```\n    apiVersion: secrets-store.csi.x-k8s.io/v1alpha1\n    kind: SecretProviderClass\n    metadata:\n      name: my-secret-provider\n    spec:\n      provider: [PROVIDER_NAME]  # e.g., azure, vault\n      parameters:\n        # Your specific provider parameters here\n    ```", "```\n    apiVersion: v1\n    kind: Pod\n    metadata:\n      name: my-pod\n    spec:\n      containers:\n      - name: my-container\n        image: my-image\n      volumes:\n        - name: secrets-volume\n          csi:\n            driver: secrets-store.csi.k8s.io\n            readOnly: true\n            volumeAttributes:\n              secretProviderClass: \"my-secret-provider\"\n      volumeMounts:\n      - name: secrets-volume\n        mountPath: \"/mnt/secrets\"\n    ```", "```\n  apiVersion: \"security.istio.io/v1beta1\"\n  kind: \"PeerAuthentication\"\n  metadata:\n    name: \"default\"\n    namespace: \"foo\"\n  spec:\n    mtls:\n      mode: STRICT\n```"]
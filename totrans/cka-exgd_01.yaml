- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Kubernetes Overview
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes 概览
- en: 'This chapter is an introduction to the Kubernetes architecture and Kubernetes
    core concepts. It dives into common Kubernetes tools and gets hands-on with them,
    showing the big picture of the different distributions and ecosystems in Kubernetes.
    In this chapter, we’re going to cover the following main topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了 Kubernetes 架构和核心概念，深入探讨了常见的 Kubernetes 工具并进行实践，展示了 Kubernetes 中不同发行版和生态系统的整体情况。本章将覆盖以下主要主题：
- en: CKA exam overview
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CKA 考试概述
- en: Cluster architecture and components
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集群架构与组件
- en: Kubernetes core concepts
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 核心概念
- en: Kubernetes in-market distribution and ecosystems
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 市场中的发行版和生态系统
- en: CKA exam overview
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CKA 考试概述
- en: '**Certified Kubernetes Administrator** (**CKA**) certification is a hands-on
    exam with a set of common Kubernetes working scenarios. You need to achieve it
    within a limited time frame. We highly recommend you work through this book within
    your environment and make sure that you understand and practice all the steps
    until you train your intuition and can perform all the tasks quickly without thinking
    twice. Time management is the key to success in this exam.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**认证 Kubernetes 管理员** (**CKA**) 认证是一个实践考试，涵盖了一些常见的 Kubernetes 工作场景。你需要在限定的时间内完成考试。我们强烈建议你在自己的环境中通读本书，并确保你理解并实践每一个步骤，直到你能培养直觉，快速完成所有任务而无需再三思考。时间管理是成功通过此考试的关键。'
- en: 'At the time of writing this book, the CKA exam is based on Kubernetes 1.22\.
    Please check out the official example page to make sure you’re up to date on any
    changes in the exam curriculum: [https://www.cncf.io/certification/cka/](https://www.cncf.io/certification/cka/).
    To learn more about the changes in Kubernetes, please check out the community
    release notes: [https://github.com/kubernetes/kubernetes/releases](https://github.com/kubernetes/kubernetes/releases).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，CKA 考试是基于 Kubernetes 1.22 版本的。请访问官方示例页面，确保你了解考试大纲的任何更新：[https://www.cncf.io/certification/cka/](https://www.cncf.io/certification/cka/)。要了解
    Kubernetes 的更新内容，请查看社区发布说明：[https://github.com/kubernetes/kubernetes/releases](https://github.com/kubernetes/kubernetes/releases)。
- en: 'The content of this book is well aligned with the CKA exam curriculum:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本书内容与 CKA 考试大纲高度一致：
- en: '*Part 1* – *Chapters 1* to *3* cover *Kubernetes Cluster Architecture, Installation,
    and Configurations*, which makes up about 25% of the exam.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第 1 部分* – *第 1 章* 到 *第 3 章* 涉及 *Kubernetes 集群架构、安装与配置*，约占考试的 25%。'
- en: '*Part 2* – [*Chapter 4*](B18201_04.xhtml#_idTextAnchor080) covers *Workloads
    and Scheduling*, which makes up about 15% of the exam, [*Chapter 5*](B18201_05.xhtml#_idTextAnchor149)
    covers *Storage Services and Networking*, which makes up about 10% of the exam,
    *chapters 6* and *7* cover *Services and Networking*, which makes up about 20%
    of the exam.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第 2 部分* – [*第 4 章*](B18201_04.xhtml#_idTextAnchor080) 涉及 *工作负载与调度*，约占考试的 15%，[*第
    5 章*](B18201_05.xhtml#_idTextAnchor149) 涉及 *存储服务与网络*，约占考试的 10%，*第 6 章* 和 *第 7
    章* 涉及 *服务与网络*，约占考试的 20%。'
- en: '*Part 3* – *Chapters 8* to *10* cover *Troubleshooting*, which makes up about
    30% of the exam.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第 3 部分* – *第 8 章* 到 *第 10 章* 涉及 *故障排除*，约占考试的 30%。'
- en: The goal of the exam curriculum is to help you prepare for the CKA exam and
    help you get a thorough understanding of each area, which will help you become
    skilled Kubernetes administrators later on in your career. While going through
    this book, please feel free to jump to the area that you need to know the most
    about if you’re already familiar with some other topics.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 考试大纲的目标是帮助你为 CKA 考试做准备，并帮助你全面了解每个领域，这将有助于你在职业生涯中成为熟练的 Kubernetes 管理员。在阅读本书时，如果你已经熟悉某些话题，可以跳过不太需要了解的部分，直接阅读你最需要掌握的领域。
- en: Note that some Kubernetes security content before November 2020 has gradually
    moved to the **Certified Kubernetes Security Specialist** (**CKS**) exam. As a
    well-rounded Kubernetes administrator, it’s essential to have a deep understanding
    of Kubernetes security. In fact, it is somewhat difficult to separate Kubernetes
    security as a different topic; however, knowledge of topics such as security context
    and **role-based access control** (**RBAC**) is still required for you to perform
    certain tasks to be successful in the exam. Therefore, this book will still cover
    some key security concepts to lay the groundwork if you want to pursue the CKS
    certification later on. To get to know more about different Kubernetes certifications,
    check out the FAQs from the Linux Foundation website by navigating to [https://docs.linuxfoundation.org/tc-docs/certification/faq-cka-ckad-cks](https://docs.linuxfoundation.org/tc-docs/certification/faq-cka-ckad-cks).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，2020 年 11 月之前的一些 Kubernetes 安全内容已经逐渐移至 **认证 Kubernetes 安全专家**（**CKS**）考试。作为一个全面的
    Kubernetes 管理员，深入了解 Kubernetes 安全是至关重要的。事实上，单独将 Kubernetes 安全作为一个独立的主题是比较困难的；然而，了解安全上下文和
    **基于角色的访问控制**（**RBAC**）等主题仍然是您成功完成考试的必要条件。因此，本书仍将涵盖一些关键的安全概念，为您日后如果打算攻读 CKS 认证奠定基础。如需了解更多
    Kubernetes 认证信息，请访问 Linux Foundation 网站的常见问题解答：[https://docs.linuxfoundation.org/tc-docs/certification/faq-cka-ckad-cks](https://docs.linuxfoundation.org/tc-docs/certification/faq-cka-ckad-cks)。
- en: What to expect in your CKA exam
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 CKA 考试中需要预期的内容
- en: 'Prior to your exam, you have to make sure the computer you’re going to use
    during the exam meets the system requirements defined by the exam provider. A
    webcam and microphone are mandatory to turn on during the exam. You’re only allowed
    to use a single instance of a Chromium-based browser for the exam. You can find
    a list of Chromium-based browsers here: [https://en.wikipedia.org/wiki/Chromium_(web_browser)](https://en.wikipedia.org/wiki/Chromium_(web_browser)).'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在考试之前，您必须确保您在考试期间使用的计算机符合考试提供方定义的系统要求。摄像头和麦克风在考试期间必须开启。您只能使用单一实例的基于 Chromium
    的浏览器进行考试。您可以在这里查看基于 Chromium 的浏览器列表：[https://en.wikipedia.org/wiki/Chromium_(web_browser)](https://en.wikipedia.org/wiki/Chromium_(web_browser))。
- en: 'Please make sure your hardware meets the minimum requirements by running the
    compatibility check tool, which you can find here: [https://www.examslocal.com/ScheduleExam/Home/CompatibilityCheck](https://www.examslocal.com/ScheduleExam/Home/CompatibilityCheck).
    The detailed system requirements are defined here: [https://docs.linuxfoundation.org/tc-docs/certification/faq-cka-ckad-cks#what-are-the-system-requirements-to-take-the-exam](https://docs.linuxfoundation.org/tc-docs/certification/faq-cka-ckad-cks#what-are-the-system-requirements-to-take-the-exam).'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 请通过运行兼容性检查工具确保您的硬件符合最低要求，您可以在这里找到该工具：[https://www.examslocal.com/ScheduleExam/Home/CompatibilityCheck](https://www.examslocal.com/ScheduleExam/Home/CompatibilityCheck)。详细的系统要求可以在这里查看：[https://docs.linuxfoundation.org/tc-docs/certification/faq-cka-ckad-cks#what-are-the-system-requirements-to-take-the-exam](https://docs.linuxfoundation.org/tc-docs/certification/faq-cka-ckad-cks#what-are-the-system-requirements-to-take-the-exam)。
- en: Important note
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'As this exam is an online remote-proctored exam, you can also check out what
    the exam is like here: [https://psi.wistia.com/medias/5kidxdd0ry](https://psi.wistia.com/medias/5kidxdd0ry).'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本次考试为在线远程监控考试，您还可以查看考试的具体情况，点击这里：[https://psi.wistia.com/medias/5kidxdd0ry](https://psi.wistia.com/medias/5kidxdd0ry)。
- en: 'During your exam, you’re allowed to check the official Kubernetes documentation
    including articles and documents under [https://kubernetes.io](https://kubernetes.io)
    and [https://github.com/kubernetes](https://github.com/kubernetes) on the same
    browser instance as the exam screen. The CKA exam consists of a set of around
    20 scenario-based tasks to be achieved with a Linux-based shell and a set of predefined
    Kubernetes clusters. Those scenario-based tasks are described as a problem to
    be resolved with additional information. Candidates are bound to come up with
    the solutions based on the provided information and perform the solution promptly.
    A CKA exam session is about 2 hours, and after that, the exam will be marked as
    delivered. You can take the exam with multiple monitors if you wish to, although
    check out the exam policy beforehand to make sure you have met all the requirements
    from the organizer: [https://docs.linuxfoundation.org/tc-docs/certification/faq-cka-ckad-cks#how-is-the-exam-proctored](https://docs.linuxfoundation.org/tc-docs/certification/faq-cka-ckad-cks#how-is-the-exam-proctored).'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在考试期间，你可以查看官方Kubernetes文档，包括[https://kubernetes.io](https://kubernetes.io)和[https://github.com/kubernetes](https://github.com/kubernetes)上的文章和文档，且可以在同一浏览器实例中与考试界面一起查看。CKA考试由大约20个基于场景的任务组成，任务需在Linux基础的shell和一组预定义的Kubernetes集群中完成。这些基于场景的任务以需要解决的问题形式提供，并附有额外的信息。考生必须根据提供的信息提出解决方案并及时执行。CKA考试时长大约为2小时，考试结束后将标记为已提交。如果你愿意，可以使用多个显示器参加考试，尽管在此之前请查看考试政策，确保你已满足组织方的所有要求：[https://docs.linuxfoundation.org/tc-docs/certification/faq-cka-ckad-cks#how-is-the-exam-proctored](https://docs.linuxfoundation.org/tc-docs/certification/faq-cka-ckad-cks#how-is-the-exam-proctored)。
- en: We highly recommend you walk through the sample scenarios provided by **killer.sh**,
    an official exam simulator, and bookmark the official documents that will be useful
    for you. Go to the **killer.sh** training website at [https://killer.sh/course/](https://killer.sh/course/)
    to test out a simulated exam environment and test out the scenarios.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们强烈推荐你通过**killer.sh**提供的模拟考试，走一遍样本场景，并收藏对你有帮助的官方文档。访问**killer.sh**培训网站[https://killer.sh/course/](https://killer.sh/course/)来测试模拟考试环境并试用场景。
- en: For more CKA exam instructions and tricks, please check out [https://docs.linuxfoundation.org/tc-docs/certification/tips-cka-and-ckad](https://docs.linuxfoundation.org/tc-docs/certification/tips-cka-and-ckad).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多CKA考试说明和技巧，请访问[https://docs.linuxfoundation.org/tc-docs/certification/tips-cka-and-ckad](https://docs.linuxfoundation.org/tc-docs/certification/tips-cka-and-ckad)。
- en: You need a score of at least 66% to pass the exam, and the results will be emailed
    to you within 24 to 36 hours of finishing the exam. Accordingly, you will receive
    the certification in PDF form with a validity of 3 years, and a badge shortly
    after that. In case of any questions, you could email `certificationsupport@cncf.io`
    for further help.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要至少66%的分数才能通过考试，考试结果将在考试结束后的24到36小时内通过邮件发送给你。你将收到有效期为3年的PDF格式证书，稍后还会收到徽章。如果有任何问题，你可以通过邮件联系`certificationsupport@cncf.io`寻求进一步帮助。
- en: CKA exam tips and tricks
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CKA考试技巧和窍门
- en: 'Two key factors to help you succeed in the CKA exam or any other Kubernetes
    certifications are as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 成功通过CKA考试或任何其他Kubernetes认证的两个关键因素如下：
- en: Excellent time management
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优秀的时间管理能力
- en: Practice, as we know that practice makes perfect
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 练习，因为我们知道“熟能生巧”
- en: Before getting to the exam part, you have to be familiar with Kubernetes; don’t
    dwell only on the certification when you’re preparing for this exam. A deep understanding
    of the Kubernetes cluster architecture and ecosystem will help set a solid foundation
    on the way to learning any exam-related content.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在进入考试部分之前，你必须熟悉Kubernetes；在准备考试时，不要只关注认证。深入了解Kubernetes集群架构和生态系统将为学习任何与考试相关的内容奠定坚实的基础。
- en: Gaining some basic understanding of the Linux shell
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获得一些基本的Linux shell理解
- en: 'Looking at the exam itself, a basic understanding of the Linux shell will assist
    you in achieving the goal quicker. The following commands will help you while
    you’re going through the exercises in this book:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 看到考试本身，基本的Linux shell知识将帮助你更快达成目标。在你完成本书中的练习时，以下命令会对你有所帮助：
- en: '`sudo` to avoid permission issues as much as possible, and `sudo su` to get
    root permission'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽量使用`sudo`以避免权限问题，使用`sudo su`来获取root权限
- en: '`curl`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`curl`'
- en: '`| grep` in the command filtering result'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在命令过滤结果中使用`| grep`
- en: '`vi/vim/nano` or other Linux text editor'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vi/vim/nano` 或其他Linux文本编辑器'
- en: '`cat`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cat`'
- en: '`cp/mv/mkdir/touch`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cp/mv/mkdir/touch`'
- en: '`cp/scp`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cp/scp`'
- en: A good understanding of the `json` path is a plus, and using `jq` for JSON parsing
    would be a good complement to locating the information that you want to get out
    of the command.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对 `json` 路径的良好理解是加分项，使用 `jq` 进行 JSON 解析是获取命令输出信息的一个好方法。
- en: As we’re going through all the exam topics in this book, we’ll cover most of
    these commands in the exercises. Make sure you understand and can confidently
    perform all the exercises independently with no rush.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将逐一介绍所有的考试主题，练习中会涉及大部分命令。确保你理解并能独立自信地完成所有练习，不要着急。
- en: Setting up a kubectl alias to save time
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置 kubectl 别名以节省时间
- en: 'A lot of commands will be used repeatedly while you’re working on various scenarios
    of the exam, so a friendly shortcut for `kubectl` is essential, as it will be
    used in nearly all of your commands:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在考试的各种场景中，你会反复使用很多命令，因此一个便捷的 `kubectl` 快捷方式是必不可少的，因为几乎所有的命令中都会使用它：
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: There’s a `kubectl-aliases` repository on GitHub that you can refer to ([https://github.com/ahmetb/kubectl-aliases](https://github.com/ahmetb/kubectl-aliases)).
    This was created by a contributor who showed some really good examples of `kubectl`
    aliases.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 上有一个 `kubectl-aliases` 仓库，你可以参考（[https://github.com/ahmetb/kubectl-aliases](https://github.com/ahmetb/kubectl-aliases)）。这个仓库是由一位贡献者创建的，展示了很多很好的
    `kubectl` 别名示例。
- en: If you don’t want to remember too much, you can try to understand the naming
    convention for shortcuts in Kubernetes. These would be things such as `svc` being
    short for services such that `kubectl get services` can become `kubectl get svc`,
    or `kubectl get nodes` can become `k get no`, for example. I have created a `melonkube
    playbook` repository, which covers all the shortcuts for Kubernetes objects ([https://github.com/cloudmelon/melonkube/blob/master/00%20-%20Shortcuts.md](https://github.com/cloudmelon/melonkube/blob/master/00%20-%20Shortcuts.md)).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想记住太多内容，你可以尝试理解 Kubernetes 中快捷方式的命名约定。例如，`svc` 是 services 的缩写，`kubectl get
    services` 可以变成 `kubectl get svc`，或者 `kubectl get nodes` 可以变成 `k get no`，等等。我创建了一个
    `melonkube playbook` 仓库，涵盖了 Kubernetes 对象的所有快捷方式（[https://github.com/cloudmelon/melonkube/blob/master/00%20-%20Shortcuts.md](https://github.com/cloudmelon/melonkube/blob/master/00%20-%20Shortcuts.md)）。
- en: You can refer to that to find what works best for you. However, please keep
    it simple as your mind may be get worked up during the actual exam for some reason.
    Practice and more practice will get you there sooner.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以参考这个仓库，找到最适合你的方式。然而，请保持简单，因为在实际考试中，出于某些原因，你的大脑可能会变得很紧张。多加练习会让你更快上手。
- en: Setting kubectl autocomplete
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置 kubectl 自动补全
- en: 'You could set autocompletion in your shell; this will usually work in the Linux
    shell in your exam. You can achieve this with the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的 shell 中设置自动补全；这通常在考试时的 Linux shell 中有效。你可以通过以下方式实现：
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Working in conjunction with the shortcut, you can do the following:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 与快捷方式配合使用时，你可以执行以下操作：
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Although sometimes it may take more time to look for the right commands from
    `bash autocompletion`, I would say focusing on building a good understanding of
    the technology with practice will help you skill up faster.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有时从 `bash 自动补全` 中寻找正确的命令可能会花费更多时间，但我认为通过实践建立对技术的深入理解将有助于你更快提高技能。
- en: Bookmarking unfamiliar yet important documentation in your browser
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在浏览器中为陌生但重要的文档添加书签
- en: 'Get yourself familiar with Kubernetes official documentation to know where
    to find the information you need. The goal of CKA is *not* about memorizing but
    hands-on skills; knowing how to find the right path and resolving the challenge
    is the key. You could bookmark the documentation in the following domains:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 熟悉 Kubernetes 官方文档，了解如何找到你需要的信息。CKA 的目标是*不是*记忆，而是实际操作技能；知道如何找到正确的路径并解决挑战才是关键。你可以在以下领域为文档添加书签：
- en: 'Kubernetes official documentation: [https://kubernetes.io/docs/](https://kubernetes.io/docs/)'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 官方文档：[https://kubernetes.io/docs/](https://kubernetes.io/docs/)
- en: 'Kubernetes blog: [https://kubernetes.io/blog/](https://kubernetes.io/blog/)'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 博客：[https://kubernetes.io/blog/](https://kubernetes.io/blog/)
- en: 'Kubernetes GitHub repository: [https://github.com/kubernetes/](https://github.com/kubernetes/)'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes GitHub 仓库：[https://github.com/kubernetes/](https://github.com/kubernetes/)
- en: 'The first page that I usually recommend people to bookmark is the `kubectl`
    cheat sheet: [https://kubernetes.io/docs/reference/kubectl/cheatsheet/](https://kubernetes.io/docs/reference/kubectl/cheatsheet/).
    Another good bookmark is the official documentation search: [https://kubernetes.io/search/?q=kubecon](https://kubernetes.io/search/?q=kubecon).'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我通常推荐人们收藏的第一页是 `kubectl` 快捷命令表：[https://kubernetes.io/docs/reference/kubectl/cheatsheet/](https://kubernetes.io/docs/reference/kubectl/cheatsheet/)。另一个好的收藏是官方文档搜索：[https://kubernetes.io/search/?q=kubecon](https://kubernetes.io/search/?q=kubecon)。
- en: Be careful with the security context
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小心安全上下文
- en: The context is the most important indicator to let you know which Kubernetes
    cluster you’re currently working on. We’ll touch on the security context in more
    detail later in the book. I suggest you perform a context check before working
    on any new questions as you might get confused at times. Note that if you’re not
    operating on the target Kubernetes cluster of that question, you will *not* get
    scored.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 上下文是最重要的指示器，可以帮助你了解当前操作的是哪个 Kubernetes 集群。我们将在本书后面更详细地讨论安全上下文。我建议你在处理任何新问题之前，先检查一下上下文，因为有时候你可能会感到困惑。请注意，如果你没有在该问题的目标
    Kubernetes 集群上操作，你将 *不会* 得分。
- en: 'You can use the following command to check out the context:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下命令查看上下文：
- en: '[PRE3]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If you want to go to a specific Kubernetes cluster, you can use the following
    command:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想切换到一个特定的 Kubernetes 集群，可以使用以下命令：
- en: '[PRE4]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can also check out a list of Kubernetes clusters you’ve worked on with
    the following command in the actual exam:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过以下命令查看你曾经操作过的 Kubernetes 集群列表，特别是在实际考试中：
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Managing your time wisely
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 明智地管理你的时间
- en: Time management is the key to success in the CKA exam, and it is important to
    manage your time wisely by switching the task order. In general, all exam tasks
    are leveled from easy to difficult. When you reach the last few questions, you
    may find some tasks are quite time-consuming, but not the most difficult. You
    can skip to other questions that you’re confident about and then come back to
    these later. That’s why it’s important to be aware of the Kubernetes cluster that
    you’re currently working on.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 时间管理是 CKA 考试成功的关键，合理管理时间，调整任务顺序非常重要。通常情况下，所有考试任务的难度从易到难排列。当你接近最后几个问题时，你可能会发现某些任务虽然非常耗时，但并不是最难的。你可以跳过这些问题，先处理那些你有信心的问题，之后再回到这些耗时的问题上。这就是为什么了解当前操作的
    Kubernetes 集群非常重要。
- en: Final thoughts
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 最后的思考
- en: If you have walked through all the exercises in this book and want to gain a
    deeper understanding of Kubernetes, I recommend checking out another book that
    I co-authored back in 2020, called *The Kubernetes Workshop*, also published by
    Packt, which provides lots of Kubernetes exercises to help you skill up on the
    technology.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经完成了本书中的所有练习，并希望更深入地理解 Kubernetes，我推荐你阅读一本我在 2020 年共同编写的书，名为 *The Kubernetes
    Workshop*，同样由 Packt 出版，书中提供了大量的 Kubernetes 练习，帮助你提高技术水平。
- en: Cluster architecture and components
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集群架构和组件
- en: Kubernetes is a portable, highly extensible, open source orchestration that
    facilitates managing containerized workloads and services and orchestrates your
    containers to achieve the desired status across different worker nodes. It is
    worth mentioning that official documentation states that Kubernetes means *pilot*
    in Greek where its name originates from, which is appropriate for its function.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 是一个便携式、高度可扩展的开源编排系统，旨在管理容器化工作负载和服务，并协调容器以在不同的工作节点上实现所需的状态。值得一提的是，官方文档中提到，Kubernetes
    在希腊语中的意思是 *pilot*，它的名字来源于此，这对于它的功能来说是非常合适的。
- en: It supports a variety of workloads, such as stateless, stateful, and data-processing
    workloads. Theoretically, any application that can be containerized can be up
    and running on Kubernetes.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 它支持各种工作负载，例如无状态、状态化以及数据处理工作负载。从理论上讲，任何可以容器化的应用程序都可以在 Kubernetes 上运行。
- en: A Kubernetes cluster consists of a set of worker nodes; those worker machines
    run the actual workloads that are the containerized applications. A Kubernetes
    cluster can have from 1 up to 5,000 nodes (as of writing this chapter, we’re on
    the Kubernetes 1.23 version).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 Kubernetes 集群由一组工作节点组成；这些工作节点运行实际的工作负载，即容器化的应用程序。一个 Kubernetes 集群可以有从 1 到
    5000 个节点（截至写本章节时，我们使用的是 Kubernetes 1.23 版本）。
- en: We usually spin up one node for quick testing, whereas, in production environments,
    a cluster has multiple worker nodes for high availability and fault torrent.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通常启动一个节点进行快速测试，而在生产环境中，集群有多个工作节点以确保高可用性和故障恢复。
- en: 'Kubernetes adopts a master/worker architecture, which is a mechanism where
    one process acts as the master component to control one or more other components
    called slaves, or in our case, worker nodes. A general Kubernetes cluster architecture
    would look like the following:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 采用主/工作节点架构，这是一种机制，其中一个进程充当主控组件，控制一个或多个其他组件（称为从节点，或者在我们的案例中是工作节点）。一个典型的
    Kubernetes 集群架构如下所示：
- en: '![Figure 1.1 – Kubernetes cluster architecture ](img/Figure_1.1_B18201.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.1 – Kubernetes 集群架构](img/Figure_1.1_B18201.jpg)'
- en: Figure 1.1 – Kubernetes cluster architecture
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1 – Kubernetes 集群架构
- en: 'The Kubernetes master node, or the control plane, is in charge of responding
    to the cluster events, and it contains the following components:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 主节点或控制平面负责响应集群事件，它包含以下组件：
- en: '`kube-apiserver`, is to expose the Kubernetes REST API. You can see it as a
    communication manager between different Kubernetes components across the Kubernetes
    cluster.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kube-apiserver` 负责公开 Kubernetes REST API。你可以将它看作是 Kubernetes 集群中各个组件之间的通信管理器。'
- en: '**etcd**: This is a distributed key-value store that stores information regarding
    the cluster information and all states of objects running on the Kubernetes cluster,
    such as Kubernetes cluster nodes, Pods, config maps, secrets, service accounts,
    roles, and bindings.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**etcd**：这是一个分布式键值存储，存储关于集群信息以及在 Kubernetes 集群中运行的所有对象状态的信息，如 Kubernetes 集群节点、Pods、配置映射、密钥、服务账户、角色和绑定。'
- en: '`kube-scheduler` is the default scheduler for Kubernetes. You can imagine it
    as a postal officer who sends the Pod’s information to each node and when it arrives
    at the target node, the `kubelet` agent on that node will provide the actual containerized
    workloads with the received specification.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kube-scheduler` 是 Kubernetes 的默认调度器。你可以把它想象成一个邮递员，它将 Pod 的信息发送到每个节点，当信息到达目标节点时，该节点上的
    `kubelet` 代理将根据收到的规范为容器化工作负载提供支持。'
- en: '`kube-controller-manager` in Kubernetes. Examples of those controllers are
    replication controllers, endpoint controllers, and namespace controllers.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 中的 `kube-controller-manager`。这些控制器的示例包括副本控制器、端点控制器和命名空间控制器。
- en: 'Besides the control plane, every worker node in a Kubernetes cluster running
    the actual workloads has the following components:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 除了控制平面外，Kubernetes 集群中每个运行实际工作负载的工作节点还包含以下组件：
- en: '**kubelet**: A kubelet is an agent that runs on each worker node. It accepts
    pod specifications sent from the API server or locally (for static pod) and provisions
    the containerized workloads such as the Pod, StatefulSet, and ReplicaSet on the
    respective nodes.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**kubelet**：kubelet 是一个在每个工作节点上运行的代理。它接受来自 API 服务器或本地（用于静态 Pod）发送的 Pod 规格，并在相应的节点上配置容器化工作负载，如
    Pod、StatefulSet 和 ReplicaSet。'
- en: '**Container runtime**: This is the software virtualization layer that helps
    run containers within the Pods on each node. Docker, CRI-O, and containerd are
    examples of common container runtimes working with Kubernetes.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器运行时**：这是帮助在每个节点的 Pods 中运行容器的软件虚拟化层。Docker、CRI-O 和 containerd 是常见的与 Kubernetes
    一起工作的容器运行时的例子。'
- en: '**kube-proxy**: This runs on each worker node and implements the network rules
    and traffic forwarding when a service object is deployed in the Kubernetes cluster.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**kube-proxy**：此组件在每个工作节点上运行，负责在 Kubernetes 集群中部署服务对象时实现网络规则和流量转发。'
- en: Knowing about those components and how they work will help you understand the
    core Kubernetes core concepts.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 了解这些组件及其工作原理将帮助你理解 Kubernetes 的核心概念。
- en: Kubernetes core concepts
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes 核心概念
- en: Before diving into the meat and potatoes of Kubernetes, we’ll explain some key
    concepts in this section to help you start the journey with Kubernetes.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入探讨 Kubernetes 的核心内容之前，我们将首先解释一些关键概念，帮助你开始 Kubernetes 的学习旅程。
- en: Containerized workloads
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 容器化工作负载
- en: 'A containerized workload means applications running on Kubernetes. Going back
    to the raw definition of containerization, a container provides an isolated environment
    for your application, with higher density and better utilization of the underlying
    infrastructure compared to the applications deployed on the physical server or
    **virtual machines** (**VMs**):'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 容器化工作负载是指在 Kubernetes 上运行的应用程序。回到容器化的基本定义，容器为你的应用程序提供了一个隔离的环境，相比于部署在物理服务器或 **虚拟机**（**VMs**）上的应用程序，容器具有更高的密度和更好的基础设施利用率：
- en: '![Figure 1.2 – Virtual machine versus containers ](img/Figure_1.2_B18201.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.2 – 虚拟机与容器](img/Figure_1.2_B18201.jpg)'
- en: Figure 1.2 – Virtual machine versus containers
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2 – 虚拟机与容器
- en: The preceding diagram shows the difference between VMs and containers. When
    compared to VMs, containers are more efficient and easier to manage.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 上图展示了虚拟机（VM）和容器之间的区别。与虚拟机相比，容器更加高效，且更易于管理。
- en: Container images
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 容器镜像
- en: A container isolates the application with all its dependencies, libraries, binaries,
    and configuration files. The package of the application, together with its dependencies,
    libraries, binaries, and configurations, is what we call a **container image**.
    Once a container image is built, the content of the image is immutable. All the
    code changes and dependencies updates will need to build a new image.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 容器将应用程序及其所有依赖项、库、二进制文件和配置文件隔离开来。应用程序的包，连同其依赖项、库、二进制文件和配置，称为**容器镜像**。一旦容器镜像构建完成，镜像的内容就变得不可变。所有代码更改和依赖项更新都需要构建新的镜像。
- en: Container registry
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 容器注册表
- en: 'To store the container image, we need a container registry. The **container
    registry** is located on your local machine, on-premises, or sometimes in the
    cloud. You need to authenticate to the container registry to access its content
    to ensure security. Most public registries, such as DockerHub and [quay.io](http://quay.io),
    allow a wide range of non-gated container image distributions across the board:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 为了存储容器镜像，我们需要一个容器注册表。**容器注册表**可以位于本地机器、内部网络，或者有时在云端。你需要认证才能访问容器注册表的内容，以确保安全性。大多数公共注册表，如
    DockerHub 和 [quay.io](http://quay.io)，允许广泛的非限制性容器镜像分发：
- en: '![Figure 1.3 – Container images ](img/Figure_1.3_B18201.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.3 – 容器镜像](img/Figure_1.3_B18201.jpg)'
- en: Figure 1.3 – Container images
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3 – 容器镜像
- en: The upside of this entire mechanism is that it allows the developers to focus
    on coding and configuring, which is the core value of their job, without worrying
    about the underlying infrastructure or managing dependencies and libraries to
    be installed on the host node, as shown in the preceding diagram.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 整个机制的优点在于，它允许开发人员专注于编码和配置，这正是他们工作中的核心价值，而无需担心底层基础设施或管理安装在主机节点上的依赖项和库，正如上图所示。
- en: Container runtimes
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 容器运行时
- en: 'The container runtime is in charge of running containers, which is also known
    as the **container engine**. This is a software virtualization layer that runs
    containers on a host operating system. A container runtime such as Docker can
    pull container images from a container registry and manage the container life
    cycle using CLI commands, in this case, Docker CLI commands, as the following
    diagram describes:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 容器运行时负责运行容器，也称为**容器引擎**。这是一个运行在主机操作系统上的软件虚拟化层，用于运行容器。像 Docker 这样的容器运行时可以从容器注册表拉取容器镜像，并使用
    CLI 命令管理容器生命周期，在这种情况下，使用 Docker CLI 命令，正如下图所示：
- en: '![Figure 1.4 – Managing Docker containers ](img/Figure_1.4_B18201.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.4 – 管理 Docker 容器](img/Figure_1.4_B18201.jpg)'
- en: Figure 1.4 – Managing Docker containers
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4 – 管理 Docker 容器
- en: Besides Docker, Kubernetes supports multiple container runtimes, such as containerd
    and CRI-O. In the context of Kubernetes, the container runtime helps get containers
    up and running within the Pods on each worker node. We’ll cover how to set up
    the container runtime in the next chapter as part of preparation work prior to
    provisioning a Kubernetes cluster.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 Docker，Kubernetes 还支持多种容器运行时，如 containerd 和 CRI-O。在 Kubernetes 的上下文中，容器运行时帮助在每个工作节点上的
    Pod 内启动并运行容器。我们将在下一章中介绍如何设置容器运行时，作为在配置 Kubernetes 集群之前的准备工作。
- en: Important note
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Kubernetes runs the containerized workloads by provisioning Pods run on worker
    nodes. A node could be a physical or a virtual machine, on-premises, or in the
    cloud.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 通过配置运行在工作节点上的 Pods 来运行容器化的工作负载。一个节点可以是物理机或虚拟机，无论是在本地还是云端。
- en: Kubernetes basic workflow
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes 基本工作流
- en: 'We saw earlier a typical workflow showing how Kubernetes works with Kubernetes
    components, and how they collaborate with each other, in the *Cluster architecture
    and components* section. When you’re using `kubectl` commands, a YAML specification,
    or another way to invoke an API call, the API server creates a Pod definition
    and the scheduler identifies the available node to place the new Pod on. The scheduler
    does two things: *filtering* and *scoring*. The filtering step finds a set of
    available candidate nodes to place the Pod, and the scoring step ranks the most
    fitting Pod placement.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在*集群架构和组件*章节中看到了一种典型的工作流程，展示了 Kubernetes 如何与 Kubernetes 组件协同工作，以及它们如何相互配合。当你使用
    `kubectl` 命令、YAML 规范或其他方式调用 API 时，API 服务器会创建一个 Pod 定义，调度器则会识别可用的节点来部署新的 Pod。调度器有两个步骤：*过滤*和*评分*。过滤步骤会找到一组可用的候选节点来部署
    Pod，评分步骤会对最合适的 Pod 部署进行排名。
- en: The API server then passes that information to the kubelet agent on the target
    worker node. The kubelet then creates the Pod on the node and instructs the container
    runtime engine to deploy the application image. Once it’s done, the kubelet communicates
    the status back to the API server, which then updates the data in the `etcd` store,
    and the user will be notified that the Pod has been created.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: API 服务器将这些信息传递给目标工作节点上的 kubelet 代理。然后，kubelet 在节点上创建 Pod，并指示容器运行时引擎部署应用镜像。一旦完成，kubelet
    会将状态信息反馈给 API 服务器，后者会更新 `etcd` 存储中的数据，并通知用户 Pod 已被创建。
- en: This mechanism is repeated every time we perform a task and talk to the Kubernetes
    cluster, either by using `kubectl` commands, deploying a YAML definition file,
    or using other ways to trigger a REST API call through the API server.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这个机制在每次执行任务并与 Kubernetes 集群进行交互时都会重复，不论是使用 `kubectl` 命令、部署 YAML 定义文件，还是通过其他方式触发
    API 服务器的 REST API 调用。
- en: 'The following diagram shows the process that we just described:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示展示了我们刚才描述的过程：
- en: '![Figure 1.5 – Kubernetes cluster basic workflow  ](img/Figure_1.5_B18201.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.5 – Kubernetes 集群基本工作流程](img/Figure_1.5_B18201.jpg)'
- en: Figure 1.5 – Kubernetes cluster basic workflow
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5 – Kubernetes 集群基本工作流程
- en: Knowing the basic Kubernetes workflow will help you understand how Kubernetes
    cluster components collaborate with each other and lay the foundation for learning
    about the Kubernetes plugin model and API objects.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 了解基本的 Kubernetes 工作流程将帮助你理解 Kubernetes 集群组件如何相互协作，为学习 Kubernetes 插件模型和 API 对象打下基础。
- en: Kubernetes plugin model
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubernetes 插件模型
- en: 'One of the most important reasons for Kubernetes to dominate the market and
    become the new normal of the cloud-native ecosystem is that it is flexible, highly
    configurable, and has a highly extensible architecture. Kubernetes is highly configurable
    and extensible on the following layers:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 主导市场并成为云原生生态系统新常态的最重要原因之一是它灵活、高度可配置且具有高度可扩展的架构。Kubernetes 在以下几个层面上具有高度的可配置性和可扩展性：
- en: '**Container runtime**: The container runtime is the lowest software virtualization
    layer running containers. This layer supports a variety of runtimes in the market
    thanks to the **Container Runtime Interface** (**CRI**) plugin. The CRI contains
    a set of protocol buffers, specifications, a gRPC API, libraries, and tools. We’ll
    cover how to cooperate with different runtimes when provisioning the Kubernetes
    cluster in [*Chapter 2*](B18201_02.xhtml#_idTextAnchor035), *Installing and Configuring
    Kubernetes Clusters*.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器运行时**：容器运行时是运行容器的最低级别软件虚拟化层。由于**容器运行时接口**（**CRI**）插件的支持，这一层支持市场上多种不同的运行时。CRI
    包含一组协议缓冲区、规范、gRPC API、库和工具。在 [*第 2 章*](B18201_02.xhtml#_idTextAnchor035)，*安装和配置
    Kubernetes 集群* 中，我们将介绍如何在部署 Kubernetes 集群时与不同的运行时进行合作。'
- en: '**Networking**: The networking layer of Kubernetes is defined by kubenet or
    the **Container Network Interface** (**CNI**), which is responsible for configuring
    network interfaces for Linux containers, in our case, mostly Kubernetes Pods.
    The CNI is actually a **Cloud Native Computing Foundation** (**CNCF**) project
    that includes CNI specifications, plugins, and libraries. We’ll cover more details
    about Kubernetes networking in [*Chapter 7*](B18201_07.xhtml#_idTextAnchor235),
    *Demystifying Kubernetes Networking*.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络**：Kubernetes 的网络层由 kubenet 或 **容器网络接口**（**CNI**）定义，负责为 Linux 容器配置网络接口，在我们的案例中，主要是
    Kubernetes Pods。CNI 实际上是一个 **云原生计算基金会**（**CNCF**）项目，包含 CNI 规范、插件和库。在 [*第 7 章*](B18201_07.xhtml#_idTextAnchor235)，*解密
    Kubernetes 网络* 中，我们将详细讨论 Kubernetes 网络的更多内容。'
- en: '**Storage**: The storage layer of Kubernetes was one of the most challenging
    parts at a time prior to **Container Storage Interface** (**CSI**) being introduced
    as a standard interface for exposing block and file storage systems. The storage
    volumes are managed by storage drivers tailored by storage vendors, this part
    previously being part of Kubernetes source code. The CSI compatible volume drivers
    are served for users to attach or mount the CSI volumes to the Pods running in
    the Kubernetes cluster. We’ll cover storage management in Kubernetes in [*Chapter
    5*](B18201_05.xhtml#_idTextAnchor149), *Demystifying Kubernetes Storage*.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储**：Kubernetes的存储层曾是一个极具挑战性的部分，直到**容器存储接口**（**CSI**）被引入作为暴露块存储和文件存储系统的标准接口。存储卷由存储供应商量身定制的存储驱动程序管理，这部分曾是Kubernetes源代码的一部分。与CSI兼容的卷驱动程序为用户提供服务，使其能够将CSI卷附加或挂载到Kubernetes集群中运行的Pods上。我们将在[*第5章*](B18201_05.xhtml#_idTextAnchor149)《解密Kubernetes存储》中详细介绍Kubernetes中的存储管理。'
- en: 'They can be easily laid out as shown in the following diagram:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 它们可以像下图所示轻松地布局：
- en: '![Figure 1.6 – Kubernetes plugin model ](img/Figure_1.6_B18201.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.6 – Kubernetes插件模型](img/Figure_1.6_B18201.jpg)'
- en: Figure 1.6 – Kubernetes plugin model
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.6 – Kubernetes插件模型
- en: A good understanding of the Kubernetes plugin model will help you not only in
    your daily work as a Kubernetes administrator but also to lay the foundation to
    help you quickly learn about Kubernetes ecosystems and cloud-native community
    standards.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 深入理解Kubernetes插件模型，不仅有助于你作为Kubernetes管理员的日常工作，还能为你奠定基础，帮助你快速学习Kubernetes生态系统和云原生社区标准。
- en: Kubernetes API primitives
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes API原语
- en: All operations and communications between components and external user commands
    are REST API calls that the API server handles. Everything in Kubernetes is considered
    an API object.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 所有组件之间的操作和通信以及外部用户命令，都是API服务器处理的REST API调用。在Kubernetes中，所有内容都被视为一个API对象。
- en: In Kubernetes, when you run a `kubectl` command, the `kubectl` utility is in
    fact reaching kube-apiserver. `kube-apiserver` first authenticates and validates
    requests and then updates information in `etcd` and retrieves the requested information.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kubernetes中，当你运行`kubectl`命令时，`kubectl`工具实际上是连接到kube-apiserver的。`kube-apiserver`首先对请求进行身份验证和验证，然后更新`etcd`中的信息并检索请求的信息。
- en: When it comes down to each worker node, the kubelet agent on each node takes
    Podspecs that are primarily provided by the API server, provisions the containerized
    workloads, and ensures (as described in those Podspecs) that the Pods are running
    and healthy. A Podspec is the body of the YAML definition file, which is translated
    to a JSON object that describes the specification for the workloads. Kubernetes
    form an API call going through the API server. And it is then taken into consideration
    by the control plane.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个工作节点中，kubelet代理在每个节点上获取由API服务器提供的Podspecs，配置容器化工作负载，并确保Pods（如Podspec中所描述的）正在运行并保持健康。Podspec是YAML定义文件的主体，它被转化为一个JSON对象，描述工作负载的规格。Kubernetes通过API服务器发起API调用，然后由控制平面进行处理。
- en: Kubernetes API primitives, also known as Kubernetes objects, are the fundamental
    building blocks of any containerized workload up and running in the Kubernetes
    cluster.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes API原语，也被称为Kubernetes对象，是任何在Kubernetes集群中运行的容器化工作负载的基础构件。
- en: 'The following are the main Kubernetes objects we’re going to use in our daily
    life while working with Kubernetes clusters:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们在日常使用Kubernetes集群时将要使用的主要Kubernetes对象：
- en: '**Pods**: The smallest deployable unit in Kubernetes is a Pod. The worker node
    hosts the Pods, which contain the actual application workload. The applications
    are packaged and deployed in the containers. A single Pod contains one or more
    containers.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Pods**：Kubernetes中最小的可部署单元是Pod。工作节点托管着Pods，Pods中包含了实际的应用工作负载。应用被打包并部署在容器中。一个Pod包含一个或多个容器。'
- en: '**ReplicaSet**: ReplicaSet helps Pods achieve higher availability when users
    define a certain number of replicas at a time with a ReplicaSet. The role of the
    ReplicaSet is to make sure the cluster will always have an exact number of replicas
    up and running in the Kubernetes cluster. If any of them were to fail, new ones
    will be deployed.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**副本集**：副本集帮助Pods在用户定义的副本数量下实现更高的可用性。副本集的作用是确保集群始终有精确数量的副本在Kubernetes集群中运行。如果其中任何一个副本失败，新的副本将会被部署。'
- en: '**DaemonSet**: DaemonSet is like ReplicaSet but it makes sure at least one
    copy of your Pod is evenly presented on each node in the Kubernetes cluster. If
    a new node is added to the cluster, a replica of that Pod is automatically assigned
    to that node. Similarly, when a node is removed, the Pod is automatically removed.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DaemonSet**：DaemonSet 类似于 ReplicaSet，但它确保至少在 Kubernetes 集群中的每个节点上都有一个副本的
    Pod。如果集群中添加了新节点，该 Pod 的副本将自动分配到该节点。同样，当节点被移除时，Pod 也会自动被移除。'
- en: '**StatefulSet**: StatefulSet is used to manage stateful applications. Users
    can use StatefulSet when a storage volume is needed to provide persistence for
    the workload.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**StatefulSet**：StatefulSet 用于管理有状态的应用。当工作负载需要存储卷以提供持久性时，用户可以使用 StatefulSet。'
- en: '`Completed` status. An example of using jobs is when we want to run a workload
    with a particular purpose and make sure it runs once and succeeds.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Completed` 状态。使用作业的一个示例是当我们希望运行一个特定目标的工作负载，并确保它只运行一次且成功时。'
- en: '`cron` expression to define a particular schedule per requirement.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `cron` 表达式根据需求定义特定的调度时间。
- en: '**Deployment**: A Deployment is a convenient way where you can define the desired
    state Deployment, such as deploying a ReplicaSet with a certain number of replicas,
    and it is easy to roll out and roll back to the previous versions.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Deployment**：Deployment 是一种方便的方式，允许你定义所需的状态，例如部署一个具有特定副本数的 ReplicaSet，并且可以轻松地进行版本回滚或发布。'
- en: We’ll cover more details about how to work with those Kubernetes objects in
    [*Chapter 4*](B18201_04.xhtml#_idTextAnchor080), *Application Scheduling and Lifecycle
    Management*. Stay tuned!
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[*第4章*](B18201_04.xhtml#_idTextAnchor080)《应用调度与生命周期管理》中详细介绍如何使用这些 Kubernetes
    对象。敬请期待！
- en: Sharing a cluster with namespaces
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用命名空间共享集群
- en: Understanding the basic Kubernetes objects will give you a glimpse of how Kubernetes
    works on a workload level, and we’ll cover more details and other related objects
    as we go. Those objects running on the Kubernetes cluster will work just fine
    when we’re doing the development or test ourselves or a quick onboarding exercise,
    although we’ll need to think about the separation of the workloads when it comes
    to the production environment for those enterprise-grade organizations. That’s
    where the namespace comes in.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 理解 Kubernetes 基本对象将让你初步了解 Kubernetes 如何在工作负载级别上运作。随着我们的深入讲解，还会涵盖更多细节和其他相关对象。这些在
    Kubernetes 集群上运行的对象在进行开发、测试或快速入门时会正常工作，尽管在企业级组织的生产环境中，我们需要考虑工作负载的隔离，这时命名空间的作用就体现出来了。
- en: A namespace is a logical separation of all the namespaced objects deployed in
    a single Kubernetes cluster. Examples of namespaced objects are Deployments, Services,
    Secrets, and more. Some other Kubernetes objects are cluster-wide, such as StorageClasses,
    Nodes, and PersistentVolumes. The name of a resource has to be unique within a
    namespace, but it’s labeled by a namespace name and an object name across all
    namespaces.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间是对单一 Kubernetes 集群中所有命名空间对象的逻辑隔离。命名空间对象的示例包括 Deployments、Services、Secrets
    等。还有一些 Kubernetes 对象是全局范围的，例如 StorageClasses、Nodes 和 PersistentVolumes。资源的名称在一个命名空间内必须唯一，但它在所有命名空间中都是通过命名空间名称和对象名称来标记的。
- en: Namespaces are intended to separate cluster resources between multiple users,
    which creates the possibility of sharing a cluster for multiple projects within
    an organization. We call this model the **Kubernetes multi-tenant model**. The
    multi-tenant model is an effective way to help different projects and teams share
    the cluster and get the most use out of the same cluster. The multi-tenant model
    helps minimize resource wasting. It comes in handy in particular when working
    with Kubernetes in the cloud as there is always a reservation of resources by
    the cloud vendors. Despite all the upsides, the multi-tenant model is also bringing
    extra challenges to resource management and security aspects. We’ll cover resource
    management in [*Chapter 4*](B18201_04.xhtml#_idTextAnchor080), *Application Scheduling
    and Lifecycle Management*.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间旨在将集群资源在多个用户之间进行隔离，从而为组织内部的多个项目共享集群提供了可能性。我们称这种模式为**Kubernetes 多租户模型**。多租户模型是一种有效的方式，帮助不同的项目和团队共享集群并最大化地利用同一个集群。多租户模型有助于最小化资源浪费。尤其在使用云端
    Kubernetes 时，云服务商总是会保留一定的资源，这时多租户模型特别有用。尽管如此，多租户模型也给资源管理和安全方面带来了额外的挑战。我们将在[*第4章*](B18201_04.xhtml#_idTextAnchor080)《应用调度与生命周期管理》中讨论资源管理。
- en: 'For better physical isolation, we recommend that organizations use multiple
    Kubernetes clusters. It will bring a physical boundary for different projects
    and teams, although the resources reserved by the Kubernetes system are also replicated
    across clusters. Beyond that, working across diﬀerent Kubernetes clusters is also
    challenging, as it involves setting up an eﬀective mechanism by switching the
    security context, as well as dealing with the complexity of the networking aspects.
    We’ll cover Kubernetes security in [*Chapter 6*](B18201_06.xhtml#_idTextAnchor192),
    *Securing Kubernetes*, and Kubernetes networking in [*Chapter 7*](B18201_07.xhtml#_idTextAnchor235),
    *Demystifying Kubernetes Networking*. The following is a diagram showing a Kubernetes
    multi-tenancy and multi-cluster comparison:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好的物理隔离，我们建议组织使用多个 Kubernetes 集群。这将为不同的项目和团队带来物理边界，尽管 Kubernetes 系统所保留的资源也会在集群之间进行复制。除此之外，跨多个
    Kubernetes 集群工作也是具有挑战性的，因为它涉及到通过切换安全上下文来建立有效的机制，以及处理网络方面的复杂性。我们将在[*第6章*](B18201_06.xhtml#_idTextAnchor192)，*保护
    Kubernetes*，以及 Kubernetes 网络部分的[*第7章*](B18201_07.xhtml#_idTextAnchor235)，*揭秘 Kubernetes
    网络*中详细讨论 Kubernetes 安全性和网络。以下是一个显示 Kubernetes 多租户与多集群比较的图示：
- en: '![Figure 1.7 – Kubernetes multi-tenancy versus multi-cluster ](img/Figure_1.7_B18201.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![图1.7 – Kubernetes 多租户与多集群](img/Figure_1.7_B18201.jpg)'
- en: Figure 1.7 – Kubernetes multi-tenancy versus multi-cluster
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.7 – Kubernetes 多租户与多集群
- en: Kubernetes in-market distribution and ecosystems
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes 市场发行版和生态系统
- en: Kubernetes is supported by a fast-growing and vibrant open source community.
    There are more than 60 known Kubernetes platforms and distributions on the market.
    On the high level, there are managed Kubernetes and standard Kubernetes distributions
    from the upstream community. We’re covering a high-level wrap-up for Kubernetes
    and its ecosystem in this section.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 得到了一个快速发展的、充满活力的开源社区的支持。目前市场上有超过 60 种已知的 Kubernetes 平台和发行版。从宏观上看，市场上有来自上游社区的托管
    Kubernetes 和标准 Kubernetes 发行版。在本节中，我们将提供关于 Kubernetes 及其生态系统的高层次总结。
- en: Upstream vanilla Kubernetes
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 上游原生 Kubernetes
- en: 'Upstream vanilla Kubernetes is commonly used when the organization wants to
    manage the Kubernetes cluster and their own on-premises infrastructure or their
    cloud-based VM. The source code of Kubernetes distribution comes from the upstream
    Kubernetes community project. It’s open for contribution, so feel free to join
    any **Special Interest Group** (**SIG**) groups; here’s the full list of community
    groups : [https://github.com/kubernetes/community/blob/master/sig-list.md](https://github.com/kubernetes/community/blob/master/sig-list.md).'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 上游原生 Kubernetes 通常在组织希望管理自己的 Kubernetes 集群以及本地基础设施或基于云的虚拟机时使用。Kubernetes 发行版的源代码来自上游
    Kubernetes 社区项目。它是开放的，欢迎贡献，因此请随时加入任何**兴趣小组**（**SIG**）小组；这里是社区小组的完整列表：[https://github.com/kubernetes/community/blob/master/sig-list.md](https://github.com/kubernetes/community/blob/master/sig-list.md)。
- en: 'If you have any ideas to share or want to learn from the community: [https://kubernetes.io/docs/contribute/generate-ref-docs/contribute-upstream/](https://kubernetes.io/docs/contribute/generate-ref-docs/contribute-upstream/).'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有任何想法或希望向社区学习：[https://kubernetes.io/docs/contribute/generate-ref-docs/contribute-upstream/](https://kubernetes.io/docs/contribute/generate-ref-docs/contribute-upstream/)。
- en: Managed Kubernetes
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 托管 Kubernetes
- en: Cloud vendor-managed Kubernetes distribution often falls into this category.
    Managed Kubernetes distribution is usually based on the vanilla Kubernetes cluster,
    and different vendors build their features on top of that and make it more adaptive
    to their infrastructure. A managed Kubernetes distribution usually has a control
    plane managed by the vendor, and users only need to manage the worker nodes and
    focus their energy on delivering value based on their core expertise.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 云服务商托管的 Kubernetes 发行版通常属于这一类别。托管的 Kubernetes 发行版通常基于原生 Kubernetes 集群，不同的厂商在此基础上构建其功能，使其更适应其基础设施。托管的
    Kubernetes 发行版通常由厂商管理控制平面，用户只需管理工作节点，并将精力集中在基于核心专业知识提供价值上。
- en: '**Microsoft Azure** provides **Azure Kubernetes Service** (**AKS**), **Amazon
    Web Service** (**AWS**) has **Elastic Kubernetes Service** (**EKS**), and **Google
    Cloud Platform** (**GCP**) is proud of its **Google Kubernetes Engine** (**GKE**).'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '**Microsoft Azure** 提供 **Azure Kubernetes Service**（**AKS**），**Amazon Web Service**（**AWS**）提供
    **Elastic Kubernetes Service**（**EKS**），而 **Google Cloud Platform**（**GCP**）则以其
    **Google Kubernetes Engine**（**GKE**）为荣。'
- en: Other popular Kubernetes distributions include VMware’s Tanzu, RedHat OpenShift,
    Canonical’s Charmed Kubernetes, and Kubernetes from Ranger Lab.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 其他流行的Kubernetes发行版包括VMware的Tanzu、RedHat的OpenShift、Canonical的Charmed Kubernetes和Ranger
    Lab的Kubernetes。
- en: Kubernetes ecosystems
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubernetes生态系统
- en: The Kubernetes ecosystem is not limited to provisioning and management tools;
    it has a wide variety of tools for security, networking, observability, and more.
    It covers all the important aspects of working with Kubernetes. The Kubernetes
    ecosystem is an important part of the cloud-native landscape. Thanks to Kubernetes
    being highly portable and platform-agnostic, we can literally take Kubernetes
    anywhere. It is easy to integrate with a security-sensitive disconnected scenario
    or integrated with the hybrid scenario as organizations are moving to the cloud.
    Those tools in the ecosystem are complementary to each other to boost Kubernetes’
    tremendous growth as a cloud-native technology and make a positive impact in the
    community and on the different sizes of businesses. Check out the cloud-native
    landscape at [https://landscape.cncf.io](https://landscape.cncf.io).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes生态系统不仅限于供应和管理工具；它还有多种工具用于安全、网络、可观察性等方面，涵盖了使用Kubernetes时所有重要的方面。Kubernetes生态系统是云原生领域的重要组成部分。由于Kubernetes具有高度的可移植性和平台无关性，我们可以将Kubernetes带到任何地方。它容易与安全敏感的断开场景集成，或者随着组织向云迁移，与混合场景集成。生态系统中的这些工具相互补充，推动了Kubernetes作为云原生技术的巨大增长，并对社区以及各类规模的企业产生了积极影响。查看云原生领域的更多内容，请访问[https://landscape.cncf.io](https://landscape.cncf.io)。
- en: Learning about Kubernetes and its ecosystem will help you better understand
    how to work with Kubernetes for your organization and how to help your organization
    get the best out of Kubernetes.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 学习Kubernetes及其生态系统将帮助你更好地理解如何为你的组织使用Kubernetes，以及如何帮助你的组织从Kubernetes中获得最大的收益。
- en: Summary
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter introduced you to some of the core concepts of Kubernetes, and
    we took a glimpse at the big picture of all the popular Kubernetes distributions
    on the market. An exciting journey is about to start!
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了Kubernetes的一些核心概念，并简要概览了市场上所有流行的Kubernetes发行版。激动人心的旅程即将开始！
- en: In the next chapter, we’ll dive into the details of the installation and configuration
    of a Kubernetes cluster. Stay tuned!
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将深入探讨Kubernetes集群的安装和配置细节，敬请期待！

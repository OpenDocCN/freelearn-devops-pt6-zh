["```\n    % gcloud container clusters create cluster1 --cluster-version latest --machine-type \"e2-medium\" --num-nodes \"3\" --network \"default\" --zone \"australia-southeast1-a\" --disk-type \"pd-standard\" --disk-size \"30\"\n    kubeconfig entry generated for cluster1.\n    NAME      LOCATION                MASTER_VERSION   MASTER_IP      MACHINE_TYPE  NODE_VERSION     NUM_NODES  STATUS\n    cluster1  australia-southeast1-a  1.23.12-gke.100  34.116.79.135  e2-medium     1.23.12-gke.100  3          RUNNING\n    ```", "```\n    % gcloud compute instances create chapter10-instance --tags=chapter10-meshvm \\\n      --machine-type=e2-medium --zone=australia-southeast1-b\n      --network=default --subnet=default \\\n      --image-project=ubuntu-os-cloud \\\n      --image=ubuntu-1804-bionic-v20221201, mode=rw, size=10\n    Created [https://www.googleapis.com/compute/v1/projects/istio-book-370122/zones/australia-southeast1-b/instances/chapter10-instance].\n    NAME        ZONE                    MACHINE_TYPE  PREEMPTIBLE  INTERNAL_IP  EXTERNAL_IP   STATUS\n    chapter10-instance australia-southeast1-b  e2-medium                10.152.0.13  34.87.233.38  RUNNING\n    ```", "```\n    % kubectl config view -o json | jq .contexts\n    [\n      {\n        \"name\": \"gke_istio-book-370122_australia-southeast1-a_cluster1\",\n        \"context\": {\n          \"cluster\": \"gke_istio-book-370122_australia-southeast1-a_cluster1\",\n          \"user\": \"gke_istio-book-370122_australia-southeast1-a_cluster1\"\n        }\n      }\n    ]\n    % export CTX_CLUSTER1=gke_istio-book-370122_australia-southeast1-a_cluster1\n    ```", "```\n    % gcloud compute ssh anand_rai@chapter10-instance\n    ```", "```\n    % CLUSTER_POD_CIDR=$(gcloud container clusters describe cluster1 --format=json --zone=australia-southeast1-a | jq -r '.clusterIpv4Cidr')\n    % echo $CLUSTER_POD_CIDR\n    10.52.0.0/14\n    ```", "```\n    % gcloud compute firewall-rules create \"cluster1-pods-to-chapter10vm\" \\\n      --source-ranges=$CLUSTER_POD_CIDR \\\n      --target-tags=chapter10-meshvm  \\\n      --action=allow \\\n      --rules=tcp:10000\n    Creating firewall...⠹Created [https://www.googleapis.com/compute/v1/projects/istio-book-370122/global/firewalls/cluster1-pods-to-chapter10vm].\n    Creating firewall...done.\n    NAME  NETWORK  DIRECTION  PRIORITY  ALLOW      DENY  DISABLED\n    cluster1-pods-to-chapter10vm   default  INGRESS    1000      tcp:10000        False\n    ```", "```\n    $ sudo apt update\n    $ sudo apt install debian-keyring debian-archive-keyring apt-transport-https curl lsb-release\n    $ curl -sL 'https://deb.dl.getenvoy.io/public/gpg.8115BA8E629CC074.key' | sudo gpg --dearmor -o /usr/share/keyrings/getenvoy-keyring.gpg\n    # Verify the keyring - this should yield \"OK\"\n    $ echo \n    a077cb587a1b622e03aa4bf2f3689de14658a9497a9af2c427bba5f4cc3c4723 /usr/share/keyrings/getenvoy-keyring.gpg | sha256sum --check\n    $ echo \"deb [arch=amd64 signed-by=/usr/share/keyrings/getenvoy-keyring.gpg] https://deb.dl.getenvoy.io/public/deb/debian $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/getenvoy.list\n    $ sudo apt update\n    envoy is properly installed:\n    ```", "```\n$ envoy --version\nenvoy  version: d362e791eb9e4efa8d87f6d878740e72dc8330ac/1.18.2/clean-getenvoy-76c310e-envoy/RELEASE/BoringSSL\n```", "```\n    $ envoy -c envoy-demo.yaml &\n    [2022-12-06 03:46:31.679][55335][info][main] [external/envoy/source/server/server.cc:330] initializing epoch 0 (base id=0, hot restart version=11.104)\n    ```", "```\n    $ curl localhost:10000\n    V2----------Bootstrap Service Mesh Implementation with Istio----------V2\n    ```", "```\n    apiVersion: install.istio.io/v1alpha1\n    kind: IstioOperator\n    spec:\n      values:\n        global:\n          meshID: mesh1\n          multiCluster:\n            clusterName: cluster1\n          network: network1\n    ```", "```\n    % istioctl install -f Chapter10/01-Cluster1.yaml --set values.pilot.env.PILOT_ENABLE_WORKLOAD_ENTRY_AUTOREGISTRATION=true --set values.pilot.env.PILOT_ENABLE_WORKLOAD_ENTRY_HEALTHCHECKS=true --context=\"${CTX_CLUSTER1}\"\n    This will install the Istio 1.16.0 default profile with [\"Istio core\" \"Istiod\" \"Ingress gateways\"] components into the cluster. Proceed? (y/N) y\n     Istio core installed\n     Istiod installed\n     Ingress gateways installed\n     Installation complete                                                                                                                                                                        Making this installation the default for injection and validation.\n    ```", "```\n    % samples/multicluster/gen-eastwest-gateway.sh \\\n    --mesh mesh1 --cluster cluster1 --network network1  | \\\n    istioctl install -y --context=\"${CTX_CLUSTER1}\" -f -\n    ✔ Ingress gateways installed\n    ✔ Installation complete\n    ```", "```\n    % kubectl apply -n istio-system -f samples/multicluster/expose-istiod.yaml --context=\"${CTX_CLUSTER1}\"\n    gateway.networking.istio.io/istiod-gateway created\n    virtualservice.networking.istio.io/istiod-vs created\n    ```", "```\n    % kubectl create ns chapter10vm --context=\"${CTX_CLUSTER1}\"\n    istiod on the VM to connect with the Kubernetes API server:\n    ```", "```\n% kubectl create serviceaccount chapter10-sa -n chapter10vm --context=\"${CTX_CLUSTER1}\"\nserviceaccount/chapter10-sa created\n```", "```\n    apiVersion: networking.istio.io/v1alpha3\n    kind: WorkloadGroup\n    metadata:\n      name: \"envoydummy\"\n      namespace: \"chapter10vm\"\n    spec:\n      metadata:\n        labels:\n          app: \"envoydummy\"\n      template:\n        serviceAccount: \"chapter10-sa\"\n        network: \"network1\"\n      probe:\n        periodSeconds: 5\n        initialDelaySeconds: 1\n        httpGet:\n          port: 10000\n          path: /\n    ```", "```\n    % kubectl --namespace chapter10vm apply -f \"Chapter10/01-WorkloadGroup.yaml\" --context=\"${CTX_CLUSTER1}\"\n    workloadgroup.networking.istio.io/envoyv2 created\n    ```", "```\n    % istioctl x workload entry configure -f \"Chapter10/01-WorkloadGroup.yaml\" -o . --clusterID \"cluster1\" --autoregister --context=\"${CTX_CLUSTER1}\"\n    Warning: a security token for namespace \"chapter10vm\" and service account \"chapter10-vm-sa\" has been generated and stored at \"istio-token\"\n    Configuration generation into directory . was successful\n    ```", "```\n% ls\nhosts root-cert.pem istio-token cluster.env mesh.yaml\n```", "```\n    % sudo mkdir -p /etc/certs\n    % sudo cp \"${HOME}\"/root-cert.pem /etc/certs/root-cert.pem\n    % sudo  mkdir -p /var/run/secrets/tokens\n    % sudo cp \"${HOME}\"/istio-token /var/run/secrets/tokens/istio-token\n    % sudo cp \"${HOME}\"/cluster.env /var/lib/istio/envoy/cluster.env\n    % sudo cp \"${HOME}\"/mesh.yaml /etc/istio/config/mesh\n    % sudo sh -c 'cat $(eval echo ~$SUDO_USER)/hosts >> /etc/hosts'\n    % sudo mkdir -p /etc/istio/proxy\n    % sudo chown -R istio-proxy /var/lib/istio /etc/certs /etc/istio/proxy /etc/istio/config /var/run/secrets /etc/certs/root-cert.pem\n    ```", "```\n    $ curl -LO https://storage.googleapis.com/istio-release/releases/1.16.0/deb/istio-sidecar.deb\n    $ sudo dpkg -i istio-sidecar.deb\n    Selecting previously unselected package istio-sidecar.\n    (Reading database ... 54269 files and directories currently installed.)\n    Preparing to unpack istio-sidecar.deb ...\n    Unpacking istio-sidecar (1.16.0) ...\n    Setting up istio-sidecar (1.16.0) ...\n    ```", "```\n    $ sudo systemctl start istio\n    $ sudo systemctl status istio\n    ● istio.service - istio-sidecar: The Istio sidecar\n         Loaded: loaded (/lib/systemd/system/istio.service; disabled; vendor preset: enable>\n         Active: active (running) since Tue 20XX-XX-06 07:56:03 UTC; 15s ago\n           Docs: http://istio.io/\n       Main PID: 56880 (sudo)\n          Tasks: 19 (limit: 4693)\n         Memory: 39.4M\n            CPU: 1.664s\n         CGroup: /system.slice/istio.service\n                 ├─56880 sudo -E -u istio-proxy -s /bin/bash -c ulimit -n 1024; INSTANCE_IP>\n                 ├─56982 /usr/local/bin/pilot-agent proxy\n                 └─56992 /usr/local/bin/envoy -c etc/istio/proxy/envoy-rev.json --drain-tim>\n    ```", "```\n% kubectl get WorkloadEntry -n chapter10vm\nNAME                              AGE    ADDRESS\nenvoydummy-10.152.0.21-network1   115s   10.152.0.21\n```", "```\n% kubectl get WorkloadEntry/envoydummy-10.152.0.21-network1 -n chapter10vm -o yaml\n```", "```\n    apiVersion: v1\n    kind: Service\n    metadata:\n      name: envoydummy\n      labels:\n        app: envoydummy\n      namespace: chapter10vm\n    spec:\n      ports:\n      - port: 80\n        targetPort: 10000\n        name: tcp\n      selector:\n        app: envoydummy\n    ---\n    ```", "```\n% kubectl apply -f Chapter10/02-envoy-proxy.yaml -n chapter10vm\n```", "```\n    $ kubectl create ns chapter10 --context=\"${CTX_CLUSTER1}\"\n    $ kubectl label namespace chapter10 istio-injection=enabled --context=\"${CTX_CLUSTER1}\"\n    $ kubectl create configmap envoy-dummy --from-file=Chapter3/envoy-config-1.yaml -n chapter10 --context=\"${CTX_CLUSTER1}\"\n    $ kubectl create -f \"Chapter10/01-envoy-proxy.yaml\" --namespace=chapter10 --context=\"${CTX_CLUSTER1}\"\n    $ kubectl apply -f Chapter10/01-istio-gateway.yaml\" -n chapter10 --context=\"${CTX_CLUSTER2}\"\n    ```", "```\n    route:\n    - destination:\n        host: envoydummy.chapter10.svc.cluster.local\n      weight: 50\n    - destination:\n        host: envoydummy.chapter10vm.svc.cluster.local\n      weight: 50\n```", "```\n$ curl envoydummy.chapter10.svc:80\nBootstrap Service Mesh Implementation with Istio\n```", "```\n% for i in {1..10}; do curl -Hhost:mockshop.com -s \"http://34.87.194.86:80\";echo '\\n'; done\nV2----------Bootstrap Service Mesh Implementation with Istio----------V2\nBootstrap Service Mesh Implementation with Istio\nV2----------Bootstrap Service Mesh Implementation with Istio----------V2\nBootstrap Service Mesh Implementation with Istio\nV2----------Bootstrap Service Mesh Implementation with Istio----------V2\nBootstrap Service Mesh m bbhgc  Mesh Implementation with Istio----------V2\nBootstrap Service Mesh Implementation with Istio\nV2----------Bootstrap Service Mesh Implementation with Istio----------V2\nBootstrap Service Mesh Implementation with Istio\n```"]
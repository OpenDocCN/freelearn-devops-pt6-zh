- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installing Your First App with Helm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Earlier in this book, we referred to Helm as the **Kubernetes package manager**
    and compared it to an operating system’s package manager. A package manager allows
    users to quickly and easily install applications of varying complexities and manage
    any dependencies that an application might have. Helm works similarly.
  prefs: []
  type: TYPE_NORMAL
- en: Users simply determine the application they want to deploy on Kubernetes and
    Helm does the rest of the work. A Helm chart – a packaging of Kubernetes resources
    – contains the logic and components required to install an application, allowing
    users to perform installations without needing to know the specific resources
    required. Users can also pass in parameters, called values, to a Helm chart to
    customize different aspects of the application. You will explore these features
    in this chapter by leveraging Helm as a package manager to deploy an instance
    of WordPress onto Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the WordPress application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding a WordPress chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Kubernetes environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing a WordPress chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choosing between `--set` and `--values`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing the WordPress application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrading the WordPress release
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rolling back the WordPress release
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uninstalling the WordPress release
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shutting down your environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter will use the following software technologies:'
  prefs: []
  type: TYPE_NORMAL
- en: minikube
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: kubectl
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Helm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We assume that these components have already been installed on your system.
    For additional information on each of these tools, including their installation
    and configuration, please refer to [*Chapter 2*](B17979_02.xhtml#_idTextAnchor038),
    *Preparing a Kubernetes and Helm Environment*.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the WordPress application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: WordPress is an open source **Content Management System** (**CMS**) used to
    create websites and blogs. Two different variants are available – WordPress.com
    and WordPress.org. WordPress.com is a **Software-as-a-Service** (**SaaS**) version
    of the CMS, meaning the WordPress application and its components are hosted and
    managed by WordPress. In this case, users do not need to worry about installing
    a WordPress instance as they can simply access instances that are already available.
    WordPress.org, on the other hand, is the self-hosted option. It requires users
    to deploy their WordPress instances and requires some level of expertise to maintain.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since WordPress.com is easier to start with, it may sound like the more desirable
    option. This SaaS version of WordPress, however, has many disadvantages over the
    self-hosted WordPress.org, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: It does not provide as many features as WordPress.org
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It does not give users full control over their website
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It requires users to pay for premium features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It does not provide the ability to modify the backend code of a website
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The self-hosted WordPress.org variation, on the other hand, gives users complete
    control over their website and WordPress instances. It provides the full WordPress
    feature set, from installing plugins to modifying backend code.
  prefs: []
  type: TYPE_NORMAL
- en: 'A self-hosted WordPress instance requires users to deploy a few different components.
    WordPress needs a MySQL or a MariaDB database to save the website and administrative
    data, and the WordPress UI is deployed as a PHP frontend. In Kubernetes, deploying
    these components means creating a variety of different resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Secrets` for database and admin console authentication'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `ConfigMap` for externalized database configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Services` for networking'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `PersistentVolumeClaim` for database storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `StatefulSet` for deploying the database in a stateful fashion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `Deployment` for deploying the frontend
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating these Kubernetes resources requires both WordPress and Kubernetes expertise.
    WordPress expertise is required because the user needs to know the required physical
    components, as well as how to configure them. Kubernetes expertise is required
    because users need to know how to deploy WordPress dependencies as Kubernetes
    resources. Given the complexity and number of components that are required, deploying
    WordPress on Kubernetes can be a daunting task.
  prefs: []
  type: TYPE_NORMAL
- en: The challenge presented by this task is a perfect use case for Helm. Rather
    than focusing on creating and configuring each of the Kubernetes resources we
    have described, users can leverage Helm as a package manager to deploy and configure
    WordPress on Kubernetes. To begin, we’ll explore a platform called **Artifact
    Hub** to locate a suitable WordPress Helm chart. After that, we’ll deploy WordPress
    to your Kubernetes cluster using Helm and explore basic Helm features along the
    way.
  prefs: []
  type: TYPE_NORMAL
- en: Finding a WordPress chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Helm charts can be made available for consumption by publishing them to a chart
    repository. A chart repository is a location where packaged charts can be stored
    and shared. A repository is often hosted as an HTTP server and can take the form
    of various implementations, including GitHub pages, an Amazon S3 bucket, or a
    simple web server, such as Apache HTTPD. Recently, repositories can also take
    the form of OCI registries, allowing users to save and retrieve Helm charts from
    hosted services such as Docker Hub and Quay.
  prefs: []
  type: TYPE_NORMAL
- en: To use charts from a repository, Helm needs to be configured to use the repository.
    This can be accomplished by adding repositories using `helm repo add`. One challenge
    involved with adding repositories is that there are many different chart repositories
    available for consumption; it may be difficult to locate the particular repository
    that fits your use case. To make it easier to find chart repositories (and other
    Kubernetes-related artifacts), the Kubernetes community created a platform called
    Artifact Hub.
  prefs: []
  type: TYPE_NORMAL
- en: Artifact Hub is a centralized location for upstream Kubernetes artifacts, such
    as Helm charts, operators, plugins, and more. In this chapter, we will use the
    Artifact Hub platform to search for WordPress Helm charts. Once an appropriate
    chart is found, we will add the repository this chart belongs to so that it can
    be installed.
  prefs: []
  type: TYPE_NORMAL
- en: To begin, interaction with Artifact Hub can be accomplished either from the
    command line or from a web browser. When using the command line to search for
    Helm charts, the results that are returned provide a URL to Artifact Hub, which
    can be used to find additional information on the chart and instructions on how
    to add its chart repository.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s follow this workflow to add a chart repository containing a WordPress
    chart.
  prefs: []
  type: TYPE_NORMAL
- en: Searching for WordPress charts from the command line
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In general, Helm contains two different search commands to assist us in finding
    Helm charts:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To search for charts in Artifact Hub, use the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that in prior versions of Helm, `helm search hub` referenced a centrally
    managed public repository of Helm charts maintained by the Helm community called
    Helm Hub instead of Artifact Hub. Backward compatibility has been retained through
    the use of the `--endpoint` parameter, which enables users to specify the location
    of any monocular-based instance, the web search and discovery web application
    backing Helm Hub.
  prefs: []
  type: TYPE_NORMAL
- en: 'To search repositories for a keyword present in a chart, use the following
    command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If repositories have not been added previously, users should run the `helm search
    hub` command to locate Helm charts available across all public chart repositories.
    Once a repository has been added, users can run `helm search repo` to search across
    these repositories.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s search Artifact Hub for any existing WordPress charts. Each chart in
    Artifact Hub has a set of keywords that can be searched against. Execute the following
    command to locate charts containing the `wordpress` keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Upon running this command, an output similar to the following should be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1 – The output from running helm search hub wordpress'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.1_B17979.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.1 – The output from running helm search hub wordpress
  prefs: []
  type: TYPE_NORMAL
- en: Each line of the output returned by this command is a chart from Artifact Hub.
    The output displays the URL to each chart’s Artifact Hub page. Also displayed
    is the chart version, which represents the latest version of the Helm chart, and
    the app version, which represents the version of the application that the chart
    deploys by default. The `helm search hub` command also prints a brief description
    of each chart.
  prefs: []
  type: TYPE_NORMAL
- en: As you may have noticed, some of the values returned are truncated. This is
    because the default output of `helm search hub` is `table`, causing the results
    to be returned in tabular format. By default, columns wider than 50 characters
    are truncated. This truncation can be avoided by using the `--max-col-width=0`
    flag.
  prefs: []
  type: TYPE_NORMAL
- en: 'Try running the following command by including the `--max-col-width` flag to
    view the untruncated results in tabular format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively, users can pass the `--output` flag and specify either `yaml`
    or `json`, which will print the search results in full.
  prefs: []
  type: TYPE_NORMAL
- en: 'Try running the previous command again with the `--output yaml` flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The result will be in YAML format, similar to the output shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.2 – The output for the helm search hub wordpress --output yaml command'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.2_B17979.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.2 – The output for the helm search hub wordpress --output yaml command
  prefs: []
  type: TYPE_NORMAL
- en: For this example, we will choose to install the second chart that was returned
    in the preceding sample output. To learn more about this chart and how it is installed,
    visit [https://artifacthub.io/packages/helm/bitnami/wordpress](B17979_03.xhtml#_idTextAnchor083).
    We’ll explore this link in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing the WordPress chart in a browser
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using `helm search hub` is the fastest way to search for charts on Artifact
    Hub. However, it does not provide all of the details needed for installation.
    Namely, users need to know a chart’s repository URL to add its repository and
    install the chart. A chart’s Artifact Hub page can provide this URL, along with
    other installation details.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have entered the WordPress chart’s URL into a browser window, a page
    similar to the following will be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.3 – A WordPress Helm chart from Artifact Hub'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.3_B17979.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.3 – A WordPress Helm chart from Artifact Hub
  prefs: []
  type: TYPE_NORMAL
- en: The WordPress chart’s page from Artifact Hub provides many details, including
    the maintainer of the chart (**Bitnami**, which is a company that provides software
    packages that can be deployed to different environments) and a brief introduction
    to the chart (stating that this chart will deploy a WordPress instance to Kubernetes,
    along with a Bitnami MariaDB chart as a dependency). The web page also provides
    installation details, including the chart’s supported values, which are used to
    configure the installation, along with Bitnami’s chart repository URL. These installation
    details give users the ability to add this repository and install the WordPress
    chart.
  prefs: []
  type: TYPE_NORMAL
- en: Under the `helm repo add` command. This is the command that you need to run
    to add the Bitnami chart repository, which is the repository that contains the
    WordPress chart we are interested in installing.
  prefs: []
  type: TYPE_NORMAL
- en: Bitnami repository chart retention policy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Recent changes within the Bitnami Helm community have resulted in charts being
    removed from the Bitnami repository 6 months after their publication date. Aligning
    to the most recent versions of software packages is a recommended practice so
    that the most recent set of features and security remediations are included. However,
    since the remainder of the exercises specify specific chart versions to support
    the stability of the tested integrations, an alternate repository must be utilized.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, another repository index has been provided that includes all of
    the Bitnami charts without the retention policy of the default index, which will
    be described in the next section. You will learn more about repository indexes
    by creating and managing your own repository in [*Chapter 7*](B17979_07.xhtml#_idTextAnchor196),
    *Helm Lifecycle Hooks*.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the full Bitnami repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With an understanding of the considerations as they relate to charts within
    the Bitnami repository, let’s add the repository that allows us to specify specific
    chart versions without concerns that they may be removed in the future. The only
    difference in the `helm repo add` command is the URL of the repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s add the repository now and verify that we can interact with its contents:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the full Bitnami chart repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that the chart has been added by running `helm repo list`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We can do a little more now that we have added the repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to view charts from locally configured repositories
    that contain the `bitnami` keyword:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A shortened list of the results returned is shown in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.4 – The output for the helm search repo bitnami --output yaml command'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.4_B17979.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.4 – The output for the helm search repo bitnami --output yaml command
  prefs: []
  type: TYPE_NORMAL
- en: Similar to the `helm search hub` command, the `helm search repo` command takes
    a keyword as an argument. Using `bitnami` as a keyword will return all the charts
    in the `bitnami` repository, as well as charts outside of that repository that
    may also contain the `bitnami` keyword.
  prefs: []
  type: TYPE_NORMAL
- en: 'To ensure that you now have access to the WordPress chart, run the following
    `helm search repo` command with the `wordpress` argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will display the WordPress chart that you found on Artifact Hub
    and observed in your browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.5 – The output for the helm search repo wordpress command'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.5_B17979.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.5 – The output for the helm search repo wordpress command
  prefs: []
  type: TYPE_NORMAL
- en: 'The value in the `NAME` field before the slash (`/`) indicates the name of
    the repository containing the Helm chart that was returned. The latest version
    of the WordPress chart from the `bitnami` repository, at the time of writing,
    is version `12.1.6`. This is the version that will be used for the installation.
    Previous versions can be queried by passing the `--versions` flag to the `search`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You should then see a new line for each version of the available WordPress
    charts:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.6 – The version lists for WordPress charts in the bitnami repository'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.6_B17979.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.6 – The version lists for WordPress charts in the bitnami repository
  prefs: []
  type: TYPE_NORMAL
- en: Now that a WordPress chart has been identified and the chart’s repository has
    been added, we will explore how to use the command line to find out more about
    the chart so that you can install it.
  prefs: []
  type: TYPE_NORMAL
- en: Showing the WordPress chart information from the command line
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can find a lot of important details about a Helm chart on its Artifact
    Hub page. Once a chart’s repository is added locally, this information (and more)
    can also be viewed from the command line with the following four `helm show` subcommands:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Display the chart’s metadata (or chart definition):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Display the chart’s README file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Display the chart’s values:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Display the chart’s definition, README files, and values:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Let’s use these commands with the Bitnami WordPress chart. In each of these
    commands, the chart should be referenced as `bitnami/wordpress`. Note that we
    will be passing the `--version` flag to retrieve information about version 12.1.6
    of this chart. If this flag is omitted, information from the latest version of
    the chart will be returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `helm show chart` command to retrieve the metadata for the chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of this command will be the **chart definition** of the WordPress
    chart. A chart definition describes information such as the chart’s version, its
    dependencies, keywords, and maintainers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.7 – The wordpress chart definition'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.7_B17979.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.7 – The wordpress chart definition
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `helm show readme` command to view the chart’s README file from the
    command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The results of this command may look familiar since a chart’s README file is
    also displayed on its Artifact Hub page. Using this option from the command line
    provides a quick way to view the README file without having to open a browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.8 – The wordpress chart’s README file shown in the command line'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.8_B17979.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.8 – The wordpress chart’s README file shown in the command line
  prefs: []
  type: TYPE_NORMAL
- en: We can use `helm show values` to inspect a chart’s values. Values serve as parameters
    that users can provide to customize a chart installation. We will run this command
    later in this chapter in the *Creating a values file for configuration* section
    when we install the WordPress chart.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, `helm show all` aggregates all of the information from the previous
    three commands together. Use this command if you want to inspect all of a chart’s
    details at once.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have found and inspected a WordPress chart, let’s set up a Kubernetes
    environment where we can later install this chart.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Kubernetes environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To create a Kubernetes environment in this chapter, we will use minikube. We
    learned how to install minikube in [*Chapter 2*](B17979_02.xhtml#_idTextAnchor038),
    *Preparing a Kubernetes and Helm Environment*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to set up Kubernetes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start your Kubernetes cluster by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After a short amount of time, you should see a line in the output that resembles
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once the minikube cluster is up and running, create a dedicated namespace for
    this chapter’s exercise. Run the following command to create a namespace called
    `chapter3`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now that the cluster setup is complete, let’s begin the process of installing
    the WordPress chart to your Kubernetes cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Installing a WordPress chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installing a Helm chart is a simple process that should begin with inspecting
    a chart’s values. In the next section, we will inspect the values that are available
    in the WordPress chart and describe how to create a file that allows for customizing
    the installation. Finally, we will install the chart and access the WordPress
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a values file for configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can override the values defined in charts by providing a YAML-formatted
    `values` file. To create a `values` file, you need to inspect the supported values
    that the chart provides. This can be done by running the `helm show values` command,
    as explained earlier.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to inspect the WordPress chart’s values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of this command should be a long list of possible values that you
    can set, many of which already have default values set:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.9 – A list of values generated by running helm show values'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.9_B17979.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.9 – A list of values generated by running helm show values
  prefs: []
  type: TYPE_NORMAL
- en: The preceding output shows a portion of the WordPress chart’s values. Many of
    these properties already have defaults set, meaning these values will represent
    how the chart is configured if they are not overridden. For example, if the values
    under the `image` map are not overridden, the WordPress chart will use the `bitnami/wordpress`
    container image from the `docker.io` registry against the `5.8.0-debian-10-r24`
    tag.
  prefs: []
  type: TYPE_NORMAL
- en: Lines in the chart’s values that begin with a hash sign (`#`) are comments.
    Comments can be used to explain a value or a block of values, or they can be used
    to unset them. As shown in the preceding example, comments were used to document
    each of the image-related values.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we explore the `helm show values` output further, we can find values that
    pertain to configuring the WordPress blog’s metadata:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.10 – The values returned by running the helm show values command'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.10_B17979.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.10 – The values returned by running the helm show values command
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, these values are used to create a WordPress user and create
    a name for your blog. Let’s override them by creating a `values` file. Create
    a new file on your machine called `wordpress-values.yaml`. In that file, enter
    the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Feel free to get more creative with these values if you’d like. Continuing
    down the list of values from `helm show values`, there is one more important value
    that should be added to your `values` file before starting the installation, as
    shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.11 – The LoadBalancer value returned after running helm show values'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.11_B17979.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.11 – The LoadBalancer value returned after running helm show values
  prefs: []
  type: TYPE_NORMAL
- en: To simplify the installation, we are going to update this value (referred to
    as `service.type`) to `NodePort`. We could leave this set to `LoadBalancer`, but
    this would require you to use the `minikube tunnel` command to reach the service.
    By setting this to `NodePort` instead, you will be able to directly access WordPress
    against a local port.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add this value to your `wordpress-values.yaml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Once this value has been added to your `values` file, your complete `wordpress-values.yaml`
    file should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Now that the `values` file is complete, let’s run the installation.
  prefs: []
  type: TYPE_NORMAL
- en: Running the installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We use `helm install` to install a Helm chart. The standard syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The `NAME` parameter is the name you would like to give your Helm release. A
    **release** captures the Kubernetes resources that were installed with a chart
    and tracks an application’s life cycle. We will explore how releases work throughout
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The `CHART` parameter is the name of the Helm chart that is installed. Charts
    from a repository can be installed using `<repo name>/<chart name>`.
  prefs: []
  type: TYPE_NORMAL
- en: The `flags` option in `helm install` allows you to further customize the installation.
    `flags` allows users to define and override values, specify the namespace to work
    against, and more. The list of flags can be viewed by running `helm install --help`.
    We can pass `--help` to other commands to view their usage and supported options.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have a proper understanding of the usage of `helm install`, let’s
    run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This command installs a new release called `wordpress` using the `bitnami/wordpress`
    Helm chart. It uses the values defined in the `wordpress-values.yaml` file to
    customize the installation, and the chart is installed in the `chapter3` namespace.
    Version `12.1.6` of the chart is deployed, as defined by the `--version` flag.
    Helm will install the latest cached version of the Helm chart without this flag.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the chart’s installation is successful, you should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.12 – The output of a successful WordPress chart installation'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.12_B17979.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.12 – The output of a successful WordPress chart installation
  prefs: []
  type: TYPE_NORMAL
- en: This output displays information about the installation, including the name
    of the release, the time it was deployed, the namespace it was installed to, the
    status of the deployment (which is `deployed`), and the revision number (which
    is set to `1` since this is the initial installation of the release).
  prefs: []
  type: TYPE_NORMAL
- en: The output also displays a list of notes related to the installation. Notes
    are used to provide users with additional information about their installation.
    In the case of the WordPress chart, these notes provide information about how
    to access the WordPress application. While these notes appear directly after installation,
    they can be retrieved at any time with the `helm get notes` command, as explained
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: With your first Helm installation complete, let’s inspect the release to observe
    the resources and configurations that were applied.
  prefs: []
  type: TYPE_NORMAL
- en: Inspecting your release
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the easiest ways to inspect a release and verify its installation is
    to list all the Helm releases in a given namespace. For this to be achieved, Helm
    provides the `list` subcommand.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to view the list of releases in the `chapter3` namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see only one release in this namespace, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.13 – The output from the helm list command that lists the Helm releases'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.13_B17979.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.13 – The output from the helm list command that lists the Helm releases
  prefs: []
  type: TYPE_NORMAL
- en: 'The `list` subcommand provides the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: The release name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The release namespace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The latest revision number of the release
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A timestamp of the latest revision
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The release status
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The chart name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The application version
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that the status, chart name, and application version have been truncated
    in the preceding output.
  prefs: []
  type: TYPE_NORMAL
- en: While the `list` subcommand is useful for providing high-level release information,
    there are additional items that users may want to know about a particular release.
    Helm provides the `get` subcommand to provide more information about a release.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following commands can be used to provide a set of detailed release information:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To return all the hooks for a named release, run the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To return the manifest for a named release, run the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To return the notes for a named release, run the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To return the values for a named release, run the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To return all the information about a named release, run the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The first command from the preceding list, `helm get hooks`, is used to display
    the hooks for a given release. Hooks will be explored in more detail in [*Chapter
    7*](B17979_07.xhtml#_idTextAnchor196), *Helm Lifecycle Hooks*, when you build
    and test a Helm chart. For now, hooks can be thought of as the actions that Helm
    performs during certain phases of an application’s life cycle. This WordPress
    installation did not create any hooks, so let’s move on to the next command.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `helm get manifest` command can be used to get a list of the Kubernetes
    resources that were created as part of the installation. Run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'After you run this command, you’ll see the following Kubernetes manifests:'
  prefs: []
  type: TYPE_NORMAL
- en: Two `Secrets` for MariaDB and WordPress credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two `ConfigMaps` (the first is used to configure the WordPress application,
    while the second is used for testing, which is performed by chart developers and
    so can be ignored).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One `PersistentVolumeClaim` for persisting MariaDB data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two `Services` for MariaDB and WordPress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One `Deployment` for WordPress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One `StatefulSet` for MariaDB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One `ServiceAccount` for MariaDB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'From this output, you can observe where your values had an effect when they
    configured the Kubernetes resources. One example to note is within the WordPress
    service, where `type` has been set to `NodePort`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.14 – Setting the Service type to NodePort'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.14_B17979.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.14 – Setting the Service type to NodePort
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also observe the other values that we set for the WordPress user. These
    values are defined as environment variables in the WordPress deployment, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.15 – Values set as environment variables'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.15_B17979.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.15 – Values set as environment variables
  prefs: []
  type: TYPE_NORMAL
- en: The rest of the default values provided by the chart were left untouched. Those
    defaults have been applied to the Kubernetes resources and can be observed through
    the `helm get manifest` command. If these values had been changed, the Kubernetes
    resources would have been configured differently.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s move on to the next `get` command. The `helm get notes` command is used
    to display the notes from a Helm release. As you may recall, the release notes
    were displayed when the WordPress chart was installed. Notes are chart-specific
    and, in the case of WordPress, provide important information about accessing the
    application and can be displayed once again by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The next command is `helm get values`, and it is useful for recalling the values
    that were used for a given release. Run the following command to view the values
    that were provided in the `wordpress` release:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of this command should look familiar as they should match the values
    specified in the `wordpress-values.yaml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.16 – User-supplied values in the WordPress release'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.16_B17979.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.16 – User-supplied values in the WordPress release
  prefs: []
  type: TYPE_NORMAL
- en: 'While recalling the user-supplied values is useful, it may be necessary to
    return all of the values used by a release, including the defaults. This can be
    accomplished by passing in an additional `--all` flag, as shown in the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'For this chart, the output will be lengthy. The first several values are shown
    in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.17 – A subset of all the values for the WordPress release'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.17_B17979.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.17 – A subset of all the values for the WordPress release
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, Helm provides a `helm get all` command, which can be used to aggregate
    all of the information from the various `helm get` commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding command, we snuck in the `-n` flag in place of `--namespace`.
    From here on out, we will use the `-n` flag to provide the namespace that Helm
    should operate within.
  prefs: []
  type: TYPE_NORMAL
- en: 'Besides the commands provided by Helm, the `kubectl` CLI can also be used to
    inspect an installation more closely. For example, you could return the deployments
    that Helm created by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'You’ll find that the following deployment exists in the `chapter3` namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.18 – The wordpress deployment in the chapter3 namespace'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.18_B17979.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.18 – The wordpress deployment in the chapter3 namespace
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding command, we filtered the deployments by using the `-l app.kubernetes.io/name=wordpress`
    parameter. Many Helm charts add the `app.kubernetes.io/name` label (or a similar
    label) on the resources they create. You can use this label to filter resources
    using `kubectl` so that only resources that Helm created are returned.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing between --set and --values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we installed WordPress earlier, we used the `--values` flag to pass parameters
    to the Helm chart. However, there are two ways to pass values:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To pass a value explicitly from the command line, use the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To specify values from a YAML file or URL, use the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this book, we will treat the `--values` flag as the preferred method of configuring
    chart values. The reason for this is that it is easier to configure multiple values
    when they are contained in a YAML file. Maintaining a `values` file also makes
    it simple to save these assets in a `Git`, which allows installations to be easily
    reproducible. However, take note that sensitive values, such as passwords, should
    never be stored in a source control repository. When secrets need to be provided,
    the recommended approach is to use the `--set` flag to prevent them from being
    committed to source control. We will cover the topic of security in greater detail
    in [*Chapter 12*](B17979_12.xhtml#_idTextAnchor270), *Helm Security Considerations*.
  prefs: []
  type: TYPE_NORMAL
- en: The `--set` flag is used to pass values directly from the command line. This
    is an acceptable method for simple values, as well as for when there are only
    a small number of values that need to be configured. Complex values, such as lists
    and maps, can be challenging to input when using the `--set` flag, so it is not
    preferred. There are other related flags, such as `--set-file` and `--set-string`.
    The `--set-file` flag is used to pass along a file that has configured values
    in a `key1=val1` and `key2=val2` format, while the `--set-string` flag is used
    to set all the values provided in a `key1=val1` and `key2=val2` format as strings.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s explore the WordPress application that we just installed.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the WordPress application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The WordPress chart’s release notes provided four commands that you can run
    to access your WordPress application (you can recall the full release notes using
    `helm get notes wordpress -n chapter3`). Run the four commands that were provided
    from the notes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For macOS or Linux, run the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Windows PowerShell, run the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After defining the two environment variables based on the series of `kubectl`
    queries, the resulting `echo` commands will reveal the URLs to access WordPress.
    The first URL is to view the home page and is where visitors will access your
    site. The second URL is to reach the admin console, which is used by website administrators
    to configure and manage the site’s content.
  prefs: []
  type: TYPE_NORMAL
- en: 'Paste the first URL into a browser. You should be presented with a page that
    looks similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.19 – The WordPress blog page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.19_B17979.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.19 – The WordPress blog page
  prefs: []
  type: TYPE_NORMAL
- en: Several portions of this page may look familiar to you. First, at the top of
    the screen, the title of the blog is `wordpressBlogName` value previously during
    installation. You can also see this value at the bottom left-hand side of the
    page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another value that affected the customization of the home page is `wordpressUsername`.
    If you click on the `helm-user`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.20 – The “Hello world!” post'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.20_B17979.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.20 – The “Hello world!” post
  prefs: []
  type: TYPE_NORMAL
- en: If you had provided a different value for `wordpressUsername`, then the author
    here would appear differently as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second link provided by the previous set of commands is for accessing the
    admin console. Paste the link from the second `echo` command into a browser. You
    should be presented with the following login screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.21 – The WordPress admin console login page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.21_B17979.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.21 – The WordPress admin console login page
  prefs: []
  type: TYPE_NORMAL
- en: To log into the admin console, enter the `wordpressUsername` and `wordpressPassword`
    values that you provided during the installation. If you used the same values
    we specified earlier, then the username will be `helm-user` and the password will
    be `my-password`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you’re authenticated, the admin console dashboard will be displayed, as
    shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.22 – The WordPress admin console page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.22_B17979.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.22 – The WordPress admin console page
  prefs: []
  type: TYPE_NORMAL
- en: 'If you were a WordPress administrator, this is where you could configure your
    site, write posts, and manage plugins. If you click on the top-right link that
    says `helm-user` profile page. From there, you can see several of the other values
    that you provided during the installation, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.23 – The WordPress profile page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.23_B17979.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.23 – The WordPress profile page
  prefs: []
  type: TYPE_NORMAL
- en: The `wordpressFirstname`, `wordpressLastname`, and `wordpressEmail` Helm values.
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to continue exploring your WordPress instance. Once you are finished,
    continue to the next section to learn how to upgrade a Helm release.
  prefs: []
  type: TYPE_NORMAL
- en: Upgrading the WordPress release
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Upgrading a release refers to the process of modifying the release’s values
    or updating the chart to a newer version. In this section, we will upgrade the
    WordPress release by adding a couple more values to the installation.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the Helm values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Oftentimes, when deploying applications to Kubernetes, you will want to run
    multiple replicas of the application to provide high availability and reduce the
    load on a single instance. Helm charts often provide some sort of replica-related
    value for configuring the number of pod replicas to deploy. A quick browse through
    the output of the `helm show values bitnami/wordpress --version 12.1.6` command
    shows that you can increase WordPress replicas by using the `replicaCount` value:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.24 – replicaCount in the helm show values command'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.24_B17979.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.24 – replicaCount in the helm show values command
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following line to your `wordpress-values.yaml` file to increase the
    number of replicas from `1` to `2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s add another value to set the resource requests. Looking through the `helm
    show values` output, you can see that this chart provides a `resources` map within
    its set of values:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.25 – The values under the resources stanza'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.25_B17979.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.25 – The values under the resources stanza
  prefs: []
  type: TYPE_NORMAL
- en: 'Nested values such as `resources` are YAML maps (or objects), and they help
    provide a logical grouping of properties. Under the `resources` map is a `requests`
    map, which is used to configure the `memory` and `cpu` values that Kubernetes
    will allocate to the WordPress application. Let’s modify these values to decrease
    the memory request to `256Mi` (256 mebibytes) and the `cpu` request to `100m`
    (100 millicores). Add these modifications to the `wordpress-values.yaml` file,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'After defining these two new values, your entire `wordpress-values.yaml` file
    will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Once the `wordpress-values.yaml` file has been updated with these new values,
    you can run the `helm upgrade` command to upgrade the release, as we will discuss
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Running the upgrade
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `helm upgrade` command is almost identical to the `helm install` command
    in basic syntax, as illustrated in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: While `helm install` expects you to provide a name for a new release, `helm
    upgrade` expects you to provide the name of an already-existing release that should
    be upgraded. Alternatively, you can pass the `--install` flag, which instructs
    Helm to perform an installation instead if the release name you provide does not
    exist.
  prefs: []
  type: TYPE_NORMAL
- en: 'Values defined in a `values` file can be provided using the `--values` flag,
    identical to that of the `helm install` command. Run the following command to
    upgrade the WordPress release with the new set of values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Once this command has been executed, you should see an output similar to that
    of `helm install`. You should also notice that the `REVISION` field now says `2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.26 – The output for helm upgrade'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.26_B17979.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.26 – The output for helm upgrade
  prefs: []
  type: TYPE_NORMAL
- en: 'You should also see that the `wordpress` pods have restarted if you run the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: In Kubernetes, new pods are created when their pod template is modified. The
    same behavior can be observed in Helm. The values that were added during the upgrade
    introduced a configuration change to the WordPress pod template. As a result,
    new WordPress pods were created with the updated configuration. These changes
    can be observed using the same `helm get manifest` and `kubectl get deployment`
    commands that were used earlier in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we’ll perform a couple more upgrades to demonstrate how
    values can sometimes behave differently during an upgrade.
  prefs: []
  type: TYPE_NORMAL
- en: Reusing and resetting values during an upgrade
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In addition to `--set` and `--values`, which are present in both `helm install`
    and `helm upgrade`, the `helm upgrade` command includes two additional values-related
    flags.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at these flags now:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--reuse-values`: When upgrading, reuse the last release’s values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--reset-values`: When upgrading, reset the values to the chart defaults'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If an upgrade is performed without providing values with the `--set` or `--values`
    flags, then the `--reuse-values` flag is applied by default. In other words, the
    same values that were used by the previous release will be used again during the
    upgrade if no values are provided. Alternatively, if at least one value is provided
    with `--set` or `--values`, then the `--reset-values` flag is applied by default.
    Let’s run through an example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run another `upgrade` command without specifying any values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the `helm get values` command to inspect the values used in the upgrade:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Notice that the values displayed are identical to the previous upgrade:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.27 – The output of the helm get values command'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.27_B17979.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.27 – The output of the helm get values command
  prefs: []
  type: TYPE_NORMAL
- en: Different behavior can be observed when values are provided during an upgrade.
    If values are passed via the `--set` or `--values` flags, all of the chart’s values
    that are not provided are reset to their defaults. Let’s see this in action.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run another upgrade by providing a smaller set of values with the `--set` flag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After the upgrade, run the `helm get values` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output will declare that you have only provided three values, as opposed
    to the many that you originally declared in the `wordpress-values.yaml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.28 – The updated user-supplied values'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.28_B17979.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.28 – The updated user-supplied values
  prefs: []
  type: TYPE_NORMAL
- en: To prevent confusion during your upgrades and to simplify how values are managed,
    try to manage all of your values in a `values` file. This provides a more declarative
    approach, and it makes it clear which values will be applied each time you upgrade.
  prefs: []
  type: TYPE_NORMAL
- en: If you have been following along with each of the commands provided in this
    chapter, you should now have four revisions of the WordPress release in your environment.
    This fourth revision is not quite in the way we want the application to be configured
    since most of the values were set back to their defaults by the most recent upgrade.
    In the next section, we will explore how the WordPress release can be rolled back
    to the stable version that contained the set of desired values.
  prefs: []
  type: TYPE_NORMAL
- en: Rolling back the WordPress release
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While moving forward is preferred, there are some occasions where it makes more
    sense to return to a previous version of the application. The `helm rollback`
    command exists to satisfy this use case. Let’s describe how to roll back the WordPress
    release to a previous state.
  prefs: []
  type: TYPE_NORMAL
- en: Inspecting the WordPress history
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Every Helm release has a history of `HELM_DRIVER` environment variable). This
    allows your Helm release to be managed and interacted with by different users
    on the Kubernetes cluster, provided they have the appropriate `Secrets` containing
    the revisions can be observed by using `kubectl` to get them from the `chapter3`
    namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will return all of the secrets within the namespace, but you should
    see these four in the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Each of these `Secrets` corresponds with an entry of the release’s revision
    history, which can be viewed by running the `helm history` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will display a table of each revision, similar to the following
    (some columns have been omitted for readability):'
  prefs: []
  type: TYPE_NORMAL
- en: '| **REVISION** | **STATUS** | **DESCRIPTION** |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | superseded | Install complete |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | superseded | Upgrade complete |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | superseded | Upgrade complete |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | deployed | Upgrade complete |'
  prefs: []
  type: TYPE_TB
- en: Table 3.1 – Table caption
  prefs: []
  type: TYPE_NORMAL
- en: In this output, each revision has a number, along with the time it was updated,
    the status, the name of the chart, the app version, and the description. Revisions
    that have a status of `superseded` are no longer up to date, while the revision
    that says `deployed` is the currently deployed revision. Other statuses include
    `pending` and `pending_upgrade`, which means the installation or upgrade is currently
    in progress. `failed` refers to a particular revision that has failed to install
    or be upgraded and `unknown` means that you encountered a bug and may want to
    file an issue or notify the maintainers. It’s unlikely you will ever encounter
    a release with a state of `unknown`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `helm get` commands described previously can be used against a revision
    number by specifying the `--revision` flag. For this rollback, let’s determine
    the release that had the full set of desired values. As you may recall, the current
    revision, `revision 4`, only contains a subset of the values we need, but `revision
    3` should contain all of our desired values. This can be verified by running the
    `helm get values` command with the `--revision` flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'The full list of values is presented by inspecting this revision:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.29 – The output of checking a specific revision'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.29_B17979.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.29 – The output of checking a specific revision
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to execute other `helm get` commands against a revision number
    to perform a further inspection. If necessary, the `helm get manifest` command
    can also be executed against `revision 3` to check the state of the Kubernetes
    resources that would be restored.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will execute the rollback.
  prefs: []
  type: TYPE_NORMAL
- en: Running the rollback
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `helm rollback` command has the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Users provide the name of the release and the desired revision number to roll
    a Helm release back to a previous point in time. Execute the following command
    to roll back WordPress to `revision 3`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'The `rollback` subcommand provides a simple output, printing the following
    message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'This rollback can be observed in the release history by running the `helm history`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: In the release history, you will notice that a fifth revision was added with
    a status of `deployed` and a description of `Rollback to 3`. When an application
    is rolled back, it adds a new revision to the release history. This is not to
    be confused with an upgrade. The highest revision number simply denotes the currently
    deployed release. Be sure to check a revision’s description to determine whether
    it was created by an upgrade or a rollback.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can get this release’s values to ensure that the rollback now uses the
    desired values by running `helm get values` again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will show the values from the latest stable release:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.30 – The values from the latest revision'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.30_B17979.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.30 – The values from the latest revision
  prefs: []
  type: TYPE_NORMAL
- en: You may notice that we did not explicitly set the chart version or the release’s
    values in the `rollback` subcommand. This is because the `rollback` subcommand
    is not designed to accept these inputs. It is designed to roll a chart back to
    a previous revision and leverage that revision’s chart version and values. Note
    that the `rollback` subcommand should not be part of everyday Helm practices and
    that it should be reserved only for emergencies, where the current state of an
    application is unstable and must be reverted to a previously stable point.
  prefs: []
  type: TYPE_NORMAL
- en: If you have successfully rolled back the WordPress release, you are nearing
    the end of this chapter’s exercise. The final step is to remove the WordPress
    application from the Kubernetes cluster by using the `uninstall` subcommand, which
    we will describe in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Uninstalling the WordPress release
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Uninstalling a Helm release means deleting the Kubernetes resources that it
    manages. In addition, the `uninstall` command deletes the release’s history. While
    this is often what we want, specifying the `--keep-history` flag will instruct
    Helm to retain the release history.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for the `uninstall` command is very simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Uninstall the WordPress release by running the `helm uninstall` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Once WordPress is uninstalled, you will see the following message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'You will also notice that the `wordpress` release no longer exists in the `chapter3`
    namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be an empty table. You can also confirm that the release is
    no longer present by attempting to use `kubectl` to get the WordPress deployments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'As expected, there are no more WordPress deployments available. However, there
    is still one `PersistentVolumeClaim` sticking around:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '`PersistentVolumeClaim` was not deleted because it was created in the background
    by the MariaDB StatefulSet. In Kubernetes, `PersistentVolumeClaim` resources that
    are created by StatefulSets are not automatically removed if the StatefulSet is
    deleted. During the `helm uninstall` process, the StatefulSet was deleted but
    the associated `PersistentVolumeClaim` was not, as expected. The `PersistentVolumeClaim`
    command can be deleted manually with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Now that we’ve finished running through an example of installing, upgrading,
    rolling back, and uninstalling an application using Helm, let’s shut down the
    Kubernetes environment.
  prefs: []
  type: TYPE_NORMAL
- en: Shutting down your environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, you can remove this chapter’s namespace by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'After the `chapter3` namespace has been deleted, stop the minikube VM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: This will shut down the VM but will retain its state so that you can quickly
    begin working again in the next exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to install a Helm chart and manage its life
    cycle. We began by searching Artifact Hub for a WordPress chart to install. After
    locating a chart, the repository containing the chart was added by following the
    instructions from its Artifact Hub page. We then proceeded to inspect the WordPress
    chart to create a set of values that overrides their defaults. These values were
    saved to a `values` file called `wordpress-values.yaml`, which was then provided
    during the installation.
  prefs: []
  type: TYPE_NORMAL
- en: After the chart was installed, we used `helm upgrade` to upgrade the release
    by providing additional values. We then performed a rollback with `helm rollback`
    to restore the chart to a previous state. Finally, we removed the WordPress release
    at the end of the exercise with `helm uninstall`.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter taught you how to leverage Helm as an end user, and how to use
    an already-written Helm chart. In the next chapter, we will explore the concepts
    and structure of a Helm chart in greater detail to begin learning how to create
    Helm charts of our own.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To learn more about adding repositories locally, inspecting charts, and using
    the four life cycle commands used throughout this chapter (`install`, `upgrade`,
    `rollback`, and `uninstall`), go to [https://helm.sh/docs/intro/using_helm/](B17979_03.xhtml#_idTextAnchor137).
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is Artifact Hub? How can a user interact with it to find charts and chart
    repositories?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between the `helm get` and `helm show` commands?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between the `--set` and `--values` parameters in the
    `helm install` and `helm upgrade` commands? What are the benefits of using one
    over the other?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What command can be used to provide the list of revisions for a release?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What happens by default when you upgrade a release without providing any values?
    How does this behavior differ from when you do provide values for an upgrade?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Imagine that you have five revisions of a release. What would the `helm history`
    command show after you roll back the release to `revision 3`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Imagine that you want to view all of the releases deployed to a Kubernetes namespace.
    What command should you run?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Imagine that you run `helm repo add` to add a chart repository. What command
    can you run to list all of the charts in that repository?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Part 2: Helm Chart Development'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You’ve deployed your first Helm chart from a public repository. Now, it’s time
    to develop your own Helm chart by learning the ins and outs of Helm templating
    and the Helm chart structure.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this part, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B17979_04.xhtml#_idTextAnchor139)*, Scaffolding a New Helm Chart*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B17979_05.xhtml#_idTextAnchor154)*, Helm Dependency Management*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B17979_06.xhtml#_idTextAnchor167)*, Understanding Helm Templates*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B17979_07.xhtml#_idTextAnchor196)*, Helm Lifecycle Hooks*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B17979_08.xhtml#_idTextAnchor210)*, Publishing to a Helm Chart
    Repository*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B17979_09.xhtml#_idTextAnchor222)*, Testing Helm Charts*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL

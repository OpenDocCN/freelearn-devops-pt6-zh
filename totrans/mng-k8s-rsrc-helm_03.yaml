- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Installing Your First App with Helm
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Helm 安装你的第一个应用
- en: Earlier in this book, we referred to Helm as the **Kubernetes package manager**
    and compared it to an operating system’s package manager. A package manager allows
    users to quickly and easily install applications of varying complexities and manage
    any dependencies that an application might have. Helm works similarly.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书早些时候，我们提到 Helm 是 **Kubernetes 包管理器**，并将其与操作系统的包管理器进行比较。包管理器允许用户快速、轻松地安装各种复杂度的应用，并管理应用可能依赖的其他组件。Helm
    的工作方式类似。
- en: Users simply determine the application they want to deploy on Kubernetes and
    Helm does the rest of the work. A Helm chart – a packaging of Kubernetes resources
    – contains the logic and components required to install an application, allowing
    users to perform installations without needing to know the specific resources
    required. Users can also pass in parameters, called values, to a Helm chart to
    customize different aspects of the application. You will explore these features
    in this chapter by leveraging Helm as a package manager to deploy an instance
    of WordPress onto Kubernetes.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 用户只需确定要在 Kubernetes 上部署的应用，Helm 会完成其余的工作。一个 Helm chart——Kubernetes 资源的封装——包含了安装应用所需的逻辑和组件，允许用户在不需要了解特定资源的情况下执行安装。用户还可以向
    Helm chart 传递参数（称为值），以定制应用的不同方面。在本章中，你将通过利用 Helm 作为包管理器来将 WordPress 实例部署到 Kubernetes
    上，探索这些功能。
- en: 'In this chapter, we will cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要内容：
- en: Understanding the WordPress application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 WordPress 应用
- en: Finding a WordPress chart
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找 WordPress chart
- en: Creating a Kubernetes environment
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个 Kubernetes 环境
- en: Installing a WordPress chart
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 WordPress chart
- en: Choosing between `--set` and `--values`
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择 `--set` 和 `--values` 之间的区别
- en: Accessing the WordPress application
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问 WordPress 应用
- en: Upgrading the WordPress release
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 升级 WordPress 发布版本
- en: Rolling back the WordPress release
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回滚 WordPress 发布版本
- en: Uninstalling the WordPress release
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 卸载 WordPress 发布版本
- en: Shutting down your environment
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关闭你的环境
- en: Technical requirements
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'This chapter will use the following software technologies:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将使用以下软件技术：
- en: minikube
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: minikube
- en: kubectl
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: kubectl
- en: Helm
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Helm
- en: We assume that these components have already been installed on your system.
    For additional information on each of these tools, including their installation
    and configuration, please refer to [*Chapter 2*](B17979_02.xhtml#_idTextAnchor038),
    *Preparing a Kubernetes and Helm Environment*.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设这些组件已在你的系统上安装。有关每个工具的更多信息，包括它们的安装和配置，请参考 [*第 2 章*](B17979_02.xhtml#_idTextAnchor038)，*准备
    Kubernetes 和 Helm 环境*。
- en: Understanding the WordPress application
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 WordPress 应用
- en: WordPress is an open source **Content Management System** (**CMS**) used to
    create websites and blogs. Two different variants are available – WordPress.com
    and WordPress.org. WordPress.com is a **Software-as-a-Service** (**SaaS**) version
    of the CMS, meaning the WordPress application and its components are hosted and
    managed by WordPress. In this case, users do not need to worry about installing
    a WordPress instance as they can simply access instances that are already available.
    WordPress.org, on the other hand, is the self-hosted option. It requires users
    to deploy their WordPress instances and requires some level of expertise to maintain.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress 是一个开源的 **内容管理系统**（**CMS**），用于创建网站和博客。它有两个不同的版本——WordPress.com 和 WordPress.org。WordPress.com
    是 CMS 的 **软件即服务**（**SaaS**）版本，意味着 WordPress 应用及其组件由 WordPress 托管和管理。在这种情况下，用户无需担心安装
    WordPress 实例，他们只需访问已提供的实例即可。而 WordPress.org 则是自托管选项，它要求用户自行部署 WordPress 实例，并且需要一定的专业知识来维护。
- en: 'Since WordPress.com is easier to start with, it may sound like the more desirable
    option. This SaaS version of WordPress, however, has many disadvantages over the
    self-hosted WordPress.org, such as the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 WordPress.com 更易于上手，可能看起来是一个更理想的选择。然而，这个 SaaS 版本的 WordPress 相比自托管的 WordPress.org，有许多缺点，如下所示：
- en: It does not provide as many features as WordPress.org
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它没有提供像 WordPress.org 那样多的功能
- en: It does not give users full control over their website
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它没有给用户完全的控制权来管理他们的网站
- en: It requires users to pay for premium features
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它要求用户支付高级功能的费用
- en: It does not provide the ability to modify the backend code of a website
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它不提供修改网站后端代码的能力
- en: The self-hosted WordPress.org variation, on the other hand, gives users complete
    control over their website and WordPress instances. It provides the full WordPress
    feature set, from installing plugins to modifying backend code.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 而自托管的WordPress.org版本则让用户对他们的网站和WordPress实例拥有完全的控制权。它提供了完整的WordPress功能集，从安装插件到修改后台代码。
- en: 'A self-hosted WordPress instance requires users to deploy a few different components.
    WordPress needs a MySQL or a MariaDB database to save the website and administrative
    data, and the WordPress UI is deployed as a PHP frontend. In Kubernetes, deploying
    these components means creating a variety of different resources:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 自托管的WordPress实例要求用户部署一些不同的组件。WordPress需要MySQL或MariaDB数据库来保存网站和管理数据，而WordPress
    UI则作为PHP前端进行部署。在Kubernetes中，部署这些组件意味着要创建各种不同的资源：
- en: '`Secrets` for database and admin console authentication'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于数据库和管理员控制台认证的`Secrets`
- en: A `ConfigMap` for externalized database configuration
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于外部化数据库配置的`ConfigMap`
- en: '`Services` for networking'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于网络的`Services`
- en: A `PersistentVolumeClaim` for database storage
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于数据库存储的`PersistentVolumeClaim`
- en: A `StatefulSet` for deploying the database in a stateful fashion
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于以有状态的方式部署数据库的`StatefulSet`
- en: A `Deployment` for deploying the frontend
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于部署前端的`Deployment`
- en: Creating these Kubernetes resources requires both WordPress and Kubernetes expertise.
    WordPress expertise is required because the user needs to know the required physical
    components, as well as how to configure them. Kubernetes expertise is required
    because users need to know how to deploy WordPress dependencies as Kubernetes
    resources. Given the complexity and number of components that are required, deploying
    WordPress on Kubernetes can be a daunting task.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 创建这些Kubernetes资源需要具备WordPress和Kubernetes的专业知识。需要WordPress专业知识，因为用户需要了解所需的物理组件以及如何配置它们。需要Kubernetes专业知识，因为用户需要了解如何将WordPress依赖项部署为Kubernetes资源。鉴于所需组件的复杂性和数量，在Kubernetes上部署WordPress可能是一项艰巨的任务。
- en: The challenge presented by this task is a perfect use case for Helm. Rather
    than focusing on creating and configuring each of the Kubernetes resources we
    have described, users can leverage Helm as a package manager to deploy and configure
    WordPress on Kubernetes. To begin, we’ll explore a platform called **Artifact
    Hub** to locate a suitable WordPress Helm chart. After that, we’ll deploy WordPress
    to your Kubernetes cluster using Helm and explore basic Helm features along the
    way.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这一任务所面临的挑战非常适合使用Helm。与其关注创建和配置我们所描述的每一个Kubernetes资源，用户可以利用Helm作为包管理器来部署和配置Kubernetes上的WordPress。首先，我们将探索一个名为**Artifact
    Hub**的平台，寻找一个合适的WordPress Helm chart。然后，我们将使用Helm将WordPress部署到你的Kubernetes集群中，并在过程中探索基本的Helm功能。
- en: Finding a WordPress chart
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找WordPress chart
- en: Helm charts can be made available for consumption by publishing them to a chart
    repository. A chart repository is a location where packaged charts can be stored
    and shared. A repository is often hosted as an HTTP server and can take the form
    of various implementations, including GitHub pages, an Amazon S3 bucket, or a
    simple web server, such as Apache HTTPD. Recently, repositories can also take
    the form of OCI registries, allowing users to save and retrieve Helm charts from
    hosted services such as Docker Hub and Quay.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Helm charts可以通过将它们发布到chart仓库来供用户使用。chart仓库是存储和共享打包好的charts的位置。仓库通常作为HTTP服务器托管，可以采取多种形式，包括GitHub
    Pages、Amazon S3桶或简单的Web服务器，如Apache HTTPD。最近，仓库还可以采取OCI注册表的形式，允许用户从托管服务（如Docker
    Hub和Quay）保存和检索Helm charts。
- en: To use charts from a repository, Helm needs to be configured to use the repository.
    This can be accomplished by adding repositories using `helm repo add`. One challenge
    involved with adding repositories is that there are many different chart repositories
    available for consumption; it may be difficult to locate the particular repository
    that fits your use case. To make it easier to find chart repositories (and other
    Kubernetes-related artifacts), the Kubernetes community created a platform called
    Artifact Hub.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用仓库中的charts，Helm需要配置为使用该仓库。这可以通过使用`helm repo add`来添加仓库来实现。添加仓库时的一个挑战是，市场上有许多不同的chart仓库可供使用，可能很难找到适合你使用场景的特定仓库。为了更容易地找到chart仓库（以及其他与Kubernetes相关的工件），Kubernetes社区创建了一个名为Artifact
    Hub的平台。
- en: Artifact Hub is a centralized location for upstream Kubernetes artifacts, such
    as Helm charts, operators, plugins, and more. In this chapter, we will use the
    Artifact Hub platform to search for WordPress Helm charts. Once an appropriate
    chart is found, we will add the repository this chart belongs to so that it can
    be installed.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Artifact Hub是上游Kubernetes艺术品（如Helm图表、操作员、插件等）的集中位置。在本章中，我们将使用Artifact Hub平台来搜索WordPress
    Helm图表。一旦找到合适的图表，我们将添加此图表所属的存储库，以便安装。
- en: To begin, interaction with Artifact Hub can be accomplished either from the
    command line or from a web browser. When using the command line to search for
    Helm charts, the results that are returned provide a URL to Artifact Hub, which
    can be used to find additional information on the chart and instructions on how
    to add its chart repository.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过命令行或Web浏览器完成与Artifact Hub的交互。当使用命令行搜索Helm图表时，返回的结果提供了一个到Artifact Hub的URL，该URL可以用于查找有关图表的更多信息以及如何添加其图表存储库的说明。
- en: Let’s follow this workflow to add a chart repository containing a WordPress
    chart.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照这个工作流程来添加一个包含WordPress图表的图表存储库。
- en: Searching for WordPress charts from the command line
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从命令行搜索WordPress图表
- en: 'In general, Helm contains two different search commands to assist us in finding
    Helm charts:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，Helm包含两个不同的搜索命令，以帮助我们查找Helm图表：
- en: 'To search for charts in Artifact Hub, use the following command:'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要在Artifact Hub中搜索图表，请使用以下命令：
- en: '[PRE0]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note that in prior versions of Helm, `helm search hub` referenced a centrally
    managed public repository of Helm charts maintained by the Helm community called
    Helm Hub instead of Artifact Hub. Backward compatibility has been retained through
    the use of the `--endpoint` parameter, which enables users to specify the location
    of any monocular-based instance, the web search and discovery web application
    backing Helm Hub.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在Helm的先前版本中，`helm search hub`引用的是由Helm社区维护的Helm Hub的集中管理公共图表存储库，而不是Artifact
    Hub。通过使用`--endpoint`参数保留了向后兼容性，该参数允许用户指定任何基于单眼的实例位置，这是支持Helm Hub的网络搜索和发现Web应用程序。
- en: 'To search repositories for a keyword present in a chart, use the following
    command:'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要搜索图表中存在的关键字，请使用以下命令：
- en: '[PRE1]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If repositories have not been added previously, users should run the `helm search
    hub` command to locate Helm charts available across all public chart repositories.
    Once a repository has been added, users can run `helm search repo` to search across
    these repositories.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果之前未添加过存储库，则用户应运行`helm search hub`命令来定位所有公共图表存储库中可用的Helm图表。一旦添加了存储库，用户可以运行`helm
    search repo`来跨这些存储库搜索。
- en: 'Let’s search Artifact Hub for any existing WordPress charts. Each chart in
    Artifact Hub has a set of keywords that can be searched against. Execute the following
    command to locate charts containing the `wordpress` keyword:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在Artifact Hub中搜索现有的WordPress图表。Artifact Hub中的每个图表都有一组可以针对其进行搜索的关键字。执行以下命令来查找包含`wordpress`关键字的图表：
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Upon running this command, an output similar to the following should be displayed:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令后，应显示类似以下内容的输出：
- en: '![Figure 3.1 – The output from running helm search hub wordpress'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 3.1 – 运行helm search hub wordpress的输出'
- en: '](img/Figure_3.1_B17979.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.1_B17979.jpg)'
- en: Figure 3.1 – The output from running helm search hub wordpress
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 3.1 – 运行helm search hub wordpress的输出
- en: Each line of the output returned by this command is a chart from Artifact Hub.
    The output displays the URL to each chart’s Artifact Hub page. Also displayed
    is the chart version, which represents the latest version of the Helm chart, and
    the app version, which represents the version of the application that the chart
    deploys by default. The `helm search hub` command also prints a brief description
    of each chart.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令返回的输出每一行都是来自Artifact Hub的一个图表。输出显示了每个图表Artifact Hub页面的URL。还显示了图表版本，该版本表示Helm图表的最新版本，以及应用程序版本，默认情况下部署该图表的应用程序版本。`helm
    search hub`命令还打印了每个图表的简要描述。
- en: As you may have noticed, some of the values returned are truncated. This is
    because the default output of `helm search hub` is `table`, causing the results
    to be returned in tabular format. By default, columns wider than 50 characters
    are truncated. This truncation can be avoided by using the `--max-col-width=0`
    flag.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能已经注意到的那样，返回的某些值已被截断。这是因为`helm search hub`的默认输出是`table`，导致结果以表格格式返回。默认情况下，超过50个字符宽度的列会被截断。可以通过使用`--max-col-width=0`标志来避免此截断。
- en: 'Try running the following command by including the `--max-col-width` flag to
    view the untruncated results in tabular format:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试运行以下命令，并包括 `--max-col-width` 标志，以表格格式查看未截断的结果：
- en: '[PRE3]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Alternatively, users can pass the `--output` flag and specify either `yaml`
    or `json`, which will print the search results in full.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，用户可以传递 `--output` 标志，并指定 `yaml` 或 `json`，这样可以完整打印搜索结果。
- en: 'Try running the previous command again with the `--output yaml` flag:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试再次运行先前的命令，并使用 `--output yaml` 标志：
- en: '[PRE4]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The result will be in YAML format, similar to the output shown here:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将以 YAML 格式显示，类似于此处显示的输出：
- en: '![Figure 3.2 – The output for the helm search hub wordpress --output yaml command'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.2 – helm search hub wordpress --output yaml 命令的输出'
- en: '](img/Figure_3.2_B17979.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.2_B17979.jpg)'
- en: Figure 3.2 – The output for the helm search hub wordpress --output yaml command
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.2 – helm search hub wordpress --output yaml 命令的输出
- en: For this example, we will choose to install the second chart that was returned
    in the preceding sample output. To learn more about this chart and how it is installed,
    visit [https://artifacthub.io/packages/helm/bitnami/wordpress](B17979_03.xhtml#_idTextAnchor083).
    We’ll explore this link in the next section.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将选择安装在前述示例输出中返回的第二个图表。要了解更多关于该图表及其安装方式的信息，请访问 [https://artifacthub.io/packages/helm/bitnami/wordpress](B17979_03.xhtml#_idTextAnchor083)。我们将在下一节中深入探讨这个链接。
- en: Viewing the WordPress chart in a browser
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在浏览器中查看 WordPress 图表
- en: Using `helm search hub` is the fastest way to search for charts on Artifact
    Hub. However, it does not provide all of the details needed for installation.
    Namely, users need to know a chart’s repository URL to add its repository and
    install the chart. A chart’s Artifact Hub page can provide this URL, along with
    other installation details.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `helm search hub` 是在 Artifact Hub 上搜索图表的最快方法。然而，它没有提供安装所需的所有详细信息。具体来说，用户需要知道图表的仓库
    URL，以便添加该仓库并安装图表。图表的 Artifact Hub 页面可以提供此 URL，以及其他安装细节。
- en: 'Once you have entered the WordPress chart’s URL into a browser window, a page
    similar to the following will be displayed:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您将 WordPress 图表的 URL 输入到浏览器窗口中，将显示类似以下内容的页面：
- en: '![Figure 3.3 – A WordPress Helm chart from Artifact Hub'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.3 – 来自 Artifact Hub 的 WordPress Helm 图表'
- en: '](img/Figure_3.3_B17979.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.3_B17979.jpg)'
- en: Figure 3.3 – A WordPress Helm chart from Artifact Hub
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.3 – 来自 Artifact Hub 的 WordPress Helm 图表
- en: The WordPress chart’s page from Artifact Hub provides many details, including
    the maintainer of the chart (**Bitnami**, which is a company that provides software
    packages that can be deployed to different environments) and a brief introduction
    to the chart (stating that this chart will deploy a WordPress instance to Kubernetes,
    along with a Bitnami MariaDB chart as a dependency). The web page also provides
    installation details, including the chart’s supported values, which are used to
    configure the installation, along with Bitnami’s chart repository URL. These installation
    details give users the ability to add this repository and install the WordPress
    chart.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 来自 Artifact Hub 的 WordPress 图表页面提供了许多详细信息，包括图表的维护者（**Bitnami**，这是一家提供可部署到不同环境的软件包的公司）以及图表的简要介绍（说明该图表将把
    WordPress 实例部署到 Kubernetes，并且作为依赖项包含 Bitnami MariaDB 图表）。该网页还提供了安装细节，包括图表支持的值，这些值用于配置安装，同时还提供了
    Bitnami 的图表仓库 URL。这些安装细节使用户能够添加该仓库并安装 WordPress 图表。
- en: Under the `helm repo add` command. This is the command that you need to run
    to add the Bitnami chart repository, which is the repository that contains the
    WordPress chart we are interested in installing.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `helm repo add` 命令下。这是您需要运行的命令，用来添加 Bitnami 图表仓库，这是包含我们感兴趣安装的 WordPress 图表的仓库。
- en: Bitnami repository chart retention policy
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Bitnami 仓库图表保留策略
- en: Recent changes within the Bitnami Helm community have resulted in charts being
    removed from the Bitnami repository 6 months after their publication date. Aligning
    to the most recent versions of software packages is a recommended practice so
    that the most recent set of features and security remediations are included. However,
    since the remainder of the exercises specify specific chart versions to support
    the stability of the tested integrations, an alternate repository must be utilized.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，Bitnami Helm 社区的变化导致图表在发布后6个月被移除出 Bitnami 仓库。与最新版本的软件包保持一致是一种推荐的做法，这样可以包含最新的功能和安全修复。然而，由于其余的练习指定了特定的图表版本，以支持已测试集成的稳定性，因此必须使用一个替代的仓库。
- en: Fortunately, another repository index has been provided that includes all of
    the Bitnami charts without the retention policy of the default index, which will
    be described in the next section. You will learn more about repository indexes
    by creating and managing your own repository in [*Chapter 7*](B17979_07.xhtml#_idTextAnchor196),
    *Helm Lifecycle Hooks*.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，已经提供了另一个仓库索引，其中包括所有 Bitnami 图表，而不受默认索引的保留政策限制，具体内容将在下一节中介绍。你将通过在[*第 7 章*](B17979_07.xhtml#_idTextAnchor196)《*Helm
    生命周期钩子*》中创建和管理自己的仓库，了解更多关于仓库索引的信息。
- en: Adding the full Bitnami repository
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加完整的 Bitnami 仓库
- en: With an understanding of the considerations as they relate to charts within
    the Bitnami repository, let’s add the repository that allows us to specify specific
    chart versions without concerns that they may be removed in the future. The only
    difference in the `helm repo add` command is the URL of the repository.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 了解了与 Bitnami 仓库中的图表相关的注意事项后，让我们添加一个允许我们指定特定图表版本的仓库，而不必担心它们将来可能会被删除。在 `helm repo
    add` 命令中唯一的区别是仓库的 URL。
- en: 'Let’s add the repository now and verify that we can interact with its contents:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们添加仓库，并验证我们是否可以与其内容进行交互：
- en: 'Add the full Bitnami chart repository:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加完整的 Bitnami 图表仓库：
- en: '[PRE5]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Verify that the chart has been added by running `helm repo list`:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行 `helm repo list` 命令，验证该图表是否已被添加：
- en: '[PRE6]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We can do a little more now that we have added the repository.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经添加了仓库，可以做更多的操作。
- en: 'Run the following command to view charts from locally configured repositories
    that contain the `bitnami` keyword:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令，查看本地配置的仓库中包含 `bitnami` 关键字的图表：
- en: '[PRE7]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'A shortened list of the results returned is shown in the following output:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是返回结果的简化列表，显示在下列输出中：
- en: '![Figure 3.4 – The output for the helm search repo bitnami --output yaml command'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.4 – helm search repo bitnami --output yaml 命令的输出'
- en: '](img/Figure_3.4_B17979.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.4_B17979.jpg)'
- en: Figure 3.4 – The output for the helm search repo bitnami --output yaml command
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.4 – helm search repo bitnami --output yaml 命令的输出
- en: Similar to the `helm search hub` command, the `helm search repo` command takes
    a keyword as an argument. Using `bitnami` as a keyword will return all the charts
    in the `bitnami` repository, as well as charts outside of that repository that
    may also contain the `bitnami` keyword.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `helm search hub` 命令类似，`helm search repo` 命令接受关键字作为参数。使用 `bitnami` 作为关键字，将返回
    `bitnami` 仓库中的所有图表，以及可能包含 `bitnami` 关键字的其他仓库中的图表。
- en: 'To ensure that you now have access to the WordPress chart, run the following
    `helm search repo` command with the `wordpress` argument:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 为确保你现在可以访问 WordPress 图表，请运行以下带有 `wordpress` 参数的 `helm search repo` 命令：
- en: '[PRE8]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output will display the WordPress chart that you found on Artifact Hub
    and observed in your browser:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将显示你在 Artifact Hub 上找到并在浏览器中查看的 WordPress 图表：
- en: '![Figure 3.5 – The output for the helm search repo wordpress command'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.5 – helm search repo wordpress 命令的输出'
- en: '](img/Figure_3.5_B17979.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.5_B17979.jpg)'
- en: Figure 3.5 – The output for the helm search repo wordpress command
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.5 – helm search repo wordpress 命令的输出
- en: 'The value in the `NAME` field before the slash (`/`) indicates the name of
    the repository containing the Helm chart that was returned. The latest version
    of the WordPress chart from the `bitnami` repository, at the time of writing,
    is version `12.1.6`. This is the version that will be used for the installation.
    Previous versions can be queried by passing the `--versions` flag to the `search`
    command:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在斜杠 (`/`) 前面的 `NAME` 字段中的值表示包含返回 Helm 图表的仓库名称。在写作时，`bitnami` 仓库中的最新版本 WordPress
    图表为版本 `12.1.6`。这是将用于安装的版本。通过在 `search` 命令中传递 `--versions` 标志，可以查询以前的版本：
- en: '[PRE9]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You should then see a new line for each version of the available WordPress
    charts:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你应该能看到每个可用 WordPress 图表的新行：
- en: '![Figure 3.6 – The version lists for WordPress charts in the bitnami repository'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.6 – bitnami 仓库中 WordPress 图表的版本列表'
- en: '](img/Figure_3.6_B17979.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.6_B17979.jpg)'
- en: Figure 3.6 – The version lists for WordPress charts in the bitnami repository
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.6 – bitnami 仓库中 WordPress 图表的版本列表
- en: Now that a WordPress chart has been identified and the chart’s repository has
    been added, we will explore how to use the command line to find out more about
    the chart so that you can install it.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在已经识别出 WordPress 图表并添加了该图表的仓库，我们将探索如何使用命令行进一步了解该图表，以便安装它。
- en: Showing the WordPress chart information from the command line
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示命令行中的 WordPress 图表信息
- en: 'You can find a lot of important details about a Helm chart on its Artifact
    Hub page. Once a chart’s repository is added locally, this information (and more)
    can also be viewed from the command line with the following four `helm show` subcommands:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 Helm 图表的 Artifact Hub 页面找到很多重要细节。一旦图表的仓库被本地添加，这些信息（以及更多）也可以通过以下四个 `helm
    show` 子命令从命令行查看：
- en: 'Display the chart’s metadata (or chart definition):'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示图表的元数据（或图表定义）：
- en: '[PRE10]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Display the chart’s README file:'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示图表的 README 文件：
- en: '[PRE11]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Display the chart’s values:'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示图表的值：
- en: '[PRE12]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Display the chart’s definition, README files, and values:'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示图表的定义、README 文件和值：
- en: '[PRE13]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Let’s use these commands with the Bitnami WordPress chart. In each of these
    commands, the chart should be referenced as `bitnami/wordpress`. Note that we
    will be passing the `--version` flag to retrieve information about version 12.1.6
    of this chart. If this flag is omitted, information from the latest version of
    the chart will be returned.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用这些命令与 Bitnami 的 WordPress 图表。在每个命令中，图表应该引用为 `bitnami/wordpress`。请注意，我们将传递
    `--version` 标志来获取该图表版本 12.1.6 的信息。如果省略此标志，将返回图表最新版本的信息。
- en: 'Run the `helm show chart` command to retrieve the metadata for the chart:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `helm show chart` 命令以检索图表的元数据：
- en: '[PRE14]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The result of this command will be the **chart definition** of the WordPress
    chart. A chart definition describes information such as the chart’s version, its
    dependencies, keywords, and maintainers:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令的结果将是 WordPress 图表的 **图表定义**。图表定义描述了诸如图表的版本、依赖项、关键词和维护者等信息：
- en: '![Figure 3.7 – The wordpress chart definition'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.7 – WordPress 图表定义'
- en: '](img/Figure_3.7_B17979.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.7_B17979.jpg)'
- en: Figure 3.7 – The wordpress chart definition
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.7 – WordPress 图表定义
- en: 'Run the `helm show readme` command to view the chart’s README file from the
    command line:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `helm show readme` 命令以从命令行查看图表的 README 文件：
- en: '[PRE15]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The results of this command may look familiar since a chart’s README file is
    also displayed on its Artifact Hub page. Using this option from the command line
    provides a quick way to view the README file without having to open a browser:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令的结果可能看起来很熟悉，因为图表的 README 文件也显示在其 Artifact Hub 页面上。从命令行使用此选项提供了一种快速查看 README
    文件的方式，而无需打开浏览器：
- en: '![Figure 3.8 – The wordpress chart’s README file shown in the command line'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.8 – 在命令行中显示的 WordPress 图表的 README 文件'
- en: '](img/Figure_3.8_B17979.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.8_B17979.jpg)'
- en: Figure 3.8 – The wordpress chart’s README file shown in the command line
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.8 – 在命令行中显示的 WordPress 图表的 README 文件
- en: We can use `helm show values` to inspect a chart’s values. Values serve as parameters
    that users can provide to customize a chart installation. We will run this command
    later in this chapter in the *Creating a values file for configuration* section
    when we install the WordPress chart.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `helm show values` 来查看图表的值。值作为用户可提供的参数，用于自定义图表的安装。我们将在本章 *创建配置文件* 部分安装
    WordPress 图表时运行此命令。
- en: Finally, `helm show all` aggregates all of the information from the previous
    three commands together. Use this command if you want to inspect all of a chart’s
    details at once.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`helm show all` 将之前三个命令的信息聚合在一起。如果您想一次性查看图表的所有详细信息，可以使用此命令。
- en: Now that we have found and inspected a WordPress chart, let’s set up a Kubernetes
    environment where we can later install this chart.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经找到并检查了一个 WordPress 图表，让我们设置一个 Kubernetes 环境，之后可以在其中安装该图表。
- en: Creating a Kubernetes environment
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 Kubernetes 环境
- en: To create a Kubernetes environment in this chapter, we will use minikube. We
    learned how to install minikube in [*Chapter 2*](B17979_02.xhtml#_idTextAnchor038),
    *Preparing a Kubernetes and Helm Environment*.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在本章创建 Kubernetes 环境，我们将使用 minikube。我们已经在 [*第 2 章*](B17979_02.xhtml#_idTextAnchor038)，*准备
    Kubernetes 和 Helm 环境* 中学习了如何安装 minikube。
- en: 'Follow these steps to set up Kubernetes:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤设置 Kubernetes：
- en: 'Start your Kubernetes cluster by running the following command:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令启动 Kubernetes 集群：
- en: '[PRE16]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'After a short amount of time, you should see a line in the output that resembles
    the following:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 几分钟后，您应该会看到输出中类似以下内容的一行：
- en: '[PRE17]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Once the minikube cluster is up and running, create a dedicated namespace for
    this chapter’s exercise. Run the following command to create a namespace called
    `chapter3`:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦 minikube 集群启动并运行，创建一个专用的命名空间用于本章的练习。运行以下命令创建一个名为 `chapter3` 的命名空间：
- en: '[PRE18]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now that the cluster setup is complete, let’s begin the process of installing
    the WordPress chart to your Kubernetes cluster.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在集群设置完成，让我们开始将 WordPress 图表安装到 Kubernetes 集群中的过程。
- en: Installing a WordPress chart
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 WordPress 图表
- en: Installing a Helm chart is a simple process that should begin with inspecting
    a chart’s values. In the next section, we will inspect the values that are available
    in the WordPress chart and describe how to create a file that allows for customizing
    the installation. Finally, we will install the chart and access the WordPress
    application.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Helm 图表是一个简单的过程，应该从检查图表的值开始。在接下来的部分，我们将检查 WordPress 图表中可用的值，并描述如何创建一个文件来定制安装过程。最后，我们将安装图表并访问
    WordPress 应用程序。
- en: Creating a values file for configuration
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为配置创建一个 values 文件
- en: You can override the values defined in charts by providing a YAML-formatted
    `values` file. To create a `values` file, you need to inspect the supported values
    that the chart provides. This can be done by running the `helm show values` command,
    as explained earlier.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过提供一个 YAML 格式的 `values` 文件来覆盖图表中定义的值。要创建 `values` 文件，你需要检查图表所支持的值。这可以通过运行之前解释过的
    `helm show values` 命令来完成。
- en: 'Run the following command to inspect the WordPress chart’s values:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令检查 WordPress 图表的值：
- en: '[PRE19]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The result of this command should be a long list of possible values that you
    can set, many of which already have default values set:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令的结果应该是一个包含你可以设置的各种可能值的长列表，其中许多值已经设置了默认值：
- en: '![Figure 3.9 – A list of values generated by running helm show values'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.9 – 运行 helm show values 返回的值列表'
- en: '](img/Figure_3.9_B17979.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.9_B17979.jpg)'
- en: Figure 3.9 – A list of values generated by running helm show values
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.9 – 运行 helm show values 返回的值列表
- en: The preceding output shows a portion of the WordPress chart’s values. Many of
    these properties already have defaults set, meaning these values will represent
    how the chart is configured if they are not overridden. For example, if the values
    under the `image` map are not overridden, the WordPress chart will use the `bitnami/wordpress`
    container image from the `docker.io` registry against the `5.8.0-debian-10-r24`
    tag.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的输出显示了部分 WordPress 图表的值。这些属性中的许多值已经设置了默认值，这意味着如果这些值没有被覆盖，它们将代表图表的配置。例如，如果
    `image` 映射下的值没有被覆盖，WordPress 图表将使用来自 `docker.io` 注册表的 `bitnami/wordpress` 容器镜像，标签为
    `5.8.0-debian-10-r24`。
- en: Lines in the chart’s values that begin with a hash sign (`#`) are comments.
    Comments can be used to explain a value or a block of values, or they can be used
    to unset them. As shown in the preceding example, comments were used to document
    each of the image-related values.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图表中以井号（`#`）开头的行是注释。注释可以用来解释某个值或一组值，或者用于取消设置这些值。如前面的示例所示，注释用于记录与图像相关的每个值。
- en: 'If we explore the `helm show values` output further, we can find values that
    pertain to configuring the WordPress blog’s metadata:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们进一步探索 `helm show values` 输出，我们可以找到与配置 WordPress 博客的元数据相关的值：
- en: '![Figure 3.10 – The values returned by running the helm show values command'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.10 – 运行 helm show values 命令返回的值'
- en: '](img/Figure_3.10_B17979.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.10_B17979.jpg)'
- en: Figure 3.10 – The values returned by running the helm show values command
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.10 – 运行 helm show values 命令返回的值
- en: 'As you can see, these values are used to create a WordPress user and create
    a name for your blog. Let’s override them by creating a `values` file. Create
    a new file on your machine called `wordpress-values.yaml`. In that file, enter
    the following content:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这些值用于创建一个 WordPress 用户并为你的博客命名。我们可以通过创建一个 `values` 文件来覆盖这些值。请在你的机器上创建一个名为
    `wordpress-values.yaml` 的新文件。在该文件中输入以下内容：
- en: '[PRE20]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Feel free to get more creative with these values if you’d like. Continuing
    down the list of values from `helm show values`, there is one more important value
    that should be added to your `values` file before starting the installation, as
    shown here:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你愿意，可以更加灵活地使用这些值。在继续查看 `helm show values` 的值列表时，有一个重要的值应该在开始安装之前添加到你的 `values`
    文件中，如下所示：
- en: '![Figure 3.11 – The LoadBalancer value returned after running helm show values'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.11 – 运行 helm show values 后返回的 LoadBalancer 值'
- en: '](img/Figure_3.11_B17979.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.11_B17979.jpg)'
- en: Figure 3.11 – The LoadBalancer value returned after running helm show values
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.11 – 运行 helm show values 后返回的 LoadBalancer 值
- en: To simplify the installation, we are going to update this value (referred to
    as `service.type`) to `NodePort`. We could leave this set to `LoadBalancer`, but
    this would require you to use the `minikube tunnel` command to reach the service.
    By setting this to `NodePort` instead, you will be able to directly access WordPress
    against a local port.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化安装，我们将更新此值（称为 `service.type`）为 `NodePort`。我们也可以将其保持为 `LoadBalancer`，但那样需要使用
    `minikube tunnel` 命令才能访问该服务。将其设置为 `NodePort`，你将能够直接通过本地端口访问 WordPress。
- en: 'Add this value to your `wordpress-values.yaml` file:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 将此值添加到你的 `wordpress-values.yaml` 文件中：
- en: '[PRE21]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Once this value has been added to your `values` file, your complete `wordpress-values.yaml`
    file should look as follows:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这个值被添加到 `values` 文件中，你完整的 `wordpress-values.yaml` 文件应如下所示：
- en: '[PRE22]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Now that the `values` file is complete, let’s run the installation.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 `values` 文件已经完成，让我们开始安装。
- en: Running the installation
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行安装
- en: 'We use `helm install` to install a Helm chart. The standard syntax is as follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `helm install` 来安装 Helm 图表。标准语法如下：
- en: '[PRE23]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The `NAME` parameter is the name you would like to give your Helm release. A
    **release** captures the Kubernetes resources that were installed with a chart
    and tracks an application’s life cycle. We will explore how releases work throughout
    this chapter.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`NAME` 参数是你希望给 Helm 发布指定的名称。**发布** 捕获了使用图表安装的 Kubernetes 资源，并跟踪应用程序的生命周期。我们将在本章中探讨发布的工作原理。'
- en: The `CHART` parameter is the name of the Helm chart that is installed. Charts
    from a repository can be installed using `<repo name>/<chart name>`.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`CHART` 参数是要安装的 Helm 图表的名称。可以使用 `<repo name>/<chart name>` 来安装仓库中的图表。'
- en: The `flags` option in `helm install` allows you to further customize the installation.
    `flags` allows users to define and override values, specify the namespace to work
    against, and more. The list of flags can be viewed by running `helm install --help`.
    We can pass `--help` to other commands to view their usage and supported options.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`helm install` 中的 `flags` 选项允许你进一步自定义安装。`flags` 允许用户定义和覆盖值，指定要操作的命名空间等。可以通过运行
    `helm install --help` 查看所有可用的标志列表。我们还可以将 `--help` 参数传递给其他命令，以查看它们的用法和支持的选项。'
- en: 'Now that we have a proper understanding of the usage of `helm install`, let’s
    run the following command:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经正确理解了 `helm install` 的用法，让我们运行以下命令：
- en: '[PRE24]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This command installs a new release called `wordpress` using the `bitnami/wordpress`
    Helm chart. It uses the values defined in the `wordpress-values.yaml` file to
    customize the installation, and the chart is installed in the `chapter3` namespace.
    Version `12.1.6` of the chart is deployed, as defined by the `--version` flag.
    Helm will install the latest cached version of the Helm chart without this flag.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令使用 `bitnami/wordpress` Helm 图表安装一个名为 `wordpress` 的新发布。它使用 `wordpress-values.yaml`
    文件中定义的值来定制安装，并将图表安装到 `chapter3` 命名空间。安装的是图表的 `12.1.6` 版本，具体由 `--version` 标志定义。如果没有该标志，Helm
    会安装 Helm 图表的最新缓存版本。
- en: 'If the chart’s installation is successful, you should see the following output:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如果图表的安装成功，你应该会看到以下输出：
- en: '![Figure 3.12 – The output of a successful WordPress chart installation'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.12 – 成功安装 WordPress 图表的输出'
- en: '](img/Figure_3.12_B17979.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.12_B17979.jpg)'
- en: Figure 3.12 – The output of a successful WordPress chart installation
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.12 – 成功安装 WordPress 图表的输出
- en: This output displays information about the installation, including the name
    of the release, the time it was deployed, the namespace it was installed to, the
    status of the deployment (which is `deployed`), and the revision number (which
    is set to `1` since this is the initial installation of the release).
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 该输出显示了有关安装的信息，包括发布的名称、部署时间、安装的命名空间、部署状态（即 `deployed`）以及修订号（由于这是发布的初始安装，因此设置为
    `1`）。
- en: The output also displays a list of notes related to the installation. Notes
    are used to provide users with additional information about their installation.
    In the case of the WordPress chart, these notes provide information about how
    to access the WordPress application. While these notes appear directly after installation,
    they can be retrieved at any time with the `helm get notes` command, as explained
    in the next section.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 输出还会显示与安装相关的说明列表。说明用于向用户提供有关其安装的附加信息。对于 WordPress 图表，这些说明提供了如何访问 WordPress 应用程序的信息。虽然这些说明会在安装后直接显示，但你可以随时通过运行
    `helm get notes` 命令来检索这些说明，具体方法将在下一节中说明。
- en: With your first Helm installation complete, let’s inspect the release to observe
    the resources and configurations that were applied.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 完成第一次 Helm 安装后，让我们检查发布内容，观察所应用的资源和配置。
- en: Inspecting your release
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查您的发布
- en: One of the easiest ways to inspect a release and verify its installation is
    to list all the Helm releases in a given namespace. For this to be achieved, Helm
    provides the `list` subcommand.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 检查发布并验证其安装的最简单方法之一是列出给定命名空间中的所有 Helm 发布。为此，Helm 提供了 `list` 子命令。
- en: 'Run the following command to view the list of releases in the `chapter3` namespace:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令查看 `chapter3` 命名空间中的发布列表：
- en: '[PRE25]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You should see only one release in this namespace, as shown here:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该只在此命名空间中看到一个发布，如下所示：
- en: '![Figure 3.13 – The output from the helm list command that lists the Helm releases'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.13 – helm list 命令的输出，列出了 Helm 发布'
- en: '](img/Figure_3.13_B17979.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.13_B17979.jpg)'
- en: Figure 3.13 – The output from the helm list command that lists the Helm releases
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.13 – helm list 命令的输出，列出了 Helm 发布
- en: 'The `list` subcommand provides the following information:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`list` 子命令提供以下信息：'
- en: The release name
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布名称
- en: The release namespace
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布命名空间
- en: The latest revision number of the release
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布的最新修订号
- en: A timestamp of the latest revision
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最新修订的时间戳
- en: The release status
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布状态
- en: The chart name
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图表名称
- en: The application version
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序版本
- en: Note that the status, chart name, and application version have been truncated
    in the preceding output.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，前面的输出中，状态、图表名称和应用程序版本已被截断。
- en: While the `list` subcommand is useful for providing high-level release information,
    there are additional items that users may want to know about a particular release.
    Helm provides the `get` subcommand to provide more information about a release.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 `list` 子命令对于提供高层次的发布信息很有用，但用户可能还想了解某个特定发布的其他项目。Helm 提供了 `get` 子命令以提供更多关于发布的信息。
- en: 'The following commands can be used to provide a set of detailed release information:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令可用于提供一组详细的发布信息：
- en: 'To return all the hooks for a named release, run the following command:'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 若要返回命名发布的所有钩子，请运行以下命令：
- en: '[PRE26]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'To return the manifest for a named release, run the following command:'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 若要返回命名发布的清单，请运行以下命令：
- en: '[PRE27]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'To return the notes for a named release, run the following command:'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 若要返回命名发布的注释，请运行以下命令：
- en: '[PRE28]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'To return the values for a named release, run the following command:'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 若要返回命名发布的值，请运行以下命令：
- en: '[PRE29]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'To return all the information about a named release, run the following command:'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 若要返回命名发布的所有信息，请运行以下命令：
- en: '[PRE30]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The first command from the preceding list, `helm get hooks`, is used to display
    the hooks for a given release. Hooks will be explored in more detail in [*Chapter
    7*](B17979_07.xhtml#_idTextAnchor196), *Helm Lifecycle Hooks*, when you build
    and test a Helm chart. For now, hooks can be thought of as the actions that Helm
    performs during certain phases of an application’s life cycle. This WordPress
    installation did not create any hooks, so let’s move on to the next command.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令列表中的第一个命令，`helm get hooks`，用于显示给定发布的钩子。钩子将在构建和测试 Helm 图表时在[*第7章*](B17979_07.xhtml#_idTextAnchor196)中更详细地介绍，*Helm
    生命周期钩子*。暂时可以将钩子理解为 Helm 在应用程序生命周期的某些阶段执行的操作。此 WordPress 安装未创建任何钩子，因此我们继续查看下一个命令。
- en: 'The `helm get manifest` command can be used to get a list of the Kubernetes
    resources that were created as part of the installation. Run the following command:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '`helm get manifest` 命令可用于获取作为安装一部分创建的 Kubernetes 资源列表。运行以下命令：'
- en: '[PRE31]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'After you run this command, you’ll see the following Kubernetes manifests:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此命令后，您将看到以下 Kubernetes 清单：
- en: Two `Secrets` for MariaDB and WordPress credentials
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个用于 MariaDB 和 WordPress 凭据的 `Secrets`
- en: Two `ConfigMaps` (the first is used to configure the WordPress application,
    while the second is used for testing, which is performed by chart developers and
    so can be ignored).
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个 `ConfigMaps`（第一个用于配置 WordPress 应用程序，第二个用于测试，由图表开发人员执行，可以忽略）。
- en: One `PersistentVolumeClaim` for persisting MariaDB data.
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于持久化 MariaDB 数据的 `PersistentVolumeClaim`。
- en: Two `Services` for MariaDB and WordPress
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个用于 MariaDB 和 WordPress 的 `Services`
- en: One `Deployment` for WordPress
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于 WordPress 的 `Deployment`
- en: One `StatefulSet` for MariaDB
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于 MariaDB 的 `StatefulSet`
- en: One `ServiceAccount` for MariaDB
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 MariaDB 用的 `ServiceAccount`
- en: 'From this output, you can observe where your values had an effect when they
    configured the Kubernetes resources. One example to note is within the WordPress
    service, where `type` has been set to `NodePort`:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 从此输出中，您可以观察到在配置Kubernetes资源时，您的值是如何产生影响的。一个值得注意的例子是WordPress服务中，`type`已设置为`NodePort`：
- en: '![Figure 3.14 – Setting the Service type to NodePort'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.14 – 将服务类型设置为NodePort'
- en: '](img/Figure_3.14_B17979.jpg)'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.14_B17979.jpg)'
- en: Figure 3.14 – Setting the Service type to NodePort
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.14 – 将服务类型设置为NodePort
- en: 'You can also observe the other values that we set for the WordPress user. These
    values are defined as environment variables in the WordPress deployment, as shown
    in the following screenshot:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以观察到我们为WordPress用户设置的其他值。这些值作为环境变量定义在WordPress部署中，如下截图所示：
- en: '![Figure 3.15 – Values set as environment variables'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.15 – 设置为环境变量的值'
- en: '](img/Figure_3.15_B17979.jpg)'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.15_B17979.jpg)'
- en: Figure 3.15 – Values set as environment variables
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.15 – 设置为环境变量的值
- en: The rest of the default values provided by the chart were left untouched. Those
    defaults have been applied to the Kubernetes resources and can be observed through
    the `helm get manifest` command. If these values had been changed, the Kubernetes
    resources would have been configured differently.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 图表提供的其余默认值没有被更改。这些默认值已经应用于Kubernetes资源，并且可以通过`helm get manifest`命令查看。如果这些值被更改，Kubernetes资源将会被不同地配置。
- en: 'Let’s move on to the next `get` command. The `helm get notes` command is used
    to display the notes from a Helm release. As you may recall, the release notes
    were displayed when the WordPress chart was installed. Notes are chart-specific
    and, in the case of WordPress, provide important information about accessing the
    application and can be displayed once again by running the following command:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续执行下一个`get`命令。`helm get notes`命令用于显示Helm发布的注释。如您所记得，在安装WordPress图表时曾显示过发布说明。说明是特定于图表的，对于WordPress而言，提供了有关如何访问应用程序的重要信息，您可以再次通过运行以下命令来显示这些说明：
- en: '[PRE32]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The next command is `helm get values`, and it is useful for recalling the values
    that were used for a given release. Run the following command to view the values
    that were provided in the `wordpress` release:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个命令是`helm get values`，它对于回顾给定发布所使用的值非常有用。运行以下命令以查看在`wordpress`发布中提供的值：
- en: '[PRE33]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The result of this command should look familiar as they should match the values
    specified in the `wordpress-values.yaml` file:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令的结果应该很熟悉，因为它们应该与`wordpress-values.yaml`文件中指定的值匹配：
- en: '![Figure 3.16 – User-supplied values in the WordPress release'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.16 – WordPress发布中的用户提供的值'
- en: '](img/Figure_3.16_B17979.jpg)'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.16_B17979.jpg)'
- en: Figure 3.16 – User-supplied values in the WordPress release
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.16 – WordPress发布中的用户提供的值
- en: 'While recalling the user-supplied values is useful, it may be necessary to
    return all of the values used by a release, including the defaults. This can be
    accomplished by passing in an additional `--all` flag, as shown in the following
    command:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然回顾用户提供的值很有用，但有时可能需要返回发布所使用的所有值，包括默认值。这可以通过传入额外的`--all`标志来完成，如以下命令所示：
- en: '[PRE34]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'For this chart, the output will be lengthy. The first several values are shown
    in the following output:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个图表，输出将会非常长。前几个值显示在以下输出中：
- en: '![Figure 3.17 – A subset of all the values for the WordPress release'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.17 – WordPress发布的所有值的子集'
- en: '](img/Figure_3.17_B17979.jpg)'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.17_B17979.jpg)'
- en: Figure 3.17 – A subset of all the values for the WordPress release
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.17 – WordPress发布的所有值的子集
- en: 'Finally, Helm provides a `helm get all` command, which can be used to aggregate
    all of the information from the various `helm get` commands:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Helm提供了一个`helm get all`命令，可以用于汇总来自不同`helm get`命令的所有信息：
- en: '[PRE35]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: In the preceding command, we snuck in the `-n` flag in place of `--namespace`.
    From here on out, we will use the `-n` flag to provide the namespace that Helm
    should operate within.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的命令中，我们偷偷地将`-n`标志替换了`--namespace`。从现在开始，我们将使用`-n`标志来提供Helm应该操作的命名空间。
- en: 'Besides the commands provided by Helm, the `kubectl` CLI can also be used to
    inspect an installation more closely. For example, you could return the deployments
    that Helm created by running the following command:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 除了Helm提供的命令外，`kubectl`命令行工具也可以用于更仔细地检查安装。例如，您可以通过运行以下命令来返回Helm创建的部署：
- en: '[PRE36]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'You’ll find that the following deployment exists in the `chapter3` namespace:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 您将会发现以下部署存在于`chapter3`命名空间中：
- en: '![Figure 3.18 – The wordpress deployment in the chapter3 namespace'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.18 – Chapter3 命名空间中的 WordPress 部署'
- en: '](img/Figure_3.18_B17979.jpg)'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.18_B17979.jpg)'
- en: Figure 3.18 – The wordpress deployment in the chapter3 namespace
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.18 – Chapter3 命名空间中的 WordPress 部署
- en: In the preceding command, we filtered the deployments by using the `-l app.kubernetes.io/name=wordpress`
    parameter. Many Helm charts add the `app.kubernetes.io/name` label (or a similar
    label) on the resources they create. You can use this label to filter resources
    using `kubectl` so that only resources that Helm created are returned.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述命令中，我们通过使用 `-l app.kubernetes.io/name=wordpress` 参数来过滤部署。许多 Helm 图表会在它们创建的资源上添加
    `app.kubernetes.io/name` 标签（或类似标签）。您可以使用这个标签来过滤资源，使用 `kubectl` 命令，只返回 Helm 创建的资源。
- en: Choosing between --set and --values
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择 `--set` 和 `--values` 之间的区别
- en: 'When we installed WordPress earlier, we used the `--values` flag to pass parameters
    to the Helm chart. However, there are two ways to pass values:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们之前安装 WordPress 时，我们使用了 `--values` 标志将参数传递给 Helm 图表。然而，传递值有两种方式：
- en: 'To pass a value explicitly from the command line, use the following command:'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要显式地从命令行传递一个值，请使用以下命令：
- en: '[PRE37]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'To specify values from a YAML file or URL, use the following command:'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要从 YAML 文件或 URL 中指定值，请使用以下命令：
- en: '[PRE38]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: In this book, we will treat the `--values` flag as the preferred method of configuring
    chart values. The reason for this is that it is easier to configure multiple values
    when they are contained in a YAML file. Maintaining a `values` file also makes
    it simple to save these assets in a `Git`, which allows installations to be easily
    reproducible. However, take note that sensitive values, such as passwords, should
    never be stored in a source control repository. When secrets need to be provided,
    the recommended approach is to use the `--set` flag to prevent them from being
    committed to source control. We will cover the topic of security in greater detail
    in [*Chapter 12*](B17979_12.xhtml#_idTextAnchor270), *Helm Security Considerations*.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将 `--values` 标志视为配置图表值的首选方法。这样做的原因是，当值包含在 YAML 文件中时，配置多个值会更容易。维护一个 `values`
    文件还可以简化将这些资源保存在 `Git` 中，从而使得安装可以轻松复现。然而，请注意，敏感值（如密码）绝不应存储在源代码控制仓库中。当需要提供机密值时，推荐的方法是使用
    `--set` 标志，以防止它们被提交到源代码控制中。我们将在[*第12章*](B17979_12.xhtml#_idTextAnchor270)中详细讨论安全问题，*Helm
    安全考虑*。
- en: The `--set` flag is used to pass values directly from the command line. This
    is an acceptable method for simple values, as well as for when there are only
    a small number of values that need to be configured. Complex values, such as lists
    and maps, can be challenging to input when using the `--set` flag, so it is not
    preferred. There are other related flags, such as `--set-file` and `--set-string`.
    The `--set-file` flag is used to pass along a file that has configured values
    in a `key1=val1` and `key2=val2` format, while the `--set-string` flag is used
    to set all the values provided in a `key1=val1` and `key2=val2` format as strings.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '`--set` 标志用于直接从命令行传递值。这是处理简单值的可接受方法，适用于需要配置的值数量较少的情况。当需要输入复杂值，如列表和映射时，使用 `--set`
    标志可能会比较困难，因此不推荐使用此方法。还有其他相关的标志，如 `--set-file` 和 `--set-string`。`--set-file` 标志用于传递包含已配置值的文件，文件格式为
    `key1=val1` 和 `key2=val2`，而 `--set-string` 标志则用于将所有提供的值（格式为 `key1=val1` 和 `key2=val2`）设置为字符串。'
- en: Now, let’s explore the WordPress application that we just installed.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来探索我们刚刚安装的 WordPress 应用程序。
- en: Accessing the WordPress application
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问 WordPress 应用程序
- en: 'The WordPress chart’s release notes provided four commands that you can run
    to access your WordPress application (you can recall the full release notes using
    `helm get notes wordpress -n chapter3`). Run the four commands that were provided
    from the notes:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress 图表的发布说明提供了四个命令，您可以运行这些命令来访问您的 WordPress 应用程序（您可以使用 `helm get notes
    wordpress -n chapter3` 查看完整的发布说明）。请按照发布说明中提供的四个命令运行：
- en: 'For macOS or Linux, run the following:'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 macOS 或 Linux，请运行以下命令：
- en: '[PRE39]'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'For Windows PowerShell, run the following:'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 Windows PowerShell，请运行以下命令：
- en: '[PRE40]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: After defining the two environment variables based on the series of `kubectl`
    queries, the resulting `echo` commands will reveal the URLs to access WordPress.
    The first URL is to view the home page and is where visitors will access your
    site. The second URL is to reach the admin console, which is used by website administrators
    to configure and manage the site’s content.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于一系列`kubectl`查询定义了这两个环境变量后，生成的`echo`命令将显示访问 WordPress 的 URL。第一个 URL 是查看主页的地址，访客将通过此链接访问你的网站。第二个
    URL 是进入管理员控制台的地址，网站管理员可以通过它配置和管理站点内容。
- en: 'Paste the first URL into a browser. You should be presented with a page that
    looks similar to the following:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 将第一个 URL 粘贴到浏览器中。你将看到类似以下内容的页面：
- en: '![Figure 3.19 – The WordPress blog page'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.19 – WordPress 博客页面'
- en: '](img/Figure_3.19_B17979.jpg)'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.19_B17979.jpg)'
- en: Figure 3.19 – The WordPress blog page
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.19 – WordPress 博客页面
- en: Several portions of this page may look familiar to you. First, at the top of
    the screen, the title of the blog is `wordpressBlogName` value previously during
    installation. You can also see this value at the bottom left-hand side of the
    page.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 这页面的几个部分可能对你来说很熟悉。首先，在屏幕顶部，博客的标题是安装时提供的`wordpressBlogName`值。你也可以在页面的左下角看到该值。
- en: 'Another value that affected the customization of the home page is `wordpressUsername`.
    If you click on the `helm-user`:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个影响主页自定义的值是`wordpressUsername`。如果你点击`helm-user`：
- en: '![Figure 3.20 – The “Hello world!” post'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.20 – “Hello world!” 帖子'
- en: '](img/Figure_3.20_B17979.jpg)'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.20_B17979.jpg)'
- en: Figure 3.20 – The “Hello world!” post
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.20 – “Hello world!” 帖子
- en: If you had provided a different value for `wordpressUsername`, then the author
    here would appear differently as well.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你提供了不同的`wordpressUsername`值，那么这里的作者名称也会有所不同。
- en: 'The second link provided by the previous set of commands is for accessing the
    admin console. Paste the link from the second `echo` command into a browser. You
    should be presented with the following login screen:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 上一组命令提供的第二个链接用于访问管理员控制台。将第二个`echo`命令中的链接粘贴到浏览器中，你将看到以下登录页面：
- en: '![Figure 3.21 – The WordPress admin console login page'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.21 – WordPress 管理控制台登录页面'
- en: '](img/Figure_3.21_B17979.jpg)'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.21_B17979.jpg)'
- en: Figure 3.21 – The WordPress admin console login page
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.21 – WordPress 管理控制台登录页面
- en: To log into the admin console, enter the `wordpressUsername` and `wordpressPassword`
    values that you provided during the installation. If you used the same values
    we specified earlier, then the username will be `helm-user` and the password will
    be `my-password`.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 要登录管理员控制台，输入安装过程中提供的`wordpressUsername`和`wordpressPassword`值。如果你使用了我们之前指定的相同值，那么用户名将是`helm-user`，密码将是`my-password`。
- en: 'Once you’re authenticated, the admin console dashboard will be displayed, as
    shown here:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你完成身份验证，管理员控制台仪表板将显示，如下所示：
- en: '![Figure 3.22 – The WordPress admin console page'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.22 – WordPress 管理控制台页面'
- en: '](img/Figure_3.22_B17979.jpg)'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.22_B17979.jpg)'
- en: Figure 3.22 – The WordPress admin console page
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.22 – WordPress 管理控制台页面
- en: 'If you were a WordPress administrator, this is where you could configure your
    site, write posts, and manage plugins. If you click on the top-right link that
    says `helm-user` profile page. From there, you can see several of the other values
    that you provided during the installation, as shown in the following screenshot:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是 WordPress 管理员，便可以在此配置你的网站、编写文章并管理插件。如果你点击右上角的链接，进入`helm-user`个人资料页面，你将看到在安装过程中提供的其他几个值，如下图所示：
- en: '![Figure 3.23 – The WordPress profile page'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.23 – WordPress 个人资料页面'
- en: '](img/Figure_3.23_B17979.jpg)'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.23_B17979.jpg)'
- en: Figure 3.23 – The WordPress profile page
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.23 – WordPress 个人资料页面
- en: The `wordpressFirstname`, `wordpressLastname`, and `wordpressEmail` Helm values.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '`wordpressFirstname`、`wordpressLastname` 和 `wordpressEmail` 这些 Helm 值。'
- en: Feel free to continue exploring your WordPress instance. Once you are finished,
    continue to the next section to learn how to upgrade a Helm release.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 随时继续探索你的 WordPress 实例。完成后，继续下一节，了解如何升级 Helm 版本。
- en: Upgrading the WordPress release
  id: totrans-303
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 升级 WordPress 版本
- en: Upgrading a release refers to the process of modifying the release’s values
    or updating the chart to a newer version. In this section, we will upgrade the
    WordPress release by adding a couple more values to the installation.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 升级版本是指修改版本的值或将图表更新到较新版本的过程。在本节中，我们将通过添加更多值来升级 WordPress 版本。
- en: Modifying the Helm values
  id: totrans-305
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改 Helm 值
- en: 'Oftentimes, when deploying applications to Kubernetes, you will want to run
    multiple replicas of the application to provide high availability and reduce the
    load on a single instance. Helm charts often provide some sort of replica-related
    value for configuring the number of pod replicas to deploy. A quick browse through
    the output of the `helm show values bitnami/wordpress --version 12.1.6` command
    shows that you can increase WordPress replicas by using the `replicaCount` value:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 在将应用程序部署到Kubernetes时，你通常希望运行多个副本以提供高可用性，并减少单个实例的负载。Helm charts通常提供某种与副本相关的值，用于配置要部署的Pod副本数。快速浏览`helm
    show values bitnami/wordpress --version 12.1.6`命令的输出，你可以看到可以通过使用`replicaCount`值来增加WordPress的副本数：
- en: '![Figure 3.24 – replicaCount in the helm show values command'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.24 – helm show values命令中的replicaCount'
- en: '](img/Figure_3.24_B17979.jpg)'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.24_B17979.jpg)'
- en: Figure 3.24 – replicaCount in the helm show values command
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.24 – helm show values命令中的replicaCount
- en: 'Add the following line to your `wordpress-values.yaml` file to increase the
    number of replicas from `1` to `2`:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下行添加到你的`wordpress-values.yaml`文件中，以将副本数从`1`增加到`2`：
- en: '[PRE41]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Let’s add another value to set the resource requests. Looking through the `helm
    show values` output, you can see that this chart provides a `resources` map within
    its set of values:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再添加一个值来设置资源请求。在查看`helm show values`输出时，你可以看到此chart在其值集中提供了一个`resources`映射：
- en: '![Figure 3.25 – The values under the resources stanza'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.25 – 资源部分下的值'
- en: '](img/Figure_3.25_B17979.jpg)'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.25_B17979.jpg)'
- en: Figure 3.25 – The values under the resources stanza
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.25 – 资源部分下的值
- en: 'Nested values such as `resources` are YAML maps (or objects), and they help
    provide a logical grouping of properties. Under the `resources` map is a `requests`
    map, which is used to configure the `memory` and `cpu` values that Kubernetes
    will allocate to the WordPress application. Let’s modify these values to decrease
    the memory request to `256Mi` (256 mebibytes) and the `cpu` request to `100m`
    (100 millicores). Add these modifications to the `wordpress-values.yaml` file,
    as shown here:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 像`resources`这样的嵌套值是YAML映射（或对象），它们有助于提供属性的逻辑分组。在`resources`映射下是一个`requests`映射，用于配置Kubernetes将分配给WordPress应用程序的`memory`和`cpu`值。让我们修改这些值，将内存请求减少到`256Mi`（256
    MiB）和CPU请求减少到`100m`（100毫核）。将这些修改添加到`wordpress-values.yaml`文件中，如下所示：
- en: '[PRE42]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'After defining these two new values, your entire `wordpress-values.yaml` file
    will look as follows:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义这两个新值后，你的整个`wordpress-values.yaml`文件将如下所示：
- en: '[PRE43]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Once the `wordpress-values.yaml` file has been updated with these new values,
    you can run the `helm upgrade` command to upgrade the release, as we will discuss
    in the next section.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`wordpress-values.yaml`文件更新了这些新值，你可以运行`helm upgrade`命令来升级发布，如我们将在下一节中讨论的那样。
- en: Running the upgrade
  id: totrans-321
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行升级
- en: 'The `helm upgrade` command is almost identical to the `helm install` command
    in basic syntax, as illustrated in the following example:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '`helm upgrade`命令在基本语法上几乎与`helm install`命令相同，如下例所示：'
- en: '[PRE44]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: While `helm install` expects you to provide a name for a new release, `helm
    upgrade` expects you to provide the name of an already-existing release that should
    be upgraded. Alternatively, you can pass the `--install` flag, which instructs
    Helm to perform an installation instead if the release name you provide does not
    exist.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`helm install`要求你提供一个新发布的名称，但`helm upgrade`要求你提供一个已经存在的发布名称进行升级。或者，你可以传递`--install`标志，如果你提供的发布名称不存在，它会指示Helm执行安装操作。
- en: 'Values defined in a `values` file can be provided using the `--values` flag,
    identical to that of the `helm install` command. Run the following command to
    upgrade the WordPress release with the new set of values:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 在`values`文件中定义的值可以通过`--values`标志提供，这与`helm install`命令相同。运行以下命令以使用新的值集升级WordPress发布：
- en: '[PRE45]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Once this command has been executed, you should see an output similar to that
    of `helm install`. You should also notice that the `REVISION` field now says `2`:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此命令后，你应该看到与`helm install`类似的输出。你还应该注意到`REVISION`字段现在显示为`2`：
- en: '![Figure 3.26 – The output for helm upgrade'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.26 – helm upgrade的输出'
- en: '](img/Figure_3.26_B17979.jpg)'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.26_B17979.jpg)'
- en: Figure 3.26 – The output for helm upgrade
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.26 – helm upgrade的输出
- en: 'You should also see that the `wordpress` pods have restarted if you run the
    following command:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行以下命令，你还应该看到`wordpress` Pod已经重启：
- en: '[PRE46]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: In Kubernetes, new pods are created when their pod template is modified. The
    same behavior can be observed in Helm. The values that were added during the upgrade
    introduced a configuration change to the WordPress pod template. As a result,
    new WordPress pods were created with the updated configuration. These changes
    can be observed using the same `helm get manifest` and `kubectl get deployment`
    commands that were used earlier in this chapter.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 中，当修改其 pod 模板时，会创建新的 pod。在 Helm 中也可以观察到相同的行为。升级过程中添加的值引入了对 WordPress
    pod 模板的配置更改。因此，新的 WordPress pods 被创建，并使用更新后的配置。可以使用本章前面提到的 `helm get manifest`
    和 `kubectl get deployment` 命令来观察这些更改。
- en: In the next section, we’ll perform a couple more upgrades to demonstrate how
    values can sometimes behave differently during an upgrade.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将进行更多的升级操作，以演示在升级过程中值有时会有不同的表现。
- en: Reusing and resetting values during an upgrade
  id: totrans-335
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在升级过程中重用和重置值
- en: In addition to `--set` and `--values`, which are present in both `helm install`
    and `helm upgrade`, the `helm upgrade` command includes two additional values-related
    flags.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 除了在 `helm install` 和 `helm upgrade` 中都存在的 `--set` 和 `--values` 参数，`helm upgrade`
    命令还包括两个与值相关的附加标志。
- en: 'Let’s look at these flags now:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看这些标志：
- en: '`--reuse-values`: When upgrading, reuse the last release’s values'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--reuse-values`：在升级时，重用上次发布的值'
- en: '`--reset-values`: When upgrading, reset the values to the chart defaults'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--reset-values`：在升级时，将值重置为 chart 的默认值'
- en: 'If an upgrade is performed without providing values with the `--set` or `--values`
    flags, then the `--reuse-values` flag is applied by default. In other words, the
    same values that were used by the previous release will be used again during the
    upgrade if no values are provided. Alternatively, if at least one value is provided
    with `--set` or `--values`, then the `--reset-values` flag is applied by default.
    Let’s run through an example:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在升级时没有通过 `--set` 或 `--values` 标志提供值，则默认会应用 `--reuse-values` 标志。换句话说，如果没有提供任何值，将使用上次发布时的相同值进行升级。或者，如果通过
    `--set` 或 `--values` 提供了至少一个值，则默认会应用 `--reset-values` 标志。让我们通过一个示例来演示：
- en: 'Run another `upgrade` command without specifying any values:'
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行另一个不指定任何值的 `upgrade` 命令：
- en: '[PRE47]'
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Run the `helm get values` command to inspect the values used in the upgrade:'
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `helm get values` 命令检查升级中使用的值：
- en: '[PRE48]'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Notice that the values displayed are identical to the previous upgrade:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，显示的值与上次升级时的值完全相同：
- en: '![Figure 3.27 – The output of the helm get values command'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.27 – helm 获取值命令的输出'
- en: '](img/Figure_3.27_B17979.jpg)'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.27_B17979.jpg)'
- en: Figure 3.27 – The output of the helm get values command
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.27 – helm 获取值命令的输出
- en: Different behavior can be observed when values are provided during an upgrade.
    If values are passed via the `--set` or `--values` flags, all of the chart’s values
    that are not provided are reset to their defaults. Let’s see this in action.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 在升级过程中提供值时，可以观察到不同的行为。如果通过 `--set` 或 `--values` 标志传递了值，则所有未提供的 chart 值将被重置为默认值。让我们来看一下实际操作。
- en: 'Run another upgrade by providing a smaller set of values with the `--set` flag:'
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过提供一个较小的值集来运行另一次升级，使用 `--set` 标志：
- en: '[PRE49]'
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'After the upgrade, run the `helm get values` command:'
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 升级完成后，运行 `helm get values` 命令：
- en: '[PRE50]'
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The output will declare that you have only provided three values, as opposed
    to the many that you originally declared in the `wordpress-values.yaml` file:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将声明你仅提供了三个值，而不是你最初在 `wordpress-values.yaml` 文件中声明的多个值：
- en: '![Figure 3.28 – The updated user-supplied values'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.28 – 更新后的用户提供值'
- en: '](img/Figure_3.28_B17979.jpg)'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.28_B17979.jpg)'
- en: Figure 3.28 – The updated user-supplied values
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.28 – 更新后的用户提供值
- en: To prevent confusion during your upgrades and to simplify how values are managed,
    try to manage all of your values in a `values` file. This provides a more declarative
    approach, and it makes it clear which values will be applied each time you upgrade.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止在升级过程中产生混淆，并简化值的管理方式，建议将所有值管理在一个 `values` 文件中。这提供了一种声明式的方法，并明确每次升级时将应用哪些值。
- en: If you have been following along with each of the commands provided in this
    chapter, you should now have four revisions of the WordPress release in your environment.
    This fourth revision is not quite in the way we want the application to be configured
    since most of the values were set back to their defaults by the most recent upgrade.
    In the next section, we will explore how the WordPress release can be rolled back
    to the stable version that contained the set of desired values.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你一直在跟随本章提供的每个命令，你现在应该在你的环境中有四个 WordPress 发布的修订版。第四个修订版并不是我们希望应用程序配置的样子，因为大多数值已经被最近的升级重置为默认值。在下一节中，我们将探讨如何将
    WordPress 发布回滚到包含所需值的稳定版本。
- en: Rolling back the WordPress release
  id: totrans-360
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回滚 WordPress 发布
- en: While moving forward is preferred, there are some occasions where it makes more
    sense to return to a previous version of the application. The `helm rollback`
    command exists to satisfy this use case. Let’s describe how to roll back the WordPress
    release to a previous state.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然前进通常是首选，但在某些情况下，返回到应用程序的先前版本更为合理。`helm rollback` 命令就是为了满足这个需求。让我们来描述如何将 WordPress
    发布回滚到先前的状态。
- en: Inspecting the WordPress history
  id: totrans-362
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查 WordPress 历史
- en: 'Every Helm release has a history of `HELM_DRIVER` environment variable). This
    allows your Helm release to be managed and interacted with by different users
    on the Kubernetes cluster, provided they have the appropriate `Secrets` containing
    the revisions can be observed by using `kubectl` to get them from the `chapter3`
    namespace:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 Helm 发布都有一个历史记录（`HELM_DRIVER` 环境变量）。这使得不同的用户可以在 Kubernetes 集群中管理和交互 Helm
    发布，前提是他们拥有包含修订版的适当 `Secrets`，可以使用 `kubectl` 从 `chapter3` 命名空间中获取它们：
- en: '[PRE51]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'This command will return all of the secrets within the namespace, but you should
    see these four in the output:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将返回命名空间中的所有机密，但你应该在输出中看到这四个：
- en: '[PRE52]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Each of these `Secrets` corresponds with an entry of the release’s revision
    history, which can be viewed by running the `helm history` command:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 `Secrets` 都对应发布修订历史中的一个条目，可以通过运行 `helm history` 命令来查看：
- en: '[PRE53]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'This command will display a table of each revision, similar to the following
    (some columns have been omitted for readability):'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将显示每个修订版的表格，类似于以下内容（为了可读性，部分列已省略）：
- en: '| **REVISION** | **STATUS** | **DESCRIPTION** |'
  id: totrans-370
  prefs: []
  type: TYPE_TB
  zh: '| **修订版** | **状态** | **描述** |'
- en: '| 1 | superseded | Install complete |'
  id: totrans-371
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 被取代 | 安装完成 |'
- en: '| 2 | superseded | Upgrade complete |'
  id: totrans-372
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 被取代 | 升级完成 |'
- en: '| 3 | superseded | Upgrade complete |'
  id: totrans-373
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 被取代 | 升级完成 |'
- en: '| 4 | deployed | Upgrade complete |'
  id: totrans-374
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 已部署 | 升级完成 |'
- en: Table 3.1 – Table caption
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 表 3.1 – 表格标题
- en: In this output, each revision has a number, along with the time it was updated,
    the status, the name of the chart, the app version, and the description. Revisions
    that have a status of `superseded` are no longer up to date, while the revision
    that says `deployed` is the currently deployed revision. Other statuses include
    `pending` and `pending_upgrade`, which means the installation or upgrade is currently
    in progress. `failed` refers to a particular revision that has failed to install
    or be upgraded and `unknown` means that you encountered a bug and may want to
    file an issue or notify the maintainers. It’s unlikely you will ever encounter
    a release with a state of `unknown`.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 在此输出中，每个修订版都有一个编号，以及更新时间、状态、图表名称、应用版本和描述。状态为 `superseded` 的修订版不再是最新的，而状态为 `deployed`
    的修订版是当前已部署的版本。其他状态包括 `pending` 和 `pending_upgrade`，表示安装或升级正在进行中。`failed` 表示某个修订版安装或升级失败，`unknown`
    表示遇到了一个 bug，可能需要提交问题或通知维护者。你不太可能遇到 `unknown` 状态的发布。
- en: 'The `helm get` commands described previously can be used against a revision
    number by specifying the `--revision` flag. For this rollback, let’s determine
    the release that had the full set of desired values. As you may recall, the current
    revision, `revision 4`, only contains a subset of the values we need, but `revision
    3` should contain all of our desired values. This can be verified by running the
    `helm get values` command with the `--revision` flag:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 前面描述的 `helm get` 命令可以通过指定 `--revision` 标志来针对某个修订版进行使用。对于这次回滚，我们来确定哪个发布包含了完整的所需值。正如你可能记得的，当前的修订版
    `修订版 4` 仅包含我们所需值的一个子集，但 `修订版 3` 应该包含所有我们需要的值。可以通过运行带有 `--revision` 标志的 `helm get
    values` 命令来验证这一点：
- en: '[PRE54]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The full list of values is presented by inspecting this revision:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过检查此修订版来查看所有值的完整列表：
- en: '![Figure 3.29 – The output of checking a specific revision'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.29 – 检查特定修订版的输出'
- en: '](img/Figure_3.29_B17979.jpg)'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.29_B17979.jpg)'
- en: Figure 3.29 – The output of checking a specific revision
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.29 – 检查特定修订版的输出
- en: It is possible to execute other `helm get` commands against a revision number
    to perform a further inspection. If necessary, the `helm get manifest` command
    can also be executed against `revision 3` to check the state of the Kubernetes
    resources that would be restored.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 可以针对修订号执行其他 `helm get` 命令，以进行进一步检查。如果需要，还可以针对 `revision 3` 执行 `helm get manifest`
    命令，以查看将要恢复的 Kubernetes 资源的状态。
- en: In the next section, we will execute the rollback.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将执行回滚操作。
- en: Running the rollback
  id: totrans-385
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行回滚
- en: 'The `helm rollback` command has the following syntax:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: '`helm rollback` 命令的语法如下：'
- en: '[PRE55]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Users provide the name of the release and the desired revision number to roll
    a Helm release back to a previous point in time. Execute the following command
    to roll back WordPress to `revision 3`:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 用户提供发布的名称和期望的修订版本号，以将 Helm 发布回滚到先前的时间点。执行以下命令，将 WordPress 回滚到 `revision 3`：
- en: '[PRE56]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The `rollback` subcommand provides a simple output, printing the following
    message:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '`rollback` 子命令提供了简单的输出，打印出以下消息：'
- en: '[PRE57]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'This rollback can be observed in the release history by running the `helm history`
    command:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过运行 `helm history` 命令，在发布历史中查看此回滚：
- en: '[PRE58]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: In the release history, you will notice that a fifth revision was added with
    a status of `deployed` and a description of `Rollback to 3`. When an application
    is rolled back, it adds a new revision to the release history. This is not to
    be confused with an upgrade. The highest revision number simply denotes the currently
    deployed release. Be sure to check a revision’s description to determine whether
    it was created by an upgrade or a rollback.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 在发布历史中，你会注意到增加了第五个修订版本，状态为 `deployed`，描述为 `Rollback to 3`。当应用被回滚时，它会向发布历史中添加一个新的修订版本。请不要将其与升级混淆。最高修订版本号只是表示当前已部署的发布。务必检查修订版本的描述，以确定它是由升级还是回滚操作创建的。
- en: 'You can get this release’s values to ensure that the rollback now uses the
    desired values by running `helm get values` again:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过再次运行 `helm get values` 命令获取该发布的值，以确保回滚时使用的是期望的值：
- en: '[PRE59]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'The output will show the values from the latest stable release:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将显示最新稳定版本的值：
- en: '![Figure 3.30 – The values from the latest revision'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.30 – 最新修订版的值'
- en: '](img/Figure_3.30_B17979.jpg)'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.30_B17979.jpg)'
- en: Figure 3.30 – The values from the latest revision
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.30 – 最新修订版的值
- en: You may notice that we did not explicitly set the chart version or the release’s
    values in the `rollback` subcommand. This is because the `rollback` subcommand
    is not designed to accept these inputs. It is designed to roll a chart back to
    a previous revision and leverage that revision’s chart version and values. Note
    that the `rollback` subcommand should not be part of everyday Helm practices and
    that it should be reserved only for emergencies, where the current state of an
    application is unstable and must be reverted to a previously stable point.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到，我们没有在 `rollback` 子命令中明确设置 chart 版本或发布的值。这是因为 `rollback` 子命令并不设计为接受这些输入。它是为了将
    chart 回滚到先前的修订版，并利用该修订版的 chart 版本和值。请注意，`rollback` 子命令不应成为日常 Helm 操作的一部分，它应该仅限于紧急情况下使用，当应用的当前状态不稳定，需要回滚到先前稳定的状态时使用。
- en: If you have successfully rolled back the WordPress release, you are nearing
    the end of this chapter’s exercise. The final step is to remove the WordPress
    application from the Kubernetes cluster by using the `uninstall` subcommand, which
    we will describe in the next section.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你成功地回滚了 WordPress 版本，那么你就接近本章练习的结束。最后一步是通过使用 `uninstall` 子命令从 Kubernetes 集群中移除
    WordPress 应用，我们将在下一节中详细描述该步骤。
- en: Uninstalling the WordPress release
  id: totrans-403
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 卸载 WordPress 发布
- en: Uninstalling a Helm release means deleting the Kubernetes resources that it
    manages. In addition, the `uninstall` command deletes the release’s history. While
    this is often what we want, specifying the `--keep-history` flag will instruct
    Helm to retain the release history.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 卸载 Helm 发布意味着删除它管理的 Kubernetes 资源。此外，`uninstall` 命令还会删除发布的历史记录。虽然这通常是我们想要的效果，但如果指定
    `--keep-history` 标志，Helm 会保留发布的历史记录。
- en: 'The syntax for the `uninstall` command is very simple:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: '`uninstall` 命令的语法非常简单：'
- en: '[PRE60]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Uninstall the WordPress release by running the `helm uninstall` command:'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行 `helm uninstall` 命令卸载 WordPress 发布：
- en: '[PRE61]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Once WordPress is uninstalled, you will see the following message:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: '一旦 WordPress 被卸载，你将看到以下消息：  '
- en: '[PRE62]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'You will also notice that the `wordpress` release no longer exists in the `chapter3`
    namespace:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: '你还会注意到，`wordpress` 发布版本在 `chapter3` 命名空间中不再存在：  '
- en: '[PRE63]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'The output will be an empty table. You can also confirm that the release is
    no longer present by attempting to use `kubectl` to get the WordPress deployments:'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: '输出将是一个空表。你还可以通过尝试使用 `kubectl` 获取 WordPress 部署来确认发布版本不再存在：  '
- en: '[PRE64]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'As expected, there are no more WordPress deployments available. However, there
    is still one `PersistentVolumeClaim` sticking around:'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: '如预期的那样，已经没有可用的 WordPress 部署了。然而，仍然有一个 `PersistentVolumeClaim` 留下：  '
- en: '[PRE65]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '`PersistentVolumeClaim` was not deleted because it was created in the background
    by the MariaDB StatefulSet. In Kubernetes, `PersistentVolumeClaim` resources that
    are created by StatefulSets are not automatically removed if the StatefulSet is
    deleted. During the `helm uninstall` process, the StatefulSet was deleted but
    the associated `PersistentVolumeClaim` was not, as expected. The `PersistentVolumeClaim`
    command can be deleted manually with the following command:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: '`PersistentVolumeClaim` 没有被删除，因为它是由 MariaDB StatefulSet 在后台创建的。在 Kubernetes
    中，StatefulSet 创建的 `PersistentVolumeClaim` 资源如果 StatefulSet 被删除，是不会自动删除的。在 `helm
    uninstall` 过程中，StatefulSet 被删除了，但相关的 `PersistentVolumeClaim` 并没有被删除，正如预期的那样。可以使用以下命令手动删除
    `PersistentVolumeClaim`：  '
- en: '[PRE66]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Now that we’ve finished running through an example of installing, upgrading,
    rolling back, and uninstalling an application using Helm, let’s shut down the
    Kubernetes environment.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: '现在我们已经完成了使用 Helm 安装、升级、回滚和卸载应用程序的示例，接下来让我们关闭 Kubernetes 环境。  '
- en: Shutting down your environment
  id: totrans-420
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '关闭你的环境  '
- en: 'First, you can remove this chapter’s namespace by running the following command:'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: '首先，你可以通过运行以下命令来删除本章的命名空间：  '
- en: '[PRE67]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'After the `chapter3` namespace has been deleted, stop the minikube VM:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: '在删除 `chapter3` 命名空间后，停止 minikube 虚拟机：  '
- en: '[PRE68]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: This will shut down the VM but will retain its state so that you can quickly
    begin working again in the next exercise.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: '这将关闭虚拟机，但会保留其状态，以便你在下一个练习中可以迅速开始工作。  '
- en: Summary
  id: totrans-426
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '总结  '
- en: In this chapter, you learned how to install a Helm chart and manage its life
    cycle. We began by searching Artifact Hub for a WordPress chart to install. After
    locating a chart, the repository containing the chart was added by following the
    instructions from its Artifact Hub page. We then proceeded to inspect the WordPress
    chart to create a set of values that overrides their defaults. These values were
    saved to a `values` file called `wordpress-values.yaml`, which was then provided
    during the installation.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，你学会了如何安装 Helm chart 并管理其生命周期。我们从在 Artifact Hub 搜索并安装 WordPress chart 开始。在找到一个
    chart 后，我们按照 Artifact Hub 页面上的说明将包含该 chart 的仓库添加到 Helm 中。接着，我们检查了 WordPress chart，创建了一组覆盖其默认值的值。这些值被保存在一个名为
    `wordpress-values.yaml` 的 `values` 文件中，并在安装时提供。
- en: After the chart was installed, we used `helm upgrade` to upgrade the release
    by providing additional values. We then performed a rollback with `helm rollback`
    to restore the chart to a previous state. Finally, we removed the WordPress release
    at the end of the exercise with `helm uninstall`.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: '在安装 chart 后，我们使用 `helm upgrade` 通过提供额外的值来升级发布版本。然后我们使用 `helm rollback` 执行回滚，将
    chart 恢复到先前的状态。最后，在练习结束时，我们使用 `helm uninstall` 删除了 WordPress 发布版本。  '
- en: This chapter taught you how to leverage Helm as an end user, and how to use
    an already-written Helm chart. In the next chapter, we will explore the concepts
    and structure of a Helm chart in greater detail to begin learning how to create
    Helm charts of our own.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: '本章介绍了如何作为最终用户使用 Helm，以及如何使用已有的 Helm chart。在下一章，我们将更详细地探讨 Helm chart 的概念和结构，开始学习如何创建我们自己的
    Helm charts。  '
- en: Further reading
  id: totrans-430
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '深入阅读  '
- en: To learn more about adding repositories locally, inspecting charts, and using
    the four life cycle commands used throughout this chapter (`install`, `upgrade`,
    `rollback`, and `uninstall`), go to [https://helm.sh/docs/intro/using_helm/](B17979_03.xhtml#_idTextAnchor137).
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: '若要了解更多关于本地添加仓库、检查 charts 和使用本章中提到的四个生命周期命令（`install`、`upgrade`、`rollback` 和
    `uninstall`），请访问 [https://helm.sh/docs/intro/using_helm/](B17979_03.xhtml#_idTextAnchor137)。  '
- en: Questions
  id: totrans-432
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '问题  '
- en: What is Artifact Hub? How can a user interact with it to find charts and chart
    repositories?
  id: totrans-433
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '什么是 Artifact Hub？用户如何与其互动以查找 charts 和 chart 仓库？  '
- en: What is the difference between the `helm get` and `helm show` commands?
  id: totrans-434
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`helm get` 和 `helm show` 命令有什么区别？  '
- en: What is the difference between the `--set` and `--values` parameters in the
    `helm install` and `helm upgrade` commands? What are the benefits of using one
    over the other?
  id: totrans-435
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`helm install`和`helm upgrade`命令中的`--set`和`--values`参数有什么区别？使用其中一个相较于另一个有什么好处？'
- en: What command can be used to provide the list of revisions for a release?
  id: totrans-436
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以使用什么命令来提供发布的版本列表？
- en: What happens by default when you upgrade a release without providing any values?
    How does this behavior differ from when you do provide values for an upgrade?
  id: totrans-437
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，当你升级一个发布而没有提供任何值时会发生什么？当你为升级提供了值时，这种行为有何不同？
- en: Imagine that you have five revisions of a release. What would the `helm history`
    command show after you roll back the release to `revision 3`?
  id: totrans-438
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设你有五个版本的发布。将发布回滚到`revision 3`后，`helm history`命令会显示什么？
- en: Imagine that you want to view all of the releases deployed to a Kubernetes namespace.
    What command should you run?
  id: totrans-439
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设你想查看部署到某个 Kubernetes 命名空间中的所有发布。你应该运行什么命令？
- en: Imagine that you run `helm repo add` to add a chart repository. What command
    can you run to list all of the charts in that repository?
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设你运行`helm repo add`来添加一个 chart 仓库。你可以运行什么命令来列出该仓库中的所有 charts？
- en: 'Part 2: Helm Chart Development'
  id: totrans-441
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二部分：Helm Chart 开发
- en: You’ve deployed your first Helm chart from a public repository. Now, it’s time
    to develop your own Helm chart by learning the ins and outs of Helm templating
    and the Helm chart structure.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经从公共仓库部署了第一个 Helm chart。现在，是时候通过学习 Helm 模板和 Helm chart 结构，开发自己的 Helm chart
    了。
- en: 'In this part, we will cover the following topics:'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 在本部分，我们将涵盖以下主题：
- en: '[*Chapter 4*](B17979_04.xhtml#_idTextAnchor139)*, Scaffolding a New Helm Chart*'
  id: totrans-444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第4章*](B17979_04.xhtml#_idTextAnchor139)*，搭建一个新的 Helm Chart*'
- en: '[*Chapter 5*](B17979_05.xhtml#_idTextAnchor154)*, Helm Dependency Management*'
  id: totrans-445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第5章*](B17979_05.xhtml#_idTextAnchor154)*，Helm 依赖管理*'
- en: '[*Chapter 6*](B17979_06.xhtml#_idTextAnchor167)*, Understanding Helm Templates*'
  id: totrans-446
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第6章*](B17979_06.xhtml#_idTextAnchor167)*，理解 Helm 模板*'
- en: '[*Chapter 7*](B17979_07.xhtml#_idTextAnchor196)*, Helm Lifecycle Hooks*'
  id: totrans-447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第7章*](B17979_07.xhtml#_idTextAnchor196)*，Helm 生命周期钩子*'
- en: '[*Chapter 8*](B17979_08.xhtml#_idTextAnchor210)*, Publishing to a Helm Chart
    Repository*'
  id: totrans-448
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第8章*](B17979_08.xhtml#_idTextAnchor210)*，发布到 Helm Chart 仓库*'
- en: '[*Chapter 9*](B17979_09.xhtml#_idTextAnchor222)*, Testing Helm Charts*'
  id: totrans-449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第9章*](B17979_09.xhtml#_idTextAnchor222)*，测试 Helm Charts*'

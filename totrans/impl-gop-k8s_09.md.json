["```\n$ az login\n```", "```\n$ terraform init\n$ terraform plan -out aksplan\n$ terraform apply -auto-approve aksplan\n```", "```\n$ az aks get-credentials --resource-group aks-k8s-deployments-rg --name aksgitopscluster\n```", "```\n    variables:\n    # Container registry service connection …\n    dockerfilePath: '**/Dockerfile'\n    ```", "```\n    dockerfilePath: '**/src/dockerfile'\n    ```", "```\n    $ kubectl get pods --namespace weather-app-namespace\n    ```", "```\n    NAME                 READY   STATUS    RESTARTS   AGE\n    myweathera…        1/1     Running   0          7m50s\n    ```", "```\n    $ terraform destroy --auto-approve\n    ```", "```\n    terraform init command. For this step, we will utilize the main.tf Terraform files located in the iac/aws folder of the GitHub repository accompanying this chapter.This `main.tf` Terraform configuration file orchestrates the setup of essential AWS infrastructure components for deploying a Kubernetes cluster and managing container images. It begins by defining the AWS provider and version required for the deployment. Following this, it creates an ECR repository named `eksgitops3003204ecr` to store Docker images with mutable tag mutability. Next, the configuration provisions a `terraform-aws-modules/vpc/aws` module. This VPC, named `eks-cluster-vpc`, spans across two availability zones in the `eu-central-1` AWS region. Subsequently, the configuration sets up an EKS cluster utilizing the `terraform-aws-modules/eks/aws` module. The cluster, named `eksgitopscluster`, operates on version 1.29 and allows public access to its endpoint. It’s integrated with the previously created VPC and utilizes private subnets for enhanced security.Additionally, the configuration establishes a managed node group within the EKS cluster, configured with one instance of the `t3.small` type. This node group provides the computing resources necessary for running containerized applications within the Kubernetes environment. To facilitate seamless interaction between the EKS cluster and the ECR repository, an `ecr-pull-policy` is created. This policy grants EKS nodes the permissions required to pull container images from the specified ECR repository.Finally, the IAM policy is attached to the IAM role associated with the EKS cluster, ensuring that the cluster nodes have the necessary permissions to retrieve container images for deployment.\n    ```", "```\n    $ terraform init\n    $ terraform plan -out aksplan\n    $ terraform apply -auto-approve aksplan\n    ```", "```\n    $ aws eks --region eu-central-1 update-kubeconfig --name eksgitopscluster\n    ```", "```\n    $ kubectl cluster-info\n    ```", "```\n    Kubernetes control plane is running at https://54CE9D2FAC3008E8E5B3D4873E92E7B2.yl4.eu-central-1.eks.amazonaws.com\n    CoreDNS is running at https://54CE9D2FAC3008E8E5B3D4873E92E7B2.yl4.eu-central-1.eks.amazonaws.com/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy\n    ```", "```\n{\n     \"Version\": \"2012-10-17\",\n     \"Statement\": [\n          {\n               \"Effect\": \"Allow\",\n               \"Action\": \"eks:Describe*\",\n               \"Resource\": \"*\"\n          }\n     ]\n}\n```", "```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"Service\": \"codebuild.amazonaws.com\"\n            },\n            \"Action\": \"sts:AssumeRole\"\n        }\n    ]\n}\n```", "```\n    $ kubectl get deployments\n    ```", "```\n    NAME                  READY   UP-TO-DATE   AVAILABLE   AGE\n    my-city-weather-app   1/1     1            1           64m\n    ```"]
["```\napiVersion: v1\ndata:\n  policy.csv: |\n    p, role:org-admin, applications, *, */*, allow\n    p, role:org-admin, clusters, get, *, allow\n    p, role:org-admin, repositories, get, *, allow\n    p, role:org-admin, repositories, create, *, allow\n    p, role:org-admin, repositories, update, *, allow\n    p, role:org-admin, repositories, delete, *, allow\n    g, \"GROUP_ID\", role:org-admin\n  policy.default: role:readonly\nkind: ConfigMap\nmetadata:\n  labels:\n    app.kubernetes.io/name: argocd-rbac-cm\n    app.kubernetes.io/part-of: argocd\n  name: argocd-rbac-cm\n  namespace: argocd\n```", "```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  namespace: argocd\n  labels:\n    app.kubernetes.io/name: argocd-cm\n    app.kubernetes.io/part-of: argocd\ndata:\n  admin.enabled: \"false\"\n```", "```\n    kubectl port-forward --namespace argocd service/argocd-server 8080:443\n    ```", "```\n    admin as username  and password, log in to Argo CD’s IP or hostname:\n\n    ```", "```\n\n    ```", "```\n    argocd account update-password\n    ```", "```\n    kubectl port-forward svc/argocd-server -n argocd 8080:443 & argocd login localhost:8080 --username admin --password $(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d) --insecure --grpc-web\n    ```", "```\n    argocd account update-password\n    ```", "```\n    kill $(ps aux | grep 'kubectl port-forward svc/argocd-server -n argocd 8080:443' | grep -v grep | awk '{print $2}')\n    ```", "```\n    helm repo add sealed-secrets https://bitnami-    labs.github.io/sealed-secrets\n    helm install sealed-secrets sealed-secrets/sealed-secrets\n    #Install e.g. CLI on MacOS\n    brew install kubeseal\n    ```", "```\n    kubectl -n sealed-secrets get secret sealed-secrets-… -o json -o=jsonpath=\"{.data.tls\\.crt}\" | base64 -d > sealed-secret.crt\n    ```", "```\n    mysealedsecret.yaml to your Git repository. When you apply this file to your cluster, the Sealed Secrets controller decrypts it and creates a standard Kubernetes secret.\n    ```", "```\n    helm repo add external-secrets https://charts.external-secrets.io\n    helm install external-secrets external-secrets/external-secrets\n    ```", "```\n       apiVersion: external-secrets.io/v1beta1\n       kind: ExternalSecret\n       metadata:\n         name: my-external-secret\n       spec:\n         secretStoreRef:\n           name: my-secret-store\n           kind: SecretStore\n         target:\n           name: my-kubernetes-secret\n         data:\n         - secretKey: external-secret-key\n           remoteRef:\n             key: name-of-the-secret-in-external-store\n    ```", "```\n.\n├── applicationsets\n│   └── security\n│       └── kyverno-applicationset.yaml\n├── kustomize\n│   └── security\n│       └── kyverno\n│           └── policies\n│               └── base\n│                   ├── disallow-latest-tag.yaml\n│                   ├── kustomization.yaml\n│                   └── restrict-nodeport.yaml\n└── security\n    └── kyverno\n        ├── Chart.yaml\n        └── values.yaml\n```", "```\napiVersion: kyverno.io/v1\nkind: ClusterPolicy\nmetadata:\n  name: disallow-latest-tag-example\n  annotations:\n    policies.kyverno.io/title: Disallow Latest Tag Example\n    policies.kyverno.io/category: Best Practices\n    policies.kyverno.io/minversion: 1.6.0\n    policies.kyverno.io/severity: medium\n    policies.kyverno.io/subject: Pod\n    policies.kyverno.io/description: >-\n      The ':latest' tag is mutable and can lead to unexpected errors if the\n      image changes.. This policy validates that the image\n      specifies a tag and that it is not called `latest`.\n```", "```\nspec:\n  validationFailureAction: Audit\n  background: true\n  rules:\n    - name: require-image-tag\n      match:\n        any:\n          - resources:\n              kinds:\n                - Pod\n      validate:\n        message: \"An image tag is required.\"\n        pattern:\n          spec:\n            containers:\n              - image: \"*:*\"\n    - name: validate-image-tag\n      match:\n        any:\n          - resources:\n              kinds:\n                - Pod\n      validate:\n        message: \"Using a mutable image tag e.g. 'latest' is not allowed.\"\n        pattern:\n          spec:\n            containers:\n              - image: \"!*:latest\"\n```", "```\nkubectl run nginx --image nginx:latest\n```", "```\nkubectl get policyreport fbe08ffd-bee6-497f-aee8-f96e9cd022f8  -n default -o yaml | grep image -A 8\n```", "```\n- category: Best Practices\n  message: 'validation error: Using a mutable image tag e.g. ''latest'' is not allowed.\n    rule validate-image-tag failed at path /spec/containers/0/image/'\n  policy: disallow-latest-tag\n  result: fail\n  rule: validate-image-tag\n  scored: true\n  severity: medium\n  source: kyverno\n```"]
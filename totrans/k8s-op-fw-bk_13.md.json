["```\napiVersion: apps/v1\n```", "```\nkind: Deployment\n```", "```\nmetadata:\n```", "```\n  name: prometheus\n```", "```\n  labels:\n```", "```\n    app: prometheus\n```", "```\nspec:\n```", "```\n  replicas: 1\n```", "```\n  selector:\n```", "```\n    matchLabels:\n```", "```\n      app: prometheus\n```", "```\n  template:\n```", "```\n    metadata:\n```", "```\n      labels:\n```", "```\n        app: prometheus\n```", "```\n    spec:\n```", "```\n      containers:\n```", "```\n      - name: prometheus\n```", "```\n        image: docker.io/prom/prometheus:latest\n```", "```\n        command: [\"prometheus\"]\n```", "```\n        args:\n```", "```\n        - --config=/etc/prom/config-file.yaml\n```", "```\n        - --enable-feature=agent,exemplar-storage,expand-internal-labels,memory-snapshot-on-shutdown\n```", "```\napiVersion: apps/v1\n```", "```\nkind: Deployment\n```", "```\nmetadata:\n```", "```\n  name: prometheus\n```", "```\n  labels:\n```", "```\n    app: prometheus\n```", "```\nspec:\n```", "```\n  replicas: 1\n```", "```\n  selector:\n```", "```\n    matchLabels:\n```", "```\n      app: prometheus\n```", "```\n  template:\n```", "```\n    metadata:\n```", "```\n      labels:\n```", "```\n        app: prometheus\n```", "```\n    spec:\n```", "```\n      containers:\n```", "```\n      - name: prometheus\n```", "```\n        image: docker.io/prom/prometheus:latest\n```", "```\n        command: [\"prometheus\"]\n```", "```\n        args:\n```", "```\n        - --config=/etc/prom/config-file.yaml\n```", "```\n        - --enable-feature=agent,exemplar-storage,expand-internal-labels,memory-snapshot-on-shutdown\n```", "```\n        volumeMounts:\n```", "```\n        - name: prom-config\n```", "```\n          mountPath: /etc/prom\n```", "```\n      volumes:\n```", "```\n      - name: prom-config\n```", "```\n        configMap:\n```", "```\n          name: prometheus-cfg\n```", "```\ntype Prometheus struct {\n```", "```\n     metav1.TypeMeta   `json:\",inline\"`\n```", "```\n     metav1.ObjectMeta `json:\"metadata,omitempty\"`\n```", "```\n     Spec PrometheusSpec `json:\"spec\"`\n```", "```\n     Status *PrometheusStatus `json:\"status,omitempty\"`\n```", "```\n}\n```", "```\ntype PrometheusSpec struct {\n```", "```\n     CommonPrometheusFields `json:\",inline\"`\n```", "```\n     Retention string `json:\"retention,omitempty\"`\n```", "```\n     DisableCompaction bool \n```", "```\n     WALCompression *bool \n```", "```\n     Rules Rules \n```", "```\n     PrometheusRulesExcludedFromEnforce []PrometheusRuleExcludeConfig \n```", "```\n     Query *QuerySpec \n```", "```\n     RuleSelector *metav1.LabelSelector \n```", "```\n     RuleNamespaceSelector *metav1.LabelSelector \n```", "```\n     Alerting *AlertingSpec \n```", "```\n     RemoteRead []RemoteReadSpec \n```", "```\n     AdditionalAlertRelabelConfigs *v1.SecretKeySelector \n```", "```\n     AdditionalAlertManagerConfigs *v1.SecretKeySelector \n```", "```\n     Thanos *ThanosSpec \n```", "```\n     QueryLogFile string \n```", "```\n     AllowOverlappingBlocks bool \n```", "```\n}\n```", "```\napiVersion: monitoring.coreos.com/v1\n```", "```\nkind: Prometheus\n```", "```\nmetadata:\n```", "```\n  name: sample\n```", "```\nspec:\n```", "```\n  replicas: 2\n```", "```\napiVersion: monitoring.coreos.com/v1\n```", "```\nkind: ServiceMonitor\n```", "```\nmetadata:\n```", "```\n  name: web-service-monitor\n```", "```\n  labels:\n```", "```\n    app: web\n```", "```\nspec:\n```", "```\n  selector:\n```", "```\n    matchLabels:\n```", "```\n      serviceLabel: webapp\n```", "```\n  endpoints:\n```", "```\n  - port: http\n```", "```\napiVersion: monitoring.coreos.com/v1\n```", "```\nkind: Prometheus\n```", "```\nmetadata:\n```", "```\n  name: prometheus\n```", "```\nspec:\n```", "```\n  serviceAccountName: prometheus\n```", "```\n  serviceMonitorSelector:\n```", "```\n    matchLabels:\n```", "```\n      app: web\n```", "```\nglobal:\n```", "```\n  evaluation_interval: 30s\n```", "```\n  scrape_interval: 30s\n```", "```\n  external_labels:\n```", "```\n    prometheus: default/prometheus\n```", "```\n    prometheus_replica: $(POD_NAME)\n```", "```\nscrape_configs:\n```", "```\n- job_name: serviceMonitor/default/web-service-monitor/0\n```", "```\n  honor_labels: false\n```", "```\n  kubernetes_sd_configs:\n```", "```\n  - role: endpoints\n```", "```\n    namespaces:\n```", "```\n      names:\n```", "```\n      - default\n```", "```\n  relabel_configs:\n```", "```\n  - source_labels:\n```", "```\n    - job\n```", "```\n    target_label: __tmp_prometheus_job_name\n```", "```\n  - action: keep\n```", "```\n    source_labels:\n```", "```\n    - __meta_kubernetes_service_label_serviceLabel\n```", "```\n    - __meta_kubernetes_service_labelpresent_serviceLabel\n```", "```\n    regex: (webapp);true\n```", "```\n  - action: keep\n```", "```\n    source_labels:\n```", "```\n    - __meta_kubernetes_endpoint_port_name\n```", "```\n    regex: http\n```", "```\n  - source_labels:\n```", "```\n    - __meta_kubernetes_endpoint_address_target_kind\n```", "```\n    - __meta_kubernetes_endpoint_address_target_name\n```", "```\n    separator: ;\n```", "```\n    regex: Node;(.*)\n```", "```\n    replacement: ${1}\n```", "```\n    target_label: node\n```", "```\n  - source_labels:\n```", "```\n    - __meta_kubernetes_endpoint_address_target_kind\n```", "```\n    - __meta_kubernetes_endpoint_address_target_name\n```", "```\n    separator: ;\n```", "```\n    regex: Pod;(.*)\n```", "```\n    replacement: ${1}\n```", "```\n    target_label: pod\n```", "```\n  - source_labels:\n```", "```\n    - __meta_kubernetes_namespace\n```", "```\n    target_label: namespace\n```", "```\n  - source_labels:\n```", "```\n    - __meta_kubernetes_service_name\n```", "```\n    target_label: service\n```", "```\n  - source_labels:\n```", "```\n    - __meta_kubernetes_pod_name\n```", "```\n    target_label: pod\n```", "```\n  - source_labels:\n```", "```\n    - __meta_kubernetes_pod_container_name\n```", "```\n    target_label: container\n```", "```\n  - source_labels:\n```", "```\n    - __meta_kubernetes_service_name\n```", "```\n    target_label: job\n```", "```\n    replacement: ${1}\n```", "```\n  - target_label: endpoint\n```", "```\n    replacement: http\n```", "```\n  - source_labels:\n```", "```\n    - __address__\n```", "```\n    target_label: __tmp_hash\n```", "```\n    modulus: 1\n```", "```\n    action: hashmod\n```", "```\n  - source_labels:\n```", "```\n    - __tmp_hash\n```", "```\n    regex: $(SHARD)\n```", "```\n    action: keep\n```", "```\n  metric_relabel_configs: []\n```", "```\nfunc (c *Operator) sync(ctx context.Context, key string) error {\n```", "```\n     pobj, err := c.promInfs.Get(key)\n```", "```\n     if apierrors.IsNotFound(err) {\n```", "```\n          c.metrics.ForgetObject(key)\n```", "```\n          return nil\n```", "```\n     }\n```", "```\n     if err != nil {\n```", "```\n          return err\n```", "```\n     }\n```", "```\n     p := pobj.(*monitoringv1.Prometheus)\n```", "```\n     p = p.DeepCopy()\n```", "```\n     if err := c.createOrUpdateConfigurationSecret(…); err != nil {\n```", "```\n          return errors.Wrap(err, \"creating config failed\")\n```", "```\n     }\n```", "```\nssetClient := c.kclient.AppsV1().StatefulSets(p.Namespace)\n```", "```\n…\n```", "```\nobj, err := c.ssetInfs.Get(…)\n```", "```\n  exists := !apierrors.IsNotFound(err)\n```", "```\n  if err != nil && !apierrors.IsNotFound(err) {\n```", "```\n    return errors.Wrap(err, \"retrieving statefulset failed\")\n```", "```\n  }\n```", "```\n…\n```", "```\nsset, err := makeStatefulSet(ssetName)\n```", "```\n  if err != nil {\n```", "```\n    return errors.Wrap(err, \"making statefulset failed\")\n```", "```\n  }\n```", "```\n…\n```", "```\nif !exists {\n```", "```\n    level.Debug(logger).Log(\"msg\", \"no current statefulset found\")\n```", "```\n    level.Debug(logger).Log(\"msg\", \"creating statefulset\")\n```", "```\n    if _, err := ssetClient.Create(ctx, sset, metav1.CreateOptions{}); err != nil {\n```", "```\n      return errors.Wrap(err, \"creating statefulset failed\")\n```", "```\n    }\n```", "```\n    return nil\n```", "```\n}\n```", "```\n…\n```", "```\nlevel.Debug(logger).Log(\"msg\", \"updating current statefulset\")\n```", "```\nerr = k8sutil.UpdateStatefulSet(ctx, ssetClient, sset)\n```", "```\ntype PrometheusStatus struct {\n```", "```\n  Paused bool `json:\"paused\"`\n```", "```\n  Replicas int32 `json:\"replicas\"`\n```", "```\n  UpdatedReplicas int32 `json:\"updatedReplicas\"`\n```", "```\n  AvailableReplicas int32 `json:\"availableReplicas\"`\n```", "```\n  UnavailableReplicas int32 `json:\"unavailableReplicas\"`\n```", "```\n}\n```", "```\napiVersion: operators.coreos.com/v1alpha1\n```", "```\nkind: ClusterServiceVersion\n```", "```\nmetadata:\n```", "```\n  annotations:\n```", "```\n    capabilities: Deep Insights\n```", "```\n    categories: Monitoring\n```", "```\n    certified: \"false\"\n```", "```\n    containerImage: quay.io/prometheus -operator/prometheus -operator:v0.47.0\n```", "```\n    createdAt: \"2021-04-15T23:43:00Z\"\n```", "```\n    description: Manage the full lifecycle of configuring and managing Prometheus and Alertmanager servers.\n```", "```\n    Repository: https://github.com/prometheus -operator/prometheus -operator\n```", "```\n    support: Red Hat, Inc.\n```", "```\n  name: prometheusoperator.0.47.0\n```", "```\n  namespace: placeholder\n```", "```\nspec:\n```", "```\n  customresourcedefinitions:\n```", "```\n    owned:\n```", "```\n    - description: A running Prometheus instance\n```", "```\n      displayName: Prometheus\n```", "```\n      kind: Prometheus\n```", "```\n      name: prometheuses.monitoring.coreos.com\n```", "```\n      resources:\n```", "```\n      - kind: StatefulSet\n```", "```\n        version: v1beta2\n```", "```\n      - kind: Pod\n```", "```\n        version: v1\n```", "```\n      - kind: ConfigMap\n```", "```\n        version: v1\n```", "```\n      - kind: Service\n```", "```\n        version: v1\n```", "```\n      specDescriptors:\n```", "```\n      - description: Desired number of Pods for the cluster\n```", "```\n        displayName: Size\n```", "```\n        path: replicas\n```", "```\n        x-descriptors:\n```", "```\n        - urn:alm:descriptor:com.tectonic.ui:podCount\n```", "```\n  install:\n```", "```\n    spec:\n```", "```\n      deployments:\n```", "```\n      - name: prometheus -operator\n```", "```\n        spec:\n```", "```\n          replicas: 1\n```", "```\n          selector:\n```", "```\n            matchLabels:\n```", "```\n                k8s-app: prometheus -operator\n```", "```\n          template:\n```", "```\n            metadata:\n```", "```\n              labels:\n```", "```\n                k8s-app: prometheus -operator\n```", "```\n            spec:\n```", "```\n              containers:\n```", "```\n              - args:\n```", "```\n                - --prometheus-instance-namespaces=$(NAMESPACES)\n```", "```\n                - --prometheus-config-reloader=quay.io/prometheus -operator/prometheus -config-reloader:v0.47.0\n```", "```\n     permissions:\n```", "```\n      - rules:\n```", "```\n        - apiGroups:\n```", "```\n          - monitoring.coreos.com\n```", "```\n          resources:\n```", "```\n          - alertmanagers\n```", "```\n          - alertmanagers/finalizers\n```", "```\n          - alertmanagerconfigs\n```", "```\n          - prometheuses\n```", "```\n          - prometheuses/finalizers\n```", "```\n          - thanosrulers\n```", "```\n          - thanosrulers/finalizers\n```", "```\n          - servicemonitors\n```", "```\n          - podmonitors\n```", "```\n          - probes\n```", "```\n          - prometheusrules\n```", "```\n          verbs:\n```", "```\n          - '*'\n```", "```\n          serviceAccountName: prometheus -operator\n```"]
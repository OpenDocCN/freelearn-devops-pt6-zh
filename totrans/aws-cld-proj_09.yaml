- en: <st c="0">9</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2">Exploring Future Work</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="23">Congratulations!</st> <st c="41">You have built seven unique applications
    using multiple AWS services.</st> <st c="111">But learning is a journey that</st>
    <st c="142">never ends.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="153">In this theory-based chapter, you are going to learn even more about
    AWS services.</st> <st c="237">Architecture is about trade-offs; knowing what
    you can use and when will be advantageous in the future.</st> <st c="341">To illustrate
    this, we will revisit architectures from the previous chapters and</st> <st c="422">redesign
    them.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="436">Price is a consideration you saw highlighted in the requirements
    gathering and service selection sections throughout the book.</st> <st c="564">In
    this chapter, you will learn how to use AWS Pricing Calculator to estimate costs
    before building out</st> <st c="668">your architectures.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="687">Lastly, you are going to explore multiple different resources AWS
    has to offer to help you architect and build</st> <st c="799">better applications.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="819">Technical requirements</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="842">This is a theory-based chapter, and because of that, there are no
    technical requirements.</st> <st c="933">If you decide to redesign any of the
    previous chapters’ architectures, based on the learnings of this chapter, you
    will need your own</st> <st c="1067">AWS account.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1079">AWS services overview</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="1101">AWS currently offers</st> <st c="1123">over 200 services, across
    various categories, including compute, storage, databases, networking, analytics,
    machine learning, the</st> **<st c="1253">Internet of Things</st>** <st c="1272">(</st>**<st
    c="1273">IoT</st>**<st c="1276">), mobile, developer</st> <st c="1297">tools,
    management tools, security, and enterprise applications.</st> <st c="1362">The
    exact number of AWS services will change as new services are introduced.</st>
    <st c="1439">Over the previous eight chapters, you have learned about some of
    these services and built several applications</st> <st c="1550">using them.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1561">The beauty of solutions architecture is that there is no single
    answer or architecture.</st> <st c="1650">It is all about trade-offs.</st> <st
    c="1678">The applications you learned how to build in previous chapters can be
    built using different approaches and services.</st> <st c="1795">In this section,
    we will study alternative architectures for past chapters’ applications using
    AWS services that you haven’t</st> <st c="1920">seen yet.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1929">Containers</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="1940">Containers</st> <st c="1952">are</st> <st c="1955">lightweight,
    virtualized computing environments that allow you to package and run applications
    along with their dependencies in an isolated and portable way.</st> <st c="2114">Containers
    are designed to be lightweight and efficient, as they share the host operating
    system kernel, unlike traditional</st> **<st c="2238">virtual machines</st>**
    <st c="2254">(</st>**<st c="2256">VMs</st>**<st c="2259">), which</st> <st c="2269">require
    a separate guest operating system for each instance.</st> <st c="2330">Containers
    are a computing option, just</st> <st c="2370">like VMs.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2379">Important note</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2394">You already used containers in</st> [*<st c="2426">Chapter 6</st>*](B22051_06.xhtml#_idTextAnchor151)<st
    c="2435">; CodePipeline uses a container to run the instructions in</st> <st c="2495">each
    stage.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2506">Because containers are lightweight, the best practice is to isolate
    different functions in different containers, as shown in</st> *<st c="2632">Figure
    9</st>**<st c="2640">.1</st>*<st c="2642">, where a single VM became four containers.</st>
    <st c="2686">A single service can be split across more than one container.</st>
    <st c="2748">Notice how</st> **<st c="2759">Likes Service</st>** <st c="2772">is
    in two containers, while in the</st> **<st c="2808">Virtual Machine</st>** <st
    c="2823">environment, there is just a single one.</st> <st c="2865">Containers
    give you</st> <st c="2885">more flexibility.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.1 – VM versus container decomposition](img/B22051_09_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="3061">Figure 9.1 – VM versus container decomposition</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3107">As applications built with containers become more complex, it requires
    coordination across multiple containers and hosts; orchestration becomes crucial
    for efficient management and scaling.</st> <st c="3298">Container orchestration
    platforms provide a centralized control plane and APIs to simplify the deployment,
    scaling, and management of</st> <st c="3432">containerized applications.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3459">In AWS, the most common container orchestration platforms are</st>
    <st c="3522">the following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="3536">Amazon Elastic Container Service (ECS)</st>**<st c="3575">:
    A fully managed container orchestration</st> <st c="3617">service</st> <st c="3625">that
    helps you deploy, manage, and scale containerized applications across a cluster
    of EC2 instances or Fargate instances.</st> <st c="3750">It supports Docker containers
    and allows you to run and manage containers</st> <st c="3824">at scale.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="3833">Amazon Elastic Kubernetes Service (EKS)</st>**<st c="3873">:
    A managed Kubernetes service that</st> <st c="3909">simplifies the deployment,
    management, and scaling of containerized applications using Kubernetes on AWS.</st>
    <st c="4016">Kubernetes is an open source container orchestration platform that
    automates the deployment, scaling, and management of</st> <st c="4136">containerized
    applications.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="4163">You can replace</st> <st c="4179">any past chapters’ computing
    options with containers.</st> <st c="4234">The serverless architecture introduced
    in</st> [*<st c="4276">Chapter 4</st>*](B22051_04.xhtml#_idTextAnchor089) <st
    c="4285">using containers orchestrated by ECS in an EC2 environment would look
    as in</st> *<st c="4362">Figure 9</st>**<st c="4370">.2</st>*<st c="4372">. You
    replace the lambda functions such as</st> `<st c="4415">put_like</st>` <st c="4423">or</st>
    `<st c="4427">get_recipes</st>` <st c="4438">for containers that host the same
    functionality.</st> <st c="4488">Your API gateway using a private integration
    connects to an</st> <st c="4547">internal</st> **<st c="4557">Application Load
    Balancer (ALB)</st>** <st c="4588">that exposes ECS tasks.</st> <st c="4613">You
    need a private integration because the load balancer and the ECS containers live
    in a VPC, while the API gateway does not.</st> <st c="4740">You can read more
    about private integrations in the AWS</st> <st c="4796">documentation:</st> [<st
    c="4811">https://docs.aws.amazon.com/apigateway/latest/developerguide/getting-started-with-private-integration.html</st>](https://docs.aws.amazon.com/apigateway/latest/developerguide/getting-started-with-private-integration.html)<st
    c="4917">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.2 – Chapter 4''s architecture re-designed using containers](img/B22051_09_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="5144">Figure 9.2 – Chapter 4's architecture re-designed using containers</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5210">As you can</st> <st c="5222">tell by</st> *<st c="5230">Figure
    9</st>**<st c="5238">.2</st>*<st c="5240">, containers can still run in VMs, in
    this case, EC2\.</st> <st c="5294">You</st> <st c="5297">can also run containers
    in a serverless manner using Fargate.</st> <st c="5360">Fargate is a serverless
    compute engine for containers that allows you to run containers without having
    to manage the underlying EC2 instances.</st> <st c="5503">It works seamlessly
    with both ECS and EKS, eliminating</st> <st c="5557">the need to provision and</st>
    <st c="5584">manage servers</st> <st c="5599">or clusters.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5611">Other API types</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="5627">In this book, you</st> <st c="5645">only built REST APIs.</st>
    <st c="5668">However, there are other types of APIs that are not RESTful.</st>
    <st c="5729">A very popular example</st> <st c="5752">is GraphQL.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5763">GraphQL is a query language and server-side runtime for APIs, originally
    developed by Facebook in 2012\.</st> <st c="5868">It provides an efficient, powerful,
    and flexible approach to building and consuming APIs and has become increasingly
    popular for use with cloud applications.</st> <st c="6026">The reason it has become
    so popular is that it solves the problems of overfetching, retrieving more data
    than needed, and underfetching, requiring multiple requests to fetch related data,
    which are common problems in traditional</st> <st c="6255">REST APIs.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6265">There are some important characteristics to have</st> <st c="6315">in
    mind:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6323">Instead of having multiple endpoints for different resources, GraphQL
    typically exposes a single endpoint for querying data.</st> <st c="6449">This
    simplifies the API surface and makes it easier to evolve the API</st> <st c="6519">over
    time.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="6529">It uses a strongly typed query language that allows clients to
    request exactly the data they need from the server.</st> <st c="6645">This contrasts
    with traditional REST APIs where the server often returns more data than the</st>
    <st c="6737">client needs.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="6750">With GraphQL, the client has more control over the data it receives,
    allowing for better performance and flexibility.</st> <st c="6869">It has a</st>
    <st c="6878">client-driven architecture.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="6905">GraphQL APIs are built around a schema that defines the types,
    queries, mutations, and relationships between different data entities.</st> <st
    c="7040">This schema acts as a contract between the client and server, ensuring
    data consistency and enabling</st> <st c="7141">powerful tooling.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="7158">In AWS, AppSync is a managed service that makes it easy to build
    scalable GraphQL APIs.</st> <st c="7247">AppSync simplifies the process of building
    GraphQL APIs by handling the underlying infrastructure, scaling, and security
    aspects, allowing developers to focus on building their application logic; this
    is the same as what an API gateway does for</st> <st c="7492">REST APIs.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[*<st c="7502">Chapter 5</st>*](B22051_05.xhtml#_idTextAnchor123)*<st c="7512">''s</st>*
    <st c="7515">architecture re-designed using AWS AppSync is similar, as shown in</st>
    *<st c="7583">Figure 9</st>**<st c="7591">.3</st>*<st c="7593">. You replace the
    API gateway with AppSync and use</st> <st c="7644">Lambda resolvers.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.3 – Chapter 5’s architecture re-designed using AWS AppSync](img/B22051_09_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="7772">Figure 9.3 – Chapter 5’s architecture re-designed using AWS AppSync</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7839">The way your clients interact with this application is different.</st>
    <st c="7906">You can still use curl or Postman but you need</st> <st c="7952">to
    send the query in the payload.</st> <st c="7987">This is well documented in the
    AWS</st> <st c="8022">documentation:</st> [<st c="8037">https://docs.aws.amazon.com/appsync/latest/devguide/retrieve-data-with-graphql-query.html</st>](https://docs.aws.amazon.com/appsync/latest/devguide/retrieve-data-with-graphql-query.html)<st
    c="8126">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8127">Generative AI</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '<st c="8141">You have seen</st> <st c="8155">different AI-powered applications
    throughout this</st> <st c="8206">book: image analysis in</st> [*<st c="8230">Chapter
    5</st>*](B22051_05.xhtml#_idTextAnchor123)<st c="8239">, content translation in</st>
    [*<st c="8264">Chapter 6</st>*](B22051_06.xhtml#_idTextAnchor151)<st c="8273">,
    and Q&A in</st> [*<st c="8286">Chapter 7</st>*](B22051_07.xhtml#_idTextAnchor203)<st
    c="8295">. But there is another type of AI that is taking the world by storm:</st>
    <st c="8364">generative AI.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8378">Generative AI refers to a class of AI models and techniques capable
    of generating new data, such as text, images, audio, or other multimedia, based
    on the training data they have been exposed to.</st> <st c="8575">Unlike traditional
    AI models that primarily focus on analyzing or classifying existing data, generative
    AI models learn the underlying patterns and characteristics of the training data
    and use this knowledge to create new,</st> <st c="8798">original content.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="8815">Foundation models</st>** <st c="8833">(</st>**<st c="8835">FMs</st>**<st
    c="8838">) are a</st> <st c="8847">powerful type of generative AI model that can
    be used for a wide range of tasks.</st> <st c="8928">Different companies have
    built their own models, such as OpenAI GPT, Anthropic Claude, and</st> <st c="9019">Meta
    Llama.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9030">You do not need to know how to build these models from scratch,
    but you should know how to get the most out</st> <st c="9139">of them.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9147">In AWS, you can make use of FMs in a serverless manner using Amazon
    Bedrock.</st> <st c="9225">Amazon Bedrock is a fully managed service that offers
    a choice of high-performing FMs from leading AI companies such as AI21 Labs, Anthropic,
    Cohere, Meta, Mistral AI, Stability AI, and Amazon via a single API, along with
    a broad set of capabilities you need to build generative</st> <st c="9504">AI
    applications.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9520">All you must do is invoke a single API, as you would with any other
    type of AWS service.</st> [*<st c="9610">Chapter 5</st>*](B22051_05.xhtml#_idTextAnchor123)<st
    c="9619">’s architecture</st> <st c="9635">could be altered to use Bedrock with
    Claude 3</st> <st c="9682">Sonnet, instead of Rekognition, as shown in</st> *<st
    c="9726">Figure 9</st>**<st c="9734">.4</st>*<st c="9736">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.4 – Chapter 5’s architecture re-designed using Amazon Bedrock](img/B22051_09_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="9856">Figure 9.4 –</st> [<st c="9869">Chapter 5</st>](B22051_05.xhtml#_idTextAnchor123)<st
    c="9878">’s architecture re-designed using Amazon Bedrock</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9927">With this approach, you send the image and ask the model your question
    in natural language.</st> <st c="10020">For example, you might ask, "Is this person
    smiling?"</st> <st c="10074">or "Does this photo look professional?".</st> <st
    c="10115">You send that information along with the image and prompt the model
    to evaluate.</st> <st c="10196">The following is an example interaction between
    the author of this book and Claude 3 Sonnet.</st> <st c="10289">The first line,
    prefixed with</st> `<st c="10319">[author]</st>`<st c="10327">, shows the prompt,
    which consists of a question with an attached image.</st> <st c="10400">In this
    case, the image used is the same one referenced in</st> [<st c="10459">Chapter
    5</st>](B22051_05.xhtml#_idTextAnchor123)<st c="10468">'s</st> <st c="10472">code:</st>
    `<st c="10478">goodphoto.jpeg</st>`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: <st c="11253">Generative AI is being increasingly adopted for multiple use cases,
    such as Q&A chatbots, summarizing</st> <st c="11355">text, and generating marketing</st>
    <st c="11387">content.</st> <st c="11396">Keep it in mind when building your</st>
    <st c="11431">next application.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11448">Other communication patterns</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="11477">The most prevalent</st> <st c="11496">communication pattern is
    synchronous request/response.</st> <st c="11552">For example, when you visit a
    web page (request), your browser fetches and renders the result (response).</st>
    <st c="11658">This process occurs synchronously, meaning you wait for the response
    after making the request.</st> <st c="11753">But in modern distributed architectures,
    you will sometimes encounter the need for different communication patterns, for
    example, in long processing tasks, where blocking the client while waiting for
    a response interferes with the customer experience, or when you need to deliver
    the exact same content to many</st> <st c="12064">different receivers.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12084">Some popular patterns are asynchronous processing, fan-out and
    broadcasting, and event-driven.</st> <st c="12180">Let’s start by looking at</st>
    <st c="12206">asynchronous processing.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12230">Asynchronous processing</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '<st c="12254">Imagine you need to</st> <st c="12275">build an</st> <st c="12283">application,
    like the one in</st> [*<st c="12313">Chapter 5</st>*](B22051_05.xhtml#_idTextAnchor123)<st
    c="12322">, that receives a photo and processes.</st> <st c="12361">However, the
    processing is not as lightweight as it was in</st> [*<st c="12420">Chapter 5</st>*](B22051_05.xhtml#_idTextAnchor123)<st
    c="12429">. Instead.</st> <st c="12440">It takes four hours to complete and is
    done by EC2 machines.</st> <st c="12501">Many things can happen in four hours:
    processing can fail, the client can timeout, and so on.</st> <st c="12595">In
    this case, a decoupled architecture adds</st> <st c="12639">multiple advantages:</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12659">Clients can send requests without waiting for subscribers to</st>
    <st c="12721">process them.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="12734">Subscribers can consume messages at their</st> <st c="12777">own
    pace.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="12786">In the case of a failure on the subscriber side, another subscriber
    can work on the same request.</st> <st c="12885">It will not simply</st> <st c="12904">be
    lost.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="12912">One way to accomplish asynchronous processing is using queues.</st>
    <st c="12976">AWS has Amazon</st> **<st c="12991">Simple Queue Service</st>**
    <st c="13011">(</st>**<st c="13013">SQS</st>**<st c="13016">), a</st> <st c="13021">fully
    managed distributed message</st> <st c="13056">queuing service.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="13072">The architecture from</st> [*<st c="13095">Chapter 5</st>*](B22051_05.xhtml#_idTextAnchor123)
    <st c="13104">can be updated to support asynchronous processing, as shown in</st>
    *<st c="13168">Figure 9</st>**<st c="13176">.5</st>*<st c="13178">. Messages are
    stored in SQS and the EC2 fleet is subscribed to SQS for message processing.</st>
    <st c="13270">Each message is only</st> <st c="13291">processed once.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.5 – Chapter 5’s architecture re-designed using asynchronous processing
    with SQS and EC2](img/B22051_09_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="13435">Figure 9.5 – Chapter 5’s architecture re-designed using asynchronous
    processing with SQS and EC2</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="13531">Note that</st> <st c="13542">this</st> <st c="13547">architecture
    does not consider how the client would receive a notification of the</st> <st
    c="13629">task’s completion.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="13647">Fan-out and broadcasting</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '<st c="13672">Fan-out is used when you need to deliver a single message to
    multiple endpoints of your choice.</st> <st c="13769">Broadcasting applies the
    same concept but sends the message to all endpoints rather than just the selected
    ones.</st> <st c="13882">Imagine you have a phonebook: fan-out is like messaging
    every single person individually, while broadcasting is like creating a group
    chat and sending the message to everyone in the group.</st> <st c="14071">This
    approach is common in notification systems, data replication or synchronization
    tasks, and</st> <st c="14167">event-driven architectures.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14194">In AWS, there is Amazon</st> **<st c="14219">Simple Notification
    Service</st>** <st c="14246">(</st>**<st c="14248">SNS</st>**<st c="14251">).</st>
    <st c="14255">It is a fully managed pub/sub messaging</st> <st c="14294">service.</st>
    <st c="14304">Unlike SQS, it allows for a single message to be delivered to multiple
    consumers.</st> <st c="14386">It functions on a push-based mechanism, instead
    of pull-based</st> <st c="14448">like SQS.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14457">Considering the previous asynchronous processing scenario, this
    time you needed to process the same submitted image twice, and you have two different
    computing clusters for this.</st> <st c="14637">With SQS, messages are only processed
    once.</st> *<st c="14681">Figure 9</st>**<st c="14689">.6</st>* <st c="14691">shows
    how to accomplish this using SNS and SQS in a fan-out configuration.</st> <st
    c="14767">When SNS is triggered, it replicates the received message and delivers
    it to both SQS queues.</st> <st c="14861">Each of the two compute clusters then
    polls its respective SQS queue and processes</st> <st c="14944">the message.</st>
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 9.6 – \uFEFFArchitecture using the fan-out pattern to distribute the\
    \ same message to two different compute clusters](img/B22051_09_6.jpg)"
  prefs: []
  type: TYPE_IMG
- en: <st c="15126">Figure 9.6 – Architecture using the fan-out pattern to distribute
    the same message to two different compute clusters</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15242">Lastly, let us</st> <st c="15257">look at the</st> <st c="15270">event-driven
    pattern.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15291">Event-driven</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="15304">Event-driven</st> <st c="15317">refers to a programming</st> <st
    c="15341">paradigm or architectural pattern where the flow of a program is determined
    by events.</st> <st c="15429">In an event-driven system, the program’s execution
    path is triggered by the occurrence of specific events, rather than following
    a predefined sequential flow of instructions.</st> <st c="15604">Events can be
    generated by various sources, such as user interactions (e.g., clicks or key presses),
    system notifications (e.g., file changes or network events), hardware interruptions
    (e.g., timer or sensor data), or messages from other components</st> <st c="15853">or
    systems.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15864">All services in AWS generate events.</st> <st c="15902">You can
    take actions based on them using AWS EventBridge (formerly known as Amazon CloudWatch
    Events).</st> <st c="16005">It is a serverless event</st> <st c="16030">bus service.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="16042">A common example of the use of event-driven architecture is as
    follows: a client uploads a file to your S3 bucket, which emits an event.</st>
    <st c="16180">Based on this event, you trigger a processing pipeline for the</st>
    <st c="16243">uploaded file.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16257">All these topics are vast but well documented.</st> <st c="16305">Familiarize
    yourself with them.</st> <st c="16337">If you would like to learn more about it,
    we recommend the AWS whitepaper</st> *<st c="16411">Implementing Microservices
    on</st>* *<st c="16441">AWS</st>*<st c="16444">:</st> [<st c="16447">https://docs.aws.amazon.com/whitepapers/latest/microservices-on-aws/communication-mechanisms.html</st>](https://docs.aws.amazon.com/whitepapers/latest/microservices-on-aws/communication-mechanisms.html)<st
    c="16544">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16545">AWS Pricing Calculator</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="16568">Before building</st> <st c="16585">your architecture, it is important
    to know whether it fits your cost requirements.</st> <st c="16668">It is also
    important to compare different</st> <st c="16710">service options.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16726">There are many ways to accomplish this, for example, using the
    AWS services’ pricing pages.</st> <st c="16819">However, AWS Pricing Calculator
    is the recommended manner.</st> <st c="16878">It allows you to create an estimate
    for the cost of your use on AWS by adding each service individually to</st> <st
    c="16985">a calculator.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16998">Navigate to</st> [<st c="17011">https://calculator.aws/</st>](https://calculator.aws/)
    <st c="17034">and create an estimate.</st> <st c="17059">Add each service individually
    and configure it.</st> <st c="17107">The configuration parameters differ per service.</st>
    <st c="17156">The result will be an estimate of both monthly and</st> <st c="17207">yearly
    costs.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17220">Pricing the solution from Chapter 2</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '<st c="17256">Revisit</st> [*<st c="17265">Chapter 2</st>*](B22051_02.xhtml#_idTextAnchor032)
    <st c="17274">and recall the architecture depicted in</st> *<st c="17315">Figure
    2</st>**<st c="17323">.1</st>*<st c="17325">. It used two services: CloudFront
    and S3\.</st> <st c="17368">CloudWatch basic monitoring metrics are free.</st>
    <st c="17414">Recreate this architecture in AWS</st> <st c="17448">Pricing Calculator.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17467">Add S3 to your estimate.</st> <st c="17493">Specify the region
    you plan to use; pricing can differ per region.</st> <st c="17560">To estimate
    S3 costs, you will need to know how much storage in GB/month you will use, the
    amount and type of</st> <st c="17670">requests, and</st> **<st c="17684">data
    transfer out</st>** <st c="17701">(</st>**<st c="17703">DTO</st>**<st c="17706">)</st>
    <st c="17709">in GB/month.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17721">To store the three website files from</st> [<st c="17760">Chapter
    2</st>](B22051_02.xhtml#_idTextAnchor032) <st c="17769">–</st> `<st c="17772">index.html</st>`<st
    c="17782">,</st> `<st c="17784">index.css</st>`<st c="17793">, and</st> `<st c="17799">avatar.png</st>`<st
    c="17809">, you need 100 KB.</st> <st c="17828">100 KB is 0.0001 GB.</st> <st
    c="17849">If you have altered the files, check the size of</st> <st c="17898">your
    files.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17909">CloudFront will mostly</st> <st c="17933">make GET requests to
    your S3\.</st> <st c="17963">Since</st> [*<st c="17969">Chapter 2</st>*](B22051_02.xhtml#_idTextAnchor032)<st
    c="17978">'s project is a website for displaying your CV, you do not expect more
    than 500 monthly views.</st> <st c="18074">Thus, you anticipate 500 GET requests</st>
    <st c="18112">to S3.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="18118">Regarding DTO, select CloudFront as the destination.</st> <st
    c="18172">This makes</st> <st c="18183">DTO free.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="18192">Next, add the second service, CloudFront.</st> <st c="18235">In
    the region where your users will access your site, enter your expected number
    of requests per month and the amount of DTO.</st> <st c="18361">For the number
    of requests, use the same logic as for S3 requests.</st> <st c="18428">Since this
    is a simple website to display your CV, you estimate 500 monthly requests.</st>
    <st c="18514">For the DTO, calculate 500 times the size of your files.</st> <st
    c="18571">With the website files totaling approximately 100 KB, this amounts to
    roughly</st> <st c="18649">0.05 GB.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="18657">Although both services have a free tier, it is not automatically
    accounted for by the calculator.</st> <st c="18756">For most AWS services, you
    need to determine what the free tier offers and subtract it from your values before
    entering them into the calculator.</st> <st c="18902">For example, the S3 free
    tier includes 20,000 GET requests.</st> <st c="18962">If you forecasted 40,000
    GET requests for your project, you should only enter 20,000 GET requests into</st>
    <st c="19065">the calculator.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19080">For</st> [*<st c="19085">Chapter 2</st>*](B22051_02.xhtml#_idTextAnchor032)<st
    c="19094">, the final calculator output is $0, regardless of whether you subtract
    the free tier, as shown in</st> *<st c="19193">Figure 9</st>**<st c="19201">.7</st>*<st
    c="19203">. This is because the project's scale is</st> <st c="19244">very low.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.7 – AWS Pricing Calculator for Chapter 2’s project](img/B22051_09_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="19779">Figure 9.7 – AWS Pricing Calculator for Chapter 2’s project</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19838">One of the non-functional requirements for this chapter was low-cost.</st>
    <st c="19909">You certainly accomplished that.</st> <st c="19942">Play with the
    calculator to understand how costs rise for a static website with thousands or
    millions</st> <st c="20044">of users.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20053">Pricing the solution from Chapter 6</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="20089">Revisit</st> [*<st c="20098">Chapter 6</st>*](B22051_06.xhtml#_idTextAnchor151)<st
    c="20107">. Use</st> <st c="20113">AWS Pricing Calculator to calculate the pricing
    for this solution.</st> <st c="20180">Start with the static website hosting part
    of the architecture, which includes the S3 buckets and the</st> <st c="20282">CloudFront
    distribution.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20306">Add S3\.</st> <st c="20315">The website files from</st> [*<st
    c="20338">Chapter 6</st>*](B22051_06.xhtml#_idTextAnchor151)<st c="20347">,</st>
    `<st c="20349">index.html</st>` <st c="20359">and</st> `<st c="20364">index.css</st>`<st
    c="20373">, are each less than 10 KB in size.</st> <st c="20409">Since these files
    are stored in two different S3 buckets, the total storage required is 20 KB, or
    0.00002 GB.</st> <st c="20519">This is an event website, and you expect around
    100,000 views per month.</st> <st c="20592">In terms of S3, this translates to</st>
    <st c="20627">100,000 requests.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20644">For CloudFront, it’s the same 100,000 requests and it totals 2
    GB DTO.</st> <st c="20716">However, CloudFront also uses Lambda@Edge.</st> <st
    c="20759">Add Lambda.</st> <st c="20771">This service allows to include or exclude
    the free tier.</st> <st c="20828">Add the same 100,000 requests using the minimum
    memory possible, 128 MB, and assume a 10 ms</st> <st c="20920">execution time.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20935">Now, you have completed the static website architecture.</st>
    <st c="20993">Your calculator should output roughly 0.40 USD a month.</st> <st
    c="21049">However, if you drill down to each service cost, you will find that
    most of the cost comes from CloudFront.</st> <st c="21157">The calculator does
    not include this service’s free tier, as it does with Lambda.</st> <st c="21239">The
    CloudFront free tier includes</st> <st c="21273">the following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21287">1 TB of DTO to the internet</st> <st c="21316">per month</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="21325">10,000,000 HTTP or HTTPS requests</st> <st c="21360">per month</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="21369">Therefore, this architecture at the scale of our solution is almost
    free.</st> <st c="21444">You will be charged less than 0.10 USD</st> <st c="21483">a
    month.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="21491">Start another calculator or add in the same calculator the CI/CD
    components from</st> [*<st c="21573">Chapter 6</st>*](B22051_06.xhtml#_idTextAnchor151)<st
    c="21582">: CodeBuild, CodePipeline, and</st> <st c="21614">Amazon Translate.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="21631">Add CodeCommit.</st> <st c="21648">It will ask for the number
    of active users.</st> <st c="21692">In your case, there is just one active</st>
    <st c="21731">user: you.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21741">Add CodeBuild.</st> <st c="21757">In</st> [*<st c="21760">Chapter
    6</st>*](B22051_06.xhtml#_idTextAnchor151)<st c="21769">, we described the use
    of 2 GB on-demand Lambdas for compute.</st> <st c="21831">Assume you make at least
    one change a week; that runs for</st> <st c="21889">10 seconds.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21900">Add CodePipeline.</st> <st c="21919">You have a single pipeline
    for</st> <st c="21950">this project.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21963">Lastly, add Amazon</st> <st c="21983">Translate.</st> <st c="21994">Select</st>
    `<st c="22045">index.html</st>` <st c="22055">has over 2,400 characters.</st>
    <st c="22083">If you translate it four times a month to a single language, that
    is almost 10,000 characters translated</st> <st c="22188">per month.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '*<st c="22198">Figure 9</st>**<st c="22207">.8</st>* <st c="22209">shows the
    calculator for the project.</st> <st c="22248">S3 and CloudFront costs will be
    waived by the services’ free tiers.</st> <st c="22316">Amazon Translate does not
    have a free tier for real-time document translation, and the AWS Lambda calculator
    already includes the free tier.</st> <st c="22457">The result is 0.22 USD per
    month, or 2.64 USD</st> <st c="22503">per year.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.8 – AWS Pricing Calculator for Chapter 6’s project](img/B22051_09_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="23267">Figure 9.8 – AWS Pricing Calculator for Chapter 6’s project</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="23326">Change these estimates to represent the project you built.</st>
    <st c="23386">For example, if you are translating your website to multiple languages,
    you will need to alter Amazon Translate’s costs.</st> <st c="23507">If</st> <st
    c="23509">you are making changes more often than once a week, you will need to
    alter the number of CodeBuild executions.</st> <st c="23621">If you are using
    any components not on AWS, for example, GitHub, as in</st> [*<st c="23692">Chapter
    6</st>*](B22051_06.xhtml#_idTextAnchor151)<st c="23701">, add those costs to the</st>
    <st c="23726">final calculator.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="23743">Important note</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="23758">You can export estimates in JSON, PDF, or CSV format.</st> <st
    c="23813">You can also share a link to your calculator.</st> <st c="23859">This
    is helpful for sharing your architecture with colleagues</st> <st c="23921">and
    customers.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="23935">When you are making pricing estimates, you will have to guess
    capacity and certain characteristics of the project, such as the expected number
    of requests.</st> <st c="24092">Most of the time, you do not need to estimate
    single- or double-digit units.</st> <st c="24169">Use round numbers for easier
    calculations; for example, instead of 87 KB, use 100 KB.</st> <st c="24255">Instead
    of 1 request per second, that is, 86,000 requests per day, use 100,000 requests
    per day.</st> <st c="24352">This is informally called back-of-the-envelope calculations,
    and it is widely applied when</st> <st c="24443">building architectures.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="24466">Practice makes</st> <st c="24482">perfect; practice by creating
    calculators for all the projects in</st> <st c="24548">this book.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="24558">AWS re:Post</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="24570">Wouldn’t it be great if</st> <st c="24595">you could ask other
    experts questions about errors when you have development or architecture doubts?</st>
    <st c="24696">You can.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="24704">AWS re:Post is a repository of official Knowledge Center articles,
    videos, and other resources created by AWS to help customers better understand
    and use AWS services.</st> <st c="24873">But re:Post also allows you to post your</st>
    <st c="24914">own questions.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="24928">Visit</st> [<st c="24935">https://repost.aws</st>](https://repost.aws)
    <st c="24953">and navigate to a topic of your choice.</st> <st c="24994">You will
    see hundreds of questions, many answered by AWS professionals or other users.</st>
    <st c="25081">This is a great resource for getting assistance, collaborating with
    others, and making your knowledge and work visible in the</st> <st c="25207">wider
    industry.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="25222">However, re:Post, as mentioned, is not just a technical forum.</st>
    <st c="25286">AWS re:Post includes the official AWS Knowledge Center,</st> [<st
    c="25342">https://repost.aws/knowledge-center</st>](https://repost.aws/knowledge-center)<st
    c="25377">, which is a repository covering the most frequent questions and requests
    that AWS receives from customers.</st> <st c="25485">In short, questions that
    are asked often are identified by AWS and become articles.</st> <st c="25569">Many,
    if not all, errors you will face while building your applications will have a
    prescriptive</st> <st c="25666">solution here.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="25680">Some useful examples are</st> <st c="25706">as follows:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '*<st c="25717">How do I create and activate a new AWS</st>* *<st c="25757">account?</st>*<st
    c="25765">:</st> [<st c="25768">https://repost.aws/knowledge-center/create-and-activate-aws-account</st>](https://repost.aws/knowledge-center/create-and-activate-aws-account)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="25835">How do I troubleshoot HTTP 403 errors from API</st>* *<st c="25883">Gateway?</st>*<st
    c="25891">:</st> [<st c="25894">https://repost.aws/knowledge-center/api-gateway-troubleshoot-403-forbidden</st>](https://repost.aws/knowledge-center/api-gateway-troubleshoot-403-forbidden)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="25968">How do I terminate active resources that I no longer need on
    my AWS</st>* *<st c="26037">account?</st>*<st c="26045">:</st> [<st c="26048">https://repost.aws/knowledge-center/terminate-resources-account-closure</st>](https://repost.aws/knowledge-center/terminate-resources-account-closure)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="26119">Lastly, people who don’t work for AWS can also share prescriptive
    guidance with others.</st> <st c="26208">They can do this through community articles,</st>
    [<st c="26253">https://repost.aws/articles</st>](https://repost.aws/articles)<st
    c="26280">. As an exercise, write an</st> <st c="26307">article about something
    you have learned while reading this book and share it as a community article</st>
    <st c="26408">on re:Post.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="26419">AWS documentation, Solutions Library and Prescriptive Guidance</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="26482">More important than knowing everything is knowing where to find
    information about something if you</st> <st c="26582">need it.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="26590">Throughout this book, you have already visited multiple pages
    of the AWS documentation, AWS Architecture Center, and others.</st> <st c="26716">It
    is important to know of the various options you have at your disposal.</st> <st
    c="26790">In this section, you will delve into three specific ones: AWS documentation,
    AWS Solutions Library, and AWS</st> <st c="26898">Prescriptive Guidance.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="26920">AWS documentation</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="26938">Every service</st> <st c="26953">on AWS has extensive official
    documentation.</st> <st c="26998">On top of that, there is unofficial documentation
    such as</st> [<st c="27056">medium.com</st>](http://medium.com)<st c="27066">,
    community articles, this very book,</st> <st c="27104">and others.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="27115">Throughout this book, you have visited several documentation pages.</st>
    <st c="27184">Nonetheless, it is worth highlighting a couple of</st> <st c="27234">documentation
    pages:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="27254">AWS</st> <st c="27259">FAQs:</st> [<st c="27265">https://aws.amazon.com/faqs/</st>](https://aws.amazon.com/faqs/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="27293">AWS technical</st> <st c="27308">documentation:</st> [<st c="27323">https://docs.aws.amazon.com/</st>](https://docs.aws.amazon.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="27351">AWS</st> <st c="27356">blog:</st> [<st c="27362">https://aws.amazon.com/blogs/</st>](https://aws.amazon.com/blogs/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="27391">What’s New with</st> <st c="27408">AWS?:</st> [<st c="27414">https://aws.amazon.com/new/</st>](https://aws.amazon.com/new/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="27441">AWS Skill</st> <st c="27452">Builder:</st> [<st c="27461">https://explore.skillbuilder.aws/learn</st>](https://explore.skillbuilder.aws/learn)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="27499">Familiarize yourself with these resources, so you know where to
    find them when you</st> <st c="27583">need them.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="27593">AWS Solutions Library</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="27615">The AWS Architecture</st> <st c="27636">Center was your initial
    search engine in every chapter after defining your project requirements.</st>
    <st c="27734">This is a one-stop destination that allows you to browse, search
    for, and even request reference architectures, architecture patterns, best practices,
    and prescriptive guidance all in</st> <st c="27918">one location.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="27931">But if you are searching for something pre-built, tested and vetted
    by others, and accompanied by an IaC template such as CloudFormation, AWS Solutions
    Library (</st>[<st c="28093">https://aws.amazon.com/solutions/</st>](https://aws.amazon.com/solutions/)<st
    c="28127">) is the place to go.</st> <st c="28150">The library also includes AWS</st>
    <st c="28180">Partner solutions.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="28198">Let’s add a new requirement to the project from</st> [*<st c="28247">Chapter
    6</st>*](B22051_06.xhtml#_idTextAnchor151)<st c="28256">. The company requires
    extensive load testing before deploying the event website to make sure it can
    handle</st> <st c="28364">heavy loads.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="28376">If you are not an expert in load testing, search for and navigate
    to</st> *<st c="28446">Distributed Load Testing on AWS</st>* <st c="28477">in
    Solutions</st> <st c="28491">Library:</st> [<st c="28500">https://aws.amazon.com/solutions/implementations/distributed-load-testing-on-aws/?did=sl_card&trk=sl_card</st>](https://aws.amazon.com/solutions/implementations/distributed-load-testing-on-aws/?did=sl_card&trk=sl_card)<st
    c="28605">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="28606">This is a typical Solutions Library documentation.</st> <st c="28658">Within
    it, you will find</st> <st c="28683">three components:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="28700">An</st> <st c="28704">architecture diagram</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="28724">An</st> <st c="28728">implementation guide</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="28748">A one-click</st> <st c="28761">deployment option</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="28778">This architecture diagram, as shown in</st> *<st c="28818">Figure
    9</st>**<st c="28826">.9</st>*<st c="28828">, depicts the flow in a</st> <st c="28852">step-by-step
    manner.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.9 – Distributed load testing architecture](img/B22051_09_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="29127">Figure 9.9 – Distributed load testing architecture</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="29177">The implementation guide,</st> [<st c="29204">https://docs.aws.amazon.com/solutions/latest/distributed-load-testing-on-aws/solution-overview.html</st>](https://docs.aws.amazon.com/solutions/latest/distributed-load-testing-on-aws/solution-overview.html)<st
    c="29303">, has in-depth documentation of how the solution works, including monitoring
    and troubleshooting information.</st> <st c="29413">Notice also how the implementation
    guide has a dedicated section for</st> <st c="29482">estimated costs.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="29498">Lastly, it includes</st> <st c="29519">a one-click deployment
    option,</st> **<st c="29550">Launch in the AWS Console</st>**<st c="29575">, which
    allows you to deploy it and immediately test your event website without having
    to architect another project</st> <st c="29691">from scratch.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="29704">AWS Prescriptive Guidance</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**<st c="29730">AWS Prescriptive Guidance</st>** <st c="29756">(</st>**<st
    c="29758">APG</st>**<st c="29761">) (</st>[<st c="29765">https://aws.amazon.com/prescriptive-guidance/</st>](https://aws.amazon.com/prescriptive-guidance/)<st
    c="29811">) can also be found on the AWS Architecture</st> <st c="29855">Center,
    but it is focused on time-tested strategies, guides, and patterns to help accelerate
    your cloud migration, modernization, and</st> <st c="29990">optimization projects.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="30012">Unlike Solutions Library, not all are practical, nor accompanied
    by architecture diagrams</st> <st c="30103">and code.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="30112">There are three types</st> <st c="30135">of resources:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="30148">Strategies</st>**<st c="30159">: Business</st> <st c="30171">perspectives,
    methodologies, and frameworks for cloud migration and modernization, for CxOs
    and</st> <st c="30267">senior managers.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="30283">Guides</st>**<st c="30290">: Guidance for planning and implementing
    strategies, with a focus on best practices and tools, for architects, managers,
    and</st> <st c="30416">technical leads.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="30432">Patterns</st>**<st c="30441">: Steps, architectures, tools,
    and code for implementing common migration, optimization, and</st> <st c="30534">modernization
    scenarios, for builders and other</st> <st c="30583">hands-on users.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="30598">When you are starting out, patterns are the most useful.</st>
    <st c="30656">They detail popular</st> <st c="30676">service configurations.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="30699">You have deployed several CloudFront distributions while building
    the projects in this book.</st> <st c="30793">Are they all as secure as they can
    be?</st> <st c="30832">Do you know how to verify this?</st> <st c="30864">You
    can easily automate these</st> <st c="30893">types of verifications with the APG
    pattern</st> *<st c="30938">Check an Amazon CloudFront distribution for access
    logging, HTTPS, and TLS version</st>*<st c="31020">:</st> [<st c="31023">https://docs.aws.amazon.com/prescriptive-guidance/latest/patterns/check-an-amazon-cloudfront-distribution-for-access-logging-https-and-tls-version.html?did=pg_card&trk=pg_card</st>](https://docs.aws.amazon.com/prescriptive-guidance/latest/patterns/check-an-amazon-cloudfront-distribution-for-access-logging-https-and-tls-version.html?did=pg_card&trk=pg_card)<st
    c="31198">. It uses Lambda to check new and modified CloudFront distributions
    for TLS 1.2, HTTPS, and</st> <st c="31290">logging configurations.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="31313">Summary</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="31321">In this chapter, you learned about other AWS services that you
    could have used to build the different sample projects throughout the book.</st>
    <st c="31461">This has shown how architecture is about trade-offs more than it
    is about building the</st> <st c="31548">perfect solution.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="31565">You also learned about AWS Pricing Calculator and how it can help
    you estimate costs before building your projects.</st> <st c="31682">You created
    pricing estimates for the projects from</st> *<st c="31734">Chapters 2</st>* <st
    c="31744">and</st> *<st c="31749">6</st>*<st c="31750">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="31751">Lastly, you explored many of AWS’ learning resources.</st> <st
    c="31806">Some of them may have been new to you, such as AWS re:Posts, while others
    are part of the now-familiar AWS Architecture Center, the one-stop shop for prescriptive
    guidance</st> <st c="31978">and resources.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="31992">There are too many AWS services, architectural patterns, and techniques
    to cover in a single book.</st> <st c="32092">But if you know the fundamentals,
    that should raise the level of everything</st> <st c="32168">you do.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="32175">Congratulations on finishing this extensive journey, packed with
    hands-on projects and cloud knowledge.</st> <st c="32280">Although this is the
    end of the book, it is just the beginning of your AWS</st> <st c="32355">cloud
    journey.</st>
  prefs: []
  type: TYPE_NORMAL

["```\n    $ aws ec2 run-instances --image-id ami-03fa8a7508f8f3ccc\n    --count 1 --instance-type t3.large --key-name <my-key> \\\n    --security-group-ids <worker-node-sg-id> \\\n    --subnet-id <subnet-id> --iam-instance-profile Name=<instance-profile-name> \\\n    --tag-specifications \\\n     'ResourceType=instance,Tags=[{Key=Name,Value=standalone-worker}]'\n    ```", "```\n    $ export AWS_DEFAULT_REGION=<myregion>\n    $ aws eks describe-cluster --name <clustername>\n    ```", "```\n    $ curl -o bootstrap.sh https://raw.githubusercontent.com/awslabs/amazon-eks-ami/master/files/bootstrap.sh\n    $ chmod +x bootstrap.sh\n    $ ./bootstrap.sh <clustername>\n    ```", "```\n     $ kubectl get cm aws-auth -n kube-system -o json\n    ```", "```\nmapRoles: |\n- groups:\n - system:bootstrappers\n - system:nodes\n rolearn: arn:aws:iam::<ACCOUNTID>:role/<instanceROLE>\n username: system:node:{{EC2PrivateDNSName}}\n```", "```\n$ kubectl get nodes --watch\n```", "```\n---\napiVersion: eksctl.io/v1alpha5\nkind: ClusterConfig\nmetadata:\n  name: myclusterName\n  region: eu-central-1\n  version: '1.21'\nvpc:\n  id: \"vpc-123454\"\n  subnets:\n     private:\n        private1:\n           id:  \"subnet-11222\"\n        private2:\n           id:  \"subnet-11333\"\n  securityGroup: \"sg-4444444\"\n```", "```\niam:\n  withOIDC: true\nnodeGroups:\n  - name: ng-bottlerocket\n    instanceType: m5.large\n    privateNetworking: true\n    desiredCapacity: 2\n    amiFamily: Bottlerocket\n    ami: auto-ssm\n    iam:\n       attachPolicyARNs:\n          - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy\n          - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly\n          - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore\n          - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy\n    ssh:\n        allow: true\n        publicKeyName: mykeypair\n    subnets:\n      - subnet-11222\n      - subnet-11333\n```", "```\n$ eksctl create nodegroup --config-file=bottlerocket.yaml\n```", "```\n$ kubectl get nodes --watch\n```", "```\n$ eksctl create nodegroup --config-file=managed-ng.yaml\n```", "```\n$ kubectl get nodes --watch\n```", "```\n---\napiVersion: eksctl.io/v1alpha5\nkind: ClusterConfig\nmetadata:\n  name: myclusterName\n  region: eu-central-1\n  version: '1.21'\nvpc:\n  id: \"vpc-123454\"\n  subnets:\n     private:\n        private1:\n           id:  \"subnet-11222\"\n        private2:\n           id:  \"subnet-11333\"\n  securityGroup: \"sg-4444444\"\niam:\n  withOIDC: true\n```", "```\nmanagedNodeGroups:\n  - name: managed-ng\n    labels: { role: workers }\n    instanceType: m5.large\n    privateNetworking: true\n    desiredCapacity: 2\n    iam:\n       attachPolicyARNs:\n          - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy\n          - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly\n          - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore\n          - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy\n    ssh:\n        allow: true\n        publicKeyName: mykeypair\n    subnets:\n      - subnet-11222\n      - subnet-11333\n```", "```\n    $ make 1.21 aws_region=<yourRegion>\n    ```", "```\n     $ aws ec2 describe-images --owners self --output json --region <yourRegion>\n    ```"]
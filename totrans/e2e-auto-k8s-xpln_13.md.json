["```\n    # Create Kubernetes secret with the access token\n    kubectl create secret generic gitlab-credentials -n crossplane-system --from-literal=gitlab-credentials=<YOUR_ACCESS_TOKEN>\n    ```", "```\n# GCP Provider\n```", "```\nkubectl apply -f Step-1-ProviderSetup/Platform-OPS/GCP\n```", "```\nkubectl apply -f Step-1-ProviderSetup/Platform-OPS/GCP/product-a\n```", "```\n# Helm Provider\n```", "```\nkubectl apply -f Step-1-ProviderSetup/Platform-OPS/Helm\n```", "```\n# GitLab Provider\n```", "```\nkubectl apply -f Step-1-ProviderSetup/Platform-OPS/Gitlab\n```", "```\nkubectl apply -f Step-1-ProviderSetup/Platform-OPS/Gitlab/product-a\n```", "```\n# Kubernetes Provider\n```", "```\nkubectl apply -f Step-1-ProviderSetup/Platform-OPS/k8s\n```", "```\n    patches:\n    - fromFieldPath: spec.claimRef.namespace\n      toFieldPath: spec.providerConfigRef.name\n    - fromFieldPath: spec.claimRef.name\n      toFieldPath: metadata.name\n    - fromFieldPath: spec.claimRef.namespace\n      toFieldPath: spec.writeConnectionSecretToRef.namespace\n    - fromFieldPath: spec.claimRef.name\n      toFieldPath: spec.writeConnectionSecretToRef.name\n      transforms:\n         - type: string\n            string:\n               fmt: \"%s-secret\"\n    ```", "```\n    # Patches and reediness check from the Helm Provider config\n    patches:\n    - fromFieldPath: spec.claimRef.namespace\n      toFieldPath: spec.credentials.secretRef.namespace\n    - fromFieldPath: spec.claimRef.name\n      toFieldPath: spec.credentials.secretRef.name\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-secret\"\n    - fromFieldPath: spec.claimRef.name\n      toFieldPath: metadata.name\n      transforms:\n      - type: string\n        string:\n          fmt: \"%s-helm-provider-config\"\n    readinessChecks:\n    - type: None \n    ```", "```\n# Install GCP Cluster XR/Claim API \n```", "```\nkubectl apply -f Step-2-CreateProductTeamsKubernetesCluster/Platform-OPS\n```", "```\n# Validate the health of installed API\n```", "```\nkubectl get xrd\n```", "```\nkubectl get composition\n```", "```\n# Create the GCP Cluster using a Claim object \n```", "```\nkubectl apply -f Step-2-CreateProductTeamsKubernetesCluster/Application-OPS\n```", "```\n# Validate the health of the GKE cluster and the Argo CD\n```", "```\nkubectl get GCPCluster -n product-a\n```", "```\nkubectl get release\n```", "```\n# Install the onboarding API \n```", "```\nkubectl apply -f Step-3-GitProjectOnboarding/Platform-OPS\n```", "```\n# Validate the health of installed API\n```", "```\nkubectl get xrd\n```", "```\nkubectl get composition\n```", "```\n# Create claim and validate\n```", "```\nkubectl apply -f Step-3-GitProjectOnboarding/Application-OPS\n```", "```\nkubectl get gitproject -n product-akubectl get xrd\n```", "```\n- type: CombineFromComposite\n```", "```\n  toFieldPath: spec.forProvider.manifest.spec.source.repoURL\n```", "```\n  combine:\n```", "```\n    variables:\n```", "```\n    - fromFieldPath: spec.parameters.productGitGroup\n```", "```\n    - fromFieldPath: spec.claimRef.name\n```", "```\n    strategy: string\n```", "```\n    string:\n```", "```\n      fmt: \"https://gitlab.com/%s/%s.git\"\n```", "```\n- fromFieldPath: spec.claimRef.namespace\n```", "```\n  toFieldPath: spec.providerConfigRef.name\n```", "```\n  transforms:\n```", "```\n    - type: string\n```", "```\n      string:\n```", "```\n        fmt: \"%s-cluster-k8s-provider-config\"\n```", "```\n- fromFieldPath: spec.claimRef.name\n```", "```\n  toFieldPath: spec.forProvider.manifest.spec.source.helm.parameters[0].value\n```", "```\n  transforms:\n```", "```\n    - type: string\n```", "```\n      string:\n```", "```\n        fmt: \"arunramakani/%s\n```", "```\nsource:\n```", "```\n  # we just saw how this patched \n```", "```\n  repoURL: # To be patched\n```", "```\n  # The branch in which Argo CD looks for change\n```", "```\n  # When the code is ready for release, move to this branch\n```", "```\n  targetRevision: HEAD\n```", "```\n  # Folder in the repository in which ArgoCD will look for automatic sync\n```", "```\n  path: template-helm\n```", "```\n  helm:\n```", "```\n    # We will patch our clime name here \n```", "```\n    releaseName: # To be patched\n```", "```\n    parameters:\n```", "```\n    - name: \"image.repository\"\n```", "```\n      # we just saw how this patched\n```", "```\n      value: # To be patched\n```", "```\n    - name: \"image.tag\"\n```", "```\n      value: latest\n```", "```\n    - name: \"service.port\"\n```", "```\n      value: \"3000\"\n```", "```\ndestination:\n```", "```\n  # Indicates that the target Kubernetes cluster is the same local Kubernetes cluster in which ArgoCD is running.  \n```", "```\n  server: https://kubernetes.default.svc\n```", "```\n  # Namespace in which the application is deployed\n```", "```\n  namespace: # to be patched\n```", "```\nkubectl apply -f Step-4-WebApplication/Platform-OPS/Application\n```", "```\nkubectl apply -f Step-4-WebApplication/Platform-OPS/DB\n```", "```\nkubectl get xrd\n```", "```\nkubectl get composition\n```", "```\napiVersion: learn.unified.devops/v1alpha1\n```", "```\nkind: WebApplication\n```", "```\nmetadata:\n```", "```\n  # Use the same name as the repository \n```", "```\n  name: micro-frontend-one\n```", "```\n  namespace: product-a\n```", "```\nspec:\n```", "```\n  compositionRef:\n```", "```\n    name: web-application-dev\n```", "```\n  parameters:\n```", "```\n    # Group name in gitlab for the product-a\n```", "```\n    productGitGroup: unified-devops-project-x\n```", "```\n    databaseSize: SMALL\n```", "```\n# Apply the claim\n```", "```\nkubectl apply -f Step-4-WebApplication/Application-OPS\n```", "```\n# Verify the application status, including the database and  ArgoCD config\n```", "```\nkubectl get webapplications -n product-a\n```", "```\nkubectl get XGCPdb\n```", "```\nkubectl get object\n```"]
["```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.7.9\n        ports:\n        - containerPort: 80 \n```", "```\n$ k create -f nginx-deployment.yaml\ndeployment.apps/nginx-deployment created\n$ k rollout status deployment/nginx-deployment\ndeployment \"nginx-deployment\" successfully rolled out\nDeployments have an update strategy, which defaults to rollingUpdate:\n$ k get deployment nginx-deployment -o yaml | grep strategy -A 4\n  strategy:\n    rollingUpdate:\n      maxSurge: 25%\n      maxUnavailable: 25%\n    type: RollingUpdate \n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      run: nginx\n  template:\n    metadata:\n      labels:\n        run: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx\n        resources:\n          requests:\n            cpu: 400m\n        ports:\n        - containerPort: 80 \n```", "```\n$ k apply -f nginx-deployment.yaml\ndeployment.apps/nginx created \n```", "```\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: nginx\nspec:\n  maxReplicas: 4\n  minReplicas: 2\n\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: nginx\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 90 \n```", "```\n$ k apply -f nginx-hpa.yaml\nhorizontalpodautoscaler.autoscaling/nginx created \n```", "```\n$ k get hpa\nNAME    REFERENCE          TARGETS         MINPODS   MAXPODS   REPLICAS   AGE\nnginx   Deployment/nginx   <unknown>/90%   2         4         3          70s \n```", "```\n$ helm repo add metrics-server https://kubernetes-sigs.github.io/metrics-server/\n\"metrics-server\" has been added to your repositories\n$ helm upgrade --install metrics-server metrics-server/metrics-server \\\n                --namespace monitoring \\\n                --create-namespace\n\nRelease \"metrics-server\" does not exist. Installing it now.\nNAME: metrics-server\nLAST DEPLOYED: Sat Jul 30 23:16:09 2022\nNAMESPACE: monitoring\nSTATUS: deployed\nREVISION: 1\nTEST SUITE: None\nNOTES:\n***********************************************************************\n* Metrics Server                                                      *\n***********************************************************************\n  Chart version: 3.8.2\n  App version:   0.6.1\n  Image tag:     k8s.gcr.io/metrics-server/metrics-server:v0.6.1\n*********************************************************************** \n```", "```\n$ k patch -n monitoring deployment metrics-server --type=json \\\n  -p '[{\"op\":\"add\",\"path\":\"/spec/template/spec/containers/0/args/-\",\"value\":\"--kubelet-insecure-tls\"}]' \n```", "```\nkubectl wait deployment metrics-server -n monitoring --for=condition=Available\ndeployment.apps/metrics-server condition met \n```", "```\n$ k top no\nNAME                 CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%\nkind-control-plane   213m         5%     15Mi            0%\n$ k top po\nNAME                     CPU(cores)   MEMORY(bytes)\nnginx-64f97b4d86-gqmjj   0m           3Mi\nnginx-64f97b4d86-sj8cz   0m           3Mi\nnginx-64f97b4d86-xc99j   0m           3Mi \n```", "```\n$ k get hpa\nNAME    REFERENCE          TARGETS   MINPODS   MAXPODS   REPLICAS   AGE\nnginx   Deployment/nginx   0%/90%    2         4         3          26s \n```", "```\n$ k get hpa\nNAME    REFERENCE          TARGETS   MINPODS   MAXPODS   REPLICAS   AGE\nnginx   Deployment/nginx   0%/90%    2         4         2          6m57s \n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata: \n  name: bash-loop\nspec: \n  replicas: 3\n  selector:\n    matchLabels:\n      name: bash-loop\n  template: \n    metadata: \n      labels: \n        name: bash-loop\n    spec: \n      containers: \n        - name: bash-loop \n          image: g1g1/py-kube:0.3\n          resources:\n            requests:\n              cpu: 100m\n          command: [\"/bin/bash\", \"-c\", \"while true; do sleep 10; done\"] \n```", "```\n$ k apply -f bash-loop-deployment.yaml\ndeployment.apps/bash-loop created \n```", "```\n$ k get deployment\nNAME        READY   UP-TO-DATE   AVAILABLE   AGE\nbash-loop   3/3     3            3           35s \n```", "```\n$ k get pods\nNAME                         READY   STATUS    RESTARTS   AGE\nbash-loop-8496f889f8-9khjs   1/1     Running   0          106s\nbash-loop-8496f889f8-frhb7   1/1     Running   0          105s\nbash-loop-8496f889f8-hcd2d   1/1     Running   0          105s \n```", "```\n$ k autoscale deployment bash-loop --min=4 --max=6 --cpu-percent=50\nhorizontalpodautoscaler.autoscaling/bash-loop autoscaled \n```", "```\n$ k get hpa\nNAME        REFERENCE              TARGETS   MINPODS   MAXPODS   REPLICAS   AGE\nbash-loop   Deployment/bash-loop   2%/50%    4         6         4          36s \n```", "```\n$ k get deployment\nNAME        READY   UP-TO-DATE   AVAILABLE   AGE\nbash-loop   4/4     4            4           4m11s \n```", "```\n$ k delete hpa bash-loop\nhorizontalpodautoscaler.autoscaling \"bash-loop\" deleted \n```", "```\n$ k get deployment\nNAME        READY   UP-TO-DATE   AVAILABLE   AGE\nbash-loop   4/4     4            4           5m17s \n```", "```\n$ k get deploy bash-loop -o jsonpath='{.spec.replicas}'\n4 \n```", "```\n$ k autoscale deployment bash-loop --min=2 --max=6 --cpu-percent=50\nhorizontalpodautoscaler.autoscaling/bash-loop autoscaled \n```", "```\n$ k get deployment\nNAME        READY   UP-TO-DATE   AVAILABLE   AGE\nbash-loop   4/4     4            4           8m18s \n```", "```\n$ k get deployment\nNAME        READY   UP-TO-DATE   AVAILABLE   AGE\nbash-loop   2/2     2            2           28m \n```", "```\n$ k get hpa\nNAME        REFERENCE              TARGETS   MINPODS   MAXPODS   REPLICAS   AGE\nbash-loop   Deployment/bash-loop   2%/50%    2         6         2          21m \n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: hue-reminders\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: hue\n      service: reminders\n  template:\n    metadata:\n      name: hue-reminders\n      labels:\n        app: hue\n        service: reminders\n    spec:\n      containers:\n      - name: hue-reminders\n        image: g1g1/hue-reminders:2.2\n        resources:\n          requests:\n            cpu: 100m\n        ports:\n        - containerPort: 80 \n```", "```\n$ k apply -f hue-reminders-deployment.yaml\ndeployment.apps/hue-reminders created \n```", "```\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: hue-reminders\nspec:\n  maxReplicas: 15\n  minReplicas: 10\n  targetCPUUtilizationPercentage: 90\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: hue-reminders \n```", "```\n$ k autoscale deployment hue-reminders --min=10 --max=15 --cpu-percent=90\nhorizontalpodautoscaler.autoscaling/hue-reminders autoscaled \n```", "```\n$ k set image deployment/hue-reminders hue-reminders=g1g1/hue-reminders:3.0 \n```", "```\n$ k rollout status deployment hue-reminders\nWaiting for deployment \"hue-reminders\" rollout to finish: 9 out of 10 new replicas have been updated...\nWaiting for deployment \"hue-reminders\" rollout to finish: 9 out of 10 new replicas have been updated...\nWaiting for deployment \"hue-reminders\" rollout to finish: 9 out of 10 new replicas have been updated...\nWaiting for deployment \"hue-reminders\" rollout to finish: 9 out of 10 new replicas have been updated...\nWaiting for deployment \"hue-reminders\" rollout to finish: 3 old replicas are pending termination...\nWaiting for deployment \"hue-reminders\" rollout to finish: 3 old replicas are pending termination...\nWaiting for deployment \"hue-reminders\" rollout to finish: 2 old replicas are pending termination...\nWaiting for deployment \"hue-reminders\" rollout to finish: 2 old replicas are pending termination...\nWaiting for deployment \"hue-reminders\" rollout to finish: 1 old replicas are pending termination...\nWaiting for deployment \"hue-reminders\" rollout to finish: 1 old replicas are pending termination...\nWaiting for deployment \"hue-reminders\" rollout to finish: 1 old replicas are pending termination...\nWaiting for deployment \"hue-reminders\" rollout to finish: 8 of 10 updated replicas are available...\nWaiting for deployment \"hue-reminders\" rollout to finish: 9 of 10 updated replicas are available...\ndeployment \"hue-reminders\" successfully rolled out \n```", "```\n$ k rollout history deployment hue-reminders\ndeployment.apps/hue-reminders\nREVISION  CHANGE-CAUSE\n3         kubectl1.23.4 set image deployment/hue-reminders hue-reminders=g1g1/hue-reminders:3.0 --record=true\n4         kubectl1.23.4 set image deployment/hue-reminders hue-reminders=g1g1/hue-reminders:3.0 --record=true \n```", "```\nrequests.nvidia.com/gpu: 10 \n```", "```\ncount/awesome.custom.resource \n```", "```\n$ k create namespace ns\nnamespace/ns created \n```", "```\n$ k config set-context --current --namespace ns\nContext \"kind-kind\" modified. \n```", "```\napiVersion: v1 \nkind: ResourceQuota \nmetadata: \n  name: compute-quota \nspec: \n  hard: \n    pods: 2 \n    requests.cpu: 1 \n    requests.memory: 200Mi \n    limits.cpu: 2 \n    limits.memory: 2Gi \n```", "```\n$ k apply -f compute-quota.yaml\nresourcequota/compute-quota created \n```", "```\napiVersion: v1 \nkind: ResourceQuota \nmetadata: \n  name: object-counts-quota \nspec: \n  hard: \n    count/configmaps: 10\n    count/persistentvolumeclaims: 4\n    count/jobs.batch: 20\n    count/secrets: 3 \n```", "```\n$ k apply -f object-count-quota.yaml\nresourcequota/object-counts-quota created \n```", "```\n$ k get quota\nNAME                  AGE   REQUEST                                                                                                 LIMIT\ncompute-quota         32s   pods: 0/2, requests.cpu: 0/1, requests.memory: 0/200Mi                                                   limits.cpu: 0/2, limits.memory: 0/2Gi\nobject-counts-quota   13s   count/configmaps: 1/10, count/jobs.batch: 0/20, count/persistentvolumeclaims: 0/4, count/secrets: 1/3 \n```", "```\n$ k describe quota compute-quota\nName:            compute-quota\nNamespace:       ns\nResource         Used  Hard\n--------         ----  ----\nlimits.cpu       0     2\nlimits.memory    0     2Gi\npods             0     2\nrequests.cpu     0     1\nrequests.memory  0     200Mi\n$ k describe quota object-counts-quota\nName:                         object-counts-quota\nNamespace:                    ns\nResource                      Used  Hard\n--------                      ----  ----\ncount/configmaps              1     10\ncount/jobs.batch              0     20\ncount/persistentvolumeclaims  0     4\ncount/secrets                 1     3 \n```", "```\n$ k create -f nginx-deployment.yaml\ndeployment.apps/nginx created \n```", "```\n$ k get po\nNo resources found in ns namespace. \n```", "```\n$ k describe deployment nginx\nName:                   nginx\nNamespace:              ns\nCreationTimestamp:      Sun, 31 Jul 2022 13:49:24 -0700\nLabels:                 <none>\nAnnotations:            deployment.kubernetes.io/revision: 1                                                                                                                             kind-kind | ns\nSelector:               run=nginx\nReplicas:               3 desired | 0 updated | 0 total | 0 available | 3 unavailable\nStrategyType:           RollingUpdate\nMinReadySeconds:        0\nRollingUpdateStrategy:  25% max unavailable, 25% max surge\nPod Template:\n  Labels:  run=nginx\n  Containers:\n   nginx:\n    Image:      nginx\n    Port:       80/TCP\n    Host Port:  0/TCP\n    Requests:\n      cpu:        400m\n    Environment:  <none>\n    Mounts:       <none>\n  Volumes:        <none>\nConditions:\n  Type             Status  Reason\n  ----             ------  ------\n  Progressing      True    NewReplicaSetCreated\n  Available        False   MinimumReplicasUnavailable\n  ReplicaFailure   True    FailedCreate\nOldReplicaSets:    <none>\nNewReplicaSet:     nginx-64f97b4d86 (0/3 replicas created)\nEvents:\n  Type    Reason             Age   From                   Message\n  ----    ------             ----  ----                   -------\n  Normal  ScalingReplicaSet  65s   deployment-controller  Scaled up replica set nginx-64f97b4d86 to 3 \n```", "```\n$ k get rs nginx-64f97b4d86 -o json | jq .status.conditions\n[\n  {\n    \"lastTransitionTime\": \"2022-07-31T20:49:24Z\",\n    \"message\": \"pods \\\"nginx-64f97b4d86-ks7d6\\\" is forbidden: failed quota: compute-quota: must specify limits.cpu,limits.memory,requests.memory\",\n    \"reason\": \"FailedCreate\",\n    \"status\": \"True\",\n    \"type\": \"ReplicaFailure\"\n  }\n] \n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      run: nginx\n  template:\n    metadata:\n      labels:\n        run: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx\n        resources:\n          requests:\n            cpu: 400m\n            memory: 60Mi\n          limits:\n            cpu: 400m\n            memory: 60Mi\n        ports:\n        - containerPort: 80 \n```", "```\n$ k apply -f nginx-deployment-with-resources.yaml\ndeployment.apps/nginx created\n$ k get po\nNAME                     READY   STATUS    RESTARTS   AGE\nnginx-5d68f45c5f-6h9w9   1/1     Running   0          21s\nnginx-5d68f45c5f-b8htm   1/1     Running   0          21s \n```", "```\napiVersion: v1 \nkind: LimitRange \nmetadata:\n  name: limits \nspec:\n  limits: \n  - default: \n      cpu: 400m \n      memory: 50Mi \n    defaultRequest: \n      cpu: 400m\n      memory: 50Mi\n    type: Container \n```", "```\n$ k apply -f limits.yaml\nlimitrange/limits created\n$ k describe limits\nName:       limits\nNamespace:  ns\nType        Resource  Min  Max  Default Request  Default Limit  Max Limit/Request Ratio\n----        --------  ---  ---  ---------------  -------------  -----------------------\nContainer   cpu       -    -    400m             400m           -\nContainer   memory    -    -    50Mi             50Mi           - \n```", "```\n$ k delete deployment nginx\ndeployment.apps \"nginx\" deleted\n$ k apply -f nginx-deployment.yaml\ndeployment.apps/nginx created\n$ k get deployment\nNAME    READY   UP-TO-DATE   AVAILABLE   AGE\nnginx   2/3     2            2           16s \n```", "```\nimport pulumi\nimport pulumi_aws as aws\ngroup = aws.ec2.SecurityGroup('web-sg',\n    description='Enable HTTP access',\n    ingress=[\n        { 'protocol': 'tcp', 'from_port': 80, 'to_port': 80, 'cidr_blocks': ['0.0.0.0/0'] }\n    ])\nserver = aws.ec2.Instance('web-server',\n    ami='ami-6869aa05',\n    instance_type='t2.micro',\n    vpc_security_group_ids=[group.name] # reference the security group resource above\n)\npulumi.export('public_ip', server.public_ip)\npulumi.export('public_dns', server.public_dns) \n```", "```\napiVersion: database.example.org/v1alpha1\nkind: PostgreSQLInstance\nmetadata:\n  name: the-db\n  namespace: data\nspec:\n  parameters:\n    storageGB: 20\n  compositionSelector:\n    matchLabels:\n      provider: aws\n      vpc: default\n  writeConnectionSecretToRef:\n    name: db-conn \n```"]
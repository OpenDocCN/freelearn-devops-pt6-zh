["```\nkubectl config set-credentials username --auth-provider=oidc --auth-provider-arg=idp-issuer-url=https://host/uri --auth-provider-arg=client-id=kubernetes --auth-provider-arg=refresh-token=$REFRESH_TOKEN --auth-provider-arg=id-token=$ID_TOKEN \n```", "```\nkubectl create sa mysa -n default\nkubectl create -n default -f - <<EOF\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mysa-secret\n  annotations:\n    kubernetes.io/service-account.name: mysa\ntype: kubernetes.io/service-account-token\nEOF \n```", "```\nkubectl get secret mysa-secret -o json | jq -r '.data.token' | base64 -d \n```", "```\ncurl -v --insecure https://0.0.0.0:6443/api \n```", "```\n.\n.\n.\n{\n  \"kind\": \"Status\",\n  \"apiVersion\": \"v1\",\n  \"metadata\": {\n  },\n  \"status\": \"Failure\",\n  \"message\": \"forbidden: User \\\"system:anonymous\\\" cannot get path\n\\\"/api\\\"\",\n  \"reason\": \"Forbidden\",\n  \"details\": {\n  },\n  \"code\": 403\n* Connection #0 to host 0.0.0.0 left intact \n```", "```\nexport KUBE_AZ=$(kubectl get secret mysa-secret -o json | jq -r '.data.token' | base64 -d)\ncurl  -H \"Authorization: Bearer $KUBE_AZ\" --insecure\nhttps://0.0.0.0:6443/api\n{\n  \"kind\": \"APIVersions\",\n  \"versions\": [\n    \"v1\"\n  ],\n  \"serverAddressByClientCIDRs\": [\n    {\n      \"clientCIDR\": \"0.0.0.0/0\",\n      \"serverAddress\": \"172.17.0.3:6443\"\n    }\n  ]\n} \n```", "```\n$ export KUBE_AZ=$(kubectl create token mysa -n default)\n$ curl  -H \"Authorization: Bearer $KUBE_AZ\" --insecure \\\nhttps://0.0.0.0:6443/api\n{\n  \"kind\": \"APIVersions\",\n  \"versions\": [\n    \"v1\"\n  ],\n  \"serverAddressByClientCIDRs\": [\n    {\n      \"clientCIDR\": \"0.0.0.0/0\",\n      \"serverAddress\": \"172.17.0.3:6443\"\n    }\n  ]\n} \n```", "```\ncd Kubernetes-An-Enterprise-Guide-Third-Edition/chapter2\nkind delete cluster -n cluster01\n./create-cluster.sh\ncd  ../chapter6/user-auth\n./deploy_openunison_imp_noimpersonation.sh \n```", "```\n    kubectl get secret ou-tls-certificate -n openunison -o json | jq -r '.data[\"tls.crt\"]' | base64 -d > ou-ca.pem \n    ```", "```\n    docker cp ou-ca.pem cluster01-control-plane:/etc/kubernetes/pki/ou-ca.pem \n    ```", "```\n    kubectl describe configmap api-server-config -n openunison\n    Name:         api-server-config\n    Namespace:    openunison\n    Labels:       <none>\n    Annotations:  <none>\n    Data\n    ====\n    oidc-api-server-flags:\n    ----\n    --oidc-issuer-url=https://k8sou.apps.192-168-2-131.nip.io/auth/idp/k8sIdp\n    --oidc-client-id=Kubernetes\n    --oidc-username-claim=sub\n    --oidc-groups-claim=groups\n    --oidc-ca-file=/etc/kubernetes/pki/ou-ca.pem \n    ```", "```\n    docker exec -it cluster01-control-plane bash\n    apt-get update\n    apt-get install vim -y\n    vi /etc/kubernetes/manifests/kube-apiserver.yaml \n    ```", "```\n     - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname\n        - --oidc-issuer-url=https://k8sou.apps.192-168-2-131.nip.io/auth/idp/k8sIdp\n        - --oidc-client-id=Kubernetes\n        - --oidc-username-claim=sub\n        - --oidc-groups-claim=groups\n        - --oidc-ca-file=/etc/kubernetes/pki/ou-ca.pem\n        - --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt \n    ```", "```\n    kubectl get pod kube-apiserver-cluster01-control-plane -n kube-system\n    NAME                                       READY  STATUS       RESTARTS  AGE\n    kube-apiserver-cluster-auth-control-plane  1/1    Running      0         73s \n    ```", "```\n    kubectl create -f - <<EOF\n    apiVersion: rbac.authorization.k8s.io/v1\n    kind: ClusterRoleBinding\n    metadata:\n       name: ou-cluster-admins\n    subjects:\n    - kind: Group\n      name: cn=k8s-cluster-admins,ou=Groups,DC=domain,DC=com \n      apiGroup: rbac.authorization.k8s.io\n    roleRef:\n      kind: ClusterRole\n      name: cluster-admin\n      apiGroup: rbac.authorization.k8s.io\n    EOF\n    clusterrolebinding.rbac.authorization.k8s.io/ou-cluster-admins created \n    ```", "```\n    export KUBECONFIG=$(mktemp)\n    kubectl get nodes\n    W0804 13:43:26.624417 3878806 loader.go:222] Config not found: /tmp/tmp.tqcXxwBh0H\n    to the server localhost:8080 was refused - did you specify the right host or port? \n    ```", "```\n    export TMP_CERT=$(mktemp) && echo -e \"-----BEGIN CER. . .\n    Cluster \"no-impersonation\" set.\n    Context \"no-impersonation\" created\n    User \"mmosley@no-impersonation\" set.\n    Switched to context \"no-impersonation\". \n    ```", "```\n    kubectl get nodes\n    NAME                      STATUS   ROLES           AGE     VERSION\n    cluster01-control-plane   Ready    control-plane   7m47s   v1.27.3\n    cluster01-worker          Ready    <none>          7m26s   v1.27.3 \n    ```", "```\n    kubectl auth whoami\n    ATTRIBUTE   VALUE\n    Username    https://k8sou.apps.192-168-2-82.nip.io/auth/idp/k8sIdp#mmosley\n    Groups      [cn=group2,ou=Groups,DC=domain,DC=com cn=k8s-cluster-admins,ou=Groups,DC=domain,DC=com system:authenticated] \n    ```", "```\n    kubectl get nodes\n    Unable to connect to the server: failed to refresh token: oauth2: cannot fetch token: 401 Unauthorized \n    ```", "```\ncd Kubernetes-An-Enterprise-Guide-Third-Edition/chapter2\nkind delete cluster -n cluster01\n./create-cluster.sh\ncd  ../chapter6/user-auth\n./deploy_openunison_imp_impersonation.sh \n```", "```\n    export TMP_CERT=$(mktemp) && echo -e \"-----BEGIN CERTIFI...\n    Cluster \"impersonation\" set.\n    Context \"impersonation\" created.\n    User \"mmosley@impersonation\" set.\n    Switched to context \"impersonation\". \n    ```", "```\n    kubectl get nodes\n    NAME                      STATUS   ROLES           AGE   VERSION\n    cluster01-control-plane   Ready    control-plane   37m   v1.27.3\n    cluster01-worker          Ready    <none>          37m   v1.27.3 \n    ```", "```\n    kubectl auth whoami\n    ATTRIBUTE   VALUE\n    Username    mmosley\n    Groups      [cn=group2,ou=Groups,DC=domain,DC=com cn=k8s-cluster-admins,ou=Groups,DC=domain,DC=com system:authenticated] \n    ```", "```\n    kubectl get nodes\n    Unable to connect to the server: failed to refresh token: oauth2: cannot fetch token: 401 Unauthorized \n    ```", "```\nkubectl get nodes --as somerandomuser\nError from server (Forbidden): nodes is forbidden: User \"somerandomuser\" cannot list resource \"nodes\" in API group \"\" at the cluster scope \n```", "```\nkubectl get nodes --as somerandomuser --as-group=cn=k8s-cluster-admins,ou=Groups,DC=domain,DC=com\nNAME                      STATUS   ROLES           AGE   VERSION\ncluster01-control-plane   Ready    control-plane   17m   v1.27.3\ncluster01-worker          Ready    <none>          17m   v1.27.3 \n```", "```\nkubectl auth whoami --as=someuser --as-group=cn=k8s-cluster-admins,ou=Groups,DC=domain,DC=com\nATTRIBUTE                                VALUE\nUsername                                 someuser\nGroups                                   [cn=k8s-cluster-admins,ou=Groups,DC=domain,DC=com system:authenticated]\nExtra: originaluser.jetstack.io-groups   [cn=group2,ou=Groups,DC=domain,DC=com cn=k8s\ncluster-admins,ou=Groups,DC=domain,DC=com]\nExtra: originaluser.jetstack.io-user     [mmosley] \n```", "```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: impersonator\nrules:\n- apiGroups:\n  - \"\"\n  resources:\n  - users\n  - groups\n  verbs:\n  - impersonate \n```", "```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: impersonator\nrules:\n- apiGroups:\n  - \"\"\n  resources:\n  - users   resourceNames:\n  - mmosley\n  verbs:\n  - impersonate \n```", "```\nkubectl auth whoami --as=someuser --as-group=cn=k8s-cluster-admins,ou=Groups,DC=domain,DC=com\nATTRIBUTE                                VALUE\nUsername                                 someuser\nGroups                                   [cn=k8s-cluster-admins,ou=Groups,DC=domain,DC=com system:authenticated]\nExtra: originaluser.jetstack.io-groups   [cn=group2,ou=Groups,DC=domain,DC=com cn=k8s\ncluster-admins,ou=Groups,DC=domain,DC=com]\nExtra: originaluser.jetstack.io-user     [mmosley] \n```", "```\ncd chapter6/pipelines\nhelm install orchestra-token-api token-login -n openunison -f /tmp/openunison-values.yaml\nNAME: orchestra-token-api\nLAST DEPLOYED: Mon Jul 24 18:47:04 2023\nNAMESPACE: openunison\nSTATUS: deployed\nREVISION: 1\nTEST SUITE: None \n```", "```\n$ export KUBE_AZ=$(curl --insecure -u 'pipeline_svc_account:start123' \\\nhttps://k8sou.apps.192-168-2-114.nip.io/k8s-api-token/token/user\\\n | jq -r '.token.id_token')\ncurl --insecure   -H \"Authorization: Bearer $KUBE_AZ\"  https://k8sapi.apps.192-168-2-114.nip.io/api\n{\n  \"kind\": \"APIVersions\",\n  \"versions\": [\n    \"v1\"\n  ],\n  \"serverAddressByClientCIDRs\": [\n    {\n      \"clientCIDR\": \"0.0.0.0/0\",\n      \"serverAddress\": \"172.18.0.2:6443\"\n    }\n  ]\n} \n```", "```\n$ export KUBECONFIG=$(mktemp)\n$ kubectl get nodes\nThe connection to the server localhost:8080 was refused â€“ did you specify the right host or port?\ncurl --insecure -u 'pipeline_svc_account:start123' https://k8sou.apps.192-168-2-114.nip.io/k8s-api-token/token/user 2>/dev/null | jq -r '.token[\"kubectl Command\"]' | bash\nCluster \"impersonation\" set.\nContext \"impersonation\" created.\nUser \"pipelinex-95-xsvcx-95-xaccount@impersonation\" set.\nSwitched to context \"impersonation\".\n$ kubectl get nodes\nNAME                      STATUS   ROLES           AGE    VERSION\ncluster01-control-plane   Ready    control-plane   130m   v1.27.3\ncluster01-worker          Ready    <none>          129m   v1.27.3 \n```", "```\n    $ openssl req -out sa_cert.csr \\\n    -new -newkey rsa:2048 -nodes -keyout sa_cert.key \\\n    -subj '/O=k8s/O=sa-cluster-admins/CN=sa-cert/'\n    Generating a RSA private key\n    ..........+++++\n    .................................+++++\n    writing new private key to 'sa_cert.key'\n    ----- \n    ```", "```\n    $ cat <<EOF | kubectl apply -f -\n    apiVersion: certificates.k8s.io/v1\n    kind: CertificateSigningRequest\n    metadata:\n      name: sa-cert\n    spec:\n      request: $(cat sa_cert.csr | base64 | tr -d '\\n')\n      signerName: kubernetes.io/kube-apiserver-client\n      usages:\n      - digital signature\n      - key encipherment\n      - client auth\n    EOF \n    ```", "```\n    $ kubectl certificate approve sa-cert\n    certificatesigningrequest.certificates.k8s.io/sa-cert approved \n    ```", "```\n    $ kubectl get csr sa-cert -o jsonpath='{.status.certificate}' | base64 --decode > sa_cert.crt \n    ```", "```\n    $ cp ~/.kube/config ./sa-config\n    $export KUBECONFIG=./sa-config\n    $ kubectl config set-credentials kind-cluster01 --client-key=./sa_cert.key \\\n    --client-certificate=./sa_cert.crt\n    $ kubectl get nodes\n    Error from server (Forbidden): nodes is forbidden: User \"sa-cert\" cannot list resource \"nodes\" in API group \"\" at the cluster scope \n    ```", "```\n$ export KUBECONFIG=\n$ kubectl create -f chapter6/pipelines/sa-cluster-admins.yaml\n$ export KUBECONFIG=./sa-config\n$ kubectl get nodes\nNAME                      STATUS   ROLES           AGE    VERSION\ncluster01-control-plane   Ready    control-plane   138m   v1.27.3\ncluster01-worker          Ready    <none>          138m   v1.27.3 \n```", "```\ncd Kubernetes-An-Enterprise-Guide-Third-Edition/chapter2\nkind delete cluster -n cluster01\n./create-cluster.sh \n```", "```\ncd ../chapter6/pipelines/cicd-proxy\n./deploy-proxy.sh \n```", "```\n./run_workflow.sh\nkubectl logs -l job-name=workflow -n cicd-ns\nUser \"remote\" set.\nContext \"remote\" created.\nSwitched to context \"remote\".\npod \"test-pods-777b69dc55-4bmwd\" deleted \n```"]
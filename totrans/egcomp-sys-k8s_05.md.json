["```\n    $ sudo nano /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg\n    ```", "```\nnetwork: {config: disabled}\n```", "```\n    $ sudo nano /etc/netplan/50-cloud-init.yaml\n    ```", "```\n    network:\n      version: 2\n      renderer: networkd\n      ethernets:\n        eth0:\n          dhcp4: no\n          addresses:\n            - 192.168.0.11/24\n          gateway4: 192.168.0.1\n          nameservers:\n              addresses: [8.8.8.8, 1.1.1.1]\n    ```", "```\n    $ sudo netplan apply \n    ```", "```\n    $ sudo nano /boot/firmware/cmdline.txt\n    ```", "```\ncgroup_memory=1 cgroup_enable=memory\n```", "```\n    $ sudo nano /etc/hostname\n    ```", "```\nmaster\n```", "```\n    $ sudo nano /etc/hosts\n    ```", "```\n127.0.0.1 localhost master\n```", "```\n$ sudo reboot\n```", "```\n    $ MASTER_IP=<YOUR_PRIVATE_IP>\n    $ curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC=\"--write-kubeconfig-mode 644 --no-deploy traefik --disable traefik --tls-san \"$MASTER_IP\" --node-external-ip \"$MASTER_IP\" --disable servicelb\" sh -s -\n    ```", "```\n    $ ssh ubuntu@<MASTER_IP>\n    ```", "```\n    $ sudo cat /var/lib/rancher/k3s/server/node-token\n    ```", "```\n    $ ssh ubuntu@<AGENT_IP>\n    ```", "```\n    $ export TOKEN=<YOUR_MASTER_TOKEN>\n    ```", "```\n    $ curl -sfL https://get.k3s.io | sh -s - agent --server https://MASTER_IP:6443 --token ${TOKEN} \n    ```", "```\n$ exit\n```", "```\n    $ kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.10.2/manifests/namespace.yaml\n    ```", "```\n    apiVersion: v1 \n    kind: ConfigMap \n    metadata: \n      namespace: metallb-system \n      name: config \n    data: \n      config: | \n        address-pools: \n        - name: default \n          protocol: layer2 \n          addresses: \n          - 192.168.0.240-192.168.0.250\n    ```", "```\n    $ kubectl apply -f config.yaml\n    ```", "```\n    $ kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.10.2/manifests/metallb.yaml\n    ```", "```\n    $ ssh ubuntu@NODE_IP\n    ```", "```\n    $ sudo apt install -y nfs-common\n    ```", "```\n    $ kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v1.1.2/deploy/longhorn.yaml\n    ```", "```\n    $ curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/darwin/amd64/kubectl\"\n    $ chmod +x ./kubectl\n    $ sudo mv ./kubectl /usr/local/bin/kubectl\n    $ sudo chown root: /usr/local/bin/kubectl\n    ```", "```\n$ brew install kubectl \n```", "```\n    $ chmod 0400 ~/.kube/config\n    ```", "```\n    server: https://127.0.0.1:6443\n    ```", "```\nserver: https://MASTER_IP:6443\n```", "```\n    $ kubectl run myserver --image=nginx --restart=Never\n    ```", "```\n    $ kubectl expose pod/myserver --port=8001 --target-port=80 –type=LoadBalancer\n    ```", "```\n    $ IP_SERVICE=$(kubectl get svc mywebserver --output jsonpath='{.status.loadBalancer.ingress[0].ip}')\n    ```", "```\n    $ curl IP_SERVICE:8001\n    ```", "```\n    $ kubectl run myredis --image=redis --restart=Never\n    ```", "```\n    $ kubectl expose pod myredis --port=6379 --type=ClusterIP\n    ```", "```\n    $ kubectl run client -it --rm --image=ubuntu:18.04 -- bash\n    ```", "```\n    root@client# apt-get update;apt-get install -y redis-tools\n    ```", "```\n    root@client# redis-cli -h myredis set a 1\n    root@client# redis-cli –h myredis get a\n    ```", "```\n    $ kubectl expose pod myredis --name=myredis-nodeport --port=6379 --type=NodePort\n    ```", "```\n    $ kubectl create deployment mywebserver --image=nginx --replicas=2\n    ```", "```\n    $ kubectl expose deployment mywebserver --port=8002 --target-port=80 --type=LoadBalancer\n    ```", "```\n    $ IP_SERVICE=$(kubectl get svc mywebserver --output jsonpath='{.status.loadBalancer.ingress[0].ip}')\n    ```", "```\n    $ curl $IP_SERVICE:8002\n    ```", "```\n    $ kubectl scale deploy/mywebserver --replicas=0\n    ```", "```\n    $ curl $IP_SERVICE:8002\n    ```", "```\n    $ kubectl scale deploy/mywebserver --replicas=2\n    $ kubectl rollout status deploy/mywebserver \n    ```", "```\n    $ curl $IP_SERVICE:8002\n    ```", "```\n    $ kubectl set image deployment/mywebserver nginx=nginx:1.16.1.x\n    ```", "```\n    $ kubectl describe deployment mywebserver | grep -i image\n    ```", "```\n    $ kubectl get pods\n    ```", "```\n    $ kubectl rollout undo deploy/mywebserver\n    ```", "```\n    $ kubectl get pods\n    ```", "```\n    $ kubectl run nginx --image=nginx --dry-run –o yaml > nginx-pod.yaml\n    ```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx\n  labels:\n    name: nginx\nspec:\n  containers:\n  - name: nginx\n    image: nginx\n    ports:\n      - containerPort: 80\n```", "```\n    $ kubectl create -f nginx-pod.yaml\n    ```", "```\n    $ kubectl create deployment nginx --image=nginx --replicas=2 --dry-run –o yaml > nginx-deployment.yaml\n    ```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: nginx\n  name: nginx\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - image: nginx\n        name: nginx\n```", "```\n    $ kubectl create -f nginx-deployment.yaml\n    ```", "```\n    $ kubectl expose pod/nginx --type=ClusterIP --port=80  --target-port=8001 --dry-run –o yaml > nginx-clusterip.yaml\n    ```", "```\napiVersion: v1\nkind: Service\nmetadata:\n  creationTimestamp: null\n  labels:\n    app: nginx\n  name: nginx\nspec:\n  ports:\n  - port: 80\n    protocol: TCP\n    targetPort: 8001\n  selector:\n    app: nginx\n  type: ClusterIP\n```", "```\n    $ kubectl create -f nginx-pod.yaml\n    ```", "```\n    kubectl expose pod/nginx --type=NodePort --port=80 --target-port=8001 --dry-run -o yaml > nginx-nodeport.yaml\n    ```", "```\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: nginx\n  name: nginx\nspec:\n  ports:\n  - port: 80\n    protocol: TCP\n    targetPort: 8001\n  selector:\n    app: nginx\n  type: NodePort\n```", "```\n    kubectl create -f nginx-pod.yaml\n    ```", "```\n    $ kubectl expose pod/nginx --type=LoadBalancer --port=80 -target-port=8001 --dry-run -o yaml > nginx-lb.yaml\n    ```", "```\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: nginx\n  name: nginx\nspec:\n  ports:\n  - port: 80\n    protocol: TCP\n    targetPort: 8001\n  selector:\n    app: nginx\n  type: LoadBalancer\n```", "```\n    $ kubectl create -f nginx-pod.yaml\n    ```", "```\n    apiVersion: v1\n    kind: PersistentVolumeClaim\n    metadata:\n      name: longhorn-volv-pvc\n    spec:\n      accessModes:\n        - ReadWriteMany\n      storageClassName: longhorn\n      resources:\n        requests:\n          storage: 2Gi\n    ```", "```\n    $ kubectl create -f pvc.yaml\n    ```", "```\n    apiVersion: v1\n    kind: Pod\n    metadata:\n      name: volume-test\n      namespace: default\n    spec:\n      containers:\n      - name: volume-test\n        image: nginx:stable-alpine\n        imagePullPolicy: IfNotPresent\n        volumeMounts:\n        - name: volv\n          mountPath: /data\n        ports:\n        - containerPort: 80\n      volumes:\n      - name: volv\n        persistentVolumeClaim:\n          claimName: longhorn-volv-pvc\n    ```", "```\n    apiVersion: v1\n    kind: Pod\n    metadata:\n      name: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis\n        volumeMounts:\n        - name: redis-storage\n          mountPath: /data/redis\n      volumes:\n      - name: redis-storage\n        persistentVolumeClaim:\n          claimName: longhorn-volv-pvc\n    ```", "```\n    $ kubectl create -f pod.yaml\n    ```", "```\n    $ kubectl create -f pod.yaml\n    ```", "```\n    $ kubectl create -f pod.yaml\n    ```", "```\n    $ GITHUB_URL=https://github.com/kubernetes/dashboard/releases\n    $ VERSION_KUBE_DASHBOARD=$(curl -w '%{url_effective}' -I -L -s -S ${GITHUB_URL}/latest -o /dev/null | sed -e 's|.*/||')\n    $ sudo k3s kubectl create -f https://raw.githubusercontent.com/kubernetes/dashboard/${VERSION_KUBE_DASHBOARD}/aio/deploy/recommended.yaml\n    ```", "```\n    apiVersion: v1\n    kind: ServiceAccount\n    metadata:\n      name: admin-user\n      namespace: kubernetes-dashboard\n    ```", "```\n    apiVersion: rbac.authorization.k8s.io/v1\n    kind: ClusterRoleBinding\n    metadata:\n      name: admin-user\n    roleRef:\n      apiGroup: rbac.authorization.k8s.io\n      kind: ClusterRole\n      name: cluster-admin\n    subjects:\n    - kind: ServiceAccount\n      name: admin-user\n      namespace: kubernetes-dashboard\n    ```", "```\n    $ kubectl create -f dashboard-admin-user.yml -f dashboard-admin-user-role.yml\n    ```", "```\n    $ kubectl -n kubernetes-dashboard describe secret admin-user-token | grep '^token'\n    ```", "```\n    $ sudo kubectl proxy\n    ```"]
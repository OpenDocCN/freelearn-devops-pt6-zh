- en: <st c="0">1</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2">Deploying and Interacting with AWS Services</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="45">Embarking on the journey to build solutions</st> <st c="90">on the</st>
    **<st c="97">Amazon Web Services</st>** <st c="116">(</st>**<st c="118">AWS</st>**<st
    c="121">) platform requires a comprehensive understanding of the available tools
    and approaches.</st> <st c="211">This chapter introduces various methodologies
    for architecting on AWS, beginning with preparatory activities such as requirements
    gathering, service selection,</st> <st c="371">and diagramming.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="387">You will then explore the various methods and tools available for
    deploying and interacting with AWS</st> <st c="489">services, including</st> <st
    c="508">the AWS</st> <st c="517">Console, AWS</st> **<st c="530">Command Line
    Interface</st>** <st c="552">(</st>**<st c="554">CLI</st>**<st c="557">), AWS</st>
    **<st c="565">Software Development Kits</st>** <st c="590">(</st>**<st c="592">SDKs</st>**<st
    c="596">), and</st> **<st c="604">Infrastructure as</st>** **<st c="622">Code</st>**
    <st c="626">(</st>**<st c="628">IaC</st>**<st c="631">).</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="634">This is a theoretical chapter, structured around the following</st>
    <st c="698">main topics:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="710">Architecting</st> <st c="724">on AWS</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="730">Getting started with</st> <st c="752">AWS Console</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="763">Navigating AWS CLI</st> <st c="783">and SDK</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="790">Understanding IaC</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="808">By the end of this chapter, you will possess the knowledge and skills
    necessary to create, operate, and monitor AWS services using the approach that
    best aligns with your requirements and preferences, whether it be through the
    user-friendly AWS Console, the CLI, programmatic access via SDKs, or the powerful</st>
    <st c="1118">IaC tools.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1128">Technical requirements</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="1151">Although this is a theoretical chapter, you will find code snippets
    in the GitHub repository of this chapter</st> <st c="1261">at</st> [<st c="1264">https://github.com/PacktPublishing/AWS-Cloud-Projects/tree/main/chapter1/code</st>](https://github.com/PacktPublishing/AWS-Cloud-Projects/tree/main/chapter1/code)<st
    c="1341">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1342">To follow along, you will need an</st> <st c="1377">AWS account.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1389">Architecting on AWS</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="1409">Architecting on AWS refers</st> <st c="1436">to the process of
    designing and planning cloud-based solutions using AWS.</st> <st c="1511">It involves
    understanding the various AWS services, their capabilities, and how they can be
    combined to build scalable, secure, and</st> <st c="1643">cost-effective architectures.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1672">When architecting on AWS, the following four aspects should be
    considered, each detailed later in</st> <st c="1771">this chapter:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="1784">Requirements gathering</st>**<st c="1807">: This is a crucial
    step in the process of architecting solutions on AWS.</st> <st c="1882">It involves
    understanding the business needs, functional requirements, non-functional requirements,
    and constraints that will shape the design and implementation of the</st> <st
    c="2051">AWS architecture.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="2068">Architecture patterns</st>**<st c="2090">: AWS provides various
    architecture patterns and reference architectures that serve as starting points
    for common use cases, such as web applications, data processing pipelines, or
    serverless architectures.</st> <st c="2298">You can leverage these patterns and
    customize them to meet their</st> <st c="2363">specific requirements.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="2385">Service selection</st>**<st c="2403">: AWS offers a broad range
    of services, including compute, storage, databases, networking, analytics, machine
    learning, and more.</st> <st c="2534">You must carefully evaluate the requirements
    of the applications and select the appropriate AWS services that best fit</st>
    <st c="2653">those needs.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="2665">Diagramming</st>**<st c="2677">: Creating visual representations
    of the proposed architecture is a crucial step in the architecting process.</st>
    <st c="2788">There are no AWS official tools, but</st> **<st c="2825">draw.io</st>**
    <st c="2832">or simply Microsoft PowerPoint can be used to create architecture
    diagrams, which</st> <st c="2914">helps communicate the design and facilitate
    collaboration</st> <st c="2973">and implementation.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="2992">Let’s look at these aspects</st> <st c="3021">in detail.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3031">Requirements gathering</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="3054">Clear and well-defined</st> <st c="3078">requirements are crucial
    for architects to design AWS solutions that meet the specific needs of the organization
    and provide the desired outcomes.</st> <st c="3225">Gathering requirements can
    involve collaborating with stakeholders, conducting workshops, analyzing existing
    systems and data, and understanding the</st> <st c="3374">business context.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3391">However, if your project has a smaller scope, not all these steps
    may apply.</st> <st c="3469">Nonetheless, it is important to understand what type
    of requirements can be gathered before a</st> <st c="3563">project starts:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="3578">Business requirements</st>**<st c="3600">: The first step is
    to understand the business objectives, goals, and drivers behind the solution
    being architected.</st> <st c="3718">This includes factors such as the target
    market, expected growth, revenue models, and any specific business constraints
    or regulations that need to</st> <st c="3866">be considered.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="3880">Functional requirements</st>**<st c="3904">: These requirements
    define the specific features, functionalities, and capabilities that the solution
    must provide.</st> <st c="4022">This could include requirements related to user
    interfaces, data processing, integration with existing systems, or specific</st>
    <st c="4146">business logic.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="4161">Non-functional requirements</st>**<st c="4189">: Non-functional
    requirements define the qualitative attributes that the solution must possess,
    such as performance, scalability, availability, security, and compliance.</st>
    <st c="4360">These requirements are often critical in determining the appropriate
    AWS services and architectural patterns to</st> <st c="4472">be used.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="4480">Technical requirements</st>**<st c="4503">: Technical requirements
    encompass the specific technologies, programming languages, frameworks, and tools
    that need to be used or integrated with the AWS solution.</st> <st c="4669">This
    could include requirements for specific databases, messaging systems, or</st>
    <st c="4747">third-party services.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="4768">Data requirements</st>**<st c="4786">: Understanding the data
    requirements is essential when architecting on AWS.</st> <st c="4864">This includes
    the types of data (structured, unstructured, or semi-structured), data volumes,
    data sources, data processing needs, and any specific data governance or</st>
    <st c="5031">compliance requirements.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="5055">Integration requirements</st>**<st c="5080">: If the AWS solution
    needs to integrate with existing on-premises systems, third-party services, or
    other cloud environments, the integration requirements must be clearly defined.</st>
    <st c="5262">This includes identifying the integration points, data formats, protocols,
    and</st> <st c="5341">security considerations.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="5365">Security and compliance requirements</st>**<st c="5402">: Depending
    on the industry and the nature of the data being handled, there may be specific
    security and compliance requirements that need to be addressed in the AWS architecture.</st>
    <st c="5583">These could include regulatory standards, data protection laws, or</st>
    <st c="5650">industry-specific certifications.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="5683">Financial requirements</st>**<st c="5706">: AWS offers a pay-as-you-go
    pricing model.</st> <st c="5751">Understanding the budget constraints and cost
    requirements is essential for selecting the appropriate AWS services and implementing</st>
    <st c="5883">cost-effective architectures.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="5912">Bear in mind that some folks consider costs or security requirements
    part of the umbrella of functional and non-functional requirements.</st> <st c="6050">Don’t
    be pedantic about naming; just gather all</st> <st c="6098">your requirements.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6116">Choosing an architecture pattern</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="6149">Architecture patterns</st> <st c="6171">and reference architectures
    serve as starting points for designing and implementing cloud-based solutions.</st>
    <st c="6279">These patterns encapsulate best practices, proven designs, and architectural
    principles tailored to specific use cases and requirements.</st> <st c="6416">You
    can find many of these in</st> <st c="6445">the AWS Architecture</st> <st c="6467">Center:</st>
    [<st c="6475">https://aws.amazon.com/architecture</st>](https://aws.amazon.com/architecture)<st
    c="6510">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6511">By leveraging AWS architecture patterns and reference architectures,
    you can build upon proven designs, accelerate the development process, and ensure
    that your solutions align with AWS best practices and</st> <st c="6717">industry
    standards.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6736">Architecture patterns address common scenarios and requirements.</st>
    <st c="6802">These include patterns for web applications, data processing pipelines,
    serverless architectures, microservices, event-driven architectures, and more.</st>
    <st c="6953">You can leverage these patterns as a foundation and customize them
    to meet</st> <st c="7028">specific needs.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7043">In addition to general patterns, AWS provides reference architectures
    for specific domains and industries, such as e-commerce, media and entertainment,
    healthcare, financial services, and more.</st> <st c="7238">These reference architectures
    offer detailed guidance on how to design and implement solutions using AWS services
    and best practices specific to</st> <st c="7383">those domains.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7397">To select a pattern or architecture, you must carefully evaluate
    the requirements, constraints, and use cases of their solutions to select the
    most appropriate one.</st> <st c="7563">This selection process involves understanding
    the strengths, weaknesses, and trade-offs of each pattern, as well as their alignment
    with the rest of the technical stack.</st> <st c="7733">This is often detailed
    in</st> <st c="7759">their description.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7777">While architecture patterns provide a solid starting point, they
    are rarely implemented as-is.</st> <st c="7873">You must customize and adapt the
    patterns to fit your specific requirements, integrating additional AWS services,
    adjusting configurations, and incorporating security, monitoring, and</st> <st
    c="8057">operational considerations.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8084">It can also happen that what you need is a hybrid or multi-pattern
    architecture.</st> <st c="8166">Some solutions require a combination of multiple
    architecture patterns or a hybrid approach that combines components of different
    patterns.</st> <st c="8306">There is an extra challenge in determining how to</st>
    <st c="8356">effectively integrate and orchestrate the different patterns into
    a cohesive and scalable architecture.</st> <st c="8460">This is an advanced topic,
    which you will learn more about in later chapters of</st> <st c="8540">this book.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8550">Selecting a service</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="8570">By now, you have a</st> <st c="8589">well-defined problem and a
    generic architectural pattern.</st> <st c="8648">The next step is service selection.</st>
    <st c="8684">This is a critical aspect of architecting solutions in AWS.</st>
    <st c="8744">With over 200 services available, AWS provides a vast array of building
    blocks that can be combined to create scalable, secure, and</st> <st c="8876">cost-effective
    architectures.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="8905">Service selection is an iterative process that involves balancing
    architectural best practices and all kinds of requirements: non-functional, functional,
    cost, security, and so on.</st> <st c="9087">You must continuously evaluate and
    refine service selections as the solution evolves and new requirements or</st>
    <st c="9196">constraints emerge.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9215">The first step in service selection is to map the gathered requirements
    to the available AWS services.</st> <st c="9319">This involves understanding the
    capabilities and use cases of each service and identifying the ones that can address
    the specific functional, non-functional, and technical requirements of the solution.</st>
    <st c="9521">To make this mapping, you will need to first understand what category
    of service you should look at.</st> <st c="9622">Services are organized into different
    categories, such as compute, storage, databases, networking, security, analytics,
    and more.</st> <st c="9752">You will see different services in each of these categories
    in the following chapters of</st> <st c="9841">this book.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9851">After you have identified the service category that maps to your
    requirements, you will need to evaluate the different service capabilities.</st>
    <st c="9993">Each AWS service offers a unique set of capabilities and features.</st>
    <st c="10060">For example, if the solution requires a highly available and scalable
    database, services such as Amazon RDS or Amazon Aurora might be suitable choices.</st>
    <st c="10212">This will become</st> <st c="10229">clearer as you advance through
    the chapters of</st> <st c="10276">this book.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10286">Some interesting non-functional capabilities that you should consider
    are</st> <st c="10361">as follows:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="10372">Service integrations</st>**<st c="10393">: AWS services are
    designed to work together seamlessly.</st> <st c="10451">You should consider the
    integration points between different services and ensure that the selected services
    can be integrated effectively to deliver the</st> <st c="10604">desired functionality.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="10626">Managed versus self-managed services</st>**<st c="10663">:
    AWS offers both managed services, where AWS handles the underlying infrastructure
    and maintenance, and self-managed services, where the customer has more control
    but also more responsibility.</st> <st c="10858">You must evaluate the trade-offs
    between these service types based on factors such as operational overhead, cost,
    and</st> <st c="10976">compliance requirements.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="11000">Pricing and cost optimization</st>**<st c="11030">: AWS services
    have different pricing models, and you must consider the cost implications of
    their service selections.</st> <st c="11150">Cost optimization strategies, such
    as leveraging reserved instances, spot instances, or auto-scaling, should be evaluated
    and incorporated into</st> <st c="11294">the architecture.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="11311">Roadmap</st>**<st c="11319">: AWS services are constantly evolving,
    with new features and services being released regularly.</st> <st c="11417">You
    should consider the future roadmap of the services they select and ensure that
    the architecture can accommodate potential changes or new</st> <st c="11558">service
    offerings.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="11576">Important note</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11591">Did you know that not every AWS service is available in all regions?</st>
    <st c="11661">That’s right.</st> <st c="11675">AWS services are not uniformly
    available across all AWS regions.</st> <st c="11740">You must therefore also consider
    the regional availability of the services you plan</st> <st c="11824">to use.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11831">Sometimes, you will not find a suitable AWS service for your requirements
    and that is okay.</st> <st c="11924">This is where third-party services come in.</st>
    <st c="11968">Don’t be scared to leverage third-party tooling if it fits your</st>
    <st c="12032">needs.</st> <st c="12039">However, consider all the previously mentioned
    dimensions such as cost or</st> <st c="12113">service integrations.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12134">Diagramming</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="12146">Visual representations</st> <st c="12170">of the proposed architecture
    help communicate the design, facilitate collaboration among team members, and
    ensure a shared understanding of the solution’s components and their interactions.</st>
    <st c="12360">It also provides a map of</st> <st c="12386">the implementation.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12405">There is no standard tool to diagram AWS solutions.</st> <st c="12458">The
    most well-accepted tools are PowerPoint using AWS Architecture Icons (</st>[<st
    c="12532">https://aws.amazon.com/architecture/icons/</st>](https://aws.amazon.com/architecture/icons/)<st
    c="12575">) or draw.io (</st>[<st c="12590">https://app.diagrams.net</st>](https://app.diagrams.net)<st
    c="12615">).</st> <st c="12619">These tools include icons and shapes that represent
    the different</st> <st c="12685">AWS services.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '*<st c="12698">Figure 1</st>**<st c="12707">.1</st>* <st c="12709">shows a
    high-level diagram, using PowerPoint, of the communication flow between two EC2
    instances in</st> <st c="12811">different regions.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1 – Cross-region EC2 communication flow](img/B22051_01_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="13095">Figure 1.1 – Cross-region EC2 communication flow</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="13143">Diagrams serve as a universal language for communicating the architecture
    design to stakeholders, developers, operations teams, and other involved parties.</st>
    <st c="13300">You should not only represent the various AWS services, but also
    their relationships, as well as the overall flow of data and processes within
    the solution.</st> <st c="13457">You can create several diagrams for the same
    solution, each with a different level</st> <st c="13540">of detail.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="13550">Important note</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="13565">Diagramming is not over in the design phase.</st> <st c="13611">Rather,
    it is an ongoing process throughout the architecture life cycle.</st> <st c="13684">Regularly
    updating and reviewing diagrams ensures that they accurately reflect the current
    state of</st> <st c="13784">the architecture.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="13801">Diagrams are an essential</st> <st c="13828">part of the architecture
    documentation process.</st> <st c="13876">They serve as a reference for the design
    decisions, component interactions, and rationale behind the chosen architecture.</st>
    <st c="13998">However, documentation is not limited to diagrams.</st> <st c="14049">Creating
    thorough documentation is invaluable for future maintenance, troubleshooting,
    and knowledge transfer within the team or organization.</st> <st c="14192">This
    book will not cover in-depth documentation because it is a practical book focused
    on</st> <st c="14282">hands-on building.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14300">Exploring the Well-Architected Framework</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '<st c="14341">AWS provides a</st> <st c="14357">set of best</st> <st c="14368">practices
    and design principles known as the</st> **<st c="14414">Well-Architected Framework</st>**
    <st c="14440">(</st>**<st c="14442">WAR</st>**<st c="14445">), (</st>[<st c="14450">https://aws.amazon.com/architecture/well-architected/</st>](https://aws.amazon.com/architecture/well-architected/)<st
    c="14504">).</st> <st c="14508">This framework covers six pillars: operational
    excellence, security, reliability, performance efficiency, cost optimization,</st>
    <st c="14633">and sustainability.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14652">Cloud architects use this framework to ensure that their solutions
    align with AWS best practices, usually after they are built, but it can also be
    used during the design phase.</st> <st c="14830">Although the WAR could be a chapter
    of its own, we just want you to be aware of it for now, and see how we later refer
    to it while building the projects throughout</st> <st c="14994">this book.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15004">Now that we’ve covered the designing and planning phase, let’s
    delve into the implementation phase.</st> <st c="15105">You will explore multiple
    tools while getting some</st> <st c="15156">hands-on experience.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15176">Getting started with AWS Console</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="15209">The AWS Console is</st> <st c="15229">a web-based user interface
    provided by AWS that allows users to access and manage various AWS services and
    resources</st> <st c="15345">through a</st> **<st c="15356">Graphical User</st>**
    **<st c="15371">Interface</st>** <st c="15380">(</st>**<st c="15382">GUI</st>**<st
    c="15385">).</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15388">The AWS Console is designed to be user-friendly and accessible
    from any web browser, allowing users to manage their AWS resources from anywhere
    with an internet connection.</st> <st c="15562">It provides a visual representation
    of AWS services and resources, making it easier for users to understand and interact
    with the</st> <st c="15692">AWS ecosystem.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15706">Using the Console</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="15724">During this section, you will</st> <st c="15755">deploy an EC2
    instance, which is an AWS</st> <st c="15795">virtual machine.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15811">To use the Console, you must have an AWS account.</st> <st c="15862">The
    creation process of an AWS account is outside the scope of this book, but you
    can find all the necessary information on the AWS website</st> <st c="16002">at</st>
    [<st c="16005">https://aws.amazon.com/free</st>](https://aws.amazon.com/free)<st
    c="16032">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16033">Important note</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16048">Every example in this book assumes that you have a standalone
    AWS account that is not part of</st> <st c="16143">AWS Organizations.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16161">Let’s</st> <st c="16168">get started:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16180">The first step to access the AWS Console is to navigate</st> <st
    c="16237">to</st> [<st c="16240">https://console.aws.amazon.com/</st>](https://console.aws.amazon.com/)<st
    c="16271">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="16272">You will be greeted by a login screen like the one shown in</st>
    *<st c="16333">Figure 1</st>**<st c="16341">.2</st>*<st c="16343">.</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.2 – AWS Console login screen](img/B22051_01_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="16761">Figure 1.2 – AWS Console login screen</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16798">If you are using</st> <st c="16816">a root user, insert the email
    of your user followed by the password.</st> <st c="16885">If you are using an
    IAM user, you will also need to input the 12-digit</st> <st c="16956">account
    ID.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="16967">Upon successful login, you will see the AWS Console home page,
    as shown in</st> *<st c="17043">Figure 1</st>**<st c="17051">.3</st>*<st c="17053">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.3 – Console Home](img/B22051_01_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="17253">Figure 1.3 – Console Home</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17278">Sections worth highlighting for this figure are</st> <st c="17327">as
    follows:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17338">The</st> **<st c="17343">Search</st>** <st c="17349">bar at the
    top, which you can use to search for a</st> <st c="17400">specific service.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="17417">The AWS Region you are currently managing shows at the top-right
    corner; it’s</st> **<st c="17496">N.</st> <st c="17499">Virginia</st>** <st c="17507">in</st>
    <st c="17511">this case.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="17521">The user or role you are currently logged in as, which is also
    in the top-right corner, hidden under the</st> <st c="17627">red square.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="17638">The recently</st> <st c="17651">visited section, which will be
    empty if you haven’t opened the AWS</st> <st c="17719">Console before.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="17734">Important note</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17749">Why are the role and account ID hidden under a red square in</st>
    *<st c="17811">Figure 1</st>**<st c="17819">.3</st>*<st c="17821">? Although AWS
    account IDs, users, and roles are not considered sensitive, it’s an AWS best practice
    not to publicly</st> <st c="17938">disclose them.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="17952">Navigate to the EC2 service console.</st> <st c="17990">To do
    this, enter</st> `<st c="18008">ec2</st>` <st c="18011">in the search bar and
    select</st> **<st c="18041">EC2</st>**<st c="18044">, as shown in</st> *<st c="18058">Figure
    1</st>**<st c="18066">.4</st>*<st c="18068">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.4 – Search for the EC2 service using the AWS Console](img/B22051_01_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="18198">Figure 1.4 – Search for the EC2 service using the AWS Console</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="18259">To launch the simplest possible virtual machine, without any customization,
    select</st> **<st c="18343">Launch instance</st>**<st c="18358">, as shown in</st>
    *<st c="18372">Figure 1</st>**<st c="18380">.5</st>*<st c="18382">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.5 – EC2 dashboard](img/B22051_01_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="18713">Figure 1.5 – EC2 dashboard</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="18739">In the following</st> <st c="18757">menu,</st> **<st c="18763">Launch
    an instance</st>**<st c="18781">, select</st> **<st c="18790">Proceed without
    a key pair (Not recommended)</st>**<st c="18834">, from the</st> **<st c="18845">Key
    pair name</st>** <st c="18858">drop-down menu.</st> <st c="18875">Lastly, select</st>
    **<st c="18890">Launch instance</st>** <st c="18905">again, this time on the</st>
    <st c="18930">right menu.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '<st c="18941">Navigate to your running instances.</st> <st c="18978">You can
    do this by selecting Instances on the EC2 left menu or by navigating to</st> [<st
    c="19058">https://console.aws.amazon.com/ec2/#Instances</st>](https://console.aws.amazon.com/ec2/#Instances)<st
    c="19103">. You should see something similar to</st> *<st c="19141">Figure 1</st>**<st
    c="19149">.6</st>*<st c="19151">: a running EC2 instance with a funny-looking
    instance ID and some</st> <st c="19219">other attributes.</st>'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.6 – EC2 instance status](img/B22051_01_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="19555">Figure 1.6 – EC2 instance status</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19587">This is not a very useful instance because you cannot connect
    to it.</st> <st c="19657">The reason for that is you that did not select a key
    pair.</st> <st c="19716">This was just a simple demo to show you how the AWS</st>
    <st c="19768">Console works.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19782">You can terminate the instance by selecting</st> **<st c="19827">Terminate
    (delete) instance</st>**<st c="19854">, as shown in</st> *<st c="19868">Figure
    1</st>**<st c="19876">.7</st>*<st c="19878">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.7 – Terminate EC2 instance using the AWS Console](img/B22051_01_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="20220">Figure 1.7 – Terminate EC2 instance using the AWS Console</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20277">While the AWS Console is a convenient way to manage and troubleshoot
    AWS resources, you can probably guess some of its drawbacks.</st> <st c="20408">Imagine
    you had to create one hundred of these EC2 instances, or a thousand.</st> <st
    c="20485">It would take you a very long time, especially if you had to configure
    specific parameters, such as the ones you skipped during the</st> <st c="20617">previous
    guide.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20632">AWS provides</st> <st c="20645">command-line tools and SDKs for
    programmatic access and automation of AWS services that address</st> <st c="20742">these
    drawbacks.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20758">Important note</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20773">It is not recommended to perform actions in your AWS account using
    the root credentials.</st> <st c="20863">We strongly recommend that you don’t
    use the root user for your everyday tasks and that you follow the root user best
    practices for your AWS account, which can be found</st> <st c="21032">at</st>
    [<st c="21035">https://docs.aws.amazon.com/IAM/latest/UserGuide/root-user-best-practices.html</st>](https://docs.aws.amazon.com/IAM/latest/UserGuide/root-user-best-practices.html)<st
    c="21113">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21114">It’s recommended that before you advance into the next section,
    you navigate through the AWS Console a little more to get accustomed</st> <st
    c="21248">to it.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21254">Navigating AWS CLI and AWS SDK</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="21285">The AWS CLI and AWS SDK are programmatic tools to access and manage
    AWS services.</st> <st c="21368">In this section, you will dive deeper into each
    of these, and execute them in your</st> <st c="21451">own environment.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21467">AWS CLI</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="21475">The AWS CLI is a</st> <st c="21493">unified tool by AWS that allows
    you to interact with and manage AWS services from a command line such as macOS
    terminal or Windows Command Prompt.</st> <st c="21640">It provides a convenient
    and scriptable way to automate and control various AWS resources</st> <st c="21730">and
    operations.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21745">It’s a CLI tool, so it requires an installation process.</st>
    <st c="21803">This differs per operating system but it is well-documented by AWS
    (</st>[<st c="21871">https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html</st>](https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html)<st
    c="21949">).</st> <st c="21953">Besides standalone actions, it can be integrated
    with other CLI scripts or automation tools you already have.</st> <st c="22063">For
    example, a larger workflow that touches on various components such as local and</st>
    <st c="22147">remote processes.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="22164">Using the AWS CLI</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="22182">In this section, you will</st> <st c="22209">create an EC2 instance
    like in the previous section, this time using the</st> <st c="22282">AWS CLI.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="22290">Authentication works differently from the AWS Console.</st> <st
    c="22346">AWS CLI supports various authentication methods, including AWS access
    keys, IAM roles, and external credential providers.</st> <st c="22468">You can
    read all the details about the different types of security credentials on the
    AWS</st> <st c="22558">website:</st> [<st c="22567">https://docs.aws.amazon.com/IAM/latest/UserGuide/security-creds.html</st>](https://docs.aws.amazon.com/IAM/latest/UserGuide/security-creds.html)<st
    c="22635">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="22636">In this section, we will focus on AWS</st> <st c="22675">access
    keys.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="22687">If you are using the root user or an IAM user, by default, your
    user does not have access keys enabled.</st> <st c="22792">Using the root user
    is not recommended.</st> <st c="22832">However, you can create access keys for
    it.</st> <st c="22876">The process is described on the AWS</st> <st c="22912">website:</st>
    [<st c="22921">https://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user_manage_add-key.html</st>](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-user_manage_add-key.html)<st
    c="23002">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="23003">Follow these steps to create a new</st> <st c="23039">IAM user:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="23048">Navigate to IAM using the</st> <st c="23075">console (</st>[<st
    c="23084">https://us-east-1.console.aws.amazon.com/iam/home?region=us-east-1#/users</st>](https://us-east-1.console.aws.amazon.com/iam/home?region=us-east-1#/users)<st
    c="23158">).</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="23161">Select</st> **<st c="23169">Create User</st>**<st c="23180">,
    and give it</st> <st c="23194">a username.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="23205">From the</st> **<st c="23215">Set permissions</st>** <st c="23230">menu,
    select</st> **<st c="23244">Attach policies directly</st>**<st c="23268">, then
    find and select</st> **<st c="23291">PowerUserAccess</st>**<st c="23306">. Finally,</st>
    <st c="23317">click</st> **<st c="23323">Next</st>**<st c="23327">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="23328">Click</st> **<st c="23335">Create user</st>**<st c="23346">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="23347">Your user should now show in the list of users.</st> <st c="23396">To
    create access keys for this user, follow</st> <st c="23440">these steps:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="23452">Select your newly</st> <st c="23471">created user.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="23484">Navigate to the</st> **<st c="23501">Security credentials</st>**
    <st c="23521">tab, and select</st> **<st c="23538">Create</st>** **<st c="23545">access
    key</st>**<st c="23555">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="23556">On the</st> **<st c="23564">Use case</st>** <st c="23572">menu,
    select</st> **<st c="23586">Command Line Interface (CLI)</st>**<st c="23614">,
    accept the confirmation message, and</st> <st c="23653">select</st> **<st c="23660">Next</st>**<st
    c="23664">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="23665">On the following menu, click</st> **<st c="23695">Create</st>**
    **<st c="23702">access key</st>**<st c="23712">.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="23713">Before navigating away from this page, note your access and secret</st>
    <st c="23781">access keys.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="23793">AWS also has these</st> <st c="23813">processes For all possible
    permutations well documented on</st> <st c="23872">their website:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="23886">Creating an IAM</st> <st c="23903">user:</st> [<st c="23909">https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html#id_users_create_console</st>](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html#id_users_create_console)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="24002">Managing access keys for IAM</st> <st c="24032">users:</st> [<st
    c="24039">https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html</st>](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="24119">Open your preferred local CLI tool and set the following variables
    with your own keys.</st> <st c="24207">This allows your terminal to interact with
    your</st> <st c="24255">AWS account:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: $ aws ec2 describe-instances
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: $ aws ec2 run-instances --image-id ami-0c101f26f147fa7fd
  prefs: []
  type: TYPE_NORMAL
- en: --instance-type t2.micro
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"Groups": [],'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"Instances": ['
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '"AmiLaunchIndex": 0, <st c="25390">"ImageId": "ami-0c101f26f147fa7fd",</st>
    "InstanceId": "i-0a65cf3ecaec728a8", <st c="25463">"InstanceType": "t2.micro",</st>
    "LaunchTime": "2024-03-24T10:47:25+00:00",'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '"Monitoring": {'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '"State": "disabled"'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '},'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '"Placement": {'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '"AvailabilityZone": "us-east-1a",'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '"GroupName": "",'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '"Tenancy": "default"'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '},'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '"PrivateDnsName": "ip-172-31-38-84.ec2.internal",'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '###OUTPUT OMMITED###'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: $ aws ec2 describe-instances <st c="25944">--filters "Name=instance-type,</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="25974">Values=t2.micro"</st> --query "Reservations[].Instances[].InstanceId"
  prefs: []
  type: TYPE_NORMAL
- en: '['
  prefs: []
  type: TYPE_NORMAL
- en: '"i-0a65cf3ecaec728a8"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: $ aws ec2 terminate-instances <st c="26240">describe</st> command again to make
    sure the instance is no longer running.
  prefs: []
  type: TYPE_NORMAL
- en: <st c="26310">Exploring the AWS CLI</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="26332">Explore the</st> <st c="26345">AWS CLI further on your own.</st>
    <st c="26374">The syntax is the same for</st> <st c="26401">every service:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: <st c="26469">Here’s what each of these</st> <st c="26496">commands mean:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="26510">The base call to the</st> `<st c="26532">aws</st>` <st c="26535">program.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="26544">The top-level</st> `<st c="26559">command</st>` <st c="26566">typically
    corresponds to an AWS service supported by the</st> <st c="26624">AWS CLI.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="26632">The</st> `<st c="26637">subcommand</st>` <st c="26647">specifies
    which operation</st> <st c="26674">to perform.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="26685">Important note</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="26700">You created an IAM user with</st> `<st c="26730">PowerUserAccess</st>`
    <st c="26745">permissions.</st> <st c="26759">This grants full access to AWS services
    and resources, but does not allow the management of users or groups.</st> <st
    c="26868">In production scenarios, you can scope down your user access to a narrower
    set</st> <st c="26947">of permissions.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="26962">A handy feature of AWS CLI is the</st> `<st c="26997">help</st>`
    <st c="27001">feature.</st> <st c="27011">You can get help with any command using
    this.</st> <st c="27057">To do so, simply type</st> `<st c="27079">help</st>`
    <st c="27083">at the end of a command name.</st> <st c="27114">Execute the following
    commands.</st> <st c="27146">The result will be a very verbose description of
    everything available with</st> <st c="27221">those commands:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: <st c="27285">If navigating command by command is not your thing, you can also
    find the specific syntax for each</st> <st c="27384">service in AWS CLI Command
    Reference (</st>[<st c="27423">https://docs.aws.amazon.com/cli/latest/</st>](https://docs.aws.amazon.com/cli/latest/)<st
    c="27463">), but you will see and use more of it in the</st> <st c="27510">following
    chapters.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="27529">AWS SDK</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="27537">The AWS SDKs are a</st> <st c="27556">collection of open-source
    libraries that provide programmatic access to AWS services from various programming
    languages including Java, Python, Node.js, .NET, Ruby, Go, PHP, and others.</st>
    <st c="27743">These SDKs allow developers to build applications that interact
    with AWS resources and services directly, without the need for low-level AWS</st>
    <st c="27884">service APIs.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="27897">The AWS SDKs abstract away the complexities of making authenticated
    HTTP/HTTPS requests to AWS services, handling retries and error handling, and
    parsing the responses from AWS services.</st> <st c="28085">They provide a higher-level,
    language-specific interface that makes it easier for developers to integrate AWS
    services into</st> <st c="28209">their applications.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="28228">This are considered an advanced concept and you won’t see much
    of it in this book.</st> <st c="28312">It is more often used by application developers.</st>
    <st c="28361">If you are interested in understanding the syntax to create an EC2
    instance using the SDK for Python, it’s available under the</st> *<st c="28488">Learn
    the basics</st>* <st c="28504">section</st> <st c="28513">at</st> [<st c="28516">https://docs.aws.amazon.com/code-library/latest/ug/python_3_ec2_code_examples.html</st>](https://docs.aws.amazon.com/code-library/latest/ug/python_3_ec2_code_examples.html)<st
    c="28598">.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="28599">From manual actions using the console to semi-automated ones such
    as the AWS CLI, you’ve not yet</st> <st c="28697">witnessed the full potential
    of automation.</st> <st c="28741">In the next section, you will learn how to scale
    your deployments</st> <st c="28807">with IaC.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="28816">Understanding IaC</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="28834">IaC is an approach</st> <st c="28854">to provision and manage
    resources such as cloud infrastructure.</st> <st c="28918">It allows you to define
    and deploy your resources using human-readable definition files</st> <st c="29006">or
    code.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="29014">Instead of manually configuring resources through the AWS Console
    or CLI tools as you saw in previous sections, IaC allows a declarative specification
    of the desired infrastructure state.</st> <st c="29203">In our context, that’s
    the AWS cloud.</st> <st c="29241">This means compute instances, storage, networking,
    security groups, and other</st> <st c="29319">AWS services.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="29332">By treating your IaC, you will get</st> <st c="29368">multiple
    benefits:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '**<st c="29386">Configuration consistency</st>**<st c="29412">: IaC</st> <st
    c="29419">promotes the concept of immutable infrastructure, whereby infrastructure
    components are treated as disposable and replaceable rather than being manually
    modified.</st> <st c="29582">This approach ensures consistency, reduces configuration
    drift, and simplifies the process of scaling or</st> <st c="29687">updating infrastructure.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="29711">Version control and collaboration</st>**<st c="29745">: IaC
    templates and code can be stored in version control systems such as Git, enabling
    collaboration, code reviews, and tracking of changes to the infrastructure definitions.</st>
    <st c="29922">This promotes best practices in infrastructure management and facilitates
    knowledge sharing</st> <st c="30014">among teams.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="30026">Automated deployments</st>**<st c="30048">: IaC templates and
    code can be integrated with</st> **<st c="30097">Continuous Integration and Continuous
    Deployment</st>** <st c="30145">(</st>**<st c="30147">CI/CD</st>**<st c="30152">)
    pipelines, enabling</st> <st c="30175">automated deployments and updates.</st>
    <st c="30210">This reduces manual effort, minimizes human errors, and ensures
    consistent and repeatable deployments across different environments (e.g., development,
    staging,</st> <st c="30371">and production).</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="30387">Infrastructure testing and validation</st>**<st c="30425">:
    IaC templates and code can be tested and validated before deployment, ensuring
    that the defined infrastructure meets the desired specifications and adheres to
    organizational policies and</st> <st c="30615">best practices.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="30630">Cost optimization and resource management</st>**<st c="30672">:
    By treating infrastructure as code, organizations can more easily track and manage
    their AWS resources, enabling better cost optimization and resource utilization
    strategies.</st> <st c="30850">You will no longer forget</st> <st c="30876">that
    one virtual machine</st> <st c="30901">running somewhere.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="30919">There are multiple IaC tools.</st> <st c="30950">AWS provides
    its own native IaC tools such as AWS CloudFormation, which allows users to define
    their infrastructure resources using JSON or YAML templates.</st> <st c="31106">It
    also provides the</st> <st c="31127">AWS</st> **<st c="31131">Cloud Development
    Kit</st>** <st c="31152">(</st>**<st c="31154">CDK</st>**<st c="31157">).</st>
    <st c="31161">This is not to be confused with AWS SDK, which offers a higher-level
    abstraction over CloudFormation, enabling developers to define AWS constructs
    using familiar programming languages such as TypeScript, Python, Java,</st> <st
    c="31379">and C#.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="31386">Beyond AWS-native tools, there are also plenty of third-party
    IaC solutions such as</st> **<st c="31471">Terraform</st>**<st c="31480">. Terraform</st>
    <st c="31491">is cloud-agnostic; it supports a wide range of cloud providers,
    including AWS, and provides a consistent workflow for managing infrastructure
    across multiple platforms.</st> <st c="31661">It is one of the most well-known</st>
    <st c="31694">IaC tools.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="31704">Choosing an IaC tool</st> <st c="31726">boils down to personal
    preference, existing skills, and specific features each tool can offer.</st> <st
    c="31821">In this book, you will get hands-on experience with CloudFormation and
    Terraform.</st> <st c="31903">However, if you are interested in this topic, AWS
    offers prescriptive guidance on how to choose an IaC tool</st> <st c="32011">at</st>
    [<st c="32014">https://docs.aws.amazon.com/prescriptive-guidance/latest/choose-iac-tool/introduction.html</st>](https://docs.aws.amazon.com/prescriptive-guidance/latest/choose-iac-tool/introduction.html)<st
    c="32104">.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="32105">Using CloudFormation</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="32126">In this section, you</st> <st c="32147">will create an EC2 instance</st>
    <st c="32176">using CloudFormation.</st> <st c="32198">This is an introductory
    section; it won’t dive deep into all CloudFormation syntax</st> <st c="32281">and
    features.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="32294">To get started, follow</st> <st c="32318">these steps:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="32330">Create the following file in your local environment; it is a YAML
    template to create one EC2 instance of the specified AMI and</st> `<st c="32458">t2.micro</st>`
    <st c="32466">size:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="32594">Notice how human-readable CloudFormation is in YAML format.</st>
    <st c="32655">This is one of</st> <st c="32670">its advantages.</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="32685">Navigate to CloudFormation using the AWS Console at</st> [<st
    c="32738">https://us-east-1.console.aws.amazon.com/cloudformation</st>](https://us-east-1.console.aws.amazon.com/cloudformation)
    <st c="32793">and select</st> **<st c="32805">Create stack</st>**<st c="32817">.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="32818">Select</st> `<st c="32884">ec2.yml</st>`<st c="32891">, and</st>
    <st c="32897">select</st> **<st c="32904">Next</st>**<st c="32908">.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="32909">Give</st> <st c="32915">the stack</st> <st c="32925">a name.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="32932">Skip through all the options and deploy</st> <st c="32973">the
    stack.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="32983">At the end of the deployment process, the status of your stack
    should show</st> `<st c="33152">us-east-1</st>` <st c="33161">region.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="33169">You can verify the EC2 you just created by navigating to the EC2
    service.</st> <st c="33244">Confirm that it has the correct size</st> <st c="33281">and
    AMI.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="33289">Don’t worry if you don’t fully understand the whole process.</st>
    <st c="33351">CloudFormation is a world of its own with specific syntax and features.</st>
    <st c="33423">Navigate through your stack details; you will be able to find many
    characteristics, such as when was it created, by whom it was created, and which
    resources were created and in what order, as well as more advanced concepts such
    as parameters</st> <st c="33665">and outputs.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="33677">To learn more about CloudFormation, you can use official AWS</st>
    <st c="33739">documentation:</st> [<st c="33754">https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/Welcome.html</st>](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/Welcome.html)<st
    c="33829">.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="33830">Before moving on, to stop you from incurring extra costs, don’t
    forget to delete your EC2\.</st> <st c="33922">To delete all</st> <st c="33936">stack’s
    resources, select</st> <st c="33962">your stack and</st> <st c="33977">click</st>
    **<st c="33983">Delete</st>**<st c="33989">.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="33990">Using Terraform</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="34006">You will now create</st> <st c="34027">another EC2 instance, this</st>
    <st c="34054">time using Terraform.</st> <st c="34076">This section assumes that
    you already have your terminal configured with your AWS credentials the exercise
    in the previous</st> *<st c="34199">AWS</st>* *<st c="34203">CLI</st>* <st c="34206">section.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="34215">Here’s how to</st> <st c="34230">do it:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="34236">Create a file in your local workstation, in any directory, and
    name</st> <st c="34305">it</st> `<st c="34308">ec2.tf</st>`<st c="34314">.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="34315">Populate it with the following code that creates an EC2 of the
    smallest instance type,</st> `<st c="34403">t2.micro</st>`<st c="34411">, in</st>
    `<st c="34416">us-east-1</st>`<st c="34425">, using the AMI ID.</st> <st c="34445">This
    effectively means using Amazon</st> <st c="34481">Linux 2023:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="34622">Notice that the</st> **<st c="34639">HashiCorp Configuration Language</st>**
    <st c="34671">(</st>**<st c="34673">HCL</st>**<st c="34676">) code is still human-readable,
    albeit</st> <st c="34716">perhaps a bit less so than the</st> <st c="34747">CloudFormation
    YAML.</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="34767">Important note</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="34782">AMI IDs are different in each region.</st> <st c="34821">If you
    are using a different region than</st> `<st c="34862">us-east-1</st>`<st c="34871">,
    and you want to use Amazon Linux 2023, you will need to find the corresponding</st>
    <st c="34952">AMI ID.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="34959">To execute Terraform code, you need to have it installed.</st>
    <st c="35018">The installation is beyond the scope of this book.</st> <st c="35069">It
    differs per operating system but it’s a straightforward process that you can find
    good documentation about on the HashiCorp</st> <st c="35196">website (</st>[<st
    c="35205">https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli</st>](https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli)<st
    c="35285">).</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="35288">When you have it installed, execute the following commands in
    the same directory where you created your</st> `<st c="35393">ec2.tf</st>` <st
    c="35399">file.</st> <st c="35406">They initiate Terraform in your environment</st>
    <st c="35450">and apply your previously created template to your AWS account,
    effectively</st> <st c="35526">creating</st> <st c="35535">the resources:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="35584">You will be prompted to confirm.</st> <st c="35618">If your execution
    is successful, it will look like the following</st> <st c="35683">shortened output:</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="36958">You can use your AWS Console to navigate through the EC2 that
    was created.</st> <st c="37034">Make sure you verify in the correct region.</st>
    <st c="37078">To delete all the resources, execute the following</st> <st c="37129">Terraform
    command:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="37167">Terraform offers</st> <st c="37184">many more functionalities,
    such</st> <st c="37217">as dry-runs using</st> `<st c="37235">terraform plan</st>`<st
    c="37249">, or visualizations of the deployed resources through</st> `<st c="37303">terraform
    state list</st>`<st c="37323">. You can read more about these in the Terraform
    official documentation</st> <st c="37395">at</st> [<st c="37398">https://developer.hashicorp.com/terraform/cli/commands</st>](https://developer.hashicorp.com/terraform/cli/commands)<st
    c="37452">.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="37453">Take a look at a practical example of why IaC is useful.</st>
    <st c="37511">Let’s say you needed to create 100 of these machines.</st> <st c="37565">You
    could alter the previous code to</st> <st c="37602">the following:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: <st c="37758">Do not run this example because it can incur high costs.</st>
    <st c="37815">However, notice how easy it is compared to</st> <st c="37858">doing
    the same task using the</st> <st c="37888">AWS Console.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="37900">Summary</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="37908">In this chapter, you learned what it means to architect on AWS.</st>
    <st c="37973">It’s not only about deploying AWS services but also about gathering
    different types of requirements, contrasting those to known patterns and reference
    architectures, choosing different services, and documenting</st> <st c="38184">it
    all.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="38191">You also explored the various methods and tools available for
    deploying and interacting with AWS services after you have your design.</st> <st
    c="38326">The AWS Console provides a user-friendly graphical interface, while
    the AWS CLI and SDKs enable programmatic access and automation.</st> <st c="38458">Additionally,
    you were exposed to various IaC techniques such as Terraform, CloudFormation,
    and AWS CDK, which allow you to define and manage your AWS infrastructure</st>
    <st c="38624">using code.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="38635">By understanding these different approaches, you can choose the
    most appropriate method based on your requirements and skill level, as well as
    the complexity of your AWS deployments.</st> <st c="38819">Whether you prefer
    a visual interface, command-line tools, programmatic access, or IaC, AWS offers
    a range of options to meet your needs and streamline your</st> <st c="38976">cloud
    operations.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="38993">In the next chapter, you will build a personal website using the</st>
    <st c="39059">AWS Console.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE

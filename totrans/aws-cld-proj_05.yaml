- en: <st c="0">5</st>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="0">5</st>
- en: <st c="2">Implementing an Image Analyzer to Detect Photo Friendliness</st>
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="2">实现一个图像分析器以检测照片的友好度</st>
- en: <st c="61">This chapter is</st> <st c="77">focused on the value that</st> **<st
    c="104">machine learning</st>** <st c="120">(</st>**<st c="122">ML</st>**<st c="124">)
    can bring to your applications.</st> <st c="159">You are going to build another
    serverless application, but this time, you will take advantage of AWS-native ML
    services instead of complex</st> <st c="298">programming logic.</st>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="61">本章聚焦于</st> <st c="77">**机器学习**</st> <st c="104">（**ML**）</st> <st
    c="120">能够为你的应用带来的价值。</st> <st c="159">你将构建另一个无服务器应用，但这次，你将利用 AWS 原生的 ML 服务，而不是复杂的</st>
    <st c="298">编程逻辑。</st>
- en: <st c="316">You are going to build your application using Python and architecture</st>
    <st c="387">using Terraform.</st>
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="316">你将使用 Python 构建你的应用，并使用 Terraform 构建架构。</st>
- en: <st c="403">This chapter covers the following main topics</st> <st c="450">in
    order:</st>
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="387">本章涵盖以下主要内容：</st> <st c="450">按顺序：</st>
- en: <st c="459">What you are going to build – a photo</st> <st c="498">quality analyzer</st>
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="459">你将构建的内容 – 一个照片</st> <st c="498">质量分析器</st>
- en: <st c="514">How you are going to build it – using serverless</st> <st c="564">AWS
    services</st>
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="514">你将如何构建它 – 使用无服务器</st> <st c="564">AWS 服务</st>
- en: <st c="576">Building it – using Terraform</st> <st c="607">and Python</st>
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="576">构建它 – 使用 Terraform</st> <st c="607">和 Python</st>
- en: <st c="617">How to improve the application – using ML, advanced security features,
    and custom</st> <st c="700">domain names</st>
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="617">如何改进应用程序 – 使用机器学习、先进的安全功能和自定义</st> <st c="700">域名</st>
- en: <st c="712">By the end of this chapter, you will have your own application that
    uses ML to identify if a photo is professional-looking enough for a profile picture.</st>
    <st c="866">This is an introduction to more advanced ML applications that you
    will see in</st> [*<st c="944">Chapter 7</st>*](B22051_07.xhtml#_idTextAnchor203)<st
    c="953">.</st>
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="712">在本章结束时，你将拥有一个自己的应用，使用机器学习识别照片是否足够专业，适合作为个人资料照片。</st> <st c="866">这是更高级机器学习应用的介绍，你将在</st>
    [*<st c="944">第七章</st>*](B22051_07.xhtml#_idTextAnchor203)<st c="953">中看到。</st>
- en: <st c="954">Technical requirements</st>
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="954">技术要求</st>
- en: <st c="977">To implement your own photo analyzer following these chapter instructions,
    you will need access to an</st> <st c="1080">AWS account.</st>
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="977">为了根据本章的指引实现你自己的照片分析器，你需要一个</st> <st c="1080">AWS 账户。</st>
- en: <st c="1092">This chapter has a dedicated folder in the GitHub repository of
    this book, where you will find the code snippets required to follow</st> <st c="1225">along:</st>
    [<st c="1232">https://github.com/PacktPublishing/AWS-Cloud-Projects/tree/main/chapter5/code</st>](https://github.com/PacktPublishing/AWS-Cloud-Projects/tree/main/chapter5/code)<st
    c="1309">.</st>
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1092">本章在本书的 GitHub 仓库中有一个专用文件夹，你可以在其中找到跟随本章所需的代码片段：</st> [<st c="1232">https://github.com/PacktPublishing/AWS-Cloud-Projects/tree/main/chapter5/code</st>](https://github.com/PacktPublishing/AWS-Cloud-Projects/tree/main/chapter5/code)<st
    c="1309">。</st>
- en: <st c="1310">Scenario</st>
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="1310">场景</st>
- en: <st c="1319">You work for a</st> <st c="1335">marketing company.</st> <st c="1354">Your
    company receives customers’ information and photos, curates them, and creates
    social media profiles</st> <st c="1459">for them.</st>
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1319">你为一家</st> <st c="1335">营销公司工作。</st> <st c="1354">你的公司接收客户的信息和照片，整理它们，并为客户创建社交媒体个人资料</st>
    <st c="1459">。</st>
- en: <st c="1468">However, your clients complain that they are not getting enough
    hits.</st> <st c="1539">After a study, the data science team attributes the lack
    of hits to</st> <st c="1607">unprofessional-looking photos.</st>
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1468">然而，你的客户抱怨他们没有获得足够的点击量。</st> <st c="1539">经过研究，数据科学团队将点击量不足归因于</st>
    <st c="1607">不专业的照片。</st>
- en: <st c="1637">You are tasked to create a system that identifies if a photo is
    professional-looking enough before it is uploaded to</st> <st c="1755">social
    media.</st>
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1637">你的任务是创建一个系统，在照片上传到</st> <st c="1755">社交媒体之前，识别它是否足够专业。</st>
- en: <st c="1768">Requirements</st>
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="1768">要求</st>
- en: <st c="1781">You want to build something that</st> <st c="1814">evaluates if
    a photo is professional-looking.</st> <st c="1861">But what does it mean to be
    professional-looking?</st> <st c="1911">You decide that professional-looking photos
    require the subject to be smiling and have their</st> <st c="2004">eyes open.</st>
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1781">你想构建一个可以</st> <st c="1814">评估照片是否专业的应用。</st> <st c="1861">但是，什么是“专业”的标准呢？</st>
    <st c="1911">你决定，专业的照片要求主体微笑并且眼睛睁开。</st> <st c="2004">眼睛睁开。</st>
- en: <st c="2014">How can you identify these characteristics in a photo?</st> <st
    c="2070">It is not an easy task to program logic that identifies specific characteristics
    in photos, especially when photos can come in so many file formats.</st> <st c="2219">An
    ML model has the best odds of yielding</st> <st c="2261">good results.</st>
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2014">你如何在照片中识别这些特征？</st> <st c="2070">编写能够识别照片中特定特征的逻辑并非易事，尤其是照片可能有多种文件格式。</st>
    <st c="2219">一个机器学习（ML）模型最有可能取得</st> <st c="2261">良好的结果。</st>
- en: <st c="2274">Because of the security compliance standards your company is subject
    to, your solution should not store</st> <st c="2379">personal information.</st>
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2274">由于贵公司所受的安全合规标准，你的解决方案不应存储</st> <st c="2379">个人信息。</st>
- en: <st c="2400">This application, unlike the others you built in previous chapters,
    does not require a user interface.</st> <st c="2504">It does, however, require
    that it integrates with existing applications at your</st> <st c="2584">marketing
    company.</st>
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2400">此应用程序与之前在章节中构建的其他应用程序不同，它不需要用户界面。</st> <st c="2504">但它需要与现有的</st>
    <st c="2584">营销公司应用程序集成。</st>
- en: <st c="2602">All of these requirements can be translated into functional, non-functional,
    data, and</st> <st c="2690">technical requirements.</st>
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2602">所有这些需求可以转化为功能性、非功能性、数据和</st> <st c="2690">技术需求。</st>
- en: <st c="2713">Functional requirements</st>
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="2713">功能需求</st>
- en: <st c="2737">Functional</st> <st c="2748">requirements define the specific features,
    functionalities, and capabilities that the solution must provide, which, in this
    case, are</st> <st c="2883">the following:</st>
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2737">功能性</st> <st c="2748">需求定义了解决方案必须提供的具体功能、特性和能力，在这种情况下，具体如下：</st>
    <st c="2883">以下内容：</st>
- en: <st c="2897">Ability to recognize if a photo is good enough for a</st> <st c="2951">profile
    picture</st>
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="2897">能够识别照片是否足够好，适合用作</st> <st c="2951">头像</st>
- en: <st c="2966">Interactable with</st> <st c="2985">other applications</st>
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="2966">可与</st> <st c="2985">其他应用程序交互</st>
- en: <st c="3003">Support</st> <st c="3011">for multiple photo formats:</st> `<st
    c="3040">.</st>``<st c="3041">png</st>`<st c="3045">,</st> `<st c="3047">.jpeg</st>`
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="3003">支持</st> <st c="3011">多种照片格式：</st> `<st c="3040">.</st>``<st c="3041">png</st>`<st
    c="3045">,</st> `<st c="3047">.jpeg</st>`
- en: <st c="3052">Non-functional requirements</st>
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="3052">非功能性需求</st>
- en: <st c="3080">Non-functional</st> <st c="3095">requirements define the qualitative
    attributes that the solution must provide, which, in this case, are</st> <st c="3200">the
    following:</st>
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3080">非功能性</st> <st c="3095">需求定义了解决方案必须提供的定性属性，在这种情况下，具体如下：</st> <st
    c="3200">以下内容：</st>
- en: <st c="3214">Highly-available</st>
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="3214">高可用性</st>
- en: <st c="3231">Low-cost</st>
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="3231">低成本</st>
- en: <st c="3240">Scalable – up to 20 requests</st> <st c="3270">per second</st>
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="3240">可扩展性 – 每秒最多支持20个请求</st> <st c="3270">每秒</st>
- en: <st c="3280">Data requirements</st>
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="3280">数据需求</st>
- en: <st c="3298">Data requirements</st> <st c="3316">define data sources, processing,
    governance, and compliance needs, which, in this case, is</st> <st c="3408">the
    following</st><st c="3421">:</st>
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3298">数据需求</st> <st c="3316">定义数据源、处理、治理和合规性需求，在这种情况下，具体如下：</st> <st
    c="3408">以下内容</st><st c="3421">：</st>
- en: <st c="3423">Must not store any</st> <st c="3442">personal data</st>
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="3423">不得存储任何</st> <st c="3442">个人数据</st>
- en: <st c="3455">Technical requirements</st>
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="3455">技术需求</st>
- en: <st c="3478">Technical requirements</st> <st c="3502">define specific technologies,
    programming languages, frameworks, and tools that the solution must use or integrate
    with, which, in this case, are</st> <st c="3648">the following:</st>
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3478">技术需求</st> <st c="3502">定义了解决方案必须使用或集成的具体技术、编程语言、框架和工具，在这种情况下，具体如下：</st>
    <st c="3648">以下内容：</st>
- en: <st c="3662">Must integrate with multiple other</st> <st c="3698">Python applications</st>
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="3662">必须与多个其他</st> <st c="3698">Python应用程序集成</st>
- en: <st c="3717">New infrastructure must be provisioned</st> <st c="3757">using
    Terraform</st>
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="3717">必须使用Terraform来提供</st> <st c="3757">新的基础设施</st>
- en: <st c="3772">The classification algorithm must</st> <st c="3807">use ML</st>
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="3772">分类算法必须</st> <st c="3807">使用机器学习（ML）</st>
- en: <st c="3813">Architecture patterns</st>
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="3813">架构模式</st>
- en: <st c="3835">Starting in the AWS</st> <st c="3856">Architecture Center, you
    can search for</st> `<st c="3896">image recognition</st>` <st c="3913">or</st>
    `<st c="3917">image classification</st>`<st c="3937">. The results, unfortunately,
    do not output any reference architecture.</st> <st c="4009">However, a prescriptive
    guidance document</st> <st c="4050">named</st> *<st c="4057">Image classification
    solutions on AWS</st>* <st c="4094">stands</st> <st c="4102">out (</st>[<st c="4107">https://docs.aws.amazon.com/prescriptive-guidance/latest/image-classification/introduction.html</st>](https://docs.aws.amazon.com/prescriptive-guidance/latest/image-classification/introduction.html)<st
    c="4203">).</st>
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3835">从 AWS 开始</st> <st c="3856">架构中心，你可以搜索</st> `<st c="3896">图像识别</st>`
    <st c="3913">或者</st> `<st c="3917">图像分类</st>`<st c="3937">。不幸的是，结果中并未输出任何参考架构。</st>
    <st c="4009">但是，一份指导性文档</st> <st c="4050">名为</st> *<st c="4057">AWS 上的图像分类解决方案</st>*
    <st c="4094">脱颖而出（</st>[<st c="4107">https://docs.aws.amazon.com/prescriptive-guidance/latest/image-classification/introduction.html</st>](https://docs.aws.amazon.com/prescriptive-guidance/latest/image-classification/introduction.html)<st
    c="4203">）。</st>
- en: <st c="4206">Although the focus of this document is to identify objects in images,
    it also applies to your use case.</st> <st c="4311">For the image analysis, AWS
    recommends you follow one of</st> <st c="4368">four approaches:</st>
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4206">虽然这份文档的重点是识别图像中的对象，但它也适用于你的用例。</st> <st c="4311">对于图像分析，AWS 建议你采用以下四种方法之一：</st>
- en: <st c="4384">Use a pre-trained managed solution, for example,</st> <st c="4434">Amazon
    Rekognition</st>
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="4384">使用预训练的托管解决方案，例如，</st> <st c="4434">Amazon Rekognition</st>
- en: <st c="4452">Fine-tune a managed solution, for example, Amazon Rekognition</st>
    <st c="4515">Custom Labels</st>
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="4452">调整托管解决方案，例如，Amazon Rekognition</st> <st c="4515">自定义标签</st>
- en: <st c="4528">Train a model using a no-code solution, for example, Amazon</st>
    <st c="4589">SageMaker Canvas</st>
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="4528">使用无代码解决方案训练模型，例如，Amazon</st> <st c="4589">SageMaker Canvas</st>
- en: <st c="4605">Manually</st> <st c="4614">train a model on</st> <st c="4632">your
    own</st>
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="4605">手动</st> <st c="4614">在你自己的模型上训练</st>
- en: <st c="4640">For each of these options, they detail benefits and drawbacks,
    such as flexibility, effort, and cost.</st> <st c="4743">You can contrast these
    with</st> <st c="4771">your requirements.</st>
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4640">针对每种选择，它们详细说明了灵活性、投入和成本等方面的优缺点。</st> <st c="4743">你可以与</st> <st
    c="4771">你的需求进行对比。</st>
- en: <st c="4789">Architecture</st>
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="4789">架构</st>
- en: <st c="4802">A possible agnostic</st> <st c="4823">architecture, applying what
    you have learned in previous chapters, looks like</st> *<st c="4901">Figure 5</st>**<st
    c="4909">.1</st>*<st c="4911">. Different applications connect to a frontend component,
    which handles connection termination, SSL certificates, and so on, and orchestrates
    and load balances backend connections where the submitted photos are parsed</st>
    <st c="5129">and analyzed.</st>
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4802">一个可能的不可知的</st> <st c="4823">架构，应用你在前几章学到的内容，看起来像</st> *<st c="4901">图
    5</st>**<st c="4909">.1</st>*<st c="4911">。不同的应用程序连接到前端组件，处理连接终止，SSL 证书等，并协调和负载平衡后端连接，提交的照片被解析</st>
    <st c="5129">和分析。</st>
- en: '![Figure 5.1 – Photo classification architecture](img/B22051_05_1.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.1 – 照片分类架构](img/B22051_05_1.jpg)'
- en: <st c="5233">Figure 5.1 – Photo classification architecture</st>
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5233">图 5.1 – 照片分类架构</st>
- en: '<st c="5279">A diagram</st> <st c="5290">using AWS services looks like the
    one in</st> *<st c="5331">Figure 5</st>**<st c="5339">.2</st>*<st c="5341">: a
    three-component diagram, with API Gateway,</st> <st c="5389">Lambda, and Rekognition.</st>
    <st c="5414">Different types of applications will connect to API Gateway using
    HTTPS, invoking a Lambda function, which queries Rekognition for image analysis
    and parses the</st> <st c="5575">response accordingly.</st>'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5279">使用 AWS 服务的图表看起来像</st> *<st c="5331">图 5</st>**<st c="5339">.2</st>*<st
    c="5341">：一个三组件图表，包括 API 网关，</st> <st c="5389">Lambda 和 Rekognition。</st> <st
    c="5414">不同类型的应用程序将通过 HTTPS 连接到 API 网关，调用 Lambda 函数，后者查询 Rekognition 进行图像分析，并相应地解析</st>
    <st c="5575">响应。</st>
- en: '![Figure 5.2 – Photo classification architecture on AWS](img/B22051_05_2.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.2 – AWS 上的照片分类架构](img/B22051_05_2.jpg)'
- en: <st c="5729">Figure 5.2 – Photo classification architecture on AWS</st>
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5729">图 5.2 – AWS 上的照片分类架构</st>
- en: <st c="5782">In the following section, you will find a detailed explanat</st><st
    c="5842">ion of why Rekognition is the better tool for this use case.</st> <st
    c="5904">For now,</st> <st c="5913">trust us.</st>
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5782">在接下来的部分，你将找到关于为什么 Rekognition 是这个用例更好工具的详细解释。</st> <st c="5842">现在，</st>
    <st c="5904">相信我们。</st>
- en: <st c="5922">In this architecture, you collapse the frontend and the backend
    in API Gateway</st> <st c="6002">and Lambda.</st>
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5922">在此架构中，你将前端和后端合并到 API Gateway</st> <st c="6002">和 Lambda 中。</st>
- en: <st c="6013">You might be asking yourself, “Why can’t I allow my consuming applications
    to int</st><st c="6095">eract with Rekognition directly?” You can’t do this for</st>
    <st c="6152">several reasons:</st>
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6013">你可能会问自己：“为什么我不能让我的消费应用程序直接与 Rekognition 交互？”你不能这样做的原因有：</st>
- en: <st c="6168">It requires all consuming applications to have access to</st> <st
    c="6226">AWS credentials</st>
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="6168">它要求所有消费应用程序都必须访问</st> <st c="6226">AWS 凭证</st>
- en: <st c="6241">It does not allow for parsing and customization of</st> <st c="6293">the
    response</st>
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="6241">它不允许解析和自定义</st> <st c="6293">响应</st>
- en: <st c="6305">It does not allow</st> <st c="6324">custom authentication/authorization</st>
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="6305">它不允许</st> <st c="6324">自定义身份验证/授权</st>
- en: <st c="6359">As shown, your</st> <st c="6375">consumer applications can be any
    type, and be anywhere; they can be virtual machines on EC2, containers on other
    cloud providers, or simply</st> <st c="6515">your workstation.</st>
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6359">如图所示，你的</st> <st c="6375">消费应用程序可以是任何类型，并且可以位于任何地方；它们可以是 EC2 上的虚拟机、其他云提供商上的容器，或者仅仅是</st>
    <st c="6515">你的工作站。</st>
- en: <st c="6532">AWS services</st>
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="6532">AWS 服务</st>
- en: <st c="6545">This architecture uses three services, but you have used two of
    them before.</st> <st c="6623">In this section, you will understand how they address
    this</st> <st c="6682">project’s requireme</st><st c="6701">nts.</st>
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6545">此架构使用了三项服务，但你以前已经使用过其中的两项。</st> <st c="6623">在这一部分，你将理解它们如何满足此项目的要求。</st>
- en: <st c="6706">Amazon Rekognition</st>
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="6706">Amazon Rekognition</st>
- en: <st c="6725">For this use case, you</st> <st c="6749">don’t want to create programming
    logic to identify photo features, so you choose to implement the same functionality</st>
    <st c="6866">using ML.</st>
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6725">对于这个用例，你</st> <st c="6749">不想创建编程逻辑来识别照片特征，因此你选择使用 ML 实现相同的功能。</st>
- en: <st c="6875">As mentioned in the AWS prescriptive guidance, you can create your
    own model from scratch.</st> <st c="6967">But how does it compare with using a
    pre-trained</st> <st c="7016">managed service?</st>
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6875">如 AWS 的指导文档中所述，你可以从头开始创建自己的模型。</st> <st c="6967">但是，它与使用预训练的</st>
    <st c="7016">托管服务相比如何？</st>
- en: <st c="7032">First, before comparing the two, you need to identify a service
    that can handle the task.</st> <st c="7123">AWS has a vast suite of AI and</st>
    <st c="7154">ML serv</st><st c="7161">ices:</st>
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7032">首先，在比较这两者之前，你需要找出一个可以处理此任务的服务。</st> <st c="7123">AWS 提供了大量的 AI
    和</st> <st c="7154">ML 服务：</st>
- en: '**<st c="7167">Amazon Rekognition</st>**<st c="7186">: A</st> <st c="7191">computer
    vision service that is designed to analyze images and videos for various use cases,
    such as facial analysis, object detection, and</st> <st c="7331">text recognition.</st>'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="7167">Amazon Rekognition</st>**<st c="7186">：一种</st> <st c="7191">计算机视觉服务，旨在分析图像和视频，应用于各种用例，如面部分析、物体检测以及</st>
    <st c="7331">文本识别。</st>'
- en: '**<st c="7348">Amazon Transcribe</st>**<st c="7366">: An</st> **<st c="7372">automatic
    speech recognition</st>** <st c="7400">(</st>**<st c="7402">ASR</st>**<st c="7405">)
    service that converts audio</st> <st c="7436">files</st> <st c="7442">to</st>
    <st c="7444">text.</st>'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="7348">Amazon Transcribe</st>**<st c="7366">：一种</st> **<st c="7372">自动语音识别</st>**
    <st c="7400">（</st>**<st c="7402">ASR</st>**<st c="7405">）服务，可以将音频</st> <st c="7436">文件</st>
    <st c="7442">转换为</st> <st c="7444">文本。</st>'
- en: '**<st c="7450">Amazon Translate</st>**<st c="7467">: A</st> <st c="7472">neural
    machine translation service that can translate text between</st> <st c="7539">multiple
    languages.</st>'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="7450">Amazon Translate</st>**<st c="7467">：一种</st> <st c="7472">神经机器翻译服务，可以在</st>
    <st c="7539">多种语言之间进行翻译。</st>'
- en: '**<st c="7558">Amazon Comprehend</st>**<st c="7576">: A</st> **<st c="7581">natural
    language processing</st>** <st c="7608">(</st>**<st c="7610">NLP</st>**<st c="7613">)
    service that can extract insights and relationships</st> <st c="7668">from unstructured</st>
    <st c="7685">text data.</st>'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="7558">Amazon Comprehend</st>**<st c="7576">：一种</st> **<st c="7581">自然语言处理</st>**
    <st c="7608">（</st>**<st c="7610">NLP</st>**<st c="7613">）服务，可以从非结构化</st> <st
    c="7668">文本数据中提取见解和关系。</st>'
- en: '**<st c="7696">Amazon Kendra</st>**<st c="7710">: An</st> <st c="7716">intelligent
    search service that can be used for indexing and searching multimedia content,
    including images</st> <st c="7824">and videos.</st>'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="7696">Amazon Kendra</st>**<st c="7710">：一个智能搜索服务，可用于索引和搜索多媒体内容，包括图像</st>
    <st c="7824">和视频。</st>'
- en: '**<st c="7835">Amazon Lex</st>**<st c="7846">: A service</st> <st c="7858">for
    building conversational interfaces and chatbots, using natural language understanding
    and automatic</st> <st c="7963">speech recognition.</st>'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="7835">Amazon Lex</st>**<st c="7846">：一个用于构建对话界面和聊天机器人的服务，采用自然语言理解和自动</st>
    <st c="7963">语音识别。</st>'
- en: '**<st c="7982">Amazon Polly</st>**<st c="7995">: A</st> <st c="8000">text-to-speech
    service that can convert text into</st> <st c="8050">lifelike speech.</st>'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="7982">Amazon Polly</st>**<st c="7995">：一个</st> <st c="8000">文本转语音服务，可以将文本转换为</st>
    <st c="8050">逼真的语音。</st>'
- en: <st c="8066">Amazon Rekognition seems like a perfect fit.</st> <st c="8112">Its
    main capabilities are</st> <st c="8138">as follows:</st>
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8066">Amazon Rekognition 看起来非常适合。</st> <st c="8112">其主要功能如下：</st>
- en: '**<st c="8149">Facial analysis</st>**<st c="8165">:</st>'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="8149">面部分析</st>**<st c="8165">：</st>'
- en: <st c="8167">Detect</st> <st c="8173">and analyze faces in images</st> <st c="8202">and
    videos.</st>
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="8167">检测并分析图像</st> <st c="8173">和视频中的面部。</st> <st c="8202">。</st>
- en: <st c="8213">Identify facial attributes, such as gender, age range, emotions,
    and</st> <st c="8283">facial hair.</st>
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="8213">识别面部特征，如性别、年龄范围、情绪和</st> <st c="8283">面部毛发。</st>
- en: <st c="8295">Recognize and identify faces by comparing them against a user-provided
    dataset</st> <st c="8375">of faces.</st>
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="8295">通过与用户提供的数据集中的面部进行比较，识别和识别面部</st> <st c="8375">。</st>
- en: <st c="8384">Detect unsafe content in images or videos based on explicit or</st>
    <st c="8448">suggestive content.</st>
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="8384">基于淫秽或</st> <st c="8448">挑逗内容，检测图像或视频中的不安全内容。</st>
- en: '**<st c="8467">Object and</st>** **<st c="8479">scene detection</st>**<st c="8494">:</st>'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="8467">物体和</st>** **<st c="8479">场景检测</st>**<st c="8494">：</st>'
- en: <st c="8496">Detect and label</st> <st c="8513">objects, people, text, scenes,
    and activities in images</st> <st c="8569">and videos.</st>
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="8496">检测并标记</st> <st c="8513">图像和视频中的物体、人物、文本、场景和活动。</st>
- en: <st c="8580">Identify objects and concepts with</st> <st c="8616">high accuracy.</st>
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="8580">以</st> <st c="8616">高精度识别物体和概念。</st>
- en: <st c="8630">Provide bounding boxes around detected objects</st> <st c="8678">and
    scenes.</st>
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="8630">为检测到的物体</st> <st c="8678">和场景提供边界框。</st>
- en: '**<st c="8689">Text recognition</st>**<st c="8706">:</st>'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="8689">文本识别</st>**<st c="8706">：</st>'
- en: <st c="8708">Detect and recognize</st> <st c="8729">text in images</st> <st
    c="8744">and videos.</st>
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="8708">检测并识别</st> <st c="8729">图像</st> <st c="8744">和视频中的文本。</st>
- en: <st c="8755">Extract textual content from different surfaces</st> <st c="8804">and
    orientations.</st>
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="8755">从不同的表面</st> <st c="8804">和方向提取文本内容。</st>
- en: '**<st c="8821">Moderation</st>**<st c="8832">:</st>'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="8821">内容审查</st>**<st c="8832">：</st>'
- en: <st c="8834">Detect and filter out</st> <st c="8856">explicit or suggestive
    content in images</st> <st c="8897">and videos.</st>
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="8834">检测并过滤掉</st> <st c="8856">图像和视频中的淫秽或挑逗内容。</st> <st c="8897">。</st>
- en: <st c="8908">Automatically flag inappropriate or</st> <st c="8945">offensive
    content.</st>
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="8908">自动标记不当或</st> <st c="8945">冒犯内容。</st>
- en: <st c="8963">Important note</st>
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8963">重要提示</st>
- en: <st c="8978">Take into consideration that when using Amazon Rekognition or any
    facial recognition technology, it’s crucial to consider privacy and ethical concerns,
    as well as compliance with relevant laws</st> <st c="9172">and regulations.</st>
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8978">考虑到使用 Amazon Rekognition 或任何面部识别技术时，必须考虑隐私和伦理问题，并遵守相关法律</st> <st
    c="9172">和规定。</st>
- en: <st c="9188">So, should you use Rekognition facial analysis capabilities or
    build your own model?</st> <st c="9274">Both approaches are valid, and the</st>
    <st c="9309">main comparison points are</st> <st c="9336">as follows:</st>
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9188">那么，您应该使用 Rekognition 面部分析功能，还是构建自己的模型呢？</st> <st c="9274">两种方法都是有效的，</st>
    <st c="9309">主要的比较点如下：</st>
- en: '**<st c="9347">Ease</st>** **<st c="9353">of use</st>**<st c="9359">:</st>'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="9347">易用性</st>** **<st c="9353">：</st>**'
- en: <st c="9361">Rekognition is a fully managed service, which means you don’t have
    to worry about setting up and maintaining the underlying infrastructure or training
    models.</st> <st c="9520">It provides an API to</st> <st c="9542">analyze images.</st>
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="9361">Rekognition 是一个完全托管的服务，这意味着你不需要担心设置和维护底层基础设施或训练模型。</st> <st c="9520">它提供了一个
    API 来</st> <st c="9542">分析图像。</st>
- en: <st c="9557">Training your own ML model requires expertise in data preparation,
    model architecture selection, training techniques, and deployment strategies.</st>
    <st c="9703">It involves a significant learning curve and hands-on work.</st>
    <st c="9763">It also requires vast amounts</st> <st c="9793">of data.</st>
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="9557">训练你自己的机器学习模型需要在数据准备、模型架构选择、训练技术和部署策略方面的专业知识。</st> <st c="9703">它涉及显著的学习曲线和实践操作。</st>
    <st c="9763">它还需要大量的</st> <st c="9793">数据。</st>
- en: '**<st c="9801">Customization</st>** **<st c="9816">and control</st>**<st c="9827">:</st>'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="9801">定制化</st>** **<st c="9816">和控制</st>**<st c="9827">：</st>'
- en: <st c="9829">Rekognition offers pre-trained models.</st> <st c="9868">While
    it provides some customization options, such as creating custom collections for
    facial recognition, the level of customization</st> <st c="10001">is limited.</st>
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="9829">Rekognition 提供了预训练的模型。</st> <st c="9868">虽然它提供了一些定制选项，例如创建面部识别的自定义集合，但定制的程度</st>
    <st c="10001">是有限的。</st>
- en: <st c="10012">Training your own model allows you to have complete control over
    the model architecture, training data, and fine-tuning processes.</st> <st c="10144">This
    enables you to tailor the model specifically to your use case and achieve higher
    accuracy for</st> <st c="10243">specialized tasks.</st>
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="10012">训练你自己的模型允许你对模型架构、训练数据和微调过程拥有完全的控制权。</st> <st c="10144">这使你能够根据特定的应用场景定制模型，并在</st>
    <st c="10243">专业任务上达到更高的准确性。</st>
- en: '**<st c="10261">Data privacy</st>** **<st c="10275">and security</st>**<st
    c="10287">:</st>'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="10261">数据隐私</st>** **<st c="10275">和安全</st>**<st c="10287">：</st>'
- en: <st c="10289">Using Rekognition, your data – images, in this case – is sent
    to AWS for processing, which can raise data privacy and</st> <st c="10407">security
    concerns.</st>
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="10289">使用 Rekognition 时，你的数据——在本例中是图像——会被发送到 AWS 进行处理，这可能会引发数据隐私和</st>
    <st c="10407">安全问题。</st>
- en: <st c="10425">When training your own model, you have complete control over the
    data and can ensure that sensitive information never leaves your environment,
    providing better data privacy</st> <st c="10599">and security.</st>
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="10425">当训练你自己的模型时，你可以完全控制数据，并确保敏感信息永远不会离开你的环境，从而提供更好的数据隐私</st> <st c="10599">和安全性。</st>
- en: '**<st c="10612">Scalability</st>** **<st c="10625">and performance</st>**<st
    c="10640">:</st>'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="10612">可扩展性</st>** **<st c="10625">和性能</st>**<st c="10640">：</st>'
- en: <st c="10642">Rekognition is a highly scalable service that can handle large
    volumes of data and</st> <st c="10725">concurrent requests.</st>
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="10642">Rekognition 是一个高度可扩展的服务，能够处理大量数据和</st> <st c="10725">并发请求。</st>
- en: <st c="10745">Training and deploying your own model at scale can be challenging,
    as it requires provisioning and managing compute resources, optimizing performance,
    and handling</st> <st c="10910">infrastructure-related tasks.</st>
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="10745">大规模训练和部署你自己的模型可能具有挑战性，因为它需要配置和管理计算资源、优化性能并处理</st> <st c="10910">与基础设施相关的任务。</st>
- en: '**<st c="10939">Cost and</st>** **<st c="10949">resource management</st>**<st
    c="10968">:</st>'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="10939">成本和</st>** **<st c="10949">资源管理</st>**<st c="10968">：</st>'
- en: <st c="10970">Rekognition follows a pay-as-you-go pricing model, where you pay
    for API requests.</st> <st c="11053">This is cost-effective for smaller workloads
    or</st> <st c="11101">intermittent usage.</st>
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="10970">Rekognition 遵循按需付费定价模式，你为 API 请求付费。</st> <st c="11053">对于较小的工作负载或</st>
    <st c="11101">间歇性使用来说，这种方式具有成本效益。</st>
- en: <st c="11120">Training your</st> <st c="11135">own model requires upfront investment
    in hardware resources, as well as ongoing costs for managing and maintaining</st>
    <st c="11250">the infrastructure.</st>
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="11120">训练你自己的模型需要对硬件资源进行前期投资，并且需要持续的成本来管理和维护</st> <st c="11250">基础设施。</st>
- en: <st c="11269">In summary, Rekognition provides a convenient and scalable solution
    for common computer vision tasks, but with limited customization options.</st>
    <st c="11412">Training your own ML model offers more flexibility and control but
    requires significant expertise, data,</st> <st c="11517">and resources.</st>
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11269">总之，Rekognition 提供了一种便捷且可扩展的解决方案，适用于常见的计算机视觉任务，但其定制选项有限。</st> <st
    c="11412">训练你自己的机器学习模型提供了更多的灵活性和控制，但需要显著的专业知识、数据</st> <st c="11517">和资源。</st>
- en: <st c="11531">In this case, Rekognition is the winner.</st> <st c="11573">You
    do not have thousands of images labeled with the features you want to identify,
    nor do you have the data science knowledge or time to build an end-to-end</st>
    <st c="11731">ML framework.</st>
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11531">在这种情况下，Rekognition 是最佳选择。</st> <st c="11573">你没有成千上万张带有你想要识别特征的标记图像，也没有数据科学知识或时间来构建端到端的</st>
    <st c="11731">机器学习框架。</st>
- en: <st c="11744">Relating it to your requirements, Rekognition is a highly available
    scalable service, that supports up to 100 requests per second.</st> <st c="11876">It
    supports both the</st> `<st c="11897">.jpeg</st>` <st c="11902">and</st> `<st
    c="11907">.png</st>` <st c="11911">image formats and does not store your submitted
    images.</st> <st c="11968">It also qualifies as low-cost; in the N.</st> <st c="12009">Virginia
    region, it costs a tenth of a cent, 0.001$, to analyze 1 image.</st> <st c="12082">Because
    of its pay-as-you-go model, you will only pay if you analyze images; sitting idle
    has</st> <st c="12176">no cost.</st>
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11744">根据你的要求，Rekognition 是一个高度可用且可扩展的服务，支持每秒最多 100 次请求。</st> <st c="11876">它支持</st>
    `<st c="11897">.jpeg</st>` <st c="11902">和</st> `<st c="11907">.png</st>` <st
    c="11911">图像格式，并且不会存储你提交的图像。</st> <st c="11968">它也具有低成本优势；在 N.</st> <st c="12009">弗吉尼亚地区，分析一张图像的费用为零点一美分，0.001$。</st>
    <st c="12082">由于采用按需付费模式，你只有在分析图像时才会产生费用；空闲时没有</st> <st c="12176">费用。</st>
- en: <st c="12184">Amazon API Gateway and AWS Lambda</st>
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="12184">Amazon API Gateway 和 AWS Lambda</st>
- en: <st c="12218">In the</st> *<st c="12226">Architecture</st>* <st c="12238">section
    of this chapter, you learned why interacting directly with Rekognition was not
    ideal.</st> <st c="12333">However, you ask yourself, “What indirection layer should</st>
    <st c="12391">I use?”</st>
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12218">在本章的</st> *<st c="12226">架构</st>* <st c="12238">部分，你了解了为什么直接与
    Rekognition 交互并不是理想选择。</st> <st c="12333">然而，你会问自己，“我应该使用什么间接层？”</st> <st c="12391">我该如何选择？”</st>
- en: <st c="12398">You could use</st> <st c="12413">Lambda directly.</st>
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12398">你可以直接使用</st> <st c="12413">Lambda。</st>
- en: <st c="12429">Lambda</st> <st c="12436">allows you to parse requests and Rekognition
    responses.</st> <st c="12493">Using Lambda function URLs, you will</st> <st c="12530">be
    able to access your function from other applications using HTTPS (see</st> [<st
    c="12603">https://docs.aws.amazon.com/lambda/latest/dg/lambda-urls.html</st>](https://docs.aws.amazon.com/lambda/latest/dg/lambda-urls.html)<st
    c="12664">).</st> <st c="12668">However, Lambda function URLs only support IAM
    authentication or no authentication, and one of your requirements was not to have
    AWS credentials</st> <st c="12813">spread everywhere.</st>
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12429">Lambda</st> <st c="12436">允许你解析请求和 Rekognition 响应。</st> <st c="12493">通过使用
    Lambda 函数 URL，你将</st> <st c="12530">能够通过 HTTPS 从其他应用访问你的函数（参见</st> [<st c="12603">https://docs.aws.amazon.com/lambda/latest/dg/lambda-urls.html</st>](https://docs.aws.amazon.com/lambda/latest/dg/lambda-urls.html)<st
    c="12664">）。</st> <st c="12668">然而，Lambda 函数 URL 仅支持 IAM 身份验证或无身份验证，而且你的一项要求是避免
    AWS 凭证</st> <st c="12813">的广泛传播。</st>
- en: <st c="12831">Or, maybe, you could use only</st> <st c="12862">API Gateway.</st>
    <st c="12875">As you learned in the previous chapter, it provides you with a unique
    domain name that you can interact with through HTTP and a multitude of features.</st>
    <st c="13026">However, it comes with drawbacks, too; although you can do some
    request and response mapping, it is hard to implement programming logic.</st>
    <st c="13163">Rekognition will not return a good/bad photo diagnosis, but rather
    a list of image attributes that you must parse to compute</st> <st c="13288">a
    decision.</st>
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12831">或者，也许，你可以仅使用</st> <st c="12862">API Gateway。</st> <st c="12875">正如你在上一章中学到的，它为你提供了一个独特的域名，你可以通过
    HTTP 进行交互，并且拥有众多功能。</st> <st c="13026">然而，它也有一些缺点；尽管你可以进行一些请求和响应映射，但实现编程逻辑较为困难。</st>
    <st c="13163">Rekognition 不会返回好/坏的照片诊断，而是返回一个图像属性列表，你必须解析这些属性来计算</st> <st c="13288">决策。</st>
- en: <st c="13299">There is a blocking limitation for the API Gateway-only approach.</st>
    <st c="13366">API Gateway does not integrate directly with all AWS services, more
    specifically it does not integrate directly with Rekognition.</st> <st c="13496">For
    this, you need to use a</st> <st c="13524">Lambda integration.</st>
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="13299">API Gateway-only 方法存在阻塞限制。</st> <st c="13366">API Gateway 并不能直接与所有
    AWS 服务集成，尤其是与 Rekognition 不直接集成。</st> <st c="13496">为此，你需要使用一个</st> <st c="13524">Lambda
    集成。</st>
- en: <st c="13543">For this project, your indirection layer should be a combination</st>
    <st c="13609">of both.</st>
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="13543">对于这个项目，你的间接层应该是两者的结合</st> <st c="13609">。</st>
- en: <st c="13617">Important note</st>
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="13617">重要提示</st>
- en: <st c="13632">Lambda function URLs are fit for use cases where you need a single
    function with a public endpoint that doesn’t require advanced API Gateway functionalities,
    such as request validation, throttling, custom authorizers, custom domain names,</st>
    <st c="13872">and caching.</st>
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="13632">Lambda 函数 URL 适用于需要一个公共端点且不要求高级 API 网关功能的用例，例如请求验证、流量控制、自定义授权器、自定义域名，</st>
    <st c="13872">和缓存。</st>
- en: <st c="13884">They are a great way to invoke your Lambda functions</st> <st
    c="13938">during testing.</st>
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="13884">它们是调用 Lambda 函数进行测试的一个很好的方式。</st> <st c="13938">在测试过程中使用它们。</st>
- en: <st c="13953">You could use them for this chapter’s use case, however, to mimic
    a real project,</st> <st c="14036">you won’t.</st>
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="13953">您可以将它们用于本章的用例，然而，为了模拟一个真实的项目，</st> <st c="14036">您不会这样做。</st>
- en: <st c="14046">API Gateway together with Lambda</st> <st c="14079">will allow
    you to do</st> <st c="14101">the following:</st>
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="14046">API 网关与 Lambda</st> <st c="14079">将允许您执行以下操作：</st> <st c="14101">以下操作：</st>
- en: '**<st c="14115">Control access to your services by authenticating and authorizing
    requests</st>**<st c="14190">: You can configure API keys, IAM roles, and other
    custom</st> <st c="14249">authentication mechanisms.</st>'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="14115">通过认证和授权请求控制对服务的访问</st>**<st c="14190">：您可以配置 API 密钥、IAM 角色和其他自定义</st>
    <st c="14249">认证机制。</st>'
- en: '**<st c="14275">Simplify API versioning and life cycle management</st>**<st
    c="14325">: You can create and deploy multiple versions of your Rekognition integration
    API, and manage the transition between</st> <st c="14443">versions seamlessly.</st>'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="14275">简化 API 版本管理和生命周期管理</st>**<st c="14325">：您可以创建并部署多个版本的 Rekognition
    集成 API，并无缝管理版本之间的过渡。</st>'
- en: '**<st c="14463">Implement built-in request throttling and rate limiting capabilities</st>**<st
    c="14532">: This helps to protect your backend services, such as Rekognition,
    from being overwhelmed by excessive requests, which could lead to service disruptions
    and</st> <st c="14691">higher costs.</st>'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="14463">实现内置请求限流和速率限制功能</st>**<st c="14532">：这有助于保护您的后端服务，例如 Rekognition，免受过多请求的压垮，这可能导致服务中断和</st>
    <st c="14691">更高的成本。</st>'
- en: <st c="14704">Relating it to your requirements, Lambda and API Gateway allow
    you to receive requests from many types of applications using a well-known and
    accepted protocol, HTTPS, integrate with Rekognition for image analysis, process
    the response into a diagnosis of good/bad photos in a pay-as-you-go serverless
    manner without storing the image in any of the underlying architecture components.</st>
    <st c="15090">You can do all of this using highly available and</st> <st c="15140">scalable
    components.</st>
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="14704">将其与您的需求联系起来，Lambda 和 API 网关允许您使用一个广为接受的协议 HTTPS，从多种类型的应用接收请求，集成
    Rekognition 进行图像分析，将响应处理为好/坏照片的诊断，并以按需计费的无服务器方式进行处理，而无需将图像存储在任何底层架构组件中。</st> <st
    c="15090">您可以通过高可用性和</st> <st c="15140">可扩展的组件完成所有这些工作。</st>
- en: <st c="15160">Coding the solution</st>
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="15160">编写解决方案代码</st>
- en: <st c="15180">Congratulations again – you designed an architecture that meets
    all your company’s requirements.</st> <st c="15278">Now, it’s time to build it.</st>
    <st c="15306">During this chapter, we are going to use the AWS N.</st> <st c="15358">Virginia
    region.</st> <st c="15375">You can change the Terraform variable to your</st>
    <st c="15421">preferred region.</st>
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="15180">再次恭喜你——你设计了一个满足公司所有需求的架构。</st> <st c="15278">现在，是时候构建它了。</st>
    <st c="15306">在本章中，我们将使用 AWS N。</st> <st c="15358">弗吉尼亚地区。</st> <st c="15375">您可以将
    Terraform 变量更改为您</st> <st c="15421">首选的地区。</st>
- en: <st c="15438">Building the infrastructure</st>
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="15438">构建基础设施</st>
- en: <st c="15466">The</st> <st c="15470">solution requirements mandated that the
    infrastructure be built using Terraform because the IaC language is already being
    used in</st> <st c="15601">the company.</st>
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="15466">解决方案需求要求使用 Terraform 构建基础设施，因为该公司已经在使用该 IaC 语言。</st>
- en: <st c="15613">In this book’s GitHub repository, in the</st> `<st c="15655">chapter5/code</st>`
    <st c="15668">folder, you will find the following files:</st> `<st c="15712">interact.py</st>`<st
    c="15723">,</st> `<st c="15725">lambda.tf</st>`<st c="15734">,</st> `<st c="15736">apigw.tf</st>`<st
    c="15744">,</st> `<st c="15746">badphoto.png</st>`<st c="15758">,</st> `<st c="15760">goodphoto.jpeg</st>`<st
    c="15774">, and a</st> <st c="15782">Python subdirectory.</st>
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="15613">在本书的 GitHub 仓库中，在</st> `<st c="15655">chapter5/code</st>` <st
    c="15668">文件夹里，你会找到以下文件：</st> `<st c="15712">interact.py</st>`<st c="15723">，</st>
    `<st c="15725">lambda.tf</st>`<st c="15734">，</st> `<st c="15736">apigw.tf</st>`<st
    c="15744">，</st> `<st c="15746">badphoto.png</st>`<st c="15758">，</st> `<st c="15760">goodphoto.jpeg</st>`<st
    c="15774">，以及一个</st> <st c="15782">Python 子目录。</st>
- en: <st c="15802">Start by focusing on the two terraform files:</st> `<st c="15849">apigw.tf</st>`
    <st c="15857">and</st> `<st c="15862">lambda.tf</st>`<st c="15871">. Recall that
    your architecture had three components.</st> <st c="15925">You don’t need to create
    your own Amazon Rekognition because it</st> <st c="15989">is</st> **<st c="15992">Software
    as a Service</st>** <st c="16013">(</st>**<st c="16015">SaaS</st>**<st c="16019">)
    , and because of that, it doesn’t have a Terraform</st> <st c="16073">resource
    representation.</st>
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="15802">首先专注于两个 Terraform 文件：</st> `<st c="15849">apigw.tf</st>` <st c="15857">和</st>
    `<st c="15862">lambda.tf</st>`<st c="15871">。回想一下你的架构有三个组件。</st> <st c="15925">你不需要创建自己的
    Amazon Rekognition，因为它</st> <st c="15989">是</st> **<st c="15992">软件即服务</st>**
    <st c="16013">(</st>**<st c="16015">SaaS</st>**<st c="16019">)，因此它没有 Terraform</st>
    <st c="16073">资源表示。</st>
- en: <st c="16097">Important note</st>
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="16097">重要说明</st>
- en: <st c="16112">Although many people use a</st> `<st c="16140">main.tf</st>` <st
    c="16147">file to describe their infrastructure in Terraform, Terraform considers
    all files with a</st> `<st c="16237">.tf</st>` <st c="16240">extension in the
    directory.</st> <st c="16269">Filenames do</st> <st c="16282">not matter.</st>
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="16112">虽然许多人使用一个</st> `<st c="16140">main.tf</st>` <st c="16147">文件来描述他们的基础设施，但
    Terraform 会考虑目录中所有具有</st> `<st c="16237">.tf</st>` <st c="16240">扩展名的文件。</st>
    <st c="16269">文件名</st> <st c="16282">并不重要。</st>
- en: <st c="16293">Start by exploring the</st> `<st c="16317">lambda.tf</st>` <st
    c="16326">file.</st> <st c="16333">Inside, you</st> <st c="16345">will find five
    resource definitions;</st> `<st c="16382">aws_lambda_function</st>` <st c="16401">is
    the one that creates your lambda function</st> <st c="16447">named</st> `<st c="16453">Detection_Lambda_Function</st>`<st
    c="16478">.</st>
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="16293">首先浏览一下</st> `<st c="16317">lambda.tf</st>` <st c="16326">文件。</st>
    <st c="16333">在里面，你</st> <st c="16345">会找到五个资源定义；</st> `<st c="16382">aws_lambda_function</st>`
    <st c="16401">是用来创建你的 Lambda 函数的资源，</st> <st c="16447">其名称为</st> `<st c="16453">Detection_Lambda_Function</st>`<st
    c="16478">。</st>
- en: '[PRE0]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: <st c="17267">In this same Terraform file,</st> `<st c="17297">lambda.tf</st>`<st
    c="17306">, you also create an IAM role named</st> `<st c="17342">Detection_Lambda_Function_Role</st>`<st
    c="17372">, which has two IAM policies attached:</st> `<st c="17411">aws_iam_policy_for_terraform_aws_lambda_role</st>`
    <st c="17455">and</st> `<st c="17460">AmazonRekognitionReadOnlyAccess</st>`<st
    c="17491">. This is necessary for your Lambda function to be able to access other
    AWS services, in this case, Rekognition and CloudWatch Logs.</st> <st c="17624">Notice
    how the IAM policies are based on the least privilege principle, allowing the
    Lambda function only read access to the</st> <st c="17749">required services.</st>
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="17267">在这个相同的 Terraform 文件中，</st> `<st c="17297">lambda.tf</st>`<st c="17306">，你还创建了一个名为</st>
    `<st c="17342">Detection_Lambda_Function_Role</st>`<st c="17372">的 IAM 角色，它附加了两个
    IAM 策略：</st> `<st c="17411">aws_iam_policy_for_terraform_aws_lambda_role</st>`
    <st c="17455">和</st> `<st c="17460">AmazonRekognitionReadOnlyAccess</st>`<st c="17491">。这是必要的，目的是让你的
    Lambda 函数能够访问其他 AWS 服务，在这个案例中是 Rekognition 和 CloudWatch Logs。</st> <st c="17624">注意这些
    IAM 策略如何基于最小权限原则，只允许 Lambda 函数对</st> <st c="17749">所需服务进行读取访问。</st>
- en: <st c="17767">Because your</st> <st c="17780">marketing company is already using
    Python, you also choose Python for your Lambda function.</st> <st c="17873">Maintaining
    a single, or few, programming languages helps with developer productivity.</st>
    <st c="17960">You will dive deeper into the application code in the next section,
    but note how this Terraform project handles code deployment; it’s using a</st>
    `<st c="18102">.zip</st>` <st c="18106">file.</st> <st c="18113">This Lambda function
    uses Python 3.8 as runtime, but by the time you are reading this, you might have
    to upgrade it to a higher version.</st> <st c="18250">If that’s the case, simply
    change the</st> <st c="18288">runtime variable.</st>
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="17767">因为你的</st><st c="17780">营销公司已经在使用 Python，你也为你的 Lambda 函数选择了 Python。</st>
    <st c="17873">维护一个或少数几种编程语言有助于提高开发人员的生产力。</st> <st c="17960">你将在下一部分深入研究应用代码，但请注意这个
    Terraform 项目是如何处理代码部署的；它使用的是</st>`<st c="18102">.zip</st>`<st c="18106">文件。</st>
    <st c="18113">这个 Lambda 函数使用 Python 3.8 作为运行时，但等你读到这篇文章时，你可能需要将其升级到更高的版本。</st>
    <st c="18250">如果是这种情况，只需更改</st>`<st c="18288">runtime</st>`<st c="18288">变量即可。</st>
- en: '<st c="18305">In the second Terraform file,</st> `<st c="18336">apigw.tf</st>`<st
    c="18344">, you will find eight resources.</st> <st c="18377">An API gateway,
    to work, has to have multiple components: stages, resources, and methods.</st>
    <st c="18467">Also, it needs permissions to interact with other components, in
    this case, your</st> <st c="18548">Lambda function.</st>'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="18305">在第二个 Terraform 文件中，</st>`<st c="18336">apigw.tf</st>`<st c="18344">，你将找到八个资源。</st>
    <st c="18377">要使 API 网关工作，它需要多个组件：阶段、资源和方法。</st> <st c="18467">此外，它还需要权限与其他组件交互，在本例中就是你的</st>`<st
    c="18548">Lambda 函数。</st>
- en: '[PRE1]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: <st c="18888">The first two</st> <st c="18901">Terraform resources,</st> `<st
    c="18923">my-api</st>` <st c="18929">and</st> `<st c="18934">root</st>`<st c="18938">,
    create a regional API gateway named</st> `<st c="18976">my-api</st>`<st c="18982">,
    and a</st> `<st c="18990">/friendly</st>` <st c="18999">resource path on the root
    resource.</st> <st c="19036">This will be accessible at</st> `<st c="19063">API_Gateway_URL/friendly</st>`<st
    c="19087">, as you will</st> <st c="19101">see later.</st>
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个<st c="18888">Terraform 资源</st>，`<st c="18923">my-api</st>`和`<st c="18934">root</st>`<st
    c="18938">，创建了一个名为</st>`<st c="18976">my-api</st>`<st c="18982">的区域 API 网关，以及根资源上的</st>`<st
    c="18990">/friendly</st>`<st c="18999">资源路径。</st> <st c="19036">它将在</st>`<st c="19063">API_Gateway_URL/friendly</st>`<st
    c="19087">处可以访问，正如你稍后将看到的。</st>
- en: <st c="19111">The four following resources in</st> `<st c="19144">apigw.tf</st>`
    <st c="19152">define a</st> `<st c="19162">POST</st>` <st c="19166">method for
    the</st> `<st c="19182">/friendly</st>` <st c="19191">resource path:</st>
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="19111">在</st>`<st c="19144">apigw.tf</st>`<st c="19152">中的以下四个资源定义了一个</st>`<st
    c="19162">POST</st>`<st c="19166">方法，用于</st>`<st c="19182">/friendly</st>`<st
    c="19191">资源路径：</st>
- en: '[PRE2]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: <st c="20307">This</st> <st c="20312">code creates four components, as shown
    in</st> *<st c="20355">Figure 5</st>**<st c="20363">.3</st>*<st c="20365">:</st>
    `<st c="20403">aws_api_gateway_method</st>` <st c="20425">resource,</st> `<st
    c="20476">aws_api_gateway_integration</st>` <st c="20503">resource,</st> `<st
    c="20554">aws_api_gateway_integration_response</st>` <st c="20590">resource, and</st>
    `<st c="20641">aws_api_gateway_method_response</st>` <st c="20672">resource.</st>
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="20307">这段</st><st c="20312">代码创建了四个组件，如</st>*<st c="20355">图 5</st>**<st
    c="20363">.3</st>*<st c="20365">所示：</st>`<st c="20403">aws_api_gateway_method</st>`<st
    c="20425">资源，</st>`<st c="20476">aws_api_gateway_integration</st>`<st c="20503">资源，</st>`<st
    c="20554">aws_api_gateway_integration_response</st>`<st c="20590">资源，以及</st>`<st
    c="20641">aws_api_gateway_method_response</st>`<st c="20672">资源。</st>
- en: <st c="20682">This is where you can do things such as request and response processing.</st>
    <st c="20756">In this case, you define the method request as a</st> `<st c="20805">POST</st>`
    <st c="20809">method without authentication, and the integration request type
    as Lambda.</st> <st c="20885">You don’t alter the response of the Lambda, just
    proxy</st> <st c="20940">it back.</st>
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="20682">这里是你可以进行请求和响应处理的地方。</st> <st c="20756">在本例中，你将方法请求定义为无认证的</st>`<st
    c="20805">POST</st>`<st c="20809">方法，并将集成请求类型设置为 Lambda。</st> <st c="20885">你不会更改
    Lambda 的响应，只是将其</st><st c="20940">代理回去。</st>
- en: '![Figure 5.3 – API gateway method settings](img/B22051_05_3.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.3 – API 网关方法设置](img/B22051_05_3.jpg)'
- en: <st c="21043">Figure 5.3 – API gateway method settings</st>
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="21043">图 5.3 – API 网关方法设置</st>
- en: <st c="21083">At the end of</st> `<st c="21098">apigw.tf</st>`<st c="21106">,
    you will find a resource named</st> `<st c="21139">apigw_lambda</st>`<st c="21151">,
    which alters your Lambda permissions to allow the API gateway to</st> <st c="21218">invoke
    it.</st>
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="21083">在</st> `<st c="21098">apigw.tf</st>`<st c="21106"> 文件的末尾，你会找到一个名为</st>
    `<st c="21139">apigw_lambda</st>`<st c="21151">的资源，它修改了 Lambda 权限，允许 API 网关</st>
    <st c="21218">调用它。</st>
- en: <st c="21228">In your favorite terminal, navigate to the</st> `<st c="21272">chapter5/code</st>`
    <st c="21285">folder, run the following Terraform command, and</st> <st c="21335">confirm.</st>
    <st c="21344">This will create all the resources mentioned in</st> <st c="21392">this
    section:</st>
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="21228">在你喜欢的终端中，导航到</st> `<st c="21272">chapter5/code</st>` <st c="21285">文件夹，运行以下
    Terraform 命令并</st> <st c="21335">确认。</st> <st c="21344">这将创建本节中提到的所有资源：</st>
- en: '[PRE3]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: <st c="21423">If your</st> `<st c="21432">apply</st>` <st c="21437">command
    is successful, it should output something like</st> <st c="21493">the following:</st>
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="21423">如果你的</st> `<st c="21432">apply</st>` <st c="21437">命令执行成功，应该输出如下内容：</st>
    <st c="21493">如下：</st>
- en: '[PRE4]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: <st c="23041">Note down your</st> <st c="23057">deployment URL.</st> <st c="23073">You
    will use</st> <st c="23086">it later.</st>
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="23041">记下你的</st> <st c="23057">部署 URL。</st> <st c="23073">你稍后会用到它。</st>
- en: <st c="23095">Open your AWS console and navigate to API Gateway, Lambda, and
    IAM to verify everything that</st> <st c="23189">was created.</st>
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="23095">打开你的 AWS 控制台，导航到 API Gateway、Lambda 和 IAM 来验证之前创建的内容。</st> <st
    c="23189">确认所有资源已创建。</st>
- en: <st c="23201">Understanding the image analyzer code</st>
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="23201">理解图像分析代码</st>
- en: <st c="23239">The Terraform infrastructure</st> <st c="23268">code you deployed
    in the previous section created a Lambda function with application logic.</st>
    <st c="23361">Open the</st> `<st c="23370">rekognition.py</st>` <st c="23384">file
    in the directory named</st> `<st c="23413">python</st>` <st c="23419">of the</st>
    `<st c="23427">chapter5/code</st>` <st c="23440">folder.</st>
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="23239">你在上一节部署的 Terraform 基础设施</st> <st c="23268">代码创建了一个包含应用逻辑的 Lambda
    函数。</st> <st c="23361">打开位于</st> `<st c="23370">rekognition.py</st>` <st c="23384">文件中的目录，该文件位于</st>
    `<st c="23413">python</st>` <st c="23419">文件夹内，路径为</st> `<st c="23427">chapter5/code</st>`
    <st c="23440">文件夹。</st>
- en: <st c="23448">You will find boilerplate code, as in the previous chapter, to
    integrate with the Lambda ecosystem.</st> <st c="23549">But more</st> <st c="23558">interesting
    than that is the way it interacts with the Rekognition</st> `<st c="23625">DetectFaces</st>`
    <st c="23636">API (</st><st c="23642">see</st> [<st c="23647">https://docs.aws.amazon.com/rekognition/latest/APIReference/API_DetectFaces.html</st>](https://docs.aws.amazon.com/rekognition/latest/APIReference/API_DetectFaces.html)<st
    c="23727">).</st>
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="23448">你会找到像上一章一样的模板代码，用于与 Lambda 生态系统集成。</st> <st c="23549">但更有趣的是它与
    Rekognition</st> `<st c="23625">DetectFaces</st>` <st c="23636">API 的交互方式（</st><st
    c="23642">见</st> [<st c="23647">https://docs.aws.amazon.com/rekognition/latest/APIReference/API_DetectFaces.html</st>](https://docs.aws.amazon.com/rekognition/latest/APIReference/API_DetectFaces.html)<st
    c="23727">）。</st>
- en: <st c="23730">The code calls the</st> `<st c="23750">DetectFaces</st>` <st c="23761">API
    and parses the response to make sure the photo does not contain more than one
    person, and that the person is smiling and has their</st> <st c="23897">eyes open:</st>
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="23730">这段代码调用了</st> `<st c="23750">DetectFaces</st>` <st c="23761">API
    并解析响应，确保照片中没有多于一个人，且此人正在微笑并且眼睛睁开：</st>
- en: '[PRE5]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '#''HAPPY''|''SAD''|''ANGRY''|''CONFUSED''|''DISGUSTED''|''SURPRISED''|''CALM''|'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '#''HAPPY''|''SAD''|''ANGRY''|''CONFUSED''|''DISGUSTED''|''SURPRISED''|''CALM''|'
- en: '''UNKNOWN''|''FEAR'' <st c="24589">Emotions = rekognition_response[''FaceDetails''][0][''Emotions'']</st>'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '''UNKNOWN''|''FEAR'' <st c="24589">情感 = rekognition_response[''FaceDetails''][0][''Emotions'']</st>'
- en: '[PRE6]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '{ "image": "b64"}'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '{ "image": "b64"}'
- en: '[PRE7]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: openssl base64 -A -in <infile> -out <outfile>
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: openssl base64 -A -in <infile> -out <outfile>
- en: '[PRE8]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'def analyze_image(url, image):'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 `def analyze_image(url, image):` 分析图片函数：
- en: 'with open(image, ''rb'') as image_file:'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 `with open(image, 'rb') as image_file:` 打开图片文件：
- en: image_bytes = image_file.read()
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: image_bytes = image_file.read()
- en: 'data = base64.b64encode(image_bytes).decode("utf8") <st c="28510">payload =
    {"image": data}</st><st c="28535">response = requests.post(url, json=payload)</st>
    return response.json()'
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'data = base64.b64encode(image_bytes).decode("utf8") <st c="28510">payload =
    {"image": data}</st><st c="28535">response = requests.post(url, json=payload)</st>
    return response.json()'
- en: 'def main():'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 定义主函数 `def main():`
- en: 'try:'
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尝试：
- en: parser = argparse.ArgumentParser(usage=argparse.SUPPRESS)
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: parser = argparse.ArgumentParser(usage=argparse.SUPPRESS)
- en: parser.add_argument("url", help="The url of your API Gateway")
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: parser.add_argument("url", help="你的 API Gateway 的 URL")
- en: parser.add_argument("image", help="The local image that you want to analyze.")
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: parser.add_argument("image", help="你想要分析的本地图片。")
- en: 'args = parser.parse_args() <st c="28919">chapter5/code</st> directory, test
    this application using the following syntax. You will only need to replace <st
    c="29024">invoke_url</st> with your own. This application converts the image into
    <st c="29091">base64</st> for you, so you don’t need to use the <st c="29136">openssl</st>
    tool:'
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: args = parser.parse_args() <st c="28919">chapter5/code</st> 目录，使用以下语法测试此应用。你只需要将<st
    c="29024">invoke_url</st>替换为你自己的即可。此应用会将图像转换为<st c="29091">base64</st>，因此你无需使用<st
    c="29136">openssl</st>工具：
- en: '[PRE9]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: <st c="29197">This application</st> <st c="29215">returns the response to your
    terminal window.</st> <st c="29261">Other applications, more complex ones, could
    just parse it and make a decision based on it.</st> <st c="29353">For example,
    when someone tries to upload a photo, block</st> <st c="29410">the upload.</st>
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="29197">这个应用程序</st> <st c="29215">会将响应返回到你的终端窗口。</st> <st c="29261">其他更复杂的应用程序可以直接解析它并基于此做出决策。</st>
    <st c="29353">例如，当有人尝试上传照片时，可以阻止</st> <st c="29410">上传。</st>
- en: <st c="29421">Cleaning up</st>
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="29421">清理</st>
- en: <st c="29433">This architecture does not cost you anything if no requests are
    made.</st> <st c="29504">All services used are paid for by the request and have
    no provisioning cost.</st> <st c="29581">Nonetheless, it is a good practice to
    delete the solution when you are done</st> <st c="29657">using it.</st>
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="29433">如果没有请求，这种架构不会产生任何费用。</st> <st c="29504">所有使用的服务按请求收费，没有预配置成本。</st>
    <st c="29581">然而，完成使用后删除解决方案是一个良好的实践。</st> <st c="29657">在使用结束后，最好将其删除。</st>
- en: <st c="29666">To delete all the resources, run the following command in the</st>
    `<st c="29729">chapter5/code</st>` <st c="29742">directory</st> <st c="29753">and
    confirm:</st>
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="29666">要删除所有资源，请在</st> `<st c="29729">chapter5/code</st>` <st c="29742">目录中运行以下命令并确认：</st>
- en: '[PRE10]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: <st c="29785">Terraform keeps a state file of its deployed resources, and it
    will only delete the ones it is managing.</st> <st c="29891">If you have other
    resources manually deployed on the same account, those will not</st> <st c="29973">be
    deleted.</st>
  id: totrans-185
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="29785">Terraform会保留其已部署资源的状态文件，并且只会删除它所管理的资源。</st> <st c="29891">如果你有其他手动部署的资源，它们将不会</st>
    <st c="29973">被删除。</st>
- en: <st c="29984">Future work</st>
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="29984">未来工作</st>
- en: <st c="29996">There is only so much a book chapter can cover.</st> <st c="30045">Your
    project works and covers the requirements.</st> <st c="30093">It identifies if
    a photo is professional-looking enough, but you can still</st> <st c="30168">improve
    it.</st>
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="29996">一本书的章节所能涵盖的内容是有限的。</st> <st c="30045">你的项目工作已涵盖了所有需求。</st> <st
    c="30093">它会判断照片是否足够专业，但你仍然可以</st> <st c="30168">进一步改善它。</st>
- en: <st c="30179">Implementing authentication and authorization</st>
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="30179">实现身份验证和授权</st>
- en: <st c="30225">Currently, anyone can</st> <st c="30247">discover and call your
    API</st> <st c="30275">gateway to verify if their photo is professional-looking.</st>
    <st c="30333">A malicious actor can take advantage of this, and you will incur</st>
    <st c="30398">high costs.</st>
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="30225">目前，任何人都可以</st> <st c="30247">发现并调用你的API</st> <st c="30275">网关，以验证他们的照片是否专业。</st>
    <st c="30333">恶意行为者可以利用这一点，造成</st> <st c="30398">高额费用。</st>
- en: <st c="30409">In the previous chapter, you already implemented Cognito to manage
    authentication and authorization.</st> <st c="30511">You could do the same for
    this application, or if your client applications also run on AWS, you could change
    your REST API to a private API.</st> <st c="30652">In this case, your API gateway
    will only be reachable within the VPC and no longer be internet-reachable.</st>
    <st c="30758">You can read</st> <st c="30771">more about it in the AWS documentation</st>
    <st c="30810">at</st> [<st c="30813">https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-private-apis.html</st>](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-private-apis.html)<st
    c="30902">.</st>
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="30409">在前一章中，你已经实现了Cognito来管理身份验证和授权。</st> <st c="30511">你可以对这个应用做同样的操作，或者如果你的客户端应用也运行在AWS上，你可以将你的REST
    API更改为私有API。</st> <st c="30652">在这种情况下，你的API网关将只能在VPC内访问，而不再可以通过互联网访问。</st> <st
    c="30758">你可以在AWS文档中</st> <st c="30771">阅读更多相关内容</st> <st c="30810">，地址为</st>
    [<st c="30813">https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-private-apis.html</st>](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-private-apis.html)<st
    c="30902">。</st>
- en: <st c="30903">Improving your security posture</st>
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="30903">提升你的安全姿态</st>
- en: <st c="30935">You are way past the</st> <st c="30956">static websites you learned
    in</st> [*<st c="30988">Chapter 2</st>*](B22051_02.xhtml#_idTextAnchor032)<st
    c="30997">. This chapter’s application receives users’ input.</st> <st c="31049">This
    is a potential attack vector, as a malicious persona can upload custom software
    to</st> <st c="31137">exploit vulnerabilities.</st>
  id: totrans-192
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="30935">你已经远远超越了</st> <st c="30956">你在</st> [*<st c="30988">第2章</st>*](B22051_02.xhtml#_idTextAnchor032)<st
    c="30997">中学到的静态网站。这一章的应用接收用户输入。</st> <st c="31049">这是一个潜在的攻击向量，因为恶意用户可以上传自定义软件以</st>
    <st c="31137">利用漏洞。</st>
- en: <st c="31161">One way to mitigate this is to attach a WAF with security policies
    to your API gateway and benefit from all its security features described in</st>
    [*<st c="31305">Chapter 2</st>*](B22051_02.xhtml#_idTextAnchor032)<st c="31314">.</st>
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="31161">一种缓解这一问题的方法是将带有安全策略的 WAF 附加到你的 API 网关，并利用其在</st> [*<st c="31305">第2章</st>*](B22051_02.xhtml#_idTextAnchor032)<st
    c="31314">中描述的所有安全功能。</st>
- en: <st c="31315">To implement it, follow the</st> <st c="31344">AWS</st> <st c="31348">documentation:</st>
    [<st c="31363">https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-control-access-aws-waf.html</st>](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-control-access-aws-waf.html)<st
    c="31462">.</st>
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="31315">要实现此功能，按照</st> <st c="31344">AWS</st> <st c="31348">文档中的步骤操作：</st>
    [<st c="31363">https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-control-access-aws-waf.html</st>](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-control-access-aws-waf.html)<st
    c="31462">。</st>
- en: <st c="31463">Implementing custom names</st>
  id: totrans-195
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="31463">实现自定义域名</st>
- en: <st c="31489">You are calling</st> <st c="31506">your API using the URL given
    to you by AWS.</st> <st c="31550">It’s not a</st> <st c="31561">human-friendly
    name.</st>
  id: totrans-196
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="31489">你正在通过 AWS 提供的 URL 调用</st> <st c="31506">你的 API。</st> <st c="31550">这个名字并不</st>
    <st c="31561">适合人类使用。</st>
- en: <st c="31581">To change this, you will need to have your own domain name and
    create</st> <st c="31652">a certificate.</st>
  id: totrans-197
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="31581">要更改此设置，你需要拥有自己的域名并创建</st> <st c="31652">证书。</st>
- en: <st c="31666">In</st> [*<st c="31670">Chapter 3</st>*](B22051_03.xhtml#_idTextAnchor054)<st
    c="31679">, you did this for a load balancer.</st> <st c="31715">API Gateway also
    supports custom domain names</st> <st c="31761">and certificates.</st>
  id: totrans-198
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="31666">在</st> [*<st c="31670">第3章</st>*](B22051_03.xhtml#_idTextAnchor054)<st
    c="31679">中，你为负载均衡器做了这个配置。</st> <st c="31715">API Gateway 还支持自定义域名</st> <st c="31761">和证书。</st>
- en: <st c="31778">To implement it, follow</st> <st c="31803">the AWS</st> <st c="31811">documentation:</st>
    [<st c="31826">https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-custom-domains.html</st>](https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-custom-domains.html)<st
    c="31913">.</st>
  id: totrans-199
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="31778">要实现此功能，按照</st> <st c="31803">AWS</st> <st c="31811">文档中的步骤操作：</st>
    [<st c="31826">https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-custom-domains.html</st>](https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-custom-domains.html)<st
    c="31913">。</st>
- en: <st c="31914">Improving the image analysis algorithm</st>
  id: totrans-200
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="31914">改进图像分析算法</st>
- en: <st c="31953">Currently, your</st> <st c="31970">algorithm detects if the photo
    has a single person, if that person has their eyes open, and if they are smiling.</st>
    <st c="32083">If you implemented the emotions functionality, that is also taken
    into consideration for the</st> <st c="32176">final verdict.</st>
  id: totrans-201
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="31953">目前，你的</st> <st c="31970">算法检测照片中是否有单个人，是否该人眼睛睁开，是否在微笑。</st> <st
    c="32083">如果你实现了情感功能，那么它也会考虑在内，影响</st> <st c="32176">最终的判断结果。</st>
- en: '<st c="32190">However, consider the following scenario: a photo of a fully
    naked person with their eyes open and smiling.</st> <st c="32299">Is it a professional-looking
    photo?</st> <st c="32335">Your algorithm</st> <st c="32350">thinks so.</st>'
  id: totrans-202
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="32190">然而，考虑一下以下场景：一张全裸并且眼睛睁开、微笑的人物照片。</st> <st c="32299">这是一张看起来专业的照片吗？</st>
    <st c="32335">你的算法</st> <st c="32350">认为是的。</st>
- en: <st c="32360">You’ve already exhausted all the useful</st> `<st c="32401">DetectFaces</st>`
    <st c="32412">Rekognition API response fields.</st> <st c="32446">However, you
    can use other APIs to enhance</st> <st c="32489">your solution.</st>
  id: totrans-203
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="32360">你已经用尽了所有有用的</st> `<st c="32401">DetectFaces</st>` <st c="32412">Rekognition
    API 响应字段。</st> <st c="32446">然而，你可以使用其他 API 来增强</st> <st c="32489">你的解决方案。</st>
- en: <st c="32503">For example,</st> `<st c="32517">DetectModerationLabels</st>`
    <st c="32539">detects if images contain inappropriate or offensive content.</st>
    <st c="32602">Examples include explicit nudity, violence, hate symbols, and drugs.</st>
    <st c="32671">You can see all the supported</st> <st c="32701">content and how
    to use it on AWS</st> <st c="32734">documentation,</st> [<st c="32749">https://docs.aws.amazon.com/rekognition/latest/dg/procedure-moderate-images.html</st>](https://docs.aws.amazon.com/rekognition/latest/dg/procedure-moderate-images.html)<st
    c="32829">.</st>
  id: totrans-204
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="32503">例如，</st> `<st c="32517">DetectModerationLabels</st>` <st c="32539">用于检测图像中是否包含不适当或冒犯性内容。</st>
    <st c="32602">示例包括明显的裸露、暴力、仇恨符号和毒品。</st> <st c="32671">你可以在 AWS</st> <st c="32701">文档中查看所有支持的内容及如何使用它，</st>
    [<st c="32749">https://docs.aws.amazon.com/rekognition/latest/dg/procedure-moderate-images.html</st>](https://docs.aws.amazon.com/rekognition/latest/dg/procedure-moderate-images.html)<st
    c="32829">。</st>
- en: <st c="32830">To implement it, you could follow different two approaches depending
    on</st> <st c="32903">your preference:</st>
  id: totrans-205
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="32830">要实现这一点，你可以根据</st> <st c="32903">你的偏好选择两种不同的方法：</st>
- en: <st c="32919">Chain API calls on your already existing Lambda and mash all the
    results into</st> <st c="32998">a decision.</st>
  id: totrans-206
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="32919">在你现有的 Lambda 上链式调用 API，并将所有结果汇总为</st> <st c="32998">一个决策。</st>
- en: <st c="33009">Create a different API resource, for example,</st> `<st c="33056">/moderate</st>`<st
    c="33065">, and a different Lambda function, and chain calls from the consuming</st>
    <st c="33135">client applications.</st>
  id: totrans-207
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="33009">创建一个不同的 API 资源，例如，</st> `<st c="33056">/moderate</st>`<st c="33065">，以及一个不同的
    Lambda 函数，并从客户端应用程序中链式调用。</st>
- en: <st c="33155">Your application is synchronous.</st> <st c="33189">If you add
    a lot of different functionality to do the image verification, the response latency
    will increase, and your user experience will</st> <st c="33329">feel degraded.</st>
  id: totrans-208
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="33155">你的应用程序是同步的。</st> <st c="33189">如果你添加了许多不同的功能来进行图像验证，响应延迟会增加，用户体验将会</st>
    <st c="33329">受到影响。</st>
- en: <st c="33343">You can</st> <st c="33352">change your clients’ expectations to
    submit a photo and wait to receive the verdict at a later date.</st> <st c="33453">Then,
    transform your application into an asynchronous processing application where you
    chain a bunch of verifications, and deliver the decision at</st> <st c="33600">the
    end.</st>
  id: totrans-209
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="33343">你可以</st> <st c="33352">改变客户端的期望，让他们提交照片后等待稍后的判定结果。</st> <st c="33453">然后，将你的应用程序转变为一个异步处理应用程序，在其中你可以链式处理多个验证，并在</st>
    <st c="33600">最后提供决策。</st>
- en: <st c="33608">Hosting your own ML model</st>
  id: totrans-210
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="33608">托管你自己的 ML 模型</st>
- en: <st c="33634">What if the</st> <st c="33647">functionality you a</st><st c="33666">re
    looking for does not exist in a managed service?</st> <st c="33719">Or, maybe
    it exists, but it does not yield the results you are looking for.</st> <st c="33795">For
    example, let’s say you want to identify if the photo was taken by a</st> <st c="33867">professional
    photographer.</st>
  id: totrans-211
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="33634">如果你</st> <st c="33647">寻找的功能在托管服务中不存在怎么办？</st> <st c="33666">或者，也许它存在，但并未产生你期望的结果。</st>
    <st c="33719">例如，假设你想要识别照片是否是由一位</st> <st c="33867">专业摄影师拍摄的。</st>
- en: <st c="33893">In these cases, you can train and host your own</st> <st c="33942">ML
    models.</st>
  id: totrans-212
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="33893">在这些情况下，你可以训练并托管你自己的</st> <st c="33942">ML 模型。</st>
- en: <st c="33952">As briefly mentioned before in this chapter, training your own
    ML models requires expertise in data engineering, model training, and selection
    and</st> <st c="34100">deployment strategies.</st>
  id: totrans-213
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="33952">正如本章前面简要提到的，训练你自己的 ML 模型需要数据工程、模型训练、选择和</st> <st c="34100">部署策略方面的专业知识。</st>
- en: <st c="34122">If you already have this expertise, or, if you want to practice,
    create a model using Amazon SageMaker and call it from your API gateway in a new
    resource path.</st> <st c="34284">This integration will also</st> <st c="34311">require
    a</st> <st c="34321">Lambda function.</st>
  id: totrans-214
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="34122">如果你已经具备这方面的专业知识，或者如果你想进行练习，可以使用 Amazon SageMaker 创建一个模型，并在新的资源路径中通过
    API 网关调用它。</st> <st c="34284">这种集成还</st> <st c="34311">需要一个</st> <st c="34321">Lambda
    函数。</st>
- en: <st c="34337">SageMaker is a fully</st> <st c="34358">managed AWS service that
    aims to simplify and streamline the entire ML workflow, from data preparation
    to the deployment and operation of</st> <st c="34497">ML models.</st>
  id: totrans-215
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="34337">SageMaker 是一个完全</st> <st c="34358">托管的 AWS 服务，旨在简化和优化整个 ML 工作流，从数据准备到
    ML 模型的部署和操作。</st>
- en: <st c="34507">Summary</st>
  id: totrans-216
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="34507">总结</st>
- en: <st c="34515">In this chapter, you saw how AI and ML can help you solve problems
    that are traditionally hard for regular programming to solve.</st> <st c="34645">You,
    again, followed a structured methodology to approach the project, starting from
    the requirements, checking for reusable assets, and</st> <st c="34782">lastly,
    architecting.</st>
  id: totrans-217
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="34515">在本章中，你看到了 AI 和 ML 如何帮助你解决传统编程难以解决的问题。</st> <st c="34645">你再次遵循了一种结构化方法来处理项目，从需求开始，检查可重用的资源，最后，进行架构设计。</st>
- en: <st c="34803">This time, you built</st> <st c="34825">using Terraform.</st>
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="34803">这一次，你使用了 Terraform。</st>
- en: <st c="34841">You dove deep into application logic using Python to retrieve
    and parse API responses.</st> <st c="34929">Then, again,</st> <st c="34942">for
    testing.</st>
  id: totrans-219
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="34841">你深入使用 Python 应用逻辑来检索和解析 API 响应。</st> <st c="34929">然后，再次，</st>
    <st c="34942">用于测试。</st>
- en: <st c="34954">At the end of this chapter, you have multiple ideas that you can
    implement on your own using the AWS documentation to improve this chapter’s project.</st>
    <st c="35105">You can now, confidently, take advantage of AI/ML in your</st> <st
    c="35163">future projects.</st>
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="34954">在本章末尾，你有多个可以通过 AWS 文档自行实现的想法，以改进本章项目。</st> <st c="35105">现在，你可以自信地在你的</st>
    <st c="35163">未来项目中利用 AI/ML。</st>
- en: <st c="35179">In the next chapter, you are going to continue to learn about
    ML systems, this time applied to dynamic content translation.</st> <st c="35304">But
    that is not all; you will also start your journey into</st> <st c="35363">CI/CD
    tooling.</st>
  id: totrans-221
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="35179">在下一章中，你将继续学习有关 ML 系统，这次应用于动态内容翻译。</st> <st c="35304">但这并不是全部；你还将开始你的
    CI/CD 工具之旅。</st>
- en: '[PRE11]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'

- en: '14'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Wrapping Up: GenAI Coding Assistants and Further Reading'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last few years, GenAI has significantly evolved, and there are now numerous
    GenAI-based coding assistants that can help with creating, launching, and monitoring
    K8s clusters. Since the field is evolving at a rapid pace, in this chapter, we
    will cover some of the coding assistants, evolving trends, and good references
    to read for further information.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: GenAI-powered coding assistants
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GenAI-powered observability and optimization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon Q Developer walk-through with Amazon EKS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: References for further reading
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will be using the following services, some of which require
    you to set up an account:'
  prefs: []
  type: TYPE_NORMAL
- en: AWS ([https://signin.aws.amazon.com/signup?request_type=register](https://signin.aws.amazon.com/signup?request_type=register))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker Desktop ([https://www.docker.com/products/docker-desktop/](https://www.docker.com/products/docker-desktop/))
    or `Finch` ([https://runfinch.com/](https://runfinch.com/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GenAI-powered coding assistants
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'GenAI-powered assistants are transforming K8s cluster creation, deployment,
    and management by automating config file creation, workload scaling, and monitoring.
    Some GenAI-based coding assistants that can help with K8s clusters are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Amazon Q Developer` ([https://aws.amazon.com/q/developer/](https://aws.amazon.com/q/developer/)):
    This is Amazon’s GenAI assistant, designed to help with cloud-based development,
    including K8s management on **Amazon** **Elastic Kubernetes Service** (**EKS**).
    It simplifies writing deployment manifests, automating **infrastructure as code**
    (**IaC**), and diagnosing issues in K8s deployment. It can also assist with optimizing
    cluster configurations by providing recommendations for resource allocation, autoscaling
    settings, and networking configurations. In this chapter, we will provide a walk-through
    on how to use AWS Q Developer for an EKS cluster deployment. We chose Amazon Q
    Developer for the walk-through since we are operating in an AWS environment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GitHub Copilot` ([https://github.com/features/copilot](https://github.com/features/copilot)):
    This is an AI-powered coding assistant that can integrate into IDEs, such as Visual
    Studio Code and JetBrains. It can create K8s deployment code, such as deployment
    manifests, Helm charts, and CI/CD pipeline configurations. By providing inline
    suggestions and auto-completion, Copilot can accelerate K8s automation and ensure
    adherence to best practices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Google Gemini Code Assist` ([https://codeassist.google/products/business](https://codeassist.google/products/business)):
    This coding assistant can work across the software development life cycle. It
    can help with K8s workload optimization and infrastructure management and provide
    insights into scaling policies, cluster health, and performance tuning. By leveraging
    AI, Gemini suggests ways to optimize cost efficiency and minimize downtime, especially
    for GKE clusters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Microsoft Copilot in Azure` ([https://azure.microsoft.com/en-us/products/copilot](https://azure.microsoft.com/en-us/products/copilot)):
    This can assist developers working with **Azure Kubernetes Service** (**AKS**).
    It provides recommendations for cluster scaling, node pool configurations, and
    security policies. Azure AI Copilot also integrates with Terraform and Bicep,
    allowing DevOps teams to automate K8s infrastructure provisioning efficiently.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IBM watsonx Code Assistant` ([https://www.ibm.com/products/watsonx-code-assistant](https://www.ibm.com/products/watsonx-code-assistant)):
    This is particularly useful for teams using OpenShift and K8s in hybrid cloud
    environments. It automates application containerization, suggesting optimizations
    for container images, network policies, and security hardening. It also integrates
    with Red Hat OpenShift GitOps, allowing AI-driven automation of CI/CD pipelines
    and application deployment strategies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'K8sGPT ([https://k8sgpt.ai/](https://k8sgpt.ai/)): This is an open source tool
    that brings AI-powered diagnostics to K8s clusters by leveraging GenAI to identify,
    analyze, and explain issues. It can be run locally using a CLI or deployed in
    a K8s cluster for continuous analysis. It supports a variety of AI backends, including
    OpenAI, or even local LLMs through tools such as Ollama or LangChain, giving teams
    flexibility based on their data privacy needs. It scans various K8s resources,
    such as Pods, Services, Deployments, and Nodes, and detects problems such as crash
    loops, configuration errors, or failed health checks. Instead of K8s error messages,
    K8sGPT can provide clear, human-readable explanations along with suggested remediation
    steps, making it especially helpful for developers and SREs troubleshooting complex
    environments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, instead of a vague `CrashLoopBackOff` error, K8sGPT might explain
    that a Pod is crashing because it’s missing a required secret or has a misconfigured
    environment variable.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In this section, we explored several GenAI-powered coding assistants that aid
    in software deployment, generating IaC, and debugging K8s clusters. However, when
    working with AI-generated configurations, such as Amazon Q Developer or any other
    GenAI assistant, it’s essential to validate output manually and test it in a staging
    environment before deployment. Tools such as `terraform plan`, `docker scan`,
    and `kubeval` can help verify syntactic correctness and highlight configuration
    issues. Consider using policy-as-code frameworks, such as **Open Policy Agent**
    (**OPA**), to enforce security standards automatically.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will discuss how GenAI is transforming the K8s observability
    and optimization landscape.
  prefs: []
  type: TYPE_NORMAL
- en: GenAI-powered observability and optimization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Besides generating the K8s manifest files, GenAI is also transforming K8s operations
    by automating security, monitoring, and optimization. These AI-powered solutions
    are making K8s environments more efficient, cost-effective, and self-healing.
    Some good examples are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**AI-powered K8s autoscaling**: Traditional K8s autoscalers rely on CPU and
    memory thresholds, but AI-powered autoscalers predict workload demands and dynamically
    adjust resources to optimize performance and costs. Tools such as StormForge ([https://stormforge.io/](https://stormforge.io/))
    and PredictKube ([https://dysnix.com/predictkube](https://dysnix.com/predictkube))
    leverage **machine learning** (**ML**) to enhance autoscaling strategies, preventing
    over-provisioning while ensuring availability during traffic spikes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AI-assisted K8s governance and policy enforcement**: AI-driven governance
    tools enforce compliance and security policies in K8s clusters. By integrating
    ML models trained in historical data and policy violations, one can go beyond
    static rule definitions. For example, one can analyze historical policy violations
    and detect patterns, such as which resources are most affected and under what
    conditions. Based on learned patterns, AI can suggest new rules to tighten access
    beyond the static rules for policy enforcers, such as OPA.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GenAI for K8s workflows and observability**: AI-powered observability tools
    analyze logs, metrics, and traces to identify anomalies before they impact applications.
    Solutions such as New Relic AI ([https://newrelic.com/platform/new-relic-ai](https://newrelic.com/platform/new-relic-ai))
    and Dynatrace Davis AI ([https://www.dynatrace.com/platform/artificial-intelligence/](https://www.dynatrace.com/platform/artificial-intelligence/))
    can automate root cause analysis and alert prioritization, helping DevOps reduce
    downtime and improve troubleshooting efficiency. Prometheus with AI models enhances
    smart alerting by filtering out non-critical events and focusing on actionable
    insights.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Envoy AI Gateway** ([https://aigateway.envoyproxy.io/docs/](https://aigateway.envoyproxy.io/docs/)):
    This was developed to simplify the increasingly complex task of connecting modern
    applications to GenAI services. Built on Envoy Proxy, the project offers a unified
    layer to manage LLM/AI traffic at scale. Key goals of the project include providing
    seamless routing and policy control for GenAI workloads, supporting automatic
    failover for resilient service delivery, securing AI traffic with upstream authorization,
    and enabling usage limits through a flexible policy framework. At its core, Envoy
    AI Gateway aims to make GenAI infrastructure easier to integrate and safer to
    operate. To use Envoy AI Gateway’s observability capabilities, users can configure
    Prometheus to scrape metrics exposed by the gateway, which include AI-specific
    insights such as token usage, time to first token, and per-token latency. These
    metrics follow OpenTelemetry’s GenAI semantic conventions and are designed to
    give visibility into how GenAI models are performing in production.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Generative AI for K8s IaC**: AI-powered assistants accelerate K8s infrastructure
    deployment by automatically generating YAML, Terraform, and Helm configurations.
    Tools such as Amazon Q Developer enable teams to describe their desired infrastructure
    in plain language and receive optimized configurations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AI-powered K8s cost optimization (FinOps)**: Optimizing cloud costs in K8s
    environments is challenging due to the dynamic nature of workloads. AI-powered
    FinOps solutions such as Harness ([https://www.harness.io/solutions/finops-excellence](https://www.harness.io/solutions/finops-excellence))
    and Cast AI ([https://cast.ai/](https://cast.ai/)) can analyze cluster utilization,
    suggest cost-saving measures, and adjust resource allocations to minimize waste.
    These tools help organizations optimize their K8s spending while maintaining application
    performance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GenAI-powered K8s ChatOps**: AI-driven ChatOps tools enhance K8s management
    by enabling conversational interactions within platforms such as Slack and Microsoft
    Teams. Botkube AI Assistant ([https://botkube.io/](https://botkube.io/)) allows
    users to query K8s clusters and execute commands via chat, while K8sGPT functions
    as an AI-powered K8s SRE, diagnosing and resolving cluster issues autonomously.
    AI-driven self-healing mechanisms can detect failures, restart Pods, and proactively
    fix issues without manual intervention.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we explored various AI-powered tools that can help transform
    K8s environments. These tools can be leveraged to automate key K8s operations
    such as autoscaling, security, cost optimization, and observability. In the next
    section, we’ll walk through how to use a GenAI assistant to simplify the development
    of K8s applications.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Q Developer walk-through with EKS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will explore how GenAI-powered assistants, such as Amazon
    Q Developer, can simplify the development of GenAI applications, streamline the
    creation and management of K8s clusters, and simplify deployments. Amazon Q Developer
    introduced a new *agentic experience* directly within the **command-line interface**
    (**CLI**), offering a dynamic and interactive coding experience. Agentic experiences
    refer to systems that actively assist users by understanding context, offering
    suggestions, and helping guide task completion. Amazon Q Developer iteratively
    refines changes based on your feedback and leverages information from your CLI
    environment to assist with local file operations, querying AWS resources, writing
    code, and automatically debugging issues.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: When using GenAI-powered assistants for coding and executing local tasks such
    as running commands, always review generated code and commands thoroughly. Ensure
    they are secure, appropriate for your environment, and won’t unintentionally affect
    critical resources or data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Install *Amazon Q Developer for command line* by following the instructions
    at [https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/command-line-installing.html](https://docs.aws.amazon.com/amazonq/latest/qdeveloper-ug/command-line-installing.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a terminal or command-line application and initiate a conversation with
    Amazon Q Developer using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You will be directed to the **AWS Builder ID** login page ([https://docs.aws.amazon.com/signin/latest/userguide/sign-in-aws_builder_id.html](https://docs.aws.amazon.com/signin/latest/userguide/sign-in-aws_builder_id.html))
    to allow permission to Amazon Q Developer for command line.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type the following query in the CLI. Amazon Q Developer will process your input,
    considering the provided context, call the **Amazon Bedrock API**, and respond
    with an output as shown in *Figure 14**.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.1 – Kubectl command generation using Amazon Q Developer](img/B31108_14_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.1 – Kubectl command generation using Amazon Q Developer
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s ask the GenAI assistant to create the IaC templates for creating
    a new Amazon EKS cluster along with a VPC, private and public subnets, and so
    on. Use the following prompt in the CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Within a few seconds, Amazon Q Developer will generate Terraform code to create
    an Amazon VPC, EKS cluster, and so on, along with Terraform provider configuration,
    input variables, and outputs, as shown in *Figure 14**.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.2 – Terraform code generation using Amazon Q Developer](img/B31108_14_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.2 – Terraform code generation using Amazon Q Developer
  prefs: []
  type: TYPE_NORMAL
- en: We ran this prompt and uploaded the generated files to the GitHub repository
    at [https://github.com/PacktPublishing/Kubernetes-for-Generative-AI-Solutions/tree/main/ch14/amazon-q-demo](https://github.com/PacktPublishing/Kubernetes-for-Generative-AI-Solutions/tree/main/ch14/amazon-q-demo).
  prefs: []
  type: TYPE_NORMAL
- en: 'GenAI-powered coding assistants may use older versions of Terraform providers
    or modules, based on their training data. In the generated code, it used `Terraform
    version >= 1.0.0`, `AWS provider >= 5.0.0`, and so on. We can also give a follow-up
    prompt to use specific versions of these providers, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Amazon Q Developer will reason the prompt, start reading the Terraform files
    from the local filesystem, and suggest the changes, as shown in Figure 14.3:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.3 – Output of Amazon Q Developer](img/B31108_14_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.3 – Output of Amazon Q Developer
  prefs: []
  type: TYPE_NORMAL
- en: You can review the generated Terraform code and ask the agent to plan and deploy
    it to the AWS account using natural language prompts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, you can use Amazon Q Developer to automatically generate complete
    project code from the ground up, such as for a to-do application that provides
    basic functionality to manage to-do tasks. Run the following prompt in an empty
    directory to generate a to-do application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Within no time, Amazon Q Developer will start creating a hierarchal project
    structure, source code files, Dockerfile for containerization, documentation,
    and so on. We executed this prompt and provided the generated files in the GitHub
    repository at [https://github.com/PacktPublishing/Kubernetes-for-Generative-AI-Solutions/tree/main/ch14/todo-app](https://github.com/PacktPublishing/Kubernetes-for-Generative-AI-Solutions/tree/main/ch14/todo-app).
    It created the project structure and files shown in Figure 14.4:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.4 – Output of Amazon Q Developer](img/B31108_14_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.4 – Output of Amazon Q Developer
  prefs: []
  type: TYPE_NORMAL
- en: 'Review the generated files. To test the application locally, we can prompt
    Amazon Q Developer to build the container image and run it using Docker or Finch.
    Use the following prompt to build and run the container image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'On a different terminal, you use the following commands to verify the container
    image and running container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we can take this a step further by asking the AI assistant to create
    the necessary K8s manifest files and deploy the application to a K8s cluster.
    Use the following prompt to create the K8s Deployment and Service resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Within a few seconds, Amazon Q Developer will generate K8s deployment, service,
    and namespace manifest files, among others, to deploy the to-do application to
    a K8s cluster, as shown in Figure 14.5:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.5 – K8s manifest files created by Amazon Q Developer](img/B31108_14_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.5 – K8s manifest files created by Amazon Q Developer
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we have explored how AI coding assistants such as Amazon Q
    Developer simplify software development tasks, including generating K8s configuration
    files and IaC templates for creating AWS and EKS resources. We have interacted
    with these assistants using natural language prompts, instructing them to perform
    various tasks such as building a container image, running applications locally,
    and modifying the generated code to meet specific requirements. In the next section,
    we will provide references for further reading on this topic.
  prefs: []
  type: TYPE_NORMAL
- en: References for further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[https://kubernetes.io/docs/](https://kubernetes.io/docs/): Official Kubernetes
    documentation, always up to date and comprehensive'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/kubernetes/kubernetes](https://github.com/kubernetes/kubernetes):
    The core Kubernetes GitHub repo with source code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://training.linuxfoundation.org/certification/](https://training.linuxfoundation.org/certification/):
    The Linux Foundation, in partnership with the `Certified Kubernetes Administrator`
    (CKA), `Certified Kubernetes Application Developer` (CKAD), and `Certified Kubernetes
    Security` `Specialist` (`CKS`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://kubernetes.io/blog/](https://kubernetes.io/blog/): The official blog
    with updates, best practices, and use cases'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://kubernetes.io/community/](https://kubernetes.io/community/): Community
    hub for contributing, SIGs, events, and getting involved'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.cncf.io/projects/kubernetes/](https://www.cncf.io/projects/kubernetes/):
    K8s page on CNCF – project status, governance, and landscape'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/aws-ia/terraform-aws-eks-blueprints](https://github.com/aws-ia/terraform-aws-eks-blueprints):
    Official EKS blueprints using Terraform – modular and production-ready'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://awslabs.github.io/data-on-eks/](https://awslabs.github.io/data-on-eks/):
    Data on EKS is a tool to build, deploy, and scale Data & ML platforms on EKS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://aws.github.io/aws-eks-best-practices/](https://aws.github.io/aws-eks-best-practices/):
    Official *Amazon EKS Best Practices Guide*, covering security, networking, scaling,
    GitOps, and more'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://wellarchitectedlabs.com/architecture-guides/containers/eks-best-practices/](https://wellarchitectedlabs.com/architecture-guides/containers/eks-best-practices/):
    *AWS Well-Architected Labs* guide for EKS with practical labs and architecture
    reviews'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered how GenAI-based coding assistants are transforming
    the way K8s clusters are being built, deployed, and monitored. These tools automate
    IaC, optimize workloads, and enhance observability. Key assistants include Amazon
    Q Developer, GitHub Copilot, Google Gemini Code Assist, Microsoft Azure Copilot,
    IBM watsonx Code Assistant, and K8sGPT. They support everything from writing deployment
    manifests and Terraform configurations to real-time diagnostics and optimization
    of cluster performance.
  prefs: []
  type: TYPE_NORMAL
- en: GenAI tools also boost observability, security, and cost efficiency through
    AI-powered autoscaling, anomaly detection, and policy enforcement. Tools such
    as StormForge, PredictKube, and Dynatrace Davis AI automate root cause analysis
    and resource scaling, while others, such as Harness and Cast AI, assist with K8s
    FinOps.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Q Developer offers CLI-based support to generate and refine Terraform
    templates, build Docker containers, and deploy complete applications using simple
    natural language prompts. It supports creating modular IaC for EKS clusters and
    enables fast iteration through intelligent suggestions.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we provided a curated list of references for deeper learning. These
    include official K8s documentation, GitHub repositories, and blogs offering best
    practices, patterns, and community resources. It also highlights certification
    programs from the Linux Foundation and CNCF. Together, these resources offer valuable
    guidance for mastering K8s and effectively using GenAI-powered tools in production
    environments. We hope you enjoyed reading this book and we will look forward to
    getting your feedback on how we can improve in future editions.
  prefs: []
  type: TYPE_NORMAL
- en: Stay Sharp in Cloud and DevOps – Join 44,000+ Subscribers of CloudPro
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**CloudPro** is a weekly newsletter for cloud professionals who want to stay
    current on the fast-evolving world of cloud computing, DevOps, and infrastructure
    engineering.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Every issue delivers focused, high-signal content on topics like:'
  prefs: []
  type: TYPE_NORMAL
- en: AWS, GCP & multi-cloud architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Containers, Kubernetes & orchestration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Infrastructure as Code (IaC) with Terraform, Pulumi, etc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Platform engineering & automation workflows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Observability, performance tuning, and reliability best practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether you’re a cloud engineer, SRE, DevOps practitioner, or platform lead,
    CloudPro helps you stay on top of what matters, without the noise.
  prefs: []
  type: TYPE_NORMAL
- en: 'Scan the QR code to join for free and get weekly insights straight to your
    inbox:'
  prefs: []
  type: TYPE_NORMAL
- en: '![https://packt.link/cloudpro](img/NL_Part1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[https://packt.link/cloudpro](https://packt.link/cloudpro)'
  prefs: []
  type: TYPE_NORMAL

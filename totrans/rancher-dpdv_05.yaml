- en: '*Chapter 3*: Creating a Single Node Rancher'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 3 章*：创建单节点 Rancher'
- en: This chapter will cover the process of installing Rancher as a single Docker
    container. This is an excellent option for proof of concept, development, or testing
    purposes. This chapter will cover the requirements and limitations of a single-node
    Rancher and the core architecture rules needed to create a proper enterprise solution.
    Finally, it will cover migrating to a **High Availability** (**HA**) cluster.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖将 Rancher 安装为单个 Docker 容器的过程。这是一个非常适合概念验证、开发或测试目的的选项。本章将介绍单节点 Rancher 的要求与限制，以及构建一个合适的企业解决方案所需的核心架构规则。最后，本章将讲解如何迁移到
    **高可用性**（**HA**）集群。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主要内容：
- en: What is a single-node Rancher installation?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是单节点 Rancher 安装？
- en: Requirements and limitations
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要求与限制
- en: Rules for architecting a solution
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 架构解决方案的规则
- en: Installation steps
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装步骤
- en: Migration to an HA setup
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迁移到 HA 配置
- en: What is a single-node Rancher installation?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是单节点 Rancher 安装？
- en: Rancher can be installed by running a single Docker container. This process
    goes back to the roots of Rancher v1.6 when the Rancher server was a Java-based
    application that ran as a Docker container using an external MySQL database or
    in single node mode using a MySQL server running inside the Rancher server container.
    With the move to Rancher v2.x, everything in Rancher moved to use the Kube-apiserver
    and `KUBECONFIG` is set. Kubernetes sets this variable by default in all pods,
    so if it’s missing, then Rancher knows that it must be running in single-node
    mode. At which point, the Rancher server process will start checking whether there
    are SSL certificates for the Kubernetes components if they are missing or expired.
    Rancher will handle creating them. Next, Rancher will start etcd in a cluster
    of one and start Kube-apiserver and the required controllers. The big note here
    is this cluster is very stripped down. For example, this cluster does not have
    CoreDNS, ingress-controller, or even a `true` cluster and was any kind of standard
    configuration. Several problems came up with the earlier versions. For example,
    before Rancher v2.3.x, there was no way to rotate the certificates inside the
    Rancher server container, and initially, Rancher would create certificates with
    an expiration of 1 year. This meant that after a year, your Rancher server would
    crash and wouldn’t start up because none of the Kubernetes components work with
    expired certificates, this being a safety measure in the Go library to not allow
    any HTTPS connection to an endpoint without a validated certificate. And, of course,
    an expired certificate is not a validated certificate. In Rancher v2.3.x, a process
    was added to Rancher to look for expired or expiring certificates and rotate them.
    This was done by spinning up a unique K3s cluster inside a Docker container and
    deploying the Rancher server as a pod.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Rancher 可以通过运行一个 Docker 容器进行安装。这个过程可以追溯到 Rancher v1.6 版本，当时 Rancher 服务器是一个基于
    Java 的应用程序，通过 Docker 容器运行，并使用外部 MySQL 数据库，或者在单节点模式下使用运行在 Rancher 服务器容器内的 MySQL
    服务器。随着 Rancher v2.x 的发布，Rancher 中的一切都转向使用 Kube-apiserver，并且设置了 `KUBECONFIG`。Kubernetes
    默认在所有 Pod 中设置这个变量，因此如果缺少它，Rancher 就知道它必须在单节点模式下运行。此时，Rancher 服务器进程将开始检查 Kubernetes
    组件是否有 SSL 证书，如果证书缺失或已过期，Rancher 将负责创建它们。接下来，Rancher 会启动一个单节点的 etcd 集群，并启动 Kube-apiserver
    和所需的控制器。这里需要注意的是，这个集群是非常精简的。例如，这个集群没有 CoreDNS、ingress-controller，甚至没有一个 `true`
    集群，且没有任何标准配置。早期版本中出现了几个问题。例如，在 Rancher v2.3.x 之前，无法在 Rancher 服务器容器内旋转证书，最初，Rancher
    会创建一个有效期为 1 年的证书。这意味着一年后，Rancher 服务器会崩溃并无法启动，因为 Kubernetes 组件与过期证书无法正常工作，这是一种
    Go 库中的安全措施，不允许任何没有验证证书的 HTTPS 连接。而且，过期的证书显然不是有效的证书。在 Rancher v2.3.x 版本中，Rancher
    添加了一个过程，用于查找过期或即将过期的证书并旋转它们。这是通过在 Docker 容器内启动一个独特的 K3s 集群并将 Rancher 服务器作为 Pod
    部署来实现的。
- en: Requirements and limitations
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 要求与限制
- en: 'The following items are **requirements** for a single-node Rancher:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是单节点 Rancher 的 **要求**：
- en: A Linux host running Docker 18.06.3, 18.09.x, 19.03.x, 20.10.x
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行 Docker 18.06.3、18.09.x、19.03.x、20.10.x 的 Linux 主机
- en: Minimum of two cores but four cores is highly recommended
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 至少需要两个核心，但强烈推荐四个核心
- en: 8 GB of RAM
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 8 GB RAM
- en: 10 GB of SSD storage with a latency under 10ms
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 10 GB 的 SSD 存储，延迟不超过 10 毫秒
- en: Inbound TCP ports `80` and `443` between the end users and the managed clusters
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在终端用户和管理的集群之间，`80` 和 `443` 端口需要开放
- en: 'The following items are not required but are **highly recommended**:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以下项不是必须的，但**强烈推荐**：
- en: A DNS record such as `rancher.example.com` in place of using the server hostname
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用服务器主机名时，可以使用像 `rancher.example.com` 这样的 DNS 记录
- en: A certificate signed by a recognized Certificate Authority (CA), such as DigiCert
    and GoDaddy
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由受认可的证书颁发机构（CA）签名的证书，如 DigiCert 和 GoDaddy
- en: An HTTP or TCP load balancer placed in front of the Rancher server
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Rancher 服务器前面放置一个 HTTP 或 TCP 负载均衡器
- en: Server backups, which can be a file or snapshot-level backups
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器备份，可以是文件或快照级别的备份
- en: A dedicated filesystem/disk for the Docker filesystem `/var/lib/docker`
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 Docker 文件系统 `/var/lib/docker` 提供专用的文件系统/磁盘
- en: A dedicated filesystem/disk for the Rancher persistent data `/var/lib/rancher`
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 Rancher 持久数据 `/var/lib/rancher` 提供专用的文件系统/磁盘
- en: The Linux host should be a **virtual machine** (**VM**) where the hypervisor
    or cloud provider will be providing redundancy in the event of hardware failure.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux 主机应为**虚拟机**（**VM**），其中虚拟化管理程序或云提供商会提供冗余，以防硬件故障。
- en: 'The following items are the known **limitations** of a single-node Rancher:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是单节点 Rancher 的已知**限制**：
- en: A single-node Rancher is recommended only for development and testing purposes.
    Do not use it in production.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单节点 Rancher 仅建议用于开发和测试目的，不应用于生产环境。
- en: Only the Rancher server should be installed on this host. This server should
    not be hosting any other applications.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此主机上应仅安装 Rancher 服务器。该服务器不应托管任何其他应用程序。
- en: A single-node Rancher is not designed for **HA.**
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单节点 Rancher 并非为**高可用（HA）**设计。
- en: Migrating from a single node to HA is not officially supported and is not guaranteed
    to work.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从单节点迁移到高可用（HA）并未正式支持，也不能保证能够成功。
- en: The single-node Rancher feature will be removed at some point and will no longer
    be available.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单节点 Rancher 功能将被移除，并且不再提供。
- en: Rancher v2.5.x and higher requires the privileged option, so you cannot run
    Docker in rootless mode.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Rancher v2.5.x 及更高版本需要特权选项，因此不能以无根模式运行 Docker。
- en: A single-node Rancher can be installed on a desktop/laptop, but there are issues
    when the IP address of the host changes along with requiring DNS records to be
    created.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单节点 Rancher 可以安装在台式机/笔记本电脑上，但当主机的 IP 地址发生变化时，会遇到问题，并且需要创建 DNS 记录。
- en: Rules for architecting a solution
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 架构解决方案的规则
- en: 'The **pros** are as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**优点**如下：'
- en: A single-node Rancher is very simple to set up as you just need to deploy a
    single container.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单节点 Rancher 设置非常简单，只需部署一个容器即可。
- en: It’s very fast to spin up. A single-node Rancher only takes a few minutes to
    start compared with RKE, which can take 10-15 minutes to start.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动非常快。与 RKE 需要 10-15 分钟才能启动相比，单节点 Rancher 只需几分钟即可启动。
- en: It has low resource utilization, compared to RancherD and a complete RKE cluster.
    A single-node Rancher uses a lot less CPU, memory, and storage.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 RancherD 和完整的 RKE 集群相比，它的资源利用率较低。单节点 Rancher 使用的 CPU、内存和存储都要少得多。
- en: There is no need for a load balancer or DNS if you want just the server hostname
    or IP address.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果只需要服务器主机名或 IP 地址，则无需负载均衡器或 DNS。
- en: 'A single-node Rancher can be run on a laptop. (Note: Rancher Desktop is a better
    product for this solution.)'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单节点 Rancher 可以在笔记本电脑上运行。（注意：Rancher Desktop 是更适合此方案的产品。）
- en: 'The **cons** are as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**缺点**如下：'
- en: A single-node Rancher is not designed for production.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单节点 Rancher 并非为生产环境设计。
- en: Rancher official and community support is very limited.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Rancher 官方和社区支持非常有限。
- en: There are limited troubleshooting options as the K3s settings are baked into
    the code and cannot be changed without building a new release.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于 K3s 设置已经嵌入代码中，且无法在不构建新版本的情况下更改，因此故障排除选项非常有限。
- en: The long-term future of single-node Rancher is uncertain and will be removed
    in a future release.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单节点 Rancher 的长期前景不确定，未来的版本中将被移除。
- en: There’s no scalability or redundancy if the host goes offline. Rancher is down.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果主机下线，则没有扩展性或冗余。Rancher 会宕机。
- en: By default, a single-node Rancher stores its data inside the container, and
    if that container is lost, the data will be lost.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认情况下，单节点 Rancher 将其数据存储在容器内部，如果容器丢失，数据也会丢失。
- en: There’s no built-in backup solution; RKE, RKE2, K3s, and RancherD can back up
    to local disk or S3.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有内置的备份解决方案；RKE、RKE2、K3s 和 RancherD 可以备份到本地磁盘或 S3。
- en: 'The **architecture rules** are as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**架构规则**如下：'
- en: You should plan for migrating from a single-node Rancher to HA.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你应该规划从单节点 Rancher 迁移到 HA 的方案。
- en: Rancher requires an SSL certificate and will not work without a certificate.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Rancher 需要一个 SSL 证书，没有证书将无法工作。
- en: Using publicly signed certificates can make scripts and tools easier as the
    Rancher URL will be trusted by default.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用公开签名的证书可以使脚本和工具更方便，因为 Rancher URL 默认会被信任。
- en: All clusters/nodes that Rancher will be managing need to connect to the Rancher
    URL over SSL.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Rancher 将管理的所有集群/节点需要通过 SSL 连接到 Rancher URL。
- en: Rancher does support air-gapped environments, but it will require additional
    steps to provide proxied access to the internet, or you will need to offer Docker
    images and catalogs via internally hosted services.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Rancher 确实支持隔离环境，但需要额外的步骤来提供代理访问互联网，或者你需要通过内部托管服务提供 Docker 镜像和目录。
- en: Installation steps
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装步骤
- en: 'We are going to assume the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设以下情况：
- en: That you already have a Linux VM that has been created and patched (in this
    example, we’ll be using a VMware VM running Ubuntu 20.04).
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保你已经创建并更新了一个 Linux 虚拟机（在本示例中，我们将使用运行 Ubuntu 20.04 的 VMware 虚拟机）。
- en: That the Linux VM has internet access and doesn’t require an HTTP proxy for
    access. Note, if you do not have internet access, please see the air-gap steps
    located at [https://rancher.com/docs/rancher/v2.5/en/installation/other-installation-methods/air-gap/](https://rancher.com/docs/rancher/v2.5/en/installation/other-installation-methods/air-gap/).
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保 Linux 虚拟机可以访问互联网，并且不需要 HTTP 代理进行访问。注意，如果你没有互联网访问权限，请参考位于 [https://rancher.com/docs/rancher/v2.5/en/installation/other-installation-methods/air-gap/](https://rancher.com/docs/rancher/v2.5/en/installation/other-installation-methods/air-gap/)
    的隔离步骤。
- en: That you have SSH and root access to the Linux VM.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你拥有对 Linux 虚拟机的 SSH 和 root 访问权限。
- en: That you are installing Docker using a default configuration and storage location.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你正在使用默认配置和存储位置安装 Docker。
- en: That the filesystems `/var/lib/docker` and `/var/lib/rancher` have already been
    created and mounted.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保文件系统 `/var/lib/docker` 和 `/var/lib/rancher` 已经创建并挂载。
- en: That you have already created a DNS record for Rancher. In this example, we’ll
    be using `rancher.support.tools` and an associated SSL certificate signed by a
    recognized CA.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你已经为 Rancher 创建了 DNS 记录。在本示例中，我们将使用 `rancher.support.tools` 和一个由受信任的 CA 签发的
    SSL 证书。
- en: Installing Docker
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Docker
- en: 'In this section, we’ll be installing and configuring Docker:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将安装并配置 Docker：
- en: SSH into the Linux VM and become root using the `sudo su -` command.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过 SSH 进入 Linux 虚拟机，并使用 `sudo su -` 命令切换为 root 用户。
- en: Run the `curl https://releases.rancher.com/install-docker/20.10.sh | bash` command
    to install Docker.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `curl https://releases.rancher.com/install-docker/20.10.sh | bash` 命令来安装
    Docker。
- en: Set Docker to start at system boot by running `systemctl enable docker`.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行 `systemctl enable docker` 命令设置 Docker 在系统启动时启动。
- en: 'Verify Docker is running by running `docker info`. The output should look like
    the following:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行 `docker info` 来验证 Docker 是否正在运行。输出应如下所示：
- en: '![Figure 3.1 – Docker information output'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.1 – Docker 信息输出'
- en: '](img/B18053_03_01.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18053_03_01.jpg)'
- en: Figure 3.1 – Docker information output
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1 – Docker 信息输出
- en: 'Text output: [https://raw.githubusercontent.com/PacktPublishing/Rancher-Deep-Dive/main/ch03/install_steps/01_installing_docker/example_output.txt](https://raw.githubusercontent.com/PacktPublishing/Rancher-Deep-Dive/main/ch03/install_steps/01_installing_docker/example_output.txt)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 文本输出：[https://raw.githubusercontent.com/PacktPublishing/Rancher-Deep-Dive/main/ch03/install_steps/01_installing_docker/example_output.txt](https://raw.githubusercontent.com/PacktPublishing/Rancher-Deep-Dive/main/ch03/install_steps/01_installing_docker/example_output.txt)
- en: 'Configure log rotation – we’ll want to enable log rotation of the Docker logs.
    Create/edit the `/etc/docker/daemon.json` file to have the following content:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置日志轮转 – 我们需要启用 Docker 日志的轮转。创建/编辑 `/etc/docker/daemon.json` 文件，使其包含以下内容：
- en: '![Figure 3.2 – Enabling log rotation of the Docker logs'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.2 – 启用 Docker 日志轮转'
- en: '](img/B18053_03_02.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18053_03_02.jpg)'
- en: Figure 3.2 – Enabling log rotation of the Docker logs
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.2 – 启用 Docker 日志轮转
- en: 'Test version: [https://raw.githubusercontent.com/PacktPublishing/Rancher-Deep-Dive/main/ch03/install_steps/02_configure-log-rotation/daemon.json](https://raw.githubusercontent.com/PacktPublishing/Rancher-Deep-Dive/main/ch03/install_steps/02_configure-log-rotation/daemon.json)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 测试版本：[https://raw.githubusercontent.com/PacktPublishing/Rancher-Deep-Dive/main/ch03/install_steps/02_configure-log-rotation/daemon.json](https://raw.githubusercontent.com/PacktPublishing/Rancher-Deep-Dive/main/ch03/install_steps/02_configure-log-rotation/daemon.json)
- en: Restart Docker to apply the change using the `systemctl restart docker` command.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `systemctl restart docker` 命令重启 Docker 以应用更改。
- en: Prepping the SSL certificates
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备 SSL 证书
- en: 'In this section, we’ll be preparing the SSL certificate and key for use by
    the Rancher server. These files will be called `tls.crt` and `tls.key`. The steps
    are as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将准备用于 Rancher 服务器的 SSL 证书和密钥。这些文件将被称为 `tls.crt` 和 `tls.key`。步骤如下：
- en: To create `tls.crt`, we’ll need a full certificate chain. This includes the
    root and intermediate certificates. Most public root authorities publish these
    certificates on their website.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建 `tls.crt`，我们需要完整的证书链。这包括根证书和中间证书。大多数公共根证书机构会在其网站上发布这些证书。
- en: We’ll want all certificates files to be in the **Privacy Enhanced Mail** (**PEM**)
    format. Note that sometimes this is called **Base64**. If your certificate is
    in a different format, you should go to [https://knowledge.digicert.com/solution/SO26449.html](https://knowledge.digicert.com/solution/SO26449.html)
    for more details about converting between formats.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们希望所有证书文件都是**隐私增强邮件**（**PEM**）格式的。请注意，有时这也称为**Base64**。如果你的证书是其他格式，应该访问[https://knowledge.digicert.com/solution/SO26449.html](https://knowledge.digicert.com/solution/SO26449.html)获取关于格式转换的更多信息。
- en: Once all files are in the PEM format, we’ll want to create a file with the content
    of each certificate in the following order. Note that some certificates might
    have multiple intermediate certificates. If you have questions, please work with
    your CA. Also, if you are using an internal CA, you might not have an intermediate
    certificate. You might just have the root and server certificate.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦所有文件都为 PEM 格式，我们需要创建一个文件，其中包含每个证书的内容，按以下顺序排列。请注意，有些证书可能包含多个中间证书。如果你有任何问题，请联系你的证书颁发机构（CA）。此外，如果你使用的是内部
    CA，可能没有中间证书，你可能只拥有根证书和服务器证书。
- en: '![Figure 3.3 – Creating a file to store the certificates'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.3 – 创建存储证书的文件'
- en: '](img/B18053_03_03.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18053_03_03.jpg)'
- en: Figure 3.3 – Creating a file to store the certificates
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.3 – 创建存储证书的文件
- en: 'Text example: [https://raw.githubusercontent.com/PacktPublishing/Rancher-Deep-Dive/main/ch03/install_steps/03_prepping_ssl_certs/example_certs/tls.pem](https://raw.githubusercontent.com/PacktPublishing/Rancher-Deep-Dive/main/ch03/install_steps/03_prepping_ssl_certs/example_certs/tls.pem)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 文本示例：[https://raw.githubusercontent.com/PacktPublishing/Rancher-Deep-Dive/main/ch03/install_steps/03_prepping_ssl_certs/example_certs/tls.pem](https://raw.githubusercontent.com/PacktPublishing/Rancher-Deep-Dive/main/ch03/install_steps/03_prepping_ssl_certs/example_certs/tls.pem)
- en: For the private key, we’ll want to make sure it does not have a passphrase.
    We do this by reviewing the top of the file; see the following examples for details.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于私钥，我们需要确保它没有密码短语。我们通过检查文件的顶部来做到这一点；请参见以下示例了解详细信息。
- en: 'These are examples of keys that have a passphrase:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是有密码短语的密钥示例：
- en: '![Figure 3.4 – Example 1 of a passphrase'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.4 – 密码短语示例 1'
- en: '](img/B18053_03_04.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18053_03_04.jpg)'
- en: Figure 3.4 – Example 1 of a passphrase
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.4 – 密码短语示例 1
- en: '![Figure 3.5 – Example 2 of a passphrase'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.5 – 密码短语示例 2'
- en: '](img/B18053_03_05.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18053_03_05.jpg)'
- en: Figure 3.5 – Example 2 of a passphrase
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.5 – 密码短语示例 2
- en: 'This is an example of a key that does not have a passphrase:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个没有密码短语的密钥示例：
- en: '![Figure 3.6 – Example of a key without a passphrase'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.6 – 没有密码短语的密钥示例'
- en: '](img/B18053_03_06.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18053_03_06.jpg)'
- en: Figure 3.6 – Example of a key without a passphrase
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.6 – 没有密码短语的密钥示例
- en: If your key has a passphrase, you’ll need to remove it using the `openssl rsa
    -in original.key -out tls.key` command and enter your passphrase during the prompt.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你的密钥有密码短语，你需要使用 `openssl rsa -in original.key -out tls.key` 命令来移除它，并在提示时输入密码短语。
- en: Once this process is done, you should have two files, `tls.crt` and `tls.key`.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦此过程完成，你应该会有两个文件，`tls.crt` 和 `tls.key`。
- en: You’ll want to create the `/etc/rancher/ssl/` directory using the `mkdir -p
    /etc/rancher/ssl/` command and place both files in this directory. Note that these
    files should be owned by root.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要使用 `mkdir -p /etc/rancher/ssl/` 命令创建 `/etc/rancher/ssl/` 目录，并将这两个文件放入该目录中。请注意，这些文件应由
    root 用户拥有。
- en: Starting the Rancher server
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动 Rancher 服务器
- en: In this section, we’ll create the `docker run` command and start the Rancher
    server.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建 `docker run` 命令并启动 Rancher 服务器。
- en: 'The following is an example command:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例命令：
- en: '![Figure 3.7 – Example of docker run command'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.7 – docker run 命令示例'
- en: '](img/B18053_03_07.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18053_03_07.jpg)'
- en: Figure 3.7 – Example of docker run command
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.7 – docker run 命令示例
- en: 'Text version: [https://raw.githubusercontent.com/PacktPublishing/Rancher-Deep-Dive/main/ch03/install_steps/04_rancher_run_command/example01.txt](https://raw.githubusercontent.com/PacktPublishing/Rancher-Deep-Dive/main/ch03/install_steps/04_rancher_run_command/example01.txt)'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 文本版本：[https://raw.githubusercontent.com/PacktPublishing/Rancher-Deep-Dive/main/ch03/install_steps/04_rancher_run_command/example01.txt](https://raw.githubusercontent.com/PacktPublishing/Rancher-Deep-Dive/main/ch03/install_steps/04_rancher_run_command/example01.txt)
- en: 'We’ll now break down this command:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们来逐步解析这个命令：
- en: '`docker run -d` will create a new container and start it in detached mode.'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`docker run -d` 将创建一个新的容器，并以分离模式启动它。'
- en: '`--name rancher_server` will set the name of the container to be `rancher_server`.
    This is makes future commands easier because, without it, Docker will generate
    a random name.'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`--name rancher_server` 将容器的名称设置为 `rancher_server`。这样会使未来的命令更加简洁，因为没有这个名称时，Docker
    会生成一个随机名称。'
- en: '`--restart=unless-stopped` will tell Docker to make sure this container stays
    running unless you manually stop it.'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`--restart=unless-stopped` 将告诉 Docker 确保该容器一直运行，除非你手动停止它。'
- en: '`-p 80:80` will map port `80` (HTTP) on the host to port `80` inside the container.'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`-p 80:80` 将主机上的端口 `80`（HTTP）映射到容器内的端口 `80`。'
- en: '`-p 443:443` will map port `443` (HTTPS) on the host to port `443` inside the
    container. Note that if you are doing SSL offloading at the load balancer, this
    is not needed.'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`-p 443:443` 将主机上的端口 `443`（HTTPS）映射到容器内的端口 `443`。请注意，如果你在负载均衡器上进行 SSL 卸载，则不需要此操作。'
- en: The `v /etc/rancher/ssl/tls.crt:/etc/rancher/ssl/cert.pem` and `-v /etc/rancher/ssl/tls.key:/etc/rancher/ssl/key.pem`
    flags will pass the certificate files we created earlier into the Rancher server.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`v /etc/rancher/ssl/tls.crt:/etc/rancher/ssl/cert.pem` 和 `-v /etc/rancher/ssl/tls.key:/etc/rancher/ssl/key.pem`
    标志将把我们之前创建的证书文件传递到 Rancher 服务器。'
- en: The `-v /var/lib/rancher:/var/lib/rancher` flag will bind the data directory
    for Rancher to the host filesystem.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`-v /var/lib/rancher:/var/lib/rancher` 标志将把 Rancher 的数据目录绑定到主机的文件系统上。'
- en: '`--privileged` will give the Rancher server container root capabilities on
    the host. This is needed because we’ll be running K3s inside the container, which
    will have additional containers.'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`--privileged` 将赋予 Rancher 服务器容器在主机上的 root 权限。这是必要的，因为我们将在容器内部运行 K3s，且该容器会有额外的容器。'
- en: '`rancher/rancher:v2.5.8` will set the Rancher image, which will set the Rancher
    server version.'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`rancher/rancher:v2.5.8` 将设置 Rancher 镜像，并指定 Rancher 服务器的版本。'
- en: '`--no-cacerts` will disable the certificate generation process in the Rancher
    server as we will be bringing our own.'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`--no-cacerts` 将禁用 Rancher 服务器的证书生成过程，因为我们将使用我们自己的证书。'
- en: Finally, once we start the Rancher server, we’ll need to wait a few minutes
    for Rancher to start fully.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，一旦我们启动 Rancher 服务器，我们需要等几分钟，直到 Rancher 完全启动。
- en: You can watch the server start by running the `docker logs -f rancher_server`
    command.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过运行 `docker logs -f rancher_server` 命令来观看服务器启动过程。
- en: You’ll then need to open your Rancher URL in a browser. Note that if you are
    planning to use a CNAME or load balancer, you should be using that URL instead
    of using the IP/hostname of the host.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，你需要在浏览器中打开 Rancher URL。请注意，如果你打算使用 CNAME 或负载均衡器，应该使用该 URL，而不是使用主机的 IP/主机名。
- en: 'To get the admin password, you’ll need to run the `docker logs rancher_server
    2>&1 | grep “Bootstrap Password:”` command:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要获取管理员密码，你需要运行以下命令：`docker logs rancher_server 2>&1 | grep “Bootstrap Password:”`
- en: '![Figure 3.8 – Snippet of step 14'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.8 – 第 14 步的代码片段'
- en: '](img/B18053_03_08.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18053_03_08.jpg)'
- en: Figure 3.8 – Snippet of step 14
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.8 – 第 14 步的代码片段
- en: 'Once you have logged into Rancher, you’ll want to set the password and URL:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到 Rancher 后，你需要设置密码和 URL：
- en: '![Figure 3.9 – Rancher login page'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.9 – Rancher 登录页面'
- en: '](img/B18053_03_09.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18053_03_09.jpg)'
- en: Figure 3.9 – Rancher login page
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.9 – Rancher 登录页面
- en: It is important you set the URL to something you would like to keep, as changing
    the URL is difficult and time-consuming. For the password, this will be the password
    for the local admin, which is a root-level account that has full access to Rancher.
    This should be a secure password.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 URL 时要特别注意，确保选择一个你希望长期使用的 URL，因为更改 URL 是非常困难且耗时的。密码是本地管理员的密码，这是一个具有完全访问权限的
    root 级帐户。此密码应该是安全的。
- en: Migration to an HA setup
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迁移到 HA 设置
- en: 'To migrate from a single-node Rancher to an HA installation, we’ll need the
    following:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 从单节点 Rancher 迁移到 HA 安装时，我们需要以下内容：
- en: You should be running the latest version of Rancher and RKE.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你应该运行 Rancher 和 RKE 的最新版本。
- en: You already have three new Linux VMs (in this example, we’ll be using a VMware
    VM running Ubuntu 20.04). Note that at the end of this process, the original VM
    can be reclaimed.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你已经有了三个新的Linux虚拟机（在本示例中，我们将使用一台运行Ubuntu 20.04的VM）。请注意，在此过程结束时，原始的虚拟机可以被回收。
- en: We will assume that the Linux VMs have internet access and don’t require an
    HTTP proxy for access. Note that if you do not have internet access, please see
    the air-gap steps located at [https://rancher.com/docs/rancher/v2.5/en/installation/other-installation-methods/air-gap/](https://rancher.com/docs/rancher/v2.5/en/installation/other-installation-methods/air-gap/).
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们假设Linux虚拟机可以访问互联网，并且不需要HTTP代理。如果没有互联网访问，请参见位于[https://rancher.com/docs/rancher/v2.5/en/installation/other-installation-methods/air-gap/](https://rancher.com/docs/rancher/v2.5/en/installation/other-installation-methods/air-gap/)的隔离环境步骤。
- en: SSH and root access to the Linux VMs.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过SSH连接并获取Linux虚拟机的root权限。
- en: Docker installed on the three new VMs.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在三台新虚拟机上安装Docker。
- en: A DNS record for Rancher that is not a server hostname/IP address.
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Rancher的DNS记录不是服务器主机名/IP地址。
- en: You will need a maintenance window of 30-60 minutes. During this window, Rancher
    and its API will be down. This may mean that CICD pipelines will not work, and
    application teams may not manage their applications. Note, this does not impact
    downstream applications. The only impact is around management.
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你将需要30到60分钟的维护窗口。在此期间，Rancher及其API将不可用。这可能导致CICD管道无法工作，应用程序团队可能无法管理其应用程序。请注意，这不会影响下游应用程序，唯一的影响是管理方面。
- en: We’ll assume the single-node Rancher server container is called `rancher_server`
    during the following steps. If the name is different, please update the commands
    listed in the following steps.
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在接下来的步骤中，我们假设单节点Rancher服务器容器被称为`rancher_server`。如果名称不同，请更新接下来的命令。
- en: This section will assume you know what RKE is and how to use it. Note that we
    will cover RKE in much more detail in the next chapter.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本节假设你了解什么是RKE以及如何使用它。请注意，我们将在下一章中详细讨论RKE。
- en: Backing up the current Rancher server
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 备份当前的Rancher服务器
- en: 'During this section, we’ll take a backup of the current Rancher single node
    server, including the Kubernetes certificates, `etcd`, and the SSL certs for the
    Rancher URL. The steps are as follows:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将备份当前的Rancher单节点服务器，包括Kubernetes证书、`etcd`和Rancher URL的SSL证书。步骤如下：
- en: SSH into the current Rancher server node.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过SSH连接到当前的Rancher服务器节点。
- en: Become root using the `sudo su –` command.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`sudo su –`命令切换为root用户。
- en: Stop the current Rancher server using the `docker stop rancher_server` command.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`docker stop rancher_server`命令停止当前的Rancher服务器。
- en: Create a volume from the current server using the `docker create --volumes-from
    rancher_server --name rancher-data-<DATE> rancher/rancher:<RANCHER_CONTAINER_TAG>`
    command. Please replace the date and tag placeholder values.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`docker create --volumes-from rancher_server --name rancher-data-<DATE> rancher/rancher:<RANCHER_CONTAINER_TAG>`命令从当前服务器创建一个卷。请替换日期和标签占位符。
- en: Create a `tar.gz` file backup using the `docker run --volumes-from rancher-data-<DATE>
    -v $PWD:/backup:z busybox tar pzcvf /backup/rancher-data-backup-<RANCHER_VERSION>-<DATE>.tar.gz
    /var/lib/rancher` command. Please replace the date and tag placeholder values.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`docker run --volumes-from rancher-data-<DATE> -v $PWD:/backup:z busybox tar
    pzcvf /backup/rancher-data-backup-<RANCHER_VERSION>-<DATE>.tar.gz /var/lib/rancher`命令创建一个`tar.gz`文件备份。请替换日期和标签占位符。
- en: Verify the backup file has been created using the `ls -lh` command. The backup
    file will be created in the current directory.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`ls -lh`命令验证备份文件是否已经创建。备份文件将在当前目录中创建。
- en: Restart the Rancher server backup using the `docker start rancher_server` command.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`docker start rancher_server`命令重启Rancher服务器备份。
- en: Open a shell into the Rancher server container using the `docker exec -it rancher_server
    /bin/bash` command.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`docker exec -it rancher_server /bin/bash`命令进入Rancher服务器容器的shell。
- en: Backup the current certificated using the `tar -zcvf pki.bundle.tar.gz /etc/kubernetes/ssl`
    command.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`tar -zcvf pki.bundle.tar.gz /etc/kubernetes/ssl`命令备份当前的证书。
- en: Leave the shell using the `exit` command.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`exit`命令退出shell。
- en: Copy the backup file out of the Rancher server using the `docker cp rancher_server:/var/lib/rancher/pki.bundle.tar.gz`
    command.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`docker cp rancher_server:/var/lib/rancher/pki.bundle.tar.gz`命令将备份文件从Rancher服务器中复制出来。
- en: Create a temporary container using the `docker run --net=container:rancher_server
    -it -v $(pwd):/cwd --name etcd-utility rancher/rke-tools:v0.1.20` command.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`docker run --net=container:rancher_server -it -v $(pwd):/cwd --name etcd-utility
    rancher/rke-tools:v0.1.20`命令创建一个临时容器。
- en: Set up certificates for `etcd` using the `mkdir ssl; cd ssl; cp /cwd/pki.bundle.tar.gz
    .; tar -zxvf pki.bundle.tar.gz --strip-components 3` commands.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`mkdir ssl; cd ssl; cp /cwd/pki.bundle.tar.gz .; tar -zxvf pki.bundle.tar.gz
    --strip-components 3`命令为`etcd`设置证书。
- en: Take an `etcd` backup using the `cd /; ETCDCTL_API=3 etcdctl snapshot save --cacert=/ssl/kube-ca.pem
    --cert=/ssl/kube-etcd-127-0-0-1.pem --key=/ssl/kube-etcd-127-0-0-1-key.pem single-node-etcd-snapshot`
    command.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`cd /; ETCDCTL_API=3 etcdctl snapshot save --cacert=/ssl/kube-ca.pem --cert=/ssl/kube-etcd-127-0-0-1.pem
    --key=/ssl/kube-etcd-127-0-0-1-key.pem single-node-etcd-snapshot`命令进行`etcd`备份。
- en: Exit the shell using the `exit` command.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`exit`命令退出shell。
- en: Copy the `etcd` backup out of the temporary container using the `docker cp etcd-utility:/single-node-etcd-snapshot`
    command.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`docker cp etcd-utility:/single-node-etcd-snapshot`命令从临时容器中复制`etcd`备份。
- en: Stop the current Rancher server using the `docker stop rancher_server` command.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`docker stop rancher_server`命令停止当前的Rancher服务器。
- en: Copy the `pki.bundle.tar.gz` and `single-node-etcd-snapshot` files to whatever
    server/workstation you will be using to run the `rke` commands from. Some people
    will use the first node in the cluster for this task.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`pki.bundle.tar.gz`和`single-node-etcd-snapshot`文件复制到你将使用`rke`命令的任何服务器/工作站上。有些人会使用集群中的第一个节点来执行此任务。
- en: Starting cutover to new cluster
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始切换到新集群
- en: 'At this point, we’re going to start restoring the backup into the new cluster
    and migrate over the Rancher URL:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们将开始将备份恢复到新集群并迁移Rancher URL：
- en: You should update the DNS or your load balancer to redirect traffic from the
    old single-node Rancher server to the new cluster. Note, the DNS might take some
    time to propagate fully, so we’ll want to do that now.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该更新DNS或负载均衡器，将流量从旧的单节点Rancher服务器重定向到新集群。注意，DNS可能需要一些时间才能完全传播，因此我们现在要进行这个操作。
- en: We do want to modify the `cluster.yaml` file only to include the first node.
    We’re going to assume that the hostname is `node01` for the rest of the steps.
    You can use the example located at [https://raw.githubusercontent.com/PacktPublishing/Rancher-Deep-Dive/main/ch03/migrating_from_single_to_ha/cluster.yml](https://raw.githubusercontent.com/PacktPublishing/Rancher-Deep-Dive/main/ch03/migrating_from_single_to_ha/cluster.yml).
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们确实只想修改`cluster.yaml`文件，以包括第一个节点。接下来的步骤中，我们假设主机名是`node01`。你可以使用位于[https://raw.githubusercontent.com/PacktPublishing/Rancher-Deep-Dive/main/ch03/migrating_from_single_to_ha/cluster.yml](https://raw.githubusercontent.com/PacktPublishing/Rancher-Deep-Dive/main/ch03/migrating_from_single_to_ha/cluster.yml)的示例文件。
- en: SCP over the `single-node-etcd-snapshot` and `pki.bundle.tar.gz` files to `node01`.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`single-node-etcd-snapshot`和`pki.bundle.tar.gz`文件通过SCP传输到`node01`。
- en: SSH into the node01 host and become root using the `sudo su -` command.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`sudo su -`命令SSH进入node01主机并以root身份登录。
- en: Create the directory snapshot directory using the `mkdir -p /opt/rke/etcd-snapshots`
    command.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`mkdir -p /opt/rke/etcd-snapshots`命令创建目录快照目录。
- en: Move the two backup files into the `/opt/rke/etcd-snapshots` directory. These
    files should be owned by root.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将这两个备份文件移动到`/opt/rke/etcd-snapshots`目录。这些文件应该由root用户拥有。
- en: You can now leave the SSH terminal on `node01`.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你可以退出`node01`上的SSH终端。
- en: Start the restore using the `rke etcd snapshot-restore --name single-node-etcd-snapshot
    --config cluster.yaml` command.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`rke etcd snapshot-restore --name single-node-etcd-snapshot --config cluster.yaml`命令开始恢复。
- en: This process might take 5-10 minutes to complete. Example command output is
    located at [https://raw.githubusercontent.com/PacktPublishing/Rancher-Deep-Dive/main/ch03/migrating_from_single_to_ha/restore_command_output.txt](https://raw.githubusercontent.com/PacktPublishing/Rancher-Deep-Dive/main/ch03/migrating_from_single_to_ha/restore_command_output.txt).
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 此过程可能需要5到10分钟才能完成。示例命令输出位于[https://raw.githubusercontent.com/PacktPublishing/Rancher-Deep-Dive/main/ch03/migrating_from_single_to_ha/restore_command_output.txt](https://raw.githubusercontent.com/PacktPublishing/Rancher-Deep-Dive/main/ch03/migrating_from_single_to_ha/restore_command_output.txt)。
- en: At this point, you can start the cluster using the `rke up --config cluster.yaml`
    command.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此时，你可以使用`rke up --config cluster.yaml`命令启动集群。
- en: If you run into any errors, try running the `rke up` command a second time.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果遇到任何错误，尝试第二次运行`rke up`命令。
- en: Once it completes successfully, you can edit the `cluster.yaml` file to include
    `node02` and `node03`.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦成功完成，你可以编辑`cluster.yaml`文件，添加`node02`和`node03`。
- en: Run `rke up` again to add the additional nodes.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次运行`rke up`命令以添加额外的节点。
- en: At this point, you can log in to Rancher and verify everything is accessible
    and healthy. Note that it might take a few minutes for downstream clusters to
    reconnect and become *active* in the UI.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此时，您可以登录到Rancher并验证一切是否可访问且健康。请注意，可能需要几分钟时间，直到下游集群重新连接并在UI中显示为*活动*状态。
- en: It is important to note that any cluster-level changes such as creating a new
    cluster, editing an existing cluster, or deleting a cluster should be avoided
    until you are sure that you will not be rolling back to the old server.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 需要注意的是，在确保不会回滚到旧服务器之前，应避免进行任何集群级别的更改，例如创建新集群、编辑现有集群或删除集群。
- en: Cleaning up/rolling back
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 清理/回滚
- en: 'In the event of an unsuccessful migration, use the following steps:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 如果迁移不成功，请按照以下步骤操作：
- en: Change the DNS record for the Rancher URL back to the original server.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Rancher URL的DNS记录更改回原始服务器。
- en: Start the Rancher single node container using the `docker start rancher_server`
    command.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`docker start rancher_server`命令启动Rancher单节点容器。
- en: It is important to note that it is currently not possible to migrate changes
    made in HA back to a single node. So, in the event of a rollback, all changes
    since shutting the single Rancher node will be lost.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 需要注意的是，目前无法将HA中所做的更改迁移回单节点。因此，在回滚时，自关闭单个Rancher节点以来的所有更改将会丢失。
- en: After a few days of *burn-in*, you can delete the old VM or clean up the old
    server using the script at [https://raw.githubusercontent.com/rancherlabs/support-tools/master/extended-rancher-2-cleanup/extended-cleanup-rancher2.sh](https://raw.githubusercontent.com/rancherlabs/support-tools/master/extended-rancher-2-cleanup/extended-cleanup-rancher2.sh).
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 经过几天的*烧机*后，您可以删除旧的虚拟机或使用[https://raw.githubusercontent.com/rancherlabs/support-tools/master/extended-rancher-2-cleanup/extended-cleanup-rancher2.sh](https://raw.githubusercontent.com/rancherlabs/support-tools/master/extended-rancher-2-cleanup/extended-cleanup-rancher2.sh)脚本清理旧服务器。
- en: Summary
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about how a single-node Rancher works and its pros
    and cons. We then went over the steps and commands needed to install Rancher in
    single node mode. We finally went into detail about migrating to an HA setup,
    including backing up the current data and restoring it.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们了解了单节点Rancher的工作原理及其优缺点。接着，我们讲解了在单节点模式下安装Rancher所需的步骤和命令。最后，我们详细讨论了迁移到HA设置的过程，包括备份当前数据并进行恢复。
- en: In the next chapter, we will cover RKE and RKE2, including where they came from,
    how they work, and how to design a solution using them.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍RKE和RKE2，包括它们的起源、工作原理以及如何使用它们设计解决方案。

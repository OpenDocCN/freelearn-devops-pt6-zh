- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: The Fundamentals of Kubernetes and Containers
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes 和容器的基础知识
- en: As more organizations adopt agile development and modern (cloud-native) application
    architectures, the need for a platform that can deploy, scale, and provide reliable
    container services has become critical for many medium-sized and large companies.
    Kubernetes has become the de facto platform for hosting container workloads but
    can be complex to install, configure, and manage.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 随着越来越多的组织采用敏捷开发和现代（云原生）应用架构，需要一个能够部署、扩展和提供可靠容器服务的平台已成为许多中型和大型公司的关键。Kubernetes
    已成为托管容器工作负载的事实标准平台，但安装、配置和管理可能会很复杂。
- en: '**Elastic Kubernetes Service** (**EKS**) is a managed service that enables
    users of the AWS platform to focus on using a Kubernetes cluster rather than spending
    time on installation and maintenance.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**弹性 Kubernetes 服务**（**EKS**）是 AWS 平台上的托管服务，使用户能够专注于使用 Kubernetes 集群，而不是花费时间进行安装和维护。'
- en: 'In this chapter, we will review the basic building blocks of Kubernetes. Specifically,
    however, we will be covering the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将回顾 Kubernetes 的基本构建块。具体而言，我们将涵盖以下主题：
- en: A brief history of Docker, containerd, and runc
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker、containerd 和 runc 的简要历史
- en: A deeper dive into containers
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对容器的深入探讨
- en: What is container orchestration?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是容器编排？
- en: What is Kubernetes?
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 是什么？
- en: Understanding Kubernetes deployment architectures
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 Kubernetes 部署架构
- en: For a deeper understanding of the chapter, it is recommended that you have some
    familiarity with Linux commands and architectures.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更深入地理解本章内容，建议您对 Linux 命令和架构有一定了解。
- en: Important note
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The content in this book is intended for IT professionals that have experience
    building and/or running Kubernetes on-premises or on other cloud platforms. We
    recognize that not everyone with the prerequisite experience is aware of the background
    of Kubernetes so this first chapter is included (but optional) to provide a consistent
    view of where Kubernetes has come from and the supporting technology it leverages.
    If you think you already have a clear understanding of the topics discussed in
    this chapter, feel free to skip this one and move on to the next chapter.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本书内容适用于具有在本地或其他云平台上构建和/或运行 Kubernetes 经验的 IT 专业人员。我们意识到，并非每个具备先决条件经验的人都了解 Kubernetes
    的背景，因此本书的第一章（可选）旨在提供一个一致的视角，阐明 Kubernetes 的起源及其支持技术。如果您认为您已经对本章讨论的主题有清晰的理解，请随意跳过此章节，转而阅读下一章节。
- en: A brief history of Docker, containerd, and runc
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker、containerd 和 runc 的简要历史
- en: 'The IT industry has gone through a number of changes: from large, dedicated
    mainframes and UNIX systems in the 1970s-80s, to the virtualization movement with
    Solaris Zones, VMware, and the development of **cgroups** and **namespaces** in
    the Linux kernel in the early 2000s. In 2008, LXC was released. It provided a
    way to manage cgroups and namespaces in a consistent way to allow virtualization
    natively in the Linux kernel. The host system has no concept of a *container*
    so LXC orchestrates the underlying technology to create an isolated set of processes,
    that is, the container.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: IT 行业经历了多次变革：从上世纪 70-80 年代的大型专用主机和 UNIX 系统，到上世纪初 Solaris Zones、VMware 的虚拟化运动，以及
    Linux 内核中 **cgroups** 和 **namespaces** 的开发。2008 年，发布了 LXC。它提供了一种在 Linux 内核中本地管理
    cgroups 和 namespaces 的一致方式，以允许虚拟化。主机系统对 *容器* 没有概念，因此 LXC 编排底层技术来创建一组隔离的进程，即容器。
- en: '**Docker**, launched in 2013, was initially built on top of LXC and introduced
    a whole ecosystem around container management including a packaging format (the
    **Dockerfile**), which leverages a union filesystem to allow developers to build
    lightweight container images, and a runtime environment that manages Docker containers,
    container storage and CPU, RAM limits, and so on, while managing and transferring
    images (the **Docker daemon**) and provides an **Application Programming Interface**
    (**API**) that can be consumed by the Docker CLI. Docker also provides a set of
    registries (**Docker Hub**) that allows operating systems, middleware, and application
    vendors to build and distribute their code in containers.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**Docker** 于 2013 年发布，最初是建立在 LXC 之上，并围绕容器管理引入了整个生态系统，包括一个打包格式（**Dockerfile**），该格式利用联合文件系统使开发者能够构建轻量级的容器镜像，以及一个管理
    Docker 容器、容器存储和 CPU、RAM 限制等的运行时环境，同时管理和传输镜像（**Docker 守护进程**），并提供一个可以被 Docker CLI
    消耗的**应用程序接口**（**API**）。Docker 还提供了一套注册中心（**Docker Hub**），允许操作系统、中间件和应用程序供应商在容器中构建和分发他们的代码。'
- en: In 2016, Docker extracted these runtime capabilities into a separate engine
    called **containerd** and donated it to the **Cloud Native Compute Foundation**
    (**CNCF**), allowing other container ecosystems such as Kubernetes to deploy and
    manage containers. Kubernetes initially used Docker as its container runtime,
    but in Kubernetes 1.15, the **Container Runtime Interface** (**CRI**) was introduced,
    which allows Kubernetes to use different runtimes such as containerd.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 2016 年，Docker 将这些运行时功能提取到一个独立的引擎 **containerd** 中，并将其捐赠给了 **Cloud Native Compute
    Foundation**（**CNCF**），使得其他容器生态系统如 Kubernetes 可以部署和管理容器。Kubernetes 最初使用 Docker
    作为其容器运行时，但在 Kubernetes 1.15 中引入了**容器运行时接口**（**CRI**），这使得 Kubernetes 可以使用不同的运行时，例如
    containerd。
- en: The **Open Container Initiative** (**OCI**) was founded by Docker and the container
    industry to help provide a lower-level interface to manage containers. One of
    the first standards they developed was the OCI Runtime Specification, which adopted
    the Docker image format as the basis for all of its image specifications. The
    **runc** tool was developed by the OCI to implement its Runtime Specification
    and has been adopted by most runtime engines, such as containerd, as a low-level
    interface to manage containers and images.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**开放容器倡议**（**OCI**）由 Docker 和容器行业成立，旨在提供一个低级接口来管理容器。他们开发的第一个标准之一是 OCI 运行时规范，该规范采用
    Docker 镜像格式作为所有镜像规范的基础。**runc** 工具由 OCI 开发，用于实现其运行时规范，并被大多数运行时引擎（如 containerd）采纳，作为管理容器和镜像的低级接口。'
- en: 'The following diagram illustrates how all the concepts we have discussed in
    this section fit together:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示展示了我们在本节中讨论的所有概念如何结合在一起：
- en: '![Figure 1.1 – Container runtimes](img/B18129_01_01.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.1 – 容器运行时](img/B18129_01_01.jpg)'
- en: Figure 1.1 – Container runtimes
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1 – 容器运行时
- en: In this section, we discussed the history of containers and the various technologies
    used to create and manage them. In the next section, we will dive deeper into
    what a container actually consists of.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了容器的历史以及用于创建和管理容器的各种技术。在下一节中，我们将深入探讨容器的实际构成。
- en: A deeper dive into containers
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入了解容器
- en: 'The container is a purely logical construction and consists of a set of technologies
    *glued* together by the container runtime. This section will provide a more detailed
    view of the technologies used in a Linux kernel to create and manage containers.
    The two foundational Linux services are namespaces and control groups:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 容器是一个纯粹的逻辑构造，由一组技术组成，*通过*容器运行时将它们“粘合”在一起。本节将提供关于在 Linux 内核中用于创建和管理容器的技术的更详细视图。两个基础性的
    Linux 服务是命名空间和控制组：
- en: '**Namespaces (in the context of Linux)**: A namespace is a feature of the Linux
    kernel used to partition kernel resources, allowing processes running within the
    namespace to be isolated from other processes. Each namespace will have its own
    **process IDs** (**PIDs**), hostname, network access, and so on.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命名空间（在 Linux 上的上下文）**：命名空间是 Linux 内核的一个特性，用于将内核资源进行分区，使得在命名空间内运行的进程可以与其他进程隔离。每个命名空间将拥有自己的**进程
    ID**（**PIDs**）、主机名、网络访问权限等。'
- en: '**Control groups**: A control group (cgroup) is used to limit the usage by
    a process or set of processes of resources such as CPU, RAM, disk I/O, or network
    I/O. Originally developed by Google, this technology has been incorporated into
    the Linux kernel.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制组**：控制组（cgroup）用于限制进程或进程集对 CPU、RAM、磁盘 I/O 或网络 I/O 等资源的使用。最初由 Google 开发，这项技术已被纳入
    Linux 内核。'
- en: 'The combination of namespaces and control groups in Linux allows a container
    to be defined as a set of isolated processes (namespace) with resource limits
    (cgroups):'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 中命名空间和控制组的结合使得容器可以定义为一组隔离的进程（命名空间）和有资源限制（控制组）的进程：
- en: '![Figure 1.2 – The container as a combination of cgroup and namespace](img/B18129_01_02.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.2 – 作为 cgroup 和命名空间组合的容器](img/B18129_01_02.jpg)'
- en: Figure 1.2 – The container as a combination of cgroup and namespace
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2 – 作为 cgroup 和命名空间组合的容器
- en: The way the container runtime image is created is important as it has a direct
    bearing on how that container works and is secured. A **union filesystem** (**UFS**)
    is a special filesystem used in container images and will be discussed next.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 容器运行时镜像的创建方式非常重要，因为它直接影响容器的工作方式和安全性。**联合文件系统**（**UFS**）是一种用于容器镜像的特殊文件系统，接下来将讨论它。
- en: Getting to know union filesystems
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解联合文件系统
- en: A UFS is a type of filesystem that can merge/overlay multiple directories/files
    into a single view. It also gives the appearance of a single writable filesystem,
    but is read-only and does allow the modification of the original content. The
    most common example of this is **OverlayFS**, which is included in the Linux kernel
    and used by default by Docker.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: UFS 是一种文件系统，可以将多个目录/文件合并/覆盖为一个统一的视图。它还呈现出一个可写的单一文件系统的外观，但实际上是只读的，不允许修改原始内容。最常见的例子是
    **OverlayFS**，它包含在 Linux 内核中，并且 Docker 默认使用它。
- en: 'A UFS is a very efficient way to merge content for a container image. Each
    set of discreet content is considered a layer, and layers can be reused between
    container images. Docker, for example, will use the Dockerfile to create a layered
    file based on a base image. An example is shown in the following diagram:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: UFS 是一种非常高效的方式来合并容器镜像的内容。每组独立的内容被视为一个层，层可以在容器镜像之间复用。例如，Docker 会使用 Dockerfile
    根据基础镜像创建一个分层文件。以下示例图显示了这一过程：
- en: '![Figure 1.3 – Sample Docker image](img/B18129_01_03.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.3 – 示例 Docker 镜像](img/B18129_01_03.jpg)'
- en: Figure 1.3 – Sample Docker image
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3 – 示例 Docker 镜像
- en: In *Figure 1**.3*, the `FROM` command creates an initial layer from the `ubuntu
    18.04` image. The output from the two `RUN` commands creates discreet layers while
    the final step is for Docker to add a thin read/write layer where all changes
    to the running container are written. The `MAINTAINER` and `CMD` commands don’t
    generate layers.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *图 1.3* 中，`FROM` 命令从 `ubuntu 18.04` 镜像创建一个初始层。两个 `RUN` 命令的输出创建了独立的层，而最后一步是
    Docker 添加一个薄的读写层，所有对运行中容器的修改都写入该层。`MAINTAINER` 和 `CMD` 命令不会生成层。
- en: Docker is the most prevalent container runtime environment and can be used on
    Windows, macOS, and Linux so it provides an easy way to learn how to build and
    run containers (although please note that the Windows and Linux operating systems
    are fundamentally different so, at present, you can’t run Windows containers on
    Linux). While the Docker binaries have been removed from the current version of
    Kubernetes, the concepts and techniques in the next section will help you understand
    how containers work at a fundamental level.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 是最流行的容器运行时环境，支持在 Windows、macOS 和 Linux 上使用，因此它提供了一种简单的方式来学习如何构建和运行容器（但请注意，Windows
    和 Linux 操作系统本质上是不同的，因此目前无法在 Linux 上运行 Windows 容器）。尽管 Docker 二进制文件已经从当前版本的 Kubernetes
    中移除，但接下来的概念和技术将帮助你理解容器在基础层面的工作原理。
- en: How to use Docker
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何使用 Docker
- en: 'The simplest way to get started with containers is to use Docker on your development
    machine. As the OCI has developed standardization for Docker images, images created
    locally can be used anywhere. If you have already installed Docker, the following
    command will run a simple container with the official `hello-world` sample image
    and show its output:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 开始使用容器的最简单方法是在开发机上使用 Docker。由于 OCI 已经为 Docker 镜像制定了标准化，本地创建的镜像可以在任何地方使用。如果你已经安装了
    Docker，以下命令将运行一个简单的容器，使用官方的 `hello-world` 示例镜像并显示其输出：
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This preceding message shows that your installation appears to be working correctly.
    You can see that the `hello-world` image is “pulled” from a repository. This defaults
    to the public Docker Hub repositories at [https://hub.docker.com/](https://hub.docker.com/).
    We will discuss repositories, and in particular, AWS **Elastic Container Registry**
    (**ECR**) in [*Chapter 11*](B18129_11.xhtml#_idTextAnchor162), *Building Applications
    and Pushing Them to* *Amazon ECR*.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 上述消息显示你的安装似乎工作正常。你可以看到 `hello-world` 镜像已“拉取”自仓库。默认情况下，它会从公共 Docker Hub 仓库中获取该镜像，网址为
    [https://hub.docker.com/](https://hub.docker.com/)。我们将在 [*第11章*](B18129_11.xhtml#_idTextAnchor162)中讨论仓库，特别是
    AWS **Elastic Container Registry**（**ECR**），内容包括 *构建应用并推送到 Amazon ECR*。
- en: Important note
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'If you would like to know how to install and run with Docker, you can refer
    to the *Get Started* guide in the Docker official documentation: [https://docs.docker.com/get-started/](https://docs.docker.com/get-started/).'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解如何安装和使用 Docker，可以参考 Docker 官方文档中的 *入门* 指南：[https://docs.docker.com/get-started/](https://docs.docker.com/get-started/)。
- en: 'Meanwhile, you can use the following command to list containers on your host:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，你可以使用以下命令列出主机上的容器：
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Although the preceding commands are simple, they demonstrate how easy it is
    to build and run containers. When you use the Docker CLI (client), it will interact
    with the runtime engine, which is the Docker daemon. When the daemon receives
    the request from the CLI, the Docker daemon proceeds with the corresponding action.
    In the `docker run` example, this means creating a container from the `hello-world`
    image. If the image is stored on your machine, it will use that; otherwise, it
    will try and *pull* the image from a public Docker repository such as *Docker
    Hub*.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管前面的命令很简单，但它们演示了构建和运行容器的便捷性。当你使用 Docker CLI（客户端）时，它会与运行时引擎——Docker 守护进程进行交互。当守护进程接收到来自
    CLI 的请求时，Docker 守护进程会执行相应的操作。在 `docker run` 示例中，这意味着从 `hello-world` 镜像创建一个容器。如果镜像已存储在你的机器上，它会使用该镜像；否则，它会尝试从公共
    Docker 仓库如 *Docker Hub* 中*拉取*该镜像。
- en: 'As discussed in the previous section, Docker now leverages containerd and runc.
    You can use the `docker info` command to view the versions of these components:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一节所述，Docker 现在使用 containerd 和 runc。你可以使用 `docker info` 命令查看这些组件的版本：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this section, we looked at the underlying technology used in Linux to support
    containers. In the following sections, we will look at container orchestration
    and Kubernetes in more detail.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们回顾了 Linux 中支持容器的底层技术。在接下来的章节中，我们将更详细地探讨容器编排和 Kubernetes。
- en: What is container orchestration?
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是容器编排？
- en: 'Docker works well on a single machine, but what if you need to deploy thousands
    of containers across many different machines? This is what container orchestration
    aims to do: to schedule, deploy, and manage hundreds or thousands of containers
    across your environment. There are several platforms that attempt to do this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 在单一机器上运行良好，但如果你需要在多个不同的机器上部署成千上万个容器呢？这正是容器编排所要做的：调度、部署和管理跨环境的成百上千个容器。现在有多个平台尝试做到这一点：
- en: '**Docker Swarm**: A cluster management and orchestration solution from Docker
    (https://docs.docker.com/engine/swarm/).'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker Swarm**：Docker 提供的集群管理和编排解决方案 ([https://docs.docker.com/engine/swarm/](https://docs.docker.com/engine/swarm/))。'
- en: '**Kubernetes** (**K8s**): An open source container orchestration system, originally
    designed by Google and now maintained by CNCF. Thanks to active contributions
    from the open source community, Kubernetes has a strong ecosystem for a series
    of solutions regarding deployment, scheduling, scaling, monitoring, and so on
    (https://kubernetes.io/).'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kubernetes**（**K8s**）：一个开源的容器编排系统，最初由 Google 设计，现在由 CNCF 维护。得益于开源社区的积极贡献，Kubernetes
    拥有强大的生态系统，涵盖了部署、调度、扩展、监控等一系列解决方案（https://kubernetes.io/）。'
- en: '**Amazon Elastic Container Service** (**ECS**): A highly secure, reliable,
    and scalable container orchestration solution provided by AWS. With a similar
    concept as many other orchestration systems, ECS also makes it easy to run, stop,
    and manage containers and is integrated with other AWS services such as CloudFormation,
    IAM, and ELB, among others (see more at https://ecs.aws/).'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Amazon Elastic Container Service**（**ECS**）：AWS 提供的高度安全、可靠且可扩展的容器编排解决方案。ECS
    的概念与许多其他编排系统类似，它也能轻松地运行、停止和管理容器，并与其他 AWS 服务如 CloudFormation、IAM 和 ELB 等集成（更多信息请参见
    https://ecs.aws/）。'
- en: 'The control/data plane, a common architecture for container orchestrators,
    is shown in the following diagram:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 控制/数据平面，这是容器编排器常见的架构，见下图：
- en: '![Figure 1.4 – An overview of container orchestration](img/B18129_01_04.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.4 – 容器编排概述](img/B18129_01_04.jpg)'
- en: Figure 1.4 – An overview of container orchestration
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4 – 容器编排概述
- en: 'Container orchestration usually consists of the *brain* or scheduler/orchestrator
    that decides where to put the containers (control plane), while the *worker* runs
    the actual containers (data plane). The orchestrator offers a number of additional
    features:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 容器编排通常由决定容器放置位置的 *大脑* 或调度器/编排器（控制平面）组成，而 *工作节点* 则运行实际的容器（数据平面）。编排器提供了一些附加功能：
- en: Maintains the desired state for the entire cluster system
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维护整个集群系统的期望状态
- en: Provisions and schedules containers
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置并调度容器
- en: Reschedules containers when a worker becomes unavailable
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当工作节点不可用时，重新调度容器
- en: Recovery from failure
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 故障恢复
- en: Scales containers in or out based on workload metrics, time, or some external
    event
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据工作负载指标、时间或某些外部事件，横向或纵向扩展容器
- en: We’ve spoken about container orchestration at the conceptual level, now let’s
    take a look at Kubernetes to make this concept *real*.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经从概念层面讨论了容器编排，现在让我们看看 Kubernetes，使这个概念变得更加 *真实*。
- en: What is Kubernetes?
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 Kubernetes？
- en: Kubernetes is an open source container orchestrator originally developed by
    Google but now seen as the de facto container platform for many organizations.
    Kubernetes is deployed as clusters containing a control plane that provides an
    API that exposes the Kubernetes operations, a scheduler that schedules containers
    (Pods are discussed next) across the worker nodes, a datastore to store all cluster
    data and state (**etcd**), and a controller that manages jobs, failures, and restarts.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 是一个开源容器编排工具，最初由 Google 开发，但现在被许多组织视为事实上的容器平台。Kubernetes 被部署为包含一个控制平面，该控制平面提供一个
    API，暴露 Kubernetes 操作；一个调度器，它负责将容器（下文将讨论 Pods）调度到工作节点上；一个数据存储，用于存储所有集群数据和状态（**etcd**）；以及一个控制器，它管理作业、故障和重启。
- en: '![Figure 1.5 – An overview of Kubernetes](img/B18129_01_05.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.5 – Kubernetes 概述](img/B18129_01_05.jpg)'
- en: Figure 1.5 – An overview of Kubernetes
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5 – Kubernetes 概述
- en: The cluster is also composed of many worker nodes that make up the data plane.
    Each node runs the **kubelet** agent, which makes sure that containers are running
    on a specific node, and **kube-proxy**, which manages the networking for the node.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 集群还由许多工作节点组成，这些节点构成数据平面。每个节点运行 **kubelet** 代理，确保容器在特定节点上运行，并且运行 **kube-proxy**，管理节点的网络。
- en: One of the major advantages of Kubernetes is that all the resources are defined
    as objects that can be created, read, updated, and deleted. The next section will
    review the major K8s objects, or “**kinds**” as they are called, that you will
    typically be working with.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 的主要优势之一是，所有资源都被定义为可以创建、读取、更新和删除的对象。下一节将回顾主要的 K8s 对象，或者说它们通常被称为“**种类**”，这些是你通常会操作的对象。
- en: Key Kubernetes API resources
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubernetes 关键 API 资源
- en: 'Containerized applications will be deployed and launched on a worker node(s)
    using the API. The API provides an abstract object called a **Pod**, which is
    defined as one or more containers sharing the same Linux namespace, cgroups, network,
    and storage resources. Let’s look at a simple example of a Pod:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 容器化的应用程序将通过 API 在工作节点上部署并启动。API 提供了一个抽象对象，称为 **Pod**，它定义为一个或多个共享相同 Linux 命名空间、cgroups、网络和存储资源的容器。让我们来看一个简单的
    Pod 示例：
- en: '[PRE3]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this example, `kind` defines the API object, a single `Pod`, and `metadata`
    contains the name of the Pod, in this case, `nginx`. The `spec` section contains
    one container, which will use the `nginx 1.14.2` image and expose a port (`80`).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，`kind` 定义了 API 对象，一个单独的 `Pod`，而 `metadata` 包含了 Pod 的名称，这里是 `nginx`。`spec`
    部分包含一个容器，它将使用 `nginx 1.14.2` 镜像并暴露一个端口（`80`）。
- en: 'In most cases, you want to deploy multiple Pods across multiple nodes and maintain
    that number of Pods even if you have node failures. To do this, you use a Deployment,
    which will keep your Pods running. A Deployment is a Kubernetes `kind` that allows
    you to define the number of replicas or Pods you want, along with the Pod specification
    we saw previously. Let’s look at an example that builds on the `nginx` Pod we
    discussed previously:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，您希望将多个 Pod 部署到多个节点上，并在节点故障时保持这些 Pod 的数量。为此，您可以使用 Deployment，它会保持您的 Pod
    运行。Deployment 是一个 Kubernetes `kind`，允许您定义所需的副本数或 Pod 数量，并且结合之前看到的 Pod 规格。让我们看一个基于我们之前讨论的
    `nginx` Pod 的示例：
- en: '[PRE4]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Finally, you want to expose your Pods outside the clusters! This is because,
    by default, Pods and Deployments are only accessible from inside the cluster’s
    other Pods. There are various services, but let’s discuss the `NodePort` service
    here, which exposes a dynamic port on all nodes in the cluster.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您希望将您的 Pod 公开到集群外部！这是因为，默认情况下，Pod 和 Deployment 仅能从集群内的其他 Pod 访问。有多种服务，但在这里我们讨论的是
    `NodePort` 服务，它在集群中的所有节点上公开一个动态端口。
- en: 'To do this, you will use the `kind` of `Service`, an example of which is shown
    here:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，您将使用 `Service` 的 `kind`，一个示例如下所示：
- en: '[PRE5]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the preceding example, `Service` exposes port `30163` on any host in the
    cluster and maps it back to any Pod that has `label` `app=nginx` (set in the Deployment),
    even if a host is not running on that Pod. It translates the `port` value to port
    `80`, which is what the `nginx` Pod is listening on.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，`Service` 在集群中的任何主机上公开端口 `30163`，并将其映射回任何具有 `label` `app=nginx`（在 Deployment
    中设置）的 Pod，即使某个主机上没有运行该 Pod。它将 `port` 值转换为端口 `80`，这是 `nginx` Pod 正在监听的端口。
- en: In this section, we’ve looked at the basic Kubernetes architecture and some
    basic API objects. In the final section, we will review some standard deployment
    architectures.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们已经了解了基本的 Kubernetes 架构和一些基本的 API 对象。在最后一节中，我们将回顾一些标准的部署架构。
- en: Understanding Kubernetes deployment architectures
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Kubernetes 部署架构
- en: There are a multitude of ways to deploy Kubernetes, depending on whether you
    are developing on your laptop/workstation, deploying to non-production or productions,
    or whether you are building it yourself or using a managed service such as EKS.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 部署 Kubernetes 有多种方式，取决于您是在笔记本/工作站上进行开发、部署到非生产环境或生产环境，还是您自己构建它或使用像 EKS 这样的托管服务。
- en: The following sections will discuss how Kubernetes can be deployed for different
    development environments such as locally on your laptop for testing or for production
    workloads.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的几节将讨论如何为不同的开发环境部署 Kubernetes，例如在本地笔记本上进行测试或为生产工作负载进行部署。
- en: Developer deployment
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发者部署
- en: For local development, you may want to use a simple deployment such as minikube
    or Kind. These deploy a full control plane on a virtual machine (minikube) or
    Docker container (Kind) and allow you to deploy API resources on your local machine,
    which acts as both the control plane and data plane. The advantages of this approach
    are that everything is run on your development machine, you can easily build and
    test your app, and your Deployment manifests . However, you only have one worker
    node, which means that complex, multi-node application scenarios are not possible.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本地开发，您可能希望使用一个简单的部署方式，比如 minikube 或 Kind。这些工具在虚拟机（minikube）或 Docker 容器（Kind）上部署完整的控制平面，并允许您在本地机器上部署
    API 资源，本地机器既充当控制平面也充当数据平面。这种方法的优点是所有内容都在您的开发机器上运行，您可以轻松构建和测试应用程序，并且可以使用 Deployment
    清单。然而，您只有一个工作节点，这意味着无法实现复杂的多节点应用场景。
- en: Non-production deployments
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 非生产部署
- en: In most cases, non-production deployments have a non-resilient control plane.
    This typically means having a single master node hosting the control plane components
    (API server, etcd, and so on) and multiple worker nodes. This helps test multi-node
    application architectures but without the overhead of a complex control plane.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，非生产部署具有不可恢复的控制平面。这通常意味着只有一个主节点托管控制平面组件（API 服务器、etcd 等），而多个工作节点。这样有助于测试多节点应用程序架构，但不会增加复杂控制平面的开销。
- en: The one exception is integration and/or operational non-production environments
    where you want to test cluster or application operations in the case of a control
    plane failure. In this case, you may want to have at least two master nodes.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的例外是集成和/或运营性的非生产环境，在这种环境下，您可能希望在控制平面故障的情况下测试集群或应用程序操作。在这种情况下，您可能希望至少拥有两个主节点。
- en: Self-built production environments
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自建生产环境
- en: In production environments, you will need a resilient control plane, typically
    following the *rule of 3,* where you deploy 3, 6, or 9 control nodes to ensure
    an odd number of nodes are used to gain a majority during a failure event. The
    control plane components are mainly stateless, while configuration is stored in
    etcd. A load balancer can be deployed across the API controllers to provide resilience
    for K8s API requests; however, a key design decision is how to provide a resilient
    **etcd** layer.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产环境中，你需要一个具备韧性的控制平面，通常遵循 *三节点法则*，即部署 3、6 或 9 个控制节点，以确保在发生故障事件时使用奇数个节点来获得多数决策权。控制平面组件主要是无状态的，而配置则存储在
    etcd 中。可以在 API 控制器之间部署负载均衡器，以提供 K8s API 请求的韧性；然而，一个关键的设计决策是如何提供一个具备韧性的 **etcd**
    层。
- en: In the first model, *stacked* etcd, etcd is deployed directly on the master
    nodes making the etcd and Kubernetes topologies tightly coupled (see https://d33wubrfki0l68.cloudfront.net/d1411cded83856552f37911eb4522d9887ca4e83/b94b2/images/kubeadm/kubeadm-ha-topology-stacked-etcd.svg).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一种模型中，*堆叠式* etcd，etcd 被直接部署在主节点上，使得 etcd 和 Kubernetes 拓扑紧密耦合（参见 https://d33wubrfki0l68.cloudfront.net/d1411cded83856552f37911eb4522d9887ca4e83/b94b2/images/kubeadm/kubeadm-ha-topology-stacked-etcd.svg）。
- en: This means if one node fails, both the API layer and data persistence (etcd)
    layers are affected. A solution to this problem is to use an external etcd cluster
    hosted on separate machines than the other Kubernetes components, effectively
    decoupling them (see https://d33wubrfki0l68.cloudfront.net/ad49fffce42d5a35ae0d0cc1186b97209d86b99c/5a6ae/images/kubeadm/kubeadm-ha-topology-external-etcd.svg).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，如果一个节点出现故障，API 层和数据持久性（etcd）层都会受到影响。解决这一问题的方法是使用一个外部 etcd 集群，将其托管在与其他 Kubernetes
    组件分开的机器上，从而有效地解耦它们（参见 https://d33wubrfki0l68.cloudfront.net/ad49fffce42d5a35ae0d0cc1186b97209d86b99c/5a6ae/images/kubeadm/kubeadm-ha-topology-external-etcd.svg）。
- en: In the case of the external etcd model, failure in either the API or etcd clusters
    will not impact the other. It does mean, however, that you will have twice as
    many machines (virtual or physical) to manage and maintain.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在外部 etcd 模型中，API 或 etcd 集群中的任何一个故障都不会影响另一个集群。然而，这意味着你将需要管理和维护两倍数量的机器（无论是虚拟机还是物理机）。
- en: Managed service environments
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 托管服务环境
- en: AWS EKS is a managed service where AWS provides the control plane and you connect
    worker nodes to it using either self-managed or AWS-managed node groups (see [*Chapter
    8*](B18129_08.xhtml#_idTextAnchor123), *Managing Worker Nodes on EKS*). You simply
    create a cluster and AWS will provision and manage at least two API servers (in
    two distinct Availability Zones) and a separate etcd autoscaling group spread
    over three Availability Zones.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: AWS EKS 是一项托管服务，AWS 提供控制平面，你可以使用自我管理或 AWS 管理的节点组将工作节点连接到它（参见 [*第8章*](B18129_08.xhtml#_idTextAnchor123)，*在
    EKS 上管理工作节点*）。你只需创建一个集群，AWS 会配置并管理至少两个 API 服务器（位于两个不同的可用区）以及一个分布在三个可用区的独立 etcd
    自动扩展组。
- en: The cluster supports a service level of 99.95% uptime and AWS will fix any issues
    with your control plane. This model means that you don’t have any flexibility
    in the control plane architecture but, at the same time, you won’t be required
    to manage it. EKS can be used for test, non-production, and production workloads,
    but remember there is a cost associated with each cluster (this will be discussed
    in [*Chapter 2*](B18129_02.xhtml#_idTextAnchor030), *Introducing* *Amazon EKS*).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 该集群支持 99.95% 的服务级别可用性，AWS 会修复控制平面中的任何问题。这种模式意味着你无法灵活地调整控制平面架构，但同时，你也不需要自己管理它。EKS
    可以用于测试、非生产环境和生产工作负载，但请记住，每个集群都有一定的费用（这将在 [*第2章*](B18129_02.xhtml#_idTextAnchor030)，*介绍
    Amazon EKS* 中讨论）。
- en: Now you’ve learned about several architectures that can be implemented when
    building a Kubernetes cluster from development to production. In this book, you
    don’t have to know how to build an entire Kubernetes cluster by yourself, as we
    will be using EKS.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了从开发到生产中构建 Kubernetes 集群时可以实现的几种架构。在本书中，你不必自己知道如何构建整个 Kubernetes 集群，因为我们将使用
    EKS。
- en: Summary
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we explored the basic concepts of containers and Kubernetes.
    We discussed the core technical concepts used by Docker, containerd, and runc
    on Linux systems, as well as scaling deployments using a container orchestration
    system such as Kubernetes.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们探讨了容器和 Kubernetes 的基本概念。我们讨论了 Docker、containerd 和 runc 在 Linux 系统上使用的核心技术概念，以及如何使用容器编排系统（如
    Kubernetes）来扩展部署。
- en: We also looked at what Kubernetes is, reviewed several components and API resources,
    and discussed different deployment architectures for development and production.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还介绍了什么是 Kubernetes，回顾了几个组件和 API 资源，并讨论了开发和生产环境的不同部署架构。
- en: In the next chapter, let’s talk about the managed Kubernetes service, **Amazon
    Elastic Kubernetes Service** (**Amazon EKS**), in more detail and learn what its
    key benefits are.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将更详细地讨论托管的 Kubernetes 服务——**Amazon Elastic Kubernetes Service**（**Amazon
    EKS**），并了解其关键优势。
- en: Further reading
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '*Understanding the* *EKS SLA*'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*理解* *EKS SLA*'
- en: https://aws.amazon.com/eks/sla/
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: https://aws.amazon.com/eks/sla/
- en: '*Understanding the* *Kubernetes API*'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*理解* *Kubernetes API*'
- en: https://kubernetes.io/docs/concepts/overview/kubernetes-api/
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: https://kubernetes.io/docs/concepts/overview/kubernetes-api/
- en: '*Getting started* *with minikube*'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*开始使用* *minikube*'
- en: https://minikube.sigs.k8s.io/docs/start/
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: https://minikube.sigs.k8s.io/docs/start/
- en: '*Getting started* *with Kind*'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*开始使用* *Kind*'
- en: https://kind.sigs.k8s.io/docs/user/quick-start/
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: https://kind.sigs.k8s.io/docs/user/quick-start/
- en: '*EKS control plane* *best practice*'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*EKS 控制平面* *最佳实践*'
- en: https://aws.github.io/aws-eks-best-practices/reliability/docs/controlplane/
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: https://aws.github.io/aws-eks-best-practices/reliability/docs/controlplane/
- en: '*Open Container* *Initiative document*'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*开放容器* *倡议文档*'
- en: https://opencontainers.org/
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: https://opencontainers.org/

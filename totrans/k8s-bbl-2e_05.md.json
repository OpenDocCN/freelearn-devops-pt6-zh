["```\n# multi-container-pod.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: multi-container-pod\nspec:\n  restartPolicy: Never\n  containers:\n    - name: nginx-container\n      image: nginx:latest\n    - name: debian-container\n      image: debian\n      command: [\"/bin/sh\"]\n      args: [\"-c\", \"while true; do date;echo debian-container; sleep 5 ; done\"] \n```", "```\n$ kubectl apply -f multi-container-pod.yaml\npod/multi-container-pod created \n```", "```\n$ kubectl get pods\nNAME                  READY   STATUS    RESTARTS   AGE\nmulti-container-pod   2/2     Running   0          2m7s \n```", "```\n$ kubectl logs multi-container-pod -c debian-container\nMon Jan  8 01:33:23 UTC 2024\ndebian-container\nMon Jan  8 01:33:28 UTC 2024\ndebian-container\n...<removed for brevity>...\n$ kubectl logs multi-container-pod -c nginx-container\n/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration\n...<removed for brevity>...\n2024/01/08 01:33:20 [notice] 1#1: start worker process 39\n2024/01/08 01:33:20 [notice] 1#1: start worker process 40 \n```", "```\n# failed-multi-container-pod.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: multi-container-pod\nspec:\n  restartPolicy: Never\n  containers:\n    - name: nginx-container\n      image: nginx:i-do-not-exist\n    - name: debian-container\n      image: debian\n      command: [\"/bin/sh\"]\n      args: [\"-c\", \"while true; do date;echo debian-container; sleep 5 ; done\"] \n```", "```\n$ kubectl apply -f failed-multi-container-pod.yaml\npod/failed-multi-container-pod created \n```", "```\n$ kubectl get pod\nNAME                         READY   STATUS             RESTARTS   AGE\nfailed-multi-container-pod   1/2     ImagePullBackOff   0          93s \n```", "```\n$  kubectl describe pod failed-multi-container-pod\nName:             failed-multi-container-pod\nNamespace:        default\n...<removed for brevity>...\nEvents:\n  Type     Reason     Age                    From               Message\n  ----     ------     ----                   ----               -------\n...<removed for brevity>...\n  Warning  Failed     5m23s (x3 over 6m13s)  kubelet            Error: ErrImagePull\n  Warning  Failed     4m55s (x5 over 6m10s)  kubelet            Error: ImagePullBackOff\n  Normal   Pulling    4m42s (x4 over 6m17s)  kubelet            Pulling image \"nginx:i-do-not-exist\"\n  **Warning  Failed     4m37s (x4 over 6m13s)  kubelet            Failed to pull image \"nginx:i-do-not-exist\": Error response from daemon: manifest for nginx:i-do-not-exist not found: manifest unknown: manifest unknown**\n  Normal   BackOff    75s (x19 over 6m10s)   kubelet            Back-off pulling image \"nginx:i-do-not-exist\" \n```", "```\n$ kubectl delete -f multi-container-pod.yaml \n```", "```\n$ kubectl delete pods/multi-pod\n$ # or equivalent\n$ kubectl delete pods multi-pod \n```", "```\n$ kubectl get pod\nNAME                         READY   STATUS             RESTARTS   AGE\nfailed-multi-container-pod   1/2     ImagePullBackOff   0          13m \n```", "```\n$ kubectl delete -f failed-multi-container-pod.yaml\npod \"failed-multi-container-pod\" deleted \n```", "```\n$ kubectl delete pod failed-multi-container-pod --grace-period=0 --force\nWarning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\npod \"failed-multi-container-pod\" force deleted \n```", "```\n$ kubectl apply -f multi-container-pod.yaml\npod/multi-container-pod created \n```", "```\n$ kubectl describe pods/multi-container-pod \n```", "```\n$ kubectl get pod/multi-container-pod -o jsonpath=\"{.spec.containers[*].name}\"\nnginx-container debian-container \n```", "```\n$ kubectl exec -it multi-container-pod --container nginx-container -- /bin/bash\nroot@multi-container-pod:/# hostname\nmulti-container-pod\nroot@multi-container-pod:/# \n```", "```\n$ kubectl apply -f multi-container-pod.yaml\npod/multi-container-pod created \n```", "```\n$ kubectl exec pods/multi-container-pod -c nginx-container -- ls\nbin\nboot\ndev\ndocker-entrypoint.d\ndocker-entrypoint.sh\n...<removed for brevity> \n```", "```\n# ~/Dockerfile\nFROM busybox:latest\nENTRYPOINT [\"sleep\"]\nCMD [\"30\"] \n```", "```\nCMD argument is what you can pass to the docker run command. If you build this image with this Dockerfile using the docker build command, youâ€™ll end up with a BusyBox image that just runs the sleep command (ENTRYPOINT) when the docker run command is run for 30 seconds (the CMD argument).\n```", "```\n$ docker run my-custom-ubuntu:latest 60\n$ docker run my-custom-ubuntu:latest # Just sleep for 30 seconds \n```", "```\n# nginx-debian-with-custom-command-and-args\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-debian-with-custom-command-and-args\nspec:\n  restartPolicy: Never\n  containers:\n    - name: nginx-container\n      image: nginx:latest\n    - name: debian-container\n      image: debian\n      command: [\"sleep\"] # Corresponds to the ENTRYPOINT\n      args: [\"60\"] # Corresponds to CMD \n```", "```\n$ kubectl apply -f nginx-debian-with-custom-command-and-args.yaml\npod/nginx-debian-with-custom-command-and-args created\n$ kubectl get po -w\nNAME                                        READY   STATUS     RESTARTS   AGE\nnginx-debian-with-custom-command-and-args   0/2     ContainerCreating   0          2s\nnginx-debian-with-custom-command-and-args   2/2     Running             0          6s\nnginx-debian-with-custom-command-and-args   1/2     NotReady            0          66s \n```", "```\n# nginx-with-init-container.yaml\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-with-init-container\n  labels:\n    environment: prod\n    tier: frontend\nspec:\n  restartPolicy: Never\n  volumes:\n    - name: website-volume\n      emptyDir: {}\n  initContainers:\n    - name: download-website\n      image: busybox\n      command:\n        - sh\n        - -c\n        - |\n          wget https://github.com/iamgini/website-demo-one-page/archive/refs/heads/main.zip -O /tmp/website.zip && \\\n          mkdir /tmp/website && \\\n          unzip /tmp/website.zip -d /tmp/website && \\\n          cp -r /tmp/website/website-demo-one-page-main/* /usr/share/nginx/html\n      volumeMounts:\n        - name: website-volume\n          mountPath: /usr/share/nginx/html\n  containers:\n    - name: nginx-container\n      image: nginx:latest\n      volumeMounts:\n        - name: website-volume\n          mountPath: /usr/share/nginx/html \n```", "```\n$ kubectl apply -f nginx-with-init-container.yaml\npod/nginx-with-init-container created\n$ kubectl get po -w\nNAME                        READY   STATUS     RESTARTS   AGE\nnginx-with-init-container   0/1     Init:0/1   0          3s\nnginx-with-init-container   0/1     Init:0/1   0          4s\nnginx-with-init-container   0/1     PodInitializing   0          19s\nnginx-with-init-container   1/1     Running           0          22s \n```", "```\n$ kubectl expose pod nginx-with-init-container --port=80 --type=NodePort\nservice/nginx-with-init-container exposed \n```", "```\n$ kubectl port-forward pod/nginx-with-init-container 8080:80\nForwarding from 127.0.0.1:8080 -> 80\nForwarding from [::1]:8080 -> 80 \n```", "```\n$ kubectl logs -f pods/multi-container-pod --container nginx-container \n```", "```\n$ kubectl logs --since=2h pods/multi-container-pod --container nginx-container \n```", "```\n$ kubectl logs --tail=30 pods/multi-container-pod --container nginx-container \n```", "```\n# multi-container-with-emptydir-pod.yaml\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: multi-container-with-emptydir-pod\nspec:\n  containers:\n    - name: nginx-container\n      image: nginx:latest\n      volumeMounts:\n      - mountPath: /var/i-am-empty-dir-volume\n        name: empty-dir-volume\n    - name: debian-container\n      image: debian\n      command: [\"/bin/sh\"]\n      args: [\"-c\", \"while true; do sleep 30; done;\"] # Prevents container from exiting after completion\n      volumeMounts:\n      - mountPath: /var/i-am-empty-dir-volume\n        name: empty-dir-volume\n  volumes:\n  - name: empty-dir-volume # name of the volume\n    emptyDir: {} # Initialize an empty directory # The path on the worker node. \n```", "```\n$ kubectl apply -f multi-container-with-emptydir-pod.yaml\npod/multi-container-with-emptydir-pod created \n```", "```\n$ kubectl get po\nNAME                                READY   STATUS    RESTARTS   AGE\nmulti-container-with-emptydir-pod   2/2     Running   0          25s \n```", "```\n$ kubectl exec multi-container-with-emptydir-pod -c debian-container -- ls /var\nbackups\ncache\ni-am-empty-dir-volume\nlib\nlocal\nlock\nlog\nmail\nopt\nrun\nspool\ntmp\n$ kubectl exec multi-container-with-emptydir-pod -c nginx-container  -- ls /var\nbackups\ncache\ni-am-empty-dir-volume\nlib\nlocal\nlock\nlog\nmail\nopt\nrun\nspool\ntmp \n```", "```\n$ kubectl exec multi-container-with-emptydir-pod -c debian-container -- bin/sh -c \"echo 'hello world' >> /var/i-am-empty-dir-volume/hello-world.txt\"\n$ kubectl exec multi-container-with-emptydir-pod -c nginx-container -- cat /var/i-am-empty-dir-volume/hello-world.txt\nhello world\n$ kubectl exec multi-container-with-emptydir-pod -c debian-container -- cat /var/i-am-empty-dir-volume/hello-world.txt\nhello world \n```", "```\n# multi-container-with-hostpath.yaml\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: multi-container-with-hostpath\nspec:\n  containers:\n    - name: nginx-container\n      image: nginx:latest\n      volumeMounts:\n      - mountPath: /foo\n        name: my-host-path-volume\n    - name: debian-container\n      image: debian\n      command: [\"/bin/sh\"]\n      args: [\"-c\", \"while true; do sleep 30; done;\"] # Prevents container from exiting after completion\n  volumes:\n  - name: my-host-path-volume\n    hostPath:\n      path: /tmp # The path on the worker node.\n      type: Directory \n```", "```\ntype: Directory, which means the directory already exists on the host machine. If you want to create the directory or file on the host machine, then use DirectoryOrCreate and FileOrCreate respectively.\n```", "```\n$ echo \"Hello World\" >> /tmp/hello-world.txt \n```", "```\n$ minikube ssh\ndocker@minikube:~$ echo \"Hello World\" > /tmp/hello-world.txt\ndocker@minikube:~$ exit\nLogout \n```", "```\n$ sudo podman exec -it minikube /bin/bash\nroot@minikube:/# cat /tmp/hello-world.txt \n```", "```\n$ kubectl apply -f multi-container-with-hostpath.yaml\npod/multi-container-with-hostpath created\n$ kubectl get pod\nNAME                            READY   STATUS    RESTARTS   AGE\nmulti-container-with-hostpath   2/2     Running   0          11 \n```", "```\n$ kubectl exec multi-container-with-hostpath -c nginx-container -- cat /foo/hello-world.txt\nHello World \n```", "```\n# ~/ nginx-with-ambassador.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-with-ambassador\nspec:\n  containers:\n    - name: mysql-proxy-ambassador-container\n      image: mysql-proxy:latest\n      ports:\n         - containerPort: 3306\n      env:\n      - name: DB_HOST\n        value: mysql.xxx.us-east-1.rds.amazonaws.com\n    - name: nginx-container\n      image: nginx:latest \n```", "```\n# nginx-with-fluentd-sidecar.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-with-sidecar\nspec:\n  containers:\n    - name: nginx-container\n      image: nginx:latest\n      ports:\n        - containerPort: 80\n      volumeMounts:\n        - name: log-volume\n          mountPath: /var/log/nginx\n    - name: fluentd-sidecar\n      image: fluent/fluentd:v1.17\n      volumeMounts:\n        - name: log-volume\n          mountPath: /var/log/nginx\n  volumes:\n    - name: log-volume\n      emptyDir: {} \n```", "```\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: fluentd-config-map\n  namespace: default\ndata:\n  fluentd.conf: |\n    <source>\n      @type tail\n      path /var/log/nginx/*.log\n      pos_file /var/log/nginx/nginx.log.pos\n      tag nginx\n      <parse>\n        @type nginx\n      </parse>\n    </source>\n    <match nginx.**>\n      @type elasticsearch\n      host elastic.lab.example.com\n      port 9200\n      logstash_format true\n      logstash_prefix fluentd\n      logstash_dateformat %Y.%m.%d\n    </match> \n```", "```\n# alpine-with-adapter.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: pod-with-adapter\nspec:\n  containers:\n    - name: alpine-writer\n      image: alpine:latest\n      command: [ \"sh\", \"-c\", \"i=1; while true; do echo \\\"$(date) - log $i\\\" >> /var/log/app/app.log; i=$((i+1)); sleep 5; done\" ]\n      volumeMounts:\n        - name: log-volume\n          mountPath: /var/log/app\n      # adapter container\n    - name: log-adapter\n      image: alpine:latest\n      command: [ \"sh\", \"-c\", \"while true; do cat /logs/app.log | sed 's/$/ PROCESSED/' > /logs/processed_app.log; cat /logs/processed_app.log; sleep 10; done\" ]\n      volumeMounts:\n        - name: log-volume\n          mountPath: /logs\n  volumes:\n    - name: log-volume\n      emptyDir: {} \n```", "```\n$ kubectl apply -f nginx-with-adapter.yaml\npod/pod-with-adapter created \n```", "```\n$ kubectl exec -it pod-with-adapter -c alpine-writer -- head -5 /var/log/app/app.log\nSun Jun 30 15:05:26 UTC 2024 - log 1\nSun Jun 30 15:05:31 UTC 2024 - log 2\nSun Jun 30 15:05:36 UTC 2024 - log 3\nSun Jun 30 15:05:41 UTC 2024 - log 4\nSun Jun 30 15:05:46 UTC 2024 - log 5 \n```", "```\n$ kubectl exec -it pod-with-adapter -c log-adapter -- head -5 /logs/processed_app.log\nSun Jun 30 15:05:26 UTC 2024 - log 1 PROCESSED\nSun Jun 30 15:05:31 UTC 2024 - log 2 PROCESSED\nSun Jun 30 15:05:36 UTC 2024 - log 3 PROCESSED\nSun Jun 30 15:05:41 UTC 2024 - log 4 PROCESSED\nSun Jun 30 15:05:46 UTC 2024 - log 5 PROCESSED \n```", "```\n...<removed for brevity>...\n    spec:\n      containers:\n        - name: myapp\n          image: alpine:latest\n          command: ['sh', '-c', 'while true; do echo \"logging\" >> /opt/logs.txt; sleep 1; done']\n          volumeMounts:\n            - name: data\n              mountPath: /opt\n      initContainers:\n        - name: logshipper\n          image: alpine:latest\n          **restartPolicy:****Always**\n          command: ['sh', '-c', 'tail -F /opt/logs.txt']\n          volumeMounts:\n            - name: data\n              mountPath: /opt\n      volumes:\n        - name: data\n          emptyDir: {} \n```"]
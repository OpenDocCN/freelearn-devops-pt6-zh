["```\n    $ cat <<EOF | kubectl apply -f -\n    apiVersion: v1\n    kind: PersistentVolume\n    metadata:\n      name: db-pv-volume\n      labels:\n        type: local\n    spec:\n      storageClassName: manual\n      capacity:\n        storage: 5Gi\n      accessModes:\n        - ReadWriteOnce\n      hostPath:\n        path: \"/mnt/data\"\n    EOF\n    ```", "```\n    $ cat <<EOF | kubectl apply -f -\n    apiVersion: v1\n    kind: PersistentVolumeClaim\n    metadata:\n      name: db-pv-claim\n    spec:\n      storageClassName: manual\n      accessModes:\n        - ReadWriteOnce\n      resources:\n        requests:\n          storage: 5Gi\n    EOF\n    ```", "```\n    $ cat <<EOF | kubectl apply -f -\n    apiVersion: v1\n    kind: PersistentVolumeClaim\n    metadata:\n      name: db-pv-claim\n    spec:\n      accessModes:\n        - ReadWriteOnce\n      storageClassName: longhorn\n      resources:\n        requests:\n          storage: 5Gi\n    EOF\n    ```", "```\n    $ cat <<EOF | kubectl apply -f -\n    apiVersion: apps/v1\n    kind: Deployment\n    metadata:\n      name: mysql\n    spec:\n      selector:\n        matchLabels:\n          app: mysql\n      strategy:\n        type: Recreate\n      template:\n        metadata:\n          labels:\n            app: mysql\n        spec:\n          containers:\n          - image: mysql:8.0.28-oracle\n            name: mysql\n            env:\n            - name: MYSQL_ROOT_PASSWORD\n              value: password\n            ports:\n            - containerPort: 3306\n              name: mysql\n            volumeMounts:\n            - name: mysql-persistent-storage\n              mountPath: /var/lib/mysql\n          volumes:\n          - name: mysql-persistent-storage\n            persistentVolumeClaim:\n              claimName: db-pv-claim\n    EOF\n    ```", "```\n    $ cat <<EOF | kubectl apply -f -\n    apiVersion: v1\n    kind: Service\n    metadata:\n      name: mysql\n    spec:\n      ports:\n      - port: 3306\n      selector:\n        app: mysql\n    clusterIP: None \n    EOF\n    ```", "```\n    $ kubectl exec -it $(kubectl get pods -l app=mysql --output=jsonpath={..metadata.name}) -- bash\n    ```", "```\n$ mysql -h localhost -uroot -ppassword\n```", "```\nmysql> CREATE DATABASE EXAMPLE;\nQuery OK, 1 row affected (0.02 sec)\n\nmysql> USE EXAMPLE;\nDatabase changed\nmysql> CREATE TABLE VALUE_TABLE (ID INT PRIMARY KEY NOT NULL,VALUE INT NOT NULL);\nQuery OK, 0 rows affected (0.10 sec)\n\nmysql> INSERT INTO VALUE_TABLE (ID,VALUE) VALUES (1,123);\nQuery OK, 1 row affected (0.03 sec)\n\nmysql> SELECT * FROM VALUE_TABLE;\n+----+-------+\n| ID | VALUE |\n+----+-------+\n|  1 |   123 |\n+----+-------+\n1 row in set (0.00 sec)\n```", "```\n    mysql> DROP TABLE VALUE_TABLE;\n    Query OK, 0 rows affected (0.07 sec)\n\n    mysql> DROP DATABASE EXAMPLE;\n    Query OK, 0 rows affected (0.05 sec)\n\n    mysql> EXIT\n    Bye\n    ```", "```\n    $ cat <<EOF | kubectl apply -f -\n    apiVersion: v1\n    kind: ConfigMap\n    metadata:\n      name: redis-configmap\n    data:\n      redis-config: |\n        dir /data\n        requirepass YOUR_PASSWORD\n    EOF\n    ```", "```\n    $ cat <<EOF | kubectl apply -f -\n    apiVersion: apps/v1\n    kind: Deployment\n    metadata:\n      labels:\n        run: redis\n      name: redis\n    spec:\n      replicas: 1\n      selector:\n        matchLabels:\n          run: redis\n      template:\n        metadata:\n          labels:\n            run: redis\n        spec:\n          containers:\n          - name: redis\n            image: arm64v8/redis:6.2\n            command:\n              - redis-server\n              - /redisconf/redis.conf\n            ports:\n            - containerPort: 6379\n            resources:\n              limits:\n                cpu: \"0.2\"\n                memory: \"128Mi\"\n            volumeMounts:\n            - mountPath: \"/data\"\n              name: redis-storage\n            - mountPath: /redisconf\n              name: config\n          volumes:\n            - name: config\n              configMap:\n                name: redis-configmap\n                items:\n                - key: redis-config\n                  path: redis.conf\n            - name: redis-storage\n              persistentVolumeClaim:\n                claimName: db-pv-claim\n    EOF\n    ```", "```\n    $ cat <<EOF | kubectl apply -f -\n    apiVersion: v1\n    kind: Service\n    metadata:\n      labels:\n        run: redis\n      name: redis\n    spec:\n      ports:\n      - port: 6379\n        protocol: TCP\n        targetPort: 6379\n      selector:\n        run: redis\n      type: ClusterIP\n    EOF\n    ```", "```\n    $ kubectl exec -it $(kubectl get pods -l run=redis --output=jsonpath={..metadata.name}) -- redis-cli\n    ```", "```\n    127.0.0.1:6379> AUTH YOUR_PASSWORD\n    OK\n    127.0.0.1:6379> set a 1\n    OK\n    127.0.0.1:6379> get a\n    \"1\"\n    127.0.0.1:6379> exit\n    ```", "```\n    $ cat <<EOF | kubectl apply -f -\n    apiVersion: v1\n    kind: ConfigMap\n    metadata:\n      name: mongo-configmap\n    data:\n      mongod-conf: |\n        dbpath=/var/lib/mongodb\n        logpath=/var/log/mongodb/mongodb.log\n        logappend=true\n        bind_ip = 0.0.0.0\n        port = 27017\n        journal=true\n        auth = true\n    EOF\n    ```", "```\n    $ cat <<EOF | kubectl apply -f -\n    apiVersion: apps/v1\n    kind: Deployment\n    metadata:\n      labels:\n        app: mongo\n      name: mongo\n    spec:\n      replicas: 1\n      selector:\n        matchLabels:\n          app: mongo\n      template:\n        metadata:\n          labels:\n            app: mongo\n        spec:\n          containers:\n          - image: arm64v8/mongo:4.4\n            name: mongo\n            env:\n            - name: MONGO_INITDB_ROOT_USERNAME\n              value: \"admin\"\n            - name: MONGO_INITDB_ROOT_PASSWORD\n              value: \"YOUR_PASSWORD\"\n            - name: MONGO_INITDB_DATABASE\n              value: \"mydatabase\"\n            ports:\n            - containerPort: 27017\n            resources:\n              limits:\n                cpu: \"0.5\"\n                memory: \"200Mi\"\n            volumeMounts:\n            - mountPath: \"/data/db\"\n              name: mongo-storage\n            - mountPath: /mongoconf\n              name: config\n          volumes:\n            - name: config\n              configMap:\n                name: mongo-configmap\n                items:\n                - key: mongod-conf\n                  path: mongod.conf\n            - name: mongo-storage\n              persistentVolumeClaim:\n                claimName: db-pv-claim\n    EOF\n    ```", "```\n    $ cat <<EOF | kubectl apply -f -\n    apiVersion: v1\n    kind: Service\n    metadata:\n      labels:\n        app: mongo\n      name: mongo\n    spec:\n      ports:\n      - port: 27017\n        protocol: TCP\n        targetPort: 27017\n      selector:\n        app: mongo\n      type: ClusterIP\n    EOF\n    ```", "```\n    $ kubectl exec -it $(kubectl get pods -l app=mongo --output=jsonpath={..metadata.name}) -- mongo -uadmin -pYOUR_PASSWORD\n    ```", "```\n> use mydatabase\nswitched to db mydatabase\n> db.mycollection.insert({\"a\":1})\nWriteResult({ \"nInserted\" : 1 })\n> db.mycollection.find()\n{ \"_id\" : ObjectId(\"622c498199789d3b03b20c45\"), \"a\" : 1 }\n> exit\nBye\n```", "```\n    $ echo \"YOUR_PASSWORD\"| tr -d \"\\n\"  | base64\n    ```", "```\nWU9VUl9QQVNTV09SRA==\n```", "```\n    $ cat <<EOF | kubectl apply -f -\n    apiVersion: v1\n    kind: Secret\n    metadata:\n      name: db-password\n    data:\n      password: WU9VUl9QQVNTV09SRA==\n    EOF\n    ```", "```\n    $ cat <<EOF | kubectl apply -f -\n    apiVersion: apps/v1\n    kind: Deployment\n    metadata:\n      labels:\n        app: postgres\n      name: postgres\n    spec:\n      replicas: 1\n      selector:\n        matchLabels:\n          app: postgres\n      template:\n        metadata:\n          labels:\n            app: postgres\n        spec:\n          containers:\n          - image: arm64v8/postgres:14.2\n            name: postgres\n            env:\n    - name: PGDATA \n    value: \"/var/lib/postgresql/data/pgdata\" \n    - name: POSTGRES_PASSWORD \n    valueFrom: \n    secretKeyRef: \n    name: db-password \n                    key: password\n            ports:\n            - containerPort: 5432\n            resources:\n              limits:\n                cpu: \"0.5\"\n                memory: \"200Mi\"\n            volumeMounts:\n            - mountPath: \"/var/lib/postgresql/data\"\n              name: postgres-storage\n          volumes:\n            - name: postgres-storage\n              persistentVolumeClaim:\n                claimName: db-pv-claim\n    EOF\n    ```", "```\n    $ cat <<EOF | kubectl apply -f -\n    apiVersion: v1\n    kind: Service\n    metadata:\n      labels:\n        app: postgres\n      name: postgres\n    spec:\n      ports:\n      - port: 5432\n        protocol: TCP\n        targetPort: 5432\n      selector:\n        app: postgres\n      type: ClusterIP\n    EOF\n    ```", "```\n    $ kubectl exec -it $(kubectl get pods -l app=postgres --output=jsonpath={..metadata.name}) -- bash -c \"PGPASSWORD='YOUR_PASSWORD' psql -h postgres -U postgres\"\n    ```", "```\npostgres=# CREATE TABLE VALUE_TABLE (ID INT PRIMARY KEY NOT NULL,VALUE INT NOT NULL);\nCREATE TABLE\n```", "```\npostgres=# INSERT INTO VALUE_TABLE (ID,VALUE) VALUES (1,123);\nINSERT 0 1\n```", "```\npostgres=# SELECT * FROM VALUE_TABLE;\n id | value\n----+-------\n  1 |   123\n(1 row)\n```", "```\npostgres=# DROP TABLE VALUE_TABLE;\nDROP TABLE\n```", "```\npostgres=# exit\n```", "```\n    $ cat <<EOF | kubectl apply -f -\n    apiVersion: apps/v1\n    kind: Deployment\n    metadata:\n      labels:\n        app: neo4j\n      name: neo4j\n    spec:\n      replicas: 1\n      selector:\n        matchLabels:\n          app: neo4j\n      template:\n        metadata:\n          labels:\n            app: neo4j\n        spec:\n          containers:\n          - image: arm64v8/neo4j\n            name: neo4j\n            env:\n            - name: NEO4J_AUTH\n              value: none\n            ports:\n                - containerPort: 7474\n                  name: http\n                - containerPort: 7687\n                  name: bolt\n                - containerPort: 7473\n                  name: https\n            volumeMounts:\n                - name: neo4j-data\n                  mountPath: \"/var/lib/neo4j/data\"\n          volumes:\n              - name: neo4j-data\n                persistentVolumeClaim:\n                  claimName: db-pv-claim\n    EOF\n    ```", "```\n    $ cat <<EOF | kubectl apply -f -\n    apiVersion: v1\n    kind: Service\n    metadata:\n      labels:\n        app: neo4j\n      name: neo4j\n    spec: \n      ports:\n      - name: https\n        port: 7473\n        protocol: TCP\n        targetPort: 7473\n      - name: http\n        port: 7474\n        protocol: TCP\n        targetPort: 7474\n      - name: bolt\n        port: 7687\n        protocol: TCP\n        targetPort: 7687\n      selector:\n        app: neo4j\n      type: ClusterIP\n    EOF\n    ```", "```\n    $ kubectl port-forward service/neo4j 7474:7474\n    $ kubectl port-forward service/neo4j 7687:7687\n    ```", "```\n    CREATE (IronMan:Hero{name: \"Tony Stark\"}) \n    CREATE (Thanos:Villainous {name: \"Thanos\"})\n    CREATE (Thanos)-[r:ENEMY_OF]->(IronMan) \n    RETURN IronMan, Thanos\n    ```"]
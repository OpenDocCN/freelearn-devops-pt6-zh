- en: '15'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Troubleshooting, Implementing Best Practices, and More with Grafana
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are nearing the end of our journey in *Observability with Grafana*, so this
    is a good time to revisit some of the things we have learned. In this chapter,
    we will review the best practices for data collection and look at troubleshooting
    techniques that can help get your telemetry into Grafana. We will then move on
    to the Grafana stack for more best practices and troubleshooting with your telemetry
    backend, alerts, and dashboards. We will identify some of the pitfalls of observability
    and how to avoid them. Then, before wrapping up, we will look to the future and
    explore potential trends on the horizon.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Best practices and troubleshooting for data collection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Best practices and troubleshooting for the Grafana stack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoiding pitfalls of observability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Future trends in application monitoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Best practices and troubleshooting for data collection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this book, we have repeatedly talked about the importance of preparation,
    setting objectives, and defining requirements. Doing the upfront thought work
    cannot be underestimated, but sadly, it is often completely overlooked. There
    are far too many occasions where I have investigated a company’s observability
    platform and discovered collection agents have been deployed without thought,
    opening the floodgates to send everything into the backend. The price is an excess
    of undefined telemetry, making it hard to do your job and causing expensive operating
    and storage costs.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we’ll be sharing some best practices for data collection, together
    with some useful troubleshooting tips. Let’s first look at preparation activities
    for data collection.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing for data collection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Observability starts with a need or desire to monitor and observe systems, and
    to do that, we need data. However, too much data (and data for the sake of data)
    can break your system’s observability, which is why it is important to prepare.
    Set your objectives, considering what you want from your platform and who it is
    for. Instead of planning for the *what if*, plan for *what is*. You can always
    add to it later, which is much easier than taking away after the fact.
  prefs: []
  type: TYPE_NORMAL
- en: 'In [*Chapter 1*](B18277_01.xhtml#_idTextAnchor018), we introduced observability
    personas. You can use these to gather platform requirements. Ideally, you want
    to be able to answer the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: Who are my observability customers?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What log formats do I want or have in my system?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the origin of the data?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What metrics are important for our **service-level** **objectives** (**SLOs**)?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Will tracing instrumentation help solve observability problems?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What data do I need for dashboards?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These answers will help you determine which agent technology works best for
    your use case, what log formats to use, and other important decisions.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at some of the decisions we need to make for our data collection.
  prefs: []
  type: TYPE_NORMAL
- en: Data collection decisions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Several critical decisions must be made early on that can impact your entire
    observability journey. It is important to take the time upfront to make these
    decisions, as it becomes a lot harder and more expensive to change them later.
    In most scenarios, your choices are reduced, and you have to work with existing
    data. That does not stop you from identifying and communicating a new standard
    to aim for. Standardizing data collection across the entire organization provides
    a framework that supports engineers in compliance. Here, we group some of those
    factors together to help you process them:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Logs**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choose a log format that can be extended so you can deliver quickly and enhance
    later.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Select labels carefully, considering Loki’s performance and cardinality. You
    can always extract additional fields as labels during querying.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Consider whether valuable metrics can be created from logs (to maximize the
    value).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Metrics**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identify important metrics, and drop what you don’t need. This can help with
    metric cardinality, too. If you cannot drop the whole metric, just dropping some
    of the highest cardinality labels can help a lot.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Choose the protocols that provide the data you need (remember, there are variations,
    so read the documentation for each carefully).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If using verbose metric protocols, ensure protection is in place (e.g., histogram
    bucketing) to restrict the ability to flood your system.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add context so you can correlate metrics with traces.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Traces**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that the accuracy of spans and traces is implemented and validated
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Balance the performance and cost impact with a mitigation strategy (sampling,
    filtering, and retention)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Instrumentation libraries**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Research them well. If you are using a library, you want it to be maintained
    and supported going forward.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Telemetry collector**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run proofs of concept to validate what works with your technology. You don’t
    want to fall foul of permission constraints restricting the choice of collector
    on your route to production.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Consider the support model that comes with the collector technology, if any.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What are your business needs from a collector?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that all the decisions have been made, let’s look at what to do if your
    telemetry is not showing up.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging collector
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Within the observability platform, it can be difficult to isolate problems with
    your telemetry getting to the backend, especially if it is sent through different
    connections and components in your telemetry pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few steps that can help diagnose issues:'
  prefs: []
  type: TYPE_NORMAL
- en: Check for error messages in the collector logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Look for data rejections by Grafana, such as the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sample too old
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Trace too large
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Ingest rate limiting
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Validate authentication credentials (token expiry and permissions)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verify how telemetry is being ingested (ports and protocols)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyze whether the telemetry is modified with sampling or redaction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identify which exporters are being used to send telemetry to the next stage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validate the telemetry format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identify the next hop and validate its configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test simple network connectivity and identify whether firewall rules or network
    policies are restricting data flow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We should, hopefully, have data in the backend now, so let’s look at some best
    practices with Grafana.
  prefs: []
  type: TYPE_NORMAL
- en: Best practices and troubleshooting for the Grafana stack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As with the previous section, the importance of preparation applies to the Grafana
    stack, as it does with any good system design. You are making decisions that affect
    your users, your data, and your costs. In this section, we’ll be sharing some
    best practices for preparing Grafana, together with some useful tips for debugging.
    Let’s first look at preparation activities for your Grafana stack.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the Grafana stack
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When designing your platform, consider what you are sending there and who your
    users are. With your stack, it is important to consider wider subjects such as
    corporate authentication integration, as well as best endeavors to right-size
    your stack and implement processes to monitor that usage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ideally, you want to be able to answer the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: Who needs to use the platform?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Where are they using the platform?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What data retention requirements exist (if any)?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Grafana stack decisions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are important decisions to be made before you fully embrace your Grafana
    stack. Not all of them are related to observability; some are affected by regional
    governance and some are company policy. Working on and prioritizing these decisions
    earlier will help with the smooth running of your platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we group some of those factors together to help you process them:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Architecture**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does your use case require single or multiple stacks – for instance, in the
    case of data residency or the separation of development and production systems?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Is any data restricted and requires specific permissions, such as **Personally
    Identifiable Information** (**PII**) and the **General Data Protection** **Regulation**
    (**GDPR**)?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Are there global latency issues to consider?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Are there any user audit requirements?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Management**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can the backend be outsourced to ease administration efforts?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Do you have the ability to fix problems in a timely manner in the case of an
    incident?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Would IaC provide platform control?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authentication**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can the platform be integrated with an authentication provider to make user
    management easier?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Do you have team-specific permissions that might cause issues with an identity
    provider?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data retention**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need to create data retention policies to understand why telemetry data
    is needed and for how long
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Metrics are usually cheaper to store – you can generate these from logs with
    recording rules rather than store more expensive logs for longer
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging Grafana
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are a few areas or touchpoints where problems can occur with your Grafana
    backend. The following techniques should help you get back on track or at least
    provide a point of reference to help you debug further:'
  prefs: []
  type: TYPE_NORMAL
- en: '`curl`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`group by` functions to reduce the result set'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are trying out different variations of your query, the **Query history**
    button will remember them for you.
  prefs: []
  type: TYPE_NORMAL
- en: '**Problem discovery**: It is not always obvious where problems lie – unless,
    of course, people report them. Grafana provides a set of dashboards to support
    your success with Grafana Cloud. Here is a screenshot of the Grafana Cloud **Dashboards**
    list:![Figure 15.1 – Grafana Cloud Dashboards](img/B18277_15_1.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Figure 15.1 – Grafana Cloud Dashboards
  prefs: []
  type: TYPE_NORMAL
- en: 'When diagnosing problems with your Grafana data and dashboards, the **Usage
    Insights** dashboards can help. Navigate to the **Usage Insights – 1 – Overview**
    dashboard and scroll down; you will find three panels:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Top 10 dashboards with errors**: This lets you know which dashboards are
    encountering errors of some form.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Top 10 data sources with errors**: This reports the Grafana data sources
    that have issues. This is useful to diagnose errors with queries, or in communicating
    to the backend data source.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Top 10 users seeing errors**: This identifies your platform users who are
    encountering problems inside Grafana. This is helpful when investigating platform
    stability.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These panels guide you to the issues being encountered with drill-down links
    into other dashboards to show specific errors to aid diagnosis.
  prefs: []
  type: TYPE_NORMAL
- en: In particular, the **Grafana Cloud Billing/Usage** dashboard is very important
    in showing why samples might be rejected due to hitting account limits. Additionally,
    the **Cardinality management** dashboards can help highlight problems where label
    values are causing issues.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now look at problems that we could encounter in the wider subject of observability.
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding pitfalls of observability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have identified several areas throughout this book where you need to sit
    down and think about your approach. All of these considerations contribute to
    your ongoing success with your observability platform. We will now call out a
    few of these, with some guidelines to follow:'
  prefs: []
  type: TYPE_NORMAL
- en: Treat your platform as an evolving development; start with the basics and build
    upon that, continuously reviewing where you are. Reducing the time to value will
    ensure return on investment is being realized.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collect requirements from multiple customers and then plan a roadmap that will
    deliver more value to more users to ensure the adoption and support of your platform.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitor costs, paying close attention to the data collection stage, where it
    is cheaper to fix. Use your observability tools to help.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix cardinality early, and develop standards that teams can work to that will
    control the problem. Additionally, you can apply governance that restricts data
    collection into the platform if it does not adhere to standards.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Isolate high-load, low-value environments (especially performance test environments)
    to protect business-critical system observability. You can build cheaper, short-lived
    observability systems for these environments to keep costs under control.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Define a 6- and 12-month roadmap. This will help you plan for and adapt to industry
    changes. Observability is moving fast, with new developments coming all the time;
    being agile will help you navigate them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitor platform usage. Grafana provides some excellent dashboards, as shown
    in *Figure 15**.1*, that help you understand what is being used and how. Additionally,
    you can enhance this by improving the monitoring of your collector estate to create
    visibility of your entire telemetry pipeline.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s now look to the future and think about where observability could be heading.
  prefs: []
  type: TYPE_NORMAL
- en: Future trends in application monitoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is difficult to present a perspective on future trends without being opinionated,
    so the following opinions reflect my beliefs on where the industry is heading:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Cost reduction**: At the time of writing, companies are actively looking
    at ways to reduce operational expenditure. There is a lot of scope for cost reduction
    in observability systems. Grafana is leading the charge with this. Take a look
    at the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Grafana Cloud Billing/Usage** dashboard to get an understanding of Grafana
    Cloud spend. This dashboard is part of the list shown in *Figure 15.1*.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Adaptative Metrics** ([https://grafana.com/docs/grafana-cloud/cost-management-and-billing/reduce-costs/metrics-costs/control-metrics-usage-via-adaptive-metrics/](https://grafana.com/docs/grafana-cloud/cost-management-and-billing/reduce-costs/metrics-costs/control-metrics-usage-via-adaptive-metrics/))
    for solutions to reducing costs.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Log Volume Explorer** ([https://grafana.com/docs/grafana-cloud/cost-management-and-billing/analyze-costs/logs-costs/analyze-log-ingestion-log-volume-explorer/](https://grafana.com/docs/grafana-cloud/cost-management-and-billing/analyze-costs/logs-costs/analyze-log-ingestion-log-volume-explorer/))
    to discover sources with excessive log collection.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Artificial intelligence** (**AI**): AI has matured recently to a point where
    it will soon become a key part of observability platforms. Grafana recently released
    generative AI features for the **Dashboard** panel title and description text
    and incident response auto summaries. You can see and read more here: [https://grafana.com/blog/2023/08/28/generative-ai-at-grafana-labs-whats-new-whats-next-and-our-vision-for-the-open-source-community/](https://grafana.com/blog/2023/08/28/generative-ai-at-grafana-labs-whats-new-whats-next-and-our-vision-for-the-open-source-community/).
    Hot off the press as we go to press with this book, Grafana announced the acquisition
    of **Asserts.ai** delivering root cause analysis solutions into Grafana; you can
    learn more here: [https://grafana.com/blog/2023/11/14/grafana-labs-acquires-asserts/](https://grafana.com/blog/2023/11/14/grafana-labs-acquires-asserts/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tool enhancements**: Capabilities to improve the relationship between developers
    and observability, easing the adoption earlier in the development life cycle.
    Grafana recently released live dashboard development with a VS Code Grafana extension:
    [https://marketplace.visualstudio.com/items?itemName=Grafana.grafana-vscode](https://marketplace.visualstudio.com/items?itemName=Grafana.grafana-vscode).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OpenTelemetry standard maturity**: Increased third-party development supporting
    OpenTelemetry as standards are agreed upon. Vendor-neutral solutions are becoming
    more popular, helping reduce overall costs (operational and management).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Collector management**: Here are some configuration and control tools for
    agent technology:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Open Agent Management Protocol** ([https://opentelemetry.io/docs/specs/opamp/](https://opentelemetry.io/docs/specs/opamp/))
    for the remote management of large fleets of data collection agents. No more re-deployments
    to block a metric or add a new receiver.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Grafana Agent Flow** brings new ways to build complex telemetry pipelines
    for the Grafana Agent. It includes a visualization of the Agent pipeline, which
    is perfect for understanding complex configurations.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Platform engineering**: Advancements in platform engineering will help increase
    observability adoption and development as dependency on telemetry increases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will now wrap up this chapter and the book. You should now have the knowledge
    to implement, troubleshoot, and manage Grafana for your observability journey.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have gone over best practices and troubleshooting techniques
    for data collection and the Grafana stack. We have looked at ways to avoid the
    pitfalls of observability as a whole, wrapping the chapter up with a look at future
    trends in application monitoring. These sections should have given you insights
    that will support your observability platform being a success, and help you get
    value from your platform for your users quicker and more efficiently. Now that
    we’ve completed the final chapter in our journey together through *Observability
    with Grafana*, let’s take a moment to review our key learnings.
  prefs: []
  type: TYPE_NORMAL
- en: In the first part of the book, we introduced observability and Grafana, along
    with a look at application and infrastructure instrumentation. We closed that
    part by setting up the OpenTelemetry demonstration application in your own Kubernetes
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: In part two, we worked through different telemetry types that you will encounter
    with Grafana – Loki for logs, Prometheus (Mimir) for metrics, and Tempo for traces
    – together making **LGTM** (**Loki, Grafana, Tempo, Mimir**), which you will see
    all over the Grafana website. We then looked at integrations with Kubernetes (which
    we used with the demo app throughout the book), AWS, GCP, and Azure.
  prefs: []
  type: TYPE_NORMAL
- en: In part three, we worked with Grafana more, presenting data with dashboards
    and building an incident management process with alerts. We then explored IaC
    for configuring Grafana, followed by a look at the architecture of the Grafana
    stack.
  prefs: []
  type: TYPE_NORMAL
- en: In our final part, we talked about real user monitoring with Grafana frontend
    observability, application profiling with Grafana Pyroscope, and performance testing
    with Grafana K6\. We closed the book with a look at how DevOps can be supported
    with observability, followed by some best practices and troubleshooting in this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Technology in the observability space, and especially with Grafana, moves fast.
    Hopefully, we have provided you with some timeless approaches and techniques that
    you can develop to support your observability work. Your new friends, the observability
    personas, will be there to lend a hand when you need it. Thank you for allowing
    us to be part of this journey with you. Good luck!
  prefs: []
  type: TYPE_NORMAL

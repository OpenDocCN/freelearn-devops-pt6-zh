- en: '20'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Troubleshooting Common Issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout the book, we have created clusters and added controllers, add-ons,
    workloads, and so on, but not everything has gone according to plan. And while
    K8s does a great job of being easy to use, you will probably have at least one
    issue following this book or in your day job.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding how to troubleshoot and what tools to use to identify root causes
    and hopefully fix them is an important part of using or running **Elastic Kubernetes
    Service** (**EKS**). In this chapter, we will look at the common techniques and
    tools used with EKS, as well as the frequent errors you may see when using Amazon
    EKS.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover a couple of common questions when you start
    using Amazon EKS, walk through the details, and learn how to do troubleshooting
    such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Common K8s tools/techniques for troubleshooting EKS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common cluster access problems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common Node/compute problems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common Pod networking problems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common workload problems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s get started!
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The reader should have a familiarity with YAML, AWS IAM, and EKS architecture.
    Before getting started with this chapter, please ensure the following:'
  prefs: []
  type: TYPE_NORMAL
- en: You have network connectivity to your EKS cluster API endpoint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The AWS CLI, Docker, and `kubectl` binary is installed on your workstation and
    have administrator access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common K8s tools/techniques for troubleshooting EKS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Any troubleshooting process begins with trying to understand the problem and
    differentiate between symptoms and the root cause of the problem. Symptoms can
    often be mistaken for the root cause, so the troubleshooting process tends to
    be iterative, with constant testing and observation as you focus on what the actual
    problem is and disregard the symptoms and false positives.
  prefs: []
  type: TYPE_NORMAL
- en: Once you understand the problem, it’s now a case of understanding how to mitigate,
    solve, or ignore it. Not all problems can be solved then and there, so you may
    need a strategy to work around them for the time being.
  prefs: []
  type: TYPE_NORMAL
- en: The final stage will be the resolution/fixing of the problem. This might require
    an update to your cluster, application code, or both, and depending on the nature
    of the problem, the number of clusters you manage and the impact on the users/customers
    may be quite an involved process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Generally, I use the following checklist when trying to understand the problem:'
  prefs: []
  type: TYPE_NORMAL
- en: '*What has changed?* – The mantra for most support engineers; has there been
    a new deployment? A cluster or add-on upgrade? An AWS/on-premises infrastructure
    change? We’ll look at tools next but having a record of any changes (in production
    at least) is a good practice to help engineers determine what has changed across
    these three areas.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Investigate the impact* – Here, you look at the symptoms. What problem is
    being observed? A slowdown of processing or a complete failure? What’s the scope?
    Limited to one namespace? One cluster? One VPC? Combined with an understanding
    of what has changed, this normally allows an engineer to narrow down the problem
    to the root cause but may require you to iterate through several hypotheses. Is
    it the new node type added to the cluster? No, it’s the new deployment on the
    node! Or, it’s the application library in the deployment!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Plan your fix or mitigation* – Can you fix it easily with no impact or do
    you need to plan your change? Form a plan and discuss it with your team, application
    owner, and any customer representatives. If you can replicate the problem and
    the fix in a non-production environment prior to any production change, then you
    should, and this will help with the overall plan.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now we’ve got a basic understanding of the steps you would typically go through
    to troubleshoot EKS problems. Next, let’s look at some of the tools you might
    use to do so.
  prefs: []
  type: TYPE_NORMAL
- en: Common EKS troubleshooting tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following table provides a list of common troubleshooting tools; it’s not
    exhaustive as the K8s ecosystem is large and has lots of contributors, but these
    are the ones I use or have used in the past. (Sorry if your favorite one isn’t
    included!)
  prefs: []
  type: TYPE_NORMAL
- en: '| **Phase** | **Tool** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| What has changed? | AWS CloudTrail | CloudTrail can provide logs of every
    API call made in your AWS accounts; this includes AWS EKS API calls (not K8s API),
    API calls to load balancers, IAM, and so on. |'
  prefs: []
  type: TYPE_TB
- en: '| AWS CloudWatch | Provides dashboards and logs for the control and (optionally)
    data planes. |'
  prefs: []
  type: TYPE_TB
- en: '| Grafana Loki [https://grafana.com/oss/loki/](https://grafana.com/oss/loki/)
    | An open source log aggregator. |'
  prefs: []
  type: TYPE_TB
- en: '| `kubectl diff` | `kubectl diff` allows you to compare a local manifest file
    with the running configuration to see what will change (or has changed) and is
    a useful tool if you have access to previous manifest files or commits. |'
  prefs: []
  type: TYPE_TB
- en: '| Investigating the impact | Linux command-line tools | Any of the standard
    Linux tools such as `dig`, `ping`, `tcpdump`, and so on should be used to determine
    the scope and impact. |'
  prefs: []
  type: TYPE_TB
- en: '| kubectl | `kubectl describe`, `kubectl get events`, and `kubectl logs` are
    fundamental to any troubleshooting process. `kubectl top` can be used to look
    at Pod- and Node-level stats (as long as the metrics servers are installed) |'
  prefs: []
  type: TYPE_TB
- en: '| Ktop: [https://github.com/vladimirvivien/ktop](https://github.com/vladimirvivien/ktop)
    | A useful CLI for cluster management |'
  prefs: []
  type: TYPE_TB
- en: '| k9s: [https://github.com/derailed/k9s](https://github.com/derailed/k9s) |
    A useful CLI for cluster management |'
  prefs: []
  type: TYPE_TB
- en: '| AWS Log Collector[https://github.com/awslabs/amazon-eks-ami/tree/master/log-collector-script/linux](https://github.com/awslabs/amazon-eks-ami/tree/master/log-collector-script/linux)
    | AWS support script that can be used to collect OS and K8s logs. |'
  prefs: []
  type: TYPE_TB
- en: Table 20.1 – Common EKS troubleshooting tools
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You can also now use `kubectl debug` to inject a troubleshooting container into
    a running pod to do live debugging of running pods in K8s 1.25 and above.
  prefs: []
  type: TYPE_NORMAL
- en: Along with technical tools/services, AWS provides a number of support services,
    which are listed here.
  prefs: []
  type: TYPE_NORMAL
- en: AWS Premium Support
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: AWS provides technical support service for all customers and offers 24/7 service
    365 days a year. It is designed to give you the right mix of tools and access
    to AWS expertise, so you can focus on business growth while optimizing system
    performance, learning how to cut unnecessary infrastructure costs, and reducing
    the complexity for doing troubleshooting when using each AWS service.
  prefs: []
  type: TYPE_NORMAL
- en: The support plan includes different levels, such as *Developer*, *Business*,
    and *Enterprise*. Depending on what support plan you have, you can use email,
    phone calls, or even chat to reach out to AWS experts for consulting on technical
    or operational issues through the AWS Support case console.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are interested in the AWS Premium Support plan and would like to learn
    more detail, you can check out their service feature page: [https://aws.amazon.com/premiumsupport/plans/](https://aws.amazon.com/premiumsupport/plans/).'
  prefs: []
  type: TYPE_NORMAL
- en: Part of the support model is access to Knowledge Center, which has a lot of
    additional information on all the AWS platform products, not just EKS.
  prefs: []
  type: TYPE_NORMAL
- en: AWS Support Knowledge Center
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'AWS Support Knowledge Center is maintained by AWS and comprises a centralized
    resource center to help you better learn how to fix operational issues or your
    configuration when using AWS services. It lists the most frequent questions and
    requests that AWS support receives from its customers. You can check more details
    by accessing the following link: [https://aws.amazon.com/premiumsupport/knowledge-center/](https://aws.amazon.com/premiumsupport/knowledge-center/).'
  prefs: []
  type: TYPE_NORMAL
- en: You can review the section on Amazon EKS to find out the common issues in Amazon
    EKS. Some articles also include featured videos with complete step-by-step tutorials.
    Now we’ve looked at some common tools for troubleshooting, let’s look at some
    typical cluster access problems.
  prefs: []
  type: TYPE_NORMAL
- en: Common cluster access problems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section lists common issues when trying to access your EKS cluster. The
    next few sections describe common symptoms and how to fix them.
  prefs: []
  type: TYPE_NORMAL
- en: You cannot access your cluster using kubectl
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Interacting with your cluster API through **kubectl** or as part of a CI/CD
    pipeline or tool is a critical part of using EKS! Some common problems are listed
    next, along with potential solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: While the errors shown next may point to a specific problem, they may also be
    related to an issue not documented here.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the error message shown, the shell has no credentials configured as environment
    variables or as a profile in the `~/.``aws` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You may also get the following error message, which is different but means
    the same thing – the shell has no credentials configured as environment variables
    or as a profile in the `~/.``aws` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In the error message shown next, the credentials configured in the shell don’t
    have the right IAM privilege or K8s privileges:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In this error message, the most likely issue is a network connectivity issue,
    with the client having restricted network access to a private EKS cluster or with
    an IP whitelist. This error is sometimes seen if an IAM role is used without the
    relevant access:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now we’ve looked at some common cluster access problems let’s look at some typical
    Node/compute problems.
  prefs: []
  type: TYPE_NORMAL
- en: Common Node/compute problems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section lists common issues you might see with worker nodes in your EKS
    cluster, along with potential solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Node/Nodes can’t join the cluster
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this problem, what has changed, for example, a new node being added or
    an IP whitelist being changed, will determine what needs fixing. Often, the error
    is simply nodes being in a `NotReady`/`Unknown` state, shown next, which has a
    number of different root causes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: If you’re running self-managed nodes, did EC2 run the `bootstrap.sh` script?
    With a managed node, this will happen automatically, but if not, your EC2 instance
    will not register automatically.
  prefs: []
  type: TYPE_NORMAL
- en: If you have an IP whitelist on a public cluster, did you include the public
    address of your nodes or the NAT gateway to the whitelist? If not, then your nodes
    will not be able to communicate with the K8s cluster.
  prefs: []
  type: TYPE_NORMAL
- en: For a private or private/public cluster, was your worker node security group
    registered with the cluster security group? If not, then your nodes will not be
    able to communicate with the K8s cluster.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In the error message shown previously from the `kubelet` logs, the most likely
    issue is a VPC DNS issue where the VPC hasn’t been configured with DNS hostnames
    or resolution.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In the error message shown previously from the `kubelet` logs, the most likely
    issue is a networking issue where a security group, NACL, NAT gateway, or endpoint
    is misconfigured or doesn’t exist.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In the error message shown previously from the `kubelet` logs, the most likely
    issue is an IAM authentication issue where the node’s IAM role has not been added
    to the `aws-auth` config map.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In the error message shown previously from the `describe node` command, the
    most likely issue is a disk issue due to low disk space (normally due to out-of-control
    logging). Now we’ve looked at some common cluster compute problems, let’s look
    at some typical networking problems.
  prefs: []
  type: TYPE_NORMAL
- en: Common Pod networking problems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous sections, we’ve discussed networking problems in the context of
    the API/control plane and worker nodes. This section lists common issues you might
    see with pod networking in an EKS cluster, along with potential solutions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In the error message shown previously from the pod logs, the most likely issue
    is a worker (or pod) security group issue. Check that the worker security group
    is configured to allow all the needed ports, IP CIDR ranges, and other security
    groups (including itself). If you using NACLs, make sure ephemeral ports are allowed
    out, as well as any ingress ports.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In the error message shown previously from the pod logs, the most likely issue
    is a DNS issue. Make sure `clusterDNS` and `CoreDNS` are working and the VPC has
    been enabled with DNS resolution and hostnames.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In the error message shown previously from the pod logs, the most likely issue
    is a connectivity issue.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The previous error message from the `pod describe` command shows the pod stuck
    in a `ContainerCreating` status; the most likely issue is that the VPC has no
    more free IP addresses. If prefix addressing is not being used, then the EC2 instance
    type may have exhausted the number of IP addresses it can support.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In the error message shown previously from the `get pod` command, the most likely
    issue is a VPC or security group issue, which has a knock-on effect for the CNI
    or DNS operations in the pod.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In the error message from the `describe deployment` command, the most likely
    issue is a subnet has not been tagged for an internal or external load balancer
    so it cannot be discovered. Now we’ve looked at some common pod networking problems,
    let’s look at some typical workload problems.
  prefs: []
  type: TYPE_NORMAL
- en: Common workload problems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section lists common issues you might see with pods and/or deployments
    in an EKS cluster, along with potential solutions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding error message from the `kubectl describe pod` command, the
    most likely issue is a connectivity issue or a memory issue, as `OOMKilled` means
    that the pod has reached its memory limit, so it restarts. You need to increase
    the memory setting in the deployment or pod specification.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In the error message from `kubectl get po` command, there are several possible
    issues, whether from a bad DockerFile, pulling the image file, and so on. Run
    the `kubectl logs` command to get more information about what caused the error.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The error message shown previously from the `kubectl describe po` command shows
    the pod in a `Pending` status. The most likely issue is insufficient CPU available
    in your worker nodes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The `kubectl describe po` command’s error message shows the pod in a `Pending`
    status; the most likely issue is insufficient memory available in your worker
    nodes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The preceding error message from the `kubectl describe po` command shows the
    pod in a `Pending` status. The most likely issue is the container image is incorrect,
    not available, or hosted in a private repository that has not been configured
    in your worker nodes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The preceding error message from the `kubectl describe po` command shows the
    pod in a `Pending` status. The most likely issue is the pod doesn’t match a corresponding
    node toleration.This chapter won’t touch all the possible symptoms and root causes
    you will encounter with K8s/EKS but hopefully, you have enough information to
    cover the common problems you will encounter.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we looked at tools and techniques for troubleshooting EKS and
    common problems you may encounter. We’ll now revisit the key learning points from
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we started by looking at a general approach to troubleshooting
    EKS clusters and some common tools that can be used to determine what has changed
    and the scope/impact of the problem.
  prefs: []
  type: TYPE_NORMAL
- en: We then moved on to common problems/symptoms you may encounter in connecting
    to your EKS cluster, compute nodes, pod networking, and workloads and used **kubectl**
    commands to identify these issues and provide some possible resolutions.
  prefs: []
  type: TYPE_NORMAL
- en: This is the final chapter and by now, you should have all the knowledge required
    to build and manage EKS clusters and the workloads that run on them.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations on completing this book! We hope you have found it informative
    and useful.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Debugging K8s Tools:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.cncf.io/blog/2022/09/15/10-critical-kubernetes-tools-and-how-to-debug-them/](https://www.cncf.io/blog/2022/09/15/10-critical-kubernetes-tools-and-how-to-debug-them/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'EKS official troubleshooting guide:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.aws.amazon.com/eks/latest/userguide/troubleshooting.html](https://docs.aws.amazon.com/eks/latest/userguide/troubleshooting.html)'
  prefs: []
  type: TYPE_NORMAL

["```\ntoken,user,uid,\"group1,group2,group3\" \n```", "```\n# /etc/kubernetes/manifests/kube-apiserver.yaml\n...<removed for brevity>...\nspec:\n  containers:\n  - command:\n    - kube-apiserver\n    - --advertise-address=192.168.59.154\n    - --allow-privileged=true\n    - --authorization-mode=Node,RBAC\n    **-****--token-auth-file=/etc/kubernetes/user-tokens.csv**\n    - --client-ca-file=/var/lib/minikube/certs/ca.crt\n...<removed for brevity>... \n```", "```\nAuthorization: Bearer <token> \n```", "```\n$ kubectl config set-credentials <contextUser> --token=<token> \n```", "```\n    # 01_serviceaccount/example-sa-ns.yaml\n    ---\n    apiVersion: v1\n    kind: Namespace\n    metadata:\n      name: example-ns\n    ---\n    apiVersion: v1\n    kind: ServiceAccount\n    metadata:\n      name: example-sa\n      namespace: example-ns \n    ```", "```\n    # 01_serviceaccount/pod-reader-role.yaml\n    apiVersion: rbac.authorization.k8s.io/v1\n    kind: Role\n    metadata:\n      namespace: example-ns\n      name: pod-reader\n    rules:\n      - apiGroups: [\"\"]\n        resources: [\"pods\"]\n        verbs: [\"get\", \"watch\", \"list\"] \n    ```", "```\n    # 01_serviceaccount/read-pods-rolebinding.yaml\n    apiVersion: rbac.authorization.k8s.io/v1\n    kind: RoleBinding\n    metadata:\n      name: read-pods\n      namespace: example-ns\n    subjects:\n      - kind: ServiceAccount\n        name: example-sa\n        namespace: example-ns\n    roleRef:\n      kind: Role\n      name: pod-reader\n      apiGroup: rbac.authorization.k8s.io \n    ```", "```\n    $ kubectl apply -f 01_serviceaccount/\n    namespace/example-ns created\n    serviceaccount/example-sa created\n    role.rbac.authorization.k8s.io/pod-reader created\n    rolebinding.rbac.authorization.k8s.io/read-pods created \n    ```", "```\n    $ kubectl create token example-sa -n example-ns \n    ```", "```\n    $ kubectl config set-credentials example-sa --token=<your-token>\n    User \"example-sa\" set. \n    ```", "```\n    $ kubectl config set-context <new-context-name> --user=<new-user-created --cluster=<clusterName> \n    ```", "```\n$ kubectl config set-context example-sa-context --user=example-sa --cluster=minikube\nContext \"example-sa-context\" created. \n```", "```\n    $ cp references/sa-demo-nginx-pod.yaml 01_serviceaccount/nginx-pod.yaml\n    $ kubectl apply -f 01_serviceaccount/nginx-pod.yaml\n    pod/nginx-pod created\n    $  kubectl get po -n example-ns\n    NAME        READY   STATUS    RESTARTS   AGE\n    nginx-pod   1/1     Running   0          12m \n    ```", "```\n    $ kubectl config current-context\n    minikube \n    ```", "```\n    $ kubectl config use-context example-sa-context\n    Switched to context \"example-sa-context\". \n    ```", "```\n    $ kubectl auth whoami\n    ATTRIBUTE                                           VALUE\n    Username                                            system:serviceaccount:example-ns:example-sa\n    UID                                                 ebc5554b-306f-48fe-b9d7-3e5777fabf06\n    Groups                                              [system:serviceaccounts system:serviceaccounts:example-ns system:authenticated]\n    Extra: authentication.kubernetes.io/credential-id   [JTI=45dc861c-1024-4857-a694-00a5d2eeba5f] \n    ```", "```\n    $ kubectl get po -n example-ns\n    NAME        READY   STATUS    RESTARTS   AGE\n    nginx-pod   1/1     Running   0          18m \n    ```", "```\n    $ kubectl get pods -n kube-system\n    Error from server (Forbidden): pods is forbidden: User \"system:serviceaccount:example-ns:example-sa\" cannot list resource \"pods\" in API group \"\" in the namespace \"kube-system\" \n    ```", "```\n    $ kubectl get svc -n example-ns\n    Error from server (Forbidden): services is forbidden: User \"system:serviceaccount:example-ns:example-sa\" cannot list resource \"services\" in API group \"\" in the namespace \"example-ns\" \n    ```", "```\n    # /etc/kubernetes/manifests/kube-apiserver.yaml\n    ...<removed for brevity>...\n    spec:\n      containers:\n      - command:\n        - kube-apiserver\n        - --advertise-address=192.168.59.154\n        - --allow-privileged=true\n        - --authorization-mode=Node,RBAC\n        **-****--client-ca-file=/var/lib/minikube/certs/ca.crt**\n    ...<removed for brevity>... \n    ```", "```\n    $ kubectl config view -o json | jq '.users[]'\n    {\n      \"name\": \"example-sa\",\n      \"user\": {\n        \"token\": \"REDACTED\"\n      }\n    }\n    {\n      \"name\": \"minikube\",\n      \"user\": {\n        \"client-certificate\": \"/home/iamgini/.minikube/profiles/minikube/client.crt\",\n        \"client-key\": \"/home/iamgini/.minikube/profiles/minikube/client.key\"\n      }\n    } \n    ```", "```\n    $ openssl genrsa -out iamgini.key 2048 \n    ```", "```\n    $ openssl req -new -key iamgini.key -out iamgini.csr -subj \"/CN=iamgini/O=web1/O=frontend\" \n    ```", "```\n    $ cat iamgini.csr | base64 -w 0 \n    ```", "```\n    # csr.yaml\n    apiVersion: certificates.k8s.io/v1\n    kind: CertificateSigningRequest\n    metadata:\n      name: iamgini\n    spec:\n      request: <**your****encoded****CSR****content****here****from****Step.3>**\n      signerName: kubernetes.io/kube-apiserver-client\n      usages:\n        - client auth \n    ```", "```\n    $ kubectl apply -f csr.yaml\n    certificatesigningrequest.certificates.k8s.io/iamgini created \n    ```", "```\n    $ kubectl get csr\n    NAME      AGE   SIGNERNAME                            REQUESTOR       REQUESTEDDURATION   CONDITION\n    iamgini   25s   kubernetes.io/kube-apiserver-client   minikube-user   <none>              Pending \n    ```", "```\n    $ kubectl certificate approve iamgini\n    certificatesigningrequest.certificates.k8s.io/iamgini approved \n    ```", "```\n    $ kubectl get csr iamgini -o json | jq -r '.status.certificate' | base64 --decode > iamgini.crt \n    ```", "```\n    $ ls iamgini.*\n    iamgini.crt  iamgini.csr  iamgini.key \n    ```", "```\n    $ kubectl config set-credentials iamgini --client-key=/full-path/iamgini.key --client-certificate=/full-path/iamgini.crt\n    User \"iamgini\" set. \n    ```", "```\n    $ kubectl config set-context iamgini --cluster=minikube --user=iamgini\n    Context \"iamgini\" created. \n    ```", "```\n    $ kubectl config use-context iamgini\n    Switched to context \"iamgini\". \n    ```", "```\n    $ kubectl auth whoami\n    ATTRIBUTE   VALUE\n    Username    iamgini\n    Groups      [web1 frontend system:authenticated] \n    ```", "```\n# /etc/kubernetes/manifests/kube-apiserver.yaml\n...<removed for brevity>...\nspec:\n  containers:\n  - command:\n    - kube-apiserver\n    - --advertise-address=192.168.59.154\n    - --allow-privileged=true\n    **-****--authorization-mode=Node,RBAC**\n...<removed for brevity>... \n```", "```\n    # 02_rbac/rbac-demo-ns.yaml\n    ---\n    apiVersion: v1\n    kind: Namespace\n    metadata:\n      name: rbac-demo-ns \n    ```", "```\n$ kubectl apply -f 02_rbac/rbac-demo-ns.yaml\nnamespace/rbac-demo-ns created \n```", "```\n    $  kubectl apply -f 02_rbac/nginx-pod.yaml\n    pod/nginx-pod created \n    ```", "```\n    # 02_rbac/pod-logger-serviceaccount.yaml\n    apiVersion: v1\n    kind: ServiceAccount\n    metadata:\n      name: pod-logger\n      namespace: rbac-demo-ns \n    ```", "```\n$ kubectl apply -f 02_rbac/pod-logger-serviceaccount.yaml\nserviceaccount/pod-logger created \n```", "```\n    # 02_rbac/pod-reader-role.yaml\n    apiVersion: rbac.authorization.k8s.io/v1\n    kind: Role\n    metadata:\n      namespace: rbac-demo-ns\n      name: pod-reader\n    rules:\n      - apiGroups: [\"\"]\n        resources: [\"pods\"]\n        verbs: [\"get\", \"watch\", \"list\"] \n    ```", "```\n    $ kubectl apply -f 02_rbac/pod-reader-role.yaml\n    role.rbac.authorization.k8s.io/pod-reader created \n    ```", "```\n    # 02_rbac/pod-logger-app.yaml\n    apiVersion: v1\n    kind: Pod\n    metadata:\n      name: pod-logger-app\n      namespace: rbac-demo-ns\n    spec:\n      serviceAccountName: pod-logger\n      containers:\n        - name: logger\n          image: quay.io/iamgini/k8sutils:debian12\n          command:\n            - /bin/sh\n            - -c\n            - |\n              SERVICEACCOUNT=/var/run/secrets/kubernetes.io/serviceaccount\n              TOKEN=$(cat ${SERVICEACCOUNT}/token)\n              while true\n              do\n                echo \"Querying Kubernetes API Server for Pods in default namespace...\"\n                curl --cacert $SERVICEACCOUNT/ca.crt --header \"Authorization: Bearer $TOKEN\" -X GET https://kubernetes.default.svc.cluster.local/api/v1/namespaces/**rbac-demo-ns**/pods\n                sleep 10\n              done \n    ```", "```\n    $ kubectl apply -f 02_rbac/pod-logger-app.yaml\n    pod/pod-logger-app created\n    $ kubectl get po -n rbac-demo-ns\n    NAME             READY   STATUS    RESTARTS   AGE\n    nginx-pod        1/1     Running   0          15m\n    pod-logger-app   1/1     Running   0          9s \n    ```", "```\n    $ kubectl exec -it -n rbac-demo-ns pod-logger-app -- bash\n    root@pod-logger-app:/# ls -l /var/run/secrets/kubernetes.io/serviceaccount/\n    total 0\n    lrwxrwxrwx 1 root root 13 Jul 14 03:33 ca.crt -> ..data/ca.crt\n    lrwxrwxrwx 1 root root 16 Jul 14 03:33 namespace -> ..data/namespace\n    lrwxrwxrwx 1 root root 12 Jul 14 03:33 token -> ..data/token \n    ```", "```\n    $ kubectl logs -n rbac-demo-ns pod-logger-app -f\n    Querying Kubernetes API Server for Pods in rbac-demo-ns namespace...\n      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                     Dload  Upload   Total   Spent    Left  Speed\n    100   336  100   336    0     0  25611      0 --:--:-- --:--:-- --:--:-- 25846\n    {\n      \"kind\": \"Status\",\n      \"apiVersion\": \"v1\",\n      \"metadata\": {},\n      \"status\": \"Failure\",\n      \"message\": \"pods is forbidden: User \\\"system:serviceaccount:rbac-demo-ns:pod-logger\\\" cannot list resource \\\"pods\\\" in API group \\\"\\\" in the namespace \\\"rbac-demo-ns\\\"\",\n      \"reason\": \"Forbidden\",\n      \"details\": {\n        \"kind\": \"pods\"\n      },\n      \"code\": 403\n    } \n    ```", "```\n    # 02_rbac/read-pods-rolebinding.yaml\n    apiVersion: rbac.authorization.k8s.io/v1\n    kind: RoleBinding\n    metadata:\n      name: read-pods\n      namespace: rbac-demo-ns\n    subjects:\n    - kind: ServiceAccount\n      name: pod-logger\n      namespace: rbac-demo-ns\n    roleRef:\n      kind: Role\n      name: pod-reader\n      apiGroup: rbac.authorization.k8s.io \n    ```", "```\n    $ kubectl apply -f 02_rbac/read-pods-rolebinding.yaml\n    rolebinding.rbac.authorization.k8s.io/read-pods created \n    ```", "```\n    $ kubectl logs -n rbac-demo-ns pod-logger-app -f\n    ...<removed for brevity>...\n    Querying Kubernetes API Server for Pods in default namespace...\n      % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                     Dload  Upload   Total   Spent    Left  Speed\n    {\n      \"kind\": \"PodList\",\n      \"apiVersion\": \"v1\",\n      \"metadata\": {\n        \"resourceVersion\": \"4889\"\n      },\n      \"items\": [\n        {\n          \"metadata\": {\n            \"name\": \"nginx-pod\",\n            \"namespace\": \"rbac-demo-ns\",\n            \"uid\": \"b62b2bdb-2677-4809-a134-9d6cfa07ecad\",\n    ...<removed for brevity>... \n    ```", "```\n    $ kubectl delete rolebinding read-pods -n rbac-demo-ns \n    ```", "```\n$ minikube ssh 'sudo grep -- '--enable-admission-plugins' /etc/kubernetes/manifests/kube-apiserver.yaml'\n    - --enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota \n```", "```\nkube-apiserver --disable-admission-plugins=PodNodeSelector,AlwaysDeny ... \n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: my-app\nspec:\n  containers:\n  - name: app-container\n    securityContext:\n      runAsUser: 1000  # Run container processes as user ID 1000\n      runAsGroup: 1000 # Run container processes as group ID 1000 \n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: privileged-container\nspec:\n  containers:\n  - name: app-container\n    securityContext:\n      capabilities:\n        add:\n          - CAP_NET_ADMIN  # Grant network management capabilities \n```", "```\nprivileged mode securityContext:\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: privileged-container\nspec:\n  containers:\n  - name: app-container\n    securityContext:\n      privileged: true  # Run container in privileged mode (use cautiously) \n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: read-only-container\nspec:\n  containers:\n  - name: app-container\n    securityContext:\n      **readOnlyRootFilesystem:****true**  # Mount root filesystem as read-only \n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: my-pod\nspec:\n  securityContext:\n    runAsUser: 1000  # All containers in the pod run as user ID 1000\n    runAsGroup: 1000 # All containers in the pod run as group ID 1000\n  containers:\n  - name: app-container\n    image: my-app-image\n  - name: sidecar-container\n    image: my-sidecar-image \n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: my-pod\nspec:\n  containers:\n  - name: app-container\n    image: my-app-image\n    securityContext:\n      runAsUser: 1000  # This container runs as user ID 1000\n      capabilities:\n        add: [\"CAP_NET_ADMIN\"]  # Grant specific capabilities\n  - name: sidecar-container\n    image: my-sidecar-image\n    securityContext:\n      runAsUser: 2000  # This container runs as user ID 2000\n      readOnlyRootFilesystem: true  # This container has a read-only root filesystem \n```", "```\n# pod-with-security-context.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: security-context-demo\nspec:\n  containers:\n    - name: app-container\n      image: nginx:latest\n      securityContext:\n        runAsUser: 1000                # Run container processes as user ID 1000\n        runAsGroup: 1000               # Run container processes as group ID 1000\n        readOnlyRootFilesystem: true   # Mount the root filesystem as read-only\n      volumeMounts:\n        - name: html-volume\n          mountPath: /usr/share/nginx/html\n  volumes:\n    - name: html-volume\n      emptyDir: {}                     # Volume to provide writable space \n```", "```\n$ kubectl apply -f pod-with-security-context.yaml\npod/security-context-demo created \n```", "```\n$ kubectl exec -it security-context-demo -- /bin/sh\n~ $ id\nuid=1000 gid=1000 groups=1000\n~ $ touch /testfile\ntouch: /testfile: Read-only file system \n```", "```\n$ minikube start --network-plugin=cni --cni=calico --container-runtime=containerd \n```", "```\n# web1-app.yaml\n---\napiVersion: v1\nkind: Namespace\nmetadata:\n  labels:\n    project: web1\n  name: web1\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx1\n  namespace: web1\n  labels:\n    app: nginx1\nspec:\n  containers:\n    - name: nginx1\n      image: nginx \n```", "```\n# web2-app.yaml\n---\napiVersion: v1\nkind: Namespace\nmetadata:\n  labels:\n    project: web2\n  name: web2\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx2\n  namespace: web2\n  labels:\n    app: nginx2\nspec:\n  containers:\n    - name: nginx2\n      image: nginx \n```", "```\n$ kubectl apply -f web-app1.yaml\nnamespace/web1 created\npod/nginx1 created\n$ kubectl apply -f web-app2.yaml\nnamespace/web2 created\npod/nginx2 created\n$ kubectl get po -o wide -n web1\nNAME     READY   STATUS    RESTARTS   AGE   IP              NODE       NOMINATED NODE   READINESS GATES\nnginx1   1/1     Running   0          3m    10.244.120.71   minikube   <none>           <none>\n$ kubectl get po -o wide -n web2\nNAME     READY   STATUS    RESTARTS   AGE     IP              NODE       NOMINATED NODE   READINESS GATES\nnginx2   1/1     Running   0          2m53s   10.244.120.72   minikube   <none>           <none> \n```", "```\n$ kubectl -n web1 exec nginx1 -- curl 10.244.120.72\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   615  100   615    0     0   698k      0 --:--:-- --:--:-- --:--:--  600k\n<!DOCTYPE html>\n<html>\n<head>\n<title>Welcome to nginx!</title>\n...<removed for brevity>... \n```", "```\n# default-deny-ingress.yaml\n---\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: default-deny-ingress\nspec:\n  podSelector: {}\n  policyTypes:\n    - Ingress\n  ingress: [] \n```", "```\n$ kubectl apply -f default-deny-ingress.yaml -n web2\nnetworkpolicy.networking.k8s.io/default-deny-ingress created \n```", "```\n$ kubectl -n web1 exec nginx1 -- curl 10.244.120.72\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n  0     0    0     0    0     0      0      0 --:--:--  0:02:15 --:--:--     0\ncurl: (28) Failed to connect to 10.244.120.72 port 80 after 135435 ms: Couldn't connect to server\ncommand terminated with exit code 28 \n```", "```\n# allow-from-web1-netpol.yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-from-web1-netpol\n  namespace: web2\nspec:\n  podSelector:\n    matchLabels:\n      app: nginx2\n  policyTypes:\n    - Ingress\n  ingress:\n    - from:\n        - namespaceSelector:\n            matchLabels:\n              project: web1\n        - podSelector:\n            matchLabels:\n              app: nginx1\n      ports:\n        - protocol: TCP\n          port: 80 \n```", "```\n$ kubectl apply -f nginx2-networkpolicy.yaml\nnetworkpolicy.networking.k8s.io/nginx2-networkpolicy created \n```", "```\n$ kubectl -n web1 exec nginx1 -- curl 10.244.120.72\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   615  100   615    0     0  1280k      0 --:--:-- --:--:-- --:--:--  600k\n<!DOCTYPE html>\n<html>\n<head>\n<title>Welcome to nginx!</title>\n...<removed for brevity>... \n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: secure-pod\nspec:\n  runtimeClassName: kata-containers  # Specifies Kata Containers runtime\n  containers:\n  - name: my-app\n    image: my-secure-image \n```", "```\n$ kubectl create secret docker-registry my-registry-secret \\\n  --docker-server=your-registry.com \\\n  --docker-username=your_username \\\n  --docker-password=your_password \\\n  --docker-email=your-email@example.com \n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: my-pod\nspec:\n  containers:\n  - name: my-container\n    image: your-registry.com/your-image:tag\n  imagePullSecrets:\n  - name: my-registry-secret \n```"]
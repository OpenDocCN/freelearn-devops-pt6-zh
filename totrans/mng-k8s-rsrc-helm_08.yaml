- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Publishing to a Helm Chart Repository
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布到Helm图表存储库
- en: '**Helm** could not be regarded as the package manager for **Kubernetes** without
    the concept of a **Helm chart repository**. Repositories are used to publish Helm
    charts to the community. In this chapter, we will understand different methods
    of creating a Helm chart repository. Later, we will get hands-on practice with
    different repository implementations by publishing our Guestbook Helm chart to
    an HTTP-based repository and an OCI registry.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**Helm**如果没有**Helm chart repository**的概念，不能被视为**Kubernetes**的包管理工具。存储库用于将Helm图表发布到社区。在本章中，我们将了解创建Helm图表存储库的不同方法。随后，我们将通过将我们的Guestbook
    Helm图表发布到基于HTTP的存储库和OCI注册表，进行不同存储库实现的实践操作。'
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涉及以下主题：
- en: Understanding Helm chart repositories
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Helm图表存储库
- en: Publishing to an HTTP repository
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布到HTTP存储库
- en: Publishing to an OCI registry
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布到OCI注册表
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: For this chapter, you will need a GitHub account. If you already have a GitHub
    account, you can log in at [https://github.com/login](https://github.com/login).
    Otherwise, you can create a new account at [https://github.com/join](https://github.com/join).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章内容，您需要一个GitHub账户。如果您已有GitHub账户，可以在[https://github.com/login](https://github.com/login)登录。否则，您可以在[https://github.com/join](https://github.com/join)创建一个新账户。
- en: 'You should also clone the Packt Git repository locally:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 您还应该将Packt Git存储库克隆到本地：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: To begin, let’s understand the basics of a Helm chart repository.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们了解Helm图表存储库的基本概念。
- en: Understanding Helm chart repositories
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Helm图表存储库
- en: Helm chart repositories are used for publishing Helm charts and making them
    available to a wide community of Helm users. This is conceptually similar to the
    repositories that are used in Linux package management, such as RPM or Debian
    repositories, in which packages are installed using tools such as `dnf` or `apt-get`.
    Public Helm chart repositories can be found at Artifact Hub ([https://artifacthub.io](https://artifacthub.io)).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Helm图表存储库用于发布Helm图表，并使其对广泛的Helm用户社区可用。这在概念上类似于Linux包管理中使用的存储库，如RPM或Debian存储库，包通过`dnf`或`apt-get`等工具进行安装。公共Helm图表存储库可以在Artifact
    Hub上找到([https://artifacthub.io](https://artifacthub.io))。
- en: 'A Helm chart repository is created using one of two high-level implementations:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Helm图表存储库是通过两种高层次实现之一创建的：
- en: An HTTP server
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个HTTP服务器
- en: An OCI registry
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个OCI注册表
- en: Using an HTTP server is the most common implementation for publishing charts
    since it has been in supported the longest. To create a Helm chart repository
    using an HTTP server, you can use tools such as **Apache httpd**, **NGINX,** **Amazon
    S3**, and **GitHub Pages**. **ChartMuseum** ([https://github.com/helm/chartmuseum](https://github.com/helm/chartmuseum))
    is another popular option as it provides an API for more advanced operations.
    In the *Publishing to an HTTP repository* section, we will use GitHub Pages to
    create our repository.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使用HTTP服务器是发布图表的最常见实现方式，因为它是支持时间最长的。要使用HTTP服务器创建Helm图表存储库，可以使用如**Apache httpd**、**NGINX**、**Amazon
    S3**和**GitHub Pages**等工具。**ChartMuseum**([https://github.com/helm/chartmuseum](https://github.com/helm/chartmuseum))是另一个受欢迎的选择，因为它提供了一个API来执行更高级的操作。在*发布到HTTP存储库*部分，我们将使用GitHub
    Pages来创建我们的存储库。
- en: 'A repository that’s been created using an HTTP server must consist of the following
    components:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用HTTP服务器创建的存储库必须包含以下组件：
- en: Helm charts, packaged as `.tgz` archives
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打包为`.tgz`归档的Helm图表
- en: An `index.yaml` file, containing metadata about the charts contained in the
    repository
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`index.yaml`文件，包含有关存储库中图表的元数据。
- en: Basic chart repositories require maintainers to generate `index.yaml` files
    using the `helm repo index` command, which we will explore later, but more advanced
    solutions such as ChartMuseum can automatically generate the `index.yaml` file
    when new charts are uploaded to the repository.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 基本的图表存储库要求维护者使用`helm repo index`命令生成`index.yaml`文件，稍后我们将探讨这个命令，但更高级的解决方案，如ChartMuseum，可以在新图表上传到存储库时自动生成`index.yaml`文件。
- en: Besides HTTP, the other type of repository a Helm chart maintainer can distribute
    charts to is an **Open Container Initiative** (**OCI**) registry. OCI is an open
    governance structure for creating open standards for container runtimes and formats.
    Artifacts is an OCI initiative that allows you to store and serve additional content,
    such as Helm charts, within container registries aside from container images.
    Since images and their registries are already a fundamental construct in both
    Kubernetes and Helm, the ability to leverage the same registry to store both container
    images and Helm charts reduces the amount of effort needed by Helm maintainers
    to publish charts. We will explore publishing Helm charts using OCI registries
    in greater detail in the *Publishing to an OCI registry* section.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 HTTP 之外，Helm chart 维护者可以将 chart 发布到的另一个类型的仓库是 **开放容器倡议**（**OCI**）注册表。OCI
    是一个开放治理结构，用于创建容器运行时和格式的开放标准。Artifacts 是一个 OCI 项目，允许你在容器注册表中存储和提供额外的内容，如 Helm charts，除了容器镜像之外。由于镜像及其注册表已成为
    Kubernetes 和 Helm 中的基本构件，因此能够利用同一个注册表存储容器镜像和 Helm charts，减少了 Helm 维护者发布 charts
    所需的工作量。我们将在 *发布到 OCI 注册表* 部分更详细地探讨如何使用 OCI 注册表发布 Helm charts。
- en: In the next section, we’ll publish our Guestbook Helm chart to GitHub Pages.
    Here, you will get an understanding of how a basic Helm chart repository is created
    and interacted with.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将把我们的 Guestbook Helm chart 发布到 GitHub Pages。在这里，你将了解如何创建和交互操作一个基础的
    Helm chart 仓库。
- en: Publishing to an HTTP repository
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布到 HTTP 仓库
- en: GitHub Pages is a feature within GitHub that allows you to serve static content
    from a repository. In this section, we’ll create a new GitHub repository with
    Pages enabled to publish our Guestbook Helm chart.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Pages 是 GitHub 中的一个功能，允许你从一个仓库提供静态内容。在这一部分，我们将创建一个启用了 Pages 的新 GitHub
    仓库，以发布我们的 Guestbook Helm chart。
- en: To follow the example in this section, you must have a GitHub account. Directions
    for creating a GitHub account or logging into an existing one were provided in
    the *Technical requirements* section.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本节的示例，你必须拥有一个 GitHub 账户。创建 GitHub 账户或登录现有账户的步骤已在 *技术要求* 部分提供。
- en: Once you are logged into GitHub, continue to the next section to create your
    repository.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你登录到 GitHub，继续到下一个部分来创建你的仓库。
- en: Creating a GitHub Pages repository
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个 GitHub Pages 仓库
- en: 'Follow these steps to create a GitHub Pages repository:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建一个 GitHub Pages 仓库：
- en: Go to [https://github.com/new](https://github.com/new) and access the **Create
    a new repository** page.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 [https://github.com/new](https://github.com/new)，进入 **创建新仓库** 页面。
- en: Provide a name for your chart repository. We suggest `Chart-Repository-Example`.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为你的 chart 仓库提供一个名称。我们建议使用 `Chart-Repository-Example`。
- en: Select the checkbox next to **Initialize this repository with a README**. This
    is required because GitHub does not allow you to create a static site if it does
    not contain any content. You can leave the rest of the settings at their default
    values. Note that to leverage GitHub Pages, you must leave the privacy setting
    set to **Public** unless you have a paid GitHub Pro account.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选中 **初始化这个仓库并添加 README** 复选框。这是必需的，因为如果仓库中没有任何内容，GitHub 不允许你创建静态网站。你可以将其余设置保留为默认值。请注意，为了使用
    GitHub Pages，除非你拥有付费的 GitHub Pro 账户，否则必须将隐私设置保持为 **公开**。
- en: 'Your **Create a new repository** page should now look as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你的 **创建新仓库** 页面现在应该如下所示：
- en: '![Figure 8.1 – Creating a new GitHub repository'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.1 – 创建一个新的 GitHub 仓库]'
- en: '](img/Figure_8.01_B17979.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.01_B17979.jpg)'
- en: Figure 8.1 – Creating a new GitHub repository
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.1 – 创建一个新的 GitHub 仓库
- en: Click the **Create repository** button to create your repository.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **创建仓库** 按钮以创建你的仓库。
- en: Although your repository has been created, it is not ready to serve Helm charts
    until GitHub Pages is enabled.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你的仓库已经创建，但在启用 GitHub Pages 之前，它不能用于提供 Helm charts。
- en: Click the **Settings** tab within your repository to access your repository
    settings. From there, select the **Pages** tab from the left-hand column. Then,
    under **Source**, select the **main** option from the drop-down list. Finally,
    click the **Save** button. This will instruct GitHub to create a static site that
    serves the contents of your main branch.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击仓库中的 **设置** 选项卡以访问仓库设置。从那里，选择左侧栏中的 **Pages** 选项卡。然后，在 **源** 下拉列表中，选择 **main**
    选项。最后，点击 **保存** 按钮。这将指示 GitHub 创建一个静态网站，提供你的主分支内容。
- en: 'At this point, your screen should look similar to the following:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你的界面应该类似于以下内容：
- en: '![Figure 8.2 – Finding GitHub Pages settings'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.2 – 查找 GitHub Pages 设置'
- en: '](img/Figure_8.02_B17979.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.02_B17979.jpg)'
- en: Figure 8.2 – Finding GitHub Pages settings
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.2 – 查找 GitHub Pages 设置
- en: 'Now that you have configured your GitHub repository, you should clone it to
    your local machine so that you can add the Guestbook Helm chart to it later. Follow
    these steps to clone your repository:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经配置了 GitHub 仓库，应该将其克隆到本地机器，以便稍后将 Guestbook Helm 图表添加到其中。按照以下步骤克隆仓库：
- en: Navigate to the root of your repository by selecting the **Code** tab at the
    top of the page.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择页面顶部的 **Code** 标签，导航到仓库的根目录。
- en: 'Select the green **Clone or download** button. This will reveal the URI to
    your GitHub repository (note that this is not the same as the URL for the static
    site). You can use the following screenshot as a reference to find your repository
    URI:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择绿色的**Clone or download**按钮。点击后会显示你的 GitHub 仓库的 URI（请注意，这与静态网站的 URL 不同）。你可以参考以下截图来找到你的仓库
    URI：
- en: '![Figure 8.3 – Locating the git URI'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.3 – 查找 git URI'
- en: '](img/Figure_8.03_B17979.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.03_B17979.jpg)'
- en: Figure 8.3 – Locating the git URI
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.3 – 查找 git URI
- en: 'Once you have acquired your repository’s URI, clone the repository to your
    local machine. You may want to ensure you are in your home directory first before
    you clone to ensure you do not accidentally clone to an existing git repo:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你获得了仓库的 URI，克隆该仓库到你的本地机器。你可能希望确保首先进入你的主目录，以避免不小心克隆到一个已有的 git 仓库：
- en: '[PRE1]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now that you have cloned the repository, you can publish your Guestbook chart.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经克隆了仓库，你可以发布你的 Guestbook 图表。
- en: Publishing the Guestbook chart
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发布 Guestbook 图表
- en: 'Publishing a Helm chart to an HTTP repository consists of a three-step process:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Helm 图表发布到 HTTP 仓库包括三个步骤：
- en: Packaging the Helm chart as a `.tgz` archive
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 Helm 图表打包成 `.tgz` 压缩包
- en: Generating an `index.yaml` file
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成 `index.yaml` 文件
- en: Uploading the `.tgz` archive and the `index.yaml` file to the server
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `.tgz` 压缩包和 `index.yaml` 文件上传到服务器
- en: Helm provides several different commands to make the publishing process a simple
    task. We’ll walk through these commands in this section.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Helm 提供了几个不同的命令来简化发布过程。我们将在本节中讲解这些命令。
- en: 'First, you can use the `helm package` command to package your chart into a
    `.tgz` archive. We’ll use the Guestbook chart located in the Packt Git repository
    at `chapter8/guestbook` as part of this example:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你可以使用 `helm package` 命令将图表打包成 `.tgz` 压缩包。我们将使用位于 Packt Git 仓库 `chapter8/guestbook`
    的 Guestbook 图表作为此示例的一部分：
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If these commands execute successfully, a file called `guestbook-0.1.0.tgz`
    will be created.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这些命令成功执行，将会创建一个名为 `guestbook-0.1.0.tgz` 的文件。
- en: 'Note that we executed the `helm dependency update` command before running `helm
    package`. This is because the Guestbook chart must have the dependencies downloaded
    first to be included in the archive. To simplify this, we could have combined
    the previous two commands into a single step by providing an additional flag to
    the `helm package` command:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在运行 `helm package` 之前执行了 `helm dependency update` 命令。这是因为 Guestbook 图表必须先下载依赖项才能包含在归档文件中。为了简化这一过程，我们可以通过为
    `helm package` 命令提供额外的标志，将前两个命令合并为一个步骤：
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This would ensure that the dependencies are included in the final package.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这将确保依赖项被包含在最终的包中。
- en: 'Once your chart has been packaged, the resulting `.tgz` file should be copied
    to your local GitHub Pages repository clone. This can be done by using the `cp`
    command:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的图表被打包，生成的 `.tgz` 文件应当被复制到本地的 GitHub Pages 仓库克隆中。可以通过使用 `cp` 命令来完成此操作：
- en: '[PRE4]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'When this file is copied, you can use the `helm repo index` command to generate
    the `index.yaml` file. This command takes the location of your chart repository
    clone as an argument. Run the following command to generate your `index.yaml`
    file:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当复制此文件时，你可以使用 `helm repo index` 命令生成 `index.yaml` 文件。该命令需要你的图表仓库克隆的位置作为参数。运行以下命令生成
    `index.yaml` 文件：
- en: '[PRE5]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The command will succeed quietly, but you will see the new `index.yaml` file
    inside your GitHub Pages clone. The contents of this file provide the Guestbook
    chart metadata and will look as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 命令会静默成功执行，但你会在 GitHub Pages 克隆目录中看到新的 `index.yaml` 文件。该文件的内容提供了 Guestbook 图表的元数据，内容如下：
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If additional charts were added to this repository, their metadata would be
    listed in this file as well.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果该仓库中添加了其他图表，它们的元数据也将列在此文件中。
- en: 'Your Helm chart repository should now contain the `.tgz` archive and the `index.yaml`
    file, with the contents listed similar to the output from the following command:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To finish the publishing process, you should commit and push these files to
    GitHub using the following commands:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Once you have pushed to the remote repository, your Guestbook Helm chart will
    be served from the GitHub Pages static site. We can verify this is working properly
    by adding our repository and performing a search.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: 'First, find your GitHub Pages site URL. This URL was displayed in the `https://<github
    username>.github.io/Chart-Repository-Example/`. Once you have identified the URL,
    use it to add the chart repository:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This command will allow Helm to interact with your repository. You can verify
    that your chart was published successfully by searching for the Guestbook chart
    against your locally configured repos. This can be done by running the following
    command:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You should find the example Guestbook chart that was returned in the search
    output.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You have published the Guestbook chart to your Helm chart repository.
    Note that while we have published our chart to an unauthenticated repository in
    this chapter, we will explore authentication and security in detail in [*Chapter
    12*](B17979_12.xhtml#_idTextAnchor270), *Helm Security Considerations*.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will explore OCI registry support and publish our Guestbook
    chart to a container registry.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: Publishing to an OCI registry
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Publishing a Helm chart to an OCI registry follows a similar workflow to the
    one you would follow when working with a standard container image. Commands such
    as `docker login`, `docker pull`, and `docker push` have analogous commands in
    Helm. These commands and their descriptions can be seen in the following table:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '| **Command** | **Description** |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
- en: '| `helm registry login` | Log in to a registry |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
- en: '| `helm registry logout` | Log out of a registry |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
- en: '| `helm push` | Push a packaged chart to a registry |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
- en: '| `helm pull` | Pull a chart from a registry |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
- en: Table 8.1 – Helm commands for OCI management
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that full support for OCI-based charts became available in version 3.8.0\.
    Before this version, it was included as an experimental feature and required an
    environment variable to be present to activate the feature. If you are using a
    version older than 3.8.0, the `HELM_EXPERIMENTAL_OCI=1` environment variable must
    be set, as shown here:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The `helm pull` command is just one example where OCI-based charts can be used
    interchangeably with charts sourced from different locations (such as an HTTP
    repository or a local filesystem). Other Helm commands that can be used in this
    manner include the following:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '`helm show`'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`helm template`'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`helm install`'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`helm upgrade`'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OCI-based charts can be differentiated from other sources by specifying the
    OCI protocol (`oci://`) as part of a chart’s location. For example, a chart sourced
    from a registry at `localhost:5000/helm-charts/mychart` is referenced in Helm
    as `oci://localhost:5000/helm-charts/mychart`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 基于OCI的图表可以通过在图表位置中指定OCI协议（`oci://`）来与其他来源区分。例如，源自注册表`localhost:5000/helm-charts/mychart`的图表，在Helm中被引用为`oci://localhost:5000/helm-charts/mychart`。
- en: It is also important to note that while OCI artifacts can be served within the
    same registry alongside container images, not every registry fully supports the
    OCI artifact specification, so it cannot store OCI-based helm charts. Consult
    the documentation of the registry distribution beforehand.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要注意的是，虽然OCI制品可以与容器镜像一起存储在同一注册表中，但并非每个注册表都完全支持OCI制品规范，因此无法存储基于OCI的Helm图表。请事先查阅注册表分发的文档。
- en: To demonstrate how to interact with OCI-based helm charts, we can use the Guestbook
    chart and store it in an OCI registry. First, we must determine the registry where
    the chart should be stored. Since we are not only using GitHub to store the raw
    source code for our charts as it also acts as our Helm repository, the Container
    Registry provided as part of the GitHub packages offering can act as an OCI registry
    for helm charts. OCI artifacts are fully supported by the container registry,
    which is one less concern that we need to worry about.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示如何与基于OCI的Helm图表进行交互，我们可以使用Guestbook图表并将其存储在OCI注册表中。首先，我们必须确定应该存储图表的注册表。由于我们不仅使用GitHub来存储图表的原始源代码，而且GitHub还充当我们的Helm仓库，因此作为GitHub包服务的一部分提供的容器注册表可以作为Helm图表的OCI注册表。容器注册表完全支持OCI制品，这意味着我们不必再为此担忧。
- en: 'To publish content to the container registry, a **Personal Account Token**
    (**PAT**) must be created. Follow these steps to create a PAT with the necessary
    permissions to push and pull images:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要将内容发布到容器注册表，必须创建**个人账户令牌**（**PAT**）。请按照以下步骤创建一个具有推送和拉取镜像所需权限的PAT：
- en: Once logged into GitHub, at the top right corner of the page, select your profile
    picture and click **Settings** from the dropdown.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录GitHub后，在页面右上角选择您的个人资料图片，然后从下拉菜单中点击**设置**。
- en: Click **Developer Settings** and select **Personal Account Token**.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**开发者设置**并选择**个人账户令牌**。
- en: Click the **Generate New Token** button to initiate the token creation process.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**生成新令牌**按钮以启动令牌创建过程。
- en: Enter a unique name for the token, such as `Learn Helm`.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为令牌输入一个唯一名称，例如`Learn Helm`。
- en: Select the date the token will expire.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择令牌的过期日期。
- en: 'Select the scopes (permissions) that will be granted to the token. The following
    scopes are required for managing content within the container registry:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择将授予令牌的作用域（权限）。以下作用域是管理容器注册表内内容所需的：
- en: '`read:packages`'
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`read:packages`'
- en: '`write:packages`'
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`write:packages`'
- en: '`delete:packages`'
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`delete:packages`'
- en: Click the **Generate Token** button to create the token.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**生成令牌**按钮以创建令牌。
- en: Be sure to copy the generated token as it cannot be retrieved once you’ve navigated
    away from the page.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保复制生成的令牌，因为一旦离开此页面，就无法再次获取该令牌。
- en: Before interacting with the container registry, it is important to note how
    content is organized within the registry. While these details are specific to
    the GitHub service, these concepts can be applied to any container registry. Content
    is stored in the `ghcr.io/<OWNER>/<ARTIFACT>` format. `OWNER`, in this situation,
    represents the name of a user account or GitHub organization.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在与容器注册表交互之前，重要的是要了解注册表中内容的组织方式。虽然这些细节特定于GitHub服务，但这些概念可以应用于任何容器注册表。内容按`ghcr.io/<OWNER>/<ARTIFACT>`格式存储。`OWNER`在此表示用户账户或GitHub组织的名称。
- en: The primary reason why these details are so important is that Helm imposes a
    strict naming convention that is applied to OCI-based charts. Unlike publishing
    other artifacts to a container registry, where the repository name and tag can
    be specified, the repository name and tag are determined automatically based on
    the chart’s name and semantic version, as defined in the `Chart.yaml` file. For
    example, a chart named `mychart` with version 0.1.0 would be stored in the GitHub
    container registry for a user named `jdoe` at `ghcr.io/jdoe/mychart:0.1.0`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这些细节如此重要的主要原因是Helm对基于OCI的图表施加了严格的命名约定。与将其他制品发布到容器注册表不同，后者可以指定仓库名称和标签，基于OCI的图表的仓库名称和标签是根据图表名称和语义版本（在`Chart.yaml`文件中定义）自动确定的。例如，一个名为`mychart`、版本为0.1.0的图表，将存储在GitHub容器注册表中，属于用户名为`jdoe`的用户，地址为`ghcr.io/jdoe/mychart:0.1.0`。
- en: Now that we understand how charts are organized within OCI registries, let’s
    push the chart we created previously to the GitHub registry. The first step is
    to log in to the registry using the PAT that we created previously using the `helm
    registry login` command.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: 'The `helm registry login` command takes the following form:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To log in to the GitHub registry, execute the following command:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Enter your GitHub username and the PAT as the password when prompted. A `–-username`,
    along with either the `--password` or `--password-stdin` flag, can be used to
    perform non-interactive authentication.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we are logged in to the remote registry, we can push the previously
    created Helm chart to the remote registry using the `helm push` command. `helm
    push` requires a location of an already packaged chart to be provided, along with
    the destination registry, as shown here:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Signed charts are also supported, so long as the provenance (`.prov`) file is
    located in the same directory as the packaged chart. No additional configuration
    or flags to the `helm push` command are needed. Provenance and chart signing will
    be discussed in greater detail in [*Chapter 12*](B17979_12.xhtml#_idTextAnchor270),
    *Helm Security Considerations*.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: 'Push the packaged Guestbook chart to GitHub’s container registry:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Once the chart has been pushed, it can be viewed within GitHub via the **Packages**
    tab of your user profile. From any page within GitHub, select your profile picture
    at the top-right corner of the page and select **Your Profile**. The **Packages**
    tab can be found at the top of the page.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: 'After clicking on the **Packages** tab, the chart that you pushed previously
    should be visible, as shown in the following screenshot:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.4 – The Packages tab in GitHub'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.04_B17979.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.4 – The Packages tab in GitHub
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: By default, newly created packages are private and cannot be accessed by others.
    This configuration can be changed by selecting the package and, from the **Details**
    page, selecting **Package Settings** on the far right. Select **Change Visibility**
    in the **Danger Zone** section and select **Public**.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, individual users or teams can be specified instead of changing
    the visibility if you wish to restrict access to the helm chart.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: Pulling the OCI Guestbook chart
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pulling Helm charts from OCI registries is just as easy as publishing them and
    the `helm pull` command can be used to do this. The options found in the `helm
    pull` command are the same for OCI charts as they are for charts either located
    within chart repositories or located on the filesystem. Of the various options
    available, the `--version` flag allows the user to specify the chart to be received.
    Otherwise, the most recent version per SemVer convention is selected.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: 'Pull the previously published chart from the GitHub container registry, as
    shown here:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The most recent version of the chart will be retrieved from the registry and
    the packaged chart (`.tgz`) will be stored locally.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: After doing some hard work on developing a Helm chart, nothing beats the feeling
    of finally publishing your Helm chart to a repository for the world to see! In
    this chapter, we learned about HTTP and OCI Helm chart repositories. HTTP repositories
    allow you to publish your charts to simple web servers, while OCI registries allow
    you to publish your Helm charts alongside your container images. To practice,
    we published the Guestbook Helm chart to GitHub Pages (an HTTP server) and GitHub’s
    container registry (an OCI registry).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在经过一番辛苦的努力开发 Helm chart 后，最终将你的 Helm chart 发布到一个仓库供全世界查看的感觉是无与伦比的！在这一章中，我们了解了
    HTTP 和 OCI Helm chart 仓库。HTTP 仓库允许你将 chart 发布到简单的 Web 服务器，而 OCI 注册表允许你将 Helm chart
    与容器镜像一起发布。作为练习，我们将 Guestbook Helm chart 发布到了 GitHub Pages（一个 HTTP 服务器）和 GitHub
    的容器注册表（一个 OCI 注册表）。
- en: In the next chapter, we will learn about the tooling and strategies behind testing
    Helm charts.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习有关 Helm chart 测试的工具和策略。
- en: Further reading
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'To learn more about Helm chart repositories, visit the *Chart Repository Guide*
    section of the Helm documentation: [https://helm.sh/docs/topics/chart_repository/#helm](https://helm.sh/docs/topics/chart_repository/#helm).'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 Helm chart 仓库的内容，请访问 Helm 文档中的 *Chart Repository Guide* 部分：[https://helm.sh/docs/topics/chart_repository/#helm](https://helm.sh/docs/topics/chart_repository/#helm)。
- en: 'To learn more about OCI support, visit the documentation’s *Registries* section:
    [https://helm.sh/docs/topics/registries/](https://helm.sh/docs/topics/registries/).'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 OCI 支持的内容，请访问文档中的 *Registries* 部分：[https://helm.sh/docs/topics/registries/](https://helm.sh/docs/topics/registries/)。
- en: Questions
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Answer the following questions to test your knowledge of this chapter:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 回答以下问题以测试你对本章的知识掌握情况：
- en: What are three different tools you can use to create an HTTP repository?
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 HTTP 仓库的三种不同工具是什么？
- en: What command can you run to ensure that dependencies are always included in
    the `.tgz` archive?
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以运行什么命令以确保依赖项始终包含在 `.tgz` 压缩包中？
- en: What files are required when publishing to an HTTP server?
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发布到 HTTP 服务器时需要哪些文件？
- en: How is the process of publishing to an HTTP repository different from publishing
    to an OCI registry?
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 Helm chart 发布到 HTTP 仓库与发布到 OCI 注册表的过程有何不同？
- en: What Helm command is used to publish to an OCI registry?
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用于发布到 OCI 注册表的 Helm 命令是什么？
- en: What Helm command is used to download a Helm chart from an OCI registry?
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用于从 OCI 注册表下载 Helm chart 的 Helm 命令是什么？

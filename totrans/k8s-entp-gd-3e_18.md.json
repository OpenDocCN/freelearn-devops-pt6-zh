["```\n#!/bin/bash\nOPENUNISON_CP_HOST=$1\nCLUSTER_NAME=$2\nPATH_TO_POD_TOKEN=$3\nREMOTE_TOKEN=$(curl -H \"Authorization: Bearer $(<$PATH_TO_TOKEN)\" https://$OPENUNISON_CP_HOST/api/get-target-token?targetName=$CLUSTER_NAME 2>/dev/null) \nPod's token. The script then makes a curl call with that token to OpenUnison to get the token, using the Pod's identity as a bearer token. \n```", "```\necho -n \"{\\\"apiVersion\\\": \\\"client.authentication.k8s.io/v1\\\",\\\"kind\\\": \\\"ExecCredential\\\",\\\"status\\\": {\\\"token\\\": \\\"$REMOTE_TOKEN\\\"}}\" \n```", "```\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: k8s-kubernetes-satelite\n  namespace: argocd\n  labels:\n    argocd.argoproj.io/secret-type: cluster\n    tremolo.io/clustername: k8s-kubernetes-satelite\ntype: Opaque\nstringData:\n  name: k8s-kubernetes-satelite\n  server: https://oumgmt-proxy.idp-dev.tremolo.dev\n  config: |\n    {\n      \"execProviderConfig\": {\n        \"command\": \"/custom-tools/remote-token.sh\",\n        \"args\": [\"k8sou.idp-cp.tremolo.dev\",\"k8s-kubernetes-satelite\",\"/var/run/secrets/ubernetes.io/serviceaccount/token\"],\n        \"apiVersion\": \"client.authentication.k8s.io/v1\"\n      },\n      \"tlsClientConfig\": {\n        \"insecure\": false,\n        \"caData\": \"LS0tLâ€¦\n      }\n    } \n```", "```\n---\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: test-remote-cluster\n  namespace: argocd\nspec:\n  goTemplate: true\n  goTemplateOptions: [\"missingkey=error\"]\n  generators:\n  - clusters:\n      selector:\n        matchLabels:\n          tremolo.io/clustername: k8s-kubernetes-satelite\n  template:\n    metadata:\n      name: '{{.name}}-guestbook' # 'name' field of the Secret\n    spec:\n      project: \"default\"\n      source:\n        repoURL: https://github.com/mlbiam/test-argocd-repo.git\n        targetRevision: HEAD\n        path: yaml\n        directory:\n          recurse: true\n      destination:\n        server: '{{.server}}' # 'server' field of the secret\n        namespace: myns \n```", "```\n k8s_db_release = k8s.helm.v3.Release(\n            'kubernetes-dashboard',\n            k8s.helm.v3.ReleaseArgs(\n                chart=chart_name,\n                version=chart_version,\n                namespace='kubernetes-dashboard',\n                skip_await=False,\n                repository_opts= k8s.helm.v3.RepositoryOptsArgs(\n                    repo=chart_url\n                ),\n            ),\n            opts=pulumi.ResourceOptions(\n                provider = k8s_provider,\n                depends_on=[dashboard_namespace],\n                custom_timeouts=pulumi.CustomTimeouts(\n                    create=\"8m\",\n                    update=\"10m\",\n                    delete=\"10m\"\n                )\n            )\n        ) \n```", "```\nopenunison_helm_values[\"dashboard\"][\"service_name\"] = k8s_db_release.name.apply(lambda name: name) \n```"]
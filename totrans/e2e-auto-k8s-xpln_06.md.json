["```\napiVersion: apiextensions.crossplane.io/v1\n```", "```\nkind: CompositeResourceDefinition\n```", "```\nmetadata:\n```", "```\n  #'<plural>.<group>'\n```", "```\n  name: xclouddbs.book.imarunrk.com\n```", "```\nspec:\n```", "```\n  # API group\n```", "```\n  group: book.imarunrk.com\n```", "```\n  # Singular name and plural name.\n```", "```\n  names:\n```", "```\n    kind: xclouddb\n```", "```\n    plural: xclouddbs\n```", "```\n  # Optional parameter to create namespace proxy claim API\n```", "```\n  claimNames:\n```", "```\n    kind: Clouddb\n```", "```\n    plural: Clouddbs\n```", "```\n  # Start from alpha to beta to production to deprecated.\n```", "```\n  versions:\n```", "```\n  - name: v1\n```", "```\n    # Is the specific version actively served\n```", "```\n    served: true\n```", "```\n    # Can the version be referenced from an API implementation\n```", "```\n    referenceable: true\n```", "```\n    # OpenAPI schema \n```", "```\n    schema:\n```", "```\n      openAPIV3Schema:\n```", "```\n        type: object\n```", "```\n        properties:\n```", "```\n          spec:\n```", "```\n            type: object\n```", "```\n            properties:\n```", "```\n              parameters:\n```", "```\n                type: object\n```", "```\n                properties:\n```", "```\n                  storageSize:\n```", "```\n                    type: integer\n```", "```\n                required:\n```", "```\n                - storageSize\n```", "```\n            required:\n```", "```\n            - parameters\n```", "```\napiVersion: apiextensions.crossplane.io/v1\n```", "```\nkind: Composition\n```", "```\nmetadata:\n```", "```\n  name: xclouddb-composition\n```", "```\nspec:\n```", "```\n  # Link Composition to a specific XR and version\n```", "```\n  compositeTypeRef:\n```", "```\n    apiVersion: xclouddb.book.imarunrk.com/v1\n```", "```\n    kind: Xclouddb\n```", "```\n  # Connection secrets namespace\n```", "```\n  writeConnectionSecretsToNamespace: crossplane-system\n```", "```\n  # List of composed MRs or XRs.\n```", "```\n  resources:\n```", "```\n  - name: clouddbInstance\n```", "```\n    # Resource base template\n```", "```\n    base:\n```", "```\n      apiVersion: database.gcp.crossplane.io/v1beta1\n```", "```\n      kind: CloudSQLInstance\n```", "```\n      spec:\n```", "```\n        forProvider:\n```", "```\n          databaseVersion: POSTGRES_9_6\n```", "```\n          region: us-central\n```", "```\n          settings:\n```", "```\n            tier: db-g1-small\n```", "```\n            dataDiskSizeGb: 20\n```", "```\n    # Resource patches \n```", "```\n    patches:\n```", "```\n    - type: FromCompositeFieldPath\n```", "```\n      fromFieldPath: spec.parameters.storageSize\n```", "```\n      toFieldPath: spec.forProvider.settings.dataDiskSizeGb\n```", "```\n    # Resource secrets\n```", "```\n    connectionDetails:\n```", "```\n    - name: hostname\n```", "```\n      fromConnectionSecretKey: hostname\n```", "```\napiVersion: book.imarunrk.com/v1\n```", "```\n# Kind name matches the singular claim name in the XRD\n```", "```\nkind: Clouddb\n```", "```\nmetadata:\n```", "```\n  name: cloud-db\n```", "```\nspec:\n```", "```\n  # Parameters to be mapped and patched in the composition \n```", "```\n  parameters:\n```", "```\n    storageSize: 20\n```", "```\n  # Name of the composition to be used\n```", "```\n  compositionRef:\n```", "```\n    name: xclouddb-composition\n```", "```\n  writeConnectionSecretToRef:\n```", "```\n    namespace: crossplane-system\n```", "```\n    name: db-conn\n```", "```\napiVersion: book.imarunrk.com/v1\n```", "```\nkind: XClouddb\n```", "```\nmetadata:\n```", "```\n  name: cloud-db\n```", "```\nspec:\n```", "```\n  parameters:\n```", "```\n    storageSize: 20\n```", "```\n  compositionRef:\n```", "```\n    name: xclouddb-composition\n```", "```\n  writeConnectionSecretToRef:\n```", "```\n    namespace: crossplane-system\n```", "```\n    name: db-conn\n```", "```\n- type: MatchString\n```", "```\n  fieldPath: status.atProvider.state\n```", "```\n  matchString: \"Online\"\n```", "```\n - type: MatchInteger\n```", "```\n  fieldPath: status.atProvider.state\n```", "```\n  matchInteger: 1\n```", "```\n- type: None\n```", "```\n- type: NonEmpty\n```", "```\n  fieldPath: status.atProvider.state\n```", "```\n- type: ToCompositeFieldPath\n```", "```\n  fromFieldPath: status.atProvider.currentDiskSize\n```", "```\n  toFieldPath: status.dbDiskSize\n```", "```\napiVersion: compute.gcp.crossplane.io/v1beta1\n```", "```\nkind: Network\n```", "```\nmetadata:\n```", "```\n  name: alpha-beta-vpc-crossplane-ref\n```", "```\n  annotations:\n```", "```\n    # Annotation to provide existing resource named\n```", "```\n    crossplane.io/external-name: alpha-beta-vpc\n```", "```\nspec:\n```", "```\n  providerConfigRef:\n```", "```\n    name: gcp-credentials-project-1\n```", "```\n  # Provide the required parameters same as external resource.\n```", "```\n  forProvider:\n```", "```\n    autoCreateSubnetworks: true\n```", "```\n    schema:\n```", "```\n      openAPIV3Schema:\n```", "```\n        type: object\n```", "```\n        properties:\n```", "```\n          # Spec – defines the API input\n```", "```\n          spec:\n```", "```\n            type: object\n```", "```\n            properties:\n```", "```\n              parameters:\n```", "```\n                type: object\n```", "```\n                properties:\n```", "```\n                  # Size will be a user input\n```", "```\n                  size:\n```", "```\n                    type: string\n```", "```\n                required:\n```", "```\n                - size\n```", "```\n            required:\n```", "```\n            - parameters\n```", "```\n          # status – the additional API output parameter\n```", "```\n          status:\n```", "```\n            type: object\n```", "```\n            # Recourse zone - status patch parameter.\n```", "```\n            properties:\n```", "```\n              zone:\n```", "```\n                description: DB zone.\n```", "```\n                type: string\n```", "```\nspec:\n```", "```\n  # Refer to an XRD API version\n```", "```\n  compositeTypeRef:\n```", "```\n    apiVersion: alpha-beta.imarunrk.com/v1\n```", "```\n    kind: XGCPdb\n```", "```\n  writeConnectionSecretsToNamespace: crossplane-system\n```", "```\n  resources:\n```", "```\n    # Provide configuration for Postgres resource\n```", "```\n  - name: cloudsqlinstance\n```", "```\n    base:\n```", "```\n      apiVersion: database.gcp.crossplane.io/v1beta1\n```", "```\n      kind: CloudSQLInstance\n```", "```\n      spec:\n```", "```\n        # reference to GCP credentials\n```", "```\n        providerConfigRef:\n```", "```\n          name: gcp-credentials-project-1\n```", "```\n        forProvider:\n```", "```\n          databaseVersion: POSTGRES_9_6\n```", "```\n          # Compliance Policy\n```", "```\n          region: us-central1\n```", "```\n          settings:\n```", "```\n            # These are default values \n```", "```\n            # Architecture policies will be a patch\n```", "```\n            tier: db-g1-small\n```", "```\n            dataDiskSizeGb: 20\n```", "```\n- type: FromCompositeFieldPath\n```", "```\n  fromFieldPath: spec.parameters.size\n```", "```\n  toFieldPath: spec.forProvider.settings.tier\n```", "```\n      # Use map transform\n```", "```\n       # If the from-field value is BIG, then \n```", "```\n       # the mapped to-field value is db-n1-standard-1\n```", "```\n       transforms:\n```", "```\n       - type: map\n```", "```\n         map:\n```", "```\n           BIG: db-n1-standard-1\n```", "```\n           SMALL: db-g1-small\n```", "```\n       policy:\n```", "```\n         # return error if there is no field.\n```", "```\n         fromFieldPath: Required\n```", "```\n- type: FromCompositeFieldPath\n```", "```\n  fromFieldPath: spec.parameters.size\n```", "```\n  toFieldPath: spec.forProvider.settings.dataDiskSizeGb\n```", "```\n  # If the from-field value is BIG, then \n```", "```\n  # the mapped to-field value is '40;\n```", "```\n  # Apply the second transform to convert '40' to int\n```", "```\n  transforms:\n```", "```\n  - type: map\n```", "```\n    map:\n```", "```\n      BIG: \"40\"\n```", "```\n      SMALL: \"20\"\n```", "```\n  - type: convert\n```", "```\n    convert:\n```", "```\n      toType: int\n```", "```\n  policy:\n```", "```\n    # return error if there is no field.\n```", "```\n    fromFieldPath: Required\n```", "```\n# Patch zone information back to the XR status\n```", "```\n# No transformation or policy required\n```", "```\n- type: ToCompositeFieldPath\n```", "```\n  fromFieldPath: status.atProvider.gceZone\n```", "```\n  toFieldPath: status.zone\n```", "```\napiVersion: alpha-beta.imarunrk.com/v1\n```", "```\nkind: GCPdb\n```", "```\nmetadata:\n```", "```\n  # Claims in alpha namespace\n```", "```\n  namespace: alpha\n```", "```\n  name: mysql-db\n```", "```\nspec:\n```", "```\n  # Refer to the mysql composition\n```", "```\n  compositionRef:\n```", "```\n    name: mysql\n```", "```\n  # save connection details as secret - db-conn2\n```", "```\n  writeConnectionSecretToRef:\n```", "```\n    name: db-conn2\n```", "```\n  parameters:\n```", "```\n    size: SMALL\n```"]
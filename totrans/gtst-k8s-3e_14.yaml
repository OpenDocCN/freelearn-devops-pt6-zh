- en: Hardening Kubernetes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加固 Kubernetes
- en: In this chapter, we'll look at considerations for moving to production. We will
    also show you some helpful tools and third-party projects that are available in
    the Kubernetes community at large and where you can go to get more help.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将讨论迁移到生产环境时的注意事项。我们还将向你展示一些有用的工具和第三方项目，这些工具和项目在整个 Kubernetes 社区中可用，并告诉你可以去哪里获得更多帮助。
- en: 'This chapter will discuss the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将讨论以下主题：
- en: Production characteristics
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生产特性
- en: Lessons learned from Kubernetes production
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 Kubernetes 生产环境中学到的经验
- en: Hardening the cluster
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加固集群
- en: The Kubernetes ecosystem
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 生态系统
- en: Where can you get help?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哪里可以获得帮助？
- en: Ready for production
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备好进入生产环境
- en: So far in this book, we have walked through a number of typical operations using
    Kubernetes. As we have been, K8s offers a variety of features and abstractions
    that ease the burden of day-to-day management for container deployments.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，本书我们已经走过了许多使用 Kubernetes 的典型操作。如我们所见，K8s 提供了多种特性和抽象，简化了容器部署日常管理的负担。
- en: 'There are many characteristics that define a production-ready system for containers.
    The following diagram provides a high-level view of the major concerns for production-ready
    clusters. This is by no means an exhaustive list, but it''s meant to provide some
    solid ground for heading into production operations:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多特性定义了适用于容器的生产就绪系统。下图提供了生产就绪集群的主要关注点的高层次视图。这并不是一个详尽无遗的列表，但它旨在为进入生产操作提供一些可靠的基础：
- en: '![](img/8bb4fd04-edf2-4be7-ad9e-f996021c0426.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8bb4fd04-edf2-4be7-ad9e-f996021c0426.png)'
- en: Production characteristics for container operations
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 容器操作的生产特性
- en: We saw how the core concepts and abstractions of Kubernetes address a few of
    these concerns. The service abstraction has built-in service discovery and health
    checking at both the service and application level. We also get seamless application
    updates and scalability from the replication controller and deployment constructs.
    All of the core abstractions of services, replication controllers, replica sets,
    and pods work with a core scheduling and affinity rulesets and give us easy service
    and application composition.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到 Kubernetes 的核心概念和抽象如何解决其中的一些问题。服务抽象提供了内建的服务发现和健康检查功能，既适用于服务层，也适用于应用层。我们还通过复制控制器和部署构造获得了无缝的应用更新和可扩展性。所有的核心抽象，如服务、复制控制器、副本集和
    Pod，都与核心调度和亲和规则集协同工作，提供了简便的服务和应用组合。
- en: There is built-in support for a variety of persistent storage options, and the
    networking model provides manageable network operations with options to work with
    other third-party providers. We also took a brief look at CI/CD integration with
    some of the popular tools in the marketplace.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 内建支持多种持久存储选项，网络模型提供了可管理的网络操作，并可以与其他第三方提供商合作。我们还简要了解了与一些市场上流行工具的 CI/CD
    集成。
- en: Furthermore, we have built-in system events tracking, and with the major cloud
    providers, an out-of-the-box setup for monitoring and logging. We also saw how
    this can be extended to third-party providers such as Stackdriver and Sysdig.
    These services also address overall node health and proactive trend deviation
    alerts.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还内建了系统事件跟踪，并且与主要的云服务提供商一起，提供了开箱即用的监控和日志记录设置。我们还看到如何将其扩展到第三方提供商，如 Stackdriver
    和 Sysdig。这些服务还涵盖了节点的整体健康状况和主动的趋势偏离警报。
- en: The core constructs also help us address high availability in our application
    and service layers. The scheduler can be used with autoscaling mechanisms to provide
    this at a node level. Then, there is support for making the Kubernetes master
    itself highly available. In [Chapter 12](92883e26-5c4a-466e-bfe6-1a5e0d0997f9.xhtml),
    *Cluster Federation and Multi-Tenancy*, we took a brief look at the new federation
    capabilities that promise a multi-cloud and multi-data center model for the future.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 核心构造还帮助我们解决了应用和服务层的高可用性问题。调度器可以与自动扩展机制一起使用，在节点级别提供这一功能。然后，还支持使 Kubernetes 主节点本身实现高可用性。在[第12章](92883e26-5c4a-466e-bfe6-1a5e0d0997f9.xhtml)《集群联邦与多租户》中，我们简要回顾了新联邦功能，这些功能预示着未来的多云和多数据中心模型。
- en: Finally, we explored a new breed of operating systems that give us a slim base
    to build on and secure update mechanisms for patching and updates. The slim base,
    together with scheduling, can help us with efficient resource utilization. In
    addition, we looked at some hardened concerns and explored the image trust and
    verification tools available. Security is a wide topic and capability matrices
    exist for this topic alone.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们探索了一种新的操作系统，它为我们提供了一个轻量的基础，可以构建在其上，并提供安全的更新机制用于修补和更新。这个轻量的基础与调度相结合，可以帮助我们实现高效的资源利用。此外，我们还关注了一些强化的安全问题，并探索了可用的镜像信任和验证工具。安全性是一个广泛的话题，针对这个话题本身就有能力矩阵。
- en: Ready, set, go
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备好，开始吧
- en: While there are still some gaps, a variety of the remaining security and operation
    concerns are actively being addressed by third-party companies, as we will see
    in the following section. Going forward, the Kubernetes project will continue
    to evolve, and the community of projects and partners around K8s and Docker will
    also grow. The community is closing the remaining gaps at a phenomenal pace.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管仍然存在一些漏洞，但剩余的各种安全和操作问题正在被第三方公司积极解决，正如我们将在接下来的章节中看到的那样。展望未来，Kubernetes项目将继续发展，围绕K8s和Docker的项目和合作伙伴社区也将不断壮大。社区正在以惊人的速度弥补剩余的空白。
- en: Lessons learned from production
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从生产中获得的经验教训
- en: 'Kubernetes has been around long enough now that there are a number of companies
    running Kubernetes. In our day jobs, we''ve seen Kubernetes run in production
    across a number of different industry verticals and in numerous configurations.
    Let''s explore what folks across the industry are doing when providing customer-facing
    workloads. At a high level, there are several key areas:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes已经存在足够长的时间，现在有很多公司在运行Kubernetes。在我们的日常工作中，我们看到Kubernetes在多个行业的生产环境中运行，并且在各种配置下使用。让我们来探索一下业界在提供面向客户的工作负载时的做法。从一个高层次的角度来看，有几个关键领域：
- en: Make sure to set limits in your cluster.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保在集群中设置限制。
- en: Use the appropriate workload types for your application.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为你的应用程序使用适当的工作负载类型。
- en: Label everything! Labels are very flexible and can contain a lot of information
    that can help identify an object, route traffic, or determine placement.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给所有东西打标签！标签非常灵活，可以包含很多信息，帮助识别对象、路由流量或决定放置位置。
- en: Don't use default values.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要使用默认值。
- en: Tweak the default values for the core Kubernetes components.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调整Kubernetes核心组件的默认值。
- en: Use load balancers as opposed to exposing services directly on a node's port.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用负载均衡器，而不是直接在节点的端口上暴露服务。
- en: Build your Infrastructure as Code and use provisioning tools such as CloudFormation
    or Terraform, and configuration tools such as Chef, Ansible, or Puppet.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建你的基础设施即代码，并使用诸如CloudFormation或Terraform之类的预配置工具，以及Chef、Ansible或Puppet之类的配置工具。
- en: Consider not running stateful workloads in production clusters until you build
    up expertise in Kubernetes.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你还没有建立Kubernetes的专业知识之前，考虑不要在生产集群中运行有状态的工作负载。
- en: Investigate higher-function templating languages to maintain the state of your
    cluster. We'll explore a few options for an immutable infrastructure in the following
    chapter.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调查更高功能的模板语言，以维护集群的状态。在接下来的章节中，我们将探索几种不可变基础设施的选项。
- en: Use RBAC, the principle of least privilege, and separation of concerns wherever
    possible.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在可能的情况下，使用RBAC、最小特权原则和关注点分离。
- en: Use TLS-enabled communications for all inter-cluster chatter. You can set up
    TLS and certificate rotation for the `kubelet` communication in your cluster.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有集群间的通信都使用启用TLS的方式。你可以为集群中的`kubelet`通信设置TLS和证书轮换。
- en: Until you're comfortable with managing Kubernetes, build lots of small clusters.
    It's more operational overhead, but it will get you into the deep end of experience
    faster so that you see more failure and experience the operator burden more heavily.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你还不熟悉Kubernetes的管理之前，构建大量的小型集群。这虽然带来更多的操作开销，但它能帮助你更快地进入深水区，看到更多的失败，体验更多的运维负担。
- en: As you get better at Kubernetes, build bigger clusters that use namespaces,
    network segmentation, and the authorization features to break up your cluster
    into pieces.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随着你对Kubernetes的熟练掌握，构建更大的集群，使用命名空间、网络分段和授权功能将集群拆分成多个部分。
- en: Once you're running a few large clusters, manage them with `kubefed`.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦你管理了几个大型集群，就使用`kubefed`进行管理。
- en: If you can, use the features of your given cloud service provider's built-in
    high availability on a Kubernetes platform. For example, run Regional Clusters
    on GCP, with GKE. This feature spreads your nodes across several availability
    zones in a region. This allows for resilience against a single zone failure, and
    provides the conceptual building blocks for the zero downtime upgrades of your
    master nodes.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果可能，使用云服务提供商内建的高可用性功能，在 Kubernetes 平台上运行。例如，在 GCP 上使用 GKE 运行区域集群。此功能将你的节点分布在区域中的多个可用区。这使得系统能够抵御单一区域的故障，并为主节点的零停机时间升级提供概念性的构建模块。
- en: In the next section, we'll explore one of these concepts – limits – in more
    detail.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将更详细地探讨这些概念之一——限制。
- en: Setting limits
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置限制
- en: 'If you''ve done work with containers before, you will know that one of the
    first and easiest things to set up for your containers is resource limits in the
    form of the following metrics:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你之前做过容器相关的工作，你会知道，设置容器资源限制是容器管理中最先和最容易设置的事项之一，通常形式为以下几种指标：
- en: CPU
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CPU
- en: Memory
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存
- en: Requests
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求
- en: 'You may be familiar with setting runtime limits on resources with Docker''s
    CLI, which specify flags to limit these items and more:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能熟悉使用 Docker 的 CLI 来设置资源的运行时限制，指定标志以限制这些项目及其他：
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here, we''re setting a runtime parameter, creating a `ulimit`, and setting
    memory and CPU quotas. The story evolves a bit in Kubernetes, as you can create
    these limits to a specific namespace, which allows you to characterize your limits
    by the domains of your cluster. You have four overarching parameters so that you
    can work resource limits in Kubernetes:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们设置了一个运行时参数，创建了一个`ulimit`，并设置了内存和 CPU 配额。在 Kubernetes 中，故事稍有变化，因为你可以将这些限制应用于特定的命名空间，这使你可以根据集群的域来定义你的限制。你有四个主要的参数来在
    Kubernetes 中设置资源限制：
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Scheduling limits
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调度限制
- en: When you create a pod with a memory limit, Kubernetes looks for a node with
    the right labels and selectors that has enough of the resource types, CPU, and
    memory, that the pod requires. Kubernetes is in charge of ensuring that the total
    memory request of the pods on a node is not less than the pod's total resources.
    This can sometimes result in unexpected outcomes, as you can have node limitations
    reached in terms of capacity, even if the net utilization of a pod is low. This
    is a design of the system in order to accommodate varying load levels.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个带有内存限制的 Pod 时，Kubernetes 会寻找一个带有正确标签和选择器的节点，并确保该节点拥有 Pod 所需的足够资源类型，包括
    CPU 和内存。Kubernetes 负责确保一个节点上所有 Pod 的总内存请求不小于该节点的总资源。这有时会导致意想不到的结果，因为即使 Pod 的实际利用率较低，节点的容量限制也可能已经达到。这是系统的设计方式，旨在适应不同的负载水平。
- en: 'You can look through pod logs to find out when this has occurred:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以查看 Pod 日志，找出何时发生了这个问题：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You can address these issues by removing unneeded pods, ensuring that your pod
    isn't larger as a whole than any one available node, or simply add more resources
    to the cluster.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过删除不需要的 Pod，确保你的 Pod 整体大小不超过任何一个可用节点，或者简单地为集群添加更多资源来解决这些问题。
- en: Memory limit example
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内存限制示例
- en: 'Let''s walk through an example. First, we''ll create a namespace to house our
    memory limit:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个例子来演示。首先，我们将创建一个命名空间来容纳我们的内存限制：
- en: '[PRE3]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Once we''ve created the namespace, we can create a file that sets a `LimitRange`
    object, which will allow us to enforce a default for memory limits and requests.
    Create a file called `memory-default.yaml` with the following contents:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们创建了命名空间，我们可以创建一个设置`LimitRange`对象的文件，这将允许我们强制执行内存限制和请求的默认值。创建一个名为`memory-default.yaml`的文件，内容如下：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'And now, we can create it in the namespace:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在该命名空间中创建它：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Let's create a pod without a memory limit, in the low-memory-area namespace,
    and see what happens.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在低内存区域命名空间中创建一个没有内存限制的 Pod，看看会发生什么。
- en: 'Create the following `low-memory-pod.yaml` file:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 创建以下 `low-memory-pod.yaml` 文件：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Then, we can create the pod with this command:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用这个命令来创建 Pod：
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let''s see if our resource constraints were added to the pod''s configuration
    for containers, without having to explicitly specify it in the pod configuration.
    Notice the memory limits in place! We''ve removed some of the informational output
    for readability:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看是否已经将我们的资源限制添加到容器的 Pod 配置中，而无需在 Pod 配置中显式指定。注意内存限制已经生效！我们已删除了一些信息输出以提高可读性：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here''s the output of the preceding code:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前面代码的输出：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You can delete the pod with the following command:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下命令删除 Pod：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'There are a lot of options for configuring resource limits. If you create a
    memory limit, but don''t specify the default request, the request will be set
    to the maximum available memory, which will correspond to the memory limit. That
    will look like the following:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 配置资源限制有很多选项。如果你创建了内存限制，但没有指定默认请求，则请求将设置为最大可用内存，这将与内存限制相对应。看起来会像下面这样：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In a cluster with diverse workloads and API-driven relationships, it's incredibly
    important to set memory limits with your containers and their corresponding applications
    in order to prevent misbehaving applications from disrupting your cluster. Services
    don't implicitly know about each other, so they're very susceptible to resource
    exhaustion if you don't configure limits correctly.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在具有多样化工作负载和基于 API 的关系的集群中，为你的容器和相应应用程序设置内存限制非常重要，以防止不当行为的应用程序干扰集群。服务之间不会隐式地了解彼此，因此如果你没有正确配置限制，它们非常容易因资源耗尽而出现问题。
- en: Scheduling CPU constraints
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调度 CPU 约束
- en: 'Let''s look at another type of resource management, the constraint. We''ll
    use the CPU dimension here, and we''ll explore how to set the maximum and minimum
    values for available resources for a given container and pod in a namespace. There
    are a number of reasons you might want to limit CPU on a Kubernetes cluster:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看另一种资源管理类型，即约束。这里我们使用 CPU 维度，探讨如何为命名空间中的给定容器和 Pod 设置可用资源的最大值和最小值。你可能想在 Kubernetes
    集群上限制 CPU 的原因有很多：
- en: If you have a namespaced cluster that has different levels of production and
    non-production workloads, you may want to specify higher limits for your production
    workloads. You can allow quad-core CPU consumption for production; put pin development,
    staging, or UAT-type workloads to a single CPU; or stagger them according to environment
    needs.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你有一个命名空间集群，里面有不同级别的生产和非生产工作负载，你可能想为生产工作负载指定更高的资源限制。你可以允许生产环境使用四核 CPU；将开发、预发布或
    UAT 类型的工作负载限制为单个 CPU；或者根据环境需求错开它们。
- en: You can also ban requests from pods that require more CPU resources than your
    nodes have available. If you're running a certain type of machine on a cloud service
    provider, you can ensure that workloads that require X cores aren't scheduled
    on machines with <X cores.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你还可以禁止请求比节点可用 CPU 资源更多的 Pod。如果你在云服务提供商上运行某种类型的机器，你可以确保需要 X 核心的工作负载不会被调度到小于 X
    核心的机器上。
- en: CPU constraints example
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CPU 约束示例
- en: 'Let''s go ahead and create another namespace in which to hold our example:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续创建另一个命名空间来容纳我们的示例：
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now, let's set up a `LimitRange` for CPU constraints, which uses the measurement
    of millicpus. If you're requesting 500 m, it means that you're asking for 500
    millicpus or millicores, which is equivalent to 0.5 in notational form. When you
    request 0.5 or 500 m, you're asking for half of a CPU in whatever form your platform
    provides (vCPU, Core, Hyper Thread, vCore, or vCPU).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们为 CPU 约束设置一个 `LimitRange`，它使用毫核（millicpus）作为度量单位。如果你请求 500 m，那意味着你请求的是
    500 毫核或毫CPU，等同于符号表示法中的 0.5。当你请求 0.5 或 500 m 时，意味着你请求了平台提供的任何形式的半个 CPU（vCPU、核心、超线程、vCore
    或 vCPU）。
- en: 'As we did previously, let''s create a `LimitRange` for our CPU constraints:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们之前做的那样，让我们为 CPU 约束创建一个 `LimitRange`：
- en: '[PRE13]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, we can create the `LimitRange`:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以创建 `LimitRange`：
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Once we create the `LimitRange`, we can inspect it. What you''ll notice is
    that the `defaultRequest` is specified as the same as the maximum, because we
    didn''t specify it. Kubernetes sets the `defaultRequest` to max:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们创建了 `LimitRange`，就可以检查它了。你会注意到，`defaultRequest` 被指定为与最大值相同，因为我们没有特别指定。Kubernetes
    会将 `defaultRequest` 设置为最大值：
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This is the intended behavior. When further containers are scheduled in this
    namespace, Kubernetes first checks to see whether the pod specifies a request
    and limit. If it doesn't, the defaults are applied. Next, the controller confirms
    that the CPU request is more than the lower bound in the `LimitRange`, 300 m.
    Additionally, it checks for the upper bound to make sure that the object is not
    asking for more than 500 m.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这是预期的行为。当在此命名空间中进一步调度容器时，Kubernetes 会首先检查 Pod 是否指定了请求和限制。如果没有，它会应用默认值。接着，控制器会确认
    CPU 请求是否超过 `LimitRange` 中的下限，即 300 m。此外，它还会检查上限，以确保对象的请求不超过 500 m。
- en: 'You can check the container constraints again by looking at the YAML output
    of the pod:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过查看 Pod 的 YAML 输出再次检查容器约束：
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, don''t forget to delete the pod:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，别忘了删除这个 Pod：
- en: '[PRE17]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Securing a cluster
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集群安全性
- en: Let's look at some other common recommendations for hardening your cluster in
    production. These use cases cover both intentional, malicious actions against
    your cluster, as well as accidental misuse. Let's take a look at what we can do
    to secure things.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下在生产中加强集群安全的其他常见建议。这些使用案例涵盖了对集群的有意恶意攻击以及意外误用。让我们看看如何保护集群。
- en: 'First off, you want to ensure that access to the Kubernetes API is controlled.
    Given that all actions in Kubernetes are API-driven, we should secure this interface
    first. We can control access to this API with several settings:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要确保对Kubernetes API的访问是受控的。鉴于Kubernetes中的所有操作都是通过API驱动的，我们应该首先保护这个接口。我们可以通过几个设置来控制对该API的访问：
- en: '**Encode all traffic**: In order to keep communication secure, you should make
    sure that **Transport Level Security** (**TLS**) is set up for API communication
    in the cluster. Most of the installation methods we''ve reviewed in this book
    create the necessary component certificates, but it''s always on the cluster operators
    to identify all in-use local ports that may not use the more secure settings.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加密所有流量**：为了保持通信安全，你应该确保为集群中的API通信设置**传输层安全性**（**TLS**）。我们在本书中回顾的多数安装方法都会创建必要的组件证书，但始终由集群操作员负责识别所有可能没有使用更安全设置的本地端口。'
- en: '**Authenticate your access**: Just as with any large scale computer system,
    you want to ensure that the identity of a user is established. For small clusters,
    you can use certs or tokens, while larger production clusters should use OpenID
    or LDAP.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**认证你的访问**：就像任何大型计算机系统一样，你需要确保用户的身份已经建立。对于小型集群，你可以使用证书或令牌，而对于更大的生产集群，则应使用OpenID或LDAP。'
- en: '**Control your access**: After you''ve established the identity of the role
    accessing your API, you always want to ensure that you pass your authenticated
    access request through an authorization filter with Kubernetes'' built-in **role-based-access-control** (**RBAC**),
    which helps operators limit control and access by roles and users. There are two
    authorizer plugins, node and RBAC, that can be used, along with the `NodeRestriction`
    admission plugin. A key point to keep in mind is that role granularity should
    increase as cluster size increases, and even more so from non-production environments
    toward production environments.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制访问权限**：在你确定了访问API角色的身份后，你需要确保通过Kubernetes内置的**基于角色的访问控制** (**RBAC**) 过滤器来传递已认证的访问请求，它帮助操作员通过角色和用户限制控制和访问。有两个授权插件可供使用，分别是节点插件和RBAC插件，以及`NodeRestriction`准入插件。需要记住的一个关键点是，随着集群规模的增大，角色粒度应该增大，特别是从非生产环境到生产环境时。'
- en: By default, authentication to use the `kubelet` is turned off. You can enable
    authorization/authentication on the `kubelet` by turning on certificate rotation.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`kubelet`的身份验证是关闭的。你可以通过开启证书轮换来启用`kubelet`的授权/身份验证功能。
- en: You can read more about certificate rotation here: [https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet-authentication-authorization/](https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet-authentication-authorization/).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里阅读更多关于证书轮换的内容：[https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet-authentication-authorization/](https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet-authentication-authorization/)。
- en: 'We can also modify the usage of Kubernetes at runtime:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在运行时修改Kubernetes的使用方式：
- en: Long-time operators of Kubernetes in production will recognize this as a reference
    point to our previous discussions on limits and policies. As discussed previously,
    resource quotas limit the number of resources provided within a namespace, while
    limits ranges between restrict minimum and maximum sizes.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 长期在生产环境中使用Kubernetes的操作员会将其视为我们之前关于限制和策略讨论的参考点。如前所述，资源配额限制了在命名空间中提供的资源数量，而限制范围则约束了资源的最小和最大尺寸。
- en: You can determine the privileges of your pods by defining a security context.
    Here, you can specify things like a particular Linux user, group, volume mount
    access, allowing privilege escalation, and more.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以通过定义安全上下文来确定Pod的权限。在这里，你可以指定像特定的Linux用户、组、卷挂载访问、是否允许权限提升等设置。
- en: You can also restrict access to logical partitions of your cluster by using
    network policies. You can ensure that certain namespaces are off limits to users,
    or determine whether or not they're able to set up services with specific load
    balancer configuration or open ports on host nodes.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你还可以通过使用网络策略来限制对集群逻辑分区的访问。你可以确保某些命名空间对用户不可访问，或者决定用户是否能够设置带有特定负载均衡器配置的服务，或在主机节点上开放端口。
- en: 'While the preceding patterns are useful for operations inside of Kubernetes,
    there are also several actions that you should take when securing your cluster
    from an external perspective:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然前述的模式对于Kubernetes内部的操作非常有用，但在从外部角度保护集群时，你还应该采取一些额外的措施：
- en: 'First off, enable and monitor your logs! While this seems like a no-brainer,
    we see a lot of problems cropping up from people that aren''t watching their logs,
    or who haven''t created alerts based off these logs. Another hint: don''t store
    logs inside of your cluster! If your cluster is breached, then those logs will
    be an invaluable source of information for malicious agents.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，启用并监控日志！虽然这看起来是显而易见的，但我们常常看到很多问题来自于没有监控日志，或者没有根据日志设置警报的人。另一个提示：不要将日志存储在集群内部！如果你的集群被攻破，日志将成为恶意代理的重要信息来源。
- en: Make double sure that you restrict access to your etcd cluster. This can come
    in the form of setting up security groups or firewalls and ensuring that your
    etcd cluster nodes have the appropriate identity and access management from an
    infrastructure perspective. From a cluster perspective, make sure that you're
    always using TLS certificates for authentication and strong credentials. In no
    case should any components inside your cluster have read/write access to the full
    etcd key/value space.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保限制对etcd集群的访问。这可以通过设置安全组或防火墙来实现，并确保etcd集群节点从基础设施角度具有适当的身份和访问管理。从集群角度来看，确保始终使用TLS证书进行身份验证，并使用强身份凭证。在任何情况下，集群中的任何组件都不应具有对整个etcd键值空间的读写权限。
- en: Make sure to vet alpha/beta components and review third-party integrations.
    Make sure that you know what you're using when you enable it, and what it does
    when you turn it on! Emerging features or third-party tools may create attack
    surfaces or threat models where you're not aware of what dependencies they have.
    Beware of any tools that need to do work inside the kube-system, as it's a particularly
    powerful portion of the cluster.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保审核alpha/beta组件并检查第三方集成。确保你了解启用它时在使用什么，并且知道它启用后会做什么！新兴功能或第三方工具可能会创建攻击面或威胁模型，而你未必了解它们的依赖关系。特别要小心需要在kube-system内部执行工作的工具，因为它是集群中特别强大的部分。
- en: Encrypt your secrets at rest in etcd. This is good advice for any computerized
    system, and Kubernetes is no different here. The same goes for your backups to
    ensure that an attacker can't gain access to your cluster via inspection of those
    resources.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在etcd中加密你的机密数据。这是对任何计算机系统的良好建议，Kubernetes也不例外。备份同样需要加密，以确保攻击者无法通过检查这些资源来获取集群访问权限。
- en: For your production cluster, you should also be doing things such as scanning
    your container images, running static analysis of your YAML files, running containers
    as non-root users where possible, and running an **intrusion detection system**
    (**IDS**). Once you have all of this in place, you can begin to explore the functional
    capabilities of the service meshes out in the wild.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 对于你的生产集群，你还应该做一些事情，如扫描容器镜像、运行YAML文件的静态分析、尽可能以非root用户身份运行容器，并运行**入侵检测系统**（**IDS**）。当你完成这些设置后，就可以开始探索外部服务网格的功能能力。
- en: Third-party companies
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三方公司
- en: Since the Kubernetes project's initial release, there has been a growing ecosystem
    of partners. We looked at CoreOS, Sysdig, and many others in the previous chapters,
    but there are a variety of projects and companies in this space. We will highlight
    a few that may be useful as you move toward production. This is by no means an
    exhaustive list and it is merely meant to provide some interesting starting points.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 自Kubernetes项目初始发布以来，合作伙伴的生态系统逐渐壮大。我们在前几章中已经看到了CoreOS、Sysdig和许多其他公司，但在这个领域中还有许多不同的项目和公司。我们将重点介绍一些可能在你向生产环境过渡时有用的内容。这绝不是一份详尽的列表，仅仅是为了提供一些有趣的起点。
- en: Private registries
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 私有注册表
- en: In many situations, organizations will not want to place their applications
    and/or intellectual property in public repositories. For those cases, a private
    registry solution is helpful in securely integrating deployments end to end.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，组织不希望将其应用程序和/或知识产权放入公共仓库。对于这种情况，私有仓库解决方案可以帮助安全地将部署整合到底端。
- en: Google Cloud offers the Google Container Registry at [https://cloud.google.com/container-registry/](https://cloud.google.com/container-registry/).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌云提供**Google容器注册表**，地址是[https://cloud.google.com/container-registry/](https://cloud.google.com/container-registry/)。
- en: Docker has its own trusted registry offering at [https://www.docker.com/docker-trusted-registry](https://www.docker.com/docker-trusted-registry).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Docker有自己信任的注册表服务，地址是[https://www.docker.com/docker-trusted-registry](https://www.docker.com/docker-trusted-registry)。
- en: Quay also provides secure private registries, vulnerability scanning, and comes
    from the CoreOS team, and can be found at [https://quay.io/](https://quay.io/).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Quay还提供安全的私有仓库、漏洞扫描，并且来自CoreOS团队，可以在[https://quay.io/](https://quay.io/)找到。
- en: Google Kubernetes Engine
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Google Kubernetes Engine
- en: Google was the main author of the original Kubernetes project and is still a
    major contributor. Although this book has mostly focused on running Kubernetes
    on our own, Google also offers a fully managed container service through the Google
    Cloud Platform.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌是原始Kubernetes项目的主要作者，并且仍然是一个主要贡献者。尽管本书主要集中在我们自己运行Kubernetes上，谷歌也通过Google Cloud
    Platform提供完全托管的容器服务。
- en: Find more information on the **Google Kubernetes Engine** (**GKE**) website
    at [https://cloud.google.com/container-engine/](https://cloud.google.com/container-engine/).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在**Google Kubernetes Engine**（**GKE**）网站上查找更多信息，地址是[https://cloud.google.com/container-engine/](https://cloud.google.com/container-engine/)。
- en: Kubernetes will be installed on GKE and will be managed by Google engineers.
    They also provide private registries and integration with your existing private
    networks.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes将在GKE上安装并由谷歌工程师管理。他们还提供私有仓库和与现有私有网络的集成。
- en: 'You create your first GKE cluster by using the following steps:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过以下步骤创建你的第一个GKE集群：
- en: From the GCP console, in Compute, click on Container Engine, and then on Container
    Clusters.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在GCP控制台中，在计算部分点击容器引擎，然后点击容器集群。
- en: If this is your first time creating a cluster, you'll have an information box
    in the middle of the page. Click on the Create a container cluster button.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果这是你第一次创建集群，页面中间会有一个信息框。点击创建容器集群按钮。
- en: Choose a name for your cluster and the zone. You'll also be able to choose the
    machine type (instance size) for your nodes and how many nodes (cluster size)
    you want in your cluster. You'll also see a choice for node image, which lets
    you choose the base OS and machine image for the nodes themselves. The master
    is managed and updated by the Google team themselves.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为你的集群选择一个名称和区域。你还可以选择节点的机器类型（实例大小）和集群中的节点数量（集群大小）。你还会看到一个节点镜像选项，允许你为节点选择基础操作系统和机器镜像。主节点由谷歌团队自己管理和更新。
- en: Leave Stackdriver logging and Stackdriver monitoring checked. Click on Create,
    and in a few minutes, you'll have a new cluster ready for use.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保留**Stackdriver日志**和**Stackdriver监控**的选项。点击创建，几分钟后，你将有一个新的集群可以使用。
- en: You'll need `kubectl`, which is included with the Google SDK, to begin using
    your GKE cluster. Refer to [Chapter 1](446f901d-70fa-4ebe-be8a-0de14248f99c.xhtml),
    *Introduction to Kubernetes*, for details on installing the SDK. Once we have
    the SDK, we can configure `kubectl` and the SDK for our cluster using the steps
    outlined at [https://cloud.google.com/container-engine/docs/before-you-begin#install_kubectl](https://cloud.google.com/container-engine/docs/before-you-begin#install_kubectl).
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将需要`kubectl`，它包含在Google SDK中，来开始使用你的GKE集群。有关安装SDK的详细信息，请参考[第1章](446f901d-70fa-4ebe-be8a-0de14248f99c.xhtml)，*Kubernetes简介*。一旦拥有SDK，我们可以使用[https://cloud.google.com/container-engine/docs/before-you-begin#install_kubectl](https://cloud.google.com/container-engine/docs/before-you-begin#install_kubectl)中概述的步骤配置`kubectl`和SDK，以适应我们的集群。
- en: Azure Kubernetes Service
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure Kubernetes服务
- en: Another cloud-managed offering is Microsoft's **Azure Kubernetes Service** (**AKS**).
    AKS is really nice because it allows you to choose from industry standard tools
    such as Docker Swarm, Kubernetes, and Mesos. It then creates a managed cluster
    for you, but uses one of these toolsets as the foundation. The advantage is that
    you can still use the tool's native API and management tools, but leave the management
    of the cloud infrastructure to Azure.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个云托管的产品是微软的 **Azure Kubernetes 服务** (**AKS**)。AKS 非常棒，因为它允许你选择 Docker Swarm、Kubernetes
    和 Mesos 等行业标准工具。然后它为你创建一个托管的集群，但使用其中一个工具集作为基础。其优点是，你仍然可以使用该工具的原生 API 和管理工具，但将云基础设施的管理交给
    Azure。
- en: You can find out more about ACS at [https://azure.microsoft.com/en-us/services/container-service/](https://azure.microsoft.com/en-us/services/container-service/).
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下链接了解更多关于 ACS 的信息：[https://azure.microsoft.com/en-us/services/container-service/](https://azure.microsoft.com/en-us/services/container-service/)。
- en: ClusterHQ
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ClusterHQ
- en: ClusterHQ provides a solution for bringing stateful data into your containerized
    applications. They provide Flocker, a tool for managing persistent storage volumes
    with containers, and FlockerHub, which provides a storage repository for your
    data volumes.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: ClusterHQ 提供了一种将有状态数据引入容器化应用程序的解决方案。它们提供了 Flocker，这是一个用于管理持久存储卷与容器的工具，以及 FlockerHub，它为您的数据卷提供了一个存储库。
- en: Portworx
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Portworx
- en: Portworx is another player in the storage space. It provides solutions for bringing
    persistence storage to your containers. Additionally, it has features for snapshotting,
    encryption, and even multi-cloud replication.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Portworx 是另一个在存储领域的参与者。它提供将持久化存储引入容器的解决方案。此外，它还具备快照、加密，甚至是多云复制等功能。
- en: Please refer to the Portworx website for more information: [https://portworx.com/](https://portworx.com/).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如需了解更多信息，请参考 Portworx 网站：[https://portworx.com/](https://portworx.com/)。
- en: Shippable
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Shippable
- en: Shippable is a continuous integration, continuous deployment, and release automation
    platform that has built-in support for a variety of modern container environments.
    The product touts support for any language with a uniform support for packaging
    and test.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: Shippable 是一个持续集成、持续部署和发布自动化平台，内置支持多种现代容器环境。该产品宣称支持任何语言，并提供统一的打包和测试支持。
- en: Please refer to the Shippable website for more information: [https://app.shippable.com/](https://app.shippable.com/).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如需了解更多信息，请参考 Shippable 网站：[https://app.shippable.com/](https://app.shippable.com/)。
- en: Twistlock
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Twistlock
- en: Twistlock.io is a vulnerability and hardening tool that's tailor-made for containers.
    It provides the ability to enforce policies, hardens according to CIS standards,
    and scans images in any popular registry for vulnerabilities. It also provides
    scan integration with popular CI/CD tools and RBAC solutions for many orchestration
    tools such as Kubernetes.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: Twistlock.io 是一款专为容器量身定制的漏洞扫描和硬化工具。它提供了执行策略、根据 CIS 标准进行硬化，并扫描任何流行注册表中的镜像漏洞的能力。它还与流行的
    CI/CD 工具和许多编排工具（如 Kubernetes）提供了 RBAC 解决方案的扫描集成。
- en: Please refer to the Twistlock website for more information: [https://www.twistlock.com/](https://www.twistlock.com/).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如需了解更多信息，请参考 Twistlock 网站：[https://www.twistlock.com/](https://www.twistlock.com/)。
- en: Aqua Sec
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Aqua Sec
- en: Aqua Sec is another security tool that provides a variety of features. Image
    scanning with popular registries, policy enforcement, user access control, and
    container hardening are all covered. Additionally, Aqua Sec has some interesting
    functionality in network segmentation.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: Aqua Sec 是另一种安全工具，提供多种功能。包括与流行注册表的镜像扫描、策略执行、用户访问控制以及容器强化等功能。此外，Aqua Sec 还具有网络分段等有趣的功能。
- en: Please refer to the Aqua's website for more information: [https://www.aquasec.com/](https://www.aquasec.com/).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如需了解更多信息，请参考 Aqua 网站：[https://www.aquasec.com/](https://www.aquasec.com/)。
- en: Mesosphere (Kubernetes on Mesos)
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Mesosphere（Kubernetes on Mesos）
- en: Mesosphere itself is building a commercially supported product around the open
    source Apache Mesos project. Apache Mesos is a cluster management system that
    offers scheduling and resource sharing, a bit like Kubernetes itself, but at a
    much higher level. The open source project is used by several well-known companies,
    such as Twitter and Airbnb.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: Mesosphere 本身正在围绕开源的 Apache Mesos 项目构建一款商业化支持的产品。Apache Mesos 是一个集群管理系统，提供调度和资源共享，类似于
    Kubernetes，但层次更高。该开源项目被多家知名公司使用，如 Twitter 和 Airbnb。
- en: 'You can find out more information about the Mesos OS project and the Mesosphere
    offerings at the following sites:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下网站找到有关 Mesos OS 项目和 Mesosphere 产品的信息：
- en: '[http://mesos.apache.org/](http://mesos.apache.org/)'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://mesos.apache.org/](http://mesos.apache.org/)'
- en: '[https://mesosphere.com/](https://mesosphere.com/)'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://mesosphere.com/](https://mesosphere.com/)'
- en: Mesos, by its nature, is modular, and allows the use of different frameworks
    for a variety of platforms. A Kubernetes framework is now available, so we can
    take advantage of the cluster management in Mesos while still maintaining the
    useful application-level abstractions in K8s. Refer to the following link for
    more information: [https://github.com/kubernetes-incubator/kube-mesos-framework](https://github.com/kubernetes-incubator/kube-mesos-framework).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: Mesos本质上是模块化的，允许为各种平台使用不同的框架。现在有了Kubernetes框架，我们可以在保持K8s应用级抽象的同时，利用Mesos中的集群管理。有关更多信息，请参阅以下链接：[https://github.com/kubernetes-incubator/kube-mesos-framework](https://github.com/kubernetes-incubator/kube-mesos-framework)。
- en: Deis
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Deis
- en: The Deis project provides an open source **Platform as a Service** (**PaaS**)
    solution based on and around Kubernetes. This allows companies to deploy their
    own PaaS on-premise or on the public cloud. Deis provides tools for application
    composition and deployment, package management (at the pod level), and service
    brokering.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: Deis项目提供了一个基于Kubernetes的开源**平台即服务**（**PaaS**）解决方案。这使得公司可以在本地或公有云上部署自己的PaaS。Deis提供应用组合和部署工具、包管理（在Pod级别）以及服务代理。
- en: OpenShift
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OpenShift
- en: Another PaaS solution is OpenShift from Red Hat. The OpenShift platform uses
    the Red Hat Atomic platform as a secure and slim OS for running containers. In
    version 3, Kubernetes was added as the orchestration layer for all container operations
    on your PaaS. This is a great combination for managing PaaS installations at a
    large scale.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种PaaS解决方案是Red Hat的OpenShift。OpenShift平台使用Red Hat Atomic平台作为运行容器的安全、精简操作系统。在版本3中，Kubernetes作为所有容器操作的编排层被添加到PaaS中。这是一个用于大规模管理PaaS安装的绝佳组合。
- en: More information on OpenShift can be found at [https://enterprise.openshift.com/.](https://enterprise.openshift.com/)
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 有关OpenShift的更多信息，请访问[https://enterprise.openshift.com/.](https://enterprise.openshift.com/)
- en: Summary
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we left a few breadcrumbs to guide you on your continuing journey
    with Kubernetes. You should have a solid set of production characteristics to
    get you started. There is a wide community in both the Docker and Kubernetes worlds.
    There are also a few additional resources that we provided if you need a friendly
    face along the way.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们留下了一些线索，帮助你在继续使用Kubernetes的旅程中前进。你应该已经掌握了一些生产特征，以帮助你起步。Docker和Kubernetes的社区都非常庞大。如果你在过程中需要一些帮助，我们也提供了一些额外的资源。
- en: By now, you have seen the full spectrum of container operations with Kubernetes.
    You should be more confident in how Kubernetes can streamline the management of
    your container deployments and how you can plan to move containers off developer
    laptops and onto production servers. Now get out there and start shipping your
    containers!
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经了解了Kubernetes中容器操作的全貌。你应该对Kubernetes如何简化容器部署管理以及如何规划将容器从开发者的笔记本转移到生产服务器上充满信心。现在，出去吧，开始部署你的容器！
- en: Questions
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What are some of the key characteristics of production systems?
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生产系统的一些关键特征是什么？
- en: What are two examples of third-party monitoring systems?
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有哪些第三方监控系统的示例？
- en: Which tools can help you build Infrastructure as Code?
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哪些工具可以帮助你构建基础设施即代码？
- en: What is RBAC?
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是RBAC？
- en: What limits can you set in a Kubernetes cluster?
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在Kubernetes集群中设置哪些限制？
- en: In which dimensions can constraints be set?
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在哪些维度上设置约束？
- en: Which technology should be used to secure communication within a cluster?
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应该使用哪种技术来确保集群内的通信安全？
- en: Further reading
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: The Kubernetes project is an open source effort, so there is a broad community
    of contributors and enthusiasts. One great resource in order to find more assistance is
    the Kubernetes Slack channel: [http://slack.kubernetes.io/](http://slack.kubernetes.io/).
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes项目是一个开源努力，因此有一个广泛的贡献者和爱好者社区。为了获得更多帮助，一个很好的资源是Kubernetes的Slack频道：[http://slack.kubernetes.io/](http://slack.kubernetes.io/)。
- en: There is also a Kubernetes group on Google groups. You can join it at [https://groups.google.com/forum/#!forum/kubernetes-users](https://groups.google.com/forum/#!forum/kubernetes-users).
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: Google Groups上也有一个Kubernetes小组。你可以通过[https://groups.google.com/forum/#!forum/kubernetes-users](https://groups.google.com/forum/#!forum/kubernetes-users)加入。
- en: 'If you enjoyed this book, you can find more of my articles, how-tos, and various
    musings on my blogs and Twitter page:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢这本书，你可以在我的博客和Twitter页面找到更多的文章、操作指南和各种想法：
- en: '[https://medium.com/@grizzbaier](https://medium.com/@grizzbaier)'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://medium.com/@grizzbaier](https://medium.com/@grizzbaier)'
- en: '[https://twitter.com/grizzbaier](https://twitter.com/grizzbaier)'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://twitter.com/grizzbaier](https://twitter.com/grizzbaier)'

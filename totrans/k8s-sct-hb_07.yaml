- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Challenges and Risks in Managing Secrets
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理 Secrets 的挑战与风险
- en: Managing Secrets within a Kubernetes environment is a critical component of
    safeguarding sensitive information, such as API keys, passwords, and credentials.
    Effectively managing Secrets can help prevent unauthorized access to crucial information
    and ensure the proper functioning of services within a Kubernetes cluster. However,
    this task comes with its own set of challenges and potential security risks that
    need to be properly addressed. In this chapter, we will explore various challenges
    and risks associated with managing Secrets in Kubernetes and discuss mitigation
    strategies to enhance the security of your Secrets.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 环境中管理 Secrets 是保护敏感信息（如 API 密钥、密码和凭据）的关键组成部分。有效管理 Secrets 可以帮助防止未经授权访问重要信息，并确保
    Kubernetes 集群中服务的正常运行。然而，这项任务也伴随着一系列挑战和潜在的安全风险，需要得到妥善处理。在本章中，我们将探讨管理 Kubernetes
    中 Secrets 的各种挑战和风险，并讨论缓解策略，以增强 Secrets 的安全性。
- en: By the end of this chapter, you will have a comprehensive understanding of the
    challenges and risks associated with Secrets management in Kubernetes. More importantly,
    you will have learned practical strategies to mitigate these risks, enabling you
    to manage Secrets in a secure and efficient manner within your Kubernetes environment.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将全面了解与 Kubernetes 中 Secrets 管理相关的挑战和风险。更重要的是，您将学到实际的策略来减轻这些风险，从而能够在
    Kubernetes 环境中以安全高效的方式管理 Secrets。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Understanding Kubernetes Secrets and their security risks
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 Kubernetes Secrets 及其安全风险
- en: Challenges and risks in different phases of Secrets management
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同阶段管理 Secrets 时的挑战和风险
- en: Mitigation strategies for security risks
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全风险的缓解策略
- en: This information will empower you to effectively navigate the complexities of
    Secrets management in Kubernetes, ensuring the confidentiality and integrity of
    sensitive data, and ultimately enhancing the overall security of you Kubernetes
    applications.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这些信息将使您能够有效应对 Kubernetes 中 Secrets 管理的复杂性，确保敏感数据的机密性和完整性，并最终增强您 Kubernetes 应用的整体安全性。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow along with the content of this chapter and implement the strategies
    and practices discussed, you will need the following technologies and installations:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本章内容并实施所讨论的策略和实践，您需要以下技术和安装：
- en: '**Kubernetes cluster**: You will need a working Kubernetes cluster to manage
    Secrets within the environment. You can use a managed Kubernetes service such
    as **Amazon Elastic Kubernetes Service** (**Amazon EKS**), **Azure Kubernetes
    Service** (**AKS**), or **Google Kubernetes Engine** (**GKE**) to set up a local
    cluster using minikube or Kind.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kubernetes 集群**：您将需要一个工作中的 Kubernetes 集群来管理环境中的 Secrets。您可以使用托管的 Kubernetes
    服务，如 **Amazon Elastic Kubernetes Service**（**Amazon EKS**）、**Azure Kubernetes
    Service**（**AKS**）或 **Google Kubernetes Engine**（**GKE**），或者使用 minikube 或 Kind
    设置本地集群。'
- en: '**kubectl**: This is the Kubernetes command-line tool that allows you to interact
    with your Kubernetes cluster. It’s essential for deploying and managing resources
    within your cluster.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**kubectl**：这是 Kubernetes 命令行工具，可以让您与 Kubernetes 集群进行交互。它是部署和管理集群资源的必备工具。'
- en: '**Secrets management tools**: A basic understanding of how to manage Secrets
    using internal or external tools, or familiarity with tools such as HashiCorp
    Vault, CyberArk, AWS Secrets Manager, Azure Key Vault, and GCP Secret Manager
    is required. Additionally, it’s expected that you will revisit this chapter for
    reference after reading *Chapters 8*, *9*, and *10*.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Secrets 管理工具**：需要具备如何使用内部或外部工具管理 Secrets 的基本了解，或熟悉如 HashiCorp Vault、CyberArk、AWS
    Secrets Manager、Azure Key Vault 和 GCP Secret Manager 等工具。此外，建议您在阅读 *第 8 章*、*第
    9 章* 和 *第 10 章* 后，重新阅读本章作为参考。'
- en: Grasping the complexities of Secrets management systems
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 掌握 Secrets 管理系统的复杂性
- en: 'Secrets management systems evolve from *simple tools to complex entities*,
    facing unique challenges and risks along the way. This journey encompasses a variety
    of phases:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Secrets 管理系统从 *简单工具到复杂实体* 发展，过程中面临独特的挑战和风险。这个过程包括多个阶段：
- en: Setting up a Secrets management system
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 Secrets 管理系统
- en: Implementing granular access control
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施细粒度访问控制
- en: Integrating with directory services
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与目录服务集成
- en: Tackling cross-cutting concerns such as resilience, availability, and auditing
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决跨领域的关注点，如弹性、可用性和审计
- en: Aligning with compliance and regulation
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 符合合规性和监管要求
- en: In the initial phase of a Secrets management system, the primary challenge is
    setting up a basic structure with secure storage and encryption. At this stage,
    access control is limited to exclusive administrative access, and the primary
    security risk involves the basics of secure storage and encryption. The challenge
    here is to establish a clear delineation of who has administrative access to Secrets.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在Secrets管理系统的初始阶段，主要挑战是建立一个具有安全存储和加密的基本结构。在这一阶段，访问控制仅限于专属的管理访问，主要的安全风险涉及安全存储和加密的基本问题。这里的挑战是明确划分谁有管理员访问Secrets的权限。
- en: As the system expands to accommodate users and service callers, the challenge
    becomes more nuanced. Implementing granular access control is essential; this
    must be done without creating security gaps. This phase also introduces authentication
    risks, especially in managing both human and machine or service authentication.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 随着系统的扩展以适应用户和服务调用者，挑战变得更加复杂。实施细粒度访问控制至关重要；这一点必须在不造成安全漏洞的情况下完成。此阶段还引入了认证风险，特别是在管理人工认证与机器或服务认证时。
- en: The next phase involves integration with various platforms such as **Active
    Directory**, **Lightweight Directory Access Protocol** (**LDAP**), or **specific
    operators**. This introduces new challenges and risks. The integration challenge
    involves ensuring seamless integration without creating new vulnerabilities. There
    is also a risk associated with *data synchronization*, especially in maintaining
    data integrity during synchronization with systems such as LDAP. *Delegated authorization*,
    which is the management and securing of delegated authorization to other systems,
    poses another challenge.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 下一阶段涉及与各种平台的集成，如**活动目录**、**轻量级目录访问协议**（**LDAP**）或**特定操作符**。这带来了新的挑战和风险。集成挑战包括确保无缝集成而不产生新的漏洞。同步数据时，尤其是在与像LDAP这样的系统进行同步时，*数据同步*也存在风险，特别是在保持数据完整性方面。*委托授权*，即将授权委托给其他系统并确保其安全，也提出了另一个挑战。
- en: The fourth phase introduces usability features, resilience, availability, and
    auditing. In this phase, challenges include securely encrypting and accessing
    remote backups, designing a robust recovery plan for **disaster recovery** (**DR**),
    and implementing secure and compliant tracking for auditing. Balancing availability
    with security also becomes a risk that needs to be addressed.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 第四阶段引入了可用性功能、弹性、可用性和审计。在这一阶段，挑战包括安全地加密和访问远程备份，设计强大的灾难恢复计划（**DR**），以及实施安全和合规的审计跟踪。平衡可用性与安全性也成为需要解决的风险。
- en: Finally, the fifth phase involves compliance with regulations. The challenge
    here is to align with regulations without hindering functionality. There is also
    a long-term storage risk associated with managing legal requirements for long-term
    storage. This phase is crucial for ensuring the continued legality and security
    of the Secrets management system.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，第五阶段涉及遵守法规。这里的挑战是与法规对接，而不妨碍功能性。还存在与管理长期存储的法律要求相关的长期存储风险。这个阶段对于确保Secrets管理系统的持续合法性和安全性至关重要。
- en: The Secrets management system’s development journey brings new challenges and
    risks at every stage. From the initial focus on basic security to complex integrations,
    usability enhancements, resilience, auditing, and compliance, each step adds complexity.
    Understanding these aspects is vital for managing Secrets, especially in environments
    such as Kubernetes, where Secrets management must be robust and flexible enough
    to meet various needs.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Secrets管理系统的开发历程在每个阶段都会带来新的挑战和风险。从最初关注基本安全到复杂的集成、可用性增强、弹性、审计和合规，每一步都增加了复杂性。理解这些方面对于管理Secrets至关重要，特别是在像Kubernetes这样的环境中，Secrets管理必须足够强大和灵活，以满足各种需求。
- en: General security risks in Secrets management
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 秘密管理中的一般安全风险
- en: After exploring the underlying mechanisms and complexities of Secrets management
    systems in the first section, we will now transition into a detailed examination
    of specific security risks that arise within this domain. This section delves
    into real-world challenges faced by organizations in managing Secrets. From the
    problem of single master keys to the growth and delegation of access control,
    and integration with other platforms, these challenges call for thoughtful strategies
    and solutions. Join us as we dissect these security risks, offering both insight
    into their intricacies and guidance on mitigation strategies.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一部分探讨了秘密管理系统的基本机制和复杂性之后，我们将转向详细审视这一领域内具体的安全风险。本部分深入探讨了组织在管理秘密时面临的实际挑战。从单一主密钥问题到访问控制的增长与委派，再到与其他平台的集成，这些挑战需要周密的策略和解决方案。跟随我们一起分析这些安全风险，提供对其复杂性的洞察，并给出缓解策略的指导。
- en: Secret zero
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 秘密零
- en: Secret zero refers to a scenario where all of your Secrets are under the protection
    of a single master key or ultimate secret that controls everything, like the proverbial
    “*keys to* *the kingdom*.”
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 秘密零指的是所有秘密都受到一个单一主密钥或最终秘密的保护，这个密钥控制着一切，就像传说中的“*王国的钥匙*”。
- en: Imagine storing all your passwords in the cloud, safeguarded by a solitary password.
    Then, to add convenience, you place that master password in a text file within
    the cloud. A hacker now only needs to discover or guess this one password to unlock
    everything. This master key is referred to as “*secret zero*.” It’s akin to placing
    all your eggs in one basket or locking all your keys in a drawer, with that drawer’s
    key in your pocket. Merely securing your Secrets isn’t enough; access to those
    Secrets must also be safeguarded.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下将所有密码存储在云端，并由一个单独的密码保护。然后，为了增加便利性，你将这个主密码放在云中的一个文本文件里。现在，黑客只需要发现或猜出这个密码，就能解锁一切。这个主密钥被称为“*秘密零*”。它就像是将所有鸡蛋放在一个篮子里，或者将所有钥匙锁在抽屉里，而抽屉的钥匙则在你口袋里。仅仅保护你的秘密是不够的；对这些秘密的访问也必须得到保护。
- en: This setup creates a significant attack point. This key, if compromised, can
    give unfettered access to an attacker, as it unlocks everything else. Imagine
    all of your various passwords and sensitive data locked behind a door, and the
    key to that door is left under the mat. This illustrates the gravity of secret
    zero.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这种设置会形成一个重要的攻击点。这个密钥如果被泄露，攻击者将可以不受限制地访问，因为它能解锁其他所有内容。想象一下，你所有的密码和敏感数据都被锁在一扇门后，而这扇门的钥匙就放在门垫下。这就是秘密零的严重性。
- en: Risks and challenges
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 风险与挑战
- en: 'Secret zero comes with some risks, and mitigating those risks is challenging:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 秘密零存在一些风险，缓解这些风险是具有挑战性的：
- en: '**Single point of failure (SPOF)**: The master key becomes a lucrative target
    for malicious actors. If they gain access to this one key, they gain access to
    everything.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单点故障（SPOF）**：主密钥成为恶意攻击者的诱人目标。如果他们获取了这个密钥，就能访问一切。'
- en: '**Complexity in managing the master secret**: Safeguarding this master secret
    becomes paramount and challenging, as its compromise could be catastrophic.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理主密钥的复杂性**：保护这个主密钥变得至关重要且富有挑战性，因为其泄露可能会带来灾难性的后果。'
- en: '**Potential for insider threat**: Employees or stakeholders with access to
    the master key might misuse it, knowingly or unknowingly.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**潜在的内部威胁**：拥有主密钥访问权限的员工或利益相关者可能会故意或无意地滥用该密钥。'
- en: '**Compliance issues**: Depending on regulatory environments, having a single
    master key might violate certain standards or best practices.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**合规问题**：根据不同的监管环境，拥有单一主密钥可能会违反某些标准或最佳实践。'
- en: Solutions to secret zero
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 秘密零的解决方案
- en: To enhance the security of the master key, one effective measure is the use
    of **multi-factor authentication** (**MFA**), which adds layers of security by
    requiring multiple forms of identification before granting access. Another strategy
    is *key splitting*, where the master key is broken into several pieces and stored
    separately, ensuring that compromising one piece doesn’t grant full access. Additionally,
    **hardware security modules** (**HSMs**) can be utilized to store the master key
    or its shards, adding a layer of physical protection against unauthorized access.
    Furthermore, **Shamir’s secret sharing** (**SSS**) offers another robust technique.
    This method efficiently distributes private information (the “*secret*”) among
    a group, ensuring that the secret cannot be revealed unless a quorum of the group
    acts together. Lastly, continuous monitoring for unauthorized access attempts,
    along with regular auditing of access logs, can help detect suspicious activities
    early.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为了增强主密钥的安全性，一项有效措施是使用**多因素认证**（**MFA**），它通过要求多种身份验证方式才能授权访问，增加了安全性。另一种策略是*密钥分割*，即将主密钥分成几部分并分开存储，确保泄露一部分不会导致完全访问。除此之外，**硬件安全模块**（**HSM**）可以用来存储主密钥或其碎片，增加了一层物理保护以防止未经授权的访问。此外，**夏密尔秘密共享**（**SSS**）提供了另一种强大的技术。这种方法高效地将私密信息（“*秘密*”）分配给一个小组，确保除非小组中的多数成员共同行动，否则秘密无法泄露。最后，持续监控未经授权的访问尝试，以及定期审计访问日志，有助于及早发现可疑活动。
- en: Also, for public cloud providers such as AWS, Azure, and GCP, the secret zero
    problem is generally non-existent, thanks to existing identity and access mechanisms
    that manage roles and permissions. But in on-premises or private cloud environments,
    the issue persists, necessitating measures to ensure a single secret can’t be
    stolen.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，对于像AWS、Azure和GCP这样的公共云提供商，由于现有的身份和访问机制管理角色和权限，秘密零问题通常不存在。但在本地或私有云环境中，问题依然存在，需要采取措施确保单一的秘密不会被窃取。
- en: Some vendors opt for methods such as machine authentication using an API key
    and other machine parameters such as CPU ID or IP address. But these can be compromised
    – API keys can be stolen, and parameters such as IP can be spoofed, leaving the
    secret zero problem unresolved.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一些供应商选择使用API密钥和其他机器参数（如CPU ID或IP地址）进行机器身份验证。但这些方法可能会受到攻击——API密钥可以被窃取，IP等参数可能会被伪造，从而无法解决秘密零问题。
- en: Secret access ballooning
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 秘密访问膨胀
- en: '*Secret access ballooning* refers to the unwarranted expansion of access to
    secret information within IT organizations. Initially, Secrets might be accessible
    only by a specific LDAP group; however, over time, the group may grow in size
    or even include other subgroups, ballooning from a mere handful of individuals
    to hundreds. This can happen when an external engineer requires one-time access
    to certain Secrets, but instead of granting temporary access, someone adds an
    entire group or marks individuals as admins, causing the group to explosively
    grow in number. The next examples illustrate how this can occur:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*秘密访问膨胀*指的是IT组织中对秘密信息访问的无理扩展。最初，秘密可能只由一个特定的LDAP组访问；然而，随着时间的推移，该组的规模可能会扩大，甚至包括其他子组，从而将访问人数从最初的几个个体膨胀到数百人。这种情况可能发生在外部工程师需要一次性访问某些秘密时，但并没有仅授予临时访问权限，而是某人将整个组添加为管理员，导致组人数急剧增加。以下示例说明了这种情况的发生：'
- en: '**Example of group growth**: An LDAP group that initially consisted of 10 individuals
    grew to 400 people, including various subgroups, losing its granularity and specificity'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组增长示例**：一个最初由10人组成的LDAP组，增长到400人，包含多个子组，失去了其细粒度和特定性。'
- en: '**Example of admin group expansion**: External engineers are added as admins
    for temporary access but remain in the group, causing the admin group to grow
    exponentially'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理员组扩展示例**：外部工程师被添加为临时管理员，但仍然留在该组中，导致管理员组呈指数级增长。'
- en: Risks and challenges
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 风险与挑战
- en: 'Indiscriminate expansion of access to Secrets carries escalating risks over
    time:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 对秘密访问的无差别扩展会随着时间的推移带来不断增加的风险：
- en: '**Loss of granular control**: The growth of groups from 10 to 400 people, as
    in the first example, leads to a loss of precise control over who has access to
    Secrets'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**细粒度控制丧失**：如第一个示例中所示，从10人增长到400人，导致对谁有权访问秘密失去精确控制。'
- en: '**Increased exposure to threats**: The addition of external engineers as permanent
    admins increases the risk of accidental disclosure or misuse of Secrets'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**暴露于威胁的增加**：将外部工程师增加为永久管理员会增加秘密被意外披露或滥用的风险。'
- en: '**Complexity in management**: Managing ballooning access rights becomes increasingly
    complex and time-consuming'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理复杂性**：管理膨胀的访问权限变得越来越复杂且耗时。'
- en: '**Compliance issues**: The explosive growth in access may lead to violations
    of compliance regulations'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**合规性问题**：访问权限的爆炸性增长可能导致违反合规性规定。'
- en: Solutions to secret access ballooning
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解决秘密访问膨胀问题
- en: In order to manage the risk of ballooning secret access, several strategies
    can be employed. One effective measure is the implementation of strict group policies,
    such as preventing subgroups within admin groups, as this can help to maintain
    control over secret access. Furthermore, regularly scanning access rights and
    group memberships, perhaps every few weeks or months, can help identify any instances
    of ballooning access before they become problematic. In addition, the implementation
    of **role-based access control** (**RBAC**) ensures that users only have access
    to information necessary for their roles, which can further reduce the risk of
    ballooning access. And also, **just-in-time** (**JIT**) access is a security approach
    that restricts access to applications or systems to specific, needed times. Step-up
    authentication, on the other hand, mandates that users authenticate at a level
    equal to or higher than the policy protecting the resource demands.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为了管理日益增加的秘密访问风险，可以采取几种策略。一项有效的措施是实施严格的组策略，例如防止在管理员组内创建子组，因为这有助于保持对秘密访问的控制。此外，定期扫描访问权限和组成员身份，可能每隔几周或几个月一次，可以帮助在问题变得严重之前识别出访问权限膨胀的情况。此外，实施**基于角色的访问控制**（**RBAC**）可确保用户仅能访问与其角色相关的信息，从而进一步减少秘密访问膨胀的风险。同时，**即时访问**（**JIT**）是一种安全方法，它限制了对应用程序或系统的访问，仅在特定的、需要的时间段内进行。另一方面，逐步认证要求用户进行与保护资源需求相等或更高级别的认证。
- en: Finally, tracking the growth of access as metrics, reflecting on any increases,
    and comparing these metrics to established standards can serve as early warning
    signs of ballooning access. This can enable organizations to take action before
    ballooning access becomes a security risk.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将访问增长作为衡量指标进行追踪，反映任何增加的情况，并将这些指标与既定标准进行对比，可以作为访问膨胀的早期预警信号。这可以使组织在访问膨胀成为安全风险之前采取行动。
- en: Secret valet parking
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 秘密代客泊车
- en: In modern technology environments, the concept of *secret valet parking* illustrates
    a common delegation model used in managing Secrets. Similar to entrusting your
    car’s keys to a valet, Secrets are handed over to an integrated subsystem, which
    fetches the Secrets onto the host’s filesystem for specific workloads or jobs.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代技术环境中，*秘密代客泊车*概念展示了一种常见的委托管理模式，用于管理机密信息。类似于将车钥匙交给代客泊车员，秘密被交给一个集成的子系统，该子系统将秘密传输到主机的文件系统中，以供特定工作负载或任务使用。
- en: For example, in the context of **continuous integration** (**CI**) systems,
    this might involve fetching all Secrets necessary for building, testing, and deploying
    code. While this approach simplifies workflows, it must be managed with care to
    ensure that Secrets are securely deleted once their purpose is fulfilled, akin
    to a valet returning car keys after parking a vehicle.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在**持续集成**（**CI**）系统中，这可能涉及获取构建、测试和部署代码所需的所有秘密。虽然这种方法简化了工作流程，但必须小心管理，确保在秘密的用途完成后将其安全删除，就像代客泊车员停车后归还车钥匙一样。
- en: This delicate balance between convenience and security reflects the nuanced
    challenges of Secrets management and provides a vivid illustration of the trust,
    responsibility, and care required in handling critical assets such as Secrets.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这种便利性与安全性之间的微妙平衡反映了机密管理的复杂挑战，并生动地展示了在处理如秘密等关键资产时所需的信任、责任和小心。
- en: Risks and challenges
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 风险与挑战
- en: 'Significant concerns and risks come along with the concept of secret valet
    parking:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 与秘密代客泊车概念相关的主要关注点和风险：
- en: '**Delegated identity issue**: Trusting a subsystem to manage Secrets correctly
    requires faith in that subsystem’s ability to securely delete on-file Secrets
    when no longer needed. Failure to do so leaves Secrets exposed.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**委托身份问题**：信任子系统正确管理秘密需要信任该子系统在不再需要时能够安全删除文件中的秘密。如果未能做到这一点，秘密将暴露。'
- en: '**Lack of enforcement mechanisms**: Without proper checks, there is no guarantee
    that the integrated system will successfully delete Secrets post-usage, leading
    to potential unauthorized access.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缺乏强制执行机制**：如果没有适当的检查，无法保证集成系统在使用后成功删除秘密，从而可能导致未授权访问。'
- en: '**Blast radius concerns**: If Secrets are fetched and stored for the entire
    host rather than only when needed, it can create a risk of widespread exposure
    if the host or a particular module is compromised.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**爆炸范围问题**：如果密钥被提取并存储在整个主机上，而不仅仅是当需要时提取，它可能在主机或特定模块被攻击时导致广泛曝光的风险。'
- en: Solutions to secret valet parking
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 秘密代客停车的解决方案
- en: To mitigate the risks associated with secret valet parking, several strategies
    can be employed. One effective approach is to implement dynamic Secrets, which
    are generated on demand and valid only for a short duration, and fetching Secrets
    only when required by specific workloads. After use, these Secrets are invalidated,
    thus minimizing the risk of unauthorized access and exposure.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为了降低与秘密代客停车相关的风险，可以采取几种策略。一个有效的方法是实施动态密钥，这些密钥按需生成，并且仅在短时间内有效，只有在特定工作负载需要时才提取密钥。使用后，这些密钥会被失效，从而最小化未授权访问和泄露的风险。
- en: A further approach is a *monitoring and verification system* that continuously
    observes and confirms the deletion of Secrets, ensuring compliance with expected
    secret handling protocols. Another approach involves *fetching Secrets* only when
    they are required by specific workloads. This minimizes the potential blast radius,
    reducing unnecessary exposure and the risk of unauthorized access. Lastly, *conducting
    regular reviews and audits* of Secrets management processes can ensure adherence
    to best practices and identify potential improvements in how Secrets are managed.
    By combining these strategies, organizations can reduce the risk associated with
    secret valet parking and improve their overall security posture.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是建立一个*监控和验证系统*，该系统持续观察并确认秘密的删除，确保符合预期的秘密处理协议。另一种方法是*仅在特定工作负载需要时提取秘密*。这可以最小化潜在的爆炸范围，减少不必要的暴露以及未授权访问的风险。最后，*定期进行秘密管理流程的审查和审计*可以确保遵守最佳实践，并识别在管理秘密方面的潜在改进。通过结合这些策略，组织可以减少与秘密代客停车相关的风险，并改善其整体安全态势。
- en: Secret sprawl
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 秘密泄露
- en: When referring to *secret sprawl*, we are discussing the widespread distribution
    of Secrets across various parts of our infrastructure. These Secrets are scattered
    and located in numerous places, leading to significant challenges in both management
    and auditing for compliance. Typically, you might find a database username and
    password that has been hardcoded into an application’s source code. It could also
    be present in plaintext within a configuration file, in configuration management,
    in version control, in a Dropbox account, or in a wiki. Essentially, these Secrets
    are dispersed throughout our infrastructure, existing in various locations.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当提到*秘密泄露*时，我们指的是秘密在我们基础设施各个部分的广泛分布。这些秘密被分散并存储在许多地方，导致在管理和审计合规性时面临重大挑战。通常，您可能会发现一个数据库的用户名和密码被硬编码在应用程序的源代码中。它也可能以明文形式出现在配置文件中、配置管理中、版本控制中、Dropbox账户中或Wiki中。从本质上讲，这些秘密分散在整个基础设施中，存在于不同的位置。
- en: Risks and challenges
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 风险与挑战
- en: 'Reading the preceding content is enough to start identifying things that can
    go wrong when Secrets are scattered throughout our infrastructure, including these
    aspects:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读前面的内容就足以开始识别当秘密分散在整个基础设施中时可能出错的地方，包括以下几个方面：
- en: '**Lack of knowledge**: Secrets are everywhere, and tracking them becomes almost
    impossible'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缺乏知识**：秘密无处不在，追踪它们几乎不可能。'
- en: '**Limited access control**: Traditional systems don’t maintain detailed logs
    or provide enough control over access, leading to security risks'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**访问控制有限**：传统系统没有保持详细日志，也没有提供足够的访问控制，导致安全风险。'
- en: '**Breach response**: In the event of a breach, finding the origin and dealing
    with it becomes complex, especially if Secrets are hardcoded in application sources'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**泄露响应**：在发生泄露时，找出源头并处理问题变得复杂，尤其是当秘密被硬编码在应用程序源代码中时。'
- en: The solution to secret sprawl
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 秘密泄露问题的解决方案
- en: The solution lies in *centralization*. By moving Secrets to a single location
    with tight controls, such as HashiCorp Vault and CyberArk, their management becomes
    more secure. Access can be restricted as needed, and audit logs provide detailed
    information, simplifying the response to breaches and the overall life cycle of
    credential management.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案在于*集中化*。通过将密钥集中到一个具有严格控制的单一位置（例如HashiCorp Vault和CyberArk），其管理变得更加安全。可以根据需要限制访问，并且审计日志提供详细信息，简化了对泄露的响应以及凭证管理的整个生命周期。
- en: Secret island
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 秘密岛屿
- en: A *secret island* refers to a tool or platform equipped with built-in components
    for managing Secrets, access control, audit, compliance, and so on, but lacks
    interoperability with other tools or centralized management of policies and data.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '*秘密岛屿*指的是一种工具或平台，配备了用于管理密钥、访问控制、审计、合规性等的内置组件，但与其他工具缺乏互操作性，也没有集中管理策略和数据。'
- en: Risks and challenges
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 风险与挑战
- en: 'The following risks and challenges can manifest when we are utilizing a tool
    with the aforementioned characteristics:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用具有上述特征的工具时，以下风险和挑战可能会显现：
- en: '**Isolation**: It isolates subsystems, making overall Secrets management harder.
    Without fine-grained access control or secure storage, you must handle Secrets
    piecemeal without centralized oversight.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**隔离**：它将子系统隔离开来，使得整体密钥管理变得更加困难。如果没有细粒度的访问控制或安全存储，你必须处理零散的密钥，而没有集中式的监督。'
- en: '**Lack of consolidation**: With security islands, you lose the ability to consolidate
    audit and control. Managing subsystems becomes chaotic, lacking a unified view
    of the security landscape.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缺乏整合**：在安全岛屿中，你失去了整合审计和控制的能力。管理子系统变得混乱，缺乏对安全环境的统一视图。'
- en: '**Scalability issues**: For instance, using different Secrets for deploying
    applications in Jenkins CI/CD pipelines and AWS may work initially but can become
    unwieldy and insecure as complexity increases.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性问题**：例如，在Jenkins CI/CD流水线和AWS中使用不同的密钥来部署应用程序，最初可能会有效，但随着复杂性增加，可能变得难以管理且不安全。'
- en: '**Human security island**: Also known as *shadow IT*, when security becomes
    too complicated, teams may bypass official policies, further worsening the security
    posture. *For example,* imagine different credentials for staging and production
    in Jenkins, along with AWS Secrets Manager for database Secrets and API keys.
    Scaling this setup becomes a struggle, with difficulties in delegation, management,
    and audit. Adding another team, multiple clouds, or dealing with key consistency
    only compounds the problem.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**人类安全岛屿**：也叫做*影子IT*，当安全变得过于复杂时，团队可能会绕过官方政策，进一步恶化安全态势。*例如*，想象在Jenkins中为暂存和生产环境使用不同的凭证，同时使用AWS
    Secrets Manager管理数据库密钥和API密钥。扩展这种配置变得十分困难，尤其是在委派、管理和审计方面。增加另一个团队、多个云平台，或者处理密钥一致性问题，只会加剧这一问题。'
- en: Now, let’s look at a solution to address this challenge.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一下应对这一挑战的解决方案。
- en: Solutions to secret islands
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解决秘密岛屿问题的方案
- en: To mitigate the risks associated with secret islands, it is critical to implement
    centralized Secrets management. Centralizing Secrets management enables organizations
    to enforce consistent policies, streamline operations, and gain a clear view of
    their overall security landscape. Additionally, developing standardized security
    protocols and mandating their adherence across all secret islands can ensure consistency
    and reduce vulnerabilities. Utilizing integration tools and APIs that allow different
    secret islands to communicate and interact can help break down silos, leading
    to a more unified approach. Regular security audits and continuous monitoring
    are essential for detecting and rectifying inconsistencies and vulnerabilities
    across secret islands. Moreover, fostering communication and collaboration between
    the teams responsible for managing the secret islands can further enhance the
    organization’s overall security posture. Together, these mitigation strategies
    can help organizations effectively manage challenges posed by secret islands.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 为了降低与秘密岛屿相关的风险，实施集中式密钥管理至关重要。集中管理密钥使组织能够执行一致的策略，简化操作，并清晰地了解其整体安全环境。此外，制定标准化的安全协议，并强制各个秘密岛屿遵循，可以确保一致性并减少漏洞。利用允许不同秘密岛屿进行沟通和互动的集成工具和API，可以帮助打破孤岛，推动更加统一的方法。定期进行安全审计和持续监控对于发现和纠正秘密岛屿中的不一致性和漏洞至关重要。此外，促进管理秘密岛屿的团队之间的沟通与协作，能够进一步增强组织的整体安全态势。通过这些缓解策略，组织能够有效应对秘密岛屿带来的挑战。
- en: In the critical area of managing Secrets, this part delves into several distinct
    but interconnected challenges and risks. From the problem of *secret zero*, where
    a SPOF can compromise an entire system, to the issues of *secret access ballooning*,
    where control over access can grow unwieldy, the complexities are multifaceted.
    *Secret valet parking* highlights trust and delegation issues in integrated systems,
    while *secret sprawl* and *secret islands* explore difficulties in maintaining
    cohesiveness and interoperability in increasingly complex environments. Collectively,
    these topics underline the nuanced and often delicate balance required to handle
    Secrets securely and efficiently, emphasizing the need for strategic planning,
    vigilance, and robust solutions.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在管理秘密的关键领域，本部分深入探讨了几个既独立又相互关联的挑战和风险。从*秘密零*的问题，其中单点故障（SPOF）可能会危及整个系统，到*秘密访问膨胀*的问题，其中对访问控制的管理可能变得难以掌控，这些复杂性具有多面性。*秘密代客泊车*突出了集成系统中的信任与委托问题，而*秘密蔓延*和*秘密孤岛*则探讨了在日益复杂的环境中保持系统一致性和互操作性的问题。总的来说，这些话题强调了处理秘密时所需的细致且常常脆弱的平衡，突出了战略规划、警觉性和强大解决方案的必要性。
- en: Having navigated through the broader landscape of challenges and risks associated
    with general Secrets management in the previous section, we now narrow our focus
    to the specific context of Kubernetes (also known as K8s).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们已经概述了与一般秘密管理相关的广泛挑战和风险，现在我们将重点讨论 Kubernetes（也称为 K8s）环境中的具体问题。
- en: Challenges and risks in managing Secrets for Kubernetes
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理 Kubernetes 秘密的挑战和风险
- en: Kubernetes presents its unique set of challenges and risks in the realm of Secrets
    management. This section will dive into the specifics of managing Secrets within
    a Kubernetes environment, addressing the unique features and vulnerabilities of
    this widely used orchestration platform. Join us as we explore the intricacies
    of Kubernetes Secrets, recognizing both distinctive hurdles and tailored strategies
    for overcoming them.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 在秘密管理方面呈现出一系列独特的挑战和风险。本节将深入探讨在 Kubernetes 环境中管理秘密的具体细节，分析这一广泛使用的编排平台的独特特性和漏洞。请加入我们，一起探索
    Kubernetes 秘密的复杂性，认识到其中的独特难题和应对这些问题的定制策略。
- en: Before proceeding further, it is important to clarify certain concepts related
    to Kubernetes and Secrets management. Kubernetes provides a native resource type
    known as a “*secret*,” but utilizing Kubernetes’ native secret resource is not
    the only way to manage Secrets in a Kubernetes environment.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在进一步讨论之前，澄清一些与 Kubernetes 和秘密管理相关的概念是很重要的。Kubernetes 提供了一种名为“*秘密*”的原生资源类型，但使用
    Kubernetes 的原生秘密资源并不是在 Kubernetes 环境中管理秘密的唯一方式。
- en: 'In this section, we will discuss two different approaches to Secrets management
    within Kubernetes:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论 Kubernetes 中两种不同的秘密管理方法：
- en: '**Direct use of Kubernetes native Secrets**: This approach involves using Kubernetes’
    built-in secret resource as the primary mechanism for Secrets management.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**直接使用 Kubernetes 原生秘密**：这种方法涉及将 Kubernetes 内置的秘密资源作为秘密管理的主要机制。'
- en: '**Utilizing Kubernetes native Secrets for the final state**: In this approach,
    Kubernetes’ native secret resource is used as the final state for secret consumption
    within the Kubernetes platform. It is crucial to approach security risks from
    the perspective of Kubernetes as a platform.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**利用 Kubernetes 原生秘密作为最终状态**：这种方法使用 Kubernetes 的原生秘密资源作为 Kubernetes 平台内秘密消费的最终状态。从
    Kubernetes 作为平台的角度来看待安全风险至关重要。'
- en: 'Kubernetes’ native Secrets resources are stored in `etcd`, the primary datastore
    for Kubernetes objects. By default, these Secrets are encoded using `base64`;
    they are not encrypted, making them vulnerable to decoding by anyone with access
    to `etcd`. Risks also arise from unauthorized access to the cluster’s API server
    or to nodes that run workloads using these Secrets. To enhance security, Kubernetes
    allows the configuration of encryption at rest for `etcd`. For detailed instructions
    on enabling and configuring this encryption, please refer to the official Kubernetes
    documentation: *Encrypting Confidential Data at* *Rest* ([https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/](https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/)).'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 的原生 Secrets 资源存储在 `etcd` 中，这是 Kubernetes 对象的主要数据存储。默认情况下，这些 Secrets
    使用 `base64` 编码；它们没有加密，使得任何能够访问 `etcd` 的人都可以解码。未经授权访问集群的 API 服务器或运行使用这些 Secrets
    的工作负载的节点，也会带来风险。为了增强安全性，Kubernetes 允许为 `etcd` 配置静态加密。有关启用和配置此加密的详细说明，请参阅官方 Kubernetes
    文档：*加密静态数据* ([https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/](https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/))。
- en: Additionally, there are scenarios where external Secrets management systems
    directly supply Secrets to Kubernetes workloads at runtime. In such cases, the
    majority of security concerns are typically delegated to Secrets management tools,
    and the associated security risks can vary depending on specific circumstances.
    For more information on general security risks associated with Secrets management,
    please refer to the previous section.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有一些场景，其中外部 Secrets 管理系统在运行时直接将 Secrets 提供给 Kubernetes 工作负载。在这种情况下，大多数安全问题通常由
    Secrets 管理工具处理，相关的安全风险可能会根据具体情况有所不同。有关 Secrets 管理的通用安全风险的更多信息，请参阅上一节。
- en: Security risks to manage Kubernetes Secrets
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理 Kubernetes Secrets 的安全风险
- en: Kubernetes Secrets face several security risks, including exposure in the cluster’s
    API server or nodes. By default, Secrets are stored in `etcd`, the primary datastore
    for Kubernetes objects, encoded in `base64` but not encrypted. This makes them
    vulnerable to anyone with access to `etcd`. Additionally, unauthorized access
    to the cluster’s API server or nodes can lead to the exposure of Secrets.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes Secrets 面临多个安全风险，包括在集群的 API 服务器或节点中的暴露。默认情况下，Secrets 存储在 `etcd` 中，这是
    Kubernetes 对象的主要数据存储，使用 `base64` 编码，但没有加密。这使得任何可以访问 `etcd` 的人都可以轻松读取它们。此外，未经授权访问集群的
    API 服务器或节点也可能导致 Secrets 的暴露。
- en: Root exploits are another significant risk. Kubernetes does not send Secrets
    on a *need-to-know* basis. As a result, anyone with root access to any node can
    read any secret by impersonating the kubelet.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Root 利用是另一个重要的风险。Kubernetes 并不会按 *知情必要* 的原则发送 Secrets。因此，任何具有根权限的节点用户都可以通过伪装成
    kubelet 来读取任何秘密。
- en: Secrets are often exposed in Kubernetes manifests. They are commonly configured
    using JSON or YAML files, with the secret encoded in `base64`. If these files
    are shared or checked into a repo, the secret is compromised.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Secrets 通常会在 Kubernetes 清单中暴露。它们通常使用 JSON 或 YAML 文件配置，且密钥以 `base64` 编码。如果这些文件被共享或提交到仓库中，秘密就会被泄露。
- en: Generally, communication from the control plane to the worker kubelet uses the
    TLS model, but there is no native Kubernetes feature to encrypt data in transit
    across nodes. It is important to use Secrets within direct Pod consumption, instead
    of transferring Secrets in cases where they are not in transit.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，控制平面到工作节点 kubelet 的通信采用 TLS 模式，但 Kubernetes 没有原生功能加密跨节点传输的数据。重要的是在直接使用 Pod
    时使用 Secrets，而不是在不传输的情况下转移 Secrets。
- en: In Kubernetes, while the default Secrets management system allows for the use
    of RBAC to create custom roles and bindings, care must be taken to avoid granting
    overly broad permissions, such as “`*`” to all resources, including Secrets. Custom
    roles should be specifically tailored to control access to Secrets, defining who
    has the authority to view, create, edit, or delete them.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 中，虽然默认的 Secrets 管理系统允许使用 RBAC 创建自定义角色和绑定，但必须小心避免授予过于宽泛的权限，例如对所有资源包括
    Secrets 的 "`*`" 权限。自定义角色应专门设计用于控制对 Secrets 的访问，定义谁有权查看、创建、编辑或删除它们。
- en: Logging and auditing issues pose additional challenges. Once a secret is accessed,
    it can be logged in plaintext or transmitted to an untrusted party, making it
    vulnerable. Moreover, Kubernetes does not offer straightforward auditing or change
    management for Secrets.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 日志记录和审计问题带来了额外的挑战。一旦机密被访问，它可能以明文形式记录，或者被传输给不受信任的方，从而使其易受攻击。此外，Kubernetes 并未提供针对
    Secrets 的直接审计或变更管理功能。
- en: Finally, in Kubernetes, the absence of zero-trust mechanisms for secret access
    means that authorized personnel typically access Secrets in an unencrypted form.
    This situation indicates the necessity for a stricter access model. In such a
    model, even authorized personnel should handle Secrets in a manner that ensures
    safety for plaintext access, aligning with zero-trust principles that mandate
    verification at every stage.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在 Kubernetes 中，由于缺乏零信任机制，机密访问通常是以未加密的形式由授权人员访问。这种情况表明需要更严格的访问模型。在这种模型中，即使是授权人员也应以确保安全的方式处理
    Secrets，以符合零信任原则，即在每个阶段都进行验证。
- en: Mitigation strategies
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缓解策略
- en: In securing and managing Secrets within a Kubernetes environment, several strategies
    should be considered.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 环境中保护和管理机密信息时，应考虑多个策略。
- en: Primarily, utilizing a centralized secret store equipped with advanced security
    features is recommended for managing Kubernetes Secrets. This approach not only
    mitigates the risk of unauthorized access but also streamlines the management
    process and provides a comprehensive view of the security landscape. Popular tools
    for this purpose include HashiCorp Vault, CyberArk, AWS Secrets Manager, and Azure
    Key Vault.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，推荐使用具有先进安全功能的集中式机密存储来管理 Kubernetes Secrets。这种方法不仅可以减少未经授权访问的风险，还可以简化管理过程，并提供全面的安全态势视图。常用的工具包括
    HashiCorp Vault、CyberArk、AWS Secrets Manager 和 Azure Key Vault。
- en: 'Additionally, Kubernetes platform-specific configurations should be used to
    limit potential risk factors:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，应使用 Kubernetes 平台特定的配置来限制潜在的风险因素：
- en: 'Disable the root user of a Pod, like so:'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 禁用 Pod 的 root 用户，方法如下：
- en: '[PRE0]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Encrypting Secrets, both in transit and at rest, is imperative. Kubernetes native
    secret encryption or third-party tools can accomplish this. Encryption ensures
    that, even if unauthorized access occurs, the secret data remains indecipherable
    without the appropriate decryption keys.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加密 Secrets，无论是在传输中还是静态存储中，都是至关重要的。Kubernetes 原生的机密加密或第三方工具可以实现这一点。加密确保即使发生未经授权的访问，机密数据仍然无法被解密，除非拥有适当的解密密钥。
- en: 'Here is a sample usage to enable `EncryptionConfiguration`:'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是启用 `EncryptionConfiguration` 的示例用法：
- en: Place your `EncryptionConfiguration` YAML file on the master node where the
    Kubernetes API server runs.
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的 `EncryptionConfiguration` YAML 文件放置在 Kubernetes API 服务器运行的主节点上。
- en: Modify the API server’s startup parameters to include `--encryption-provider-config`,
    pointing to the file path of your `EncryptionConfiguration` YAML file.
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 API 服务器的启动参数，包含 `--encryption-provider-config`，并指向您的 `EncryptionConfiguration`
    YAML 文件的文件路径。
- en: 'Enable it by executing the following command:'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行以下命令启用它：
- en: '[PRE1]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After enabling the encryption configuration via the API server, you can now
    configure the use of encrypted resources such as Secrets in the Kubernetes cluster:'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 启用 API 服务器的加密配置后，您现在可以配置在 Kubernetes 集群中使用加密资源，如 Secrets：
- en: '[PRE2]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Rigorous access controls are essential. Restricting access to Secrets through
    mechanisms such as RBAC is recommended. It’s important to define granular permissions
    that explicitly indicate who can access, create, or modify Secrets.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 严格的访问控制至关重要。推荐通过像 RBAC 这样的机制来限制对 Secrets 的访问。重要的是定义细粒度的权限，明确谁可以访问、创建或修改 Secrets。
- en: In Kubernetes, specific auditing for secret access involves detailed logging
    of each interaction with secret resources. Auditing captures critical information
    such as who accessed the secret, when it was accessed, and the nature of the access.
    Auditing helps administrators determine the specifics of each action, such as
    what happened and when, who initiated it, and its source and destination. Monitoring
    and auditing are vital for overseeing secret access, timing, and purpose, aiding
    in the prompt investigation of suspicious activities to protect Secrets. Standard
    auditing records should show who accessed what and when. In Kubernetes, all access
    to Secrets should be logged, and these logs can be used for incident mitigation
    in case of potential leaks.
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Kubernetes中，针对秘密访问的具体审计涉及详细记录每次与秘密资源交互的日志。审计捕获关键信息，例如谁访问了秘密，何时访问，以及访问的性质。审计帮助管理员确定每个操作的具体细节，如发生了什么、何时发生、谁发起了操作，以及其来源和目的地。监控和审计对于监督秘密访问、时机和目的至关重要，有助于及时调查可疑活动以保护Secrets。标准审计记录应显示谁在何时访问了什么。在Kubernetes中，所有对Secrets的访问都应进行记录，这些日志可用于在潜在泄露的情况下进行事件应对。
- en: 'A sample audit log entry for secret access might look like this:'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个针对秘密访问的审计日志条目示例如下：
- en: '[PRE3]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'After activating the auditing policy in the Kubernetes API server, users can
    configure and specify the output log for particular resource access. As a quick
    example, let’s consider access to Secrets:'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Kubernetes API服务器中启用审计策略后，用户可以配置并指定特定资源访问的输出日志。以访问Secrets为例：
- en: '[PRE4]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Namespace isolation can be used to separate sensitive workloads. Further, network
    policies can be employed to restrict communication between these isolated namespaces,
    reducing the potential exposure of Secrets:'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以使用命名空间隔离来分离敏感的工作负载。此外，可以使用网络策略来限制这些隔离命名空间之间的通信，从而减少Secrets暴露的潜在风险：
- en: '[PRE5]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Furthermore, it is vital to avoid storing Secrets in configuration files, such
    as JSON or YAML files, which might be checked into a repository or shared. Instead,
    Secrets should be stored using environment variables or a dedicated Secrets management
    tool.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，避免将秘密存储在配置文件中（如JSON或YAML文件），这些文件可能会被提交到版本库或共享也是非常重要的。相反，应该使用环境变量或专用的秘密管理工具来存储秘密。
- en: Embracing the concept of a zero-trust system is also advisable. Implementing
    solutions that decrypt Secrets only when necessary and preventing direct decryption
    of a secret by anyone is essential.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 采纳零信任系统的概念也是一个明智的选择。实施仅在必要时解密秘密的解决方案，并防止任何人直接解密秘密是至关重要的。
- en: After Secrets are accessed, it is necessary to take precautions to ensure the
    secret data is not logged in plaintext or transmitted to untrusted parties.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在访问Secrets后，必须采取预防措施，确保秘密数据不会以明文形式记录或传输给不信任的方。
- en: Lastly, regular rotation of keys and Secrets is essential for security, with
    organizations often following audit and compliance policies for rotations at set
    intervals, such as 30, 60, or 90 days. The **National Institute of Standards and
    Technology** (**NIST**) provides detailed guidelines for key management, including
    best practices and management strategies, as outlined in its *Special Publication
    800-57 Part 1, Revision 5*, and *Part 2, Revision 1*. These guidelines help ensure
    that even if a key is compromised, its risk exposure is minimized since it remains
    unusable for an extended period.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，定期轮换密钥和Secrets对于安全至关重要，组织通常遵循审计和合规政策，在设定的间隔（如30、60或90天）内进行轮换。**国家标准与技术研究院**（**NIST**）提供了关于密钥管理的详细指南，包括最佳实践和管理策略，详见其*《特别出版物800-57第1部分，第5版》*和*《第2部分，第1版》*。这些指南有助于确保即使密钥被泄露，其风险暴露也能最小化，因为它会在长时间内保持不可用状态。
- en: By incorporating these strategies, organizations can achieve a robust and secure
    Secrets management system within a Kubernetes environment.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 通过采取这些策略，组织可以在Kubernetes环境中实现一个强大且安全的秘密管理系统。
- en: Summary
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we focused on key concepts behind Secrets management and their
    importance in ensuring data protection and secure access to resources. We discussed
    how Secrets are created, managed, and shared among applications and services.
    We explored critical security risks for managing Secrets, the challenges they
    pose in Secrets management, and effective mitigation strategies to follow. This
    was followed by an in-depth analysis of Kubernetes Secrets’ security risks, including
    exposure in the cluster’s API server or nodes, root exploits, lack of encryption
    in transit, inadequate access controls, and more. Onward, we focused on mitigation
    strategies such as using Secrets management tools, encrypting Secrets, implementing
    access controls, and monitoring and auditing access to Secrets. In the next few
    chapters, we will see how to tackle these sensitive topics on popular cloud providers’
    Secrets management and third-party Secrets management tools.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们集中讨论了机密管理背后的关键概念及其在确保数据保护和安全访问资源中的重要性。我们讨论了机密是如何创建、管理和在应用程序和服务之间共享的。我们探讨了管理机密时面临的关键安全风险、这些风险对机密管理构成的挑战，以及应采取的有效缓解策略。接下来，我们深入分析了
    Kubernetes 机密的安全风险，包括在集群的 API 服务器或节点中的暴露、根用户漏洞、传输中缺乏加密、不足的访问控制等问题。随后，我们重点讨论了缓解策略，如使用机密管理工具、加密机密、实施访问控制以及监控和审计对机密的访问。在接下来的几章中，我们将看到如何处理在流行云服务提供商的机密管理和第三方机密管理工具中遇到的敏感问题。
- en: 'Part 3: Kubernetes Secrets Providers'
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 3 部分：Kubernetes 机密提供者
- en: In this part, you will be introduced to external secret stores and their advantages
    in managing Secrets in Kubernetes, as well as how to integrate them with Kubernetes.
    On completion, you will understand the different types of external secret stores,
    how to configure external secret stores in Kubernetes, and how to integrate them
    with existing Secrets management solutions.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在本部分中，您将了解外部机密存储及其在 Kubernetes 中管理机密的优势，以及如何将它们与 Kubernetes 集成。完成后，您将理解不同类型的外部机密存储，如何在
    Kubernetes 中配置外部机密存储，并将其与现有的机密管理解决方案集成。
- en: 'This part has the following chapters:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包含以下章节：
- en: '[*Chapter 8*](B20970_08.xhtml#_idTextAnchor157)*, Exploring Cloud Secret Store
    on AWS*'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第 8 章*](B20970_08.xhtml#_idTextAnchor157)*，探索 AWS 上的云机密存储*'
- en: '[*Chapter 9*](B20970_09.xhtml#_idTextAnchor176)*, Exploring Cloud Secret Store
    on Azure*'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第 9 章*](B20970_09.xhtml#_idTextAnchor176)*，探索 Azure 上的云机密存储*'
- en: '[*Chapter 10*](B20970_10.xhtml#_idTextAnchor193)*, Exploring Cloud Secret Store
    on GCP*'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第 10 章*](B20970_10.xhtml#_idTextAnchor193)*，探索 GCP 上的云机密存储*'
- en: '[*Chapter 11*](B20970_11.xhtml#_idTextAnchor212)*, Exploring External Secret
    Stores*'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第 11 章*](B20970_11.xhtml#_idTextAnchor212)*，探索外部机密存储*'
- en: '[*Chapter 12*](B20970_12.xhtml#_idTextAnchor234)*, Integrating with Secret
    Stores*'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第 12 章*](B20970_12.xhtml#_idTextAnchor234)*，与机密存储的集成*'
- en: '[*Chapter 13*](B20970_13.xhtml#_idTextAnchor249)*, Case Studies and Real-World
    Examples*'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第 13 章*](B20970_13.xhtml#_idTextAnchor249)*，案例研究与真实世界示例*'
- en: '[*Chapter 14*](B20970_14.xhtml#_idTextAnchor274)*, Conclusion and the Future
    of Kubernetes Secrets Management*'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第 14 章*](B20970_14.xhtml#_idTextAnchor274)*，总结与 Kubernetes 机密管理的未来*'

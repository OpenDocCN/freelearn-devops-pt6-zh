- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Managing Worker Nodes on EKS
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 EKS 上管理工作节点
- en: In previous chapters, we have focused on **Elastic Kubernetes Service** (**EKS**)
    architecture and APIs, deploying workloads with both kubectl and Helm. EKS can
    use both EC2 and Fargate to host these workloads. In this chapter, we will focus
    on how to configure, deploy, and manage the different **Elastic Compute Cloud**
    (**EC2**) configurations you will see in EKS. We will also discuss the benefits
    of using EKS-optimized images and managed node groups over self-managed images
    and instances. Fargate configuration will be discussed in more detail in [*Chapter
    15*](B18129_15.xhtml#_idTextAnchor220).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们重点介绍了 **弹性 Kubernetes 服务** (**EKS**) 架构和 API，使用 kubectl 和 Helm 部署工作负载。EKS
    可以使用 EC2 和 Fargate 托管这些工作负载。在本章中，我们将重点讨论如何配置、部署和管理在 EKS 中看到的不同 **弹性计算云** (**EC2**)
    配置。我们还将讨论使用 EKS 优化镜像和托管节点组相较于自管镜像和实例的优势。Fargate 配置将在 [*第 15 章*](B18129_15.xhtml#_idTextAnchor220)
    中详细讨论。
- en: 'But for now, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 但现在，我们将介绍以下主题：
- en: Launching a node with Amazon Linux
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Amazon Linux 启动节点
- en: Launching self-managed Amazon Linux nodes with CloudFormation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 CloudFormation 启动自管的 Amazon Linux 节点
- en: Launching self-managed Bottlerocket nodes with eksctl
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 eksctl 启动自管 Bottlerocket 节点
- en: Understanding managed nodes with eksctl
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 eksctl 理解托管节点
- en: Building a custom **Amazon Machine Image** (**AMI**) for EKS
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 EKS 构建自定义 **Amazon Machine Image** (**AMI**)
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The reader should have a familiarity with YAML, basic networking, and EKS architecture.
    Before getting started with this chapter, please ensure the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 读者应具备 YAML、基础网络知识和 EKS 架构的基础知识。在开始本章之前，请确保以下内容：
- en: You have an EKS cluster and are able to perform administrative tasks
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您有一个 EKS 集群，并且能够执行管理任务
- en: You have network connectivity to your EKS API endpoint
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以连接到 EKS API 端点的网络
- en: The **Amazon Web Services** (**AWS**) CLI and **kubectl** binary are installed
    on your workstation
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的工作站已安装 **Amazon Web Services** (**AWS**) CLI 和 **kubectl** 二进制文件
- en: Launching a node with Amazon Linux
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Amazon Linux 启动节点
- en: In this section, we will discuss what is needed to launch a single EC2 instance
    and connect it to a cluster. We will then build on this as we discuss managed
    node groups.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论启动单个 EC2 实例并将其连接到集群所需的内容。然后，我们将在讨论托管节点组时进一步扩展这一点。
- en: Prerequisites for launching a node with Amazon Linux
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Amazon Linux 启动节点的前提条件
- en: 'A worker node is simply an EC2 instance that is used by EKS to actually host
    the Pods deployed on the cluster. Any EC2 instance will need the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 工作节点只是一个 EC2 实例，EKS 使用它来实际托管部署在集群上的 Pods。任何 EC2 实例都需要以下内容：
- en: An **Identity and Access Management** (**IAM**) role that allows it to talk
    to the AWS API (EKS, EC2, and so on)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 **身份与访问管理** (**IAM**) 角色，允许它与 AWS API（EKS、EC2 等）进行通信
- en: A security group that, at a minimum, allows communication to the EKS control
    plane
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个安全组，至少允许与 EKS 控制平面通信
- en: An operating system image that has the Kubernetes agents (kubelet, and so on)
    installed
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个已安装 Kubernetes 代理（kubelet 等）的操作系统镜像
- en: An `init`/`boot` script to register with a specific EKS cluster
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 `init`/`boot` 脚本，用于注册到特定的 EKS 集群
- en: IAM role and permissions
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IAM 角色和权限
- en: 'Each worker node and EC2 instance requires an IAM role to be attached to it
    that allows communication with the AWS EKS API, **Elastic Container Registry**
    (**ECR**), and the EC2 API. There are three AWS managed policies that need to
    be applied:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 每个工作节点和 EC2 实例都需要附加一个 IAM 角色，允许与 AWS EKS API、**弹性容器注册表** (**ECR**) 和 EC2 API
    进行通信。需要应用三种 AWS 管理策略：
- en: '`AmazonEKSWorkerNodePolicy`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AmazonEKSWorkerNodePolicy`'
- en: '`AmazonEKS_CNI_Policy`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AmazonEKS_CNI_Policy`'
- en: '`AmazonEC2ContainerRegistryReadOnly`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AmazonEC2ContainerRegistryReadOnly`'
- en: 'In addition, if you want to SSH into your worker nodes using Systems Manager,
    you should also add the following policy:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果您希望通过 Systems Manager SSH 访问工作节点，您还需要添加以下策略：
- en: '`AmazonSSMManagedInstanceCore`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AmazonSSMManagedInstanceCore`'
- en: Important note
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The worker node role must be added to the `aws-auth` ConfigMap to allow the
    instances to register with the cluster. If you are creating self-managed nodes,
    you will need to modify the ConfigMap yourself; tools such as eksctl or the AWS
    Console will make these changes for you.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 必须将工作节点角色添加到 `aws-auth` ConfigMap 中，以允许实例与集群注册。如果您正在创建自管节点，您需要自己修改 ConfigMap；像
    eksctl 或 AWS 控制台这样的工具会为您完成这些更改。
- en: Security groups
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安全组
- en: Every EC2 **elastic network interface** (**ENI**) needs to be associated with
    at least one security group. Worker nodes are normally given their own security
    group, which ensures network access to those nodes can be controlled.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 每个EC2 **弹性网络接口**（**ENI**）都需要至少与一个安全组关联。工作节点通常会分配自己的安全组，从而确保可以控制对这些节点的网络访问。
- en: Typically the EC2 worker node, a security group is referenced in the main EKS
    cluster security group that controls access to the control plane ENIs and allows
    the `create Pod`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，EC2工作节点会在主EKS集群的安全组中引用一个安全组，该安全组控制对控制平面ENI的访问，并允许`创建Pod`。
- en: AWS AMIs
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: AWS AMI
- en: 'An EC2 AMI is the base image any EC2 instance uses and contains the operating
    system (Windows- or Linux-based) and, typically, a set of utilities to enable
    the EC2 instance to work in AWS. EKS supports multiple AMIs, but in this section,
    we will discuss two: **Amazon Linux** and **Bottlerocket**.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: EC2 AMI是任何EC2实例使用的基础镜像，包含操作系统（Windows或基于Linux的系统），通常还包括一组工具，用于使EC2实例在AWS中正常工作。EKS支持多种AMI，但在本节中，我们将讨论两种：**Amazon
    Linux**和**Bottlerocket**。
- en: Amazon EKS-optimized Amazon Linux AMIs
  id: totrans-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 亚马逊EKS优化的Amazon Linux AMI
- en: The Amazon EKS-optimized Amazon Linux AMI is built on top of Amazon Linux 2
    and is configured to work with Amazon EKS including Docker (this is replaced with
    containerd in later versions of the AMI), kubelet, and the AWS IAM authenticator.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊EKS优化的Amazon Linux AMI建立在Amazon Linux 2之上，并配置为与Amazon EKS一起使用，包括Docker（在AMI的后续版本中，Docker被containerd替代）、kubelet和AWS
    IAM认证器。
- en: 'You need to align the AMI with the version of Kubernetes; the following URL
    can be used to find the right image ID: https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html.
    For example, for x86, Kubernetes 1.21 in the `eu-central-1` region, the AMI ID
    is `ami-03fa8a7508f8f3ccc`.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要将AMI与Kubernetes的版本对齐；可以使用以下网址来查找正确的镜像ID：https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html。例如，对于x86架构，Kubernetes
    1.21版本，在`eu-central-1`区域，AMI ID是`ami-03fa8a7508f8f3ccc`。
- en: Amazon EKS-optimized Bottlerocket AMIs
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 亚马逊EKS优化的Bottlerocket AMI
- en: Bottlerocket is an open source Linux-based operating system that is purpose-built
    by AWS for running containers. As with a container, it only includes the bare-minimum
    packages required to run containers, reducing the attack surface of the node itself.
    EKS-optimized Bottlerocket is configured to work with Amazon EKS, and it includes
    containerd and `eu-central-1` region, the AMI ID is `ami-0674d57b3d6b6ef14`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Bottlerocket是一个基于Linux的开源操作系统，由AWS专为运行容器而设计。与容器一样，它仅包含运行容器所需的最小包，从而减少了节点本身的攻击面。EKS优化的Bottlerocket已配置为与Amazon
    EKS一起使用，并包括containerd，在`eu-central-1`区域，AMI ID是`ami-0674d57b3d6b6ef14`。
- en: Bootstrap scripts
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引导脚本
- en: 'A bootstrap script is needed to configure the various agents and EC2 metadata
    and needs to be run once. The bootstrap script is published by AWS and can be
    found at the following link: [https://github.com/awslabs/amazon-eks-ami/blob/master/files/bootstrap.sh](https://github.com/awslabs/amazon-eks-ami/blob/master/files/bootstrap.sh).
    It needs to be integrated into the EC2 boot process or run manually.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 需要一个引导脚本来配置各种代理和EC2元数据，并且只需运行一次。引导脚本由AWS发布，可以在以下链接找到：[https://github.com/awslabs/amazon-eks-ami/blob/master/files/bootstrap.sh](https://github.com/awslabs/amazon-eks-ami/blob/master/files/bootstrap.sh)。它需要集成到EC2启动过程中或手动运行。
- en: Putting it all together and creating a standalone worker node
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将所有内容整合在一起并创建一个独立的工作节点
- en: 'It’s possible to just create a single EC2 worker node, but in practice, you
    will always want to use EC2 Auto Scaling to recover from failure and scale your
    worker nodes. The following steps are used only to illustrate the activities you
    need to go through to get a worker node up and running and should only be used
    as an example:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 可以仅创建一个单独的EC2工作节点，但在实际操作中，您始终需要使用EC2自动扩展来恢复故障并扩展工作节点。以下步骤仅用于说明您需要执行的活动，以使工作节点启动并运行，并且仅应作为示例使用：
- en: Assuming we have a running cluster with some worker nodes already (if not, see
    [*Chapter 3*](B18129_03.xhtml#_idTextAnchor047)), note down the security group,
    IAM role, VPC, and subnet used by the existing node group/EC2 instances.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设我们已经有一个运行中的集群并且有一些工作节点（如果没有，请参见[*第3章*](B18129_03.xhtml#_idTextAnchor047)），请记下现有节点组/EC2实例所使用的安全组、IAM角色、VPC和子网。
- en: 'Run the following command, replacing the attributes with the values you collected
    in *step 1*, to create the EC2 worker node. Please note that the `image-id` value
    is region- and Kubernetes version-specific, so you may need to modify it as well:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令，替换掉 *步骤 1* 中收集的属性值，以创建 EC2 工作节点。请注意，`image-id` 的值是与区域和 Kubernetes 版本相关的，因此你可能需要对其进行修改：
- en: '[PRE0]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once the instance has booted and is available, you can SSH to it using AWS
    Session Manager or using the SSH key you specified in *step 2*. You should then
    verify whether you have permission to get the cluster description using the following
    commands:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦实例启动并可用，你可以使用 AWS 会话管理器或使用你在 *步骤 2* 中指定的 SSH 密钥通过 SSH 连接到它。接着，你应该验证是否有权限获取集群描述，使用以下命令：
- en: '[PRE1]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Important note
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: It may be easier to run the `aws configure` command and specify the default
    region (only) so that changes are preserved across different shells or logins.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `aws configure` 命令并指定默认区域（仅此项）可能更为简便，这样可以确保不同 shell 或登录之间的设置保持一致。
- en: 'As root, you can now download and run the bootstrap script to configure the
    worker node using the following commands:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为 root 用户，你现在可以下载并运行引导脚本来配置工作节点，使用以下命令：
- en: '[PRE2]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Exit the SSH session, go back onto the Kubernetes admin machine, and run the
    `kubectl get nodes --watch` command. What you should see are the original worker
    nodes and *NOT* the new worker node you just created.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 退出 SSH 会话，回到 Kubernetes 管理机上，运行 `kubectl get nodes --watch` 命令。你应该看到的是原始工作节点，而不是你刚刚创建的新工作节点。
- en: 'On the Kubernetes admin machine, verify that the role assigned to the newly
    created worker node is configured in the `aws-auth` ConfigMap using the following
    command:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Kubernetes 管理机上，使用以下命令验证新创建的工作节点是否已在 `aws-auth` ConfigMap 中配置了角色：
- en: '[PRE3]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In order to allow a specific EKS cluster to claim a worker node and monitor
    things such as auto scaling events, you need to add a `kubernetes.io/cluster/<clustername>`
    instance tag to the EC2 instance. In the AWS Console, navigate to your instance
    by going to `kubernetes.io/cluster/…` tag with a value of `owned` to the instance,
    click `--watch` command should now show the new worker node registering and becoming
    ready.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了让特定的 EKS 集群能够声明一个工作节点并监控诸如自动扩展事件等事项，你需要在 EC2 实例上添加一个 `kubernetes.io/cluster/<clustername>`
    实例标签。在 AWS 控制台中，导航到你的实例，进入 `kubernetes.io/cluster/…` 标签，并将其值设置为 `owned`，然后点击 `--watch`
    命令，应该可以看到新的工作节点正在注册并变为就绪状态。
- en: Please refer to [https://docs.aws.amazon.com/eks/latest/userguide/worker.html](https://docs.aws.amazon.com/eks/latest/userguide/worker.html)
    for more details on self-managed worker nodes and how to configure them. You will
    normally use an auto scaling group to support your worker nodes, so the next example
    will use a pre-created CloudFormation template to configure this using the Amazon
    Linux AMI we used in this example.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考 [https://docs.aws.amazon.com/eks/latest/userguide/worker.html](https://docs.aws.amazon.com/eks/latest/userguide/worker.html)
    获取有关自管理工作节点及其配置的更多详细信息。通常你会使用自动扩展组来支持你的工作节点，因此下一个示例将使用一个预创建的 CloudFormation 模板，结合我们在本示例中使用的
    Amazon Linux AMI 来进行配置。
- en: Launching self-managed Amazon Linux nodes with CloudFormation
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 CloudFormation 启动自管理的 Amazon Linux 节点
- en: AWS provides a CloudFormation script hosted at [https://s3.us-west-2.amazonaws.com/amazon-eks/cloudformation/2020-10-29/amazon-eks-nodegroup.yaml](https://s3.us-west-2.amazonaws.com/amazon-eks/cloudformation/2020-10-29/amazon-eks-nodegroup.yaml)
    that can also be used to create a self-managed node group. Let’s take a look at
    how that works!
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 提供了一个托管在 [https://s3.us-west-2.amazonaws.com/amazon-eks/cloudformation/2020-10-29/amazon-eks-nodegroup.yaml](https://s3.us-west-2.amazonaws.com/amazon-eks/cloudformation/2020-10-29/amazon-eks-nodegroup.yaml)
    的 CloudFormation 脚本，它也可以用来创建自管理节点组。让我们来看一下它是如何工作的！
- en: 'From the AWS Console, select the **CloudFormation** service and click on the
    **Create stack** button, as shown in the following screenshot:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 AWS 控制台中，选择 **CloudFormation** 服务并点击 **创建堆栈** 按钮，如下图所示：
- en: '![Figure 8.1 – Launching a CloudFormation stack](img/B18129_08_01.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.1 – 启动 CloudFormation 堆栈](img/B18129_08_01.jpg)'
- en: Figure 8.1 – Launching a CloudFormation stack
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.1 – 启动 CloudFormation 堆栈
- en: 'In the `nodegroup.yaml` file in the **Amazon S3 URL** box and click **Next**:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `nodegroup.yaml` 文件的 **Amazon S3 URL** 框中输入，并点击 **下一步**：
- en: "![Figure 8.2 – \uFEFFThe Create stack window](img/B18129_08_02.jpg)"
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.2 – 创建堆栈窗口](img/B18129_08_02.jpg)'
- en: Figure 8.2 – The Create stack window
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.2 – 创建堆栈窗口
- en: 'You will now be asked to configure the stack properties; most of these are
    the same as in the previous example. A subset of the parameters typically used
    is shown next:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，系统将要求你配置堆栈属性；这些属性大多数与之前的示例相同。接下来展示的是常用参数的子集：
- en: '| **Parameter name** | **Description** |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| **参数名称** | **描述** |'
- en: '| --- | --- |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `ClusterName` | The name of the existing cluster. If it is incorrect, nodes
    will not be able to join the cluster. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `ClusterName` | 现有集群的名称。如果名称不正确，节点将无法加入集群。 |'
- en: '| `ClusterControlPlaneSecurityGroup` | The security group used by the cluster
    control plane. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `ClusterControlPlaneSecurityGroup` | 集群控制平面使用的安全组。 |'
- en: '| `NodeGroupName` | A unique name for the node group. |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `NodeGroupName` | 节点组的唯一名称。 |'
- en: '| `NodeAutoScalingGroupMinSize` | The minimum number of nodes in the auto scaling
    group. |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `NodeAutoScalingGroupMinSize` | 自动伸缩组中的最小节点数量。 |'
- en: '| `Desired capacity of Node` `Group ASG`. | The desired number of nodes in
    the auto scaling group. |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `Desired capacity of Node` `Group ASG`。 | 自动伸缩组中所需的节点数量。 |'
- en: '| `NodeAutoScalingGroupMaxSize` | The maximum number of nodes in the auto scaling
    group. Set to at least 1 greater than desired capacity. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `NodeAutoScalingGroupMaxSize` | 自动伸缩组中节点的最大数量。设置为至少比所需容量大1个。 |'
- en: '| `NodeInstanceType` | The EC2 instance type for the worker nodes. |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `NodeInstanceType` | 工作节点的EC2实例类型。 |'
- en: '| `NodeVolumeSize` | The worker node **Elastic Block Store** (**EBS**) volume
    size. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `NodeVolumeSize` | 工作节点**弹性块存储**（**EBS**）卷的大小。 |'
- en: '| `KeyName` | The EC2 key pair to allow SSH access to the instances. |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `KeyName` | 允许SSH访问实例的EC2密钥对。 |'
- en: '| `DisableIMDSv1` | Set to `true` or `false`. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `DisableIMDSv1` | 设置为`true`或`false`。 |'
- en: '| `VpcId` | The VPC of the worker instances. |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `VpcId` | 工作实例的VPC。 |'
- en: '| `Subnets` | The subnets where workers can be created. |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `Subnets` | 可以创建工作节点的子网。 |'
- en: Table 8.1 – CloudFormation parameter list
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 表8.1 – CloudFormation参数列表
- en: As this template uses an auto scaling group, you need to specify the minimum,
    maximum, and desired capacity of the auto scaling group (refer to [https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-capacity-limits.html](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-capacity-limits.html)
    for more details). Please also note that the security group is the one defined
    for the cluster API, as the template creates a new security group for the instances
    in the auto scaling group.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 由于此模板使用了自动伸缩组，你需要指定自动伸缩组的最小、最大和所需容量（更多细节请参考[https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-capacity-limits.html](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-capacity-limits.html)）。请注意，安全组是为集群API定义的，因为模板为自动伸缩组中的实例创建了新的安全组。
- en: 4. Enter the parameters (use the ones from the previous example) and click through
    the stack workflow until the stack starts to be deployed. Once the stack has been
    deployed, you can use the `kubectl get nodes` command to verify whether the node/s
    have been registered. Again, the node/s should *NOT* be visible, but this time
    it’s a different problem.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 4. 输入参数（使用之前示例中的参数），然后通过堆栈工作流程点击，直到堆栈开始部署。一旦堆栈部署完成，你可以使用`kubectl get nodes`命令来验证节点是否已经注册。同样，节点不应当*可见*，但这次是一个不同的问题。
- en: '5. This template creates a new IAM role that needs to be added to the `aws-auth`
    file. You can use the `kubectl edit cm aws-auth -n kube-system` command from the
    Kubernetes admin workstation to edit the ConfigMap and add the following entry
    to the `mapRoles` key, where `<rolearn>` is the role assigned to the EC2 instances:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 5. 此模板会创建一个新的IAM角色，需要将其添加到`aws-auth`文件中。你可以从Kubernetes管理员工作站使用`kubectl edit
    cm aws-auth -n kube-system`命令编辑ConfigMap，并将以下条目添加到`mapRoles`键中，其中`<rolearn>`是分配给EC2实例的角色：
- en: '[PRE4]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '6. Once you have added the role and deployed the ConfigMap, you can use the
    following command to see the node register and become ready for the scheduler:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 6. 一旦你添加了角色并部署了ConfigMap，你可以使用以下命令查看节点注册并准备好供调度器使用：
- en: '[PRE5]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Amazon Linux is based on a standard Linux kernel, while Bottlerocket has been
    built from the ground up to support containers. In the next section, we will look
    at how you can deploy self-managed nodes based on the Bottlerocket operating system,
    which provides better support for containers.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon Linux基于标准Linux内核，而Bottlerocket是从零开始构建的，旨在支持容器。在下一节中，我们将探讨如何基于Bottlerocket操作系统部署自管节点，它提供了更好的容器支持。
- en: Launching self-managed Bottlerocket nodes with eksctl
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动自管Bottlerocket节点与eksctl
- en: Bottlerocket is gaining momentum as a secure platform for running container
    workloads. One of the key benefits is that it runs two operating system partitions,
    which means that it is simpler to upgrade with minimal downtime. This is discussed
    in more detail in [*Chapter 10*](B18129_10.xhtml#_idTextAnchor146), *Upgrading*
    *EKS Clusters*.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Bottlerocket正因其作为运行容器工作负载的安全平台而日渐流行。其关键优势之一是运行两个操作系统分区，这意味着更简单地进行升级并将停机时间最小化。这在[*第10章*](B18129_10.xhtml#_idTextAnchor146)，*升级EKS集群*中详细讨论。
- en: 'So far, we have created a managed node using the AWS CLI, the console, and
    a pre-made CloudFormation template. **eksctl** is a tool jointly developed by
    *Weaveworks* and AWS and will generate and deploy CloudFormation stacks based
    on a configuration file or CLI options. You can install it using the following
    URL: [https://docs.aws.amazon.com/eks/latest/userguide/eksctl.html](https://docs.aws.amazon.com/eks/latest/userguide/eksctl.html).'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经使用AWS CLI、控制台和预制的CloudFormation模板创建了托管节点。**eksctl**是由*Weaveworks*和AWS联合开发的工具，它将基于配置文件或CLI选项生成和部署CloudFormation堆栈。您可以使用以下URL安装它：[https://docs.aws.amazon.com/eks/latest/userguide/eksctl.html](https://docs.aws.amazon.com/eks/latest/userguide/eksctl.html)。
- en: Prior to version 0.40.0 of eksctl, you could only modify clusters that had been
    created using eksctl. However, later versions allow a subset of operations on
    clusters not created by eksctl—this includes adding node groups.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在eksctl版本0.40.0之前，您只能修改使用eksctl创建的集群。然而，较新的版本允许对未使用eksctl创建的集群执行一些操作——这包括添加节点组。
- en: 'We are going to use an existing cluster (see [*Chapter 3*](B18129_03.xhtml#_idTextAnchor047),
    *Building Your First EKS Cluster*) and add two self-managed Bottlerocket nodes.
    The following configuration file is used; please note it is split into multiple
    sections to make it more readable:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用现有集群（见[*第3章*](B18129_03.xhtml#_idTextAnchor047)，*构建您的第一个EKS集群*）并添加两个自管理的Bottlerocket节点。使用以下配置文件；请注意，它被分成多个部分以提高可读性：
- en: '[PRE6]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the preceding section, we define the cluster `name`, `region`, and `version`
    values, along with the VPC details as we will reuse an existing VPC. In the following
    section, we define a node group. Make sure the `privateNetworking` key is set
    to `true` if you are using a set of private subnets (without an **internet gateway**
    (I**GW)**); otherwise, the deployment will fail!
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分中，我们定义了集群`name`、`region`和`version`值，以及VPC详细信息，因为我们将重用现有的VPC。在接下来的部分中，我们定义一个节点组。如果您使用的是一组私有子网（没有**Internet网关**（I**GW**）），请确保将`privateNetworking`键设置为`true`；否则，部署将失败！
- en: '[PRE7]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Important note
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'As this is using an existing cluster, the `vpc:` section must be included.
    The `securityGroup` key refers to the cluster security group, not the worker node
    one. As this is also a private cluster, the `privateNetworking: true` key-value
    pair needs to be included. The `nodegroups` keyword is used for self-managed nodes.
    Please adjust the configuration file (keys in `code style`) and save it as `bottlerocket.yaml`.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '由于这是使用现有集群，必须包含`vpc:`部分。`securityGroup`键指的是集群安全组，而不是工作节点安全组。由于这也是一个私有集群，必须包含`privateNetworking:
    true`键值对。`nodegroups`关键字用于自管理节点。请调整配置文件（键以`code style`表示）并将其保存为`bottlerocket.yaml`。'
- en: 'Once eksctl has been installed and the configuration file saved, you can run
    the following command to create a cluster using the configuration file:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了eksctl并保存了配置文件后，可以运行以下命令使用配置文件创建集群：
- en: '[PRE8]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then, use the following command to see the nodes be registered and become ready
    for the scheduler:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用以下命令查看节点注册并准备好调度：
- en: '[PRE9]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Please note that eksctl will tag nodes and modify the `aws-auth` ConfigMap,
    so as long as the `eksctl` command is successful, the nodes will automatically
    register and become available.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，eksctl将标记节点并修改`aws-auth` ConfigMap，因此只要`eksctl`命令成功，节点将自动注册并变为可用。
- en: Self-managed node groups are useful if you have a lot of custom operating system
    configurations or you need a specific AMI. If you need to do any node updates,
    you will be responsible for draining nodes, moving Pods, adjusting scheduler logic,
    and replacing nodes. Managed node groups allow you to do this at the click of
    a button (or with an API call) and so generally should be preferred over self-managed
    nodes. In the next section, we will see how you can use managed node groups instead.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 自我管理的节点组适用于你有很多自定义操作系统配置或需要特定 AMI 的情况。如果你需要进行任何节点更新，你将负责排空节点、移动 Pods、调整调度程序逻辑和替换节点。而托管节点组则可以让你通过点击一个按钮（或通过
    API 调用）完成这些操作，因此通常应该优先选择托管节点组。在下一部分中，我们将看看如何改用托管节点组。
- en: Understanding managed nodes with eksctl
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 eksctl 理解托管节点
- en: A managed node group leverages auto scaling groups to provide the basic functionality
    used to do upgrades and modifications to worker nodes. Each auto scaling group
    specifies a launch template, which specifies the configuration options.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 托管节点组利用自动伸缩组提供执行工作节点升级和修改的基本功能。每个自动伸缩组指定一个启动模板，启动模板定义了配置选项。
- en: 'If you replace the launch configuration—changing the EKS AMI ID, for example—any
    new instances that are created use the new launch template and, therefore, the
    new AMI. You can then terminate old instances, and the auto scaling group will
    automatically replace them using the new launch template. This process is automated
    for managed node groups, and the EKS control plane performs the following steps
    for a managed node group:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你更换启动配置——例如更改 EKS AMI ID——那么创建的任何新实例将使用新的启动模板，从而使用新的 AMI。你可以终止旧实例，自动伸缩组将自动使用新的启动模板替换它们。对于托管节点组，此过程是自动化的，EKS
    控制平面为托管节点组执行以下步骤：
- en: It randomly selects a node and drains the Pods from the node.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它会随机选择一个节点并排空该节点上的 Pods。
- en: It ordons the node after every Pod is evicted so that the Kubernetes scheduler
    doesn’t send any new requests to this node and removes this node from its list
    of active nodes.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它会在每个 Pod 被驱逐后对节点进行隔离，以确保 Kubernetes 调度程序不会向该节点发送新的请求，并将该节点从活跃节点列表中移除。
- en: It sends a termination request to the Auto Scaling group for the cordoned node.
    This in turn will trigger a new node deployment with the new launch template/AMI.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它会向自动伸缩组发送该节点的终止请求，这将触发使用新的启动模板/AMI 部署新节点。
- en: It repeats *steps 1-3* until there are no nodes in the node group that are deployed
    with the earlier version of the launch template.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它会重复执行*步骤 1-3*，直到节点组中没有使用早期版本启动模板部署的节点。
- en: 'Let’s deploy a new managed node group using the following command:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用以下命令部署一个新的托管节点组：
- en: '[PRE10]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then, use the following command to see the nodes be registered and become ready
    for the scheduler:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用以下命令查看节点是否被注册并准备好供调度程序使用：
- en: '[PRE11]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The following configuration file should be used; again, this is split into
    multiple sections for readability:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 以下配置文件应使用；为了可读性，这里将其分成多个部分：
- en: Important note
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: You can use the previous template, but make sure you change the `nodeGroups:`
    key to `managedNodeGroups:`. You also need to remove the Bottlerocket-specific
    `amiFamily:` and `ami:` keys and (optionally) add the `labels:` key.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用先前的模板，但确保将 `nodeGroups:` 键更改为 `managedNodeGroups:`。你还需要移除特定于 Bottlerocket
    的 `amiFamily:` 和 `ami:` 键，并（可选地）添加 `labels:` 键。
- en: '[PRE12]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The preceding section is no different from the unmanaged node group; we define
    the cluster and VPC information (using an existing VPC). In the following section,
    we replace the `nodeGroups` key with the `managedNodeGroups` key and also add
    a label:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 上述部分与非托管节点组没有不同；我们定义集群和 VPC 信息（使用现有的 VPC）。在下一部分，我们将 `nodeGroups` 键替换为 `managedNodeGroups`
    键，并添加一个标签：
- en: '[PRE13]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Once the nodes have been registered, if you go into the AWS Console and select
    **EKS** | **Clusters** | **mycluster** and the **Compute** tab, you will see the
    managed node group registered and showing an **Active** status. In the following
    screenshot, you can see the new node group along with the old node group, which
    is at an older AMI version:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦节点注册完成，如果你进入 AWS 控制台，选择 **EKS** | **集群** | **mycluster**，并进入 **计算** 标签页，你将看到托管节点组已注册并显示为
    **活动** 状态。在下面的截图中，你可以看到新节点组和旧节点组，后者使用较旧的 AMI 版本：
- en: '![Figure 8.3 – Node groups window](img/B18129_08_03.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.3 – 节点组窗口](img/B18129_08_03.jpg)'
- en: Figure 8.3 – Node groups window
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.3 – 节点组窗口
- en: This can now be automatically upgraded (with kubelet, containerd, and so on)
    by clicking the **Update now** link. This process is discussed in more detail
    in [*Chapter 10*](B18129_10.xhtml#_idTextAnchor146), *Upgrading* *EKS Clusters*.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以通过点击**立即更新**链接自动升级（包括kubelet、containerd等）。该过程在[*第10章*](B18129_10.xhtml#_idTextAnchor146)，*升级*
    *EKS集群*中有更详细的讨论。
- en: So far, we have used standard AMIs without any customization. In the final section
    of this chapter, we will look at how you can build a custom AMI for use with EKS,
    which might be needed if you want to harden the operating system or make some
    kernel changes.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直使用标准AMI，没有进行任何定制。在本章的最后部分，我们将探讨如何为EKS构建一个自定义AMI，如果您需要加固操作系统或进行某些内核更改时，可能需要使用该自定义AMI。
- en: Building a custom AMI for EKS
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为EKS构建自定义AMI
- en: 'There are a number of reasons why you may want to use a custom AMI—for example,
    security hardening, updates to Kubernetes agent binaries, and so on. There are
    also many ways you can do this, but we are going to look at using Packer from
    HashiCorp (https://learn.hashicorp.com/packer), which is an open source tool that
    can be used to create a number of different types of operating system images.
    Here are the steps:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多原因可能需要您使用自定义AMI，例如安全加固、Kubernetes代理二进制文件更新等。您可以通过多种方式实现这一点，但我们将讨论如何使用HashiCorp的Packer（https://learn.hashicorp.com/packer），它是一个开源工具，可用于创建多种类型的操作系统镜像。以下是步骤：
- en: 'In the first step, we need to install Packer on our workstation using the following
    link: [https://learn.hashicorp.com/collections/packer/aws-get-started](https://learn.hashicorp.com/collections/packer/aws-get-started).
    This will then allow us to create a custom AMI.'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第一步中，我们需要使用以下链接在工作站上安装Packer：[https://learn.hashicorp.com/collections/packer/aws-get-started](https://learn.hashicorp.com/collections/packer/aws-get-started)。这将使我们能够创建自定义AMI。
- en: 'You can then clone the following Git repository and change into the new `amazon-eks-ami`
    directory: [https://github.com/awslabs/amazon-eks-ami](https://github.com/awslabs/amazon-eks-ami).
    This is the same process used to create official AMIs.'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，您可以克隆以下Git仓库并切换到新的`amazon-eks-ami`目录：[https://github.com/awslabs/amazon-eks-ami](https://github.com/awslabs/amazon-eks-ami)。这是创建官方AMI时使用的相同过程。
- en: 'From the root of the cloned repository, you can now run the `make` command
    shown next to create a basic `1.21` AMI (ensure the region you are using has a
    default VPC configured):'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从克隆的仓库根目录，您现在可以运行接下来的`make`命令来创建一个基本的`1.21` AMI（确保您使用的区域已配置了默认的VPC）：
- en: '[PRE14]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: It will take 15-20 minutes to spin up a new EC2 instance. Connect to from the
    Packer machine using SSH and then configure the instance using the scripts in
    the `/scripts` directory. Once configured, the EBS volume is converted into an
    AMI and the instance is terminated.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动一个新的EC2实例需要15-20分钟。使用SSH从Packer机器连接，然后使用`/scripts`目录中的脚本配置该实例。配置完成后，将EBS卷转换为AMI，并终止该实例。
- en: 'You can validate that the image exists using the following command:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用以下命令验证镜像是否存在：
- en: '[PRE15]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In order to customize the build, you can make changes to the makefile, the
    Packer build file (`eks-worker-al2.json`), and/or add/modify the scripts in the
    `/scripts` directory. This requires detailed knowledge of Packer and Linux and
    so is out of the scope of this book, but there is a useful post on the following
    link that describes some of this customization in more detail (you will need an
    AWS login to access this): https://aws.amazon.com/premiumsupport/knowledge-center/eks-custom-linux-ami/.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 为了定制构建，您可以修改makefile、Packer构建文件（`eks-worker-al2.json`），以及/或添加/修改`/scripts`目录中的脚本。这需要详细了解Packer和Linux，因此超出了本书的范围，但在以下链接中有一篇有用的文章，详细描述了部分定制内容（您需要AWS登录才能访问）：[https://aws.amazon.com/premiumsupport/knowledge-center/eks-custom-linux-ami/](https://aws.amazon.com/premiumsupport/knowledge-center/eks-custom-linux-ami/)。
- en: Now that we have looked at the variety of ways you can configure and deploy
    EC2 worker nodes, we’ll revisit the key learning points from this chapter.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经查看了配置和部署EC2工作节点的多种方式，接下来我们将回顾本章的关键学习点。
- en: Summary
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we explored the basic requirements for any EC2-based worker
    node, including the need to configure an IAM role, the Kubernetes agents (kubelet,
    and so on), and security groups to allow communication with the EKS control plane
    endpoint.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了任何基于EC2的工作节点的基本要求，包括配置IAM角色、Kubernetes代理（kubelet等）以及安全组以允许与EKS控制平面端点的通信。
- en: We then learned how you can use Amazon Linux and Bottlerocket (a secure container
    operating system developed by AWS) AMIs to create self-managed node groups using
    the AWS Console/CLI, CloudFormation, and eksctl. It’s important to understand
    there are several options when it comes to choosing operating systems, from Amazon
    EKS-optimized Linux and Bottlerocket through to the completely customized operating
    systems you define. Amazon Linux is the easiest operating system choice as images
    are created and managed by AWS, and it will also allow access to the standard
    Linux kernel if you want to make changes. Bottlerocket is more secure but is quite
    a different architecture from standard Linux kernels, so requires a lot more investment
    in training and design. If you have some very specific hardening requirements
    or particular management tools you use, then you will need to use custom AMIs.
    We then talked about how managed node groups simplify the operation burden of
    updating worker node operating systems and Kubernetes agents and showed how, with
    some simple changes, we can use eksctl to deploy them.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，我们学习了如何使用 Amazon Linux 和 Bottlerocket（AWS 开发的安全容器操作系统）AMI，通过 AWS 控制台/CLI、CloudFormation
    和 eksctl 创建自管理节点组。理解选择操作系统时有多个选项非常重要，从 Amazon EKS 优化的 Linux 和 Bottlerocket 到完全自定义的操作系统。Amazon
    Linux 是最简单的操作系统选择，因为这些镜像是由 AWS 创建和管理的，并且如果需要更改，它还允许访问标准 Linux 内核。Bottlerocket
    更加安全，但其架构与标准 Linux 内核有很大不同，因此需要更多的培训和设计投资。如果你有一些非常具体的加固要求或使用特定的管理工具，那么你需要使用自定义
    AMI。接着，我们讨论了托管节点组如何简化更新工作节点操作系统和 Kubernetes 代理的操作负担，并展示了如何通过一些简单的更改，使用 eksctl
    部署它们。
- en: Finally, we briefly explored how you can use HashiCorp’s Packer and an AWS repository
    to create custom AMIs that could support a more customized EC2-based worker node.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们简要探讨了如何使用 HashiCorp 的 Packer 和 AWS 存储库创建自定义 AMI，以支持更加定制化的基于 EC2 的工作节点。
- en: In the next chapter, we will look at the overall process of upgrading your cluster
    and build on some of the concepts discussed in the previous chapters.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨升级集群的整体过程，并在此基础上扩展前几章中讨论的一些概念。
- en: Further reading
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Deeper dive into Amazon Linux EKS-optimized AMIs: https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '深入了解 Amazon Linux EKS 优化的 AMI: https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html'
- en: 'Deeper dive into Bottlerocket EKS-optimized AMIs: https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami-bottlerocket.html'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '深入了解 Bottlerocket EKS 优化的 AMI: https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami-bottlerocket.html'
- en: 'eksctl user guide: https://eksctl.io/'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'eksctl 用户指南: https://eksctl.io/'
- en: 'Deeper dive into EC2 auto scaling: https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-[ec2-auto-scaling.html](https://ec2-auto-scaling.html)'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '深入了解 EC2 自动扩展: https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-[ec2-auto-scaling.html](https://ec2-auto-scaling.html)'

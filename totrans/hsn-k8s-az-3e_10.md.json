["```\n    az group create -n agic -l westus2\n    ```", "```\n    az network public-ip create -n agic-pip \\\n       -g agic --allocation-method Static --sku Standard \\\n       --dns-name \"<your unique DNS name>\"\n    az network vnet create -n agic-vnet -g agic \\\n      --address-prefix 192.168.0.0/24 --subnet-name agic-subnet \\\n      --subnet-prefix 192.168.0.0/24\n    ```", "```\n    az network application-gateway create -n agic -l westus2 \\\n      -g agic --sku Standard_v2 --public-ip-address agic-pip \\\n      --vnet-name agic-vnet --subnet agic-subnet\n    ```", "```\n    appgwId=$(az network application-gateway \\\n      show -n agic -g agic -o tsv --query \"id\") \n    az aks enable-addons -n handsonaks \\\n      -g rg-handsonaks -a ingress-appgw \\\n      --appgw-id $appgwId\n    ```", "```\n    nodeResourceGroup=$(az aks show -n handsonaks \\\n      -g rg-handsonaks -o tsv --query \"nodeResourceGroup\")\n    aksVnetName=$(az network vnet list \\\n      -g $nodeResourceGroup -o tsv --query \"[0].name\")\n    aksVnetId=$(az network vnet show -n $aksVnetName \\\n      -g $nodeResourceGroup -o tsv --query \"id\")\n    az network vnet peering create \\\n      -n AppGWtoAKSVnetPeering -g agic \\\n      --vnet-name agic-vnet --remote-vnet $aksVnetId \\\n      --allow-vnet-access\n    appGWVnetId=$(az network vnet show -n agic-vnet \\\n      -g agic -o tsv --query \"id\")\n    az network vnet peering create \\\n      -n AKStoAppGWVnetPeering -g $nodeResourceGroup \\\n      --vnet-name $aksVnetName --remote-vnet $appGWVnetId --allow-vnet-access\n    ```", "```\n    kubectl create -f guestbook-all-in-one.yaml\n    ```", "```\n    1   apiVersion: networking.k8s.io/v1\n    2   kind: Ingress\n    3   metadata:\n    4     name: simple-frontend-ingress\n    5     annotations:\n    6       kubernetes.io/ingress.class: azure/application-gateway\n    7   spec:\n    8     rules:\n    9     - http:\n    10        paths:\n    11        - path: /\n    12          pathType: Prefix\n    13          backend:\n    14            service:\n    15              name: frontend\n    16              port:\n    17                number: 80\n    ```", "```\n    kubectl apply -f simple-frontend-ingress.yaml\n    ```", "```\n    kubectl get service\n    ```", "```\nkubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.2.0/cert-manager.yaml\n```", "```\n1   apiVersion: cert-manager.io/v1\n2   kind: Issuer\n3   metadata:\n4     name: letsencrypt-staging\n5   spec:\n6     acme:\n7       server: https://acme-staging-v02.api.letsencrypt.org/directory\n8       email: <your e-mail address>\n9       privateKeySecretRef:\n10        name: letsencrypt-staging\n11      solvers:\n12      - http01:\n13          ingress:\n14            class: azure/application-gateway\n```", "```\n    1   apiVersion: networking.k8s.io/v1\n    2   kind: Ingress\n    3   metadata:\n    4     name: simple-frontend-ingress\n    5     annotations:\n    6       kubernetes.io/ingress.class: azure/application-gateway\n    7       cert-manager.io/issuer: letsencrypt-staging\n    8       cert-manager.io/acme-challenge-type: http01\n    9   spec:\n    10    rules:\n    11    - http:\n    12        paths:\n    13        - path: /\n    14          pathType: Prefix\n    15          backend:\n    16            service:\n    17              name: frontend\n    18              port:\n    19                number: 80\n    20      host: <your dns-name>.<your azure region>.cloudapp.azure.com\n    21    tls:\n    22      - hosts:\n    23        - <your dns-name>.<your azure region>.cloudapp.azure.com \n    24        secretName: frontend-tls \n    ```", "```\n    kubectl apply -f ingress-with-tls.yaml\n    ```", "```\n    kubectl get certificate\n    ```", "```\n    kubectl get certificaterequest\n    ```", "```\n    kubectl describe certificaterequest\n    ```", "```\n    kubectl describe certificaterequest\n    ```", "```\n1   apiVersion: cert-manager.io/v1alpha2\n2   kind: Issuer\n3   metadata:\n4     name: letsencrypt-prod\n5   spec:\n6     acme:\n7       server: https://acme-v02.api.letsencrypt.org/directory\n8       email: <your e-mail>\n9       privateKeySecretRef:\n10        name: letsencrypt-prod\n11      solvers:\n12      - http01:\n13          ingress:\n14            class: azure/application-gateway \n```", "```\n1   apiVersion: networking.k8s.io/v1\n2   kind: Ingress\n3   metadata:\n4     name: simple-frontend-ingress\n5     annotations:\n6       kubernetes.io/ingress.class: azure/application-gateway\n7       cert-manager.io/issuer: letsencrypt-prod\n8       cert-manager.io/acme-challenge-type: http01\n9   spec:\n10    rules:\n11    - http:\n12        paths:\n13        - path: /\n14          pathType: Prefix\n15          backend:\n16            service:\n17              name: frontend\n18              port:\n19                number: 80\n20      host: <your dns-name>.<your azure region>.cloudapp.azure.com\n21    tls:\n22      - hosts:\n23        - <your dns-name>.<your azure region>.cloudapp.azure.com\n24        secretName: frontend-prod-tls \n```", "```\nkubectl create -f certificate-issuer-prod.yaml\nkubectl apply -f ingress-with-tls-prod.yaml\n```", "```\nkubectl delete -f https://github.com/jetstack/cert-manager/releases/download/v1.1.0/cert-manager.yaml\naz aks disable-addons -n handsonaks \\\n  -g rg-handsonaks -a ingress-appgw \n```"]
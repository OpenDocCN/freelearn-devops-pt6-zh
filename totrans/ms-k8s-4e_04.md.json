["```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: custom-service-account \n```", "```\n$ kubectl create -f custom-service-account.yaml\nserviceaccount/custom-service-account created \n```", "```\n$ kubectl get serviceaccounts\nNAME                     SECRETS   AGE\ncustom-service-account   1         6s\ndefault                  1         2m28s \n```", "```\n$ kubectl get secret\nNAME                                                    TYPE                                                   DATA   AGE\ncustom-service-account-token-vbrbm   kubernetes.io/service-account-token   3          62s\ndefault-token-m4nfk                              kubernetes.io/service-account-token   3           3m24s \n```", "```\n$ kubectl get serviceAccounts/custom-service-account -o yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  creationTimestamp: \"2022-06-19T18:38:22Z\"\n  name: custom-service-account\n  namespace: default\n  resourceVersion: \"784\"\n  uid: f70f70cf-5b42-4a46-a2ff-b07792bf1220\nsecrets:\n- name: custom-service-account-token-vbrbm \n```", "```\n$ kubectl get secret custom-service-account-token-vbrbm -o yaml \n```", "```\n$ export KUBECONFIG=~/.kube/kind-config\n$ kind create cluster\nCreating cluster \"kind\" ...\n ![](img/B18998_04_001.png) Ensuring node image (kindest/node:v1.23.4) ![](img/B18998_04_002.png)\n ![](img/B18998_04_003.png) Preparing nodes ![](img/B18998_04_004.png)\n ![](img/B18998_04_003.png) Writing configuration ![](img/B18998_04_006.png)\n ![](img/B18998_04_001.png) Starting control-plane ![](img/B18998_04_008.png)\n ![](img/B18998_04_001.png) Installing CNI ![](img/B18998_04_010.png)\n ![](img/B18998_04_003.png) Installing StorageClass ![](img/B18998_04_012.png)\nSet kubectl context to \"kind-kind\"\nYou can now use your cluster with:\nkubectl cluster-info --context kind-kind \n```", "```\n$ kubectl config view\napiVersion: v1\nclusters:\n- cluster:\n    certificate-authority-data: DATA+OMITTED\n    server: https://127.0.0.1:61022\n  name: kind-kind\ncontexts:\n- context:\n    cluster: kind-kind\n    user: kind-kind\n  name: kind-kind\ncurrent-context: kind-kind\nkind: Config\npreferences: {}\nusers:\n- name: kind-kind\n  user:\n    client-certificate-data: REDACTED\n    client-key-data: REDACTED \n```", "```\nkubectl --as system:serviceaccount:<namespace>:<service account name> \n```", "```\ntype Authorizer interface {\n    Authorize(ctx context.Context, a Attributes) (authorized Decision, reason string, err error)\n} \n```", "```\ntype Attributes interface {\n  GetUser() user.Info\n  GetVerb() string\n  IsReadOnly() bool\n  GetNamespace() string\n  GetResource() string\n  GetSubresource() string\n  GetName() string\n  GetAPIGroup() string\n  GetAPIVersion() string\n  IsResourceRequest() bool\n  GetPath() string\n} \n```", "```\n$ kubectl auth can-i create deployments\nYes\n$ kubectl auth can-i create deployments --as jack\nno \n```", "```\n$ kubectl rolesum job-controller -n kube-system\nServiceAccount: kube-system/job-controller\nSecrets:\n• */job-controller-token-tp72d\nPolicies:\n• [CRB] */system:controller:job-controller ![](img/B18998_04_013.png)  [CR] */system:controller:job-controller\n  Resource                 Name  Exclude  Verbs  G L W C U P D DC\n  events.[,events.k8s.io]  [*]     [-]     [-]   ![](img/B18998_04_014.png)\n  jobs.batch               [*]     [-]     [-]   ![](img/B18998_04_015.png)\n  jobs.batch/finalizers    [*]     [-]     [-]   ![](img/B18998_04_016.png)\n  jobs.batch/status        [*]     [-]     [-]   ![](img/B18998_04_016.png)\n  pods                     [*]     [-]     [-]   ![](img/B18998_04_018.png) \n```", "```\n--admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,PersistentVolumeLabel,DefaultStorageClass,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota,DefaultTolerationSeconds \n```", "```\n$ kubectl create secret docker-registry the-registry-secret \\\n    --docker-server=<docker registry server> \\\n    --docker-username=<username> \\ \n    --docker-password=<password> \\\n    --docker-email=<email>\nsecret 'docker-registry-secret' created. \n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: cool-pod\n  namespace: the-namespace\nspec:\n  containers:\n - name: cool-container\n   image: cool/app:v1\n   imagePullSecrets:\n   - name: the-registry-secret \n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\nname: some-pod\nspec:\n  securityContext:\n    fsGroup: 1234\n    supplementalGroups: [5678]\n    seLinuxOptions:\n      level: 's0:c123,c456'\n  containers:\n    ... \n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: some-pod\nspec:\n  containers:\n  - name: some-container\n    ...\n    securityContext:\n      privileged: true\n      seLinuxOptions:\n        level: 's0:c123,c456' \n```", "```\n$ cat /sys/module/apparmor/parameters/enabled \nY \n```", "```\n/sys/kernel/security/apparmor/profiles \n```", "```\ncontainer.apparmor.security.beta.kubernetes.io/<container name>: <profile reference> \n```", "```\n> \\#include \\<tunables/global\\>\n>\n> profile k8s-apparmor-example-deny-write flags=(attach\\\\\\_disconnected)\n> {\n>\n> \\#include \\<abstractions/base\\>\n>\n> file,\n>\n> \\# Deny all file writes.\n>\n> deny /\\\\\\*\\\\\\* w,\n>\n> } \n```", "```\nkubectl exec <pod-name> cat /proc/1/attr/current \n```", "```\n# name of the profile, we will auto prefix with `docker-`\n# so the final profile name will be `docker-nginx-sample`\nName = \"nginx-sample\"\n[Filesystem]\n# read only paths for the container\nReadOnlyPaths = [\n    \"/bin/**\",\n    \"/boot/**\",\n    \"/dev/**\",\n    \"/etc/**\",\n    \"/home/**\",\n    \"/lib/**\",\n    \"/lib64/**\",\n    \"/media/**\",\n    \"/mnt/**\",\n    \"/opt/**\",\n    \"/proc/**\",\n    \"/root/**\",\n    \"/sbin/**\",\n    \"/srv/**\",\n    \"/tmp/**\",\n    \"/sys/**\",\n    \"/usr/**\",\n]\n# paths where you want to log on write\nLogOnWritePaths = [\n    \"/**\"\n]\n# paths where you can write\nWritablePaths = [\n    \"/var/run/nginx.pid\"\n]\n# allowed executable files for the container\nAllowExec = [\n    \"/usr/sbin/nginx\"\n]\n# denied executable files\nDenyExec = [\n    \"/bin/dash\",\n    \"/bin/sh\",\n    \"/usr/bin/top\"\n]\n# allowed capabilities\n[Capabilities]\nAllow = [\n    \"chown\",\n    \"dac_override\",\n    \"setuid\",\n    \"setgid\",\n    \"net_bind_service\"\n]\n[Network]\n# if you don't need to ping in a container, you can probably\n# set Raw to false and deny network raw\nRaw = false\nPacket = false\nProtocols = [\n    \"tcp\",\n    \"udp\",\n    \"icmp\"\n] \n```", "```\n$ MODE=warn # One of enforce, audit, or warn\n$ LEVEL=baseline # One of privileged, baseline, or restricted\n$ kubectl label namespace/ns-1 pod-security.kubernetes.io/${MODE}: ${LEVEL}\nnamespace/ns-1 created \n```", "```\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: the-network-policy\n  namespace: default\nspec:\n  podSelector:\n    matchLabels:\n      role: db\n  ingress:\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          project: cool-project\n    - podSelector:\n        matchLabels:\n          role: frontend\n    ports:\n    - protocol: TCP\n      port: 6379 \n```", "```\n ports:\n  - protocol: TCP\n    port: 6379\n    endPort: 7000 \n```", "```\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: deny-all\nspec:\n  podSelector: {}\n  policyTypes:\n  - Ingress\n  - Egress \n```", "```\n$ k create -n ${NAMESPACE} -f deny-all-network-policy.yaml \n```", "```\napiVersion: networking.k8s.io/ v1\nkind: NetworkPolicy\nmetadata:\n  name: default-deny-egress\nspec:\n  order: 999\n  egress:\n  - action: deny\n    destination:\n      net: 1.2.3.4\n    source: {} \n```", "```\n$ k get deploy -n kube-system -o name | grep calico \ndeployment.apps/calico-node-vertical-autoscaler \ndeployment.apps/calico-typha \ndeployment.apps/calico-typha-horizontal-autoscaler \ndeployment.apps/calico-typha-vertical-autoscaler \n```", "```\n$ k get ds -n kube-system -o name | grep calico-node \ndaemonset.apps/calico-node \n```", "```\napiVersion: apiserver.config.k8s.io/v1\nkind: EncryptionConfiguration\nresources:\n  - resources:\n      - secrets\n    providers:\n      - identity: {}\n      - aesgcm:\n          keys:\n            - name: key1\n              secret: c2VjcmV0IGlzIHNlY3VyZQ==\n            - name: key2\n              secret: dGhpcyBpcyBwYXNzd29yZA==\n      - aescbc:\n          keys:\n            - name: key1\n              secret: c2VjcmV0IGlzIHNlY3VyZQ==\n            - name: key2\n              secret: dGhpcyBpcyBwYXNzd29yZA==\n      - secretbox:\n          keys:\n            - name: key1\n              secret: YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY= \n```", "```\n$ k create secret generic hush-hush \\\n    --from-literal=username=tobias  \\ \n    --from-literal=password=cutoffs\nsecret/hush-hush created \n```", "```\n$ k describe secrets/hush-hush\nName:         hush-hush\nNamespace:    default\nLabels:       <none>\nAnnotations:  <none>\nType:  Opaque\nData\n====\npassword:  7 bytes\nusername:  6 bytes \n```", "```\n$ k get secrets/hush-hush -o yaml\napiVersion: v1\ndata:\n  password: Y3V0b2Zmcw==\n  username: dG9iaWFz\nkind: Secret\nmetadata:\n  creationTimestamp: \"2022-06-20T19:49:56Z\"\n  name: hush-hush\n  namespace: default\n  resourceVersion: \"51831\"\n  uid: 93e8d6d1-4c7f-4868-b146-32d1eb02b0a6\ntype: Opaque \n```", "```\n$ k get secrets/hush-hush -o jsonpath='{.data.password}' | base64 --decode\ncutoffs \n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: pod-with-secret\nspec:\n  containers:\n  - name: container-with-secret\n    image: g1g1/py-kube:0.3\n    command: [\"/bin/bash\", \"-c\", \"while true ; do sleep 10 ; done\"]\n    volumeMounts:\n    - name: secret-volume\n      mountPath: \"/mnt/hush-hush\"\n      readOnly: true\n  volumes:\n  - name: secret-volume\n    secret:\n      secretName: hush-hush \n```", "```\n$ k create -f pod-with-secret.yaml\npod/pod-with-secret created\n$ k exec pod-with-secret -- cat /mnt/hush-hush/username\ntobias\n$ k exec pod-with-secret -- cat /mnt/hush-hush/password\ncutoffs \n```", "```\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: custom-namespace \n```", "```\n$ k create -f custom-namespace.yaml\nnamespace/custom-namespace created\n$ k get ns\nNAME                 STATUS   AGE\ncustom-namespace     Active   5s\ndefault              Active   24h\nkube-node-lease      Active   24h\nkube-public          Active   24h\nkube-system          Active   24h \n```", "```\n$ k run trouble -it -n custom-namespace --image=g1g1/py-kube:0.3 bash\nIf you don't see a command prompt, try pressing enter. \nroot@trouble:/# \n```", "```\n$ k get po -n custom-namespace\nNAME      READY   STATUS    RESTARTS      AGE\ntrouble   1/1     Running   1 (15s ago)   57s \n```", "```\n$ vcluster version \nvcluster version 0.10.1 \n```", "```\n$ vcluster create tenant-1\ninfo   Creating namespace vcluster-tenant-1\ninfo   Detected local kubernetes cluster kind. Will deploy vcluster with a NodePort\ninfo   Create vcluster tenant-1...\ndone √ Successfully created virtual cluster tenant-1 in namespace vcluster-tenant-1\ninfo   Waiting for vcluster to come up...\nwarn   vcluster is waiting, because vcluster pod tenant-1-0 has status: ContainerCreating\ninfo   Starting proxy container...\ndone √ Switched active kube context to vcluster_tenant-1_vcluster-tenant-1_kind-kind\n- Use `vcluster disconnect` to return to your previous kube context\n- Use `kubectl get namespaces` to access the vcluster \n```", "```\n$ vcluster create tenant-2\n? You are creating a vcluster inside another vcluster, is this desired?\n  [Use arrows to move, enter to select, type to filter]\n> No, switch back to context kind-kind\n  Yes \n```", "```\n$ k config use-context kind-kind\nSwitched to context \"kind-kind\".\n$ vcluster create tenant-2\ninfo   Creating namespace vcluster-tenant-2\ninfo   Detected local kubernetes cluster kind. Will deploy vcluster with a NodePort\ninfo   Create vcluster tenant-2...\ndone √ Successfully created virtual cluster tenant-2 in namespace vcluster-tenant-2\ninfo   Waiting for vcluster to come up...\ninfo   Stopping docker proxy...\ninfo   Starting proxy container...\ndone √ Switched active kube context to vcluster_tenant-2_vcluster-tenant-2_kind-kind\n- Use `vcluster disconnect` to return to your previous kube context\n- Use `kubectl get namespaces` to access the vcluster \n```", "```\n$ k config get-contexts -o name\nkind-kind\nvcluster_tenant-1_vcluster-tenant-1_kind-kind\nvcluster_tenant-2_vcluster-tenant-2_kind-kind \n```", "```\n$ k get ns --context kind-kind\nNAME                 STATUS   AGE\ncustom-namespace     Active   3h6m\ndefault              Active   27h\nkube-node-lease      Active   27h\nkube-public          Active   27h\nkube-system          Active   27h\nlocal-path-storage   Active   27h\nvcluster-tenant-1    Active   15m\nvcluster-tenant-2    Active   3m48s \n```", "```\n$ k get all -n vcluster-tenant-1 --context kind-kind\nNAME                                                    READY   STATUS    RESTARTS   AGE\npod/coredns-5df468b6b7-rj4nr-x-kube-system-x-tenant-1   1/1     Running   0          16m\npod/tenant-1-0                                          2/2     Running   0          16m\nNAME                                        TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)                  AGE\nservice/kube-dns-x-kube-system-x-tenant-1   ClusterIP   10.96.200.106   <none>        53/UDP,53/TCP,9153/TCP   16m\nservice/tenant-1                            NodePort    10.96.107.216   <none>        443:32746/TCP            16m\nservice/tenant-1-headless                   ClusterIP   None            <none>        443/TCP                  16m\nservice/tenant-1-node-kind-control-plane    ClusterIP   10.96.235.53    <none>        10250/TCP                16m\nNAME                        READY   AGE\nstatefulset.apps/tenant-1   1/1     16m \n```", "```\n$ k get ns --context vcluster_tenant-1_vcluster-tenant-1_kind-kind\nNAME              STATUS   AGE\nkube-system       Active   17m\ndefault           Active   17m\nkube-public       Active   17m\nkube-node-lease   Active   17m \n```", "```\n$ k create ns new-ns --context vcluster_tenant-1_vcluster-tenant-1_kind-kind\nnamespace/new-ns created\n$ k get ns new-ns --context vcluster_tenant-1_vcluster-tenant-1_kind-kind\nNAME     STATUS   AGE\nnew-ns   Active   19s\n$ k get ns new-ns --context vcluster_tenant-2_vcluster-tenant-2_kind-kind\n Error from server (NotFound): namespaces \"new-ns\" not found\n$ k get ns new-ns --context kind-kind\nError from server (NotFound): namespaces \"new-ns\" not found \n```"]
- en: 11\. Network security in AKS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Securing a network is a critical activity in the protection of an application.
    The goal of a secure network is, on the one hand, to allow your users to connect
    to your applications and use all the functionalities you offer. On the other hand,
    you also need to protect your network from attackers. This means making sure that
    they cannot get access to critical parts of your network, and that even if they
    were to gain access, this would be limited.
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to network security in AKS, there are two different layers to
    secure the network. The first is the control plane. The control plane refers to
    the managed Kubernetes master servers that host the Kubernetes API. By default,
    the control plane is exposed to the internet. You can secure the control plane
    either by limiting which public IP addresses can access it using a feature called
    **Authorized IP ranges**, or by deploying a private cluster, which means only
    the machines connected to your virtual network can access the control plane.
  prefs: []
  type: TYPE_NORMAL
- en: The second network layer to secure is the workload running on your cluster.
    There are multiple ways to secure the workload. The first way is by using Azure
    networking functionalities, such as the Azure Firewall or **Network Security Groups**
    (**NSGs**). The second way to protect the workload is by using a Kubernetes functionality
    called network policies.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will explore the different ways to secure the network
    of an AKS cluster. Specifically, this chapter contains the following sections:'
  prefs: []
  type: TYPE_NORMAL
- en: Networking and network security in AKS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Control plane network security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Workload network security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since most networking configurations of an AKS cluster are only configurable
    during cluster creation, you will create and destroy multiple clusters throughout
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start this chapter by exploring the concepts of networking and network
    security in AKS.
  prefs: []
  type: TYPE_NORMAL
- en: Networking and network security in AKS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section serves as an introduction to the concepts of networking and security
    in AKS. You'll first cover the control plane, then workload networking, and then
    network security.
  prefs: []
  type: TYPE_NORMAL
- en: Control plane networking
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The control plane of a Kubernetes cluster is the infrastructure that hosts the
    Kubernetes API server for your cluster, manages the scheduler, and stores the
    cluster state. When you interact with a Kubernetes cluster, for instance, by using
    `kubectl`, you are sending commands to the Kubernetes API server. In AKS, this
    control plane is managed by Microsoft and provided to you as a service.
  prefs: []
  type: TYPE_NORMAL
- en: By default, the control plane is exposed over the internet and is accessible
    to everybody that is connected to the internet. This doesn't mean that the control
    plane is not secure though. Even if an attacker had network access to your control
    plane, they would still need to have cluster credentials to execute commands against
    the control plane.
  prefs: []
  type: TYPE_NORMAL
- en: Frequently, though, organizations still want to limit network access to the
    control plane of their AKS clusters. There are two functionalities in AKS that
    enable you to limit network access to the control plane of a cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first functionality is called **authorized IP address ranges**. By configuring
    authorized IP address ranges on your AKS, you configure which IP addresses are
    allowed to access your API server. This means that IP addresses that are not allowed
    to access your API server cannot interact with your API server. This is explained
    in *Figure 11.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring authorized IP ranges defines the IP addresses that are allowed
    to access your API server](img/B17338_11_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.1: Authorized IP ranges explained'
  prefs: []
  type: TYPE_NORMAL
- en: Another way to limit network access to your control plane is by using a feature
    called **private clusters**. By configuring private clusters, you do not give
    your control plane a publicly reachable address. The cluster is only reachable
    from a private network. To connect to the control plane, you would need to use
    a machine that is connected to an **Azure Virtual Network** (**VNet**). This machine
    would communicate to the control plane using an Azure functionality called Azure
    Private Link.
  prefs: []
  type: TYPE_NORMAL
- en: 'Private Link is an Azure feature that allows you to connect to managed services
    using a private IP address in your VNet. When using Private Link, a Private Link
    endpoint is created in your VNet. To connect to this Private Link endpoint, you
    would have to connect from either a VM hosted in the same VNet, in a peered VNet,
    or through a VPN or Azure ExpressRoute that is connected to that VNet. In *Figure
    11.2*, you see an example of how this works using a VM hosted in the same VNet.
    You can see that the node pools (1) that host your workloads as well as VMs (2)
    connected to the same VNet can connect to the control plane, but a user connecting
    over the internet (3) cannot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Private Link allows you to connect to managed services using a private IP
    address in your virtual network](img/B17338_11_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.2: Private clusters explained'
  prefs: []
  type: TYPE_NORMAL
- en: It is important to understand that both authorized IP address ranges and private
    clusters only provide network security to the Kubernetes control plane; they do
    not influence the workload network. Workload networking will be covered in the
    next section.
  prefs: []
  type: TYPE_NORMAL
- en: Workload networking
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Your workloads in AKS are deployed on a cluster that is deployed in a VNet.
    There are many ways to configure and secure networking in a VNet. In this section,
    we will introduce several important configuration options for network security
    of the workload deployed in a VNet. This is, however, only an introduction to
    these concepts. Before deploying a production cluster, please refer to the AKS
    documentation for a more in-depth review of the different configuration options:
    [https://docs.microsoft.com/azure/aks/concepts-network](https://docs.microsoft.com/azure/aks/concepts-network).'
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll first need to choose the networking model with which you''ll deploy
    your cluster. This configuration has a limited impact on security, but it is important
    to understand from a networking perspective. There are two options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kubenet networking (default)**: By using kubenet networking, cluster nodes
    get an IP address from a subnet in a VNet. The pods running on those nodes get
    an IP address from an overlay network, which uses a different address space from
    the nodes. Pod-to-pod networking is enabled by **Network Address Translation**
    (**NAT**). The benefit of kubenet is that only nodes consume an IP address from
    the cluster subnet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Container Network Interface (CNI) networking (advanced**): With Azure
    CNI, the pods and the nodes all get an IP address from the subnet that the cluster
    is created in. This has the benefit that pods can be accessed directly by resources
    outside the cluster. It has the disadvantage that you need to execute careful
    IP address planning, since each pod requires an IP address in the cluster subnet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In both networking models, you can create the cluster in an existing VNet or
    have AKS create a new VNet on your behalf.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second network security configuration to consider is the routing of inbound
    and outbound traffic through an external firewall. This could either be an Azure
    Firewall or a third-party **network virtual appliance** (**NVA**). By routing
    traffic through an external firewall, you can apply centralized security rules,
    do traffic inspection, and log traffic access patterns. To configure this, you
    would configure a **user-defined route** (**UDR**) on the cluster subnet, to route
    traffic from your cluster through the external firewall. If you wish to explore
    this further, please refer to the documentation: [https://docs.microsoft.com/azure/aks/limit-egress-traffic](https://docs.microsoft.com/azure/aks/limit-egress-traffic).'
  prefs: []
  type: TYPE_NORMAL
- en: Another network security option is the use of NSGs in Azure to limit inbound
    and outbound traffic. By default, when you create a service of the `LoadBalancer`
    type in AKS, AKS will also configure an NSG to allow traffic from everywhere to
    that service. You can tune the configuration of this NSG in AKS, to limit which
    IPs can access those services.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you can limit traffic in your cluster by using a Kubernetes feature
    called **network policies**. A network policy is a Kubernetes object that allows
    you to configure which traffic is allowed on certain pods. With network policies,
    you can secure pod-to-pod traffic, external to pod traffic, and pod to external
    traffic. It is recommended that you use network policies mainly for pod-to-pod
    traffic (also called east-west traffic), and to use an external firewall or NSGs
    for external-to-pod or pod-to-external traffic (also called north-south traffic).
  prefs: []
  type: TYPE_NORMAL
- en: AKS supports two options in terms of configuring network policies on your cluster.
    You can either use Azure network policies or Calico network policies. Azure network
    policies are developed, maintained, and supported by Microsoft, whereas Calico
    network policies are developed as an open-source project, with optional commercial
    support by a company called Tigera ([http://tigera.io/](http://tigera.io/)).
  prefs: []
  type: TYPE_NORMAL
- en: In the section on workload network security, you will configure network security
    groups and network policies on your cluster. Configuring an external firewall
    is beyond the scope of this book; please refer to the documentation mentioned
    earlier to learn more about this setup.
  prefs: []
  type: TYPE_NORMAL
- en: Control plane network security
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, you will explore two ways in which to protect the control
    plane of your AKS cluster: Authorized IP ranges and private clusters. You''ll
    start by updating your existing cluster to use authorized IP ranges.'
  prefs: []
  type: TYPE_NORMAL
- en: Securing the control plane using authorized IP ranges
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Configuring authorized IP ranges on AKS will limit which public IP addresses
    can access the control plane of your AKS cluster. In this section, you will configure
    authorized IP ranges on your existing cluster. You will limit traffic to a random
    public IP address to verify that traffic blocking works. You will then configure
    the IP address from the Azure Cloud Shell to be authorized and will see how that
    then allows traffic.
  prefs: []
  type: TYPE_NORMAL
- en: To start, browse to the Azure portal and open the pane for your AKS cluster.
    Select Networking in the left-hand navigation. Then, select the checkbox next
    to Set authorized IP ranges, and fill in the IP address, `10.0.0.0`, in the box
    below, as shown in *Figure 11.3*. You are not using this IP; this configuration
    is only to verify that you will no longer be able to connect to your Kubernetes
    control plane if your IP address is not authorized. Finally, hit the Save button
    at the top of the screen.![Configuring an authorized IP from the Networking pane
    for your AKS cluster](img/B17338_11_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 11.3: Configuring an authorized IP'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, open the Azure Cloud Shell. In the Cloud Shell, execute the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Initially, this might still return the list of nodes as shown in *Figure 11.4*.
    This is because it takes a couple of minutes for the authorized IP ranges to become
    configured on AKS.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Output from watch kubectl get nodes initially still showing the list of nodes](img/B17338_11_04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 11.4: The command might initially still show the list of nodes'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After a couple of minutes, however, the output of this command should return
    an error, as shown in *Figure 11.5*. This is as expected, since you limited the
    access to the control plane.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Error showing that you can no longer connect to the control plane through
    an unauthorized IP](img/B17338_11_05.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 11.5: An error showing that you can no longer connect to the control
    plane'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can stop the `watch` command by pressing *Ctrl + C*. You will now get the
    IP address used by your current Cloud Shell session, and will then configure this
    as an authorized IP. To get the IP address used by your current Cloud Shell session,
    you can connect to [icanhazip.com](http://icanhazip.com), which is a simple website
    that will return your public IP. To do this, execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will return an output similar to *Figure 11.6*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Getting the IP address used by Cloud Shell](img/B17338_11_06.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 11.6: Getting the IP address used by Cloud Shell'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can now configure this IP address as an authorized IP address in AKS. You
    can do this in the Networking section of the AKS pane as you did in *step 1*.
    This is shown in *Figure 11.7*. Make sure to click the Save button at the top
    of the screen.![Configuring the IP address used by Cloud Shell as an authorized
    IPthrough the Networking section of the AKS pane](img/B17338_11_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 11.7: Configuring the IP address of Cloud Shell as an authorized IP
    in AKS'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, execute the same command as before to get the list of nodes in your AKS
    cluster.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Initially, this might still return the error you saw earlier, as shown in *Figure
    11.8*. This is because it takes a couple of minutes for the authorized IP ranges
    to become configured on AKS.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Fetching the list of nodes gives you an error initially as the authorized
    IP is being configured](img/B17338_11_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.8: The command initially still gives an error'
  prefs: []
  type: TYPE_NORMAL
- en: After a couple of minutes, however, the output of this command should return
    a list of nodes, as shown in *Figure 11.9*. This shows you that you successfully
    configured authorized IP ranges.
  prefs: []
  type: TYPE_NORMAL
- en: '![You can now connect to the API server through the authorized IP](img/B17338_11_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.9: By configuring an authorized IP, you can now connect to the API
    server'
  prefs: []
  type: TYPE_NORMAL
- en: By configuring authorized IP ranges, you were able to confirm that when the
    IP address of Cloud Shell was not allowed access to the Kubernetes control plane,
    the connection is timed out. By configuring the IP address of Cloud Shell as an
    authorized IP, you were able to connect to the control plane.
  prefs: []
  type: TYPE_NORMAL
- en: In a typical production scenario, you wouldn't configure IP addresses from Cloud
    Shell as the authorized IP on an AKS cluster, but you would rather configure well-known
    IP addresses or ranges of either of your Kubernetes administrators, your datacenter,
    or known IPs of tools you use. The Cloud Shell was used here just as an example
    to show functionality.
  prefs: []
  type: TYPE_NORMAL
- en: There is a second way to secure the control plane, that is, by deploying a private
    cluster. You will do this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Securing the control plane using a private cluster
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By configuring authorized IP ranges in AKS, you were able to limit which public
    IP addresses can access your cluster. You can also completely limit any public
    traffic to your cluster by deploying a private cluster. A private cluster is only
    reachable through a private connection, established using Azure Private Link.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by configuring a private cluster and trying to access it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The private cluster feature can only be enabled at cluster creation time. This
    means that you will have to create a new cluster. To do this on the free trial
    subscription, you will have to delete the existing cluster. You can do this using
    the following command on Cloud Shell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command will take a couple of minutes to complete. Please wait for it to
    successfully delete your previous cluster.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You are now ready to create a new cluster. Because you will, in later steps,
    also create a new VM to access the cluster (as shown in *Figure 11.2*), you will
    create a new VNet instead of letting AKS create the VNet for you. To create the
    VNet, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will require the ID of the subnet that was created in the VNet. To get
    that ID, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will also need a managed identity that has permission to create resources
    in the subnet you just created. To create the managed identity and give it access
    to your subnet, use the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code will first create the managed identity. Afterward, it gets
    the client ID of the managed identity and grants that access to the subnet. In
    the final command, it is getting the resource ID of the managed identity.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, you can go ahead and create the private AKS cluster using the following
    command. As you might notice, you are creating a smaller cluster using only one
    node. This is to conserve the core quota under the free trial subscription:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The command creates a new AKS cluster with a number of special configurations
    that haven't been covered previously in the book. The first new configuration
    is `--vnet-subnet-id`. This allows you to create an AKS cluster in an existing
    subnet in an existing VNet. The `--enable-managed-identity` parameter enables
    the cluster to use a managed identity, and the `--assign-identity` parameter configures
    which managed identity to use. The final new configuration option you see here
    is `--enable-private-cluster`, which will create a private cluster with a private
    endpoint.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The preceding command will take a couple of minutes to complete. Once it''s
    complete, you can try to access your cluster using the Azure Cloud Shell. This
    will fail, however, because the Azure Cloud Shell isn''t deployed in your VNet.
    Let''s explore this. First, get the cluster credentials:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will ask you whether it may overwrite the existing `kubeconfig` files
    twice. Confirm this by pressing the *y* key, as shown in *Figure 11.10*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Fetching the cluster credentials using the az aks get-credentials command](img/B17338_11_10.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will return an error, as shown in *Figure 11.11*. This error is as expected,
    since you have no private connection from Cloud Shell to the Private Link endpoint.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Error showing you cannot access the control plane from Cloud Shell anymore](img/B17338_11_11.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 11.11: Error showing that you can no longer access the control plane
    from the Cloud Shell'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the previous command, you noticed that your Cloud Shell couldn''t reach
    the Kubernetes API server. It is possible to connect Azure Cloud Shell to a VNet
    in Azure and connect to your Kubernetes API server that way. You will not do so
    in the next steps of this example, but if you are interested in this approach,
    please refer to the documentation: [https://docs.microsoft.com/azure/cloud-shell/private-vnet](https://docs.microsoft.com/azure/cloud-shell/private-vnet).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As mentioned in the introduction, when you create a private AKS cluster, AKS
    will use a service called Private Link to connect the control plane to your VNet.
    You can actually see this endpoint in your subscription in the Azure portal. To
    see the private endpoint, look for Private Link in the Azure search bar, as shown
    in *Figure 11.12*:![Navigating to the Private Link center through the Azure portal](img/B17338_11_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 11.12: Searching for Private Link in the Azure search bar'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the resulting pane, click on Private endpoints to see your current Private
    Link endpoints. You should see a private endpoint by the name of kube-apiserver
    here, as shown in *Figure 11.13*. Here you see the link to the cluster and to
    the subnet where the private endpoint is created.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![The private endpoint in your subscription](img/B17338_11_13.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 11.13: The private endpoints in your subscription'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Private Link makes use of an Azure DNS private zone to link the DNS name of
    the cluster to the private IP of the private endpoint. To see the Azure DNS private
    zone, look for Private DNS zones via the Azure search bar, as shown in *Figure
    11.14*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Navigating to Private DNS zones through the Azure search bar](img/B17338_11_14.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 11.14: Navigating to Private DNS zones through the Azure portal'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the resulting pane, you should see one private DNS zone. If you click on
    that zone, you will see more details from the DNS zone, as shown in *Figure 11.15*.
    You see here that a DNS record got created for your cluster DNS name, pointing
    to a private IP address in your VNet.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Showing the DNS record in the Azure private DNS zone](img/B17338_11_15.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 11.15: The DNS record in the Azure DNS private zone that got created
    by AKS'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To establish a private connection to the control plane, you will now create
    a new VM and use it to connect to the control plane. For organization purposes,
    you''ll create this VM in a new resource group. This will make it easier to delete
    the VM later. Use the following commands to create a new subnet in your VNet and
    to create a VM in that subnet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'It will take about a minute for the VM to be created. Once it is created, you
    should get an output similar to *Figure 11.16*. Copy the public IP address in
    your output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Creating a new VM and fetching its public IP address](img/B17338_11_16.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 11.16: Creating a new VM and getting its public IP address'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that the VM is created, you will move your Kubernetes config file containing
    the cluster credentials to that VM. This avoids you having to install the Azure
    CLI on the target machine to get the Kubernetes credentials. Make sure to replace
    `<public IP>` with the outcome from the previous step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will be prompted if you trust this host. Confirm this by typing `yes`.
    This will create an output similar to *Figure 11.17*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Copying the Kubernetes config file to the VM](img/B17338_11_17.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 11.17: Copying the Kubernetes credentials to the target machine'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can now access the remote machine using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that you''re connected to the remote machine, you''ll need to use `kubectl`.
    Download it, make it executable, and move it into the binaries folder using the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To have `kubectl` recognize the config file you uploaded, you have to move
    it into the `kube` directory. You can do so using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that you have this VM configured to connect to your cluster, you can verify
    that you can connect to this cluster by applying the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should generate an output similar to *Figure 11.18*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Verifying the connection to the cluster using the kubectl get nodes command](img/B17338_11_18.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 11.18: Accessing the private AKS cluster from a VM in the same VNet'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can also verify the DNS record that your VM is using to connect to the
    cluster. To do this, first get the `nslookup` command to get the DNS record. You
    can use the following commands to do this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should produce an output similar to *Figure 11.19*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Fetching the cluster’s FQDN and looking up its IP address using nslookup
    ](img/B17338_11_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.19: Getting the cluster''s FQDN and looking up its IP address using
    nslookup'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in *Figure 11.19*, the address that you are getting back from
    the `nslookup` command is a private IP address. This means that only machines
    connected to that VNet will be able to connect to the Kubernetes control plane.
  prefs: []
  type: TYPE_NORMAL
- en: You have now successfully created an AKS private cluster and verified that only
    machines connected to the AKS VNet can connect to the control plane. You couldn't
    connect to the control plane from within the Azure Cloud Shell, but you could
    connect to it from a VM in the same VNet. Since you now have a private cluster
    deployed, don't delete the VM you are using just yet. You will use it in the next
    example. You will delete this private cluster and the VM in the final example
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: This also concludes this section on control plane security. You have learned
    about authorized IP ranges and private clusters. In the next section, you'll learn
    more about how you can secure your workload.
  prefs: []
  type: TYPE_NORMAL
- en: Workload network security
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have now learned about how to protect the network of your control plane
    of your AKS cluster. This, however, hasn't influenced the network security of
    your workloads. In this section, you will explore three ways in which you can
    protect your workloads. First, you will create a Kubernetes service using an Azure
    internal load balancer. Then, you'll secure traffic to a service in Kubernetes
    using NSGs. Finally, you will use network policies to secure pod-to-pod traffic.
  prefs: []
  type: TYPE_NORMAL
- en: Securing the workload network using an internal load balancer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Kubernetes has multiple types of services, as you learned in *Chapter 3*, *Application
    Deployment on AKS*. You have used the service type load balancer multiple times
    before to have AKS create an Azure load balancer. These have always been public
    load balancers. You can also configure AKS in such a way that it will create an
    internal load balancer. This is useful in cases where you are creating a service
    that only needs to be accessible from within a VNet or networks connected to that VNet.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will create such a service in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are no longer connected to the VM you created in the previous example,
    reconnect to it. You can get the VM''s public IP address using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And you can connect to the VM using the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once connected to this VM, you will need to retrieve the git repository linked
    with this book. You can get this using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once the repository is cloned, navigate into the samples for this chapter using
    the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As the example application in this section, you will use the guestbook application
    you''ve already used in the first half of this book. However, the all-in-one YAML
    file you used before has been broken up into two files: `guestbook-without-service.yaml`
    and `front-end-service-internal.yaml`. The reason for this is to make it easier
    for you to explore the service-specific configuration.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `front-end-service-internal.yaml` file contains the configuration to create
    a Kubernetes service using an Azure internal load balancer. The following code
    is part of that example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You are using annotations in the YAML code to instruct AKS to create an Azure
    internal load balancer. You can see on lines 5-6 of the preceding code example
    that you are setting the `service.beta.kubernetes.io/azure-load-balancer-internal`
    annotation to `true`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can create the guestbook application and the service using the internal
    load balancer by applying the following commands:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can then get the service and wait for it to get an external IP using the
    following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will return an output similar to *Figure 11.20*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Getting the external IP of the frontend service, which is a private IP](img/B17338_11_20.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 11.20: Getting the service''s external IP'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As you can see, the service has a private IP as an external IP. You can only
    access this IP from the VNet that the cluster is deployed into, or from other
    networks connected to that VNet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will return a result similar to *Figure 11.21*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Accessing the frontend service using the curl command](img/B17338_11_21.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 11.21: Accessing the service exposed through the internal load balancer'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: AKS created an internal load balancer to expose this service. You can see this
    load balancer in the Azure portal as well. To see this internal load balancer,
    start by searching for load balancer in the Azure search bar, as shown in *Figure 11.22*:![Searching
    for load balancer in the Azure search bar](img/B17338_11_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 11.22: Navigating to Load balancers through the Azure portal'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the resulting pane, you should see two load balancers, as shown in *Figure 11.23*:![Output
    showing two load balancers, one called kubernetes the other called Kubernetes-internal](img/B17338_11_23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 11.23: List of load balancers in the default directory'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the kubernetes-internal load balancer. This will take you to a pane
    similar to *Figure 11.24*:![Overview of the kubernetes-internal load balancer.
    The private IP address is the same address used earlier to connect to the frontend
    service](img/B17338_11_24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 11.24: Details of the internal load balancer'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Here, you can see the details of this internal load balancer. As you can see
    in the highlight in the screenshot, the same IP that you saw as the output of
    the `kubectl` command is configured on the load balancer.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'This concludes the example of using an internal load balancer. You can now
    delete the service using the internal load balancer by applying the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will delete the guestbook application and the service. When deleting the
    service, both the service in Kubernetes, as well as the internal load balancer
    in Azure, will be deleted. This is because once there are no more services in
    your cluster requiring an internal load balancer, AKS will delete that internal
    load balancer.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In this section, you deployed a Kubernetes service using an internal load balancer.
    This gives you the ability to create services that are not exposed to the internet.
    There are, however, cases where you need to expose a service to the internet,
    but need to ensure that only trusted parties can connect to it. In the next section,
    you'll learn how you can create a service in AKS that uses a network security
    group to limit inbound traffic.
  prefs: []
  type: TYPE_NORMAL
- en: Securing the workload network using network security groups
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Up to this point in the book, you have exposed multiple services in Kubernetes.
    You've exposed them both using the service object in Kubernetes, as well as using
    an ingress. However, you never restricted access to your application, except in
    the previous section, by deploying an internal load balancer. This means that
    the application was always publicly accessible. In the following example, you
    will create a service on your Kubernetes cluster that will have a public IP, but
    you will restrict access to it using an NSG that is configured by AKS.
  prefs: []
  type: TYPE_NORMAL
- en: As the example application in this section, you will again use the guestbook
    application. As in the previous section, the front-end service configuration has
    been moved to a separate file. For this example, you'll start by using the `front-end-service.yaml`
    file to create the service, and later update that using the `front-end-service-secured.yaml`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s start by deploying the application as-is, without any NSG configuration,
    by applying the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, get the front-end service''s IP address using the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will create an output similar to *Figure 11.25*. Once you get the public
    IP, you can exit out of the command by pressing *Ctrl + C*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Fetching the front-end service’s IP address](img/B17338_11_25.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 11.25: Getting the front-end service''s IP address'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You are now able to connect to this service using both your browser as well
    as using the VM itself. If you connect using your browser, you should expect an
    output similar to *Figure 11.26*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Accessing the guestbook application using the external IP](img/B17338_11_26.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 11.26: Accessing the guestbook application through a web browser'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can also connect to this application using the command line. To do this,
    use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should return an output similar to *Figure 11.27*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Connecting to the guestbook application using the command line](img/B17338_11_27.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 11.27: Connecting to the guestbook application using the command line'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Let's now configure additional security on the front-end service by only allowing
    your browser to connect to the application. For this, you will require the public
    IP address you are using right now. If you don't know this, you can browse to
    [https://www.whatismyip.com/](https://www.whatismyip.com/) to get your IP address,
    as shown in *Figure 11.28*:![Using https://www.whatismyip.com/ to get your IP
    address](img/B17338_11_28.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This file is very similar to the services you created earlier in this book.
    However, on lines 15 and 16, you now see `loadBalancerSourceRanges` and the option
    to add your own public IP address. You can provide multiple public IP addresses
    or ranges here; each address or range would be prepended with a dash. If you wish
    to enter an individual IP address rather than a range, append `/32` to that IP
    address. You need to do this since Kubernetes expects IP ranges, and a range of
    `/32` equals a single IP address.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To edit or add your own IP address in this file, use the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the resulting application, use the arrow keys to navigate to the bottom
    line, hit the *i* button to enter `insert` mode, remove the placeholder, add in
    your IP address, and then append that with `/32`. To close and save the file,
    hit the *Esc* key, type `:wq!` to write and close the file, and finally hit *Enter*.
    An example is shown in *Figure 11.29*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Editing the front-end-service-secured.yaml file by adding your own IP](img/B17338_11_29.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 11.29: An example of the front-end-service-secured.yaml file with an
    IP address'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can update the exiting service that was deployed before using the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will cause AKS to update the NSG linked to this cluster to only allow
    traffic from your public IP address. You can confirm this by browsing to the IP
    address of the service again, and you should see the guestbook application. However,
    if you retry the command from earlier from the VM, you should see it eventually
    time out:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will time out after 2 minutes, with an output similar to *Figure 11.30*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![The connection from within the VM times out](img/B17338_11_30.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 11.30: The connection from within the VM times out'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can verify the NSG configuration in Azure itself as well. To verify this,
    look for Network security groups via the Azure search bar, as shown in *Figure
    11.31*:![Searching for network security group in the Azure search bar](img/B17338_11_31.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 11.31: Navigating to Network security groups through the Azure portal'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the resulting pane, you should see two NSGs. Select the one whose name starts
    with aks-agentpool, as shown in *Figure 11.32*:![Selecting the desired NSG from
    the NSG page](img/B17338_11_32.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 11.32: Selecting the aks-agentpool NSG'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the resulting detailed view of that NSG, you should see a rule that allows
    traffic from your IP address to the service's public IP address, as you can see
    in *Figure 11.33*:![The NSG contains a rule that allows traffic only from the
    public IP defined earlier](img/B17338_11_33.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 11.33: The NSG contains a rule that allows traffic only from the public
    IP defined earlier'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Notice how this rule was created and is managed by AKS; you didn't have to create
    this yourself.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Here, we''ve concluded this example. Let''s clean up the deployment, the VM,
    and the private cluster. From within the VM, delete the application using the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, exit out of the VM using the `exit` command. This will return you to
    Cloud Shell. Here, you can go ahead and delete the private cluster and the VM
    you used to connect to it:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: By adding additional configuration to a Kubernetes service, you were able to
    limit who was able to connect to your service. You were able to confirm that only
    the public IP that was allowed to connect to the service was able to connect to
    it. A connection not coming from this public IP address timed out.
  prefs: []
  type: TYPE_NORMAL
- en: This is an example of protecting what is called north-south traffic, meaning
    traffic coming from the outside to your cluster. You can also add additional protections
    to east-west traffic, meaning traffic inside your cluster. To do this, you will
    use a feature called network policies in Kubernetes. You will do that in the next
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Securing the workload network using network policies
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the previous section, you let Kubernetes configure an NSG in Azure to protect
    north-south traffic. This is a good practice for limiting the network traffic
    coming to your public services. In most scenarios, you will also need to protect
    the east-west traffic, meaning the traffic between your pods. That way, you can
    ensure that if a potential attacker were to get access to part of your application,
    they'd have limited ability to connect to other parts of the application or different
    applications. This is also known as protecting from lateral movement.
  prefs: []
  type: TYPE_NORMAL
- en: To protect the traffic between pods, Kubernetes has a functionality called network
    policies. Network policies can be used to protect traffic from the outside to
    your pods, and from your pods to the outside, as well as traffic between pods.
    Since you have already learned about one way to protect traffic from the outside
    to your pods, in this section, you will learn how to use network policies to protect
    pod-to-pod traffic.
  prefs: []
  type: TYPE_NORMAL
- en: In AKS, network policies are something you need to configure on your cluster
    at cluster creation time (it is this way at the time of this writing). If your
    cluster has network policies enabled, you can create new network policy objects
    on your cluster. When there is no network policy selecting a certain pod, all
    traffic to and from that pod is allowed. When you apply a network policy to a
    pod, depending on the configuration, all traffic to and/or from that pod is blocked,
    except for the traffic allowed by that network policy.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try this out:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by creating a new cluster with network policies enabled. In this example,
    you''ll create a cluster with Azure network policies enabled. You can create this
    new cluster using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once the cluster is created, make sure to refresh the credentials to get access
    to the cluster. You can do this using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will prompt you to overwrite the existing credentials. You can confirm
    this by typing *y* in the two prompts, as shown in *Figure 11.34*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Refresh the credentials by overwriting them to get access to the cluster](img/B17338_11_34.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 11.34: Getting credentials for the new cluster'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For this example, you will test connections between two web servers in a pod
    running `nginx`. The code for these has been provided in the `web-server-a.yaml`
    and `web-server-b.yaml` files. This is the code for `web-server-a.yaml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is the code for `web-server-b.yaml`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see in the code for each of the pods, each pod has a label app, `web-server`,
    and another label called `env`, with the value of each server (A for `web-server-a`
    and B for `web-server-b`). You will use these labels later in this example to
    selectively allow traffic between these pods.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To create both pods, use the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify that the pods are running before moving forward by running the following
    command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should return an output similar to *Figure 11.35*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Verifying that both the created pods are running](img/B17338_11_35.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 11.35: Both pods are running'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For this example, we''ll use the pod''s IP addresses to test the connection.
    Get the IP address for `web-server-b` using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should return an output similar to *Figure 11.36*, in which you''ll see
    the IP address highlighted:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Fetching the IP address of the web-server-bpod to test the connection](img/B17338_11_36.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 11.36: Getting the IP address of web-server-b'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, try to connect from `web-server-a` to `web-server-b`. You can test this
    connection using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should return an output similar to *Figure 11.37*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Verifying that web-server-a can connect to web-server-b](img/B17338_11_37.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 11.37: Verifying that web-server-a can connect to web-server-b'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s now create a new `NetworkPolicy` object that will limit all traffic
    to and from the pods with the label app `web-server`. This policy has been provided
    in the `deny-all.yaml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s explore what''s contained in this code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`NetworkPolicy` object.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app: web-server`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lines 9-10**: Here, you define the allow rules. As you can see, you are not
    defining any allow rules, which will mean that all traffic will be blocked.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Later in this example, you will add more specific ingress and egress rules to
    selectively allow traffic to flow.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s now create this network policy. You can do this using the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will return an output similar to *Figure 11.38*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Creating a network policy](img/B17338_11_38.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 11.38: Creating the network policy'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Let's now test the connection between `web-server-a` and `web-server-b` again.
    You can test this using the following command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should return an output similar to *Figure 11.39*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Traffic is no longer flowing between web-server-a and web-server-b](img/B17338_11_39.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 11.39: Traffic is no longer flowing between web-server-a and web-server-b'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You will now create another network policy that will selectively allow traffic
    from `web-server-a` to `web-server-b`. This policy is included in the `allow-a-to-b.yaml`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s explore the difference in this file versus the earlier network policy
    in more depth:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`env: A`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`env: B`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Also, note that you are creating this network policy with a new name. This
    means you will have two network policies active on your cluster selecting the
    pods with the label `app: web-server`. Both the `deny-all` and `allow-a-to-b`
    network policies will be present on your cluster, and both apply to pods with
    the label `app: web-server`. Network policies, by design, are additive, meaning
    that if any one of the policies allows the traffic, the traffic will be allowed.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s create this policy using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will return an output similar to *Figure 11.40*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Creating a new network policy to allow traffic from web-server-a to web-server-b](img/B17338_11_40.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 11.40: Creating a new network policy to allow traffic from web-server-a
    to web-server-b'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s test the connection between `web-server-a` and `web-server-b` again.
    You can test this by applying the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should return an output similar to *Figure 11.41*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Traffic is flowing again between web-server-a and web-server-b](img/B17338_11_41.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 11.41: Traffic is again allowed from web-server-a to web-server-b'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You have now allowed traffic from `web-server-a` to `web-server-b`. You have,
    however, not allowed the traffic to pass the other way, meaning traffic from `web-server-b`
    to `web-server-a` is blocked. Let''s test this as well. To test this, get the
    IP address of `web-server-a` using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will return an output similar to *Figure 11.42*, where the IP address
    of `web-server-a` has been highlighted:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Getting the IP address of web-server-a](img/B17338_11_42.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This should return an output similar to *Figure 11.43*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Output showing that traffic is not allowed from web-server-b to web-server-a](img/B17338_11_43.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 11.43: Traffic from web-server-b to web-server-a is not allowed, as
    expected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As you can see in *Figure 11.43*, the traffic from `web-server-b` to `web-server-a`
    times out, showing you that the traffic is blocked.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'This concludes the example regarding network policies in Azure. In the next
    chapter, you will create a new cluster again, so to conclude this chapter, it
    is safe to delete this cluster with network policies enabled, using the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You have now used network policies to protect traffic between pods. You saw
    how a default policy will deny all traffic, and how you can add new policies to
    selectively allow traffic. You also saw that if you allow traffic from one pod
    to another, that the inverse is not automatically allowed.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This chapter introduced you to multiple network security options in AKS. You
    explored both securing the control plane and the workload in the cluster.
  prefs: []
  type: TYPE_NORMAL
- en: To secure the control plane, you first used authorized IP ranges to verify that
    only allowed public IP addresses can access the control plane of your cluster.
    After that, you created a new private cluster, which was only reachable using
    a private connection. You connected to that private cluster using Azure Private
    Link.
  prefs: []
  type: TYPE_NORMAL
- en: After that, you also explored workload network security. Initially, you deployed
    a public service, which was available for all users. You then had AKS configure
    Azure NSGs to secure that service only to an allowed connection. You verified
    that you could connect to the service from your machine, but not from a VM in
    Azure, as expected. Finally, you also configured Kubernetes network policies in
    a new cluster. You used those to protect pod-to-pod traffic and were able to secure
    traffic between different pods on your cluster.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how you can use AKS to create Azure resources,
    such as an Azure Database for MySQL, using the Azure Service Operator.
  prefs: []
  type: TYPE_NORMAL

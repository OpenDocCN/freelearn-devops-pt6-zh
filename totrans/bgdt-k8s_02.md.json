["```\napiVersion: v1\nkind: Pod\nmetadata:\n    name: myapp-pod\n    labels:\n    app: myapp\nspec:\n    containers:\n    - name: myapp-container\n    image: myimage:latest\n    ports:\n    - containerPort: 80\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n    name: myapp-deployment\nspec:\n    replicas: 3\n    selector:\n    matchLabels:\n      app: myapp\n    template:\n    metadata:\n      labels:\n        app: myapp\n    spec:\n      containers:\n      - name: myapp\n        image: nginx:1.16\n        ports:\n        - containerPort: 80\n```", "```\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n    name: mysql\nspec:\n    serviceName: \"mysql\"\n    replicas: 1\n    selector:\n    matchLabels:\n      app: mysql\n    template:\n    metadata:\n      labels:\n        app: mysql\n    spec:\n      containers:\n      - name: mysql\n        image: mysql:5.7\n        ports:\n        - containerPort: 3306\n          name: mysql\n        volumeMounts:\n        - name: mysql-persistent-storage\n          mountPath: /var/lib/mysql\n    volumeClaimTemplates:\n    - metadata:\n      name: mysql-persistent-storage\n    spec:\n      accessModes: [ \"ReadWriteOnce\" ]\n      storageClassName: \"my-storage-class\"\n      resources:\n        requests:\n          storage: 1Gi\n```", "```\napiVersion: batch/v1\nkind: Job\nmetadata:\n    name: myjob\nspec:\n    template:\n    spec:\n      containers:\n      - name: myjob\n        image: busybox\n        command: ['sh', '-c', 'echo Hello Kubernetes! && sleep 30']\n      restartPolicy: Never\n    backoffLimit: 4\n```", "```\napiVersion: v1\nkind: Service\nmetadata:\n    name: my-service\nspec:\n    type: ClusterIP\n    selector:\n    app: my-app\n    ports:\n    - protocol: TCP\n     port: 80\n     targetPort: 9376\n```", "```\napiVersion: v1\nkind: Service\nmetadata:\n    name: my-service\nspec:\n    type: NodePort\n    selector:\n    app: my-app\n    ports:\n    - port: 80\n      targetPort: 9376\n      nodePort: 30007\n```", "```\napiVersion: v1\nkind: Service\nmetadata:\n    name: my-service\nspec:\n    selector:\n    app: my-app\n    ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 9376\n    type: LoadBalancer\n```", "```\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n    name: example-ingress\nspec:\n    backend:\n    service:\n      name: example-service\n      port:\n        number: 80\n    rules:\n    - http:\n        paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name: example-service\n                port:\n                  number: 80\n```", "```\nspec:\n    rules:\n    - http:\n        paths:\n          - path: /foo\n            backend:\n              service:\n                name: foo-service\n                port:\n                  number: 80\n    - http:\n        paths:\n          - path: /bar\n            backend:\n              service:\n                name: bar-service\n                port:\n                  number: 80\n```", "```\nmetadata:\n    annotations:\n    nginx.ingress.kubernetes.io/ssl-redirect: \"false\"\n```", "```\nspec:\n    rules:\n    - host: foo.example.com\n    http:\n      paths:\n      - path: /\n        backend:\n          serviceName: foo-service\n          servicePort: 80\n    - host: bar.example.com\n    http:\n      paths:\n      - path: /\n        backend:\n          serviceName: bar-service\n          servicePort: 80\n```", "```\napiVersion: gateway.networking.k8s.io/v1\nkind: GatewayClass\nmetadata:\n    name: external-lb\nspec:\n    controllerName: lb.acme.io/gateway-controller\n```", "```\napiVersion: gateway.networking.k8s.io/v1\nkind: Gateway\nmetadata:\n    name: my-gateway\nspec:\n    gatewayClassName: external-lb\n    listeners:\n    - name: http\n    port: 80\n    protocol: HTTP\n```", "```\napiVersion: gateway.networking.k8s.io/v1\nkind: HTTPRoute\nmetadata:\n    name: http-route\nspec:\n    parentRefs:\n    - name: my-gateway\n    rules:\n    - matches:\n    - path:\n    type: PathPrefix\n    value: /foo\n    backendRefs:\n    - name: my-foo-service\n      port: 80\n    - matches:\n    - path:\n        type: PathPrefix\n        value: /bar\n    backendRefs:\n    - name: my-bar-service\n      port: 80\n```", "```\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n    name: pv0003\nspec:\n    capacity:\n    storage: 5Gi\n    volumeMode: Filesystem\n    accessModes:\n    - ReadWriteOnce\n    persistentVolumeReclaimPolicy: Recycle\n    storageClassName: slow\n    mountOptions:\n    - hard\n    - nfsvers=4.1\n    nfs:\n    path: /tmp\n    server: 172.17.0.2\n```", "```\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n    name: myclaim\nspec:\n    accessModes:\n    - ReadWriteOnce\n    volumeMode: Filesystem\n    resources:\n    requests:\n      storage: 8Gi\n    storageClassName: slow\n    selector:\n    matchLabels:\n      release: \"stable\"\n```", "```\nkind: Pod\napiVersion: v1\nmetadata:\n    name: mypod\nspec:\n    containers:\n    - name: myfrontend\n      image: nginx\n      volumeMounts:\n      - mountPath: \"/var/www/html\"\n        name: mypd\n    volumes:\n    - name: mypd\n      persistentVolumeClaim:\n        claimName: myclaim\n```", "```\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n    name: standard\nprovisioner: kubernetes.io/gce-pd\nparameters:\n    type: pd-standard\n---\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n    name: fast\nprovisioner: kubernetes.io/gce-pd\nparameters:\n    type: pd-ssd\n```", "```\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n    name: myclaim\nspec:\n    accessModes:\n    - ReadWriteOnce\n    storageClassName: fast\n    resources:\n    requests:\n      storage: 30Gi\n```", "```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n    name: app-config\ndata:\n    config.properties: |\n    app.color=blue\n    app.mode=prod\n```", "```\nkubectl create configmap app-config --from-file=path/to/dir\nkubectl create configmap app-config --from-file=config.properties\nkubectl create configmap app-config --from-literal=app.color=blue\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n    name: configmap-demo\nspec:\n    containers:\n    - name: demo\n      image: alpine\n      env:\n        - name: APP_COLOR\n          valueFrom:\n            configMapKeyRef:\n              name: app-config\n              key: app.color\n      args:\n        - $(APP_MODE)\n        valueFrom:\n          configMapKeyRef:\n            name: app-config\n            key: app.mode\n      volumeMounts:\n        - name: config-volume\n          mountPath: /etc/config\n    volumes:\n    - name: config-volume\n      configMap:\n        name: app-config\n```", "```\nkubectl create secret generic db-secret \\\n--from-literal=DB_HOST=mysql \\\n--from-literal=DB_USER=root \\\n--from-literal=DB_PASSWORD=password123\n```", "```\nkubectl create secret generic ssh-key-secret --from-file=ssh-privatekey=/path/to/key\nkubectl create secret generic app-secret --from-file=/path/to/dir\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n    name: secret-demo\nspec:\n    containers:\n    - name: demo\n    image: nginx\n    env:\n      - name: DB_HOST\n        valueFrom:\n          secretKeyRef:\n            name: db-secret\n            key: DB_HOST\n      - name: DB_USER\n        valueFrom:\n          secretKeyRef:\n            name: db-secret\n            key: DB_USER\n      - name: DB_PASSWORD\n        valueFrom:\n          secretKeyRef:\n            name: db-secret\n            key: DB_PASSWORD\n    volumeMounts:\n      - name: secrets-volume\n        mountPath: /etc/secrets\n        readOnly: true\n    volumes:\n    - name: secrets-volume\n      secret:\n        secretName: app-secret\n```"]
- en: '8'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Displaying Data with Dashboards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have explored the topics covered in the earlier chapters together,
    we have a good understanding of the many ways to retrieve accessible data from
    Grafana. We will now create our first **dashboard** together and look at different
    ways to visualize our data. We will then explore concepts and techniques that
    help you communicate effectively with your dashboards and reduce cognitive load
    for your viewers. We will look at a few resources for inspiration out in the community
    to inspire you with your dashboards. Then, to finish, we will share guidance around
    managing your dashboard artifacts as they grow to help you get organized.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first dashboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing your dashboard further
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using visualizations in Grafana
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing a dashboard purpose
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advanced dashboard techniques
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing and organizing dashboards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Case study – an overall system view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will work with the Grafana user interface using the Grafana
    Cloud instance and the demo you set up in [*Chapter 3*](B18277_03.xhtml#_idTextAnchor063).
    Also, to ensure you have all the data sources and settings available, be sure
    to have implemented the updates in [*Chapter 6*](B18277_06.xhtml#_idTextAnchor134)
    to your stack. Let’s dive in and create our first dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first dashboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dashboards are a medium to communicate important and sometimes urgent information
    to consumers. Before we delve into design techniques and best practices, let’s
    get familiar with the Grafana user interface to start with a simple dashboard.
    The demo application we have worked with throughout this book has a frontend store;
    let’s look at the requests we get for its shopping cart.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create your first panel and dashboard, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In your Grafana instance, select **Explore** in the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose your Prometheus data source; this will be labeled as **grafanacloud-<team>-prom
    (default)**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Metric** dropdown, choose **app_frontend_requests_total** (the metric
    count of requests to the frontend app), and in the **Label filters** dropdown,
    choose **target = /api/cart** as the filter (to restrict the results to the cart
    API only), and then click on **Run query**. You should see data like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.1 – App frontend requests](img/B18277_8.1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.1 – App frontend requests
  prefs: []
  type: TYPE_NORMAL
- en: We now have a representation of the time series data in a graph.
  prefs: []
  type: TYPE_NORMAL
- en: To add this to a dashboard, select the **Add** drop-down menu button at the
    top of the **Explore** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Choose **Add** **to dashboard**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.2 – The Add to dashboard menu](img/B18277_8.2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.2 – The Add to dashboard menu
  prefs: []
  type: TYPE_NORMAL
- en: 'From the pop-up screen, ensure **New dashboard** is selected, and then click
    **Open dashboard**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.3 – Add panel to dashboard](img/B18277_8.3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.3 – Add panel to dashboard
  prefs: []
  type: TYPE_NORMAL
- en: 'You will now have your new dashboard on screen with its first panel. As you
    can see, there are a few problems – the legend is difficult to read, the data
    does not make much sense, and the panel title does not relate to the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.4 – The New dashboard view](img/B18277_8.4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.4 – The New dashboard view
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s make a few changes to improve this a little. From the triple-dots drop-down
    menu, select **Edit**. The panel editor will appear; you should see something
    like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.5 – The panel editor](img/B18277_8.5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.5 – The panel editor
  prefs: []
  type: TYPE_NORMAL
- en: 'Give the panel a meaningful name. We’ve entered `Frontend Requests` in the
    **Title** field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.6 – Query options](img/B18277_8.6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.6 – Query options
  prefs: []
  type: TYPE_NORMAL
- en: The graph, by default, will show data from both **Range** and **Instant** queries,
    which can look odd on a time series visualization, as you will see a timeline
    and then standalone single values. Change **Type** to **Range** only.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the **Apply** button to update the panel and return to the dashboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.7 – The panel Apply button](img/B18277_8.7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.7 – The panel Apply button
  prefs: []
  type: TYPE_NORMAL
- en: 'You will now see the dashboard panel name applied to the metrics shown. Click
    the Save icon on the dashboard menu bar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.8 – Saving the dashboard](img/B18277_8.8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.8 – Saving the dashboard
  prefs: []
  type: TYPE_NORMAL
- en: Give your new dashboard a meaningful name that reflects its purpose; we have
    a `Frontend Dashboard`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.9 – The Save dashboard panel](img/B18277_8.9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.9 – The Save dashboard panel
  prefs: []
  type: TYPE_NORMAL
- en: We now have our first dashboard, but it is very simple, with only one panel.
    It does not effectively communicate much, and the number of frontend requests
    alone does not give an indication of what is happening to our online store. Let’s
    explore what else we can do to improve this.
  prefs: []
  type: TYPE_NORMAL
- en: Developing your dashboard further
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s now develop our dashboard further and improve the information we share.
    Approaching your dashboard as a work in progress that you can iterate over as
    you develop the message it is communicating is key to getting the right message
    across. In this section, we’ll use an example where there’s an increasing count
    of requests to the frontend app, which does not really tell us much. Showing the
    rate of those requests makes more sense, as we will be able to see the speed at
    which they arrive in our app. Let’s make that change now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the panel’s triple-dots drop-down menu, select **Edit** and you will see
    the following screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.10 – The panel editor](img/B18277_8.10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.10 – The panel editor
  prefs: []
  type: TYPE_NORMAL
- en: 'Back in the panel editor, we can see that the query build gives us a hint to
    add a rate; this is highlighted with a blue box around it. Click on this hint
    to add the suggested aggregation to the existing query (if the hint does not appear,
    click the **Operations** button, and select **Rate** with a range of **$__rate_interval**):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.11 – The Rate query](img/B18277_8.11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.11 – The Rate query
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the graph now shows how many frontend **GET** and **POST** requests
    per second come into our store. This is much more useful, but the legend is confusing,
    so let’s clean that up.
  prefs: []
  type: TYPE_NORMAL
- en: Expand the **Options** section just below the PromQL query preview.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Replace the contents of the `{{method}}`), as shown in *Figure 8**.12*; this
    will extract the values from the method label as the values for the graph’s legend.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'While we are here, let’s also change the title to reflect we are now showing
    a rate, not a count, and add a meaningful description, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.12 – Panel updates](img/B18277_8.12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.12 – Panel updates
  prefs: []
  type: TYPE_NORMAL
- en: 'Once again, click the **Apply** button to update the panel and return to the
    dashboard. You should see a dashboard like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.13 – Our first dashboard](img/B18277_8.13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.13 – Our first dashboard
  prefs: []
  type: TYPE_NORMAL
- en: As we can see in the preceding screenshot, we now have a meaningful presentation
    of the rate of **GET** and **POST** requests coming into the frontend API. The
    name of the dashboard and panel reflect their purpose well, and there is also
    a new **i** icon next to the panel, which will display the description you added
    when you hover over it.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now look at the visualizations available in Grafana and how to use them.
  prefs: []
  type: TYPE_NORMAL
- en: Using visualizations in Grafana
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Grafana has a large selection of visualizations to support your varying use
    cases and data formats. For example, for the counter and gauge metric types, you
    could use the **Stat** or **Gauge** visualization, and the histogram could use
    **Bar chart** or **Gauge**. Logs can be presented using the table visualization
    or by generating metrics from your logs in the time series chart. You can find
    the latest searchable list of plugins here on the Grafana website: [https://grafana.com/grafana/plugins/panel-plugins/](https://grafana.com/grafana/plugins/panel-plugins/).
    A great place to try them out and get ideas you can use in your own dashboards
    is [https://play.grafana.org](https://play.grafana.org), where you will find dashboard
    examples of all the panel visualizations along with a wide range of data types.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To change the panel visualization from within the panel editor, you can use
    the visualization selector, which is on the top right-hand side. Selecting it
    will display a searchable list, with a graphical representation of what the visualization
    looks like. This can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.14 – Grafana visualizations](img/B18277_8.14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.14 – Grafana visualizations
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s try this with our panel on our first dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: From the panel’s triple-dots drop-down menu, select **Edit**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select **Stat** from the list of panel visualizations. You should see the dashboard
    panel change to look similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.15 – Stat visualisation](img/B18277_8.15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.15 – Stat visualisation
  prefs: []
  type: TYPE_NORMAL
- en: To better understand the options available, take some time to try out the different
    visualizations, or spend time on Grafana Play exploring the examples there. Once
    you know the visualizations available and the different panel configurations for
    each, it will become much easier for you to design your own dashboards.
  prefs: []
  type: TYPE_NORMAL
- en: 'A typical panel configuration will have the following items:'
  prefs: []
  type: TYPE_NORMAL
- en: '**A title and description**: While the title should help people understand
    the data presented, the description should complement or embellish the title.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A legend configuration**: The legend should help interpret data presented
    with context and clarity. It can be formatted to support visually processing data
    and can interact with the view, filtering data to the selected item.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A standard options setup**: This is used to control the options for the units,
    maximum and minimum values, decimals, display name, and color scheme.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A panel-specific options setup**: Each visualization can have its own panel
    configurations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Thresholds**: These are used to control colors, backgrounds, or values displayed,
    based on whether a data threshold value is met or exceeded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Overrides**: Custom visualization settings can be applied to data to format
    and alter the presentation – for example, removing decimals and showing unit identifiers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Value mappings**: These are similar to the overrides used to change the visual
    treatment of your data. They can be used to replace returned values with colors
    or values based on data matches (including ranges and regular expressions) to
    alter the visual presentation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spending time developing your familiarity with the configuration of some of
    the main visualization panels will give you the confidence to shape and present
    data for your users.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now take a look at some design concepts that will help you present your
    data more effectively.
  prefs: []
  type: TYPE_NORMAL
- en: Developing a dashboard purpose
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When creating a dashboard, it is very important that it has an objective. There
    are three key questions you can ask yourself to help you get the answers that
    identify those objectives:'
  prefs: []
  type: TYPE_NORMAL
- en: Who is the audience?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are their requirements?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Where will the dashboard be viewed (on a big screen or a mobile phone)?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A dashboard must tell a story or answer a question, but we cannot do either
    of those things without answering the preceding questions. Let’s refer to the
    personas introduced in [*Chapter 1*](B18277_01.xhtml#_idTextAnchor018) to think
    about the type of people who need dashboards, what they want from them, and where
    they will see them:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **Persona** | **Requirements** |'
  prefs: []
  type: TYPE_TB
- en: '| ![A person in a suit and tie'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated with medium confidence](img/B18277_Table__Person_8.1.png)
    | Diego the Developer | Insight into the traffic flowing through the systems I
    develop. This will inform how customers are using our product and help me make
    it better. Often, I need to investigate bugs and dig deeper into errors with much
    more detail. |
  prefs: []
  type: TYPE_NORMAL
- en: '| ![A cartoon of a person'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18277_Table__Person_8.2.png) | Ophelia
    the Operator | Visibility of problems as they happen, with clear indicators and
    colors to represent system states. Things need to be simple to understand at a
    glance. Dashboards will usually be on a large screen but need to be on my computer
    if I am investigating an issue. |
  prefs: []
  type: TYPE_NORMAL
- en: '| ![A person wearing a suit and tie'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18277_Table__Person_8.3.png) | Steven
    the Service Manager | Overall, a system view that helps me see the wider picture.
    If there is a problem, I need the information to identify who can solve it. I
    will view this on my computer. |
  prefs: []
  type: TYPE_NORMAL
- en: '| ![A cartoon of a person wearing glasses'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18277_Table__Person_8.4.png) | Pelé
    the Product Manager | Clear and comprehensive metrics that show me how our products
    are used and with which devices. I will view this on my computer, and often, I
    want to export it to a spreadsheet for further analysis. |
  prefs: []
  type: TYPE_NORMAL
- en: '| ![A picture containing vector graphics'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18277_Table__Person_8.5.png) | Masha
    the Manager | Aggregated data is useful to me, showing trends with details on
    recovery rates and capacity so that I can plan ahead. I will view these on my
    computer, but periodic PDF reports via email help me. |
  prefs: []
  type: TYPE_NORMAL
- en: Table 8.1 – Dashboard users and needs
  prefs: []
  type: TYPE_NORMAL
- en: Capturing end user requirements and delivering them with the dashboards you
    create will ensure value is taken from your observability platform and increase
    adoption. Once you have your user requirements and have analyzed your data (so
    that you understand what important information is there), you can start pulling
    your dashboards together. We say pulling together because it’s important to remember
    you are creating something to answer a question, and that’s going to take time.
    Do not be afraid to try out different styles, layouts, and visualizations as you
    work on the goal for each dashboard. Be sure to test under the different presentation
    requirements; if it’s a large wall screen display or an emailed PDF, you want
    to ensure you have verified that it displays correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at some techniques that will help with presentation.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced dashboard techniques
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To communicate effectively with our dashboards, we can use a layout and some
    technical features to up our game. Let’s start looking at some of these in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Layout tricks**: To help get your message across, you need to consider a
    few layout tricks that really make your message pop. These include the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a short top title in the **Overview** panel to make it clearer to read.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a description showing how to use the information and who it’s for to give
    the users the best chance of understanding the data presented.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Call out key indicators using visualizations such as **Stat** with sparklines,
    and show them first at the top of your dashboard.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Present panels in a grid to visually guide viewers through your dashboard and
    control their focus.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Do not cram too many panels into a single dashboard; this makes it hard to digest.
    Instead, use datalinks to other dashboards and separate the data more.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Use transparent panels to introduce visual spacing on your dashboard and help
    key data stand out.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Use rows to group relevant panels and data together, creating a context for
    the data.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the collapse feature of rows to hide certain data when the dashboard loads;
    this will also have the performance benefit of not running those queries until
    the row is expanded.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Group similar visualizations to make the dashboard easier to read; this makes
    it easier to process the data presented.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`now-15m` to show the last 15 minutes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Use transformations to present your data in more digestible formats. The **Transform**
    tab and available transforms are shown in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 8.16 – The transformation selection screen](img/B18277_8.16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.16 – The transformation selection screen
  prefs: []
  type: TYPE_NORMAL
- en: 'Use annotations; mark points on a graph with rich events from other data sources
    or even manual annotations to communicate key events:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 8.17 – Annotations](img/B18277_8.17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.17 – Annotations
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now look at how we can develop good practices to maintain control over
    our dashboards.
  prefs: []
  type: TYPE_NORMAL
- en: Managing and organizing dashboards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As the list of dashboards and teams using them grows, you will need a way to
    manage them easier. Grafana provides folders, tags, and permissions that give
    us the capability to get organized. From the main **Dashboards** screen, you can
    create folders, move and delete dashboards, and star them, as you can see in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.18 – The Dashboards screen](img/B18277_8.18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.18 – The Dashboards screen
  prefs: []
  type: TYPE_NORMAL
- en: 'From the dashboard **Settings** screen, you can add or remove tags from individual
    dashboards, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.19 – Dashboard settings](img/B18277_8.19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.19 – Dashboard settings
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at the available settings for folders, tags, and permissions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Folders**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide easy organization and grouping
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhanced security by segregating permissions at the folder level
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tags**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Useful when searching for related dashboards
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Color-coded for visual recognition
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Permissions**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Control access to folders and their dashboards
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Give viewer access only to those who do not need to edit
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Hide folders on a *need-to-know* basis
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Available for both individual users and teams
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that you have an understanding of the concepts involved, let’s look at a
    case study to develop a dashboard for one of our personas.
  prefs: []
  type: TYPE_NORMAL
- en: Case study – an overall system view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will now walk through the process you would take to develop dashboards for
    *Steven* the Service Manager. If you recall from [*Chapter 1*](B18277_01.xhtml#_idTextAnchor018),
    he works in service delivery. He wants the organization’s services to run as smoothly
    as possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start with a use case; in an earlier section in this chapter, *Developing
    a dashboard purpose*, we recorded the following requirement from Steven:'
  prefs: []
  type: TYPE_NORMAL
- en: “Overall, a system view that helps me see the wider picture. If there is a problem,
    I need the information to identify who can solve it. I will view this on my computer.”
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be broken down into the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A top-level system view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Problem indicators (to highlight issues)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More detail when needed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assistance in identifying who can help
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We then need to gather information from documentation and by having conversations.
  prefs: []
  type: TYPE_NORMAL
- en: We have been using the OpenTelemetry demo app throughout the book; fortunately,
    architecture diagrams are provided at https://opentelemetry.io/docs/demo/architecture/,
    which will help us understand the system better.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at the OpenTelemetry demo system architecture diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.20 – OpenTelemetry demo system architecture](img/B18277_8.20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.20 – OpenTelemetry demo system architecture
  prefs: []
  type: TYPE_NORMAL
- en: We will also look at what telemetry is being ingested for these applications.
    This could be done by exploring Grafana ourselves; we have system names now and
    application flows. Alternatively, we could talk to *Diego* the Developer and obtain
    his insight into the system.
  prefs: []
  type: TYPE_NORMAL
- en: If you are exploring by yourself, this is a good time to build a research dashboard.
    This is where you add panels as you explore and discover interesting data. We
    did this with our first dashboard earlier in this chapter, starting with frontend
    requests and then enhancing it to show the rate of frontend requests. Otherwise,
    start building up a scrapbook dashboard of data you may want to use; do not worry
    about layout or visualizations right now.
  prefs: []
  type: TYPE_NORMAL
- en: To help us choose useful metrics, we can use a methodology such as the **Four
    Golden Signals**, as identified in Google’s *Site Reliability Engineering* handbook
    (https://sre.google/sre-book/monitoring-distributed-systems/#xref_monitoring_golden-signals).
    There are other popular methods available – for example, the **Utilization, Saturation,
    Errors** (**USE**) and **Rate, Errors, Duration** (**RED**) methods, which we
    will discuss in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s quickly take a look at the Four Golden Signals:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Latency**: The time taken to service a request'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Traffic**: How much demand is placed on your system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Errors**: The rate of requests that fail'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Saturation**: How full your system services are'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When you have some key metric data ready for use, you can start shaping your
    dashboard. Remember that a dashboard should tell a story or answer a question;
    *Steven* has said he wants a top-level system view that highlights problems with
    access to more detailed information as and when needed. We can follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start with the first row of the dashboard, creating the first-look area.
    By choosing metrics detailing the flow of traffic through our system, we can use
    visualizations such as **Stats** (with a timeline) to stand out. Lead the viewer,
    *Steven,* from left to right, with the most important information first.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here’s an example of **Stats** with timeline visualizations for the first-look
    area:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.21 – A system overview](img/B18277_8.21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.21 – A system overview
  prefs: []
  type: TYPE_NORMAL
- en: Other visualizations such as **Gauge** are good to represent the saturation
    of a system.
  prefs: []
  type: TYPE_NORMAL
- en: To ensure Steven’s attention is drawn to the most important information first,
    we can enhance our panels with thresholds, overrides, and value mappings. In certain
    panels, we can even overlay further context as annotations.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then need to find a way to communicate more detailed information and decide
    this based on how much information we have to display. We have to ask two questions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can we present the detailed information here on this dashboard itself (is there
    enough room)?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Do we need to drill down into other, more focused dashboards?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For our use case, we will work on the *same* dashboard. To support *Steven*
    with the identification of who he needs to support in the event of an incident,
    we can do the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We can logically group our visualizations in rows. Each row can be a team, and
    the first panel can be a text panel used to share contact information and provide
    details on how to engage the team. This means the cognitive load when using the
    dashboard is greatly reduced, helping *Steven* solve problems more quickly.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We can also use panel descriptions to share useful information that helps viewers,
    including *Steven*, understand the data, and dashboard links to callout support
    pages will also help.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: To represent more detailed information better, we could use visualizations such
    as the table panel along with color coding to provide visual aids, helping to
    process the information quicker.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here, we have an example with top-level insights and more detailed and directional
    (i.e., identifying the owning or supporting teams) panels and rows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.22 – A detailed dashboard](img/B18277_8.22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.22 – A detailed dashboard
  prefs: []
  type: TYPE_NORMAL
- en: As you can see from this fictional example, building a useful dashboard requires
    several iterations. Much more than telemetry alone goes into the process, but
    the results mean *Steven* can do his job and have the best shot at delivering
    customer satisfaction.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now close this chapter with a few words on how you can support your development
    with dashboards.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored the different components of a dashboard and looked
    at the different details we need to factor in. These techniques will take time
    to build, so approach your dashboard development in the same way, get something
    simple built early, and iterate on it. We talked about the visualizations available
    for panels and inspiration on websites such as [play.grafana.org](http://play.grafana.org).
    Have some fun, and try out alternative methods to present your data and find a
    style you like. Finally, we looked at some tricks and tips to improve your dashboarding,
    wrapping up with some simple ideas to help you manage your dashboards.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about **incident management** and the great
    tools available from Grafana that support it.
  prefs: []
  type: TYPE_NORMAL

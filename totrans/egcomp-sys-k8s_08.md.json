["```\n    $ curl --proto '=https' --tlsv1.2 -sSfL https://run.linkerd.io/install | sh\n    ```", "```\n$ brew install linkerd\n```", "```\n    $ echo  \"export PATH=\\$PATH:/home/ubuntu/.linkerd2/bin\" >> ~/.bashrc\n    ```", "```\n$ source ~/.bashrc\n```", "```\n    $ linkerd check --pre\n    ```", "```\n    $ linkerd install | kubectl apply -f -\n    ```", "```\n    $ linkerd viz install | kubectl apply -f -\n    ```", "```\n    $ linkerd check\n    ```", "```\n    $ linkerd viz dashboard --address 0.0.0.0\n    ```", "```\n$ IP_CLUSTER=<YOUR_IP_CLUSTER>\n$ sudo echo $IP_CLUSTER\" WEB.linkerd-viz.svc.cluster.local\" >> /etc/hosts \n```", "```\n    $ kubectl create ns nginx-ingress\n    ```", "```\n    $ helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx \n    $ helm repo update \n    ```", "```\n    $ helm install nginx-ingress ingress-nginx/ingress-nginx -n nginx-ingress\n    ```", "```\n    $ kubectl get -n nginx-ingress deploy nginx-ingress-ingress-nginx-controller -o yaml \\\n    | linkerd inject - \\\n    | kubectl apply -f -\n    ```", "```\n    $ kubectl create ns myapps\n    ```", "```\n    $ cat <<EOF | linkerd inject - | kubectl apply -f -\n    apiVersion: apps/v1\n    kind: Deployment\n    metadata:\n      labels:\n        app: app1\n      name: app1\n      namespace: myapps\n    spec:\n      replicas: 1\n      selector:\n        matchLabels:\n          app: app1\n      template:\n        metadata:\n          labels:\n            app: app1\n        spec:\n          containers:\n          - image: czdev/app1demo\n            name: app1demo\n            env:\n            - name: MESSAGE\n              value:  \"Meshed application app1 with Linkerd\"\n            - name: PORT\n              value:  \"5000\"\n    EOF\n    ```", "```\n    $ cat <<EOF | kubectl apply -f -\n    apiVersion: v1\n    kind: ConfigMap\n    metadata:\n      name: error-injector\n      namespace: myapps\n    data:\n    nginx.conf: |-\n        events {}\n        http {\n            server {\n              listen 5000;\n                location / {\n                    return 500;\n                }\n            }\n        }\n    EOF\n    ```", "```\n    $ cat <<EOF | linkerd inject - | kubectl apply -f -\n    apiVersion: apps/v1\n    kind: Deployment\n    metadata:\n      name: error-injector\n      namespace: myapps\n      labels:\n        app: error-injector\n    spec:\n      selector:\n        matchLabels:\n          app: error-injector\n      replicas: 1\n      template:\n        metadata:\n          labels:\n            app: error-injector\n        spec:\n          containers:\n            - name: nginx\n              image: nginx:alpine\n              volumeMounts:\n                - name: nginx-config\n                  mountPath: /etc/nginx/nginx.conf\n                  subPath: nginx.conf\n          volumes:\n            - name: nginx-config\n              configMap:\n                name: error-injector\n    EOF\n    ```", "```\n    $ cat <<EOF | kubectl apply -f -\n    apiVersion: v1\n    kind: Service\n    metadata:\n      name: error-injector\n      namespace: myapps\n    spec:\n      ports:\n      - name: service\n        port: 5000\n      selector:\n        app: error-injector\n    EOF\n    ```", "```\n    $ cat <<EOF | kubectl apply -f -\n    apiVersion: v1\n    kind: Service\n    metadata:\n      name: app1\n      namespace: myapps\n    spec:\n      ports:\n      - name: service\n        port: 5000\n      selector:\n        app: app1\n    EOF\n    ```", "```\n    $ cat <<EOF | kubectl apply -f -\n    apiVersion: split.smi-spec.io/v1alpha1 \n    kind: TrafficSplit \n    metadata: \n    name: error-split \n    namespace: myapps \n    spec: \n    service: app1 \n    backends: \n    - service: app1 \n    weight: 500m \n    - service: error-injector \n    weight: 500m \n    EOF\n    ```", "```\n    $ cat <<EOF | kubectl apply -f -\n    apiVersion: networking.k8s.io/v1\n    kind: Ingress\n    metadata:\n      name: ingress\n      namespace: myapps\n      annotations:\n        nginx.ingress.kubernetes.io/rewrite-target: /\n        nginx.ingress.kubernetes.io/service-upstream:  \"true\"\n    spec:\n      ingressClassName: nginx\n      rules:\n      - http:\n          paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name: app1\n                port:\n                  number: 5000\n    EOF\n    ```", "```\n    $ linkerd viz dashboard\n    ```", "```\n$ ENDPOINT=$(kubectl get svc nginx-ingress-ingress-nginx-controller --output jsonpath='{.status.loadBalancer.ingress[0].ip}' -n nginx-ingress)\n$ while true; do curl http://$ENDPOINT;echo  \" \"; done\n```", "```\nHost:app1-555485df49-rjf4vMeshed application app1 with Linkerd\n```", "```\n<html>\n<head><title>500 Internal Server Error</title></head>\n<body>\n<center><h1>500 Internal Server Error</h1></center>\n<hr><center>nginx/1.21.6</center>\n</body>\n</html>\n```", "```\n    $ linkerd viz routes deployment/app1 --namespace myapps\n    ```", "```\n    $ linkerd viz top deployment/app1 --namespace myapps\n    ```", "```\n    $ linkerd viz tap deployment/app1 --namespace myapps\n    ```", "```\n    $ linkerd viz edges po -n myapps\n    ```", "```\n    $ linkerd viz uninstall | kubectl delete -f -\n    ```", "```\n    $ linkerd uninstall | kubectl delete -f -\n    ```"]
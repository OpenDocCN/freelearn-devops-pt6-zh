["```\n    kube_proxy:\n      image: \"602401143452.dkr.ecr.us-west-2.amazonaws.com/eks/kube-proxy\"\n      tag: \"v1.15.11\"\n    ```", "```\n    apiVersion: apps/v1\n    kind: DaemonSet\n    metadata:\n      labels:\n        eks.amazonaws.com/component: kube-proxy\n        k8s-app: kube-proxy\n      name: kube-proxy\n      namespace: kube-system\n    spec:\n      selector:\n        matchLabels:\n          k8s-app: kube-proxy\n      template:\n        metadata:\n          labels:\n            k8s-app: kube-proxy\n    ```", "```\n        spec:\n          containers:\n          - command:\n            - kube-proxy\n            - --v=2\n            - --iptables-sync-period=20s\n            - --config=/var/lib/kube-proxy-config/config        image: {{ kube_proxy.image }}:{{ kube_proxy.tag }}\n    ```", "```\n    cni_warm_ip_target: 2\n    cni_min_ip_target: 10\n    aws_cni:\n      image: \"602401143452.dkr.ecr.us-west-2.amazonaws.com/amazon-k8s-cni\"\n      tag: \"v1.6.2\"\n    ```", "```\n    ---\n          containers:\n            - image: {{ aws_cni.image }}:{{ aws_cni.tag }}\n              imagePullPolicy: Always \n              env:\n                - name: AWS_VPC_K8S_CNI_LOGLEVEL\n                  value: DEBUG\n                - name: AWS_VPC_K8S_CNI_VETHPREFIX\n                  value: eni\n                - name: AWS_VPC_ENI_MTU\n                  value: \"9001\"\n                - name: MINIMUM_IP_TARGET\n                  value: \"{{ cni_min_ip_target }}\"\n                - name: WARM_IP_TARGET\n                  value: \"{{ cni_warm_ip_target }}\"\n                - name: MY_NODE_NAME\n                  valueFrom:\n                    fieldRef:\n                      fieldPath: spec.nodeName\n    ```", "```\n    core_dns_replicas: 2\n    dns_cluster_ip: 172.20.0.10\n    core_dns:\n      image: \"602401143452.dkr.ecr.us-east-1.amazonaws.com/eks/coredns\"\n      tag: \"v1.6.6\"\n    ```", "```\n    ---\n    apiVersion: apps/v1\n    kind: Deployment\n    metadata:\n      name: coredns\n      namespace: kube-system\n      labels:\n        k8s-app: kube-dns\n        kubernetes.io/name: \"CoreDNS\"\n        eks.amazonaws.com/component: coredns\n    spec:\n      replicas: {{ core_dns_replicas }}\n    ```", "```\n    containers:\n    - name: coredns\n      image: {{ core_dns.image }}:{{ core_dns.tag }}\n    ```", "```\n    ---\n    apiVersion: v1\n    kind: ConfigMap\n    metadata:\n      name: coredns\n      namespace: kube-system\n      labels:\n        eks.amazonaws.com/component: coredns\n        k8s-app: kube-dns\n    data:\n      Corefile: |\n        .:53 {\n            errors\n            health\n            ready\n            kubernetes cluster.local {\n              pods insecure\n              upstream\n              fallthrough in-addr.arpa ip6.arpa\n            }\n            prometheus :9153\n            forward . /etc/resolv.conf\n            cache 300\n            loop\n            reload\n            loadbalance\n            autopath @kubernetes\n        }\n    ```", "```\n    log_level: error\n    provider: aws\n    aws_zone_type: private\n    interval: 1m\n    route53_zone_id: Z09817802WZ9HZYSUI2RE\n    external_dns_replicas: 2\n    external_dns:\n      image: \"registry.opensource.zalan.do/teapot/external-dns\"\n      tag: \"v0.5.9\"\n    ```", "```\n    ---\n    apiVersion: apps/v1\n    kind: Deployment\n    metadata:\n      name: external-dns\n      namespace: kube-system\n    spec:\n      replicas: {{ external_dns_replicas }}\n    ```", "```\n        spec:\n          serviceAccountName: external-dns\n          containers:\n          - name: external-dns\n            image: {{ external_dns.image }}:{{ external_dns.tag }}\n            args:\n            - --log-level={{ log_level }}\n            - --source=service\n            - --source=ingress\n            - --provider={{ provider }}\n            - --aws-zone-type={{ aws_zone_type }}\n            - --interval={{ interval }}\n            - --registry=txt\n            - --txt-owner-id={{ route53_zone_id }}-{{ cluster_name }}\n    ```", "```\n    resource \"aws_iam_policy\" \"external_dns_policy\" {\n      name        = \"${var.cluster_full_name}-ExternalDNSPolicy\"\n      path        = \"/\"\n      description = \"Allows workers nodes to use route53 resources\"\n      policy = <<EOF\n    {\n     \"Version\": \"2012-10-17\",\n     \"Statement\": [\n       {\n         \"Effect\": \"Allow\",\n         \"Action\": [\n           \"route53:ChangeResourceRecordSets\"\n         ],\n         \"Resource\": [\"*\"]\n       },\n       {\n         \"Effect\": \"Allow\",\n         \"Action\": [\n           \"route53:ListHostedZones\",\n           \"route53:ListResourceRecordSets\"\n         ],\n         \"Resource\": [\"*\"]\n       }\n     ]\n    }\n    EOF\n    }\n    ```", "```\n    nginx_ingress_controller:\n      image: \"quay.io/kubernetes-ingress-controller/nginx-ingress-controller\"\n      tag: \"0.32.0\"\n    nginx_ingress_webhook_certgen:\n      image: \"jettech/kube-webhook-certgen\"\n      tag: \"v1.2.0\"\n    ```", "```\n    ---\n    apiVersion: apps/v1\n    kind: Deployment\n    ```", "```\n        spec:\n          dnsPolicy: ClusterFirst\n          containers:\n            - name: controller\n              image: {{ nginx_ingress_controller.image }}:{{ nginx_ingress_controller.tag }}\n    ```", "```\n    ---\n    apiVersion: v1\n    kind: ConfigMap\n    metadata:\n      labels:\n        app.kubernetes.io/name: ingress-nginx\n        app.kubernetes.io/instance: ingress-nginx\n        app.kubernetes.io/component: controller\n      name: ingress-nginx-controller\n      namespace: ingress-nginx\n    data:\n    ```", "```\n    ---\n    apiVersion: v1\n    kind: Service\n    metadata:\n      annotations:\n        service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp\n        service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: '60'\n        service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: 'true'\n        service.beta.kubernetes.io/aws-load-balancer-type: nlb\n      labels:\n        app.kubernetes.io/name: ingress-nginx\n        app.kubernetes.io/instance: ingress-nginx\n        app.kubernetes.io/component: controller\n      name: ingress-nginx-controller\n      namespace: ingress-nginx\n    spec:\n      type: LoadBalancer\n      externalTrafficPolicy: Local\n    ```", "```\n    $ cd terraform/packtclusters\n    $ terraform init\n    $ terraform workspace select prod1\n    ```", "```\n    $ terraform apply -auto-approve\n    ```", "```\n    Apply complete! Resources: 2 added, 0 changed, 0 destroyed.\n    Releasing state lock. This may take a few moments...\n    ```", "```\n    $ aws eks --region $(terraform output aws_region) update-kubeconfig --name $(terraform output cluster_full_name)\n    ```", "```\n    $ virtualenv $HOME/Ansible-k8s-workspace\n    $ source $HOME/Ansible-k8s-workspace/bin/activate\n    ```", "```\n    $ pip install Ansible==2.8.10 openshift pyyaml requests\n    ```", "```\n    $ Ansible-playbook -i \\\n    ../../Ansible/inventories/packtclusters/ \\\n    -e \"worker_iam_role_arn=$(terraform output worker_iam_role_arn)\" \\\n    ../../Ansible/cluster.yaml\n    ```", "```\n    $ kubectl get pods --all-namespaces\n    ```", "```\n$ kubectl -n nginx-ingress delete svc nginx-ingress\n```"]
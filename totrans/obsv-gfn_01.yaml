- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introducing Observability and the Grafana Stack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The modern computer systems we work with have moved from the realm of complicated
    into the realm of complex, where the number of interacting variables make them
    ultimately unknowable and uncontrollable. We are using the terms *complicated*
    and *complex* as per system theory. A complicated system, like an engine, has
    clear causal relationships between components. A complex system, such as the flowing
    of traffic in a city, shows emergent behavior from the interactions of its components.
  prefs: []
  type: TYPE_NORMAL
- en: With the average cost of downtime estimated to be $9,000 per minute by Ponemon
    Institute in 2016, this complexity can cause significant financial loss if organizations
    do not take steps to manage this risk. **Observability** offers a way to mitigate
    these risks, but making systems observable comes with its own financial risks
    if implemented poorly or without a clear business goal.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we will give you a good understanding of what observability is
    and who the customers who might use it are. We will explore how to use the tools
    available from Grafana Labs to gain visibility of your organization. These tools
    include Loki, Prometheus, Mimir, Tempo, Frontend Observability, Pyroscope, and
    k6\. You will learn how to use **Service Level Indicators** (**SLIs**) and **Service
    Level Objectives** (**SLOs**) to obtain clear transparent signals of when a service
    is operating correctly, and how to use the Grafana **incident response tools**
    to handle incidents. Finally, you will learn about managing their observability
    platform using **automation tools** such as Ansible, Terraform, and Helm.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter aims to introduce observability to all audiences, using examples
    outside of the computing world. We’ll introduce the types of **telemetry** used
    by observability tools, which will give you an overview of how to use them to
    quickly understand the state of your services. The various **personas** who might
    use observability systems will be outlined so that you can explore complex ideas
    later with a clear grounding on who will benefit from their correct implementation.
    Finally, we’ll investigate Grafana’s **Loki, Grafana, Tempo, Mimir** (**LGTM**)
    stack, how to deploy it, and what alternatives exist.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Observability in a nutshell
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Telemetry types and technologies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the customers of observability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing the Grafana stack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alternatives to the Grafana stack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying the Grafana stack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Observability in a nutshell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The term **observability** is borrowed from control theory. It’s common to use
    the term interchangeably with the term **monitoring** in IT systems, as the concepts
    are closely related. Monitoring is the ability to raise an alarm when something
    is wrong, while observability is the ability to understand a system and determine
    whether something is wrong, and why.
  prefs: []
  type: TYPE_NORMAL
- en: 'Control theory was formalized in the late 1800s on the topic of centrifugal
    governors in steam engines. This diagram shows a simplified view of such a system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1 – James Watt’s steam engine flyweight governor (source: https://www.mpoweruk.com)](img/B18277_01_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.1 – James Watt’s steam engine flyweight governor (source: https://www.mpoweruk.com)'
  prefs: []
  type: TYPE_NORMAL
- en: Steam engines use a boiler to boil water in a pressure vessel. The steam pushes
    a piston backward and forward, which converts heat energy to reciprocal energy.
    In steam engines that use centrifugal governors, this reciprocal energy is converted
    to rotational energy via a wheel connected to a piston. The centrifugal governor
    provides a physical link backward through the system to the throttle. This means
    that the speed of rotation controls the throttle, which, in turn, controls the
    speed of rotation. Physically, this is observed by the balls on the governor flying
    outward and dropping inward until the system reaches equilibrium.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring defines the metrics or events that are of interest in advance. For
    instance, the governor measures the pre-defined metric of drive shaft revolutions.
    The controllability of the throttle is then provided by the pivot and actuator
    rod assembly. Assuming the actuator rod is adjusted correctly, the governor should
    control the throttle from fully open to fully closed.
  prefs: []
  type: TYPE_NORMAL
- en: In contrast, observability is achieved by allowing the internal state of the
    system to be inferred from its external outputs. If the operating point adjustment
    is incorrectly set, the governor may spin too fast or too slowly, rendering the
    throttle control ineffective. A governor spinning too fast or too slowly could
    also indicate that the sliding ring is stuck in place and needs oiling. Importantly,
    this insight can be gained without defining in advance what too fast or too slow
    means. The insight that the governor is spinning too fast or too slowly also needs
    very little knowledge of the full steam engine.
  prefs: []
  type: TYPE_NORMAL
- en: Fundamentally, both monitoring and observability are used to improve the reliability
    and performance of the system in question.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have introduced the high-level concepts, let’s explore a practical
    example outside of the world of software services.
  prefs: []
  type: TYPE_NORMAL
- en: Case study – A ship passing through the Panama Canal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s imagine a ship traversing the Agua Clara locks on the Panama Canal. This
    can be illustrated using the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.2 – The Agua Clara locks on the Panama Canal](img/B18277_01_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.2 – The Agua Clara locks on the Panama Canal
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few aspects of these locks that we might want to monitor:'
  prefs: []
  type: TYPE_NORMAL
- en: The successful opening and closing of each gate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The water level inside each lock
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How long it takes for a ship to traverse the locks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Monitoring these aspects may highlight situations that we need to be alerted
    about:'
  prefs: []
  type: TYPE_NORMAL
- en: A gate is stuck open because of a mechanical failure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The water level is rapidly descending because of a leak
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A ship is taking too long to exit the locks because it is stuck
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There may be situations where the data we are monitoring are within acceptable
    limits, but we can still observe a deviation from what is considered *normal*,
    which should prompt further action:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A small leak has formed near the top of the lock wall:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We would see the water level drop but only when it is above the leak
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This could prompt maintenance work on the lock wall
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A gate in one lock is opening more slowly because it needs maintenance:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We would see the time between opening and closing the gate increase
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This could prompt maintenance on the lock gate
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ships take longer to traverse the locks when the wind is coming from a particular
    direction:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We could compare hourly average traversal rates
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This could prompt work to reduce the impact of wind from one direction
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we’ve seen an example of measuring a real-world system, we can group
    these types of measurements into different data types to best suit the application.
    Let’s introduce those now.
  prefs: []
  type: TYPE_NORMAL
- en: Telemetry types and technologies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The boring but important part of observability tools is **telemetry** – capturing
    data that is useful, shipping it from place to place, and producing visualizations,
    alerts, and reports that offer value to the organization.
  prefs: []
  type: TYPE_NORMAL
- en: Three main types of telemetry are used to build monitoring and observability
    systems – metrics, logs, and distributed traces. Other telemetry types may be
    used by some vendors and in particular circumstances. We will touch on these here,
    but they will be explored in more detail in *Chapters 12* and *13* of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Metrics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Metrics** can be thought of as numeric data that is recorded at a point in
    time and enriched with labels or dimensions to enable analysis. Metrics are frequently
    generated and are easy to search, making them ideal for determining whether something
    is wrong or unusual. Let’s look at an example of metrics showing temporal changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.3 – Metrics showing changes over time](img/B18277_01_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.3 – Metrics showing changes over time
  prefs: []
  type: TYPE_NORMAL
- en: 'Taking our example of the Panama Canal, we could represent the *water level
    in each lock* as a metric, to be measured at regular intervals. To be able to
    use the data effectively, we might add some of these labels:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The lock name**: Agua Clara'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The lock chamber**: Lower lock'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The canal**: Panama Canal'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Logs** are considered to be unstructured string data types. They are recorded
    at a point in time and usually contain a huge amount of information about what
    is happening. While logs can be structured, there is no guarantee of that structure
    persisting, because the log producer has control over the structure of the log.
    Let’s look at an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In our example, the various operations involved in opening or closing a lock
    gate could be represented as logs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Almost every system produces logs, and they often give very detailed information.
    This is great for understanding what happened. However, the volume of data presents
    two problems:'
  prefs: []
  type: TYPE_NORMAL
- en: Searching can be inefficient and slow.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As the data is in text format, knowing what to search for can be difficult.
    For example, `error occurred`, `process failed`, and `action did not complete
    successfully` could all be used to describe a failure, but there are no shared
    strings to search for.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s consider a real log entry from a computer system to see how log data
    is usually represented:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.4 – Logs showing discrete events in time](img/B18277_01_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.4 – Logs showing discrete events in time
  prefs: []
  type: TYPE_NORMAL
- en: We can clearly see that we have a number of fields that have been extracted
    from the log entry by the system. These fields detail where the log entry originated
    from, what time it occurred, and various other items.
  prefs: []
  type: TYPE_NORMAL
- en: Distributed traces
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Distributed traces** show the end-to-end journey of an action. They are captured
    from every step that is taken to complete the action. Let’s imagine a trace that
    covers the passage of a ship through the lock system. We will be interested in
    the time a ship enters and leaves each lock, and we will want to be able to compare
    different ships using the system. A full passage can be given an identifier, usually
    called a **trace ID**. Traces are made up of **spans**. In our example, a span
    would cover the entry and exit for each individual lock. These spans are given
    a second identifier, called a **span ID**. To tie these two together, each span
    in a trace references the trace ID for the whole trace. The following screenshot
    shows an example of how a distributed trace is represented for a computer application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.5 – Traces showing the relationship of actions over time](img/B18277_01_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.5 – Traces showing the relationship of actions over time
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have introduced metrics, logs, and traces, let’s consider a more
    detailed example of a ship passing through the locks, and how each telemetry type
    would be produced in this process:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Ship enters the first lock:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Span ID created
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Trace ID created
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Contextual information is added to the span, for example, a ship identification
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Key events are recorded in the span with time stamps, for example, gates are
    opened and closed
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ship exits the first lock:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Span closed and submitted to the recording system
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Second lock notified of trace ID and span ID
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ship enters the second lock:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Span ID created
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Trace ID added to span
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Contextual information is added to the span
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Key events recorded in the span with time stamps
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ship exits the second lock:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Span closed and submitted to the recording system
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Third lock notified of trace ID and span ID
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ship enters the third lock:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat *step 3*
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ship exits the third lock:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Span closed and submitted to the recording system
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Now let’s look at some other telemetry types.
  prefs: []
  type: TYPE_NORMAL
- en: Other telemetry types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Metrics, logs, and traces are often called the *three pillars* or the *golden
    triangle* of observability. As we outlined earlier, observability is the ability
    to understand a system. While metrics, logs, and traces give us a very good ability
    to understand a system, they are not the only signals we might need, as this depends
    at what abstraction layer we need to observe the system. For instance, when looking
    at a very detailed level, we may be very interested in the stack trace of an application’s
    activity at the CPU and RAM level. Conversely, if we are interested in the execution
    of a CI/CD pipeline, we may just be interested in whether a deployment occurred
    and nothing more.
  prefs: []
  type: TYPE_NORMAL
- en: '**Profiling data** (**stack traces**) can give us a very detailed technical
    view of the system’s use of resources such as CPU cycles or memory. With cloud
    services often charged per hour for these resources, this kind of detailed analysis
    can easily create cost savings.'
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, **events** can be consumed from a platform, such as CI/CD. These
    can offer a huge amount of insight that can reduce the **Mean Time to Recovery**
    (**MTTR**). Imagine responding to an out-of-hours alert and seeing that a new
    version of a service was deployed immediately before the issues started occurring.
    Even better, imagine not having to wake up because the deployment process could
    check for failures and roll back automatically. Events differ from logs only in
    that an event represents a whole action. In our earlier example in the *Logs*
    section, we created five logs, but all of these referred to stages of the same
    event (opening the lock gate). As a relatively generic term, *event* gets used
    with other meanings.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve introduced the fundamental concepts of the technology, let’s
    talk about the customers who will use observability data.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the user personas of observers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Observability deals with understanding a system, identifying whether something
    is wrong with that system, and understanding why it is wrong. But what do we mean
    by *understanding a system*? The simple answer would be *knowing the state of
    a single application or* *infrastructure component*.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will introduce the user personas that we will use throughout
    this book. These personas will help to distinguish the different types of questions
    that people use observability systems to answer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take a quick look at the user personas that will be used throughout the
    book as examples, and their roles:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **Name** **and role** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| ![](img/B18277_01_6.png) | Diego Developer | Frontend, backend, full stack,
    and so on |'
  prefs: []
  type: TYPE_TB
- en: '| ![](img/B18277_01_7.png) | Ophelia Operator | SRE, DevOps, DevSecOps, customer
    success, and so on |'
  prefs: []
  type: TYPE_TB
- en: '| ![](img/B18277_01_8.png) | Steven Service | Service manager and other tasks
    |'
  prefs: []
  type: TYPE_TB
- en: '| ![](img/B18277_01_9.png) | Pelé Product | Product manager, product owner,
    and so on |'
  prefs: []
  type: TYPE_TB
- en: '| ![A picture containing vector graphics'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B18277_01_10.png) | Masha Manager |
    Manager, senior leadership, and so on |
  prefs: []
  type: TYPE_NORMAL
- en: Table 1.1 – User persona introductions
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s look at each of these users in greater detail.
  prefs: []
  type: TYPE_NORMAL
- en: Diego Developer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](img/B18277_01_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Diego Developer* works on many types of systems, from frontend applications
    that customers directly interact with, to backend systems that let his organization
    store data in ways that delight its customers. You might even find him working
    on platforms that other developers use to get their applications integrated, built,
    delivered, and deployed safely and speedily.'
  prefs: []
  type: TYPE_NORMAL
- en: Goals
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: He writes great software that is well tested and addresses customers’ actual
    needs.
  prefs: []
  type: TYPE_NORMAL
- en: Interactions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When he is not writing code, he works with *Ophelia Operator* to address any
    questions and issues that occur.
  prefs: []
  type: TYPE_NORMAL
- en: '*Pelé Product* works in his team and provides insight into the customer’s needs.
    They work together closely, taking those needs and turning them into detailed
    plans on how to deliver software that addresses them.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Steven Service* is keen to ensure that the changes Diego makes are not impacting
    customer commitments. He’s also the one who wakes Diego up if there is an incident
    that needs attention. The data provided to *Masha Manager* gives her a breakdown
    of costs. When Diego is working on developer platforms, he also collects data
    that helps her get investment from the business into teams that are not performing
    as expected.'
  prefs: []
  type: TYPE_NORMAL
- en: Needs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Diego really needs easy-to-use libraries for the languages he uses to instrument
    the code he produces. He does not have time to become an expert. He wants to be
    able to add a few lines of code and get results quickly.
  prefs: []
  type: TYPE_NORMAL
- en: Having a clear standard for acceptable performance measures makes it easy for
    him to get the right results.
  prefs: []
  type: TYPE_NORMAL
- en: Pain points
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When Diego’s systems produce too much data, he finds it difficult to sort signal
    from noise. He also gets frustrated having to change his code because of an upstream
    decision to change tooling.
  prefs: []
  type: TYPE_NORMAL
- en: Ophelia Operator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](img/B18277_01_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Ophelia Operator* works in an operations-focused environment. You might find
    her in a customer-facing role or as part of a development team as a DevOps engineer.
    She could be part of a group dedicated to the reliability of an organization’s
    systems, or she could be working in security or finance to ensure the business
    runs securely and smoothly.'
  prefs: []
  type: TYPE_NORMAL
- en: Goals
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ophelia wants to make sure a product is functioning as expected. She also likes
    it when she is not woken up early in the morning by an incident.
  prefs: []
  type: TYPE_NORMAL
- en: Interactions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ophelia will work a lot with *Diego Developer*; sometimes it’s escalating customer
    tickets when she doesn’t have the data available to understand the problem; at
    other times it’s developing runbooks to keep the systems running. Sometimes she
    will need to give Diego clear information on acceptable performance measures so
    that her team can make sure systems perform well for customers.
  prefs: []
  type: TYPE_NORMAL
- en: '*Steven Service* works closely with Ophelia. They work together to ensure there
    are not many incidents, and that they are quickly resolved. Steven makes sure
    that business data on changes and incidents is tracked, and tweaks processes when
    things aren’t working.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Pelé Product* likes to have data showing the problematic areas of his products.'
  prefs: []
  type: TYPE_NORMAL
- en: Needs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Good data is necessary to do the job effectively. Being able to see that a customer
    has encountered an error can make the difference between resolving a problem straight
    away or having them wait maybe weeks for a response.
  prefs: []
  type: TYPE_NORMAL
- en: During an incident seeing that a new version of a service was deployed at the
    time a problem started can change an hours-long incident into a brief blip, and
    keep customers happy.
  prefs: []
  type: TYPE_NORMAL
- en: Pain points
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Getting continuous alerts but not being empowered to fix the underlying issue
    is a big problem. Ophelia has seen colleagues burn out, and it makes her want
    to leave the organization when this happens.
  prefs: []
  type: TYPE_NORMAL
- en: Steven Service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](img/B18277_01_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Steven Service* works in service delivery. He is interested in making sure
    the organization’s services are delivered smoothly. Jumping in on critical incidents
    and coordinating actions to get them resolved as quickly as possible is part of
    the job. So is ensuring that changes are made using processes that help others
    do it as safely as possible. Steven also works with third parties who provide
    services that are critical to the running of the organization.'
  prefs: []
  type: TYPE_NORMAL
- en: Goals
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: He wants services to run as smoothly as possible so that the organization can
    spend more time focused on customers.
  prefs: []
  type: TYPE_NORMAL
- en: Interactions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Diego Developer* and *Ophelia Operator* work a lot with the change management
    processes created by *Steven* and the support processes he manages. Having accurate
    data to hand during change management really helps to make the process as smooth
    as possible.'
  prefs: []
  type: TYPE_NORMAL
- en: Steven works very closely with *Masha Manager* to make sure she has access to
    data showing where processes are working smoothly and where they need to spend
    time improving them.
  prefs: []
  type: TYPE_NORMAL
- en: Needs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: He needs to be able to compare the delivery of different products and provide
    that data to *Masha* and the business.
  prefs: []
  type: TYPE_NORMAL
- en: During incidents, he needs to be able to get the right people on the call as
    quickly as possible and keep a record of what happened for the incident post-mortem.
  prefs: []
  type: TYPE_NORMAL
- en: Pain points
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Being able to identify the right person to get on a call during an incident
    is a common problem he faces. Seeing incidents drag on while different systems
    are compared and who can fix the problem is argued about is also a big concern
    to him.
  prefs: []
  type: TYPE_NORMAL
- en: Pelé Product
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](img/B18277_01_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Pelé Product* works in the product team. You’ll find him working with customers
    to understand their needs, keeping product roadmaps in order, and communicating
    requirements back to developers such as *Diego Developer* so they can build them.
    You might also find him understanding and shaping the product backlog for the
    internal platforms used by developers in the organization.'
  prefs: []
  type: TYPE_NORMAL
- en: Goal
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Pelé wants to understand customers, give them products that delight them, and
    keep them coming back.
  prefs: []
  type: TYPE_NORMAL
- en: Interactions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: He spends a lot of time working with *Diego* when they can look at the same
    information to really understand what customers are doing and how they can help
    them do it better.
  prefs: []
  type: TYPE_NORMAL
- en: '*Ophelia Operator* and *Steven Service* help *Pelé* keep products on track.
    If too many incidents occur, they ask everyone to refocus on getting stability
    right. There is no point in providing customers with lots of features on a system
    that they can’t trust.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Pelé* works closely with *Masha Manager* to ensure the organization has the
    right skills in the teams that build products. The business depends on her leadership
    to make sure that these developers have the best tools to help them get their
    code live in front of customers where it can be used.'
  prefs: []
  type: TYPE_NORMAL
- en: Needs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Pelé* needs to be able to understand customers’ pain points even when they
    do not articulate them clearly during user research.'
  prefs: []
  type: TYPE_NORMAL
- en: He needs data that gives him a common language with *Diego* and *Ophelia*. Sometimes
    they can get too focused on specific numbers such as shaving off a couple of milliseconds
    from a request, when improving a poor workflow would improve the customer experience
    more significantly.
  prefs: []
  type: TYPE_NORMAL
- en: Pain points
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Pelé* hates not being able to see at a high level what customers are doing.
    Understanding which bits of an application have the most usage, and which bits
    are not used at all, lets him know where to focus time and resources.'
  prefs: []
  type: TYPE_NORMAL
- en: While customers never tell him they want stability, if it’s not there they will
    lose trust very quickly and start to look at alternatives.
  prefs: []
  type: TYPE_NORMAL
- en: Masha Manager
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](img/B18277_01_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Masha* works in management. You might find her leading a team and working
    closely with them daily. She also represents middle management, setting strategy
    and making tactical choices, and she is involved, to some extent, in senior leadership.
    Much of her role involves managing budgets and people. If something can make that
    process easier, then she is usually interested in hearing about it. What *Masha*
    does not want to do is waste the organization’s money, because that can directly
    impact jobs.'
  prefs: []
  type: TYPE_NORMAL
- en: Goals
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Her primary goals are to keep the organization running smoothly and ensure the
    budget is balanced.
  prefs: []
  type: TYPE_NORMAL
- en: Interactions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As a leader, *Masha* needs accurate data and needs to be able to trust the teams
    who provide that data. The data could be the end-to-end cycle time of feature
    concept to delivery from *Pelé Product*, the lead time for changes from *Diego
    Developer*, or even the MTTR from *Steven Service*. Having that data helps her
    to understand where focus and resources can have the biggest impact.
  prefs: []
  type: TYPE_NORMAL
- en: '*Masha* works regularly with the financial operations staff and needs to make
    sure they have accurate information on the organization’s expenditure and the
    value that expenditure provides.'
  prefs: []
  type: TYPE_NORMAL
- en: Needs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: She needs good data in a place where she can view it and make good decisions.
    This usually means she consumes information from a business intelligence system.
    To use such tools effectively, she needs to be clear on what the organization’s
    goals are, so that the correct data can be collected to help her understand how
    her teams are tracking to that goal.
  prefs: []
  type: TYPE_NORMAL
- en: She also needs to know that the teams she is responsible for have the correct
    data and tools to excel in their given areas.
  prefs: []
  type: TYPE_NORMAL
- en: Pain points
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: High failure rates and long recovery time usually result in her having to speak
    with customers to apologize. *Masha* really hates these calls!
  prefs: []
  type: TYPE_NORMAL
- en: Poor visibility of cloud systems is a particular concern. *Masha* has too many
    horror stories of huge overspending caused by a lack of monitoring; she would
    rather spend that budget on something more useful.
  prefs: []
  type: TYPE_NORMAL
- en: You now know about the customers who use observability data, and the types of
    data you will be using to meet their needs. As the main focus of this book is
    on Grafana as the underlying technology, let’s now introduce the tools that make
    up the Grafana stack.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the Grafana stack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Grafana was born in 2013 when a developer was looking for a new user interface
    to display metrics from Graphite. Initially forked from Kibana, the Grafana project
    was developed to make it easy to build quick, interactive dashboards that were
    valuable to organizations. In 2014, **Grafana Labs** was formed with the core
    value of building a sustainable business with a strong commitment to open source
    projects. From that foundation, Grafana has grown into a strong company supporting
    more than 1 million active installations. Grafana Labs is a huge contributor to
    open source projects, from their own tools to widely adopted technologies such
    as Prometheus, and recent initiatives with a lot of traction such as OpenTelemetry.
  prefs: []
  type: TYPE_NORMAL
- en: 'Grafana offers many tools, which we’ve grouped into the following categories:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The core Grafana stack: **LGTM** and the **Grafana Agent**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Grafana enterprise plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Incident response tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other Grafana tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s explore these tools in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: The core Grafana stack
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The core Grafana stack consists of Mimir, Loki, Tempo, and Grafana; the acronym
    LGTM is often used to refer to this tech stack.
  prefs: []
  type: TYPE_NORMAL
- en: Mimir
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Mimir** is a **Time Series Database** (**TSDB**) for the storage of metric
    data. It uses low-cost object storage such as S3, GCS, or Azure Blob Storage.
    First announced for general availability in March 2022, Mimir is the newest of
    the four products we’ll discuss here, although it’s worth highlighting that Mimir
    initially forked from another project, Cortex, which was started in 2016\. Parts
    of Cortex also form the core of Loki and Tempo.'
  prefs: []
  type: TYPE_NORMAL
- en: Mimir is a fully Prometheus-compatible solution that addresses the common scalability
    problems encountered with storing and searching huge quantities of metric data.
    In 2021 Mimir was load tested to 1 billion active time series. An active time
    series is a metric with a value and unique labels that has reported a sample in
    the last 20 minutes. We will explore Mimir and Prometheus in much greater detail
    in [*Chapter 5*](B18277_05.xhtml#_idTextAnchor106).
  prefs: []
  type: TYPE_NORMAL
- en: Loki
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Loki** is a set of components that offer a full feature logging stack. Loki
    uses lower-cost object storage such as S3 or GCS, and only indexes label metadata.
    Loki entered general availability in November 2019.'
  prefs: []
  type: TYPE_NORMAL
- en: Log aggregation tools typically use two data structures to store log data. An
    index that contains references to the location of the raw data paired with searchable
    metadata, and the raw data itself stored in a compressed form. Loki differs from
    a lot of other log aggregation tools by keeping the index data relatively small
    and scaling the search functionality by using horizontal scaling of the querying
    component. The process of selecting the best index fields is one we will cover
    in [*Chapter 4*](B18277_04.xhtml#_idTextAnchor092).
  prefs: []
  type: TYPE_NORMAL
- en: Tempo
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Tempo** is a storage backend for high-scale distributed trace telemetry,
    with the aim of sampling 100% of the read path. Like Loki and Mimir, it leverages
    lower-cost object storage such as S3, GCS, or Azure Blob Storage. Tempo went into
    general availability in June 2021.'
  prefs: []
  type: TYPE_NORMAL
- en: When Tempo released 1.0, it was tested at a sustained ingestion of >2 million
    spans per second (about 350 MB per second). Tempo also offers the ability to generate
    metrics from spans as they are ingested; these metrics can be written to any backend
    that supports Prometheus remote write. Tempo is explored in detail in [*Chapter
    6*](B18277_06.xhtml#_idTextAnchor134).
  prefs: []
  type: TYPE_NORMAL
- en: Grafana
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Grafana** has been a staple for fantastic visualization of data since 2014\.
    It has targeted the ability to connect to a huge variety of data sources from
    TSDBs to relational databases and even other observability tools. Grafana has
    over 150 data source plugins available. Grafana has a huge community using it
    for many different purposes. This community supports over 6,000 dashboards, which
    means there is a starting place for most available technologies with minimal time
    to value.'
  prefs: []
  type: TYPE_NORMAL
- en: Grafana Agent
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Collecting telemetry from many places is one of the fundamental aspects of observability.
    **Grafana Agent** is a collection of tools for collecting logs, metrics, and traces.
    There are many other collection tools that Grafana integrates well with. Different
    collection tools offer different advantages and disadvantages, which is not a
    topic we will explore in this book. We will highlight other tools in the space
    later in this chapter and in [*Chapter 2*](B18277_02.xhtml#_idTextAnchor043) to
    give you a starting point for learning more about this topic. We will also briefly
    discuss architecting a collection infrastructure in [*Chapter 11*](B18277_11.xhtml#_idTextAnchor218).
  prefs: []
  type: TYPE_NORMAL
- en: The Grafana stack is a fantastic group of open source software for observability.
    The commitment of Grafana Labs to open source is supported by great enterprise
    plugins. Let’s explore them now.
  prefs: []
  type: TYPE_NORMAL
- en: Grafana Enterprise plugins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As part of their Cloud Pro, Cloud Advanced, and Enterprise license offerings,
    Grafana offers Enterprise plugins. These are part of any paid subscription to
    Grafana.
  prefs: []
  type: TYPE_NORMAL
- en: The Enterprise data source plugins allow organizations to read data from many
    other storage tools they may use, from software development tools such as **GitLab**
    and **Azure DevOps** to business intelligence tools such as **Snowflake**, **Databricks**,
    and **Looker**. Grafana also offers tools to read data from many other observability
    tools, which enables organizations to build comprehensive operational coverage
    while offering individual teams a choice of the tools they use.
  prefs: []
  type: TYPE_NORMAL
- en: Alongside the data source plugins, Grafana offers premium tools for logs, metrics,
    and traces. These include access policies and tokens for log data to secure sensitive
    information, in-depth health monitoring for the ingest and storage of cloud stacks,
    and management of tenants.
  prefs: []
  type: TYPE_NORMAL
- en: Grafana incident response and management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Grafana offers three products in the **incident response and management** (**IRM**)
    space:'
  prefs: []
  type: TYPE_NORMAL
- en: At the foundation of IRM are **alerting rules**, which can notify via messaging
    apps, email, or Grafana OnCall
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Grafana OnCall** offers an on-call schedule management system that centralizes
    alert grouping and escalation routing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, **Grafana Incident** offers a chatbot functionality that can set up
    necessary incident spaces, collect timelines for a post-incident review process,
    and even manage the incident directly from a messaging service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These tools are covered in more detail in [*Chapter 9*](B18277_09.xhtml#_idTextAnchor183).
    Now let’s take a look at some other important Grafana tools.
  prefs: []
  type: TYPE_NORMAL
- en: Other Grafana tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Grafana Labs continues to be a leader in observability and has acquired several
    companies in this space to release new products that complement the tools we’ve
    already discussed. Let’s discuss some of these tools now.
  prefs: []
  type: TYPE_NORMAL
- en: Faro
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Grafana Faro** is a JavaScript agent that can be added to frontend web applications.
    The project allows for **real user monitoring** (**RUM**) by collecting telemetry
    from a browser. By adding RUM into an environment where backend applications and
    infrastructure are instrumented, observers gain the ability to traverse data from
    the full application stack. Faro supports the collection of the five core web
    vitals out of the box, as well as several other signals of interest. Faro entered
    general availability in November 2022\. We cover Faro in more detail in [*Chapter
    12*](B18277_12.xhtml#_idTextAnchor231).'
  prefs: []
  type: TYPE_NORMAL
- en: k6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**k6** is a load testing tool that provides both a packaged tool to run in
    your own infrastructure and a cloud **Software as a Service** (**SaaS**) offering.
    Load testing, especially as part of a CI/CD pipeline, really enables teams to
    see how their application will perform under load, and evaluate optimizations
    and refactoring. Paired with other detailed analysis tools such as Pyroscope,
    the level of visibility and accessibility to non-technical members of the team
    can be astounding. The project started back in 2016 and was acquired by Grafana
    Labs in June 2021\. The goal of k6 is to make performance testing easy and repeatable.
    We’ll explore k6 in [*Chapter 13*](B18277_13.xhtml#_idTextAnchor239).'
  prefs: []
  type: TYPE_NORMAL
- en: Pyroscope
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Pyroscope** is a recent acquisition of Grafana Labs, joining in March 2023\.
    Pyroscope is a tool that enable teams to engage in the continuous profiling of
    system resource use by applications (CPU, memory, etc.). Pyroscope advertises
    that with a minimal overhead of ~2-5% of performance, they can collect samples
    as frequently as every 10 seconds. **Phlare** is a Grafana Labs project started
    in 2022, and the two projects have now merged. We discuss Pyroscope in more detail
    in [*Chapter 13*](B18277_13.xhtml#_idTextAnchor239).'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know the different tools available from Grafana Labs, let’s look
    at some alternatives that are available.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatives to the Grafana stack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The monitoring and observability space is packed with different open and closed
    source solutions such as `ps` and `top` going back to the 70s and 80s. We will
    not attempt to list every tool here; we aim to offer a source of inspiration for
    people who are curious and want to explore, or who need a quick reference of the
    available tools (as the authors have on a few occasions).
  prefs: []
  type: TYPE_NORMAL
- en: Data collection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'These are agent tools that can be used to collect telemetry from the source:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Tool Name** | **Telemetry Types** |'
  prefs: []
  type: TYPE_TB
- en: '| OpenTelemetry Collector | Metrics, logs, traces |'
  prefs: []
  type: TYPE_TB
- en: '| FluentBit | Metrics, logs, traces |'
  prefs: []
  type: TYPE_TB
- en: '| Vector | Metrics, logs, traces |'
  prefs: []
  type: TYPE_TB
- en: '| Vendor-specific agents(See the *Data storage, processing, and visualization*
    section for an expanded list) | Metrics, logs, traces |'
  prefs: []
  type: TYPE_TB
- en: '| Beats family | Metrics, logs |'
  prefs: []
  type: TYPE_TB
- en: '| Prometheus | Metrics |'
  prefs: []
  type: TYPE_TB
- en: '| Telegraf | Metrics |'
  prefs: []
  type: TYPE_TB
- en: '| StatsD | Metrics |'
  prefs: []
  type: TYPE_TB
- en: '| Collectd | Metrics |'
  prefs: []
  type: TYPE_TB
- en: '| Carbon | Metrics |'
  prefs: []
  type: TYPE_TB
- en: '| Syslog-ng | Logs |'
  prefs: []
  type: TYPE_TB
- en: '| Rsyslog | Logs |'
  prefs: []
  type: TYPE_TB
- en: '| Fluentd | Logs |'
  prefs: []
  type: TYPE_TB
- en: '| Flume | Logs |'
  prefs: []
  type: TYPE_TB
- en: '| Zipkin Collector | Traces |'
  prefs: []
  type: TYPE_TB
- en: Table 1.2 – Data collection tools
  prefs: []
  type: TYPE_NORMAL
- en: Data collection is only one piece of the extract transform and load process
    for observability data. The next section introduces tools to transform and load
    data.
  prefs: []
  type: TYPE_NORMAL
- en: Data storage, processing, and visualization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’ve grouped data processing, storage, and visualization together, as there
    are often a lot of crossovers among them. There are certain tools that also provide
    **security monitoring** and are closely related. However, as this topic is outside
    of the scope of this book, we have chosen to exclude tools that are solely in
    the security space.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Tool Name** | **Tool Name** | **Tool Name** |'
  prefs: []
  type: TYPE_TB
- en: '| AppDynamics | InfluxDB | Sematext |'
  prefs: []
  type: TYPE_TB
- en: '| Aspecto | Instana | Sensu |'
  prefs: []
  type: TYPE_TB
- en: '| AWS CloudWatch & CloudTrail | Jaeger | Sentry |'
  prefs: []
  type: TYPE_TB
- en: '| Azure Application insights | Kibana | Serverless360 |'
  prefs: []
  type: TYPE_TB
- en: '| Centreon | Lightstep | SigNoz |'
  prefs: []
  type: TYPE_TB
- en: '| ClickHouse | Loggly | SkyWalking |'
  prefs: []
  type: TYPE_TB
- en: '| Coralogix | LogicMonitor | Solarwinds |'
  prefs: []
  type: TYPE_TB
- en: '| Cortex | Logtail | Sonic |'
  prefs: []
  type: TYPE_TB
- en: '| Cyclotron | Logz.io | Splunk |'
  prefs: []
  type: TYPE_TB
- en: '| Datadog | Mezmo | Sumo Logic |'
  prefs: []
  type: TYPE_TB
- en: '| Dynatrace | Nagios | TelemetryHub |'
  prefs: []
  type: TYPE_TB
- en: '| Elastic | NetData | Teletrace |'
  prefs: []
  type: TYPE_TB
- en: '| GCP Cloud Operations Suite | New Relic | Thanos |'
  prefs: []
  type: TYPE_TB
- en: '| Grafana Labs | OpenSearch | Uptrace |'
  prefs: []
  type: TYPE_TB
- en: '| Graphite | OpenTSDB | VictoriaMetrics |'
  prefs: []
  type: TYPE_TB
- en: '| Graylog | Prometheus | Zabbix |'
  prefs: []
  type: TYPE_TB
- en: '| Honeycomb | Scalyr | Zipkin |'
  prefs: []
  type: TYPE_TB
- en: Table 1.3 – Data storage processing and visualization tools
  prefs: []
  type: TYPE_NORMAL
- en: With a good understanding of the tools available in this space, let’s now look
    at the ways we can deploy the tools offered by Grafana.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying the Grafana stack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Grafana Labs fully embraces its history as an open source software provider.
    The LGTM stack, alongside most other components, is open source. There are a few
    value-added components that are offered as part of an enterprise subscription.
  prefs: []
  type: TYPE_NORMAL
- en: As a SaaS offering, Grafana Labs provides access to storage for Loki, Mimir,
    and Tempo, alongside Grafana’s 100+ integrations for external data sources. As
    a SaaS customer, you also gain ready access to a huge range of other tools you
    may use and can present them in a consolidated manner, in a single pane of glass.
    The SaaS offering allows organizations to leverage a full-featured observability
    platform without the operational overhead of running the platform and obtaining
    service level agreements for the operation of the platform.
  prefs: []
  type: TYPE_NORMAL
- en: As well as managing the platform for you, you can run Grafana on your organization’s
    infrastructure. Grafana offers its software packaged in several formats for Linux
    and Windows deployments, as well as offering containerized versions. Grafana also
    offers Helm and Tanka configuration wrappers for each of their tools. This book
    will mainly concentrate on the SaaS offering because it is easy to get started
    with the free tier. We will explore some areas where a local installation can
    assist in *Chapters 11* and *14*, which cover architecting and supporting DevOps
    processes respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have been introduced to monitoring and observability, how
    they are similar, and how they differ. The Agua Clara locks on the Panama Canal
    acted as a simplified example of the concepts of observability in practice. The
    key takeaway should be to understand that even when a system produces alerts for
    significant problems, the same data can be used to observe and investigate other
    potential problems.
  prefs: []
  type: TYPE_NORMAL
- en: We also talked about the customers who might use observability systems. These
    customers will be referenced throughout this book when we explore a concept and
    how to target its implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we introduced the full Grafana Labs stack, and you should now have
    a good understanding of the different purposes that each product serves.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will introduce the basics of adding instrumentation
    to applications or infrastructure components for readers whose roles are similar
    to those of Diego and Ophelia.
  prefs: []
  type: TYPE_NORMAL

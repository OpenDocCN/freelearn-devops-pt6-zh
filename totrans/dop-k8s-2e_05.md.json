["```\n- context:\n  cluster: gke_devops-with-kubernetes_us-central1-b_cluster\n  user: gke_devops-with-kubernetes_us-central1-b_cluster\nname: gke_devops-with-kubernetes_us-central1-b_cluster\n```", "```\n# kubectl config current-context\ngke_devops-with-kubernetes_us-central1-b_cluster\n```", "```\n$ kubectl config set-context <context_name> --namespace=<namespace_name> --cluster=<cluster_name> --user=<user_name>\n```", "```\n// create a context with my GKE cluster\n# kubectl config set-context chapter5 --namespace=chapter5 --cluster=gke_devops-with-kubernetes_us-central1-b_cluster --user=gke_devops-with-kubernetes_us-central1-b_cluster\nContext \"chapter5\" created.\n```", "```\n# kubectl config use-context chapter5\nSwitched to context \"chapter5\".\n```", "```\n# kubectl config view\napiVersion: v1\nclusters: \n- cluster:\n certificate-authority-data: DATA+OMITTED\n server: https://35.0.0.200\n name: gke_devops-with-kubernetes_us-central1-b_cluster\ncontexts:\n- context:\n cluster: gke_devops-with-kubernetes_us-central1-b_cluster\n user: gke_devops-with-kubernetes_us-central1-b_cluster\n name: gke_devops-with-kubernetes_us-central1-b_cluster\ncurrent-context: gke_devops-with-kubernetes_us-central1-b_cluster\nkind: Config\npreferences: {}\nusers:\n- name: gke_devops-with-kubernetes_us-central1-b_cluster\n user:\n auth-provider:\n config:\n access-token: XXXXX\n cmd-args: config config-helper --format=json\n cmd-path: /Users/devops/k8s/bin/gcloud\n expiry: 2018-12-16T02:51:21Z\n expiry-key: '{.credential.token_expiry}'\n token-key: '{.credential.access_token}'\n name: gcp\n```", "```\nexport KUBECONFIG=$KUBECONFIG: kubeconfig-file1: kubeconfig-file2\n```", "```\n// list service account across all namespaces\n# kubectl get serviceaccount --all-namespaces\nNAMESPACE     NAME                         SECRETS   AGE\ndefault       default                      1         5d\nkube-public   default                      1         5d\nkube-system   namespace-controller         1         5d\nkube-system   resourcequota-controller     1         5d\nkube-system   service-account-controller   1         5d\nkube-system   service-controller           1         5d\nchapter5      default                      1         2h\n...  \n```", "```\n# kubectl describe serviceaccount/default\nName: default\nNamespace: default\nLabels: <none>\nAnnotations: <none>\nImage pull secrets: <none>\nMountable secrets: default-token-52qnr\nTokens: default-token-52qnr\nEvents: <none> \n```", "```\n// describe the secret, the name is default-token-52qnr here\n# kubectl describe secret default-token-52qnr\nName:       default-token-52qnr\nNamespace:  chapter5\nAnnotations:  kubernetes.io/service-account.name: default\n              kubernetes.io/service-account.uid: 6bc2f108-dae5-11e8-b6f4-42010a8a0244 Type: kubernetes.io/service-account-token\nData\n====\nca.crt:     # the public CA of api server. Base64 encoded.\nnamespace:  # the name space associated with this service account. Base64 encoded\ntoken:      # bearer token. Base64 encoded\n```", "```\n// the configuration file of service account object\n# cat service-account.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n name: myaccount\n namespace: chapter5\n\n// create myaccount\n# kubectl create -f service-account.yaml\nserviceaccount/myaccount created\n```", "```\n// export ca.crt and sa.token from myaccount in namespace chapter5\n# sh ./chapter9/9-2_service-account-for-ci-tool/utils/push-cd/get-sa-token.sh -n chapter5 -a myaccount\n```", "```\n// CI_ENV_K8S_SA_TOKEN=`cat sa.token`\n# kubectl config set-credentials mysa --token=${K8S_SA_TOKEN}\n```", "```\n// Here we set K8S_CLUSTER=gke_devops-with-kubernetes_us-central1-b_cluster\n# kubectl config set-context myctxt --cluster=${K8S_CLUSTER} --user=mysa\n```", "```\n// set the context to myctxt\n# kubectl config use-context myctxt\n```", "```\n# kubectl get po\nError from server (Forbidden): pods is forbidden: User \"system:serviceaccount:chapter5:myaccount\" cannot list pods in the namespace \"default\"\n```", "```\n// generate a private key for Linda\n# openssl genrsa -out linda.key 2048\n```", "```\n// making CN as your username\n# openssl req -new -key linda.key -out linda.csr -subj \"/CN=linda\" \n```", "```\n// generate the cert for Linda, this cert is only valid for 30 days.\n# openssl x509 -req -in linda.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out linda.crt -days 30\nSignature ok\nsubject=/CN=linda\nGetting CA Private Key\n```", "```\n# kubectl config set-credentials linda --client-certificate=linda.crt --client-key=linda.key\nUser \"linda\" set.\n```", "```\n# kubectl config set-context devops-context --cluster=${K8S_CLUSTER} --namespace=chapter5 --user=linda\nContext \"devops-context\" modified.\n```", "```\n// test for getting a pod \n# kubectl --context=devops-context get pods\nError from server (Forbidden): User \"linda\" cannot list pods in the namespace \"chapter5\". (get pods)\n```", "```\n// configuration file for a role named devops-role\n# cat 5-2_rbac/5-2_role.yaml\nkind: Role\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n namespace: chapter5\n name: devops-role\nrules:\n- apiGroups: [\"\", \"extensions\", \"apps\"]\n resources:\n - \"deployments\"\n - \"replicasets\"\n - \"pods\"\n verbs: [\"*\"]\n\n// create the role\n# kubectl create -f 5-2_rbac/5-2_role.yaml\nrole.rbac.authorization.k8s.io/devops-role created\n```", "```\n// configuration file for a cluster role\n# cat 5-2_rbac/5-2_clusterrole.yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: cd-role\nrules:\n- apiGroups: [\"extensions\", \"apps\"]\n  resources:\n    - deployments\n    - replicasets\n    - ingresses\n  verbs: [\"*\"]\n- apiGroups: [\"\"]\n  resources:\n    - namespaces\n    - events\n  verbs: [\"get\", \"list\", \"watch\"]\n- apiGroups: [\"\"]\n  resources:\n    - pods\n    - services\n    - secrets\n    - replicationcontrollers\n    - persistentvolumeclaims\n    - jobs\n    - cronjobs\n  verbs: [\"*\"]\n\n// create the cluster role\n# kubectl create -f 5-2_rbac/5-2_clusterrole.yaml\nclusterrole.rbac.authorization.k8s.io/cd-role created\n```", "```\n// configuration file for RoleBinding resource\n# cat 5-2_rbac/rolebinding_user.yaml\nkind: RoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n name: devops-role-binding\n namespace: chapter5\nsubjects:\n- kind: User\n name: linda\n apiGroup: rbac.authorization.k8s.io\nroleRef:\n kind: Role\n name: devops-role\n apiGroup: rbac.authorization.k8s.io\n\n// create a RoleBinding for User linda\n# kubectl create -f 5-2_rbac/rolebinding_user.yaml\nrolebinding.rbac.authorization.k8s.io/devops-role-binding created\n```", "```\n// configuration file for ClusterRoleBinding\n# cat 5-2_rbac/cluster_rolebinding_user.yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: cd-agent\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n   name: cd-role\nsubjects:\n- apiGroup: rbac.authorization.k8s.io\n  kind: User\n  name: system:serviceaccount:cd:cd-agent  \n\n// create the ClusterRoleBinding\n# kubectl create -f 5-2_rbac/cluster_rolebinding_user.yaml\nclusterrolebinding.rbac.authorization.k8s.io/cd-agent created \n```", "```\nsystem:serviceaccount:<namespace>:<serviceaccountname> \n```", "```\n# kubectl --context=devops-context get pods\nNo resources found.\n```", "```\n# kubectl --context=devops-context get namespaces\nError from server (Forbidden): User \"linda\" cannot list namespaces at the cluster scope. (get namespaces)\n```", "```\n--enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota\n```", "```\npodNodeSelectorPluginConfig:\n clusterDefaultNodeSelector: <default-node-selectors- \n labels>\n  namespace1: <namespace-node-selectors-labels-1>\n  namespace2: <namespace-node-selectors-labels-2>\n```", "```\n# cat chapter5/5-3_admission-webhook/sample-validating-admission-webhook/validatingwebhookconfiguration.yaml\napiVersion: admissionregistration.k8s.io/v1beta1\nkind: ValidatingWebhookConfiguration\nmetadata:\n name: sample-webhook-service\n labels:\n app: sample-webhook-service\nwebhooks:\n - name: devops.kubernetes.com\n rules:\n - apiGroups:\n - \"\"\n apiVersions:\n - v1\n operations:\n - CREATE\n resources:\n - pods\n failurePolicy: Fail\n clientConfig:\n service:\n name: sample-webhook-service-svc\n namespace: default\n path: \"/\"\n caBundle: ${CA_BUNDLE}\n```", "```\nfunction webhook(req, res) {\n  var admissionRequest = req.body;\n  var object = admissionRequest.request.object;\n\n  var allowed = false;\n  if (!isEmpty(object.metadata.annotations) && !isEmpty(object.metadata.annotations.chapter) && object.metadata.annotations.chapter == \"5\") {\n    allowed = true;\n  }\n\n  var admissionResponse = {\n    allowed: allowed\n  };\n\n  for (var container of object.spec.containers) {\n    console.log(container.securityContext);\n    var image = container.image;\n        var admissionReview = {\n          response: admissionResponse\n        };\n        console.log(\"Response: \" + JSON.stringify(admissionReview));\n        res.setHeader('Content-Type', 'application/json');\n        res.send(JSON.stringify(admissionReview));\n        res.status(200).end();\n    };\n};\n```", "```\n# wget https://raw.githubusercontent.com/istio/istio/41203341818c4dada2ea5385cfedc7859c01e957/install/kubernetes/webhook-create-signed-cert.sh\n// create the cert\n# sh webhook-create-signed-cert.sh --service sample-webhook-service-svc --secret sample-webhook-service-certs --namespace default\n```", "```\n# cat chapter5/5-3_admission-webhook/sample-validating-admission-webhook/deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n name: sample-webhook-service\n labels:\n app: sample-webhook-service\nspec:\n replicas: 1\n selector:\n matchLabels:\n app: sample-webhook-service\n template:\n metadata:\n labels:\n app: sample-webhook-service\n spec:\n containers:\n - name: sample-webhook-service\n image: devopswithkubernetes/sample-webhook-service:latest\n imagePullPolicy: Always\n---\napiVersion: v1\nkind: Service\nmetadata:\n name: sample-webhook-service-svc\n labels:\n app: sample-webhook-service\nspec:\n ports:\n - port: 443\n targetPort: 443\n selector:\n app: sample-webhook-service\n\n# kubectl create -f chapter5/5-3_admission-webhook/sample-validating-admission-webhook/deployment.yaml\ndeployment.apps/sample-webhook-service created\nservice/sample-webhook-service-svc created\n```", "```\n# kubectl create -f chapter5/5-3_admission-webhook/sample-validating-admission-webhook/validatingwebhookconfiguration.yaml\nvalidatingwebhookconfiguration.admissionregistration.k8s.io/sample-webhook-service \ncreated\n\n# kubectl get validatingwebhookconfiguration\nNAME CREATED AT\nsample-webhook-service 2018-12-27T21:04:50Z\n```", "```\n# cat chapter5/5-3_admission-webhook/sample-validating-admission-webhook/test-sample.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n name: nginx\n labels:\n app: nginx\nspec:\n replicas: 2\n selector:\n matchLabels:\n app: nginx\n template:\n metadata:\n labels:\n app: nginx\n #annotations:\n #  chapter: \"5\"\n spec:\n containers:\n - name: nginx\n image: nginx\n\n# kubectl create -f chapter5/5-3_admission-webhook/sample-validating-admission-webhook/test-sample.yaml\nHdeployment.apps/nginx created\n```", "```\n# kubectl get po\nNAME READY STATUS RESTARTS AGE\nsample-webhook-service-789d87b8b7-m58wq 1/1 Running 0 7h\n```", "```\n# kubectl get rs\nNAME DESIRED CURRENT READY AGE\nnginx-78f5d695bd 2 0 0 1m\nsample-webhook-service-789d87b8b7 1 1 1 7h\n\n# kubectl describe rs nginx-78f5d695bd\nName: nginx-78f5d695bd\nNamespace: default\nSelector: app=nginx,pod-template-hash=3491825168\nLabels: app=nginx\n pod-template-hash=3491825168\nAnnotations: deployment.kubernetes.io/desired-replicas: 2\n deployment.kubernetes.io/max-replicas: 3\n deployment.kubernetes.io/revision: 1\nControlled By: Deployment/nginx\nReplicas: 0 current / 2 desired\nPods Status: 0 Running / 0 Waiting / 0 Succeeded / 0 Failed\nPod Template:\n Labels: app=nginx\n pod-template-hash=3491825168\n Containers:\n nginx:\n Image: nginx\n Port: <none>\n Host Port: <none>\n Environment: <none>\n Mounts: <none>\n Volumes: <none>\nConditions:\n Type Status Reason\n ---- ------ ------\n ReplicaFailure True FailedCreate\nEvents:\n Type Reason Age From Message\n ---- ------ ---- ---- -------\n Warning FailedCreate 28s (x15 over 110s) replicaset-controller Error creating: Internal error occurred: admission webhook \"devops.kubernetes.com\" denied the request without explanation\n```", "```\n // uncomment this annotation.\n      #annotations:\n #  chapter: \"5\"\n```", "```\n# kubectl get po\nNAME READY STATUS RESTARTS AGE\nnginx-978c784c5-v8xk9 0/1 ContainerCreating 0 2s\nnginx-978c784c5-wrmdb 1/1 Running 0 2s\nsample-webhook-service-789d87b8b7-m58wq 1/1 Running 0 7h\n```", "```\n# cat chapter5/5-4_crd/5-4-1_crd.yaml\napiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n name: books.devops.kubernetes.com\nspec:\n group: devops.kubernetes.com\n version: v1alpha1\n scope: Namespaced\n names:\n plural: books\n singular: book\n kind: Book\n shortNames:\n - bk\n validation:\n openAPIV3Schema:\n required: [\"spec\"]\n properties:\n spec:\n required: [\"name\", \"edition\"]\n properties:\n name:\n type: string\n minimum: 50\n edition:\n type: string\n minimum: 10\n chapter:\n type: integer\n minimum: 1\n maximum: 2\n```", "```\n# kubectl create -f chapter5/5-4_crd/5-4-1_crd.yaml\ncustomresourcedefinition.apiextensions.k8s.io/books.devops.kubernetes.com created\n\n# kubectl get crd\nNAME CREATED AT\nbackendconfigs.cloud.google.com 2018-12-22T20:48:00Z\nbooks.devops.kubernetes.com 2018-12-28T16:14:34Z\nscalingpolicies.scalingpolicy.kope.io 2018-12-22T20:48:30Z\n```", "```\n# cat chapter5/5-4_crd/5-4-2_objectcreation.yaml\napiVersion: devops.kubernetes.com/v1alpha1\nkind: Book\nmetadata:\n name: book-object\nspec:\n name: DevOps-with-Kubernetes\n edition: second\n\n# kubectl create -f chapter5/5-4_crd/5-4-2_objectcreation.yaml\nbook.devops.kubernetes.com/book-object created\n```", "```\nspec.edition in body must be of type string: \"integer\"\nspec.edition in body should be greater than or equal to 10\n```", "```\n# kubectl get books\nNAME AGE\nbook-object 3s\n\n# kubectl describe books book-object\nName: book-object\nNamespace: default\nLabels: <none>\nAnnotations: <none>\nAPI Version: devops.kubernetes.com/v1alpha1\nKind: Book\nMetadata:\n /apis/devops.kubernetes.com/v1alpha1/namespaces/default/books/book-object\n UID: c6912ab5-0abd-11e9-be06-42010a8a0078\nSpec:\n Edition: second\n Name: DevOps-with-Kubernetes\nEvents: <none>\n```", "```\n// Check the prerequisites at https://github.com/operator-framework/operator-sdk#prerequisites\n# mkdir -p $GOPATH/src/github.com/operator-framework\n# cd $GOPATH/src/github.com/operator-framework\n# git clone https://github.com/operator-framework/operator-sdk\n# cd operator-sdk\n# git checkout master\n# make dep\n# make install\n\n// check version\n# operator-sdk --version\n# operator-sdk version v0.3.0+git\n```", "```\n// operator-sdk new <operator_name>\n# operator-sdk new devops-operator\nINFO[0076] Run git init done\nINFO[0076] Project creation complete.\n```", "```\n// operator-sdk add api --api-version <group>/<version> --kind <kind>\n# operator-sdk add api --api-version devops.kubernetes.com/v1alpha1 --kind Book\nINFO[0000] Generating api version devops.kubernetes.com/v1alpha1 for kind Book.\nINFO[0000] Create pkg/apis/devops/v1alpha1/book_types.go\nINFO[0000] Create pkg/apis/addtoscheme_devops_v1alpha1.go\nINFO[0000] Create pkg/apis/devops/v1alpha1/register.go\nINFO[0000] Create pkg/apis/devops/v1alpha1/doc.go\nINFO[0000] Create deploy/crds/devops_v1alpha1_book_cr.yaml\nINFO[0000] Create deploy/crds/devops_v1alpha1_book_crd.yaml\nINFO[0008] Running code-generation for Custom Resource group versions: [devops:[v1alpha1], ]\nINFO[0009] Code-generation complete.\nINFO[0009] Api generation complete.\n\n# operator-sdk add controller --api-version devops.kubernetes.com/v1alpha1 --kind Book\nINFO[0000] Generating controller version devops.kubernetes.com/v1alpha1 for kind Book.\nINFO[0000] Create pkg/controller/book/book_controller.go\nINFO[0000] Create pkg/controller/add_book.go\nINFO[0000] Controller generation complete.\n```", "```\n// in pkg/apis/devops/v1alpha1/book_types.go\n\ntype BookSpec struct {\n  // INSERT ADDITIONAL SPEC FIELDS - desired state of cluster\n // Important: Run \"operator-sdk generate k8s\" to regenerate code after modifying this file\n  Name string `json:\"name\"`\n Edition string `json:\"edition\"`\n Chapter int32 `json:\"chapter\"`\n}\n```", "```\n// in pkg/controller/book/book_controller.go\nfunc newPodForCR(cr *devopsv1alpha1.Book) *corev1.Pod {\n  labels := map[string]string{\n    \"app\": cr.Name,\n  }\n  name := cr.Spec.Name\n edition := cr.Spec.Edition\n  return &corev1.Pod{\n    ObjectMeta: metav1.ObjectMeta{\n      Name: cr.Name + \"-pod\",\n      Namespace: cr.Namespace,\n      Labels: labels,\n    },\n    Spec: corev1.PodSpec{\n      Containers: []corev1.Container{\n        {\n          Name: \"busybox\",\n          Image: \"busybox\",\n          Command: []string{\"echo\", \"Please support\", name, edition, \"Edition :-) \"},\n          Stdin: true,\n        },\n      },\n    },\n  }\n}\n```", "```\n# kubectl create -f deploy/service_account.yaml\n# kubectl create -f deploy/role.yaml\n# kubectl create -f deploy/role_binding.yaml\n# kubectl create -f deploy/crds/app_v1alpha1_appservice_crd.yaml\n# kubectl create -f deploy/operator.yaml\n```", "```\n# kubectl get po\nNAME READY STATUS RESTARTS AGE\ndevops-operator-58476dbcdd-s5m5v 1/1 Running 0 41m\n```", "```\n# kubectl create -f deploy/crds/devops_v1alpha1_book_cr.yaml\nbook.devops.kubernetes.com/book-object created\n```", "```\n# kubectl get po\nNAME READY STATUS RESTARTS AGE\nbook-object-pod 0/1 Completed 0 2s\ndevops-operator-58476dbcdd-s5m5v 1/1 Running 0 45m\n\n# kubectl logs book-object-pod\nPlease support DevOps-with-Kubernetes second Edition :-)\n```"]
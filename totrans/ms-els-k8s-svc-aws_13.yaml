- en: '13'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '13'
- en: Using IAM for Granting Access to Applications
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 IAM 授予应用程序访问权限。
- en: AWS has over 200 services available, from SQL/NoSQL databases to machine learning
    and quantum computing. It’s likely that at some point you will want to use one
    of these services from within your application deployed on EKS.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 提供超过 200 种服务，从 SQL/NoSQL 数据库到机器学习和量子计算。很可能在某个时候，您希望从部署在 EKS 上的应用程序中使用这些服务之一。
- en: 'This chapter looks at how you can grant IAM permissions to Pods, how you use
    the associated credentials in your application to connect to an AWS service, and
    how to troubleshoot issues with the overall process. Specifically, we will cover
    the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将探讨如何向 Pods 授予 IAM 权限，如何在应用程序中使用相关凭证连接到 AWS 服务，并如何解决整个过程中的问题。具体来说，我们将涵盖以下内容：
- en: Understanding what **IAM Roles for Service Accounts** (**IRSA**) is and what
    problems it solves
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 **IAM Service Account 角色**（**IRSA**）是什么及其解决了什么问题。
- en: Using IRSA in your application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在应用程序中使用 IRSA。
- en: How to troubleshoot IAM issues on EKS
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在 EKS 上解决 IAM 问题。
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求。
- en: 'The reader should be familiar with YAML, AWS IAM, and EKS architecture. Before
    getting started with this chapter, please ensure the following:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 读者应熟悉 YAML、AWS IAM 和 EKS 架构。在开始本章之前，请确保以下内容：
- en: You have network connectivity to your EKS cluster API endpoint
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以连接到您的 EKS 集群 API 终端。
- en: The AWS CLI, Docker, and the `kubectl` binaries are installed on your workstation
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS CLI、Docker 和 `kubectl` 二进制文件已安装在您的工作站上。
- en: You have a basic understanding of AWS IAM
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您对 AWS IAM 有基本的了解。
- en: Understanding IRSA
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 IRSA。
- en: Firstly, let’s look at how IAM role assignment works for standard EC2 instances.
    In AWS IAM, roles are used to allocate permissions (using one or more policies).
    A role can be assigned to an EC2 instance using an instance profile, which is
    simply a container for the IAM role that’s attached to a specific EC2 instance.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看标准 EC2 实例的 IAM 角色分配工作原理。在 AWS IAM 中，角色用于分配权限（使用一个或多个策略）。可以使用实例配置文件将角色分配给
    EC2 实例，该配置文件只是附加到特定 EC2 实例的 IAM 角色的容器。
- en: '![Figure 13.1 – EC2 role assignment](img/B18129_13_01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.1 – EC2 角色分配](img/B18129_13_01.jpg)'
- en: Figure 13.1 – EC2 role assignment
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.1 – EC2 角色分配。
- en: 'When an EC2 instance is created and assigned a role, the AWS platform will
    automatically create an instance profile. When that instance boots up, it will
    make a network call to the `169.254.169.254`, and query what (if any) instance
    profile (or role) is assigned to that instance. If one has been assigned, it can
    retrieve the access credentials, an example of which is shown next. These credentials
    consist of the access and secret keys, which are used for all AWS API calls and
    identify the role and therefore the permissions granted to the role:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建一个 EC2 实例并分配角色时，AWS 平台将自动创建一个实例配置文件。当该实例启动时，它将向 `169.254.169.254` 发送网络调用，并查询该实例分配了哪个（如果有）实例配置文件（或角色）。如果已分配一个角色，则可以检索访问凭证，下面是一个示例。这些凭证包括访问密钥和秘密密钥，用于所有
    AWS API 调用，并标识角色及其授予的权限：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you log in to an EC2 instance, you can review the instance profile attached
    to a running instance using the `aws sts` command, which is shown next:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果登录到 EC2 实例，可以使用下面显示的 `aws sts` 命令查看附加到运行实例的实例配置文件：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: AWS introduced IMDSv2 to provide some security controls on container platforms,
    so let’s review the main changes.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 引入了 IMDSv2，以在容器平台上提供一些安全控制，让我们来审视主要变更。
- en: Introducing IMDSv2
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引入 IMDSv2。
- en: As we have discussed, the instance profile information is retrieved through
    the EC2 IMDS, which runs at address `169.254.169.254` in every VPC. This service
    is critical to the operation of EC2 instances and should not be blocked for the
    worker nodes, but it should be restricted for Pods. The original IMDS version,
    version 1, doesn’t allow any restrictions to be placed on who can use it.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所讨论的，实例配置文件信息是通过 EC2 IMDS 检索的，该服务在每个 VPC 中的地址为 `169.254.169.254`。此服务对于 EC2
    实例的操作至关重要，不应阻止工作节点使用它，但应限制 Pods 使用。原始 IMDS 版本，即版本 1，不允许对谁可以使用它施加任何限制。
- en: IMDSv2 is an enhancement to IMDSv1 that uses session-oriented requests to add
    security controls to the service. IMDSv2 returns a token, which is used to make
    requests for metadata and credentials. As the token is never stored in IMDSv2,
    when the process or application using the token ends, the token is lost. The metadata
    service uses the TTL hop count in the IPv4/IPv6 packet to allow requests. By default,
    it is set to 1, which means requests can only come directly from the EC2\. Any
    Pods running on the host will increment the hop count to 2 (as they use the bridge
    network inside the hots), which prevents them from using the IMDSv2 service directly
    and retrieving host instance profile credentials.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: IMDSv2是对IMDSv1的增强，使用面向会话的请求为服务增加安全控制。IMDSv2返回一个令牌，用于请求元数据和凭证。由于令牌从不存储在IMDSv2中，因此当使用该令牌的进程或应用程序结束时，令牌就会丢失。元数据服务使用TTL跳数在IPv4/IPv6数据包中允许请求。默认情况下，它设置为1，意味着请求只能直接来自EC2。运行在主机上的任何Pod都会将跳数增加到2（因为它们在主机内使用桥接网络），这会阻止它们直接使用IMDSv2服务并获取主机实例配置凭证。
- en: 'To force the use of IMDSv2 and restrict the hop count, you can run the following
    command on all the worker nodes or add the configuration into your **infrastructure-as-code**
    (**IaC**) definition for the launch template used for the worker nodes:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为强制使用IMDSv2并限制跳数，你可以在所有工作节点上运行以下命令，或者将配置添加到用于工作节点的启动模板的**基础设施即代码**（**IaC**）定义中：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This only works, however, if the Pod uses IMDSv2\. In most cases, the Pod uses
    the AWS SDK to make AWS API calls, which defaults to IMDSv2 to retrieve the credentials.
    These will have the hop limit applied. However, if the Pod uses IMDSv1, it can
    still retrieve the host credentials. In this case, the best practice is only to
    give the worker nodes minimal permissions (to pull ECR containers, for example)
    or limit access to IMDSv1 using Calico network policies or `iptables` rules.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这只有在Pod使用IMDSv2时才有效。在大多数情况下，Pod使用AWS SDK来调用AWS API，这默认使用IMDSv2来获取凭证。这些凭证将应用跳数限制。然而，如果Pod使用IMDSv1，它仍然可以获取主机凭证。在这种情况下，最佳实践是仅给工作节点最小的权限（例如，仅允许拉取ECR容器），或者使用Calico网络策略或`iptables`规则限制对IMDSv1的访问。
- en: Now, we’ve looked at the underlying mechanism of how instances and Pods can
    use IMDS to retrieve credentials assigned to a host (and how we can restrict them
    from doing so). Let’s look at how we can assign specific roles directly to Pods
    using IRSA.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经了解了实例和Pod如何使用IMDS来获取分配给主机的凭证（以及如何限制它们这样做）。接下来，让我们看看如何使用IRSA将特定的角色直接分配给Pods。
- en: How IRSA works
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IRSA的工作原理
- en: IRSA allows you to assign specific privileges to a specific Pod by associating
    a Kubernetes `AssumeRoleWithWebIdentity` API call to the AWS **Security Token
    Service** (**STS**), which will exchange the Kubernetes-generated credentials
    for AWS IAM-generated credentials. It does this by using the OIDC provider for
    a specific EKS cluster as the principal and assuming the role that is defined
    in the SA annotation (step **3**).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: IRSA允许你通过将Kubernetes的`AssumeRoleWithWebIdentity` API调用与AWS **安全令牌服务**（**STS**）关联，从而为特定的Pod分配特定权限，STS将把Kubernetes生成的凭证交换为AWS
    IAM生成的凭证。它通过将特定EKS集群的OIDC提供程序作为主体，并假设在SA注释中定义的角色来实现这一点（步骤**3**）。
- en: '![Figure 13.2 – How IRSA works](img/B18129_13_02.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图13.2 - IRSA的工作原理](img/B18129_13_02.jpg)'
- en: Figure 13.2 – How IRSA works
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.2 - IRSA的工作原理
- en: Now we understand at a high level how IRSA will work, let’s look at what we
    need to configure so that a Pod can use IRSA.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们大致了解了IRSA的工作原理，接下来让我们看看需要配置什么，才能让Pod使用IRSA。
- en: Using IRSA in your application
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在应用程序中使用IRSA
- en: Now that you understand the basic concepts behind IRSA, let’s look at how you
    can configure and use it in your applications. We will look at how to deploy a
    Pod manually and configure it to use IRSA and then we will look at how you can
    really simplify the process using `eksctl`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了IRSA的基本概念，接下来让我们看看如何在应用程序中配置和使用它。我们将查看如何手动部署Pod并配置它以使用IRSA，然后我们将看看如何通过`eksctl`简化整个过程。
- en: How to deploy a Pod and use IRSA credentials
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何部署Pod并使用IRSA凭证
- en: 'The first step is to make sure you have an OIDC provider configured for your
    cluster. If you used `eksctl`, this will be configured already:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是确保已为集群配置了OIDC提供程序。如果你使用了`eksctl`，则此配置已经完成：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If you haven’t enabled it, you can use the following `eksctl` command:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有启用它，可以使用以下`eksctl`命令：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now that we have an identity for our cluster that we can use, in IAM, we can
    create the relevant policies and roles. Let’s assume we want to give our Pod access
    to all S3 buckets and objects in the account. So, we will use the following policy
    to provide S3 access:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经为集群创建了身份，并且可以使用它，在IAM中，我们可以创建相关的策略和角色。假设我们希望将Pod的访问权限授予账户中的所有S3存储桶和对象。那么，我们将使用以下策略来提供S3访问：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We will then create the policy in our AWS account using the following command:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将使用以下命令在AWS账户中创建策略：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, we have the policy we need to create the role and allow the EKS cluster
    OIDC provider and Kubernetes SA combination to assume that role. The following
    commands will allow you to do this. Let’s initially set up some environment variables
    for the AWS account, the EKS OIDC provider, the Kubernetes namespace, and SA:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经拥有了创建角色所需的策略，并允许EKS集群OIDC提供者和Kubernetes SA组合来假设该角色。以下命令将帮助您完成这一操作。首先，我们需要为AWS账户、EKS
    OIDC提供者、Kubernetes命名空间和SA设置一些环境变量：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We can now create the trust relationship for the role that the Pod will assume
    using the following command:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用以下命令创建Pod将要假设的角色的信任关系：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'All this is doing is defining the mapping for the EKS OIDC provider and Kubernetes
    namespace and SA, so we need to create the role with this trust relationship and
    attach the policy we created previously to allow S3 access using the following
    commands:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切只是定义EKS OIDC提供者、Kubernetes命名空间和SA的映射关系，因此我们需要使用以下命令创建具有此信任关系的角色，并附加之前创建的策略，以便使用S3访问：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We have now set up everything that’s needed in the AWS IAM, so now we just
    need to configure a Pod to use the SA in the namespace defined here. Let’s start
    by configuring the SA in the `default` namespace:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在AWS IAM中设置好了所需的一切，接下来只需要配置一个Pod，使其使用此处定义的命名空间中的SA。我们从配置`default`命名空间中的SA开始：
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We can now run a Pod using the SA with the following commands. This will use
    the `aws-cli` image and run the `aws s3 ls` command, which should be able to list
    the buckets, as the assigned SA has the necessary permissions exposed through
    the role:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以使用以下命令运行带有SA的Pod。此命令将使用`aws-cli`镜像并运行`aws s3 ls`命令，应该能够列出存储桶，因为分配的SA具有通过角色暴露的必要权限：
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If you change the `serviceAccount` value to `default`, you will see the command
    fail, as the default SA has no annotation and therefore no mapping to a valid
    IAM role. Now, let’s look at how we can make this process easier using IaC.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将`serviceAccount`值更改为`default`，您会看到命令失败，因为默认的SA没有注解，因此没有映射到有效的IAM角色。现在，让我们来看一下如何使用IaC简化这个过程。
- en: How to create an IRSA role programmatically
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何通过编程方式创建IRSA角色
- en: We have used the `eksctl create iamserviceaccount` command from the previous
    chapter to allow the Pods hosting the storage controllers to communicate with
    the AWS storage APIs.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用了上一章中的`eksctl create iamserviceaccount`命令，允许托管存储控制器的Pod与AWS存储API进行通信。
- en: 'If we look at the generic command, we can see we have associated a Kubernetes
    SA in a specific namespace with a specific IAM policy. The policy defines what
    API action can be performed and the association of an SA to a Pod allows that
    Pod to perform that action:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看通用命令，可以看到我们已将特定命名空间中的Kubernetes SA与特定IAM策略关联起来。该策略定义了可以执行的API操作，而将SA与Pod关联起来，使得该Pod可以执行该操作：
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'So, in comparison to the previous section, the only thing we need to pre-provision
    is the policy with the relevant permissions, so we can provide `policyARN`. The
    `eksctl` tool will do the following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，与上一部分相比，我们唯一需要预先准备的是具有相关权限的策略，这样我们就可以提供`policyARN`。`eksctl`工具将执行以下操作：
- en: Determine the EKS cluster OIDC provider.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定EKS集群的OIDC提供者。
- en: Create the role with a trust policy using the derived OIDC details and the Kubernetes
    SA name and namespace provided.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用派生的OIDC详细信息以及提供的Kubernetes SA名称和命名空间创建带有信任策略的角色。
- en: Attach the pre-created policy to the IAM role.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将预先创建的策略附加到IAM角色。
- en: Create the Kubernetes SA with the right annotations in the right namespace.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在正确的命名空间中创建具有正确注解的Kubernetes SA。
- en: You can now run the `kubectl run` command we used previously in the namespace
    and then use the SA specified in the `eksctl` command, and it should all work.
    Let’s look at how we can troubleshoot IRSA if there are any issues.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以在命名空间中运行之前使用的`kubectl run`命令，然后使用在`eksctl`命令中指定的SA，所有操作应该都能正常运行。接下来让我们看看如何在遇到问题时排查IRSA。
- en: How to troubleshoot IAM issues on EKS
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何排查EKS中的IAM问题
- en: 'The first thing you need to do is determine whether this is an IAM permissions
    issue. If we look at the error message in the following example, we can see a
    very clear `AccessDenied` error message for an AWS API operation – in this case,
    the `ListBuckets` operations. This is a clear indicator that it’s an IAM error:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 首先需要做的是确定这是否是IAM权限问题。如果我们查看以下示例中的错误信息，可以看到AWS API操作的`AccessDenied`错误信息——在这个例子中，是`ListBuckets`操作。这是一个明显的指示，表明这是一个IAM错误：
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The first step is to determine which SA is being used and work backward from
    there. In the example, it’s pretty clear, as we have the `run` command. However,
    assuming we don’t have it, we can use the next command to figure it out:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是确定使用的是哪个SA，然后从那里向后追溯。在这个例子中很清楚，因为我们有`run`命令。但是，假设我们没有它，我们可以使用下一个命令来找出它：
- en: '[PRE14]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We can then run the following command to make sure the annotation is in place
    and identify what role will be assumed:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以运行以下命令来确保注释已经设置，并识别将要假定的角色：
- en: '[PRE15]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In this case, there is no annotation, so it’s clear this SA has no permissions.
    If there was a role assigned, we could use the following commands to determine
    whether it was a policy or permissions issue:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，没有注释，所以很明显这个SA没有权限。如果有角色被分配，我们可以使用以下命令来确定是策略还是权限问题：
- en: '[PRE16]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Once we can see the attached policy, in this case, just one, we can then iterate
    over it, but first, you must get the version of the policy using the `get-policy`
    command:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们可以看到附加的策略，在这个例子中只有一个，我们可以遍历它，但首先，你必须使用`get-policy`命令获取策略的版本：
- en: '[PRE17]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We can now extract the permissions using the `get-policy-version` command.
    In the following example, the `s3:ListAllMyBuckets` operation is missing, which
    is causing the problem:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用`get-policy-version`命令提取权限。在以下示例中，缺少`s3:ListAllMyBuckets`操作，这就是导致问题的原因：
- en: '[PRE18]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'There are a couple of other areas you can consider:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以考虑其他几个方面：
- en: 'You can find out whether the assigned role trusts the right EKS OIDC provider
    using the following command:'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以使用以下命令来检查分配的角色是否信任正确的EKS OIDC提供者：
- en: '[PRE19]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'IRSA leverages a mutating webhook for Pod identity. You can validate that this
    has been deployed using the following command:'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IRSA通过一个变更Webhook来实现Pod身份验证。你可以使用以下命令验证这一点是否已经部署：
- en: '[PRE20]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Some other errors are covered in the *Further reading* section. In this section,
    we have looked at what IRSA is, how it works and is configured, and how you can
    do some basic IRSA troubleshooting. We’ll now revisit the key learning points
    from this chapter.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 其他一些错误在*进一步阅读*部分有介绍。在这一部分，我们探讨了IRSA是什么，它是如何工作的以及如何配置的，还讲解了如何进行一些基本的IRSA故障排除。接下来，我们将回顾本章的关键学习点。
- en: Summary
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we explored how AWS API permissions can be assigned to EC2
    instances (worker nodes) and Pods using instance profiles and IMDS. We also noted
    that by default, EKS Pods inherit the permissions assigned to the worker nodes
    they run on, and how this may not be a good thing, as we are not observing a *least-privilege*
    model since many Pods may not need any AWS API access.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了如何使用实例配置文件和IMDS将AWS API权限分配给EC2实例（工作节点）和Pods。我们还注意到，默认情况下，EKS Pods继承它们运行的工作节点上分配的权限，这可能并不是一个好事，因为我们没有遵循*最小权限*模型，因为许多Pods可能根本不需要任何AWS
    API访问权限。
- en: We discussed how IMDSv2 can be used to reduce the use of worker permission and
    should be used with IRSA to limit the worker node permission inheritance. We then
    worked through how to configure and use IRSA from the command line and how IaC
    tools such as `eksctl` can simplify the process significantly. Finally, we looked
    at how to do some basic troubleshooting of AWS IAM permission issues, working
    backward from the Kubernetes SA.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了如何使用IMDSv2来减少工作节点权限的使用，并应与IRSA一起使用，以限制工作节点权限的继承。接着，我们演示了如何从命令行配置和使用IRSA，以及像`eksctl`这样的IaC工具如何显著简化这一过程。最后，我们讨论了如何进行AWS
    IAM权限问题的基本故障排除，从Kubernetes SA向后追溯。
- en: In the next chapter, we will look at how we can use AWS load balancers to make
    our Kubernetes services more resilient and scalable.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将讨论如何使用AWS负载均衡器来使我们的Kubernetes服务更加稳健和可扩展。
- en: Further reading
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Understanding the EC2 metadata service: [https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解EC2元数据服务：[https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html)
- en: )
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: 'EKS updates to support IMDSv2: [https://aws.amazon.com/about-aws/whats-new/2020/08/amazon-eks-supports-ec2-instance-metadata-service-v2/](https://aws.amazon.com/about-aws/whats-new/2020/08/amazon-eks-supports-ec2-instance-metadata-service-v2/'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: )
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: 'Troubleshooting IRSA errors: [https://aws.amazon.com/premiumsupport/knowledge-center/eks-troubleshoot-IRSA-errors/](https://aws.amazon.com/premiumsupport/knowledge-center/eks-troubleshoot-IRSA-errors/)'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL

- en: 2\. Getting started with Azure Kubernetes Service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installing and maintaining Kubernetes clusters correctly and securely is difficult.
    Thankfully, all the major cloud providers, such as **Azure**, **Amazon Web Services**
    (**AWS**), and **Google Cloud Platform** (**GCP**), facilitate installing and
    maintaining clusters. In this chapter, you will navigate through the Azure portal,
    launch your own cluster, and run a sample application. You will accomplish all
    of this from your browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new Azure free account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and launching your first cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying and inspecting your first demo application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's start by looking at different ways to create an **Azure Kubernetes Service**
    (**AKS**) cluster, and then we will run our sample application.
  prefs: []
  type: TYPE_NORMAL
- en: Different ways to create an AKS cluster
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this chapter, you will use the Azure portal to deploy your AKS cluster.
    There are, however, multiple ways to create an AKS cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Using the portal**: The portal offers a **graphical user interface** (**GUI**)
    for deploying your cluster through a wizard. This is a great way to deploy your
    first cluster. For multiple deployments or automated deployments, one of the following
    methods is recommended.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Using the Azure CLI**: The Azure **command-line interface** (**CLI**) is
    a cross-platform CLI for managing Azure resources. This allows you to script your
    cluster deployment, which can be integrated into other scripts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Using Azure PowerShell**: Azure PowerShell is a set of PowerShell commands
    used for managing Azure resources directly from PowerShell. It can also be used
    to create Kubernetes clusters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Using ARM templates**: **Azure Resource Manager** (**ARM**) templates are
    an Azure-native way to deploy Azure resources using **Infrastructure as Code** (**IaC**).
    You can declaratively deploy your cluster, allowing you to create a template that
    can be reused by multiple teams.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Using Terraform for Azure**: Terraform is an open-source IaC tool developed
    by HashiCorp. The tool is very popular in the open-source community for deploying
    cloud resources, including AKS. Like ARM templates, Terraform also uses declarative
    templates for your cluster.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, you will create your cluster using the Azure portal. If you
    are interested in deploying a cluster using either CLI, ARM templates, or Terraform,
    the following Azure documentation contains steps on how to use these tools to
    create your own clusters [https://docs.microsoft.com/azure/aks](https://docs.microsoft.com/azure/aks).
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with the Azure portal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will start our initial cluster deployment using the Azure portal. The Azure
    portal is a web-based management console. It allows you to build, manage, and
    monitor all your Azure deployments worldwide through a single console.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To follow along with the examples in this book, you will need an Azure account.
    If you don't have an Azure account, you can create a free account by following
    the steps at [azure.microsoft.com/free](http://azure.microsoft.com/free). If you
    plan to run this in an existing subscription, you will need owner rights to the
    subscription and the ability to create service principals in **Azure Active Directory** (**Azure
    AD**).
  prefs: []
  type: TYPE_NORMAL
- en: All the examples in this book have been verified with a free trial account.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to jump straight in by creating our AKS cluster. By doing so, we
    are also going to familiarize ourselves with the Azure portal.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first AKS cluster
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To start, browse to the Azure portal on [https://portal.azure.com](https://portal.azure.com).
    Enter the keyword `aks` in the search bar at the top of the Azure portal. Click
    on Kubernetes services under the Services category in the search results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Searching for AKS using the Azure portal search bar](img/B17338_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.1: Searching for AKS with the search bar'
  prefs: []
  type: TYPE_NORMAL
- en: 'This will take you to the AKS pane in the portal. As you might have expected,
    you don''t have any clusters yet. Go ahead and create a new cluster by hitting
    the + Add button, and select the + Add Kubernetes cluster option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Clicking the Add button and the Add Kubernetes cluster button to start the
    cluster creation process](img/B17338_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.2: Clicking the + Add button and the + Add Kubernetes cluster button
    to start the cluster creation process'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There are a lot of options to configure when you're creating an AKS cluster.
    For your first cluster, we recommend sticking with the defaults from the portal
    and following our naming guidelines during this example. The following settings
    were tested by us to work reliably with a free account.
  prefs: []
  type: TYPE_NORMAL
- en: 'This will take you to the creation wizard to create your first AKS cluster.
    The first step here is to create a new resource group. Click Create new, give
    your resource group a name, and hit OK. If you want to follow along with the examples
    in this book, please name the resource group `rg-handsonaks`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Providing essential information for creating a new resource group](img/B17338_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.3: Creating a new resource group'
  prefs: []
  type: TYPE_NORMAL
- en: Next up, we'll provide the cluster details. Give your cluster a name—if you
    want to follow the examples in the book, please call it `handsonaks`. The region
    we will use in the book is `(US) West US 2`, but you could use any other region
    of choice close to your location. If the region you selected supports Availability
    Zones, unselect all the zones.
  prefs: []
  type: TYPE_NORMAL
- en: 'Select a Kubernetes version—at the time of writing, version 1.19.6 is the latest
    version that is supported; don''t worry if that specific version is not available
    for you. Kubernetes and AKS evolve very quickly, and new versions are introduced
    often:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: For production environments, deploying a cluster in an Availability Zone is
    recommended. However, since we are deploying a small cluster, not using Availability
    Zones works best for the examples in the book.
  prefs: []
  type: TYPE_NORMAL
- en: '![Entering the cluster name and selecting a region and Kubernetes version](img/B17338_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.4: Providing the cluster details'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, change the node count to 2\. For the purposes of the demo in this book,
    the default `Standard DS2 v2` node size is sufficient. This should make your cluster
    size look similar to that shown in *Figure 2.5*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Updating the node count to 2 and verifying the Standard DS2 v2 machine size](img/B17338_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.5: Updated Node size and Node count'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Your free account has a four-core limit that will be breached if you go with
    the defaults.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final view of the first pane should look like *Figure 2.6*. There are a
    number of configuration panes, which you need not change for the demo cluster
    we''ll that you''ll use throughout this book. Since you are ready, hit the Review
    + create button to do a final review and create your cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The final view of all the configurations under the Basics tab](img/B17338_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.6: Setting the cluster configuration'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the final view, Azure will validate the configuration that was applied to
    your first cluster. If you get the message Validation passed, click Create:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Reviewing all the cluster configurations under the Review + create tab](img/B17338_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.7: The final validation of your cluster configuration'
  prefs: []
  type: TYPE_NORMAL
- en: 'Deploying the cluster should take roughly 10 minutes. Once the deployment is
    complete, you can check the deployment details as shown in *Figure 2.8*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![An overview of the deployment details once the cluster is successfully deployed](img/B17338_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.8: Deployment details once the cluster is successfully deployed'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you get a quota limitation error, as shown in *Figure 2.9*, check the settings
    and try again. Make sure that you select the Standard DS2_v2 node size and only
    two nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Redeploying the cluster with a smaller cluster size due to the quota limit
    error](img/B17338_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.9: Retrying with a smaller cluster size due to a quota limit error'
  prefs: []
  type: TYPE_NORMAL
- en: Moving to the next section, we'll take a quick first look at your cluster; hit
    the Go to resource button as seen in *Figure 2.8.* This will take you to the AKS
    cluster dashboard in the portal.
  prefs: []
  type: TYPE_NORMAL
- en: A quick overview of your cluster in the Azure portal
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you hit the Go to resource button in the previous section, you will see
    the overview of your cluster in the Azure portal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![An overview of the AKS pane in the Azure portal](img/B17338_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.10: The AKS pane in the Azure portal'
  prefs: []
  type: TYPE_NORMAL
- en: This is a quick overview of your cluster. It displays the name, the location,
    and the API server address. The navigation menu on the left provides different
    options to control and manage your cluster. Let's walk through a couple of interesting
    options that the has to portal offer.
  prefs: []
  type: TYPE_NORMAL
- en: The Kubernetes resources section gives you an insight into the workloads that
    are running on your cluster. You could, for instance, see running deployments
    and running pods in your cluster. It also allows you to create new resources on
    your cluster. We will use this section later in the chapter after you have deployed
    your first application on AKS.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Node pools pane, you can scale your existing node pool (meaning the
    nodes or servers in your cluster) either up or down by adding or removing nodes.
    You can add a new node pool, potentially with a different virtual machine size,
    and you can also upgrade your node pools individually. In *Figure 2.11*, you can
    see the + Add node pool option at the top-left corner, and if you select your
    node pool, the Upgrade and Scale options also become available in the top bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding, scaling, and upgrading node pools in the Node pools pane](img/B17338_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.11: Adding, scaling, and upgrading node pools'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Cluster configuration pane, you can instruct AKS to upgrade the control
    plane to a newer version. Typically, in a Kubernetes upgrade, you first upgrade
    the control plane, and then the individual node pools separately. This pane also
    allows you to enable **role-based access control** (**RBAC**) (which is enabled
    by default), and optionally integrate your cluster with Azure AD. You will learn
    more about Azure AD integration in *Chapter 8, Role-based access control in AKS*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Upgrading the Kubernetes version of the API server using the Upgrade pane](img/B17338_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.12: Upgrading the Kubernetes version of the API server using the Upgrade
    pane'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the Insights pane allows you to monitor your cluster infrastructure
    and the workloads running on your cluster. Since your cluster is brand new, there
    isn''t a lot of data to investigate. We will return back to this, in *Chapter
    7*, *Monitoring the AKS cluster and the application*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Monitoring cluster utilization using the Insights pane](img/B17338_02_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.13: Displaying cluster utilization using the Insights pane'
  prefs: []
  type: TYPE_NORMAL
- en: This concludes our quick overview of the cluster and some of the interesting
    configuration options in the Azure portal. In the next section, we'll connect
    to our AKS cluster using Cloud Shell and then launch a demo application on top
    of this cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing your cluster using Azure Cloud Shell
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once the deployment is completed successfully, find the small Cloud Shell icon
    near the search bar, as highlighted in *Figure 2.14*, and click it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Clicking the Cloud Shell icon to open Azure Cloud Shell](img/B17338_02_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.14: Clicking the Cloud Shell icon to open Azure Cloud Shell'
  prefs: []
  type: TYPE_NORMAL
- en: 'The portal will ask you to select either PowerShell or Bash as your default
    shell experience. As we will be working mainly with Linux workloads, please select Bash:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Selecting Bash as the default code editor](img/B17338_02_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.15: Selecting the Bash option'
  prefs: []
  type: TYPE_NORMAL
- en: 'If this is the first time you have launched Cloud Shell, you will be asked
    to create a storage account; confirm and create it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a new storage account for Cloud Shell](img/B17338_02_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.16: Creating a new storage account for Cloud Shell'
  prefs: []
  type: TYPE_NORMAL
- en: 'After creating the storage, you might get an error message that contains a
    mount storage error. If that occurs, please restart your Cloud Shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hitting the restart button upon potentially receiving a mount storage error
    ](img/B17338_02_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.17: Hitting the restart button upon receiving a mount storage error'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the power button. It should restart, and you should see something
    similar to *Figure 2.18*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Showing a user logged into Cloud Shell](img/B17338_02_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.18: Launching Cloud Shell successfully'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can pull the splitter/divider up or down to see more or less of the shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the divider to resize the Cloud Shell window](img/B17338_02_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.19: Using the divider to make Cloud Shell larger or smaller'
  prefs: []
  type: TYPE_NORMAL
- en: The command-line tool that is used to interface with Kubernetes clusters is
    called `kubectl`. The benefit of using Azure Cloud Shell is that this tool, along
    with many others, comes preinstalled and is regularly maintained. `kubectl` uses
    a configuration file stored in `~/.kube/config` to store credentials to access
    your cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There is some discussion in the Kubernetes community around the correct pronunciation
    of `kubectl`. The common way to pronounce it is either *kube-c-t-l*, *kube-control*,
    or *kube-cuddle*.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get the required credentials to access your cluster, you need to type the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this book, you will commonly see longer commands spread over multiple lines
    using the backslash symbol. This helps improve the readability of the commands,
    while still allowing you to copy and paste them. If you are typing these commands,
    you can safely ignore the backslash and type the full command in a single line.
  prefs: []
  type: TYPE_NORMAL
- en: 'To verify that you have access, type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see something like *Figure 2.20*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Output of the kubectl get nodes command](img/B17338_02_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.20: Output of the kubectl get nodes command'
  prefs: []
  type: TYPE_NORMAL
- en: This command has verified that you can connect to your AKS cluster. In the next
    section, you'll go ahead and launch your first application.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying and inspecting your first demo application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As you are all connected, let's launch your very first application. In this
    section, you will deploy your first application and inspect it using `kubectl`
    and later using the Azure portal. Let's start by deploying the application.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying the demo application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this section, you will deploy your demo application. For this, you will have
    to write a bit of code. In Cloud Shell, there are two options to edit code. You
    can do this either via command-line tools such as `vi` or `nano` or you can use
    a GUI-based code editor by typing the `code` commands in Cloud Shell. Throughout
    this book, you will mainly be instructed to use the graphical editor in the examples,
    but feel free to use any other tool you feel most comfortable with.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the purpose of this book, all the code examples are hosted in a GitHub
    repository. You can clone this repository to your Cloud Shell and work with the
    code examples directly. To clone the GitHub repo into your Cloud Shell, use the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To access the code examples for this chapter, navigate into the directory of
    the code examples and go to the `Chapter02` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: You will use the code directly in the `Chapter02` folder for now. At this point
    in the book, you will not focus on what is in the code files just yet. The goal
    of this chapter is to launch a cluster and deploy an application on top of it.
    In the following chapters, we will dive into how Kubernetes configuration files
    are built and how you can create your own.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will create an application based on the definition in the `azure-vote.yaml` file.
    To open that file in Cloud Shell, you can type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the code example for your convenience:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You can make changes to files in the Cloud Shell code editor. If you''ve made
    changes, you can save them by clicking on the ... icon in the upper-right corner,
    and then click Save to save the file as highlighted in *Figure 2.21*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Saving changes in the Cloud Shell code editor](img/B17338_02_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.21: Save the azure-vote.yaml file'
  prefs: []
  type: TYPE_NORMAL
- en: 'The file should be saved. You can check this with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Note:'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Hitting the *Tab* button expands the file name in Linux. In the preceding scenario,
    if you hit *Tab* after typing `az`, it should expand to `azure-vote.yaml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s launch the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You should quickly see the output as shown in *Figure 2.22*, it tells you which
    resources have been created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Output of the kubectl create command](img/B17338_02_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.22: Output of the kubectl create command'
  prefs: []
  type: TYPE_NORMAL
- en: You have successfully created your demo application. In the next section, you
    will inspect all the different objects Kubernetes created for this application
    and connect to your application.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the demo application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the previous section, you deployed a demo application. In this section, you
    will explore the different objects that Kubernetes created for this application
    and connect to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can check the progress of the deployment by typing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If you typed this soon after creating the application, you might have seen
    that a certain pod was still in the `ContainerCreating` process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Output of the kubectl get pods command](img/B17338_02_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.23: Output of the kubectl get pods command'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Typing `kubectl` can become tedious. You can use the `alias` command to make
    your life easier. You can use `k` instead of `kubectl` as the alias with the following
    command: `alias k=kubectl`. After running the preceding command, you can just
    use `k get pods`. For instructional purposes in this book, we will continue to
    use the full `kubectl` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hit the *up arrow* key and press *Enter* to repeat the `kubectl get pods` command
    until the status of all pods is `Running`. Setting up all the pods takes some
    time, and you could optionally follow their status using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: To stop following the status of the pods (when they are all in a running state),
    you can press *Ctrl* + *C*.
  prefs: []
  type: TYPE_NORMAL
- en: In order to access your application publicly, you need one more thing. You need
    to know the public IP of the load balancer so that you can access it. If you remember
    from *Chapter 1*, *Introduction to containers and Kubernetes*, a service in Kubernetes
    will create an Azure load balancer. This load balancer will get a public IP in
    your application so you can access it publicly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type the following command to get the public IP of the load balancer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'At first, the external IP might show `pending`. Wait for the public IP to appear
    and then press *Ctrl* + *C* to exit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Watching the service IP change from pending to the actual IP address](img/B17338_02_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.24: Watching the service IP change from pending to the actual IP address'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note the external IP address and type it in a browser. You should see an output
    similar to *Figure 2.25*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Output of the application you just launched as seen in the browser](img/B17338_02_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.25: The actual application you just launched'
  prefs: []
  type: TYPE_NORMAL
- en: Click on Cats or Dogs and watch the count go up.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see all the objects in Kubernetes that were created for your application,
    you can use the `kubectl get all` command. This will show an output similar to
    *Figure 2.26*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Viewing all the objects by executing the kubectl get all command](img/B17338_02_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.26: Exploring all the Kubernetes objects created for your application'
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, a number of objects were created:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Pods: You will see two pods, one for the back end and one for the front end.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Services: You will also see two services, one for the back end of type `ClusterIP`
    and one for the front end of type LoadBalancer. What these types mean will be
    explored in *Chapter 3*, *Application deployment on AKS.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Deployments: You will also see two deployments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ReplicaSets: And finally you''ll see two ReplicaSets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can also view these objects from the Azure portal. To see, for example,
    the two deployments, you can click on **Workloads** in the left-hand navigation
    menu of the AKS pane, and you will see all the deployments in your cluster as
    shown in *Figure 2.27*. This figure shows you all the deployments in your cluster,
    including the system deployments. At the bottom of the list, you can see your
    own deployments. As you can also see in this figure, you can explore other objects
    such as pods and ReplicaSets using the top menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Viewing all the deployments in our cluster using the Azure portal](img/B17338_02_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.27: Exploring the two deployments part of your application in the
    Azure portal'
  prefs: []
  type: TYPE_NORMAL
- en: You have now launched your own cluster and your first Kubernetes application.
    Note that Kubernetes took care of tasks such as connecting the front end and the
    back end, and exposing them to the outside world, as well as providing storage
    for the services.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before moving on to the next chapter, let''s clean up your deployment. Since
    you created everything from a file, you can also delete everything by pointing
    Kubernetes to that file. Type `kubectl delete -f azure-vote.yaml` and watch all
    your objects get deleted:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deleting all the objects by running the kubectl delete command](img/B17338_02_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.28: Cleaning up the application'
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you have connected to your AKS cluster using Cloud Shell, successfully
    launched and connected to a demo application, explored the objects created using
    Cloud Shell and the Azure portal, and finally, cleaned up the resources that were
    created.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Having completed this chapter, you will now be able to access and navigate the
    Azure portal to perform all the functions required to deploy an AKS cluster. We
    used the free trial on Azure to our advantage to learn the ins and outs of AKS.
    We also launched our own AKS cluster with the ability to customize configurations
    if required using the Azure portal.
  prefs: []
  type: TYPE_NORMAL
- en: We also used Cloud Shell without installing anything on the computer. This is
    important for all the upcoming sections, where you will be doing more than just
    launching simple applications. Finally, we launched a publicly accessible service.
    The skeleton of this application is the same as for complex applications that
    we will cover in the later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will take an in-depth look at different deployment options
    to deploy applications onto AKS.
  prefs: []
  type: TYPE_NORMAL

["```\nkubectl apply -f k8s-operator-example/deploy/crd.yaml\n```", "```\napiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n      name: weatherreports.k8s.packt.com\nspec:\n      group: k8s.packt.com\n      names:\n            kind: WeatherReport\n            listKind: WeatherReportList\n             plural: weatherreports\n             singular: weatherreport\nscope: Namespaced\nversion: v1\n\n```", "```\n kubectl get crd\n```", "```\nkubectl proxy &\ncurl -s localhost:8001 |grep packt \n```", "```\nkubectl get weatherreports\n```", "```\napiVersion: \"k8s.packt.com/v1\"\nkind: WeatherReport\nmetadata:\n      name: amsterdam-daily\nspec:\n     city: Amsterdam\n     days: 1\n\n```", "```\n kubectl apply -f k8s-operator-example/deploy/cr.yaml\n\n```", "```\nkubectl get weatherreports\n```", "```\nkubectl delete -f k8s-operator-example/deploy/cr.yaml\nkubectl delete -f k8s-operator-example/deploy/crd.yaml\n\n```", "```\noperator-sdk new k8s-operator-example --api-version=k8s.\npackt.com/v1 --kind=WeatherReport\n\n```", "```\ntype WeatherReport struct {\n               metav1.TypeMeta 'json:\",inline\"'\n               metav1.ObjectMeta 'json:\"metadata\"'\n               Spec WeatherReportSpec\n'json:\"spec\"'\n               Status WeatherReportStatus\n'json:\"status,omitempty\"'\n}\ntype WeatherReportSpec struct {\n               City string 'json:\"city\"'\n               Days int 'json:\"days\"'\n}\n\n```", "```\nfunc (h *Handler) Handle(ctx types.Context, event types.Event) error {\n   switch o := event.Object.(type) {\n        case *apiv1.WeatherReport:\n           if o.Status.State == \"\" {\n               weatherPod := weatherReportPod(o)\n               err := action.Create(weatherPod)\n               if err != nil && !errors.IsAlreadyExists(err) {\n                   logrus.Errorf(\"Failed to create weather report pod : %v\", err)\n```", "```\noperator-sdk build <DOCKER_IMAGE:DOCKER_TAG>\n```", "```\nkubectl create -f deploy/crd.yaml\nkubectl create -f deploy/operator.yaml\n\n```", "```\nkubectl logs -l name=k8s-operator-example\n```", "```\nkubectl create -f deploy/cr.yaml\n```", "```\n kubectl describe weatherreport amsterdam-daily\n\n```", "```\nkubectl get pods\n```", "```\nkubectl logs $(kubectl get weatherreport amsterdam-daily -o jsonpath={.status.pod})\n\n```", "```\nkubectl delete -f deploy/cr.yaml\nkubectl delete -f deploy/operator.yaml\nkubectl delete -f deploy/crd.yaml\n\n```", "```\nkubernetes.io/hostname\nfailure-domain.beta.kubernetes.io/zone\nfailure-domain.beta.kubernetes.io/region\nbeta.kubernetes.io/instance-type\nbeta.kubernetes.io/os\nbeta.kubernetes.io/arch \n```", "```\n$ kubectl get nodes --show-labels\nNAME STATUS ROLES AGE VERSION LABELS\nminikube Ready master 9m v1.10.0 beta.\nkubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.\nio/hostname=minikube, node-role.kubernetes.io/master=\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx\nspec:\n  containers:\n  - name: nginx\n    image: nginx\nnodeSelector:\n beta.kubernetes.io/arch: amd64\n```", "```\napiVersion: v1\n...\n   requiredDuringSchedulingIgnoredDuringExecution:\n...\nspec:\n  affinity:\n        - key: kubernetes.io/arch\n          operator: In\n          values:\n          - ppc64_le\npreferredDuringSchedulingIgnoredDuringExecution:\n- weight: 1\npreference:\nmatchExpressions:\n- key: failure-domain.beta.kubernetes.io/zone\n  operator: In\n  values:\n  - availability-zone-a\n\n```", "```\napiVersion: v1\n...\n    podAffinity:\n requiredDuringSchedulingIgnoredDuringExecution:\n...\nspec:\n  affinity:\n         - key: service\n           operator: In\n           values:\n          - backend\n        topologyKey: failure-domain.beta.kubernetes.io/zone podAntiAffinity:\n        preferredDuringSchedulingIgnoredDuringExecution:\n          - key: service\n            operator: In\n            values:\n           - backend\n          topologyKey: kubernetes.io/hostname\n```", "```\nkubectl taint nodes nodeA key=value:NoSchedule\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: with-pod-toleration\nspec:\n  tolerations:\n  - key: \"key\"\n    operator: \"Equal\"\n    value: \"value\"\n    effect: \"NoSchedule\"\ncontainers:\n- name: with-pod-toleration\n  image: k8s.gcr.io/pause:2.0\n```", "```\n for {\n     // Request pods from all namespaces\n     pods, err := clientset.CoreV1().Pods(v1.NamespaceAll).List(metav1.ListOptions{})\n  ...\n     // Check for pods\nfor _, pod := range pods.Items {\n    // If scheduler name is set and node is not assigned\n    if pod.Spec.SchedulerName == *schedulerName && pod.Spec.\n    NodeName == \"\" {\n      // Schedule the pod to a random node\n      err := schedule(pod.Name, randomNode(), pod.Namespace)\n      ...\n    }\n  }\n     ...\n} \n```", "```\nfunc schedule(pod, node, namespace string) error {\n   fmt.Printf(\"Assigning %s/%s to %s\\n\", namespace, pod, node)\n   // Create a binding with pod and node\n   binding := v1.Binding{\n      ObjectMeta: metav1.ObjectMeta{\n         Name: pod,\n      },\n      Target: v1.ObjectReference{\n         Kind: \"Node\",\n         APIVersion: \"v1\",\n         Name: node,\n      }}\nreturn clientset.CoreV1().Pods(namespace).Bind(&binding)\n}\n```", "```\nkubectl apply -f k8s-scheduler-example/deploy/pod.yaml\n```", "```\nkubectl get pods \n```", "```\nkubectl apply -f k8s-scheduler-example/deploy/scheduler.yaml \n```", "```\nkubectl get pods\n\n```", "```\n kubectl logs scheduler\n\n```", "```\nkubectl delete -f k8s-scheduler-example/deploy/pod.yaml\nkubectl delete -f k8s-scheduler-example/deploy/scheduler.yaml\n\n```"]
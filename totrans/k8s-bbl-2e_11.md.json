["```\n$ kubectl create deployment my-deployment --replicas=1 --image=my-image:latest --dry-run=client --port=80 -o yaml \n```", "```\n$ kubectl create deployment my-deployment --replicas=1 --image=my-image:latest --dry-run=client --port=80 -o yaml >my-deployment.yaml \n```", "```\n# nginx-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment-example\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n      environment: test\n  minReadySeconds: 10\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxUnavailable: 1\n      maxSurge: 1\n  template:\n    metadata:\n      labels:\n        app: nginx\n        environment: test\n    spec:\n      containers:\n        - name: nginx\n          image: nginx:1.17\n          ports:\n            - containerPort: 80 \n```", "```\n$ kubectl apply -f ./nginx-deployment.yaml \n```", "```\n$ kubectl annotate deployment/ nginx-deployment-example kubernetes.io/change-cause='Updated image to 1.2.3' \n```", "```\n$ kubectl rollout status deployment nginx-deployment-example\nWaiting for deployment \"nginx-deployment-example\" rollout to finish: 0 of 3 updated replicas are available...\ndeployment \"nginx-deployment-example\" successfully rolled out \n```", "```\n$ kubectl get deploy nginx-deployment-example\nNAME                       READY   UP-TO-DATE   AVAILABLE   AGE\nnginx-deployment-example   3/3     3            3           6m21s \n```", "```\n$ kubectl get rs\nNAME                                  DESIRED   CURRENT   READY   AGE\nnginx-deployment-example-5b8dc6b8cd   3         3         3       2m17s \n```", "```\n$ kubectl get pods\nNAME                                        READY   STATUS    RESTARTS   AGE\nnginx-deployment-example-5b8dc6b8cd-lj2bz   1/1     Running   0          3m30s\nnginx-deployment-example-5b8dc6b8cd-nxkbj   1/1     Running   0          3m30s\nnginx-deployment-example-5b8dc6b8cd-shzmd   1/1     Running   0          3m30s \n```", "```\n    # nginx-service.yaml\n    apiVersion: v1\n    kind: Service\n    metadata:\n      name: nginx-service-example\n    spec:\n      selector:\n        app: nginx\n        environment: test\n      type: LoadBalancer\n      ports:\n        - port: 80\n          protocol: TCP\n          targetPort: 80 \n    ```", "```\n    $  kubectl apply -f nginx-service.yaml\n    service/nginx-service-example created\n    $ kubectl describe service nginx-service-example\n    Name:                     nginx-service-example\n    Namespace:                default\n    Labels:                   <none>\n    Annotations:              <none>\n    Selector:                 app=nginx,environment=test\n    ...<removed for brevity>...\n    Endpoints:                10.244.1.2:80,10.244.2.2:80,10.244.2.3:80\n    Session Affinity:         None\n    External Traffic Policy:  Cluster\n    Events:                   <none> \n    ```", "```\n    $ kubectl apply -f ../Chapter07/k8sutils.yaml\n    pod/k8sutils created\n    $ kubectl exec -it k8sutils -- curl nginx-service-example.default.svc.cluster.local |grep Welcome -A2\n    <title>Welcome to nginx!</title>\n    <style>\n        body {\n    --\n      <h1>Welcome to nginx!</h1>\n    <p>If you see this page, the nginx web server is successfully installed and\n    working. Further configuration is required.</p> \n    ```", "```\n$ kubectl expose deployment --type=LoadBalancer nginx-deployment-example\nservice/nginx-deployment-example exposed \n```", "```\n    $ kubectl delete deployment nginx-deployment-example \n    ```", "```\n    # nginx-deployment-readinessprobe.yaml\n    apiVersion: apps/v1\n    kind: Deployment\n    metadata:\n      name: nginx-deployment-readiness\n    spec:\n      replicas: 3\n      selector:\n        matchLabels:\n          app: nginx\n          environment: test\n      minReadySeconds: 10\n      strategy:\n        type: RollingUpdate\n        rollingUpdate:\n          maxUnavailable: 1\n          maxSurge: 1\n    ... \n    ```", "```\n# nginx-deployment-readinessprobe.yaml\n...<continues>...\n  template:\n    metadata:\n      labels:\n        app: nginx\n        environment: test\n    spec:\n      containers:\n        - name: nginx\n          image: nginx:1.25.4\n          ports:\n            - containerPort: 80\n          command:\n            - /bin/sh\n            - -c\n            - |\n              touch /usr/share/nginx/html/ready\n              echo \"You have been served by Pod with IP address: $(hostname -i)\" > /usr/share/nginx/html/index.html\n              nginx -g \"daemon off;\"\n          readinessProbe:\n            httpGet:\n              path: /ready\n              port: 80\n            initialDelaySeconds: 5\n            periodSeconds: 2\n            timeoutSeconds: 10\n            successThreshold: 1\n            failureThreshold: 2 \n```", "```\n    $ kubectl apply -f ./nginx-deployment-readinessprobe.yaml \n    ```", "```\n    $  kubectl describe svc nginx-service-example\n    Name:                     nginx-service-example\n    Namespace:                default\n    Labels:                   <none>\n    Annotations:              <none>\n    Selector:                 app=nginx,environment=test\n    Type:                     LoadBalancer\n    IP Family Policy:         SingleStack\n    IP Families:              IPv4\n    IP:                       10.96.231.126\n    IPs:                      10.96.231.126\n    Port:                     <unset>  80/TCP\n    TargetPort:               80/TCP\n    NodePort:                 <unset>  32563/TCP\n    Endpoints:                10.244.1.6:80,10.244.1.7:80,10.244.2.6:80\n    Session Affinity:         None\n    External Traffic Policy:  Cluster\n    Events:                   <none> \n    ```", "```\n    $ kubectl exec -it k8sutils -- curl nginx-service-example.default.svc.cluster.local\n    You have been served by Pod with IP address: 10.244.1.7\n    Chapter07  $  kubectl exec -it k8sutils -- curl nginx-service-example.default.svc.cluster.local\n    You have been served by Pod with IP address: 10.244.2.6 \n    ```", "```\n    $ kubectl exec -it nginx-deployment-readiness-69dd4cfdd9-4pkwr -- rm /usr/share/nginx/html/ready \n    ```", "```\n    $  kubectl describe svc nginx-service-example |grep Endpoint\n    Endpoints:                10.244.1.6:80,10.244.2.6:80 \n    ```", "```\n    $  kubectl describe pod nginx-deployment-readiness-69dd4cfdd9-4pkwr\n    Name:             nginx-deployment-readiness-69dd4cfdd9-4pkwr\n    ...<removed for brevity>...\n      Normal   Started    21m                  kubelet            Started container nginx\n      Warning  Unhealthy  72s (x25 over 118s)  kubelet            Readiness probe failed: HTTP probe failed with statuscode: 404 \n    ```", "```\n$ kubectl exec -it nginx-deployment-readiness-69dd4cfdd9-7n2kz -- rm /usr/share/nginx/html/ready\n$ kubectl exec -it nginx-deployment-readiness-69dd4cfdd9-t7rp2 -- rm /usr/share/nginx/html/ready\nYou can see, the Pods are Running but none of them are Ready to serve the webservice due to readinessProbe failure.\n$ kubectl get po -w\nNAME                                          READY   STATUS    RESTARTS   AGE\nk8sutils                                      1/1     Running   0          166m\nnginx-deployment-readiness-69dd4cfdd9-4pkwr   0/1     Running   0          25m\nnginx-deployment-readiness-69dd4cfdd9-7n2kz   0/1     Running   0          25m\nnginx-deployment-readiness-69dd4cfdd9-t7rp2   0/1     Running   0          25m \n```", "```\n$ kubectl exec -it k8sutils -- curl nginx-service-example.default.svc.cluster.local\ncurl: (7) Failed to connect to nginx-service-example.default.svc.cluster.local port 80 after 5 ms: Couldn't connect to server\ncommand terminated with exit code 7 \n```", "```\n    $ kubectl exec -it nginx-deployment-readiness-69dd4cfdd9-4pkwr -- touch /usr/share/nginx/html/ready\n    After about 2 seconds (this is the probe interval), the pending request in the web browser should succeed and you will be presented with a nice response from nginx:\n    $  kubectl exec -it k8sutils -- curl nginx-service-example.default.svc.cluster.local\n    You have been served by Pod with IP address: 10.244.1.7 \n    ```", "```\n    apiVersion: apps/v1\n    kind: Deployment\n    metadata:\n      name: nginx-deployment-readiness\n    spec:\n      replicas: 10\n    ... \n    ```", "```\n    $ kubectl apply -f ./nginx-deployment-readinessprobe.yaml\n    deployment.apps/nginx-deployment-readiness configured \n    ```", "```\n    $ kubectl describe deployments.apps nginx-deployment-readiness\n    Name:                   nginx-deployment-readiness\n    ...<removed fro brevity>...\n    Events:\n      Type    Reason             Age   From                   Message\n      ----    ------             ----  ----                   -------\n      Normal  ScalingReplicaSet  32m   deployment-controller  Scaled up replica set nginx-deployment-readiness-69dd4cfdd9 to 3\n      Normal  ScalingReplicaSet  9s    deployment-controller  Scaled up replica set nginx-deployment-readiness-69dd4cfdd9 to 10 from 3 \n    ```", "```\n$ kubectl scale deploy nginx-deployment-readiness --replicas=10\ndeployment.apps/nginx-deployment-readiness scaled \n```", "```\n    apiVersion: apps/v1\n    kind: Deployment\n    metadata:\n      name: nginx-deployment-readiness\n    spec:\n      replicas: 2\n    ... \n    ```", "```\n    $ kubectl apply -f ./nginx-deployment-readinessprobe.yaml \n    ```", "```\n    $ kubectl scale deploy nginx-deployment-readiness --replicas=2 \n    ```", "```\n$ kubectl describe deploy nginx-deployment-readiness\n...\nEvents:\n  Type    Reason             Age    From                   Message\n  ----    ------             ----   ----                   -------\nNormal  ScalingReplicaSet  27s    deployment-controller  Scaled down replica set nginx-deployment-readiness-69dd4cfdd9 to 2 from 10 \n```", "```\n$ kubectl delete deploy nginx-deployment-readiness \n```", "```\n$ kubectl delete deploy nginx-deployment-readiness --cascade=orphan \n```", "```\n    $ cp nginx-deployment-readinessprobe.yaml nginx-deployment-rollingupdate.yaml \n    ```", "```\n    # nginx-deployment-rollingupdate.yaml\n    apiVersion: apps/v1\n    kind: Deployment\n    metadata:\n      name: nginx-deployment-rollingupdate\n    spec:\n      replicas: 3\n    ...\n      minReadySeconds: 10\n      strategy:\n        type: RollingUpdate\n        rollingUpdate:\n          maxUnavailable: 1\n          maxSurge: 1\n      template:\n    ...\n        spec:\n          containers:\n            - name: nginx\n              image: nginx:1.17\n    ...\n              readinessProbe:\n                httpGet:\n    ... \n    ```", "```\n    $ kubectl apply -f nginx-deployment-rollingupdate.yaml\n    deployment.apps/nginx-deployment-rollingupdate created\n    $ kubectl get pod\n    NAME                                              READY   STATUS    RESTARTS   AGE\n    nginx-deployment-rollingupdate-69d855cf4b-nshn2   1/1     Running   0          24s\n    nginx-deployment-rollingupdate-69d855cf4b-pqvjh   1/1     Running   0          24s\n    nginx-deployment-rollingupdate-69d855cf4b-tdxzl   1/1     Running   0          24s \n    ```", "```\n    ...\n      template:\n        metadata:\n          labels:\n            app: nginx\n            environment: test\n        spec:\n          containers:\n            - name: nginx\n              **image:****nginx:1.18**\n    ... \n    ```", "```\n    $  kubectl apply -f nginx-deployment-rollingupdate.yaml\n    deployment.apps/nginx-deployment-rollingupdate configured \n    ```", "```\n    $ kubectl rollout status deployment.apps/nginx-deployment-rollingupdate\n    deployment \"nginx-deployment-rollingupdate\" successfully rolled out \n    ```", "```\n    $ kubectl describe deploy nginx-deployment-rollingupdate\n    Name:                   nginx-deployment-rollingupdate\n    ...<removed for brevity>...\n    Events:\n      Type    Reason             Age    From                   Message\n      ----    ------             ----   ----                   -------\n      Normal  ScalingReplicaSet  8m21s  deployment-controller  Scaled up replica set nginx-deployment-rollingupdate-69d855cf4b to 3\n      Normal  ScalingReplicaSet  2m51s  deployment-controller  Scaled up replica set nginx-deployment-rollingupdate-5479f5d87f to 1\n      Normal  ScalingReplicaSet  2m51s  deployment-controller  Scaled down replica set nginx-deployment-rollingupdate-69d855cf4b to 2 from 3\n      Normal  ScalingReplicaSet  2m51s  deployment-controller  Scaled up replica set nginx-deployment-rollingupdate-5479f5d87f to 2 from 1\n      Normal  ScalingReplicaSet  2m24s  deployment-controller  Scaled down replica set nginx-deployment-rollingupdate-69d855cf4b to 1 from 2\n      Normal  ScalingReplicaSet  2m24s  deployment-controller  Scaled up replica set nginx-deployment-rollingupdate-5479f5d87f to 3 from 2\n      Normal  ScalingReplicaSet  2m14s  deployment-controller  Scaled down replica set nginx-deployment-rollingupdate-69d855cf4b to 0 from 1 \n    ```", "```\n    $ kubectl get rs\n    NAME                                        DESIRED   CURRENT   READY   AGE\n    nginx-deployment-rollingupdate-5479f5d87f   3         3         3       4m22s\n    nginx-deployment-rollingupdate-69d855cf4b   0         0         0       9m52s \n    ```", "```\n    $ kubectl get po\n    NAME                                              READY   STATUS    RESTARTS   AGE\n    nginx-deployment-rollingupdate-5479f5d87f-2k7d6   1/1     Running   0          5m41s\n    nginx-deployment-rollingupdate-5479f5d87f-6gn9m   1/1     Running   0          5m14s\n    nginx-deployment-rollingupdate-5479f5d87f-mft6b   1/1     Running   0          5m41s\n    $ kubectl describe pod nginx-deployment-rollingupdate-5479f5d87f-2k7d6|grep 'Image:'\n        Image:         nginx:1.1 \n    ```", "```\n    $ kubectl set image deployment nginx-deployment-rollingupdate nginx=nginx:1.19\n    deployment.apps/nginx-deployment-rollingupdate image updated \n    ```", "```\n    $ kubectl rollout status deployment.apps/nginx-deployment-rollingupdate\n    deployment \"nginx-deployment-rollingupdate\" successfully rolled out \n    ```", "```\n    $ kubectl rollout history deployment.apps/nginx-deployment-rollingupdate\n    deployment.apps/nginx-deployment-rollingupdate\n    REVISION  CHANGE-CAUSE\n    1         <none>\n    2         <none>\n    3         <none> \n    ```", "```\n    $ kubectl rollout history deploy nginx-deployment-rollingupdate --revision=2\n    deployment.apps/nginx-deployment-rollingupdate with revision #2\n    Pod Template:\n    ...<removed for brevity>...\n      Containers:\n       nginx:\n        Image:      nginx:1.18\n    ...<removed for brevity>... \n    ```", "```\n    $ kubectl rollout undo deploy nginx-deployment-rollingupdate\n    deployment.apps/nginx-deployment-rollingupdate rolled back \n    ```", "```\n    $ kubectl rollout undo deploy nginx-deployment-rollingupdate --to-revision=2 \n    ```", "```\n    $ kubectl rollout status deploy nginx-deployment-rollingupdate\n    $ kubectl rollout history deployment.apps/nginx-deployment-rollingupdate\n    deployment.apps/nginx-deployment-rollingupdate\n    REVISION  CHANGE-CAUSE\n    1         <none>\n    3         <none>\n    4         <none> \n    ```", "```\n# Stable app\n  ...\n  name: frontend-stable\n  replicas: 3\n  ...\n  labels:\n    app: myapp\n    tier: frontend\n    version: stable\n  ...\n  image: frontend-app:1.0 \n```", "```\n# Canary version\n  ...\n  name: frontend-canary\n  replicas: 1\n  ...\n  labels:\n    app: myapp\n    tier: frontend\n    version: canary\n  ...\n  image: frontend-app:2.0 \n```", "```\n# Service (routes traffic to both deployments)\napiVersion: v1\nkind: Service\nmetadata:\n  name: frontend-service\nspec:\n  selector:\n    app: myapp\n    tier: frontend\n  ports:\n  - protocol: TCP\n    port: 80\n    targetPort: 8080 \n```", "```\nerror: unable to recognize \"deployment\": no matches for kind \"Deployment\" in version \"extensions/v1beta1\" \n```"]
- en: '15'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kubernetes Clusters on Google Kubernetes Engine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will launch a Kubernetes cluster on **Google Cloud Platform**
    (**GCP**), the first of the three public cloud providers we will cover over the
    next few chapters.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have signed up for the Google Cloud Platform,
    launched a Kubernetes workload using **Google Kubernetes Engine** (**GKE**), and
    gained an understanding of GKE’s features.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be covering the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: What are Google Cloud Platform and Google Kubernetes Engine?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing your local environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Launching your first Google Kubernetes Engine cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying a workload and interacting with your cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More about cluster nodes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To follow along with this chapter, you will need a Google Cloud Platform account
    with a valid payment method attached.
  prefs: []
  type: TYPE_NORMAL
- en: Following the instructions in this chapter will incur a financial cost. It is,
    therefore, important that you terminate any resources you launch once you have
    finished using them. All prices quoted in this chapter are correct at the time
    of writing, and we recommend that you review the current costs before you launch
    any resources.
  prefs: []
  type: TYPE_NORMAL
- en: What are Google Cloud Platform and Google Kubernetes Engine?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we roll up our sleeves and look at signing up for a Google Cloud Platform
    account and installing the tools, we will need to launch our GKE-powered cluster.
    We should also discuss Google Kubernetes Engine and how it came to be.
  prefs: []
  type: TYPE_NORMAL
- en: Henceforth, I will refer to Google Cloud Platform as GCP and Google Kubernetes
    Engine as GKE in the body text of the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Google Cloud Platform
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Of the “**big three**” public cloud providers, GCP is the newest. In the following
    two chapters, we will examine **Amazon Web Services** (**AWS**) and **Microsoft
    Azure**.
  prefs: []
  type: TYPE_NORMAL
- en: Google’s foray into public cloud technology started differently from the other
    two providers. In April 2008, Google launched the public preview of its Google
    App Engine, which was the first component of its cloud offering. As a service,
    App Engine is still available at the time of writing, in mid-2024\. The service
    allows developers to deploy their applications in Google-managed runtimes, including
    PHP, Java, Ruby, Python, Node.js, and C#, along with Google’s programming language,
    Go, which was open sourced in 2009.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following service under the GCP banner arrived in May 2010: **Google Cloud
    Storage**, followed by **Google BigQuery** and a preview version of its Prediction
    API. A year later, in October 2011, **Google Cloud SQL** was launched. Then, in
    June 2012, the **Google Compute Engine** preview was launched.'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, four years had passed, and we then had what most would consider
    the core services that go into making a public cloud service.
  prefs: []
  type: TYPE_NORMAL
- en: However, most of the services were still in preview; it wouldn’t be until 2013
    that many of these core services would move out of preview and become **generally
    available** (**GA**). This meant that it was possible to safely run production
    workloads at scale and, more importantly, with a **Service-Level Agreement** (**SLA**),
    which is critical for both **small and medium-sized enterprises** (**SMEs**) and
    large enterprise companies in adopting the service. All of this was just a year
    before Google would launch Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: Toward the end of 2014, Google brought out the first alpha version of GKE.
  prefs: []
  type: TYPE_NORMAL
- en: Google Kubernetes Engine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Given that Kubernetes was developed at Google and Google had vast experience
    running container workloads at scale with the Borg project, it came as no surprise
    that Google was one of the first public cloud providers to offer its own Kubernetes
    offering in GKE.
  prefs: []
  type: TYPE_NORMAL
- en: After Kubernetes v1 came out and was then handed over to the **Cloud Native
    Computing Foundation** (**CNCF**) to maintain in July 2015, it was only a month
    later that the GKE service became GA.
  prefs: []
  type: TYPE_NORMAL
- en: The GKE service lets you launch and manage a CNCF-certified Kubernetes cluster,
    powered by GCP’s native compute, storage, and network services. It also allows
    deep integration with the platform’s monitoring, identity, and access management
    functionality.
  prefs: []
  type: TYPE_NORMAL
- en: We will look at the differences between the various Cloud-based Kubernetes offerings,
    and why you should use them, at the end of *Chapter 17*.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know a little bit of the history behind the service, we can sign
    up and install some of the management tools we will use to launch our cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing your local environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing we need to do is get you access to GCP. To do this, you must
    either sign up for an account or log in to your existing one. Let’s learn how.
  prefs: []
  type: TYPE_NORMAL
- en: 'To sign up for a GCP account, you will need to visit [https://cloud.google.com/](https://cloud.google.com/).
    Here, you should be greeted by a page that looks something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a web page'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B22019_15_01.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.1: The Google Cloud home page'
  prefs: []
  type: TYPE_NORMAL
- en: If you already use a Google service such as Gmail or YouTube or have an Android
    phone, you will possess a Google account. You can use this account to enroll,
    as shown in *Figure 15.1*. I am already logged in to my own Google account, as
    indicated by the avatar on the top-right-hand side of the screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the time of writing, Google offers $300 of credits for you to use over 90
    days. You must still enter a valid payment method to take advantage of the free
    credits. Google does this to ensure that it is not an automated bot signing up
    for the account, abusing the credits they offer. Once the credits have been used
    or expired, you will be given the option to upgrade your account to a paid account.
    For more details on this offer, see the following link: [https://cloud.google.com/free/docs/free-cloud-features](https://cloud.google.com/free/docs/free-cloud-features).'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to take advantage of the free credits, follow this link: [https://cloud.google.com/free/docs/free-cloud-features#try-it-for-yourself](https://cloud.google.com/free/docs/free-cloud-features#try-it-for-yourself).
    Click on **Get started for free**; if you qualify for the offer, follow the onscreen
    prompts, ensuring that you read the terms and conditions. Once you have enrolled,
    you will be taken to the GCP console. Alternatively, if you already have a GCP
    account, you can log in to the GCP console directly at [https://console.cloud.google.com/](https://console.cloud.google.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have an account, let’s learn how to create a project where we will
    launch our resources.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: GCP has a concept whereby resources are launched into projects. If you have
    just signed up for an account, then a “My First Project” project will have been
    created for you as part of the enrollment process.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using an existing account, I recommend creating a new project to
    launch your GKE cluster. To do this, click on the **Select** menu, which is located
    in the top bar just to the right of the GCP logo at the top left of the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'This will display all the projects you can access and allow you to create a
    new project. To do so, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on **NEW PROJECT**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will be asked to do the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give your new project a name.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Select an organization to attach the project to.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Select the location; this is either an organization or a folder to store the
    project in.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Once details from the previous step have been entered, click the **CREATE**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![A screenshot of a computer'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B22019_15_02.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.2: Creating a new project'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a place to launch our resources, we can look at installing
    the GCP command-line tool.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the GCP command-line interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here, we are going to cover the GCP **Command-Line Interface** (**CLI**) on
    your local machine. Don’t worry if you do not want to or are unable to install
    it, as there is a way to run the CLI in the cloud. But let’s start with my operating
    system of choice, macOS.
  prefs: []
  type: TYPE_NORMAL
- en: Installing on macOS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are like me and you do a lot of work on macOS using Terminal, there is
    a high likelihood that you have installed and used Homebrew at some point.
  prefs: []
  type: TYPE_NORMAL
- en: For the most up-to-date installation instructions for Homebrew, see the project’s
    website at [https://brew.sh/](https://brew.sh/).
  prefs: []
  type: TYPE_NORMAL
- en: 'With Homebrew installed, you will be able to install the GCP CLI using the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You can test the installation by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything goes as planned, you should see something like the following
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screen shot of a computer'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B22019_15_03.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.3: Checking the version number on macOS'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are having problems, you can check the documentation linked above; for
    information on the GCP CLI installation, see:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Once you have the GCP CLI installed and working, you can move on to the *Initialization*
    section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Installing on Windows
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are a few options for installing the GCP CLI on Windows. The first is
    to open a PowerShell session and run the following command to install it using
    Chocolatey.
  prefs: []
  type: TYPE_NORMAL
- en: Like Homebrew on macOS, Chocolatey is a package manager that lets you easily
    and consistently install a wide variety of packages on Windows via PowerShell,
    using the same command syntax rather than having to worry about the numerous installation
    methods that exist on Windows – see [https://chocolatey.org/](https://chocolatey.org/)
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you don’t have Chocolatey installed, then you can run the following command
    in a PowerShell session that has been launched with administrative privileges:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Once Chocolatey is installed, or if you already have it installed, run the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The other way to install it is to download the installer from the following
    URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dl.google.com/dl/cloudsdk/channels/rapid/GoogleCloudSDKInstaller.exe](https://dl.google.com/dl/cloudsdk/channels/rapid/GoogleCloudSDKInstaller.exe'
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: Once downloaded, run the executable by double-clicking on it and following the
    onscreen prompts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once installed, open a new PowerShell window and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If everything goes as planned, you should see something like the output shown
    in the screenshot from the macOS version in the previous section. Again, once
    installed and working, you can move on to the *Initialization* section of this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Installing on Linux
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While the Google Cloud CLI packages are available for most distributions, we
    would need a lot more space to cover the various package managers here, so instead,
    we will use the global installation script provided by Google.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run this, you need to use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The script will ask you several questions during the installation. For most
    people, answering `Yes` will be fine. Once the GCP CLI is installed, run the command
    below to reload your session so that it picks up all of the changes made by the
    installer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'As per the macOS and Windows installations, which we have covered in the previous
    sections, you can run the following command to find out details on the GCP CLI
    version that has been installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: You may have noticed from the three installations that, while the installation
    method differs, we use the same `gcloud` command once the package has been installed
    and get the same results. From here, it shouldn’t matter which operating system
    you are running, as the commands will apply to all three.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud Shell
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before we started installing the Google Cloud CLI, I did mention that there
    was a fourth option. That option is Google Cloud Shell, built into the Google
    Cloud console. To access this, click on the **Shell** icon, which can be found
    on the right of the top menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once configured, you should see what looks to be a web-based terminal from
    which you can run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The output differs slightly here, as Google has provided the full suite of
    supporting tools. However, you will notice from the following screen that the
    versions do match the ones we installed locally:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B22019_15_04.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.4: Using the GCP Cloud Shell'
  prefs: []
  type: TYPE_NORMAL
- en: If you are using Google Cloud Shell, you can skip the initialization step below,
    as this has already been done for you.
  prefs: []
  type: TYPE_NORMAL
- en: Initialization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you have chosen to install the client locally, you will need to take one
    final step to link it to your GCP account. To do this, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This will immediately run a quick network diagnostic to ensure that the client
    has the connectivity it needs to run. Once the diagnostic has passed, you will
    be prompted with the following question:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Answering `Y` will open a browser window. If it doesn’t, then copy and paste
    the provided URL into your browser where, once you have selected the account you
    wish to use, you will be presented with an overview of the permissions that the
    client requests, as seen in the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B22019_15_05.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.5: Reviewing the permissions'
  prefs: []
  type: TYPE_NORMAL
- en: If you are happy to grant the permissions, click the **Allow** button. Back
    on your terminal, you will get confirmation of the user you are logged in as.
    Then, you will be asked to pick a cloud project to use. The list will only contain
    the unique ID of the project, not the friendly name that you saw or set up in
    Google Cloud Console earlier. If you have more than one project, please pick the
    correct one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Should you need to update the project that the client uses at any point, you
    can run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Make sure you replace `PROJECT_ID` with the unique ID of the project you wish
    to switch to.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have installed the Google Cloud CLI and have configured your account,
    you are ready to launch your GKE cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Launching your first Google Kubernetes Engine cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the cluster will take a few minutes to deploy fully, let’s run the command
    to initiate the process and then discuss in more detail what happens while it
    launches.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we launch our cluster, we must ensure that the `container.googleapis.com`
    service is enabled. To do this, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We then need to install a plugin that will allow us to authenticate against
    the cluster using `kubectl`; to do this, run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the service and plugin have been enabled, the command to launch a two-node
    cluster called `myfirstgkecluster`, which will be hosted in a single zone in the
    Central US region, is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'After about five minutes, you should see something that looks like the following
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A computer screen shot of a computer program'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B22019_15_06.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.6: Launching the cluster'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the cluster has launched, you should be able to follow the URL in the
    output and view it in Google Cloud Console, as seen below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B22019_15_07.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.7: Viewing the cluster in Google Cloud Console'
  prefs: []
  type: TYPE_NORMAL
- en: You can access the Google Cloud Console at [https://console.cloud.google.com/](https://console.cloud.google.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Now that our cluster is up and running, we can deploy a workload and then examine
    Google Cloud Console in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying a workload and interacting with your cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the things to note from the feedback when we launched our cluster by
    running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'was the following line in the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: As you may have guessed, this has downloaded and configured all the necessary
    information to connect your local copy of `kubectl` to the newly deployed GKE
    cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can confirm this by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The output you get from the command should show two nodes with a prefix of
    `gke`, so it should appear something like the following Terminal output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B22019_15_08.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.8: Using kubectl to list the nodes'
  prefs: []
  type: TYPE_NORMAL
- en: If your GKE cluster nodes are listed when running the preceding output and you
    are happy to proceed with the current `kubectl` configuration you are using, you
    can skip the next section of the chapter and move straight on to the *Launching
    an example workload* section.
  prefs: []
  type: TYPE_NORMAL
- en: The *Further reading* section at the end of this chapter also provides a link
    to the official GKE documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring your local client
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you need to configure another or your `kubectl` installation to connect to
    your cluster, the GCP CLI has a command.
  prefs: []
  type: TYPE_NORMAL
- en: Running the following command is based on the assumption that you have the GCP
    CLI installed and configured. If you don’t, please follow the instructions in
    the *Installing the GCP command-line interface* section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The command you need to run to download the credentials and configure `kubectl`
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'You can run the following commands if you need to switch to or from another
    configuration (or context as it is known). The first command lists the current
    context:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The following command lists the names of all of the contexts that you have
    configured:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you know the name of the context that you need to use, you can run the
    following command, making sure to replace `CONTEXT_NAME` with the name of the
    context that you change it to, as in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Now that your `kubectl` client is configured to talk to and interact with your
    GKE cluster, we can launch an example workload.
  prefs: []
  type: TYPE_NORMAL
- en: Launching an example workload
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The example workload we will launch is the PHP/Redis Guestbook example used
    throughout the official Kubernetes documentation. The first step in launching
    the workload is to create the Redis Leader deployment and service. To do this,
    we use the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Next up, we need to repeat the process but, this time, to launch the Redis
    Follower deployment and service, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have Redis up and running, it is time to launch the frontend deployment
    and service; this is the application itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'After a few minutes, you should be able to run the following command to get
    information on the service you have just launched:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the command should give you an external IP address that looks
    like the following Terminal output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B22019_15_09.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.9: Getting information on the frontend service'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have launched our application, copy the `EXTERNAL-IP` value and
    put the IP address into your browser; make sure you use `http://EXTERNAL-IP` rather
    than `https://EXTERNAL-IP`, as the Guestbook listens on port `80` and not `443`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should be presented with the simple Guestbook application when you open
    the address in your browser. Try submitting a few messages, as shown in the following
    screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B22019_15_10.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.10: The Guestbook application with a few test messages'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have launched our basic workload, let’s return to and explore Google
    Cloud Console.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring Google Cloud Console
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have already seen our cluster in Google Cloud Console, so next, click on
    the **Workloads** link, which is in the left-hand menu of the **Kubernetes Engine**
    section.
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B22019_15_11.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.11: Viewing the workload in the console'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see from the preceding screen, the three deployments are listed,
    along with confirmation of the namespace they are in and the cluster that the
    workload belongs to.
  prefs: []
  type: TYPE_NORMAL
- en: If we had more than one cluster with multiple namespaces and deployments, we
    could use the filter to drill down into our GKE workloads.
  prefs: []
  type: TYPE_NORMAL
- en: Workloads
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Clicking on the **frontend** deployment will let you view more information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B22019_15_12.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.12: Getting an overview of the frontend deployment'
  prefs: []
  type: TYPE_NORMAL
- en: 'On this page, you will be able to drill further down into your deployment using
    the tabs below the deployment name, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**OVERVIEW**: This view gives you an overview of the selected workload. As
    you can see from the previous screenshot, you can see the CPU, memory, and disk
    utilization, along with other information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DETAILS**: This lists more information about the environment and workload
    itself. Here, you can find out when it was created, annotations, labels (as well
    as details about the replicas), the update strategy, and Pod information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OBSERVABILITY**: Here, you can view all metrics on your workload’s infrastructure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**REVISION HISTORY**: Here, you will find a list of all the workload revisions.
    This is useful if your deployment is updated frequently and you need to keep track
    of when the deployment was updated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**EVENTS**: If you have any problems with your workload, this is the place
    to look. All events, such as scaling, pod availability, and other errors, will
    be listed here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**LOGS**: This is a searchable list of the logs from all containers running
    the pod.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**APP ERRORS**: Here, you will find any application errors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**YAML**: This is an exportable YAML file containing the full deployment configuration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This information is available for all the deployments across all the GKE clusters
    you have launched within the project.
  prefs: []
  type: TYPE_NORMAL
- en: Gateways, Services, and Ingress
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this section, we will look at the **Gateways, Services and Ingress** section.
    As you may have already guessed, this lists all the services launched across your
    GKE clusters. You can do this by clicking on **Gateways, Services and Ingress**.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you first go to this section, it will default to the **GATEWAYS** tab,
    but we haven’t launched a gateway, so you need to click on the **SERVICES** tab.
    When this loads, you will be presented with a screen that looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B22019_15_13.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.13: Viewing the services in the console'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the three services we launched are listed. However, the **frontend**
    service has an **External load balancer** type and a public IP address listed,
    as opposed to the **redis-leader** and **redis-follower** services, which only
    have a **Cluster IP**.
  prefs: []
  type: TYPE_NORMAL
- en: This is because, of the three services, we only want the frontend service to
    be accessible publicly, as only our frontend service uses the two Redis services.
  prefs: []
  type: TYPE_NORMAL
- en: When the external load balancer was launched, as we were running our cluster
    in a public cloud provider, the Kubernetes scheduler knew to contact the Google
    Cloud API and launch a load balancer for use. It then configured it to talk back
    to our cluster nodes, exposing the workload; this deployment runs on port **80**
    externally, and traffic is passed back to port **31740** on the nodes.
  prefs: []
  type: TYPE_NORMAL
- en: 'As before, clicking on one of the three running services will give you several
    pieces of information:'
  prefs: []
  type: TYPE_NORMAL
- en: '**OVERVIEW**: This view gives you a summary of the service configuration and
    utilization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DETAILS**: Here, you can find more details on the service and a link to view
    the load balancer resource that has been launched within our Google Cloud project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**EVENTS**: As before, you can find any events affecting the service here.
    This is useful for troubleshooting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**LOGS**: This is a repeat of the logs shown in the **Workloads** section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**APP ERRORS**: You will be able to find any application errors here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**YAML**: Again, this is a way to export the complete service configuration
    as a YAML file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While this covers the basic workload we launched, GKE offers plenty of other
    options and features. Let’s quickly work through the functionality hidden behind
    the other items in the left-hand menu.
  prefs: []
  type: TYPE_NORMAL
- en: Other GKE features
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are two types of features supported by GKE; the ones listed below are
    the standard ones. There are also Enterprise features that can be enabled when
    you run GKE Enterprise, which we will discuss at the end of this section:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Clusters**: Here, you can manage your clusters; you will see the cluster
    we launched using the GCP CLI and have the option of creating more clusters, using
    the guided web interface.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Workloads**: As already covered, you will find the workloads you have deployed
    to your clusters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Applications**: This will show you any applications you have deployed from
    the Marketplace, which we will cover in a moment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Secrets and ConfigMaps**: Here, you can securely manage your Secrets and
    ConfigMaps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Storage**: You can view any persistent storage claims you have configured
    here and manage storage classes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Object Browser**: Think of this as an explorer for the K8s and GCP API; clicking
    through it gives you an overview of all the possible APIs and endpoints you can
    interact with and what objects/resources are currently deployed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following services bring native Google services into GKE:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Backup for GKE**: Here, you can use GCP’s backup service, which is outside
    the GKE offering, to back up your GKE-hosted workloads and applications. Personally,
    when I run a Kubernetes workload in the cloud, the data within it is ephemeral.
    For services such as databases, where I would want to have backups, they run in
    an SLA-backed, cloud-native service outside of my cluster – but if, for whatever
    reason, you can’t do that, then this service has you covered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Gateways, Services and Ingress**: We have already covered this option.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Network Function Optimizer**: You can link your GKE workloads to other GCP
    resources’ private networking here. This allows you to extend your cluster network
    so that services like Google Cloud databases can be accessed privately by your
    cluster resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Marketplace**: Here, you will find pre-packaged applications to run in your
    GKE cluster. They are published by various software vendors and include both free
    and commercial offerings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As mentioned, the features above are available in the standard edition of GKE;
    this edition is like rolling your own Kubernetes deployment, except Google takes
    care of the node deployment and management plan for you.
  prefs: []
  type: TYPE_NORMAL
- en: Then, there is the Enterprise edition; as you might have guessed, this introduces
    additional features that an enterprise deploying Kubernetes may require, such
    as managed services meshes and security, compliance, and role-based access control
    options. These features come at an extra cost but are essential for larger organizations
    that may work in more regulated industries.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting your cluster
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once you finish with your cluster, you can remove it by running the following
    commands. The first removes the service we created, and the second terminates
    the cluster itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: It will take a few minutes to remove the cluster; please ensure that you wait
    until this process finishes.
  prefs: []
  type: TYPE_NORMAL
- en: This should also delete any services launched by your workloads, such as load
    balancers. However, I recommend double-checking the Google Cloud Console for any
    orphaned services or resources to ensure that you do not incur unexpected costs.
  prefs: []
  type: TYPE_NORMAL
- en: We have been using the `--zone=us-central1-a` flag, which launches our cluster
    in a single availability zone in the US Central region. Let’s discuss what other
    cluster options are available.
  prefs: []
  type: TYPE_NORMAL
- en: More about cluster nodes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At the end of the previous section, I mentioned availability zones and regions.
    Before we discuss some of the cluster deployment options, we should get a slightly
    better understanding of what we mean by availability zones and regions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Region**: A region is made up of zones. Zones have great low-latency network
    connectivity to other zones within the same region. This gives you a way of deploying
    highly available, always-on, fault-tolerant workloads.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Availability zone**: Think of availability zones as separate data centers
    within a region. The zones have diverse networks and power, meaning that if a
    single zone has an issue and you run your workload across multiple zones, your
    workload shouldn’t be impacted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The one thing to note with zones is that you might find that not all machine
    types are available across all zones within a region. Therefore, please check
    before attempting to deploy your workload.
  prefs: []
  type: TYPE_NORMAL
- en: Google best practices recommend that you deploy your workload across the maximum
    number of zones within a single region for optimum performance and availability.
  prefs: []
  type: TYPE_NORMAL
- en: However, it is possible to split your workloads across multiple regions by using
    Multi Cluster Ingress – all you have to do is account for and allow the increased
    latency between regions for shared services, such as databases. For more information
    on Multi Cluster Ingress, see the *Further reading* section at the end of the
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s get back to looking at launching a cluster in a single region across
    multiple zones, by examining the command we used to launch the test cluster at
    the start of the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: As we know, it will launch two nodes but only in a single zone. We have only
    passed one using the `-zone` flag, which, in our case, was the `us-central1` region
    and zone `a`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s run the following command but use the `--region` flag rather than the
    `--zone` one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Once launched, run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'This should output something that looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer program'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B22019_15_14.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.14: Viewing the nodes running in a region'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, we have two nodes in each zone, giving us a total cluster size
    of six nodes. This is because when you define a region by default, your cluster
    is spread across three zones. You can override this using the `--node-locations`
    flag.
  prefs: []
  type: TYPE_NORMAL
- en: 'This makes our command look like the following if we wanted to deploy a cluster
    from scratch; as you can see, we now have a comma-separated list of availability
    zones:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: We are still using the `us-central1` region but deploying to the `a`, `b`, `c`,
    and `f` zones.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given that we already have a cluster running, we can run the following command
    to update the cluster, adding the new availability zone and two new nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the `kubectl get nodes` command now shows the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer program'
  prefs: []
  type: TYPE_NORMAL
- en: Description automatically generated](img/B22019_15_15.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.15: Our cluster now running across four availability zones'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, Google has made deploying your clusters straightforward across
    multiple zones. This means that you can deploy your workload across a fully redundant
    cluster with minimal effort; given the complexity involved in replicating this
    type of deployment manually using virtual machines and networks, the ease is very
    welcome.
  prefs: []
  type: TYPE_NORMAL
- en: 'To remove clusters deployed using the `--region` flag, you should use the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: At the time of writing, the simple two-node cluster we launched at the start
    of the chapter costs around $55 per month, and the price increases to around $347
    per month for the eight-node cluster we just launched. For more cost information,
    see the Google Cloud Pricing Calculator link in the *Further reading* section.
  prefs: []
  type: TYPE_NORMAL
- en: This concludes our look at GKE. Before we move on to the next public cloud provider,
    let’s summarize what we have covered.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed the origins of GCP and the GKE service, before
    walking through how to sign up for an account and how to install and configure
    the Google Cloud command-line tool.
  prefs: []
  type: TYPE_NORMAL
- en: We then launched a simple two-node cluster using a single command, and then
    we deployed and interacted with a workload, using the `kubectl` command and Google
    Cloud Console.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, again using only a single command, we redeployed our cluster to take
    advantage of multiple availability zones, quickly scaling to a fully redundant
    and highly available eight-node cluster that runs across four availability zones.
  prefs: []
  type: TYPE_NORMAL
- en: I am sure you will agree that Google has done an excellent job of making deploying
    and maintaining a complex infrastructure configuration a relatively trivial and
    quick task.
  prefs: []
  type: TYPE_NORMAL
- en: Also, once your workloads are deployed, you can manage them the same way you
    would if your cluster were deployed elsewhere – we really haven’t had to make
    any allowances for our cluster being run on GCP.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will examine deploying a Kubernetes cluster in AWS using Amazon
    Elastic Kubernetes Service, Amazon’s fully managed Kubernetes offering.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are links to more information on some of the topics and tools that we
    have covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Google Kubernetes Engine: [https://cloud.google.com/kubernetes-engine/](https://cloud.google.com/kubernetes-engine/'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: 'Google Kubernetes Engine Documentation: [https://cloud.google.com/kubernetes-engine/docs](https://cloud.google.com/kubernetes-engine/docs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: 'Google Cloud Pricing Calculator: [https://cloud.google.com/products/calculator](https://cloud.google.com/products/calculator'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: 'The Guestbook Sample Application: [https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/tree/main/quickstarts/guestbook](https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/tree/main/quickstarts/guestbook)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Google Cloud Kubernetes comic: [https://cloud.google.com/kubernetes-engine/kubernetes-comic](https://cloud.google.com/kubernetes-engine/kubernetes-comic'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: 'Regional Clusters: [https://cloud.google.com/kubernetes-engine/docs/concepts/regional-clusters](https://cloud.google.com/kubernetes-engine/docs/concepts/regional-clusters'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: 'Multi Cluster Ingress: [https://cloud.google.com/kubernetes-engine/docs/concepts/multi-cluster-ingress](https://cloud.google.com/kubernetes-engine/docs/concepts/multi-cluster-ingress'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: Join our community on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Join our community’s Discord space for discussions with the authors and other
    readers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/cloudanddevops](https://packt.link/cloudanddevops)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code119001106479081656.png)'
  prefs: []
  type: TYPE_IMG

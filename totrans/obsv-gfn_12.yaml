- en: '12'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Real User Monitoring with Grafana
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will investigate **real user monitoring** (**RUM**) with
    **Grafana Cloud Frontend Observability** and the **Faro Web SDK**. We'll explore
    what RUM is, how we use it to solve real user problems, and some important metrics
    to consider. We will then look at how to set up Frontend Observability in your
    Grafana Cloud instance and the prebuilt dashboards that are included. We will
    explore how Frontend Observability data can be correlated with backend telemetry
    for a more complete picture. To finish, we will look at best practices for collecting
    frontend data.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing RUM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Grafana Frontend Observability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring Web Vitals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pivoting from frontend to backend data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhancements and custom configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing RUM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**RUM** is the term used to describe the collection and processing of telemetry
    that describes the health of the frontend of your web applications. It gives us
    a bird’s-eye view of user transactions as they happen, live from the user’s browser
    all the way through to the backend system. The benefit of this telemetry is in
    the insight into the experience real users are having with the performance of
    your application.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Grafana implements RUM with a combination of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Grafana Faro Web SDK, which, when embedded in your web application, collects
    the following telemetry by default:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web Vitals performance metrics
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Unhandled exceptions
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Browser environment information
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Page URL changes
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Session identification (for data correlation)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Activity traces
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to the defaults, the SDK can be configured to send custom metadata,
    measurements, and metrics into Grafana to enhance Frontend Observability. The
    Faro Web SDK integrates with opentelemetry-js to provide Open Telemetry-based
    tracing in your application. This SDK is open source, and the repository can be
    found at [https://github.com/grafana/faro-web-sdk](https://github.com/grafana/faro-web-sdk);
    it has comprehensive documentation along with some demonstration code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A cloud-hosted receiver of browser telemetry (you can alternatively deploy a
    Grafana Agent on your own infrastructure). The cloud-hosted receiver is created
    and configured when you activate application observability in Grafana Cloud (we
    will talk you through the setup steps in the next section).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A dedicated Grafana app interface for each Frontend Observability app you create
    with included dashboards as tabs (we look at these dashboard tabs later in this
    chapter).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram shows the relationship between your *frontend application*
    in the left box, with the Faro Web SDK installed, and the *Grafana Cloud components*
    in the right box for ingesting, storing, and presenting your telemetry:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.1 – Frontend relationship diagram](img/B18277_12_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.1 – Frontend relationship diagram
  prefs: []
  type: TYPE_NORMAL
- en: The Grafana Faro Web SDK collects telemetry and forwards it to the collector
    endpoint in Grafana Cloud where it is processed and sent to the appropriate backend
    – Loki for logs and Tempo for traces. Metrics are generated from logs using Loki’s
    LogQL metric queries we discussed in[*Chapter 4*](B18277_04.xhtml#_idTextAnchor092).
    The generated metrics are visualized in the Grafana Cloud Frontend Observability
    application dashboards.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now look at the setup for Grafana Frontend Observability.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Grafana Frontend Observability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To get started with monitoring your application frontend and configure Grafana
    Cloud Frontend Observability, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In your Grafana instance, select **Observability** | **Frontend** from the
    menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 12.2 – Grafana \uFEFFObservability menu](img/B18277_12_2.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 12.2 – Grafana Observability menu
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Frontend Apps** landing page will be displayed. If this is your first
    time here, you will have a **Start observing** button – go ahead and click on
    it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.3 – Grafana Cloud Frontend Observability screen](img/B18277_12_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.3 – Grafana Cloud Frontend Observability screen
  prefs: []
  type: TYPE_NORMAL
- en: If you have already set up frontend apps, they will be listed here and there
    will be a **Create New** button instead of the **Start observing** button. Clicking
    either of these buttons shows the **Create New App** modal window.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Create New App** modal window shown in *Figure 12**.4* requires an app
    name, **Cross Origin Resource Sharing** (**CORS**) addresses, and additional label
    details (these are labels to add to Loki logs as they come into Grafana Cloud).
    Additionally, you will be asked to confirm the cloud costs associated with the
    additional telemetry from this feature:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.4 – Create New App screen](img/B18277_12_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.4 – Create New App screen
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have completed the form, you are provided with a few options for integrating
    the Faro Web SDK into your frontend application using **NPM**, **CDN with Tracing**,
    or **CDN without Tracing**. You will have to decide which suits your application
    development requirements best:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12\. 5 – Web SDK configuration](img/B18277_12_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12\. 5 – Web SDK configuration
  prefs: []
  type: TYPE_NORMAL
- en: When you have connected the Faro Web SDK in your application to Grafana, the
    default telemetry we identified at the beginning of this section will begin sending.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Overview** tab of your observability frontend app will look similar to
    the following screenshot, with the main dashboard included in Grafana Frontend
    Observability showing key metrics:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.6 – Frontend Observability Overview tab](img/B18277_12_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.6 – Frontend Observability Overview tab
  prefs: []
  type: TYPE_NORMAL
- en: 'Next to the **Overview** tab are the **Errors** and **Sessions** tabs, which
    help you investigate your app. Let’s look at these tabs in more detail:'
  prefs: []
  type: TYPE_NORMAL
- en: The top row on the dashboard in the **Overview** tab shows important **Web Vitals**
    metrics, including **Core Web Vitals**. Web Vitals is an initiative by Google
    that provides unified guidance for signals that are essential to reporting user
    experience on the web.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **Errors** tab details any frontend exceptions, where they happened, and
    the browsers affected:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 12.7 – Frontend Observability Errors tab](img/B18277_12_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.7 – Frontend Observability Errors tab
  prefs: []
  type: TYPE_NORMAL
- en: The **Sessions** tab shows a list of the available user sessions to analyze.
    We will explore this in more detail in the *Pivoting from frontend to backend*
    *data* section.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Settings** and **Web SDK Configuration** tabs help you configure the connection
    (**Settings** allows you to modify the values entered in *step 3* earlier in this
    section, and **Web SDK Configuration** provides the config seen in *step 4*).
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, let’s look at Web Vitals metrics in more detail to understand
    the information we are capturing and reporting for our frontend applications.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring Web Vitals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To explain the quality of experience delivered to users, the Web Vitals metrics
    report on several areas of a user’s interaction. Web Vitals is a Google initiative
    that provides unified guidance for quality signals that are essential for delivering
    a great web user experience. You can read about the Web Vitals project in more
    detail at [https://web.dev/articles/vitals](https://web.dev/articles/vitals) and
    specifically Core Web Vitals at [https://web.dev/vitals/#core-web-vitals](https://web.dev/vitals/#core-web-vitals).
  prefs: []
  type: TYPE_NORMAL
- en: 'The important Web Vitals metrics used in the **Overview** tab are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Metric** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| **Core** **Web Vitals** |'
  prefs: []
  type: TYPE_TB
- en: '| **Largest Contentful** **Paint** (**LCP**) | The LCP metric measures the
    display time of the largest visible section in relation to the page starting to
    load. This could be text or an image that completely loads on the visitor’s screen.A
    target LCP of <= 2.5 seconds is promoted.For more details, refer to [https://web.dev/articles/lcp](https://web.dev/articles/lcp).
    |'
  prefs: []
  type: TYPE_TB
- en: '| **First Input** **Delay** (**FID**) | The FID metric measures the time from
    when a visitor clicks a link to the time the browser starts processing the event.A
    target FID of <= 100 milliseconds is promoted.For more details, refer to [https://web.dev/articles/fid](
    https://web.dev/articles/fid).There are plans to replace FID with **Interaction
    To Next Paint** (**INP**) as a Core Web Vital in March 2024. |'
  prefs: []
  type: TYPE_TB
- en: '| **Cumulative Layout** **Shift** (**CLS**) | The CLS metric measures any time
    a visible element changes its position. As the visitor experiences layout changes,
    the duration is captured and the cumulative score is reported.A target CLS of
    <= 0.1 is the aim.For more details, refer to [https://web.dev/articles/cls](https://web.dev/articles/cls).
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Other** **Web Vitals** |'
  prefs: []
  type: TYPE_TB
- en: '| **Time To First** **Byte** (**TTFB**) | The TTFB metric measures the time
    between the request for a web resource and when the very first byte of a response
    starts to arrive. This will not be obvious to the visitor, but it is a good indicator
    of responsiveness of getting content to the visitor.A target TTFB of <= 0.8 seconds
    is the objective.For more details, refer to [https://web.dev/articles/ttfb](https://web.dev/articles/ttfb).
    |'
  prefs: []
  type: TYPE_TB
- en: '| **First Contentful** **Paint** (**FCP**) | The FCP metric measures the time
    from when the page starts loading to when any part of the page is displayed on
    the screen – essentially, when your visitor actually sees an interaction with
    the website requested.A target FCP of <= 1.8 seconds is the aim.For more details,
    refer to [https://web.dev/articles/fcp](https://web.dev/articles/fcp). |'
  prefs: []
  type: TYPE_TB
- en: '| **Interaction to Next** **Paint** (**INP**) | The INP metric measures the
    responsiveness of a page throughout a visitor’s session. It does this by observing
    the latency of every click, tap, and keyboard interaction by a visitor and takes
    the longest (ignoring outliers).The target value for the INP is <= 200 milliseconds.For
    more details, refer to [https://web.dev/articles/inp](https://web.dev/articles/inp).
    |'
  prefs: []
  type: TYPE_TB
- en: Table 12.1 – Important Web Vitals metrics
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have looked at some of the important frontend metrics to consider,
    let’s look at how we can pivot to backend telemetry when investigating issues.
  prefs: []
  type: TYPE_NORMAL
- en: Pivoting from frontend to backend data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you have started collecting Frontend Observability data, you will be able
    to correlate it with backend and infrastructure telemetry. Grafana provides simple
    interfaces for this when you are using Loki for logs, Tempo for traces, and Mimir
    for metrics.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the Grafana Cloud Frontend Observability app, there are readymade dashboards
    that make navigation and investigation simple. As discussed in the *Setting up
    GrafanaFrontend Observability* section, the app menu has three main sections,
    namely, **Overview**, **Errors**, and **Sessions**. The **Sessions** tab allows
    us to jump into other telemetry that our system is producing and sending to Grafana.
    You can see in the following screenshot multiple requests to different page URLs
    alongside the associated session IDs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.8 – The Sessions tab](img/B18277_12_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.8 – The Sessions tab
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking a **Session Id** entry will take you to a detailed view, where you
    can see the Web Vitals for that specific visitor session, associated exceptions,
    and, if you have instrumented the rest of your system, links to **Traces**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.9 – The Session Details screen](img/B18277_12_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.9 – The Session Details screen
  prefs: []
  type: TYPE_NORMAL
- en: 'Selecting **Traces** takes you into an **Explore** view of full system traces,
    where you can easily navigate to associated Loki logs from the backend, providing
    you with the ability to traverse your system. This demonstrates the additional
    value that can be gained with full end-to-end observability instrumentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.10 – The Explore view for system traces](img/B18277_12_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.10 – The Explore view for system traces
  prefs: []
  type: TYPE_NORMAL
- en: 'A default session is defined by the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Session start**: The visitor navigates to a web page, Faro is initialized,
    and a new session is started'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Session end**: The visitor navigates away and the session is destroyed (by
    default, a session end event is not sent)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: However, you can define session logic as you prefer, to fit your use case. The
    Faro docs for session instrumentation at [https://grafana.com/docs/grafana-cloud/monitor-applications/frontend-observability/faro-web-sdk/components/provided-instrumentations/#session-tracking](https://grafana.com/docs/grafana-cloud/monitor-applications/frontend-observability/faro-web-sdk/components/provided-instrumentations/#session-tracking)
    show available configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now look at some best practices to consider with Frontend Observability.
  prefs: []
  type: TYPE_NORMAL
- en: Enhancements and custom configurations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With all observability, you need to consider your use case. This is especially
    important when considering Frontend Observability as you will be operating in
    your visitor’s browser. There are several enhancements you can make to Frontend
    Observability over the default implementation. However, these enhancements come
    with the overhead of additional configuration, additional developer effort, and
    a potentially greater impact on your visitor’s browser. However, they can dramatically
    increase the value provided by Frontend Observability instrumentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s explore the enhancements for Frontend Observability:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Frontend Tracing**: This provides improved correlation between real user
    interactions and backend events. It requires the additional OpenTelemetry SDK
    configurations and adds some overhead to your visitor’s browser, so consider the
    implications carefully and test for any impact.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Custom Errors**: This provides improved observability for systems that have
    error handling. Additional configuration is required to manually add the Faro
    Web SDK to the error handling pipeline to push errors to Grafana.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Custom Measurements**: This provides enhanced telemetry with application-specific
    data. Additional configuration is required to manually add the Faro Web SDK to
    push additional measurements to Grafana.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Custom Logs**: This provides the ability to send supporting metadata along
    with telemetry to help you understand your visitors’ experiences. It requires
    additional configuration and development effort to instrument.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kind=event`. We learned all about Loki labels in [*Chapter 4*](B18277_04.xhtml#_idTextAnchor092).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you do not have a frontend app ready to instrument, there is a demo project
    as part of the Faro Web SDK that you can experiment with. It will help you understand
    in more detail what is happening and how it works: [https://github.com/grafana/faro-web-sdk/blob/main/demo/README.md](https://github.com/grafana/faro-web-sdk/blob/main/demo/README.md).'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now wrap up this chapter with a summary and look toward the following
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have explored user monitoring and the additional value gained
    with full end-to-end observability instrumentation. We looked at how Grafana provides
    this capability with Grafana Frontend Observability and the Faro Web SDK. We then
    looked at the Web Vitals metrics, which are important for interpreting visitor
    experience. We also looked at the built-in dashboards that help you navigate to
    your backend telemetry in Grafana, giving you the ability to fully diagnose problems.
    Finally, we looked at some best practices and custom configurations for Frontend
    Observability.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about different aspects of application performance
    with **Pyroscope** and **k6** from Grafana.
  prefs: []
  type: TYPE_NORMAL

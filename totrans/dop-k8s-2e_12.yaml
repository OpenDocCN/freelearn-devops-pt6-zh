- en: Kubernetes on Azure
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure上的Kubernetes
- en: Just like AWS and GCP, Microsoft Azure's public cloud also has a hosted offering,
    which is Kubernetes. The **Azure Kubernetes Service** (**AKS**) was introduced
    in 2017\. Users of Azure can manage, deploy, and scale their containerized applications
    on AKS without worrying about the underlying infrastructure.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 与AWS和GCP类似，Microsoft Azure的公共云也提供托管服务，即Kubernetes。**Azure Kubernetes Service**（**AKS**）于2017年推出。Azure用户可以在AKS上管理、部署和扩展他们的容器化应用，而无需担心底层基础设施。
- en: 'In this chapter, we''ll start by giving an introduction to Azure and then go
    through the major services that AKS uses. We''ll then learn how to launch an AKS
    cluster and play with it:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将首先介绍Azure，然后讲解AKS使用的主要服务。接着，我们将学习如何启动AKS集群并进行实验：
- en: Introduction to Azure
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure介绍
- en: Fundamental services in Azure
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure中的基本服务
- en: Setting up AKS
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置AKS
- en: Azure cloud providers
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure云服务提供商
- en: Introduction to Azure
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure介绍
- en: Like GCP, Microsoft Azure provides **Platform as a Service** (**PaaS**). Users
    can deploy their applications to the Azure app service without having to know
    about detailed settings and VM management. Since 2010, Azure has been serving
    Microsoft software and third-party software to many users. Each Azure service
    provides different pricing tiers. In Azure, these pricing tiers are also called
    *SKUs* ([https://en.wikipedia.org/wiki/Stock_keeping_unit](https://en.wikipedia.org/wiki/Stock_keeping_unit)).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 与GCP一样，Microsoft Azure提供**平台即服务**（**PaaS**）。用户可以将应用部署到Azure应用服务，而无需了解详细设置和虚拟机管理。自2010年以来，Azure已为许多用户提供微软软件和第三方软件。每个Azure服务提供不同的定价层次。在Azure中，这些定价层次也被称为*SKU*（[https://en.wikipedia.org/wiki/Stock_keeping_unit](https://en.wikipedia.org/wiki/Stock_keeping_unit)）。
- en: The **Azure Kubernetes Service** (**AKS**) was announced in 2017 as the new
    support for their original container orchestrator solution, **Azure Container
    Service** (**ACS**). Since then, container solutions in Azure focused more on
    Kubernetes support rather than other container orchestrators, such as Docker Enterprise
    and Mesosphere DC/OS. As a Kubernetes cloud provider, AKS provides some native
    support, such as Azure active directory for RBAC, Azure disks for storage class,
    Azure load balancers for services, and HTTP application routing for ingress.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**Azure Kubernetes Service**（**AKS**）于2017年宣布，作为对其原有容器编排解决方案**Azure Container
    Service**（**ACS**）的全新支持。自那时起，Azure的容器解决方案更加关注Kubernetes的支持，而不是其他容器编排工具，如Docker
    Enterprise和Mesosphere DC/OS。作为一个Kubernetes云服务提供商，AKS提供了一些原生支持，例如Azure Active Directory用于RBAC、Azure磁盘用于存储类、Azure负载均衡器用于服务、以及HTTP应用程序路由用于Ingress。'
- en: Resource groups
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 资源组
- en: A r**esource group** in Azure is a set of resources that represent a logical
    group. You can deploy and delete all the resources inside a group at once.** Azure
    resource manager** is a tool that's used to help you manage your resource groups.
    In line with the spirit of infrastructure as code ([https://en.wikipedia.org/wiki/Infrastructure_as_code](https://en.wikipedia.org/wiki/Infrastructure_as_code)),
    Azure provides a **resource manager template**, which is a file in JSON format
    that defines the configuration and the dependencies of the desired resources.
    Users can deploy the template to multiple resource groups for different environments
    repeatedly and consistently.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**资源组**是Azure中的一组资源，代表一个逻辑组。您可以一次性部署和删除组内的所有资源。**Azure资源管理器**是一个帮助您管理资源组的工具。遵循基础设施即代码的精神（[https://en.wikipedia.org/wiki/Infrastructure_as_code](https://en.wikipedia.org/wiki/Infrastructure_as_code)），Azure提供了一个**资源管理器模板**，它是一个JSON格式的文件，定义了所需资源的配置和依赖关系。用户可以将模板反复且一致地部署到不同环境的多个资源组中。'
- en: Let's see how these things look in the Azure portal. First, you'll need to have
    an Azure account. If you don't have one, go to [https://azure.microsoft.com/features/azure-portal/](https://azure.microsoft.com/features/azure-portal/)
    and sign up to get a free account. The Azure free account offers you 12 months
    of popular free services and $200 credit for 30 days. Credit card information
    is needed for account registration, but you won't be charged unless you upgrade
    your account type.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这些内容在Azure门户中的表现。首先，您需要拥有一个Azure账户。如果没有，请访问[https://azure.microsoft.com/features/azure-portal/](https://azure.microsoft.com/features/azure-portal/)并注册免费账户。Azure免费账户为您提供12个月的热门免费服务和30天内$200的信用额度。注册账户时需要信用卡信息，但除非您升级账户类型，否则不会收费。
- en: 'After logging in, click on Create a resource on the sidebar and go to Get started.
    We''ll see a web app there; click on it and input the app name. For resource creation,
    you''ll need to specify the Resource Group. We can either use an existing one
    or create a new one. Let''s create a new one for now, as we don''t have any resource
    groups yet. Change the Runtime Stack to your application runtime if needed. The
    screenshot for this is as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 登录后，点击侧边栏中的**创建资源**，进入**入门指南**。我们会看到一个 Web 应用，点击它并输入应用名称。在创建资源时，你需要指定资源组。我们可以使用现有的资源组，也可以创建新的资源组。现在让我们创建一个新的资源组，因为我们还没有资源组。根据需要，修改运行时堆栈为你的应用程序运行时。以下是该过程的截图：
- en: '![](img/34e44eb5-6cee-4034-ba74-561c0857afad.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/34e44eb5-6cee-4034-ba74-561c0857afad.png)'
- en: 'At the bottom of the page, beside the Create button, there is an Automation
    options button. If we click that, we''ll see that a resource template is created automatically.
    If we click Deploy, the custom parameters defined by the template will be shown.
    For now, we will just click on Create directly. Here is a screenshot of the resource
    template:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在页面底部，**创建**按钮旁边有一个**自动化选项**按钮。如果我们点击它，会看到资源模板自动创建。如果我们点击**部署**，将显示模板定义的自定义参数。目前，我们直接点击**创建**。以下是资源模板的截图：
- en: '![](img/9c540cdf-d148-4dc5-8e4a-8947a9355356.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9c540cdf-d148-4dc5-8e4a-8947a9355356.png)'
- en: 'After clicking Create, the console will bring us to the following view for
    us to explore. Let''s go to our newly created resource group, `devops-app`, under
    the Recent resources tab:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**创建**后，控制台会将我们带到以下视图供我们探索。让我们去查看我们刚刚创建的资源组 `devops-app`，它位于**最近资源**标签下：
- en: '![](img/3e89ab68-bb39-46fd-abc3-dcc4549b6666.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3e89ab68-bb39-46fd-abc3-dcc4549b6666.png)'
- en: 'In this resource group, we can see that there''s one application running in
    the App Services and one service plan. We can also see lots of functionalities
    in the sidebar. The resource group aims to give users a comprehensive view of
    a group of resources, so we don''t need to go to a different console to find them:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个资源组中，我们可以看到在应用服务中运行着一个应用程序和一个服务计划。我们还可以在侧边栏中看到许多功能。资源组的目的是为用户提供一组资源的全面视图，因此我们无需进入不同的控制台去查找它们：
- en: '![](img/a7f3fdb9-61df-4a95-8a39-b39850d8b759.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a7f3fdb9-61df-4a95-8a39-b39850d8b759.png)'
- en: 'If we click on the `devops-app` Resource group, it''ll bring us to the app
    service console, which is the PaaS offering in Azure:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们点击 `devops-app` 资源组，它将带我们进入应用服务控制台，这是 Azure 提供的 PaaS 服务：
- en: '![](img/3273794e-e707-49ec-8e76-8b0cfdf074e0.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3273794e-e707-49ec-8e76-8b0cfdf074e0.png)'
- en: 'At this point, the sample web app has been deployed to the Azure app service.
    If we visit the endpoint specified in the URL (which in this case is [https://devops-app.azurewebsites.net/](https://devops-app.azurewebsites.net/)),
    we can find it:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，示例 Web 应用已部署到 Azure 应用服务。如果我们访问 URL 中指定的端点（在此案例中为 [https://devops-app.azurewebsites.net/](https://devops-app.azurewebsites.net/)），我们就能找到它：
- en: '![](img/ed27caa1-f71c-4ab3-86ff-0deb3099e3cd.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ed27caa1-f71c-4ab3-86ff-0deb3099e3cd.png)'
- en: We could also upload our own web app, or integrate with our version control
    software, such as GitHub or Bitbucket, and build our whole pipeline with Azure.
    For more information, please visit the deployment center page ([https://docs.microsoft.com/en-us/azure/app-service/deploy-continuous-deployment](https://docs.microsoft.com/en-us/azure/app-service/deploy-continuous-deployment)).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以上传自己的 Web 应用，或者与我们的版本控制软件（如 GitHub 或 Bitbucket）集成，并通过 Azure 构建完整的流水线。有关更多信息，请访问部署中心页面
    ([https://docs.microsoft.com/en-us/azure/app-service/deploy-continuous-deployment](https://docs.microsoft.com/en-us/azure/app-service/deploy-continuous-deployment))。
- en: 'We can also easily delete resource groups in the Resource groups console:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在资源组控制台中轻松删除资源组：
- en: '![](img/a19f2512-3930-4952-9348-87bc18657af1.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a19f2512-3930-4952-9348-87bc18657af1.png)'
- en: 'After confirmation, the related resources will be cleaned up:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 确认后，相关资源将被清理：
- en: '![](img/750d3964-3702-4c9f-b965-fc1f7e67f6b6.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/750d3964-3702-4c9f-b965-fc1f7e67f6b6.png)'
- en: Azure virtual network
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure 虚拟网络
- en: The Azure **Virtual Network** (**VNet**) creates an isolated private network
    segment in Azure. This concept is similar to VPC in AWS and GCP. Users specify
    a range of contiguous IPs (that is, CIDR: [https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing)) and
    locations (otherwise known as regions in AWS). We can find a full list of locations
    at [https://azure.microsoft.com/global-infrastructure/locations/](https://azure.microsoft.com/global-infrastructure/locations/).
    We can also create multiple subnets inside a virtual network, or enable an Azure
    firewall upon creation. The Azure firewall is a network security service with
    high availability and scalability. It can control and filter traffic with user-specified
    rules. It also provides inbound DNAT and outbound SNAT support. Depending on the
    platform you're using, you can install the Azure CLI (the documentation for which
    can be found here: [https://docs.microsoft.com/en-us/cli/azure/?view=azure-cli-latest](https://docs.microsoft.com/en-us/cli/azure/?view=azure-cli-latest)) via
    the instructions at the following link: [https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest](https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest).
    Alternatively, you can use cloud shell ([https://shell.azure.com/](https://shell.azure.com/))
    directly. Azure cloud shell is a cloud-based admin shell that you can use to manage
    your cloud resources, which already has the Azure CLI installed.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Azure **虚拟网络**（**VNet**）在Azure中创建一个隔离的私有网络段。这个概念类似于AWS和GCP中的VPC。用户指定一系列连续的IP（即CIDR：[https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing)）和位置（在AWS中也称为区域）。我们可以在[https://azure.microsoft.com/global-infrastructure/locations/](https://azure.microsoft.com/global-infrastructure/locations/)找到完整的区域列表。我们还可以在虚拟网络中创建多个子网，或者在创建时启用Azure防火墙。Azure防火墙是一个具有高可用性和可扩展性的网络安全服务。它可以使用用户指定的规则来控制和过滤流量，并提供入站DNAT和出站SNAT支持。根据你使用的平台，你可以通过以下链接的说明安装Azure
    CLI（相关文档可以在这里找到：[https://docs.microsoft.com/en-us/cli/azure/?view=azure-cli-latest](https://docs.microsoft.com/en-us/cli/azure/?view=azure-cli-latest)）：[https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest](https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest)。另外，你也可以直接使用云壳（[https://shell.azure.com/](https://shell.azure.com/)）。Azure云壳是一个基于云的管理壳，内置了Azure
    CLI，你可以用它来管理你的云资源。
- en: 'In the following example, we''ll demonstrate how to use the Azure CLI to create
    an Azure virtual network via an Azure cloud shell. Simply log in to your account
    and attach cloud storage to persist the data. Then, we''re good to go:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们将演示如何使用Azure CLI通过Azure云壳创建一个Azure虚拟网络。只需登录你的帐户并附加云存储以持久化数据。然后，我们就可以开始了：
- en: '![](img/c1977197-b1a1-48eb-83d5-467273385610.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c1977197-b1a1-48eb-83d5-467273385610.png)'
- en: 'After clicking the Create button and waiting for a few seconds, a cloud shell
    console will be launched in your browser:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“创建”按钮并等待几秒钟后，云壳控制台将在你的浏览器中启动：
- en: '![](img/ec96efff-d94c-40eb-b3d0-6f73400be4e3.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ec96efff-d94c-40eb-b3d0-6f73400be4e3.png)'
- en: 'The Azure CLI commands start with `az` as the group name. You could type `az
    --help` to see a list of subgroups or use `az $subgroup_name --help` any time
    to find more information about a subcommand for a subgroup. A subgroup might contain
    multiple subgroups. At the end of the command is the operation that you want to
    carry out with the resource and a set of parameters about the configuration. This
    looks as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Azure CLI命令以`az`作为组名。你可以输入`az --help`来查看子组列表，或随时使用`az $subgroup_name --help`来查找有关子组子命令的更多信息。一个子组可能包含多个子组。在命令的末尾是你要对资源执行的操作以及配置参数集。其形式如下：
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the following example, we''ll create a virtual network named `devops-vnet`.
    First, we''ll have to create a new resource group, since we deleted the only one
    we had in the previous section. Now, let''s create a resource group called `devops`
    in the central US location:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们将创建一个名为`devops-vnet`的虚拟网络。首先，我们需要创建一个新的资源组，因为在前一部分我们删除了唯一的资源组。现在，让我们在美国中部地区创建一个名为`devops`的资源组：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the preceding command, the subgroup name is `group` and the operation command
    is `create`. Next, we''ll use `network.vnet` subgroups to create our virtual network
    resources with the CIDR `10.0.0.0/8`, and leave the rest of the settings as their
    default values:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的命令中，子组名称是`group`，操作命令是`create`。接下来，我们将使用`network.vnet`子组来创建我们的虚拟网络资源，CIDR为`10.0.0.0/8`，其余设置保持默认值：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We could always view a list of our settings using `az` with the `list` command,
    such as `az network vnet list`, or go to the Azure portal to check it out:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们始终可以使用 `az` 的 `list` 命令查看我们的设置列表，例如 `az network vnet list`，或者进入 Azure 门户查看：
- en: '![](img/0438a145-36fa-4913-8f55-f2d44d14b3b1.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0438a145-36fa-4913-8f55-f2d44d14b3b1.png)'
- en: Network security groups
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络安全组
- en: 'A network security group is associated with a virtual network and contains
    a set of security rules. A security rule defines the policies of the inbound and
    outbound traffic of subnets or virtual machines. Using the network security group,
    a user can define whether the inbound traffic is allowed to access the resources
    of a group, and also whether the outbound traffic is allowed. A security rule
    contains the following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 网络安全组与虚拟网络关联，并包含一组安全规则。安全规则定义了子网或虚拟机的入站和出站流量的策略。使用网络安全组，用户可以定义是否允许入站流量访问组的资源，以及是否允许出站流量。安全规则包含以下内容：
- en: A priority (this can range from 100 to 4096; the lower the number, the higher
    the priority)
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优先级（范围从 100 到 4096；数字越小，优先级越高）
- en: A source or destination (a CIDR block, a group of IPs, or another security group)
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个源或目标（CIDR 块、一组 IP 地址或另一个安全组）
- en: A protocol (TCP/UDP/ICMP)
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一种协议（TCP/UDP/ICMP）
- en: A direction (inbound/outbound)
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个方向（入站/出站）
- en: A port range
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个端口范围
- en: An action (allow/deny)
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一项操作（允许/拒绝）
- en: 'Let''s create a network security group called `test-nsg`. Note that the user-defined
    rules are attached after the security group is created:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个名为 `test-nsg` 的网络安全组。请注意，用户定义的规则会在安全组创建后附加：
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We find that Azure creates a set of default rules for each network security
    group. It denies all inbound traffic and allows access to outbound traffic by
    default. We can see that the source and destination cannot be a CIDR block, but
    instead have to be a service tag such as `VirtualNetwork`. These service tags
    are actually a set of predefined IP address prefixes. Azure manages the service
    tags and publishes them weekly. You can find the published service tags in the
    Microsoft download center ([https://www.microsoft.com/en-us/download/details.aspx?id=56519](https://www.microsoft.com/en-us/download/details.aspx?id=56519)):'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发现，Azure 为每个网络安全组创建了一组默认规则。默认情况下，它拒绝所有入站流量，并允许出站流量访问。我们可以看到，源和目标不能是 CIDR 块，而必须是类似
    `VirtualNetwork` 这样的服务标签。这些服务标签实际上是一组预定义的 IP 地址前缀。Azure 管理这些服务标签并每周发布。你可以在 Microsoft
    下载中心找到已发布的服务标签（[https://www.microsoft.com/en-us/download/details.aspx?id=56519](https://www.microsoft.com/en-us/download/details.aspx?id=56519)）：
- en: '| **Direction** | **Priority** | **Source** | **Source ports** | **Destination**
    | **Dest ports** | **Protocol** | **Access** |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| **方向** | **优先级** | **源** | **源端口** | **目标** | **目标端口** | **协议** | **访问**
    |'
- en: '| Inbound | `65000` | `VirtualNetwork` | `0`-`65535` | `VirtualNetwork` | `0`-`65535`
    | All | Allow |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 入站 | `65000` | `VirtualNetwork` | `0`-`65535` | `VirtualNetwork` | `0`-`65535`
    | 所有 | 允许 |'
- en: '| Inbound | `65001` | `AzureLoadBalancer` | `0`-`65535` | `0.0.0.0/0` | `0`-`65535`
    | All | Allow |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 入站 | `65001` | `AzureLoadBalancer` | `0`-`65535` | `0.0.0.0/0` | `0`-`65535`
    | 所有 | 允许 |'
- en: '| Inbound | `65500` | `0.0.0.0/0` | `0`-`65535` | `0.0.0.0/0` | `0`-`65535`
    | All | Deny |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 入站 | `65500` | `0.0.0.0/0` | `0`-`65535` | `0.0.0.0/0` | `0`-`65535` | 所有
    | 拒绝 |'
- en: '| Outbound | `65000` | `VirtualNetwork` | `0`-`65535` | `VirtualNetwork` |
    `0`-`65535` | All | Allow |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 出站 | `65000` | `VirtualNetwork` | `0`-`65535` | `VirtualNetwork` | `0`-`65535`
    | 所有 | 允许 |'
- en: '| Outbound | `0.0.0.0/0` | `0-65535` | `0`-`65535` | `Internet` | `0`-`65535`
    | All | Allow |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 出站 | `0.0.0.0/0` | `0-65535` | `0`-`65535` | `Internet` | `0`-`65535` | 所有
    | 允许 |'
- en: '| Outbound | `0.0.0.0/0` | `0-65535` | `0`-`65535` | `0.0.0.0/0` | `0`-`65535`
    | All | Deny |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| 出站 | `0.0.0.0/0` | `0-65535` | `0`-`65535` | `0.0.0.0/0` | `0`-`65535` |
    所有 | 拒绝 |'
- en: 'We can now create a network security group that accepts all rules and has the
    highest priority, and attach it to the NSG we just created:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以创建一个接受所有规则并具有最高优先级的网络安全组，并将其附加到我们刚刚创建的 NSG 上：
- en: '[PRE4]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Application security groups
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用安全组
- en: 'Application security groups are a logical collection of VM NICs, which can
    be a source of destinations in the network security group rules. They make network
    security groups even more flexible. For example, let''s assume that we have two
    VMs that will access the PostgreSQL database via `5432` ports. We want to make
    sure that only those VMs have access to the database:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 应用安全组是虚拟机 NIC 的逻辑集合，可以作为网络安全组规则中的源或目标。它们使网络安全组更加灵活。例如，假设我们有两个虚拟机，它们将通过 `5432`
    端口访问 PostgreSQL 数据库。我们希望确保只有这些虚拟机可以访问数据库：
- en: '![](img/45569aa3-6d64-4810-804b-8343bb44ff42.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/45569aa3-6d64-4810-804b-8343bb44ff42.png)'
- en: 'We can create two application security groups named `web` and `db`. Then, we
    join the VMs to the web group and the database to the db group, and create the
    following network security group rules:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以创建两个应用安全组，分别命名为 `web` 和 `db`。然后，将虚拟机加入 web 组，将数据库加入 db 组，并创建以下网络安全组规则：
- en: '| **Direction** | **Priority** | **Source** | **Source ports** | **Destination**
    | **Dest ports** | **Protocol** | **Access** |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| **方向** | **优先级** | **源** | **源端口** | **目标** | **目标端口** | **协议** | **访问**
    |'
- en: '| Inbound | 120 | * | * | `db` | `0`-`65535` | All | Deny |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| 入站 | 120 | * | * | `db` | `0`-`65535` | 所有 | 拒绝 |'
- en: '| Inbound | 110 | `web` | * | `db` | `5432` | TCP | Allow |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| 入站 | 110 | `web` | * | `db` | `5432` | TCP | 允许 |'
- en: According to this table, the priority of the second rule is higher than the
    first one. Only the web group has access to the db group with port `5432`. All
    other inbound traffic will be denied.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 根据此表，第二条规则的优先级高于第一条。只有 web 组可以访问 db 组的端口 `5432`。所有其他入站流量将被拒绝。
- en: Subnets
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 子网
- en: A subnet can be associated to a network security group. A subnet can also be
    associated with a route table so that it has specific routes.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 子网可以关联到网络安全组。子网也可以关联到路由表，以便拥有特定的路由。
- en: Just like AWS, Azure also provides route table resources for route management.
    By default, Azure already provides default routing for virtual networks and subnets.
    We don't need to worry about the routes when we use the AKS service.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 和 AWS 一样，Azure 也提供路由表资源来进行路由管理。默认情况下，Azure 已经为虚拟网络和子网提供了默认路由。我们在使用 AKS 服务时无需担心路由问题。
- en: 'When creating a virtual network, a `default` subnet will be created by default:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 创建虚拟网络时，默认会创建一个 `default` 子网：
- en: '[PRE5]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Other than the default subnet, let''s create one more subnet with the prefix
    `10.0.1.0/24`. Note that the CIDR of the subnet needs to be in the same CIDR prefix
    network block as the VNet in which the subnet is located:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 除了默认子网，我们再创建一个子网，前缀为`10.0.1.0/24`。请注意，子网的CIDR需要与所在虚拟网络的CIDR前缀相同：
- en: '[PRE6]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We can now list the subnets in this VNet:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以列出这个虚拟网络中的子网：
- en: '[PRE7]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`jq` ([https://stedolan.github.io/jq/](https://stedolan.github.io/jq/)):'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`jq` ([https://stedolan.github.io/jq/](https://stedolan.github.io/jq/))：'
- en: '`jq` is a JSON command-line processor that is installed in the cloud shell
    by default. It''s a very convenient tool to list the desired fields inside a JSON
    output. If you''re not familiar with `jq`, take a look at the manual at the following
    link: [https://stedolan.github.io/jq/manual/](https://stedolan.github.io/jq/manual/).'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`jq` 是一个 JSON 命令行处理工具，默认安装在云端 shell 中。它是一个非常方便的工具，可以列出 JSON 输出中的所需字段。如果您不熟悉
    `jq`，可以查看以下链接的手册：[https://stedolan.github.io/jq/manual/](https://stedolan.github.io/jq/manual/)。'
- en: Azure virtual machines
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure 虚拟机
- en: '**Virtual Machines** (**VM**) in Azure are like Amazon EC2s. To launch an instance,
    we have to know which VM image we want to launch. We can use the `az vm image
    list` command to list a set of images that we can use. In the following example,
    we''ll use a CentOS image:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**虚拟机** (**VM**) 在 Azure 中类似于 Amazon EC2。要启动实例，我们需要知道要启动的 VM 镜像。我们可以使用 `az
    vm image list` 命令列出可用的镜像。在以下示例中，我们将使用 CentOS 镜像：'
- en: '[PRE8]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then, we could use `az vm create` to launch our VM. Specifying `--generate-ssh-keys`
    will create an ssh for you to access:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用 `az vm create` 来启动我们的虚拟机。指定 `--generate-ssh-keys` 将为您生成一个 SSH 密钥：
- en: '[PRE9]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can see that the `publicIpAddress` of the newly created VM is `40.77.97.79`.
    Let''s connect to it with the username we specified earlier:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到新创建的虚拟机的 `publicIpAddress` 是 `40.77.97.79`。让我们用之前指定的用户名连接它：
- en: '[PRE10]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'It isn''t appropriate to allow SSH into the instance all the time. Let''s take
    a look at how to fix this. First, we''ll have to know the network interfaces that
    attach to this VM:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 不适合总是允许 SSH 访问实例。让我们来看一下如何解决这个问题。首先，我们需要了解附加到这个虚拟机的网络接口：
- en: '[PRE11]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'After we find the `id` of the NIC, we can find the associated network security
    group based on the NIC ID:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 找到 NIC 的 `id` 后，我们可以根据 NIC ID 查找关联的网络安全组：
- en: '[PRE12]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here, we can see that the name of the NSG is `newVMNSG`. Let''s list the rules
    that attach to this NSG:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到 NSG 的名称是 `newVMNSG`。让我们列出附加到这个 NSG 的规则：
- en: '[PRE13]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'There is a `default-allow-ssh` rule with the ID `/subscriptions/f825790b-ac24-47a3-89b8-9b4b3974f0d5/resourceGroups/devops/providers/Microsoft.Network/networkSecurityGroups/newVMNSG/securityRules/default-allow-ssh`
    attached to the NSG. Let''s delete it:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 有一条 `default-allow-ssh` 规则，ID 为 `/subscriptions/f825790b-ac24-47a3-89b8-9b4b3974f0d5/resourceGroups/devops/providers/Microsoft.Network/networkSecurityGroups/newVMNSG/securityRules/default-allow-ssh`，附加在
    NSG 上。我们将删除它：
- en: '[PRE14]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'As soon as we delete the rule, we can no longer access the VM via SSH:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们删除规则，就无法通过 SSH 访问虚拟机：
- en: '[PRE15]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Storage account
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存储帐户
- en: A storage account is a home for the storage objects provided by Azure storage
    solutions, such as files, tables, and disks. Users can create one or multiple
    storage accounts based on their usage.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 存储帐户是 Azure 存储解决方案提供的存储对象的容器，如文件、表格和磁盘。用户可以根据使用情况创建一个或多个存储帐户。
- en: 'There are three types of storage accounts:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 存储帐户有三种类型：
- en: General-purpose v2 accounts
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通用 v2 帐户
- en: General-purpose v1 accounts
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通用 v1 帐户
- en: Blob storage accounts
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Blob 存储帐户
- en: v1 is the legacy type of storage account and blob storage accounts only allow
    us to use blob storage. v2 accounts are the most recommended account type in Azure
    right now.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: v1 是旧版的存储帐户类型，Blob 存储帐户仅允许使用 Blob 存储。v2 帐户是目前 Azure 中最推荐的帐户类型。
- en: Load balancers
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 负载均衡器
- en: The functionality of load balancers in Azure is similar to other public cloud
    offerings, which are used to route traffic to the backend. They also provide a
    health check to the endpoint and drain the connection if they find any unhealthy
    backends. The main difference between Azure load balancers to other load balancers
    is that Azure load balancers can have multiple IP addresses and multiple ports.
    This means that AKS doesn't need to create a new load balancer when a new LoadBalancer
    Service is created. Instead, it creates a new frontend IP inside the load balancer.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 中负载均衡器的功能类似于其他公有云提供的负载均衡服务，用于将流量路由到后端。它们还会对端点进行健康检查，如果发现后端不健康，会断开连接。Azure
    负载均衡器与其他负载均衡器的主要区别在于，Azure 负载均衡器可以拥有多个 IP 地址和多个端口。这意味着当创建新的负载均衡服务时，AKS 不需要创建新的负载均衡器，而是会在负载均衡器中创建一个新的前端
    IP。
- en: Azure disks
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure 磁盘
- en: 'There are two types of Azure disks: managed disks and unmanaged disks. Before
    Azure managed disks, users had to create storage accounts to use unmanaged disks.
    A storage account might exceed the scalability target ([https://docs.microsoft.com/en-us/azure/storage/common/storage-scalability-targets](https://docs.microsoft.com/en-us/azure/storage/common/storage-scalability-targets))
    and impact the performance of I/O. With managed disks, we don''t need to create
    storage accounts by ourselves; Azure manages the accounts behind the scene. There
    are different types of performance tiers: standard HDD disks, standard SSD disks,
    and Premium SSD disks. HDD disks ([https://en.wikipedia.org/wiki/Hard_disk_drive](https://en.wikipedia.org/wiki/Hard_disk_drive))
    are a cost-effective option, while SSDs ([https://en.wikipedia.org/wiki/Solid-state_drive](https://en.wikipedia.org/wiki/Solid-state_drive))
    have better performance. For an I/O-intensive workload, the Premium tier is the
    best option. With premium SSD disks attaching to the VM, the VM can reach up to
    80,000 IOPS and 2,000 MB/s for disk throughput. Azure disks also offer four types
    of replication:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 磁盘有两种类型：托管磁盘和非托管磁盘。在使用 Azure 托管磁盘之前，用户必须创建存储帐户来使用非托管磁盘。一个存储帐户可能会超出可扩展性目标（[https://docs.microsoft.com/en-us/azure/storage/common/storage-scalability-targets](https://docs.microsoft.com/en-us/azure/storage/common/storage-scalability-targets)），从而影响
    I/O 性能。使用托管磁盘时，我们不需要自己创建存储帐户；Azure 会在后台管理这些帐户。托管磁盘有不同类型的性能级别：标准 HDD 磁盘、标准 SSD
    磁盘和高性能 SSD 磁盘。HDD 磁盘（[https://en.wikipedia.org/wiki/Hard_disk_drive](https://en.wikipedia.org/wiki/Hard_disk_drive)）是一种成本效益较高的选择，而
    SSD 磁盘（[https://en.wikipedia.org/wiki/Solid-state_drive](https://en.wikipedia.org/wiki/Solid-state_drive)）性能更佳。对于
    I/O 密集型工作负载，高性能 SSD 是最佳选择。使用高性能 SSD 磁盘附加到虚拟机时，虚拟机的磁盘 IOPS 可达到 80,000，磁盘吞吐量可达 2,000
    MB/s。Azure 磁盘还提供四种类型的复制：
- en: '**Locally-Redundant Storage (LRS)**: Data is only persisted in one single zone'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**本地冗余存储 (LRS)**：数据仅保存在一个单独的区域'
- en: '**Zone-Redundant Storage (ZRS)**: Data is persisted across three zones'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**区域冗余存储 (ZRS)**：数据跨三个区域持久化'
- en: '**Geo-Redundant Storage (GRS)**: Cross-regional replication'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**地理冗余存储 (GRS)**：跨区域复制'
- en: '**Read-Access Geo-Redundant Storage (RA-GRS)**: Cross-regional replication
    with read replica'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**读取访问地理冗余存储 (RA-GRS)**：跨区域复制与读取副本'
- en: Azure Kubernetes service
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure Kubernetes 服务
- en: 'Azure Kubernetes service is a hosted Kubernetes service in Azure. A cluster
    contains a set of nodes (such as Azure VMs). Just like a normal Kubernetes node,
    kube-proxy and kubelet are installed on the node. kube-proxy, which communicates
    with the Azure virtual NIC, manages the route in and out for services and pods.
    kubelet receives the request from the master, schedules the pods, and reports
    the metrics. In Azure, we could mount various Azure storage options such as Azure
    disk and Azure files as the **Persistent Volume** (**PV**) for persisting the
    data for containers. An illustration of this is shown here:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Kubernetes 服务是 Azure 中的托管 Kubernetes 服务。一个集群包含一组节点（例如 Azure 虚拟机）。就像普通的
    Kubernetes 节点一样，kube-proxy 和 kubelet 会安装在节点上。kube-proxy 与 Azure 虚拟 NIC 通信，管理服务和
    Pod 的进出路由。kubelet 接收来自主节点的请求，调度 Pod，并报告指标。在 Azure 中，我们可以将各种 Azure 存储选项（如 Azure
    磁盘和 Azure 文件）挂载为 **持久卷**（**PV**），用于持久化容器的数据。下面是该示例的说明：
- en: '![](img/27c939a1-a801-42c4-8239-1a2f2d8fc04f.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/27c939a1-a801-42c4-8239-1a2f2d8fc04f.png)'
- en: Want to build a cluster from scratch?
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 想从头开始构建集群吗？
- en: If you would prefer to build a cluster on your own, be sure to check out the
    AKS-engine project ([https://github.com/Azure/aks-engine](https://github.com/Azure/aks-engine)),
    which builds Kubernetes infrastructure in Azure using the Azure resource manager.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你更倾向于自己搭建一个集群，请务必查看 AKS-engine 项目（[https://github.com/Azure/aks-engine](https://github.com/Azure/aks-engine)），该项目通过
    Azure 资源管理器在 Azure 中构建 Kubernetes 基础设施。
- en: Setting up your first Kubernetes cluster on AKS
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置你的第一个 Kubernetes 集群在 AKS 上
- en: 'An AKS cluster can be launched in its own VPC (basic networking configuration)
    or in an existing VPC (advanced networking configuration); both can be launched
    via Azure CLI. There are a set of arguments that we can specify during cluster
    creation, which include the following:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 AKS 集群可以在其自己的 VPC（基本网络配置）中启动，或在现有的 VPC（高级网络配置）中启动；两者都可以通过 Azure CLI 启动。我们可以在创建集群时指定一组参数，其中包括以下内容：
- en: '| **Arguments** | **Description** |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| **参数** | **描述** |'
- en: '| `--name` | The cluster name. |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| `--name` | 集群名称。 |'
- en: '| `--enable-addons` | Enables the Kubernetes addons module in a comma-separated
    list. |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| `--enable-addons` | 启用 Kubernetes 附加组件模块，并以逗号分隔的列表形式提供。 |'
- en: '| `--generate-ssh-keys` | Generates SSH key files if they do not already exist.
    |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| `--generate-ssh-keys` | 如果 SSH 密钥文件不存在，则生成 SSH 密钥文件。 |'
- en: '| `--node-count` | The number of nodes. The default value is three. |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| `--node-count` | 节点的数量。默认值为三个。 |'
- en: '| `--network-policy` | (Preview) Enables or disables the network policy. The
    default is that it is disabled. |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| `--network-policy` | （预览版）启用或禁用网络策略。默认值为禁用。 |'
- en: '| `--vnet-subnet-id` | The subnet ID in a VNet to deploy the cluster. |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| `--vnet-subnet-id` | 在 VNet 中部署集群的子网 ID。 |'
- en: '| `--node-vm-size` | The size of the VMs. The default is `Standard_DS2_v2`.
    |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| `--node-vm-size` | 虚拟机的大小。默认值为 `Standard_DS2_v2`。 |'
- en: '| `--service-cidr` | A CIDR notation IP range from which to assign service
    cluster IPs. |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| `--service-cidr` | 从中分配服务集群 IP 的 CIDR 表示法 IP 范围。 |'
- en: '| `--max-pods` | The default is `110` or `30` for an advanced network configuration
    (using an existing VNet). |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| `--max-pods` | 默认值为 `110`，或者对于高级网络配置（使用现有的 VNet）为 `30`。 |'
- en: 'In the following example, we''ll first create a cluster with two nodes and
    enable `addons` for monitoring to enable Azure monitor for the cluster, and `http_application_routing`
    to enable HTTP application routing for ingress:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们将首先创建一个包含两个节点的集群，并启用用于监控的 `addons` 以启用 Azure 监控，此外还启用 `http_application_routing`
    以为入口启用 HTTP 应用程序路由：
- en: '[PRE16]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'After the cluster is launched, we can use the get-credentials subcommand to
    configure our `kubeconfig`. The context name will be the cluster name, which in
    this case is `myAKS`:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 集群启动后，我们可以使用 get-credentials 子命令来配置我们的 `kubeconfig`。上下文名称将是集群名称，在此情况下为 `myAKS`：
- en: '[PRE17]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Let''s see whether the nodes have joined the cluster. Make sure that all of
    the nodes are in the `Ready` state:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看节点是否已加入集群。确保所有节点都处于 `Ready` 状态：
- en: '[PRE18]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Let''s try to deploy a `ReplicaSet` via the example we used in `Chapter3`:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试通过我们在 `Chapter3` 中使用的示例来部署一个 `ReplicaSet`：
- en: '[PRE19]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Create a service to access the `ReplicaSet`. We will use the `chapter3/3-2-3_Service/3-2-3_service.yaml`
    file and add the `type: LoadBalancer` line in the `spec`:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '创建一个服务来访问 `ReplicaSet`。我们将使用 `chapter3/3-2-3_Service/3-2-3_service.yaml` 文件，并在
    `spec` 中添加 `type: LoadBalancer` 行：'
- en: '[PRE20]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We can then watch the service until the `EXTERNAL-IP` changes to an external
    IP address. Here, we get `40.122.78.184`:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以查看该服务，直到 `EXTERNAL-IP` 变为外部 IP 地址。在这里，我们获得了 `40.122.78.184`：
- en: '[PRE21]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Let's visit the site!
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们访问这个站点！
- en: '![](img/261dd126-0f77-457d-bae6-f0bfb5885faf.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/261dd126-0f77-457d-bae6-f0bfb5885faf.png)'
- en: In the preceding example, we have demonstrated how to deploy an nginx service
    to AKS and use its load balancer. How about if we already have a set of resources
    in an existing VNet, and we want to launch an AKS cluster inside the VNet to communicate
    with existing resources? Then, we need to use advanced networking in AKS. The
    fundamental difference between basic and advanced networking is that basic networking
    uses kubenet ([https://github.com/vplauzon/aks/tree/master/aks-kubenet](https://github.com/vplauzon/aks/tree/master/aks-kubenet))
    as a network plugin, while advanced networking uses the Azure CNI plugin ([https://github.com/Azure/azure-container-networking/tree/master/cni](https://github.com/Azure/azure-container-networking/tree/master/cni)). Compared
    to basic networking, advanced networking has more limitations. For example, the
    default maximum number of pods on a node is 30, instead of 110\. This is because
    only 30 additional IP addresses are configured by Azure CNI for the NIC on a node.
    The pod IPs are the secondary IPs on the NICs, so the private IPs are assigned
    the pods that are accessible inside the virtual network. When using kubenet, the
    cluster IPs are assigned to the pods, which don't belong to the virtual network
    but are instead managed by AKS. The cluster IPs won't be accessible outside of
    the cluster. Unless you have special requirements, such as if you want to gain
    access to the pods from outside the cluster or you want connectivity between existing
    resources and the cluster, the basic networking configuration should be able to
    fulfill most scenarios.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们展示了如何将nginx服务部署到AKS并使用其负载均衡器。如果我们已经在现有的VNet中拥有一组资源，并且希望在该VNet内启动一个AKS集群与现有资源进行通信，该怎么办呢？那么，我们需要在AKS中使用高级网络配置。基本网络与高级网络的根本区别在于，基本网络使用kubenet（[https://github.com/vplauzon/aks/tree/master/aks-kubenet](https://github.com/vplauzon/aks/tree/master/aks-kubenet)）作为网络插件，而高级网络使用Azure
    CNI插件（[https://github.com/Azure/azure-container-networking/tree/master/cni](https://github.com/Azure/azure-container-networking/tree/master/cni)）。与基本网络相比，高级网络有更多的限制。例如，节点上默认的最大pod数量是30，而不是110。这是因为Azure
    CNI仅为节点上的NIC配置了30个附加IP地址。Pod IP是NIC上的二级IP，因此私有IP被分配给在虚拟网络内部可访问的Pods。当使用kubenet时，集群IP分配给Pods，这些IP不属于虚拟网络，而是由AKS管理。集群IP无法在集群外部访问。除非你有特殊需求，比如需要从集群外部访问pods，或希望现有资源与集群之间建立连接，否则基本网络配置应该能够满足大多数场景。
- en: 'Let''s see how we can create an AKS cluster with advanced networking. We need
    to specify the existing subnet for the cluster. First, let''s list the subnet
    IDs in the VNet `devops-vnet` file that we created earlier:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何创建一个具有高级网络配置的AKS集群。我们需要为集群指定现有的子网。首先，让我们列出之前创建的`devops-vnet`文件中的子网ID：
- en: '[PRE22]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Let''s use the default subnet. Note that one subnet should only locate one
    AKS cluster in advanced networking. Also, the service CIDR we specified, which
    is used to assign cluster IPs, cannot overlap the subnet CIDR in which the cluster
    is located:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用默认子网。请注意，在高级网络配置中，一个子网只能定位一个AKS集群。此外，我们指定的服务CIDR（用于分配集群IP）不能与集群所在子网的CIDR重叠：
- en: '[PRE23]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Remember to configure `kubeconfig`:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 记得配置`kubeconfig`：
- en: '[PRE24]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: If we repeat the preceding code for `chapter3/3-2-3_Service/3-2-3_rs1.yaml`
    and `chapter3/3-2-3_Service/3-2-3_service.yaml`, we should be able to achieve
    the same result.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们对`chapter3/3-2-3_Service/3-2-3_rs1.yaml`和`chapter3/3-2-3_Service/3-2-3_service.yaml`重复执行上述代码，我们应该能够获得相同的结果。
- en: Node pools
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 节点池
- en: Just like GKE, a node pool is a group of VMs of the same size. At the time of
    writing this book, multiple node pool support is on its way. Follow the discussion
    at [https://github.com/Azure/AKS/issues/759](https://github.com/Azure/AKS/issues/759),
    or watch for the official announcement.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 就像GKE一样，节点池是相同大小的虚拟机组。在撰写本书时，支持多个节点池的功能正在开发中。请关注讨论：[https://github.com/Azure/AKS/issues/759](https://github.com/Azure/AKS/issues/759)，或等待官方公告。
- en: Azure offers virtual machine scale sets as its autoscaling group solution. In
    Kubernetes 1.12, VMSS support became generally available. With VMSS, the VMs can
    be scaled out by VM metrics. For more information, check out the official documentation: [https://kubernetes.io/blog/2018/10/08/support-for-azure-vmss-cluster-autoscaler-and-user-assigned-identity/](https://kubernetes.io/blog/2018/10/08/support-for-azure-vmss-cluster-autoscaler-and-user-assigned-identity/)[.](https://kubernetes.io/blog/2018/10/08/support-for-azure-vmss-cluster-autoscaler-and-user-assigned-identity/)
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 提供了虚拟机规模集作为其自动扩展组解决方案。在 Kubernetes 1.12 中，VMSS 支持已普遍可用。通过 VMSS，VM 可以根据
    VM 指标进行扩展。欲了解更多信息，请查看官方文档：[https://kubernetes.io/blog/2018/10/08/support-for-azure-vmss-cluster-autoscaler-and-user-assigned-identity/](https://kubernetes.io/blog/2018/10/08/support-for-azure-vmss-cluster-autoscaler-and-user-assigned-identity/)。
- en: Cluster upgrade
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集群升级
- en: Before you upgrade the cluster, make sure your subscription has enough resources,
    since nodes will be replaced by rolling deployments. The additional node will
    be added to the cluster. To check the quota limit, use the `az vm list-usage --location
    $location` command.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在升级集群之前，确保你的订阅有足够的资源，因为节点将通过滚动部署进行替换。额外的节点将被添加到集群中。要检查配额限制，请使用 `az vm list-usage
    --location $location` 命令。
- en: 'Let''s see which Kubernetes version we''re using:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看当前使用的是哪个 Kubernetes 版本：
- en: '[PRE25]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The Azure CLI provides the `get-upgrades` subcommand to check which version
    the cluster can upgrade to:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: Azure CLI 提供了 `get-upgrades` 子命令，用于检查集群可以升级到哪个版本：
- en: '[PRE26]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This shows that we can upgrade to versions 1.10.8 and 1.10.9\. In Azure, minor
    versions cannot be skipped, meaning we can''t upgrade from 1.9.11 to 1.11.x. We
    have to upgrade the cluster to 1.10 first, and then upgrade to 1.11\. Upgrading
    from AKS is extremely easy, just like from GKE. Let''s say that we want to upgrade
    to 1.10.9:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示我们可以升级到版本 1.10.8 和 1.10.9。Azure 中不允许跳过小版本，意味着我们不能从 1.9.11 升级到 1.11.x。我们必须先将集群升级到
    1.10，然后再升级到 1.11。从 AKS 升级非常简单，就像从 GKE 升级一样。假设我们想要升级到 1.10.9：
- en: '[PRE27]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'After the operation is done, we can check the current version of the cluster.
    The cluster has now been upgraded to the desired version:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 操作完成后，我们可以检查集群的当前版本。集群现在已升级到所需的版本：
- en: '[PRE28]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The nodes should be upgraded to 1.10.9 as well:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 节点也应该升级到 1.10.9：
- en: '[PRE29]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Monitoring and logging
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控与日志
- en: We deployed the monitoring addons when we created the cluster. This lets us
    observe cluster metrics and logs easily via Azure monitoring. Let's visit the
    Kubernetes services in the Azure portal. You'll find the Monitoring tag with the
    insights, metrics, and logs sub-tabs.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在创建集群时部署了监控插件。这让我们可以通过 Azure 监控轻松观察集群度量标准和日志。让我们访问 Azure 门户中的 Kubernetes 服务。你会看到带有见解、度量标准和日志子标签的“监控”标签。
- en: 'The insights page shows the general cluster metrics, such as the node CPU,
    the memory utilization, and the node''s general health:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 见解页面显示了集群的一般度量标准，如节点 CPU、内存使用率和节点的总体健康状况：
- en: '![](img/f57daa80-6e68-48f2-a061-29c55561bfad.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f57daa80-6e68-48f2-a061-29c55561bfad.png)'
- en: 'You can also observe the container information from insights:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以从见解中观察到容器信息：
- en: '![](img/6db7761b-7654-460f-8292-715b38dcc1eb.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6db7761b-7654-460f-8292-715b38dcc1eb.png)'
- en: 'You can find all the resource metrics that are supported on the Metrics page.
    For the AKS cluster, it''ll show some core metrics ([https://kubernetes.io/docs/tasks/debug-application-cluster/core-metrics-pipeline/](https://kubernetes.io/docs/tasks/debug-application-cluster/core-metrics-pipeline/)).
    This is handy because it means we don''t need to launch another monitoring system,
    such as Prometheus:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在度量页面找到所有支持的资源度量标准。对于 AKS 集群，它会显示一些核心度量标准（[https://kubernetes.io/docs/tasks/debug-application-cluster/core-metrics-pipeline/](https://kubernetes.io/docs/tasks/debug-application-cluster/core-metrics-pipeline/)）。这很方便，因为它意味着我们无需启动另一个监控系统，如
    Prometheus：
- en: '![](img/3bf0080e-55e5-4b5f-bc9b-ff980df4373a.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3bf0080e-55e5-4b5f-bc9b-ff980df4373a.png)'
- en: 'On the logs page, you can find cluster logs in Azure log analytics. You can
    run a query to search the logs via the supported syntax. For more information,
    you can find the Azure monitoring documentation at [https://docs.microsoft.com/en-us/azure/azure-monitor/log-query/log-query-overview](https://docs.microsoft.com/en-us/azure/azure-monitor/log-query/log-query-overview):'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在日志页面，你可以在 Azure 日志分析中找到集群日志。你可以通过支持的语法运行查询来搜索日志。欲了解更多信息，可以参考 Azure 监控文档：[https://docs.microsoft.com/en-us/azure/azure-monitor/log-query/log-query-overview](https://docs.microsoft.com/en-us/azure/azure-monitor/log-query/log-query-overview)：
- en: '![](img/04d132c3-f1d5-4c96-bd35-2ae51a05f7d2.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](img/04d132c3-f1d5-4c96-bd35-2ae51a05f7d2.png)'
- en: Kubernetes cloud provider
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes 云提供商
- en: Just like other cloud providers, the cloud controller manager for Azure ([https://github.com/kubernetes/cloud-provider-azure](https://github.com/kubernetes/cloud-provider-azure))
    implements a bunch of integrations with Kubernetes. Azure cloud controller manager
    interacts with Azure and provides a seamless user experience.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 就像其他云服务提供商一样，Azure的云控制器管理器（[https://github.com/kubernetes/cloud-provider-azure](https://github.com/kubernetes/cloud-provider-azure)）实现了与Kubernetes的一系列集成。Azure云控制器管理器与Azure交互，并提供无缝的用户体验。
- en: Role-based access control
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于角色的访问控制
- en: AKS is integrated with Azure active directory ([https://azure.microsoft.com/en-ca/services/active-directory/](https://azure.microsoft.com/en-ca/services/active-directory/))
    via OpenID connect tokens ([https://kubernetes.io/docs/reference/access-authn-authz/authentication/#openid-connect-tokens](https://kubernetes.io/docs/reference/access-authn-authz/authentication/#openid-connect-tokens)).
    The **Role-Based Access Control** (**RBAC**) feature can only be enabled during
    cluster creation, so let's start over to create an RBAC-enabled cluster.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: AKS通过OpenID连接令牌（[https://kubernetes.io/docs/reference/access-authn-authz/authentication/#openid-connect-tokens](https://kubernetes.io/docs/reference/access-authn-authz/authentication/#openid-connect-tokens)）与Azure
    Active Directory（[https://azure.microsoft.com/en-ca/services/active-directory/](https://azure.microsoft.com/en-ca/services/active-directory/)）集成。**基于角色的访问控制**（**RBAC**）功能只能在集群创建时启用，因此我们从头开始创建一个启用RBAC的集群。
- en: 'Before creating the cluster, we''ll have to prepare two application registrations
    in the Azure active directory first. The first acts as a server for the users''
    group membership. The second is like a client that integrates with kubectl. Let''s
    go to the Azure active registry service in the Azure portal first. Go to the Properties
    tab and record the Directory ID. We''ll need this later when we create the cluster:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建集群之前，我们需要先在Azure Active Directory中准备两个应用注册。第一个作为用户组成员资格的服务器，第二个作为与kubectl集成的客户端。我们先进入Azure门户中的Azure
    Active Directory服务，进入“属性”标签并记录“目录ID”。稍后在创建集群时我们将需要这个ID：
- en: '![](img/6177fa43-1dab-4b5e-926b-cc4504dd4f50.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6177fa43-1dab-4b5e-926b-cc4504dd4f50.png)'
- en: 'Let''s go to the Application registrations of the Azure active registry service
    in the Azure portal first. The tab on the side shows two application registration
    options. One is the original design and the other is the preview version for the
    new console. Their functionalities are basically the same. We''ll show the GA
    version first and the preview version after:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们先进入Azure门户中的Azure Active Directory服务的应用注册页面。侧边标签显示了两个应用注册选项。一个是原始设计，另一个是新控制台的预览版本。它们的功能基本相同。我们首先展示GA版本，之后再展示预览版本：
- en: '![](img/e73b3c05-b8e1-41c8-bf3b-a18d59701a1a.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e73b3c05-b8e1-41c8-bf3b-a18d59701a1a.png)'
- en: In the App registrations page, click New application registration. Add a name
    with any URL.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用注册页面，点击“新建应用注册”。添加一个名称和任何URL。
- en: You can also try an operation via `az ad app create --display-name myAKSAD --identifier-uris
    http://myAKSAD`.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过 `az ad app create --display-name myAKSAD --identifier-uris http://myAKSAD`
    尝试操作。
- en: 'Here, we use `myAKSAD` as the name. After creation, we record the APPLICATION
    ID first. Here, we get `c7d828e7-bca0-4771-8f9d-50b9e1ea0afc`. After that, click
    Manifest and change the `groupMemebershipClaims` to `All`, which will get the
    group claims in the JWT token for all users that belong:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用 `myAKSAD` 作为名称。创建后，首先记录APPLICATION ID。在这里，我们得到 `c7d828e7-bca0-4771-8f9d-50b9e1ea0afc`。之后，点击清单并将
    `groupMemebershipClaims` 更改为 `All`，这将使所有属于该组的用户在JWT令牌中获得组声明：
- en: '![](img/d0b69bc5-c68d-4f4e-8d9b-a2a2ed96c47c.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d0b69bc5-c68d-4f4e-8d9b-a2a2ed96c47c.png)'
- en: 'After saving the settings, go to these Settings page then the Keys page to
    create a key. Here, we specified expires as one year. This value was generated
    by the portal directly. We''ll need this password later when we create the cluster:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 保存设置后，前往这些设置页面，然后进入密钥页面创建一个密钥。在这里，我们指定过期时间为一年。这个值是由门户网站直接生成的。稍后在创建集群时，我们将需要这个密码：
- en: '![](img/740c5961-a7e7-442a-8e95-dd235a007df4.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![](img/740c5961-a7e7-442a-8e95-dd235a007df4.png)'
- en: 'Next, we''ll define a set of applications and delegated permissions for this
    registration. Hit the Required permissions tab and click Add, before selecting
    Microsoft Graph. Here, we''ll select **Read directory data** under the Application
    permissions category andSign in and read user profile and Read directory dat**a**
    under the delegated permissions so that the server can read the directory data
    and verify the users. After clicking the Save button, we''ll see the following
    screen in the Required permissions page:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将为此注册定义一组应用程序和委派权限。点击“必需的权限”标签，然后点击“添加”，选择 Microsoft Graph。在这里，我们将在应用程序权限类别下选择**读取目录数据**，在委派权限下选择“登录并读取用户资料”和“读取目录数据”，这样服务器就可以读取目录数据并验证用户。点击“保存”按钮后，我们将在“必需的权限”页面看到以下界面：
- en: '![](img/d9a1efc2-4a7e-4d20-bd0f-568636b2caad.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d9a1efc2-4a7e-4d20-bd0f-568636b2caad.png)'
- en: As the admin, we can grant permission for all users in this directory by clicking
    the Grant permission button. This will make a window pop up that will double-check
    this with you. Click Yes to continue.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 作为管理员，我们可以通过点击“授予权限”按钮为该目录中的所有用户授予权限。这将弹出一个窗口，向你再次确认。点击“是”继续。
- en: 'It''s now time to create a second application registration for the client.
    The name we used here is `myAKSADClient`. Record its Application ID after creation.
    Here, we get `b4309673-464e-4c95-adf9-afeb27cc8d4c`:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候为客户端创建第二个应用程序注册了。我们在这里使用的名称是`myAKSADClient`。创建后记下它的应用程序ID。这里，我们获得了`b4309673-464e-4c95-adf9-afeb27cc8d4c`：
- en: '![](img/f5cb6563-0fa8-429b-8eba-a2643c58dd88.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f5cb6563-0fa8-429b-8eba-a2643c58dd88.png)'
- en: 'For the required permissions, the client just needs to access the application,
    search the delegated permissions, and find the Access permission with the display
    name that you created for the server. Don''t forget to hit the Grant permission
    button after you are done:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 对于必需的权限，客户端只需访问应用程序，搜索委派权限，然后找到你为服务器创建的访问权限的显示名称。完成后别忘了点击“授予权限”按钮：
- en: '![](img/87d75bf6-a5aa-47d6-a95b-4af0091e0f19.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![](img/87d75bf6-a5aa-47d6-a95b-4af0091e0f19.png)'
- en: 'Right now, it''s time to create our AKS cluster with Azure AD integration.
    Make sure that you have recorded the following information from the previous operations:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候使用 Azure AD 集成创建我们的 AKS 集群了。确保你已记录以下来自先前操作的信息：
- en: '| **Information we recorded** | **Corresponding argument in aks create** |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| **我们记录的信息** | **aks create 中对应的参数** |'
- en: '| The server application ID | `--aad-server-app-id` |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| 服务器应用程序 ID | `--aad-server-app-id` |'
- en: '| The server application key (password) | `--aad-server-app-secret` |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| 服务器应用程序密钥（密码） | `--aad-server-app-secret` |'
- en: '| The client application ID | `--aad-client-app-id` |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| 客户端应用程序 ID | `--aad-client-app-id` |'
- en: '| The directory ID | `--aad-tenant-id` |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| 目录 ID | `--aad-tenant-id` |'
- en: 'It is now time to launch the cluster:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候启动集群了：
- en: '[PRE30]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In Kubernetes, a role binding or a cluster role binding binds the role to a
    group of users. A role or cluster role defines a set of permissions.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 中，角色绑定或集群角色绑定将角色绑定到一组用户。角色或集群角色定义了一组权限。
- en: 'After the cluster is successfully launched, to integrate with OpenID, we''ll
    have to create the role binding or cluster role binding first. Here, we''ll use
    the existing cluster role in the cluster, which is `cluster-admin`. We''ll bind
    the users to the `cluster-admin` cluster role so that the users can be authenticated
    and act as cluster admins:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在集群成功启动后，为了与 OpenID 集成，我们需要先创建角色绑定或集群角色绑定。在这里，我们将使用集群中现有的集群角色，即`cluster-admin`。我们将用户绑定到`cluster-admin`集群角色，以便用户可以通过身份验证并充当集群管理员：
- en: '[PRE31]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'For a single user, we''ll have to find the username. You can find the Object
    ID for the target user under the users page in the Azure AD portal:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 对于单个用户，我们需要找到用户名。你可以在 Azure AD 门户中的“用户”页面找到目标用户的对象 ID：
- en: '![](img/5e26469b-53ee-4008-bc31-5b79e6916f1a.png)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5e26469b-53ee-4008-bc31-5b79e6916f1a.png)'
- en: 'Use user subjects and specify the Object ID as the name, as shown here:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 使用用户主体并指定对象 ID 作为名称，如下所示：
- en: '[PRE32]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'After that, we can start over to access the cluster resources, as shown here:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们可以重新开始访问集群资源，如下所示：
- en: '[PRE33]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'It seems like we need to log in before listing any resources. Go to the [https://microsoft.com/devicelogin](https://microsoft.com/devicelogin) page and
    input the code, as the prompt suggests:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来我们需要登录才能列出任何资源。请访问[https://microsoft.com/devicelogin](https://microsoft.com/devicelogin)页面并输入提示中的代码：
- en: '![](img/03a87e70-3c62-41ed-b9b2-055dbcbd4c2c.png)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![](img/03a87e70-3c62-41ed-b9b2-055dbcbd4c2c.png)'
- en: Log in to your Microsoft account and return to the terminal. The integration
    looks great!
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 登录到你的Microsoft账户并返回终端，集成看起来非常棒！
- en: '[PRE34]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Rather than specifying a set of users, you could choose to specify users as
    a group via the Azure AD group object ID. Replace the subject in the cluster role
    binding configuration so that all the users in that group will have cluster admin
    access:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是指定一组用户，你可以选择通过Azure AD组对象ID来指定用户。替换集群角色绑定配置中的主题，使该组中的所有用户都能获得集群管理员权限：
- en: '[PRE35]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: StorageClass
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存储类
- en: 'When we launched AKS, it created two default storage classes for us, default
    and managed-premium:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们启动AKS时，它会为我们创建两个默认存储类：default和managed-premium：
- en: '[PRE36]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'If we take a look at the details of these storage classes, we find that they''re
    of the `Standard_LRS` and `Premium_LRS` types:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看这些存储类的详细信息，会发现它们分别是`Standard_LRS`和`Premium_LRS`类型：
- en: '[PRE37]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'We can also create our own storage class to create persistent volumes dynamically.
    Let''s say that we want to create a two-zone redundant storage with standard and
    premium types. We need to specify the location and the `skuName`:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以创建自己的存储类来动态创建持久卷。假设我们想要创建一个具有标准和高级类型的双区域冗余存储，我们需要指定位置和`skuName`：
- en: '[PRE38]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The mapping of the `skuName` field and the storage types is shown here:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '`skuName`字段和存储类型的映射如下所示：'
- en: '| **Class** | **Replication** | **skuName** |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| **Class** | **Replication** | **skuName** |'
- en: '| Premium | LRS | `Premium_LRS` |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| Premium | LRS | `Premium_LRS` |'
- en: '| Premium | ZRS | `Premium_ZRS` |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| Premium | ZRS | `Premium_ZRS` |'
- en: '| Standard | GRS | `Standard_GRS` |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| Standard | GRS | `Standard_GRS` |'
- en: '| Standard | LRS | `Standard_LRS` |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
  zh: '| Standard | LRS | `Standard_LRS` |'
- en: '| Standard | RAGRS | `Standard_RAGRS` |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
  zh: '| Standard | RAGRS | `Standard_RAGRS` |'
- en: '| Standard | ZRS | `Standard_ZRS` |'
  id: totrans-237
  prefs: []
  type: TYPE_TB
  zh: '| Standard | ZRS | `Standard_ZRS` |'
- en: L4 LoadBalancer
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: L4负载均衡器
- en: When you create an AKS cluster in basic networking, Azure will provision a load
    balancer called kubernetes in a dedicated resource group. When we create a service
    with a LoadBalancer type, AKS will provision a frontend IP and link to the service
    object automatically. This is how we could access `nginx` using external IPs earlier
    in this chapter. There are a set of annotations you can set in your service, and
    the Azure cloud controller will provision it based on the specified annotations.
    You can find a list of supported annotations here: [https://github.com/kubernetes/kubernetes/blob/master/pkg/cloudprovider/providers/azure/azure_loadbalancer.go](https://github.com/kubernetes/kubernetes/blob/master/pkg/cloudprovider/providers/azure/azure_loadbalancer.go).
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在基础网络配置中创建AKS集群时，Azure会在一个专用资源组中配置一个名为kubernetes的负载均衡器。当我们创建一个类型为LoadBalancer的服务时，AKS会自动配置一个前端IP并将其与服务对象关联。这就是我们在本章之前使用外部IP访问`nginx`的方式。你可以在服务中设置一组注解，Azure云控制器会根据指定的注解来配置它。你可以在这里找到支持的注解列表：[https://github.com/kubernetes/kubernetes/blob/master/pkg/cloudprovider/providers/azure/azure_loadbalancer.go](https://github.com/kubernetes/kubernetes/blob/master/pkg/cloudprovider/providers/azure/azure_loadbalancer.go)。
- en: Ingress controller
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入口控制器
- en: 'Azure supports HTTP application routing as an addon (the source code can be
    found at the following link: [https://github.com/Azure/application-gateway-kubernetes-ingress](https://github.com/Azure/application-gateway-kubernetes-ingress)). Earlier,
    we created the cluster with the `http_application_routing under --enable-addons argument` argument*.* AKS
    would have deployed a set of services to support ingress:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: Azure支持将HTTP应用程序路由作为附加组件（源代码可以在以下链接找到：[https://github.com/Azure/application-gateway-kubernetes-ingress](https://github.com/Azure/application-gateway-kubernetes-ingress)）。之前，我们使用`http_application_routing
    under --enable-addons argument`参数创建了集群。*AKS会部署一组服务以支持入口控制器*：
- en: '[PRE39]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: You can also enable ingress controller via the `az aks enable-addons` command after
    the cluster is created.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过`az aks enable-addons`命令在集群创建后启用入口控制器。
- en: 'We can reuse the ingress examples from `Chapter6`. What we have to do is specify `annotationkubernetes.io/ingress.class:
    addon-http-application-routing` in the `ingress` resource and the host name that
    AKS created for routing your HTTP application. You can find the host name in the `addonProfiles.httpApplicationRouting.config.HTTPApplicationRoutingZoneName`
    session when you create or list your cluster, or by using the `az aks show --query`
    command to search for it:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '我们可以复用`Chapter6`中的入口示例。我们需要做的就是在`ingress`资源中指定`annotationkubernetes.io/ingress.class:
    addon-http-application-routing`，以及AKS为你路由HTTP应用程序所创建的主机名。你可以在创建或列出集群时，在`addonProfiles.httpApplicationRouting.config.HTTPApplicationRoutingZoneName`会话中找到主机名，或者通过使用`az
    aks show --query`命令进行查找：'
- en: '[PRE40]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Summary
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: Microsoft Azure is a powerful and enterprise-grade cloud computing platform.
    Beside AKS, it also provides various services in different fields, such as analytics,
    virtual reality, and much more. In this chapter, we touched the surface of Azure
    virtual network, subnets, and load balancing. We also learned how to deploy and
    administrate the Kubernetes service in Azure. We walked through how Azure provides
    Kubernetes resources via the cloud controller manager for Azure. We got to know
    how the cloud controller manager for Azure provides a seamless experience for
    Azure users, such as by creating an Azure load balancer when a LoadBalancer service
    in Kubernetes is requested or pre-creating an Azure disk storage class.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 微软 Azure 是一个强大且面向企业的云计算平台。除了 AKS，它还提供了多个领域的各种服务，如分析、虚拟现实等。在本章中，我们简单介绍了 Azure
    虚拟网络、子网和负载均衡。我们还学习了如何在 Azure 中部署和管理 Kubernetes 服务。我们详细了解了 Azure 如何通过云控制器管理器提供
    Kubernetes 资源。我们了解到，Azure 的云控制器管理器为 Azure 用户提供了无缝的体验，例如在请求 Kubernetes 中的 LoadBalancer
    服务时创建 Azure 负载均衡器，或预先创建 Azure 磁盘存储类。
- en: This is the last chapter of this book. We have tried to walk through both basic
    and more advanced concepts in this Kubernetes learning journey. Because Kubernetes
    is evolving rapidly, we strongly encourage you to join the Kubernetes community
    ([https://kubernetes.io/community/](https://kubernetes.io/community/)) to get
    inspired, discuss, and contribute!
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本书的最后一章。在这段 Kubernetes 学习旅程中，我们已经尝试涵盖了基础和更高级的概念。由于 Kubernetes 正在快速发展，我们强烈鼓励你加入
    Kubernetes 社区 ([https://kubernetes.io/community/](https://kubernetes.io/community/))，以获得灵感、进行讨论并做出贡献！

- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Architecting an Observability Platform
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 架构化一个可观察性平台
- en: 'This chapter covers several topics related to **architecting** a great observability
    platform for teams in an organization to use. We will discuss how to structure
    data into **domains** to help find relevant data quickly in even the largest organizations,
    and how that relates to other aspects of the business, such as financial reporting
    and **business intelligence** (**BI**). Then, we will discuss architecting the
    four main system components of an observability platform: **data production**,
    **data collection**, **data storage**, and data uses such as **visualization**
    and **alerting**. We will cover how to link the architecture with the IaC tools
    that were discussed in [*Chapter 10*](B18277_10.xhtml#_idTextAnchor204). After
    that, we will discuss how to use various easily available tools to validate a
    design with local testing. These tools can also be used in CI/CD pipelines to
    validate the platform after a change has been implemented. We will discuss the
    **role-based access controls** (**RBACs**) that are implemented in Grafana and
    how to set them up to provide least-privilege access. Finally, we will briefly
    discuss how to architect connections with other systems that make use of the same
    telemetry, such as **security information and event management** (**SIEM**) or
    BI systems. This chapter is aimed at a senior technical audience who has experience
    in architecting platforms and systems.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涉及几个与**架构化**组织中团队可使用的优秀可观察性平台相关的主题。我们将讨论如何将数据结构化为**领域**，以帮助即使在最大型的组织中也能快速找到相关数据，以及这如何与其他业务方面（如财务报告和**商业智能**（**BI**））相关。接下来，我们将讨论架构化可观察性平台的四个主要系统组件：**数据生产**、**数据收集**、**数据存储**以及数据使用，如**可视化**和**警报**。我们还将讨论如何将架构与[*第10章*](B18277_10.xhtml#_idTextAnchor204)中讨论的IaC工具相连接。之后，我们将讨论如何使用各种易得的工具通过本地测试验证设计。这些工具还可以在CI/CD管道中使用，以在实施更改后验证平台。我们将讨论在Grafana中实现的**基于角色的访问控制**（**RBAC**），以及如何设置它们以提供最小权限访问。最后，我们将简要讨论如何架构与其他系统的连接，这些系统利用相同的遥测数据，如**安全信息和事件管理**（**SIEM**）或BI系统。本章面向有平台和系统架构经验的高级技术读者。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下几个主要主题：
- en: Architecting your observability platform
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 架构化你的可观察性平台
- en: Proving theoretical designs (proof of concept)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 证明理论设计（概念验证）
- en: Setting the right access levels
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置正确的访问级别
- en: Sending telemetry to other consumers
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向其他消费者发送遥测数据
- en: Architecting your observability platform
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 架构化你的可观察性平台
- en: Understanding and articulating the problem(s) your organization is trying to
    solve is the most critical and undervalued aspect of a well-architected observability
    platform. There are some common problems that organizations are trying to solve
    with observability, but every organization is different, and working with people
    such as *Masha* (senior leadership, as introduced in [*Chapter 1*](B18277_01.xhtml#_idTextAnchor018))
    to understand the business needs is a step that is often missed and can lead to
    complex problems in the future.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 理解并阐明组织所面临的问题是构建一个良好架构的可观察性平台中最关键且被低估的方面。虽然组织通常试图通过可观察性解决一些常见问题，但每个组织都是不同的，与像*玛莎*（如[*第一章*](B18277_01.xhtml#_idTextAnchor018)中介绍的高级领导）这样的人合作，理解业务需求是一个常常被忽视的步骤，忽视这一点可能会导致未来出现复杂问题。
- en: 'Here are some common problems that organizations face that can be solved with
    an observability platform:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些组织常见的问题，可以通过可观察性平台来解决：
- en: '**Customer-affecting incidents**: These types of incidents could range from
    downtime to data breaches. These pose a compliance, operational, and reputational
    risk to the organization. The customers could be internal or external to the organization.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**影响客户的事件**：这类事件可能包括停机或数据泄露等。这些事件对组织构成合规性、操作性和声誉风险。客户可以是组织内部或外部的人员。'
- en: '**Understanding the organization’s key performance indicators (KPIs)**: Organizations
    often want to have a clear understanding of the current state of their KPIs. These
    KPIs articulate whether the organization is doing well or whether something needs
    addressing.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**理解组织的关键绩效指标（KPI）**：组织通常希望清晰了解其KPI的当前状态。这些KPI阐明了组织的表现是否良好，或者是否存在需要解决的问题。'
- en: '**Understanding how customers use products**: Understanding how customers interact
    with an organization’s products can identify pain points and help guide a better
    experience. Offering great products gives the organization a competitive advantage.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**理解客户如何使用产品**：理解客户如何与组织的产品互动可以识别痛点，并帮助引导更好的用户体验。提供优秀的产品能为组织带来竞争优势。'
- en: '**Understanding the financial costs of serving customers**: This is commonly
    known as the **cost of goods sold** (**COGS**) and **operating** **expenses**
    (**OPEX**).'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**理解为客户提供服务的财务成本**：这通常被称为**销售成本**（**COGS**）和**运营** **费用**（**OPEX**）。'
- en: In this section, we will consider how to architect the data structures used
    in an observability platform to support the organization’s goals. We’ll talk about
    the process of designing a system architecture and the considerations you should
    make to support the operational needs of the organization. Finally, we will think
    about designing management and automation processes so that following the best
    practices you establish becomes the easiest path for teams to take.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将考虑如何构建可观察性平台中使用的数据结构，以支持组织的目标。我们将讨论设计系统架构的过程，以及在支持组织运营需求时需要考虑的因素。最后，我们将思考如何设计管理和自动化流程，使得按照最佳实践操作成为团队最容易采用的路径。
- en: Defining a data architecture
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义数据架构
- en: A data architecture defines an organization’s data assets and maps how data
    flows through the organization’s systems. Most organizations will already have
    a data architecture in place, so it is worth discussing with the team responsible.
    In this section, we will discuss how the field names and data types in the observability
    platform need to match or be translatable into common fields across the organization.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 数据架构定义了一个组织的数据资产，并映射数据在组织系统中的流动方式。大多数组织已经有了数据架构，因此值得与负责的团队进行讨论。在本节中，我们将讨论可观察性平台中的字段名称和数据类型如何与组织中的通用字段匹配或能够转换。
- en: Observability systems are inherently data systems. They collect, process, move,
    store, and use data. The data in an observability system is most valuable to the
    wider organization when it is compatible with other data systems so the organization
    can merge datasets. The crux of this is that when embarking on this journey, talk
    to people throughout the organization and find out who is responsible for the
    data architecture of the whole organization. If no one exists in that position,
    it can be raised with senior leadership as a hindrance to solving the problems
    they are trying to address. For example, when I was a junior engineer, I remember
    having many meetings discussing whether `tenantID` and `customerID` were different
    fields or not as there were two systems that used different names. Ultimately,
    it was decided they were different concepts so the business could capture the
    idea of principal and subsidiary organizations that were customers of the company.
    However, both systems then needed months of work to implement this wider concept.
    The logging platform also needed a lot of data model rebuilding to capture this
    new concept. This work would have been entirely avoidable by having someone responsible
    for the data model and defining the requirements early on.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 可观察性系统本质上是数据系统。它们收集、处理、传输、存储并使用数据。当可观察性系统中的数据与其他数据系统兼容时，对整个组织来说，它才最有价值，这样组织可以合并数据集。关键在于，在开始这项工作时，要与组织内部的人沟通，找出谁负责整个组织的数据架构。如果没有这样的人，可以向高层领导提出，将其视为解决问题的障碍。例如，当我还是一名初级工程师时，我记得参加过很多次会议，讨论`tenantID`和`customerID`是否是不同的字段，因为有两个系统使用了不同的名称。最终决定它们是不同的概念，以便业务能够捕捉到作为公司客户的母公司和子公司这一想法。然而，随后两个系统都需要数个月的工作来实现这一更广泛的概念。日志平台也需要大量的数据模型重建来捕捉这一新概念。如果有一个人负责数据模型并提前定义需求，这项工作本可以完全避免。
- en: 'It is common to use data models from other areas of the organization when implementing
    an observability platform. There is a step that should be completed by an architect
    where they translate external requirements into a requirements document detailing
    where fields should be recorded. For example, it may be a requirement of the financial
    data model to record cost centers. There are many ways to achieve this, such as
    the following:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在实施可观测性平台时，通常会使用来自组织其他领域的数据模型。架构师应该完成一个步骤，将外部需求转化为需求文档，详细说明应在哪里记录字段。例如，财务数据模型可能要求记录成本中心。实现这一点有多种方法，例如：
- en: Requiring every log line, every metric, and every trace to include this information
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要求每个日志行、每个度量和每个跟踪都包含这些信息
- en: Requiring every service to be tagged with an `organization.costcenter` label
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要求每个服务都必须加上 `organization.costcenter` 标签
- en: Maintaining a lookup table of service name ↔ cost center
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维护服务名称 ↔ 成本中心的查找表
- en: The requirements guide should be clear on how this will be achieved for teams
    who will be meeting the requirements. We recommend a document structure such as
    **MoSCoW**, which stands for **Must have, Should have, Could have,** **Won’t have**.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要求指南应明确说明如何为将要满足这些要求的团队实现这一点。我们推荐使用如 **MoSCoW** 的文档结构，其中 **MoSCoW** 代表 **必须有（Must
    have）、应该有（Should have）、可以有（Could have）、不会有（Won’t have）**。
- en: 'Different telemetry types are best suited for different data types. Observability
    systems are also packed with features to gather data from other systems, such
    as Kubernetes object labels and cloud tags. These should form part of the data
    architecture. Here are some telemetry types and what they are best suited for:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的遥测类型最适合不同的数据类型。可观测性系统还具备从其他系统收集数据的功能，例如 Kubernetes 对象标签和云标签。这些应构成数据架构的一部分。以下是一些遥测类型及其最适用的场景：
- en: '**Log fields in Loki**: Log fields are best suited to string data such as the
    following:'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Loki 中的日志字段**：日志字段最适合用于字符串数据，例如以下内容：'
- en: Application state fields in string format, such as *error* or *warn* states,
    for example, if an application queries data from another service and cannot connect
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串格式的应用程序状态字段，例如 *error* 或 *warn* 状态，例如，如果一个应用程序查询数据并且无法连接到另一个服务
- en: Organizational or business data fields, such as service name, customer ID, user
    ID, and so on
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组织或业务数据字段，如服务名称、客户 ID、用户 ID 等
- en: Low- to medium-cardinality indexed fields
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 低到中等基数的索引字段
- en: High-cardinality unindexed fields
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高基数的未索引字段
- en: Link from application state to system state in traces
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在跟踪中将应用程序状态链接到系统状态
- en: '**Metric fields in Prometheus or Mimir**: Metric fields are best suited to
    numeric data such as the following:'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Prometheus 或 Mimir 中的度量字段**：度量字段最适合用于数值数据，例如以下内容：'
- en: Application state fields in numeric format, such as the count of records processed
    since startup
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字格式的应用程序状态字段，例如自启动以来处理的记录数
- en: Organizational or business data fields, including labels containing the service
    name, hostname, and so on
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组织或业务数据字段，包括包含服务名称、主机名等的标签
- en: Low- to medium-cardinality fields, such as HTTP methods (GET, POST, PUT, etc.)
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 低到中等基数的字段，例如 HTTP 方法（GET、POST、PUT 等）
- en: '**Trace fields in Tempo**: Trace fields are a complex data type that can handle
    data such as the following:'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Tempo 中的跟踪字段**：跟踪字段是一种复杂的数据类型，可以处理以下数据：'
- en: System state fields
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统状态字段
- en: High-cardinality fields
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高基数字段
- en: Organizational or business data fields when added as an attribute, such as customer
    ID and user ID
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为属性添加的组织或业务数据字段，例如客户 ID 和用户 ID
- en: Cross-system fields
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨系统字段
- en: Links to application state by using trace metrics
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用跟踪度量将应用程序状态链接到系统状态
- en: '**Kubernetes labels**: These are Kubernetes key-value pair data objects. They
    are used to record information such as the following:'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kubernetes 标签**：这些是 Kubernetes 键值对数据对象。它们用于记录以下信息：'
- en: Core organization fields, such as ownership and cost allocation
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 核心组织字段，如所有权和成本分配
- en: Linking the application to the infrastructure
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将应用程序与基础设施连接
- en: These labels can be added to log, metric, and trace data as it is collected
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些标签可以在收集日志、度量和跟踪数据时添加
- en: '**Cloud vendor tags**: These are tags applied to infrastructure in a cloud
    vendor system. They can be used to record information such as the following:'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**云供应商标签**：这些是应用于云供应商系统基础设施的标签。它们可以用来记录以下信息：'
- en: Core organization fields, such as ownership and cost allocation
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 核心组织字段，如所有权和成本分配
- en: These labels can be added to log, metric, and trace data as it is collected
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在收集日志、指标和跟踪数据时，这些标签可以被添加到数据中。
- en: 'A lot of this data is standard across many organizations and industries, and
    the libraries that produce the data are well tested. There is one area of data
    production that is not tested by these tools though, and that is organization-specific
    fields. These are always organization-specific, but some common examples are user
    ID or customer ID. These fields, when used by the organization, can be very important,
    even being reviewed regularly by executive leaders. It is important that these
    are tested as bad data can lead to bad decisions. Any data architecture documents
    should highlight this need. There is a lot of technical detail in achieving this
    goal, which we will not go into in this book, but we would recommend this article
    from Martin Fowler, which gives clear instructions on producing organizational
    data in a testable way: [https://martinfowler.com/articles/domain-oriented-observability.html](https://martinfowler.com/articles/domain-oriented-observability.html).'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数据在许多组织和行业中是标准化的，生成这些数据的库也经过了充分的测试。然而，有一个数据生成领域，这些工具并未进行测试，那就是组织特定的字段。这些字段总是与组织相关的，但一些常见的例子包括用户ID或客户ID。当这些字段被组织使用时，它们可能非常重要，甚至会被高层领导定期审查。测试这些字段非常重要，因为错误的数据可能导致错误的决策。任何数据架构文档都应强调这一需求。实现这一目标需要大量的技术细节，我们在本书中不会深入探讨，但我们推荐Martin
    Fowler的这篇文章，其中清楚地说明了如何以可测试的方式生成组织数据：[https://martinfowler.com/articles/domain-oriented-observability.html](https://martinfowler.com/articles/domain-oriented-observability.html)。
- en: We’ve now seen how to work within the organization to have a coherent data architecture
    that works with the infrastructure layer, the application layer, the observability
    layer, and the business layer. Let’s now consider how to have a great system architecture
    for your organization’s observability platform.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经看到如何在组织内部工作，确保数据架构与基础设施层、应用层、可观察性层和业务层协同工作。现在让我们考虑如何为组织的可观察性平台构建一个优秀的系统架构。
- en: Establishing system architecture
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 建立系统架构
- en: 'In this section, we will consider the aspects of building a great observability
    system. We will see how to help software engineers with producing data. Then,
    we will consider how to collect that data, while providing engineers with a stable
    API. Finally, we’ll discuss the storage and visualization of the data. The following
    list presents some questions to consider relating to these topics:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将考虑构建一个出色的可观察性系统的各个方面。我们将探讨如何帮助软件工程师生成数据。接下来，我们将考虑如何收集这些数据，同时为工程师提供一个稳定的API。最后，我们将讨论数据的存储和可视化。以下是与这些主题相关的一些需要考虑的问题：
- en: How will data be produced?
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据将如何生成？
- en: What telemetry types (logs, metrics, traces, or others) are used?
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用了哪些遥测类型（日志、指标、跟踪或其他）？
- en: Will developers such as *Diego* be given standards for libraries?
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者，例如*Diego*，是否会获得库的标准？
- en: Should *system* or *state* data be separated from *business* data?
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否应该将*系统*数据与*业务*数据分开？
- en: How will data be collected?
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据将如何收集？
- en: What systems do you need to collect data from?
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要从哪些系统收集数据？
- en: If a tool is changed, will every application need to be updated?
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果更改了工具，是否需要更新每个应用程序？
- en: How much data will be collected?
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将收集多少数据？
- en: How will data be stored?
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据将如何存储？
- en: Will any local storage be provided? If so, how will the scale and cost of this
    be managed?
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否会提供任何本地存储？如果提供，如何管理其规模和成本？
- en: Is the storage managed per cluster or environment, or as a centralized system?
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储是按集群或环境管理，还是作为一个集中式系统管理？
- en: Will a third-party solution such as Grafana Cloud be used? If so, how is the
    cost allocated?
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否会使用第三方解决方案，如Grafana Cloud？如果使用，如何分配成本？
- en: How will visualizations be managed?
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可视化将如何管理？
- en: Will the system be fully open, so anyone can submit changes for any dashboard?
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统是否完全开放，允许任何人提交任何仪表板的更改？
- en: Will each team be responsible for their dashboards?
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个团队是否负责他们自己的仪表板？
- en: Will IaC tools be provided to help teams manage their dashboards?
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否提供IaC工具来帮助团队管理他们的仪表板？
- en: An additional question to consider for all of these is how the system employed
    handles failure
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些问题的一个额外考虑因素是，所采用的系统如何处理故障
- en: Let’s cover these considerations in more detail, starting with architecting
    how applications produce data.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地讨论这些考虑因素，从架构化应用程序生成数据开始。
- en: Data production
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据生成
- en: 'Data production details how applications and services produce data. Teams responsible
    for observability platforms should assist the teams who produce data in doing
    so with all the correct fields, practices, and standards. Common topics to cover
    are the following:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 数据生产说明了应用程序和服务如何生成数据。负责可观测性平台的团队应协助生成数据的团队，确保他们按照正确的字段、实践和标准进行数据生成。常见的讨论主题包括以下内容：
- en: Which telemetry types must be produced and which should or may be produced?
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须生成哪些遥测类型，哪些是应该生成的，哪些可以生成？
- en: Is organizational or business data being collected from the observability systems?
    If it is, what are the fields? Is a data domain used (e.g., `acme.cost_center`
    or `acme.department`)?
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否从可观测性系统中收集了组织或业务数据？如果收集了，字段是什么？是否使用了数据领域（例如，`acme.cost_center` 或 `acme.department`）？
- en: Are developers expected to use libraries from a pre-approved list?
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发人员是否需要使用预批准列表中的库？
- en: What standards are used by applications to present data?
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序用来呈现数据的标准是什么？
- en: 'OpenTelemetry, while relatively young, is emerging as the standard in observability,
    with adoption across most vendors and systems. A suggested best practice for an
    application is to add instrumentation using the relevant OpenTelemetry SDK, as
    shown in the following diagram:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: OpenTelemetry 虽然相对年轻，但正在成为可观测性的标准，并且在大多数供应商和系统中得到广泛采用。对应用程序的建议最佳实践是使用相关的 OpenTelemetry
    SDK 添加仪器化，具体请参见下图：
- en: '![Figure 11.1 – Proposed application data production standard](img/B18277_11_1.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.1 – 提议的应用程序数据生产标准](img/B18277_11_1.jpg)'
- en: Figure 11.1 – Proposed application data production standard
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.1 – 提议的应用程序数据生产标准
- en: Here, logs are produced on `stdout` and `stderr`. Metrics are published both
    to a Prometheus scrape endpoint and to an OpenTelemetry receiver via either gRPC
    on port `4317` or HTTP on port `4318`. Traces are also pushed to the OpenTelemetry
    receiver using the same ports.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，日志通过 `stdout` 和 `stderr` 输出。度量数据同时发布到 Prometheus 的抓取端点和通过 gRPC（端口 `4317`）或
    HTTP（端口 `4318`）的 OpenTelemetry 接收器。追踪数据也会通过相同的端口推送到 OpenTelemetry 接收器。
- en: Producing data is only part of the picture for a well-architected system. Next,
    let’s look at how to design a system to collect all this data so it is useful
    to the organization.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 生成数据只是构建良好架构系统的一部分。接下来，我们来看看如何设计一个系统来收集所有这些数据，使其对组织有用。
- en: Data collection
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据收集
- en: The data collection agents we have discussed in previous chapters can collect
    data in many formats. Managing infrastructure that collects data in every format
    is a cumbersome challenge and prone to failure and errors. The system architecture
    needs to detail which protocols are preferred and which can be accepted. For mature
    organizations, start with which protocols are currently in use and set end-of-life
    dates for any protocols the organization wishes to remove. It is strongly recommended
    to stick with default ports where they exist, and where applicable in the environment.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在之前章节中讨论过的数据收集代理可以以多种格式收集数据。管理收集各种格式数据的基础设施是一项繁琐的挑战，容易出错且容易失败。系统架构需要详细说明哪些协议是首选的，哪些协议是可以接受的。对于成熟的组织，应该从当前正在使用的协议开始，并为任何计划移除的协议设定生命周期终止日期。强烈建议在存在默认端口时遵循默认端口，并在适用的环境中使用。
- en: Another consideration is whether data will be stored locally, remotely, or both.
    Local storage adds management overhead and cost but may be a requirement in some
    environments. Having remote storage reduces management costs, but it can remove
    the option of using the metrics from an application to make environment choices.
    An example of this would be the Prometheus **HorizontalPodAutoscaler** (**HPA**).
    We’ll discuss this in a little bit more detail in the *Management and automation*
    section. The authors have used short-lived, volatile local storage for such considerations
    in the past, while using a remote, third-party-provided infrastructure for long-lived
    storage, and such a setup works well.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个考虑因素是数据是否将存储在本地、远程或两者兼有。本地存储增加了管理开销和成本，但在某些环境中可能是必需的。使用远程存储可以减少管理成本，但可能无法使用应用程序中的度量数据来做出环境选择。例如，Prometheus
    **HorizontalPodAutoscaler**（**HPA**）就是一个这样的例子。我们将在稍后的*管理与自动化*部分中详细讨论这个问题。作者过去在这类考虑中曾使用过短生命周期的易失性本地存储，同时使用远程的第三方提供的基础设施进行长期存储，这种配置效果良好。
- en: OpenTelemetry offers several configurations. The following reference architectures
    are designed to give a starting point for readers who need to architect a system.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: OpenTelemetry 提供了几种配置。以下参考架构旨在为需要构建系统的读者提供一个起点。
- en: 'For instance, the simplest way to architect data collection is for each application
    to send data *directly* to the backends, like this:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，架构数据收集的最简单方式是每个应用程序将数据*直接*发送到后端，像这样：
- en: '![Figure 11.2 – Agentless configuration](img/B18277_11_2.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.2 – 无代理配置](img/B18277_11_2.jpg)'
- en: Figure 11.2 – Agentless configuration
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.2 – 无代理配置
- en: For demonstrations or small installations, this architecture is perfectly fine.
    However, each application needs to be aware of each backend service, which means
    that this installation type does not scale very well.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 对于演示或小型安装，这种架构是完全合适的。然而，每个应用程序都需要知道每个后端服务，这意味着这种安装类型的扩展性较差。
- en: 'Adding a **local agent** to the application adds a small amount of complexity
    but removes a lot of overhead for the team managing the application itself. Such
    an installation looks like this:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 向应用程序添加**本地代理**增加了一些复杂性，但为管理应用程序的团队消除了大量的开销。这样的安装看起来像这样：
- en: '![Figure 11.3 – Local agent only](img/B18277_11_3.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.3 – 仅本地代理](img/B18277_11_3.jpg)'
- en: Figure 11.3 – Local agent only
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.3 – 仅本地代理
- en: Running a local agent is a very common pattern, and this pattern is great for
    many environments. As the number of instances of the agent grows, the agent configuration
    should be deployed using some form of configuration-as-code setup, such as Ansible,
    Salt, or Helm in a Kubernetes environment.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 运行本地代理是一种非常常见的模式，这种模式适用于许多环境。随着代理实例数量的增长，代理配置应使用某种形式的代码配置管理工具进行部署，如 Ansible、Salt
    或 Kubernetes 环境中的 Helm。
- en: 'Adding a **gateway service** is another common architecture. This type of installation
    looks like this:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 添加**网关服务**是另一种常见架构。这种类型的安装看起来像这样：
- en: '![Figure 11.4 – Gateway agent only](img/B18277_11_4.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.4 – 仅网关代理](img/B18277_11_4.jpg)'
- en: Figure 11.4 – Gateway agent only
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.4 – 仅网关代理
- en: '**Gateway architectures** are perfect in a couple of situations:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**网关架构**在几种情况下非常合适：'
- en: When the number of local instances is high, it can cause strain on the backend
    system by having a lot of open connections. Tthe gateway architecture resolves
    this by spreading this load over multiple instances of the agent.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当本地实例的数量很高时，通过大量的打开连接可能会给后端系统带来压力。网关架构通过将负载分散到多个代理实例来解决这个问题。
- en: Gateway architectures are very good for installations where the collection of
    data from SNMP or similar systems is a goal.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网关架构非常适合那些目标是从 SNMP 或类似系统收集数据的安装。
- en: It is best practice to put some form of load balancer in front of gateway architectures,
    and where possible to implement autoscaling.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳实践是将某种形式的负载均衡器放置在网关架构前面，并且在可能的情况下实现自动扩展。
- en: 'Kubernetes introduces its own challenges to data collection architecture; this
    next diagram tries to capture the most common tools needed to collect data across
    the cluster and node:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 为数据收集架构引入了自己的挑战；下图尝试捕捉跨集群和节点收集数据所需的最常见工具：
- en: '![Figure 11.5 – A more complex Kubernetes architecture](img/B18277_11_5.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.5 – 更复杂的 Kubernetes 架构](img/B18277_11_5.jpg)'
- en: Figure 11.5 – A more complex Kubernetes architecture
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.5 – 更复杂的 Kubernetes 架构
- en: 'A simple way to think of this configuration is to break it up into three parts:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 思考这种配置的一种简单方式是将其分为三部分：
- en: There is a **local agent** configuration on each node. This is configured to
    receive OTLP metrics on gRPC or HTTP. The local agent is also configured to query
    the kubelet for stats related to the Kubernetes node. It also has a host receiver
    configured to collect metrics; this would only be needed in a physical installation.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个节点上都有一个**本地代理**配置。该代理配置为接收通过 gRPC 或 HTTP 传输的 OTLP 度量数据。该本地代理还配置为查询 kubelet
    以获取与 Kubernetes 节点相关的统计信息。它还配置了一个主机接收器来收集度量数据；这在物理安装中是必需的。
- en: A **gateway agent** is also configured. This collects data from each node and
    from the cluster agent. Using a gateway agent here also allows for processing
    to be done in the gateway.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网关代理**也已配置。它从每个节点和集群代理收集数据。在这里使用网关代理也允许在网关中进行处理。'
- en: The final component is the **cluster agent**. This is a standalone instance
    of the agent configured to collect data from the Kubernetes API service. If this
    task were delegated to all node or gateway agents, the data would be collected
    by each instance, duplicating the data in the backend. By using a standalone instance,
    we get a single data stream, and this instance can leverage the gateway in the
    same way that the node agent can.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最终组件是**集群代理**。这是一个独立的代理实例，配置为从Kubernetes API服务收集数据。如果将此任务委派给所有节点或网关代理，则每个实例都会收集数据，从而在后端重复数据。通过使用独立实例，我们只获得一个数据流，并且该实例可以像节点代理一样利用网关。
- en: There are many more configurations that could be used, and we have not discussed
    the topic of using multiple different agents. However, this should give us a foundation
    to work from.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他配置可以使用，我们没有讨论使用多个不同代理的话题。然而，这应该为我们提供了一个基础，以便进行进一步工作。
- en: We have now looked at producing and collecting data. These systems will be similar
    for all organizations. Let’s have a look at architecting data storage systems
    next.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经了解了数据的生成和收集。这些系统对于所有组织来说都是相似的。接下来，让我们来看一下如何架构数据存储系统。
- en: Data storage and data visualization
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据存储和数据可视化
- en: There is one key question to ask regarding data storage or visualization layers
    for observability platforms. Who is responsible? With Grafana tools, it is easily
    achievable to deploy a local storage solution. By doing this, the responsibility
    for maintaining that platform is with an internal team. The alternative is to
    use a third party with whom your organization has a contractual relationship.
    This relationship is a very helpful thing to have when something goes wrong.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 关于可观察性平台的数据存储或可视化层，有一个关键问题需要问：谁负责？使用Grafana工具，可以轻松实现部署本地存储解决方案。这样，维护该平台的责任就由内部团队承担。另一种选择是使用与你的组织有合同关系的第三方。当出现问题时，这种关系非常有帮助。
- en: We considered the architectures for Loki, Mimir, and Tempo in *Chapters 4*,
    *5*, and *6*, so we will not show the specific architectures of each tool. Let’s
    consider how to deploy these tools if you have reason to manage your own storage.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在*第4章*、*第5章*和*第6章*中已经考虑了Loki、Mimir和Tempo的架构，因此我们不会展示每个工具的具体架构。接下来，让我们考虑一下，如果你有理由管理自己的存储，如何部署这些工具。
- en: 'Grafana Mimir, Loki, and Tempo offer multiple deployment modes:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Grafana Mimir、Loki和Tempo提供了多种部署模式：
- en: '**Monolithic mode**: In monolithic mode, all of the microservices are deployed
    as a single instance and connected to an object store. Monolithic mode can be
    horizontally scaled by deploying more instances. This scaling method can provide
    a highly available platform with lower complexity but has the drawback of not
    allowing for independent scaling of read and write paths. This deployment mode
    is also not recommended for production environments.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单体模式**：在单体模式下，所有微服务作为一个单一实例部署，并连接到对象存储。单体模式可以通过部署更多实例进行水平扩展。这种扩展方法可以提供高可用的平台，且复杂度较低，但缺点是不允许独立扩展读写路径。这个部署模式也不推荐用于生产环境。'
- en: '**Microservices mode**: This mode deploys and scales each component of the
    system independently. This adds complexity but also allows the system to cater
    to the actual load that is placed on it. This mode is the recommended deployment
    mode for production use of Mimir and Tempo.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**微服务模式**：此模式独立部署和扩展系统的每个组件。这增加了复杂性，但也使系统能够应对实际的负载。此模式是Mimir和Tempo生产环境使用的推荐部署模式。'
- en: '**Simple scalable mode (only available in Loki)**: This mode strikes a balance
    between monolithic and microservices mode by allowing the independent deployment
    and scaling of write targets, read targets, and backend targets. These targets
    contain all the services needed for their role. This mode is the recommended deployment
    mode for the production use of Loki.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简单可扩展模式（仅在Loki中可用）**：该模式在单体模式和微服务模式之间取得了平衡，允许独立部署和扩展写目标、读目标和后端目标。这些目标包含了执行其角色所需的所有服务。此模式是Loki生产环境使用的推荐部署模式。'
- en: For all three of the storage platforms, deployment is carried out using a Helm
    chart for Kubernetes deployments. Packages are also supplied for deployments to
    Linux operating systems. These deployments can be automated using the provided
    Puppet or Tanka packages.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这三种存储平台，部署是通过使用Helm chart进行Kubernetes部署的。此外，还提供了适用于Linux操作系统的部署包。通过提供的Puppet或Tanka包，可以实现自动化部署。
- en: When you wish to manage your own data visualization layer, the Grafana application
    needs to be installed. This is available as a package for Linux, macOS, or Windows
    operating systems. Grafana also provides Docker images and detailed guidance on
    deploying to Kubernetes using Helm.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当您希望管理自己的数据可视化层时，需要安装 Grafana 应用程序。该应用程序可作为适用于 Linux、macOS 或 Windows 操作系统的包提供。Grafana
    还提供 Docker 镜像，并提供详细的指导，帮助通过 Helm 部署到 Kubernetes。
- en: Handling system failure
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理系统故障
- en: A big consideration for a data collection architecture is how it handles failure.
    For agent failure, the only real option is to restart the agent. However, when
    the collection pipeline fails, this can be handled by buffering in memory or on
    disk. Each collector in the system is capable of buffering by configuring the
    batch processor for memory and the file storage extension for disk storage. The
    main thing to consider when designing a buffering solution is how long the system
    will need to tolerate failure. This, along with the throughput of data, dictates
    how much memory or disk space must be available to the instances. Reporting this
    calculation as a **service-level indicator** (**SLI**) for the data collection
    layer is a good practice, as it makes the resilience of the system publicly available.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 数据收集架构的一个重要考虑因素是如何处理故障。对于代理失败，唯一的实际选项是重启代理。然而，当收集管道失败时，可以通过在内存或磁盘中缓冲来处理。系统中的每个收集器都可以通过配置内存的批处理处理器和磁盘存储扩展来进行缓冲。设计缓冲解决方案时需要考虑的主要事项是系统需要容忍故障的时间。这个时间以及数据的吞吐量决定了实例必须具有多少内存或磁盘空间。将这个计算作为**服务级指标**（**SLI**）报告给数据收集层是一种良好的做法，因为它使系统的韧性公开可见。
- en: We’ve now looked at how to architect the data that an observability system will
    collect, and we’ve looked at how to architect a system to collect that data. Let’s
    now consider how to architect the system to account for management tools and automation
    tools.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经了解了如何构建可观察性系统将要收集的数据架构，并且已经研究了如何构建收集该数据的系统。接下来，我们将考虑如何设计系统来考虑管理工具和自动化工具。
- en: Management and automation
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理与自动化
- en: 'We discussed using IaC in [*Chapter 10*](B18277_10.xhtml#_idTextAnchor204);
    when designing the system architecture, the use of IaC should manage the four
    systems (production, collection, storage, and visualization) as separate concerns:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[*第10章*](B18277_10.xhtml#_idTextAnchor204)中讨论了使用 IaC；在设计系统架构时，IaC 的使用应将四个系统（生产、采集、存储和可视化）作为独立的关注点来管理：
- en: '**Data** **production system**:'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据** **生产系统**：'
- en: This should be managed by each application independently
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这应该由各应用独立管理
- en: Guidance should be provided
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应提供指导
- en: '**Data** **collection system**:'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据** **收集系统**：'
- en: This is usually managed by an infrastructure, platform, observability, or similar
    team
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这通常由基础设施、平台、可观察性或类似团队进行管理
- en: This should have published SLIs and SLOs like any other component
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这应该像其他组件一样，公开发布 SLI 和 SLO
- en: '**Data** **storage system**:'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据** **存储系统**：'
- en: This is usually managed by an infrastructure, platform, observability, or similar
    team
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这通常由基础设施、平台、可观察性或类似团队进行管理
- en: It is common to use a third-party tool (such as Grafana Cloud)
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通常使用第三方工具（如 Grafana Cloud）
- en: Grafana Cloud stacks are a great tool for separating storage where necessary,
    for example, for CI/CD platforms or performance testing
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Grafana Cloud 堆栈是一个很好的工具，可在必要时分离存储，例如，针对 CI/CD 平台或性能测试
- en: '**Data** **visualization system**:'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据** **可视化系统**：'
- en: The system itself would usually be managed by an infrastructure, platform, observability,
    or similar team
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该系统通常由基础设施、平台、可观察性或类似团队进行管理
- en: The dashboards and other artifacts related to an application should be managed
    by each application team independently
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与应用程序相关的仪表盘和其他工件应该由各应用团队独立管理
- en: IaC can be provided to teams to manage deployment
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以向团队提供 IaC 来管理部署
- en: Architecting for automation does not stop with the observability platform. Applications
    deployed to Kubernetes should be able to scale automatically as needed. When suggesting
    an ideal application pattern in the *Data production* section, keen-eyed readers
    may have seen that we recommended publishing metrics via a Prometheus endpoint
    as well as via OTLP export. This recommendation was made for autoscaling. While
    this book is concerned with observability in Grafana, a truly observable system
    can self-correct, such as the steam engine governor shown in [*Chapter 1*](B18277_01.xhtml#_idTextAnchor018).
    The Kubernetes HPA allows for the scaling of Pods based on CPU and memory usage.
    This is fine for some cases, but it is common for application teams to want to
    scale on metrics such as the rate of requests or number of sessions. The Prometheus
    community provides an adapter for Kubernetes Metrics APIs, which allows for querying
    a Prometheus endpoint to enable these types of scaling operations. An important
    question for an organization’s architecture is whether this type of instrumentation
    would be managed by a central team or by each application team, perhaps with a
    default configuration offered for teams to consume.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化架构设计不仅仅停留在可观察性平台上。部署到 Kubernetes 的应用程序应该能够根据需要自动扩展。当在*数据生产*部分建议理想的应用模式时，细心的读者可能已经注意到，我们建议通过
    Prometheus 端点以及 OTLP 导出发布指标。这个建议是为了实现自动扩展。虽然本书关注的是 Grafana 中的可观察性，但一个真正可观察的系统可以自我修正，就像[*第一章*](B18277_01.xhtml#_idTextAnchor018)中展示的蒸汽机调节器一样。Kubernetes
    HPA 允许根据 CPU 和内存使用情况对 Pods 进行扩展。这对于某些情况是可以的，但应用团队通常希望根据请求速率或会话数等指标进行扩展。Prometheus
    社区为 Kubernetes Metrics API 提供了适配器，允许通过查询 Prometheus 端点来启用这些类型的扩展操作。一个重要的问题是，组织的架构应该由中央团队管理这种类型的监控，还是由每个应用团队管理，也许为团队提供一个默认配置供其使用。
- en: We’ve looked at how to create an architectural design. There are a lot of tools
    available to test those designs in practice to prove they work. Let’s have a look
    at proving the architecture.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了如何创建架构设计。有很多工具可以用来实践测试这些设计，证明它们可行。让我们来看一下如何验证架构。
- en: Developing a proof of concept
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发概念验证
- en: The best place to prove a theoretical design is in an environment that has customers
    actually interacting with it, that is, a **production environment**. This is because
    any other environment is a mock environment and may miss some nuance of customer
    interactions. This is a recommendation to get the pathway to production created
    early and use it regularly. Having made that recommendation, it is still very
    important to have spaces for testing designs.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 证明一个理论设计的最佳地方是一个实际有客户在交互的环境，也就是**生产环境**。这是因为其他任何环境都只是模拟环境，可能会忽略客户交互的一些细节。这个建议是尽早创建通向生产的路径，并定期使用它。提出这个建议之后，仍然非常重要的是为测试设计提供空间。
- en: We will discuss compute containerization and virtualization tools, as well as
    simulated data production tools, which can be used to validate designs quickly.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论计算容器化和虚拟化工具，以及模拟数据生产工具，这些工具可以用来快速验证设计。
- en: Containerization and virtualization
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 容器化和虚拟化
- en: 'Using containerization and virtualization locally and as part of a deployment
    pipeline can be a huge boost to provide quick feedback on whether a collection
    or storage architecture is achievable. Let’s consider some of the tools that will
    help in this space:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地使用容器化和虚拟化，并将其作为部署流水线的一部分，可以大大加速对集合或存储架构是否可行的反馈。让我们来看一些在这个领域有帮助的工具：
- en: '**Containerization**: The tools **k3d**, **KinD**, **MicroK8s**, and **minikube**
    can be used for containerization for the following reasons:'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器化**：**k3d**、**KinD**、**MicroK8s** 和 **minikube** 等工具可以用于容器化，原因如下：'
- en: These four tools all offer the ability to run a Kubernetes cluster locally
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这四种工具都提供在本地运行 Kubernetes 集群的能力
- en: KinD, k3d, and minikube can run using Docker or Podman drivers
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: KinD、k3d 和 minikube 可以使用 Docker 或 Podman 驱动程序运行
- en: minikube also offers a VM driver, which can be useful for certain local installations
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: minikube 还提供了一个虚拟机驱动程序，对于某些本地安装非常有用
- en: For data collection architecture and pipelines, the authors have used KinD to
    deliver very good results
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于数据收集架构和流水线，作者使用 KinD 得到了非常好的结果
- en: '**Virtualization**: **Vagrant** can be used with several virtualization tools,
    including **Hyper-V**, **VMware**, **VirtualBox**, **Xen**, **QEMU**, and **libvirt**.
    This is for the following reasons:'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**虚拟化**：**Vagrant** 可以与多个虚拟化工具一起使用，包括 **Hyper-V**、**VMware**、**VirtualBox**、**Xen**、**QEMU**
    和 **libvirt**。原因如下：'
- en: Vagrant offers the ability to define virtual machines and virtual networking
    and deploy these definitions on different virtualization tools using providers
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vagrant 提供了定义虚拟机和虚拟网络的功能，并使用提供程序将这些定义部署到不同的虚拟化工具上
- en: This is a valuable feature for providing a reference virtual infrastructure
    for experimenting and use in a pipeline
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是为实验和管道使用提供参考虚拟基础设施的一个宝贵特性
- en: These tools provide the capability to build reference infrastructure on which
    to deploy data collectors. They also provide the ability to document architectural
    requirements and diagrams using a real setup that is deployed locally.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工具提供了构建参考基础设施的能力，可以在其上部署数据收集器。它们还提供了使用实际本地部署的设置来文档化架构需求和图表的功能。
- en: Deploying infrastructure and data collectors is one part of the process of proving
    a design. Having tools to produce test data is also vital to check that the design
    is right. Let’s have a look at these tools now.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 部署基础设施和数据收集器是验证设计过程的一部分。拥有生成测试数据的工具同样至关重要，能够确保设计的正确性。现在让我们来看看这些工具。
- en: Data production tools
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据生产工具
- en: 'There are a couple of ways of testing data production – using a sample application
    (such as the OpenTelemetry Demo application) or replaying pre-recorded datasets:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 测试数据生成有几种方式——使用样例应用程序（如 OpenTelemetry 演示应用程序）或回放预录制的数据集：
- en: '**Demo applications**: These applications can be used to generate real observability
    data to test observability systems. Take the following examples:'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**演示应用程序**：这些应用程序可用于生成实际的可观测性数据，以测试可观测性系统。以下是几个例子：'
- en: '**OpenTelemetry Demo application**: This is a full retail application that
    we have used to provide demo data throughout this book.'
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OpenTelemetry 演示应用程序**：这是一个完整的零售应用程序，我们在本书中多次使用它来提供演示数据。'
- en: '**One Observability Workshop applications**: These applications are provided
    by AWS and demo how to push data into AWS observability tools.'
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一个可观测性工作坊应用程序**：这些应用程序由 AWS 提供，演示如何将数据推送到 AWS 可观测性工具中。'
- en: '**mythical-creatures application**: This is an application written by Heds
    Simons for an interview with Grafana (he got the job). This application outputs
    metrics, logs, and traces. It’s a simpler application than the OTEL demo, which
    can be an advantage.'
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**mythical-creatures 应用程序**：这是 Heds Simons 为了与 Grafana 面试时编写的应用程序（他获得了这份工作）。该应用程序输出指标、日志和追踪。它比
    OTEL 演示应用程序更简单，这也是一个优势。'
- en: '**Pre-recorded datasets**: These applications can be used to produce a predefined
    set of data to test observability systems. The process of replaying pre-recorded
    datasets crosses over very strongly with load-testing and packet capture tools.
    Tools such as **k6**, **Locust**, **Postman**, **Insomnia**, and **GHZ** can be
    used to send predefined data blobs to the data collection endpoints of your collection
    tools and validate the output. As observability tools use specific protocols,
    it’s important to look for features that match the organization’s production of
    data. Some examples are the following:'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预录制的数据集**：这些应用程序可以用来生成预定义的数据集，用于测试可观测性系统。回放预录数据集的过程与负载测试和数据包捕获工具有很大的重叠。像
    **k6**、**Locust**、**Postman**、**Insomnia** 和 **GHZ** 等工具可以用来向数据收集工具的收集端点发送预定义的数据块并验证输出。由于可观测性工具使用特定协议，因此需要查找与组织数据生产相匹配的特性。以下是一些例子：'
- en: The ability to send gRPC data as this is a common format for OpenTelemetry
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送 gRPC 数据的能力，因为这是 OpenTelemetry 中常见的格式
- en: The ability to send other protocols such as SNMP if they are used
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送其他协议（如 SNMP）的能力，如果这些协议被使用的话
- en: Tools such as **Fiddler** and **Wireshark**, as well as other network analyzers
    or HTTP(S) debuggers, can be used to record wire data to build up a library of
    reference data.
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 像 **Fiddler** 和 **Wireshark** 这样的工具，以及其他网络分析器或 HTTP(S) 调试器，可以用来记录网络数据，建立参考数据的库。
- en: We will discuss in greater detail, in [*Chapter 14*](B18277_14.xhtml#_idTextAnchor254),
    how these tools can be integrated into CI/CD pipelines.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 [*第 14 章*](B18277_14.xhtml#_idTextAnchor254) 中详细讨论这些工具如何集成到 CI/CD 管道中。
- en: We’ve now seen how to architect the different components of an observability
    platform and how to validate those designs. Another important architectural consideration
    is getting the access levels correct. Let’s look at that now.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经了解了如何架构可观察平台的不同组件以及如何验证这些设计。另一个重要的架构考虑因素是如何正确设置访问级别。现在让我们来看一下这个问题。
- en: Setting the right access levels
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置正确的访问级别
- en: We have talked about the data in observability systems and how to architect
    the actual systems for producing, collecting, storing, and visualizing the data.
    A significant element of the architecture of the system that we have not discussed
    is RBAC.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了可观察系统中的数据，以及如何架构实际的系统来生成、收集、存储和可视化数据。我们尚未讨论的一个重要架构元素是 RBAC（基于角色的访问控制）。
- en: 'There are two places where RBAC can be applied:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: RBAC 可以应用的地方有两个：
- en: '**Grafana Cloud**: Administration of the deployed Grafana stacks and billing.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Grafana Cloud**：管理已部署的 Grafana 堆栈和账单。'
- en: '**Grafana instances**: Access to data and visualizations. These instances can
    be deployed to Grafana Cloud or on-premises.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Grafana 实例**：访问数据和可视化内容。这些实例可以部署到 Grafana Cloud 或本地。'
- en: 'Let’s start by looking at the permissions currently available in Grafana Cloud:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先来看看目前在 Grafana Cloud 中可用的权限：
- en: '| **Permission/Role** | **Admin** | **Editor** | **Viewer** |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| **权限/角色** | **管理员** | **编辑者** | **查看者** |'
- en: '| View API keys | ✓ | × | × |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| 查看 API 密钥 | ✓ | × | × |'
- en: '| Manage API keys | ✓ | × | × |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| 管理 API 密钥 | ✓ | × | × |'
- en: '| View organization billing information | ✓ | ✓ | ✓ |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| 查看组织账单信息 | ✓ | ✓ | ✓ |'
- en: '| Manage organization billing information | ✓ | × | × |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| 管理组织账单信息 | ✓ | × | × |'
- en: '| Manage Grafana Cloud subscription | ✓ | × | × |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| 管理 Grafana Cloud 订阅 | ✓ | × | × |'
- en: '| View Grafana instance plugins | ✓ | ✓ | ✓ |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| 查看 Grafana 实例插件 | ✓ | ✓ | ✓ |'
- en: '| Manage Grafana instance plugins | ✓ | × | × |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| 管理 Grafana 实例插件 | ✓ | × | × |'
- en: '| View stacks | ✓ | ✓ | ✓ |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| 查看堆栈 | ✓ | ✓ | ✓ |'
- en: '| Manage stacks | ✓ | ✓ | × |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| 管理堆栈 | ✓ | ✓ | × |'
- en: '| Manage organization members | ✓ | × | × |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| 管理组织成员 | ✓ | × | × |'
- en: '| View invoices | ✓ | ✓ | ✓ |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| 查看发票 | ✓ | ✓ | ✓ |'
- en: '| Pay invoices | ✓ | × | × |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| 支付发票 | ✓ | × | × |'
- en: '| View Enterprise licenses | ✓ | ✓ | ✓ |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| 查看企业许可证 | ✓ | ✓ | ✓ |'
- en: '| View OAuth clients | ✓ | ✓ | ✓ |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| 查看 OAuth 客户端 | ✓ | ✓ | ✓ |'
- en: '| Manage OAuth clients | ✓ | × | × |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| 管理 OAuth 客户端 | ✓ | × | × |'
- en: '| View support tickets | ✓ | ✓ | ✓ |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| 查看支持工单 | ✓ | ✓ | ✓ |'
- en: '| Open support tickets | ✓ | ✓ | × |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| 开放支持工单 | ✓ | ✓ | × |'
- en: Table 11.1 – Grafana Cloud RBAC
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 表 11.1 – Grafana Cloud RBAC
- en: 'These Grafana Cloud roles are focused on managing a Grafana Cloud instance.
    For most users, using and editing items in one or more Grafana instances is more
    applicable to their daily work. Grafana offers a rich permission set that breaks
    down into the following:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 这些 Grafana Cloud 角色专注于管理 Grafana Cloud 实例。对于大多数用户来说，使用和编辑一个或多个 Grafana 实例中的项目更适用于他们的日常工作。Grafana
    提供了丰富的权限设置，具体分为以下几类：
- en: '**Basic roles**: The basic roles have very broad privileges. This is great
    for small organizations and having easy access to new installations. Assigning
    a basic role with least privilege to users is good practice. The basic roles are
    a default set of fixed role definitions, which we’ll discuss in the next point.
    Basic roles include the following:'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基础角色**：基础角色拥有非常广泛的权限。这对于小型组织以及便捷地访问新安装非常有用。将基本角色分配给用户，并且尽量采用最小权限原则是一个良好的做法。基础角色是一组默认的固定角色定义，我们将在下一个点中讨论。基础角色包括以下内容：'
- en: '**Admin**: An admin for a Grafana organization.'
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理员**：Grafana 组织的管理员。'
- en: '**Editor**: A user who has access to edit objects in the organization.'
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编辑者**：具有编辑组织中对象权限的用户。'
- en: '**Viewer**: A user who has access to view objects.'
  id: totrans-195
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**查看者**：具有查看对象权限的用户。'
- en: '**None**: A role that has minimal privileges for use with service accounts'
  id: totrans-196
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无**：具有最小权限，通常用于服务账户。'
- en: '**Grafana Admin**: A special admin account for all the Grafana organizations
    in an on-premises instance. As we have mainly discussed Grafana Cloud, let’s clarify
    what a Grafana organization is:'
  id: totrans-197
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Grafana 管理员**：一个特殊的管理员账户，适用于所有本地实例中的 Grafana 组织。由于我们主要讨论的是 Grafana Cloud，下面来澄清一下什么是
    Grafana 组织：'
- en: Organizations are a method to separate Grafana resources in a single instance.
  id: totrans-198
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组织是一种方法，用于在单一实例中分隔 Grafana 资源。
- en: In Grafana Cloud, organizations are not available to use. Stacks are a better
    way to separate parts of the organization as a dedicated Grafana instance will
    be used in each stack.
  id: totrans-199
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Grafana Cloud 中，组织不可用。堆栈是更好的方法来分隔组织的部分，因为每个堆栈将使用专用的 Grafana 实例。
- en: '**Fixed role definitions**: Fixed roles can be used to expand the privileges
    assigned via basic roles. Fixed roles contain specific permission assignments
    that can be added to a subject.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**固定角色定义**：固定角色可以用于扩展通过基本角色分配的权限。固定角色包含特定的权限分配，可以添加到主体上。'
- en: '**Custom roles**: Custom roles allow for the creation of roles that have specific
    permissions, actions, and scopes assigned to them. Custom roles can only be created
    via the API, but Terraform can be used to manage these with IaC.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自定义角色**：自定义角色允许创建具有特定权限、操作和作用域的角色。自定义角色只能通过 API 创建，但可以使用 Terraform 管理这些角色，作为基础设施即代码（IaC）的一部分。'
- en: 'Permissions can also be assigned at the data source, team, dashboard, and folder
    levels. This can allow for structures such as giving management capabilities to
    all dashboards in a folder assigned to a specific team, but not granting management
    to other team folders. All the permission structures can also be managed using
    IaC, which we discussed in [*Chapter 10*](B18277_10.xhtml#_idTextAnchor204). Grafana
    provides a helpful guide on planning an RBAC rollout strategy here: [https://grafana.com/docs/grafana/latest/administration/roles-and-permissions/access-control/plan-rbac-rollout-strategy/](https://grafana.com/docs/grafana/latest/administration/roles-and-permissions/access-control/plan-rbac-rollout-strategy/).'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 权限还可以在数据源、团队、仪表板和文件夹级别分配。这可以实现一些结构，例如将所有文件夹中分配给特定团队的仪表板的管理权限授予该团队，但不授予其他团队文件夹的管理权限。所有的权限结构也可以使用
    IaC 管理，我们在 [*第 10 章*](B18277_10.xhtml#_idTextAnchor204) 中讨论了这一点。Grafana 提供了一份有关规划
    RBAC 部署策略的有用指南，详情请见：[https://grafana.com/docs/grafana/latest/administration/roles-and-permissions/access-control/plan-rbac-rollout-strategy/](https://grafana.com/docs/grafana/latest/administration/roles-and-permissions/access-control/plan-rbac-rollout-strategy/)。
- en: 'Let’s consider how we might configure roles for some of the personas we have
    – *Diego Developer*, *Steven Service*, and *Pelé Product*:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑如何为我们的一些人物配置角色——*Diego 开发者*，*Steven 服务*，和 *Pelé 产品*：
- en: As a member of a team responsible for a service, *Diego* will need to be able
    to read dashboards to understand how other services may be behaving. He will also
    need to have write access for dashboards and alerts, but is limited to the folder
    that contains the application he is responsible for.
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为负责某个服务的团队成员，*Diego* 需要能够读取仪表板，以了解其他服务的运行情况。他还需要对仪表板和警报具有写访问权限，但仅限于包含他负责的应用程序的文件夹。
- en: '*Steven* needs to be able to view dashboards but not edit them. However, he
    does need to be able to view and manage on-call schedules and silence alerts.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Steven* 需要能够查看仪表板，但不能编辑它们。然而，他确实需要能够查看和管理值班安排，并静音警报。'
- en: '*Pelé* has a couple of distinct needs. For most day-to-day processes, he needs
    to be able to view dashboards, incident history, and query data about the applications
    he is the product owner for. However, he also needs a service account to run specific
    queries for business metrics and load the data into the BI platform that is used
    with *Masha Manager* to analyze whether the teams need any help with delivering
    great products. He worked on setting up this service account with limited permission
    with *Ophelia*, the admin of the Grafana system.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Pelé* 有一些独特的需求。对于大多数日常流程，他需要能够查看仪表板、事件历史，并查询关于他负责的产品应用程序的数据。然而，他还需要一个服务账户，以便运行特定的查询，获取业务指标并将数据加载到与
    *Masha 经理* 一起使用的 BI 平台中，用于分析团队是否需要任何帮助来交付出色的产品。他与 *Ophelia*（Grafana 系统的管理员）一起工作，设置了这个具有有限权限的服务账户。'
- en: For most users, once a role is created, it is simply a case of assigning the
    role to the individual user. Special consideration should be made for service
    accounts. Some service accounts, such as those used by the team managing the provisioning
    of Grafana tools, will need significant access and should be thoroughly audited.
    Other accounts, such as those used by an individual application team to manage
    dashboards, should have limited permissions. With this second type of account,
    it is a good idea to grant limited privileges for managing the service account
    to a senior member of the team as this enables the team to work independently.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数用户，一旦角色创建完成，接下来就是将角色分配给单个用户的过程。对于服务账户应特别考虑。一些服务账户，例如由管理 Grafana 工具提供的团队使用的账户，将需要较大的访问权限，并应进行彻底审计。其他账户，例如由单个应用程序团队管理仪表板时使用的账户，应具有有限的权限。对于这种第二种类型的账户，建议将管理服务账户的有限权限授予团队中的高级成员，因为这能让团队独立工作。
- en: Now that we understand RBAC in Grafana, let’s have a look at how data collected
    for Grafana can be used in other systems.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们理解了Grafana中的RBAC，让我们看看Grafana收集的数据如何在其他系统中使用。
- en: Sending telemetry to other consumers
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将遥测数据发送给其他消费者
- en: 'It is common for the data collected by observability systems to be of use in
    other systems. Logs are often used in SIEM systems and aggregate metrics are of
    interest in BI systems. There are two different strategies that can be used to
    share telemetry with other consumers:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 可观测性系统收集的数据通常在其他系统中使用。日志通常在SIEM系统中使用，聚合指标在BI系统中很有用。有两种不同的策略可以用来与其他消费者共享遥测数据：
- en: '**Sharing data in the collection pipeline**: Sharing data in the collection
    pipeline is dependent on the data collection pipeline being used. We’ve talked
    a lot about the OpenTelemetry collector, which offers the ability to filter and
    send data to multiple backend systems. Similarly, AWS, GCP, and Azure offer options
    for writing telemetry to multiple backend systems. A consideration is that this
    type of solution will increase costs by storing multiple copies of the same data.
    Spending time with other consumers to understand their needs to minimize this
    cost is advised.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在收集管道中共享数据**：在收集管道中共享数据取决于正在使用的数据收集管道。我们已经讨论了OpenTelemetry收集器，它提供了过滤和将数据发送到多个后端系统的功能。同样，AWS、GCP和Azure提供了将遥测数据写入多个后端系统的选项。需要考虑的是，这种类型的解决方案会通过存储相同数据的多个副本来增加成本。建议与其他消费者共同花时间了解其需求，以最小化这种成本。'
- en: '**Querying data from Grafana directly**: Querying data from Grafana is done
    using a scheduled job that runs queries directly against Grafana. These are often
    custom connectors that will read data and write it into a BI platform. Grafana
    offers the recording rule functionality, which can assist in this data collection
    process. This functionality allows for the pre-computation of queries, which can
    be stored as a separate time series. For example, if the business were interested
    in the number of unique users who logged in daily, a recording rule could query
    this and store the data as a new metric. When the BI platform then collects this
    data, it would not need to wait for a potentially slow query to complete and instead
    would have the data easily available.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**直接从Grafana查询数据**：通过定期运行直接针对Grafana的查询来查询数据。这些通常是自定义连接器，将读取数据并将其写入BI平台。Grafana提供了记录规则功能，可以帮助进行数据收集。此功能允许预计算查询，并将其存储为单独的时间序列。例如，如果业务关心每天登录的唯一用户数，则记录规则可以查询此数据并将其存储为新的指标。当BI平台收集这些数据时，不需要等待潜在的缓慢查询完成，而是可以轻松获取数据。'
- en: You should now be confident in architecting a comprehensive observability platform
    that meets the needs of the organization and can feed valuable information into
    other systems across the organization.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您应该对设计符合组织需求的全面可观测平台并向组织内其他系统提供有价值信息感到自信了。
- en: Summary
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we have explored the process of architecting the data fields
    that will be collected. You will be able to use this knowledge to structure data
    in a Grafana platform so it is easy to use across your organization. We have discussed
    the process of architecting data production by applications and offering standard
    guidance on the best application structure to use. This will account for most
    needs of the developers in the organization. We shared several levels of complexity
    for the data collection architecture. You can use these as a starting point for
    architecting your own system. We discussed the various tools that are available
    to validate an architectural design: both tools for running local infrastructure
    and tools to simulate data that is being collected. This will help in producing
    a pipeline for delivering the infrastructure for an observability platform that
    you can rely on. Finally, we briefly discussed how to share data with other consumers,
    either in the data collection pipeline or by querying Grafana directly. You can
    use this knowledge to link observability data back to the rest of the organization.'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了设计数据字段的过程，这些字段将被收集起来。您可以利用这些知识，在Grafana平台上结构化数据，使其在整个组织中易于使用。我们讨论了通过应用程序进行数据生产的过程，并提供了关于最佳应用程序结构的标准指导。这将满足组织中开发人员的大部分需求。我们分享了数据收集架构的几个复杂级别。您可以将它们用作构建自己系统的起点。我们讨论了用于验证架构设计的各种工具：既有用于运行本地基础设施的工具，也有用于模拟正在收集的数据的工具。这将有助于生成可靠的可观察性平台基础设施交付管道。最后，我们简要讨论了如何与其他消费者共享数据，无论是在数据收集管道中还是通过直接查询Grafana。您可以利用这些知识将可观察性数据链接回组织的其余部分。
- en: In the next chapter, we will explore the use of **real user monitoring** (**RUM**)
    to collect data directly from the browser. This provides visibility of how your
    code runs when users are active in the system.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨使用**真实用户监控**（**RUM**）直接从浏览器收集数据。这提供了在用户活跃系统中运行代码的可见性。
- en: 'Part 4: Advanced Applications and Best Practices of Grafana'
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4部分：Grafana的高级应用和最佳实践
- en: There are a number of topics related to observability, including frontend observability,
    application performance, load testing, DevOps pipelines, and monitoring security
    applications. This part will discuss these topics and additionally look at possible
    future trends. We will close out with some best practices and troubleshooting
    approaches.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多与可观察性相关的主题，包括前端可观察性、应用程序性能、负载测试、DevOps流水线和监视安全应用程序。本部分将讨论这些主题，并额外关注可能的未来趋势。最后，我们将总结一些最佳实践和故障排除方法。
- en: 'This part has the following chapters:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包括以下章节：
- en: '[*Chapter 12*](B18277_12.xhtml#_idTextAnchor231)*, Real User Monitoring with
    Grafana*'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第12章*](B18277_12.xhtml#_idTextAnchor231)*，通过Grafana进行真实用户监控*'
- en: '[*Chapter 13*](B18277_13.xhtml#_idTextAnchor239)*, Application Performance
    with Grafana Pyroscope and k6*'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第13章*](B18277_13.xhtml#_idTextAnchor239)*，使用Grafana Pyroscope和k6进行应用程序性能*'
- en: '[*Chapter 14*](B18277_14.xhtml#_idTextAnchor254)*, Supporting DevOps Processes
    with Observability*'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第14章*](B18277_14.xhtml#_idTextAnchor254)*，支持DevOps流程的可观察性*'
- en: '[*Chapter 15*](B18277_15.xhtml#_idTextAnchor272)*, Troubleshooting, Implementing
    Best Practices, and More with Grafana*'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第15章*](B18277_15.xhtml#_idTextAnchor272)*，故障排除、实施最佳实践及其他Grafana功能*'

- en: Kubernetes Client Libraries
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes 客户端库
- en: Kubernetes provides multiple options for creating applications with the Kubernetes
    API. These options include tools such as `kubectl`, `helm`, `kops`, and `kubeadm`;
    and client libraries, which are officially supported or community-maintained.
    However, it is essential that you know the capabilities and boundaries of the
    clients in order to create applications that interact with Kubernetes.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 提供多种选项来使用 Kubernetes API 创建应用程序。这些选项包括 `kubectl`、`helm`、`kops` 和
    `kubeadm` 等工具；以及官方支持的或社区维护的客户端库。然而，了解客户端的能力和局限性是至关重要的，只有这样才能创建与 Kubernetes 交互的应用程序。
- en: In this chapter, you will learn how to access the Kubernetes API directly and
    use Kubernetes client libraries. Firstly, direct access to the Kubernetes API
    will be explained, and responses from the Kubernetes API will be demonstrated.
    Following that, official and community-maintained libraries will be given, including
    detailed information and example applications. Throughout this chapter, you'll
    develop applications that connect to the Kubernetes API, inside and outside the
    cluster.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何直接访问 Kubernetes API 并使用 Kubernetes 客户端库。首先，将解释如何直接访问 Kubernetes API，并演示从
    Kubernetes API 返回的响应。接下来，将介绍官方和社区维护的库，包括详细信息和示例应用程序。在本章中，您将开发与 Kubernetes API
    连接的应用程序，既包括集群内的，也包括集群外的。
- en: 'By the end of this chapter, you will be able to:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章结束时，您将能够：
- en: Evaluate the Kubernetes API request and response style
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 评估 Kubernetes API 请求和响应风格
- en: Connect to the Kubernetes API using HTTP
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 HTTP 连接到 Kubernetes API
- en: Find and use official client libraries
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找并使用官方客户端库
- en: Write, run, and deploy client library applications
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写、运行并部署客户端库应用程序
- en: Evaluate community-maintained client libraries for further projects
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 评估社区维护的客户端库，以支持进一步的项目
- en: Accessing the Kubernetes API
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问 Kubernetes API
- en: 'Kubernetes consists of several loosely-coupled components, with the principal
    idea of managing versioned resources. Kubernetes components can be divided into
    two sections: the control plane and node components. The control plane consists
    of the API Server, Controller Managers, and Schedulers. The API Server is the
    core management component and has the following functionalities:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 由多个松散耦合的组件组成，主要目的是管理版本化资源。Kubernetes 组件可以分为两大部分：控制平面和节点组件。控制平面包括
    API 服务器、控制器管理器和调度器。API 服务器是核心管理组件，具有以下功能：
- en: Serves a REST API for the clients outside the cluster and Kubernetes components
    inside the cluster
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为集群外的客户端和集群内的 Kubernetes 组件提供 REST API 服务
- en: Creates, deletes, and updates all of the Kubernetes resources, such as pods,
    deployments, and services
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建、删除和更新所有 Kubernetes 资源，例如 Pod、部署和服务
- en: Stores the state of the objects in a distributed key/value store
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将对象的状态存储在分布式键值存储中
- en: Kubernetes API Style
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes API 风格
- en: The Kubernetes API is a RESTful service that requires all clients to create,
    read, update, and delete resources using HTTP requests, such as `GET`, `PUT`,
    `POST`, and `DELETE`. Client applications such as `kubectl` or client libraries
    in various programming languages implement the API response and request types.
    For communication, the Kubernetes API accepts and returns JSON data, just like
    most of the RESTful services that are available.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes API 是一种 RESTful 服务，要求所有客户端使用 HTTP 请求（如 `GET`、`PUT`、`POST` 和 `DELETE`）来创建、读取、更新和删除资源。客户端应用程序，如
    `kubectl` 或各种编程语言中的客户端库，实施 API 的请求和响应类型。为了通信，Kubernetes API 接受并返回 JSON 数据，就像大多数可用的
    RESTful 服务一样。
- en: '**Representational State Transfer** (**REST**) is an architectural style for
    web applications so that they can use HTTP requests. As a convention, `GET` is
    used for reading resources, `POST` is used for creating resources, `PUT` is used
    for updating resources, and `DELETE` is used for deleting resources.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**表现状态转移**（**REST**）是一种 Web 应用程序架构风格，使其能够使用 HTTP 请求。按照惯例，`GET` 用于读取资源，`POST`
    用于创建资源，`PUT` 用于更新资源，`DELETE` 用于删除资源。'
- en: Servers that apply the RESTful API are expected to have clients without any
    knowledge of server structure. Likewise, the server should provide all related
    information for the client so that it can operate and interact with itself.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 应用 RESTful API 的服务器应确保客户端无需了解服务器结构。服务器也应提供所有相关信息，以便客户端能够操作并与其交互。
- en: '**JavaScript Object Notation** (**JSON**) is a popular and lightweight data
    exchange format. JSON is suitable for machine parsing and generation, and is human-readable
    and expressive. Although written in JavaScript, JSON is supported by multiple
    languages and is a crucial data type of modern asynchronous browser/server communication.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**JavaScript 对象表示法**（**JSON**）是一种流行的轻量级数据交换格式。JSON 适用于机器解析和生成，并且具有可读性和表达性。尽管
    JSON 是用 JavaScript 编写的，但它被多种语言支持，并且是现代异步浏览器/服务器通信中的关键数据类型。'
- en: In the following section, the Kubernetes API response style will be explored
    by calling an API server REST endpoint.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，将通过调用 API 服务器的 REST 端点来探索 Kubernetes API 响应的风格。
- en: Getting a JSON Response from the Kubernetes API
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 Kubernetes API 获取 JSON 响应
- en: This section shows how to retrieve raw data from the Kubernetes API by using
    `kubectl` and analyze the data as a JSON object for the parts of the resource.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分展示了如何通过使用 `kubectl` 从 Kubernetes API 获取原始数据，并将数据作为 JSON 对象进行分析，获取资源的各个部分。
- en: 'Let''s begin by implementing the following steps:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始实现以下步骤：
- en: 'Get the raw data with the following command:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令获取原始数据：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As a result, you will see a JSON response. Let''s get the same command and
    format the output:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结果是，你将看到一个 JSON 响应。让我们获取相同的命令并格式化输出：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If Python is not locally installed, any online JSON formatter can be used by
    copying and pasting the output.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Python 未安装，可以通过复制并粘贴输出，使用任何在线 JSON 格式化工具。
- en: 'The JSON response shows the structure of a Kubernetes API resource:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: JSON 响应显示了 Kubernetes API 资源的结构：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Kubernetes API resources have `"apiVersion"` since all resources are versioned
    in the system. `"kind"` shows the type of the resource and `"metadata"` has all
    of the meta information, such as the creation timestamp, labels, or annotations.
    `"spec"` is the part where all properties of the resource are listed. Finally,
    most of the resources have a `"status"` section to show their state, errors, or
    messages (if any).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes API 资源有 `"apiVersion"`，因为所有资源在系统中都是版本化的。`"kind"` 显示资源的类型，`"metadata"`
    包含所有元数据，如创建时间戳、标签或注解。`"spec"` 是列出所有资源属性的部分。最后，大多数资源有一个 `"status"` 部分，用来显示它们的状态、错误或信息（如果有的话）。
- en: Accessing the Kubernetes API
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问 Kubernetes API
- en: 'The Kubernetes API server is secure, requiring all incoming connections to
    be authenticated. There are two common ways of connecting and securely communicating
    with the Kubernetes API server. The first one is by using the reverse proxy functionality
    of kubectl and the second one is by using the API server credentials. These approaches
    can be summarized as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes API 服务器是安全的，要求所有传入的连接都进行身份验证。有两种常见的连接方式，可以与 Kubernetes API 服务器进行安全通信。第一种是通过
    kubectl 使用反向代理功能，第二种是通过 API 服务器凭证。这些方法可以总结如下：
- en: 'The reverse proxy Kubernetes API with kubectl:'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 kubectl 反向代理 Kubernetes API：
- en: The Kubectl proxy command starts a proxy server between the localhost and the
    Kubernetes API server.
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubectl 代理命令启动了一个本地主机与 Kubernetes API 服务器之间的代理服务器。
- en: All incoming requests are forwarded to the remote Kubernetes API server port.
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有传入请求都被转发到远程 Kubernetes API 服务器端口。
- en: The API server identity is verified by using self-signed certificates so that
    no **Man-in-the-Middle** (**MITM**) attacks are is possible.
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: API 服务器身份通过自签名证书进行验证，以防止发生**中间人攻击**（**MITM**）。
- en: kubectl handles authentication to the API server. This is a recommended approach
    in the official Kubernetes documentation.
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: kubectl 负责与 API 服务器的身份验证。这是官方 Kubernetes 文档中推荐的做法。
- en: Further development is ongoing; client-side load balancing and failover features
    could be provided in the future.
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进一步的开发正在进行中；未来可能会提供客户端负载均衡和故障转移功能。
- en: 'Provides the API server address and credentials directly:'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接提供 API 服务器地址和凭证：
- en: The API server address and credentials are available within and outside the
    cluster and they can be provided as parameters.
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: API 服务器的地址和凭证可以在集群内部或外部获取，并且可以作为参数提供。
- en: This is an alternative approach and should be used as a last resort if the client
    application cannot work with a reversed proxy.
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是一种替代方法，应该在客户端应用无法与反向代理协作时作为最后手段使用。
- en: In order to protect from MITM attacks, certificates should be imported to the
    clients, for example, through browsers.
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了防止 MITM 攻击，证书应导入客户端，例如通过浏览器。
- en: In the following activity, connecting to the Kubernetes API by using the `kubectl`
    proxy is carried out to create a new Kubernetes namespace. With this method, `kubectl`
    securely connects to the API server with its own credentials and creates a proxy
    for the applications on the local system.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的活动中，通过使用`kubectl`代理连接到Kubernetes API，以创建一个新的Kubernetes命名空间。通过这种方法，`kubectl`使用自己的凭证安全地连接到API服务器，并为本地系统上的应用程序创建代理。
- en: Connecting to the Kubernetes API and Creating Namespaces
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接到Kubernetes API并创建命名空间
- en: 'In this section, you are assigned the job of creating namespaces for tests
    by using the Kubernetes API. Tests are running outside the cluster and communicate
    with the Kubernetes API. In order to run tests in their own namespaces, you need
    to create a namespace. With the successful completion of this task, a new namespace
    will be created within Kubernetes by sending JSON data. Let''s ensure to follow
    these steps before starting with our example:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你的任务是通过使用Kubernetes API为测试创建命名空间。测试在集群外部运行，并与Kubernetes API进行通信。为了在自己的命名空间中运行测试，你需要创建一个命名空间。在完成此任务后，通过发送JSON数据将在Kubernetes中创建一个新的命名空间。让我们在开始示例之前确保遵循以下步骤：
- en: Create a proxy with kubectl and make it available to all applications on the
    local system
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用kubectl创建代理，并使其对本地系统上的所有应用程序可用
- en: Use JSON and cURL to communicate with the Kubernetes API
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JSON和cURL与Kubernetes API进行通信
- en: Gather the JSON structure of the namespace resource by querying kubesystem and
    use it as a template
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过查询kubesystem来获取命名空间资源的JSON结构，并将其作为模板使用
- en: 'Let''s begin by implementing the following steps:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从实现以下步骤开始：
- en: 'Start the reverse proxy with the following command:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令启动反向代理：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In another terminal, create an HTTP request to the forwarded port:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在另一个终端中，创建一个指向转发端口的HTTP请求：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The response is expected to be a JSON structure similar to the following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 预期的响应应为类似以下的JSON结构：
- en: '![](img/7abbc564-ca11-4aee-b64d-853f2c238915.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7abbc564-ca11-4aee-b64d-853f2c238915.png)'
- en: 'Using the response of *Step 2* as a template, create a simple namespace JSON
    object:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用*步骤 2*的响应作为模板，创建一个简单的命名空间JSON对象：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Create the new namespace by using `curl` with the payload data from *Step 3*:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`curl`并使用*步骤 3*中的负载数据创建新的命名空间：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'As a result of this command, the newly created namespace data will be received:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此命令后，将接收到新创建的命名空间数据：
- en: '![](img/0f9024d6-4866-4623-ad2c-9ca54246b42c.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0f9024d6-4866-4623-ad2c-9ca54246b42c.png)'
- en: 'You can run the following command for cleanup:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以运行以下命令进行清理：
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Accessing the Kubernetes API inside a Cluster
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问集群内的Kubernetes API
- en: Accessing the Kubernetes API outside the cluster is mostly done for operational
    bases where human interaction is required. In addition to outside communication,
    accessing the Kubernetes API inside the cluster to make requests to the API server
    is also possible. It enables writing applications and running them inside the
    cluster, which could convert operational knowledge into applications.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 访问集群外部的Kubernetes API大多数是用于需要人工交互的操作基础。此外，访问Kubernetes API并向API服务器发送请求也可以在集群内部进行。这使得可以在集群内部编写应用程序并运行它们，从而将操作知识转化为应用程序。
- en: For all of the pods in the cluster, Kubernetes injects service accounts – they
    are the recommended way of authenticating to the Kubernetes API server. For each
    pod, the following information and credentials related to service accounts are
    mounted
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 对于集群中的所有Pod，Kubernetes会注入服务账户——它们是推荐的认证Kubernetes API服务器的方式。对于每个Pod，以下与服务账户相关的信息和凭证都会被挂载
- en: 'by default:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下：
- en: '**Service account and token**: `/var/run/secrets/kubernetes.io/serviceaccount/token`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务账户和令牌**：`/var/run/secrets/kubernetes.io/serviceaccount/token`'
- en: '**Certificate bundle**: `/var/run/secrets/kubernetes.io/serviceaccount/ca.crt`'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**证书包**：`/var/run/secrets/kubernetes.io/serviceaccount/ca.crt`'
- en: '**Namespace**: `/var/run/secrets/kubernetes.io/serviceaccount/namespace`'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命名空间**：`/var/run/secrets/kubernetes.io/serviceaccount/namespace`'
- en: 'Using this information within the cluster forms a secure way of connecting
    to the Kubernetes API server and making requests. The service account, which is
    an authentication mechanism in Kubernetes, uses signed tokens to verify requests.
    They are created and managed by the Kubernetes API server. For each pod running
    in Kubernetes, service account tokens are mounted, and they enable pods to communicate
    with the Kubernetes API server. Further information is available in the official
    documentation: [https://kubernetes.io/docs/admin/authentication](https://kubernetes.io/docs/admin/authentication).'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在集群内部使用这些信息形成了一种安全的方式来连接 Kubernetes API 服务器并进行请求。服务账户作为 Kubernetes 中的一种身份验证机制，使用签名的令牌来验证请求。这些令牌由
    Kubernetes API 服务器创建和管理。对于在 Kubernetes 中运行的每个 Pod，都会挂载服务账户令牌，它们使 Pod 能够与 Kubernetes
    API 服务器进行通信。更多信息可以参考官方文档：[https://kubernetes.io/docs/admin/authentication](https://kubernetes.io/docs/admin/authentication)。
- en: To Connect to the Kubernetes API inside a Cluster
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在集群内部连接 Kubernetes API
- en: In this section, we'll create a simple application to query the Kubernetes API
    and get the details of the kube-system namespace. However, this application should
    run inside the cluster and work as a Kubernetes native application. We'll query
    the Kubernetes API within a cluster with the injected environment variables and
    certificates in the pods.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建一个简单的应用程序，用于查询 Kubernetes API 并获取 kube-system 命名空间的详细信息。然而，这个应用程序应该在集群内部运行，并作为
    Kubernetes 本地应用程序工作。我们将在集群内部查询 Kubernetes API，并在 Pod 中注入环境变量和证书。
- en: 'Let''s begin by implementing the following steps:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从实现以下步骤开始：
- en: 'Start a cURL instance inside the cluster and wait until it is up and running:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在集群内部启动一个 cURL 实例，并等待它启动并运行：
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Inside the pod, check the security credentials:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Pod 内部检查安全凭证：
- en: '[PRE9]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You''ll get the following output:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您将获得以下输出：
- en: '![](img/33a4ec4e-4602-47db-84d5-277b215b3718.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/33a4ec4e-4602-47db-84d5-277b215b3718.png)'
- en: 'Check that the Kubernetes API server has the related environment variables:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查 Kubernetes API 服务器是否具有相关的环境变量：
- en: '[PRE10]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You''ll get the following output:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 您将获得以下输出：
- en: '![](img/dccd7f87-ed37-4ef0-8403-304c6d921ff0.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dccd7f87-ed37-4ef0-8403-304c6d921ff0.png)'
- en: 'Combine all of the credentials and address information together with the following
    commands:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令将所有凭据和地址信息结合起来：
- en: '[PRE11]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'With the collected environment variables from *Step 4*, create and send an
    HTTP request by using cURL:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 *步骤 4* 中收集到的环境变量，通过 cURL 创建并发送 HTTP 请求：
- en: '[PRE12]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: By using the preceding command, a GET request will be sent to the `/api/v1/namespaces/kube-system`
    endpoint. In order to authenticate to the API server, a bearer token is sent as
    a header, and certificate authority information is provided.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述命令时，将向 `/api/v1/namespaces/kube-system` 端点发送一个 GET 请求。为了对 API 服务器进行身份验证，将作为标头发送一个承载令牌，并提供证书授权信息。
- en: 'As a result of this command, the requested namespace information will be retrieved
    from the API server:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此命令后，将从 API 服务器获取请求的命名空间信息：
- en: '![](img/32f0bb5d-baac-4ebd-b8bb-9a3385becd49.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/32f0bb5d-baac-4ebd-b8bb-9a3385becd49.png)'
- en: The Kubernetes API is the core management service and it is a secure RESTful
    service that consumes JSON. It requires all of the clients to be authenticated,
    and both outside and inside cluster connections are possible. In the following
    section, client libraries for various programming languages are presented that
    implement the Kubernetes API.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes API 是核心管理服务，它是一个安全的 RESTful 服务，使用 JSON 格式。它要求所有客户端都进行身份验证，并且既可以是外部连接，也可以是集群内部连接。在接下来的部分中，将介绍多种编程语言的客户端库，这些库实现了
    Kubernetes API。
- en: Official Client Libraries
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 官方客户端库
- en: Applications that consume the Kubernetes REST API should implement API calls,
    including request and response types. Considering the rich set of Kubernetes resources
    that are provided to us, developing and maintaining API implementation becomes
    complex. Fortunately, Kubernetes has a rich set of official client libraries that
    are implemented in various programming languages. Client libraries do not only
    handle requests and responses, but also handle authentication to the API server.
    Besides, most of the client libraries can discover and connect to the Kubernetes
    API server if it is running inside the cluster.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 消费 Kubernetes REST API 的应用程序应实现 API 调用，包括请求和响应类型。考虑到 Kubernetes 提供的丰富资源集，开发和维护
    API 实现变得复杂。幸运的是，Kubernetes 提供了一套丰富的官方客户端库，涵盖了各种编程语言。这些客户端库不仅处理请求和响应，还处理与 API 服务器的身份验证。此外，大多数客户端库能够发现并连接到集群内部运行的
    Kubernetes API 服务器。
- en: In this section, official Go and Python client libraries will be presented.
    The client repositories, documentation, how to install, and how to create simple
    applications that are running inside and outside the clusters will be covered.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将介绍官方的 Go 和 Python 客户端库，包括客户端代码库、文档、安装方法，以及如何创建在集群内外运行的简单应用程序。
- en: Go Client Library
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go 客户端库
- en: 'Go, which is also of en referred to as Golang, is a programming language that
    was created by Google in 2009\. Prominent features of Go include the following:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Go，也被称为 Golang，是 Google 在 2009 年创建的编程语言。Go 的显著特点包括：
- en: It is statically typed so that the compiler ensures object types and conversions
    are working
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是静态类型的，因此编译器可以确保对象类型和转换的正确性
- en: It has memory safety with no development concerns
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它具有内存安全性，且无需担心开发问题
- en: It has garbage collection with a minimal overhead
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它具有垃圾回收功能，且开销最小
- en: The structural typing of objects is based on their composition
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象的结构化类型基于其组成
- en: It has first-citizen concurrency handling with primitives such as go routines
    and channels
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它具有原生的并发处理能力，提供了诸如 Go 协程和通道等原语
- en: 'Go is a free, open source programming language that has compilers and environment
    tools. Go became popular within cloud-native applications because the aforementioned
    features are well-fitting to the requirements of scalable and reliable applications.
    Some of the most notable projects that use Go as their primary language are as
    follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Go 是一种免费、开源的编程语言，具有编译器和环境工具。Go 因其上述特点在云原生应用中得到了广泛应用，因这些特点非常适合可扩展和可靠应用的需求。一些最著名的使用
    Go 作为主要语言的项目如下：
- en: Docker
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker
- en: Kubernetes
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes
- en: Terraform
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Terraform
- en: OpenShift
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenShift
- en: Consul
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Consul
- en: Bitcoin Lightning Network
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比特币闪电网络
- en: InfluxDB
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: InfluxDB
- en: CockroachDB
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CockroachDB
- en: Repository
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仓库
- en: Kubernetes' Go client, namely client-go, is part of the Kubernetes official
    project, which is available at [https://github.com/kubernetes/client-go](https://github.com/kubernetes/client-go).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 的 Go 客户端，即 client-go，是 Kubernetes 官方项目的一部分，代码库可在 [https://github.com/kubernetes/client-go](https://github.com/kubernetes/client-go)
    查阅。
- en: It is the oldest and the most comprehensive client library. Kubernetes resource
    handlers of the client library are generated with the official source code generators
    from Kubernetes. In addition, client-go is widely used inside Kubernetes projects,
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 它是最古老且最全面的客户端库。该客户端库的 Kubernetes 资源处理程序是通过 Kubernetes 官方源代码生成器生成的。此外，client-go
    在 Kubernetes 项目中得到了广泛应用。
- en: such as kubectl, helm, and kops.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如 kubectl、helm 和 kops 等工具。
- en: Documentation
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文档
- en: 'The Go client repository consists of the following packages and respective
    focus areas:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Go 客户端代码库包含以下包及其相关领域：
- en: '`kubernetes`: Clientset to access the Kubernetes API'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubernetes`：访问 Kubernetes API 的客户端集'
- en: '`discovery`: Discover APIs supported by the Kubernetes API server'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`discovery`：发现 Kubernetes API 服务器支持的 API'
- en: '`dynamic`: Dynamic client to perform generic API access'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dynamic`：执行通用 API 访问的动态客户端'
- en: '`transport`: Authentication and connection start'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transport`：认证和连接启动'
- en: '`tools/cache`: Helpers for writing controllers'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tools/cache`：用于编写控制器的助手'
- en: The Go client follows the official documentation style of the Go language and
    it is available at [https://godoc.org/k8s.io/client-go](https://godoc.org/k8s.io/client-go).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Go 客户端遵循 Go 语言官方文档风格，文档可在 [https://godoc.org/k8s.io/client-go](https://godoc.org/k8s.io/client-go)
    查阅。
- en: Installation
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装
- en: In the Go language, its toolset provides the `go get` command as a standard
    way of downloading and installing packages with their dependencies. This command
    downloads the default branch and the latest changes from source control version
    providers. However, specific versions of the Kubernetes client are designed to
    work with particular versions of dependencies. Therefore, the standard `go get`
    command is not usable. Instead, dependency management solutions proposed for Go
    should be used to work with `client-go` reliably.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Go 语言中，其工具集提供了 `go get` 命令作为下载和安装包及其依赖项的标准方法。此命令从源控制版本提供者下载默认分支和最新更改。然而，Kubernetes
    客户端的特定版本是设计为与特定版本的依赖项一起工作的。因此，标准的 `go get` 命令不可用。相反，应该使用为 Go 提出的依赖管理解决方案，以便可靠地使用
    `client-go`。
- en: In other words, the required version of client-go should be decided, and then
    the dependency manager downloads it with the corresponding dependencies. This
    concept of handling dependencies is called **vendoring**. Accordingly, dependency
    managers collect the dependency libraries and put them in the `vendor` folder.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，应该确定所需的 client-go 版本，然后通过依赖管理器下载它和相应的依赖。这种处理依赖关系的方式叫做 **vendoring**。因此，依赖管理器将收集依赖库并将其放入
    `vendor` 文件夹。
- en: For a Go application that uses the `client-go` library, all related libraries
    and their dependencies should be collected under the vendor folder for reliable
    and repeatable builds.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个使用 `client-go` 库的 Go 应用程序，所有相关的库及其依赖项应当被收集到 vendor 文件夹中，以便进行可靠且可重复的构建。
- en: 'The Kubernetes Go client supports multiple dependency management tools, such
    as dep, godeps, and glide. In addition, the required steps for casual users who
    do not want to use any dependency management tools are provided in the official
    documentation of client-go: [https://github.com/kubernetes/client-go/blob/master/INSTALL.md](https://github.com/kubernetes/client-go/blob/master/INSTALL.md).'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes Go 客户端支持多种依赖管理工具，如 dep、godeps 和 glide。此外，对于不想使用任何依赖管理工具的普通用户，client-go
    官方文档中也提供了所需的步骤：[https://github.com/kubernetes/client-go/blob/master/INSTALL.md](https://github.com/kubernetes/client-go/blob/master/INSTALL.md)。
- en: Creating Configuration
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建配置
- en: 'The Go client library provides the necessary functionalities to connect to
    the Kubernetes API server. It is easy to create the configuration so that you
    can communicate outside the cluster and inside the cluster. You can do so with
    the following code snippets:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Go 客户端库提供了连接 Kubernetes API 服务器所需的功能。它可以轻松地创建配置，以便与集群外部和内部进行通信。你可以使用以下代码片段来实现：
- en: '[PRE13]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Creating Clientset
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 Clientset
- en: 'Clientset contains the clients for each groupof resources and provides access
    to them. With its redacted version, as shown in the following code, it can be
    seen that every group of resources have their clients implemented in the client
    library:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Clientset 包含每组资源的客户端，并提供访问这些资源的权限。在其简化版本中，如以下代码所示，可以看到每一组资源的客户端都在客户端库中得到了实现：
- en: '[PRE14]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Using the configuration from the previous step, clientset can be created with
    the following code snippet:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前一步骤中的配置，可以使用以下代码片段创建 clientset：
- en: '[PRE15]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Making API Calls
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进行 API 调用
- en: 'After creating the configuration and clientset, API calls can finally be carried
    out. All of the Kubernetes resources can be listed, updated, created, or deleted
    by using the clients in the provided clientset. Some examples are shown in the
    following code snippet:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 创建配置和 clientset 后，API 调用最终可以执行。可以使用提供的 clientset 中的客户端列出、更新、创建或删除所有 Kubernetes
    资源。以下代码片段展示了一些示例：
- en: '[PRE16]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Code snippets are provided for the configuration, client creation, and making
    API calls using the Kubernetes Go client in the previous sections. The complete
    application code is provided in `go/main.go`, bringing together all of the snippets
    at [https://goo.gl/wJBjG5](https://goo.gl/wJBjG5).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的章节中提供了配置、客户端创建和使用 Kubernetes Go 客户端进行 API 调用的代码片段。完整的应用程序代码可以在 `go/main.go`
    中找到，它将所有片段整合在一起，链接地址为 [https://goo.gl/wJBjG5](https://goo.gl/wJBjG5)。
- en: 'We can note the following points in the `main.go` file:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以注意到在 `main.go` 文件中的以下几点：
- en: In the main function that was started at *line 19*, all of the variables are
    defined, and the command-line arguments are parsed at *line 30*.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在*第 19 行*启动的主函数中，所有变量都被定义，并且在*第 30 行*解析了命令行参数。
- en: Configuration is created from `kubeconfig`, and as a fallback method, it is
    created by in-cluster methods between *lines 33* and *42*.
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置是从 `kubeconfig` 创建的，并且作为备用方法，它是通过集群内的方法在*第 33 行*和*第 42 行*之间创建的。
- en: Clientset is created at *line 45*.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Clientset 在*第 45 行*创建。
- en: Between *lines 51* and *65*, an indefinite loop is defined with 10 seconds of
    sleep at the end of iterations.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在*第 51 行*和*第 65 行*之间，定义了一个无限循环，迭代结束时会有 10 秒的休眠。
- en: At every iteration of this loop, pods from all namespaces are requested at *line
    53*. The response is printed to the console between *lines 58* and *62*.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在此循环的每次迭代中，来自所有命名空间的 pods 会在*第 53 行*被请求。响应会在*第 58 行*和*第 62 行*之间打印到控制台。
- en: In the following example, an application combining all of the code snippets
    in the previous sections is built and run. It shows you how to build a Go application
    and use it outside the cluster. Although the application seems straightforward,
    the flow and codebase creates a foundation for complex automation requirements.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，构建并运行了一个结合了前面各节代码片段的应用程序。它向你展示了如何构建一个 Go 应用并在集群外使用它。尽管该应用看起来很简单，但其流程和代码库为复杂的自动化需求奠定了基础。
- en: To Use the Kubernetes Go Client outside the Cluster
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在集群外使用 Kubernetes Go 客户端
- en: 'In this section, we''ll learn to build and run a Go application, consuming
    Kubernetes Go client and connecting the application outside the cluster. Go applications
    are built by using go toolset commands such as go build. However, this requires
    the installation of Go locally. In this example, we will use the official Docker
    image of the Go language without any installation on the local machine:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中，我们将学习如何构建并运行一个 Go 应用，使用 Kubernetes Go 客户端，并将应用连接到集群外部。Go 应用是通过使用 Go 工具集命令（如
    go build）构建的。然而，这需要在本地安装 Go。在本示例中，我们将使用 Go 语言的官方 Docker 镜像，而无需在本地机器上进行任何安装：
- en: 'Create a cross-platform build using the official Docker container by using
    the following command:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令通过官方 Docker 容器创建跨平台构建：
- en: '[PRE17]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Start the application using the executable we created in *Step 1* and the `kubeconfig`
    file location:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用我们在*步骤 1*中创建的可执行文件和 `kubeconfig` 文件位置启动应用：
- en: '[PRE18]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You will see the following output:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到以下输出：
- en: '![](img/e58345f5-359c-4a91-a83c-06e7412d75b0.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e58345f5-359c-4a91-a83c-06e7412d75b0.png)'
- en: 'Activity: Using the Kubernetes Go Client inside the Cluster'
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 活动：在集群内使用 Kubernetes Go 客户端
- en: '**Scenario**'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '**场景**'
- en: You are assigned the task of deploying a Go application that lists all of the
    pods in Kubernetes. Besides this, the application will run inside the cluster
    and receive information about its cluster.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 你被分配了一个任务，部署一个列出 Kubernetes 中所有 Pod 的 Go 应用。除此之外，该应用将运行在集群内，并获取有关集群的信息。
- en: '**Aim**'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '**目标**'
- en: To run an application that consumes the Go client library inside the Kubernetes
    cluster.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 运行一个消耗 Go 客户端库的应用程序，位于 Kubernetes 集群内。
- en: '**Prerequisites**'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**前提条件**'
- en: Use the Docker image `onuryilmaz/k8s-client-example:go` image, which contains
    the executable from the previous example.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Docker 镜像 `onuryilmaz/k8s-client-example:go`，该镜像包含了前面示例中的可执行文件。
- en: Deploy the application and check the logs to see whether it is working as expected.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署应用并检查日志，查看它是否按预期工作。
- en: '**Steps for Completion**'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '**完成步骤**'
- en: Create a deployment with the Docker image of the example client from the previous
    example.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用前一个示例中的 Docker 镜像创建一个部署。
- en: Wait until the pod is running.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待直到 Pod 正在运行。
- en: Get the logs of the deployment pod.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取部署 Pod 的日志。
- en: 'With this command, the logs of the pod are retrieved with a subcommand. In
    the subcommand, all pods are retrieved with the selector label of `run` equal
    to `go-client`, and the name of the first pod is gathered. Logs should indicate
    the client itself, in addition to other pods in the cluster:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此命令，通过子命令获取 Pod 的日志。在子命令中，通过 `run` 标签选择器等于 `go-client` 获取所有 Pod，并收集第一个 Pod
    的名称。日志应显示客户端本身以及集群中的其他 Pod：
- en: '![](img/8c5a13bf-69dd-4d0d-a354-f7a3d71f74bd.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8c5a13bf-69dd-4d0d-a354-f7a3d71f74bd.png)'
- en: 'Run the following command for cleanup:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令进行清理：
- en: '[PRE19]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Python Client Library
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 客户端库
- en: Python is a high-level and general-purpose programming language that was first
    released in 1990\. It is one of the most popular open source programming languages,
    used in various areas, including machine learning, data processing, web development,
    and scripting. The essential feature of Python is that the language is interpreted
    with dynamic type checking. Python owes its popularity to its clear programming
    style and focus on code readability. In modern cloud-native environments, Python
    is mostly used for infrastructure and automation. In addition to its popularity
    and widespread usage, Kubernetes has an official client library that's implemented
    in Python.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是一种高级通用编程语言，首次发布于 1990 年。它是最受欢迎的开源编程语言之一，广泛应用于多个领域，包括机器学习、数据处理、Web 开发和脚本编写。Python
    的主要特点是该语言是解释型的，且支持动态类型检查。Python 的流行得益于其简洁的编程风格和注重代码可读性。在现代云原生环境中，Python 主要用于基础设施和自动化。除了其流行度和广泛应用外，Kubernetes
    也有一个官方的客户端库，使用 Python 实现。
- en: Repository
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仓库
- en: The Kubernetes Python client is part of the official client repository and is
    available at [https://github.com/kubernetes-client/python](https://github.com/kubernetes-client/python).
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes Python 客户端是官方客户端库的一部分，可以在 [https://github.com/kubernetes-client/python](https://github.com/kubernetes-client/python)
    上找到。
- en: The Python client is an OpenAPI compliant client, which means that Swagger tools
    generate resource definitions. The client library is still in progress, and its
    capabilities should be checked from the repository before using them in production.
    The Python client, like every other Kubernetes client, attempts to support a set
    of predefined functionalities, and it is classified as "Silver" according to its
    coverage.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: Python 客户端是符合 OpenAPI 标准的客户端，这意味着 Swagger 工具会生成资源定义。客户端库仍在进行中，使用前应检查其功能是否适用于生产环境。像其他
    Kubernetes 客户端一样，Python 客户端试图支持一组预定义的功能，根据其覆盖范围，它被分类为“银级”。
- en: The OpenAPI is a specification for describing RESTful APIs. Using the OpenAPI
    specification, it is possible to create an implementation for clients and services,
    including all of the corresponding operations.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: OpenAPI 是一种描述 RESTful API 的规范。通过使用 OpenAPI 规范，可以为客户端和服务创建实现，包括所有相关操作。
- en: Swagger is the tooling ecosystem for developing APIs, which is defined in OpenAPI.
    Swagger provides both open source and commercial tools to create applications
    for the provided specification.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: Swagger 是用于开发 API 的工具生态系统，它在 OpenAPI 中有所定义。Swagger 提供了开源和商业工具，用于根据所提供的规范创建应用程序。
- en: Installation
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装
- en: 'There are two ways of installing the client library so that you can create
    a development environment. The first way is to download the source code and build:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 安装客户端库有两种方法，您可以创建开发环境。第一种方法是下载源代码并构建：
- en: '[PRE20]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The second way is to download the package from the Python Package Index by
    using a package manager such as `pip`:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法是通过使用像 `pip` 这样的包管理器，从 Python 包索引下载包：
- en: '[PRE21]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Client Usage
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户端使用
- en: 'In the previous section, a Go application that lists all the pods was developed.
    The same functionality as the previous application is performed in Python in this
    section. With the clean code and readability philosophy of Python, the same functionality
    is handled in around ten lines of code, as follows:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章节中，开发了一个列出所有 pods 的 Go 应用程序。本章节用 Python 实现了与前一个应用相同的功能。凭借 Python 的简洁代码和可读性哲学，相同的功能大约用十行代码实现，如下所示：
- en: '[PRE22]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'These are the critical points to mention about the preceding code snippet:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是关于前面代码片段的关键点：
- en: In *line 3*, the in-cluster configuration, and in *line 5*, the client for the
    `corev1` API are created.
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在*第 3 行*，创建了集群内配置，在*第 5 行*，为 `corev1` API 创建了客户端。
- en: Starting in *line 8*, an infinite loop starts with a sleep of 10 seconds at
    each iteration.
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从*第 8 行*开始，进入一个无限循环，每次迭代暂停 10 秒。
- en: In *line 9*, all pods are requested from the `v1` client and the response is
    parsed and written to the console.
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在*第 9 行*，从 `v1` 客户端请求所有 pods，并解析响应并写入控制台。
- en: Packaging
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打包
- en: 'The Python application should run inside a container, like all services running
    on Kubernetes. Thus, the client library defined in this section is packaged with
    the following Dockerfile. This container definition enables the application to
    run its isolated environment with its dependencies:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: Python 应用程序应该像 Kubernetes 上运行的所有服务一样，运行在容器内。因此，本节中定义的客户端库与以下 Dockerfile 一起打包。此容器定义使应用程序能够在包含其依赖项的隔离环境中运行：
- en: '[PRE23]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Please refer to the complete code at: [https://goo.gl/z78SKr](https://goo.gl/z78SKr).'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅完整代码：[https://goo.gl/z78SKr](https://goo.gl/z78SKr)。
- en: 'The following are remarks about the preceding code:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对前面代码的注释：
- en: The container has the basis of Python supporting version 3.
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器基于支持 Python 3 版本的基础构建。
- en: The Kubernetes Python client library is installed using `pip` in *line 3*.
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes Python 客户端库通过 `pip` 在*第 3 行*安装。
- en: The client application is copied into the container in *line 5* and started
    in *line 7*.
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端应用程序在*第 5 行*被复制到容器中，并在*第 7 行*启动。
- en: In the following section, the code snippets presented for Python are utilized
    to work in a Kubernetes cluster. The complete code is packaged as a Docker container
    with its dependencies. With this container, the application is deployed to Kubernetes
    in an isolated way, which follows a microservice architecture.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，展示的 Python 代码片段用于在 Kubernetes 集群中工作。完整的代码被打包成一个包含其依赖的 Docker 容器。通过这个容器，应用程序以隔离的方式部署到
    Kubernetes 中，遵循微服务架构。
- en: Using the Kubernetes Python Client inside the Cluster
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在集群内使用 Kubernetes Python 客户端
- en: In this section, we'll deploy a Python application that lists all of the pods
    and consumes the Python client library inside Kubernetes. Besides this, the application
    will run inside the cluster and gather information about its cluster.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将部署一个 Python 应用程序，该应用程序列出所有 pod，并在 Kubernetes 内部使用 Python 客户端库。此外，应用程序将在集群内运行并收集关于集群的信息。
- en: 'Before starting with the implementation, we need to use the Docker image `onuryilmaz/k8s-client-example:python`,
    which was built using the Dockerfile in the last section. We also need to deploy
    the application as a deployment and check the logs to see whether it is working
    as expected. Let''s begin by implementing the following steps:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始实现之前，我们需要使用 Docker 镜像 `onuryilmaz/k8s-client-example:python`，该镜像是通过上一节中的
    Dockerfile 构建的。我们还需要将应用程序作为部署进行部署，并检查日志以查看其是否按预期工作。让我们从执行以下步骤开始：
- en: 'Create a deployment with the Docker image of the example client:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用示例客户端的 Docker 镜像创建部署：
- en: '[PRE24]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: With this command, a deployment with the name python-client will be created
    with the Docker image `onuryilmaz/k8s-client-example:python` in an interactive
    mode so that logs will be printed to the console.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此命令，将创建一个名为 python-client 的部署，使用 Docker 镜像 `onuryilmaz/k8s-client-example:python`
    以交互模式运行，以便日志能够打印到控制台。
- en: 'Logs should indicate the client itself, in addition to other pods in the cluster:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 日志应显示客户端本身，以及集群中的其他 pod：
- en: '![](img/34faffbf-f9cb-4356-8c29-6c32952de9ef.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![](img/34faffbf-f9cb-4356-8c29-6c32952de9ef.png)'
- en: 'Run the following command for cleanup:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令进行清理：
- en: '[PRE25]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Other Official Client Libraries
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他官方客户端库
- en: 'In this chapter, two official Kubernetes client libraries have been covered:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，介绍了两个官方的 Kubernetes 客户端库：
- en: '**Go**: This is a statically typed compiler-based language'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Go**：这是一种静态类型的基于编译器的语言'
- en: '**Python**: This is a dynamically typed and interpreted language'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python**：这是一种动态类型和解释型语言'
- en: 'Official client libraries also include some additional programming languages:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 官方客户端库还包括一些额外的编程语言：
- en: '**Java**: [https://github.com/kubernetes-client/java](https://github.com/kubernetes-client/java)'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Java**：[https://github.com/kubernetes-client/java](https://github.com/kubernetes-client/java)'
- en: '**.NET**: [https://github.com/kubernetes-client/csharp](https://github.com/kubernetes-client/csharp)'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**.NET**：[https://github.com/kubernetes-client/csharp](https://github.com/kubernetes-client/csharp)'
- en: '**JavaScript**: [https://github.com/kubernetes-client/javascript](https://github.com/kubernetes-client/javascript)'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JavaScript**：[https://github.com/kubernetes-client/javascript](https://github.com/kubernetes-client/javascript)'
- en: For the capabilities and hurdles of these libraries, you should check their
    corresponding repositories since they are all still in the development phase.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些库的功能和难题，您应该查看它们相应的仓库，因为它们都仍处于开发阶段。
- en: Community-Maintained Client Libraries
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 社区维护的客户端库
- en: 'Kubernetes has an active and collaborative open source community, which has
    also increased its popularity. There are around 20 community-maintained client
    libraries that are listed in the Kubernetes documentation, which cover the following
    languages:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 拥有一个活跃且合作的开源社区，这也提高了它的普及度。在 Kubernetes 文档中列出了大约 20 个由社区维护的客户端库，涵盖了以下语言：
- en: Clojure
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Clojure
- en: Go
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go
- en: Java
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java
- en: Lisp
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Lisp
- en: Node.js
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js
- en: Perl
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Perl
- en: PHP
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PHP
- en: Python
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python
- en: Ruby
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ruby
- en: Scala
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Scala
- en: dotNet
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: dotNet
- en: Elixir
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Elixir
- en: 'There are some critical points to consider before using a community-maintained
    client library:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用社区维护的客户端库之前，有一些关键点需要考虑：
- en: '**Aim of the library**: It is crucial to consider the aim of the development
    team and library. Although it seems not directly related to the software itself,
    it affects how the client library is developed. For instance, some libraries focus
    on simplicity and compromise on capability coverage. If the vision of your application
    and the client library don''t match, it would be difficult to maintain the application
    in the long run.'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**库的目标**：考虑开发团队和库的目标非常重要。尽管这看起来与软件本身没有直接关系，但它会影响客户端库的开发方式。例如，一些库注重简洁性，可能在功能覆盖上做出妥协。如果你的应用程序愿景与客户端库不匹配，长远来看将难以维护应用程序。'
- en: '**Version and support**: Official libraries support specific Kubernetes API
    versions and maintain a compatibility matrix. It is critical to work with the
    client libraries that work with your Kubernetes cluster, and it is also essential
    to get support for future Kubernetes versions. A community-maintained client library
    could be very suitable today but depreciate in six months if not supported.'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本和支持**：官方库支持特定的Kubernetes API版本，并维护兼容性矩阵。使用与Kubernetes集群兼容的客户端库至关重要，同时确保能够获得未来Kubernetes版本的支持。一个由社区维护的客户端库今天可能非常适合，但如果没有得到支持，六个月后可能会被弃用。'
- en: '**Community interest**: If the considered client library is open source, its
    community should be alive and interested in making the library better. It is very
    common to see some libraries start very well but not be maintained due to a missing
    community. It is not advised to use a client library with old issues without any
    comments or pull requests that are not reviewed for a very long time.'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**社区兴趣**：如果考虑的客户端库是开源的，那么它的社区应该是活跃的，并且有兴趣使该库变得更好。我们常常看到一些库起步很好，但由于缺乏社区支持，最终没有得到维护。不建议使用那些存在旧问题且很久没有评论或没有经过审查的拉取请求的客户端库。'
- en: Summary
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, Kubernetes API access and client libraries were discussed.
    Although there are various tools for communicating with Kubernetes, knowing the
    Kubernetes API itself and the client libraries is crucial for creating game-changing
    automation and orchestration tasks.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论了Kubernetes API访问和客户端库。尽管有多种工具可以与Kubernetes进行通信，但了解Kubernetes API本身和客户端库对于创建具有革命性的自动化和编排任务至关重要。
- en: Firstly, the Kubernetes API style and how to connect using HTTP clients was
    presented. Following that, the client libraries of Kubernetes were covered, and
    we focused on two official client libraries. For both Go and Python, how to install,
    write code, package, and deploy this code into cluster steps was done with demonstrations
    and activities.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，介绍了Kubernetes API的风格以及如何使用HTTP客户端进行连接。接着，讲解了Kubernetes的客户端库，重点介绍了两个官方客户端库。我们通过演示和实践，展示了如何安装、编写代码、打包并将代码部署到集群的步骤。
- en: Finally, community-maintained libraries for different language preferences or
    custom requirements were shown. With the knowledge and hands-on experience of
    Kubernetes client libraries, higher levels of automation and extending Kubernetes
    is possible. In the following chapter, the best practices covered in the first
    chapter and the client libraries included in this chapter are gathered together
    to create applications that extend Kubernetes.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，展示了针对不同语言偏好或自定义需求的社区维护库。通过掌握Kubernetes客户端库的知识和实践经验，能够实现更高层次的自动化，并扩展Kubernetes。在接下来的章节中，将第一章介绍的最佳实践与本章包含的客户端库汇总在一起，创建扩展Kubernetes的应用程序。

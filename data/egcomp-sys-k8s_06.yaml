- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Exposing Your Applications Using Ingress Controllers and Certificates
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 ingress 控制器和证书暴露您的应用程序
- en: 'Ingress controllers fulfill traffic rules defined by an ingress object and
    are needed to expose traffic to APIs or microservices that your system uses. Ingress
    controllers are implemented in Kubernetes clusters. As an option to expose your
    deployments outside the cluster, instead of using dedicated load balancers for
    each deployment, the ingress controller shares a single load balancer for your
    deployments. By default, Kubernetes uses ClusterIP services to access deployments
    in the internal cluster network. Creating applications for edge computing involves
    configuring ingress controllers with lightweight solutions in mind: K3s and its
    default ingress controller, **Traefik** v1 using other ingress controllers such
    as **NGINX** or **Contour**, and security encryption for service communication.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Ingress 控制器执行由 ingress 对象定义的流量规则，并且需要将流量暴露给系统所使用的 API 或微服务。Ingress 控制器是在 Kubernetes
    集群中实现的。作为将部署暴露到集群外部的一种方式，Ingress 控制器为您的部署共享一个负载均衡器，而不是为每个部署使用专用的负载均衡器。默认情况下，Kubernetes
    使用 ClusterIP 服务来访问内部集群网络中的部署。为边缘计算创建应用程序涉及到根据轻量化解决方案来配置 ingress 控制器：K3s 及其默认的
    ingress 控制器 **Traefik** v1，使用其他 ingress 控制器，如 **NGINX** 或 **Contour**，以及服务通信的安全加密。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下主要内容：
- en: Understanding ingress controllers and ingresses
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 ingress 控制器和 ingress
- en: Installing Helm for ingress controller installations
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Helm 以进行 ingress 控制器安装
- en: Installing and configuring cert-manager
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和配置 cert-manager
- en: Using Traefik to expose your applications
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 **Traefik** 暴露您的应用程序
- en: Using NGINX to expose your applications
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 NGINX 暴露您的应用程序
- en: Troubleshooting your ingress controllers
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 故障排除您的 ingress 控制器
- en: Pros and cons of Traefik, NGINX, and Contour
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Traefik**、**NGINX** 和 **Contour** 的优缺点'
- en: Tips and best practices for ingress controllers
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ingress 控制器的提示和最佳实践
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Before starting, you need the following to run the examples in this chapter:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，您需要以下内容来运行本章中的示例：
- en: A Raspberry Pi cluster with K3s installed
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装了 K3s 的树莓派集群
- en: kubectl configured to access your cluster
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置好的 kubectl 以访问您的集群
- en: Helm installed and configured
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已安装并配置 Helm
- en: Note
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you don’t want to use Traefik and you want to omit the default installation
    of this ingress controller in your cluster, add the `--no-deploy traefik --disable
    traefik` flags when you are installing your master node. For other details of
    installing your K3s cluster, refer to [*Chapter 3*](B16945_03_Final_PG.xhtml#_idTextAnchor056),
    *K3S Advanced Configurations and Management*, or visit [https://rancher.com/docs/k3s/latest/en/installation/install-options/server-config/](https://rancher.com/docs/k3s/latest/en/installation/install-options/server-config/).
    Remember to install a bare metal load balancer such as MetalLB, which is necessary
    to generate a load balancer service, which is needed to install ingress controllers.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想使用 Traefik，并且希望在集群中省略默认安装该 ingress 控制器，请在安装主节点时添加 `--no-deploy traefik
    --disable traefik` 标志。有关安装 K3s 集群的其他详细信息，请参考 [*第3章*](B16945_03_Final_PG.xhtml#_idTextAnchor056)，*K3S
    高级配置与管理*，或者访问 [https://rancher.com/docs/k3s/latest/en/installation/install-options/server-config/](https://rancher.com/docs/k3s/latest/en/installation/install-options/server-config/)。记得安装一个裸金属负载均衡器，如
    MetalLB，这对于生成负载均衡服务至关重要，而负载均衡服务是安装 ingress 控制器所需的。
- en: With these requirements, you are going to experiment with exposing your applications
    in different ways.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 根据这些要求，您将尝试以不同的方式暴露您的应用程序。
- en: 'For more detail and code snippets, check out this resource on GitHub: [https://github.com/PacktPublishing/Edge-Computing-Systems-with-Kubernetes/tree/main/ch6](https://github.com/PacktPublishing/Edge-Computing-Systems-with-Kubernetes/tree/main/ch6)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多细节和代码片段，请查看 GitHub 上的这个资源：[https://github.com/PacktPublishing/Edge-Computing-Systems-with-Kubernetes/tree/main/ch6](https://github.com/PacktPublishing/Edge-Computing-Systems-with-Kubernetes/tree/main/ch6)
- en: Understanding ingress controllers
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Ingress 控制器
- en: Kubernetes uses ingress controllers to expose your deployments outside the cluster.
    An ingress controller is the adaptation of a proxy to expose your applications,
    and Ingress is the Kubernetes object that uses this adaptation. An ingress controller
    works as a reverse proxy like **NGINX** to expose your application using HTTP/HTTPS
    protocols to a load balancer. This load balancer is the endpoint to expose your
    application outside the cluster. It’s in charge of receiving and controlling traffic
    for your application. The benefit of this is that you can share this load balancer,
    to expose as many applications as you want, but using all the features that your
    ingress controller provides. There are different ingress controller implementations,
    such as NGINX, Traefik, Emissary, and Envoy.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 使用入口控制器将您的部署暴露到集群外部。入口控制器是将代理暴露到您的应用程序的适配器，而 Ingress 是使用此适配器的 Kubernetes
    对象。入口控制器充当反向代理，如**NGINX**，通过 HTTP/HTTPS 协议将您的应用程序暴露到负载均衡器。该负载均衡器是将您的应用程序暴露到集群外部的终端节点，负责接收并控制应用程序的流量。这样做的好处是，您可以共享这个负载均衡器，暴露任意多的应用程序，同时使用入口控制器提供的所有功能。不同的入口控制器实现包括
    NGINX、Traefik、Emissary 和 Envoy。
- en: Taking as a reference *Figure 6.1*, to expose your application, you must create
    a **ClusterIP** service that creates an internal DNS name for your Deployment
    or Pod. This service automatically forwards the traffic across the different replicas
    of your service, which perform load balancing. An Ingress uses the LoadBalancer
    service that your ingress controller provisioned when you installed it. This LoadBalancer
    has a public IP address if the cluster is not private. This IP receives traffic
    outside the cluster, then forwards this traffic to the ClusterIP service that
    your application is using. Internally, the Ingress object uses configuration files
    to act as a reverse proxy. For example, if you are using NGINX, the ingress object
    is going to use configurations that are used in a regular NGINX configuration
    file.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以*图 6.1*为参考，要暴露您的应用程序，您必须创建一个**ClusterIP**服务，为您的 Deployment 或 Pod 创建一个内部 DNS
    名称。该服务会自动将流量转发到服务的不同副本，进行负载均衡。Ingress 使用在安装入口控制器时，您的入口控制器所配置的 LoadBalancer 服务。如果集群不是私有的，这个
    LoadBalancer 会有一个公共 IP 地址。这个 IP 地址接收来自集群外部的流量，然后将流量转发到您的应用程序所使用的 ClusterIP 服务。在内部，Ingress
    对象使用配置文件作为反向代理。例如，如果您使用的是 NGINX，Ingress 对象将使用在常规 NGINX 配置文件中使用的配置。
- en: In the context of Kubernetes, an ingress object tries to match the associated
    ClusterIP service of your application, using labels. This is how an ingress works
    internally. You can see an ingress as the common virtual hosts feature that NGINX
    and Apache provide for websites.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 的上下文中，Ingress 对象会尝试使用标签匹配与您的应用程序关联的 ClusterIP 服务。这就是 Ingress 在内部的工作方式。您可以将
    Ingress 看作是 NGINX 和 Apache 为网站提供的常见虚拟主机功能。
- en: '![Figure 6.1 – Ingress in Kubernetes'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.1 – Kubernetes 中的 Ingress'
- en: '](img/B16945_Figure_6.1.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_Figure_6.1.jpg)'
- en: Figure 6.1 – Ingress in Kubernetes
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.1 – Kubernetes 中的 Ingress
- en: 'Based on the official documentation of Kubernetes, a basic YAML file to create
    an ingress controller should look like this:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 基于 Kubernetes 的官方文档，创建一个入口控制器的基本 YAML 文件应如下所示：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The most important sections for ingresses are the annotations and spec sections.
    The annotations will define the ingress controller to use, in this case, NGINX.
    This section could include additional configurations for the ingress, such as
    rewriting the URL or activating features such as authentication, and so on. This
    example defines the `/testpath` route to access your application. Now you have
    to apply the YAML file with kubectl. For example, if this file is called `minimal-ingress.yaml`,
    you have to run the following command to create the `minimal-ingress` controller:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Ingress 来说，最重要的部分是注解（annotations）和规范（spec）部分。注解将定义要使用的入口控制器，在本例中为 NGINX。此部分可以包含
    Ingress 的附加配置，例如重写 URL 或启用身份验证等功能。此示例定义了访问您的应用程序的 `/testpath` 路由。现在，您必须使用 kubectl
    应用 YAML 文件。例如，如果这个文件名为 `minimal-ingress.yaml`，您必须运行以下命令来创建 `minimal-ingress` 控制器：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: And that’s the way that ingress controllers and ingresses work. Now let’s install
    Helm to install an ingress controller in the next section.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是入口控制器和 Ingress 的工作原理。现在，让我们在下一节中安装 Helm，以安装入口控制器。
- en: Installing Helm for ingress controller installations
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Helm 以便安装入口控制器
- en: Before we start using an ingress controller, we need to install Helm. Helm is
    a package manager for Kubernetes, which you can use to install software. Helm
    uses Helm Charts, which contain the definitions to install and configure your
    deployments.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始使用 ingress 控制器之前，我们需要安装 Helm。Helm 是 Kubernetes 的包管理器，你可以使用它来安装软件。Helm 使用
    Helm Charts，包含安装和配置部署的定义。
- en: 'To install Helm, follow the given steps:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 Helm，请按照以下步骤操作：
- en: 'Download Helm with the next command:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令下载 Helm：
- en: '[PRE2]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Change permissions and launch the installer by executing the following lines:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改权限并通过执行以下命令启动安装程序：
- en: '[PRE3]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now you have Helm installed, let’s move on to install the NGINX ingress controller
    in the next section.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经安装了 Helm，接下来让我们在下一部分中安装 NGINX ingress 控制器。
- en: Installing cert-manager
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 cert-manager
- en: cert-manager is software that you want to install if you want to add certificates
    or certificate issues as a resource type in Kubernetes. These certificates can
    be used by applications, but in this specific case, we are going to use cert-manager
    to add encrypted traffic to your app, using the HTTPS protocol.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: cert-manager 是你希望安装的软件，如果你想在 Kubernetes 中添加证书或证书问题作为资源类型。这些证书可以被应用程序使用，但在此特定情况下，我们将使用
    cert-manager 为你的应用程序添加加密流量，使用 HTTPS 协议。
- en: 'To install cert-manager, we are going to use Helm. To install Helm, you have
    to follow the given steps:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 cert-manager，我们将使用 Helm。安装 Helm 时，你需要按照以下步骤操作：
- en: 'Add the Jetstack repo, which contains cert-manager:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加包含 cert-manager 的 Jetstack 仓库：
- en: '[PRE4]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Update your local Helm Chart repository cache. To do this, execute the following
    command:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新本地 Helm Chart 仓库缓存。为此，请执行以下命令：
- en: '[PRE5]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now install cert-manager using Helm:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在使用 Helm 安装 cert-manager：
- en: '[PRE6]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This is going to install cert-manager in the `cert-manager` namespace, with
    version `1.5.4`. This cert-manager installation doesn’t include Prometheus but
    includes cert-manager **Customer Resource Definitions** (**CRDs**) and configures
    timeout parameters for webhook validations when generating a certificate.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把 cert-manager 安装到 `cert-manager` 命名空间，版本为 `1.5.4`。此 cert-manager 安装不包括 Prometheus，但包括
    cert-manager **客户资源定义**（**CRDs**）并配置了在生成证书时用于 Webhook 验证的超时参数。
- en: 'Create a self-signed issuer in cert-manager, to create certificates for your
    local domains. To do this, create the `self-signed-issuer.yaml` file with the
    following content:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 cert-manager 中创建一个自签名颁发者，为你的本地域创建证书。为此，请创建 `self-signed-issuer.yaml` 文件，内容如下：
- en: '[PRE7]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now create an issuer that uses Let’s Encrypt to create a certificate that could
    be used for public domains. To do this, create the `letsencrypt-staging.yaml`
    file with the following content:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在创建一个使用 Let’s Encrypt 创建证书的颁发者，证书可以用于公共域名。为此，请创建 `letsencrypt-staging.yaml`
    文件，内容如下：
- en: '[PRE8]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This file is assuming, as an example, that you will use this issuer in a staging
    environment, but you can customize this file as you want.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件假设你将使用此颁发者作为示例，在一个预发布环境中使用，但你可以根据需要自定义这个文件。
- en: Important Note
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: Be aware that `ClusterIssuer` is cluster scoped and `Issuer` is namespace scoped.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`ClusterIssuer` 是集群范围的，而 `Issuer` 是命名空间范围的。
- en: 'Now apply these files to create the self-signed issuer for a staging environment,
    using the following command:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在应用这些文件，在预发布环境中创建自签名颁发者，使用以下命令：
- en: '[PRE9]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now you have cert-manager installed and ready to use. You can also create basic
    issuers for your applications. This part will be crucial to configure certificates
    for your domains if necessary. So now, let’s move towards installing our first
    ingress controller, NGINX.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经安装并准备好使用 cert-manager。你还可以为你的应用程序创建基本的颁发者。如果需要的话，这部分将是为你的域配置证书的关键。因此，现在让我们开始安装第一个
    ingress 控制器——NGINX。
- en: NGINX ingress installation
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NGINX ingress 安装
- en: NGINX is the most widely used ingress controller on Kubernetes. It has all the
    necessary features that you need for basic and complex configurations to expose
    your application. It has all the experience and support of the community behind
    NGINX. It’s stable and you can still use it for devices using ARM processors.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: NGINX 是 Kubernetes 上最广泛使用的 ingress 控制器。它具备你所需的所有基本和复杂配置功能，用来暴露你的应用程序。它拥有来自社区的经验和支持。它非常稳定，你仍然可以在使用
    ARM 处理器的设备上使用它。
- en: 'To install the NGINX ingress controller, follow the given steps:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 NGINX ingress 控制器，请按照以下步骤操作：
- en: 'Create a namespace to install the NGINX ingress controller:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个命名空间来安装 NGINX ingress 控制器：
- en: '[PRE10]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Add the repository that contains the Helm Chart of the NGINX ingress controller
    and update the repository of charts that Helm is going to use:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加包含NGINX入口控制器Helm Chart的仓库，并更新Helm将要使用的Chart仓库：
- en: '[PRE11]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Install the NGINX ingress controller with the following command:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令安装NGINX入口控制器：
- en: '[PRE12]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This will output that the installation was successful.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这将输出安装成功的信息。
- en: 'To check whether the `nginx-ingress` controller was installed, run the following
    command:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要检查`nginx-ingress`控制器是否已安装，请运行以下命令：
- en: '[PRE13]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'After installing the `nginx-ingress` controller, K3s will provide a load balancer.
    In this case, we assume that we are using MetalLB. To obtain the load balancer
    IP address provisioned by your ingress controller, run the following command:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装`nginx-ingress`控制器后，K3s将提供负载均衡器。在这种情况下，我们假设使用的是MetalLB。要获取由您的入口控制器配置的负载均衡器IP地址，请运行以下命令：
- en: '[PRE14]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here, the `IP_LOADBALANCER` variable contains the IP of the load balancer created
    by the ingress controller, which is the endpoint for your applications. You can
    check the value by running the following command:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`IP_LOADBALANCER`变量包含入口控制器创建的负载均衡器的IP，这是您的应用程序的端点。您可以通过运行以下命令检查该值：
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Using as a reference the installation of the K3s cluster in [*Chapter 5*](B16945_05_Final_PG.xhtml#_idTextAnchor097),
    *K3s Homelab for Edge Computing Experiments**,* you will see an IP like this:
    `192.168.0.240`.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 参考[*第5章*](B16945_05_Final_PG.xhtml#_idTextAnchor097)中K3s集群的安装，*K3s边缘计算实验室*，您将看到一个像这样的IP：`192.168.0.240`。
- en: 'You can use that IP to create a DNS record to point the ingress to a domain,
    or to access your service using a path. Let’s say that, for example, the returned
    IP is `192.168.0.241`. You can access your service access in your browser with
    the URL `http://192.168.0.240`. Another option is to use a path to access your
    application; for example, the URL would be like this: `http://192.168.0.240/myapp`.'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用该IP来创建DNS记录，将入口指向一个域名，或使用路径访问您的服务。例如，假设返回的IP是`192.168.0.241`，您可以在浏览器中使用URL
    `http://192.168.0.240` 访问您的服务。另一个选项是使用路径来访问您的应用程序；例如，URL会是这样：`http://192.168.0.240/myapp`。
- en: 'Finally, if you want to uninstall `nginx-ingress`, run the following command:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，如果您想卸载`nginx-ingress`，请运行以下命令：
- en: '[PRE16]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now that you have installed the NGINX ingress controller, let’s move on to study
    a basic example using this ingress controller.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 既然您已经安装了NGINX入口控制器，接下来让我们研究一个使用此入口控制器的基本示例。
- en: Using NGINX to expose your applications
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用NGINX暴露您的应用程序
- en: 'It’s time to start using NGINX as your ingress controller. We are going to
    expose your first application using NGINX. To begin, let’s deploy a simple application.
    To do this, follow the given steps:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候开始使用NGINX作为您的入口控制器了。我们将使用NGINX暴露您的第一个应用程序。首先，让我们部署一个简单的应用程序。为此，请按照以下步骤操作：
- en: 'Create a simple deployment using `nginx` image with the following command:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令创建一个简单的`nginx`镜像部署：
- en: '[PRE17]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Create a ClusterIP service for the `myapp` deployment:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`myapp`部署创建一个ClusterIP服务：
- en: '[PRE18]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Create an Ingress using the domain `192.168.0.240.nip.io`. In this example,
    we are assuming that the endpoint for the ingress is `192.168.0.240`. This is
    the same IP as the load balancer created by the ingress controller. When you access
    your browser, the page `https://192.168.0.241.nip.io` is going to show the NGINX
    `myapp-ingress.yaml` file:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用域名`192.168.0.240.nip.io`创建Ingress。在此示例中，我们假设入口的端点是`192.168.0.240`。这与入口控制器创建的负载均衡器的IP相同。当您访问浏览器时，页面`https://192.168.0.241.nip.io`将显示NGINX的`myapp-ingress.yaml`文件：
- en: '[PRE19]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You can customize this file as you want. If you don’t want HTTPS for your application,
    omit the TLS section and the annotation `cert-manager.io/cluster-issuer`. If you
    are using a public domain, use the following annotation:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以根据需要自定义此文件。如果您不希望为您的应用程序启用HTTPS，请省略TLS部分和注解`cert-manager.io/cluster-issuer`。如果您使用的是公共域名，请使用以下注解：
- en: '[PRE20]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'If you are using a local domain, for example, `myapp-test-nginx.test`, you
    have to modify the `/etc/hosts` file and add a line like this:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您使用的是本地域名，例如`myapp-test-nginx.test`，则需要修改`/etc/hosts`文件，并添加一行如下：
- en: '[PRE21]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This is necessary to resolve the local domain for your app. Also, remember
    to modify `tls.hosts` and `rules.hosts` in the file in order to use a domain such
    as `myapp-test-nginx.test`. So, the second option will be like this:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于解析应用程序的本地域名是必要的。还记得修改文件中的`tls.hosts`和`rules.hosts`，以便使用诸如`myapp-test-nginx.test`之类的域名。因此，第二个选项将是这样：
- en: '[PRE22]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Create the ingress using the previous file using the following command:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令创建入口，使用前面的文件：
- en: '[PRE23]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Access the `myapp` deployment by using the URL `https://192.168.0.241.nip.io`
    or https://myapp-test-nginx.test in your browser page.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 URL `https://192.168.0.241.nip.io` 或 `https://myapp-test-nginx.test` 在浏览器中访问
    `myapp` 部署。
- en: Note
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Because this is a self-signed certificate, you have to accept the security exception
    in your browser.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这是一个自签名证书，你必须在浏览器中接受安全异常。
- en: 'Or, use `curl` to access the page with the following command:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，使用 `curl` 通过以下命令访问页面：
- en: '[PRE24]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: If you don’t want to use HTTPS, you can access the page with the URL `http://192.168.0.241.nip.io`
    or `https://myapp-test-nginx.test` in your browser or by using the `curl` command.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想使用 HTTPS，可以在浏览器中使用 URL `http://192.168.0.241.nip.io` 或 `https://myapp-test-nginx.test`
    访问页面，或者使用 `curl` 命令访问。
- en: 'If you want to delete the ingress, run the following command:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想删除 ingress，运行以下命令：
- en: '[PRE25]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Note
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'When you delete the ingress, and you are using a self-signed issuer, the secret
    used for *Let’s Encrypt* will not be deleted. You have to delete it manually using
    the `kubectl` command. For example, you can run the following command to delete
    the secret from the previously created ingress: `kubectl delete secrets myapp-tls-nginx`.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 当你删除 ingress 并且使用自签名证书时，*Let’s Encrypt* 使用的密钥将不会被删除。你需要手动使用 `kubectl` 命令删除它。例如，你可以运行以下命令删除之前创建的
    ingress 中的密钥：`kubectl delete secrets myapp-tls-nginx`。
- en: Now you have learned how to use NGINX. Next, it’s time to learn how to use Traefik
    to expose your applications in the next section.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经学会了如何使用 NGINX。接下来是时候学习如何使用 Traefik 在下一节中暴露你的应用程序。
- en: Using Traefik to expose your applications
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Traefik 来暴露你的应用程序
- en: 'Traefik is the ingress controller included by default in K3s. It uses the same
    configurations as NGINX as shown in the previous example in the `myapp-ingress.yaml`
    file. Let’s assume that you already have created the `myapp` Deployment from the
    previous section. So, let’s get started with Traefik by following the given steps:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Traefik 是 K3s 中默认包含的 ingress 控制器。它使用与 NGINX 相同的配置，如前面的 `myapp-ingress.yaml`
    文件所示。假设你已经按照前一节创建了 `myapp` 部署。那么，让我们按照给定的步骤开始使用 Traefik：
- en: 'To find the load balancer IP address created by Traefik, run the following
    command:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查找 Traefik 创建的负载均衡器 IP 地址，运行以下命令：
- en: '[PRE26]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Run the following command to see the current IP address assigned to the load
    balancer that the Traefik installation provisioned. This will be used to create
    an entry in the `/etc/hosts` file:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令查看 Traefik 安装所配置的负载均衡器的当前 IP 地址。这将用于在 `/etc/hosts` 文件中创建一个条目：
- en: '[PRE27]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Let’s say that returns `192.168.0.240`. You have to add the next line to the
    `/etc/hosts` file:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 假设返回 `192.168.0.240`，你需要在 `/etc/hosts` 文件中添加以下行：
- en: '[PRE28]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Now you are ready to create the Ingress object.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经准备好创建 Ingress 对象了。
- en: 'To expose `myapp` using `nip` and TLS, create the `myapp-ingress-tls-traefik.yaml`
    file with the following content:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `nip` 和 TLS 来暴露 `myapp`，创建 `myapp-ingress-tls-traefik.yaml` 文件，内容如下：
- en: '[PRE29]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Apply the file with the following command:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令应用文件：
- en: '[PRE30]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '(*Optional*) If you want to use the `nip.io` service, the YAML file will look
    like this:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (*可选*) 如果你想使用 `nip.io` 服务，YAML 文件将如下所示：
- en: '[PRE31]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '(*Optional*) Apply the file with the following command:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (*可选*) 使用以下命令应用文件：
- en: '[PRE32]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Now you have configured and used Traefik as your load balancer.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经配置并使用 Traefik 作为负载均衡器。
- en: Remember that if you didn’t use the `–disable traefik` parameter, Traefik will
    be installed in your K3s cluster. Now, it’s time to use Contour. So, let’s move
    on to the next section.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，如果你没有使用 `–disable traefik` 参数，Traefik 将会被安装到你的 K3s 集群中。现在是时候使用 Contour 了。所以，我们进入下一节。
- en: Contour ingress controller installation and use
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Contour ingress 控制器的安装和使用
- en: Contour is an Envoy-based ingress controller. The advantage of using Envoy is
    that it’s fast and includes some powerful features that are found in service meshes,
    such as rate limits, advanced routing, metrics, and so on. If speed is key in
    your project, Contour will be the best solution in most cases. Contour is a lightweight
    solution and is optimized to run quickly. This makes Contour a good choice for
    edge computing. Now let’s move on to start using Contour.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Contour 是一个基于 Envoy 的 ingress 控制器。使用 Envoy 的优点是它速度快，并且包括一些在服务网格中找到的强大功能，如速率限制、先进的路由、指标等。如果速度对你的项目至关重要，Contour
    在大多数情况下将是最佳的解决方案。Contour 是一个轻量级的解决方案，经过优化，运行速度非常快。这使得 Contour 成为边缘计算的理想选择。现在让我们开始使用
    Contour。
- en: 'To install Contour, follow the next steps:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Contour，按照以下步骤操作：
- en: 'Install Contour using the quickstart configuration it provides:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用它提供的快速配置安装 Contour：
- en: '[PRE33]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'If you want to use `nip.io`, you have to first find the IP of the Contour load
    balancer and create an entry in the `/etc/hosts` file from your machine. To find
    the IP of Contour, run the following command:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想使用 `nip.io`，你需要首先找到 Contour 负载均衡器的 IP 地址，并在你的机器的 `/etc/hosts` 文件中创建一个条目。要找到
    Contour 的 IP 地址，运行以下命令：
- en: '[PRE34]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'If you run the following command, it will show the load balancer IP that the
    Contour ingress controller installation provisioned, which will be used to create
    an entry in the `/etc/hosts` file:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行以下命令，它将显示 Contour ingress 控制器安装时配置的负载均衡器 IP 地址，该地址将用于在 `/etc/hosts` 文件中创建条目：
- en: '[PRE35]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This will show the load balancer IP that the Contour installation created. This
    will be used to create an entry in the `/etc/hosts` file.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示 Contour 安装创建的负载均衡器 IP 地址。它将用于在 `/etc/hosts` 文件中创建条目。
- en: 'Let’s say that returns `192.168.0.242`. You have to add the next line to the
    `/etc/hosts` file:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 假设返回的是 `192.168.0.242`。你需要将以下行添加到 `/etc/hosts` 文件中：
- en: '[PRE36]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Now you are ready to create the Ingress object.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以创建 Ingress 对象了。
- en: 'Create a file with a basic configuration for contour. Let’s call this file
    `myapp-ingress-tls-contour.yaml`. This file will have the following content:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含基本配置的 Contour 配置文件。我们将这个文件命名为 `myapp-ingress-tls-contour.yaml`。该文件将包含以下内容：
- en: '[PRE37]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Apply the YAML file with the following command:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令应用 YAML 文件：
- en: '[PRE38]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Now we know how to use Contour using the Ingress object in Kubernetes. So, let’s
    see how to use Contour using its own objects in Kubernetes in the next section.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何使用 Kubernetes 中的 Ingress 对象来使用 Contour。接下来，让我们看看如何在 Kubernetes 中使用 Contour
    的自有对象。
- en: Using Contour with HTTPProxy and cert-manager
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Contour 与 HTTPProxy 和 cert-manager
- en: 'Contour can be used in the same way as the NGINX ingress controller, but you
    can also use the `HTTPProxy` object that Contour provides. The same example, `myapp-ingress-tls-contour`,
    can be created using Contour objects. Let’s see the equivalent for the Contour
    ingress controller. First, let’s create the certificate with the `cert-manager`
    object. Let’s call the file `myapp-tls-contour.yaml`. It will look like this:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: Contour 可以像 NGINX ingress 控制器一样使用，但你还可以使用 Contour 提供的 `HTTPProxy` 对象。同样的例子，`myapp-ingress-tls-contour`，可以使用
    Contour 对象来创建。让我们看看 Contour ingress 控制器的等效配置。首先，让我们使用 `cert-manager` 对象创建证书。我们将文件命名为
    `myapp-tls-contour.yaml`。它将如下所示：
- en: '[PRE39]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The `myapp-tls-contour.yaml` file definition creates the certificate to be
    used by the `HTTPProxy` object. Let’s create the `myapp-ingress-http-proxy-tls-contour.yaml`
    file with the equivalent configuration of the `myapp-ingress-tls-contour.yaml`
    file, but now using the `HTTPProxy` object and the previously generated certificate.
    This will look like this:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`myapp-tls-contour.yaml` 文件定义创建了供 `HTTPProxy` 对象使用的证书。接下来，我们将创建 `myapp-ingress-http-proxy-tls-contour.yaml`
    文件，文件内容与 `myapp-ingress-tls-contour.yaml` 文件的配置等效，但现在使用 `HTTPProxy` 对象和之前生成的证书。文件内容将如下所示：'
- en: '[PRE40]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Notice that this object sets a rate limit of 3 requests per minute with an
    additional request or soft limit to have, in total, 4 requests per minute. If
    the limit is exceeded, Contour will block the request. You can access the site
    with the following command:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这个对象设置了每分钟 3 次请求的速率限制，并且有一个附加请求或软限制，总共有每分钟 4 次请求。如果超过限制，Contour 将阻止该请求。你可以使用以下命令访问站点：
- en: '[PRE41]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The `-k` parameter omits the validation of the self-signed certificate created
    by cert-manager.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`-k` 参数跳过了由 cert-manager 创建的自签名证书的验证。'
- en: As you can see, Contour can use the Kubernetes ingress object, and you can add
    more features as rate limits using the objects provided by Contour. Now, it’s
    time to troubleshoot your ingress controllers or ingress definitions. Let’s move
    on to the next section.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，Contour 可以使用 Kubernetes ingress 对象，并且你可以使用 Contour 提供的对象添加更多功能，例如限速。现在，轮到你排查
    ingress 控制器或 ingress 定义的问题了。让我们进入下一部分。
- en: Troubleshooting your ingress controllers
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 排查你的 ingress 控制器
- en: 'These are some useful commands that you can use to troubleshoot your ingress
    controllers:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是一些有用的命令，你可以用来排查 ingress 控制器的问题：
- en: 'To check the NGINX ingress controller logs, run the following command:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看 NGINX ingress 控制器的日志，运行以下命令：
- en: '[PRE42]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: This will show the logs when an ingress uses NGINX as the ingress controller.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示当 ingress 使用 NGINX 作为 ingress 控制器时的日志。
- en: 'To check Traefik ingress controller logs, run the following command:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看 Traefik ingress 控制器的日志，运行以下命令：
- en: '[PRE43]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'To check Contour ingress controller logs, run the following command:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看 Contour ingress 控制器的日志，运行以下命令：
- en: '[PRE44]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'These commands are useful for checking what is happening inside your ingress
    controller deployments. Now, here are some useful commands to check that your
    ingress definition is working properly:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令对于检查 ingress 控制器部署中的活动非常有用。现在，以下是一些用于检查你的 ingress 定义是否正常工作的有用命令：
- en: '[PRE45]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'If you want to use the ingress controller’s own objects, such as `HTTPProxy`
    and so on, run the following command:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想使用 ingress 控制器自己的对象，例如 `HTTPProxy` 等，请运行以下命令：
- en: '[PRE46]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Here, `OBJECT_NAME` should be, for example, `HTTPProxy`, `Certificate`, and
    so on. This depends on what object you want to check. For a full list of these
    objects, you can check the official documentation for NGINX, Traefik, and Contour.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`OBJECT_NAME` 应该是例如 `HTTPProxy`、`Certificate` 等。这取决于你要检查的对象是什么。要查看这些对象的完整列表，你可以查阅
    NGINX、Traefik 和 Contour 的官方文档。
- en: Now you have learned about troubleshooting your ingress controller deployment
    and your ingress definitions, let’s explore the pros and cons of the ingress controllers
    that we have used in this chapter.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了如何排查 ingress 控制器部署和 ingress 定义的问题，让我们来看看本章中使用过的 ingress 控制器的优缺点。
- en: Pros and cons of Traefik, NGINX, and Contour
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Traefik、NGINX 和 Contour 的优缺点
- en: 'All the ingress controllers have the basic features to expose your application,
    that is, they are compatible with the Ingress object in Kubernetes. So, let’s
    explore the pros and cons of each Ingress controller. Let’s get started with this
    quick comparison:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的 ingress 控制器都有基本的功能来暴露你的应用程序，也就是说，它们与 Kubernetes 中的 Ingress 对象兼容。因此，让我们来探讨每个
    Ingress 控制器的优缺点。让我们从这个快速的对比开始：
- en: NGINX Ingress is an ingress controller that uses NGINX to expose applications
    in your cluster.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NGINX Ingress 是一个使用 NGINX 来暴露集群中应用程序的 ingress 控制器。
- en: 'Pros: It is the most widely used ingress controller for Kubernetes. It has
    a lot of documentation. Developer and community support is widely available. The
    community behind it is bigger than Traefik and Contour.'
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优点：它是 Kubernetes 中最广泛使用的 ingress 控制器。它有丰富的文档。开发者和社区支持广泛可得。它背后的社区规模大于 Traefik
    和 Contour。
- en: 'Cons: It can be slow compared to Envoy-based ingress controllers such as **Emissary**,
    **Gloo**, and Contour.'
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺点：与基于 Envoy 的 ingress 控制器（如 **Emissary**、**Gloo** 和 Contour）相比，它可能会较慢。
- en: Traefik is an ingress controller created by Traefik Labs. It has a lot of features,
    which can be used as plugins. It can be used to visualize your applications on
    a dashboard.
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Traefik 是由 Traefik Labs 创建的 ingress 控制器。它具有许多功能，可以作为插件使用。它可以用来在仪表盘上可视化你的应用程序。
- en: 'Pros: It has a dashboard and a lot of documentation. It also has some service
    mesh capabilities.'
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优点：它有一个仪表盘和丰富的文档。它还具有一些服务网格功能。
- en: 'Cons: It can be slow when compared against NGINX and Contour. The documentation
    is not focused on Kubernetes, and can be difficult to understand.'
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺点：与 NGINX 和 Contour 相比，它的速度较慢。文档内容不专注于 Kubernetes，且可能难以理解。
- en: Contour is an ingress controller based on Envoy, a tool owned by VMware. It’s
    used in Tanzu, a platform for managing Kubernetes. This means that a big company
    supports Contour.
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Contour 是一个基于 Envoy 的 ingress 控制器，Envoy 是 VMware 拥有的一款工具。它用于 Tanzu，一个管理 Kubernetes
    的平台。这意味着一个大公司支持 Contour。
- en: 'Pros: It’s fast because of its architecture and the language used for its binary,
    which is C. It has enough features to expose your application. It can be used
    as a service mesh. Big projects such as Istio use Envoy as their default ingress
    controller. Contour has support for ARM devices.'
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优点：由于其架构和使用的 C 语言二进制文件，它的速度很快。它有足够的功能来暴露你的应用程序。它可以作为服务网格使用。像 Istio 这样的重大项目将
    Envoy 用作其默认的 ingress 控制器。Contour 支持 ARM 设备。
- en: 'Cons: Contour is not mature and has missing features. It has fewer features
    compared with NGINX and Traefik.'
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺点：Contour 还不成熟，缺少一些功能。与 NGINX 和 Traefik 相比，它的功能较少。
- en: The use of ingress controllers could be focused on exposing your application.
    Depending on the feature you need, you can choose the previous ingress controllers.
    If you want to use a stable ingress controller, choose NGINX. If you are looking
    for auto-discovery features or a dashboard to visualize your endpoints, maybe
    you could use Traefik. And if you are looking for speed or a customizable ingress
    controller, choose Contour, or maybe you can create your own solution using Envoy.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: Ingress 控制器的使用可能主要是为了暴露你的应用程序。根据你需要的功能，你可以选择前述的 ingress 控制器。如果你想使用一个稳定的 ingress
    控制器，可以选择 NGINX。如果你需要自动发现功能或者一个可视化的仪表盘来查看你的端点，也许可以使用 Traefik。如果你追求速度或可定制的 ingress
    控制器，可以选择 Contour，或者你可以使用 Envoy 创建自己的解决方案。
- en: Tips and best practices for ingress controllers
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ingress 控制器的技巧和最佳实践
- en: 'These are some ideas that you can explore when using ingress controllers:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是你在使用入口控制器时可以探索的一些想法：
- en: '**Use routing features**: Each of these ingress controllers has different ways
    to implement routing to expose your application. Read the official documentation
    of these ingress controllers to understand which has your desired features.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用路由功能**：每个入口控制器都有不同的方式来实现路由以暴露你的应用程序。阅读这些入口控制器的官方文档，了解哪个具有你所需的功能。'
- en: '**Create a proof of concept** (**POC**) to evaluate which ingress controller
    is best for your use case.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建概念验证**（**POC**）以评估哪个入口控制器最适合你的使用场景。'
- en: '**Install Traefik 2.0**: If you like Traefik, maybe you can install Traefik
    2.0\. K3s includes Traefik version 1.0, which only has the necessary features
    to expose your application. But if you need more advanced reverse proxy features
    for your applications, you can install Traefik 2.0, which includes a dashboard
    and other features that you may want to use.'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装 Traefik 2.0**：如果你喜欢 Traefik，或许可以安装 Traefik 2.0。K3s 包含 Traefik 1.0 版本，只有暴露应用程序所需的基本功能。但如果你需要更多高级的反向代理功能，可以安装
    Traefik 2.0，它包含一个仪表盘和其他你可能想要使用的功能。'
- en: '**Introduce rate limits**: Implement rate limits to your applications. This
    is a nice feature when you want to prevent spikes or denial-of-service attacks.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**引入速率限制**：为你的应用程序实现速率限制。当你想要防止流量激增或拒绝服务攻击时，这是一个很好的功能。'
- en: '**Implement TLS**: This is a common use case. It’s recommended to encrypt your
    traffic to prevent a hacker from stealing your information. It’s important to
    provide additional security for your applications.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实现 TLS**：这是一个常见的使用场景。建议加密你的流量，以防黑客窃取你的信息。为你的应用程序提供额外的安全性是非常重要的。'
- en: '**Install basic authentication**: This is the most basic kind of security for
    your endpoints. With this, you can set a user and password to access your applications.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装基本认证**：这是保护你的端点的最基础安全方式。通过这种方式，你可以设置用户名和密码来访问你的应用程序。'
- en: '**Secure access with JSON Web Tokens** (**JWTs**): This is a nice feature to
    get more control and use tokens to access your endpoints. It is a better and more
    secure option than using a basic authentication method.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 JSON Web Tokens（JWTs）保护访问**：这是一个很好的功能，可以让你获得更多控制权，并使用令牌访问你的端点。相比使用基本认证方法，这是一个更好、更安全的选项。'
- en: Now you have other ideas to implement when you are using an ingress controller
    and creating ingress definitions to expose your applications. Now it is time for
    a quick summary of this chapter.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有了更多的想法，在使用入口控制器并创建入口定义以暴露你的应用程序时可以实现。现在是对本章节内容进行快速总结的时刻了。
- en: Summary
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to use different ingress controllers, such as
    NGINX, Traefik, and Contour. These ingress controllers are the most used ones,
    starting with NGINX, then Traefik, and finally Contour, which is based on Envoy.
    This chapter showed you how to use NGINX, Traefik, and Contour to solve common
    daily tasks in real production environments. The examples covered the use of TLS,
    routes, and some basic limit rates to access your applications. This chapter covered
    the last topic necessary to start with practical applications of all these technologies
    in the next chapter.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 本章节中，我们学习了如何使用不同的入口控制器，如 NGINX、Traefik 和 Contour。这些是最常用的入口控制器，首先是 NGINX，其次是
    Traefik，最后是基于 Envoy 的 Contour。本章节展示了如何使用 NGINX、Traefik 和 Contour 来解决真实生产环境中的常见任务。示例涵盖了
    TLS、路由以及一些访问应用程序的基本速率限制。此章节涵盖了开始在下一章中实际应用这些技术所需的最后一个主题。
- en: Questions
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Here are a few questions to validate your new knowledge:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些问题，用来验证你新的知识：
- en: What is an ingress controller?
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是入口控制器？
- en: When can you use an ingress controller?
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 何时可以使用入口控制器？
- en: How can you create an ingress definition to expose your applications?
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建入口定义以暴露你的应用程序？
- en: How can you create your ingress definition for NGINX, Traefik, or Contour?
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何为 NGINX、Traefik 或 Contour 创建入口定义？
- en: How can you troubleshoot your ingress controllers and ingress definitions?
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何排查入口控制器和入口定义的问题？
- en: How can you use MetalLB with your ingress controllers?
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将 MetalLB 与入口控制器一起使用？
- en: Further reading
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'You can refer to the following references for more information on the topics
    covered in this chapter:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以参考以下资源，了解本章节涉及的更多信息：
- en: 'Kubernetes Ingress documentation: [https://kubernetes.io/docs/concepts/services-networking/ingress](https://kubernetes.io/docs/concepts/services-networking/ingress)'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes Ingress 文档：[https://kubernetes.io/docs/concepts/services-networking/ingress](https://kubernetes.io/docs/concepts/services-networking/ingress)
- en: 'Install cert-manager with Helm: [https://cert-manager.io/docs/installation/helm](https://cert-manager.io/docs/installation/helm)'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Helm 安装 cert-manager：[https://cert-manager.io/docs/installation/helm](https://cert-manager.io/docs/installation/helm)
- en: 'Generating certificates for an ingress with cert-manager: [https://cert-manager.io/docs/tutorials/acme/nginx-ingress](https://cert-manager.io/docs/tutorials/acme/nginx-ingress)'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 cert-manager 为 Ingress 生成证书：[https://cert-manager.io/docs/tutorials/acme/nginx-ingress](https://cert-manager.io/docs/tutorials/acme/nginx-ingress)
- en: 'Kubernetes ingress controller official documentation: [https://kubernetes.io/docs/concepts/services-networking/ingress](https://kubernetes.io/docs/concepts/services-networking/ingress)'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes Ingress 控制器官方文档：[https://kubernetes.io/docs/concepts/services-networking/ingress](https://kubernetes.io/docs/concepts/services-networking/ingress)
- en: 'Installing NGINX ingress controller: [https://kubernetes.github.io/ingress-nginx/deploy/#using-helm](https://kubernetes.github.io/ingress-nginx/deploy/#using-helm)'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 NGINX Ingress 控制器：[https://kubernetes.github.io/ingress-nginx/deploy/#using-helm](https://kubernetes.github.io/ingress-nginx/deploy/#using-helm)
- en: 'Contour ingress controller getting started: [https://projectcontour.io/getting-started](https://projectcontour.io/getting-started)'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Contour Ingress 控制器入门：[https://projectcontour.io/getting-started](https://projectcontour.io/getting-started)
- en: 'Contour rate limits: [https://projectcontour.io/docs/v1.15.2/config/rate-limiting](https://projectcontour.io/docs/v1.15.2/config/rate-limiting)'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Contour 限流设置：[https://projectcontour.io/docs/v1.15.2/config/rate-limiting](https://projectcontour.io/docs/v1.15.2/config/rate-limiting)
- en: 'Create a Kubernetes TLS Ingress from scratch in Minikube: [https://www.youtube.com/watch?v=7K0gAYmWWho](https://www.youtube.com/watch?v=7K0gAYmWWho)'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Minikube 中从头创建 Kubernetes TLS Ingress：[https://www.youtube.com/watch?v=7K0gAYmWWho](https://www.youtube.com/watch?v=7K0gAYmWWho)
- en: 'Traefik and Kubernetes: [https://doc.traefik.io/traefik/v1.7/configuration/backends/kubernetes](https://doc.traefik.io/traefik/v1.7/configuration/backends/kubernetes)'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Traefik 和 Kubernetes：[https://doc.traefik.io/traefik/v1.7/configuration/backends/kubernetes](https://doc.traefik.io/traefik/v1.7/configuration/backends/kubernetes)
- en: 'JWT generator: [https://jwt.io](https://jwt.io)'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JWT 生成器：[https://jwt.io](https://jwt.io)

- en: Cluster Federation and Multi-Tenancy
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集群联合与多租户
- en: This chapter will discuss the new federation capabilities and how to use them
    to manage multiple clusters across cloud providers. We will also cover the federated
    version of the core constructs. We will walk you through federated Deployments,
    ReplicaSets, ConfigMaps, and Events.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将讨论新的联合能力以及如何使用它们来管理跨云提供商的多个集群。我们还将涵盖核心构件的联合版本。我们将带你了解联合的 Deployments、ReplicaSets、ConfigMaps
    和 Events。
- en: 'This chapter will discuss the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将讨论以下主题：
- en: Federating clusters
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 联合集群
- en: Federating multiple clusters
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 联合多个集群
- en: Inspecting and controlling resources across multiple clusters
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查和控制跨多个集群的资源
- en: Launching resources across multiple clusters
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在多个集群中启动资源
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You''ll need to have your Google Cloud Platform account enabled and logged
    in, or you can use a local Minikube instance of Kubernetes. You can also use Play
    with Kubernetes over the web: [https://labs.play-with-k8s.com/](https://labs.play-with-k8s.com/).
    There''s also the Katacoda playground at [https://www.katacoda.com/courses/kubernetes/playground](https://www.katacoda.com/courses/kubernetes/playground).'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要启用并登录你的 Google Cloud Platform 账户，或者可以使用本地的 Minikube 实例。你还可以使用 Web 上的 Play
    with Kubernetes：[https://labs.play-with-k8s.com/](https://labs.play-with-k8s.com/)。此外，还有
    Katacoda 的在线沙箱：[https://www.katacoda.com/courses/kubernetes/playground](https://www.katacoda.com/courses/kubernetes/playground)。
- en: You'll also need GitHub credentials, the setting up of which we'll go over later
    in this chapter. Here's the GitHub repository for this chapter: [https://github.com/PacktPublishing/Getting-Started-with-Kubernetes-third-edition/tree/master/Code-files/Chapter12](https://github.com/PacktPublishing/Getting-Started-with-Kubernetes-third-edition/tree/master/Code-files/Chapter12).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要 GitHub 凭证，我们将在本章稍后介绍如何设置。以下是本章的 GitHub 仓库：[https://github.com/PacktPublishing/Getting-Started-with-Kubernetes-third-edition/tree/master/Code-files/Chapter12](https://github.com/PacktPublishing/Getting-Started-with-Kubernetes-third-edition/tree/master/Code-files/Chapter12)。
- en: Introduction to federation
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 联合简介
- en: While federation is still very new in Kubernetes, it lays the groundwork for
    a highly sought after cross-cloud provider solution. Using federation, we can
    run multiple Kubernetes clusters on-premises and in one or more public cloud providers
    and manage applications utilizing the entire set of all our organizational resources.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然联合在 Kubernetes 中仍然是一个相对较新的概念，但它为一个备受追捧的跨云提供商解决方案奠定了基础。通过使用联合，我们可以在本地和一个或多个公共云提供商中运行多个
    Kubernetes 集群，并利用我们所有组织资源的完整集合来管理应用程序。
- en: This begins to create a path for avoiding cloud provider lock-in and highly
    available deployment that can place application servers in multiple clusters and
    allow for communication to other services located in single points among our federated
    clusters. We can improve isolation on outages at a particular provider or geographic
    location while providing greater flexibility for scaling and utilizing total infrastructure.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这为避免云提供商锁定和实现高可用部署提供了路径，可以将应用程序服务器放置在多个集群中，并允许与我们联合集群中单点服务的其他服务进行通信。我们可以在特定提供商或地理位置发生故障时改善隔离，同时为扩展和利用整体基础设施提供更大的灵活性。
- en: 'Currently, the federation plane supports these resources: ConfigMap, DaemonSets,
    Deployment, Events, Ingress, Namespaces, ReplicaSets, Secrets, and Services. Note
    that federation and its components are in alpha and beta phases of release, so
    functionality may still be a bit temperamental.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当前，联合平面支持以下资源：ConfigMap、DaemonSets、Deployment、Events、Ingress、Namespaces、ReplicaSets、Secrets
    和 Services。请注意，联合及其组件仍处于 alpha 和 beta 阶段，因此功能可能会有些不稳定。
- en: Why federation?
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么使用联合？
- en: There are several major advantages to taking on Kubernetes cluster federation.
    As mentioned previously, federation allows you increase the availability and tenancy
    capabilities of your Kubernetes clusters. By scaling across availability zones
    or regions of a single **cloud service provider** (**CSP**), or by scaling across
    multiple CSPs, federation takes the concept of high availability to the next level.
    Some term this global scheduling, which will could enable you to direct traffic
    in order to maximize an inexpensive CSP resource that becomes available in the
    spot market. You could also use global scheduling to relocate workloads cluster
    to end use populations, improving the performance of your applications.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Kubernetes 集群联合有几个主要的优点。正如前面提到的，联合可以提高 Kubernetes 集群的可用性和租户能力。通过在单一**云服务提供商**（**CSP**）的可用区或区域之间进行扩展，或者跨多个
    CSP 进行扩展，联合将高可用性的概念提升到了一个新的水平。有些人称之为全球调度，这将使你能够引导流量，以最大化在现货市场中变得可用的便宜 CSP 资源。你还可以利用全球调度将工作负载集群迁移到最终用户群体，提高应用程序的性能。
- en: There is also the opportunity to treat entire clusters as if they were Kubernetes
    objects, and deal with failure on a per-cluster basis instead of per machine.
    Cluster federation could allow operators to automatically recover from entire
    clusters failing by routing traffic to redundant, available clusters.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 还有机会将整个集群视为 Kubernetes 对象，并按集群而不是按机器处理故障。集群联合可以让操作员通过将流量引导到冗余的、可用的集群来自动恢复整个集群的故障。
- en: It should be noted that, while federation increases the potential for high availability
    on your cluster, it's clear that the significant increase in complexity also lowers
    your potential reliability if your clusters aren't managed well. You can manage
    some of this complexity by using a hosted PaaS version of Kubernetes such as GKE,
    where leaving the cluster management to GCP will drastically lower the operational
    load on your teams.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 应该注意的是，尽管联合增加了集群的高可用性潜力，但显著增加的复杂性也降低了可靠性，特别是在集群管理不当的情况下。你可以通过使用 Kubernetes 的托管
    PaaS 版本（例如 GKE）来管理一些复杂性，将集群管理交给 GCP，将大大减轻团队的操作负担。
- en: Federation can also enable your team to support a hybrid environment, with on-premises
    clusters pairing with your resources in the cloud. Depending on your traffic routing
    requirements, this may require additional engineering in the form of a service
    mesh.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 联合还可以使你的团队支持混合环境，将本地集群与云中的资源配对。根据你的流量路由要求，这可能需要额外的工程支持，通常表现为服务网格。
- en: There's a number of technical features that federation supplies, which enable
    higher potential availability.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 联合提供了许多技术特性，这些特性使得可用性有更高的潜力。
- en: The building blocks of federation
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 联合的构建模块
- en: 'Federation makes it easy to manage resources across clusters by providing two
    distinct types of building blocks. The first is resources and the second is service
    discovery:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 联合通过提供两种不同类型的构建模块，使得跨集群管理资源变得容易。第一种是资源，第二种是服务发现：
- en: '**Resource synchronization across clusters**: Federation is the glue that allows
    you to keep track of the many resources needed to run sets of applications. When
    you''re running a lot of applications, with many resources and object types, across
    many clusters, federation is key to keeping your clusters organized and managed
    well. You may find yourself needing to keep an application deployment running
    in multiple clusters with a single pane of glass view.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跨集群资源同步**：联合是将你需要的许多资源保持同步的粘合剂，以运行一组应用程序。当你在多个集群中运行大量应用程序，并且涉及许多资源和对象类型时，联合是保持集群有序和管理良好的关键。你可能会发现需要在多个集群中保持应用程序部署，并提供单一的管理视图。'
- en: '**Multi-cluster service discovery**: There are a number of resources that share
    well between clusters such as DNS, load balancers, object storage, and ingress.
    Federation gives you the ability to automatically configure those services with
    multi-cluster awareness, so you can route application traffic and manage the control
    plane across several clusters.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多集群服务发现**：有许多资源在集群之间共享得很好，例如 DNS、负载均衡器、对象存储和入口。联合使你能够自动配置这些服务，使其具备多集群感知能力，从而可以在多个集群之间路由应用流量，并管理控制平面。'
- en: 'As we''ll learn next, Kubernetes federation is managed by a tool named `kubefed`,
    which has a number of command-line flags that allow you to manage many clusters
    and the building blocks we discussed previously. The major building blocks of
    `kubefed` that we''ll use are as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们接下来要学习的，Kubernetes联邦是通过一个名为`kubefed`的工具来管理的，该工具有许多命令行标志，可以让你管理多个集群以及我们之前讨论的构建块。我们将使用的`kubefed`的主要构建块如下：
- en: '`kubefed init`: Initialize a federation control plane'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubefed init`：初始化联邦控制平面'
- en: '`kubefed join`: Join a cluster to a federation'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubefed join`：将一个集群加入到联邦中'
- en: '`kubefed options`: Print the list of flags inherited by all commands'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubefed options`：打印所有命令继承的标志列表'
- en: '`kubefed unjoin`: Unjoin a cluster from a federation'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubefed unjoin`：将一个集群从联邦中移除'
- en: '`kubefed version`: Print the client and server version information'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubefed version`：打印客户端和服务器版本信息'
- en: 'Here''s a handy list of the options that can be used:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个方便的选项列表，可以使用：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here''s a high-level diagram that shows what all of these pieces look like
    when strung together:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个高层次的图示，展示了当这些组件被串联起来时的样子：
- en: '![](img/43b385da-a4e9-4371-8d7c-b73bb50833a8.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/43b385da-a4e9-4371-8d7c-b73bb50833a8.png)'
- en: Key components
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关键组件
- en: There are two key components to the federation capability within Kubernetes.
    These components make up the federation control plane.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes中的联邦功能有两个关键组件。这些组件构成了联邦控制平面。
- en: The first is `federation-controller-manager`, which embeds the core control
    loops required to operate federation. `federation-controller-manager` watches
    the state of your clusters via `apiserver` and makes changes in order to reach
    a desired state.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个是`federation-controller-manager`，它嵌入了操作联邦所需的核心控制循环。`federation-controller-manager`通过`apiserver`监视集群的状态，并进行更改，以达到期望的状态。
- en: The second is `federation-apiserver`, which validates and configures Kubernetes
    objects such as pods, services, and controllers. `federation-apiserver` is the
    frontend for the cluster through which all other components interact.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个是`federation-apiserver`，它验证并配置Kubernetes对象，如pods、services和controllers。`federation-apiserver`是集群的前端，所有其他组件都通过它进行交互。
- en: Federated services
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 联邦服务
- en: Now that we have the building blocks of federation conceptualized in our mind,
    let's review one more facet of this before setting up federation. How exactly
    does a common service, deployed across multiple clusters, work?
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在脑海中构建了联邦的基础框架，接下来让我们在设置联邦之前，再回顾一下一个方面：一个跨多个集群部署的公共服务是如何工作的？
- en: 'Federated services are created in a very similar fashion to regular services:
    first, by sending the desired state and properties of the service to an API endpoint,
    which is then brought to bear by the Kubernetes architecture. There are two main
    differences:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 联邦服务的创建方式与常规服务非常相似：首先，将服务的期望状态和属性发送到API端点，然后通过Kubernetes架构实现。主要的区别有两个：
- en: A non-federated service will make an API call directly to a cluster API endpoint
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个非联邦服务将直接向集群API端点发出API调用
- en: A federated service will make the call to the Federated API endpoint at `federation/v1beta1`,
    which will then redirect the API call to all of the individual clusters within
    the federation control plane
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 联邦服务将向`federation/v1beta1`的联邦API端点发出调用，然后将API调用重定向到联邦控制平面内的所有单个集群。
- en: This second type of service allows us to extend such things as DNS service discovery
    across cluster boundaries. The DNS `resolv` chain is able to leverage service
    federation and public DNS records to resolve names across multiple clusters.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种类型的服务允许我们扩展诸如跨集群边界的DNS服务发现等功能。DNS `resolv`链能够利用服务联邦和公共DNS记录，在多个集群之间解析名称。
- en: The API for a federated service is 100% compatible with regular services.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 联邦服务的API与常规服务100%兼容。
- en: When a service is created, federation takes care of several things. First, it
    creates matching services in all clusters where `kubefed` specifies they reside.
    The health of those services is monitored so that traffic can be routed or re-routed
    to them. Lastly, federation ensure that there's a definitive set of public DNS
    records available through providers such as Route 53 or Google Cloud DNS.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建服务时，联邦会处理几件事。首先，它在所有`kubefed`指定的集群中创建匹配的服务。这些服务的健康状况会被监控，以便流量可以路由或重新路由到它们。最后，联邦确保通过Route
    53或Google Cloud DNS等提供商，有一组确切的公共DNS记录可用。
- en: Microservices residing on different pods within your Kubernetes clusters will
    use all of this machinery in order to locate the federated service either within
    their own cluster or navigate to the nearest healthy example within your federation
    map.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的Kubernetes集群内，不同Pod上的微服务将利用这一切机制来定位联邦服务，无论是在自己的集群内，还是导航到你联邦图中最近的健康实例。
- en: Setting up federation
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置联邦
- en: While we can use the cluster we had running for the rest of the examples, I
    would highly recommend that you start fresh. The default naming of the clusters
    and contexts can be problematic for the federation system. Note that the `--cluster-context`
    and `--secret-name` flags are there to help you work around the default naming,
    but for first-time federation, it can still be confusing and less than straightforward.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们可以使用已经运行的集群来完成其余的示例，但我强烈建议你从头开始。集群和上下文的默认命名对于联邦系统可能会产生问题。请注意，`--cluster-context`和`--secret-name`标志可以帮助你绕过默认命名，但对于首次进行联邦设置来说，仍然可能会令人困惑且不太直接。
- en: 'Hence, starting fresh is how we will walk through the examples in this chapter.
    Either use new and separate cloud provider (AWS and/or GCE) accounts or tear down
    the current cluster and reset your Kubernetes control environment by running the
    following commands:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，从头开始是我们在本章中演示示例的方式。你可以使用新的独立云服务提供商（AWS和/或GCE）账户，或者通过运行以下命令摧毁当前集群并重置你的Kubernetes控制环境：
- en: '[PRE1]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Double-check that nothing is listed using the following commands:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令仔细检查确保没有列出任何内容：
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, we will want to get the `kubefed` command on our path and make it executable.
    Navigate back to the folder where you have the Kubernetes download extracted. The
    `kubefed` command is located in the `/kubernetes/client/bin` folder. Run the following
    commands to get in the `bin` folder and change the execution permissions:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将需要将`kubefed`命令添加到路径中并使其可执行。返回到你提取Kubernetes下载的文件夹。`kubefed`命令位于`/kubernetes/client/bin`文件夹中。运行以下命令进入`bin`文件夹并更改执行权限：
- en: '[PRE3]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Contexts
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上下文
- en: Contexts are used by the Kubernetes control plane to keep authentication and
    cluster configuration stored for multiple clusters. This allows us to access and
    manage multiple clusters accessible from the same `kubectl`. You can always see
    the contexts available with the `get-contexts` command that we used earlier.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 上下文由Kubernetes控制平面使用，以便存储多个集群的认证信息和配置。这允许我们通过同一个`kubectl`访问和管理多个集群。你总是可以通过之前使用的`get-contexts`命令查看可用的上下文。
- en: New clusters for federation
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 联邦的新集群
- en: 'Again, make sure you navigate to wherever Kubernetes was downloaded and move
    into the `cluster` sub-folder:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 再次确保你进入Kubernetes下载的文件夹，并进入`cluster`子文件夹：
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Before we proceed, make sure you have the GCE command line and the AWS command
    line installed, authenticated, and configured. Refer to [Chapter 1](446f901d-70fa-4ebe-be8a-0de14248f99c.xhtml),
    *Introduction to Kubernetes*, if you need assistance doing so on a new box.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，请确保你已安装、验证并配置了GCE命令行工具和AWS命令行工具。如果你在新机器上需要帮助，可以参考[第1章](446f901d-70fa-4ebe-be8a-0de14248f99c.xhtml)，*Kubernetes简介*。
- en: First, we will create the AWS cluster. Note that we are adding an environment
    variable named `OVERRIDE_CONTEXT`, which will allow us to set the context name
    to something that complies with the DNS naming standards. DNS is a critical component
    for federation as it allows us to do cross-cluster discovery and service communication.
    This is important in a federated world where clusters may be in different data
    centers and even providers.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建AWS集群。请注意，我们正在添加一个名为`OVERRIDE_CONTEXT`的环境变量，这将允许我们将上下文名称设置为符合DNS命名标准的名称。DNS是联邦的关键组件，因为它使我们能够进行跨集群发现和服务通信。在一个联邦环境中，集群可能位于不同的数据中心甚至不同的提供商之间，这一点尤为重要。
- en: 'Run these commands to create your AWS cluster:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令以创建你的AWS集群：
- en: '[PRE5]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, we will create a GCE cluster, once again using the `OVERRIDE_CONTEXT` environment
    variable:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将再次使用`OVERRIDE_CONTEXT`环境变量创建一个GCE集群：
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If we take a look at our contexts now, we will notice both `awsk8s` and `gcek8s`,
    which we just created. The star in front of `gcek8s` denotes that it''s where
    `kubectl` is currently pointing and executing against:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在查看上下文，我们会注意到刚才创建的`awsk8s`和`gcek8s`。`gcek8s`前面的星号表示`kubectl`当前指向并正在执行的上下文：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The preceding command should produce something like the following:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令应该会产生如下所示的输出：
- en: '![](img/0b5b6aae-59f7-4e76-8f74-5520fcb1570a.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0b5b6aae-59f7-4e76-8f74-5520fcb1570a.png)'
- en: Initializing the federation control plane
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始化联邦控制平面
- en: 'Now that we have two clusters, let''s set up the federation control plane in
    the GCE cluster. First, we''ll need to make sure that we are in the GCE context,
    and then we will initialize the federation control plane:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了两个集群，接下来在GCE集群中设置联邦控制平面。首先，我们需要确保处于GCE环境中，然后初始化联邦控制平面：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The preceding command creates a new context just for federation called `master-control`.
    It uses the `gcek8s` cluster/context to host the federation components (such as
    API server and controller). It assumes GCE DNS as the federation's DNS service.
    You'll need to update `dns-zone-name` with a domain suffix you manage.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令创建了一个新的联邦环境，名为`master-control`。它使用`gcek8s`集群/环境来托管联邦组件（如API服务器和控制器）。它假定GCE
    DNS作为联邦的DNS服务。你需要更新`dns-zone-name`，并填写你管理的域名后缀。
- en: By default, the DNS provider is GCE. You can use `--dns-provider="aws-route53"`
    to set it to AWS `route53`; however, out of the box implementation still has issues
    for many users.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，DNS提供商是GCE。你可以使用`--dns-provider="aws-route53"`将其设置为AWS `route53`；然而，许多用户发现开箱即用的实现仍然存在问题。
- en: 'If we check our contexts once again, we will now see three contexts:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们再次检查环境，会看到三个环境：
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The preceding command should produce something like the following:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令应生成如下内容：
- en: '![](img/32642ab3-67a0-4488-b698-d7283f1a474d.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/32642ab3-67a0-4488-b698-d7283f1a474d.png)'
- en: 'Let''s make sure we have all of the federation components running before we
    proceed. The federation control plane uses the `federation-system` namespace.
    Use the `kubectl get pods` command with the namespace specified to monitor the
    progress. Once you see two API server pods and one controller pod, you should
    be set:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，我们先确保所有联邦组件都在运行。联邦控制平面使用`federation-system`命名空间。使用带有命名空间的`kubectl get
    pods`命令来监控进度。当看到两个API服务器pod和一个控制器pod时，表示已就绪：
- en: '[PRE10]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](img/07a6f78a-e107-4ca2-95e8-a3a0fc7327a7.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/07a6f78a-e107-4ca2-95e8-a3a0fc7327a7.png)'
- en: 'Now that we have the federation components set up and running, let''s switch
    to that context for the next steps:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置并运行了联邦组件，接下来让我们切换到该环境以进行后续步骤：
- en: '[PRE11]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Adding clusters to the federation system
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向联邦系统添加集群
- en: 'Now that we have our federation control plane, we can add the clusters to the
    federation system. First, we will join the GCE cluster and then the AWS cluster:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了联邦控制平面，可以将集群添加到联邦系统中。首先，我们将加入GCE集群，然后加入AWS集群：
- en: '[PRE12]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Federated resources
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 联邦资源
- en: Federated resources allow us to deploy across multiple clusters and/or regions.
    Currently, version 1.5 of Kubernetes support a number of core resource types in
    the federation API, including ConfigMap, DaemonSets, Deployment, Events, Ingress,
    Namespaces, ReplicaSets, Secrets, and Services.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 联邦资源允许我们跨多个集群和/或区域进行部署。目前，Kubernetes 1.5版本支持联邦API中的多个核心资源类型，包括ConfigMap、DaemonSets、Deployment、Events、Ingress、Namespaces、ReplicaSets、Secrets和Services。
- en: 'Let''s take a look at a federated deployment that will allow us to schedule
    pods across both AWS and GCE. Save the following file as `node-js-deploy-fed.yaml`:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下一个联邦部署，它将允许我们在AWS和GCE之间调度pods。将以下文件保存为`node-js-deploy-fed.yaml`：
- en: '[PRE13]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create this deployment with the following command:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令创建此部署：
- en: '[PRE14]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, let''s try listing the pods from this deployment:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，尝试列出这个部署的pods：
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![](img/ac71ec43-457f-4b34-9e3e-6ed440646a9b.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ac71ec43-457f-4b34-9e3e-6ed440646a9b.png)'
- en: 'We should see a message like the preceding one depicted. This is because we
    are still using `master-control` or federation context, which does not itself
    run pods. We will, however, see the deployment in the federation plane and, if
    we inspect the events, we will see that the deployment was in fact created on
    both of our federated clusters:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该看到类似于前面显示的消息。这是因为我们仍在使用`master-control`或联邦环境，它本身不运行pods。然而，我们会在联邦平面中看到部署，如果检查事件，我们会看到该部署实际上已经在我们的两个联邦集群上创建：
- en: '[PRE16]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We should see something like the following. Notice that the `Events:` section
    shows deployments in both our GCE and AWS contexts:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该看到如下内容。注意，`Events:`部分显示了我们在GCE和AWS环境中的部署：
- en: '![](img/0fab6b6c-e740-47d0-929e-a70d4f55332e.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0fab6b6c-e740-47d0-929e-a70d4f55332e.png)'
- en: 'We can also see the federated events using the following command:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用以下命令查看联邦事件：
- en: '[PRE17]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![](img/483ab423-3cac-42ae-8b8b-67473995cca6.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/483ab423-3cac-42ae-8b8b-67473995cca6.png)'
- en: 'It may take a moment for all three pods to run. Once that happens, we can switch
    to each cluster context and see some of the pods on each. Note that we can now
    use `get pods` since we are on the individual clusters and not on the control
    plane:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 所有三个Pod启动可能需要一段时间。一旦启动，我们可以切换到每个集群的上下文，并查看每个集群中的一些Pod。请注意，我们现在可以使用`get pods`，因为我们在单个集群中，而不是在控制平面中：
- en: '[PRE18]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![](img/cf4f6def-7210-4221-adc9-85f5163b6ddd.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cf4f6def-7210-4221-adc9-85f5163b6ddd.png)'
- en: '[PRE19]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '![](img/52d8853d-7773-4e58-af50-a1dd633d8666.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/52d8853d-7773-4e58-af50-a1dd633d8666.png)'
- en: We should see the three pods spread across the clusters with two on one and
    a third on the other. Kubernetes has spread them across the cluster without any
    manual intervention. Any pods that fail will be restarted, but now we have the
    added redundancy of two cloud providers.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该看到三个Pod分布在集群中，其中两个在一个集群，第三个在另一个集群。Kubernetes已经在集群中分配了它们，无需人工干预。任何失败的Pod将被重新启动，但现在我们有了来自两个云提供商的冗余。
- en: Federated configurations
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 联邦配置
- en: In modern software development, it is common to separate configuration variables
    from the application code itself. In this way, it is easier to make updates to
    service URLs, credentials, common paths, and so on. Having these values in external
    configuration files means we can easily update configuration without rebuilding
    the entire application.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代软件开发中，将配置变量与应用程序代码本身分离是很常见的做法。这样，可以更容易地更新服务URL、凭证、公共路径等。将这些值保存在外部配置文件中意味着我们可以轻松更新配置，而不需要重新构建整个应用程序。
- en: This separation solves the initial problem, but true portability comes when
    you can remove the dependency from the application completely. Kubernetes offers
    a configuration store for exactly this purpose. ConfigMaps are simple constructs
    that store key-value pairs.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这种分离解决了最初的问题，但真正的可移植性来自于当你能够完全去除应用程序中的依赖时。Kubernetes提供了一个配置存储库，专门用于这个目的。ConfigMap是一个简单的结构，用来存储键值对。
- en: Kubernetes also supports Secrets for more sensitive configuration data. This
    will be covered in more detail in [Chapter 10](a26334cc-d455-4eaf-9e0e-6d216848a690.xhtml),
    *Cluster Authentication, Authorization, and Container Security*. You can use the
    example there in both single clusters or on the federation control plane as we
    are demonstrating with ConfigMaps here.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes还支持用于更敏感的配置数据的Secrets。这个内容将在[第10章](a26334cc-d455-4eaf-9e0e-6d216848a690.xhtml)，*集群身份验证、授权和容器安全性*中详细介绍。你可以在单集群或联邦控制平面中使用此处的示例，就像我们在这里演示`ConfigMap`一样。
- en: Let's take a look at an example that will allow us to store some configuration
    and then consume it in various pods. The following listings will work for both
    federated and single clusters, but we will continue using a federated setup for
    this example.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子，它将允许我们存储一些配置，然后在多个Pod中使用这些配置。以下列表适用于联邦集群和单集群，但我们将在这个例子中继续使用联邦配置。
- en: 'The `ConfigMap` kind can be created using literal values, flat files and directories,
    and finally YAML definition files. The following listing is a YAML definition
    of the `configmap-fed.yaml` file:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`ConfigMap`类型可以通过字面量值、平面文件和目录，最终通过YAML定义文件来创建。以下列表是`configmap-fed.yaml`文件的YAML定义：'
- en: '[PRE20]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Let''s first switch back to our federation plane:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们切换回我们的联邦平面：
- en: '[PRE21]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, create this listing with the following command:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用以下命令创建此列表：
- en: '[PRE22]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Let''s display the `configmap` object that we just created. The `-o yaml` flag
    helps us to display the full information:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们展示一下我们刚刚创建的`configmap`对象。`-o yaml`标志帮助我们显示完整信息：
- en: '[PRE23]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '![](img/83de3392-cff3-4276-8c11-9e8b7de0f327.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/83de3392-cff3-4276-8c11-9e8b7de0f327.png)'
- en: 'Now that we have a `ConfigMap` object, let''s start up a federated `ReplicaSet` that
    can use the `ConfigMap` object. This will create replicas of pods across our cluster
    that can access the `ConfigMap` object. `ConfigMaps`can be accessed via environment
    variables or mount volumes. This example will use a mount volume that provides
    a folder hierarchy and the files for each key with the contents representing the
    values. Save the following file as `configmap-rs-fed.yaml`:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个`ConfigMap`对象，让我们启动一个可以使用该`ConfigMap`对象的联邦`ReplicaSet`。这将创建跨集群的Pod副本，这些副本可以访问`ConfigMap`对象。`ConfigMap`可以通过环境变量或挂载卷访问。这个例子将使用一个挂载卷，提供一个文件夹层次结构以及每个键的文件，文件内容表示相应的值。将以下文件保存为`configmap-rs-fed.yaml`：
- en: '[PRE24]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Create this pod with `kubectl create -f configmap-rs-fed.yaml`. After creation,
    we will need to switch contexts to one of the clusters where the pods are running.
    You can choose either, but we will use the GCE context here:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`kubectl create -f configmap-rs-fed.yaml`创建此Pod。创建后，我们需要切换到其中一个Pod正在运行的集群。你可以选择任意一个，但我们在这里使用GCE上下文：
- en: '[PRE25]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now that we are on the GCE cluster specifically, let''s check `configmaps` here:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们专门进入了GCE集群，让我们在这里检查`configmaps`：
- en: '[PRE26]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'As you can see, the `ConfigMap` is propagated locally to each cluster. Next,
    let''s find a pod from our federated `ReplicaSet`:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，`ConfigMap`被本地传播到每个集群。接下来，让我们从我们的联邦`ReplicaSet`中找到一个Pod：
- en: '[PRE27]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '![](img/3dd6ab65-c77d-4d67-b50b-28dc5a464726.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3dd6ab65-c77d-4d67-b50b-28dc5a464726.png)'
- en: 'Let''s take one of the `node-js-rs` pod names from the listing and run a bash
    shell with `kubectl exec`:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从列表中选择一个`node-js-rs` Pod名称，并使用`kubectl exec`运行一个bash shell：
- en: '[PRE28]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Then, let''s change directories to the `/etc/config` folder that we set up
    in the pod definition. Listing this directory reveals a single file with the name
    of the `ConfigMap` we defined earlier:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，进入我们在Pod定义中设置的`/etc/config`文件夹。列出该目录会显示一个文件，其名称是我们之前定义的`ConfigMap`：
- en: '[PRE29]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'If we then display the contents of the files with the following command, we
    should see the value we entered earlier, `my-backend-service`:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用以下命令显示文件的内容，我们应该能看到之前输入的值`my-backend-service`：
- en: '[PRE30]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: If we were to look in any of the pods across our federated cluster, we would
    see the same values. This is a great way to decouple configuration from an application
    and distribute it across our fleet of clusters.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看我们联邦集群中的任何Pod，都会看到相同的值。这是一种很好的方法，将配置与应用程序解耦并分发到我们的集群阵列中。
- en: Federated horizontal pod autoscalers
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 联邦水平Pod自动伸缩器
- en: 'Let''s look at another example of a newer resource that you can use with the
    federated model: **horizontal pod autoscalers** (**HPAs**).'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看另一个可以与联邦模型一起使用的新资源：**水平Pod自动伸缩器**（**HPAs**）。
- en: 'Here''s what the architecture of these looks like in a single cluster:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在单个集群中它们的架构：
- en: '![](img/79f2b93f-cefb-44aa-abb8-b1f93733bd4a.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/79f2b93f-cefb-44aa-abb8-b1f93733bd4a.png)'
- en: Credit: **[https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#how-does-the-horizontal-pod-autoscaler-work](https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#how-does-the-horizontal-pod-autoscaler-work)**.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 资料来源：**[https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#how-does-the-horizontal-pod-autoscaler-work](https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#how-does-the-horizontal-pod-autoscaler-work)**。
- en: These HPAs will act in a similar fashion to normal HPAs, with the same functionality
    and same API-based compatibility—only, with federation, the management will traverse
    your clusters. This is an alpha feature, so it is not enabled by default on your
    cluster. In order to enable it, you'll need to run `federation-apiserver` with
    the `--runtime-config=api/all=true` option. Currently, the only metrics that work
    to manage HPAs are CPU utilization metrics.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这些HPA的行为与普通HPA相似，具有相同的功能和基于API的兼容性——只是通过联邦，管理将遍历你的集群。这是一个alpha功能，因此默认情况下在集群中未启用。为了启用它，你需要使用`--runtime-config=api/all=true`选项运行`federation-apiserver`。目前，唯一有效的度量标准是CPU利用率度量。
- en: 'First, let''s create a file that contains the HPA configuration, called `node-hpa-fed.yaml`:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们创建一个包含HPA配置的文件，命名为`node-hpa-fed.yaml`：
- en: '[PRE31]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We can add this to our cluster with the following command:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令将其添加到我们的集群：
- en: '[PRE32]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: In this case, `--context=federation-cluster` is telling `kubectl` to send the
    request to `federation-apiserver` instead of `kube-apiserver`.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`--context=federation-cluster`是告诉`kubectl`将请求发送到`federation-apiserver`而不是`kube-apiserver`。
- en: 'If, for example, you wanted to restrict this HPA to a subset of your Kubernetes
    clusters, you can use cluster selectors to restrict the federated object by using
    the `federation.alpha.kubernetes.io/cluster-selector` annotation. It''s similar
    in function to nodeSelector, but acts upon full Kubernetes clusters. Cool! You''ll
    need to create an annotation in JSON format. Here''s a specific example of a ClusterSelector
    annotation:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你想将此HPA限制为某些Kubernetes集群的子集，可以使用集群选择器来限制联邦对象，方法是使用`federation.alpha.kubernetes.io/cluster-selector`注解。它的功能类似于nodeSelector，但作用于完整的Kubernetes集群。很酷！你需要创建一个JSON格式的注解。以下是ClusterSelector注解的具体示例：
- en: '[PRE33]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This example is going to keep workloads with the `hipaa` label out of environments
    with the `nonprod` label.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例将保持带有`hipaa`标签的工作负载不在带有`nonprod`标签的环境中运行。
- en: For a full list of Top Level Federation API objects, see the following: [https://kubernetes.io/docs/reference/federation/](https://kubernetes.io/docs/reference/federation/)
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看顶级联合 API 对象的完整列表，请参见以下链接：[https://kubernetes.io/docs/reference/federation/](https://kubernetes.io/docs/reference/federation/)
- en: 'You can check your clusters to see whether the HPA was created in an individual
    location by specifying the context:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以检查你的集群，查看是否在单个位置创建了 HPA，通过指定上下文：
- en: '[PRE34]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Once you''re finished with the HPA, it can be deleted with the following `kubectl`
    command:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 完成 HPA 后，可以使用以下 `kubectl` 命令将其删除：
- en: '[PRE35]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: How to use federated HPAs
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用联合 HPA
- en: 'HPAs used in the previous manner are an essential tool for ensuring that your
    clusters scale up as their workloads increase. The default behavior for HPA spreading
    in clusters ensure that maximum replicas are spread evenly first in all clusters.
    Let''s say that you have 10 registered Kubernetes clusters in your federation
    control plane. If you have `spec.maxReplicas = 30`, each of the clusters will
    receive the following HPA `spec`:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 以前使用的 HPA 是确保你的集群在工作负载增加时进行扩展的必要工具。HPA 在集群中的默认行为是首先在所有集群中均匀分配最大副本。假设你在联合控制平面中注册了
    10 个 Kubernetes 集群。如果你的 `spec.maxReplicas = 30`，那么每个集群将收到以下 HPA `spec`：
- en: '[PRE36]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'If you were to then set `spec.minReplicas = 5`, then some of the clusters will
    receive the following:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将 `spec.minReplicas = 5` 设置为值，那么一些集群将接收到以下内容：
- en: '[PRE37]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: This is due to being unable to have a replica sum of 0\. It's important to note
    that federation manipulates the minx/mix replicas it creates on the federated
    clusters, not by directly monitoring the target object metrics (in our case, CPU).
    The federated HPA controller is relying on HPAs within the federated cluster to
    monitor CPU utilization, which then makes changes to specs such as current and
    desired replicas.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这是由于无法将副本总数设置为 0。需要注意的是，联合会操作它在联合集群中创建的最小/最大副本，而不是直接监控目标对象的指标（在我们的例子中是 CPU）。联合
    HPA 控制器依赖于联合集群中的 HPA 来监控 CPU 利用率，然后根据需要调整副本数（例如当前副本数和期望副本数）。
- en: Other federated resources
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他联合资源
- en: So far, we have seen federated Deployments, ReplicaSets, Events, and ConfigMaps
    in action. DaemonSets, Ingress, Namespaces, Secrets, and Services are also supported. Your
    specific setup will vary and you may have a set of clusters that differ from our
    example here. As mentioned earlier, these resources are still in beta, so it's
    worth spending some time to experiment with the various resource types and understand
    how well the federation constructs are supported for your particular mix of infrastructure.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到联合部署（Deployments）、副本集（ReplicaSets）、事件（Events）和配置映射（ConfigMaps）的实际应用。守护进程集（DaemonSets）、入口（Ingress）、命名空间（Namespaces）、秘密（Secrets）和服务（Services）也受到支持。你的具体设置可能会有所不同，你可能有一组与我们这里的示例不同的集群。如前所述，这些资源仍处于测试阶段，因此值得花一些时间来实验各种资源类型，并了解联合构建在你的基础设施组合中得到的支持程度。
- en: Let's look at some examples that we can use to leverage other common Kubernetes
    API objects from a federated perspective.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一些示例，这些示例展示了如何从联合视角利用其他常见的 Kubernetes API 对象。
- en: Events
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件
- en: 'If you want to see what events are only stored in the federation control plane,
    you can use the following command:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想查看仅存储在联合控制平面中的事件，可以使用以下命令：
- en: '[PRE38]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Jobs
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 作业
- en: 'When you go to create a job, you''ll use similar concepts as before. Here''s
    what that looks like when you create a job within the federation context:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 当你去创建一个作业时，你将使用与之前类似的概念。以下是你在联合上下文中创建作业时的样子：
- en: '[PRE39]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'You can get the list of these jobs within the federated context with the following:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过以下命令，在联合上下文中获取这些作业的列表：
- en: '[PRE40]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: As with HPAs, you can spread your jobs across multiple underlying clusters with
    the appropriate specs. The relevant definitions are `spec.parallelism` and `spec.completions`,
    and they can be modified by specifying the correct `ReplicaAllocationPreferences`
    with the `federation.kubernetes.io/job-preferences` key.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 与 HPA 一样，你可以使用适当的规格将作业分布到多个基础集群中。相关定义为 `spec.parallelism` 和 `spec.completions`，可以通过指定正确的
    `ReplicaAllocationPreferences` 和 `federation.kubernetes.io/job-preferences` 键来修改。
- en: True multi-cloud
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 真正的多云
- en: This is an exciting space to watch. As it grows, it gives us a really good start
    to doing multi-cloud implementations and providing redundancy across regions,
    data centers, and even cloud providers.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个值得关注的激动人心的领域。随着它的成长，它为我们提供了一个很好的起点，来进行多云实施，并提供跨区域、数据中心甚至云提供商的冗余。
- en: While Kubernetes does provide an easy and exciting path to multi-cloud infrastructure,
    it's important to note that production multi-cloud requires much more than distributed
    deployments. A full set of capabilities from logging and monitoring to compliance
    and host-hardening, there is much to manage in a multi-provider setup.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Kubernetes提供了一个简单而激动人心的路径来实现多云基础设施，但需要注意的是，生产环境中的多云不仅仅是分布式部署。除了日志记录、监控、合规性和主机加固等功能外，在多提供商环境中，还需要管理更多的能力。
- en: True multi-cloud adoption will require a well-planned architecture, and Kubernetes
    takes a big step forward in pursuing this goal.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 真正的多云采用需要一个精心规划的架构，而Kubernetes在实现这一目标方面迈出了重要一步。
- en: Getting to multi-cloud
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始多云部署
- en: In this exercise, we're going to unite two clusters using Istio's multi-cloud
    feature. Normally, we'd create two clusters from scratch, across two CSPs, but
    for the purposes of exploring one single isolated concept at a time, we're going
    to use the GKE to spin up our clusters, so we can focus on the inner workings
    of Istio's multi-cloud functionality.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在本次练习中，我们将使用Istio的多云功能将两个集群连接起来。通常，我们会从头开始在两个云服务提供商（CSP）中创建两个集群，但为了更专注于逐步探讨单一的隔离概念，我们将使用GKE来启动集群，这样我们可以专注于Istio多云功能的内部工作原理。
- en: Let's get started by logging in to your Google Cloud Project! First, you'll
    want to create a project in the GUI called `gsw-k8s-3`, if you haven't already,
    and get your Google Cloud Shell to point to it. If you're already pointed at your
    GCP account, you can disregard that.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧，首先登录到你的Google Cloud项目！首先，你需要在GUI中创建一个名为`gsw-k8s-3`的项目，如果还没创建的话，并将你的Google
    Cloud Shell指向该项目。如果你已经指向了你的GCP账户，可以忽略这一步。
- en: 'Click this button for an easy way to get access to the CLI tools:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 点击此按钮，轻松访问CLI工具：
- en: '![](img/f5d89e61-5ecf-4189-9d5c-9dbf599023e6.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f5d89e61-5ecf-4189-9d5c-9dbf599023e6.png)'
- en: 'Once you''ve launched the shell, you can point it to your project:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 启动Shell后，你可以将其指向你的项目：
- en: '[PRE41]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Next, we''ll set up an environment variable for the project ID, which can echo
    back to see:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将为项目ID设置一个环境变量，通过该变量可以回显查看：
- en: '[PRE42]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Now, let''s create some clusters. Set some variables for the zone and cluster
    name:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建一些集群。设置区域和集群名称的变量：
- en: '[PRE43]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'First, create cluster one:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建集群一：
- en: '[PRE44]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'You may need to change the cluster version to a newer GKE version as updates
    are made. Older versions become unsupported over time. For example, you might
    see a message such as this:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能需要将集群版本更新到更新的GKE版本，因为随着更新的发布，旧版本会逐渐不再支持。例如，你可能会看到如下消息：
- en: '`ERROR: (gcloud.container.clusters.create) ResponseError: code=400, message=EXTERNAL:
    Master version "1.9.6-gke.1" is unsupported.` You can check this web page to find
    out the currently supported version of GKE: [https://cloud.google.com/kubernetes-engine/release-notes](https://cloud.google.com/kubernetes-engine/release-notes).'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`ERROR: (gcloud.container.clusters.create) ResponseError: code=400, message=EXTERNAL:
    Master version "1.9.6-gke.1" is unsupported.` 你可以访问以下网页，了解当前支持的GKE版本：[https://cloud.google.com/kubernetes-engine/release-notes](https://cloud.google.com/kubernetes-engine/release-notes)。'
- en: 'Next, specify `cluster-2`:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，指定`cluster-2`：
- en: '[PRE45]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Now, create it, where you''ll see messages above. We''ll omit them this time
    around:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，创建它，你会看到上面的消息。我们这次会省略这些：
- en: '[PRE46]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'You''ll see the same messaging above. You can create another Google Cloud Shell
    window by clicking on the **+** icon in order to create some `watch` commands
    to see the clusters created. Take a minute to do this while the instances are
    created:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到上面的相同消息。你可以通过点击**+**图标来创建另一个Google Cloud Shell窗口，并创建一些`watch`命令来查看集群的创建情况。在实例创建期间，花点时间这样做：
- en: '![](img/4f244410-3414-4381-8ba5-8ae26af26fd9.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4f244410-3414-4381-8ba5-8ae26af26fd9.png)'
- en: 'In that window, launch this command: `gcloud container clusters list`. You
    should see the following:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在该窗口中，执行以下命令：`gcloud container clusters list`。你应该会看到如下内容：
- en: '[PRE47]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'On the dashboard, it''ll look like so:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在仪表板上，它会显示如下：
- en: '![](img/1b410eee-aa4e-44ce-93f4-6250185c2c0d.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1b410eee-aa4e-44ce-93f4-6250185c2c0d.png)'
- en: 'Next up, we''ll grab the cluster credentials. This command will allow us to
    set a `kubeconfig` context for each specific cluster:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将获取集群凭据。此命令将允许我们为每个特定集群设置`kubeconfig`上下文：
- en: '[PRE48]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Let''s ensure that we can use `kubectl` to get the context for each cluster:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们确保可以使用`kubectl`获取每个集群的上下文：
- en: '[PRE49]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'If you then run `kubectl get pods --all-namespaces` after executing each of
    the cluster context switches, you should see something similar to this for each
    cluster:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在执行每个集群上下文切换后，你运行`kubectl get pods --all-namespaces`，你应该会看到每个集群类似的输出：
- en: '[PRE50]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Next up, we''re going to need to create a Google Cloud firewall rule so each
    cluster can talk to the other. We''re going to need to gather all cluster networking
    data (tags and CIDR), and then create firewall rules with `gcloud`. The CIDR ranges
    will look something like this:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建一个 Google Cloud 防火墙规则，以便每个集群能够相互通信。我们需要收集所有集群的网络数据（标签和 CIDR），然后使用
    `gcloud` 创建防火墙规则。CIDR 范围大概是这样的：
- en: '[PRE51]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The tags will be per-node, resulting in eight total tags:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 这些标签将是每个节点的，总共会有八个标签：
- en: '[PRE52]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Let''s run the full command now to create the firewall rules. Note the `join_by`
    function is a neat hack that allows us to join multiple elements of an array in
    Bash:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们运行完整的命令来创建防火墙规则。注意 `join_by` 函数是一个巧妙的技巧，允许我们在 Bash 中将多个数组元素连接起来：
- en: '[PRE53]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'That will set up our security firewall rules, which should look similar to
    this in the GUI when complete:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 这将设置我们的安全防火墙规则，完成后在 GUI 中应该类似于这个样子：
- en: '![](img/275978f9-b5df-4c14-8847-4a8b943bceac.png)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![](img/275978f9-b5df-4c14-8847-4a8b943bceac.png)'
- en: 'Let''s create an admin role that we can use in future steps. First, set `KUBE_USER`
    to the email address associated with your GCP account with `KUBE_USER="<YOUR_EMAIL>"`.
    Next, we''ll create a `clusterrolebinding`:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个管理员角色，以便在未来的步骤中使用。首先，使用 `KUBE_USER="<YOUR_EMAIL>"` 设置 `KUBE_USER` 为与你的
    GCP 账户相关联的电子邮件地址。接下来，我们将创建一个 `clusterrolebinding`：
- en: '[PRE54]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Next up, we'll install the Istio control plane with Helm, create a namespace,
    and deploy Istio using a chart.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用 Helm 安装 Istio 控制平面，创建一个命名空间，并使用 chart 部署 Istio。
- en: 'Check to make sure you''re using `cluster-1` as your context with `kubectl
    config current-context`. Next, we''ll install Helm with these commands:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `kubectl config current-context` 检查确保你正在使用 `cluster-1` 作为上下文。接下来，我们将使用以下命令安装
    Helm：
- en: '[PRE55]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Now, switch to another, Istio-specific context where we''ll install Istio in
    its own namespace:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，切换到另一个 Istio 特定的上下文，我们将在其自己的命名空间中安装 Istio：
- en: '[PRE56]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Copy over the installation chart for Istio into our home directory:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Istio 的安装 chart 复制到我们的主目录：
- en: '[PRE57]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Create a namespace for it to be used in, install it, and enable injection:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 为其创建一个命名空间并进行安装，同时启用注入：
- en: '[PRE58]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'We''ll now set some more environment variables to collect the IPs of our pilot,
    statsD, policy, and telemetry pods:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将设置更多的环境变量，以便收集 pilot、statsD、policy 和 telemetry pod 的 IP 地址：
- en: '[PRE59]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'We can now generate a manifest for our remote cluster, `cluster-2`:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以为我们的远程集群 `cluster-2` 生成一个清单：
- en: '[PRE60]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Now, we''ll instill the minimal Istio components and sidecar inject in our
    target, `cluster-2`. Run the following commands in order:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将在目标集群 `cluster-2` 上安装最小的 Istio 组件，并启用 sidecar 注入。按顺序运行以下命令：
- en: '[PRE61]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Now, we''ll create more scaffolding to take advantage of the features of Istio.
    We''ll need to create a file in which we can configure `kubeconfig` to work with
    Istio. First, change back into your home directory with `cd`. The `--minify` flag
    will ensure that you only see output associated with your current context. Now,
    enter the following groups of commands:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建更多的框架来利用 Istio 的功能。我们需要创建一个文件，以便配置 `kubeconfig` 与 Istio 一起使用。首先，使用 `cd`
    切换回主目录。`--minify` 标志将确保您仅看到与当前上下文相关的输出。现在，输入以下一组命令：
- en: '[PRE62]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Create a file with the following `cat` command. This will inject the contents
    here into a file that''s going to be located in `~/${WORK_DIR}/{CLUSTER_NAME}`:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下 `cat` 命令创建一个文件。这将把这里的内容注入到位于 `~/${WORK_DIR}/{CLUSTER_NAME}` 的文件中：
- en: '[PRE63]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Next up, we''ll create a secret so that the control plane for Istio that exists
    on `cluster-1` can access `istio-pilot` on `cluster-2`. Switch back to the first
    cluster, create a Secret, and label it:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个 secret，使得在 `cluster-1` 上的 Istio 控制平面可以访问 `cluster-2` 上的 `istio-pilot`。切换回第一个集群，创建一个
    Secret，并给它加上标签：
- en: '[PRE64]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Once we''ve completed these tasks, let''s use all of this machinery to deploy
    one of Google''s code examples, `bookinfo`, across both clusters. Run this on
    the first:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些任务后，让我们利用这些工具将 Google 的代码示例之一 `bookinfo` 部署到两个集群中。首先在第一个集群上运行：
- en: '[PRE65]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Now, create a file called `reviews-v3.yaml` for deploying `bookinfo` to the
    remote cluster. The file contents can be found in the repository directory of
    this chapter:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了将 `bookinfo` 部署到远程集群，创建一个名为 `reviews-v3.yaml` 的文件。文件内容可以在本章的代码库目录中找到：
- en: '[PRE66]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Let''s install this deployment on the remote cluster, `cluster-2`:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在远程集群 `cluster-2` 上安装这个部署：
- en: '[PRE67]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Once this is complete, you'll need to get access to the external IP of Istio's
    `isto-ingressgateway` service, in order to view the data in the `bookinfo` homepage.
    You can run this command to open that up. You'll need to reload that page dozens
    of times in order to see Istio's load balancing take place. You can hold down
    *F5* in order to reload the page many times.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，你需要获取Istio的`isto-ingressgateway`服务的外部IP，以便查看`bookinfo`主页上的数据。你可以运行此命令来打开它。你需要多次重新加载该页面才能看到Istio的负载均衡生效。你可以按住*F5*键来多次重新加载页面。
- en: You can access `http://<GATEWAY_IP>/productpage` in order to see the reviews.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以访问`http://<GATEWAY_IP>/productpage`来查看评论。
- en: Deleting the cluster
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除集群
- en: In order to clean up the control panel once you're finished, you can run the
    following commands.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在完成后清理控制面板，你可以运行以下命令。
- en: 'First, delete the firewall rules:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除防火墙规则：
- en: '[PRE68]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Next up, we''ll delete our cluster-admin-rolebinding:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将删除我们的`cluster-admin-rolebinding`：
- en: '[PRE69]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Lastly, let''s delete our GKE clusters:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们删除我们的GKE集群：
- en: '[PRE70]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'In the GUI, you can see the cluster being deleted:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在GUI中，你可以看到集群正在被删除：
- en: '![](img/3c3b43ff-8a9a-4df5-8b73-258bfb7efc2f.png)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3b43ff-8a9a-4df5-8b73-258bfb7efc2f.png)'
- en: 'You can also see it on the command line from your `watch` command:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过你的`watch`命令在命令行中看到它：
- en: '![](img/9386cfa0-813a-48cb-9388-3ca421e49b4c.png)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9386cfa0-813a-48cb-9388-3ca421e49b4c.png)'
- en: 'Run the same command with your other cluster. You can double-check the Compute
    Engine dashboard to ensure that your instances are being deleted:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 使用你的其他集群运行相同的命令。你可以再次检查计算引擎控制台，确保你的实例正在被删除：
- en: '![](img/69c71f3d-0ec2-4566-b846-3b237ae1f902.png)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
  zh: '![](img/69c71f3d-0ec2-4566-b846-3b237ae1f902.png)'
- en: Summary
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at the new federation capabilities in Kubernetes.
    We saw how we can deploy clusters to multiple cloud providers and manage them
    from a single control plane. We also deployed an application across clusters in
    both AWS and GCE. While these features are new and still mainly in alpha and beta,
    we should now have the skills to utilize them as they evolve and become part of
    the standard Kubernetes operating model.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了Kubernetes中的新联邦功能。我们看到了如何将集群部署到多个云提供商，并从单一的控制平面管理它们。我们还在AWS和GCE中跨集群部署了一个应用程序。尽管这些功能是新的，且主要还处于Alpha和Beta阶段，但我们现在应该具备利用它们的技能，随着它们的不断发展，它们将成为Kubernetes标准操作模型的一部分。
- en: 'In the next chapter, we will take a look at another advanced topic: security.
    We will cover the basics for secure containers and also how to secure your Kubernetes
    cluster. We will also look at the Secrets construct, which gives us the capability
    to store sensitive configuration data similar to our preceding `ConfigMap` example.'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨另一个高级话题：安全性。我们将介绍安全容器的基础知识以及如何保护你的Kubernetes集群。我们还将介绍Secrets构建块，它让我们能够存储敏感的配置数据，类似于我们之前的`ConfigMap`示例。
- en: Questions
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the main goal of federation?
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 联邦的主要目标是什么？
- en: What is the main advantage of using federation?
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用联邦的主要优势是什么？
- en: What are the building blocks of federation?
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 联邦的构建块是什么？
- en: What is the Kubernetes CLI command that controls federation?
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 控制联邦的Kubernetes CLI命令是什么？
- en: What are the two software components of Kubernetes federation?
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Kubernetes联邦的两个软件组件是什么？
- en: What is the main difference between HPAs and federated HPAs?
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: HPA和联邦HPA的主要区别是什么？
- en: What types of federated resources are available?
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有哪些类型的联邦资源？
- en: Further reading
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: If you'd like more information on mastering Kubernetes, check out another excellent
    Packt resource called *Mastering Kubernetes* ([https://www.packtpub.com/application-development/mastering-kubernetes-second-edition](https://www.packtpub.com/application-development/mastering-kubernetes-second-edition)).
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于掌握Kubernetes的信息，可以查看另一本优秀的Packt资源《*Mastering Kubernetes*》([https://www.packtpub.com/application-development/mastering-kubernetes-second-edition](https://www.packtpub.com/application-development/mastering-kubernetes-second-edition))。

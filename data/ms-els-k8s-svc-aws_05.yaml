- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Using Helm to Manage a Kubernetes Application
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Helm 管理 Kubernetes 应用程序
- en: In the previous chapter, we described how you can deploy a simple application
    using kubectl and a standard Kubernetes manifest. The challenge with using this
    approach is the manifest files are fixed. If you wanted to change the tag for
    a web server in a manifest for different environments (development, test, production,
    etc.) you would need to have multiple manifests or alter the manifest content
    every time you deploy it.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们描述了如何使用 kubectl 和标准 Kubernetes 清单部署简单应用程序。使用这种方法的挑战在于，清单文件是固定的。如果您想在不同环境（开发、测试、生产等）中更改
    Web 服务器的标签，您需要有多个清单文件，或者每次部署时都需要修改清单内容。
- en: 'In this chapter, we introduce **Helm**, a tool that can be used to define,
    install, and upgrade complex applications and allows you to easily customize deployments
    for different environments. Specifically, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍 **Helm**，这是一款可以用于定义、安装和升级复杂应用程序的工具，能够轻松地为不同环境自定义部署。具体来说，我们将覆盖以下主题：
- en: Understanding Helm and its architecture
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 Helm 及其架构
- en: Installing the Helm binary
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Helm 二进制文件
- en: Deploying a sample Kubernetes application with Helm
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Helm 部署示例 Kubernetes 应用程序
- en: Creating, deploying, updating, and rolling back a Helm chart
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建、部署、更新和回滚 Helm 图表
- en: Deleting an application via Helm
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 Helm 删除应用程序
- en: Deploying a Helm chart with Lens
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Lens 部署 Helm 图表
- en: Important note
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: Helm is an abstraction on top of Kubernetes, and, as such, there is no difference
    between using Helm on EKS or another Kubernetes distribution or Deployment. We
    will focus on the basic functionality of Helm in this chapter. More advanced operations/configurations
    can be found by following the link in the *Further* *reading* section.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Helm 是 Kubernetes 上的一个抽象工具，因此在 EKS 或其他 Kubernetes 发行版或部署中使用 Helm 没有区别。本章将重点介绍
    Helm 的基本功能。更多高级操作/配置可以在 *进一步* *阅读* 部分找到链接。
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Before starting this chapter, please ensure that the following is in place:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始本章之前，请确保以下事项已完成：
- en: You have a working EKS cluster and are able to perform administrative tasks
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您有一个正常工作的 EKS 集群，并能够执行管理任务
- en: kubectl is installed and properly configured on your workstation
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的工作站上已安装并正确配置了 kubectl
- en: You have network connectivity to your EKS API endpoint
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您已连接到 EKS API 端点
- en: You are familiar with YAML, basic networking, and EKS architecture
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您熟悉 YAML、基础网络和 EKS 架构
- en: Understanding Helm and its architecture
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Helm 及其架构
- en: As we saw in the previous chapters, Kubernetes YAML templates are fine for simple
    applications. However, as you try and cope with complex applications where you
    have multiple components, several dependencies between these components, and the
    need to deploy and update these components frequently using techniques such as
    blue/green deployments, you need something more; you need a package manager.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前几章中看到的，Kubernetes 的 YAML 模板适用于简单的应用程序。然而，当您面对多组件的复杂应用程序时，这些组件之间有多个依赖关系，并且需要频繁地使用如蓝绿部署等技术来部署和更新这些组件时，您需要更多的东西；您需要一个包管理工具。
- en: Package management is not a new idea; you can see a similar concept and critical
    software package management tools in software such as APT/YUM on Linux, Homebrew
    on Mac, or Chocolatey on Windows. Similarly, Helm can be considered the package
    management tool for Kubernetes.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 包管理不是一个新概念；您可以在 Linux 上的 APT/YUM、Mac 上的 Homebrew 或 Windows 上的 Chocolatey 等软件中看到类似的概念和关键的软件包管理工具。同样，Helm
    可以被视为 Kubernetes 的包管理工具。
- en: 'Helm is composed of the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Helm 由以下组件组成：
- en: '**Charts**: A package of pre-configured Kubernetes resources'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**图表**：一包预配置的 Kubernetes 资源'
- en: '**Releases**: A specific instance of a chart that has been deployed to the
    cluster using Helm'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发布**：使用 Helm 部署到集群中的图表的特定实例'
- en: '**Repositories**: A group of published charts that can be made available to
    others'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仓库**：一组已发布的图表，可以提供给其他人使用'
- en: '**Helm binary**: A tool used to deploy a chart/release'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Helm 二进制文件**：用于部署图表/发布的工具'
- en: In the next few sections, we will explore these components in more detail.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几节中，我们将更详细地探讨这些组件。
- en: The benefit of Helm
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Helm 的优点
- en: The primary benefit of using Helm is to simplify the way Kubernetes resources
    are created and deployed. Helm allows developers to adopt a **don’t repeat yourself**(**DRY**)
    approach, allows default attributes to be set but still allows them to be modified
    (overridden) to support different use cases or environments.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Helm 的主要好处是简化 Kubernetes 资源的创建和部署方式。Helm 允许开发者采用 **不要重复自己**（**DRY**）的方法，允许设置默认属性，但仍然允许根据不同的用例或环境进行修改（覆盖）。
- en: Developers also can easily share the template through a *Helm Chart Repository*.
    For example, if you want to install Prometheus (an open source monitoring system
    on Kubernetes) in development, you can manually create the manifests, specify
    the standard images, set up any supporting resources – such as ingress, deployment,
    and service – configure any environment variables, and repeat the process for
    production.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者还可以通过 *Helm Chart 仓库* 轻松分享模板。例如，如果你想在开发环境中安装 Prometheus（一个在 Kubernetes 上的开源监控系统），你可以手动创建清单，指定标准镜像，设置任何支持资源——如
    ingress、deployment 和 service——配置任何环境变量，并为生产环境重复此过程。
- en: 'Instead of all this work, you can simply add the Helm Chart Repository for
    Prometheus using the following commands and then deploy it:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过以下命令简单地添加 Prometheus 的 Helm Chart 仓库，然后进行部署，避免了所有这些复杂的工作：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: There are some alternatives to Helm, namely Kustomize ([https://kustomize.io/](https://kustomize.io/)),
    which builds on layers of YAML while also creating a custom operator for your
    application to manage its life cycle; an example of this is the Kafka operator.
    Helm, however, remains the simplest way to customize and deploy applications.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Helm 也有一些替代方案，譬如 Kustomize（[https://kustomize.io/](https://kustomize.io/)），它在
    YAML 层上构建，并为你的应用程序创建一个自定义操作符来管理其生命周期；例如，Kafka 操作符。然而，Helm 仍然是定制和部署应用程序的最简单方法。
- en: Getting to know Helm charts
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解 Helm charts
- en: 'The basic configuration item in Helm is the chart. A template that consists
    of a Kubernetes application that is used by Helm, is called a `$ helm create <mychartname>`
    command to create this structure:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Helm 的基本配置项是 chart。一个包含 Kubernetes 应用程序的模板，可以通过 `$ helm create <mychartname>`
    命令创建该结构：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let''s look at each of the components of a chart:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下 chart 的每个组件：
- en: The `.helmignore` file works like a `.gitignore` file and specifies files or
    directories to be ignored by the Helm command.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.helmignore` 文件类似于 `.gitignore` 文件，用于指定 Helm 命令应忽略的文件或目录。'
- en: The `Chart.yaml` file holds metadata about the chart you are packaging, such
    as your version of the chart itself.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Chart.yaml` 文件包含有关你正在打包的 chart 的元数据，例如你自己的 chart 版本。'
- en: The `values.yaml` file stores any values used for the deployment. You will normally
    see one file, the default values, but multiple value files can be used for different
    environments.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`values.yaml` 文件存储用于部署的任何值。你通常会看到一个文件，默认值，但也可以使用多个值文件来适应不同的环境。'
- en: The `charts` directory is used to store other charts that your chart may depend
    on.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`charts` 目录用于存储你的 chart 可能依赖的其他 charts。'
- en: The `templates` directory holds the actual manifest you have created to support
    the deployment of your application. This may consist of multiple YAML files to
    deploy pods, config maps, secrets, and so on.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`templates` 目录包含你为支持应用程序部署所创建的实际清单。它可能包含多个 YAML 文件，用于部署 pod、配置映射、秘密等。'
- en: 'Values are transposed into the chart using the `{{ define }}` directive, which
    means the templates are significantly more flexible than standard Kubernetes manifests.
    What follows is an example of Helm manifest that shows a resource, in this case,
    a ConfigMap can be modified:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 值通过 `{{ define }}` 指令转入 chart 中，这意味着模板比标准的 Kubernetes 清单更灵活。以下是一个 Helm 清单的示例，展示了资源（在这个例子中是
    ConfigMap）如何被修改：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this example, the name of the ConfigMap will be a combination of `Release.Name`
    and the `-configmap` string. For example, if your chart name is *CM1*, the resulting
    ConfigMap will be named `CM1-configmap`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，ConfigMap 的名称将是 `Release.Name` 和 `-configmap` 字符串的组合。例如，如果你的 chart 名称是
    *CM1*，那么生成的 ConfigMap 将被命名为 `CM1-configmap`。
- en: Now that we have discussed the basic configuration, let’s look at how we actually
    install and use Helm.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经讨论了基本配置，让我们来看看如何实际安装和使用 Helm。
- en: Installing the Helm binary
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Helm 二进制文件
- en: 'Helm can be easily installed and can be compliable with many different operating
    systems. You can refer to the following instruction to set up Helm on your system:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Helm 可以轻松安装，并且能够与许多不同的操作系统兼容。你可以参考以下说明在系统中设置 Helm：
- en: '[https://helm.sh/docs/intro/install/](https://helm.sh/docs/intro/install/)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://helm.sh/docs/intro/install/](https://helm.sh/docs/intro/install/)'
- en: You must configure kubectl to work for Amazon EKS. If you have not already done
    this, please refer to [*Chapter 3*](B18129_03.xhtml#_idTextAnchor047), *Building
    Your First EKS Cluster*, to help you configure kubectl properly.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须配置kubectl以便与Amazon EKS一起使用。如果您还没有这样做，请参考[*第3章*](B18129_03.xhtml#_idTextAnchor047)，*构建您的第一个EKS集群*，以帮助您正确配置kubectl。
- en: 'On Linux, you can use the following command to download and install the Helm
    binary:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux上，您可以使用以下命令下载并安装Helm二进制文件：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: At the time of writing this book, Helm 3.9.x had some issues using the AWS authenticator
    plugin, so v3.8.2 is used. You will need to make sure that the `/usr/local/bin/`
    directory is in your `PATH`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写本书时，Helm 3.9.x存在使用AWS身份验证插件的一些问题，因此使用v3.8.2版本。您需要确保`/usr/local/bin/`目录在您的`PATH`中。
- en: Deploying a sample Kubernetes application with Helm
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Helm部署示例Kubernetes应用程序
- en: 'In the previous chapter, we deployed the NGINX ingress controller using the
    following command:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们使用以下命令部署了NGINX入口控制器：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If we want to install it using Helm, we need to perform the following tasks:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想使用Helm安装它，需要执行以下任务：
- en: 'Add the public stable repository to your Helm configuration:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将公共稳定仓库添加到您的Helm配置中：
- en: '[PRE5]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Refresh the repository information:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 刷新仓库信息：
- en: '[PRE6]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We can then show the charts in the repository:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们可以显示仓库中的图表：
- en: '[PRE7]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'One of the charts will be `nginx-ingress`, which can be installed using the
    following command:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 其中一个图表是`nginx-ingress`，可以使用以下命令进行安装：
- en: '[PRE8]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The chart release can be viewed using either of these commands:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 图表发布可以使用以下任意命令查看：
- en: '[PRE9]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You can also view the Kubernetes resources using the following command:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以使用以下命令查看Kubernetes资源：
- en: '[PRE10]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Let’s look at how we create a new Helm chart from scratch.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何从头开始创建一个新的Helm图表。
- en: Creating, deploying, updating, and rolling back a Helm chart
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建、部署、更新和回滚Helm图表
- en: 'As you can see from the previous example, deploying pre-packaged applications
    with Helm is pretty simple. Deploying your own application is also easy. We start
    with the following command, which will create a directory in your current directory
    called `myhelmchart` and populate it with the relevant files and templates:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从前面的示例中看到的，使用Helm部署预打包的应用程序非常简单。部署您自己的应用程序也很容易。我们从以下命令开始，这将会在您当前的目录下创建一个名为`myhelmchart`的目录，并填充相关文件和模板：
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'By default, the `values.yaml` file created by this command contains references
    to a single NGINX pod and creates a `ClusterIP` service, which is only accessible
    from within the cluster. The key values from the default file are shown next:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，由此命令创建的`values.yaml`文件包含对单个NGINX Pod的引用，并创建一个仅在集群内可访问的`ClusterIP`服务。默认文件中的关键值如下所示：
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We can easily deploy this new Helm chart using the following command:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令轻松部署这个新的Helm图表：
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This will override the `service.type` value seen in the `values.yaml` file
    with a `NodePort` service, so it is now exposed outside of the cluster. We can
    then validate the chart deployment with the following command and see the name
    of the `NodePort` service that was created, along with the other Kubernetes resources:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这将覆盖`values.yaml`文件中看到的`service.type`值，并设置为`NodePort`服务，因此它现在会暴露在集群外部。然后我们可以使用以下命令验证图表部署，并查看创建的`NodePort`服务的名称以及其他Kubernetes资源：
- en: '[PRE14]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If you run the following command using the service name from the previous step,
    you will be able to extract the IP address and port of the service and curl the
    `NodePort` service:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用前一步中的服务名称运行以下命令，您将能够提取服务的IP地址和端口，并通过curl访问`NodePort`服务：
- en: '[PRE15]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To update the Helm deployment, we are going to perform the following steps:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要更新Helm部署，我们将执行以下步骤：
- en: Modify the `values.yaml` file and increase `replicaCount:` to `2`. We can also
    change the `service.type` value to `NodePort`.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`values.yaml`文件，并将`replicaCount:`增加到`2`。我们还可以将`service.type`的值更改为`NodePort`。
- en: Modify the `Chart.yaml` file and update `version` to `0.2.0`.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`Chart.yaml`文件，并将`version`更新为`0.2.0`。
- en: 'Validate the changes:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证更改：
- en: '[PRE16]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then roll out the changes:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后推出更改：
- en: '[PRE17]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We can then validate the deployment:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们可以验证部署：
- en: '[PRE18]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You will notice the revision number shown next when you run the preceding command:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行前面的命令时，您会注意到下一个显示的修订版本号：
- en: '[PRE19]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We can also validate that two Pods exist for the Deployment:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以验证是否存在两个Pod用于该部署：
- en: '[PRE20]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: You can easily roll back to a previous revision using the `helm rollback example
    1` command, where `1` represents the revision you want to return to. This is one
    of the major advantages of Helm over basic Kubernetes manifests, each change to
    the manifest can be versioned and deployed as a new revision, and if issues occur,
    you can easily roll back to a previous version/revision.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`helm rollback example 1`命令轻松回滚到先前的版本，其中`1`表示你想要回滚的版本。这是Helm相较于基础Kubernetes清单的主要优势之一，每次对清单的更改都可以被版本化并作为新的版本进行部署，如果发生问题，你可以轻松回滚到先前的版本/修订。
- en: The `helm list` command can show all the revisions in the cluster, which are
    stored as Kubernetes Secrets in the namespace where the release is deployed. Next,
    let’s look at how we remove our Helm application.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`helm list`命令可以显示集群中所有的版本，这些版本作为Kubernetes Secrets存储在发布部署的命名空间中。接下来，我们来看看如何移除我们的Helm应用程序。'
- en: Deleting an application via the Helm command
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过Helm命令删除应用程序
- en: 'Helm provides a simple `uninstall` command to delete the application release.
    The first step is to determine which Helm deployment you want to remove using
    the `helm` `list` command:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Helm提供了一个简单的`uninstall`命令来删除应用程序发布。第一步是使用`helm list`命令确定要删除的Helm部署：
- en: '[PRE21]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In this example, we want to remove the example deployment, so we can simply
    run the `$ helm uninstall example` command and all the resources created by the
    chart or charts will be removed.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们要删除示例部署，因此我们可以简单地运行`$ helm uninstall example`命令，所有由Chart或Charts创建的资源将被删除。
- en: Important note
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: This will remove all deployment history as well. Please also make sure you have
    removed all the Helm charts using the `$ helm` `uninstall` command.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这也会删除所有的部署历史。请确保你已经使用`$ helm uninstall`命令删除了所有Helm Chart。
- en: In this section, we reviewed using the Helm binary to deploy public charts and
    create, update, roll back, and delete your own charts. In the next section, we
    will show you how to use Lens to deploy charts.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一节中，我们回顾了使用Helm二进制文件来部署公共Chart，以及创建、更新、回滚和删除自己的Chart。在下一节中，我们将展示如何使用Lens来部署Chart。
- en: Deploying a Helm chart with Lens
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Lens部署Helm Chart
- en: In the previous chapter, we discussed how to visualize your Kubernetes resources
    using Lens. However, you can also use Lens to manage Helm charts. Please refer
    to [*Chapter 4*](B18129_04.xhtml#_idTextAnchor067), *Running Your First Application
    on EKS* (the *Visualizing your workloads* section), for guidance on the setup
    of Lens.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们讨论了如何使用Lens可视化Kubernetes资源。然而，你也可以使用Lens来管理Helm Chart。请参考[*第4章*](B18129_04.xhtml#_idTextAnchor067)，*在EKS上运行你的第一个应用程序*（*可视化你的工作负载*部分），获取关于Lens设置的指导。
- en: 'By default, Lens will fetch available Helm repositories from the public Artifact
    Hub ([https://artifacthub.io/](https://artifacthub.io/)) and Bitnami. As we are
    going to redeploy the NGINX ingress controller we deployed using the Helm **Command
    Line Interface** **(CLI)**, we need to add a custom repository. To do this, follow
    these steps while referring to *Figure 5**.1*:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Lens会从公共Artifact Hub（[https://artifacthub.io/](https://artifacthub.io/)）和Bitnami拉取可用的Helm仓库。由于我们将重新部署通过Helm
    **命令行接口**（**CLI**）部署的NGINX Ingress Controller，我们需要添加一个自定义仓库。为此，请参照*图5.1*，按照以下步骤操作：
- en: Choose **Lens** | **Preferences** from the main toolbar.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从主工具栏中选择**Lens** | **首选项**。
- en: Then select **Kubernetes**.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后选择**Kubernetes**。
- en: Select **Add custom Helm Repo** from the Kubernetes panel.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Kubernetes面板中选择**添加自定义Helm仓库**。
- en: 'This will display a pop-up box, which works in the same way as the `helm repo
    add` command. Here, we are going to add the NGINX repository we used in a previous
    example: [https://helm.nginx.com/stable](https://helm.nginx.com/stable).'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将显示一个弹出框，工作方式与`helm repo add`命令相同。在这里，我们将添加之前示例中使用的NGINX仓库：[https://helm.nginx.com/stable](https://helm.nginx.com/stable)。
- en: '![Figure 5.1 – Adding a custom Helm repository in Lens](img/B18129_05_01.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图5.1 – 在Lens中添加自定义Helm仓库](img/B18129_05_01.jpg)'
- en: Figure 5.1 – Adding a custom Helm repository in Lens
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.1 – 在Lens中添加自定义Helm仓库
- en: 'Once the repository has been added, we can now deploy charts from it. To do
    this, follow these steps while referring to *Figure 5**.2*:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦仓库被添加，我们现在可以从中部署Chart。为此，请按照以下步骤操作，并参照*图5.2*：
- en: Select your cluster.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择你的集群。
- en: Choose **Helm** | **Charts**. This will show all the charts available to you
    based on the repositories you’ve added.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Helm** | **Charts**。这将显示基于你所添加仓库的所有可用Chart。
- en: 'Filter out NGINX as we have done in the following screenshot, and you will
    see two NGINX ingress controller charts: one from Bitnami and the other from NGINX.'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如下图所示，过滤掉 NGINX，你将看到两个 NGINX Ingress 控制器图表：一个来自 Bitnami，另一个来自 NGINX。
- en: '![Figure 5.2 – Finding the required chart in Lens](img/B18129_05_02.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.2 – 在 Lens 中找到所需的图表](img/B18129_05_02.jpg)'
- en: Figure 5.2 – Finding the required chart in Lens
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.2 – 在 Lens 中找到所需的图表
- en: Click on the NGINX chart.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 NGINX 图表。
- en: 'This will bring up another panel where you must click on **Install**. Fill
    in the details (or leave them unchanged) and click **Install** again. The chart
    will be deployed, as shown in the following screenshot:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将弹出另一个面板，在那里你必须点击 **安装**。填写详情（或保持不变）并再次点击 **安装**。图表将被部署，如下图所示：
- en: '![Figure 5.3 – Installing a chart in Lens](img/B18129_05_03.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.3 – 在 Lens 中安装图表](img/B18129_05_03.jpg)'
- en: Figure 5.3 – Installing a chart in Lens
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.3 – 在 Lens 中安装图表
- en: 'You can now click on the **Releases** tab, and you will see all the deployed
    Helm charts. In the following example, we only have the NGINX ingress controller
    deployed. From the **Releases** tab, you can also upgrade and delete the release
    by clicking on the three dots (the kebab menu) on the right of the chart:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你可以点击 **发布** 标签，看到所有已部署的 Helm 图表。在以下示例中，我们只部署了 NGINX Ingress 控制器。从 **发布**
    标签中，你还可以通过点击图表右侧的三个点（即 kebab 菜单）来升级或删除发布。
- en: '![Figure 5.4 – Viewing Releases in Lens](img/B18129_05_04.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.4 – 在 Lens 中查看发布](img/B18129_05_04.jpg)'
- en: Figure 5.4 – Viewing Releases in Lens
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.4 – 在 Lens 中查看发布
- en: As you can see, Lens performs the same functions that the Helm binary does but
    just provides it in a graphical view. As discussed in the previous chapter, Lens
    also allows you to review the running workloads, something we had to do with Kubectl.
    Hence, Lens helps bring together these tools, but it is still recommended that
    you know how to use both Kubectl and Helm if you’re going to work with multiple
    clusters in production.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，Lens 执行与 Helm 二进制文件相同的功能，只是以图形化视图呈现。正如前一章所讨论的，Lens 还允许你查看正在运行的工作负载，而这在过去我们需要使用
    Kubectl 来完成。因此，Lens 帮助将这些工具整合在一起，但如果你要在生产环境中使用多个集群，仍然推荐你了解如何使用 Kubectl 和 Helm。
- en: Summary
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to use Helm to accelerate application deployment
    on Kubernetes and improve the efficiency of template creation. This included how
    to install the Helm CLI and use it to deploy applications (charts) hosted in a
    public repository. We then created our own chart, customized it, deployed it,
    modified the configuration, deployed the new revision, rolled back to a previous
    revision, and finally deleted it from our cluster.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用 Helm 加速 Kubernetes 上的应用部署，并提高模板创建的效率。这包括如何安装 Helm CLI，并使用它部署托管在公共仓库中的应用（图表）。接着我们创建了自己的图表，进行了自定义，部署，修改配置，部署新版本，回滚到以前的版本，最后从集群中删除它。
- en: We then discussed how we could perform similar activities using a third-party
    tool, Lens, and how it achieves the same things but provides a graphical user
    interface while also integrating multiple views such as Kubernetes resources (kubectl)
    and Helm releases.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 接着我们讨论了如何使用第三方工具 Lens 执行类似的操作，以及它如何实现相同的功能，同时提供图形用户界面，并集成了多个视图，如 Kubernetes
    资源（kubectl）和 Helm 发布。
- en: In the next chapter, we will look deeper into how you access and secure your
    EKS cluster, focusing on how you access the EKS cluster endpoints and authenticate
    users.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将更深入地了解如何访问和保护 EKS 集群，重点讲解如何访问 EKS 集群端点并进行用户身份验证。
- en: Further reading
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入阅读
- en: 'An example operator: [https://docs.confluent.io/5.5.1/installation/operator/index.html](https://docs.confluent.io/5.5.1/installation/operator/index.html)'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例操作员：[https://docs.confluent.io/5.5.1/installation/operator/index.html](https://docs.confluent.io/5.5.1/installation/operator/index.html)
- en: 'Understanding Helm in more detail: [https://helm.sh/docs/](https://helm.sh/docs/)'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更详细地了解 Helm：[https://helm.sh/docs/](https://helm.sh/docs/)
- en: 'Part 2: Deep Dive into EKS'
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二部分：深入 EKS
- en: In this section, we will dive deeper into EKS and its various components. This
    part aims to demystify key aspects such as security, networking, and node groups,
    providing you with a comprehensive understanding of each feature. Finally, you
    will take away strategies regarding how to upgrade your EKS cluster version and
    follow the upstream Kubernetes release cadence.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将深入探讨 EKS 及其各种组件。本部分旨在揭开安全性、网络和节点组等关键方面的神秘面纱，帮助你全面理解每个功能。最后，你将学到如何升级
    EKS 集群版本，并跟随上游 Kubernetes 发布节奏的策略。
- en: 'This part contains the following topics:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包含以下主题：
- en: '[*Chapter 6*](B18129_06.xhtml#_idTextAnchor095), *Securing and Accessing Clusters
    on EKS*'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第6章*](B18129_06.xhtml#_idTextAnchor095)，*在EKS上保护和访问集群*'
- en: '[*Chapter 7*](B18129_07.xhtml#_idTextAnchor107), *Networking in EKS*'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第7章*](B18129_07.xhtml#_idTextAnchor107)，*EKS中的网络配置*'
- en: '[*Chapter 8*](B18129_08.xhtml#_idTextAnchor123), *Managing Worker Nodes on
    EKS*'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第8章*](B18129_08.xhtml#_idTextAnchor123)，*在EKS上管理工作节点*'
- en: '[*Chapter 9*](B18129_09.xhtml#_idTextAnchor135), *Advanced Networking with
    EKS*'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第9章*](B18129_09.xhtml#_idTextAnchor135)，*EKS中的高级网络配置*'
- en: '[*Chapter 10*](B18129_10.xhtml#_idTextAnchor146), *Upgrading EKS Clusters*'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第10章*](B18129_10.xhtml#_idTextAnchor146)，*升级EKS集群*'

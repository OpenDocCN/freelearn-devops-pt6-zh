- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Overview of CNCF and Kubernetes Certifications
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CNCF和Kubernetes认证概览
- en: In this chapter, you’ll learn about **Cloud Native Computing Foundation** (**CNCF**)
    and its parent organization – the **Linux Foundation**. We will learn what is
    behind those foundations, how they appeared, and which projects are curated in
    their ecosystems. We will also talk about the CNCF community, governance, cloud
    roles, and the Kubernetes certification path.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你将了解**云原生计算基金会**（**CNCF**）及其母组织——**Linux基金会**。我们将了解这些基金会背后的内容，它们是如何出现的，以及它们的生态系统中托管了哪些项目。我们还将讨论CNCF社区、治理结构、云角色以及Kubernetes认证路径。
- en: While this is one of the least technical chapters of this book, the content
    you’ll learn about makes up about half of the Cloud Native Architecture domain
    topics from the KCNA certification, so make sure that you answer all the recap
    questions at the end of this chapter.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这是本书中技术性最弱的一章，但你将在此学到的内容涵盖了KCNA认证中的大约一半云原生架构领域的知识点，所以确保你在本章结束时回答所有的复习问题。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将涵盖以下主题：
- en: OSS and open standards
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开源软件（OSS）和开放标准
- en: Linux and CNCF
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux和CNCF
- en: CNCF community and governance
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CNCF社区与治理结构
- en: Cloud roles and personas
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云角色与人物画像
- en: Kubernetes certification path
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes认证路径
- en: Let’s get to it!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: OSS and open standards
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开源软件和开放标准
- en: If you have ever worked in any IT position, there is a high chance that you’ve
    come across the term **open source software** (**OSS**), know what it means, and
    very likely already used some.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经从事过任何IT职位，那么你很有可能接触过**开源软件**（**OSS**）这一术语，了解它的含义，并且很可能已经使用过其中的一些软件。
- en: What is OSS?
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是开源软件（OSS）？
- en: OSS is when the source code of the software is publicly accessible and anyone
    can study, modify, and distribute it for any purpose.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 开源软件是指软件的源代码是公开可访问的，任何人都可以研究、修改并用于任何目的。
- en: Software cannot be considered open source simply because it can easily be found
    on the internet or can be downloaded from the *darknet*. Software is open source
    when it is released under one of the open source licenses, such as Apache 2.0
    or GNU General Public License v3\. Those licenses grant users the right to make
    modifications to the source code or even use it for commercial purposes. That’s
    right – you can use OSS to build new software and sell it without paying any license
    fees to anyone. Alternatively, you can modify existing OSS, add new features,
    and sell it or offer related support services.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 软件不能仅仅因为它可以在互联网上轻松找到或可以从*暗网*下载而被视为开源软件。软件被视为开源，当它是根据某种开源许可证发布的，比如Apache 2.0或GNU通用公共许可证v3。那些许可证赋予用户修改源代码的权利，甚至可以将其用于商业用途。没错——你可以使用开源软件来构建新的软件并出售，而无需向任何人支付许可费用。或者，你也可以修改现有的开源软件，增加新特性，并将其出售或提供相关的支持服务。
- en: While the history of OSS goes back to the early days of computing, it was at
    the beginning of the 90s when one of the most successful OSS was created. Yes,
    you’ve guessed it – we are talking about Linux.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然开源软件的历史可以追溯到计算机早期的日子，但真正诞生其中最成功的开源软件是在90年代初。没错，你猜对了——我们在谈论的是Linux。
- en: The Linux kernel, which was started in 1991 by *Linus Torvalds*, is one of the
    most prominent examples of open source. For three decades, the project has attracted
    volunteer and enthusiast programmers willing to contribute for no compensation
    at all. At the time of writing, more than 15,000 people have contributed their
    time, skills, and effort to create a core operating system that powers 100% of
    the world’s supercomputers and about 95% of the world’s servers.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Linux内核是1991年由*Linus Torvalds*启动的开源项目中最著名的例子之一。三十年来，该项目吸引了大量志愿者和热心的程序员，他们愿意无偿贡献自己的时间、技能和精力。截至写作时，已经有超过15,000人贡献了他们的时间、技能和努力，共同打造了一个核心操作系统，这个操作系统支持了全球100%的超级计算机和大约95%的世界服务器。
- en: There are plenty of successful open source projects – Kubernetes, OpenStack,
    Terraform, Ansible, Prometheus, and Django are all open source. Even companies
    with huge engineering resources such as Google realize the power of open source
    communities and how much the open source ecosystem can boost a project. This is
    what happened with Kubernetes.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多成功的开源项目——Kubernetes、OpenStack、Terraform、Ansible、Prometheus和Django都是开源的。即使是像谷歌这样拥有强大工程资源的公司，也意识到了开源社区的力量，以及开源生态系统如何推动项目发展。这正是Kubernetes项目的经历。
- en: Kubernetes has attracted many passionate engineers since the early days and
    became the first project incubated at CNCF. But before we move on and learn more
    about CNCF, let’s touch on another important topic – open standards.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 自Kubernetes早期以来，已经吸引了众多热情的工程师，并成为CNCF孵化的第一个项目。但在我们继续学习CNCF的更多内容之前，让我们讨论另一个重要话题——开放标准。
- en: Open standards
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开放标准
- en: In 2015, along with the establishment of CNCF, another important event occurred
    – the **Open Container Initiative** (**OCI**) was started.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 2015年，随着CNCF的成立，另一个重要事件发生了——**开放容器倡议**（**OCI**）开始启动。
- en: OCI
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: OCI
- en: OCI is an open governance structure whose purpose is to define open industry
    standards around container formats and runtimes.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: OCI 是一个开放的治理结构，旨在定义围绕容器格式和运行时的开放行业标准。
- en: OCI has a technical community within which industry participants may contribute
    to building container specifications that are vendor-neutral, portable, and open.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: OCI 拥有一个技术社区，行业参与者可以在其中贡献，帮助构建中立、可移植且开放的容器规范。
- en: It also provides reference implementations and tools that deliver on the promise
    of containers for application portability. Those standards allow us to avoid vendor
    lock-ins (when a customer is forced to continue using a product or service because
    it is hard to switch to another vendor) and help ensure that different projects
    integrate and work well together. For example, as we learned in the previous chapter,
    container runtimes are not part of Kubernetes, so we need to make sure that different
    container runtimes and Kubernetes are fully compatible.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 它还提供了参考实现和工具，兑现容器在应用程序可移植性方面的承诺。这些标准帮助我们避免了供应商锁定（当客户被迫继续使用某个产品或服务，因为很难切换到其他供应商时）并帮助确保不同的项目可以顺利集成与协作。例如，正如我们在上一章所学，容器运行时并不属于Kubernetes的一部分，因此我们需要确保不同的容器运行时与Kubernetes完全兼容。
- en: 'At the time of writing, OCI provides three important specifications for the
    container ecosystem:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，OCI为容器生态系统提供了三个重要的规范：
- en: '**Image specification** (image-spec) defines how to build and package an application
    into an OCI-compliant container image'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**镜像规范**（image-spec）定义了如何构建和打包应用程序为符合OCI标准的容器镜像'
- en: '**Runtime specification** (runtime-spec) defines the container life cycle and
    execution environment'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行时规范**（runtime-spec）定义了容器的生命周期和执行环境'
- en: '**Distribution specification** (distribution-spec) defines the protocol to
    facilitate and standardize the distribution of container images using so-called
    registries'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分发规范**（distribution-spec）定义了通过所谓的注册表促进和标准化容器镜像分发的协议'
- en: So, why are the OCI standards important?
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，OCI标准为什么如此重要？
- en: Let’s look at a simple analogy regarding transportation. Imagine that each car
    manufacturer has a way of attaching the wheels to the axle. Wheel manufacturers
    would have a hard time creating rims for each make and model if they haven’t been
    standardized. But since everybody agreed to have certain wheel sizing parameters
    such as the width, diameter, number of bolt holes, and so on, it makes it possible
    for manufacturers to produce wheels that can fit any car model on the market.
    So, you can buy wheels based on your car’s specifications and be confident that
    they fit your car.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个简单的交通运输类比。假设每个汽车制造商都有自己固定车轮与车轴连接的方法。如果轮胎制造商没有进行标准化，他们会很难为每个品牌和型号生产车轮。但由于大家都同意采用特定的车轮尺寸参数，如宽度、直径、螺栓孔数量等，这使得制造商能够生产适配任何市场上汽车型号的车轮。因此，你可以根据汽车的规格购买车轮，并且有信心它们能够匹配你的车。
- en: Similar to containers, we have image, runtime, and distribution standards that
    allow anyone to develop 100% compatible software. The establishment of OCI standards
    has allowed further expansion of the container ecosystem with the new software.
    Before the OCI, there was only one way to build container images – using Docker.
    Today, there are projects such as **Kaniko**, **Podman**, **Buildah**, and others.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于容器，我们有镜像、运行时和分发标准，这些标准允许任何人开发100%兼容的软件。OCI标准的建立促进了容器生态系统的进一步扩展，带来了新的软件。在OCI出现之前，构建容器镜像只有一种方式——使用Docker。今天，我们有了像**Kaniko**、**Podman**、**Buildah**等项目。
- en: You don’t need to know the exact differences at this point – just remember that
    OCI has marked an important point in the evolution of containers and the container
    ecosystem by providing open specifications. In the upcoming chapters, we will
    dive into Docker and some aspects of the OCI standards.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，你不需要知道这些差异的具体细节——只需要记住，OCI 通过提供开放规范，标志着容器及其生态系统发展的一个重要节点。在接下来的章节中，我们将深入探讨
    Docker 和 OCI 标准的某些方面。
- en: According to OCI, it does not seek to be a marketing organization or define
    a full stack or solution requirements – it strives to avoid standardizing technical
    areas undergoing innovation and debate ([https://github.com/opencontainers/tob/blob/main/CHARTER.md](https://github.com/opencontainers/tob/blob/main/CHARTER.md)).
    The organization that helped establish OCI and still plays a major role in its
    initiative is the Linux Foundation. Like with many open source projects, volunteers
    work in the field and would like to contribute their time to bring the technologies
    to the next level or bridge the gaps between existing projects.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 OCI，它并不寻求成为一个营销组织，也不定义完整的技术栈或解决方案要求——它致力于避免标准化正在进行创新和讨论的技术领域（[https://github.com/opencontainers/tob/blob/main/CHARTER.md](https://github.com/opencontainers/tob/blob/main/CHARTER.md)）。帮助建立
    OCI 并在其倡议中仍然发挥重要作用的组织是 Linux 基金会。与许多开源项目一样，志愿者们在该领域工作，并希望贡献他们的时间，将技术推向下一个层次，或者弥合现有项目之间的差距。
- en: We’ve already mentioned both CNCF and the Linux Foundation a few times here.
    Now, let’s get to know them better.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在这里提到过 CNCF 和 Linux 基金会几次。现在，让我们更深入了解它们。
- en: Linux and CNCF
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux 和 CNCF
- en: The Linux Foundation is a non-profit organization that appeared in 2000 as a
    merger between Open-Source Development Labs and the Free Standards Group. Foundation
    was initially created to standardize, promote, and support the adoption of Linux,
    but it has significantly expanded its role in the open source community since
    then.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 基金会是一个非营利组织，成立于 2000 年，源于开放源码开发实验室与自由标准组织的合并。基金会最初是为了标准化、推广和支持 Linux 的采纳而创建的，但自那时以来，它在开源社区中的作用已大大扩展。
- en: Today, the supporting members of the Linux Foundation include many of the Fortune500
    companies such as Google, IBM, Samsung, Meta, and more. Foundation hosts many
    projects besides the Linux kernel. These include **Automotive Grade Linux**, **Ceph**
    (storage), **XEN** (hypervisor), **Real-Time Linux**, the **OpenAPI Initiative**
    (**OAI**), and many others. Don’t worry if you never heard of these projects before
    – you won’t be questioned about them during the exam.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，Linux 基金会的支持成员包括许多《财富》500 强公司，如谷歌、IBM、三星、Meta 等。基金会除了 Linux 内核外，还主持许多项目。这些项目包括
    **汽车级 Linux**、**Ceph**（存储）、**XEN**（虚拟机监控器）、**实时 Linux**、**OpenAPI Initiative**（**OAI**）等。即使你之前从未听说过这些项目，也不必担心——你在考试中不会被问到这些内容。
- en: In recent years, the Linux Foundation has expanded its programs through conferences,
    certifications, training, and new initiatives. One such initiative is the **Cloud
    Native Computing Foundation** (**CNCF**), which was launched in 2015.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，Linux 基金会通过会议、认证、培训和新计划扩展了其项目。其中一个计划是 **云原生计算基金会**（**CNCF**），该基金会于 2015
    年成立。
- en: CNCF
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CNCF
- en: 'July 21, 2015, became a remarkable date for the whole open source community
    – Kubernetes 1.0 was released. Along with its release, Google, as the key driving
    force and contributor behind K8s, partnered with the Linux Foundation to form
    CNCF. Kubernetes became the seed technology and the first incubating project of
    the new foundation. CNCF’s mission was to advance container and cloud-native technologies
    and align the industry ([https://www.cncf.io/about/who-we-are/](https://www.cncf.io/about/who-we-are/)):'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 2015年7月21日成为整个开源社区的一个重要日期——Kubernetes 1.0 发布了。随着发布，作为 K8s 背后的关键推动力和贡献者，谷歌与 Linux
    基金会合作，成立了 CNCF。Kubernetes 成为了新基金会的种子技术和第一个孵化项目。CNCF 的使命是推动容器和云原生技术的发展，并与行业对接（[https://www.cncf.io/about/who-we-are/](https://www.cncf.io/about/who-we-are/))：
- en: “The Foundation’s mission is to make cloud-native computing ubiquitous.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: “基金会的使命是让云原生计算普及。”
- en: Cloud-native technologies empower organizations to build and run scalable applications
    in modern, dynamic environments such as public, private, and hybrid clouds. Containers,
    service meshes, microservices, immutable infrastructure, and declarative APIs
    exemplify this approach.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 云原生技术使组织能够在现代动态环境中构建和运行可扩展的应用程序，如公共云、私有云和混合云。容器、服务网格、微服务、不变基础设施和声明式 API 就是这种方法的典型例子。
- en: These techniques enable loosely coupled systems that are resilient, manageable,
    and observable. Combined with robust automation, they allow engineers to make
    high-impact changes frequently and predictably with minimal toil.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这些技术使得松耦合系统变得更具弹性、可管理和可观察。结合强大的自动化，它们使工程师能够频繁且可预测地进行高影响力的变更，同时最小化工作量。
- en: The Cloud Native Computing Foundation seeks to drive the adoption of this paradigm
    by fostering and sustaining an ecosystem of open source, vendor-neutral projects.
    We democratize state-of-the-art patterns to make these innovations accessible
    for everyone.”
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 云原生计算基金会通过培育和维持一个开源、供应商中立的项目生态系统，推动这一范式的采纳。我们将最先进的模式民主化，使这些创新对每个人都可访问。”
- en: We touched on the basics of cloud computing, containers, and microservices in
    [*Chapter 1*](B18970_01.xhtml#_idTextAnchor015), *From Cloud to Cloud Native and
    Kubernetes*, and will dive deeper into those and other topics mentioned in the
    CNCF mission statement in the following chapters.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[*第1章*](B18970_01.xhtml#_idTextAnchor015)《从云到云原生与Kubernetes》中讲解了云计算、容器和微服务的基础知识，接下来的章节将深入探讨这些以及CNCF使命声明中提到的其他话题。
- en: Today, CNCF is supported by more than 450 members and plays a major role in
    the cloud-native ecosystem. It provides governance and supports open source projects
    to make them mature and ensure they’re in a production-ready state.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，CNCF得到了超过450个成员的支持，并在云原生生态系统中发挥着重要作用。它提供治理并支持开源项目，使其成熟并确保其处于生产就绪状态。
- en: 'Speaking of maturity, there are three distinguished levels in CNCF:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 说到成熟度，CNCF有三个显著的级别：
- en: '**Sandbox**: This is the entry point for early-stage projects that can add
    value to the CNCF mission. New projects might be aligned with existing projects
    if they complement them.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**沙盒**：这是早期阶段项目的入口点，这些项目可以为CNCF使命增值。新项目如果与现有项目互补，可能会与其对齐。'
- en: '**Incubating**: This is a project that is successfully used in production by
    the end users and has an ongoing flow of code commits and contributions, along
    with documentation, specifications, and a versioning scheme.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**孵化**：这是一个已在生产环境中成功使用的项目，拥有持续的代码提交和贡献流，同时具有文档、规范和版本控制方案。'
- en: '**Graduated**: This is a project that has contributors from multiple organizations,
    maintains Core Infrastructure Initiative best practices, and has passed an independent
    third-party security audit. The project should also define governance and committer
    processes, as well prove to be in use by real users.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**毕业**：这是一个拥有来自多个组织的贡献者、遵循核心基础设施倡议最佳实践，并通过了独立第三方安全审核的项目。该项目还应定义治理和贡献者流程，并且证明其已被真实用户使用。'
- en: Every project hosted by CNCF has an associated maturity level. Projects increase
    their maturity levels by demonstrating that they received *end user adoption,
    a healthy rate of code changes, and committers from* *different organizations*.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 每个由CNCF托管的项目都有一个相应的成熟度级别。项目通过展示其获得了*最终用户采用、健康的代码变更频率，以及来自* *不同组织的贡献者*，来提高其成熟度。
- en: In addition, all CNCF projects must adhere to the *IP Policy* and adopt the
    *Code of Conduct*. The Code of Conduct defines what behavior is acceptable and
    what is not to create a positive and emphatical collaborative environment. On
    the other hand, the IP Policy is concerned with intellectual property and determines
    which open source license shall be applied (typically, this is Apache 2.0 for
    the source code and Creative Commons Attribution 4.0 International for documentation
    and images).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，所有CNCF项目必须遵守*IP政策*并采用*行为规范*。行为规范定义了可接受的行为以及不可接受的行为，以创建一个积极和富有同理心的协作环境。另一方面，IP政策关注知识产权，决定应适用哪种开源许可证（通常，源代码使用Apache
    2.0许可证，文档和图片使用Creative Commons Attribution 4.0 International许可证）。
- en: CNCF community and governance
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CNCF社区与治理
- en: As open source projects such as Kubernetes gain momentum, they attract more
    contributors, which is always a good sign. However, larger communities may get
    out of control and quickly become a *mess* without adequate governance. While
    CNCF does not require its hosted projects to follow any specific governance model,
    for a project to graduate, an explicit governance and committer process must be
    defined. CNCF follows the principle of *Minimal Viable Governance*, which means
    the projects are self-governing and the CNCF bodies will only step in if asked
    for help or if things are going wrong.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 Kubernetes 等开源项目的势头不断增长，它们吸引了更多的贡献者，这总是一个好兆头。然而，较大的社区可能会失控，并在没有适当治理的情况下迅速变得
    *混乱*。虽然 CNCF 不要求其托管的项目遵循任何特定的治理模型，但为了使项目毕业，必须明确规定治理和提交者流程。CNCF 遵循 *最小可行治理* 原则，这意味着项目自我治理，CNCF
    机构仅在需要帮助或项目出现问题时介入。
- en: 'Speaking about its structure, CNCF has three main bodies:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 说到其结构，CNCF 有三个主要机构：
- en: '**Governing Board** (**GB**): Takes care of marketing, budget, and other business
    decisions for CNCF'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理委员会** (**GB**): 负责 CNCF 的市场营销、预算和其他商业决策'
- en: '**Technical Oversight Committee** (**TOC**): Responsible for defining and maintaining
    the technical vision, approving new projects, and aligning existing ones based
    on feedback'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**技术监督委员会** (**TOC**): 负责定义和维护技术愿景，批准新项目，并根据反馈调整现有项目'
- en: '**End User Community** (**EUC**): Provides feedback from end users and organizations
    to improve the overall experience in the cloud-native ecosystem'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**终端用户社区** (**EUC**): 提供来自终端用户和组织的反馈，以改进云原生生态系统中的整体体验'
- en: TOC also determines if a project has reached another level of maturity. Projects
    can remain in an incubating stage indefinitely, but they are normally expected
    to graduate within 2 years.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: TOC 还决定一个项目是否达到了更高的成熟度水平。项目可以在孵化阶段无限期停留，但通常期望在 2 年内毕业。
- en: As you already know, Kubernetes was the first project to be incubated in CNCF
    and the first to reach *Graduated* status in 2018\. That’s right – Kubernetes
    skipped the sandbox stage as it was first released at the same time CNCF was established.
    Since its inception, more than 10 other projects have graduated and about 100
    projects are currently in the incubating or sandbox stage. In the next section,
    we’ll explore the roles and personas that are common in cloud and cloud-native.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所知，Kubernetes 是 CNCF 中第一个孵化的项目，也是第一个在 2018 年达到 *毕业* 状态的项目。没错，Kubernetes 跳过了沙盒阶段，因为它是在
    CNCF 成立的同时首次发布的。自那时以来，已有 10 多个项目毕业，约有 100 个项目目前处于孵化或沙盒阶段。在下一部分，我们将探讨云和云原生中常见的角色和人物。
- en: Cloud roles and personas
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云角色和人物
- en: Cloud-native is not only about technologies and architectures, but also about
    people and efficient collaboration in working environments. Therefore, it is common
    to have certain positions and roles in organizations working with cloud infrastructures
    and the cloud-native ecosystem. It is also a KCNA exam requirement to understand
    which roles we are talking about and which responsibilities they assume.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 云原生不仅仅是关于技术和架构，还涉及人员和工作环境中高效的协作。因此，在使用云基础设施和云原生生态系统的组织中，常常会有一些特定的职位和角色。了解这些角色以及它们的职责是
    KCNA 考试的要求。
- en: 'The following roles can be encountered in modern organizations that are adopting
    the cloud and cloud-native:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在采用云和云原生的现代组织中，可以遇到以下角色：
- en: '**Cloud Architect or Cloud** **Solutions Architect**'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**云架构师或云解决方案架构师**'
- en: '**DevOps Engineer**'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DevOps 工程师**'
- en: '**DevSecOps Engineer**'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DevSecOps 工程师**'
- en: '**FinOps Engineer**'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**FinOps 工程师**'
- en: '**Site Reliability** **Engineer (SRE)**'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**站点可靠性工程师** (**SRE**)'
- en: '**Cloud Engineer**'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**云工程师**'
- en: '**Data Engineer**'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据工程师**'
- en: '**Full** **Stack Developer**'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全栈开发工程师**'
- en: 'This list is not exhaustive, and you may sometimes see variations of these
    roles, but this should give you a general idea. Now, let’s make the differences
    between those roles and responsibilities clear:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这个列表并不详尽，你有时可能会看到这些角色的不同变体，但这应该能给你一个大致的概念。现在，让我们明确这些角色和职责之间的区别：
- en: '**Cloud (Solutions) Architect**: It comes as no surprise that an architect
    is responsible for designing the architecture of the cloud infrastructure and
    cloud-native applications. It must be highly resilient, observable, scalable,
    and have a high degree of automation.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**云（解决方案）架构师**：不出所料，架构师负责设计云基础设施和云原生应用程序的架构。它必须具有高度的韧性、可观察性、可扩展性，并且具有较高的自动化程度。'
- en: Cloud Architects are also often responsible for cloud strategy and selecting
    cloud providers (public, private, or hybrid) and suitable services (IaaS/PaaS/SaaS/serverless).
    Architect roles require broad knowledge from many technical and non-technical
    domains. For example, they must know the difference between **capital expenditure
    or upfront costs** (**CAPEX**) and **operational expenditures or simply speaking
    running costs** (**OPEX**). Traditional data centers are an example of high CAPEX,
    while the public cloud is an example of zero or almost zero CAPEX, with costs
    mostly being operational (OPEX).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 云架构师通常还负责云战略和选择云提供商（公有云、私有云或混合云）以及合适的服务（IaaS/PaaS/SaaS/无服务器架构）。架构师角色要求具备广泛的技术和非技术领域知识。例如，他们必须了解**资本支出或前期成本**（**CAPEX**）与**运营支出或简而言之是运行成本**（**OPEX**）的区别。传统数据中心是高CAPEX的典型例子，而公有云则是零或几乎为零的CAPEX，成本大多为运营成本（OPEX）。
- en: '**DevOps Engineer**: **Dev** stands for **development**, while **Ops** stands
    for **operations**. A DevOps Engineer is somebody who can do both by bridging
    the gaps between developers and operationalists. Typically, a DevOps Engineer
    is somebody who has had previous experience as both a software developer and a
    system administrator or as an infrastructure engineer. This knowledge allows them
    to effectively automate infrastructure in the cloud and a whole application life
    cycle, including development, testing, and release. DevOps Engineers often need
    to know at least one programming language (for instance Python, Ruby, or Golang),
    as well as several tools for automation (such as Terraform, Ansible, Puppet, and
    so on) and **continuous integration and deployment/delivery** (**CI/CD**) systems.
    Nowadays, you’ll also often see Kubernetes experience as one of the requirements
    for DevOps roles. DevOps, as a culture, emphasizes learning over blame and promotes
    shared responsibility and strong cross-team collaboration, along with continuous
    feedback loops.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DevOps工程师**：**Dev**代表**开发**，而**Ops**代表**运营**。DevOps工程师是能够弥合开发人员与运营人员之间差距的人。通常，DevOps工程师既有软件开发经验，也有系统管理员或基础设施工程师的经验。这些知识使他们能够有效地自动化云中的基础设施以及整个应用生命周期，包括开发、测试和发布。DevOps工程师通常需要至少掌握一种编程语言（例如Python、Ruby或Golang），以及一些自动化工具（如Terraform、Ansible、Puppet等）和**持续集成与持续部署/交付**（**CI/CD**）系统。如今，你通常也会看到Kubernetes经验作为DevOps岗位的要求之一。DevOps文化强调学习优于责备，倡导共享责任和强有力的跨团队协作，并促进持续的反馈循环。'
- en: '**DevSecOps Engineer**: This is very much like a DevOps Engineer, but with
    an extra focus on security. With DevSecOps, security is introduced at an early
    stage in application and infrastructure life cycles and requires tight collaboration
    with the security team.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DevSecOps工程师**：这个角色与DevOps工程师非常相似，但更加注重安全性。在DevSecOps中，安全性在应用和基础设施生命周期的早期就开始介入，并且需要与安全团队密切合作。'
- en: '**FinOps Engineer**: **Fin** stands for **financial**, while **Ops** stands
    for **operations**. The FinOps engineer enables teams to track their budgets,
    provide transparency, and perform cost optimization in the cloud. This role requires
    a deep understanding of various pricing models and services in the cloud to find
    optimal and cost-efficient solutions.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**FinOps工程师**：**Fin**代表**财务**，而**Ops**代表**运营**。FinOps工程师使团队能够跟踪预算、提供透明度，并在云端进行成本优化。这个角色要求深入了解云端的各种定价模型和服务，以找到最佳和最具成本效益的解决方案。'
- en: '**Site Reliability Engineer** (**SRE**): The responsibilities of the SRE include
    maintaining and optimizing cloud infrastructures and applications. SRE is, in
    a way, similar to DevOps but focuses more on the operational part and especially
    on meeting application availability requirements or objectives defined in **service-level
    agreements** (**SLAs**) or **service-level objectives** (**SLOs**). SLA regulates
    the level of commitment between the service provider and clients regarding quality,
    availability, and responsibilities. SLOs are specific measurable characteristics
    of the SLA, such as availability or response time. SREs often participate in on-call
    rotation duties (that is, they are ready to react in case of incidents).'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网站可靠性工程师** (**SRE**)：SRE 的职责包括维护和优化云基础设施和应用程序。SRE 在某种程度上与 DevOps 相似，但更侧重于运营部分，尤其是满足应用程序可用性要求或在**服务水平协议**
    (**SLAs**) 或 **服务级目标** (**SLOs**) 中定义的目标。SLA 规定了服务提供商与客户之间在质量、可用性和责任方面的承诺水平。SLO
    是 SLA 的具体可衡量特征，如可用性或响应时间。SRE 经常参与值班轮换（即，他们随时准备在发生事故时作出反应）。'
- en: '**Cloud Engineer**: This is another role that’s similar to DevOps but focuses
    on the cloud specifics or service offerings of a cloud provider. Typically, the
    DevOps Engineer role requires a broader skill set, whereas a Cloud Engineer needs
    deeper knowledge about particular public cloud services.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**云工程师**：这个角色与 DevOps 类似，但侧重于云服务提供商的云特性或服务。通常，DevOps 工程师的角色需要更广泛的技能，而云工程师则需要更深入了解特定的公共云服务。'
- en: '**Data Engineer**: In this role, an engineer must deal with data protection,
    data storage, performance and availability requirements, and various tools for
    data classification, retention, and analysis. As enterprises accumulate more and
    more data, they need to make use of it. Therefore, Data Engineers are more in
    demand these days.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据工程师**：在这个角色中，工程师需要处理数据保护、数据存储、性能和可用性要求，以及用于数据分类、保留和分析的各种工具。随着企业积累越来越多的数据，他们需要有效利用这些数据。因此，数据工程师目前的需求量很大。'
- en: '**Full Stack Developer**: This is a broad role in which a developer needs to
    be able to take care of both the frontend, for example, the **user interface**
    (**UI**) and backend parts of an application. The backend is a generic term that
    describes software implementation that’s not visible or accessible by end users.
    Sometimes, Full Stack developers can bring in some basic experience with cloud
    infrastructure and even DevOps tools.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全栈开发者**：这是一个广泛的角色，开发者需要能够处理应用程序的前端部分（例如，**用户界面** (**UI**)）和后端部分。后端是一个通用术语，描述的是不对终端用户可见或无法访问的软件实现。有时，全栈开发者还可能涉及一些云基础设施和
    DevOps 工具的基础经验。'
- en: While all these roles and personas are in extremely high demand all over the
    world, it may not be easy to get an offer for one of those if you are coming from
    a completely different background or if you’ve just graduated university or college
    and have no relevant working experience. Accomplished certifications always make
    your profile stand out and give you higher chances of getting an interview in
    one of the desired roles. You’ll find a few pieces of career advice at the end
    of this book, but for now, let’s see which Kubernetes certifications are offered
    by CNCF and what the certification path looks like.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这些角色和职位在全球范围内的需求极高，但如果你来自完全不同的背景，或者刚刚从大学毕业且没有相关的工作经验，获得这些职位的机会可能并不容易。获得认证可以使你的个人资料脱颖而出，并大大提高你获得面试机会的几率。在本书的最后，你将找到一些职业建议，但现在让我们先看看
    CNCF 提供了哪些 Kubernetes 认证以及认证路径是怎样的。
- en: Kubernetes certification path
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes 认证路径
- en: 'At the time of writing, CNCF offers four Kubernetes certification exams:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，CNCF 提供了四个 Kubernetes 认证考试：
- en: '**Kubernetes and Cloud Native** **Associate** (**KCNA**)'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kubernetes 和云原生** **助理** (**KCNA**)'
- en: '**Certified Kubernetes Application** **Developer** (**CKAD**)'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**认证 Kubernetes 应用程序** **开发者** (**CKAD**)'
- en: '**Certified Kubernetes** **Administrator** (**CKA**)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**认证 Kubernetes** **管理员** (**CKA**)'
- en: '**Certified Kubernetes Security** **Specialist** (**CKS**)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**认证 Kubernetes 安全** **专家** (**CKS**)'
- en: CKA was the first exam to be launched in 2017 and was valid for 2 years, but
    later, the validity period was extended to 3 years. CKAD and KCNA also have a
    3-year validity period; only the CKS exam is valid for 2 years after passing.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: CKA 是第一个于 2017 年发布的考试，原有效期为 2 年，但后来有效期延长至 3 年。CKAD 和 KCNA 的有效期也为 3 年；只有 CKS
    考试通过后有效期为 2 年。
- en: 'Out of all of the exams, CKS is the hardest and requires a candidate to hold
    a valid, non-expired CKA certification to demonstrate that they already possess
    sufficient K8s expertise. This means that while you can purchase CKS at any time,
    you won’t be able to take it unless you first pass CKA. All the other exams can
    be attempted in any order; however, the recommended path is shown in the following
    diagram:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有考试中，CKS是最难的，要求考生持有有效且未过期的CKA认证，以证明他们已经具备足够的K8s专业知识。这意味着虽然你可以随时购买CKS，但除非你先通过CKA，否则无法参加此考试。所有其他考试都可以按任意顺序进行；然而，推荐的路径如下图所示：
- en: '![Figure 2.1 – CNCF Kubernetes certification path](img/B18970_02_01.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图2.1 – CNCF Kubernetes认证路径](img/B18970_02_01.jpg)'
- en: Figure 2.1 – CNCF Kubernetes certification path
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.1 – CNCF Kubernetes认证路径
- en: KCNA is the easiest exam on the list and the only one that is hands-off – that
    is, it contains multiple-choice questions. The other certifications are all hands-on
    and require you to complete activities on multiple K8s clusters in a terminal.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: KCNA是列表中最简单的考试，也是唯一不需要动手操作的考试——即，它是选择题。其他所有认证都需要动手操作，并要求你在多个K8s集群上通过终端完成活动。
- en: But don’t get your hopes up for a trivial KCNA exam. In fact, among entry-level
    certifications in the cloud field, it is a comparably hard certification. Even
    if you’ve worked in a relevant field for a few years, you are unlikely to pass
    it without any Kubernetes experience and some preparation. Make sure that you
    always answer all the recap questions and complete the mockup exam provided at
    the end of this book before attempting a real exam.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 但不要对KCNA考试抱有过高期望。事实上，在云领域的入门级认证中，它是一个相对较难的认证。即使你在相关领域工作了几年，没有任何Kubernetes经验和一些准备，通常也不太可能通过考试。在尝试实际考试之前，确保你已经回答完所有的回顾性问题，并完成了本书结尾提供的模拟考试。
- en: 'The following is some important information regarding the KCNA exam:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是关于KCNA考试的一些重要信息：
- en: 60 multiple choice questions
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 60道选择题
- en: 90 minutes to complete the exam
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 90分钟完成考试
- en: A score of 75% or above is needed to pass
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要75%及以上的分数才能通过
- en: The exam is scored automatically in around 24 hours
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考试会在约24小时内自动评分
- en: Can be taken online from anywhere (webcam and microphone required)
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可在任何地方在线参加（需要摄像头和麦克风）
- en: One free retake is included in the price
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 价格包括一次免费重考
- en: 'The following domains are tested in the KCNA exam:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是KCNA考试中测试的领域：
- en: Kubernetes Fundamentals (46%)
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes基础知识（46%）
- en: Container Orchestration (22%)
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器编排（22%）
- en: Cloud-Native Architecture (16%)
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云原生架构（16%）
- en: Cloud-Native Observability (8%)
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云原生可观察性（8%）
- en: Cloud-Native Application Delivery (8%)
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云原生应用交付（8%）
- en: As you can see, Kubernetes makes up a major part of the exam. Therefore, the
    biggest part of this book (*Part 3,* *Learn Kubernetes Fundamentals*) is dedicated
    to K8s. Apart from that, the KCNA candidate should be able to confirm their conceptual
    knowledge of cloud-native and its landscape, projects, and practices. This includes
    high-level definitions from the previous chapter which might be questioned in
    KCNA.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，Kubernetes占据了考试的主要部分。因此，本书的最大篇幅（*第3部分*，*学习Kubernetes基础知识*）专门讲解K8s。除此之外，KCNA考生应能够确认自己对云原生及其生态、项目和实践的概念性知识。这包括上一章中的高层次定义，这些内容可能会在KCNA中被提问。
- en: The other three exams focus on different aspects of working with Kubernetes.
    The CKAD exam tests application deployment and management aspects, whereas CKA
    is more about setting up and managing Kubernetes itself. Nevertheless, these exams
    test many common domains and if you’ve passed one of those two, with a bit of
    extra preparation, you’ll pass the other one as well. Finally, CKS focuses on
    security and requires significant experience working with Kubernetes.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 其他三个考试专注于与Kubernetes相关的不同方面。CKAD考试测试应用部署和管理方面，而CKA更侧重于Kubernetes的搭建和管理。然而，这些考试涉及许多共同领域，如果你通过了其中一个，经过一些额外的准备，你也能通过另一个。最后，CKS聚焦于安全性，需要在Kubernetes方面有丰富的经验。
- en: Summary
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we’ve learned about OSS and the importance of open standards
    in terms of OCI. OCI defines **image**, **runtime**, and **distribution** specifications
    that allow anyone to develop fully compatible container software. For instance,
    Kubernetes does not include its own container runtime; instead, it implements
    support for standardized runtime interfaces, allowing it to work with many container
    runtimes. Open, defined standards have paved the way for many new projects in
    the cloud-native ecosystem and CNCF.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章节中，我们了解了开源软件（OSS）以及开放标准在OCI方面的重要性。OCI定义了**镜像**、**运行时**和**分发**规范，使任何人都能开发完全兼容的容器软件。例如，Kubernetes不包括自己的容器运行时；相反，它实现了对标准化运行时接口的支持，使其能够与多种容器运行时协同工作。开放的、定义明确的标准为云原生生态系统和CNCF中的许多新项目铺平了道路。
- en: 'Next, we covered the history behind CNCF and the Linux Foundation. CNCF was
    founded at the same time that the first version of Kubernetes was released and
    it became the first incubated project. CNCF distinguishes three levels of project
    maturity: **Sandbox**, **Incubating**, and **Graduated**.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们回顾了CNCF和Linux基金会的历史。CNCF是在Kubernetes的第一个版本发布时成立的，并且成为了第一个孵化的项目。CNCF将项目成熟度分为三个级别：**沙箱**、**孵化**和**毕业**。
- en: 'CNCF has three major bodies: **Governing Board** (**GB**), **Technical Oversight
    Committee** (**TOC**), and **End User Community** (**EUC**). TOC makes decisions
    about the maturity of CNCF projects. One of the requirements for a project to
    reach graduation is that it must have governance and committer processes defined.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: CNCF有三个主要的组织：**管理委员会**（**GB**）、**技术监督委员会**（**TOC**）和**最终用户社区**（**EUC**）。TOC负责决定CNCF项目的成熟度。一个项目达到毕业状态的要求之一是必须有定义的治理和提交者流程。
- en: Cloud-native needs the right people to do the job and this is supported by a
    range of roles and personas you can find today in high demand on the market. We’ve
    looked at and compared the different roles to understand how the Cloud Architect’s
    responsibilities are different from those of a DevOps Engineer or a Full Stack
    developer.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 云原生需要合适的人来做工作，这一点得到了许多市场上需求量很大的角色和身份的支持。我们已经看过并比较了不同的角色，以理解云架构师的责任与DevOps工程师或全栈开发人员的区别。
- en: Finally, we looked at the Kubernetes certification path and looked closer at
    the KCNA exam that you are preparing for. Make sure that you answer all the recap
    questions before moving on to the next chapter, where we will look at Docker and
    run containers.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们回顾了Kubernetes认证路径，并深入研究了你正在准备的KCNA考试。确保在进入下一个章节之前回答所有复习问题，我们将在下一个章节中探讨Docker和运行容器。
- en: Questions
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'As we conclude, here is a list of questions for you to test your knowledge
    regarding this chapter’s material. You will find the answers in the *Assessments*
    section of the *Appendix*:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们总结时，以下是一些问题，供你测试本章内容的理解。你可以在*附录*中的*评估*部分找到答案：
- en: Which of the following is a valid project maturity state in CNCF (pick multiple)?
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪些是CNCF中有效的项目成熟度状态（请选择多个）？
- en: Sandbox
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 沙箱状态
- en: Released
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 已发布状态
- en: Graduated
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 毕业状态
- en: Incubating
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 孵化状态
- en: Which organization was started to establish industry standards for containers?
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个组织是为了建立容器行业标准而成立的？
- en: Open Container Foundation
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开放容器基金会
- en: Cloud Native Container Initiative
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 云原生容器倡议
- en: Cloud Native Container Foundation
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 云原生容器基金会
- en: Open Container Initiative
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开放容器倡议
- en: Which of the following requirements must a CNCF project meet to reach the Graduated
    state (pick multiple)?
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪些要求必须满足，CNCF项目才能达到毕业状态（请选择多个）？
- en: Have project development and maintenance plan for the next 3-5 years
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为未来3-5年制定项目开发和维护计划
- en: Have real users and defined governance and committer processes
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拥有实际用户和定义的治理及提交者流程
- en: Have contributors from multiple organizations
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拥有来自多个组织的贡献者
- en: Follow Core Infrastructure Initiative best practices
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 遵循核心基础设施倡议的最佳实践
- en: Which of the following CNCF bodies determines if a project has reached another
    maturity level?
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个CNCF组织决定一个项目是否达到了另一个成熟度水平？
- en: End User Community (EUC)
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最终用户社区（EUC）
- en: Governing Board (GB)
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 管理委员会（GB）
- en: Technical Oversight Committee (TOC)
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 技术监督委员会（TOC）
- en: Technical Overview Committee (TOC)
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 技术监督委员会（TOC）
- en: Which of the following specifications is provided by the OCI (pick multiple)?
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪些规范是OCI提供的（请选择多个）？
- en: Image specification
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 镜像规范
- en: Runtime specification
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行时规范
- en: Execution specification
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行规范
- en: Distribution specification
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分发规范
- en: Which of the following is required for a CNCF project at any maturity stage
    (pick two)?
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪些是CNCF项目在任何成熟阶段所需的（选择两个）？
- en: Acceptance of the CNCF Code of Conduct
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接受CNCF行为准则
- en: Acceptance of the CNCF IP Policy
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接受CNCF知识产权政策
- en: Acceptance of the GNU GPL v.3 license
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接受GNU GPL v.3许可证
- en: Acceptance of the Linux Foundation as the project owner
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接受Linux基金会作为项目所有者
- en: Which of the following does DevOps culture emphasize (pick multiple)?
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪些是DevOps文化强调的（选择多个）？
- en: Shared responsibility
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 共享责任
- en: Learning instead of blame
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 学习而非责备
- en: Strong cross-team collaboration
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 强大的跨团队协作
- en: Developers should follow the Operations team
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开发人员应该遵循运维团队
- en: Which of the following organizations was founded with a mission to advance container
    and cloud-native technologies and align the industry?
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个组织的使命是推动容器和云原生技术的发展，并使行业保持一致？
- en: Linux Foundation
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Linux基金会
- en: Open Container Initiative
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开放容器倡议
- en: Cloud Native Container Foundation
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 云原生容器基金会
- en: Cloud Native Computing Foundation
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 云原生计算基金会
- en: Which of the following is likely to be among the Cloud Architect’s responsibilities
    (pick two)?
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪些可能是云架构师的职责之一（选择两个）？
- en: Selecting a cloud provider and suitable services
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择云服务提供商和合适的服务
- en: Designing the cloud infrastructure architecture
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设计云基础设施架构
- en: Deploying applications to production
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序部署到生产环境
- en: Maintaining applications in the cloud
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在云中维护应用程序
- en: What is the difference between DevOps and DevSecOps Engineers?
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: DevOps和DevSecOps工程师有什么区别？
- en: DevOps only takes care of operations
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: DevOps只负责运维
- en: DevSecOps only takes care of security aspects
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: DevSecOps只处理安全方面的问题
- en: DevSecOps is like DevOps, but with an extra focus on security
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: DevSecOps类似于DevOps，但更注重安全性
- en: DevSecOps must have security-related certifications
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: DevSecOps必须拥有与安全相关的认证
- en: Which of the following describes SRE (pick two)?
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪些描述了SRE（选择两个）？
- en: SRE needs to be present on-site with the cloud providers
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: SRE需要与云服务提供商现场合作
- en: SRE does not participate in any operations
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: SRE不参与任何操作
- en: SRE works on maintaining and optimizing infrastructure and apps
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: SRE负责维护和优化基础设施和应用程序
- en: SRE needs to ensure that the application’s SLA and SLO are met
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: SRE需要确保应用程序的SLA和SLO得以满足
- en: How are Cloud Engineers different from DevOps Engineers (pick two)?
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 云工程师和DevOps工程师有什么不同（选择两个）？
- en: DevOps Engineers know nothing about the cloud
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: DevOps工程师对云一无所知
- en: Cloud Engineers have a deeper knowledge of cloud services
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 云工程师对云服务有更深入的了解
- en: DevOps Engineers often have a broader skill set
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: DevOps工程师通常具备更广泛的技能
- en: DevOps Engineers need to do on-call duty, while Cloud Engineers don’t
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: DevOps工程师需要值班，而云工程师则不需要
- en: What are the benefits of having Full-Stack developers in a team?
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拥有全栈开发人员团队有什么好处？
- en: Full-Stack can tackle both frontend and backend work
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 全栈开发人员可以处理前端和后端工作
- en: Full-Stack developers deploy applications to the cloud
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 全栈开发人员将应用程序部署到云端
- en: Full-Stack developers write code faster
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 全栈开发人员编写代码更快
- en: Full-Stack developers write cleaner code
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 全栈开发人员编写更简洁的代码
- en: Why is it important to have Open Standards (pick two)?
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么拥有开放标准很重要（选择两个）？
- en: They help us avoid vendor lock-in
  id: totrans-185
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 他们帮助我们避免厂商锁定
- en: They allow different software to be compatible
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它们使不同的软件兼容
- en: They ensure bug-free software
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 他们确保软件没有漏洞
- en: They prevent earning profits with software
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它们防止通过软件获利
- en: Which of the following technologies is a DevOps Engineer likely to work with
    (pick multiple)?
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪些技术是DevOps工程师可能会使用的（选择多个）？
- en: Frontend technologies (for example, JavaScript, HTML, and CSS)
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前端技术（例如，JavaScript、HTML和CSS）
- en: Automation tools (for example, Terraform, Ansible, and Puppet)
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 自动化工具（例如，Terraform、Ansible和Puppet）
- en: CI
  id: totrans-192
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: CI
- en: CD
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: CD
- en: 'Part 2: Performing Container Orchestration'
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二部分：执行容器编排
- en: In this part, you’ll learn about the origin of containers, their practicality,
    and the reasons that led to their massive adoption across many organizations,
    from small start-ups to global enterprises. We will cover both theoretical and
    practical aspects, such as how to build and run containers, and why and when they
    need orchestration.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在本部分中，您将了解容器的起源、它们的实用性，以及导致它们在众多组织（从小型初创公司到全球企业）广泛采用的原因。我们将涵盖理论和实践方面的内容，如如何构建和运行容器，以及为何和何时需要编排。
- en: 'This part contains the following chapters:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包含以下章节：
- en: '[*Chapter 3*](B18970_03.xhtml#_idTextAnchor038), *Getting Started with Containers*'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第3章*](B18970_03.xhtml#_idTextAnchor038)，*容器入门*'
- en: '[*Chapter 4*](B18970_04.xhtml#_idTextAnchor048), *Exploring Container Runtimes,
    Interfaces, and Service Meshes*'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第四章*](B18970_04.xhtml#_idTextAnchor048), *探索容器运行时、接口和服务网格*'

- en: '*Chapter 7*: Installing and Running Operators with the Operator Lifecycle Manager'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 7 章*：使用操作符生命周期管理器安装和运行操作符'
- en: Up until now, the Operator development work covered in previous chapters has
    been mostly self-contained. That is, the development and deployment processes
    covered so far have been primarily focused on local environments with relatively
    few external services expected to interact with the Operator we have been writing.
    While these processes are useful (and in some ways essential) to the early design
    of an Operator, there is an expectation for most Operators (and indeed, most software
    projects in general) that they will eventually be exposed to the outside world.
    This chapter will focus on this phase of an Operator's lifespan, wherein the Operator
    is presented and consumed by external users.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，前几章中涉及的操作符开发工作大多是自包含的。也就是说，迄今为止，开发和部署过程主要集中在本地环境中，且期望与我们编写的操作符交互的外部服务相对较少。虽然这些过程对操作符的早期设计有用（在某些方面甚至是必需的），但大多数操作符（实际上，大多数软件项目）最终都会暴露给外部世界。本章将专注于操作符生命周期中的这一阶段，其中操作符将被呈现并由外部用户使用。
- en: 'In [*Chapter 1*](B18147_01_ePub.xhtml#_idTextAnchor015), *Introduction to the
    Operator Framework*, the three main pillars of the Operator Framework were introduced.
    Several chapters of this book have already been devoted to the first pillar (the
    Operator SDK), but the remaining pillars have yet to be explored in detail. These
    are the **Operator Lifecycle Manager** (**OLM**) and **OperatorHub**. These two
    components of the Operator Framework are the key transitory elements in an Operator''s
    development from an experimental, local prototype to a published, installable
    product. In this chapter, we will cover the necessary steps to graduate from an
    Operator in development to one that is accessible by users, through the following
    sections:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第 1 章*](B18147_01_ePub.xhtml#_idTextAnchor015)，《操作符框架简介》中，介绍了操作符框架的三大支柱。书中的几章已经讨论了第一大支柱（操作符
    SDK），但其余的支柱尚未详细探讨。这些支柱是**操作符生命周期管理器**（**OLM**）和**OperatorHub**。这两个操作符框架的组成部分是操作符从实验性本地原型到发布可安装产品开发过程中的关键过渡元素。在本章中，我们将通过以下几个部分，讲解如何从开发中的操作符过渡到用户可访问的操作符：
- en: Understanding the OLM
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 OLM
- en: Running your Operator
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行你的操作符
- en: Working with OperatorHub
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 OperatorHub 合作
- en: Troubleshooting
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 故障排除
- en: By packaging an Operator to be installed and managed by the OLM and then publishing
    that Operator on OperatorHub, we will be leveraging the standard deployment workflow
    that users expect from the Operator Framework. These steps are by no means necessary,
    as we have already shown that it is possible to manually build and deploy an Operator
    without the OLM or OperatorHub. But, it is the goal of this chapter to introduce
    these pillars of the Operator Framework to demonstrate how we can transform an
    Operator into a rich community project.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将操作符打包，使其能够通过 OLM 安装和管理，并将该操作符发布到 OperatorHub，我们将利用操作符框架中用户期望的标准部署工作流。虽然这些步骤并非必要，因为我们已经展示过，可以在没有
    OLM 或 OperatorHub 的情况下手动构建和部署操作符，但本章的目标是介绍操作符框架的这两大支柱，演示如何将操作符转变为一个丰富的社区项目。
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'This chapter will continue to work with the nginx Operator that was written
    in [*Chapter 4*](B18147_04_ePub.xhtml#_idTextAnchor066), *Developing an Operator
    with the Operator SDK,* and [*Chapter 5*](B18147_05_ePub.xhtml#_idTextAnchor078),
    *Developing an Operator – Advanced Functionality*. It will also assume access
    to a public Docker registry (previously used in [*Chapter 6*](B18147_06_ePub.xhtml#_idTextAnchor090),
    *Building and Deploying Your Operator*), as well as access to a running **Kubernetes**
    cluster. Therefore, the technical requirements of this chapter build upon most
    of the requirements from previous chapters, including the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将继续使用在[*第 4 章*](B18147_04_ePub.xhtml#_idTextAnchor066)，《使用操作符 SDK 开发操作符》和[*第
    5 章*](B18147_05_ePub.xhtml#_idTextAnchor078)，《开发操作符 - 高级功能》中编写的 nginx 操作符。假设已经可以访问公共
    Docker 仓库（在[*第 6 章*](B18147_06_ePub.xhtml#_idTextAnchor090)，《构建与部署操作符》中使用过），以及一个正在运行的**Kubernetes**集群。因此，本章的技术要求是在前几章的大部分要求基础上建立的，包含以下内容：
- en: Access to a Kubernetes cluster. It is recommended to use a disposable cluster
    created with a tool such as **kind** or **minikube** (see [*Chapter 6*](B18147_06_ePub.xhtml#_idTextAnchor090),
    *Building and Deploying Your Operator*).
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问Kubernetes集群。建议使用如**kind**或**minikube**等工具创建一个可丢弃的集群（参见[*第6章*](B18147_06_ePub.xhtml#_idTextAnchor090)，*构建和部署你的Operator*）。
- en: The `kubectl` binary available on your local system for interacting with the
    Kubernetes cluster.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在本地系统上有可用的`kubectl`二进制文件，用于与Kubernetes集群进行交互。
- en: The `operator-sdk` binary available on your local system for deploying the OLM
    and building Operator manifests.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在本地系统上有可用的`operator-sdk`二进制文件，用于部署OLM并构建Operator清单。
- en: Docker installed and running to build Operator bundle images.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已安装并运行Docker以构建Operator捆绑映像。
- en: A GitHub account and familiarity with the GitHub fork and pull request processes
    for submitting a new Operator to OperatorHub (demonstration only).
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拥有GitHub账户，并熟悉GitHub的fork和pull请求流程，以便向OperatorHub提交新的Operator（仅限演示）。
- en: 'The Code in Action video for this chapter can be viewed at: [https://bit.ly/3PPItsB](https://bit.ly/3PPItsB)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的《代码实战》视频可以通过以下链接查看：[https://bit.ly/3PPItsB](https://bit.ly/3PPItsB)
- en: Understanding the OLM
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解OLM
- en: The OLM was introduced in [*Chapter 1*](B18147_01_ePub.xhtml#_idTextAnchor015),
    *Introduction to the Operator Framework,* as a tool for installing and managing
    Operators within a cluster. Its features include the ability to provide control
    over upgrading installed Operators and making these Operators visible to cluster
    users. It also helps maintain cluster stability by enforcing Operator dependencies
    and preventing conflicting APIs from different Operators. This is a brief overview,
    but these features make it a powerful tool for deploying Operators in production
    environments. You can find more details about the OLM's features in the Operator
    Framework documentation at [https://olm.operatorframework.io/docs/#features-provided-by-olm](https://olm.operatorframework.io/docs/#features-provided-by-olm).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: OLM在[*第1章*](B18147_01_ePub.xhtml#_idTextAnchor015)，*Operator框架简介*中被介绍，作为一个用于在集群中安装和管理Operator的工具。它的功能包括提供对已安装Operator的升级控制，并使这些Operator对集群用户可见。它还通过强制执行Operator依赖关系，防止来自不同Operator的API冲突，从而帮助维护集群稳定性。这只是一个简要概述，但这些功能使得OLM成为一个强大的工具，适用于生产环境中部署Operator。你可以在Operator框架文档中找到更多关于OLM功能的细节：[https://olm.operatorframework.io/docs/#features-provided-by-olm](https://olm.operatorframework.io/docs/#features-provided-by-olm)。
- en: While this may make the OLM seem like a complex component to work with, it is
    actually no more than a set of resource manifests that can be installed in a cluster
    similarly to any other component or application (including Operators themselves).
    These resources include various **Pods** (managed by Deployments), **CustomResourceDefinitions**
    (**CRDs**), **namespaces**, **ServiceAccounts**, and **RoleBindings**.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这可能让OLM看起来像是一个复杂的组件，但它实际上不过是一组可以像安装其他组件或应用程序（包括Operator本身）一样在集群中安装的资源清单。这些资源包括各种**Pods**（由Deployments管理）、**CustomResourceDefinitions**（**CRDs**）、**namespaces**、**ServiceAccounts**和**RoleBindings**。
- en: In addition, the Operator SDK command-line tools provide simple commands for
    easily installing and interacting with the OLM in a Kubernetes cluster.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Operator SDK命令行工具提供了简单的命令，方便在Kubernetes集群中安装和与OLM进行交互。
- en: So, before it is possible to install Operators with the OLM, we must first install
    the OLM itself. This section will show the steps required to do so. It will also
    demonstrate some additional commands for interacting with the OLM via the command
    line, which will be helpful later on when installing and managing our own Operator.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在使用OLM安装Operator之前，我们必须首先安装OLM本身。本节将展示安装OLM所需的步骤，还将演示一些通过命令行与OLM交互的附加命令，这将在稍后安装和管理我们自己的Operator时非常有用。
- en: Installing the OLM in a Kubernetes cluster
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Kubernetes集群中安装OLM。
- en: To install the OLM, first ensure that you have administrative access to a running
    Kubernetes cluster. Even though using the OLM to manage Operators is an acceptable
    practice for production clusters, it is strongly recommended to use a disposable
    cluster (created with a tool such as kind) while following along with this chapter.
    This makes it easy and affordable to destroy and re-build the cluster from scratch
    if necessary. If you already have a cluster running from a previous chapter, it
    may even be useful to shut down that cluster in order to start fresh (with kind,
    the command to do so is `kind delete cluster`).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装OLM，首先确保你拥有正在运行的Kubernetes集群的管理员权限。尽管使用OLM来管理Operators是生产集群中的一种可接受的做法，但强烈建议在跟随本章时使用一个一次性集群（可以使用如kind这样的工具创建）。这样，如果需要，你可以轻松且低成本地销毁并重新构建集群。如果你已经有一个来自上一章的集群运行，可能还需要关闭该集群，重新开始（使用kind时，执行`kind
    delete cluster`命令即可）。
- en: 'Next, invoke the `operator-sdk` binary to install the OLM in your cluster with
    the following command:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，调用`operator-sdk`二进制文件，通过以下命令在你的集群中安装OLM：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This command may take a moment to complete, but during that time you will see
    `operator-sdk` fetching the various resource manifests for the OLM and installing
    them in your Kubernetes cluster. Once this is complete, it will also print the
    final list of installed resources. Many of these are either cluster-scoped (such
    as the OLM-specific CRDs) or installed in the newly created `olm` namespace. You
    can see these resources by inspecting that namespace with `kubectl` using the
    following command:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令可能需要一些时间才能完成，但在此过程中，你将看到`operator-sdk`获取OLM的各种资源清单并将其安装到Kubernetes集群中。安装完成后，它还会打印出最终安装的资源列表。许多资源是集群范围的（例如OLM特定的CRD），或者安装在新创建的`olm`命名空间中。你可以通过以下命令使用`kubectl`检查该命名空间，以查看这些资源：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Notably, there are five Pods in this namespace that perform the core functions
    of the OLM. These Pods work together to provide the cohesive functionality that
    comprises the OLM, including tracking Operator subscriptions and watching for
    custom resources that indicate Operator installations in the cluster.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，在这个命名空间中有五个Pod，执行OLM的核心功能。这些Pod共同工作，提供OLM的统一功能，包括追踪Operator订阅和监视指示Operator安装的自定义资源。
- en: Interacting with the OLM
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与OLM交互
- en: 'Along with `operator-sdk olm install` (which, as the name implies, installs
    the OLM in a cluster), the `operator-sdk` binary also provides two more OLM-specific
    commands: `olm uninstall` and `olm status`. The former will remove the OLM and
    all of its dependent manifests from your cluster, while the latter provides information
    on the current status of the OLM resources in the cluster. For a healthy OLM installation,
    that output looks like this:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`operator-sdk olm install`（顾名思义，它在集群中安装OLM），`operator-sdk`二进制文件还提供了两个OLM特定的命令：`olm
    uninstall`和`olm status`。前者会将OLM及其所有依赖的清单从集群中移除，而后者提供当前集群中OLM资源的状态信息。对于健康的OLM安装，输出应如下所示：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: However, if the OLM was not behaving properly or there were issues with Operators
    in your cluster, this command could be used to debug the cause. For example, you
    can run `kubectl delete crd/operatorgroups.operators.coreos.com` (which deletes
    the `OperatorGroups` CRD installed by the OLM). Following this, running `operator-sdk
    olm status` will show the error `no matches for kind "OperatorGroup" in version
    "operators.coreos.com/v1` next to the `global-operators` and `olm-operators` entries,
    indicating that the CRD is missing in the cluster.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果OLM表现异常或集群中的Operator出现问题，可以使用此命令进行故障排除。例如，你可以运行`kubectl delete crd/operatorgroups.operators.coreos.com`（删除OLM安装的`OperatorGroups`
    CRD）。之后，运行`operator-sdk olm status`将显示错误`no matches for kind "OperatorGroup" in
    version "operators.coreos.com/v1`，并且在`global-operators`和`olm-operators`条目旁边，会指示该CRD在集群中缺失。
- en: This error can be repaired by uninstalling the OLM with `operator-sdk olm uninstall`
    and reinstalling it. Note that uninstalling the OLM does not uninstall any of
    the Operators it manages in the cluster. This is intentional to prevent data loss,
    but it also means that any desire to remove Operators from the cluster cannot
    be done by simply uninstalling the OLM.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这个错误可以通过使用`operator-sdk olm uninstall`卸载OLM并重新安装来修复。请注意，卸载OLM不会卸载它在集群中管理的任何Operators。这是有意为之，目的是防止数据丢失，但也意味着任何想要从集群中移除Operators的操作，不能仅通过卸载OLM来完成。
- en: Besides installing and checking on the health of the OLM itself, the other way
    to interact with it is by installing and managing Operators. But first, the Operator
    must be prepared in a way that the OLM will understand. This is called **the Operator's
    bundle**, and we will show how to generate it in the next section.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 除了安装和检查OLM本身的健康状况外，另一种与OLM交互的方式是安装和管理操作符。但首先，操作符必须以OLM能够理解的方式进行准备。这就叫做**操作符的包**，我们将在下一节展示如何生成它。
- en: Running your Operator
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行您的操作符
- en: In [*Chapter 6*](B18147_06_ePub.xhtml#_idTextAnchor090), *Building and Deploying
    Your Operator*, we demonstrated ways to build and run an Operator manually by
    either compiling locally or building a Docker image to run in a Kubernetes cluster.
    But, neither of these methods is directly compatible with the OLM, so in order
    to provide an Operator that can be installed by the OLM, the Operator must be
    prepared with a bundle that contains metadata about the Operator in a format that
    the OLM understands. Then, this bundle can be passed to the OLM, which will handle
    the rest of the installation and life cycle management of the Operator.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第6章*](B18147_06_ePub.xhtml#_idTextAnchor090)中，*构建和部署您的操作符*，我们展示了通过本地编译或构建Docker镜像以便在Kubernetes集群中运行来手动构建和运行操作符的方法。但是，这些方法都与OLM不完全兼容，因此为了提供一个OLM可以安装的操作符，操作符必须准备一个包含OLM理解的格式的操作符元数据的包。然后，您可以将此包传递给OLM，OLM将处理其余的安装和生命周期管理。
- en: Generating an Operator's bundle
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成操作符的包
- en: An Operator's bundle consists of various manifests that describe the Operator
    and provide additional metadata, such as its dependencies and APIs. Once created,
    these manifests can be compiled into a **bundle image**, which is a deployable
    container image that is used by the OLM to install the Operator in a cluster.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一个操作符的包由多个清单文件组成，这些文件描述了操作符并提供附加的元数据，例如其依赖关系和API。一旦创建，这些清单可以编译成一个**包镜像**，这是一个可部署的容器镜像，OLM会用它在集群中安装操作符。
- en: The simplest way to generate the bundle manifests is by running `make bundle`.
    This command will ask you to provide some metadata about the Operator and compile
    that input into the output resource manifests.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 生成包清单的最简单方法是运行`make bundle`。此命令会要求您提供一些有关操作符的元数据，并将这些输入编译成输出资源清单。
- en: Note
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '`make bundle` generates a container image name in some fields based on the
    same `IMG` environment variable used in [*Chapter 6*](B18147_06_ePub.xhtml#_idTextAnchor090),
    *Building and Deploying Your Operator*. Ensure that this environment variable
    is still set when generating the bundle, or that it is otherwise being passed
    to the `make bundle` command when it is invoked.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`make bundle` 会基于在[*第6章*](B18147_06_ePub.xhtml#_idTextAnchor090)中使用的相同`IMG`环境变量，生成某些字段中的容器镜像名称，*构建和部署您的操作符*。确保在生成包时此环境变量仍然被设置，或者在调用`make
    bundle`命令时，它已被传递给该命令。'
- en: 'The following block shows the output of `make bundle`. In this case, we will
    fill out the prompts for our nginx Operator with the company name, `MyCompany`,
    as well as some additional keywords and contact information for the maintainers
    of the Operator:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码块显示了`make bundle`的输出。在此例中，我们将为我们的nginx操作符填写提示信息，使用公司名称`MyCompany`，以及一些附加的关键字和操作符维护者的联系信息：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'During this step, the generator will request the following inputs one by one:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在此步骤中，生成器将依次请求以下输入：
- en: '`Display name for the operator`: This is the name that will be used for displaying
    the Operator on resources such as OperatorHub. So, it should be readable and clear
    with proper capitalization. For example, we have chosen `Nginx Operator`.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`操作符的显示名称`: 这是在诸如OperatorHub之类的资源上显示操作符时使用的名称。因此，它应该易读且清晰，并且大小写正确。例如，我们选择了`Nginx
    Operator`。'
- en: '`Description for the operator`: This field provides a description of the Operator
    and its functionality. Similar to the display name, this is intended for users
    to see. Therefore, it should also be clear and thorough to describe the Operator''s
    functionality in detail.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`操作符描述`: 该字段提供操作符的描述及其功能。与显示名称类似，此项是供用户查看的。因此，它应该清晰且详尽地描述操作符的功能。'
- en: '`Provider''s name for the operator`: This is the name of the provider, or developer,
    of the Operator. For a single developer, it can simply be your name. Or, for larger
    organizations, it could be a company or department name.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`操作符的提供者名称`: 这是操作符的提供者或开发者的名称。对于单个开发者，它可以简单地是您的名字。或者，对于更大的组织，它可以是公司或部门名称。'
- en: '`Any relevant URL for the provider name`: This is the opportunity for developers
    to provide an external URL to find more information about the developer. This
    could be a personal blog, GitHub account, or corporate website.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`提供者名称的相关 URL`：这是开发者提供外部 URL 的机会，用于获取有关开发者的更多信息。这可以是个人博客、GitHub 账户或公司网站。'
- en: '`Comma-separated list of keywords for your operator`: This is a list of keywords
    that can help users categorize and find your Operator. For this example, we have
    chosen `nginx,tutorial`, but you could just as easily provide a different list,
    such as `deployment,nginx,high availability,metrics`. This gives more insight
    into the key functionality we have developed for this Operator. Note also that
    the list is comma-separated, so `high availability` is one keyword.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`为您的操作员提供的以逗号分隔的关键词列表`：这是一个关键词列表，可以帮助用户对您的操作员进行分类并进行搜索。对于此示例，我们选择了 `nginx,tutorial`，但您也可以提供不同的列表，例如
    `deployment,nginx,high availability,metrics`。这将进一步展现我们为该操作员开发的关键功能。请注意，列表是以逗号分隔的，因此
    `high availability` 是一个关键词。'
- en: '`Comma-separated list of maintainers and their emails`: Finally, this section
    is a chance to provide the contact information for the maintainers of the Operator.
    This gives users information on who to contact for support or bug reporting. However,
    it can be useful for the developer''s privacy to provide a corporate address rather
    than personal contact information.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`以逗号分隔的维护者及其电子邮件列表`：最后，您可以在此部分提供操作员维护者的联系信息，这样用户就可以找到支持或报告错误的联系人。然而，出于开发者的隐私考虑，提供公司地址而非个人联系信息可能会更为合适。'
- en: These fields correspond to matching fields in the Operator's **cluster service
    version** (**CSV**) file (the CSV was briefly described in [*Chapter 1*](B18147_01_ePub.xhtml#_idTextAnchor015),
    *Introduction to the Operator Framework*, and will be explained in more detail
    later in this chapter under *Working with OperatorHub*). You can find more information
    about how each of these fields is used in the Operator Framework documentation
    at [https://sdk.operatorframework.io/docs/olm-integration/generation/#csv-fields](https://sdk.operatorframework.io/docs/olm-integration/generation/#csv-fields).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这些字段对应于操作员的 **集群服务版本** (**CSV**) 文件中的匹配字段（CSV 在[*第一章*](B18147_01_ePub.xhtml#_idTextAnchor015)，《操作员框架简介》中简要描述，稍后在本章中会在《与
    OperatorHub 协作》部分详细解释）。有关这些字段如何在操作员框架中使用的更多信息，您可以参考 [https://sdk.operatorframework.io/docs/olm-integration/generation/#csv-fields](https://sdk.operatorframework.io/docs/olm-integration/generation/#csv-fields)
    中的操作员框架文档。
- en: The CSV is one of several new files created in the project after running `make
    bundle`. The majority of these new files are created under a new directory called
    `bundle/`. There is also a new file at the root of the project called `bundle.Dockerfile`,
    which is used to compile the manifests into the bundle image.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: CSV 是在运行 `make bundle` 后，在项目中创建的多个新文件之一。这些新文件大多数位于名为 `bundle/` 的新目录下。在项目根目录下，还有一个名为
    `bundle.Dockerfile` 的新文件，用于将清单编译成 bundle 镜像。
- en: Exploring the bundle files
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 浏览 bundle 文件
- en: 'The files generated by `make bundle` contain metadata about the Operator that
    can be used by the OLM to install and manage the Operator, as well as OperatorHub,
    to provide information to users about the Operator and its dependencies and capabilities.
    Within the `bundle/` directory are three subdirectories that contain the following
    files:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 由 `make bundle` 生成的文件包含有关操作员的元数据，可供 OLM 用于安装和管理操作员，且 OperatorHub 会提供有关操作员及其依赖关系和功能的信息。在
    `bundle/` 目录下，有三个子目录，包含以下文件：
- en: '`tests/`: These are configuration files for running scorecard tests, which
    are a series of tests designed to validate the Operator''s bundle (see [https://sdk.operatorframework.io/docs/testing-operators/scorecard](https://sdk.operatorframework.io/docs/testing-operators/scorecard)).'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tests/`：这些是用于运行 scorecard 测试的配置文件，scorecard 测试是一系列用于验证操作员包的测试（请参见 [https://sdk.operatorframework.io/docs/testing-operators/scorecard](https://sdk.operatorframework.io/docs/testing-operators/scorecard)）。'
- en: '`metadata/`: This contains an `annotations.yaml` file, which provides the OLM
    with information about an Operator''s version and dependencies. The annotations
    in this file must be the same as the labels specified in `bundle.Dockerfile` (more
    on that file shortly), and should usually not be modified.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`metadata/`：该目录包含一个 `annotations.yaml` 文件，向 OLM 提供关于操作员版本和依赖关系的信息。此文件中的注解必须与
    `bundle.Dockerfile` 中指定的标签相同（稍后将详细介绍该文件），并且通常不应修改。'
- en: '`manifests/`: This directory contains various manifests required by your operator,
    including the Operator''s CRD and metrics-related resources (if applicable). Most
    notably, however, is the CSV, which contains the bulk of the Operator''s metadata.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`manifests/`：此目录包含您的操作员所需的各种清单文件，包括操作员的CRD和与度量相关的资源（如果适用）。然而，最值得注意的是CSV，它包含操作员的大部分元数据。'
- en: 'The Operator''s CSV is the most interesting of these files, as it contains
    much of the information used by the OLM to process the creation of the Operator,
    as well as OperatorHub, to display important information to users about the Operator.
    The one created for our nginx Operator is named `nginx-operator.clusterserviceversion.yaml`,
    and contains the following sections:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 操作员的CSV是这些文件中最有趣的部分，因为它包含了OLM用于处理操作员创建的许多信息，以及OperatorHub，用于向用户展示有关操作员的重要信息。为我们的nginx操作员创建的CSV文件名为`nginx-operator.clusterserviceversion.yaml`，并包含以下部分：
- en: 'Metadata, including a sample custom resource object (to be created by the user
    for configuring the Operator) and its capability level:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 元数据，包括一个样本自定义资源对象（由用户创建以配置操作员）及其能力级别：
- en: '[PRE4]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'A specification field with the Operator''s description, display name, display
    icon (if provided), and related CRDs:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个规格字段，包含操作员的描述、显示名称、显示图标（如果提供）和相关的CRD：
- en: '[PRE5]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Installation instructions, including the cluster permissions and Deployment
    specification for the Operator Pod (omitted here for brevity).
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装说明，包括操作员Pod的集群权限和部署规范（这里为了简洁省略）。
- en: 'The install modes for the Operator, showing which namespace installation strategies
    it supports:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 操作员的安装模式，显示它支持哪些命名空间安装策略：
- en: '[PRE6]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Keywords, maintainer information, provider URL, and version (as provided when
    running `make bundle`):'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关键词、维护者信息、提供者URL以及版本（在运行`make bundle`时提供）：
- en: '[PRE7]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Together, this information can be packaged together to provide enough data for
    the OLM to deploy and manage the Operator in a cluster. That package is known
    as the bundle image.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 综合这些信息，可以将它们打包在一起，为OLM提供足够的数据，以便在集群中部署和管理操作员。该包被称为捆绑镜像。
- en: Building a bundle image
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建捆绑镜像
- en: 'Once the bundle manifests have been generated, the bundle image can be built
    by calling `make bundle-build`. This command builds a Docker container based on
    the `bundle.Dockerfile` file that was generated earlier by `make bundle`. That
    `Dockerfile` file contains the following instructions:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦捆绑清单文件生成完毕，可以通过调用`make bundle-build`来构建捆绑镜像。此命令基于之前通过`make bundle`生成的`bundle.Dockerfile`文件构建一个Docker容器。该`Dockerfile`文件包含以下指令：
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Similar to the main `Dockerfile` file used to compile the Operator image in
    [*Chapter 6*](B18147_06_ePub.xhtml#_idTextAnchor090), *Building and Deploying
    Your Operator*, one of the key steps in this Dockerfile's build is to copy the
    essential bundle files from the `bundle/` directory into its own image (highlighted
    in the preceding code block). It also labels the resulting image with various
    metadata about the operator, its versions, and the tools used to build it.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于在[*第六章*](B18147_06_ePub.xhtml#_idTextAnchor090)中用于编译操作员镜像的主`Dockerfile`文件，*构建和部署您的操作员*，此Dockerfile构建过程中的关键步骤之一是将`bundle/`目录中的必要捆绑文件复制到其自己的镜像中（如前面的代码块所示）。它还会为生成的镜像打上关于操作员、其版本和构建工具的各种元数据标签。
- en: 'Running `make bundle-build` produces the following build log:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`make bundle-build`将生成以下构建日志：
- en: '[PRE26]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'However, note that the name of the new container image is `example.com/nginx-operator-bundle`,
    which you can confirm by running `docker images`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，请注意，新容器镜像的名称为`example.com/nginx-operator-bundle`，您可以通过运行`docker images`来确认：
- en: '[PRE27]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This generic name is used because `make bundle-build` depends on a different
    environment variable than the `IMG` variable that was used earlier to build the
    Operator image manually (and generate the bundle manifests). To set a custom bundle
    image name, either tag the generated image or re-run `make bundle-build` with
    the `BUNDLE_IMG` variable set. An example is shown here:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个通用名称是因为`make bundle-build`依赖于与之前手动构建操作员镜像时使用的`IMG`变量不同的环境变量（并生成捆绑清单文件）。要设置自定义的捆绑镜像名称，可以给生成的镜像打标签，或重新运行`make
    bundle-build`并设置`BUNDLE_IMG`变量。示例如下：
- en: '[PRE28]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This will generate the bundle image with the name `docker.io/myregistry/nginx-bundle:v0.0.1`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成名为`docker.io/myregistry/nginx-bundle:v0.0.1`的捆绑镜像。
- en: Pushing a bundle image
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 推送捆绑镜像
- en: Recall that in [*Chapter 6*](B18147_06_ePub.xhtml#_idTextAnchor090), *Building
    and Deploying Your Operator*, it was necessary to not only build the container
    image for the Operator but also push it to a publicly accessible registry. This
    made the image available to our Kubernetes cluster. Similarly, the bundle image
    must also be accessible by the cluster (and the OLM). For this reason, we must
    also push the bundle image to a registry so that the OLM can pull it into the
    cluster.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下，在[*第6章*](B18147_06_ePub.xhtml#_idTextAnchor090)中，*构建和部署您的操作员*，不仅需要构建操作员的容器镜像，还需要将其推送到一个公开可访问的注册表。这使得镜像可以在我们的Kubernetes集群中使用。同样，包镜像也必须可以被集群（以及OLM）访问。因此，我们必须将包镜像推送到一个注册表，以便OLM能够将其拉取到集群中。
- en: 'The Operator SDK makes this step easy with the `make bundle-push` command:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 操作员SDK通过`make bundle-push`命令使这一步变得容易：
- en: '[PRE29]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This command simply calls `docker push`, but it inherits the environment variables
    that have been set and used in previous commands (for example, `BUNDLE_IMG`).
    This convenience helps reduce the chance of making a mistake and pushing the wrong
    image name to the wrong registry.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令只是调用`docker push`，但它继承了之前命令中设置和使用的环境变量（例如，`BUNDLE_IMG`）。这种便捷性有助于减少出错的机会，避免将错误的镜像名称推送到错误的注册表。
- en: Deploying an Operator bundle with the OLM
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用OLM部署操作员包
- en: 'With a bundle image built and pushed to an accessible registry, it is simple
    to deploy the Operator from its bundle with the `operator-sdk run bundle` command.
    For example, we can now deploy the nginx Operator bundle from the previous section
    by running the following:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 通过构建并推送到一个可访问的注册表的包镜像，可以简单地使用`operator-sdk run bundle`命令从其包中部署操作员。例如，我们现在可以通过运行以下命令部署上一节中的nginx操作员包：
- en: '[PRE30]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Note
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This command may take a few minutes to succeed. However, if the Operator's `ClusterServiceVersion`
    object fails to install, double-check that you have followed the steps to install
    **kube-prometheus** in the cluster, as detailed in [*Chapter 6*](B18147_06_ePub.xhtml#_idTextAnchor090),
    *Building and Deploying Your Operator*. If the Operator bundle has been built
    to include references to Prometheus resources, and these resources are not present
    in the cluster, this can cause the Operator's installation to fail.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令可能需要几分钟才能成功。然而，如果操作员的`ClusterServiceVersion`对象安装失败，请仔细检查是否按照[*第6章*](B18147_06_ePub.xhtml#_idTextAnchor090)中详细说明的步骤在集群中安装了**kube-prometheus**。如果操作员包已经构建并包含了对Prometheus资源的引用，但这些资源在集群中不存在，就可能导致操作员的安装失败。
- en: This command creates the resources necessary for the OLM to install the nginx
    Operator using only the information in the Operator's bundle, including `CatalogSource`,
    `OperatorGroup`, `Subscription`, and `InstallPlan`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令创建了OLM安装nginx操作员所需的资源，这些资源仅包括操作员包中的信息，如`CatalogSource`、`OperatorGroup`、`Subscription`和`InstallPlan`。
- en: 'The Operator can then be uninstalled using the `operator-sdk cleanup <packageName>`
    command, where `<packageName>` is defined in the Operator''s `PROJECT` file as
    `projectName`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，操作员可以通过`operator-sdk cleanup <packageName>`命令卸载，其中`<packageName>`在操作员的`PROJECT`文件中定义为`projectName`：
- en: '[PRE31]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This concludes the normal development workflow for building and deploying Operators
    with the OLM manually. However, there is another source for Operators to install
    in a cluster. This is **OperatorHub**, and it is the focus of the next section.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这标志着手动使用OLM构建和部署操作员的正常开发工作流程的结束。然而，仍然有另一个来源可以用来在集群中安装操作员。这个来源就是**OperatorHub**，它是下一节的重点。
- en: Working with OperatorHub
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用OperatorHub
- en: 'Any successful open source project requires a dedicated community of users
    and developers to help the project''s ecosystem thrive. The Operator Framework
    is no different, and at the center of this community is the Operator catalog of
    [https://operatorhub.io/](https://operatorhub.io/). In fact, this centralization
    is the exact goal of OperatorHub, as stated on [https://operatorhub.io/about](https://operatorhub.io/about):'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 任何成功的开源项目都需要一个专门的用户和开发者社区来帮助项目的生态系统繁荣。操作员框架也不例外，在这个社区的核心是[https://operatorhub.io/](https://operatorhub.io/)的操作员目录。事实上，这种集中化正是OperatorHub的目标，正如在[https://operatorhub.io/about](https://operatorhub.io/about)中所述：
- en: While there are several approaches to implement Operators yielding the same
    level of integration with Kubernetes, what has been missing is a central location
    to find the wide array of great Operators that have been built by the community.
    OperatorHub.io aims to be that central location.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有多种方法可以实现与Kubernetes相同级别的集成，但一直缺少一个中央位置，供用户查找由社区构建的各种优秀操作员。OperatorHub.io旨在成为这个中央位置。
- en: Launched in 2019 by a collaborative effort between **Red Hat**, **AWS**, **Google
    Cloud**, and **Microsoft**, OperatorHub has been a driving force in the growth
    and adoption of Kubernetes Operators. As of the time of writing, the OperatorHub
    index contains over 200 Operators (and this number continues to grow). Backed
    by only a public GitHub repository and many volunteer maintainers, the open concept
    of catalog moderation and acceptance of OperatorHub supports the very ideals of
    Kubernetes, by allowing anyone from any organization to contribute their Operator
    to the catalog and make it accessible to all.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: OperatorHub由**Red Hat**、**AWS**、**Google Cloud**和**Microsoft**于2019年共同推出，一直在推动Kubernetes操作员的增长和采纳。截至写作时，OperatorHub索引包含了超过200个操作员（这一数字仍在增长）。该平台仅由一个公开的GitHub仓库和许多志愿者维护者支持，OperatorHub开放式的目录管理和操作员接受机制也支持了Kubernetes的核心理念，允许任何组织的任何人将自己的操作员贡献到目录中，并让所有人都能访问。
- en: In short, OperatorHub makes it easy to promote your own Operators, as well as
    finding and installing Operators developed by other providers. In this section,
    we'll demonstrate how to do both of these by working with the OperatorHub website
    and backend.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，OperatorHub使得推广自己的操作员变得简单，同时也可以方便地找到并安装由其他提供者开发的操作员。在本节中，我们将演示如何通过操作OperatorHub网站和后端来实现这两个目标。
- en: Installing Operators from OperatorHub
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从OperatorHub安装操作员
- en: Installing an Operator from OperatorHub in your own Kubernetes cluster is very
    easy using the catalog on [https://operatorhub.io/](https://operatorhub.io/).
    You can begin by browsing the list of all available Operators, or by searching
    in the text box on the OperatorHub home page. You can also narrow down your search
    by category (available categories include **AI/Machine Learning**, **Big Data**,
    **Cloud Provider**, and **Monitoring**).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在自己的Kubernetes集群中从OperatorHub安装操作员非常简单，可以使用[https://operatorhub.io/](https://operatorhub.io/)上的目录。你可以通过浏览所有可用操作员的列表来开始，或者通过OperatorHub主页上的搜索框进行搜索。你还可以通过类别来缩小搜索范围（可用类别包括**AI/机器学习**、**大数据**、**云提供商**和**监控**）。
- en: 'For an arbitrary example, the **Grafana** Operator can be found under **Monitoring**.
    Grafana is an analytics and monitoring visualization platform that provides rich,
    insightful tools for viewing application health. The following is a screenshot
    showing **Grafana Operator** and others available in the **Monitoring** category
    on OperatorHub:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个任意的示例，**Grafana** Operator可以在**Monitoring**（监控）类别下找到。Grafana是一个分析和监控可视化平台，提供丰富的、有洞察力的工具来查看应用程序的健康状况。以下是**Grafana
    Operator**及其他在OperatorHub的**Monitoring**类别中可用的操作员截图：
- en: '![Figure 7.1 – Screenshot of the OperatorHub Monitoring category](img/B18147_07_001.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图7.1 – OperatorHub监控类别截图](img/B18147_07_001.jpg)'
- en: Figure 7.1 – Screenshot of the OperatorHub Monitoring category
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.1 – OperatorHub监控类别截图
- en: 'Clicking on the **Grafana Operator** tile opens up the information page for
    this specific Operator. This page includes information such as the Operator''s
    current functionality level in the Capability Model, which versions of the Operator
    have been published, and information about the provider and maintainer of the
    Operator. The following is a screenshot showing what the **Grafana Operator**
    information page looks like on OperatorHub:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**Grafana Operator**图标将打开该操作员的详细信息页面。该页面包括操作员当前在功能模型中的功能级别、发布过的操作员版本、以及操作员提供者和维护者的信息。以下是**Grafana
    Operator**在OperatorHub上的信息页面截图：
- en: '![Figure 7.2 – Grafana Operator information page](img/B18147_07_002.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![图7.2 – Grafana Operator信息页面](img/B18147_07_002.jpg)'
- en: Figure 7.2 – Grafana Operator information page
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.2 – Grafana Operator信息页面
- en: 'Also available on this page are installation instructions for this Operator,
    found by clicking the `install` command for this Operator. This is shown in the
    following screenshot of the Grafana Operator installation instructions:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 本页面还提供了此操作员的安装说明，可以通过点击该操作员的`install`命令来查看。以下是Grafana Operator安装说明的截图：
- en: '![Figure 7.3 – Grafana Operator installation instructions](img/B18147_07_003.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图7.3 – Grafana Operator安装说明](img/B18147_07_003.jpg)'
- en: Figure 7.3 – Grafana Operator installation instructions
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.3 – Grafana Operator 安装说明
- en: 'Running this command in a terminal produces the following output:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中运行此命令会产生以下输出：
- en: '[PRE32]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Following this, the new namespace, `my-grafana-operator`, has been created
    with the resources necessary for this Operator:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，新的命名空间 `my-grafana-operator` 已经创建，并具备了该 Operator 所需的资源：
- en: '[PRE33]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: In addition, this command also created an `OperatorGroup` object and `Subscription`
    object for this Operator. These resource types are CRDs that were installed in
    the cluster by the OLM and implemented by individual Operators to represent their
    installation. The details about what each of these objects does are available
    in the OperatorHub documentation at [https://operatorhub.io/how-to-install-an-operator](https://operatorhub.io/how-to-install-an-operator),
    but in summary, they define the user's (your) intent to install the Operator and
    inform the OLM about the location of the Operator's metadata on OperatorHub. The
    OLM uses this information to create the Deployment, Service, and other resources
    needed for the new Operator.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，此命令还为该 Operator 创建了 `OperatorGroup` 对象和 `Subscription` 对象。这些资源类型是由 OLM 安装在集群中的
    CRD，由各个 Operator 实现，用来表示它们的安装。这些对象的作用详细信息可以在 OperatorHub 文档中找到，链接为 [https://operatorhub.io/how-to-install-an-operator](https://operatorhub.io/how-to-install-an-operator)，但总的来说，它们定义了用户（即你）安装该
    Operator 的意图，并告知 OLM Operator 的元数据在 OperatorHub 上的位置。OLM 使用这些信息来创建新 Operator 所需的
    Deployment、Service 及其他资源。
- en: Once an Operator has been installed, it is usually up to the user to create
    the configuration CRD object for that Operator. With so many different CRDs floating
    around, this can get confusing to keep track of. However, many of these CRDs (such
    as `OperatorGroup` and `Subscription`) are installed and managed automatically
    by tools such as the OLM, and they do not require manual interaction. Generally,
    the user is only concerned with the CRD object for a specific Operator's configuration
    (such as the one that we created for our nginx Operator). Most Operator `README`
    files and OperatorHub descriptions will contain example CRDs and steps to get
    started with each Operator (and it is a good practice to do so with your own Operator
    as well).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 Operator 被安装，通常由用户创建该 Operator 的配置 CRD 对象。由于有这么多不同的 CRD，这可能会让人感到困惑。然而，许多
    CRD（如 `OperatorGroup` 和 `Subscription`）是由 OLM 等工具自动安装和管理的，不需要手动干预。通常，用户只需要关心特定
    Operator 配置的 CRD 对象（例如我们为 nginx Operator 创建的那个）。大多数 Operator 的 `README` 文件和 OperatorHub
    描述中会包含示例 CRD 和开始使用每个 Operator 的步骤（这也是一个很好的做法，适用于你自己的 Operator）。
- en: Speaking of your own Operator, contributing to the OperatorHub catalog is almost
    as easy as installing Operators from it. In the next section, we'll look at how
    each of these Operators made their way onto OperatorHub and how yours can, too.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 说到你自己的 Operator，贡献到 OperatorHub 目录几乎和从中安装 Operators 一样简单。在接下来的章节中，我们将看看这些 Operators
    如何进入 OperatorHub，以及你的 Operator 如何也能做到这一点。
- en: Submitting your own Operator to OperatorHub
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将自己的 Operator 提交到 OperatorHub
- en: While it is not required to publish any Operator publicly, many providers choose
    to do so, both for the benefit of the community and their own users. If the Operator
    you have developed is used to manage an application you offer to your users, public
    availability of the Operator can increase awareness of the application and bolster
    your organization's reputation among the open source community. Offering a free
    Operator shows your users that you are invested in providing a stable product
    with minimal engineering hours required on their part.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然公开发布任何 Operator 不是必需的，但许多提供商选择这样做，既是为了社区的利益，也是为了自身用户的利益。如果你开发的 Operator 被用来管理你提供给用户的应用程序，那么该
    Operator 的公开可用性可以提高该应用程序的知名度，并增强你在开源社区中的声誉。提供一个免费的 Operator 向你的用户表明，你致力于提供一个稳定的产品，并且用户无需投入过多工程时间。
- en: What Is Required from Operator SDK Projects?
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Operator SDK 项目需要什么？
- en: The Operator SDK, like many Kubernetes projects, is released under the **Apache
    2.0 License**. This gives permissive usability of the project for commercial use,
    distribution, and private use (among other use cases). More information on the
    Operator SDK license is available at [https://github.com/operator-framework/operator-sdk/blob/master/LICENSE](https://github.com/operator-framework/operator-sdk/blob/master/LICENSE).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: Operator SDK，像许多 Kubernetes 项目一样，是在**Apache 2.0 许可证**下发布的。这为项目的商业使用、分发和私人使用（以及其他使用场景）提供了宽松的许可。有关
    Operator SDK 许可证的更多信息，请访问[https://github.com/operator-framework/operator-sdk/blob/master/LICENSE](https://github.com/operator-framework/operator-sdk/blob/master/LICENSE)。
- en: 'Because the nginx Operator that we have been developing throughout this book
    is only intended as a tutorial (and not meant for public use), we cannot demonstrate
    the process for submitting it to OperatorHub. However, the general process for
    submitting an Operator to OperatorHub is outlined at [https://operatorhub.io/contribute](https://operatorhub.io/contribute).
    In broad terms, this involves the following steps:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们在本书中开发的 nginx Operator 仅作为教程使用（并不适用于公开使用），所以我们无法演示提交到 OperatorHub 的过程。然而，提交
    Operator 到 OperatorHub 的一般过程已在[https://operatorhub.io/contribute](https://operatorhub.io/contribute)中列出。大致而言，这涉及以下步骤：
- en: Develop an Operator that is ready for publishing.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开发一个已准备好发布的 Operator。
- en: Generate the Operator's bundle, including its CSV and related CRDs.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成 Operator 的包，包括其 CSV 和相关的 CRD。
- en: Create a **pull request** (**PR**) against the OperatorHub repository on GitHub
    ([https://github.com/k8s-operatorhub/community-operators](https://github.com/k8s-operatorhub/community-operators))
    with your Operator's metadata.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个针对 GitHub 上 OperatorHub 仓库的**拉取请求**（**PR**），并附上你的 Operator 元数据，[https://github.com/k8s-operatorhub/community-operators](https://github.com/k8s-operatorhub/community-operators)。
- en: If you have been following the steps in this book up until this point, then
    you are already familiar with the first two steps. However, the third step is
    the most important part of submitting to OperatorHub, because the GitHub repository
    represents the entire catalog of Operators listed on OperatorHub. So, without
    the proper PR changes necessary to merge your Operator's information into this
    repository, it will not show up on OperatorHub.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你一直在按照本书的步骤进行操作，那么你已经熟悉了前两个步骤。然而，第三步是提交到 OperatorHub 最关键的一部分，因为 GitHub 仓库代表了在
    OperatorHub 上列出的所有 Operator 的目录。因此，若没有必要的 PR 修改将你的 Operator 信息合并到这个仓库中，它将不会出现在
    OperatorHub 上。
- en: Which OperatorHub Repository is which?
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 哪个是 OperatorHub 仓库？
- en: Some outdated documentation that is still available refers to two different
    OperatorHub repository locations, `community-operators` and `upstream-community-operators`,
    which were originally subdirectories of the now-archived OperatorHub repository
    at [https://github.com/operator-framework/community-operators](https://github.com/operator-framework/community-operators).
    The former is a remnant of the initial work done by Red Hat to publish OperatorHub
    (specifically, it refers to a location that was reserved for Operators to be listed
    on an integrated version of OperatorHub within Red Hat's OpenShift distribution
    of Kubernetes). This OpenShift-specific Operator index has since been decoupled
    from the community repository referenced earlier. There is documentation available
    for contributing to the OpenShift catalog for developers who are interested in
    doing so, but this chapter will focus on the community OperatorHub, which is platform-agnostic.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 一些仍然可用的过时文档提到了两个不同的 OperatorHub 仓库位置，`community-operators` 和 `upstream-community-operators`，这些位置最初是现已归档的
    OperatorHub 仓库的子目录，地址为 [https://github.com/operator-framework/community-operators](https://github.com/operator-framework/community-operators)。前者是
    Red Hat 最初用于发布 OperatorHub 时的遗留物（具体来说，它指的是一个位置，预留给在 Red Hat 的 OpenShift Kubernetes
    发行版中集成版本的 OperatorHub 上列出的 Operators）。这个 OpenShift 特定的 Operator 索引现已与之前提到的社区仓库脱钩。对于有兴趣贡献
    OpenShift 目录的开发者，已有相关文档，但本章将专注于社区版 OperatorHub，它是平台无关的。
- en: 'The steps to submit your Operator through GitHub are as follows (these steps
    assume some prior familiarity with GitHub and the fork/PR processes involved):'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 GitHub 提交 Operator 的步骤如下（这些步骤假定你已经熟悉 GitHub 以及相关的分叉/PR 流程）：
- en: Fork the OperatorHub repository ([https://github.com/k8s-operatorhub/community-operators](https://github.com/k8s-operatorhub/community-operators))
    into your own GitHub account. This allows you to clone a local copy of the repository
    to your machine and make changes to it that will later be pulled into the upstream
    catalog via your PR.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 OperatorHub 仓库 ([https://github.com/k8s-operatorhub/community-operators](https://github.com/k8s-operatorhub/community-operators))
    fork 到你自己的 GitHub 账户中。这允许你将仓库的本地副本克隆到你的机器上，并对其进行更改，稍后这些更改将通过 PR 拉取到上游目录中。
- en: Create a new folder for your Operator under the `operators/` directory. It must
    have a unique name from all other Operators (for example, we could create `operators/nginx-operator`).
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `operators/` 目录下为你的 Operator 创建一个新文件夹。它必须具有一个独特的名称，与其他所有 Operators 不重复（例如，我们可以创建
    `operators/nginx-operator`）。
- en: 'Create a new file called `ci.yaml` in this directory. This file defines versioning
    semantics as well as the reviewers allowed to make changes to your Operator (more
    information available at [https://k8s-operatorhub.github.io/community-operators/operator-ci-yaml/](https://k8s-operatorhub.github.io/community-operators/operator-ci-yaml/)).
    A simple `ci.yaml` file looks like the following:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在该目录中创建一个名为 `ci.yaml` 的新文件。此文件定义了版本控制语义以及允许更改你 Operator 的审阅者（更多信息请见 [https://k8s-operatorhub.github.io/community-operators/operator-ci-yaml/](https://k8s-operatorhub.github.io/community-operators/operator-ci-yaml/)）。一个简单的
    `ci.yaml` 文件如下所示：
- en: '[PRE34]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Create a directory in your Operator's folder for each version you wish to publish
    (for example, `operators/nginx-operator/0.0.1`).
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的 Operator 文件夹中为每个你希望发布的版本创建一个目录（例如，`operators/nginx-operator/0.0.1`）。
- en: Copy the contents of the `bundle` directory from your Operator's project into
    the new version folder.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你 Operator 项目中 `bundle` 目录的内容复制到新版本文件夹中。
- en: Also, copy the `bundle.Dockerfile` that was generated at your Operator's project
    root into the version folder.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，将在你 Operator 项目根目录生成的 `bundle.Dockerfile` 复制到版本文件夹中。
- en: Commit and push the changes to a new branch of your forked OperatorHub repository
    on GitHub.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将更改提交并推送到你在 GitHub 上的 forked OperatorHub 仓库的新分支。
- en: Navigate back to the upstream OperatorHub repository's PR page ([https://github.com/k8s-operatorhub/community-operators/pulls](https://github.com/k8s-operatorhub/community-operators/pulls))
    and click **New pull request**. Choose your fork and branch to merge into the
    upstream repository.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回上游 OperatorHub 仓库的 PR 页面（[https://github.com/k8s-operatorhub/community-operators/pulls](https://github.com/k8s-operatorhub/community-operators/pulls)），然后点击
    **New pull request**。选择你的 fork 和分支以合并到上游仓库。
- en: 'Read the PR template description and ensure that you have followed all of the
    steps outlined. These prerequisite steps help expedite the review and approval
    process of your Operator''s PR and include the following:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 阅读 PR 模板描述，确保你已遵循所有列出的步骤。这些前置步骤有助于加速你 Operator PR 的审查和批准过程，包括以下内容：
- en: Reviewing the community contribution guidelines
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 审查社区贡献指南
- en: Testing your Operator in a local cluster
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本地集群中测试你的 Operator
- en: Verifying your Operator's metadata aligns with the standards of OperatorHub
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证你的 Operator 元数据是否符合 OperatorHub 的标准
- en: Ensuring your Operator's description and versioning schema are sufficient for
    your users
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你的 Operator 描述和版本控制方案足以满足用户需求
- en: Once you have reviewed the pre-submission checks in the PR template, submit
    your request. At this point, automated checks will validate your Operator's metadata
    to ensure it passes the quality thresholds for submission (and report any problems
    in a GitHub comment). If you need to make any changes to your submission in order
    for it to pass these checks, you can simply push the changes to your forked branch
    of the OperatorHub repository.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你审查了 PR 模板中的预提交检查，提交你的请求。此时，自动化检查将验证你的 Operator 元数据，以确保它通过提交质量阈值（并在 GitHub
    评论中报告任何问题）。如果你需要对提交进行更改以使其通过这些检查，你可以简单地将更改推送到你 fork 的 OperatorHub 仓库分支。
- en: Once your PR passes the pre-submission checks, it should automatically merge
    your changes into the upstream repository. Soon thereafter, your Operator will
    be visible on [https://operatorhub.io/](https://operatorhub.io/) for the world
    to install!
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的 PR 通过预提交检查，它应自动将你的更改合并到上游仓库。此后不久，你的 Operator 将在 [https://operatorhub.io/](https://operatorhub.io/)
    上可见，供全球用户安装！
- en: Troubleshooting
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 故障排除
- en: While this chapter introduced some new concepts, including the OLM and OperatorHub,
    many of the resources already listed in earlier *Troubleshooting* sections throughout
    this book still apply.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管本章介绍了一些新概念，包括 OLM 和 OperatorHub，但本书之前*故障排除*章节中列出的大多数资源仍然适用。
- en: OLM support
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OLM 支持
- en: The OLM and its related resources are related in general to Operator SDK development.
    So, there is reasonable help for this topic available in the `#operator-sdk-dev`
    Slack channel on [slack.k8s.io](http://slack.k8s.io). The OLM is also available
    on GitHub for reporting issues at [https://github.com/operator-framework/operator-lifecycle-manager](https://github.com/operator-framework/operator-lifecycle-manager).
    The documentation for integrating an Operator with the OLM is available as a primary
    resource at [https://sdk.operatorframework.io/docs/olm-integration/](https://sdk.operatorframework.io/docs/olm-integration/).
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: OLM 及其相关资源通常与 Operator SDK 开发相关。因此，关于这一主题的合理帮助可以在 `#operator-sdk-dev` Slack
    渠道找到，网址为 [slack.k8s.io](http://slack.k8s.io)。OLM 的相关代码也可以在 GitHub 上报告问题，地址是 [https://github.com/operator-framework/operator-lifecycle-manager](https://github.com/operator-framework/operator-lifecycle-manager)。集成
    Operator 与 OLM 的文档可以作为主要资源访问，网址为 [https://sdk.operatorframework.io/docs/olm-integration/](https://sdk.operatorframework.io/docs/olm-integration/)。
- en: OperatorHub support
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OperatorHub 支持
- en: OperatorHub is also available on GitHub at the catalog repository shown in this
    chapter ([https://github.com/k8s-operatorhub/community-operators](https://github.com/k8s-operatorhub/community-operators)).
    For issues with the frontend [https://operatorhub.io/](https://operatorhub.io/)
    website specifically, that code is located at [https://github.com/k8s-operatorhub/operatorhub.io](https://github.com/k8s-operatorhub/operatorhub.io).
    This repository provides detailed documentation on all of the necessary metadata
    and bundle files for OperatorHub submission (as well as the submission process
    itself) at [https://k8s-operatorhub.github.io/community-operators/](https://k8s-operatorhub.github.io/community-operators/).
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: OperatorHub 也可以在 GitHub 上访问，地址是本章所示的目录仓库 ([https://github.com/k8s-operatorhub/community-operators](https://github.com/k8s-operatorhub/community-operators))。对于前端
    [https://operatorhub.io/](https://operatorhub.io/) 网站的具体问题，相关代码位于 [https://github.com/k8s-operatorhub/operatorhub.io](https://github.com/k8s-operatorhub/operatorhub.io)。该仓库提供了关于提交到
    OperatorHub 所需的所有元数据和打包文件的详细文档（以及提交流程本身），可访问 [https://k8s-operatorhub.github.io/community-operators/](https://k8s-operatorhub.github.io/community-operators/)。
- en: 'OperatorHub also provides validators and tools for previewing your Operator''s
    submission prior to creating a PR against the repository. The preview tool is
    available at [https://operatorhub.io/preview](https://operatorhub.io/preview).
    Submitting the generated CSV in this tool will show a preview of how your Operator
    will look once it is submitted to OperatorHub:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: OperatorHub 还提供了验证工具和工具，用于在向仓库创建 PR 之前预览你 Operator 的提交。预览工具可通过 [https://operatorhub.io/preview](https://operatorhub.io/preview)
    访问。在该工具中提交生成的 CSV 文件将显示你提交到 OperatorHub 后，Operator 的预览效果：
- en: '![Figure 7.4 – Screenshot of the Nginx Operator preview on OperatorHub](img/B18147_07_004.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.4 – OperatorHub 上 Nginx Operator 预览的截图](img/B18147_07_004.jpg)'
- en: Figure 7.4 – Screenshot of the Nginx Operator preview on OperatorHub
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.4 – OperatorHub 上 Nginx Operator 预览的截图
- en: Previewing an Operator's presentation can be a very helpful manual step in testing
    that all of the metadata prepared for that Operator is going to present to new
    users in the way that you want. It can be easy to lose track of the confusing
    CRD and CSV definitions, so previewing it gives early visual confirmation that
    everything is set up correctly. It also verifies that the metadata is syntactically
    valid.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 预览一个 Operator 的展示可以是一个非常有用的手动步骤，帮助测试为该 Operator 准备的所有元数据是否能够按照你期望的方式展示给新用户。由于
    CRD 和 CSV 定义可能比较混乱，很容易失去追踪，因此预览能够提供早期的视觉确认，确保一切设置正确。同时，它还验证了元数据的语法有效性。
- en: Summary
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter concluded the primary development and publication of an Operator.
    If you have been following along up until this point while developing your own
    Operator, then congratulations! Your Operator is now published and accessible
    to new users thanks to the reach of OperatorHub. Starting from the early chapters
    of this book, we have shown the steps to design an Operator, develop its basic
    and advanced functionality with Go, build and deploy it for local testing, and
    finally, package and publish it for public distribution. However, very few Operator
    project life cycles will end at this point.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 本章总结了 Operator 的主要开发和发布过程。如果你从一开始就跟随本书开发自己的 Operator，那么恭喜你！你的 Operator 现在已经发布，并通过
    OperatorHub 的影响力可供新用户访问。从本书的早期章节开始，我们展示了设计 Operator 的步骤，使用 Go 开发其基本和高级功能，构建并部署到本地进行测试，最终打包并发布以供公开分发。然而，很少有
    Operator 项目的生命周期会在此时结束。
- en: It is likely that most Operators will eventually need to evolve, change their
    provided features, and release new versions. Doing so in a consistent and predictable
    way benefits both your users and your maintainers by establishing expected release
    standards. These standards include policies for deprecation and timelines for
    new releases. In the next chapter, we will explain some of the existing best practices
    used among Kubernetes projects and provoke forward-looking thoughts about how
    to prepare for the ongoing maintenance and development of your new Operator.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数操作符最终可能需要演变、改变其提供的功能，并发布新版本。以一致和可预测的方式进行这些操作，有利于你的用户和维护人员，通过建立预期的发布标准。这些标准包括弃用政策和新版本发布的时间表。在下一章中，我们将解释一些Kubernetes项目中已有的最佳实践，并引发关于如何为新操作符的持续维护和开发做好准备的前瞻性思考。

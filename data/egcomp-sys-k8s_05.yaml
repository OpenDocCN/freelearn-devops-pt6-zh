- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: K3s Homelab for Edge Computing Experiments
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: K3s家庭实验室用于边缘计算实验
- en: At this point, we have explored essential topics to create your own edge computing
    cluster. The previous chapters covered how to configure and install a K3s cluster.
    Building small and big solutions at home involves experimenting. In this chapter,
    we are going to start building a simple but real cluster, using the knowledge
    acquired in the previous chapters. We will refer to this environment as the K3s
    homelab. Once this cluster is created, we are going to deploy a simple application.
    We will use this as a quickstart method of using Kubernetes with your cluster.
    In the last part of this chapter, we are going to use the Kubernetes dashboard
    as a simple UI to manage Kubernetes clusters.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经探讨了创建自己的边缘计算集群的基本主题。前几章介绍了如何配置和安装K3s集群。在家中构建小型和大型解决方案涉及到实验。本章中，我们将开始构建一个简单但真实的集群，使用之前章节中获得的知识。我们将这个环境称为K3s家庭实验室。创建该集群后，我们将部署一个简单的应用程序。我们将使用这种方法作为快速启动使用Kubernetes与集群的方式。在本章的最后部分，我们将使用Kubernetes仪表板作为管理Kubernetes集群的简单UI。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Installing a multi-node K3s cluster on your local network
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在本地网络上安装多节点K3s集群
- en: Deploying your first application with `kubectl`
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`kubectl`部署你的第一个应用程序
- en: Deploying a simple NGINX server using YAML files
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用YAML文件部署简单的NGINX服务器
- en: Adding persistence to your applications
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为你的应用程序添加持久性
- en: Deploying a Kubernetes dashboard
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署Kubernetes仪表板
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For this chapter, you need the following hardware to create your K3s homelab
    for your edge computing applications or experiments:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你需要以下硬件来创建你的K3s家庭实验室，用于边缘计算应用或实验：
- en: Two or more Raspberry Pi 4 B models with a minimum of 4 GB RAM and a 32 GB microSD
    card with Ubuntu version 20.04 or later. The SanDisk Extreme microSDHC 32 GB UHS-1
    A1 V30 or similar is recommended as the microSD card.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个或更多的Raspberry Pi 4 B模型，至少4GB RAM和32GB microSD卡，Ubuntu版本20.04或更高版本。推荐使用SanDisk
    Extreme microSDHC 32 GB UHS-1 A1 V30或类似的microSD卡。
- en: Ethernet cables to connect your Raspberries.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以太网电缆，用于连接你的Raspberry。
- en: An Ethernet internet connection for the Raspberries with **Dynamic Host Configuration
    Protocol** (**DHCP**) activated.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个以太网互联网连接，Raspberry的**动态主机配置协议**（**DHCP**）已启用。
- en: One switch to connect your Raspberry to your local network.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个交换机，用来将你的Raspberry连接到本地网络。
- en: With this hardware, we are ready to start building our K3s homelab. So, let's
    get started.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些硬件，我们就可以开始构建K3s家庭实验室了。那么，让我们开始吧。
- en: 'For more detail and code snippets, check out this resource on GitHub: [https://github.com/PacktPublishing/Edge-Computing-Systems-with-Kubernetes/tree/main/ch5](https://github.com/PacktPublishing/Edge-Computing-Systems-with-Kubernetes/tree/main/ch5)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多细节和代码片段，请查看GitHub上的这个资源：[https://github.com/PacktPublishing/Edge-Computing-Systems-with-Kubernetes/tree/main/ch5](https://github.com/PacktPublishing/Edge-Computing-Systems-with-Kubernetes/tree/main/ch5)
- en: Installing a multi-node K3s cluster on your local network
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在本地网络上安装多节点K3s集群
- en: 'To start creating this homelab, let''s understand the network topology that
    we are going to use. Each component in the following diagram is used in the homelab:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始创建这个家庭实验室之前，让我们了解一下我们将要使用的网络拓扑。以下图示中的每个组件都将在家庭实验室中使用：
- en: '![Figure 5.1 – Homelab architecture'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.1 – 家庭实验室架构](img/B16945_Figure_5.1.jpg)'
- en: '](img/B16945_Figure_5.1.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_Figure_5.1.jpg)'
- en: Figure 5.1 – Homelab architecture
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.1 – 家庭实验室架构
- en: 'Here is a small explanation of each component in the figure:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这是对图中每个组件的简要说明：
- en: '`192.168.0.0/24`.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`192.168.0.0/24`。'
- en: '**Switch**: A switch is also a network connecting device that connects various
    devices in the same network.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**交换机**：交换机也是一种网络连接设备，用来连接同一网络中的各种设备。'
- en: '**Router**: A router connects devices across multiple networks. Typically,
    home routers are hybrid devices that give local computers access to the internet.
    It also has small switch capabilities to connect local computers, using wireless
    or Ethernet ports for your wired devices.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路由器**：路由器连接跨多个网络的设备。通常，家庭路由器是混合设备，可以让本地计算机访问互联网。它还具有小型交换机功能，允许本地计算机连接，通过无线或以太网端口连接有线设备。'
- en: '**Public Interface**: This is the interface of your router that has a public
    IP.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**公共接口**：这是你路由器的接口，具有公共IP地址。'
- en: '**Gateway**: This is an IP address that is used as the gateway in your private
    network.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网关**：这是一个IP地址，用作你私人网络中的网关。'
- en: '`8.8.8.8` and `1.1.1.1`.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`8.8.8.8`和`1.1.1.1`。'
- en: '**Master**: This is the master node of your K3s cluster.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Master**：这是您K3s集群的主节点。'
- en: '**Agent**: This is the agent node that acts as a worker in your K3s cluster.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Agent**：这是在K3s集群中作为工作节点的代理节点。'
- en: '`kubectl` command.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubectl`命令。'
- en: Now – a small explanation about how these pieces interact with each other. All
    your machines will use the `192.168.0.0/24` network; in this case, let's think
    that your client will use the `192.168.0.2` IP. Using the config files or parameters
    to install your cluster, you can choose an IP range inside the previous network
    for your nodes. In this case, the master is using the `192.168.0.11` IP and your
    agents are using the `192.168.0.12` and `192.168.0.13` IP addresses. Remember
    that your configuration has set static IP private addresses to your nodes to prevent
    errors in your nodes if the IP address changes. We assume that the nodes are using
    IP addresses starting from `192.168.0.11` to `192.168.0.13`. We are going to use
    the `192.168.0.240` to `192.168.0.250` IP address range for load balancers. This
    is just a simple example of how to organize your IPs for your cluster.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在—简要解释一下这些组件如何相互作用。所有您的机器将使用`192.168.0.0/24`网络；在这种情况下，假设您的客户端使用`192.168.0.2`
    IP。通过配置文件或参数安装集群时，您可以为节点选择前述网络中的IP范围。在此示例中，主节点使用`192.168.0.11` IP，而您的代理节点使用`192.168.0.12`和`192.168.0.13`
    IP地址。请记住，您的配置已为节点设置了静态IP私有地址，以防止IP地址发生变化时出现节点错误。我们假设节点使用从`192.168.0.11`到`192.168.0.13`的IP地址。我们将使用`192.168.0.240`到`192.168.0.250`的IP地址范围作为负载均衡器。这只是一个简单的示例，说明如何为您的集群组织IP。
- en: We are assuming that your router is in the `192.168.0.0/24` network. As we mentioned,
    home routers have some switch capabilities to auto-assign dynamic IP addresses
    using a DHCP service configured inside the router, but this isn't healthy for
    your nodes. That's the main reason for using static IPs for your nodes. We are
    assuming some public IP to use as an example. We are assuming that we are going
    to use the `8.8.8.8` and `1.1.1.1` DNS servers.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设您的路由器位于`192.168.0.0/24`网络中。如前所述，家庭路由器具有某些交换机功能，可以通过配置在路由器内的DHCP服务自动分配动态IP地址，但这对您的节点并不健康。这是使用静态IP地址的主要原因。我们假设使用一些公共IP作为示例。我们假设将使用`8.8.8.8`和`1.1.1.1`作为DNS服务器。
- en: Important Note
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: All these IP ranges can change, depending on your internet provider or the router
    device that you are using. We set these values to provide an example of how to
    organize the network for your cluster.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些IP范围可能会发生变化，具体取决于您的互联网提供商或您使用的路由器设备。我们设置这些值是为了提供如何为您的集群组织网络的示例。
- en: 'To create your homelab, we have to complete the following tasks:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建您的家庭实验室，我们需要完成以下任务：
- en: Install Ubuntu image on your Raspberry device.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的Raspberry设备上安装Ubuntu镜像。
- en: Configure your device to run the K3s installer.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置您的设备以运行K3s安装程序。
- en: Configure the K3s master node.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置K3s主节点。
- en: Configure the K3s agent nodes.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置K3s代理节点。
- en: Install **MetalLB** as the load balancing service.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装**MetalLB**作为负载均衡服务。
- en: Install **Longhorn** as the default storage class.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装**Longhorn**作为默认存储类。
- en: Configure `kubectl` in an external client to access the cluster.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在外部客户端中配置`kubectl`以访问集群。
- en: Deploy your first application using `kubectl` and YAML files.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`kubectl`和YAML文件部署您的第一个应用。
- en: Install and configure **Lens** to manage your cluster.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装并配置**Lens**来管理您的集群。
- en: So, let's now quickly recap the concepts, starting with how to install Ubuntu
    on your device.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，现在让我们快速回顾一下概念，从如何在您的设备上安装Ubuntu开始。
- en: Installing an Ubuntu image on your Raspberry device
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在您的Raspberry设备上安装Ubuntu镜像。
- en: 'In this section, we are going to install an Ubuntu image on a Raspberry device.
    You can skip this section or refer to previous chapters for more information.
    As a quick summary, you can follow the next steps to install Ubuntu on a Raspberry
    device:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将安装一个Ubuntu镜像到Raspberry设备上。您可以跳过本节或参考之前的章节获取更多信息。简要总结，您可以按照以下步骤在Raspberry设备上安装Ubuntu：
- en: Open *Raspberry Pi Imager*.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开*Raspberry Pi Imager*。
- en: Click on the **CHOOSE OS** button to choose the Ubuntu Server 20.04 64-bit for
    ARM64 operating system, which is located in the **Other general purpose OS** |
    **Ubuntu** menu.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**CHOOSE OS**按钮，选择位于**Other general purpose OS** | **Ubuntu**菜单中的Ubuntu Server
    20.04 64位ARM64操作系统。
- en: Then, insert your microSD card (you may have to buy an adapter to read microSD
    cards); your device appears when you select the **CHOOSE STORAGE** button.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，插入您的microSD卡（您可能需要购买一个适配器来读取microSD卡）；当您选择**CHOOSE STORAGE**按钮时，您的设备将会出现。
- en: Click on the **WRITE** button.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**WRITE**按钮。
- en: Accept to write the device; then, Raspberry Pi Imager will ask you for your
    username and password in order to continue writing to the microSD card.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接受写入设备的请求；然后，Raspberry Pi Imager 会要求你输入用户名和密码，以继续写入 microSD 卡。
- en: Wait until the writing and verifying process finishes.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待写入和验证过程完成。
- en: Extract your microSD card.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 弹出你的 microSD 卡。
- en: Insert the microSD card into your Raspberry Pi and turn it on.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 microSD 卡插入 Raspberry Pi 并启动它。
- en: Repeat these steps for each Raspberry Pi device that will be part of your cluster.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个将加入集群的 Raspberry Pi 设备，重复这些步骤。
- en: Now, let's move to configure the network settings and the container support
    for your device.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续配置设备的网络设置和容器支持。
- en: Configuring your Raspberry Pi to run the K3s installer
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置你的 Raspberry Pi 以运行 K3s 安装程序
- en: 'In this section, we are going to configure the network settings, including
    your static IP address, DNS, hostname, and hosts files, finalizing with activating
    the support of the cgroups necessary to use **containerd**. Now, follow the next
    steps to perform the final setup before installing K3s in your nodes; remember
    that you can customize all these configurations to fit your own network:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将配置网络设置，包括静态 IP 地址、DNS、主机名和 hosts 文件，最后激活对 **containerd** 所需的 cgroups
    支持。现在，按照以下步骤执行最终设置，在为节点安装 K3s 之前；记住，你可以根据自己的网络自定义这些配置：
- en: Turn on your device.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开设备。
- en: When Ubuntu asks you for your username and password, enter the username and
    `ubuntu` as the password this is the default password for the first login.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当 Ubuntu 要求你输入用户名和密码时，输入用户名和默认密码 `ubuntu`，这是第一次登录时的默认密码。
- en: Now, Ubuntu will ask you to change the default password; let's use `k3s123-`
    as our password.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，Ubuntu 会要求你更改默认密码；让我们使用 `k3s123-` 作为密码。
- en: 'Now, let''s configure the network; by default, Ubuntu uses `cloud-init` to
    configure the network. Let''s deactivate this by creating the `99-disable-network-config.cfg`
    file with the following commands and content:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，配置网络；默认情况下，Ubuntu 使用 `cloud-init` 来配置网络。我们将通过创建 `99-disable-network-config.cfg`
    文件来禁用它，使用以下命令和内容：
- en: '[PRE0]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here is an example of the content:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个内容示例：
- en: '[PRE1]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you execute `ifconfig`, you will see that your device is `eth0`, but it
    can be named `es3` or something similar, so let''s modify the `50-cloud-init`
    file with the following command:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你执行 `ifconfig`，你会看到你的设备是 `eth0`，但它可能被命名为 `es3` 或类似名称，因此我们需要通过以下命令修改 `50-cloud-init`
    文件：
- en: '[PRE2]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, modify the content of the file; it has to look something like this:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，修改文件内容，应该类似如下所示：
- en: '[PRE3]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, apply the configuration and reboot your device to see whether your IP
    address is set when the **Operating System** (**OS**) starts. To do this, execute
    the following command:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，应用配置并重启设备，查看操作系统（**OS**）启动时是否设置了 IP 地址。为此，执行以下命令：
- en: '[PRE4]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, configure the kernel parameters for the boot by editing the `/boot/firmware/cmdline.txt`
    file with the following command and content:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，通过编辑 `/boot/firmware/cmdline.txt` 文件来配置启动时的内核参数，使用以下命令和内容：
- en: '[PRE5]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Add this content to the end of the line:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下内容添加到行末：
- en: '[PRE6]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Edit `/etc/hostname` using the `master` name for your master node. Use `node01`
    and `node02` for the hostnames of your agent nodes; let''s edit the file using
    `nano`:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `nano` 编辑 `/etc/hostname` 文件，将主节点的名称设置为 `master`。将代理节点的主机名设置为 `node01` 和
    `node02`；使用 `nano` 编辑文件：
- en: '[PRE7]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here is an example of the content:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个内容示例：
- en: '[PRE8]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Edit the `/etc/hosts` file, adding the hostname; at a minimum, you need to
    have a line like this:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 `/etc/hosts` 文件，添加主机名；至少需要有如下所示的一行：
- en: '[PRE9]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here is an example of the content:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个内容示例：
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Important Note
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'You can also use `master.local` instead of `master` to follow **Internet Engineering
    Task Force** (**IETF**) naming conventions for local networks. This may also help
    with zero-configuration **multicast DNS** (**mDNS**) setups. For more information,
    you can check out this link: [http://www.zeroconf.org](http://www.zeroconf.org).'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用 `master.local` 代替 `master`，以遵循 **互联网工程任务组**（**IETF**）的本地网络命名规范。这也有助于零配置
    **多播 DNS**（**mDNS**）设置。更多信息，请查看此链接：[http://www.zeroconf.org](http://www.zeroconf.org)。
- en: 'Now, reboot your device:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，重启你的设备：
- en: '[PRE11]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This configuration is required to prepare your device to configure a K3s master
    or agent nodes. You can also follow IETF recommendations for local network design.
    In the next section, you will see how to install K3s for your master nodes.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 该配置是为了准备你的设备以配置 K3s 主节点或代理节点。你也可以按照 IETF 的本地网络设计建议进行操作。在下一部分，你将看到如何为你的主节点安装
    K3s。
- en: Configuring the K3s master node
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置K3s主节点
- en: 'This section explains how to install your master node for your K3s cluster;
    for this, you have to follow these steps:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 本节介绍如何为K3s集群安装主节点；为此，您需要按照以下步骤进行操作：
- en: Turn on your device and log in with your `ubuntu` user.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的设备，并使用`ubuntu`用户登录。
- en: 'Run the following commands to install your master node using `MASTER_IP` as
    `192.168.0.11`, as shown in *Figure 5.1*, for your K3s cluster:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`MASTER_IP`为`192.168.0.11`，按照*图5.1*中所示运行以下命令，安装您的主节点，适用于K3s集群：
- en: '[PRE12]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now, we have installed the master node. This will be the node with the `192.168.0.11`
    IP address. Now, let's go ahead and add agent nodes to the cluster in the next
    section.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经安装了主节点。该节点的IP地址为`192.168.0.11`。接下来，让我们在下一节中将代理节点添加到集群中。
- en: Configuring the K3s agent nodes
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置K3s代理节点
- en: 'This section explains how to complete our initial cluster diagram by repeating
    this section twice to complete the configuration of two agent nodes. Agent nodes
    will use the `192.168.0.12` and `192.168.0.13` IP addresses. Complete the following
    steps to configure each agent node:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 本节解释如何通过重复此部分两次来完成初始集群图的配置，以配置两个代理节点。代理节点将使用`192.168.0.12`和`192.168.0.13`的IP地址。按照以下步骤配置每个代理节点：
- en: 'Log in to your master node:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到您的主节点：
- en: '[PRE13]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We are going to extract the servicer node token to connect the agent nodes.
    In this case, the master node will be `192.168.0.11`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将提取服务节点令牌以连接代理节点。在这种情况下，主节点的IP地址为`192.168.0.11`。
- en: 'Extract and copy the token to join your agent nodes in the cluster, running
    the following command:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令提取并复制令牌，将您的代理节点加入集群：
- en: '[PRE14]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Log out from your master node. Now, you have the token to join additional nodes
    to the cluster.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的主节点注销。现在，您已获得令牌，可以将其他节点加入到集群中。
- en: 'For each agent node to join the cluster, follow the next steps (the easy way):'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让每个代理节点加入集群，按照以下步骤操作（简单方法）：
- en: 'Log in to your agent node that you want to add to the cluster. In this case,
    `AGENT_IP` will be `192.168.0.12` or `192.168.0.13`:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到您要添加到集群中的代理节点。在这种情况下，`AGENT_IP`将是`192.168.0.12`或`192.168.0.13`：
- en: '[PRE15]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Set an environment variable with the token that your master generated:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置一个环境变量，其中包含主节点生成的令牌：
- en: '[PRE16]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Register your node with the following command; in this case, `MASTER_IP` will
    be `192.168.0.11`:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令注册您的节点；在这种情况下，`MASTER_IP`为`192.168.0.11`：
- en: '[PRE17]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Exit from your agent node:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 从您的代理节点退出：
- en: '[PRE18]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now, we have configured our agent nodes. Let's install MetalLB to start using
    load balancers for our applications.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经配置了代理节点。让我们安装MetalLB以开始为我们的应用程序使用负载均衡器。
- en: Installing MetalLB as the load balancing service
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装MetalLB作为负载均衡服务
- en: 'MetalLB is a bare metal load balancer that can help when using the load balancing
    service of a regular Kubernetes cluster, with the capabilities of networking designed
    for bare metal, such as IP address assignment. So, let''s get started by installing
    MetalLB by following these steps:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: MetalLB是一个裸金属负载均衡器，可以在使用常规Kubernetes集群的负载均衡服务时提供帮助，具有为裸金属设计的网络功能，如IP地址分配。因此，让我们通过以下步骤安装MetalLB并开始：
- en: 'Create a MetalLB namespace (`metallb-system`) with the official manifests,
    executing the following lines:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用官方清单创建一个名为`metallb-system`的MetalLB命名空间，执行以下命令：
- en: '[PRE19]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Before running the command to install MetalLB, you have to create a `ConfigMap`
    resource called `metallb-config` inside the `metallb-system` namespace. Let''s
    call this file `config.yaml`, with the following content:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行安装MetalLB的命令之前，您必须在`metallb-system`命名空间中创建一个名为`metallb-config`的`ConfigMap`资源。我们将这个文件命名为`config.yaml`，并包含以下内容：
- en: '[PRE20]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, create `ConfigMap`, executing the following command:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建`ConfigMap`，执行以下命令：
- en: '[PRE21]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Install MetalLB with the official manifests by executing the following lines:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用官方清单安装MetalLB，执行以下命令：
- en: '[PRE22]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Now, you have installed MetalLB. You are ready to install services that use
    load balancers. These load balancers are commonly found in a lot of Kubernetes
    software. Now, it is time to add Longhorn for our storage.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经安装了MetalLB。您可以开始安装使用负载均衡器的服务。这些负载均衡器在许多Kubernetes软件中很常见。现在，是时候为我们的存储添加Longhorn了。
- en: Installing Longhorn with ReadWriteMany mode
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装启用ReadWriteMany模式的Longhorn
- en: 'K3s includes basic storage support. Sometimes, this storage can cause errors
    when you are installing software. To prevent this, you will need another storage
    driver instead of the default one that comes with K3s. In this case, you can use
    Longhorn. With Longhorn, you can install Kubernetes software that looks for regular
    storage drivers. So, let''s install Longhorn in the following steps:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: K3s 包含基本的存储支持。有时，在安装软件时，这些存储可能会导致错误。为了防止这种情况，你需要使用一个与 K3s 默认存储驱动程序不同的存储驱动程序。在这种情况下，你可以使用
    Longhorn。使用 Longhorn，你可以安装寻找常规存储驱动程序的 Kubernetes 软件。接下来，让我们按照以下步骤安装 Longhorn：
- en: 'Log in to your **virtual machine** (**VM**) or device:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到你的 **虚拟机** (**VM**) 或设备：
- en: '[PRE23]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'If you want to install `nfs-common` on each VM with Ubuntu installed in your
    cluster. To do this, execute the following command:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想在集群中每个安装了 Ubuntu 的虚拟机上安装 `nfs-common`，请执行以下命令：
- en: '[PRE24]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Apply the official Longhorn manifests, as follows:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用官方的 Longhorn 清单，如下所示：
- en: '[PRE25]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Now, you have Longhorn installed and running. Let's move on to learn how to
    configure `kubectl` on your personal computer to manage your K3s.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经安装并运行了 Longhorn。接下来，让我们了解如何在个人计算机上配置 `kubectl` 来管理你的 K3s。
- en: Extracting the K3s kubeconfig file to access your cluster
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提取 K3s kubeconfig 文件以访问你的集群
- en: 'Now, it''s time to configure the `kubeconfig` file to access your K3s cluster
    from your computer, using the `kubectl` command. To configure the connection of
    your new K3s cluster from the outside, follow these steps:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候配置 `kubeconfig` 文件，以便通过 `kubectl` 命令从你的计算机访问 K3s 集群了。要配置外部访问你的 K3s 集群，按照以下步骤操作：
- en: 'Install `kubectl`, following the instructions of the official documentation
    of Kubernetes ([https://kubernetes.io/docs](https://kubernetes.io/docs)); in this
    case, we are going to use the instructions for Macintosh:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据 Kubernetes 官方文档的说明安装 `kubectl`（[https://kubernetes.io/docs](https://kubernetes.io/docs)）；在此案例中，我们将使用针对
    Macintosh 的安装说明：
- en: '[PRE26]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Or you can install `kubectl` using `brew` on macOS, using the next command:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 或者你也可以通过 `brew` 在 macOS 上安装 `kubectl`，使用以下命令：
- en: '[PRE27]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'For other custom installations, such as `kubectl` for Apple''s new silicon
    processors, Linux, or Windows, visit the Kubernetes official documentation: [https://kubernetes.io/docs/tasks/tools/install-kubectl-macos](https://kubernetes.io/docs/tasks/tools/install-kubectl-macos).'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他自定义安装，例如针对 Apple 新硅处理器、Linux 或 Windows 的 `kubectl`，请访问 Kubernetes 官方文档：[https://kubernetes.io/docs/tasks/tools/install-kubectl-macos](https://kubernetes.io/docs/tasks/tools/install-kubectl-macos)。
- en: From the master node, copy the content inside `/etc/rancher/k3s/k3s.yaml` to
    your local `~/.kube/config` file.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从主节点，将 `/etc/rancher/k3s/k3s.yaml` 文件中的内容复制到本地的 `~/.kube/config` 文件。
- en: 'Change the permissions of the file with the next command:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令更改文件的权限：
- en: '[PRE28]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Change part of the server value from `127.0.0.1` to the `MASTER_IP` address
    of your master node; in this case, it will be `192.168.0.11`:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将服务器值中的部分 `127.0.0.1` 更改为主节点的 `MASTER_IP` 地址；在此情况下，它将是 `192.168.0.11`：
- en: '[PRE29]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'This changes to the following:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这将更改为以下内容：
- en: '[PRE30]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Important Note
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Remember to install `kubectl` before you copy the Rancher `kubeconfig` file
    onto your computer. Remember that the content of the `k3s.yaml` file has to be
    stored inside `~/.kube/config` and needs the `0400` permissions. To check how
    to install the `kubectl` command, go to [https://kubernetes.io/docs/tasks/tools/install-kubectl-macos](https://kubernetes.io/docs/tasks/tools/install-kubectl-macos).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在将 Rancher `kubeconfig` 文件复制到计算机之前，记得先安装 `kubectl`。请记住，`k3s.yaml` 文件的内容必须存储在
    `~/.kube/config` 中，并且需要设置 `0400` 权限。有关如何安装 `kubectl` 命令的信息，请访问 [https://kubernetes.io/docs/tasks/tools/install-kubectl-macos](https://kubernetes.io/docs/tasks/tools/install-kubectl-macos)。
- en: Now, we are ready to use the cluster. In the next section, we are going to deploy
    a basic application with `kubectl` and YAML files, using MetalLB and Longhorn.
    So, let's start deploying applications, using `kubectl` in the next section.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备好使用集群了。在下一节中，我们将使用 `kubectl` 和 YAML 文件，结合 MetalLB 和 Longhorn 部署一个基础应用程序。让我们开始在下一节中使用
    `kubectl` 部署应用程序吧。
- en: Deploying your first application with kubectl
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 kubectl 部署你的第一个应用程序
- en: This section covers the basics of Kubernetes. We are going to deploy an application
    using `kubectl` first. But before that, let me give you a quick introduction about
    how Kubernetes works with its basic objects.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 本节介绍了 Kubernetes 的基础知识。我们首先将使用 `kubectl` 部署一个应用程序。但在此之前，让我简要介绍一下 Kubernetes
    如何与其基本对象一起工作。
- en: Basic Kubernetes objects
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本 Kubernetes 对象
- en: 'Kubernetes works with objects that provide different functionalities for your
    application using containers. The goal of Kubernetes is to orchestrate your containers.
    Kubernetes uses two ways to create objects. One is using imperative commands –
    in the case of Kubernetes, the `kubectl` command. The other is using declarative
    files, where the state of an object is defined, and Kubernetes ensures that this
    state stays as it was defined throughout its lifetime:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes通过使用容器的对象来为你的应用提供不同的功能。Kubernetes的目标是编排你的容器。Kubernetes有两种创建对象的方式。一种是通过命令式命令——在Kubernetes中使用`kubectl`命令。另一种是通过声明式文件，其中定义了对象的状态，Kubernetes确保对象在其生命周期中保持这个状态。
- en: '![Figure 5.2 – Kubernetes objects'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.2 – Kubernetes对象'
- en: '](img/B16945_Figure_5.2.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_Figure_5.2.jpg)'
- en: Figure 5.2 – Kubernetes objects
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.2 – Kubernetes对象
- en: 'This diagram represents how some of the basic objects interact with each other
    to deploy and manage an application. So, let''s explain each of these objects:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这个图示表示了一些基本对象是如何相互作用来部署和管理应用程序的。接下来，我们来解释这些对象：
- en: '**Pod** contains one or more containers, where your application lives; all
    the containers inside a Pod share the same network, memory, and CPU.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Pod**包含一个或多个容器，你的应用程序就在其中；Pod中的所有容器共享相同的网络、内存和CPU。'
- en: '**ReplicaSet** controls the number of pods to be the same.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ReplicaSet**控制Pod的数量保持一致。'
- en: '**Deployment** is an advanced kind of **ReplicaSet** object that not only controls
    the number of Pods and versions but also the changes of the Pods, providing a
    way to perform rollbacks.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Deployment**是一个高级的**ReplicaSet**对象，不仅控制Pod的数量和版本，还控制Pod的变化，提供回滚的方式。'
- en: '**Service** is a way to expose your services. There are different types. **NodePort**
    opens a random port on all the nodes, **ClusterIP** creates a DNS that you can
    use to communicate with your Pod or deploy with other Pods or deployments, and
    **LoadBalancer** creates an exclusive endpoint to publish your app to the outside.'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Service**是一种暴露你的服务的方式。服务有不同的类型。**NodePort**在所有节点上开放一个随机端口，**ClusterIP**创建一个DNS，你可以用它来与Pod通信，或者与其他Pod或部署进行交互，**LoadBalancer**则创建一个专用端点，将你的应用发布到外部。'
- en: '**Persistent Volume Claim** is the object in charge of requesting persistent
    storage and creating stateful deployments.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Persistent Volume Claim**是负责请求持久存储并创建有状态部署的对象。'
- en: '**Storage Class** is the object that defines how you are going to request storage
    for an application.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Storage Class**是定义如何为应用程序请求存储的对象。'
- en: With these pretty basic concepts, let's move on to the practical aspects to
    understand how each component works. In the next section, we are going to deploy
    a simple NGINX server using `kubectl`.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些基本概念，我们来看看如何实际部署，以了解每个组件是如何工作的。在接下来的部分，我们将使用`kubectl`部署一个简单的NGINX服务器。
- en: Deploying a simple NGINX server with pods using kubectl
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用kubectl部署一个简单的NGINX服务器
- en: 'In this section, we are going to deploy an NGINX server, step by step, using
    `kubectl`. To do this, follow these steps:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用`kubectl`一步步部署一个NGINX服务器。请按照以下步骤操作：
- en: 'Create a pod with the `nginx` image:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个使用`nginx`镜像的Pod：
- en: '[PRE31]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Create a `LoadBalancer` type of service for this Pod to expose and access the
    NGINX pod:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为这个Pod创建一个`LoadBalancer`类型的服务，用于暴露和访问NGINX Pod：
- en: '[PRE32]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Assign the IP address to your load balancer with the following command:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令将IP地址分配给你的负载均衡器：
- en: '[PRE33]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Access the next URL using your browser or the following command:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用浏览器或以下命令访问下一个URL：
- en: '[PRE34]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Now, you have an NGINX service up and running. So, let's move to deploy a **Redis**
    database that you can access to store data in the next section.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你的NGINX服务已启动并运行。接下来，让我们部署一个**Redis**数据库，你可以在下一节中访问它来存储数据。
- en: Deploying a Redis NoSQL database with pods
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Pods部署Redis NoSQL数据库
- en: 'Now, we are going to deploy a Redis NoSQL key-value database that you can access
    to store some data. We chose Redis as a basic example as it is quick and easy
    to use. So, let''s deploy Redis using the following commands:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将部署一个Redis NoSQL键值数据库，你可以访问它来存储数据。我们选择Redis作为一个基础示例，因为它快速且易于使用。接下来，让我们通过以下命令部署Redis：
- en: 'Create a pod with a `redis` image:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个使用`redis`镜像的Pod：
- en: '[PRE35]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Create a `ClusterIP` service that you can use to connect to Redis using the
    name of the service:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`ClusterIP`服务，你可以使用该服务的名称连接到Redis：
- en: '[PRE36]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Let''s create an `ubuntu` client with the next command:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令创建一个`ubuntu`客户端：
- en: '[PRE37]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Now, you are inside the client, so let''s install the Redis client to get connected
    to the Redis pods with the following command:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你已进入客户端，让我们使用以下命令安装 Redis 客户端，以便连接到 Redis pods：
- en: '[PRE38]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Store the variable with the value `1` and get the value from the client, using
    the following commands:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令存储值为 `1` 的变量，并从客户端获取该值：
- en: '[PRE39]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The last command returns the value of the `a` variable, which is `1`.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一条命令返回 `a` 变量的值，该值为 `1`。
- en: Write `exit` and then press *Enter* to exit the client. The client will be automatically
    deleted because of the `--rm` parameter.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 `exit` 然后按 *Enter* 键退出客户端。由于 `--rm` 参数，客户端会被自动删除。
- en: 'Now, let''s expose Redis, using `NodePort` as an example of how to expose a
    pod using the IPs of your nodes:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们通过使用 `NodePort` 来暴露 Redis，作为如何使用节点的 IP 暴露 pod 的示例：
- en: '[PRE40]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Now, you can access your Redis database using the IP of the host where Redis
    was deployed.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以使用部署 Redis 的主机的 IP 来访问你的 Redis 数据库。
- en: You have finished installing a simple database – in this case, Redis. Now, let's
    explore the deployment objects and storage in the next section.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经完成了一个简单数据库的安装——在本例中是 Redis。接下来，让我们在下一节中探索部署对象和存储。
- en: Deploying and scaling an NGINX server with deployments
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用部署部署和扩展 NGINX 服务器
- en: 'One of the advantages of using deployments is that you manage the changes of
    your deployment if the version or the configuration changes. Let''s deploy a simple
    NGINX server, scale the deployment, change the image, and then perform a rollback
    to see the power of deployments. Deploy the NGINX server by following these steps:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 使用部署的一个优势是，你可以在版本或配置发生变化时管理部署的变更。让我们部署一个简单的 NGINX 服务器，扩展部署，修改镜像，然后执行回滚，来展示部署的强大功能。按照以下步骤部署
    NGINX 服务器：
- en: 'Create a deployment with two replicas using the `nginx` image:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `nginx` 镜像创建一个两个副本的部署：
- en: '[PRE41]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Create a `LoadBalancer` service to expose your deployment:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `LoadBalancer` 服务来暴露你的部署：
- en: '[PRE42]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Create the IP for `mywebserver`:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `mywebserver` 的 IP：
- en: '[PRE43]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Access the web server using `curl`:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `curl` 访问 web 服务器：
- en: '[PRE44]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Scale `mywebserver` with `0` replicas:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `mywebserver` 扩展为 `0` 个副本：
- en: '[PRE45]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Try to access `mywebserver` again:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次尝试访问 `mywebserver`：
- en: '[PRE46]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Scale `mywebserver` with two replicas and wait until the deployment is ready;
    you can check this with the following:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `mywebserver` 扩展为两个副本，并等待直到部署准备好；你可以使用以下命令检查：
- en: '[PRE47]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Try to access `mywebserver` again:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次尝试访问 `mywebserver`：
- en: '[PRE48]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Let''s change the `nginx` version of the deployment with the wrong version:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们更改部署中的 `nginx` 版本，使用错误的版本：
- en: '[PRE49]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Check the changes in the description of the object:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查对象描述中的更改：
- en: '[PRE50]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Check the current pod status for the `mywebserver` deployment:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查 `mywebserver` 部署的当前 pod 状态：
- en: '[PRE51]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: You will see some pods from `mywebserver` with errors.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到一些来自 `mywebserver` 的错误 pods。
- en: 'Let''s roll back to the previous version:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们回滚到之前的版本：
- en: '[PRE52]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Check the current pod status for the `mywebserver` deployment:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查 `mywebserver` 部署的当前 pod 状态：
- en: '[PRE53]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: You will see that the pods with errors have disappeared because you returned
    to the previous image that the deployment was using – in this case, the correct
    image name.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 你会发现错误的 pods 已经消失，因为你回到了部署所使用的之前的镜像——在这种情况下，是正确的镜像名称。
- en: Now, you have deployed your application using the deployment object. Let's do
    something similar using YAML files and add some persistence. To do this, let's
    move on to the next section.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经使用部署对象部署了应用程序。让我们用类似的方法使用 YAML 文件并增加一些持久性。为此，我们进入下一节。
- en: Deploying a simple NGINX server using YAML files
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 YAML 文件部署一个简单的 NGINX 服务器
- en: At this point, our examples don't store data and the objects are created using
    imperative commands. To use declarative files, you can use the `kubectl` command
    to generate the files. Remember to deploy your application, using pods or deployments
    – just choose one of these options. To start, let's create an NGINX pod using
    YAML files.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们的示例不存储数据，对象是使用命令式命令创建的。要使用声明式文件，你可以使用 `kubectl` 命令生成文件。记住，在部署应用时，可以使用 pods
    或 deployments——只需选择其中一种方式。首先，让我们使用 YAML 文件创建一个 NGINX pod。
- en: Deploying an NGINX server using a Pod
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Pod 部署 NGINX 服务器
- en: 'Now, let''s create an NGINX pod using YAML files. To do this, follow these
    steps:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用 YAML 文件创建一个 NGINX pod。按照以下步骤操作：
- en: 'If you want to use pods, you can use the next YAML file. To generate the file,
    use the following command:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想使用 pods，你可以使用下一个 YAML 文件。要生成文件，使用以下命令：
- en: '[PRE54]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The `nginx-pod.yaml` file will look like this:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '`nginx-pod.yaml` 文件将是这样的：'
- en: '[PRE55]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Apply the generated file using the following command:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令应用生成的文件：
- en: '[PRE56]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Let's move on to create an NGINX deployment in the next section.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续在下一节中创建一个 NGINX 部署。
- en: Deploying an NGINX server using deployment
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用部署来部署一个 NGINX 服务器
- en: 'So, let''s get started creating an NGINX server using deployment with YAML
    files. To do this, follow these steps:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们开始使用 YAML 文件创建一个 NGINX 服务器，使用部署。要做到这一点，请按照以下步骤操作：
- en: 'Generate the YAML file for deployment using the following command:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令生成部署的 YAML 文件：
- en: '[PRE57]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The file `nginx-deployment.yaml` will look like this:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 文件 `nginx-deployment.yaml` 将如下所示：
- en: '[PRE58]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Apply the generated file using the following command:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令应用生成的文件：
- en: '[PRE59]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Now that we have learned how to create a pod and deployment in Kubernetes, let's
    move on to the next section to expose these objects using services with YAML files.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学会了如何在 Kubernetes 中创建 pod 和部署，让我们继续下一节，使用 YAML 文件来公开这些对象的服务。
- en: Exposing your pods using the ClusterIP service and YAML files
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 ClusterIP 服务和 YAML 文件公开您的 pods
- en: 'To communicate your pod or deployment with other applications, you may need
    a DNS record. The `ClusterIP` service type creates a DNS A record for your pod
    or deployment. Using this DNS, other objects in your cluster can access your application.
    So, let''s create a `ClusterIP` service for your application, following these
    steps:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 要与其他应用程序通信您的 pod 或部署，您可能需要一个 DNS 记录。`ClusterIP` 服务类型为您的 pod 或部署创建一个 DNS A 记录。使用此
    DNS，集群中的其他对象可以访问您的应用程序。因此，让我们为您的应用程序创建一个 `ClusterIP` 服务，按照以下步骤进行：
- en: 'To expose your application using YAML files, generate the YAML file for the
    `ClusterIP` service type:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用 YAML 文件公开您的应用程序，请生成 `ClusterIP` 服务类型的 YAML 文件：
- en: '[PRE60]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'The `nginx-service.yaml` file will look like this:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 文件 `nginx-service.yaml` 将如下所示：
- en: '[PRE61]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Apply the generated file using the following command:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令应用生成的文件：
- en: '[PRE62]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Now that you have learned how to create a `ClusterIP` service using YAML files,
    let's move on to creating a `NodePort` service for your application in the next
    section.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经学会了如何使用 YAML 文件创建一个 `ClusterIP` 服务，让我们继续在下一节为您的应用程序创建一个 `NodePort` 服务。
- en: Exposing your pods using the NodePort service and YAML files
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 NodePort 服务和 YAML 文件公开您的 pods
- en: 'To create a NodePort service for a previously created pod, follow these steps:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 要为先前创建的 pod 创建一个 NodePort 服务，请按照以下步骤操作：
- en: 'For `NodePort`, use the following command:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于 `NodePort`，使用以下命令：
- en: '[PRE63]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'The `nginx-nodeport.yaml` file will look like this:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 文件 `nginx-nodeport.yaml` 将如下所示：
- en: '[PRE64]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Apply the generated file using the next command:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用下一个命令应用生成的文件：
- en: '[PRE65]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Now that you have learned how to create a `NodePort` service for your application
    in a pod, it's time to learn how to use `LoadBalancer` services in the next section.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经学会了如何为您的应用程序中的 pod 创建一个 `NodePort` 服务，现在是时候在下一节学习如何在 `LoadBalancer` 服务中使用了。
- en: Exposing your pods using a LoadBalancer service and YAML files
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 YAML 文件公开您的 pods，使用一个 LoadBalancer 服务
- en: 'To create a `LoadBalancer` service to expose your application inside a pod,
    follow these steps:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个 `LoadBalancer` 服务以公开您 pod 中的应用程序，请按照以下步骤操作：
- en: 'For `LoadBalancer`, use the next command:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于 `LoadBalancer`，使用下一个命令：
- en: '[PRE66]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'The generated `nginx-lb.yaml` file will look like this:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的 `nginx-lb.yaml` 文件将如下所示：
- en: '[PRE67]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Apply the generated file using the next command:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用下一个命令应用生成的文件：
- en: '[PRE68]'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: You have learned how to create a `LoadBalancer` service. With this, we have
    covered all the basic services in Kubernetes. Now, we are ready to learn how to
    create stateful applications. Let's move on to the next section to add persistence
    to your applications.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经学会了如何创建一个 `LoadBalancer` 服务。有了这个，我们已经涵盖了 Kubernetes 中的所有基本服务。现在，我们准备学习如何创建有状态的应用程序。让我们继续下一节，为您的应用程序添加持久性。
- en: Adding persistence to your applications
  id: totrans-274
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为您的应用程序添加持久性
- en: Now, it is time to add storage to your applications; we are going to use the
    storage classes installed with Longhorn to provide persistence to your applications.
    In this section, we are going to explore two examples using persistent volumes.
    In this part of the book, we are going to discuss the persistent volumes and the
    process of creating storage for a Pod. But first, we need a persistent volume
    claim definition to provision this storage.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候为您的应用程序添加存储了；我们将使用 Longhorn 安装的存储类为您的应用程序提供持久性。在本节中，我们将探讨使用持久卷的两个示例。在本书的这一部分中，我们将讨论持久卷和为
    Pod 创建存储的过程。但首先，我们需要一个持久卷声明定义来配置此存储。
- en: Creating an NGINX pod with a storage volume
  id: totrans-276
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个带有存储卷的 NGINX pod
- en: 'To create your NGINX application using a storage volume that uses the Longhorn
    storage class, follow these steps:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建使用 Longhorn 存储类的存储卷的 NGINX 应用程序，请按照以下步骤操作：
- en: 'Create `pvc.yaml`:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`pvc.yaml`文件：
- en: '[PRE69]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Apply the `pvc.yaml` YAML file:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用`pvc.yaml` YAML文件：
- en: '[PRE70]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Now, it''s time to create a pod using this PVC that uses the Longhorn storage
    class. To do this, follow these steps:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候使用这个PVC来创建一个使用Longhorn存储类的Pod了。请按照以下步骤操作：
- en: 'Create and apply the `pod.yaml` file to create a pod using the previously created
    PVC:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建并应用`pod.yaml`文件，使用先前创建的PVC来创建Pod：
- en: '[PRE71]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: This example has created a pod using a persistent volume, with the Longhorn
    storage class. Let's continue with a second example that shows a database using
    a storage volume.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例已经创建了一个使用持久卷和Longhorn存储类的Pod。接下来，我们继续进行第二个示例，展示如何使用存储卷创建一个数据库。
- en: Creating the database using a persistent volume
  id: totrans-286
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用持久卷创建数据库
- en: 'Now, is time to use a persistent volume for a database; in this example, you
    are going to learn how to create a Redis database with a persistent volume. So,
    let''s get started with the following steps:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候为数据库使用持久卷了；在这个示例中，您将学习如何创建一个带有持久卷的Redis数据库。让我们按照以下步骤开始：
- en: 'Create the `redis.yaml` file to create a pod that uses the previous `longhorn-volv-pvc`
    PVC:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`redis.yaml`文件，以创建一个使用之前`longhorn-volv-pvc` PVC的Pod：
- en: '[PRE72]'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Apply the `pod.yaml` YAML file to create the pod:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用`pod.yaml` YAML文件来创建Pod：
- en: '[PRE73]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Check and Apply the `pod.yaml` YAML file to create the pod:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查并应用`pod.yaml` YAML文件来创建Pod：
- en: '[PRE74]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Apply the `pod.yaml` YAML file to create the pod:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用`pod.yaml` YAML文件来创建Pod：
- en: '[PRE75]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Troubleshooting Your Deployments
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 排查您的部署问题
- en: 'Remember that you can use the `kubectl logs` command to troubleshoot your deployments.
    For more information, you can check the next link: [https://kubernetes.io/docs/tasks/debug-application-cluster/debug-running-pod/](https://kubernetes.io/docs/tasks/debug-application-cluster/debug-running-pod/).'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，您可以使用`kubectl logs`命令来排查您的部署问题。欲了解更多信息，请访问下一个链接：[https://kubernetes.io/docs/tasks/debug-application-cluster/debug-running-pod/](https://kubernetes.io/docs/tasks/debug-application-cluster/debug-running-pod/)。
- en: Now, your Redis database is running and using a persistent volume to prevent
    the loss of data. In the last section, we are going to explore how to install
    a simple Kubernetes dashboard to manage your cluster using a UI.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您的Redis数据库正在运行，并使用持久卷来防止数据丢失。在最后一部分，我们将探索如何安装一个简单的Kubernetes仪表盘，使用UI来管理您的集群。
- en: Deploying a Kubernetes dashboard
  id: totrans-299
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署Kubernetes仪表盘
- en: 'Now, it''s time to install a Kubernetes dashboard. The next steps are based
    on the official K3s documentation. To start installing the dashboard, follow these
    steps:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候安装Kubernetes仪表盘了。接下来的步骤基于官方K3s文档。要开始安装仪表盘，请按照以下步骤操作：
- en: 'Install the dashboard using the following commands:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令安装仪表盘：
- en: '[PRE76]'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: This is going to install the dashboard, but you need to configure how to access
    this dashboard.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装仪表盘，但您需要配置如何访问此仪表盘。
- en: 'Create the `dashboard-admin-user.yaml` file to create a service account that
    provides access to your dashboard. The content of this file will be as follows:'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`dashboard-admin-user.yaml`文件，以创建一个提供访问仪表盘的服务帐户。该文件的内容如下：
- en: '[PRE77]'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Now create the file `dashboard-admin-user-role.yaml`. The content of this file
    will be the next:'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在创建`dashboard-admin-user-role.yaml`文件。该文件的内容如下：
- en: '[PRE78]'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Now, apply the YAML files with the following command:'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用以下命令应用YAML文件：
- en: '[PRE79]'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Get the token inside the service account that will be used to access the dashboard:'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取用于访问仪表盘的服务帐户中的令牌：
- en: '[PRE80]'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Copy the token content only.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 仅复制令牌内容。
- en: 'Use `kubectl proxy` to expose the Kubernetes API in your localhost, using the
    following command:'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`kubectl proxy`在本地暴露Kubernetes API，使用以下命令：
- en: '[PRE81]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Access your browser with the following URL:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下URL访问您的浏览器：
- en: '`http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/`'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/`'
- en: 'Sign in with the admin user bearer token that you got. Choose the **Token**
    option and enter the token. You will see a screen like this:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您获取的管理员用户持有令牌进行登录。选择**令牌**选项并输入令牌。您将看到如下屏幕：
- en: '![Figure 5.3 – Kubernetes Dashboard sign-in screen'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.3 – Kubernetes仪表盘登录界面'
- en: '](img/B16945_Figure_5.3.jpg)'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_Figure_5.3.jpg)'
- en: Figure 5.3 – Kubernetes Dashboard sign-in screen
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.3 – Kubernetes仪表盘登录界面
- en: 'After clicking on the **Sign In** button, you will see the dashboard. Explore
    the different menus to see the state of your objects, or click on the plus icon
    at the lower-right corner to create objects using the YAML files:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**登录**按钮后，您将看到仪表盘。探索不同的菜单查看对象的状态，或者点击右下角的加号图标，使用YAML文件创建对象：
- en: '![Figure 5.4  – Kubernetes Dashboard showing CPU and memory usage'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.4 – Kubernetes Dashboard 显示 CPU 和内存使用情况]'
- en: '](img/B16945_Figure_5.4.jpg)'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_Figure_5.4.jpg)'
- en: Figure 5.4 – Kubernetes Dashboard showing CPU and memory usage
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.4 – Kubernetes Dashboard 显示 CPU 和内存使用情况
- en: We have now completed all the necessary concepts, giving you a quick introduction
    to how to use basic objects in Kubernetes with K3s.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经完成了所有必要的概念，简要介绍了如何在 Kubernetes 中使用 K3s 使用基本对象。
- en: Summary
  id: totrans-326
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to set up a K3s cluster with Raspberry Pi devices
    for our homelab. We also covered how to use basic Kubernetes objects to deploy
    an application. We deployed sample applications in an imperative way using the
    `kubectl` command. We also deployed sample applications using YAML files too.
    At the end of the chapter, we covered how to install a Kubernetes dashboard to
    manage your cluster. In the next chapter, we are going to continue adding more
    pieces to this deployment; we are going to use ingress controllers to deploy applications
    at the edge.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何为我们的家庭实验室使用 Raspberry Pi 设备设置 K3s 集群。我们还介绍了如何使用基本的 Kubernetes 对象来部署应用程序。我们使用
    `kubectl` 命令以命令式方式部署了示例应用程序。我们也使用 YAML 文件部署了示例应用程序。在本章的最后，我们介绍了如何安装 Kubernetes
    Dashboard 来管理您的集群。在下一章中，我们将继续为这个部署添加更多内容；我们将使用 ingress 控制器在边缘部署应用程序。
- en: Questions
  id: totrans-328
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Here are a few questions to validate your new knowledge:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些问题来验证您的新知识：
- en: What are the basic Kubernetes objects that I need to create an application?
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我需要创建哪些基本的 Kubernetes 对象才能创建应用程序？
- en: How can I install a K3s cluster for my homelab?
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我如何为我的家庭实验室安装 K3s 集群？
- en: How can I use `kubectl` to create my applications?
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我如何使用 `kubectl` 创建我的应用程序？
- en: How can I use YAML files to create my applications?
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我如何使用 YAML 文件创建我的应用程序？
- en: How can I use persistent volumes?
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我如何使用持久化存储卷？
- en: How can I troubleshoot my applications?
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我如何排查我的应用程序问题？
- en: Further reading
  id: totrans-336
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'You can refer to the following references for more information on the topics
    covered in this chapter:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以参考以下文献，了解本章涵盖的更多信息：
- en: 'K3s installation options to add custom parameters to your config files: [https://rancher.com/docs/k3s/latest/en/installation/install-options](https://rancher.com/docs/k3s/latest/en/installation/install-options)'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: K3s 安装选项以向配置文件添加自定义参数：[https://rancher.com/docs/k3s/latest/en/installation/install-options](https://rancher.com/docs/k3s/latest/en/installation/install-options)
- en: 'Longhorn official page: [https://longhorn.io](https://longhorn.io)'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Longhorn 官方页面：[https://longhorn.io](https://longhorn.io)
- en: 'MetalLB official page: [https://metallb.universe.tf](https://metallb.universe.tf)'
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MetalLB 官方页面：[https://metallb.universe.tf](https://metallb.universe.tf)
- en: 'Official Kubernetes documentation: [https://kubernetes.io/docs](https://kubernetes.io/docs)'
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 官方 Kubernetes 文档：[https://kubernetes.io/docs](https://kubernetes.io/docs)
- en: 'Kubernetes Dashboard installation guide: [https://rancher.com/docs/k3s/latest/en/installation/kube-dashboard](https://rancher.com/docs/k3s/latest/en/installation/kube-dashboard)'
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes Dashboard 安装指南：[https://rancher.com/docs/k3s/latest/en/installation/kube-dashboard](https://rancher.com/docs/k3s/latest/en/installation/kube-dashboard)
- en: 'Kubernetes Dashboard installation using Helm: [https://artifacthub.io/packages/helm/k8s-dashboard/kubernetes-dashboard](https://artifacthub.io/packages/helm/k8s-dashboard/kubernetes-dashboard)'
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Helm 安装 Kubernetes Dashboard：[https://artifacthub.io/packages/helm/k8s-dashboard/kubernetes-dashboard](https://artifacthub.io/packages/helm/k8s-dashboard/kubernetes-dashboard)
- en: 'Part 2: Cloud Native Applications at the Edge'
  id: totrans-344
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二部分：边缘的云原生应用程序
- en: Here you will learn how to deploy your applications at the edge using GitOps,
    service meshes, serverless and event-driven architectures, and different types
    of databases.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您将学习如何使用 GitOps、服务网格、无服务器架构、事件驱动架构以及不同类型的数据库在边缘部署应用程序。
- en: 'This part of the book comprises the following chapters:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的这一部分包含以下章节：
- en: '[*Chapter 6*](B16945_06_Final_PG.xhtml#_idTextAnchor127), *Exposing Your Applications
    Using Ingress Controllers and Certificates*'
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第六章*](B16945_06_Final_PG.xhtml#_idTextAnchor127)，*使用 Ingress 控制器和证书暴露您的应用程序*'
- en: '[*Chapter 7*](B16945_07_Final_PG.xhtml#_idTextAnchor144), *GitOps with Flux
    for Edge Applications*'
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第七章*](B16945_07_Final_PG.xhtml#_idTextAnchor144)，*使用 Flux 实现边缘应用程序的 GitOps*'
- en: '[*Chapter 8*](B16945_08_Final_PG.xhtml#_idTextAnchor163), *Observability and
    Traffic Splitting Using Linkerd*'
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第八章*](B16945_08_Final_PG.xhtml#_idTextAnchor163)，*使用 Linkerd 实现可观察性和流量分割*'
- en: '[*Chapter 9*](B16945_09_Final_PG.xhtml#_idTextAnchor181), *Edge Serverless
    and Event-Driven Architectures with Knative and Cloud Events*'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第九章*](B16945_09_Final_PG.xhtml#_idTextAnchor181)，*使用 Knative 和 Cloud Events
    构建边缘无服务器和事件驱动架构*'
- en: '[*Chapter 10*](B16945_10_Final_PG.xhtml#_idTextAnchor198), *SQL and NoSQL Databases
    at the Edge*'
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第10章*](B16945_10_Final_PG.xhtml#_idTextAnchor198), *边缘计算中的SQL与NoSQL数据库*'

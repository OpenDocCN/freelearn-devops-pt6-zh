- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Troubleshooting Cluster Components and Applications
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 故障排查集群组件和应用程序
- en: Troubleshooting is one of the main tasks performed during your daily work as
    a Kubernetes administrator. This chapter introduces the general approaches to
    troubleshooting errors caused by cluster component failure and the issues that
    can occur during application deployments.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 故障排除是Kubernetes管理员日常工作中的主要任务之一。本章介绍了故障排除集群组件失败以及应用程序部署过程中可能发生的错误的一般方法。
- en: 'In this chapter, we’re going to cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Kubernetes troubleshooting general practices
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes故障排除的一般实践
- en: Troubleshooting cluster components
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 故障排查集群组件
- en: Troubleshooting applications
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 故障排查应用程序
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To get started, we need to make sure our local machine meets the technical requirements
    described as follows.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始，我们需要确保本地机器符合以下技术要求。
- en: 'In case you’re on Linux, see the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是Linux，请参阅以下内容：
- en: A compatible Linux host. We recommend a Debian-based Linux distribution such
    as Ubuntu 18.04 or later.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个兼容的Linux主机。我们推荐基于Debian的Linux发行版，如Ubuntu 18.04或更高版本。
- en: Make sure your host machine has at least 2 GB RAM, 2 CPU cores, and about 20
    GB of free disk space.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保你的主机至少有2 GB的内存，2个CPU核心，以及大约20 GB的空闲磁盘空间。
- en: 'In case you’re on Windows 10 or Windows 11, see the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是Windows 10或Windows 11，请参阅以下内容：
- en: 'We recommend updating Docker Desktop to the latest version and creating a Docker
    Desktop local Kubernetes cluster. Check out this article to learn about how to
    set up a local Kubernetes cluster with Docker Desktop: [https://docs.docker.com/desktop/kubernetes/](https://docs.docker.com/desktop/kubernetes/).'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们建议更新Docker Desktop到最新版本，并创建一个Docker Desktop本地Kubernetes集群。查看这篇文章，了解如何使用Docker
    Desktop设置本地Kubernetes集群：[https://docs.docker.com/desktop/kubernetes/](https://docs.docker.com/desktop/kubernetes/)。
- en: 'We also recommend using **Windows Subsystem for Linux 2** (**WSL 2**) to test
    the environment. Refer to this article to see how to install WSL ([https://docs.microsoft.com/en-us/windows/wsl/install](https://docs.microsoft.com/en-us/windows/wsl/install))
    and the following article to see how to set up the Docker Desktop WSL 2 backend:
    [https://docs.docker.com/desktop/windows/wsl/](https://docs.docker.com/desktop/windows/wsl/).'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还建议使用**Windows Subsystem for Linux 2**（**WSL 2**）来测试环境。请参考这篇文章，了解如何安装WSL（[https://docs.microsoft.com/en-us/windows/wsl/install](https://docs.microsoft.com/en-us/windows/wsl/install)），以及这篇文章，了解如何设置Docker
    Desktop的WSL 2后端：[https://docs.docker.com/desktop/windows/wsl/](https://docs.docker.com/desktop/windows/wsl/)。
- en: 'Once you’re set up, you can check whether you’re currently set to the correct
    Kubernetes cluster using the following command:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 设置完成后，你可以使用以下命令检查你是否已设置到正确的Kubernetes集群：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding command will print out the current cluster in the output. In
    our case, it was similar to the following, as we’re on Windows with a Kubernetes
    local cluster created by Docker Desktop:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的命令将输出当前集群的信息。在我们的案例中，类似以下输出，因为我们在Windows上，且使用Docker Desktop创建了一个Kubernetes本地集群：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you’ve been following our demonstration along the way in this book, you’ll
    have noticed that most of the demonstration was on a `minikube` cluster. In this
    case, the output would be the following:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在本书中一直跟着我们的演示，你会注意到大多数演示都在`minikube`集群上进行。在这种情况下，输出将如下所示：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You may have used your local machine to connect with a few different Kubernetes
    clusters – you can use `kubectl config view` to check which is the current cluster:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经使用本地机器连接到不同的Kubernetes集群——你可以使用`kubectl config view`命令查看当前连接的是哪个集群：
- en: '![Figure 9.1 – Local cluster context information  ](img/Figure_9.01_B18201.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.1 – 本地集群上下文信息](img/Figure_9.01_B18201.jpg)'
- en: Figure 9.1 – Local cluster context information
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.1 – 本地集群上下文信息
- en: To learn more about how to organize cluster access using `kubeconfig` and how
    to configure access to multiple clusters, refer to [*Chapter 6*](B18201_06.xhtml#_idTextAnchor192),
    *Securing Kubernetes*.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 若要了解更多关于如何使用`kubeconfig`组织集群访问以及如何配置多个集群的访问，请参阅[*第6章*](B18201_06.xhtml#_idTextAnchor192)，*保障Kubernetes安全性*。
- en: In this chapter, we will use `docker-desktop` to understand how to troubleshoot
    local Kubernetes clusters. Note that the same set of commands is also applied
    to `minikube`. Let’s start by talking about the general practice of Kubernetes
    troubleshooting.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用`docker-desktop`来了解如何排查本地Kubernetes集群的问题。请注意，同一组命令也适用于`minikube`。让我们首先谈谈Kubernetes故障排除的一般实践。
- en: General practices in Kubernetes troubleshooting
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes故障排除的一般实践
- en: We have talked about the common tasks performed as a part of the daily job as
    a Kubernetes administrator a lot in this book, especially in the previous chapters.
    In real life, upon the stage of the project that you’re involved in, a Kubernetes
    administrator is likely to be involved in the installation and set-up of Kubernetes
    cluster phase, applications deployment, and managing the security and networking
    aspects of things for Kubernetes. In addition to the aforementioned tasks, operating
    and maintaining Kubernetes clusters and applications deployed on the cluster also
    form some of the key responsibilities of a Kubernetes administrator. Therefore,
    acquiring good troubleshooting skills will greatly help in this scenario.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中，我们已经讨论了作为 Kubernetes 管理员日常工作的一些常见任务，尤其是在之前的章节中。在实际操作中，根据你所参与的项目阶段，Kubernetes
    管理员通常会参与 Kubernetes 集群的安装与设置、应用部署，以及管理 Kubernetes 的安全性和网络方面的工作。除了上述任务，操作和维护 Kubernetes
    集群及其上部署的应用也是 Kubernetes 管理员的核心职责之一。因此，掌握良好的故障排除技能在这种情况下非常有帮助。
- en: Troubleshooting Kubernetes clusters is a combination of identifying, diagnosing,
    and remediating an issue – the problem statement covers Kubernetes cluster components,
    nodes, networking, and security. Additionally, the problem statement also covers
    the application level, such as pods, or even the container level. We’ll cover
    troubleshooting Kubernetes cluster components and the application level, including
    pods and containers, in this chapter.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 故障排除 Kubernetes 集群是一个识别、诊断和修复问题的过程——问题陈述涉及 Kubernetes 集群组件、节点、网络和安全性。此外，问题陈述还涵盖了应用层面，比如
    pods，甚至是容器层面。本章将讨论 Kubernetes 集群组件以及应用层面的故障排除，包括 pods 和容器。
- en: 'It’s important to take an outside-in approach and gradually narrow down the
    scope to identify the root cause of an issue. This means we can rationalize the
    process using the following recommendations:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 采用从外到内的方法，并逐渐缩小范围以识别问题的根本原因非常重要。这意味着我们可以通过以下建议来合理化过程：
- en: Monitoring plays a vital role in identifying potential problems and finding
    their root causes. In [*Chapter 8*](B18201_08.xhtml#_idTextAnchor293), *Monitoring
    and Logging Kubernetes Clusters and Applications*, we covered how to monitor Kubernetes
    cluster components, as well as applications, together with the instructions about
    logging, which helps you make your first steps.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控在识别潜在问题并找出其根本原因方面起着至关重要的作用。在[*第8章*](B18201_08.xhtml#_idTextAnchor293)《监控和日志记录
    Kubernetes 集群和应用》中，我们讨论了如何监控 Kubernetes 集群组件以及应用，并提供了关于日志记录的指导，帮助你迈出第一步。
- en: Metrics analysis is the first step shortly after you detect a potential issue.
    Although sometimes the problem statements may not be as they seem, you can make
    the troubleshooting easier by starting with analyzing metrics from the cluster
    and node level to get a high-level view, then moving down to the application.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指标分析是你发现潜在问题后进行的第一步。虽然有时问题陈述可能并不像看起来那么简单，但你可以通过从集群和节点层级分析指标来获得高层次的视图，然后再深入到应用层，来使故障排除变得更加容易。
- en: Sometimes, metrics may not tell you the whole story. In this case, analyzing
    the logs will help you piece the information together better. At this point, if
    you find that you have a better idea about the issue that occurred, it’s about
    time to dive deep into those logs and find the root cause, as compared to the
    one you thought was the culprit. However, it’s still a good idea to go back one
    level higher to see whether anything in the process was missing.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有时，指标可能无法告诉你整个故事。在这种情况下，分析日志将帮助你更好地拼凑信息。如果此时你发现自己对发生的问题有了更清晰的了解，那么是时候深入研究这些日志，找出真正的根本原因，而不是你之前认为的罪魁祸首。然而，回到更高层次看看流程中是否有什么遗漏仍然是个好主意。
- en: Once you have found the issue, an actionable remediation plan is required if
    you want to prevent the issue from ever happening again, rather than just applying
    a quick fix to the issue. This step will contribute to your future success and
    make your daily job much easier. Maintenance and troubleshooting work becomes
    a daily operation task after the initial setup – it is a key component of your
    daily job as a Kubernetes administrator.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦你找到了问题，如果你想防止问题再次发生，那么需要一个可操作的修复计划，而不仅仅是对问题进行快速修复。这个步骤将为你的未来成功奠定基础，并使你日常的工作变得更轻松。维护和故障排除工作在初始设置后成为日常运营任务——这是你作为
    Kubernetes 管理员日常工作的关键组成部分。
- en: In the actual CKA exam, troubleshooting holds more weight and some of the given
    scenarios are quite time-consuming, as it is usually stressful to find the root
    cause within a limited time window. However, as a candidate, you can confidently
    plan your time ahead once you’re certain about the fact that you have done an
    overall great job with the other high-value questions, such as the ones about
    application deployment, networking, and backup etcd storage. The troubleshooting
    exam questions usually appear in the second half of the CKA exam – you can usually
    start by analyzing the Kubernetes cluster components. There is a higher chance
    the questions will be about `kubelet` on the worker node and then escalate to
    the application level. Be mindful of performing the troubleshooting and fixing
    the issue on the correct node before moving on.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际的 CKA 考试中，排查问题占的比重较大，并且有些场景比较耗时，因为在有限的时间窗口内找到根本原因通常会让人感到压力很大。然而，作为考生，只要你确定自己已经在其他高价值问题（例如应用部署、网络和备份
    etcd 存储等）上做得很好，你就可以有信心地提前规划好时间。排查问题的考试题通常出现在 CKA 考试的后半部分——你通常可以从分析 Kubernetes
    集群组件开始。这类问题更有可能是关于工作节点上的 `kubelet`，然后逐步扩展到应用层。排查时要注意，在进行修复之前，一定要确保在正确的节点上执行排查和修复操作。
- en: Based on the aforementioned outside-in approach, let’s talk about troubleshooting
    the cluster component first.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面提到的外向内方法，首先讨论如何排查集群组件问题。
- en: Troubleshooting cluster components
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 排查集群组件问题
- en: Troubleshooting cluster components includes the Kubernetes system processes
    on the master node and worker node. We’ll take a look at some common troubleshooting
    scenarios in this section and will be starting from a higher-level view.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 排查集群组件包括主节点和工作节点上的 Kubernetes 系统进程。在本节中，我们将看看一些常见的排查场景，并从更高层次的角度进行讲解。
- en: Inspecting the cluster
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查集群
- en: 'Inspecting the cluster and node is usually the first step toward detecting
    the issues on the control plane. We can do that using the following command:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 检查集群和节点通常是检测控制平面问题的第一步。我们可以使用以下命令来实现：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The output renders the addresses of the control plane components and services:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示了控制平面组件和服务的地址：
- en: '![Figure 9.2 – Rendering the cluster information  ](img/Figure_9.02_B18201.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.2 – 渲染集群信息](img/Figure_9.02_B18201.jpg)'
- en: Figure 9.2 – Rendering the cluster information
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.2 – 渲染集群信息
- en: 'If you want further information for debugging and diagnosis, use the following
    command:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要进一步的信息来进行调试和诊断，可以使用以下命令：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The preceding command gives an output that is huge and contains a lot of information
    – hence, we’ve only displayed the key part in the following screenshot:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令输出的内容非常庞大，包含了大量信息——因此我们只展示了以下截图中的关键信息：
- en: '![Figure 9.3 – The Kubernetes cluster logs ](img/Figure_9.03_B18201.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.3 – Kubernetes 集群日志](img/Figure_9.03_B18201.jpg)'
- en: Figure 9.3 – The Kubernetes cluster logs
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.3 – Kubernetes 集群日志
- en: The preceding screenshot shows the log information and is very helpful for finding
    the root causes. Although we could get good information out of the control plane
    and cluster logs, you’ll get errors for the workloads running on top of it quite
    often, which can happen because of the node availability or capability. Let’s
    take a look at troubleshooting approaches with the node in the next section.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 上述截图显示了日志信息，对于找出根本原因非常有帮助。虽然我们可以从控制平面和集群日志中获取有价值的信息，但通常会经常出现与运行在其上的工作负载相关的错误，这可能是由于节点的可用性或能力问题引起的。接下来，我们将看看如何排查节点问题。
- en: Inspecting the node
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查节点
- en: 'Inspecting the node using the following command will help you get the current
    state of your current cluster and nodes:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令检查节点，将帮助你获取当前集群和节点的状态：
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The output should look as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '![Figure 9.4 – The Kubernetes node information  ](img/Figure_9.04_B18201.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.4 – Kubernetes 节点信息](img/Figure_9.04_B18201.jpg)'
- en: Figure 9.4 – The Kubernetes node information
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.4 – Kubernetes 节点信息
- en: The preceding screenshot shows that the only worker node that we have here is
    in the `Ready` status. When you have multiple nodes, you will see a list of nodes
    in the output.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 上述截图显示，当前唯一的工作节点处于 `Ready` 状态。当你有多个节点时，输出中会列出节点信息。
- en: 'The `ROLES` column shows the role of your node – it could be a `control-plane`,
    `etcd`, or `worker`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`ROLES` 列显示的是节点的角色——它可以是 `control-plane`、`etcd` 或 `worker`：'
- en: The `control-plane` role runs the Kubernetes master components, besides `etcd`.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`control-plane` 角色运行 Kubernetes 主控组件，除了 `etcd`。'
- en: The `etcd` role runs the etcd store. Refer to [*Chapter 3*](B18201_03.xhtml#_idTextAnchor059),
    *Maintaining Kubernetes Clusters*, to learn more about the etcd store.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`etcd` 角色运行 etcd 存储。请参阅 [*第 3 章*](B18201_03.xhtml#_idTextAnchor059)，*维护 Kubernetes
    集群*，了解更多关于 etcd 存储的信息。'
- en: The `worker` role runs the Kubernetes worker node – that’s where your containerized
    workloads land.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`worker` 角色运行 Kubernetes 工作节点——这就是容器化工作负载所在的地方。'
- en: 'The `STATUS` column shows the current condition of the running nodes – the
    ideal status that we all love is `Ready`. Examples of the possible conditions
    are listed in the following table:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`STATUS` 列显示当前正在运行节点的状态——我们最喜欢的理想状态是 `Ready`。可能的状态示例如下表所示：'
- en: '| **Node condition** | **What does that mean?** |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| **节点状态** | **这是什么意思？** |'
- en: '| `Ready` | The node is healthy and ready to accept pods. |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `Ready` | 节点健康且准备接受 Pod。 |'
- en: '| `DiskPressure` | The disk capacity is low. |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `DiskPressure` | 磁盘容量低。 |'
- en: '| `MemoryPressure` | The node memory is low. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `MemoryPressure` | 节点内存低。 |'
- en: '| `PIDPressure` | Too many processes are running on the node. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `PIDPressure` | 节点上运行的进程过多。 |'
- en: '| `NetworkUnavailable` | The networking is incorrectly configured. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `NetworkUnavailable` | 网络配置不正确。 |'
- en: '| `SchedulingDisabled` | This is not a condition in the Kubernetes API but
    it appears after you cordon a node. Refer to [*Chapter 3*](B18201_03.xhtml#_idTextAnchor059),
    *Maintaining Kubernetes Clusters*, to learn about how to perform a version upgrade
    on a Kubernetes cluster using `kubeadm` when you need to cordon the nodes. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `SchedulingDisabled` | 这不是 Kubernetes API 中的一个状态，而是在你对节点进行封锁（cordon）后出现的状态。请参阅
    [*第 3 章*](B18201_03.xhtml#_idTextAnchor059)，*维护 Kubernetes 集群*，了解在需要封锁节点时，如何使用
    `kubeadm` 对 Kubernetes 集群进行版本升级。 |'
- en: Table 9.1 - Different node conditions and what they mean
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 表 9.1 - 不同的节点状态及其含义
- en: Another column that is very interesting from the aforementioned output is the
    `VERSION` column – this one shows the Kubernetes version running on this node.
    Kubernetes versions here mean the Kubernetes master components version, the etcd
    version, or `kubelet` version, vary from node role to node role. Refer to [*Chapter
    3*](B18201_03.xhtml#_idTextAnchor059), *Maintaining Kubernetes Clusters*, to learn
    about upgrading versions on the Kubernetes nodes.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 从前述输出中另一个非常有趣的列是 `VERSION` 列——它显示了当前节点上运行的 Kubernetes 版本。这里的 Kubernetes 版本指的是
    Kubernetes 主控组件版本、etcd 版本或 `kubelet` 版本，根据节点角色的不同而有所差异。请参阅 [*第 3 章*](B18201_03.xhtml#_idTextAnchor059)，*维护
    Kubernetes 集群*，了解如何升级 Kubernetes 节点上的版本。
- en: 'In case you do have suspicions about the node, you can use the following command
    to inspect the node information:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对某个节点有疑虑，可以使用以下命令检查节点信息：
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The output should be similar to the following. As you can see, you can get
    more detailed information from this as compared to the `kubectl get node` command:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应类似于以下内容。如你所见，与你使用 `kubectl get node` 命令相比，这里可以获得更详细的信息。
- en: '![Figure 9.5 – The kubectl describe node output information  ](img/Figure_9.05_B18201.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.5 – `kubectl describe node` 输出信息](img/Figure_9.05_B18201.jpg)'
- en: Figure 9.5 – The kubectl describe node output information
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.5 – `kubectl describe node` 输出信息
- en: 'To get the most value out of the preceding command, we could check out the
    `Conditions` section, which should look as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从前面的命令中获得最大的价值，我们可以查看 `Conditions` 部分，其内容应如下所示：
- en: '![Figure 9.6 – Getting the node condition information ](img/Figure_9.06_B18201.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.6 – 获取节点状态信息](img/Figure_9.06_B18201.jpg)'
- en: Figure 9.6 – Getting the node condition information
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.6 – 获取节点状态信息
- en: 'The preceding screenshots show the detailed node condition information, as
    we explained earlier in this chapter. It is also possible to get the allocated
    resource information from the same output, which shows the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 前述截图展示了详细的节点状态信息，正如我们在本章中所解释的那样。你还可以从相同的输出中获取已分配的资源信息，内容如下：
- en: '![Figure 9.7 – Getting the node resource consumption information ](img/Figure_9.07_B18201.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.7 – 获取节点资源消耗信息](img/Figure_9.07_B18201.jpg)'
- en: Figure 9.7 – Getting the node resource consumption information
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.7 – 获取节点资源消耗信息
- en: The value from the preceding screenshot is to understand the current consumption
    of the cluster in terms of CPU, memory, and storage.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 上述截图中的值用于了解当前集群在 CPU、内存和存储方面的消耗情况。
- en: 'The same output also helps you get an overview of the resource requests and
    limits from the individual pods running in the current cluster, as shown in the
    following screenshot:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的输出还帮助你概览当前集群中各个Pod的资源请求和限制，如下所示的截图所示：
- en: '![Figure 9.8 – Get the pod resource consumption information ](img/Figure_9.08_B18201.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.8 – 获取Pod资源消耗信息](img/Figure_9.08_B18201.jpg)'
- en: Figure 9.8 – Get the pod resource consumption information
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.8 – 获取Pod资源消耗信息
- en: 'If you want to envision this output in a more structured way, you can use the
    following command to make it look more similar to a `yaml` file:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望以更结构化的方式查看此输出，可以使用以下命令，使其看起来更像一个`yaml`文件：
- en: '[PRE7]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output is as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 9.9 – Getting the node information in YAML ](img/Figure_9.09_B18201.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.9 – 获取节点信息的YAML格式](img/Figure_9.09_B18201.jpg)'
- en: Figure 9.9 – Getting the node information in YAML
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.9 – 获取节点信息的YAML格式
- en: 'With the preceding output, pay attention in particular to the section called
    `nodeInfo`, which gives you an overview of the OS image, architecture, kernel
    version, `kubeProxy` version, `kubelet` version, and os:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的输出中，特别注意名为`nodeInfo`的部分，它概述了操作系统镜像、架构、内核版本、`kubeProxy`版本、`kubelet`版本和操作系统：
- en: '![Figure 9.10 – Getting pod resource consumption information ](img/Figure_9.10_B18201.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.10 – 获取Pod资源消耗信息](img/Figure_9.10_B18201.jpg)'
- en: Figure 9.10 – Getting pod resource consumption information
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.10 – 获取Pod资源消耗信息
- en: 'In case you don’t want that full overview of the Kubernetes node and want to
    focus on getting the memory of the current running process in your Kubernetes
    cluster, you can run the following command within the Kubernetes node:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不需要查看Kubernetes节点的完整概况，而是专注于获取当前在Kubernetes集群中运行的进程的内存，可以在Kubernetes节点中运行以下命令：
- en: '[PRE8]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output is refined and should look similar to the following:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 输出已优化，应该看起来类似于以下内容：
- en: '![Figure 9.11 – Checking on the consumption information of the processes ](img/Figure_9.11_B18201.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.11 – 检查进程的消耗信息](img/Figure_9.11_B18201.jpg)'
- en: Figure 9.11 – Checking on the consumption information of the processes
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.11 – 检查进程的消耗信息
- en: 'As we explained earlier in this chapter, `DiskPressure` is also a key factor
    in the health status of the worker node. You can use the following command to
    check the available disk storage:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本章前面所解释的，`DiskPressure`也是工作节点健康状态的一个关键因素。你可以使用以下命令检查可用的磁盘存储：
- en: '[PRE9]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The output looks similar to the following:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 输出看起来类似于以下内容：
- en: '![Figure 9.12 – The available disk information ](img/Figure_9.12_B18201.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.12 – 可用磁盘信息](img/Figure_9.12_B18201.jpg)'
- en: Figure 9.12 – The available disk information
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.12 – 可用磁盘信息
- en: After checking on the cluster and node information, we can go to the next step,
    which is checking on the Kubernetes components.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 检查完集群和节点信息后，我们可以进入下一步，检查Kubernetes组件。
- en: Inspecting the Kubernetes components
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查Kubernetes组件
- en: We could make this checking easier and more effective by examining the processes
    in the `kube-system` namespace – that’s where you’ll find most of them and be
    able to export some handy information such as configurations, diagnosis logs,
    and so on.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过检查`kube-system`命名空间中的流程来使检查变得更简单、更有效——大多数流程都在这里，你可以导出一些有用的信息，如配置、诊断日志等。
- en: Troubleshooting a system-reserved process
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 排查系统保留进程
- en: 'Check for errors in a system-reserved process using the following command:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令检查系统保留进程中的错误：
- en: '[PRE10]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In case you have multiple nodes, you can add the `-o wide` flag to see which
    pods are running on which node:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有多个节点，可以添加`-o wide`标志，查看哪些Pod在哪个节点上运行：
- en: '[PRE11]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'As you may already know from the previous chapters, this command will print
    out the system-reserved processes:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你从前几章中了解到的，这个命令将输出系统保留进程：
- en: '![Figure 9.13 – The system-reserved process ](img/Figure_9.13_B18201.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.13 – 系统保留进程](img/Figure_9.13_B18201.jpg)'
- en: Figure 9.13 – The system-reserved process
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.13 – 系统保留进程
- en: 'When you see any process that is not in the `Running` status, it means that
    it was unhealthy – you can use the `kubectl describe pod` command to check on
    it. The following is an example to check out the `kube-proxy` status:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 当你看到任何不是`Running`状态的进程时，意味着它不健康——你可以使用`kubectl describe pod`命令检查它。以下是检查`kube-proxy`状态的示例：
- en: '[PRE12]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The preceding command will print out the full descriptive information of the
    `kube-proxy-9rfxs` pod. However, as this pod presents the `kube-proxy` component,
    we can narrow the pod information down further by using the following command:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令将打印出 `kube-proxy-9rfxs` pod 的完整描述信息。然而，由于该 pod 展示了 `kube-proxy` 组件，我们可以使用以下命令进一步缩小
    pod 信息：
- en: '[PRE13]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The output prints out the node name and its allocated IP address:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 输出打印出节点名称及其分配的 IP 地址：
- en: '[PRE14]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You can double-check this by using the `kubectl get node -o wide` command,
    which will print out the IP address of the `docker-desktop` node too. It provides
    the same IP address as the following (here is a partial output):'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `kubectl get node -o wide` 命令再三确认，这将打印出 `docker-desktop` 节点的 IP 地址。它提供与以下相同的
    IP 地址（以下是部分输出）：
- en: '![Figure 9.14 – Node-related information ](img/Figure_9.14_B18201.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.14 – 节点相关信息](img/Figure_9.14_B18201.jpg)'
- en: Figure 9.14 – Node-related information
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.14 – 节点相关信息
- en: 'From the output of the `kubectl describe` pod, `kube-proxy-9rfxs -n kubectl`,
    we know the `kube-proxy` is a DaemonSet – refer to [*Chapter 4*](B18201_04.xhtml#_idTextAnchor080),
    *Application Scheduling and Lifecycle Management*, to refresh the details about
    DaemonSets. In the case that you have multiple nodes and want to see which pod
    is on which node, you can also use the following command to check out your `kube-proxy`
    DaemonSet:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `kubectl describe` pod 的输出中，`kube-proxy-9rfxs -n kubectl`，我们知道 `kube-proxy`
    是一个 DaemonSet —— 参考 [*第 4 章*](B18201_04.xhtml#_idTextAnchor080)，*应用调度与生命周期管理*，以更新关于
    DaemonSets 的详细信息。如果你有多个节点，并且想查看每个 pod 所在的节点，你还可以使用以下命令查看 `kube-proxy` DaemonSet：
- en: '[PRE15]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The output is similar to the following, in which you can find useful information
    such as `Pod Status` and `pod template`, which shows you the details of this pod:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 输出类似于以下内容，你可以在其中找到一些有用的信息，如 `Pod 状态` 和 `pod 模板`，这将显示此 pod 的详细信息：
- en: '![Figure 9.15 – The kube-proxy DaemonSet information ](img/Figure_9.15_B18201.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.15 – kube-proxy DaemonSet 信息](img/Figure_9.15_B18201.jpg)'
- en: Figure 9.15 – The kube-proxy DaemonSet information
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.15 – kube-proxy DaemonSet 信息
- en: 'Knowing the pod configuration from the preceding output is not enough. When
    the pod is not up and running for some reason, the logs are much handier, especially
    when the `Events` section is `none` (as can be seen in the preceding screenshot
    ). We can use the following command to check the pod logs:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 仅知道前面的输出中的 pod 配置信息还不够。当 pod 因某种原因未启动时，日志会更加有用，特别是当 `Events` 部分显示为 `none`（如前面截图所示）。我们可以使用以下命令查看
    pod 日志：
- en: '[PRE16]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The preceding command prints out logs similar to the following, which will
    give you more details about what has happened:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令会打印出类似以下内容的日志，这将为你提供更多关于发生了什么的详细信息：
- en: '![Figure 9.16 – The pod logs information ](img/Figure_9.16_B18201.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.16 – Pod 日志信息](img/Figure_9.16_B18201.jpg)'
- en: Figure 9.16 – The pod logs information
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.16 – Pod 日志信息
- en: After covering master node troubleshooting, when troubleshooting is needed in
    the worker node, we should start by troubleshooting the `kubelet` agent – let’s
    get into this in the next section.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理完主节点故障排除后，如果工作节点需要排查，我们应首先排查 `kubelet` 代理 —— 让我们在下一节深入了解这一点。
- en: Troubleshooting the kubelet agent
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 排查 kubelet 代理
- en: 'After checking on the node status, we could SSH to that worker node if you’re
    not there already, and use the following command to check on the `kubelet` status:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查节点状态之后，如果你还没有登录到工作节点，可以通过 SSH 连接该工作节点，并使用以下命令检查 `kubelet` 状态：
- en: '[PRE17]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The output should look as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '![Figure 9.17 – The kubelet agent status and logs ](img/Figure_9.17_B18201.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.17 – kubelet 代理状态和日志](img/Figure_9.17_B18201.jpg)'
- en: Figure 9.17 – The kubelet agent status and logs
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.17 – kubelet 代理状态和日志
- en: 'The important part of the preceding screenshot is the status of `kubelet`,
    as can be seen in the following screenshot:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 前面截图中的重要部分是 `kubelet` 的状态，以下截图中可以看到：
- en: '![Figure 9.18 – The kubelet agent status ](img/Figure_9.18_B18201.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.18 – kubelet 代理状态](img/Figure_9.18_B18201.jpg)'
- en: Figure 9.18 – The kubelet agent status
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.18 – kubelet 代理状态
- en: 'In the case that the status is not `active (running)`, we could use `journalctl`
    to obtain the logs on the `kubelet` service on the worker node. The following
    command shows how to do so:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如果状态不是 `active (running)`，我们可以使用 `journalctl` 获取工作节点上 `kubelet` 服务的日志。以下命令显示了如何执行此操作：
- en: '[PRE18]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The output will print out log details similar to the following:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将打印出类似以下内容的日志详情：
- en: '![Figure 9.19 – The kubelet service detailed logs ](img/Figure_9.19_B18201.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.19 – kubelet服务详细日志](img/Figure_9.19_B18201.jpg)'
- en: Figure 9.19 – The kubelet service detailed logs
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.19 – kubelet服务详细日志
- en: 'Then, it’s up to you to find out what the main issue in the logs is. The following
    shows an example of the problem statement:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你需要找出日志中主要的问题所在。以下是问题陈述的示例：
- en: '![Figure 9.20 – A sample kubelet agent error in the logs ](img/Figure_9.20_B18201.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.20 – kubelet代理日志中的错误示例](img/Figure_9.20_B18201.jpg)'
- en: Figure 9.20 – A sample kubelet agent error in the logs
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.20 – kubelet代理日志中的错误示例
- en: 'Refer to [*Chapter 6*](B18201_06.xhtml#_idTextAnchor192), *Securing Kubernetes*,
    to learn about how to organize cluster access using `kubeconfig`. Once you have
    fixed the issue, you should restart the `kubelet` agent using the following command:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考[*第6章*](B18201_06.xhtml#_idTextAnchor192)，《Kubernetes安全性》，了解如何使用`kubeconfig`组织集群访问。修复问题后，应该使用以下命令重启`kubelet`代理：
- en: '[PRE19]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note that in the CKA exam, sometimes there isn’t any real issue. After you have
    checked on the lost logs using the `journalctl -u kubelet.service` command, you
    could use some help from `systemctl restart kubelet` to reboot the `kubelet` agent
    to fix the issue.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在CKA考试中，有时并没有实际的问题。在使用`journalctl -u kubelet.service`命令检查丢失的日志后，你可以通过`systemctl
    restart kubelet`命令重启`kubelet`代理来修复问题。
- en: Aside from issues with the cluster components, we often encounter application
    failures, the latter perhaps more often in the daily routine of working with Kubernetes
    clusters. So, let’s now take a look at troubleshooting applications.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 除了集群组件的问题，我们经常会遇到应用程序故障，后者在日常操作Kubernetes集群时可能更为常见。所以，现在让我们来看看如何排查应用程序故障。
- en: Troubleshooting applications
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 排查应用程序故障
- en: In this section, we’ll focus on troubleshooting containerized applications deployed
    on the Kubernetes cluster. This commonly covers issues with containerized-application-related
    Kubernetes objects, including pods, containers, services, and StatefulSets. The
    troubleshooting skill that you will learn in this section will be helpful throughout
    your CKA exam.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将重点关注在Kubernetes集群上排查容器化应用程序的故障。通常涉及与容器化应用相关的Kubernetes对象问题，包括Pods、容器、服务和StatefulSets。在这一节中你将学到的故障排除技能将在整个CKA考试中都非常有用。
- en: Getting a high-level view
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取高层次的视图
- en: 'To troubleshoot the application failures, we have to start by getting a high-level
    view. The following command is the best way to get all the information at once:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 要排查应用程序故障，我们必须先获取高层次的视图。以下命令是一次性获取所有信息的最佳方式：
- en: '[PRE20]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Alternatively, we can use the following:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以使用以下方法：
- en: '[PRE21]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The following output shows the pods up and running per namespace, within which
    you can easily find which pods have failed:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 以下输出显示了按命名空间启动并运行的Pods，你可以轻松找到哪些Pods发生了故障：
- en: '![Figure 9.21 – Listing pods per namespace ](img/Figure_9.21_B18201.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.21 – 按命名空间列出Pods](img/Figure_9.21_B18201.jpg)'
- en: Figure 9.21 – Listing pods per namespace
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.21 – 按命名空间列出Pods
- en: To get the most out of the output information, note the `NAMESPACE`, `READY`,
    and `STATUS` columns – they will tell you in which namespace pods are up and running
    and how many copies. If you’re certain about the failures that are happening on
    certain pods in a certain namespace, then you can move on to the next section
    to inspect the namespace events.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 为了充分利用输出信息，请注意`NAMESPACE`、`READY`和`STATUS`列——它们会告诉你在哪个命名空间中Pods正在运行以及有多少副本。如果你确定某些命名空间中的某些Pods发生了故障，那么可以继续查看下一节，检查命名空间事件。
- en: Inspecting namespace events
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查命名空间事件
- en: 'To inspect the namespace events, you can use the following command to find
    out what happened to the applications that were deployed in the `default` namespace:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查命名空间事件，你可以使用以下命令查看`default`命名空间中部署的应用程序发生了什么：
- en: '[PRE22]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The output should look as follows:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '![Figure 9.22 – The Kubernetes events ](img/Figure_9.22_B18201.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.22 – Kubernetes 事件](img/Figure_9.22_B18201.jpg)'
- en: Figure 9.22 – The Kubernetes events
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.22 – Kubernetes 事件
- en: 'Within the preceding screenshot, we have some valuable columns:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们有一些有价值的列：
- en: The `TYPE` column shows the event type – it could be `Normal` or `Warning`.
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TYPE`列显示事件类型——它可以是`Normal`或`Warning`。'
- en: The `REASON` column is tied to the behaviors of the events.
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`REASON`列与事件的行为相关。'
- en: The `OBJECT` column shows to which object this event is attached.
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OBJECT`列显示该事件附加到哪个对象。'
- en: The `MESSAGE` column shows what happened to a specific pod or container.
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MESSAGE`列显示了特定Pod或容器发生了什么。'
- en: 'To know more about events, check out this blog to help you extract value from
    the Kubernetes event feed: [https://www.cncf.io/blog/2021/12/21/extracting-value-from-the-kubernetes-events-feed/](https://www.cncf.io/blog/2021/12/21/extracting-value-from-the-kubernetes-events-feed/).'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于事件的信息，可以查看这篇博客，帮助你从Kubernetes事件流中提取价值：[https://www.cncf.io/blog/2021/12/21/extracting-value-from-the-kubernetes-events-feed/](https://www.cncf.io/blog/2021/12/21/extracting-value-from-the-kubernetes-events-feed/)。
- en: 'You can also sort the `events` list by most recent by using the following command:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用以下命令按最新的事件对`events`列表进行排序：
- en: '[PRE23]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'It will return the events sorted by their creation timestamp as follows:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 它将返回按创建时间戳排序的事件，如下所示：
- en: '![Figure 9.23 – The Kubernetes events by timestamp  ](img/Figure_9.23_B18201.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.23 – Kubernetes事件按时间戳分组](img/Figure_9.23_B18201.jpg)'
- en: Figure 9.23 – The Kubernetes events by timestamp
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.23 – Kubernetes事件按时间戳分组
- en: 'Similarly, if we wanted to check out the events in a namespace called `app`,
    we could use the following command:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，如果我们想查看名为`app`的命名空间中的事件，可以使用以下命令：
- en: '[PRE24]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The output should look as follows:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '![Figure 9.24 – The Kubernetes events per namespace by timestamp  ](img/Figure_9.24_B18201.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.24 – Kubernetes事件按时间戳分组](img/Figure_9.24_B18201.jpg)'
- en: Figure 9.24 – The Kubernetes events per namespace by timestamp
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.24 – Kubernetes事件按命名空间和时间戳分组
- en: The preceding output proves that we’re able to print out the events per namespace
    and sort them by creation time stamp.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 上述输出证明我们能够按命名空间打印事件，并按创建时间戳进行排序。
- en: Up until this point, we’re certain about which pod or container the issue occurred
    in. Now, let’s take a closer look at the failing pods.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们已经确定了问题发生在哪个Pod或容器中。接下来，让我们更仔细地查看故障的Pod。
- en: Troubleshooting failing pods
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 故障Pod的故障排除
- en: 'Once we narrow things down to the point where we know which pod is failing,
    we can use a command to get the pod status running in that namespace. The following
    is the command to get a failing pod called `old-busybox` in a namespace called
    `app`:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们缩小范围，确定了哪个Pod出现故障，就可以使用命令获取该命名空间中运行的Pod状态。以下是获取名为`old-busybox`、位于`app`命名空间中的故障Pod的命令：
- en: '[PRE25]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Your output will be similar to the following:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 你的输出将类似于以下内容：
- en: '![Figure 9.25 – Getting the failing pod in the namespace ](img/Figure_9.25_B18201.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.25 – 获取命名空间中的故障Pod](img/Figure_9.25_B18201.jpg)'
- en: Figure 9.25 – Getting the failing pod in the namespace
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.25 – 获取命名空间中的故障Pod
- en: 'We may notice that the `STATUS` shows there is an image error (`ErrImagePull`).
    Now, we can use the `kubectl describe` pod command to get more details:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能会注意到`STATUS`显示有一个镜像错误（`ErrImagePull`）。现在，我们可以使用`kubectl describe`命令获取更多细节：
- en: '[PRE26]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The preceding command prints an overview of the failing part, as shown in the
    following screenshot:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令打印出故障部分的概述，如下图所示：
- en: '![Figure 9.26 – Describing the failing pods in a namespace ](img/Figure_9.26_B18201.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.26 – 描述命名空间中的故障Pod](img/Figure_9.26_B18201.jpg)'
- en: Figure 9.26 – Describing the failing pods in a namespace
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.26 – 描述命名空间中的故障Pod
- en: 'You may notice there is a section called `Events` where the events related
    to this pod are displayed as follows:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到有一个名为`Events`的部分，显示与该Pod相关的事件，如下所示：
- en: '![](img/Figure_9.27_B18201.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_9.27_B18201.jpg)'
- en: Figure 9.27 – The failing pod events
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.27 – 故障Pod事件
- en: 'We can also use `kubectl logs` to get some information about the erroneous
    pod and the output will give you more detailed information. Let’s use the same
    example to get the logs of a pod called `old-busybox`, as shown in the following
    command:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`kubectl logs`命令获取有关故障Pod的一些信息，输出会提供更详细的信息。我们以相同的例子，获取名为`old-busybox`的Pod的日志，如下所示：
- en: '[PRE27]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The output is the following:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE28]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'From the previous few outputs, we know the image was not correct. As this is
    a pod, we can use the following command to export the pod definition to a `yaml`
    file called `my-old-pod.yaml`:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面几次输出中，我们知道镜像存在问题。由于这是一个Pod，我们可以使用以下命令将Pod定义导出为名为`my-old-pod.yaml`的`yaml`文件：
- en: '[PRE29]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We can also examine the content of this `yaml` file using the following command:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用以下命令查看此`yaml`文件的内容：
- en: '[PRE30]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The preceding command gives us the full configuration of the pod called `old-busybox`.
    However, we found the key part of this file is the section called `image`, as
    shown in the following:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令为我们提供了名为`old-busybox`的Pod的完整配置。但是，我们发现这个文件的关键部分是名为`image`的部分，如下所示：
- en: '![Figure 9.28 – The failing pod specification ](img/Figure_9.28_B18201.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.28 – 失败的pod规范](img/Figure_9.28_B18201.jpg)'
- en: Figure 9.28 – The failing pod specification
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.28 – 失败的pod规范
- en: 'We can edit this exported file locally using the following command:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令本地编辑导出的文件：
- en: '[PRE31]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'You’ll see that you can edit the YAML file when you’re in `EDIT` mode as follows:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 您会看到，当您处于`EDIT`模式时，可以按如下方式编辑YAML文件：
- en: '![Figure 9.29 – Editing the pod-exported YAML specification ](img/Figure_9.29_B18201.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.29 – 编辑pod导出的YAML规范](img/Figure_9.29_B18201.jpg)'
- en: Figure 9.29 – Editing the pod-exported YAML specification
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.29 – 编辑pod导出的YAML规范
- en: 'After you’re done with the editing, you need to delete the old pod using the
    `kubectl delete` command, as follows:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑完成后，您需要使用`kubectl delete`命令删除旧的pod，命令如下：
- en: '[PRE32]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Then, deploy `my-old-pod` using the `kubectl apply -f` command, and then you’ll
    see the pod is up and running again:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用`kubectl apply -f`命令部署`my-old-pod`，接着您会看到pod已经重新启动并正常运行：
- en: '[PRE33]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Important note
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: For a failing pod that was initiated by deployment, you can use `kubectl edit
    deploy < your deployment >` to live-edit the pod and fix the error. It helps to
    quickly fix a range of errors. To learn more about how the deployment live-edit
    works, refer to [*Chapter 4*](B18201_04.xhtml#_idTextAnchor080), *Application
    Scheduling and Lifecycle Management*.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 对于由部署启动的失败pod，您可以使用`kubectl edit deploy <您的部署>`命令对pod进行实时编辑并修复错误。这有助于快速修复多种错误。要了解更多关于部署实时编辑的内容，请参考[*第4章*](B18201_04.xhtml#_idTextAnchor080)，*应用调度与生命周期管理*。
- en: 'The failing pods include the following cases:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 失败的pods包括以下几种情况：
- en: '| **Failing type** | **How to debug?** |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| **失败类型** | **如何调试？** |'
- en: '| Pending | Use the `kubectl describe` command – sometimes, it is a scheduling
    issue because of no available nodes or exceeding the resource. Make sure you check
    the node status and use the `top` command to check out the resource allocation.
    |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '| Pending | 使用`kubectl describe`命令—有时是由于没有可用节点或资源超限导致的调度问题。确保检查节点状态，并使用`top`命令查看资源分配情况。
    |'
- en: '| CrashLoopBackOff | Use the `kubectl describe` and `kubectl log` commands
    – sometimes, it was caused by cluster components, so make sure you narrow the
    error down by using the outside-in approach. |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| CrashLoopBackOff | 使用`kubectl describe`和`kubectl log`命令—有时是由集群组件引起的，因此请确保通过外部到内部的方式缩小错误范围。
    |'
- en: '| Completed | Use the `kubectl describe` command to find out why it happened
    and then fix it. |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| Completed | 使用`kubectl describe`命令查找发生原因，然后进行修复。 |'
- en: '| Error | Use the `kubectl describe` command to find out why it happened and
    then fix it. |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| 错误 | 使用`kubectl describe`命令查找发生原因，然后进行修复。 |'
- en: '| ImagePullBackOff | `kubectl` describes and mostly needs to export the YAML
    file, then update the image. Also possible to use the `set image` command. |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| ImagePullBackOff | `kubectl`描述并通常需要导出YAML文件，然后更新镜像。也可以使用`set image`命令。 |'
- en: Table 9.2 - Failing pods and how to fix them
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 表 9.2 - 失败的pods及其修复方法
- en: Knowing about pod troubleshooting comes in handy and applies to most cases,
    in particular in the microservices architecture where there is mainly one container
    per pod. When it comes to multiple containers in a pod or a pod containing init
    containers, we’ll need to execute a command on the pod to troubleshoot – let’s
    take a look at those cases now.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 了解pod排错非常有用，并且适用于大多数情况，特别是在微服务架构中，通常每个pod只有一个容器。当pod中有多个容器或包含init容器时，我们需要对pod执行命令进行排错—现在让我们看看这些情况。
- en: Troubleshooting init containers
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 排查init容器问题
- en: 'In [*Chapter 4*](B18201_04.xhtml#_idTextAnchor080), *Application Scheduling
    and Lifecycle Management*, of this book, we learned about init containers, as
    we deployed init containers in the following example:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的[*第4章*](B18201_04.xhtml#_idTextAnchor080)，*应用调度与生命周期管理*中，我们学习了init容器，以下是我们在示例中部署init容器的过程：
- en: '[PRE34]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'We can use the following command to check the status for the `initContainer`
    of this pod:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令检查该pod的`initContainer`状态：
- en: '[PRE35]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'In my case, the printed output looks as follows:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的情况下，打印的输出如下：
- en: '[PRE36]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The preceding output shows that the `initContainer` is not ready.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 上述输出显示`initContainer`尚未准备好。
- en: 'We can use the following command to check the logs for the `initContainer`
    of the pod to understand why and fix the issue:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令检查该pod的`initContainer`日志，以了解问题并修复它：
- en: '[PRE37]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Similarly, `initContainer` also has its status – the following are the common
    ones:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，`initContainer`也有其状态—以下是常见的几种：
- en: '| **Failing type** | **What does that mean?** |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| **失败类型** | **这意味着什么？** |'
- en: '| `Init: X/Y` | The pod has `Y` init containers in total and `X` of them are
    completed |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| `Init: X/Y` | Pod 总共有 `Y` 个 init containers，已完成 `X` 个 |'
- en: '| `Init: Error` | `initContainer` failed to execute correctly |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| `Init: Error` | `initContainer` 执行失败 |'
- en: '| `Init:CrashLoopBackOff` | `initContainer` is failing repeatedly |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
  zh: '| `Init:CrashLoopBackOff` | `initContainer` 正在反复失败 |'
- en: '| `Pending` | The pod is pending, so it has not started the `initContainer`
    execution yet |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '| `Pending` | Pod 处于待处理状态，尚未开始执行 `initContainer` |'
- en: '| `PodInitializing` | The `initContainer` is executed and now the pod is initiating
    |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| `PodInitializing` | `initContainer` 已执行，Pod 正在初始化 |'
- en: '| `Running` | The `initContainer` is executed and now the pod is up and running
    |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '| `Running` | `initContainer` 已执行，Pod 现在正在运行 |'
- en: Familiarity with these statuses will help you define when and how to take further
    steps to debug containers.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 熟悉这些状态有助于你判断何时以及如何采取进一步的步骤来调试容器。
- en: Summary
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter covered cluster troubleshooting and application troubleshooting
    from the cluster, the node, and then down to the pod level – this is an end-to-end,
    outside-in approach. As a Kubernetes administrator, acquiring good troubleshooting
    skills will help you to provide better value to your organization greatly.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 本章节覆盖了从集群、节点到 Pod 层级的集群和应用故障排除——这是一种端到端的外部到内部的方法。作为 Kubernetes 管理员，掌握良好的故障排除技能将极大地帮助你为组织提供更大的价值。
- en: In the next chapter, we’ll focus on Kubernetes security, networking troubleshooting
    use cases, and some more end-to-end troubleshooting scenarios. Stay tuned!
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章节，我们将重点讨论 Kubernetes 安全性、网络故障排除用例，以及一些端到端的故障排除场景，敬请期待！
- en: FAQs
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见问题解答
- en: '*Where can I find a comprehensive guide to troubleshooting the clusters?*'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在哪里可以找到一个全面的集群故障排除指南？*'
- en: 'You can find the updated information from the official Kubernetes documentation:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从官方 Kubernetes 文档中找到最新信息：
- en: '[https://kubernetes.io/docs/tasks/debug/debug-cluster/](https://kubernetes.io/docs/tasks/debug/debug-cluster/)'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://kubernetes.io/docs/tasks/debug/debug-cluster/](https://kubernetes.io/docs/tasks/debug/debug-cluster/)'
- en: '*Where can I find a comprehensive guide to troubleshooting the applications?*'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在哪里可以找到一个全面的应用故障排除指南？*'
- en: 'You can find the updated information from the official Kubernetes documentation:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从官方 Kubernetes 文档中找到最新信息：
- en: '[https://kubernetes.io/docs/tasks/debug/debug-application/](https://kubernetes.io/docs/tasks/debug/debug-application/)'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://kubernetes.io/docs/tasks/debug/debug-application/](https://kubernetes.io/docs/tasks/debug/debug-application/)'

- en: Logging and Monitoring
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日志记录和监控
- en: 'This chapter will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下食谱：
- en: Working with EFK
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 EFK
- en: Working with Google Stackdriver
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Google Stackdriver
- en: Monitoring master and node
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控主节点和工作节点
- en: Introduction
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Logging and monitoring are two of the most important tasks in Kubernetes. However,
    there are many ways to achieve logging and monitoring in Kubernetes, because there
    are a lot of logging and monitoring open source applications, as well as many
    public cloud services.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 日志记录和监控是 Kubernetes 中最重要的两项任务。然而，Kubernetes 中有许多方式可以实现日志记录和监控，因为有很多开源日志记录和监控应用程序，也有许多公共云服务。
- en: Kubernetes has a best practice for setting up a logging and monitoring infrastructure
    that most Kubernetes provisioning tools support as an add-on. In addition, managed
    Kubernetes services, such as Google Kubernetes Engine, integrate GCP log and a
    monitoring service out of the box.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 有一个设置日志记录和监控基础设施的最佳实践，大多数 Kubernetes 配置工具都将其作为附加组件支持。此外，托管的 Kubernetes
    服务，如 Google Kubernetes Engine，开箱即集成了 GCP 日志和监控服务。
- en: Let's set up a logging and monitoring service on your Kubernetes cluster.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在你的 Kubernetes 集群上设置日志记录和监控服务。
- en: Working with EFK
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 EFK
- en: In the Container world, log management always faces a technical difficulty,
    because Container has its own filesystem, and when Container is dead or evicted,
    the log files are gone. In addition, Kubernetes can easily scale out and scale
    down the Pods, so we need to care about a centralized log persistent mechanism.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在容器世界中，日志管理总是面临技术难题，因为容器有自己的文件系统，当容器崩溃或被驱逐时，日志文件就会消失。此外，Kubernetes 可以轻松地扩展和缩减
    Pod，因此我们需要关注一个集中式的日志持久机制。
- en: Kubernetes has an add-on for setting up centralized log management, which is
    called EFK. EFK stands for **Elasticsearch**, **Fluentd**, and **Kibana**. These
    applications' stack bring you a full function of log collection, indexing, and
    UI.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 有一个用于设置集中式日志管理的附加组件，称为 EFK。EFK 代表 **Elasticsearch**、**Fluentd** 和
    **Kibana**。这些应用程序的堆栈为你提供了完整的日志收集、索引和 UI 功能。
- en: Getting ready
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: In [Chapter 1](4dd5324f-b753-4c80-b891-bd8e6013b2c1.xhtml), *Building Your Own
    Kubernetes Cluster*, we set up our Kubernetes cluster with several different provisioning
    tools. Based on your Kubernetes provisioning tool, there is an easy way to set
    up EFK stack. Note that Elasticsearch and Kibana are heavy-duty Java applications.
    They require at least 2 GB of memory each.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第 1 章](4dd5324f-b753-4c80-b891-bd8e6013b2c1.xhtml)，*搭建你自己的 Kubernetes 集群*
    中，我们使用了几种不同的配置工具来搭建 Kubernetes 集群。根据你使用的 Kubernetes 配置工具，有一种简单的方法来搭建 EFK 堆栈。请注意，Elasticsearch
    和 Kibana 是重量级的 Java 应用程序，它们每个至少需要 2 GB 内存。
- en: Therefore, if you use minikube, your machine should have at least 8 GB of memory
    (16 GB is recommended). If you use kubespray or kops to set up Kubernetes cluster,
    Kubernetes node should have at least 4 core CPUs and 16 GB of memory in total
    (in other words, if you have 2 nodes, each node should have a minimum of 2 core
    CPUs and 8GB of memory).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果你使用 minikube，你的机器至少应该有 8 GB 内存（推荐 16 GB）。如果你使用 kubespray 或 kops 来设置 Kubernetes
    集群，则 Kubernetes 节点应该至少具有 4 核 CPU 和 16 GB 内存（换句话说，如果你有 2 个节点，每个节点应该至少有 2 核 CPU
    和 8 GB 内存）。
- en: 'In addition, in order to demonstrate how to gather the application logs efficiently,
    we create one additional namespace. It will help you to search your application
    log easily:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，为了演示如何高效地收集应用程序日志，我们创建了一个额外的命名空间。它将帮助你轻松搜索应用程序日志：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How to do it...
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现…
- en: 'In this recipe, we will use the following Kubernetes provisioning tools to
    set up EFK stack. Based on your Kubernetes cluster, please read the appropriate
    section of this recipe:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将使用以下 Kubernetes 配置工具来搭建 EFK 堆栈。根据你的 Kubernetes 集群，请阅读本食谱中适当的部分：
- en: minikube
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: minikube
- en: kubespray (ansible)
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: kubespray（ansible）
- en: kops
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: kops
- en: Note that for GKE on the Google Cloud Platform, we will introduce another way
    to set up logging infrastructure in the next recipe.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，对于 Google Cloud Platform 上的 GKE，我们将在下一篇食谱中介绍另一种设置日志基础设施的方法。
- en: Setting up EFK with minikube
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 minikube 设置 EFK
- en: minikube provides an add-on feature for EFK out of the box, but it is disabled
    by default. So, you need to enable EFK on your minikube manually. EFK consumes
    a large amount of heap memory but minikube allocates only 2 GB by default, which
    is absolutely not sufficient to run the EFK stack in minikube. Therefore, we'll
    need to enlarge minikube's memory size explicitly.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: minikube为EFK提供了开箱即用的附加功能，但默认情况下是禁用的。因此，你需要手动启用minikube上的EFK。EFK消耗大量堆内存，而minikube默认仅分配2GB内存，这显然不足以在minikube中运行EFK堆栈。因此，我们需要明确增大minikube的内存大小。
- en: 'In addition, you should use the latest version of minikube, due to several
    bug fixes made for EFK while writing this cookbook. So, we are using minikube
    version 0.25.2\. Let''s configure minikube to enable EFK using the following steps:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，由于在编写本手册时，针对EFK做了多个bug修复，你应该使用最新版本的minikube。因此，我们使用minikube版本0.25.2。让我们通过以下步骤配置minikube以启用EFK：
- en: 'If you are already running `minikube`, stop `minikube` first:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你已经在运行`minikube`，首先停止`minikube`：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Update to the latest version of minikube:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新到最新版本的minikube：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Since EFK consumes a large amount of heap memory, start `minikube` with 5 GB
    of memory:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于EFK消耗大量堆内存，启动`minikube`时分配5GB内存：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Make sure, all Pods in the kube-system Namespace are up, because EFK relies
    on `kube-addon-manager-minikube`:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保`kube-system`命名空间中的所有Pods都已启动，因为EFK依赖于`kube-addon-manager-minikube`：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Enable the `efk` add-on:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用`efk`附加组件：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Wait for a while; Elasticsearch, fluentd and kibana Pod have been deployed
    in the kube-system namespace automatically. Wait for the `STATUS `to become `Running`.
    It should take at least 10 minutes to complete:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待一会儿；Elasticsearch、Fluentd和Kibana Pod会自动部署在`kube-system`命名空间中。等待`STATUS`变为`Running`。这通常需要至少10分钟才能完成：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Use `kubectl logs` to watch a kibana that waits for the state to become `green`.
    This also takes an additional five minutes:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`kubectl logs`查看等待状态变为`green`的Kibana。这还需要额外的五分钟：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Access the kibana service using the `minikube service` command:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`minikube service`命令访问Kibana服务：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, you have access to the Kibana UI from your machine. You just need to set
    up an index. Since Fluentd keeps sending a log with the index name as `logstash-yyyy.mm.dd`,
    the index pattern is `logstash-*` by default. Click the Create button:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以从你的机器访问Kibana UI。你只需要设置一个索引。由于Fluentd持续发送带有索引名称`logstash-yyyy.mm.dd`的日志，默认的索引模式是`logstash-*`。点击创建按钮：
- en: '![](img/6221d481-761c-45c3-a8ad-82c7f7249adb.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6221d481-761c-45c3-a8ad-82c7f7249adb.png)'
- en: Setting up EFK with kubespray
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用kubespray设置EFK
- en: 'kubespray has a configuration concerning whether or not to enable EFK. By default,
    it is disabled, so you need to enable it with the following steps:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: kubespray有一个配置项，决定是否启用EFK。默认情况下是禁用的，因此你需要通过以下步骤手动启用它：
- en: Open `<kubespray dir>/inventory/mycluster/group_vars/k8s-cluster.yaml`.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`<kubespray dir>/inventory/mycluster/group_vars/k8s-cluster.yaml`。
- en: 'Around line number 152 in the `k8s-cluster.yml` file, change the value of  `efk_enabled` to
    `true`:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`k8s-cluster.yml`文件的第152行附近，将`efk_enabled`的值更改为`true`：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Run the `ansible-playbook` command to update your Kubernetes cluster:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`ansible-playbook`命令来更新你的Kubernetes集群：
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Check to see if Elasticsearch, Fluentd, and Kibana Pod''s STATUS became Running
    or not; if you see the Pending state for more than 10 minutes, check `kubectl
    describe pod <Pod name>` to see the status. In most cases, you will get an error
    saying insufficient memory. If so, you need to add more Nodes or increase the
    available RAM:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查Elasticsearch、Fluentd和Kibana Pod的`STATUS`是否变为Running；如果你看到`Pending`状态超过10分钟，检查`kubectl
    describe pod <Pod name>`查看状态。在大多数情况下，你会看到内存不足的错误。如果是这样，你需要添加更多节点或增加可用的RAM：
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Check the kibana log to see if the status has become `green`:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看Kibana日志，检查状态是否变为`green`：
- en: '[PRE12]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Run `kubectl cluster-info`, confirm Kibana is running, and capture the URL
    of Kibana:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`kubectl cluster-info`，确认Kibana正在运行，并捕获Kibana的URL：
- en: '[PRE13]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In order to access the Kibana WebUI from your machine remotely, it is easier
    to use ssh port forwarding from your machine to the Kubernetes master:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了从你的机器远程访问Kibana WebUI，使用ssh端口转发从你的机器到Kubernetes主节点会更方便：
- en: '[PRE14]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Access the Kibana WebUI from your machine using the following URL: `http://localhost:8080/api/v1/namespaces/kube-system/services/kibana-logging/proxy`.'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下URL从你的机器访问Kibana WebUI：`http://localhost:8080/api/v1/namespaces/kube-system/services/kibana-logging/proxy`。
- en: 'Now you can access Kibana from your machine. You also need to configure the
    index. Just make sure the index name has `logstash-*` as the default value. Then,
    click the Create button:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以从你的机器访问 Kibana。你还需要配置索引。只需确保索引名称的默认值为 `logstash-*`。然后，点击 Create 按钮：
- en: '![](img/280efe0d-f605-4867-9a01-356809c8b4d0.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/280efe0d-f605-4867-9a01-356809c8b4d0.png)'
- en: Setting up EFK with kops
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 kops 设置 EFK
- en: 'kops also has an add-on for setting up the EFK stack on your Kubernetes cluster
    easily. Proceed through the following steps to run EFK stack on your Kubernetes:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: kops 还提供了一个插件，便于在 Kubernetes 集群上轻松设置 EFK 堆栈。请按照以下步骤在 Kubernetes 上运行 EFK 堆栈：
- en: 'Run `kubectl create` to specify the kops EFK add-on:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `kubectl create` 来指定 kops EFK 插件：
- en: '[PRE15]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Wait for the `STATUS `of all Pods to become `Running`:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待所有 Pod 的 `STATUS` 变为 `Running`：
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Check Kibana''s log and wait until the state becomes `green`:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查 Kibana 的日志，等待状态变为 `green`：
- en: '[PRE17]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Run `kubetl cluster-info` to capture the Kibana URL:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `kubetl cluster-info` 来获取 Kibana 的 URL：
- en: '[PRE18]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Use `kubectl proxy` to forward your machine to the Kubernetes API server:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `kubectl proxy` 将你的机器转发到 Kubernetes API 服务器：
- en: '[PRE19]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Access the Kibana WebUI from your machine using the following URL: `http://127.0.0.1:8080/api/v1/namespaces/kube-system/services/kibana-logging/proxy.
    Note that the IP address is 127.0.0.1, which is correct because we are using a
    kubectl proxy`.'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下 URL 从你的机器访问 Kibana WebUI：`http://127.0.0.1:8080/api/v1/namespaces/kube-system/services/kibana-logging/proxy`。请注意，IP
    地址是 127.0.0.1，这是正确的，因为我们正在使用 kubectl proxy。
- en: Now, you can start to use Kibana. Configure an index as described in the preceding
    minikube and kubespray sections.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以开始使用 Kibana。按照前面 minikube 和 kubespray 部分中的说明配置索引。
- en: How it works...
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As you can see, the installed Kibana versions are different based on the Kubernetes
    provisioning tool. But this cookbook explores the basic functions of Kibana. Therefore,
    there are no version-specific operations to worry about.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，已安装的 Kibana 版本会根据 Kubernetes 配置工具的不同而有所不同。但本手册将探讨 Kibana 的基本功能。因此，无需担心版本特定的操作。
- en: 'Let''s launch a sample application and then learn how to monitor your application
    log using Kibana:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们启动一个示例应用程序，然后学习如何使用 Kibana 监控应用程序日志：
- en: 'Prepare a sample application that keeps printing a `DateTime` and hello message
    to the `stdout`:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备一个示例应用程序，它会不断将 `DateTime` 和问候消息打印到 `stdout`：
- en: '[PRE20]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Create a sample application in the `chap9` namespace:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `chap9` 命名空间中创建一个示例应用程序：
- en: '[PRE21]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Access the Kibana WebUI, then click the Discover tab:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 Kibana WebUI，然后点击 Discover 标签：
- en: 'Make sure the time range is `Last 15 minutes`, then type `kubernetes.namespace_name:
    chap9` in the search box and hit the *Enter* key:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '确保时间范围设置为 `Last 15 minutes`，然后在搜索框中输入 `kubernetes.namespace_name: chap9` 并按下
    *Enter* 键：'
- en: '![](img/605953dd-4b60-4118-b5e1-8b43fd12b726.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/605953dd-4b60-4118-b5e1-8b43fd12b726.png)'
- en: Searching the chap9 namespace log in 15 minutes
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在 15 分钟内搜索 chap9 命名空间日志
- en: 'You can see all of the logs in the `chap9` namespaces as follows. The screenshot
    shows much more information than you might have expected. By clicking the add
    button for `kubernetes.host`, `kubernetes.pod_name`, and `log `will display only
    the fields necessary for this purpose:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以看到 `chap9` 命名空间中的所有日志，如下所示。截图显示了比你预期的更多信息。通过点击 `kubernetes.host`、`kubernetes.pod_name`
    和 `log` 的添加按钮，只会显示此目的所需的字段：
- en: '![](img/43d5f71f-eda4-47ca-a253-91abc698340c.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/43d5f71f-eda4-47ca-a253-91abc698340c.png)'
- en: Choosing log columns
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 选择日志列
- en: 'Now you can see a more simple log view for this application:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以看到这个应用程序的更简单日志视图：
- en: '![](img/640154f0-7bbe-4370-9d5c-617ca4a18e9a.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/640154f0-7bbe-4370-9d5c-617ca4a18e9a.png)'
- en: Showing the final state of a customized Kibana view
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 显示自定义 Kibana 视图的最终状态
- en: Congratulations! You now have have a centralized log management system in your
    Kubernetes cluster. You can observe the deployment of some Pods to see how you
    can see the application log.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！现在你已经在 Kubernetes 集群中建立了一个集中的日志管理系统。你可以观察一些 Pod 的部署，看看如何查看应用程序日志。
- en: There's more...
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The preceding EFK stack collects Pods' logs only, because Fluentd is monitoring
    `/var/log/containers/*` in the Kubernetes node host. It is good enough to monitor
    an application's behavior, but, as a Kubernetes administrator, you also need some
    Kubernetes system logs such as master and node logs.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 EFK 堆栈仅收集 Pod 的日志，因为 Fluentd 正在监控 Kubernetes 节点主机上的 `/var/log/containers/*`。这足以监控应用程序的行为，但作为
    Kubernetes 管理员，你还需要一些 Kubernetes 系统日志，例如主节点和工作节点日志。
- en: There is an easy way to achieve Kubernetes system log management that integrates
    with the EFK stack; add a Kubernetes Event Exporter, which keeps monitoring a
    Kubernetes event. When the new event has occurred, send a log to Elasticsearch.
    So, you can monitor a Kubernetes event with Kibana as well.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种简单的方法可以实现与 EFK 堆栈集成的 Kubernetes 系统日志管理；添加一个 Kubernetes 事件导出器（Event Exporter），它会持续监控
    Kubernetes 事件。当有新事件发生时，日志会发送到 Elasticsearch。因此，你也可以通过 Kibana 监控 Kubernetes 事件。
- en: 'We have prepared an Eventer (Event Exporter) add-on ([https://raw.githubusercontent.com/kubernetes-cookbook/second-edition/master/chapter9/9-1/eventer.yml](https://raw.githubusercontent.com/kubernetes-cookbook/second-edition/master/chapter9/9-1/eventer.yml)).
    It is Heapster ([https://github.com/kubernetes/heapster](https://github.com/kubernetes/heapster)),
    based and expected to run on top of EFK add-ons. We can use this Eventer to monitor
    Kubernetes events through EFK:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已准备好一个 Eventer（事件导出器）插件 ([https://raw.githubusercontent.com/kubernetes-cookbook/second-edition/master/chapter9/9-1/eventer.yml](https://raw.githubusercontent.com/kubernetes-cookbook/second-edition/master/chapter9/9-1/eventer.yml))。它基于
    Heapster ([https://github.com/kubernetes/heapster](https://github.com/kubernetes/heapster))，并预计在
    EFK 插件之上运行。我们可以使用这个 Eventer 通过 EFK 来监控 Kubernetes 事件：
- en: Details of Heapster will be described in the next section—*Monitoring master
    and nodes*.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Heapster 的详细信息将在下一节中描述——*监控主节点和节点*。
- en: 'Add eventer to your existing Kubernetes cluster:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 Eventer 添加到现有的 Kubernetes 集群中：
- en: '[PRE22]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Make sure Eventer Pod''s `STATUS` is `Running`:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保 Eventer Pod 的 `STATUS` 为 `Running`：
- en: '[PRE23]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Use `kubectl logs` to keep observing Heapster and whether it can capture the
    event:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `kubectl logs` 来持续观察 Heapster 是否能够捕获事件：
- en: '[PRE24]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'For testing purposes, open another terminal, and then create a `nginx` Pod:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了测试，打开另一个终端，然后创建一个 `nginx` Pod：
- en: '[PRE25]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Observe Heapster''s log; some new events have been captured:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察 Heapster 的日志，已经捕获了一些新的事件：
- en: '[PRE26]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Open Kibana and navigate to Settings | Indices| Add New. This will add a new
    index.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Kibana，导航至设置 | 索引 | 添加新索引。这将添加一个新的索引。
- en: 'Put the Index name as `heapster-*`, set the time-field name as `Metadata.creationTimestamp`,
    and then click Create:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将索引名称设置为 `heapster-*`，将时间字段名称设置为 `Metadata.creationTimestamp`，然后点击创建：
- en: '![](img/bcc5beb4-06a2-4c0a-82e5-ba0fb8277743.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bcc5beb4-06a2-4c0a-82e5-ba0fb8277743.png)'
- en: Configurring a Heapster index
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 配置 Heapster 索引
- en: Go back to the Discover page, and then choose the `heapster-*` index from the
    left-hand panel.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到发现页面，然后从左侧面板选择 `heapster-*` 索引。
- en: 'Select (click the Add button) Message, Source.component, and Source.host:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择（点击添加按钮）Message、Source.component 和 Source.host：
- en: '![](img/339ef52f-785f-4797-a212-6dd019737602.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/339ef52f-785f-4797-a212-6dd019737602.png)'
- en: Choosing the necessary columns
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 选择必要的列
- en: 'Now you can see the Kubernetes system log, which shows the `nginx` Pod creation
    event as follows:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你可以看到 Kubernetes 系统日志，其中显示了 `nginx` Pod 创建事件，如下所示：
- en: '![](img/4de710de-182a-4d4f-bf5f-8a0a58b488ec.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4de710de-182a-4d4f-bf5f-8a0a58b488ec.png)'
- en: Showing the final state of the system log view in Kibana
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 显示 Kibana 中系统日志视图的最终状态
- en: Now you can monitor not only the application log, but also the Kubernetes system
    log in the EFK stack. Through switching indexes between either `logstash-*` (application
    log) or `heapster-*` (system log), you have a flexible log management environment.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你不仅可以监控应用程序日志，还可以在 EFK 堆栈中监控 Kubernetes 系统日志。通过在 `logstash-*`（应用程序日志）或 `heapster-*`（系统日志）之间切换索引，你将拥有一个灵活的日志管理环境。
- en: See also
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另见
- en: 'In this cookbook, we learned how to enable the EFK stack for your Kubernetes
    cluster. Kibana is a powerful tool that you can use to create your own dashboard
    and keep checking the logs more efficiently. Please visit Kibana''s online documentation
    to understand how to use it:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们学习了如何为 Kubernetes 集群启用 EFK 堆栈。Kibana 是一个强大的工具，你可以使用它创建自己的仪表板，并更高效地查看日志。请访问
    Kibana 的在线文档了解如何使用它：
- en: Kibana User Guide Reference: [https://www.elastic.co/guide/en/kibana/index.html](https://www.elastic.co/guide/en/kibana/current/index.html)
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kibana 用户指南参考：[https://www.elastic.co/guide/en/kibana/index.html](https://www.elastic.co/guide/en/kibana/current/index.html)
- en: Working with Google Stackdriver
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Google Stackdriver
- en: In [Chapter 7](dfc46490-f109-4f07-ba76-1a381b006d76.xhtml), *Building Kubernetes
    on GCP*, we introduced GKE. It has an integrated logging mechanism, which is called
    Google Stackdriver. In this section, we will explore the integration between GKE
    and Stackdriver.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 7 章](dfc46490-f109-4f07-ba76-1a381b006d76.xhtml)，*在 GCP 上构建 Kubernetes*
    中，我们介绍了 GKE。它有一个集成的日志机制，叫做 Google Stackdriver。在本节中，我们将探讨 GKE 与 Stackdriver 之间的集成。
- en: Getting ready
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: To use a Stackdriver, you just need a GCP account. If you have never used GCP,
    please go back and read [Chapter 7](dfc46490-f109-4f07-ba76-1a381b006d76.xhtml),
    *Building Kubernetes on GCP*, to set up a GCP account and the `gcloud` command-line
    interface.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Stackdriver，你只需要一个 GCP 账户。如果你从未使用过 GCP，请回到并阅读 [第7章](dfc46490-f109-4f07-ba76-1a381b006d76.xhtml)，*在
    GCP 上构建 Kubernetes*，以设置 GCP 账户和 `gcloud` 命令行界面。
- en: 'To use Stackdriver on GKE, no action is needed, because GKE uses Stackdriver
    as a logging platform by default. But if you want to explicitly enable Stackdriver,
    specify `--enable-cloud-logging` while launching your Kubernetes by using the `gcloud`
    command, as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 GKE 上使用 Stackdriver，无需任何操作，因为 GKE 默认使用 Stackdriver 作为日志平台。但如果你想明确启用 Stackdriver，可以在使用
    `gcloud` 命令启动 Kubernetes 时，指定 `--enable-cloud-logging`，如下所示：
- en: '[PRE27]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'If, for some reason, you have a GKE that doesn''t enable Stackdriver, you can
    use the `gcloud` command to enable it afterwards:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果因为某些原因你的 GKE 没有启用 Stackdriver，你可以使用 `gcloud` 命令在之后启用它：
- en: '[PRE28]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: How to do it...
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In order to demonstrate Stackdriver with GKE, we will create one namespace
    on Kubernetes, then launch a sample Pod to see some logs on the Stackdriver, as
    shown in the following steps:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示 Stackdriver 与 GKE 的结合使用，我们将在 Kubernetes 上创建一个命名空间，然后启动一个示例 Pod，以便查看 Stackdriver
    上的日志，具体步骤如下所示：
- en: 'Create the `chap9` namespace:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `chap9` 命名空间：
- en: '[PRE29]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Prepare a sample application Pod:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备一个示例应用程序 Pod：
- en: '[PRE30]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Create the Pod on the `chap9` namespace:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `chap9` 命名空间中创建 Pod：
- en: '[PRE31]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Access the GCP Web Console and navigate to Logging | Logs.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 GCP Web 控制台并导航到 Logging | Logs。
- en: 'Select Audited Resources | GKE Container | Your GKE cluster name (ex: my-gke)
    | chap9 namespace:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择已审计资源 | GKE 容器 | 你的 GKE 集群名称（例如：my-gke） | chap9 命名空间：
- en: '![](img/56cce8ab-6c3c-4e16-a08e-064c7457fe23.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/56cce8ab-6c3c-4e16-a08e-064c7457fe23.png)'
- en: Selecting the chap9 namespace Pod log
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 选择 chap9 命名空间 Pod 日志
- en: 'As an alternative way of accessing the `chap9` namespace log, you can select
    an advanced filter. Then, type the following criteria to the text field and click
    the Submit Filter button:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为访问 `chap9` 命名空间日志的替代方法，你可以选择一个高级筛选器。然后，输入以下标准到文本框中并点击提交筛选按钮：
- en: '![](img/4e824b79-9f07-4735-8829-7a16e421fa31.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4e824b79-9f07-4735-8829-7a16e421fa31.png)'
- en: Using an advanced filter
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 使用高级筛选器
- en: '[PRE32]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '![](img/6443a266-ce69-4ce2-b263-14d382b44278.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6443a266-ce69-4ce2-b263-14d382b44278.png)'
- en: Input an advanced filter criterion
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 输入高级筛选器标准
- en: 'Now, you can see the `myapp` log on Stackdriver:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以在 Stackdriver 上看到 `myapp` 的日志：
- en: '![](img/d7882e0f-0411-4fa5-ba69-a38cce0bc95f.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d7882e0f-0411-4fa5-ba69-a38cce0bc95f.png)'
- en: Showing the chap9 Pod log in Stackdriver
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Stackdriver 中显示 chap9 Pod 日志
- en: How it works...
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Stackdriver has a basic functionality for narrowing down a date, severity,
    and keyword search. It helps to monitor an application''s behavior. How about
    system-level behavior, such as master and node activities? Stackdriver also supports
    searching of the system-level log. Actually, `fluentd` captures not only the application
    log, but the system log as well. By performing the following steps, you can see
    the system log in Stackdriver:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Stackdriver 提供了基本功能，可以按日期、严重性和关键字进行筛选。这有助于监控应用程序的行为。那么，系统级行为，比如主节点和节点活动呢？Stackdriver
    也支持搜索系统级别的日志。实际上，`fluentd` 不仅捕获应用程序日志，还捕获系统日志。通过执行以下步骤，你可以在 Stackdriver 中查看系统日志：
- en: 'Select GKE Cluster Operations | Your GKE name (for example, my-gke) | All location:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 GKE 集群操作 | 你的 GKE 名称（例如，my-gke） | 所有位置：
- en: You should select All location instead of a particular location, because some
    Kubernetes operation logs do not contain location values.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该选择所有位置，而不是特定位置，因为一些 Kubernetes 操作日志不包含位置值。
- en: '![](img/9c02d2bc-23bf-4707-be44-f29c62780a8c.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9c02d2bc-23bf-4707-be44-f29c62780a8c.png)'
- en: Choosing a GKE system log in Stackdriver
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 选择 Stackdriver 中的 GKE 系统日志
- en: 'As an alternative, input an advanced filter as follows:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为替代方法，输入以下高级筛选器：
- en: '[PRE33]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '![](img/2807ea60-99cc-4078-accf-f993e14c1c46.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2807ea60-99cc-4078-accf-f993e14c1c46.png)'
- en: Showing a GKE system log in Stackdriver
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Stackdriver 中显示 GKE 系统日志
- en: See also
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: In this recipe, we introduced Google Stackdriver. It is a built-in function
    of Google Kubernetes Engine. Stackdriver is a simple but powerful log management
    tool. In addition, Stackdriver is capable of monitoring the system status. You
    can make built-in or custom metrics to monitor and provide alerts regarding events
    as well. This will be described in the next recipe.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们介绍了 Google Stackdriver。它是 Google Kubernetes Engine 的内置功能。Stackdriver
    是一个简单但强大的日志管理工具。此外，Stackdriver 还能够监控系统状态。你可以创建内置或自定义的指标来监控并提供关于事件的警报。这将在下一个示例中详细描述。
- en: 'In addition, please read the following chapter to recap the basics of GCP and
    GKE:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请阅读以下章节，回顾 GCP 和 GKE 的基础知识：
- en: '[Chapter 7](dfc46490-f109-4f07-ba76-1a381b006d76.xhtml), *Building Kubernetes
    on GCP*'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第七章](dfc46490-f109-4f07-ba76-1a381b006d76.xhtml)，*在 GCP 上构建 Kubernetes*'
- en: Monitoring master and node
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控主节点和工作节点
- en: During the journey of the previous recipes, you learned how to build your own
    cluster, run various resources, enjoy different usage scenarios, and even enhance
    cluster administration. Now, here comes a new level of perspective for your Kubernetes
    cluster. In this recipe, we are going to talk about monitoring. Through the monitoring
    tool, users will not only learn about the resource consumption of nodes, but also
    the Pods. This will help us to have greater efficiency as regards resource utilization.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面几个示例的过程中，你学习了如何构建自己的集群，运行各种资源，体验不同的使用场景，甚至提升集群管理能力。现在，Kubernetes 集群有了新的视角。在本例中，我们将讨论监控。通过监控工具，用户不仅能了解节点的资源消耗情况，还能监控
    Pods 的状态。这将帮助我们在资源利用效率上取得更大提升。
- en: Getting ready
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'As with earlier recipes, all you have to prepare is a healthy Kubernetes cluster.
    The following command, along with `kubectl`, will help you to verify the status
    of your Kubernetes system:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的示例一样，你只需准备一个健康的 Kubernetes 集群。以下命令与 `kubectl` 一起使用，可以帮助你验证 Kubernetes 系统的状态：
- en: '[PRE34]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: For demonstration later, we will deploy the monitoring system on a `minikube-booted`
    cluster. However, it works for any kind of well-installed clusters.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 为了后续演示，我们将在 `minikube-booted` 集群上部署监控系统。然而，它同样适用于任何已安装良好的集群。
- en: How to do it...
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'In this section, we will work on installing a monitoring system and introducing
    its dashboard. This monitoring system is based on *Heapster* ([https://github.com/kubernetes/heapster](https://github.com/kubernetes/heapster)),
    a resource usage collecting and analyzing tool. Heapster communicates with kubelet
    to get the resource usage of both machine and container. Along with Heapster,
    we have influxDB ([https://influxdata.com](https://influxdata.com)) for storage
    and Grafana ([http://grafana.org](http://grafana.org)) as the frontend dashboard,
    which visualizes the status of resources in several user-friendly plots:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 本节内容将介绍如何安装监控系统并介绍其仪表盘。该监控系统基于 *Heapster*（[https://github.com/kubernetes/heapster](https://github.com/kubernetes/heapster)），它是一个收集和分析资源使用情况的工具。Heapster
    与 kubelet 通信，获取机器和容器的资源使用情况。配合 Heapster，我们还使用 influxDB（[https://influxdata.com](https://influxdata.com)）进行存储，Grafana（[http://grafana.org](http://grafana.org)）作为前端仪表盘，能够通过多个用户友好的图表展示资源状态：
- en: '![](img/7e703755-eaf8-442f-a2b2-881dcecd6c4c.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7e703755-eaf8-442f-a2b2-881dcecd6c4c.png)'
- en: The interaction of monitoring components
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 监控组件的交互
- en: 'Heapster gathers information from **kubelet** on each node and provides data
    for other platforms. In our case, an influxDB is a sink for saving historical
    data. It is available for users to do further data analysis, such as the prediction
    of peak workload, and then make corresponding resource adjustments. We have Grafana
    working as an affable web console; users can manage monitoring status through
    the browser. Moreover, `kubectl` has the subcommand `top`, which provides the
    ability to grep cluster-wide information through Heapster:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: Heapster 从每个节点上的**kubelet**收集信息，并为其他平台提供数据。在我们的案例中，influxDB 用作保存历史数据的接收端。它允许用户进行进一步的数据分析，例如预测峰值工作负载，然后进行相应的资源调整。我们使用
    Grafana 作为一个友好的 Web 控制台；用户可以通过浏览器管理监控状态。此外，`kubectl` 还具有 `top` 子命令，提供通过 Heapster
    提取集群范围信息的功能：
- en: '[PRE35]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This command turns out an error message.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令返回错误信息。
- en: 'Installing a monitoring system could be much easier than anticipated. By applying
    configuration files from the open-source communities and companies, we can set
    up component monitoring on Kubernetes simply with the aid of a few commands:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 安装监控系统比预想的要简单得多。通过应用开源社区和公司提供的配置文件，我们可以通过少量命令轻松在 Kubernetes 上设置组件监控：
- en: '[PRE36]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: You could find that applying an online source is also feasible for creating
    Kubernetes applications.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 你会发现，使用在线资源也是创建 Kubernetes 应用程序的可行方案。
- en: How it works...
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'After you have installed influxDB, Heapster, and Grafana, let''s learn how
    to get the status of the resource. First, you may use `kubectl top` now. Check
    the utilization of nodes and Pods, as well as verifying the functionality of monitoring:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完 influxDB、Heapster 和 Grafana 后，让我们来学习如何获取资源的状态。首先，你可以现在使用 `kubectl top`。检查节点和
    Pods 的使用情况，同时验证监控功能：
- en: '[PRE37]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Currently, `kubectl top` only covers nodes and Pods, and just shows their CPU
    and RAM usage.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，`kubectl top`仅涵盖节点和Pods，并且只显示它们的CPU和RAM使用情况。
- en: According to the output of `kubectl top`, what does the **m** mean in terms
    of the quantity of CPU usage? It means "milli", as in millisecond and millimeter.
    Millicpu is regarded as 10^(-3) CPU. For example, if the Heapster Pod uses 1 m
    CPU, it only takes 0.1% CPU computation power at this moment.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 根据`kubectl top`的输出，**m**表示什么，关于CPU使用量的数量？它代表“毫”，如同毫秒和毫米一样。Millicpu被认为是10^(-3)
    CPU。例如，如果Heapster Pod使用1 m CPU，这时它只消耗0.1%的CPU计算能力。
- en: Introducing the Grafana dashboard
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Grafana仪表板
- en: 'Now, let''s take a look at the Grafana dashboard. In our case, for the minikube-booted
    cluster, we should open a proxy to enable accessibility from the localhost to
    the Kubernetes cluster:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看Grafana仪表板。在我们的案例中，对于minikube启动的集群，我们应该打开代理，以便从本地主机访问Kubernetes集群：
- en: '[PRE38]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'You may access Grafana through this URL: `http://localhost:8001/api/v1/namespaces/kube-system/services/monitoring-grafana/proxy/`.
    The magic that enables us to see the web page is made by the Kubernetes DNS server
    and proxy:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过以下网址访问Grafana：`http://localhost:8001/api/v1/namespaces/kube-system/services/monitoring-grafana/proxy/`。使我们能够查看网页的魔法是由Kubernetes的DNS服务器和代理完成的：
- en: '**Accessing the Grafana dashboard in an anti-minikube Kubernetes**'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '**在非minikube Kubernetes中访问Grafana仪表板**'
- en: 'To access Grafana through a browser, it depends on the network configuration
    of nodes and the Kubernetes service of Grafana. Follow these points for forwarding
    the web page to your client:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过浏览器访问Grafana，取决于节点的网络配置和Grafana的Kubernetes服务。请按照以下步骤将网页转发到你的客户端：
- en: '**Upgrade Grafana''s service type**: The configuration file we applied creates
    Grafana with a ClusterIP service. You should change it to `NodePort` or `LoadBalancer`
    for exposing Grafana to the outside world.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**升级Grafana的服务类型**：我们应用的配置文件创建了一个ClusterIP服务的Grafana。你应该将其更改为`NodePort`或`LoadBalancer`，以便将Grafana暴露到外部。'
- en: '**Check firewalls**: Make sure your clients or load balancer are able to access
    your node of the cluster.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**检查防火墙**：确保你的客户端或负载均衡器能够访问集群中的节点。'
- en: '**Dashboard access through the target port**: Instead of using a detailed URL,
    like we did on the minikube cluster, you can access Grafana with simple ones such
    as `NODE_ENTRYPOINT:3000` (Grafana requests port 3000 in the configuration file
    by default) or the entry point of the load balancer.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通过目标端口访问仪表板**：你可以通过简单的URL来访问Grafana，而不是像我们在minikube集群中使用的详细URL，例如`NODE_ENTRYPOINT:3000`（默认情况下，Grafana请求端口3000）或负载均衡器的入口点。'
- en: '![](img/9b62104d-22b6-43df-839f-f3dcf61859f6.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9b62104d-22b6-43df-839f-f3dcf61859f6.png)'
- en: The home page of Grafana
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: Grafana的主页
- en: 'In the default settings of Grafana, we have two dashboards, **Cluster** and
    **Pods**. The **Cluster** board covers the nodes'' resource utilization, such
    as CPU, memory, network transaction, and storage. The **Pods** dashboard has similar
    plots for each Pod and you can check each container in a Pod:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在Grafana的默认设置中，我们有两个仪表板，**Cluster**和**Pods**。**Cluster**仪表板显示节点的资源利用情况，例如CPU、内存、网络流量和存储。**Pods**仪表板为每个Pod提供类似的图表，你可以检查Pod中每个容器的情况：
- en: '![](img/e1bda91b-4fb6-4da5-804f-a586ce2eaf50.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e1bda91b-4fb6-4da5-804f-a586ce2eaf50.png)'
- en: Viewing the Pod kube-dns by Pod dashboard
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 查看Pod kube-dns的Pod仪表板
- en: As the preceding screenshot show, for example, we can observe the CPU utilization
    of individual containers in the Pod `kube-dns` in the namespace `kube-system`,
    which is the cluster of the DNS server. You can find that there are three containers
    in this Pod, `kubedns`, `dnsmasq`, and `sidecar`, and the lines in the plot express
    the limit, request, and real usage of CPU for containers respectively.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面的截图所示，例如，我们可以观察命名空间`kube-system`中的`kube-dns` Pod中单个容器的CPU利用率，这个Pod是DNS服务器的集群。你会发现这个Pod中有三个容器，`kubedns`、`dnsmasq`和`sidecar`，图表中的线条分别表示容器的CPU限制、请求和实际使用情况。
- en: Creating a new metric to monitor Pod
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新的指标来监控Pod
- en: 'For a running application, metrics are the data we can collect and use to analyze
    its behavior and performance. Metrics can come from the system side, such as the
    usage of CPU, or be based on the functionality of an application, such as the
    request frequency of certain functions. There are several metrics for monitoring
    offered by Heapster ([https://github.com/kubernetes/heapster/blob/master/docs/storage-schema.md](https://github.com/kubernetes/heapster/blob/master/docs/storage-schema.md)).
    We are going to show you how to create a customized panel by yourself. Please
    take the following steps as a reference:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 对于正在运行的应用程序，度量标准是我们可以收集和用来分析其行为和性能的数据。度量标准可以来自系统方面，比如 CPU 的使用，也可以基于应用程序的功能，比如某些功能的请求频率。Heapster
    提供了几个监控用的度量标准（[https://github.com/kubernetes/heapster/blob/master/docs/storage-schema.md](https://github.com/kubernetes/heapster/blob/master/docs/storage-schema.md)）。我们将向您展示如何自己创建一个定制面板。请按照以下步骤操作：
- en: 'Go to the dashboard of Pod, and drag the web page to the bottom. There is a
    button called ADD ROW; click it to add a metric. Then, choose the first category
    Graph as a new panel for expressing this metric:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到 Pod 的仪表板，并将网页拖到底部。有一个名为“ADD ROW”的按钮；点击它以添加一个度量标准。然后，选择图表类别作为表达这个度量标准的新面板：
- en: '![](img/988cdb9a-61da-4fb4-993c-1dfbbd44ff19.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![](img/988cdb9a-61da-4fb4-993c-1dfbbd44ff19.png)'
- en: Adding a new metric with graph expression
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 使用图表表达添加一个新的度量标准
- en: 'An empty panel block appears. Go ahead and click on it for further configuration.
    Just choose Edit when the editing block shows up right after you pick the panel:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个空的面板块出现了。继续点击进行进一步配置。当你选择面板后显示编辑块时，选择编辑：
- en: '![](img/261dae87-d0cc-437e-822d-5dc45d76c76b.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![](img/261dae87-d0cc-437e-822d-5dc45d76c76b.png)'
- en: Starting to edit a panel
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 开始编辑面板
- en: 'First, give your panel a name. For example, `CPU Rate`. We would like to create
    one showing the rate of CPU utilization:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，给你的面板取一个名字。例如，`CPU Rate`。我们想创建一个显示 CPU 利用率的面板：
- en: '![](img/5d8b175c-f7cb-4d2f-b640-6e133b8f8ddd.png)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5d8b175c-f7cb-4d2f-b640-6e133b8f8ddd.png)'
- en: Giving the panel a title on the "General" page
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在“通用”页面上给面板一个标题
- en: 'Set up the following parameters for specific data querying. Take the following
    screenshot as reference:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置以下参数以特定数据查询。请参考以下截图：
- en: 'FROM: `cpu/usage_rate`'
  id: totrans-215
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: FROM：`cpu/usage_rate`
- en: 'WHERE: `type = pod_container`'
  id: totrans-216
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: WHERE：`type = pod_container`
- en: 'AND: `namespace_name=$namespace, pod_name=$podname value`'
  id: totrans-217
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: AND：`namespace_name=$namespace, pod_name=$podname value`
- en: 'GROUP BY: `tag(container_name)`'
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按`tag(container_name)`分组
- en: 'ALIAS BY: `$tag_container_name`'
  id: totrans-219
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由`$tag_container_name`别名
- en: '![](img/fef0d5dc-9c4c-4942-b895-c4a5a663f7fa.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fef0d5dc-9c4c-4942-b895-c4a5a663f7fa.png)'
- en: Parameters of data querying for CPU-rate metric
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 数据查询参数的 CPU 利用率度量标准
- en: 'Does any line of status show up? If not, modifying the configuration in the
    display page will help you build the best looking graph for you. Make the Null
    value connected and you will find lines showing out:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是否显示任何状态线？如果没有，在显示页面中修改配置将帮助您建立最佳外观的图表。使 Null 值连接，您将找到显示的线：
- en: '![](img/f3a38ac6-cf33-48ea-b24d-63f864e5b62a.png)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f3a38ac6-cf33-48ea-b24d-63f864e5b62a.png)'
- en: Editing the look of your metric. Checking the null value to be "connected" for
    showing the lines
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑度量标准的外观。检查 Null 值以“连接”显示线
- en: Here you go! Feel free to close the edit mode. You now have a new metric for
    every Pod.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就这样！随意关闭编辑模式。您现在每个 Pod 都有一个新的度量标准。
- en: Just try to discover more functionality of the Grafana dashboard and the Heapster
    monitoring tool. You will obtain further details about your system, services,
    and containers through the information from the monitoring system.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 只需尝试发现 Grafana 仪表板和 Heapster 监控工具的更多功能。通过监控系统的信息，您将获取有关系统、服务和容器的进一步详细信息。
- en: There's more...
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We built up a monitoring system based on Heapster, which is maintained by the
    Kubernetes group. Yet, several tools and platforms focusing on container cluster
    have sprung up to support the community, such as Prometheus ([https://prometheus.io](https://prometheus.io)).
    On the other hand, public clouds may have run daemons on VM for grabbing the metrics
    by default, and provided services for corresponding actions. We don't have to
    build one within the cluster. Next, we are going to introduce the monitoring method
    on AWS and GCP. You may wish to check [C*hapter 6*](b7e1d803-52d0-493b-9123-5848da3fa9ec.xhtml),
    *Building Kubernetes on AWS*, and [C*hapter 7*](dfc46490-f109-4f07-ba76-1a381b006d76.xhtml),
    *Building Kubernetes on GCP*, to build a cluster and learn more concepts.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建立了一个基于 Heapster 的监控系统，该系统由 Kubernetes 团队维护。然而，许多专注于容器集群的工具和平台纷纷涌现，旨在支持社区，比如
    Prometheus（[https://prometheus.io](https://prometheus.io)）。另一方面，公有云可能默认在虚拟机上运行守护进程来抓取指标，并提供相应的服务来执行相关操作。我们不必在集群内部构建此类服务。接下来，我们将介绍
    AWS 和 GCP 上的监控方法。你可能希望查看[C*hapter 6*](b7e1d803-52d0-493b-9123-5848da3fa9ec.xhtml)，*在
    AWS 上构建 Kubernetes*，以及[C*hapter 7*](dfc46490-f109-4f07-ba76-1a381b006d76.xhtml)，*在
    GCP 上构建 Kubernetes*，来构建一个集群并学习更多概念。
- en: Monitoring your Kubernetes cluster on AWS
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 AWS 上监控你的 Kubernetes 集群
- en: 'While working on AWS, we usually rely on AWS CloudWatch([https://aws.amazon.com/cloudwatch/](https://aws.amazon.com/cloudwatch/))
    for monitoring. You can create a dashboard, and pick up any basic metrics you
    want. CloudWatch already collects a bunch of metrics for you:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 AWS 时，我们通常依赖 AWS CloudWatch（[https://aws.amazon.com/cloudwatch/](https://aws.amazon.com/cloudwatch/)）来进行监控。你可以创建一个仪表板，选择任何你想要的基本指标。CloudWatch
    已经为你收集了大量的指标：
- en: '![](img/74f9230e-9818-4dc3-95e8-453cf4ea2bad.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![](img/74f9230e-9818-4dc3-95e8-453cf4ea2bad.png)'
- en: Create a new metric with AWS CloudWatch
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 AWS CloudWatch 创建新的指标
- en: But, for the resource of Kubernetes, such as Pods, customized metrics for them
    need to be sent out to CloudWatch with manual configuration. With a kops installation,
    it is recommended that you build your monitoring system with Heapster or Prometheus.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，对于 Kubernetes 资源，例如 Pods，需要将它们的自定义指标通过手动配置发送到 CloudWatch。如果是通过 kops 安装，建议使用
    Heapster 或 Prometheus 来构建你的监控系统。
- en: AWS has its own container cluster service, Amazon ECS. This may be the reason
    why AWS didn't support Kubernetes deeply and we have to build clusters through
    kops and terraform, along with other add-on services. Nevertheless, according
    to recent news, there will be a new service called **Amazon Elastic Container
    Service for Kubernetes** (**Amazon EKS**). We can look forward to the integration
    of Kubernetes and other AWS services.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 有自己的容器集群服务——Amazon ECS。这可能是 AWS 没有深度支持 Kubernetes 的原因，我们需要通过 kops 和 terraform
    构建集群，并配合其他附加服务。然而，根据最近的新闻，将推出一项名为 **Amazon Elastic Container Service for Kubernetes**（**Amazon
    EKS**）的新服务。我们可以期待 Kubernetes 与 AWS 其他服务的集成。
- en: Monitoring your Kubernetes cluster on GCP
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 GCP 上监控你的 Kubernetes 集群
- en: 'Before we look at the monitoring platform of GCP, the nodes of GKE cluster
    should admit being scanned for any applied status:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们查看 GCP 的监控平台之前，GKE 集群的节点应该允许扫描任何应用状态：
- en: '[PRE39]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '*Google Stackdriver* provides system monitoring in a hybrid cloud environment.
    Besides its own GCP, it can also cover your computing resources on AWS. To access
    its web console, you can find its section under the menu on the left-hand side.
    There are multiple service categories in Stackdriver. Select Monitoring to check
    related functionality.'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '*Google Stackdriver* 提供了一个混合云环境下的系统监控。除了它自己的 GCP，它还可以覆盖你在 AWS 上的计算资源。要访问其 Web
    控制台，可以在左侧菜单中找到其相应部分。Stackdriver 中有多个服务类别，选择 Monitoring 来查看相关功能。'
- en: 'As a new user, you will get a 30-day free trial. The initial configuration
    is simple; just enable an account and bind your project. You may avoid the agent
    installation and AWS account setup since we simply want to check the GKE cluster.
    Once you log in to Stackdriver successfully, click Resources on the left-side
    panel and choose Kubernetes Engine under infrastructure type:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 作为新用户，你将获得 30 天的免费试用。初始配置非常简单；只需启用一个账户并绑定你的项目。你可以避免安装代理和设置 AWS 账户，因为我们只是想查看
    GKE 集群。一旦成功登录 Stackdriver，点击左侧面板的 Resources，并在基础设施类型下选择 Kubernetes Engine：
- en: '![](img/4f113195-bb4d-4420-976a-93ac659c547a.png)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4f113195-bb4d-4420-976a-93ac659c547a.png)'
- en: Main page for GKE on Strackdriver monitoring
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: GKE 在 Stackdriver 上的主页面
- en: 'There are several metrics set up already for computing resources from node
    to container. Take your time exploring and check the official introduction for
    more features: [https://cloud.google.com/kubernetes-engine/docs/how-to/monitoring](https://cloud.google.com/kubernetes-engine/docs/how-to/monitoring).'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 已经设置了多个用于计算从节点到容器的资源的指标。请花时间探索并查看官方介绍，了解更多特性：[https://cloud.google.com/kubernetes-engine/docs/how-to/monitoring](https://cloud.google.com/kubernetes-engine/docs/how-to/monitoring)。
- en: See also
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另见
- en: 'This recipe showed you how to monitor your machines in the Kubernetes system.
    However, it is wise to study the recipes of the main components and daemons. You
    can get more ideas about working processes and resource usage. Moreover, since
    we have worked with several services to build our monitoring system, reviewing
    recipes about the Kubernetes services again will give you a clear idea about how
    you can build up this monitoring system:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 本文展示了如何在 Kubernetes 系统中监控机器。然而，明智的做法是研究主组件和守护进程的配方。你可以更多地了解工作流程和资源使用情况。此外，既然我们已经与多个服务合作建立了我们的监控系统，再次回顾关于
    Kubernetes 服务的配方将帮助你更清晰地了解如何构建这个监控系统：
- en: The *Exploring Architecture* recipe in [Chapter 1](1a0d884d-59d3-4f67-adee-2d2e37030132.xhtml),
    *Building Your Own Kubernetes Cluster*
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第1章](1a0d884d-59d3-4f67-adee-2d2e37030132.xhtml)中的*探索架构*配方，*构建你自己的 Kubernetes
    集群*'
- en: The *Working with Services* recipe in [Chapter 2](e9a51674-078b-4ffc-a76c-98774150bfa3.xhtml),
    *Walking through Kubernetes Concepts*
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第2章](e9a51674-078b-4ffc-a76c-98774150bfa3.xhtml)中的*与服务协作*配方，*走进 Kubernetes
    概念*'
- en: 'Kubernetes is a project that keeps moving forward and upgrading apace. The
    recommended way to catch up is to check out new features on its official website:
    [http://kubernetes.io](http://kubernetes.io). Also, you can always get new Kubernetes
    versions on GitHub at [https://github.com/kubernetes/kubernetes/releases](https://github.com/kubernetes/kubernetes/releases).
    Keeping your Kubernetes system up to date, and learning new features practically,
    is the best method for accessing Kubernetes technology continuously.'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 是一个不断发展并快速升级的项目。跟上进度的推荐方式是查看其官方网站上的新特性：[http://kubernetes.io](http://kubernetes.io)。你也可以随时在
    GitHub 上获取新的 Kubernetes 版本：[https://github.com/kubernetes/kubernetes/releases](https://github.com/kubernetes/kubernetes/releases)。保持
    Kubernetes 系统的最新状态，并通过实践学习新特性，是持续接触 Kubernetes 技术的最佳方法。

- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Monitoring the Edge with Prometheus and Grafana
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Prometheus和Grafana监控边缘设备
- en: One use case for edge computing is to monitor devices that get data about temperature,
    humidity, speed, noise, and so on. For this kind of use cases, monitoring would
    be critical. This chapter shows a simple use case of how to visualize data that
    comes from edge devices with sensors. This chapter presents a whole example of
    how to distribute and process data across the different layers of an edge computing
    system. This use case takes Prometheus and Grafana as the main components to visualize
    and store data from sensors and uses Mosquitto (an MQTT message broker) together
    with Redis to implement high availability queues to process data at the edge.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 边缘计算的一个应用场景是监控获取温度、湿度、速度、噪声等数据的设备。对于这种类型的用例，监控至关重要。本章展示了一个简单的用例，说明如何可视化来自边缘设备传感器的数据。本章提供了一个完整的示例，展示了如何在边缘计算系统的不同层次间分发和处理数据。该用例以Prometheus和Grafana为主要组件，来可视化和存储来自传感器的数据，并使用Mosquitto（MQTT消息代理）与Redis结合，实现高可用队列来处理边缘数据。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要内容：
- en: Monitoring edge environments
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控边缘环境
- en: Deploying Redis to persist Mosquitto sensor data
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署Redis以持久化Mosquitto传感器数据
- en: Installing Mosquitto to process sensor data
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Mosquitto以处理传感器数据
- en: Processing Mosquitto topics
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理Mosquitto主题
- en: Installing Prometheus, a time series database
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Prometheus，一个时间序列数据库
- en: Deploying a custom exporter for Prometheus
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署Prometheus的自定义exporter
- en: Configuring a DHT11 sensor to send humidity and temperature weather data
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置DHT11传感器，以发送湿度和温度数据
- en: Installing Grafana to create dashboards
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Grafana以创建仪表盘
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To deploy our databases in this chapter, you need the following:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了部署本章中的数据库，你需要以下内容：
- en: A single or multi-node K3s cluster that uses ARM devices with MetalLB and Longhorn
    storage installed. If you are using Raspberry Pi devices, you will need at least
    4 GB of RAM and at least the 4B model. Each node has to have an Ubuntu ARM64 operating
    system in order to support the ARMv8 processor. This processor type is necessary
    for some deployments to run, because they use ARM64 container images.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个单节点或多节点的K3s集群，使用带有MetalLB和Longhorn存储的ARM设备。如果你使用Raspberry Pi设备，你需要至少4GB的RAM，并且至少是4B型号。每个节点必须运行Ubuntu
    ARM64操作系统，以支持ARMv8处理器。这种处理器类型是某些部署运行所必需的，因为它们使用ARM64容器镜像。
- en: A Kubernetes cluster hosted in your public cloud provider (AWS, Azure, or GCP)
    or in your private cloud.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个托管在你的公共云提供商（AWS、Azure或GCP）或私人云中的Kubernetes集群。
- en: A Raspberry Pi 4B with 2 or 4 GB for your edge device.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配备2GB或4GB的Raspberry Pi 4B作为边缘设备。
- en: A Keyes DHT11 sensor or similar connected to your edge device to read temperature
    and humidity.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接到你的边缘设备的Keyes DHT11传感器或类似设备，用于读取温度和湿度。
- en: '`kubectl` configured to be used in your local machine for your Kubernetes cloud
    cluster and your edge cluster, to avoid using the `--kubeconfig` parameter.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置好`kubectl`，以便在你的本地机器上使用Kubernetes云集群和边缘集群，避免使用`--kubeconfig`参数。
- en: A clone of the [https://github.com/PacktPublishing/Edge-Computing-Systems-with-Kubernetes/tree/main/ch11](https://github.com/PacktPublishing/Edge-Computing-Systems-with-Kubernetes/tree/main/ch11)
    repository, if you want to run the YAML configuration by using `kubectl apply`
    instead of copying the code from the book. Take a look at the `code` directory
    for Python source code and the `yaml` directory for YAML configurations located
    inside the `ch11` directory.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你想通过使用`kubectl apply`运行YAML配置，而不是从书中复制代码，请克隆[https://github.com/PacktPublishing/Edge-Computing-Systems-with-Kubernetes/tree/main/ch11](https://github.com/PacktPublishing/Edge-Computing-Systems-with-Kubernetes/tree/main/ch11)
    仓库。查看`code`目录获取Python源代码，查看`yaml`目录获取位于`ch11`目录中的YAML配置文件。
- en: With this, you can deploy Prometheus and Grafana to start monitoring sensors
    data in edge environments.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，你就可以部署Prometheus和Grafana，开始监控边缘环境中的传感器数据。
- en: Monitoring edge environments
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控边缘环境
- en: 'Before starting to build our monitoring system, let’s describe the system across
    the different layers of edge computing. For this, let’s take a look at the following
    diagram:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始构建我们的监控系统之前，让我们描述一下边缘计算不同层次的系统架构。为此，我们来看看以下图表：
- en: '![Figure 11.1 – Monitoring with edge devices'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.1 – 使用边缘设备进行监控'
- en: '](img/B16945_11_01.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_11_01.jpg)'
- en: Figure 11.1 – Monitoring with edge devices
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.1 – 使用边缘设备进行监控
- en: 'This diagram is divided into different layers. Let’s describe the different
    components of this use case we want to implement:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 该图分为不同的层次。让我们描述一下我们想要实现的这个用例的不同组件：
- en: '`send.py`. This file prepares the sensor to read data and sends the information
    to a queue in the Mosquitto broker.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`send.py`。该文件准备传感器读取数据，并将信息发送到 Mosquitto 经纪人中的队列。'
- en: '`sensor1`. Every time the process detects new data, this data is sent to a
    Redis queue called `sensor1` in the cloud layer. The idea is that the deployment
    called `process` processes the information in the format to be shown in the cloud
    layer. With this, you are processing data near the edge; that is the goal of edge
    computing.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sensor1`。每次该进程检测到新数据时，这些数据会被发送到云层中的名为 `sensor1` 的 Redis 队列。目的是让名为 `process`
    的部署处理以适合在云层中显示的格式的数据。通过这样做，你是在边缘附近处理数据；这是边缘计算的目标。'
- en: '**Near edge**: This is the home router that connects the edge device with the
    K3s cluster to process data. It is also the gateway to send data to the public
    Redis cluster in the cloud layer.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**近端边缘**：这是连接边缘设备与 K3s 集群以处理数据的家庭路由器。它也是将数据发送到云层公共 Redis 集群的网关。'
- en: '`service1` is in charge of reading this data from the `sensor1` Redis queue
    and exporting it to Prometheus. Prometheus calls the `service1` service endpoint
    to get data. So, every time that Prometheus calls the `app1` endpoint, `service1`
    returns data stored in Redis in a format that Prometheus can consume. Finally,
    when data is stored in Prometheus, the data is visualized in real time in a Grafana
    dashboard.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`service1` 负责从 `sensor1` Redis 队列中读取数据，并将其导出到 Prometheus。Prometheus 调用 `service1`
    服务端点以获取数据。因此，每次 Prometheus 调用 `app1` 端点时，`service1` 会返回存储在 Redis 中的数据，格式适合 Prometheus
    消耗。最后，当数据存储在 Prometheus 中时，数据会在 Grafana 仪表板上实时可视化。'
- en: As you can see, this small use case includes a whole interaction across the
    different edge computing layers. This use case pretends to be base code extensible
    to your own system needs. Now, let’s start implementing our use case, beginning
    with deploying Redis to persist Mosquitto sensor data.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这个小型用例包括了不同边缘计算层次之间的完整交互。这个用例旨在作为基础代码，可以根据你的系统需求进行扩展。现在，让我们开始实现我们的用例，从部署
    Redis 来持久化 Mosquitto 传感器数据开始。
- en: Deploying Redis to persist Mosquitto sensor data
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署 Redis 来持久化 Mosquitto 传感器数据
- en: 'To install our Redis to persist Mosquitto weather data, we are going to use
    Redis with persistence and a single list of messages. To deploy this Redis setup
    in your cluster, follow these steps:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为了安装我们的 Redis 以持久化 Mosquitto 天气数据，我们将使用带有持久化功能的 Redis，并使用单一的消息列表。要在集群中部署这个 Redis
    设置，请按照以下步骤操作：
- en: 'Create the PersistentVolume to persist Redis data using the `/mnt/data` directory
    in the node:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用节点中的 `/mnt/data` 目录创建 PersistentVolume，以持久化 Redis 数据：
- en: '[PRE0]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create a PersistentVolumeClaim using 5 GB of storage or more, depending on
    how many sensors and how much data you are processing:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 5 GB 或更多存储空间创建一个 PersistentVolumeClaim，具体取决于你正在处理的传感器数量和数据量：
- en: '[PRE1]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Important Note
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: You can use the `longhorn` class if Longhorn is installed in your system. For
    more information, see [*Chapter 5*](B16945_05_Final_PG.xhtml#_idTextAnchor097),
    *K3s Homelab for Edge Computing Experiments*.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的系统中安装了 Longhorn，可以使用 `longhorn` 类。有关更多信息，请参见 [*第 5 章*](B16945_05_Final_PG.xhtml#_idTextAnchor097)，*K3s
    家庭实验室用于边缘计算实验*。
- en: 'Now let’s create a ConfigMap to use a custom configuration with the password
    `YOUR_PASSWORD` and the `/data` directory to store Redis data:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个 ConfigMap，使用自定义配置，其中包括密码 `YOUR_PASSWORD` 和用于存储 Redis 数据的 `/data`
    目录：
- en: '[PRE2]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create the Redis deployment using the previous ConfigMap called `redis-configmap`.
    This ConfigMap is mounted as a volume and its content is available using the `redis.conf`
    file. It also uses a PersistentVolumeClaim called `db-pv-claim` and uses resource
    limits for CPU and memory. Let’s create this deployment by running the following
    command:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用之前创建的 ConfigMap `redis-configmap` 创建 Redis 部署。该 ConfigMap 被挂载为一个卷，其内容可通过 `redis.conf`
    文件访问。它还使用一个名为 `db-pv-claim` 的 PersistentVolumeClaim，并使用 CPU 和内存的资源限制。我们通过运行以下命令来创建这个部署：
- en: '[PRE3]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Important Note
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: You can use the `arm64v8/redis:6.2` image instead of `redis:6.2` if you plan
    to deploy Redis on an ARM node.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你计划在 ARM 节点上部署 Redis，可以使用 `arm64v8/redis:6.2` 镜像，而不是 `redis:6.2`。
- en: 'Now create the `redis` service, setting port `6379` in the configuration:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在创建 `redis` 服务，在配置中设置端口 `6379`：
- en: '[PRE4]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This service will be used by the exporter that Prometheus reads as `service1`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 该服务将被 Prometheus 的导出器 `service1` 使用。
- en: 'Now create a `LoadBalancer` service called `redis-lb` to create a public load
    balancer that the `process` service can use to store data going from the far edge
    to the cloud layer:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在创建一个名为 `redis-lb` 的 `LoadBalancer` 服务，创建一个公共负载均衡器，供 `process` 服务使用，以存储从远端边缘到云层的数据：
- en: '[PRE5]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This is going to create an external IP to access Redis.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个外部 IP 用于访问 Redis。
- en: 'To get the public IP generated by the previous `LoadBalancer` service, run
    the following command:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要获取前一个 `LoadBalancer` 服务生成的公共 IP，请运行以下命令：
- en: '[PRE6]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This IP will be used by the deployment process.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 此 IP 将被部署进程使用。
- en: Now our Redis is ready to be used in the far edge. Let’s install Mosquitto to
    send sensor data to the `sensor1` topic from Mosquitto.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的 Redis 已经准备好在远程边缘使用。让我们安装 Mosquitto，将来自 Mosquitto 的传感器数据发送到 `sensor1` 主题。
- en: Installing Mosquitto to process sensor data
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Mosquitto 以处理传感器数据
- en: 'Mosquitto is an open source broker that implements the MQTT protocol, and it’s
    lightweight too. It was designed to be used with low-power sensors and devices.
    This makes Mosquitto suitable for edge computing and IoT applications. Mosquitto
    provides a lightweight channel of communication for edge devices and uses the
    publisher/subscriber pattern to send and read messages, but it is not persistent.
    We are going to use Redis later to give this missing temporary persistence for
    the data queues. Now, let’s move to install Mosquitto in our edge cluster, located
    at the far edge. Remember that this single node cluster is using an ARM device.
    To deploy Mosquitto, follow these steps:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Mosquitto 是一个开源代理，实施 MQTT 协议，而且它也非常轻量。它被设计用来与低功耗传感器和设备一起使用。这使得 Mosquitto 非常适合边缘计算和物联网应用。Mosquitto
    为边缘设备提供了轻量级的通信通道，并使用发布/订阅模式来发送和读取消息，但它并不持久化。我们将稍后使用 Redis 来为数据队列提供缺失的临时持久性。现在，让我们继续在远程边缘的边缘集群中安装
    Mosquitto。请记住，这个单节点集群使用的是 ARM 设备。要部署 Mosquitto，请遵循以下步骤：
- en: 'Create a ConfigMap to listen over all the available network interfaces:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 ConfigMap，用于监听所有可用的网络接口：
- en: '[PRE7]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now create a deployment for Mosquitto, setting the ports to `1883` for the
    MQTT protocol and `9001` for HTTP requests. This deployment is going to use the
    previously created `mosquitto-configmap`:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在为 Mosquitto 创建一个部署，将端口设置为 `1883` 用于 MQTT 协议，`9001` 用于 HTTP 请求。该部署将使用之前创建的
    `mosquitto-configmap`：
- en: '[PRE8]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You can customize the amount of RAM and CPU that this deployment is using.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以自定义该部署所使用的 RAM 和 CPU 的数量。
- en: 'Now create a `ClusterIP` service to expose Mosquitto, so that other services
    inside the cluster can connect to Mosquitto to read messages:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在创建一个 `ClusterIP` 服务来暴露 Mosquitto，以便集群内的其他服务可以连接到 Mosquitto 以读取消息：
- en: '[PRE9]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now create a LoadBalancer service to expose Mosquitto, so that edge devices
    can connect to Mosquitto to publish messages with weather metrics. In this example,
    our device will publish in the `sensor1` topic:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在创建一个 LoadBalancer 服务来暴露 Mosquitto，以便边缘设备可以连接到 Mosquitto，发布带有天气指标的消息。在此示例中，我们的设备将发布到
    `sensor1` 主题：
- en: '[PRE10]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now, let’s deploy the `process` service that sends all the weather data stored
    in the Mosquitto topics to the Redis database located in the cloud layer.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们部署 `process` 服务，将 Mosquitto 主题中存储的所有天气数据发送到云层中的 Redis 数据库。
- en: Processing Mosquitto topics
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理 Mosquitto 主题
- en: 'We have to deploy the deployment called `process` using the `mqttsubs` container
    image, which sends the data published in Mosquitto to a public or private Redis
    instance in the cloud layer. Let’s explore the code inside this container image:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用 `mqttsubs` 容器镜像来部署名为 `process` 的部署，该镜像将 Mosquitto 中发布的数据发送到云层中的公共或私有
    Redis 实例。让我们来看看这个容器镜像中的代码：
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You can find the source of `mqttsubs` at [https://github.com/sergioarmgpl/containers/tree/main/mqttsubs/src](https://github.com/sergioarmgpl/containers/tree/main/mqttsubs/src).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [https://github.com/sergioarmgpl/containers/tree/main/mqttsubs/src](https://github.com/sergioarmgpl/containers/tree/main/mqttsubs/src)
    找到 `mqttsubs` 的源代码。
- en: With this code, we get the necessary values to connect to Redis, the name of
    the topic that we are going to use. This value will be used to push sensor data
    into a Redis list. Finally, `MOSQUITTO_HOST` is where this service will be listened
    to. What this script basically does is it start listening to the `SENSOR_TOPIC`
    topic called `sensor1` from Mosquitto, and when a message arrives, it is inserted
    into a Redis list with the same name in the cloud layer to persist the information
    temporarily. Redis uses port `6379` and is public but uses a password. Mosquitto
    is internally deployed on the far edge. This is how this service works.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这段代码，我们获取连接 Redis 所需的值，以及我们将要使用的主题名称。这个值将用于将传感器数据推送到 Redis 列表中。最后，`MOSQUITTO_HOST`
    是该服务将要监听的地方。这个脚本的基本功能是开始监听名为 `sensor1` 的 `SENSOR_TOPIC` 主题，当消息到达时，它会将其插入到云层中的同名
    Redis 列表中，以便临时持久化信息。Redis 使用端口 `6379`，是公共的，但需要密码。Mosquitto 部署在远端边缘。这就是该服务的工作原理。
- en: 'To start deploying our `process` deployment, follow these steps:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始部署我们的 `process` 部署，按照以下步骤操作：
- en: 'Create a Secret to store the password to connect to Redis. Redis will be used
    as a way to store all the information coming from our Mosquitto deployment:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 Secret 来存储连接 Redis 的密码。Redis 将用于存储来自我们 Mosquitto 部署的所有信息：
- en: '[PRE12]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The value of the password corresponds to the output of the next command using
    base64 encoding:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 密码的值对应于使用 base64 编码的下一条命令的输出：
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create the `process` deployment that receives data coming from a Mosquitto
    topic and send it to the Redis service located in the cloud layer. For this run
    the following command:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `process` 部署，该部署接收来自 Mosquitto 主题的数据，并将其发送到位于云层的 Redis 服务。为此，运行以下命令：
- en: '[PRE14]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The used variables are as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 使用的变量如下：
- en: '**MOSQUITTO_HOST:** This is the hostname where the Mosquitto deployment is
    listening.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MOSQUITTO_HOST：** 这是 Mosquitto 部署正在监听的主机名。'
- en: '**REDIS_HOST:** This is the IP address assigned to the LoadBalancer service
    that exposes Redis in the cloud.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**REDIS_HOST：** 这是分配给 LoadBalancer 服务的 IP 地址，用于在云中公开 Redis。'
- en: '`db-password` secret value to set the password to connect with Redis.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`db-password` 秘密值，用于设置连接 Redis 的密码。'
- en: '**SENSOR_TOPIC:** This variable sets the Mosquitto topic to be listened to
    in order to get data from the sensors.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SENSOR_TOPIC：** 该变量设置要监听的 Mosquitto 主题，以便从传感器获取数据。'
- en: If you are using a private cloud, you might use an IP address like `192.168.0.242`,
    for example. You can get this IP address by reading the *Deploying Redis to persist
    Mosquitto sensor data* section. Then, change the `REDIS_HOST` IP address to this
    value.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是私有云，你可能会使用类似 `192.168.0.242` 的 IP 地址。例如，你可以通过阅读 *部署 Redis 来持久化 Mosquitto
    传感器数据* 部分来获取这个 IP 地址。然后，将 `REDIS_HOST` 的 IP 地址改为这个值。
- en: We have finished this section and have understood how data is processed. Let’s
    continue deploying Prometheus service to store sensor data coming from the temporary
    Redis list.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了这一部分并理解了数据是如何处理的。接下来，让我们继续部署 Prometheus 服务，用于存储来自临时 Redis 列表的传感器数据。
- en: Installing Prometheus, a time series database
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Prometheus，这是一个时间序列数据库。
- en: 'Prometheus is a time series database that you can use to store your weather
    data. It’s open source and it’s suitable for edge devices. It can be deployed
    on ARM devices and it’s very flexible to manage metrics and alerts. In this use
    case, we use Prometheus because of how flexible it is and the support it provides
    to store and visualize metrics. But we are going to use Grafana for visualizing
    data later. Now let’s install Prometheus in our Kubernetes cloud cluster, following
    these steps:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Prometheus 是一个时间序列数据库，可以用来存储天气数据。它是开源的，适用于边缘设备。可以在 ARM 设备上部署，并且非常灵活，适用于管理指标和警报。在这个使用场景中，我们选择使用
    Prometheus 是因为它的灵活性以及它对存储和可视化指标的支持。但我们稍后将使用 Grafana 来可视化数据。现在，让我们按照以下步骤在我们的 Kubernetes
    云集群中安装 Prometheus：
- en: 'Create the `monitoring` namespace, which will be used to install Prometheus
    and Grafana:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `monitoring` 命名空间，该命名空间将用于安装 Prometheus 和 Grafana：
- en: '[PRE15]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Create a ConfigMap that contains static configurations for Prometheus. In this
    case, we are going to create two services that insert data into Prometheus: one
    stores a counter and the weather data. The first service is called `service1`
    and the second `service2`. Each service uses port `5555`. Let’s call this ConfigMap
    `prometheus-server-conf`. To create it, run the following command:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 ConfigMap，其中包含 Prometheus 的静态配置。在此案例中，我们将创建两个向 Prometheus 插入数据的服务：一个存储计数器和天气数据。第一个服务叫做
    `service1`，第二个叫做 `service2`。每个服务使用端口 `5555`。我们称这个 ConfigMap 为 `prometheus-server-conf`。要创建它，请运行以下命令：
- en: '[PRE16]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Targets are services that export data in the format that Prometheus can read.
    In this case, we are using two services. `service1` exports data from `sensor1`;
    this data is collected by Redis and transformed to be consumed by Prometheus.
    In this use case, we are going to use only `service1`, but you can create as many
    services as you want.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是以 Prometheus 能够读取的格式导出数据的服务。在这种情况下，我们使用两个服务。`service1` 导出来自 `sensor1` 的数据；这些数据由
    Redis 收集并转换，以供 Prometheus 使用。在此用例中，我们只使用 `service1`，但你可以根据需要创建任意多的服务。
- en: 'Now create the deployment for Prometheus, using the previous ConfigMap to configure
    Prometheus when its created, by running the following:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在创建 Prometheus 的部署，使用之前的 ConfigMap 配置 Prometheus，在创建时进行配置，运行以下命令：
- en: '[PRE17]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This deployment listens on port `9090`. This port is used to connect to Prometheus.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 此部署监听端口 `9090`。该端口用于连接到 Prometheus。
- en: Important Note
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: You can use the same YAML to deploy Prometheus in a Kubernetes cluster deployed
    using a cloud provider, such as GCP, AWS, or Azure.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用相同的 YAML 文件在使用云提供商（如 GCP、AWS 或 Azure）部署的 Kubernetes 集群中部署 Prometheus。
- en: 'Now create a ClusterIP service that redirects port `9090` to port `8080` for
    Prometheus:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在创建一个 ClusterIP 服务，将端口`9090`重定向到 Prometheus 的端口`8080`：
- en: '[PRE18]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Let’s explore Prometheus by using `port-forward` to access the UI. For this,
    run the following command:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过使用 `port-forward` 来访问 Prometheus 的 UI。为此，运行以下命令：
- en: '[PRE19]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Access http://localhost:8080; you will see the following page:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 http://localhost:8080；你将看到以下页面：
- en: '![Figure 11.2 – Prometheus main page'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.2 – Prometheus 主页面'
- en: '](img/B16945_11_02.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_11_02.jpg)'
- en: Figure 11.2 – Prometheus main page
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.2 – Prometheus 主页面
- en: 'Now go to the **Status** | **Targets** menu:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在转到 **状态** | **目标** 菜单：
- en: '![Figure 11.3 – Status menu'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.3 – 状态菜单'
- en: '](img/B16945_11_03.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_11_03.jpg)'
- en: Figure 11.3 – Status menu
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.3 – 状态菜单
- en: 'You will see the following page:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到以下页面：
- en: '![Figure 11.4 – Prometheus with targets down'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.4 – Prometheus 与目标服务关闭'
- en: '](img/B16945_11_04.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_11_04.jpg)'
- en: Figure 11.4 – Prometheus with targets down
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.4 – Prometheus 与目标服务关闭
- en: On this page, you will see that the monitoring jobs are **down** at the moment.
    Because the services are not already created. After these monitoring services
    are created in the cluster, the state will change to **Up** using green color.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在此页面上，你会看到监控任务当前处于 **关闭** 状态，因为服务尚未创建。在集群中创建这些监控服务后，状态将会变为 **开启**，并显示为绿色。
- en: Now the Prometheus deployment is ready. Let’s install our custom exporter in
    the cloud layer to export the temporary sensor data from our Redis list to Prometheus.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 Prometheus 部署已准备好。让我们在云层中安装我们自定义的导出器，将 Redis 列表中的临时传感器数据导出到 Prometheus。
- en: Deploying a custom exporter for Prometheus
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为 Prometheus 部署自定义导出器
- en: 'After configuring all the components, you need to deploy the exporter that
    Prometheus calls to get data from Redis; this service will be called `service1`.
    Remember that Redis was being used to persist temporary data that comes from the
    Mosquitto topic on the far edge. Before deploying this service, let’s understand
    the `exporter` container source code:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 配置所有组件后，你需要部署 Prometheus 调用的导出器来从 Redis 获取数据；这个服务将被命名为 `service1`。记住，Redis 被用来持久化来自远端
    Mosquitto 主题的临时数据。在部署此服务之前，让我们了解 `exporter` 容器的源代码：
- en: '[PRE20]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In this code made using Python, first we set the `REDIS_HOST` and `REDIS_AUTH`
    variables to connect to Redis and `SENSOR_TOPIC` to correspond to the list name
    in Redis where sensor data is stored. So, every time Prometheus calls the `/metrics`
    path, it extracts and returns one element inside the Redis list set with the value
    of `SENSOR_TOPIC` and returns a response in a format that Prometheus can read.
    For this, the code uses the `prometheus_client` library and sets two metrics using
    the `Gauge` metric type, which represents simple values. In this code, we are
    using two metrics: the first one is called `weather_metric1`, which contains the
    temperature values, and the second is `weather_metric2`, which contains humidity
    data. Once data is stored in Prometheus, it returns the JSON response `{"processed":"done"}`;
    after that, you can access this information in Prometheus. Alternatively, you
    can connect Prometheus to Grafana to create a new graph to show this data in real
    time.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段使用 Python 编写的代码中，首先我们设置了 `REDIS_HOST` 和 `REDIS_AUTH` 变量来连接 Redis，并将 `SENSOR_TOPIC`
    设置为 Redis 中存储传感器数据的列表名称。因此，每次 Prometheus 调用 `/metrics` 路径时，它会提取并返回 Redis 列表中由
    `SENSOR_TOPIC` 指定的一个元素，并以 Prometheus 可读取的格式返回响应。为此，代码使用了 `prometheus_client` 库，并通过
    `Gauge` 指标类型设置了两个指标，`Gauge` 表示简单值。在这段代码中，我们使用了两个指标：第一个名为 `weather_metric1`，它包含温度值，第二个名为
    `weather_metric2`，它包含湿度数据。一旦数据被存储在 Prometheus 中，它将返回 JSON 响应 `{"processed":"done"}`；之后，您可以在
    Prometheus 中访问这些信息。或者，您也可以将 Prometheus 连接到 Grafana，以实时创建新图表来展示这些数据。
- en: Important Note
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: You can find the source of the exporter at [https://github.com/sergioarmgpl/containers/tree/main/exporter/src](https://github.com/sergioarmgpl/containers/tree/main/exporter/src).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 [https://github.com/sergioarmgpl/containers/tree/main/exporter/src](https://github.com/sergioarmgpl/containers/tree/main/exporter/src)
    找到导出器的源代码。
- en: 'Now let’s deploy the exporter by following these steps:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们按照以下步骤部署导出器：
- en: 'Create the exporter by creating the `service1` deployment:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过创建 `service1` 部署来创建导出器：
- en: '[PRE21]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: You can use secrets instead of using the plain password in your YAML.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用机密信息来代替 YAML 文件中明文密码的使用。
- en: 'Now create the `service1` service:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在创建 `service1` 服务：
- en: '[PRE22]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Now if you return to your Prometheus targets, `service1` will appear as up and
    in green.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您返回到 Prometheus 的目标页面，`service1` 将显示为运行中并且是绿色的。
- en: Now the exporter is running. It’s time to configure the Python script in the
    edge device to get data coming from the DHT11 sensor and send it to the Mosquitto
    topic. Let’s explore this in the next section.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在导出器已经运行。接下来是配置边缘设备中的 Python 脚本，以获取来自 DHT11 传感器的数据并将其发送到 Mosquitto 主题。我们将在下一节中探索这一部分。
- en: Configuring a DHT11 sensor to send humidity and temperature weather data
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 DHT11 传感器以发送湿度和温度天气数据
- en: 'Before you start using your edge device with a DHT11 sensor to send data, you
    need to follow these steps to configure it:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始使用带有 DHT11 传感器的边缘设备发送数据之前，您需要按照以下步骤进行配置：
- en: Install at least Ubuntu 20.04 LTS on your Raspberry Pi. You can check [*Chapter
    2*](B16945_02_Final_PG.xhtml#_idTextAnchor036), *K3s Installation and Configuration*,
    and [*Chapter 5*](B16945_05_Final_PG.xhtml#_idTextAnchor097), *K3s Homelab for
    Edge Computing Experiments*, for more on this.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的 Raspberry Pi 上安装至少 Ubuntu 20.04 LTS。您可以查看 [*第 2 章*](B16945_02_Final_PG.xhtml#_idTextAnchor036)，《*K3s
    安装与配置*》，以及 [*第 5 章*](B16945_05_Final_PG.xhtml#_idTextAnchor097)，《*K3s 边缘计算实验的家庭实验室*》了解更多信息。
- en: 'Configure your DHT11 sensor to send data to the Raspberry Pi. For this use
    case, we are going to use the DHT11 Keyes sensor, which comes from the Keystudio
    Raspberry Pi 4B Complete RFID Starter kit. This is a common sensor that you can
    find in other brands. This sensor gets the temperature and humidity. It often
    comes with three pins, which are *G = Ground*, *V = VCC*, and *S = Signal*. The
    way to connect is to connect G to a ground pin on the Raspberry and V to a 3V3
    pin that powers the sensor with 3 volts. S, for signal, sends information to the
    Raspberry using a GPIO pin. In this case, you can use any free GPIO pin on the
    Raspberry; for this configuration, we are using the GPIO22 pin:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置您的 DHT11 传感器将数据发送到 Raspberry Pi。对于这个用例，我们将使用来自 Keystudio Raspberry Pi 4B 完整
    RFID 启动包的 DHT11 Keyes 传感器。这是一个常见的传感器，您也可以在其他品牌中找到。该传感器可以测量温度和湿度。它通常有三根引脚，分别是 *G
    = 地线*，*V = VCC* 和 *S = 信号*。连接方法是将 G 连接到 Raspberry Pi 的地线引脚，将 V 连接到 3V3 引脚，用于为传感器提供
    3 伏电压。S 用于信号传输，通过 GPIO 引脚将信息发送到 Raspberry Pi。在这种配置中，您可以使用任何空闲的 GPIO 引脚；本例中我们使用的是
    GPIO22 引脚：
- en: '![Figure 11.5 – DHT11 Keyes temperature and humidity sensor'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.5 – DHT11 Keyes 温湿度传感器'
- en: '](img/B16945_11_05.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_11_05.jpg)'
- en: Figure 11.5 – DHT11 Keyes temperature and humidity sensor
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.5 – DHT11 Keyes 温湿度传感器
- en: 'Now, install the system and Python libraries that we need to run the sensor
    code in your edge device by running the following commands:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，通过运行以下命令在你的边缘设备上安装我们需要的系统和 Python 库，以运行传感器代码：
- en: 'If `python3` is not installed in your Linux distribution, you can install it
    using the following command:'
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你的 Linux 发行版中没有安装 `python3`，可以使用以下命令安装：
- en: '[PRE23]'
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Then continue installing the needed libraries:'
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后继续安装所需的库：
- en: '[PRE24]'
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Clone the repository:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 克隆代码库：
- en: '[PRE25]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Run the following:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE26]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Important Note
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Only run the `send.py` code inside your edge device until all the components
    of the use case are deployed.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的边缘设备上，只有在用例的所有组件都部署完成后，才运行 `send.py` 代码。
- en: 'Now you are starting to send data from your edge device. But what is happening
    inside the `send.py` code? Let’s take a look:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你开始从边缘设备发送数据了。但在 `send.py` 代码中发生了什么呢？我们来看看：
- en: '[PRE27]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In this code, first, it’s validated if the Raspberry Pi can read data from the
    GPIO pins. Then, by using the Adafruit library, we set the GPIO22 pin of the Raspberry
    Pi to read data from the sensor. After this, we set the Mosquitto host with the
    IP of the LoadBalancer service where Mosquitto is listening. Finally, we start
    a loop to read data with the `sensor` variable. This data is sent to the Mosquitto
    `sensor1` topic. The loop sends data every 2 seconds.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，首先验证树莓派是否能够从 GPIO 引脚读取数据。然后，通过使用 Adafruit 库，我们设置树莓派的 GPIO22 引脚来读取传感器的数据。之后，我们使用
    Mosquitto 主机的 IP 地址配置 Mosquitto 服务，该服务监听负载均衡器的 IP 地址。最后，我们启动一个循环来读取 `sensor` 变量的数据。该数据被发送到
    Mosquitto 的 `sensor1` 主题中。循环每 2 秒钟发送一次数据。
- en: If you press *Ctrl* + *C*, the code stops and executes `sensor.exit()` to close
    the sensor and clean the state of the sensor. Finally, you are sending data. At
    this point, all the data passes across Mosquitto at the far edge and goes to Redis
    and Prometheus in the cloud layer. The only part that’s missing is Grafana to
    visualize this data. For this, let’s continue to the next section.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你按 *Ctrl* + *C*，代码会停止并执行 `sensor.exit()` 来关闭传感器并清理传感器状态。最后，你开始发送数据。此时，所有数据通过远端的
    Mosquitto 传输，并传送到云层中的 Redis 和 Prometheus。唯一缺少的是 Grafana 来可视化这些数据。为此，我们继续下一部分。
- en: Installing Grafana to create dashboards
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Grafana 以创建仪表板
- en: 'Grafana is a web application that you can use to visualize data from different
    data sources; it can also create alerts based on the data that you are visualizing.
    In our use case, Grafana will be used to visualize data that comes from Prometheus.
    Let’s remember that Prometheus is listening to `service1`, to get data that comes
    from Mosquitto at the far edge. To deploy Grafana, follow these steps:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: Grafana 是一个网页应用程序，可以用来可视化来自不同数据源的数据；它还可以基于你可视化的数据创建警报。在我们的用例中，Grafana 将用于可视化来自
    Prometheus 的数据。让我们记住，Prometheus 正在监听 `service1`，以获取来自远端 Mosquitto 的数据。要部署 Grafana，请按照以下步骤操作：
- en: 'First, create a ConfigMap to configure your Grafana deployment:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，创建一个 ConfigMap 来配置你的 Grafana 部署：
- en: '[PRE28]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This will be the default data source configured in your `grafana` deployment.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是你在 `grafana` 部署中配置的默认数据源。
- en: 'Let’s create the `grafana` deployment by running the following:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过运行以下命令来创建 `grafana` 部署：
- en: '[PRE29]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Let’s create the service:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建服务：
- en: '[PRE30]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Let’s open the Grafana UI by running the following command:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令打开 Grafana UI：
- en: '[PRE31]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Let’s open the URL `http://localhost:3000`. When the login page appears, use
    the username `admin` and password `admin`, and click on the **Log in** button:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 URL `http://localhost:3000`。当登录页面出现时，使用用户名 `admin` 和密码 `admin`，然后点击 **Log
    in** 按钮：
- en: '![Figure 11.6 – Grafana login'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.6 – Grafana 登录'
- en: '](img/B16945_11_06.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_11_06.jpg)'
- en: Figure 11.6 – Grafana login
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.6 – Grafana 登录
- en: After login, you will see the main page of Grafana:![Figure 11.7 – Grafana main
    page
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录后，你将看到 Grafana 的主页面：![图 11.7 – Grafana 主页面
- en: '](img/B16945_11_07.jpg)'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16945_11_07.jpg)'
- en: Figure 11.7 – Grafana main page
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.7 – Grafana 主页面
- en: 'Click on **Configuration** | **Data sources**:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **Configuration** | **Data sources**：
- en: '![Figure 11.8 – Grafana configuration menu'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.8 – Grafana 配置菜单'
- en: '](img/B16945_11_08.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_11_08.jpg)'
- en: Figure 11.8 – Grafana configuration menu
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.8 – Grafana 配置菜单
- en: 'Then, check whether the Prometheus data source exists:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，检查 Prometheus 数据源是否存在：
- en: '![Figure 11.9 – Grafana data sources'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.9 – Grafana 数据源'
- en: '](img/B16945_11_09.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_11_09.jpg)'
- en: Figure 11.9 – Grafana data sources
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.9 – Grafana 数据源
- en: Because of our ConfigMap configuration, our default data source will be `prometheus-service.monitoring.svc:8080`.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的 ConfigMap 配置，我们的默认数据源将是`prometheus-service.monitoring.svc:8080`。
- en: 'Now create a new folder or dashboard using the **+** icon. Let’s create a folder
    first:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在使用**+**图标创建一个新文件夹或仪表盘。我们先创建一个文件夹：
- en: '![Figure 11.10 – Grafana Create menu'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.10 – Grafana 创建菜单'
- en: '](img/B16945_11_10.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_11_10.jpg)'
- en: Figure 11.10 – Grafana Create menu
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.10 – Grafana 创建菜单
- en: 'Now in the opened dialog fill the `Dashboard Sensors` to create a folder with
    this name, then click on the **Create** button:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在在打开的对话框中填写`Dashboard Sensors`，以此名称创建文件夹，然后点击**创建**按钮：
- en: '![Figure 11.11 – Grafana New dashboard folder dialog'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.11 – Grafana 新仪表盘文件夹对话框'
- en: '](img/B16945_11_11.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_11_11.jpg)'
- en: Figure 11.11 – Grafana New dashboard folder dialog
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.11 – Grafana 新仪表盘文件夹对话框
- en: You can use this folder to save your dashboards and alerts if you want.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，你可以使用这个文件夹来保存你的仪表盘和警报。
- en: 'As in *Figure 11.10*, let’s follow the same steps as for folders but this time
    click **Dashboard**. You will then see the page in *Figure 11.12*. Click on the
    **Add a new panel** button:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如同*图 11.10*所示，按照和文件夹相同的步骤操作，但这次点击**仪表盘**。你将看到*图 11.12*页面。点击**添加新面板**按钮：
- en: '![Figure 11.12 – Grafana Add panel page](img/B16945_11_12.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.12 – Grafana 添加面板页面](img/B16945_11_12.jpg)'
- en: Figure 11.12 – Grafana Add panel page
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.12 – Grafana 添加面板页面
- en: 'In the next figure, you will see the settings to configure the new dashboard:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下图中，你将看到配置新仪表盘的设置：
- en: '![Figure 11.13 – Grafana New dashboard/Edit Panel page'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.13 – Grafana 新仪表盘/编辑面板页面'
- en: '](img/B16945_11_13.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_11_13.jpg)'
- en: Figure 11.13 – Grafana New dashboard/Edit Panel page
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.13 – Grafana 新仪表盘/编辑面板页面
- en: Here you can configure this panel by setting the main part of the query. In
    this case, you have to write `weather_metric1` or `weather_metric2`. Here, `weather_metric1`
    gets the temperature and `weather_metric2` gets the humidity.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以通过设置查询的主要部分来配置此面板。在此情况下，你需要写`weather_metric1`或`weather_metric2`。其中，`weather_metric1`获取温度，`weather_metric2`获取湿度。
- en: 'Set a time range to visualize data. Then, click on **Apply time range**:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置时间范围以可视化数据。然后，点击**应用时间范围**：
- en: '![Figure 11.14 – Grafana Absolute time range dialog](img/B16945_11_14.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.14 – Grafana 绝对时间范围对话框](img/B16945_11_14.jpg)'
- en: Figure 11.14 – Grafana Absolute time range dialog
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.14 – Grafana 绝对时间范围对话框
- en: 'Set the refresh time to 5 seconds in the next dialog, **Query options**:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个对话框中，将刷新时间设置为 5 秒，**查询选项**：
- en: '![Figure 11.15 – Setting real-time data values'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.15 – 设置实时数据值'
- en: '](img/B16945_11_15.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_11_15.jpg)'
- en: Figure 11.15 – Setting real-time data values
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.15 – 设置实时数据值
- en: 'Alternatively, you can click on the **Refresh** icon:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，你可以点击**刷新**图标：
- en: '![Figure 11.16 – Grafana setting refresh time'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.16 – Grafana 设置刷新时间'
- en: '](img/B16945_11_16.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_11_16.jpg)'
- en: Figure 11.16 – Grafana setting refresh time
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.16 – Grafana 设置刷新时间
- en: 'Then, click on the `Dashboard sensors` or `Temperature Sensor1`:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击`Dashboard sensors`或`Temperature Sensor1`：
- en: '![Figure 11.17 – Saving a new dashboard'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.17 – 保存新仪表盘'
- en: '](img/B16945_11_17.jpg)'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_11_17.jpg)'
- en: Figure 11.17 – Saving a new dashboard
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.17 – 保存新仪表盘
- en: 'You can also just apply the changes by clicking on the **Apply** button instead
    of the **Save** button:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以通过点击**应用**按钮来应用更改，而不是点击**保存**按钮：
- en: '![Figure 11.18 – Applying changes to a new dashboard'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.18 – 应用更改到新仪表盘'
- en: '](img/B16945_11_18.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_11_18.jpg)'
- en: Figure 11.18 – Applying changes to a new dashboard
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.18 – 应用更改到新仪表盘
- en: 'Now you will see your dashboard:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你将看到你的仪表盘：
- en: '![Figure 11.19 – Grafana Temperature Sensor1 dashboard'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.19 – Grafana 温度传感器1 仪表盘'
- en: '](img/B16945_11_19.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_11_19.jpg)'
- en: Figure 11.19 – Grafana Temperature Sensor1 dashboard
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.19 – Grafana 温度传感器1 仪表盘
- en: 'You can see the dashboards you have created by clicking on the **Search dashboards**
    icon:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过点击**搜索仪表盘**图标查看你创建的仪表盘：
- en: '![Figure 11.20 – Search dashboards'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.20 – 搜索仪表盘'
- en: '](img/B16945_11_20.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16945_11_20.jpg)'
- en: Figure 11.20 – Search dashboards
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.20 – 搜索仪表盘
- en: Now you can start visualizing the data that your edge device is generating,
    as shown in *Figure 11.18*. You can customize all the parameters to show the information
    according to your needs. You can also modify the code to add as many sensors as
    you want. We have now finished the chapter. Let’s get a quick summary of what
    we learned.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以开始可视化你的边缘设备生成的数据，如*图 11.18*所示。你可以根据需要自定义所有参数，以显示信息。你还可以修改代码，添加任意数量的传感器。我们现在已经完成了这一章。让我们快速总结一下我们学到的内容。
- en: Summary
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how monitoring can help us to visualize data at
    the edge, especially how to visualize data that comes from sensors, and how to
    build a basic use case scenario to extend for production use cases. To build this
    system, we used Prometheus as our time series database, Mosquitto as our basic
    way to store data from sensors, and Redis as a temporary queue to prevent the
    loss of our data from sensors. We also practiced how to build an edge computing
    system, using its different layers from the far edge to the cloud layer. This
    shows how important time series databases can be to manage sensor data and how
    tools such as Grafana can help to visualize it. This scenario can also be extended
    to farming, ocean and sea monitoring, animal populations, and so on. In the next
    chapter, we are going to continue with a similar scenario but applied to GPS and
    reading sensor data at long distances.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了监控如何帮助我们可视化边缘的数据，特别是如何可视化来自传感器的数据，以及如何构建一个基本的使用案例场景以扩展到生产环境。为了构建这个系统，我们使用
    Prometheus 作为我们的时间序列数据库，Mosquitto 作为存储传感器数据的基本方式，Redis 作为临时队列以防止传感器数据的丢失。我们还实践了如何构建一个边缘计算系统，使用其从最远边缘到云层的不同层次。这展示了时间序列数据库在管理传感器数据中的重要性，以及
    Grafana 等工具如何帮助可视化数据。这个场景还可以扩展到农业、海洋和海上监测、动物种群等领域。在下一章，我们将继续一个类似的场景，但应用于 GPS 和远程传感器数据读取。
- en: Questions
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Here are a few questions to validate your new knowledge:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些问题，用于验证你新学到的知识：
- en: How do I set up an edge device to capture sensor data?
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我如何设置边缘设备来捕获传感器数据？
- en: How do I use Prometheus to store data from sensors?
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我如何使用 Prometheus 存储传感器数据？
- en: How do I use Grafana to create custom graphs to visualize sensor data?
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我如何使用 Grafana 创建自定义图表来可视化传感器数据？
- en: How do I design a persistent system to manage sensor data using Mosquitto and
    Redis?
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我如何设计一个持久化系统，使用 Mosquitto 和 Redis 管理传感器数据？
- en: How do I use Python to process and send sensor data?
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我如何使用 Python 处理并发送传感器数据？
- en: Further reading
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入阅读
- en: 'You can refer to the following references for more information on the topics
    covered in this chapter:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以参考以下文献，获取本章所涵盖主题的更多信息：
- en: 'Mosquitto official website: [https://mosquitto.org](https://mosquitto.org)'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mosquitto 官方网站：[https://mosquitto.org](https://mosquitto.org)
- en: 'Prometheus Python Client: [https://github.com/prometheus/client_python](https://github.com/prometheus/client_python)'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Prometheus Python 客户端：[https://github.com/prometheus/client_python](https://github.com/prometheus/client_python)
- en: How to set up Prometheus monitoring on a Kubernetes cluster [https://devopscube.com/setup-prometheus-monitoring-on-kubernetes](https://devopscube.com/setup-prometheus-monitoring-on-kubernetes)
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在 Kubernetes 集群上设置 Prometheus 监控 [https://devopscube.com/setup-prometheus-monitoring-on-kubernetes](https://devopscube.com/setup-prometheus-monitoring-on-kubernetes)
- en: 'How to set up Grafana on Kubernetes: [https://devopscube.com/setup-grafana-kubernetes](https://devopscube.com/setup-grafana-kubernetes)'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在 Kubernetes 上设置 Grafana：[https://devopscube.com/setup-grafana-kubernetes](https://devopscube.com/setup-grafana-kubernetes)
- en: 'Getting started with Prometheus: [https://prometheus.io/docs/prometheus/latest/getting_started](https://prometheus.io/docs/prometheus/latest/getting_started)'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用 Prometheus：[https://prometheus.io/docs/prometheus/latest/getting_started](https://prometheus.io/docs/prometheus/latest/getting_started)
- en: 'Using Prometheus and Grafana for IoT monitoring: [https://cloud.google.com/community/tutorials/cloud-iot-prometheus-monitoring](https://cloud.google.com/community/tutorials/cloud-iot-prometheus-monitoring)'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Prometheus 和 Grafana 进行物联网监控：[https://cloud.google.com/community/tutorials/cloud-iot-prometheus-monitoring](https://cloud.google.com/community/tutorials/cloud-iot-prometheus-monitoring)
- en: 'A step-by-step guide to setting up Prometheus Alertmanager with Slack, PagerDuty,
    and Gmail: [https://grafana.com/blog/2020/02/25/step-by-step-guide-to-setting-up-prometheus-alertmanager-with-slack-pagerduty-and-gmail](https://grafana.com/blog/2020/02/25/step-by-step-guide-to-setting-up-prometheus-alertmanager-with-slack-pagerduty-and-gmail)'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 Prometheus Alertmanager 与 Slack、PagerDuty 和 Gmail 的分步指南：[https://grafana.com/blog/2020/02/25/step-by-step-guide-to-setting-up-prometheus-alertmanager-with-slack-pagerduty-and-gmail](https://grafana.com/blog/2020/02/25/step-by-step-guide-to-setting-up-prometheus-alertmanager-with-slack-pagerduty-and-gmail)

- en: 6\. Securing your application with HTTPS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6. 使用 HTTPS 保护你的应用程序
- en: HTTPS has become a necessity for any public-facing website. Not only does it
    improve the security of your website, but it is also becoming a requirement for
    new browser functionalities. HTTPS is a secure version of the HTTP protocol. HTTPS
    makes use of **Transport Layer Security** (**TLS**) certificates to encrypt traffic
    between an end user and a server, or between two servers. TLS is the successor
    to the **Secure Sockets Layer** (**SSL**). The terms *TLS* and *SSL* are often
    used interchangeably.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: HTTPS 已成为任何面向公众网站的必备条件。它不仅提高了你网站的安全性，而且在新的浏览器功能中也逐渐成为一种要求。HTTPS 是 HTTP 协议的安全版本。HTTPS
    使用**传输层安全性**（**TLS**）证书加密终端用户与服务器之间，或两个服务器之间的流量。TLS 是**安全套接字层**（**SSL**）的继任者。术语
    *TLS* 和 *SSL* 经常被交替使用。
- en: In the past, you needed to buy certificates from a **certificate authority**
    (**CA**), then set them up on your web server and renew them periodically. While
    that is still possible today, the **Let's Encrypt** service and helpers in Kubernetes
    make it very easy to set up verified TLS certificates in your cluster. Let's Encrypt
    is a non-profit organization run by the **Internet Security Research Group** and
    backed by multiple companies. It is a free service that offers verified TLS certificates
    in an automated manner. Automation is a key benefit of the Let's Encrypt service.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 过去，你需要从**证书颁发机构**（**CA**）购买证书，然后将其设置在 Web 服务器上，并定期更新。虽然今天仍然可以这样做，但**Let's Encrypt**
    服务和 Kubernetes 中的辅助工具使得在集群中设置经过验证的 TLS 证书变得非常容易。Let's Encrypt 是一个由**互联网安全研究小组**（**ISRG**）运营并得到多家公司支持的非营利组织。它是一个免费的服务，提供自动化的经过验证的
    TLS 证书。自动化是 Let's Encrypt 服务的一个关键优势。
- en: In terms of Kubernetes helpers, you will learn about a new object called an
    **Ingress** and use a Kubernetes add-on called **cert-manager**. An ingress is
    an object within Kubernetes that manages external access to services, commonly
    used for HTTP services. An ingress adds additional functionality on top of the
    service object we explained in *Chapter 3*, *Application deployment on AKS*. It
    can be configured to handle HTTPS traffic. It can also be configured to route
    traffic to different back-end services based on the hostname, which is assigned
    by the **Domain Name System** (**DNS**) that is used to connect.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 辅助工具方面，你将了解一个新对象，称为**Ingress**，并使用一个 Kubernetes 插件，叫做 **cert-manager**。Ingress
    是 Kubernetes 中的一个对象，用于管理外部访问服务，通常用于 HTTP 服务。Ingress 在我们在*第 3 章*《应用程序部署在 AKS 上》中解释的服务对象之上添加了额外的功能。它可以配置为处理
    HTTPS 流量。它还可以配置为根据主机名将流量路由到不同的后端服务，主机名是由**域名系统**（**DNS**）分配的，用于连接。
- en: '`cert-manager` is a Kubernetes add-on that helps in automating the creation
    of TLS certificates. It also helps in the rotation of certificates when they are
    close to expiring. `cert-manager` can interface with Let''s Encrypt to request
    certificates automatically.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '`cert-manager` 是一个 Kubernetes 插件，帮助自动化创建 TLS 证书。当证书即将过期时，它还帮助进行证书的轮换。`cert-manager`
    可以与 Let''s Encrypt 接口，自动请求证书。'
- en: In this chapter, you will see how to set up Azure Application Gateway as a Kubernetes
    ingress, and `cert-manager` to interface with Let's Encrypt.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将看到如何将 Azure 应用网关设置为 Kubernetes Ingress，并使用 `cert-manager` 与 Let's Encrypt
    进行接口对接。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Setting up Azure Application Gateway as a Kubernetes ingress
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 Azure 应用网关作为 Kubernetes Ingress
- en: Setting up an ingress in front of a service
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在服务前设置 Ingress
- en: Adding TLS support to an ingress
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向 Ingress 添加 TLS 支持
- en: Let's start with setting up Azure Application Gateway as an ingress for AKS.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从设置 Azure 应用网关作为 AKS 的 Ingress 开始。
- en: Setting up Azure Application Gateway as a Kubernetes ingress
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置 Azure 应用网关作为 Kubernetes Ingress
- en: An ingress in Kubernetes is an object that is used to route HTTP and HTTPS traffic
    from outside the cluster to services in a cluster. Exposing services using an
    ingress rather than exposing them directly, as you've done up to this point—has
    a number of advantages. These advantages include the ability to route multiple
    hostnames to the same public IP address and offloading TLS termination from the
    actual application to the ingress.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 中，Ingress 是一个对象，用于将来自集群外部的 HTTP 和 HTTPS 流量路由到集群中的服务。通过 Ingress
    暴露服务，而不是像到目前为止那样直接暴露它们，有许多优势。这些优势包括能够将多个主机名路由到同一个公共 IP 地址，并将 TLS 终止从实际应用程序卸载到
    Ingress。
- en: 'To create an ingress in Kubernetes, you need to install an ingress controller.
    An ingress controller is software that can create, configure, and manage ingresses
    in Kubernetes. Kubernetes does not come with a preinstalled ingress controller.
    There are multiple implementations of ingress controllers, and a full list is
    available at this URL: [https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/](https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Kubernetes 中创建一个入口（ingress），你需要安装一个入口控制器。入口控制器是能够在 Kubernetes 中创建、配置和管理入口的软体。Kubernetes
    并没有预装入口控制器。入口控制器有多种实现方式，完整的列表可以在此网址查看：[https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/](https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/)
- en: In Azure, application gateway is a Layer 7 load balancer, which can be used
    as an ingress for Kubernetes by using the **Application Gateway Ingress Controller
    (AGIC)**. A layer 7 load balancer is a load balancer that works at the application
    layer, which is the seventh and highest layer in the OSI networking reference
    model. Azure Application Gateway has a number of advanced features such as autoscaling
    and **Web Application Firewall (WAF)**.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Azure 中，应用程序网关是一个第七层负载均衡器，可以通过使用 **应用程序网关入口控制器（AGIC）** 将其作为 Kubernetes 的入口。第七层负载均衡器是工作在应用层的负载均衡器，而应用层是
    OSI 网络参考模型中的第七层，也是最高层。Azure 应用程序网关拥有许多高级功能，如自动扩展和 **Web 应用防火墙（WAF）**。
- en: There are two ways of configuring the AGIC, either using Helm or as an **Azure
    Kubernetes Service** (**AKS**) add-on. Installing AGIC using the AKS add-on functionality
    will result in a Microsoft-supported configuration. Additionally, the add-on method
    of deployment will be automatically updated by Microsoft, ensuring that your environment
    is always up to date.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 配置 AGIC 有两种方式：使用 Helm 或作为 **Azure Kubernetes Service** (**AKS**) 附加组件。通过 AKS
    附加组件功能安装 AGIC，将得到一个微软支持的配置。此外，使用附加组件的部署方式会由微软自动更新，确保你的环境始终保持最新。
- en: In this section, you will create a new application gateway instance, set up
    AGIC using the add-on method, and finally, deploy an ingress resource to expose
    an application. Later in this chapter, you will extend this setup to also include
    TSL using a Let's Encrypt certificate.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一节中，你将创建一个新的应用程序网关实例，使用附加组件方式设置 AGIC，最后部署一个入口资源以暴露一个应用程序。在本章稍后的部分，你将扩展这个设置，使用
    Let's Encrypt 证书加入 TSL。
- en: Creating a new application gateway
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建新的应用程序网关
- en: In this section, you will use the Azure CLI to create a new application gateway.
    You will then use this application gateway in the next section to integrate with
    AGIC. The different steps in this section are summarized in the code samples for
    this chapter in the `setup-appgw.sh` file that is part of the code samples that
    come with this book.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一节中，你将使用 Azure CLI 创建一个新的应用程序网关。然后，在下一节中，你将使用此应用程序网关与 AGIC 集成。本节中的不同步骤已在本章的
    `setup-appgw.sh` 文件中的代码示例中进行了总结，这个文件是随书提供的代码示例的一部分。
- en: 'To organize the resources created in this chapter, it is recommended that you
    create a new resource group. Make sure to create the new resource group in the
    same location you deployed your AKS cluster in. You can do this using the following
    command in the Azure CLI:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了组织本章中创建的资源，建议你创建一个新的资源组。确保在你部署 AKS 集群的相同位置创建新的资源组。你可以通过以下命令在 Azure CLI 中完成此操作：
- en: '[PRE0]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, you will need to create the networking components required for your application
    gateway. These are a public IP with a DNS name and a new virtual network. You
    can do this using the following commands:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，你需要创建应用程序网关所需的网络组件。这些组件包括一个带 DNS 名称的公共 IP 和一个新的虚拟网络。你可以使用以下命令来完成此操作：
- en: '[PRE1]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: 'The az network public-ip create command might show you a warning message `[Coming
    breaking change] In the coming release, the default behavior will be changed as
    follows when sku is Standard and zone is not provided: For zonal regions, you
    will get a zone-redundant IP indicated by zones:["1","2","3"]; For non-zonal regions,
    you will get a non zone-redundant IP indicated by zones:[].`'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`az network public-ip create` 命令可能会显示一个警告信息 `[Coming breaking change] 在即将发布的版本中，当
    sku 为 Standard 且未提供区域时，默认行为将发生变化：对于区域性区域，你将获得一个区域冗余的 IP，表示为 zones:["1","2","3"];
    对于非区域性区域，你将获得一个非区域冗余的 IP，表示为 zones:[]。`'
- en: Finally, you can create the application gateway. This command will take a few
    minutes to execute
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，你可以创建应用程序网关。此命令的执行可能需要几分钟时间。
- en: '[PRE2]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: It will take a couple of minutes for the application gateway to deploy. Once
    it is created, you can see the resource in the Azure portal. To find this, look
    for `agic` (or the name you gave your application gateway) in the Azure search
    bar, and select your application gateway.![Searching for Application Gateway using
    the Azure portal search bar](img/B17338_06_01.jpg)
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序网关的部署需要几分钟时间。一旦创建完成，你可以在 Azure 门户中查看该资源。要查找它，可以在 Azure 搜索栏中搜索 `agic`（或你为应用程序网关设置的名称），然后选择你的应用程序网关。![通过
    Azure 门户搜索栏搜索应用程序网关](img/B17338_06_01.jpg)
- en: 'Figure 6.1: Looking for the application gateway in the Azure search bar'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.1：在 Azure 搜索栏中查找应用程序网关
- en: This will show you your application gateway in the Azure portal, as shown in
    *Figure 6.2*:![An overview of the Application Gateway pane in the Azure portal](img/B17338_06_02.jpg)
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将显示你的应用程序网关在 Azure 门户中的样子，如 *图 6.2* 所示：![Azure 门户中应用程序网关面板的概览](img/B17338_06_02.jpg)
- en: 'Figure 6.2: The application gateway in the Azure portal'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.2：Azure 门户中的应用程序网关
- en: To verify that it has been created successfully, browse to the DNS name you
    configured for the public IP address. This will show you an output similar to
    *Figure 6.3*. Note that the error message shown is expected since you haven't
    configured any applications yet behind the application gateway. You will configure
    applications behind the application gateway using AGIC in the *Adding an ingress
    rule for the guestbook application* section.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要验证是否已成功创建，浏览到你为公共 IP 地址配置的 DNS 名称。这将显示类似于 *图 6.3* 的输出。请注意，所显示的错误消息是预期中的，因为你还没有在应用程序网关后面配置任何应用程序。你将在
    *为 guestbook 应用程序添加 Ingress 规则* 一节中使用 AGIC 配置应用程序。
- en: '![Browsing to the DNS name configured for the public IP address to verify if
    we can connect to the Application Gateway](img/B17338_06_03.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![浏览到配置的公共 IP 地址的 DNS 名称，验证我们是否能连接到应用程序网关](img/B17338_06_03.jpg)'
- en: 'Figure 6.3: Verify that you can connect to the application gateway'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.3：验证是否可以连接到应用程序网关
- en: Now that you've created a new application gateway and were able to connect to
    it, we will move on to integrating this application gateway with your existing
    Kubernetes cluster.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了一个新的应用程序网关并成功连接，我们将继续将这个应用程序网关与现有的 Kubernetes 集群集成。
- en: Setting up the AGIC
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置 AGIC
- en: In this section, you will integrate the application gateway with your Kubernetes
    cluster using the AGIC AKS add-on. You will also set up virtual network peering
    so the application gateway can send traffic to your Kubernetes cluster.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将使用 AGIC AKS 插件将应用程序网关与 Kubernetes 集群集成。你还将设置虚拟网络对等连接，以便应用程序网关可以将流量发送到你的
    Kubernetes 集群。
- en: 'To enable integration between your cluster and your application gateway, use
    the following command:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要启用集群与应用程序网关之间的集成，请使用以下命令：
- en: '[PRE3]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, you will need to peer the application gateway network with the AKS network.
    To peer both networks, you can use the following code:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，你需要将应用程序网关网络与 AKS 网络进行对等连接。要进行网络对等连接，可以使用以下代码：
- en: '[PRE4]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This concludes the integration between the application gateway and your AKS
    cluster. You've enabled the AGIC add-on, and connected both the networks together.
    In the next section, you will use this AGIC integration to create an ingress for
    a demo application.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这标志着应用程序网关与 AKS 集群的集成完成。你已经启用了 AGIC 插件，并将两个网络连接在一起。在接下来的章节中，你将使用 AGIC 集成为演示应用程序创建一个
    Ingress。
- en: Adding an ingress rule for the guestbook application
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为 guestbook 应用程序添加 Ingress 规则
- en: Up to this point, you have created a new application gateway and integrated
    it with your Kubernetes cluster. In this section, you will deploy the guestbook
    application and then expose it using an ingress.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经创建了一个新的应用程序网关，并将其与 Kubernetes 集群集成。在本节中，你将部署 guestbook 应用程序，然后通过 Ingress
    将其暴露。
- en: 'To launch the guestbook application, type in the following command:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要启动 guestbook 应用程序，请输入以下命令：
- en: '[PRE5]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This will create the guestbook application you''ve used in the previous chapters.
    You should see the objects being created as shown in *Figure 6.4*:'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将创建你在前几章中使用过的 guestbook 应用程序。你应该能看到如 *图 6.4* 所示的对象正在创建：
- en: '![Creating the guestbook application that we’ve used in the previous chapters](img/B17338_06_04.jpg)'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![创建我们在前几章中使用过的 guestbook 应用程序](img/B17338_06_04.jpg)'
- en: 'Figure 6.4: Creating the guestbook application'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.4：创建 guestbook 应用程序
- en: 'You can then use the following YAML file to expose the front-end service via
    the ingress. This is provided as `simple-frontend-ingress.yaml` in the source
    code for this chapter:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，你可以使用以下 YAML 文件通过入口暴露前端服务。这在本章的源代码中提供为 `simple-frontend-ingress.yaml`：
- en: '[PRE6]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s have a look at what is defined in this YAML file:'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们看看这个 YAML 文件中定义了什么：
- en: '`Ingress` object.'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Ingress` 对象。'
- en: '`azure/application-gateway`.'
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`azure/application-gateway`。'
- en: 'The following lines define the actual ingress:'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下几行定义了实际的入口：
- en: '**Lines 8-12**: Here, you define the path this ingress is listening on. In
    our case, this is the top-level path. In more advanced cases, you can have different
    paths pointing to different services.'
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第 8-12 行**：在这里，你定义了该入口监听的路径。在我们的案例中，这是顶级路径。在更高级的情况下，你可以使用不同的路径指向不同的服务。'
- en: '**Lines 13-17**: These lines define the actual service this traffic should
    be pointed to.'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第 13-17 行**：这些行定义了该流量应指向的实际服务。'
- en: 'You can use the following command to create this ingress:'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以使用以下命令来创建此入口：
- en: '[PRE7]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If you now go to http://dns-name/, which you created in the *Creating a new
    application gateway* section, you should get an output as shown in *Figure 6.5*:![Accessing
    the guestbook application via the ingress](img/B17338_06_05.jpg)
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你现在访问你在*创建新应用程序网关*部分中创建的 http://dns-name/，你应该会看到如*图 6.5*所示的输出：![通过入口访问 guestbook
    应用程序](img/B17338_06_05.jpg)
- en: 'Figure 6.5: Accessing the guestbook application via the ingress'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.5：通过入口访问 guestbook 应用程序
- en: Note
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: You didn't have to publicly expose the front-end service as you have done in
    the preceding chapters. You have added the ingress as the exposed service, and
    the front-end service remains private to the cluster.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你不需要像前几章那样公开暴露前端服务。你已经将入口作为公开的服务，前端服务仍然对集群保持私有。
- en: '![Flowchart displaying a publicly accessible ingress](img/B17338_06_06.jpg)'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![显示公开可访问入口的流程图](img/B17338_06_06.jpg)'
- en: 'Figure 6.6: Flowchart displaying publicly accessible ingress'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.6：显示公开可访问入口的流程图
- en: 'You can verify this by running the following command:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过运行以下命令来验证这一点：
- en: '[PRE8]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This should show you that you have no public services, as seen by the lack
    of `EXTERNAL-IP` in *Figure 6.7*:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这应该能显示出你没有公共服务，因为在*图 6.7*中看不到`EXTERNAL-IP`：
- en: '![Output confirming that the front-end service remains private to the cluster](img/B17338_06_07.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![确认前端服务保持私有的输出](img/B17338_06_07.jpg)'
- en: 'Figure 6.7: Output shows that you have no public services'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.7：输出显示你没有公共服务
- en: In this section, you launched an instance of the guestbook application. You
    then exposed it publicly by creating an ingress, which in turn configured the
    application gateway that you created earlier. Only the ingress was publicly accessible.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你启动了 guestbook 应用程序的一个实例。然后，你通过创建入口将其公开，从而配置了你之前创建的应用程序网关。只有入口是公开可访问的。
- en: Next, you'll extend the functionality of AGIC and learn how to secure traffic
    using a Certificate from Let's Encrypt.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将扩展 AGIC 的功能，并学习如何使用 Let's Encrypt 的证书来保护流量。
- en: Adding TLS to an ingress
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向入口添加 TLS
- en: You will now add HTTPS support to your application. To do this, you need a TLS
    certificate. You will be using the `cert-manager` Kubernetes add-on to request
    a certificate from Let's Encrypt.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你将为应用程序添加 HTTPS 支持。为此，你需要一个 TLS 证书。你将使用 `cert-manager` Kubernetes 插件来向 Let's
    Encrypt 请求证书。
- en: Note
  id: totrans-74
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: 'Although this section focuses on using an automated service such as Let''s
    Encrypt, you can still pursue the traditional path of buying a certificate from
    an existing CA and importing it into Kubernetes. Please refer to the Kubernetes
    documentation for more information on how to do this: [https://kubernetes.io/docs/concepts/services-networking/ingress/#tls](https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
    )'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管本节重点介绍了使用 Let's Encrypt 等自动化服务，但你仍然可以选择传统方式，购买现有证书颁发机构（CA）的证书并将其导入 Kubernetes。有关如何操作的更多信息，请参考
    Kubernetes 文档：[https://kubernetes.io/docs/concepts/services-networking/ingress/#tls](https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
    )
- en: 'There are a couple of steps involved. The process of adding HTTPS to the application
    involves the following:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这其中涉及几个步骤。将 HTTPS 添加到应用程序的过程如下：
- en: Install `cert-manager`, which interfaces with the Let's Encrypt API to request
    a certificate for the domain name you specify.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 `cert-manager`，它与 Let's Encrypt API 进行交互，为你指定的域名请求证书。
- en: Install the certificate issuer, which will get the certificate from Let's Encrypt.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装证书颁发者，它将从 Let's Encrypt 获取证书。
- en: Create an SSL certificate for a given **Fully Qualified Domain Name** (**FQDN**).
    An FQDN is a fully qualified DNS record that includes the top-level domain name
    (such as .org or .com). You created an FQDN linked to your public IP in *step
    2* in the section *Creating a new application gateway*.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为给定的**完全限定域名**（**FQDN**）创建SSL证书。FQDN是一个完全限定的DNS记录，包含顶级域名（例如.org或.com）。你在*第2步*的*创建新应用程序网关*部分中创建了一个与公共IP关联的FQDN。
- en: Secure the front-end service by creating an ingress to the service with the
    certificate created in *step 3*. In the example in this section, you will not
    be executing this step as an individual step. You will, however, reconfigure the
    ingress to automatically pick up the certificate created in *step 3*.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用*第3步*中创建的证书，创建一个入口（ingress）来保护前端服务。在本节的示例中，你不会单独执行这一步。你将重新配置入口，以自动获取在*第3步*中创建的证书。
- en: Let's start with the first step by installing `cert-manager` in the cluster.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从在集群中安装`cert-manager`的第一步开始。
- en: Installing cert-manager
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 cert-manager
- en: '`cert-manager` ([https://github.com/jetstack/cert-manager](https://github.com/jetstack/cert-manager))
    is a Kubernetes add-on that automates the management and issuance of TLS certificates
    from various issuing sources. It is responsible for renewing certificates and
    ensuring they are updated periodically.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`cert-manager` ([https://github.com/jetstack/cert-manager](https://github.com/jetstack/cert-manager))
    是一个Kubernetes插件，它自动化管理和颁发来自各种颁发源的TLS证书。它负责续订证书，并确保证书定期更新。'
- en: Note
  id: totrans-84
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: The `cert-manager` project is not managed or maintained by Microsoft. It is
    an open-source solution previously managed by the company **Jetstack**, which
    recently donated it to the Cloud Native Computing Foundation.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`cert-manager`项目不是由微软管理或维护的。它是一个开源解决方案，最初由**Jetstack**公司管理，最近该公司将其捐赠给了Cloud
    Native Computing Foundation。'
- en: 'The following commands install `cert-manager` in your cluster:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令将在你的集群中安装`cert-manager`：
- en: '[PRE9]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This will install a number of components in your cluster as shown in *Figure
    6.8*. A detailed explanation of these components can be found in the `cert-manager`
    documentation at [https://cert-manager.io/docs/installation/kubernetes/](https://cert-manager.io/docs/installation/kubernetes/).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装集群中的多个组件，如*图6.8*所示。有关这些组件的详细解释，请参见`cert-manager`文档：[https://cert-manager.io/docs/installation/kubernetes/](https://cert-manager.io/docs/installation/kubernetes/)。
- en: '![Installing cert-manager on the cluster](img/B17338_06_08.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![在集群中安装 cert-manager](img/B17338_06_08.jpg)'
- en: 'Figure 6.8: Installing cert-manager in your cluster'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.8：在集群中安装 cert-manager
- en: '`cert-manager` makes use of a Kubernetes functionality called `cert-manager`,
    there are six CRDs that are created, some of which you will use later in this
    chapter.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`cert-manager`利用了Kubernetes的一个功能，称为`cert-manager`，它会创建六个CRD，之后你将在本章中使用其中的一些。'
- en: 'Now that you have installed `cert-manager`, you can move on to the next step:
    setting up a certificate issuer.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经安装了`cert-manager`，可以进行下一步操作：设置证书颁发者。
- en: Installing the certificate issuer
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装证书颁发者
- en: 'In this section, you will install the Let''s Encrypt staging certificate issuer.
    A certificate can be issued by multiple issuers. `letsencrypt-staging`, for example,
    is for testing purposes. As you are building tests, you''ll use the staging server.
    The code for the certificate issuer has been provided in the source code for this
    chapter in the `certificate-issuer.yaml` file. As usual, use `kubectl create -f
    certificate-issuer.yaml`; the YAML file has the following contents:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将安装Let's Encrypt的暂存证书颁发者。证书可以由多个颁发者颁发。例如，`letsencrypt-staging`是用于测试的。当你构建测试时，会使用暂存服务器。证书颁发者的代码已在本章的源代码中提供，位于`certificate-issuer.yaml`文件中。像往常一样，使用`kubectl
    create -f certificate-issuer.yaml`；该YAML文件的内容如下：
- en: '[PRE10]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let''s look at what we have defined here:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们在这里定义了什么：
- en: '`cert-manager` created. In this case, specifically, you point to the `Issuer`
    object. An issuer is a link between your Kubernetes cluster and the actual certificate
    authority creating the certificate, which is Let''s Encrypt in this case.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cert-manager`已创建。在这种情况下，特别是，你指向`Issuer`对象。颁发者是你的Kubernetes集群与实际的证书颁发机构之间的联系，本例中是Let''s
    Encrypt。'
- en: '**Lines 6-10**: Here you provide the configuration for Let''s Encrypt and point
    to the staging server.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第6-10行**：在这里，你提供了Let''s Encrypt的配置，并指向暂存服务器。'
- en: '**Lines 11-14**: This is additional configuration for the ACME client to certify
    domain ownership. You point Let''s Encrypt to the Azure Application Gateway ingress
    to verify that you own the domain you will request a certificate for later.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第 11-14 行**：这是 ACME 客户端的附加配置，用于认证域名所有权。您将 Let''s Encrypt 指向 Azure 应用程序网关入口，以验证您拥有稍后申请证书的域名。'
- en: 'With the certificate issuer installed, you can now move on to the next step:
    creating the TLS certificate on the ingress.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 安装证书颁发机构后，您现在可以继续执行下一步：在入口上创建 TLS 证书。
- en: Creating the TLS certificate and securing the ingress
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建 TLS 证书并保护入口
- en: In this section, you will create a TLS certificate. There are two ways you can
    configure `cert-manager` to create certificates. You can either manually create
    a certificate and link it to the ingress, or you can configure your ingress controller,
    so `cert-manager` automatically creates the certificate.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将创建一个 TLS 证书。您可以通过两种方式配置 `cert-manager` 来创建证书。您可以手动创建证书并将其链接到入口，或者您可以配置入口控制器，使得
    `cert-manager` 自动创建证书。
- en: In this example, you will configure your ingress using the latter method.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，您将使用后一种方法配置入口。
- en: 'To start, edit the ingress to look like the following YAML code. This file
    is present in the source code on GitHub as `ingress-with-tls.yaml`:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，编辑入口文件使其像下面的 YAML 代码一样。此文件在 GitHub 上的源代码中以 `ingress-with-tls.yaml` 存在：
- en: '[PRE11]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You should make the following changes to the original ingress:'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您应该对原始入口做出以下更改：
- en: '`acme-challenge` to prove domain ownership.'
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`acme-challenge` 以证明域名所有权。'
- en: '**Line 20**: The domain name for the ingress is added here. This is required
    because Let''s Encrypt only issues certificates for domains.'
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第 20 行**：此处添加入口的域名。因为 Let''s Encrypt 只为域名颁发证书，所以这是必需的。'
- en: '**Line 21-24**: This is the TLS configuration of the ingress. It contains the
    hostname as well as the name of the secret that will be created to store the certificate.'
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第 21-24 行**：这是入口的 TLS 配置。它包含主机名以及将创建的用于存储证书的密钥名称。'
- en: 'You can update the ingress you created earlier with the following command:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用以下命令更新之前创建的入口：
- en: '[PRE12]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: It takes `cert-manager` about a minute to request a certificate and configure
    the ingress to use that certificate. While you are waiting for that, let's have
    a look at the intermediate resources that `cert-manager` created on your behalf.
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`cert-manager` 大约需要一分钟的时间来请求证书并配置入口以使用该证书。在等待期间，让我们来看看 `cert-manager` 为您创建的中间资源。'
- en: 'First off, `cert-manager` created a `certificate` object for you. You can look
    at the status of that object using the following:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，`cert-manager` 为您创建了一个 `certificate` 对象。您可以使用以下命令查看该对象的状态：
- en: '[PRE13]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This command will generate an output as shown in *Figure 6.9*:'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此命令将生成如*图 6.9*所示的输出：
- en: '![Output displaying the status of the certificate object  with ready as false](img/B17338_06_09.jpg)'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![显示证书对象状态为未准备好的输出](img/B17338_06_09.jpg)'
- en: 'Figure 6.9: The status of the certificate object'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.9：证书对象的状态
- en: 'As you can see, the certificate isn''t ready yet. There is another object that
    `cert-manager` created to actually get the certificate. This object is `certificaterequest`.
    You can get its status by using the following command:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如您所见，证书尚未准备好。`cert-manager` 还创建了另一个对象来实际获取证书。这个对象是 `certificaterequest`。您可以使用以下命令获取其状态：
- en: '[PRE14]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This will generate the output shown in *Figure 6.10*:'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将生成如*图 6.10*所示的输出：
- en: '![Output displaying the status of the certificaterequest object as False](img/B17338_06_10.jpg)'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![显示证书请求对象状态为 False 的输出](img/B17338_06_10.jpg)'
- en: '[PRE15]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'While you''re waiting for the certificate to be issued, the status will look
    similar to *Figure 6.11*:'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在等待证书颁发期间，状态将类似于*图 6.11*所示：
- en: '![Output displaying additional details about the certificaterequest object  showing
    that cert-manager is waiting on certificate issuance](img/B17338_06_11.jpg)'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![显示证书请求对象的额外详细信息，显示 cert-manager 正在等待证书颁发](img/B17338_06_11.jpg)'
- en: 'Figure 6.11: Using the kubectl describe command to obtain details of the certificaterequest
    object'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.11：使用 kubectl describe 命令获取证书请求对象的详细信息
- en: As you can see, the `certificaterequest` object shows you that the order has
    been created and that it is pending.
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如您所见，`certificaterequest` 对象显示了订单已创建并且处于待处理状态。
- en: 'After a couple of additional seconds, the `describe` command should return
    a successful certificate creation message. Run the following command to get the
    updated status:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 几秒钟后，`describe` 命令应该会返回成功创建证书的消息。运行以下命令获取更新的状态：
- en: '[PRE16]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The output of this command is shown in *Figure 6.12*:'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此命令的输出如*图 6.12*所示：
- en: '![Output displaying the successful certificate creation message](img/B17338_06_12.jpg)'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![显示成功创建证书消息的输出](img/B17338_06_12.jpg)'
- en: 'Figure 6.12: The issued certificate'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.12：已发放的证书
- en: This should now enable the front-end ingress to be served over HTTPS.
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该使前端入口通过 HTTPS 提供服务。
- en: Let's try this out in a browser by browsing to the DNS name you created in the
    *Creating a new application gateway* section. Depending on your browser's cache,
    you might need to add `https://` in front of the URL.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在浏览器中试试，通过浏览到你在*创建新的应用程序网关*部分中创建的 DNS 名称。根据浏览器的缓存，你可能需要在 URL 前加上 `https://`。
- en: 'Once you reach the ingress, it will indicate an error in the browser, showing
    you that the certificate isn''t valid, similar to *Figure 6.13*. This is to be
    expected since you are using the Let''s Encrypt staging server:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你到达入口点，它会在浏览器中显示错误，提示证书无效，类似于*图 6.13*。这是可以预期的，因为你正在使用 Let's Encrypt 的暂存服务器：
- en: '![Using the Let''s Encrypt staging server, the certificate isn''t trusted by
    default](img/B17338_06_13.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Let''s Encrypt 暂存服务器时，证书默认不被信任](img/B17338_06_13.jpg)'
- en: 'Figure 6.13: Using the Let''s Encrypt staging server, the certificate isn''t
    trusted by default'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.13：使用 Let's Encrypt 暂存服务器时，证书默认不被信任
- en: You can browse to your application by clicking **Advanced** and selecting **Continue**.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过点击**高级**并选择**继续**来浏览到你的应用程序。
- en: In this section, you successfully added a TLS certificate to your ingress to
    secure traffic to it. Since you were able to complete the test with the staging
    certificate, you can now move on to a production system.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你成功地为你的入口添加了 TLS 证书，以保护到它的流量。既然你已经能够使用暂存证书完成测试，现在可以继续进入生产系统。
- en: Switching from staging to production
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从暂存切换到生产环境
- en: 'In this section, you will switch from a staging certificate to a production-level
    certificate. To do this, you can redo the previous exercise by creating a new
    issuer in your cluster, like the following (provided in `certificate-issuer-prod.yaml`
    as part of the code samples with this book). Don''t forget to change your email
    address in the file. The following code is contained in that file:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将从暂存证书切换到生产级证书。为此，你可以通过在集群中创建新的发行者来重新进行之前的操作，类似以下内容（该代码在 `certificate-issuer-prod.yaml`
    文件中提供，作为本书代码示例的一部分）。别忘了在文件中更改你的电子邮件地址。以下代码包含在该文件中：
- en: '[PRE17]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then, replace the reference to the issuer in the `ingress-with-tls.yaml` file
    with `letsencrypt-prod` as shown (provided in the `ingress-with-tls-prod.yaml`
    file):'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在 `ingress-with-tls.yaml` 文件中将发行者的引用替换为 `letsencrypt-prod`，如所示（在 `ingress-with-tls-prod.yaml`
    文件中提供）：
- en: '[PRE18]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'To apply these changes, execute the following commands:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 要应用这些更改，请执行以下命令：
- en: '[PRE19]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'It will again take about a minute for the certificate to become active. Once
    the new certificate is issued, you can browse to your DNS name again and shouldn''t
    see any more warnings regarding invalid certificates. If you click the padlock
    icon in the browser, you should see that your connection is secure and uses a
    valid certificate:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 证书再次激活需要大约一分钟的时间。新证书发放后，你可以再次访问你的 DNS 名称，并且不再会看到有关证书无效的警告。如果你点击浏览器中的锁形图标，你应该会看到你的连接是安全的并且使用了有效证书：
- en: '![The web page displaying a valid certificate](img/B17338_06_14.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![显示有效证书的网页](img/B17338_06_14.jpg)'
- en: 'Figure 6.14: The web page displaying a valid certificate'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.14：显示有效证书的网页
- en: In this section, you have learned how to add TLS support to an ingress. You
    did this by installing the `cert-manager` Kubernetes add-on. `cert-manager` got
    a free certificate from Let's Encrypt and added this to the existing ingress deployed
    on the application gateway. The process that was described here is not specific
    to Azure and Azure Application Gateway. This process of adding TLS to an ingress
    works with other ingress controllers as well.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你学习了如何为入口添加 TLS 支持。你通过安装 `cert-manager` Kubernetes 插件完成了这项工作。`cert-manager`
    从 Let's Encrypt 获得了免费证书，并将其添加到已部署在应用程序网关上的现有入口中。这里描述的过程并非特定于 Azure 和 Azure 应用程序网关。这种为入口添加
    TLS 的过程也适用于其他入口控制器。
- en: 'Let''s delete the resources you created during this chapter:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们删除本章中创建的资源：
- en: '[PRE20]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Summary
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you added HTTPS security to the guestbook application without
    actually changing the source code. You started by setting up a new application
    gateway and configured AGIC on AKS. This gives you the ability to create Kubernetes
    ingresses that can be configured on the application gateway.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您为 guestbook 应用程序添加了 HTTPS 安全性，而无需实际更改源代码。您首先设置了一个新的应用程序网关，并在 AKS 上配置了
    AGIC。这使您能够创建可以在应用程序网关上配置的 Kubernetes ingress。
- en: Then, you installed a certificate manager that interfaces with the Let's Encrypt
    API to request a certificate for the domain name we subsequently specified. You
    leveraged a certificate issuer to get the certificate from Let's Encrypt. You
    then reconfigured the ingress to request a certificate from this issuer in the
    cluster. Using these capabilities of both the certificate manager as well as the
    ingress, you are now able to secure your websites using TLS.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您安装了一个与 Let's Encrypt API 接口的证书管理器，用于请求后续指定的域名证书。您利用证书颁发机构从 Let's Encrypt
    获取证书。然后，您重新配置了 ingress，以便在集群中向该证书颁发机构请求证书。借助证书管理器和 ingress 的这些功能，您现在能够通过 TLS 来保护您的网站。
- en: In the next chapter, you will learn how to monitor your deployments and set
    up alerts. You will also learn how to quickly identify root causes when errors
    do occur, and how to debug applications running on AKS. At the same time, you'll
    learn how to perform the correct fixes once you have identified the root causes.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何监控您的部署并设置警报。您还将学习如何在错误发生时快速识别根本原因，以及如何调试在 AKS 上运行的应用程序。同时，您将学习在识别根本原因后如何进行正确的修复。

- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Installing Your First Kubernetes Cluster
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装你的第一个Kubernetes集群
- en: In the previous chapter, we had the opportunity to explain what Kubernetes is,
    its distributed architecture, the anatomy of a working cluster, and how it can
    manage your Docker containers on multiple Linux machines. Now, we are going to
    get our hands dirty because it’s time to install Kubernetes. The main objective
    of this chapter is to get you a working Kubernetes installation for the coming
    chapters. This is so that you have your own cluster to work on, practice with,
    and learn about while reading this book.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们有机会解释了Kubernetes是什么，它的分布式架构，一个正常工作的集群的构成，以及它如何在多台Linux机器上管理Docker容器。现在，我们要亲自动手了，因为是时候安装Kubernetes了。本章的主要目标是为接下来的章节安装一个可用的Kubernetes集群。这样，你就可以拥有自己的集群进行实践、操作和学习，边读这本书边实践。
- en: Installing Kubernetes means that you have to get the different components to
    work together. Of course, we won’t do that the hard way of setting up individual
    cluster components; instead, we will use automated tools. These tools have the
    benefit of launching and configuring all of the components for us locally. This
    automated Kubernetes cluster setup is particularly beneficial for DevOps teams
    rapidly testing changes to YAML, developers wanting a local environment to test
    applications, and security teams rapidly testing changes to Kubernetes object
    YAML definitions.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Kubernetes意味着你需要让不同的组件协同工作。当然，我们不会采用手动设置单个集群组件的繁琐方法；相反，我们将使用自动化工具。这些工具的好处在于它们可以本地启动并配置所有组件。这个自动化的Kubernetes集群设置对于DevOps团队快速测试YAML更改、开发人员希望拥有一个本地环境来测试应用程序，以及安全团队快速测试Kubernetes对象YAML定义的更改尤其有益。
- en: If you don’t want to have a Kubernetes cluster on your local machine, we’re
    also going to set up minimalist yet full-featured production-ready Kubernetes
    clusters on **Google Kubernetes Engine** (**GKE**), **Amazon Elastic Kubernetes
    Service** (**EKS**), and **Azure Kubernetes Service** (**AKS**) in later chapters
    of this book. These are cloud-based and production-ready solutions. In this way,
    you can practice and learn on a real-world Kubernetes cluster hosted on the cloud.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想在本地计算机上搭建Kubernetes集群，我们还将在本书的后续章节中设置简化但功能完整的生产级Kubernetes集群，分别使用**Google
    Kubernetes Engine**（**GKE**）、**Amazon Elastic Kubernetes Service**（**EKS**）和**Azure
    Kubernetes Service**（**AKS**）。这些都是基于云的、生产就绪的解决方案。这样，你可以在一个实际的Kubernetes集群上进行实践和学习，该集群托管在云端。
- en: Whether you want to go local or on the cloud, it is your choice. You’ll have
    to choose the one that suits you best by considering each solution’s benefits
    and drawbacks. In both cases, however, you’ll require a working `kubectl` installed
    on your local workstation to communicate with the resulting Kubernetes cluster.
    Installation instructions for `kubectl` are available in the previous chapter,
    *Chapter 2*, *Kubernetes Architecture – from Container Images to Running Pods*.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你是选择本地搭建还是使用云端服务，这由你来决定。你需要通过考虑每种解决方案的优缺点来选择最适合你的方式。然而，在这两种情况下，你都需要在本地工作站上安装一个可用的`kubectl`，以便与最终的Kubernetes集群进行通信。关于`kubectl`的安装说明可以在上一章中找到，*第二章*，*Kubernetes架构
    – 从容器镜像到运行的Pod*。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Installing a Kubernetes cluster with `minikube`
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`minikube`安装Kubernetes集群
- en: Multi-node Kubernetes cluster with `kind`
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`kind`的多节点Kubernetes集群
- en: Alternative Kubernetes learning environments
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 替代的Kubernetes学习环境
- en: Production-grade Kubernetes clusters
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生产级Kubernetes集群
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow along with the examples in this chapter, you will require the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了跟随本章的示例，你将需要以下内容：
- en: '`kubectl` installed on your local machine'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在本地计算机上安装`kubectl`
- en: A workstation with 2 CPUs or more, 2 GB of free memory, and 20 GB of free disk
    space. (You will need more resources if you want to explore the multi-node cluster
    environments.)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一台配备至少2个CPU、2GB可用内存和20GB可用磁盘空间的工作站。（如果你想探索多节点集群环境，你将需要更多的资源。）
- en: A container or virtual machine manager installed on the workstation, such as
    Docker, QEMU, Hyperkit, Hyper-V, KVM, Parallels, Podman, VirtualBox, or VMware
    Fusion/Workstation
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在工作站上安装的容器或虚拟机管理器，如Docker、QEMU、Hyperkit、Hyper-V、KVM、Parallels、Podman、VirtualBox或VMware
    Fusion/Workstation
- en: Reliable internet access
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可靠的互联网连接
- en: You can download the latest code samples for this chapter from the official
    GitHub repository at [https://github.com/PacktPublishing/The-Kubernetes-Bible-Second-Edition/tree/main/Chapter03](https://github.com/PacktPublishing/The-Kubernetes-Bible-Second-Edition/tree/main/Chapter03)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从官方 GitHub 仓库下载本章的最新代码示例：[https://github.com/PacktPublishing/The-Kubernetes-Bible-Second-Edition/tree/main/Chapter03](https://github.com/PacktPublishing/The-Kubernetes-Bible-Second-Edition/tree/main/Chapter03)
- en: Installing a Kubernetes cluster with minikube
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 minikube 安装 Kubernetes 集群
- en: In this section, we are going to learn how to install a local Kubernetes cluster
    using `minikube`. It’s probably the easiest way to get a working Kubernetes installation
    locally. By the end of this section, you’re going to have a working single-node
    Kubernetes cluster installed on your local machine.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何使用 `minikube` 安装本地 Kubernetes 集群。这可能是获得本地工作 Kubernetes 安装的最简单方法。在本节结束时，你将能够在本地机器上安装一个工作中的单节点
    Kubernetes 集群。
- en: '`minikube` is easy to use and is completely free. It’s going to install all
    of the Kubernetes components on your local machine and configure all of them.
    Uninstalling all of the components through `minikube` is easy too, so you won’t
    be stuck with it if, one day, you want to destroy your local cluster.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`minikube` 使用起来很简单，且完全免费。它会在本地机器上安装所有 Kubernetes 组件并进行配置。通过 `minikube` 卸载所有组件也很容易，因此如果有一天你想销毁本地集群，也不会被困住。'
- en: '`minikube` has one big advantage compared to full-fledged production cluster
    deployment methods: it’s a super useful tool for testing the Kubernetes scenarios
    quickly. If you do not wish to use `minikube`, you can completely skip this section
    and choose other methods described in this chapter.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 与完整的生产集群部署方法相比，`minikube` 有一个很大的优势：它是一个非常有用的工具，可以快速测试 Kubernetes 场景。如果你不希望使用
    `minikube`，可以完全跳过这一部分，选择本章中描述的其他方法。
- en: 'While `minikube` is a popular choice for local Kubernetes development, it comes
    with some trade-offs in resource usage and feature fidelity compared to a full-blown
    production cluster:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 `minikube` 是本地 Kubernetes 开发的热门选择，但与完整的生产集群相比，它在资源使用和功能一致性上有一些权衡：
- en: '**Resource strain**: Running `minikube` alongside other processes on your local
    machine can be resource-intensive. It requires a good amount of CPU and RAM when
    you want to create larger Kubernetes clusters, potentially impacting the performance
    of other applications.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源压力**：在本地机器上运行 `minikube` 与其他进程一起运行时可能会占用大量资源。当你想创建更大的 Kubernetes 集群时，它需要较多的
    CPU 和内存，这可能会影响其他应用程序的性能。'
- en: '**Networking discrepancies**: Unlike a production Kubernetes cluster, `minikube`''s
    default network setup may not fully mimic real-world networking environments.
    This can introduce challenges when replicating or troubleshooting network-related
    issues that might occur in production.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络差异**：与生产环境中的 Kubernetes 集群不同，`minikube` 的默认网络设置可能无法完全模拟现实世界中的网络环境。这可能会在复制或排除生产中可能发生的网络相关问题时带来挑战。'
- en: '**Compatibility considerations**: Certain Kubernetes features or third-party
    tools might require a more complete Kubernetes setup than what `minikube` offers,
    leading to compatibility issues during development.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**兼容性考虑**：某些 Kubernetes 特性或第三方工具可能需要比 `minikube` 提供的更完整的 Kubernetes 设置，这可能导致开发过程中的兼容性问题。'
- en: '**Persistent storage challenges**: Managing persistent storage for applications
    within `minikube` can be cumbersome due to limitations in its persistent volume
    support compared to a full Kubernetes cluster.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持久存储挑战**：由于 `minikube` 在持久卷支持方面的限制，管理应用程序的持久存储可能会很麻烦，相较于完整的 Kubernetes 集群。'
- en: We will learn how to install `minikube` and deploy and develop a Kubernetes
    cluster in the next section.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一节学习如何安装 `minikube` 并部署和开发 Kubernetes 集群。
- en: Installing minikube
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 minikube
- en: Here, we will see how the `minikube` tool can be installed on Linux, macOS,
    and Windows. Installing `minikube` using the binary or package manager method
    is a straightforward task, as explained in the following sections.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将看到如何在 Linux、macOS 和 Windows 上安装 `minikube` 工具。使用二进制文件或包管理器方法安装 `minikube`
    是一项简单的任务，如下文所述。
- en: You can install `minikube` using the native package manager such as `apt-get,
    yum`, Zypper, Homebrew (macOS), or Chocolatey (Windows). Refer to the documentation
    ([https://minikube.sigs.k8s.io/docs/start](https://minikube.sigs.k8s.io/docs/start))
    to learn more.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用本地包管理器，如 `apt-get`、`yum`、Zypper、Homebrew（macOS）或 Chocolatey（Windows）来安装
    `minikube`。请参考文档（[https://minikube.sigs.k8s.io/docs/start](https://minikube.sigs.k8s.io/docs/start)）了解更多信息。
- en: Installing minikube on Linux
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Linux上安装minikube
- en: 'On Linux, `minikube` can be installed using the Debian package, the RPM package,
    or the binary, as explained below:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux上，`minikube`可以通过Debian包、RPM包或二进制文件安装，如下所述：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Please note, the path can be different in your workstation depending on the
    operating system. You need to ensure the path is included in the **PATH** environment
    variables so that `minikube` command will work without any issues.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，路径在你的工作站上可能会有所不同，这取决于操作系统。你需要确保路径已包含在**PATH**环境变量中，以便`minikube`命令能正常工作。
- en: Installing minikube on macOS
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在macOS上安装minikube
- en: 'On macOS, `minikube` can be installed with the binary, as explained below:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在macOS上，`minikube`可以通过二进制文件安装，如下所述：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: It is also possible to install `minikube` on macOS using the package manager,
    Homebrew.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以通过包管理器Homebrew在macOS上安装`minikube`。
- en: Installing minikube on Windows
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Windows上安装minikube
- en: 'Like macOS and Linux, it is possible to install `minikube` on Windows using
    multiple methods, as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 与macOS和Linux一样，也可以通过多种方式在Windows上安装`minikube`，如下所示：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Once you have configured `minikube`, then you can create different types of
    Kubernetes clusters using `minikube`, as explained in the next sections.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你配置了`minikube`，你就可以使用`minikube`创建不同类型的Kubernetes集群，具体说明见接下来的章节。
- en: minikube configurations
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: minikube配置
- en: The `minikube` utility comes with minimal but effective customizations required
    for a development environment.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`minikube`工具提供了适用于开发环境的最基本但有效的定制功能。'
- en: 'For example, the default specification of the Kubernetes cluster created by
    `minikube` will be 2 CPUs and 2 GB memory. It is possible to adjust this value
    using the following command if you need a bigger Kubernetes cluster node:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，通过`minikube`创建的Kubernetes集群的默认配置为2个CPU和2GB内存。如果你需要更大的Kubernetes集群节点，可以使用以下命令调整这个值：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you see on the screen, you need to delete and recreate the `minikube` cluster
    to apply the settings.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在屏幕上看到的，你需要删除并重新创建`minikube`集群以应用设置。
- en: Drivers for minikube
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: minikube的驱动程序
- en: '`minikube` acts as a simple and lightweight way to run a local Kubernetes cluster
    on your development machine. To achieve this, it leverages **drivers** – the workhorses
    behind managing the cluster’s lifecycle. These drivers interact with different
    virtualization and containerization technologies, allowing `minikube` to create,
    configure, and control the underlying infrastructure for your local Kubernetes
    environment. `minikube`''s driver flexibility empowers you to deploy your cluster
    as a virtual machine, a container, or even directly on the bare metal of your
    development machine, tailoring the setup to your specific needs and preferences:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`minikube`作为一种简单而轻量的方式，用于在你的开发机器上运行本地Kubernetes集群。为了实现这一点，它利用**驱动程序**——这些是管理集群生命周期的核心组件。这些驱动程序与不同的虚拟化和容器化技术进行交互，使`minikube`能够创建、配置并控制本地Kubernetes环境的底层基础设施。`minikube`的驱动程序灵活性使你能够根据特定的需求和偏好，将集群部署为虚拟机、容器，甚至直接部署到开发机器的裸机上，从而量身定制设置：'
- en: '**Container drivers**: For a containerized approach, `minikube` can leverage
    a local Podman or Docker installation. This allows you to run `minikube` directly
    within a container on your development machine, potentially offering a more lightweight
    and resource-efficient setup.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器驱动程序**：对于容器化的方式，`minikube`可以利用本地的Podman或Docker安装。这允许你在开发机器的容器中直接运行`minikube`，从而可能提供更轻量和更高效的资源配置。'
- en: '**Virtual machine (VM) drivers**: If you prefer a VM approach, `minikube` can
    launch VMs on your machine. These VMs will then house and wrap the necessary Kubernetes
    components, providing a more isolated environment for your local cluster.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**虚拟机（VM）驱动程序**：如果你更倾向于虚拟机的方式，`minikube`可以在你的机器上启动虚拟机。这些虚拟机将容纳并封装所需的Kubernetes组件，为你的本地集群提供一个更为隔离的环境。'
- en: The choice between container and VM drivers depends on your specific needs and
    preferences, as well as your development environment’s capabilities.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 选择容器驱动程序还是虚拟机驱动程序取决于你的具体需求和偏好，以及你的开发环境的能力。
- en: Refer to the `minikube` driver documentation ([https://minikube.sigs.k8s.io/docs/drivers/](https://minikube.sigs.k8s.io/docs/drivers/))
    to learn about available and supported `minikube` drivers and supported operating
    systems.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 参考`minikube`驱动程序文档([https://minikube.sigs.k8s.io/docs/drivers/](https://minikube.sigs.k8s.io/docs/drivers/))了解可用和支持的`minikube`驱动程序及支持的操作系统。
- en: 'It is also possible to set the default driver for `minikube` using the following
    command:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用以下命令设置`minikube`的默认驱动程序：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Also, the driver can be set while creating the `minikube` cluster as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，可以在创建`minikube`集群时设置驱动程序，方法如下：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Prerequisites depend on the individual `minikube` drivers and must be installed
    and prepared. These may include an installation of Docker, Podman, or VirtualBox
    with permissions granted on a specific operating system. Installation and configuration
    instructions can be found in the `minikube` driver-specific documentation ([https://minikube.sigs.k8s.io/docs/drivers](https://minikube.sigs.k8s.io/docs/drivers)).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 先决条件取决于各个`minikube`驱动程序，必须先安装并准备好。这些可能包括安装Docker、Podman或VirtualBox，并在特定操作系统上授予权限。安装和配置说明可以在`minikube`驱动程序特定的文档中找到（[https://minikube.sigs.k8s.io/docs/drivers](https://minikube.sigs.k8s.io/docs/drivers)）。
- en: Let us learn how to launch our first Kubernetes cluster using `minikube` in
    the next section.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在下一部分学习如何使用`minikube`启动我们的第一个Kubernetes集群。
- en: Launching a single-node Kubernetes cluster using minikube
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用minikube启动单节点Kubernetes集群
- en: The main purpose of `minikube` is to launch the Kubernetes components on your
    local system and have them communicate with each other. In the following sections,
    we will learn how to deploy `minikube` clusters using the VirtualBox driver and
    Docker.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`minikube`的主要目的是在本地系统上启动Kubernetes组件，并使它们彼此通信。在接下来的部分中，我们将学习如何使用VirtualBox驱动程序和Docker部署`minikube`集群。'
- en: Setting up minikube using VMs
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用虚拟机设置minikube
- en: 'The VM method requires you to install a hypervisor on top of your workstation
    as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: VM方法要求您在工作站上安装虚拟机管理程序，如下所示：
- en: 'Linux: KVM2 (preferred), VirtualBox, QEMU'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Linux: KVM2（推荐），VirtualBox，QEMU'
- en: 'Windows: Hyper-V (preferred), VirtualBox, VMware Workstation, QEMU'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Windows: Hyper-V（推荐），VirtualBox，VMware Workstation，QEMU'
- en: 'macOS: Hyperkit, VirtualBox, Parallels, VMware Fusion, QEMU'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'macOS: Hyperkit, VirtualBox, Parallels, VMware Fusion, QEMU'
- en: Then, `minikube` will wrap all of the Kubernetes components into a VM that will
    be launched.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，`minikube`将把所有Kubernetes组件封装成一个虚拟机，并启动该虚拟机。
- en: In the following example, we are using Fedora 39 as our workstation and VirtualBox
    as our hypervisor software as it is available for Linux, macOS, and Windows.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们使用Fedora 39作为工作站，并将VirtualBox作为我们的虚拟机管理程序软件，因为它适用于Linux、macOS和Windows。
- en: Refer to [https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads)
    to download and install VirtualBox for your workstation. You are free to use your
    own choice of virtualization software and always follow the documentation ([https://minikube.sigs.k8s.io/docs/drivers/](https://minikube.sigs.k8s.io/docs/drivers/))
    to see the supported virtualization software.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考[https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads)下载并安装适用于您工作站的VirtualBox。您可以自由选择您喜欢的虚拟化软件，并始终按照文档（[https://minikube.sigs.k8s.io/docs/drivers/](https://minikube.sigs.k8s.io/docs/drivers/)）查看支持的虚拟化软件。
- en: Do not confuse the `minikube` version and the deployed Kubernetes version. For
    example, `minikube 1.32` uses Kubernetes 1.28 for stability and compatibility
    reasons. This allows for thorough testing, broader tool support, controlled rollouts,
    and longer-term support for older versions. Users still have the flexibility to
    run different versions of Kubernetes independently. This balance between stability
    and flexibility makes `minikube` a reliable and versatile platform for developers.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 不要混淆`minikube`版本和已部署的Kubernetes版本。例如，`minikube 1.32`使用Kubernetes 1.28，出于稳定性和兼容性的考虑。这可以进行彻底的测试，提供更广泛的工具支持，控制版本发布，并对旧版本提供长期支持。用户仍然可以独立运行不同版本的Kubernetes。这种稳定性与灵活性之间的平衡使得`minikube`成为开发人员可靠且多功能的平台。
- en: 'On your workstation where you have installed `minikube` and VirtualBox, execute
    the following command:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在您已经安装了`minikube`和VirtualBox的工作站上，执行以下命令：
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If you are using a particular version of `minikube` but want to install a different
    version of Kubernetes, then you can mention the specific version, as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是特定版本的`minikube`，但想要安装不同版本的Kubernetes，则可以指定特定版本，如下所示：
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You will see that `minikube` is starting the Kubernetes deployment process
    including the VM image downloading, as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到`minikube`正在启动Kubernetes部署过程，包括VM镜像的下载，如下所示：
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You may also see the below information based on your workstation’s operating
    system and the virtualization software as a recommendation:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您工作站的操作系统和虚拟化软件，您还可能会看到以下信息，作为建议：
- en: '[PRE9]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Finally, you will see the following success message from `minikube`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您将看到`minikube`显示以下成功消息：
- en: '[PRE10]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Yes, you have deployed a fully working Kubernetes cluster within a minute and
    are ready to deploy your application.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，你已经在一分钟内部署了一个完全工作的 Kubernetes 集群，并准备好部署你的应用。
- en: 'Now verify the Kubernetes cluster status using the `minikube` command, as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在使用 `minikube` 命令验证 Kubernetes 集群的状态，如下所示：
- en: '[PRE11]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You can also see the new `minikube` VM in your VirtualBox UI, as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以在 VirtualBox UI 中看到新的 `minikube` 虚拟机，如下所示：
- en: '![](img/B22019_03_01.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B22019_03_01.png)'
- en: 'Figure 3.1: The minikube VM on the VirtualBox UI'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1：VirtualBox UI 中的 minikube 虚拟机
- en: In the next section, we will learn how to deploy Kubernetes clusters using `minikube`
    and containers.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将学习如何使用 `minikube` 和容器部署 Kubernetes 集群。
- en: Setting up minikube using a container
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用容器设置 minikube
- en: 'The container method is simpler. Instead of using a VM, `minikube` uses a local
    Docker Engine instance or Podman to launch the Kubernetes components inside a
    big container. To use the container-based `minikube`, make sure that you install
    Docker or Podman by following the instructions for your workstation operating
    system on which you are installing `minikube`; `minikube` will not install Podman
    or Docker for you. If the provided driver is missing or if the `minikube` cannot
    find the driver on the system, you may get an error, as shown below:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 容器方法更简单。`minikube` 不使用虚拟机，而是使用本地的 Docker 引擎实例或 Podman 启动一个大容器内的 Kubernetes 组件。要使用基于容器的
    `minikube`，确保按照你所安装 `minikube` 的工作站操作系统的说明安装 Docker 或 Podman；`minikube` 不会为你安装
    Podman 或 Docker。如果缺少提供的驱动程序，或者 `minikube` 无法在系统上找到该驱动程序，你可能会遇到如下错误：
- en: '[PRE12]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The Docker installation process is easy, but the steps can vary depending on
    your operating system, and you can take a look at the documentation ([https://docs.docker.com/engine/install/](https://docs.docker.com/engine/install/))
    for more information. Similarly, the Podman installation steps are available at
    [https://podman.io/docs/installation](https://podman.io/docs/installation) for
    different operating system flavors.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 安装过程很简单，但步骤可能因操作系统不同而有所变化，你可以查看文档 ([https://docs.docker.com/engine/install/](https://docs.docker.com/engine/install/))
    获取更多信息。同样，Podman 的安装步骤也可以在 [https://podman.io/docs/installation](https://podman.io/docs/installation)
    上找到，适用于不同的操作系统版本。
- en: If you are using a Windows workstation and Hyper-V-based VM for your hands-on
    lab, remember to disable Dynamic Memory for the VM in which you are installing
    `minikube` and the container engine.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用 Windows 工作站和基于 Hyper-V 的虚拟机进行实践实验，记得在安装 `minikube` 和容器引擎的虚拟机中禁用动态内存。
- en: When running with the Podman driver, `minikube` performs a check of the available
    memory when it starts, and will report the “in-use” memory (set dynamically).
    So, you need to ensure enough memory is available or configure memory requirements
    for the Kubernetes node.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 Podman 驱动程序运行时，`minikube` 在启动时会检查可用内存，并报告“正在使用的”内存（动态设置）。因此，你需要确保有足够的内存可用，或者为
    Kubernetes 节点配置内存需求。
- en: 'In the following example, we are using Fedora 39 as our workstation and Docker
    as the container engine:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们使用 Fedora 39 作为工作站，Docker 作为容器引擎：
- en: '[PRE13]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We can also use Podman as the container engine and create a Kubernetes cluster
    using `minikube` with the following command:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用 Podman 作为容器引擎，并通过以下命令使用 `minikube` 创建 Kubernetes 集群：
- en: '[PRE14]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now we have the Kubernetes cluster created using `minikube`, in the next section
    let us learn how to access and manage the cluster using `kubectl`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了一个通过 `minikube` 部署的 Kubernetes 集群，在接下来的部分中，让我们学习如何使用 `kubectl` 访问和管理该集群。
- en: Accessing the Kubernetes cluster created by minikube
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问由 minikube 创建的 Kubernetes 集群
- en: 'Now, we need to create a `kubeconfig` file for our local `kubectl` CLI to be
    able to communicate with this new Kubernetes installation. The good news is that
    `minikube` also generated one on the fly for us when we launched the `minikube
    start` command. The `kubeconfig` file generated by `minikube` is pointing to the
    local `kube-apiserver` endpoint, and your local `kubectl` was configured to call
    this cluster by default. So, essentially, there is nothing to do: the `kubeconfig`
    file is already formatted and in the proper location.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要为本地的 `kubectl` 命令行工具创建一个 `kubeconfig` 文件，以便它能与这个新的 Kubernetes 安装进行通信。好消息是，当我们执行
    `minikube start` 命令时，`minikube` 会即时为我们生成一个 `kubeconfig` 文件。`minikube` 生成的 `kubeconfig`
    文件指向本地的 `kube-apiserver` 端点，且你的本地 `kubectl` 已配置为默认调用该集群。因此，实际上不需要做任何额外操作：`kubeconfig`
    文件已经被正确格式化并放置在合适的位置。
- en: 'By default, this configuration is in `~/.kube/config`, and you should be able
    to see that a `minikube` context is now present:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，这个配置在`~/.kube/config`中，你应该能够看到现在有一个`minikube`上下文：
- en: '[PRE15]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Use the following command to display the current `kubeconfig` file. You should
    observe a cluster, named `minikube`, that points to a local IP address:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令显示当前的`kubeconfig`文件。你应该能看到一个名为`minikube`的集群，它指向一个本地IP地址：
- en: '[PRE16]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Following this, run the following command, which will show the Kubernetes cluster
    that your `kubectl` is pointing to right now:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，运行以下命令，这将显示当前你的`kubectl`指向的Kubernetes集群：
- en: '[PRE17]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, let’s try to issue a real `kubectl` command to list the nodes that are
    part of our `minikube` cluster. If everything is okay, this command should reach
    the `kube-apiserver` component launched by `minikube`, which will return only
    one node since `minikube` is a single-node solution. Let’s list the nodes with
    the following command:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试发出一个真实的`kubectl`命令，列出属于我们`minikube`集群的节点。如果一切正常，此命令应该会到达由`minikube`启动的`kube-apiserver`组件，该组件将返回一个节点，因为`minikube`是单节点解决方案。让我们使用以下命令列出节点：
- en: '[PRE18]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: If you don’t view any errors when running this command, it means that your `minikube`
    cluster is ready to be used and is fully working!
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果运行此命令时没有看到任何错误，说明你的`minikube`集群已经准备好并且完全正常工作！
- en: This is the very first real `kubectl` command you ran as part of this book.
    Here, a real `kube-apiserver` component received your API call and answered back
    with an HTTP response containing data coming from a real `etcd` data store. In
    our scenario, this is the list of the nodes in our cluster.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你作为本书的一部分运行的第一个真实的`kubectl`命令。在这里，真实的`kube-apiserver`组件接收了你的API调用，并返回了来自真实`etcd`数据存储的HTTP响应数据。在我们的场景中，这是集群中节点的列表。
- en: Since `minikube` creates a single-node Kubernetes cluster by default, this command
    only outputs one node. This node is both a control plane node and a compute node
    at the same time. It’s good for local testing, but do not deploy such a setup
    in production.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`minikube`默认创建一个单节点的Kubernetes集群，这个命令只会输出一个节点。这个节点既是控制平面节点，又是计算节点。适合本地测试，但不要在生产环境中部署这种配置。
- en: 'What we can do now is list the status of the control plane components so that
    you can start familiarizing yourself with `kubectl`:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以做的，是列出控制平面组件的状态，以便你开始熟悉`kubectl`：
- en: '[PRE19]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This command should output the status of the control plane components. You
    should see the following:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令应输出控制平面组件的状态。你应该看到如下内容：
- en: A running `etcd` datastore
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个正在运行的`etcd`数据存储
- en: A running `kube-scheduler` component
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个正在运行的`kube-scheduler`组件
- en: A running `kube-controller-manager` component
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个正在运行的`kube-controller-manager`组件
- en: In the next section, we will learn how to housekeep your Kubernetes learning
    environment by stopping and deleting the `minikube` Kubernetes cluster.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将学习如何通过停止并删除`minikube` Kubernetes集群来清理你的Kubernetes学习环境。
- en: Stopping and deleting the local minikube cluster
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 停止并删除本地的minikube集群
- en: 'You might want to stop or delete your local `minikube` installation. To proceed,
    do not kill the VM or container directly, but rather, use the `minikube` command-line
    utility. Here are the two commands to do so:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想停止或删除本地的`minikube`安装。继续操作时，不要直接杀死虚拟机或容器，而是使用`minikube`命令行工具。以下是执行此操作的两个命令：
- en: '[PRE20]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The preceding command will stop the cluster. However, it will continue to exist;
    its state will be kept, and you will be able to resume it later using the following
    `minikube start` command again. You can check it by calling the `minikube status`
    command again:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的命令将停止集群。然而，集群将继续存在；其状态将被保留，你可以稍后使用以下`minikube start`命令重新启动它。你可以通过再次运行`minikube
    status`命令来检查它：
- en: '[PRE21]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'It is also possible to pause the cluster instead of stopping so that you can
    quickly re-start the Kubernetes cluster:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以暂停集群，而不是停止它，这样你可以快速重新启动Kubernetes集群：
- en: '[PRE22]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'And later, you can resume the cluster as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，你可以按如下方式恢复集群：
- en: '[PRE23]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'If you want to destroy the cluster, use the following command:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想销毁集群，请使用以下命令：
- en: '[PRE24]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: If you use this command, the cluster will be completely destroyed. Its state
    will be lost and impossible to recover.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用此命令，集群将被完全销毁。它的状态将丢失，无法恢复。
- en: Now that your `minikube` cluster is operational, it’s up to you to decide whether
    you want to use it to follow the next chapters or pick another solution.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的`minikube`集群已经运行，决定是否使用它继续后续章节，或选择其他解决方案，就由你来定。
- en: Multi-node Kubernetes cluster using minikube
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用minikube的多节点Kubernetes集群
- en: 'It is also possible to create multi-node kubernetes clusters using `minikube`.
    In the following demonstration, we are creating a three-node Kubernetes cluster
    using `minikube`:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以使用`minikube`创建多节点Kubernetes集群。在接下来的演示中，我们将使用`minikube`创建一个三节点Kubernetes集群：
- en: You need to ensure that, your workstation has enough resources to create multiple
    Kubernetes nodes (either VMs or containers) when you create multi-node clusters.
    Also, note that `minikube` will spin up nodes with the same vCPU and memory you
    mentioned in settings or arguments.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建多节点集群时，您需要确保工作站有足够的资源来创建多个Kubernetes节点（无论是虚拟机还是容器）。同时，注意`minikube`会根据您在设置或参数中指定的vCPU和内存配置启动节点。
- en: '[PRE25]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Once the cluster is provisioned, check the node details and find all the nodes
    as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 集群创建完成后，检查节点详情并查看所有节点，如下所示：
- en: '[PRE26]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '`minikube` created a three-node cluster (`--nodes=3`) with the first node as
    the control plane node (or master node) and the remaining two nodes as compute
    nodes (you will need to assign appropriate labels later; we will learn about this
    in later chapters).'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`minikube`创建了一个三节点集群（`--nodes=3`），其中第一个节点为控制平面节点（或主节点），其余两个节点为计算节点（稍后您需要分配适当的标签；我们将在后续章节中学习此内容）。'
- en: Multi-master Kubernetes cluster using minikube
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用minikube的多主节点Kubernetes集群
- en: 'There might be situations where you want to deploy and test Kubernetes clusters
    with a high availability control plane with multiple control plane nodes. You
    can implement the same using `minikube` using the following command:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会有这种情况：您想要部署并测试具有高可用控制平面的Kubernetes集群，带有多个控制平面节点。您可以使用`minikube`通过以下命令实现这一点：
- en: '[PRE27]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '`minikube` will create a five-node cluster (`--nodes 5`) and configure the
    first three nodes as control plane nodes (`--ha true`).'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`minikube`将创建一个五节点集群（`--nodes 5`），并将前3个节点配置为控制平面节点（`--ha true`）。'
- en: Again, remember to ensure you have enough resources on your workstation to create
    such multi-node clusters.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 再次提醒，确保您的工作站有足够的资源来创建这样一个多节点集群。
- en: Multiple Kubernetes clusters using minikube
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用minikube的多个Kubernetes集群
- en: 'As we learned, `minikube` is meant for the development and testing of Kubernetes
    environments. There might be situations where you want to simulate the environment
    with multiple Kubernetes clusters. In that case, you can use `minikube` again
    as it is possible to create multiple Kubernetes clusters using `minikube`. But
    remember to give different names (`--profile`) for your different Kubernetes clusters,
    as explained below:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所学，`minikube`是为Kubernetes环境的开发和测试设计的。可能会有这样的情况：您想要模拟一个包含多个Kubernetes集群的环境。在这种情况下，您可以再次使用`minikube`，因为使用`minikube`可以创建多个Kubernetes集群。但请记住，为您的不同Kubernetes集群指定不同的名称（`--profile`），如下面所示：
- en: '[PRE28]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'You can list the `minikube` clusters and find the details, as shown in the
    below image:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以列出`minikube`集群并查看详细信息，如下图所示：
- en: '![](img/B22019_03_02.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B22019_03_02.png)'
- en: 'Figure 3.2: minikube profile list showing multiple Kubernetes clusters'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.2：minikube配置文件列表显示多个Kubernetes集群
- en: '[PRE29]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: We have learned how to create different types and sizes of Kubernetes clusters;
    now let’s examine another tool for setting up a local Kubernetes cluster, called
    `kind`.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学习了如何创建不同类型和大小的Kubernetes集群；现在让我们来看看另一个用于设置本地Kubernetes集群的工具，名为`kind`。
- en: Multi-node Kubernetes cluster with kind
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用kind的多节点Kubernetes集群
- en: In this section, we are going to discuss a tool called `kind`, which is also
    designed to run a Kubernetes cluster locally, just like `minikube`.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论一个名为`kind`的工具，它也被设计用于在本地运行Kubernetes集群，就像`minikube`一样。
- en: The whole idea behind `kind` is to use Docker or Podman containers as Kubernetes
    nodes thanks to the **Docker-in-Docker** (**DinD**) or **Containers-in-Container**
    model. By launching containers, which themselves contain the container engines
    and the kubelet, it is possible to make them behave as Kubernetes worker nodes.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`kind`的核心思想是使用Docker或Podman容器作为Kubernetes节点，通过**Docker-in-Docker**（**DinD**）或**容器内容器**模型。通过启动容器（容器内包含容器引擎和kubelet），可以使它们表现为Kubernetes工作节点。'
- en: 'The following diagram shows the high-level architecture of `kind` cluster components:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了`kind`集群组件的高层架构：
- en: '![](img/B22019_03_03.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B22019_03_03.png)'
- en: 'Figure 3.3: kind cluster components (image source: https://kind.sigs.k8s.io/docs/design/initial)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.3：kind集群组件（图片来源：https://kind.sigs.k8s.io/docs/design/initial）
- en: This is exactly the same as when you use the Docker driver for `minikube`, except
    that there, it will not be done in a single container but in several. The result
    is a local multi-node cluster. Similar to `minikube`, `kind` is a free open-source
    tool.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这与使用Docker驱动的`minikube`完全相同，唯一不同的是，在这里，它不会在单个容器中完成，而是在多个容器中完成。结果是一个本地多节点集群。类似于`minikube`，`kind`是一个免费的开源工具。
- en: Similar to `minikube`, `kind` is a tool that is used for local development and
    testing. Please never use it in production because it is not designed for it.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于`minikube`，`kind`是一个用于本地开发和测试的工具。请勿在生产环境中使用它，因为它并未为此设计。
- en: Installing kind onto your local system
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在本地系统上安装kind
- en: Since `kind` is a tool entirely built around Docker and Podman, you need to
    have either of these container engines installed and working on your local system.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`kind`是完全围绕Docker和Podman构建的工具，因此你需要在本地系统上安装并运行这两个容器引擎之一。
- en: Since the Docker and Podman installation instructions are available as documentation,
    we will skip those steps here (refer to the earlier section, *Setting up minikube
    using a container*, for the details).
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Docker和Podman的安装说明已经作为文档提供，我们将在这里跳过这些步骤（请参阅之前部分 *使用容器设置minikube* 以获取详细信息）。
- en: Refer to the `kind` release page for the `kind` version information and availability
    ([https://github.com/kubernetes-sigs/kind/releases](https://github.com/kubernetes-sigs/kind/releases)).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考`kind`发布页面以获取`kind`版本信息和可用性（[https://github.com/kubernetes-sigs/kind/releases](https://github.com/kubernetes-sigs/kind/releases)）。
- en: 'Again, the process of installing `kind` will depend on your operating system:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，安装`kind`的过程将取决于你的操作系统：
- en: 'Use the following commands for Linux:'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Linux，请使用以下命令：
- en: '[PRE30]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Use the following commands for macOS:'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于macOS，请使用以下命令：
- en: '[PRE31]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'You can also install it with Homebrew:'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你也可以使用Homebrew进行安装：
- en: '[PRE32]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Use the following commands for Windows PowerShell:'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Windows PowerShell，请使用以下命令：
- en: '[PRE33]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'You can also install it with Chocolatey:'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你也可以使用Chocolatey进行安装：
- en: '[PRE34]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'If you have Go language installed, then you can use the following command:'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你已安装Go语言环境，那么可以使用以下命令：
- en: '[PRE35]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Refer to the documentation (https://kind.sigs.k8s.io/docs/user/quick-start#installation)
    to learn other installation methods for your system.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考文档（https://kind.sigs.k8s.io/docs/user/quick-start#installation）了解适用于你系统的其他安装方法。
- en: Let us learn how to create a Kubernetes cluster using `kind` in the next section.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们学习如何使用`kind`创建Kubernetes集群。
- en: Creating a Kubernetes cluster with kind
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用kind创建Kubernetes集群
- en: 'Once `kind` has been installed on your system, you can immediately proceed
    to launch a new Kubernetes cluster using the following command:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`kind`安装到你的系统上，你可以立即使用以下命令启动一个新的Kubernetes集群：
- en: '[PRE36]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: When you run this command, `kind` will start to build a Kubernetes cluster locally
    by pulling a container image containing all the control plane components. The
    result will be a single-node Kubernetes cluster with a Docker container acting
    as a *control plane node*.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行此命令时，`kind`将通过拉取一个包含所有控制平面组件的容器镜像，在本地开始构建Kubernetes集群。最终结果将是一个单节点的Kubernetes集群，其中一个Docker容器充当*控制平面节点*。
- en: 'Podman can be used as the provider for the `kind` cluster if you prefer, as
    follows:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢，也可以使用Podman作为`kind`集群的提供者，方法如下：
- en: '[PRE37]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'We do not want this setup since we can already achieve it with `minikube`.
    What we want is a multi-node cluster with `kind` where we can customize the cluster
    and nodes. To do this, we must write a very small configuration file and tell
    `kind` to use it as a template to build the local Kubernetes cluster. So, let’s
    get rid of the single-node `kind` cluster that we just built, and let’s rebuild
    it as a multi-node cluster:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不想要这种设置，因为我们已经可以通过`minikube`实现它。我们想要的是一个可以定制集群和节点的`kind`多节点集群。为此，我们需要编写一个非常小的配置文件，并告诉`kind`使用它作为模板来构建本地Kubernetes集群。因此，先让我们删除刚才构建的单节点`kind`集群，并重新构建它为多节点集群：
- en: 'Run this command to delete the cluster:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行此命令删除集群：
- en: '[PRE38]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Then, we need to create a `config` file that will serve as a template for `kind`
    to build our cluster. Simply copy the following content to a local file in this
    directory, for example, `~/.kube/kind_cluster`:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要创建一个`config`文件，作为`kind`构建我们集群的模板。只需将以下内容复制到该目录下的本地文件中，例如`~/.kube/kind_cluster`：
- en: '[PRE39]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Please note that this file is in YAML format. Pay attention to the `nodes`
    array, which is the most important part of the file. This is where you tell `kind`
    how many nodes you want in your cluster. The role key can take two values: control
    plane and worker.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此文件采用 YAML 格式。请注意`nodes`数组，这是文件中最重要的部分。在这里，你可以告诉`kind`你希望集群中有多少个节点。角色键可以有两个值：控制平面和工作节点。
- en: Depending on which role you choose, a different node will be created.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你选择的角色，会创建不同的节点。
- en: 'Let’s relaunch the `kind create` command with this `config` file to build our
    multi-node cluster. For the given file, the result will be a one-master, three-worker
    Kubernetes cluster:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用这个`config`文件重新启动`kind create`命令来构建我们的多节点集群。对于给定的文件，结果将是一个包含一个主节点和三个工作节点的
    Kubernetes 集群：
- en: '[PRE40]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'It is also possible to build a specific version of Kubernetes by using the
    appropriate image details while creating the `kind` cluster, as follows:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在创建`kind`集群时使用适当的镜像信息，也可以构建特定版本的 Kubernetes，如下所示：
- en: '[PRE41]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'A new Kubernetes cluster will be deployed and configured by `kind` and you
    will receive the messages related to cluster access at the end, as follows:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 一个新的 Kubernetes 集群将由`kind`部署和配置，且你将在最后收到与集群访问相关的消息，内容如下：
- en: '[PRE42]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Following this, you should have four new Docker containers: one running as
    a master node and the other three as worker nodes of the same Kubernetes cluster.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你应该有四个新的 Docker 容器：一个作为主节点运行，另外三个作为同一 Kubernetes 集群的工作节点。
- en: 'Now, as always with Kubernetes, we need to write a `kubeconfig` file for our
    `Kubectl` utility to be able to interact with the new cluster. And guess what,
    `kind` has already generated the proper configuration and appended it to our `~/.kube/config`
    file, too. Additionally, `kind` set the current context to our new cluster, so
    there is essentially nothing left to do. We can immediately start querying our
    new cluster. Let’s list the nodes using the `kubectl get nodes` command. If everything
    is okay, we should view four nodes:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，像往常一样，我们需要为我们的`Kubectl`工具编写一个`kubeconfig`文件，以便能够与新的集群进行交互。猜猜看，`kind`已经生成了正确的配置，并将其附加到我们的`~/.kube/config`文件中。此外，`kind`还将当前上下文设置为我们的新集群，因此实际上没有什么需要做的了。我们可以立即开始查询我们的新集群。让我们使用`kubectl
    get nodes`命令列出节点。如果一切正常，我们应该看到四个节点：
- en: '[PRE43]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Everything seems to be perfect. Your `kind` cluster is working!
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 一切看起来都很完美。你的`kind`集群正在运行！
- en: 'Just as we did with `minikube`, you can also check for the component’s statuses
    using the following command:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们对`minikube`所做的那样，你也可以使用以下命令检查组件的状态：
- en: '[PRE44]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'To further debug and diagnose cluster problems, use `''kubectl cluster-info
    dump`'':'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步调试和诊断集群问题，可以使用`'kubectl cluster-info dump`'命令：
- en: '[PRE45]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: As part of the development and learning environment housekeeping, we need to
    learn how to stop and delete Kubernetes clusters created using `kind`. Let us
    learn how to do this in the next section.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发和学习环境管理的一部分，我们需要学习如何停止和删除使用`kind`创建的 Kubernetes 集群。接下来，我们将学习如何操作。
- en: Stopping and deleting the local kind cluster
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 停止并删除本地的 kind 集群
- en: 'You might want to stop or remove everything `kind` created on your local system
    to clean the place after your practice. To do so, you can use the following command:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想要停止或移除`kind`在本地系统上创建的所有内容，以便在实践后清理环境。为此，你可以使用以下命令：
- en: '[PRE46]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: This command will stop the Docker containers that `kind` is managing. You will
    achieve the same result if you run the Docker `stop` command on your containers
    manually. Doing this will stop the containers but will keep the state of the cluster.
    That means your cluster won’t be destroyed, and simply relaunching it using the
    following command will get the cluster back to its state before you stop it.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将停止`kind`正在管理的 Docker 容器。如果你手动在容器上运行 Docker `stop`命令，你将得到相同的结果。这会停止容器，但会保持集群的状态。也就是说，集群不会被销毁，只需要通过以下命令重新启动它，就可以恢复到停止前的状态。
- en: 'If you want to completely remove the cluster from your system, use the following
    command. Running this command will result in removing the cluster and its state
    from your system. You won’t be able to recover the cluster:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想完全从系统中移除集群，可以使用以下命令。运行此命令将会从你的系统中删除集群及其状态，你将无法恢复该集群：
- en: '[PRE47]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Now that your `kind` cluster is operational, it’s up to you to decide whether
    you want to use it to practice while reading the coming chapters. You can also
    decide whether to pick another solution described in the following sections of
    this chapter. `kind` is particularly nice because it’s free to use and allows
    you to install a multi-node cluster. However, it’s not designed for production
    and remains a development and testing solution for a non-production environment.
    `kind` makes use of Docker containers to create *Kubernetes nodes*, which, in
    the real world, are supposed to be Linux machines.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的 `kind` 集群已投入使用，接下来你可以决定是否在接下来的章节中一边阅读一边进行实践。你还可以选择是否使用本章接下来的部分中描述的其他解决方案。`kind`
    特别适合，因为它是免费的，并且允许你安装一个多节点集群。然而，它并非为生产环境设计，依然是一个面向开发和测试的非生产环境解决方案。`kind` 利用 Docker
    容器创建 *Kubernetes 节点*，这些节点在实际环境中应该是 Linux 机器。
- en: Let us learn about some of the alternative Kubernetes learning and testing environments
    in the next section.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们将了解一些替代的 Kubernetes 学习和测试环境。
- en: Alternative Kubernetes learning environments
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 替代的 Kubernetes 学习环境
- en: You can also utilize some of the available zero-configuration learning environments,
    designed to make your Kubernetes journey smooth and enjoyable.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以利用一些可用的零配置学习环境，这些环境旨在让你的 Kubernetes 之旅更加顺畅和愉快。
- en: Play with Kubernetes
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 玩转 Kubernetes
- en: This interactive playground (`labs.play-with-k8s.com`), brought to you by **Docker**
    and **Tutorius**, provides a simple and fun way to experiment with Kubernetes.
    Within seconds, you’ll be running your own Kubernetes cluster directly in your
    web browser.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 由 **Docker** 和 **Tutorius** 提供的这个互动沙盒（`labs.play-with-k8s.com`），为你提供了一个简单有趣的方式来实验
    Kubernetes。在几秒钟内，你就可以直接在浏览器中运行你自己的 Kubernetes 集群。
- en: 'The environment comes with the following features:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 该环境具备以下特点：
- en: 'Free Alpine Linux VM: Experience a realistic VM environment without leaving
    your browser.'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 免费的 Alpine Linux 虚拟机：体验一个真实的虚拟机环境，无需离开浏览器。
- en: 'DinD: This technology creates the illusion of multiple VMs, allowing you to
    explore distributed systems concepts.'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DinD：该技术创造了多个虚拟机的假象，让你能够探索分布式系统的概念。
- en: Killercoda Kubernetes playground
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Killercoda Kubernetes 沙盒
- en: '**Killercoda** ([https://killercoda.com/playgrounds/scenario/kubernetes](https://killercoda.com/playgrounds/scenario/kubernetes))
    is a zero-configuration playground that offers a temporary Kubernetes environment
    accessible through your web browser. Stay on top of the latest trends with their
    commitment to providing the newest kubeadm Kubernetes version just a few weeks
    after release.'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '**Killercoda** ([https://killercoda.com/playgrounds/scenario/kubernetes](https://killercoda.com/playgrounds/scenario/kubernetes))
    是一个零配置沙盒环境，提供一个可通过浏览器访问的临时 Kubernetes 环境。通过他们承诺在发布几周后提供最新的 kubeadm Kubernetes
    版本，让你时刻掌握最新趋势。'
- en: 'The environment comes with the following features:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 该环境具备以下特点：
- en: 'Ephemeral environment: Get started quickly with a preconfigured cluster that
    vanishes once you’re done. This makes it perfect for quick experimentation without
    commitment.'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 瞬态环境：使用预配置集群快速开始，集群在你完成后会消失。这使其非常适合快速实验，无需任何承诺。
- en: 'Empty kubeadm cluster with two nodes: Dive into the core functionalities of
    Kubernetes with a readily available two-node cluster.'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有两个节点的空 kubeadm 集群：通过一个现成的两节点集群，深入了解 Kubernetes 的核心功能。
- en: 'Control plane node with scheduling ability: Unlike some playgrounds, this one
    lets you schedule workloads on the control plane node, providing more flexibility
    for testing purposes.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有调度能力的控制平面节点：与一些沙盒环境不同，这个环境允许你在控制平面节点上调度工作负载，为测试提供了更多的灵活性。
- en: We will explore some of the production-grade Kubernetes options in the next
    section.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探讨一些生产级 Kubernetes 选项。
- en: Production-grade Kubernetes clusters
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生产级 Kubernetes 集群
- en: We have been talking about the Kubernetes environments for development and learning
    purposes so far. How do you build a production-grade Kubernetes environment that
    meets your specific needs? Next, we’ll see some of the well-known options adopted
    by Kubernetes users.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在讨论用于开发和学习的 Kubernetes 环境。如何构建一个满足你特定需求的生产级 Kubernetes 环境？接下来，我们将看到一些
    Kubernetes 用户采纳的知名选项。
- en: In the following section, let us understand the managed Kubernetes services
    offered by the major **Cloud Service Providers** (**CSPs**).
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将了解主要 **云服务提供商**（**CSPs**）提供的托管 Kubernetes 服务。
- en: Managed Kubernetes clusters using cloud services
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用云服务的托管 Kubernetes 集群
- en: 'If you prefer to have your Kubernetes environment using managed services, then
    there are several options available, such as GKE, AKS, EKS, and so on:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你更倾向于使用托管服务来搭建 Kubernetes 环境，那么有多个选择可以使用，如 GKE、AKS、EKS 等：
- en: '**Google Kubernetes Engine** (**GKE**): Offered by **Google Cloud Platform**
    (**GCP**), GKE is a fully managed Kubernetes service. It takes care of the entire
    cluster lifecycle, from provisioning and configuration to scaling and maintenance.
    GKE integrates seamlessly with other GCP services, making it a great choice for
    existing GCP users.'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Google Kubernetes Engine** (**GKE**)：由**Google Cloud Platform**（**GCP**）提供，GKE
    是一个完全托管的 Kubernetes 服务。它负责集群生命周期的各个环节，从配置、扩展到维护。GKE 与其他 GCP 服务无缝集成，是现有 GCP 用户的理想选择。'
- en: '**Azure Kubernetes Service** (**AKS**): Part of Microsoft Azure, AKS is another
    managed Kubernetes offering. Similar to GKE, AKS handles all aspects of cluster
    management, allowing you to focus on deploying and managing your containerized
    applications. AKS integrates well with other Azure services, making it a natural
    fit for Azure users.'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure Kubernetes Service** (**AKS**)：是 Microsoft Azure 的一部分，AKS 是另一个托管的 Kubernetes
    解决方案。与 GKE 类似，AKS 处理所有集群管理工作，让你可以专注于容器化应用的部署和管理。AKS 与其他 Azure 服务很好地集成，使其成为 Azure
    用户的自然选择。'
- en: '**Amazon Elastic Kubernetes Service** (**EKS**): Offered by **Amazon Web Services**
    (**AWS**), EKS provides a managed Kubernetes service within the AWS ecosystem.
    Like GKE and AKS, EKS takes care of cluster management, freeing you to focus on
    your applications. EKS integrates with other AWS services, making it a strong
    option for AWS users.'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Amazon Elastic Kubernetes Service** (**EKS**)：由**Amazon Web Services**（**AWS**）提供，EKS
    提供了 AWS 生态系统中的托管 Kubernetes 服务。像 GKE 和 AKS 一样，EKS 负责集群管理，让你可以专注于应用程序的开发。EKS 与其他
    AWS 服务集成，是 AWS 用户的强大选择。'
- en: These managed Kubernetes services provide a convenient and scalable way to deploy
    and manage your containerized applications without the complexities of self-managed
    Kubernetes clusters.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 这些托管 Kubernetes 服务提供了一种方便且可扩展的方式来部署和管理容器化应用程序，避免了自管理 Kubernetes 集群的复杂性。
- en: 'We have detailed chapters to learn how to deploy and manage such clusters as
    follows:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有详细的章节来学习如何部署和管理这些集群，如下所示：
- en: '*Chapter 15*, *Kubernetes Clusters on Google Kubernetes Engine*'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第 15 章*，*在 Google Kubernetes Engine 上运行 Kubernetes 集群*'
- en: '*Chapter 16*, *Launching a Kubernetes Cluster on Amazon Web Services with Amazon
    Elastic Kubernetes Service*'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第 16 章*，*在 Amazon Web Services 上使用 Amazon Elastic Kubernetes Service 启动 Kubernetes
    集群*'
- en: '*Chapter 17*, *Kubernetes Clusters on Microsoft Azure with Azure Kubernetes
    Service*'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第 17 章*，*在 Microsoft Azure 上使用 Azure Kubernetes Service 运行 Kubernetes 集群*'
- en: 'If you do not have a local Kubernetes setup, as we explained in the previous
    sections of this chapter, you can create one using the managed Kubernetes service
    on your choice of cloud platform by referring to the respective chapter. But it
    is a requirement to have a working Kubernetes cluster before you start reading
    the next part of this book, *Part 2*: *Diving into Kubernetes Core Concepts*.'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有本地 Kubernetes 环境，如我们在本章前面的部分所述，你可以通过参考相关章节，在你选择的云平台上使用托管 Kubernetes 服务创建一个。但在开始阅读本书的下一部分
    *第二部分*：*深入了解 Kubernetes 核心概念* 之前，必须拥有一个正常工作的 Kubernetes 集群。
- en: We will learn about the Kubernetes distributions and platforms in the next section.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一节学习 Kubernetes 发行版和平台。
- en: Kubernetes distributions
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubernetes 发行版
- en: 'Kubernetes distributions are essentially pre-packaged versions of Kubernetes
    that include additional features and functionalities beyond the core Kubernetes
    offering. They act like value-added packages, catering to specific needs and simplifying
    deployments for users. For a more feature-rich experience, consider these Kubernetes
    distributions:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 发行版本质上是 Kubernetes 的预打包版本，除了核心 Kubernetes 提供的功能外，还包括其他附加功能和特性。它们像增值包一样，满足特定需求并简化用户的部署过程。为了获得更丰富的体验，可以考虑以下
    Kubernetes 发行版：
- en: '**Red Hat OpenShift**: This enterprise-grade distribution extends Kubernetes
    with developer tools (image builds and CI/CD pipelines), multi-cluster management,
    security features (RBAC and SCC), and built-in scaling for complex deployments
    ([https://www.redhat.com/en/technologies/cloud-computing/openshift](https://www.redhat.com/en/technologies/cloud-computing/openshift)).'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Red Hat OpenShift**：这个企业级发行版通过开发者工具（镜像构建和 CI/CD 流水线）、多集群管理、安全特性（RBAC 和 SCC）以及内建的复杂部署扩展功能来扩展
    Kubernetes（[https://www.redhat.com/en/technologies/cloud-computing/openshift](https://www.redhat.com/en/technologies/cloud-computing/openshift)）。'
- en: '**Rancher**: A complete container management platform, Rancher goes beyond
    Kubernetes. It offers multi-cluster management across diverse environments, workload
    management for various orchestration platforms, and a marketplace for preconfigured
    applications ([https://www.rancher.com/](https://www.rancher.com/)).'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Rancher**：一个完整的容器管理平台，Rancher超越了Kubernetes。它提供跨多环境的多集群管理、各种编排平台的工作负载管理以及预配置应用程序的市场（[https://www.rancher.com/](https://www.rancher.com/)）。'
- en: '**VMware Tanzu**: Designed for the VMware ecosystem, Tanzu integrates seamlessly
    for infrastructure provisioning, security, and hybrid cloud deployments. It provides
    lifecycle management tools for containerized applications within the VMware environment
    ([https://tanzu.vmware.com/platform](https://tanzu.vmware.com/platform)).'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**VMware Tanzu**：为VMware生态系统设计，Tanzu无缝集成基础设施供应、安全性和混合云部署。它提供了针对VMware环境中容器化应用程序的生命周期管理工具（[https://tanzu.vmware.com/platform](https://tanzu.vmware.com/platform)）。'
- en: Please note, some of the above-listed Kubernetes distributions are subscription-based
    or license-based products and are not freely available.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，以上列出的某些Kubernetes发行版是基于订阅或许可证的产品，并非免费提供。
- en: Let us learn about some of the Kubernetes deployment tools in the next section.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，让我们了解一些Kubernetes部署工具。
- en: Kubernetes installation tools
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubernetes安装工具
- en: 'The following tools provide flexibility and control over the Kubernetes cluster
    setup. Of course, you need to add more automation using other third-party tools
    and platforms to manage your Kubernetes environment:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 以下工具提供了对Kubernetes集群设置的灵活性和控制。当然，你还需要使用其他第三方工具和平台添加更多的自动化，以管理你的Kubernetes环境：
- en: '**kubeadm**: This official Kubernetes tool provides a user-friendly way to
    set up Kubernetes clusters, making it suitable for both testing and production
    environments. Its simplicity allows for quick cluster deployment but may require
    additional configuration for production-grade features like high availability
    ([https://kubernetes.io/docs/reference/setup-tools/kubeadm/](https://kubernetes.io/docs/reference/setup-tools/kubeadm/)).'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**kubeadm**：这是Kubernetes官方工具，提供了一种用户友好的方式来设置Kubernetes集群，适用于测试和生产环境。它的简便性使得集群可以快速部署，但可能需要额外的配置来实现生产级别的功能，如高可用性（[https://kubernetes.io/docs/reference/setup-tools/kubeadm/](https://kubernetes.io/docs/reference/setup-tools/kubeadm/)）。'
- en: '**kops**: For managing robust Kubernetes clusters in production, kops is an
    official Kubernetes project offering command-line control. It streamlines the
    creation, upgrading, and maintenance of highly available clusters, ensuring the
    reliable operation of your containerized applications ([https://kops.sigs.k8s.io/](https://kops.sigs.k8s.io/)).'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**kops**：为了管理生产中的强大Kubernetes集群，kops是Kubernetes的一个官方项目，提供命令行控制。它简化了高可用集群的创建、升级和维护，确保容器化应用程序的可靠运行（[https://kops.sigs.k8s.io/](https://kops.sigs.k8s.io/)）。'
- en: '**Kubespray**: Looking to deploy Kubernetes on bare metal or VMs? Kubespray
    leverages the power of Ansible automation. It combines Ansible playbooks with
    Kubernetes resources, allowing for automated cluster deployment on your preferred
    infrastructure ([https://github.com/kubespray](https://github.com/kubespray)).'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kubespray**：想要在裸金属或虚拟机上部署Kubernetes？Kubespray利用Ansible自动化的力量。它将Ansible剧本与Kubernetes资源相结合，允许在你首选的基础设施上自动化集群部署（[https://github.com/kubespray](https://github.com/kubespray)）。'
- en: '**Terraform**: This tool allows you to define and manage your Kubernetes cluster
    infrastructure across various cloud providers. The code-driven approach ensures
    consistency and repeatability when deploying clusters in different environments
    ([https://www.terraform.io/](https://www.terraform.io/)).'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Terraform**：该工具允许你在不同的云提供商上定义和管理Kubernetes集群基础设施。基于代码的方法确保了在不同环境中部署集群时的一致性和可重复性（[https://www.terraform.io/](https://www.terraform.io/)）。'
- en: '**Pulumi**: Similar to Terraform, Pulumi provides infrastructure-as-code capabilities.
    It allows you to define and manage your Kubernetes cluster infrastructure using
    programming languages like Python or Go. This approach offers greater flexibility
    and customization compared to purely declarative configuration languages ([https://www.pulumi.com/](https://www.pulumi.com/)).'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Pulumi**：类似于Terraform，Pulumi提供基础设施即代码功能。它允许你使用Python或Go等编程语言定义和管理Kubernetes集群基础设施。与纯声明性配置语言相比，这种方法提供了更大的灵活性和定制化（[https://www.pulumi.com/](https://www.pulumi.com/)）。'
- en: If the Kubernetes landscape is very large with several Kubernetes clusters,
    then you need to consider hybrid-multi-cluster management solutions; let us learn
    about those in the next section.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Kubernetes 的景观非常广阔，有多个 Kubernetes 集群，那么您需要考虑混合多集群管理解决方案；让我们在下一节中了解这些内容。
- en: Hybrid and multi-cloud solutions
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 混合和多云解决方案
- en: 'Managing Kubernetes clusters across diverse environments requires powerful
    tools, and there are a few offering such multi-cluster management features:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 跨不同环境管理 Kubernetes 集群需要强大的工具，有一些工具提供了这样的多集群管理功能：
- en: '**Anthos** (Google): This hybrid and multi-cloud platform facilitates managing
    Kubernetes clusters across diverse environments. Anthos allows organizations to
    leverage a consistent approach for deploying and managing containerized applications
    on-premises, in the cloud, or at the edge ([https://cloud.google.com/anthos](https://cloud.google.com/anthos)).'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Anthos**（Google）：这个混合和多云平台便于在不同环境中管理 Kubernetes 集群。Anthos 允许组织在本地、云端或边缘上采用一致的方法来部署和管理容器化应用程序（[https://cloud.google.com/anthos](https://cloud.google.com/anthos)）。'
- en: '**Red Hat Advanced Cluster Management (RHACM) for Kubernetes**: Red Hat also
    offers a solution for managing Kubernetes clusters across hybrid and multi-cloud
    environments. Their Advanced Cluster Management platform provides a centralized
    control plane for consistent deployment, management, and governance of your containerized
    workloads ([https://www.redhat.com/en/technologies/management/advanced-cluster-management](https://www.redhat.com/en/technologies/management/advanced-cluster-management)).'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Red Hat 高级集群管理（RHACM）for Kubernetes**：Red Hat 也提供了一种解决方案，用于管理混合和多云环境中的 Kubernetes
    集群。他们的高级集群管理平台为您的容器化工作负载提供了一致的部署、管理和治理的集中控制平面（[https://www.redhat.com/en/technologies/management/advanced-cluster-management](https://www.redhat.com/en/technologies/management/advanced-cluster-management)）。'
- en: '**VMware Tanzu Mission Control**: This centralized management tool simplifies
    the process of overseeing Kubernetes clusters across various environments. From
    a single console, you can provision, monitor, and manage clusters regardless of
    their location, be that on-premises, cloud, or hybrid ([https://docs.vmware.com/en/VMware-Tanzu-Mission-Control/index.html](https://docs.vmware.com/en/VMware-Tanzu-Mission-Control/index.html)).'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**VMware Tanzu Mission Control**：这个集中管理工具简化了跨多个环境管理 Kubernetes 集群的过程。从单个控制台，您可以无论在本地、云端还是混合环境，进行集群的配置、监控和管理（[https://docs.vmware.com/en/VMware-Tanzu-Mission-Control/index.html](https://docs.vmware.com/en/VMware-Tanzu-Mission-Control/index.html)）。'
- en: How do you choose your Kubernetes platform and management solutions? Let’s explore
    some of the key points in the next section.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 如何选择您的 Kubernetes 平台和管理解决方案？让我们在下一节中探讨一些关键点。
- en: Choosing the right environment
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择正确的环境
- en: 'The best production-grade Kubernetes environment depends on several factors:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳的生产级 Kubernetes 环境取决于几个因素：
- en: '**Level of control**: Do you need complete control over the cluster configuration,
    or are you comfortable with preconfigured managed services?'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制级别**：您是否需要完全控制集群配置，还是对预配置的托管服务感到满意？'
- en: '**Existing infrastructure**: Consider your existing infrastructure (cloud provider,
    bare metal) when choosing a deployment method.'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**现有基础设施**：在选择部署方法时，请考虑您的现有基础设施（云提供商、裸金属）。'
- en: '**Scalability needs**: How easily do you need to scale your cluster up or down
    to meet changing demands?'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性需求**：您需要多快地扩展或缩减集群以满足变化的需求？'
- en: '**Team expertise**: Evaluate your team’s experience with Kubernetes and cloud
    infrastructure to determine which solution best suits their skills.'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**团队专业知识**：评估您的团队在 Kubernetes 和云基础设施方面的经验，以确定哪种解决方案最适合他们的技能。'
- en: By carefully considering these factors and exploring the various options available,
    you can build a production-grade Kubernetes environment that delivers optimal
    performance and scalability for your containerized applications.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 通过仔细考虑这些因素并探索各种可用的选项，您可以构建一个适合您容器化应用程序的生产级 Kubernetes 环境，以实现最佳性能和可扩展性。
- en: In the next section we will discuss some of the cluster maintenance tasks.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将讨论一些集群维护任务。
- en: 'Running Kubernetes On-Premises: Challenges and Considerations'
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在本地运行 Kubernetes：挑战与考虑因素
- en: Running Kubernetes in an on-premises environment provides more control over
    infrastructure but also demands careful management. Compared to cloud-managed
    solutions, maintaining an on-premises Kubernetes cluster requires handling all
    aspects, from provisioning to upgrades, manually. Below, we explore key considerations
    and challenges that arise when managing Kubernetes on-premises.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地环境中运行Kubernetes提供了对基础设施的更多控制，但也需要仔细的管理。与云托管解决方案相比，维护本地Kubernetes集群需要手动处理从供应到升级的所有方面。下面，我们将探讨在管理本地Kubernetes时遇到的关键考虑事项和挑战。
- en: '**Infrastructure Provisioning**: Setting up infrastructure for Kubernetes on-premises
    means automating the provisioning of nodes. Tools like Rancher’s cloud controllers
    or Terraform help streamline this process by ensuring consistency. Packer can
    also be used to create VM images, enabling smoother upgrades by deploying updated
    images across nodes.'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基础设施供应**：在本地设置Kubernetes的基础设施意味着自动化节点的供应。像Rancher的云控制器或Terraform这样的工具可以帮助简化这一过程，确保一致性。Packer也可以用于创建虚拟机镜像，通过在节点之间部署更新的镜像，从而实现更顺畅的升级。'
- en: '**Cluster Setup and Maintenance**: Deploying a Kubernetes cluster on-premises
    involves using tools such as `kubeadm`. This process is often more involved than
    in cloud-managed environments. Cluster maintenance tasks include renewing certificates,
    managing nodes, and handling high availability setups, which add further complexity.'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集群设置与维护**：在本地部署Kubernetes集群需要使用`kubeadm`等工具。与云托管环境相比，这一过程通常更加复杂。集群维护任务包括更新证书、管理节点和处理高可用性设置，这些都增加了进一步的复杂性。'
- en: '**Load Balancing and Access**: Providing external access to applications in
    on-premises environments can be challenging. Standard Kubernetes options like
    **NodePort** and **LoadBalancer** services may not be enough. **MetalLB** can
    offer a load balancing solution for bare-metal setups but comes with limitations,
    such as not being able to load balance the API server in high availability environments.'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**负载均衡与访问**：在本地环境中为应用程序提供外部访问可能具有挑战性。像**NodePort**和**LoadBalancer**服务这样的标准Kubernetes选项可能不足以满足需求。**MetalLB**可以为裸金属环境提供负载均衡解决方案，但也有一些限制，例如无法在高可用性环境中负载均衡API服务器。'
- en: '**Persistent Storage**: Persistent storage is critical for running production
    workloads. Kubernetes relies on **PersistentVolumeClaims** (**PVCs**) and **PersistentVolumes**
    (**PVs**), which require integration with physical storage systems. Tools like
    Longhorn allow dynamic provisioning of volumes and replication across nodes, providing
    flexibility in on-prem setups.'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持久存储**：持久存储对于运行生产工作负载至关重要。Kubernetes依赖于**PersistentVolumeClaims**（**PVCs**）和**PersistentVolumes**（**PVs**），它们需要与物理存储系统进行集成。像Longhorn这样的工具可以实现卷的动态供应和跨节点的复制，从而提供本地环境中的灵活性。'
- en: '**Upgrades and Scalability**: Kubernetes releases frequent updates, which means
    managing upgrades on-premises can be tricky. It’s essential to test new versions
    before rolling them out to production. Tools like Packer and Terraform can assist
    in scaling by simplifying node additions and upgrades.'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**升级与扩展性**：Kubernetes发布频繁的更新，这意味着在本地环境中管理升级可能会变得棘手。必须在将新版本推向生产环境之前进行测试。像Packer和Terraform这样的工具可以通过简化节点的添加和升级来帮助扩展。'
- en: '**Networking**: On-premises Kubernetes networking depends on your data center
    configuration. Manual management of DNS, load balancers, and network settings
    is necessary. Monitoring tools such as Prometheus, alongside solutions like MetalLB
    for load balancing, can help, though they require integration and constant monitoring.'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络**：本地Kubernetes网络依赖于数据中心的配置。需要手动管理DNS、负载均衡器和网络设置。像Prometheus这样的监控工具，以及像MetalLB这样的负载均衡解决方案可以提供帮助，尽管它们需要集成和持续的监控。'
- en: '**Monitoring and Management**: Monitoring on-premises clusters is essential
    for ensuring the system’s health. Tools like Prometheus and Grafana can be used
    to monitor resource usage. Additionally, logging and alerting systems should be
    set up to detect and resolve issues swiftly, helping to minimize downtime.'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控与管理**：监控本地集群对于确保系统健康至关重要。可以使用像Prometheus和Grafana这样的工具来监控资源使用情况。此外，应该设置日志记录和告警系统，以便快速发现和解决问题，帮助减少停机时间。'
- en: '**Tooling and Automation**: Automating tasks such as node management and upgrades
    are vital in on-premises clusters. Enterprise Kubernetes platforms like Rancher
    or OpenShift help reduce manual intervention, providing a more streamlined and
    manageable Kubernetes environment.'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工具与自动化**：自动化任务，如节点管理和升级，对于本地集群至关重要。像Rancher或OpenShift这样的企业Kubernetes平台有助于减少人工干预，提供更简化且易于管理的Kubernetes环境。'
- en: '**Security and Compliance**: Security is crucial in enterprise Kubernetes setups.
    Including **FIPS** (**Federal Information Processing Standards**) support from
    the beginning can help meet compliance needs and maintain a secure environment
    as the system evolves.'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全与合规性**：安全性在企业Kubernetes部署中至关重要。从一开始就包括**FIPS**（**联邦信息处理标准**）支持，有助于满足合规性需求，并在系统发展过程中保持安全的环境。'
- en: In summary, managing Kubernetes on-premises provides more flexibility but demands
    careful attention to infrastructure, networking, and storage setups. With the
    right tools and strategies, organizations can effectively scale and maintain a
    robust Kubernetes environment on their own infrastructure.
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总结来说，管理本地Kubernetes提供了更多灵活性，但需要仔细关注基础设施、网络和存储配置。借助合适的工具和策略，组织可以在自己的基础设施上有效地扩展和维护强大的Kubernetes环境。
- en: Summary
  id: totrans-285
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter was quite intense! You require a Kubernetes cluster to follow this
    book, and so we examined five ways in which to set up Kubernetes clusters on different
    platforms. You learned about `minikube`, which is the most common way to set up
    a cluster on a local machine. You also discovered `kind`, which is a tool that
    can set up multi-node local clusters, which is a limitation of `minikube`.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章内容非常密集！要跟随本书，您需要一个Kubernetes集群，因此我们探讨了五种在不同平台上设置Kubernetes集群的方法。您了解了`minikube`，它是设置本地集群最常用的方法。您还发现了`kind`，这是一种可以设置多节点本地集群的工具，这是`minikube`的一个限制。
- en: We learned about some of the Kubernetes learning environments and also explored
    the production-grade Kubernetes environments including three major Kubernetes
    cloud services, GKE, Amazon EKS, and AKS. These three services allow you to create
    a Kubernetes cluster on the cloud for you to practice and train with. This was
    just a quick introduction to these services, and we will have the opportunity
    to dive deeper into these services later. For the moment, simply pick the solution
    that is the best for you.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 我们了解了一些Kubernetes的学习环境，并探索了包括三个主要Kubernetes云服务（GKE、Amazon EKS和AKS）在内的生产级Kubernetes环境。这三个服务允许您在云端创建Kubernetes集群，供您进行实践和训练。这只是对这些服务的简要介绍，我们以后会有机会更深入地了解它们。目前，您只需要选择最适合您的解决方案。
- en: In the next chapter, we are going to dive into Kubernetes by exploring the concept
    of Pods. The Pod resource is the most important resource that Kubernetes manages.
    We will learn how to create, update, and delete Pods. Additionally, we will look
    at how to provision them, how to get information from them, and how to update
    the containers they are running.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将深入探讨Kubernetes，首先了解Pods的概念。Pod资源是Kubernetes管理的最重要资源。我们将学习如何创建、更新和删除Pods。此外，我们还将了解如何配置它们，如何从中获取信息，以及如何更新它们运行的容器。
- en: We will deploy an NGINX Pod on a Kubernetes cluster and examine how we can access
    it from the outside. By the end of the next chapter, you will be capable of launching
    your first containers on your Kubernetes cluster through the usage of Pods. The
    cluster that you installed here will be very useful when you follow the real-world
    examples that are coming in the next chapter.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在Kubernetes集群上部署一个NGINX Pod，并查看如何从外部访问它。在下一章结束时，您将能够通过Pods在Kubernetes集群上启动您的第一个容器。您在此安装的集群将在您跟随下一章的实际示例时非常有用。
- en: Further reading
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Installing `minikube`: [https://minikube.sigs.k8s.io/docs/start/](https://minikube.sigs.k8s.io/docs/start/)'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装`minikube`：[https://minikube.sigs.k8s.io/docs/start/](https://minikube.sigs.k8s.io/docs/start/)
- en: '`minikube` drivers: [https://minikube.sigs.k8s.io/docs/drivers/](https://minikube.sigs.k8s.io/docs/drivers/
    )'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`minikube`驱动程序：[https://minikube.sigs.k8s.io/docs/drivers/](https://minikube.sigs.k8s.io/docs/drivers/)'
- en: 'Installing Docker: [https://docs.docker.com/engine/install/](https://docs.docker.com/engine/install/
    )'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Docker：[https://docs.docker.com/engine/install/](https://docs.docker.com/engine/install/)
- en: 'Installing Podman: [https://podman.io/docs/installation](https://podman.io/docs/installation)'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Podman：[https://podman.io/docs/installation](https://podman.io/docs/installation)
- en: 'Multi-node Kubernetes using `minikube`: [https://minikube.sigs.k8s.io/docs/tutorials/multi_node/](https://minikube.sigs.k8s.io/docs/tutorials/multi_node/
    )'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `minikube` 的多节点 Kubernetes： [https://minikube.sigs.k8s.io/docs/tutorials/multi_node/](https://minikube.sigs.k8s.io/docs/tutorials/multi_node/
    )
- en: 'Installing `kind`: [https://kind.sigs.k8s.io/docs/user/quick-start#installation](https://kind.sigs.k8s.io/docs/user/quick-start#installation
    )'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 `kind`： [https://kind.sigs.k8s.io/docs/user/quick-start#installation](https://kind.sigs.k8s.io/docs/user/quick-start#installation
    )
- en: Join our community on Discord
  id: totrans-297
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的 Discord 社区
- en: 'Join our community’s Discord space for discussions with the authors and other
    readers:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们社区的 Discord 空间，与作者和其他读者进行讨论：
- en: '[https://packt.link/cloudanddevops](https://packt.link/cloudanddevops)'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/cloudanddevops](https://packt.link/cloudanddevops)'
- en: '![](img/QR_Code119001106479081656.png)'
  id: totrans-300
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code119001106479081656.png)'

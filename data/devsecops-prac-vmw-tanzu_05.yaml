- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Defining and Managing Business APIs
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义和管理业务 API
- en: '**Application programming interfaces** (**APIs**) are as old as digital computing
    itself but more relevant than ever as we continue to interconnect every aspect
    of modern life. They make up the backbone of most enterprise applications and
    help run the modern world. It is this very proliferation of APIs that makes them
    a big source of waste, redundancy, and bad practice in enterprises.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**应用程序编程接口**（**API**）与数字计算的发展一样悠久，但随着我们不断将现代生活的各个方面互联，它们比以往任何时候都更为重要。它们构成了大多数企业应用程序的骨干，并帮助推动现代世界的发展。正是这种
    API 的迅猛增长，使得它们成为企业中浪费、冗余和不良实践的主要来源。'
- en: 'This chapter introduces two products aimed squarely at this problem space:
    **Spring Cloud Gateway for Kubernetes** and **API Portal for VMware Tanzu**. As
    is the case with every product in the Tanzu portfolio, these products address
    a specific acute business need: in this case, developing, operating, publishing,
    securing, monitoring, documenting, searching for, and consuming APIs.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了两款专注于解决这一问题领域的产品：**Spring Cloud Gateway for Kubernetes** 和 **API 门户 for
    VMware Tanzu**。和 Tanzu 组合中的每个产品一样，这些产品解决了一个具体的迫切业务需求：即开发、运维、发布、保护、监控、文档化、搜索和消费
    API。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Spring Cloud Gateway for Kubernetes and API Portal for VMware Tanzu – overview
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Cloud Gateway for Kubernetes 和 VMware Tanzu 的 API 门户 – 概述
- en: Why Spring Cloud Gateway for Kubernetes?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么选择 Spring Cloud Gateway for Kubernetes？
- en: Why API Portal for VMware Tanzu?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么选择 VMware Tanzu 的 API 门户？
- en: Spring Cloud Gateway for Kubernetes – getting started
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Cloud Gateway for Kubernetes – 入门指南
- en: API Portal for VMware Tanzu – getting started
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VMware Tanzu 的 API 门户 – 入门指南
- en: Spring Cloud Gateway for Kubernetes and API Portal for VMware Tanzu – real-world
    use case
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Cloud Gateway for Kubernetes 和 VMware Tanzu 的 API 门户 – 真实世界的应用案例
- en: Spring Cloud Gateway for Kubernetes and API Portal for VMware Tanzu – day-2
    operations
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Cloud Gateway for Kubernetes 和 VMware Tanzu 的 API 门户 – 第二天操作
- en: Spring Cloud Gateway for Kubernetes and API Portal for VMware Tanzu – overview
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Cloud Gateway for Kubernetes 和 VMware Tanzu 的 API 门户 – 概述
- en: Before jumping into the product installation, let’s revisit why we’re here.
    I like to think of the API space in terms of three personas. There’s the **API
    Developer**, the **API Consumer**, and the **API Operator**. Each has its own
    set of problems.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始产品安装之前，让我们重新审视一下我们为何要做这个。 我喜欢用三种角色来看待 API 空间。分别是 **API 开发者**、**API 消费者**
    和 **API 运维人员**。每个角色都有自己的一套问题。
- en: 'If I develop APIs, there are some recurring problems that I must solve with
    every single project:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我开发 API，每个项目中都有一些反复出现的问题，我必须解决：
- en: Exposing my API to my customers
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将我的 API 提供给客户
- en: Terminating *TLS*
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 终止 *TLS*
- en: Handling *CORS* and browser restrictions
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理 *CORS* 和浏览器限制
- en: Making my API discoverable
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使我的 API 可发现
- en: Securing my API endpoints so that only certain groups can execute certain functions
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保护我的 API 端点，确保只有特定的群体才能执行某些功能
- en: Protecting against misuse by rate-limiting requests
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过速率限制请求来防止滥用
- en: Rewriting request paths
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重写请求路径
- en: Rewriting request and response headers
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重写请求和响应头
- en: API terminology
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: API 术语
- en: '**Transport Layer Security** (**TLS**) is the cryptographic technology behind
    the reassuring lock next to your bank’s website’s URL in your web browser. It
    is especially important in the realm of APIs as most of the sensitive financial
    data, personal messages, and sensitive health information are delivered via an
    API. It’s especially difficult to implement correctly, and something best handled
    centrally by an API gateway rather than having each API developer implement it
    themselves.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**传输层安全性**（**TLS**）是您在银行网站 URL 旁边看到的那个安慰性锁的加密技术。它在 API 领域尤为重要，因为大多数敏感的财务数据、个人消息和健康信息都是通过
    API 传输的。它尤其难以正确实现，最好通过 API 网关集中处理，而不是让每个 API 开发者自己实现。'
- en: '**Cross-Origin Resource Sharing** (**CORS**) is an especially important topic
    for engineers in the API space. CORS is the mechanism by which your browser allows
    one website to make calls in the background (often called AJAX calls) to another
    website. There are legitimate reasons to do this, but this technique is often
    used by bad actors to try to steal credentials or sensitive information. Configuring
    a website and its supporting APIs such that only trusted AJAX calls are allowed
    is complex and easy to get wrong. This is one more reason why it’s best to centralize
    this logic in an API gateway.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**跨域资源共享**（**CORS**）是 API 领域工程师特别重要的一个话题。CORS 是一种机制，它允许浏览器在后台（通常称为 AJAX 调用）让一个网站向另一个网站发起请求。这样做有正当理由，但这一技术常常被不法分子利用，试图窃取凭证或敏感信息。配置网站及其支持的
    API，使得只有受信任的 AJAX 调用被允许，是复杂的，并且容易出错。这也是为什么最好将这一逻辑集中在 API 网关中的原因之一。'
- en: 'Now, let’s say that I need to consume APIs. I have an entirely different set
    of problems:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设我需要使用 API，我将面临一组完全不同的问题：
- en: Does the API I need exist?
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我需要的 API 是否存在？
- en: Where can I find the APIs I need?
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我在哪里可以找到我需要的 API？
- en: How do I access those APIs once I’ve found them?
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦我找到这些 API，如何访问它们？
- en: Do those APIs require authentication? If so, what scopes?
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些 API 是否需要认证？如果需要，是什么权限范围？
- en: How do I test out an API before writing a bunch of code to consume it?
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在编写大量代码来消费 API 之前，如何测试这些 API？
- en: 'Finally, if I’m a platform operator hosting APIs, I may need to do the following:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果我是一个托管 API 的平台运营者，我可能需要做以下事情：
- en: Provide developers self-service access to an API gateway that they can configure
    themselves
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供开发者自助访问 API 网关的能力，让他们可以自行配置
- en: Monitor and alert on metrics around the APIs
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控并对 API 的相关指标进行告警
- en: Provide an API gateway with extremely high throughput so as not to become a
    bottleneck
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供一个具有极高吞吐量的 API 网关，以避免成为瓶颈
- en: 'Provide a uniform implementation of common features such as the following:'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供统一的实现，涵盖以下常见功能：
- en: '**SSO** (**Single Sign-On**)'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SSO**（**单点登录**）'
- en: Rate limiting
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限流
- en: Header manipulation
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 头部操作
- en: Header/content enrichment
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 头部/内容丰富化
- en: Where necessary, let developers build custom filters and plug them into an API
    gateway
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在必要时，让开发者构建自定义过滤器并将其插入到 API 网关中
- en: Manage the life cycle and upgrades of developers’ API gateways
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理开发者的 API 网关生命周期和升级
- en: Where possible, auto-generate API documentation based on what is deployed to
    the gateway
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在可能的情况下，根据部署到网关的内容自动生成 API 文档
- en: Provide a single searchable location where developers can discover and try out
    all the APIs I manage
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供一个单一可搜索的位置，开发者可以在这里发现并试用我所管理的所有 API
- en: '**Spring Cloud Gateway for Kubernetes** and **API Portal for VMware Tanzu**
    exist specifically to provide a simple, straightforward, enterprise-wide solution
    for all three personas’ concerns.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**Kubernetes 的 Spring Cloud Gateway** 和 **VMware Tanzu 的 API 门户** 主要是为所有三类用户的需求提供简单、直接、面向企业的解决方案。'
- en: Now that we have a high-level overview of the topics being covered, let’s break
    it down into the “whys” of both products. We’ll start with *Spring Cloud Gateway*
    *for Kubernetes*.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对所涵盖的话题有了一个高层次的概览，让我们将其细分为两个产品的“为什么”。我们从 *Kubernetes 上的 Spring Cloud Gateway*
    开始。
- en: Why Spring Cloud Gateway for Kubernetes?
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择 Kubernetes 上的 Spring Cloud Gateway？
- en: '**Spring Cloud Gateway for Kubernetes** is based on the open source *Spring
    Cloud Gateway* project: [https://spring.io/projects/spring-cloud-gateway](https://spring.io/projects/spring-cloud-gateway).
    Spring Cloud Gateway is a library for building high-performance APIs. You deploy
    it like a normal Spring app and configure it like you would configure a Spring
    app. Unfortunately, the open source project doesn’t do much to address many of
    the problems mentioned previously – problems commonly encountered in the enterprise.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**Kubernetes 的 Spring Cloud Gateway** 基于开源的 *Spring Cloud Gateway* 项目：[https://spring.io/projects/spring-cloud-gateway](https://spring.io/projects/spring-cloud-gateway)。Spring
    Cloud Gateway 是一个用于构建高性能 API 的库。你像正常的 Spring 应用一样部署它，并按照配置 Spring 应用的方式进行配置。不幸的是，开源项目并没有解决许多先前提到的问题——这些问题通常在企业中会遇到。'
- en: In addition to their business logic, developers must also package, configure,
    and deploy a Spring Cloud Gateway app, or bundle it into their existing app as
    a library. Either way, it’s a significant amount of added complexity. Unless they’re
    using some advanced features of the Spring Framework, any changes to their API’s
    routes will involve rebuilding and redeploying the app.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 除了业务逻辑，开发人员还必须打包、配置并部署一个 Spring Cloud Gateway 应用，或者将其作为库捆绑到现有应用中。无论哪种方式，都会增加相当大的复杂性。除非他们使用
    Spring 框架的一些高级功能，否则任何对 API 路由的更改都将涉及重建和重新部署应用。
- en: Furthermore, the open source Spring Cloud Gateway leaves some of the operator’s
    problems unsolved. If every development team is doing its custom deployment of
    Spring Cloud Gateway, the operator can’t reason about how each gateway’s routes
    will be exposed, or how it will emit metrics. In addition, there’s no easy way
    for multiple teams to share a gateway as they all need to configure and deploy
    it on their schedule.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，开源的 Spring Cloud Gateway 仍然没有解决操作员的一些问题。如果每个开发团队都在做自定义部署 Spring Cloud Gateway，操作员就无法推理每个网关的路由如何暴露，或者它如何发出度量指标。此外，多个团队共享一个网关也没有简单的方法，因为它们都需要在各自的时间表上配置和部署它。
- en: 'This is where Spring Cloud Gateway for Kubernetes enters the picture. Spring
    Cloud Gateway for Kubernetes is a commercial Tanzu product with a superset of
    the open source’s features. It is geared specifically toward the enterprise and
    managing software at scale. It uses a Kubernetes Operator to manage three main
    objects:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 Spring Cloud Gateway for Kubernetes 进入的地方。Spring Cloud Gateway for Kubernetes
    是一个商业化的 Tanzu 产品，包含了开源版本的超集功能。它专门面向企业，旨在大规模管理软件。它使用 Kubernetes Operator 来管理三个主要对象：
- en: Instances of Spring Cloud Gateway
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Cloud Gateway 的实例
- en: API routes – instructions to the gateway on how to filter incoming requests
    and where to send them on to
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API 路由——告诉网关如何过滤传入请求并将其发送到哪里
- en: Mappings of API routes to Spring Cloud Gateway
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API 路由到 Spring Cloud Gateway 的映射
- en: 'By exposing these three entities as Kubernetes **Custom Resources**, Spring
    Cloud Gateway for Kubernetes can abstract away the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将这三个实体暴露为 Kubernetes **自定义资源**，Spring Cloud Gateway for Kubernetes 可以抽象出以下内容：
- en: Packaging and deploying Spring Cloud Gateway instances
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打包和部署 Spring Cloud Gateway 实例
- en: Managing the Spring code to configure those instances
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理 Spring 代码以配置这些实例
- en: Dynamically updating that configuration without redeploying them
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在不重新部署的情况下动态更新该配置
- en: Life cycle-managing all the gateway instances across all Kubernetes clusters
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生命周期管理——跨所有 Kubernetes 集群管理所有网关实例
- en: 'Reasoning about the gateway instances in bulk:'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 批量推理网关实例：
- en: They all emit metrics the same way, so I can easily aggregate all their metrics
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们以相同的方式发出度量指标，因此我可以轻松地聚合它们的所有度量数据
- en: They all expose their API configuration the same way, so I can aggregate that
    config and report on it or, as we will see shortly, use it to drive other useful
    tools such as API Portal for VMware Tanzu
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们以相同的方式暴露其 API 配置，因此我可以聚合该配置并对其进行报告，或者正如我们稍后将看到的，利用它来驱动其他有用的工具，比如 VMware Tanzu
    的 API Portal
- en: 'To summarize then, Spring Cloud Gateway for Kubernetes uses a Kubernetes Operator
    and some very strategic **Custom Resource Definitions** to make the already formidable
    open source Spring Cloud Gateway a first-class Kubernetes citizen and a truly
    enterprise-grade product focused on enterprise-grade problems. This is summed
    up in the following diagram:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，Spring Cloud Gateway for Kubernetes 使用 Kubernetes Operator 和一些非常战略性的**自定义资源定义**，使得已经非常强大的开源
    Spring Cloud Gateway 成为一个一流的 Kubernetes 产品，并真正关注企业级问题，成为一个企业级的产品。这可以通过以下图示来总结：
- en: '![Figure 5.1 – Spring Cloud Gateway for Kubernetes at a glance](img/B18145_05_01.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.1 – Kubernetes 上的 Spring Cloud Gateway 一览](img/B18145_05_01.jpg)'
- en: Figure 5.1 – Spring Cloud Gateway for Kubernetes at a glance
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.1 – Kubernetes 上的 Spring Cloud Gateway 一览
- en: Now that we’ve covered how to deploy APIs, let’s move on to how best to consume
    them. Let’s have a look at **API Portal for** **VMware Tanzu**.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经讨论了如何部署 API，现在让我们来看看如何最佳地使用它们。我们来看看**VMware Tanzu 的 API Portal**。
- en: Why API Portal for VMware Tanzu?
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择 VMware Tanzu 的 API Portal？
- en: Just as **Spring Cloud Gateway for Kubernetes** is a self-service tool allowing
    developers and operators to uniformly deploy, manage, and secure their APIs, **API
    Portal for VMware Tanzu** is a self-service tool that allows developers and consumers
    to publish, document, search for, discover, and try out those APIs.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 就像 **Spring Cloud Gateway for Kubernetes** 是一个自助工具，允许开发者和运维人员统一部署、管理和保护他们的 API，**API
    Portal for VMware Tanzu** 也是一个自助工具，允许开发者和消费者发布、记录、搜索、发现并尝试这些 API。
- en: Just as Spring Cloud Gateway for Kubernetes makes it easy to deploy multiple
    gateways for multiple use cases or environments, API Portal for Vmware Tanzu makes
    it easy to deploy multiple searchable catalogs across those very same use cases
    or environments.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 就像 **Spring Cloud Gateway for Kubernetes** 使得部署多个网关以支持多个用例或环境变得简单一样，**API Portal
    for VMware Tanzu** 使得在这些相同的用例或环境中部署多个可搜索的目录变得容易。
- en: This distributed, Kubernetes-native approach to API catalogs can scale across
    multiple large teams and enables self-service, which, in turn, gives you greater
    developer productivity and satisfaction.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这种面向 API 目录的分布式 Kubernetes 原生方法可以跨多个大型团队进行扩展，并支持自助服务，从而提高开发者的生产力和满意度。
- en: Furthermore, it’s a simple, straightforward operation to integrate API portals
    with enterprise SSO so that the right people can find the right APIs for their
    needs.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，将 API 门户与企业 SSO 集成是一个简单直接的操作，这样合适的人就可以找到适合他们需求的 API。
- en: Now that we know *why* we’re learning about these products, let’s get started
    with installing them and trying them out. Let’s go over some technical requirements;
    then, we can start with **Spring Cloud Gateway** **for Kubernetes**.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们知道了*为什么*要学习这些产品，现在就让我们开始安装并尝试它们吧。我们先来了解一些技术要求，然后就可以开始使用**Spring Cloud Gateway**
    **for Kubernetes**了。
- en: Technical requirements
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: '**API Portal for VMware Tanzu** is a subcomponent of another product covered
    in this book, **Tanzu Application Platform (TAP)**. To get started with API Portal
    for VMware Tanzu, we’ll first need to install a Kubernetes cluster and then install
    TAP on that cluster. You’re free to use whichever Kubernetes distribution you
    prefer. If you’d like some guidance around standing up a cluster, you can go to
    the appendix at the end of the book where we describe several options for getting
    Kubernetes up and running.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**API Portal for VMware Tanzu** 是本书中另一个产品的子组件，**Tanzu 应用平台 (TAP)**。要开始使用 VMware
    Tanzu 的 API Portal，首先需要安装一个 Kubernetes 集群，然后在该集群上安装 TAP。你可以自由选择任何你喜欢的 Kubernetes
    发行版。如果你需要有关如何搭建集群的指导，可以参考本书末尾的附录，其中介绍了几种搭建 Kubernetes 集群的选项。'
- en: Once you have a running Kubernetes cluster, you’ll need to jump briefly to [*Chapter
    8*](B18145_08.xhtml#_idTextAnchor150), *Enhancing Developer Productivity with
    Tanzu Application Platform*, and install *Tanzu Application Platform*. That chapter
    walks through a more complex end-to-end use case, while this chapter focuses solely
    on the *API* *Portal* component.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你有了一个正在运行的 Kubernetes 集群，你需要稍微跳转到[*第8章*](B18145_08.xhtml#_idTextAnchor150)，*通过
    Tanzu 应用平台提升开发者生产力*，并安装*Tanzu 应用平台*。那一章讲解了一个更复杂的端到端用例，而这一章仅专注于*API* *Portal* 组件。
- en: Next, you’ll need an account on a container registry that presents a TLS certificate
    trusted by your Kubernetes cluster. The easiest thing to do is sign up for a free
    developer account at Docker Hub. Simply visit [https://hub.docker.com](https://hub.docker.com)
    and sign up.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要一个容器注册表账户，该注册表提供一个被你的 Kubernetes 集群信任的 TLS 证书。最简单的方法是注册一个 Docker Hub
    的免费开发者账户。只需访问 [https://hub.docker.com](https://hub.docker.com) 并注册即可。
- en: 'If you want to deploy the real-world use case, you’ll need an OIDC provider
    for SSO. If you don’t already have something available, I’d recommend setting
    up a free developer account at Okta: [https://developer.okta.com/signup/](https://developer.okta.com/signup/).
    Later in this chapter, there will be some detailed instructions for setting up
    your account to work with our real-world example application.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想部署真实世界的用例，你将需要一个 OIDC 提供者来支持 SSO。如果你还没有相关服务，我推荐你在 Okta 上注册一个免费的开发者账户：[https://developer.okta.com/signup/](https://developer.okta.com/signup/)。在本章稍后，你将看到一些关于如何设置账户以便与我们的真实世界示例应用程序一起使用的详细说明。
- en: 'At the time of writing, the **Spring Cloud Gateway for Kubernetes** installation
    requires the *helm* CLI, which you can find here: [https://helm.sh/docs/intro/install/](https://helm.sh/docs/intro/install/).'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写时，**Spring Cloud Gateway for Kubernetes** 安装需要 *helm* CLI，你可以在这里找到它：[https://helm.sh/docs/intro/install/](https://helm.sh/docs/intro/install/)。
- en: 'Finally, we’ll need the *kustomize* CLI, which can be found here: [https://kustomize.io](https://kustomize.io).
    If you just want to download the binary, you can also go here: [https://kubectl.docs.kubernetes.io/installation/kustomize/binaries](https://kubectl.docs.kubernetes.io/installation/kustomize/binaries).'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要 *kustomize* CLI，可以在这里找到：[https://kustomize.io](https://kustomize.io)。如果你只想下载二进制文件，也可以访问这里：[https://kubectl.docs.kubernetes.io/installation/kustomize/binaries](https://kubectl.docs.kubernetes.io/installation/kustomize/binaries)。
- en: Now that we have Kubernetes running *Tanzu Application Platform*, we can install
    **Spring Cloud Gateway for Kubernetes** and **API Portal for** **VMware Tanzu**.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经在 Kubernetes 上运行了 *Tanzu 应用平台*，可以安装 **Spring Cloud Gateway for Kubernetes**
    和 **API Portal for VMware Tanzu**。
- en: 'First, let’s double-check that we have all our prerequisites in place:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们再次确认我们是否已经准备好了所有先决条件：
- en: 'We need an up-to-date version of the `kapp` controller – at least 0.29.0:'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要一个最新版本的 `kapp` 控制器——至少是 0.29.0：
- en: '[PRE0]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We’ll also need the `secretgen` controller:'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还需要 `secretgen` 控制器：
- en: '[PRE2]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let’s make sure we have up-to-date versions of `helm` and `kustomize` installed:'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让我们确保安装了最新版本的 `helm` 和 `kustomize`：
- en: '[PRE5]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'And finally, we should test that we have a writable Docker repository and a
    working Docker CLI. The following is a simple way to test that everything has
    been set up properly. I’ll use `dockerhub` as the registry, but you can plug in
    whichever solution you’ve chosen to use:'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们应该测试是否有可写的 Docker 仓库和工作中的 Docker CLI。以下是一种简单的方法来测试一切是否已正确设置。我将使用 `dockerhub`
    作为注册表，但你也可以使用你选择的任何解决方案：
- en: '[PRE9]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If everything worked without errors, congratulations! You should have all the
    technical requirements in place to proceed to the next section, where you will
    install **Spring Cloud Gateway for Kubernetes** and **API Portal for** **VMware
    Tanzu**!
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切没有错误，恭喜！你应该已经具备了所有技术要求，可以继续进入下一部分，安装 **Spring Cloud Gateway for Kubernetes**
    和 **API Portal for VMware Tanzu**！
- en: Spring Cloud Gateway for Kubernetes – getting started
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Cloud Gateway for Kubernetes – 入门指南
- en: 'Let’s start by installing **Spring Cloud Gateway for Kubernetes**. There are
    two distinct parts to this product: the Kubernetes Operator and the deployed gateways.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从安装 **Spring Cloud Gateway for Kubernetes** 开始。这个产品有两个独立的部分：Kubernetes 操作员和部署的网关。
- en: 'The *Kubernetes Operator* works with the Kubernetes API to handle three *Custom*
    *Resource Definitions*:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '*Kubernetes Operator* 与 Kubernetes API 协同工作，处理三个 *自定义* *资源定义*：'
- en: '**SpringCloudGateway** (abbr: *scg*): This is an (optionally) HA instance of
    Spring Cloud Gateway – centrally packaged, deployed, and life cycle-managed for
    the developer.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SpringCloudGateway**（缩写：*scg*）：这是一个（可选）高可用实例的 Spring Cloud Gateway——为开发人员集中打包、部署并进行生命周期管理。'
- en: '**SpringCloudGatewayRouteConfig** (abbr: *scgrc*): This is a set of instructions
    for a Spring Cloud Gateway instance around what host/path to accept requests on,
    how to filter that request, and which backend Kubernetes service to eventually
    proxy it onto.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SpringCloudGatewayRouteConfig**（缩写：*scgrc*）：这是为 Spring Cloud Gateway 实例提供的一组指令，涉及接受哪些主机/路径上的请求、如何过滤请求以及最终将其代理到哪个后端
    Kubernetes 服务。'
- en: '**SpringCloudGatewayMapping** (abbr: *scgm*): This tells the Kubernetes operator
    which *SpringCloudGatewayRouteConfigs* are associated with which *SpringCloudGateways*.
    The operator automatically reconfigures *SpringCloudGateways* with the necessary
    Spring configuration properties to match the contents of *SpringCloudGatewayRouteConfig*.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SpringCloudGatewayMapping**（缩写：*scgm*）：这告诉 Kubernetes 操作员哪些 *SpringCloudGatewayRouteConfig*
    与哪些 *SpringCloudGateways* 关联。操作员会自动重新配置 *SpringCloudGateways*，使其与 *SpringCloudGatewayRouteConfig*
    的内容相匹配所需的 Spring 配置属性。'
- en: The deployed instances of Spring Cloud Gateway are the other half of the product.
    The Kubernetes operator stands up multiples of these gateways, which can accept
    incoming traffic via a Kubernetes service or ingress. It then looks for *SpringCloudGatewayRouteConfigs*
    that are mapped to a particular Spring Cloud Gateway instance and dynamically
    configures those routes.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 部署的 Spring Cloud Gateway 实例是产品的另一部分。Kubernetes 操作员启动多个这些网关，能够通过 Kubernetes 服务或
    Ingress 接受传入的流量。然后，它会查找与特定 Spring Cloud Gateway 实例映射的 *SpringCloudGatewayRouteConfig*，并动态配置这些路由。
- en: The Spring Cloud Gateway deployed instances are what handle API traffic for
    developers’ APIs. The Kubernetes Operator is how developers can self-service provision
    Spring Cloud Gateway instances and (human, not Kubernetes) operators can monitor
    and manage those instances automatically, and at scale.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 部署的Spring Cloud Gateway实例负责处理开发者API的API流量。Kubernetes操作符是开发者自助服务配置Spring Cloud
    Gateway实例的方式，而（人工的，非Kubernetes的）操作员则可以自动监控并管理这些实例，且具备规模化能力。
- en: 'The installation process is as simple as running a couple of scripts to relocate
    the necessary container images to your container registry and then deploying the
    necessary Kubernetes artifacts to your cluster using *Helm*. The official installation
    instructions can be found here: [https://docs.vmware.com/en/VMware-Spring-Cloud-Gateway-for-Kubernetes/1.0/scg-k8s/GUID-installation.html](https://docs.vmware.com/en/VMware-Spring-Cloud-Gateway-for-Kubernetes/1.0/scg-k8s/GUID-installation.html).'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 安装过程非常简单，只需运行几个脚本将所需的容器镜像迁移到你的容器仓库，然后使用*Helm*将必要的Kubernetes工件部署到你的集群中。官方安装说明可以在此找到：[https://docs.vmware.com/en/VMware-Spring-Cloud-Gateway-for-Kubernetes/1.0/scg-k8s/GUID-installation.html](https://docs.vmware.com/en/VMware-Spring-Cloud-Gateway-for-Kubernetes/1.0/scg-k8s/GUID-installation.html)。
- en: 'To paraphrase the installation, here are the steps:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，安装步骤如下：
- en: 'Download the binary from this link: [https://network.tanzu.vmware.com/products/spring-cloud-gateway-for-kubernetes](https://network.tanzu.vmware.com/products/spring-cloud-gateway-for-kubernetes).'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从这个链接下载二进制文件：[https://network.tanzu.vmware.com/products/spring-cloud-gateway-for-kubernetes](https://network.tanzu.vmware.com/products/spring-cloud-gateway-for-kubernetes)。
- en: Unzip it.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解压缩它。
- en: Run the script to take the local `.tgz` image layers and push them to your container
    repository.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行脚本，将本地`.tgz`镜像层推送到你的容器仓库。
- en: Run the script to deploy everything to your Kubernetes cluster via *helm*.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行脚本，通过*helm*将一切部署到你的Kubernetes集群。
- en: 'First, let’s relocate our images. The Kubernetes operator and the deployed
    Spring Cloud Gateway instances need to exist in an external image repository that
    is reachable from the Kubernetes cluster. At this time, Spring Cloud Gateway for
    Kubernetes is delivered via download and all the image bits are contained in the
    downloaded file. To get those bits somewhere Kubernetes can access them, we’ll
    need to load them into our local Docker environment and push them to the remote
    repository. The straightforward Docker commands are in the `scripts/relocate-images.sh`
    file if you’re interested. Otherwise, simply navigate to the `scripts` directory
    and call the script. I’ll share the abbreviated output from my run. `docker.io/rhardt`
    is my repository. If you set up a Docker Hub account, yours will be `docker.io/<your-username>`:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们迁移我们的镜像。Kubernetes操作符和已部署的Spring Cloud Gateway实例需要存在于一个外部镜像仓库中，该仓库必须能从Kubernetes集群访问。在此时，Spring
    Cloud Gateway for Kubernetes是通过下载交付的，所有镜像文件都包含在下载的文件中。为了将这些文件放到Kubernetes可以访问的地方，我们需要将它们加载到本地Docker环境中并推送到远程仓库。如果你感兴趣的话，简单的Docker命令位于`scripts/relocate-images.sh`文件中。否则，只需导航到`scripts`目录并调用该脚本即可。我将分享我运行时的简短输出。`docker.io/rhardt`是我的仓库。如果你设置了Docker
    Hub账户，你的仓库会是`docker.io/<your-username>`：
- en: '[PRE13]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: So, now, we have our container images somewhere that Kubernetes can find them.
    The other thing that the `relocate-images.sh` script does is create a file called
    `scg-image-values.yaml` that Helm will use when deploying to Kubernetes.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，现在，我们已经将容器镜像放在了Kubernetes可以找到的地方。`relocate-images.sh`脚本的另一项功能是创建一个名为`scg-image-values.yaml`的文件，Helm在部署到Kubernetes时会使用该文件。
- en: 'The second script we will run is `install-spring-cloud-gateway.sh`, also in
    the `scripts` directory. I encourage you to peruse this script as well as it’s
    an excellent example of a comprehensive helm deployment, complete with updating
    an existing installation, specific instructions on timeout, error diagnostics
    in the event of failure, and checking to see that the deployment succeeded:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要运行的第二个脚本是`install-spring-cloud-gateway.sh`，同样位于`scripts`目录中。我建议你浏览一下这个脚本，它是一个全面的helm部署的优秀示例，包含了更新现有安装、超时设置、失败时的错误诊断以及检查部署是否成功的具体说明：
- en: '[PRE14]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now that we’ve installed Spring Cloud Gateway for Kubernetes, let’s move on
    to API Portal for VMware Tanzu.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了Spring Cloud Gateway for Kubernetes，让我们继续进行VMware Tanzu的API门户操作。
- en: API Portal for VMware Tanzu – getting started
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VMware Tanzu的API门户 – 入门
- en: 'Unlike *Spring Cloud Gateway for Kubernetes*, API Portal for VMware Tanzu comes
    as a part of *Tanzu Application Platform*, which you installed in the *Technical
    requirements* section previously. You can verify that API Portal is installed
    and running by navigating to your Tanzu Application GUI, either at a local port
    forward address such as `http://localhost:8081` or at your ingress domain such
    as `http://tap-gui.example.com`. This depends on your choice of Kubernetes cluster
    and how you installed TAP. Once you access your Tanzu Application Platform GUI,
    click the **APIs** menu item on the left-hand side; you should see a screen like
    the following:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 与 *Spring Cloud Gateway for Kubernetes* 不同，VMware Tanzu 的 API 门户是 *Tanzu 应用平台*
    的一部分，你之前在 *技术要求* 部分已经安装了它。你可以通过访问 Tanzu 应用程序 GUI 来验证 API 门户是否已安装并运行，地址可以是本地端口转发地址，如
    `http://localhost:8081`，也可以是你的 ingress 域名，如 `http://tap-gui.example.com`。这取决于你选择的
    Kubernetes 集群和 TAP 安装方式。一旦访问到 Tanzu 应用平台 GUI，点击左侧的 **APIs** 菜单项，你应该看到如下界面：
- en: '![Figure 5.2 – API Portal](img/B18145_05_02.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.2 – API 门户](img/B18145_05_02.jpg)'
- en: Figure 5.2 – API Portal
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.2 – API 门户
- en: Spring Cloud Gateway for Kubernetes and API Portal for VMware Tanzu – real-world
    use case
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VMware Tanzu 的 Spring Cloud Gateway 和 API 门户 – 真实世界的使用案例
- en: Now, we’re going to implement a real-world use case using **API Portal for VMware
    Tanzu** and **Spring Cloud Gateway for Kubernetes**. This will show how these
    products naturally work together and how, in combination, you can realize significant
    value as a developer, consumer, or operator of APIs.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将实现一个使用 **VMware Tanzu 的 API 门户** 和 **Spring Cloud Gateway for Kubernetes**
    的真实世界案例。这将展示这些产品如何自然协同工作，以及作为开发者、消费者或 API 操作员，如何通过结合使用它们获得显著价值。
- en: 'Here’s a breakdown of our next steps:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们接下来的步骤概览：
- en: We will download an API-driven application called *Animal Rescue* while approximating
    a real-world animal adoption site, complete with SSO.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将下载一个以 API 为驱动的应用，名为 *Animal Rescue*，其模拟了一个真实的动物领养网站，且支持 SSO。
- en: We will set up our Okta environment so that our application can use Okta for
    SSO. Then, we will take the Okta parameters and plug them into the Animal Rescue
    application.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将设置 Okta 环境，使我们的应用能够使用 Okta 进行 SSO。然后，我们将 Okta 参数插入到 Animal Rescue 应用中。
- en: We will deploy the Animal Rescue application to our Kubernetes cluster, which
    will create the necessary Spring Cloud Gateway artifacts. By doing so, we will
    be able to browse and interact with the Animal Rescue web app.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将把 Animal Rescue 应用部署到我们的 Kubernetes 集群，这将创建必要的 Spring Cloud Gateway 工件。通过这样做，我们将能够浏览和互动使用
    Animal Rescue Web 应用。
- en: We will modify our API Portal installation so that it connects to the Spring
    Cloud Gateway Kubernetes Operator, which now knows all the API routes for the
    Animal Rescue app and exposes them as OpenAPIv3.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将修改 API 门户的安装，使其连接到 Spring Cloud Gateway Kubernetes Operator，该 Operator 现在已经知道所有
    Animal Rescue 应用的 API 路由，并将其作为 OpenAPIv3 暴露。
- en: We will port-forward to our API Portal to explore and try out the Animal Rescue
    APIs.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将通过端口转发到我们的 API 门户，以便探索和尝试 Animal Rescue 的 API。
- en: Now that you know what we’re trying to accomplish, here are the steps.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道我们要实现的目标，接下来是步骤。
- en: Step 1 – cloning this book’s Git repository and navigating to the Animal Rescue
    application
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 1 – 克隆本书的 Git 仓库并导航到 Animal Rescue 应用
- en: 'Use the Git CLI to clone the book code repository and then navigate to the
    *animal-rescue* application as seen in the following code snippet:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Git CLI 克隆本书的代码库，然后导航到 *animal-rescue* 应用，如下代码片段所示：
- en: '[PRE15]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Step 2 – configuring your Okta developer account to provide SSO for Animal Rescue
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 2 – 配置你的 Okta 开发者账户，以为 Animal Rescue 提供 SSO
- en: 'These steps are a bit involved, so I recommend following the instructions directly
    from the VMware documentation here: [https://docs.vmware.com/en/VMware-Spring-Cloud-Gateway-for-Kubernetes/1.0/scg-k8s/GUID-sso-setup-guide.html](https://docs.vmware.com/en/VMware-Spring-Cloud-Gateway-for-Kubernetes/1.0/scg-k8s/GUID-sso-setup-guide.html).'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤稍显复杂，因此我建议直接参考 VMware 文档中的说明：[https://docs.vmware.com/en/VMware-Spring-Cloud-Gateway-for-Kubernetes/1.0/scg-k8s/GUID-sso-setup-guide.html](https://docs.vmware.com/en/VMware-Spring-Cloud-Gateway-for-Kubernetes/1.0/scg-k8s/GUID-sso-setup-guide.html)。
- en: 'After completing the setup, we’ll need to complete one additional step for
    this example to work. We need to add two additional sign-in redirect URIs for
    the “gateway” application. This screenshot shows my Okta setup:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 完成设置后，我们需要再执行一个额外的步骤，以使此示例生效。我们需要为“gateway”应用添加两个额外的登录重定向 URI。此截图展示了我的 Okta
    设置：
- en: '![Figure 5.3 – Screenshot of the Okta sign-in redirect URIs](img/B18145_05_03.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.3 – Okta登录重定向URI的截图](img/B18145_05_03.jpg)'
- en: Figure 5.3 – Screenshot of the Okta sign-in redirect URIs
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.3 – Okta登录重定向URI的截图
- en: We’ll be port-forwarding the Animal Rescue app to `http://localhost:8084` and
    the API gateway to `http://localhost:8085`; we’d like both to be able to authenticate
    via Okta.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将会将动物拯救应用程序端口转发至 `http://localhost:8084`，API网关端口转发至 `http://localhost:8085`；我们希望两者都能通过Okta进行身份验证。
- en: 'At the end of this exercise, you’ll need three pieces of information from your
    Okta environment: `issuer-id`, `client-id`, and `client-secret`.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在此练习结束时，您需要从您的Okta环境中获取三个信息：`issuer-id`、`client-id`和`client-secret`。
- en: 'The VMware documentation instructs you on how to configure the Animal Rescue
    app with that information. I’ll include it here as well. These steps are relative
    to the `animal-rescue` app that we cloned from GitHub in the previous section:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: VMware文档将指导您如何使用该信息配置动物拯救应用程序。我也会在此处包含它。这些步骤是相对于我们在前一节从GitHub克隆的 `animal-rescue`
    应用程序：
- en: 'Create `backend/secrets/sso-credentials.txt` with the following:'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 `backend/secrets/sso-credentials.txt`，内容如下：
- en: '[PRE16]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Create `gateway/sso-secret-for-gateway/secrets/test-sso-credentials.txt` with
    the following:'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 `gateway/sso-secret-for-gateway/secrets/test-sso-credentials.txt`，内容如下：
- en: '[PRE17]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Some of the additional steps mentioned in the documentation, such as editing
    `roles-attribute-name` or configuring route security have already been done for
    you in the version of the app you downloaded.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 文档中提到的一些额外步骤，如编辑 `roles-attribute-name` 或配置路由安全性，已经在您下载的应用程序版本中完成。
- en: Step 3 – deploying the Animal Rescue application
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第三步 – 部署动物拯救应用程序
- en: 'From the `animal-rescue` directory – that is, the home directory of the app
    you cloned (`DevSecOps-in-Practice-with-VMware-Tanzu/chapter-05/animal-rescue`)
    – run the following command:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `animal-rescue` 目录开始 – 也就是您克隆的应用程序的主目录 (`DevSecOps-in-Practice-with-VMware-Tanzu/chapter-05/animal-rescue`)
    – 运行以下命令：
- en: '[PRE21]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'At this point, you can watch to see when all the pods in the `animal-rescue`
    namespace have come up:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您可以观察动物拯救命名空间中所有Pod何时启动完成：
- en: '[PRE22]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Once the pods are up, we can port forward to `localhost:8084`.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Pod启动完成，我们可以将端口转发到 `localhost:8084`。
- en: At this point, I highly recommend an *incognito* browser window to prevent the
    application from getting confused regarding your Okta developer account.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我强烈建议在*无痕*浏览器窗口中操作，以防止应用程序对您的Okta开发人员帐户产生混淆。
- en: 'Open your browser to `http://localhost:8084`; you should see the Animal Rescue
    web application replete with cute animals to adopt and an SSO login button in
    the top-right corner. If you configured everything correctly, clicking that button
    will take you to an Okta login and then back to the running application once you’ve
    logged in. This is what it looks like in my browser. Notice the text in the top
    right with my Okta username:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 打开您的浏览器访问 `http://localhost:8084`；您应该看到动物拯救Web应用程序，其中包含可爱的动物供您领养，并在右上角有一个SSO登录按钮。如果您正确配置了一切，点击该按钮将带您进入Okta登录页面，然后登录后返回运行中的应用程序。这就是我在浏览器中看到的样子。请注意右上角显示我的Okta用户名的文本：
- en: '![Figure 5.4 – Animal Rescue screenshot](img/B18145_05_04.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.4 – 动物拯救截图](img/B18145_05_04.jpg)'
- en: Figure 5.4 – Animal Rescue screenshot
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.4 – 动物拯救截图
- en: So far, so good! Now, let’s take things to the next level and integrate this
    API with **API Portal for** **VMware Tanzu**.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，一切顺利！现在，让我们将事情提升到下一个级别，并将此API集成到**VMware Tanzu的API门户**中。
- en: Step 4 – (optional) viewing the Animal Rescue API’s OpenAPI 3.0 specification
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第四步 – （可选）查看动物拯救API的OpenAPI 3.0规范
- en: This is, in my opinion, one of the most compelling features of this pair of
    products.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在我看来，这是这对产品中最引人注目的特性之一。
- en: In practice, developers are responsible for manually keeping their API specification
    in some sort of documentation format, usually OpenAPI 3.x or Swagger. This is
    tedious for the developer, and in the heat of battle, that API specification will
    be the first thing to stop being maintained. This means that new consumers will
    be basing their clients on incorrect, out-of-date API documentation.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，开发人员负责手动将其API规范保持在某种文档格式中，通常是OpenAPI 3.x或Swagger。对于开发人员来说，这是件繁琐的事情，在激烈的战斗中，API规范往往是第一个不再维护的东西。这意味着新的消费者将根据不正确、过时的API文档来构建他们的客户端。
- en: Once you deploy the *Animal Rescue* application, the Spring Cloud Gateway Kubernetes
    Operator manages all the routes – that is, the Kubernetes Operator manages the
    configuration of Spring Cloud Gateway instances so that every API call gets properly
    routed to the right backend service, along with any filters, security, and metadata.
    This is sufficient information to auto-generate the API’s OpenAPI 3.0 specification.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您部署了*动物救援*应用程序，Spring Cloud Gateway Kubernetes Operator将管理所有路由 - 也就是说，Kubernetes
    Operator管理Spring Cloud Gateway实例的配置，以便每个API调用都正确路由到正确的后端服务，以及任何过滤器、安全性和元数据。这足以自动生成API的OpenAPI
    3.0规范。
- en: It’s hard to understate what a breakthrough this is. The actual Kubernetes objects
    that control the API’s runtime configuration are used to auto-generate always-accurate,
    always-up-to-date OpenAPI 3.0 documentation. This removes the burden of documentation
    creation and maintenance from the API developer, and the burden of working around
    out-of-date documentation from the API consumer.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 很难低估这是一个突破。控制API运行时配置的实际Kubernetes对象用于自动生成始终准确、始终最新的OpenAPI 3.0文档。这减轻了API开发者的文档创建和维护负担，以及API消费者在处理过时文档时的负担。
- en: Let’s take a quick look at our Animal Rescue API auto-generated documentation.
    The OpenAPI 3.0 documentation for every deployed API across all gateways is available
    via a web endpoint on the Spring Cloud Gateway Operator. That web endpoint is
    exposed via a ClusterIP service.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速查看一下我们的动物救援API自动生成的文档。通过Spring Cloud Gateway Operator在所有网关上部署的每个API的OpenAPI
    3.0文档可通过Web端点访问。该Web端点通过ClusterIP服务公开。
- en: 'In production, you may want to put a TLS-secured ingress in front of that service,
    but for the sake of demonstration, let’s just set up a quick port forward:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产环境中，您可能希望在该服务前面放置一个TLS安全的入口，但出于演示目的，让我们快速设置一个端口转发：
- en: '[PRE23]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'First, we determined that the `spring-cloud-gateway` service was running on
    port `80`, so we port-forwarded our local workstation’s port `8083` to that service
    on port `80`. Now, we can point a web browser to `http://localhost:8083`, and
    voila! You will see the OpenAPI 3.0.1 representation of the `Animal Rescue` API,
    as shown in the following screenshot:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们确定`spring-cloud-gateway`服务在端口`80`上运行，因此我们将本地工作站的端口`8083`转发到该服务的端口`80`。现在，我们可以将Web浏览器指向`http://localhost:8083`，神奇的事情发生了！您将看到`动物救援`API的OpenAPI
    3.0.1表示，如下面的屏幕截图所示：
- en: '![Figure 5.5 – Animal Rescue auto-generated OpenAPI 3.0.1 specification](img/B18145_05_05.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![图5.5 - 动物救援自动生成的OpenAPI 3.0.1规范](img/B18145_05_05.jpg)'
- en: Figure 5.5 – Animal Rescue auto-generated OpenAPI 3.0.1 specification
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.5 - 动物救援自动生成的OpenAPI 3.0.1规范
- en: 'This is a 100% valid and accurate OpenAPI 3.0, so any tools that can generate
    clients or server stubs from that format will work with it. Furthermore, the Kubernetes
    `SpringCloudGatewayRouteConfig` objects contain fields for the following:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个100%有效和准确的OpenAPI 3.0文档，因此可以使用任何可以从该格式生成客户端或服务器存根的工具。此外，Kubernetes的`SpringCloudGatewayRouteConfig`对象包含以下字段：
- en: Human-readable descriptions
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 人类可读的描述
- en: All the possible response codes and their meanings
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有可能的响应代码及其含义
- en: Any sort of authentication required
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要任何形式的身份验证
- en: In other words, the real-world Kubernetes objects driving the real-world runtime
    behavior are also driving the documentation, so it’s always accurate and up to
    date.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，驱动实际运行时行为的现实世界Kubernetes对象也驱动文档，因此它始终准确且最新。
- en: Step 5 – (optional) connecting API Portal for VMware Tanzu with the Spring Cloud
    Gateway for Kubernetes OpenAPI endpoint
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第5步 - （可选）将API Portal for VMware Tanzu连接到Spring Cloud Gateway for Kubernetes
    OpenAPI端点
- en: As we demonstrated earlier, **API Portal for VMware Tanzu** is driven entirely
    by OpenAPI 3 or Swagger documents. It’s only logical, then, that we’d set up the
    API Portal to consume the OpenAPI 3 documents generated by **Spring Cloud Gateway
    for Kubernetes**. If you set up a port forward in the previous step, you can exit
    from it. Since the API Portal and Spring Cloud Gateway are on the same Kubernetes
    cluster, they can communicate via ClusterIP services.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前演示的，**API Portal for VMware Tanzu**完全由OpenAPI 3或Swagger文档驱动。因此，我们设置API门户以消费**Spring
    Cloud Gateway for Kubernetes**生成的OpenAPI 3文档是理所当然的。如果您在上一步骤中设置了端口转发，您可以退出它。由于API门户和Spring
    Cloud Gateway位于同一Kubernetes集群上，它们可以通过ClusterIP服务进行通信。
- en: We previously installed `tanzu package` command. Now, let’s throw together a
    simple configuration file that overrides where API Portal will look for OpenAPI
    3 docs, and update the package installation.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前安装了`tanzu package`命令。现在，让我们编写一个简单的配置文件，用于覆盖API门户将搜索OpenAPI 3文档的位置，并更新软件包安装。
- en: 'First, create a file called `api-portal-values.yaml` with the following contents:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个名为`api-portal-values.yaml`的文件，其内容如下：
- en: '[PRE24]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: As you can see, we’re appending the ClusterIP service of the Spring Cloud Gateway
    Operator to the list of places where the API Portal will search for API documentation.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，我们正在将Spring Cloud Gateway Operator的ClusterIP服务附加到API门户将搜索API文档的位置列表中。
- en: 'Now, we can use the `tanzu package` command to update the installation. Behind
    the scenes, the API Portal will be redeployed with the new configuration. This
    method of deploying software removes configuration drift as any manual configuration
    changes to the deployment will be overwritten by the `kapp` controller:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用`tanzu package`命令更新安装。在幕后，API门户将使用新配置重新部署。这种部署软件的方法消除了配置漂移，因为对部署的任何手动配置更改都将被`kapp`控制器覆盖：
- en: '[PRE25]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now, let’s re-instate our port forward to our API Portal:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们重新配置我们的端口转发到我们的API门户：
- en: '[PRE26]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'And upon opening a web browser to `http://localhost:8085`, we should see our
    `Animal Rescue` API in the list, as shown in the following screenshot:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 并且在打开Web浏览器到`http://localhost:8085`时，我们应该在列表中看到我们的`Animal Rescue` API，如下图所示：
- en: '![Figure 5.6 – API Portal with the Animal Rescue API](img/B18145_05_06.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.6 – 带有Animal Rescue API的API门户](img/B18145_05_06.jpg)'
- en: Figure 5.6 – API Portal with the Animal Rescue API
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.6 – 带有Animal Rescue API的API门户
- en: 'In the `Animal Rescue` tile, click **VIEW APIS**. Then, on the resulting screen,
    click **/api/animals**, then **Try it Out**, then **Execute**. If everything has
    been configured correctly, you should see some animal data in JSON format in the
    **Server response** section, as shown in the following screenshot:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Animal Rescue`图块中，点击**VIEW APIS**。然后，在结果屏幕上，依次点击**/api/animals**，然后**尝试执行**，最后**执行**。如果一切配置正确，您应该在**服务器响应**部分看到一些JSON格式的动物数据，如下图所示：
- en: '![Figure 5.7 – Trying out APIs from the browser](img/B18145_05_07.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.7 – 从浏览器尝试API](img/B18145_05_07.jpg)'
- en: Figure 5.7 – Trying out APIs from the browser
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.7 – 从浏览器尝试API
- en: Just to be clear, you’re able to *try out* APIs directly from the API Portal
    interface.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 只要清楚，您可以直接从API门户界面*尝试*API。
- en: After the exhilarating experience of installing these two products, wiring them
    together, and implementing a complex real-world application, we must face the
    inevitable. Long after the fun of deploying a working piece of software has faded,
    the ongoing task of maintenance and support will remain. We’ll cover that next.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装了这两个产品、将它们连接在一起并实现复杂的现实世界应用程序的令人兴奋体验之后，我们必须面对不可避免的事实。在部署一个工作的软件片段的乐趣已经消失之后，维护和支持的持续任务将继续存在。我们将在下一节讨论这一点。
- en: Common day-2 operations with Tanzu Application Accelerator
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Tanzu Application Accelerator的常见第二天操作
- en: Congratulations! If you’ve made it this far, you have set up an API publishing
    and consumption model that can unlock incredible value in your enterprise software
    development operation.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！如果您已经走到这一步，您已经建立了一个可以在企业软件开发操作中释放令人难以置信的价值的API发布和消费模型。
- en: As is usually the case in the enterprise, the hard problem is not getting something
    installed and configured, it’s operating it over time. Let’s look at some of these
    day-2 operations.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 企业中通常的情况是，困难并不在于安装和配置某些东西，而是在于随着时间的推移对其进行操作。让我们看看一些这样的第二天操作。
- en: Updating an API’s route definition
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新API的路由定义
- en: 'Let’s say we identify a typo in an API route’s description. We’d like to be
    able to update that route in real time and have it propagate to the API Portal
    without any additional configuration. Let’s do that. Navigate to the `animal-rescue`
    app that you cloned from GitHub and open the `./backend/k8s/animal-rescue-backend-route-config.yaml`
    file in an editor. At line 17, you’ll see a description starting with *Retrieve
    all the anmals*. Fix it so that it reads *Retrieve all the animals*. If you want
    to be doubly sure, insert some additional text if you’d like. Here’s what it looked
    like in my editor. I wanted to be *especially* sure that I was seeing my changes:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们发现了一个 API 路由描述中的拼写错误。我们希望能够实时更新该路由，并且让它自动传播到 API 门户，而无需额外配置。我们来做一下。导航到你从
    GitHub 克隆的 `animal-rescue` 应用，并在编辑器中打开 `./backend/k8s/animal-rescue-backend-route-config.yaml`
    文件。在第 17 行，你会看到一个以 *Retrieve all the anmals* 开头的描述。将其修改为 *Retrieve all the animals*。如果你想更确定一些，可以插入一些额外的文本。以下是我在编辑器中的样子。我特别想确认自己看到的是修改后的内容：
- en: '![Figure 5.8 – Editing the description of an API route](img/B18145_05_08.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.8 – 编辑 API 路由的描述](img/B18145_05_08.jpg)'
- en: Figure 5.8 – Editing the description of an API route
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.8 – 编辑 API 路由的描述
- en: 'Now, we must simply update the Spring Cloud Gateway Route Config in Kubernetes,
    and the documentation should auto-update. Don’t forget the namespace, which in
    the original install was added by *kustomize*:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们只需要更新 Kubernetes 中的 Spring Cloud Gateway 路由配置，文档应该会自动更新。别忘了命名空间，原始安装时是通过
    *kustomize* 添加的：
- en: '[PRE27]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Now, if you still have the port-forward to `api-portal` running, you can navigate
    to `http://localhost:8085`, click through to the Animal Rescue `/api/animals`
    route, and see your update in real time!
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你仍然保持着到 `api-portal` 的端口转发，你可以访问 `http://localhost:8085`，点击进入动物救援 `/api/animals`
    路由，并实时查看你的更新！
- en: '![Figure 5.9 – Viewing real-time updates to our API specification](img/B18145_05_09.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.9 – 查看 API 规范的实时更新](img/B18145_05_09.jpg)'
- en: Figure 5.9 – Viewing real-time updates to our API specification
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.9 – 查看 API 规范的实时更新
- en: 'At this point, we’ve gone in-depth into numerous *day-0* and *day-1* tasks,
    such as deploying and consuming APIs. But anyone who has spent any time at all
    in the enterprise software space knows that the vast majority of our time and
    effort is spent on the *day-2* tasks: updating, monitoring, measuring, and improving
    our software. Let’s briefly cover some of these day-2 topics.'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经深入探讨了许多*day-0*和*day-1*任务，比如部署和使用 API。但任何在企业软件领域工作过的人都知道，我们的大多数时间和精力都花在*day-2*任务上：更新、监控、测量和改进软件。接下来我们简要介绍一些这些
    day-2 任务。
- en: Updating the API Portal package
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新 API Portal 包
- en: 'The `tanzu package` commands in conjunction with the kapp controller give you
    incredible power to life cycle-manage your deployed software. In the case of API
    Portal, you can grab the currently deployed version and see which versions are
    currently available. Then, to update it, you simply execute `tanzu package installed
    update -n tap-install api-portal -v <``new version>`:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '`tanzu package` 命令与 kapp 控制器结合，给你带来了强大的能力，能够生命周期管理你部署的软件。在 API Portal 的情况下，你可以获取当前部署的版本，并查看哪些版本是可用的。然后，只需执行
    `tanzu package installed update -n tap-install api-portal -v <new version>` 命令来更新它：'
- en: '[PRE28]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We currently have 1.0.8 installed:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 我们当前安装的是 1.0.8 版本：
- en: '[PRE29]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'It appears that version 1.0.9 became available recently:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来版本 1.0.9 最近已经发布：
- en: '[PRE30]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: And with a simple command, our `api-portal` package auto-updates to the latest
    version.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 只需一个简单命令，我们的 `api-portal` 包就会自动更新到最新版本。
- en: Summary
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: APIs are everywhere. With OpenAPI 3 and REST becoming the well-accepted standard
    among developers, a significant portion of an enterprise developer’s job consists
    of creating, publishing, discovering, and consuming APIs.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: API 无处不在。随着 OpenAPI 3 和 REST 成为开发者普遍接受的标准，企业开发者的工作中，创建、发布、发现和使用 API 已经占据了很大一部分。
- en: 'In an environment with a significant number of developers on disparate teams,
    this inevitably leads to waste: a significant waste of time, effort, and money.'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个有大量开发者分布在不同团队的环境中，这不可避免地导致浪费：大量的时间、精力和金钱浪费。
- en: Developers waste energy reverse-engineering inadequately documented APIs. They
    waste time identifying the right API. They burn unnecessary cycles figuring out
    how to make their API widely available.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者浪费精力逆向工程文档不足的 API。他们浪费时间找寻正确的 API。他们在弄清楚如何使 API 被广泛使用时消耗了不必要的资源。
- en: Once they have an API deployed, there’s a waste of time and energy making sure
    the API is adequately secured and that it’s shared across a large organization,
    not to mention making sure those APIs are maintained and kept up to date.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦API部署完成，就会浪费大量时间和精力来确保API的安全性，并确保它能够在大型组织中共享，更不用说确保这些API得到维护并保持更新。
- en: Architects may spend undue time building out a central clearing house for discovering
    APIs and a central gateway for deploying them.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 架构师可能会花费不必要的时间来构建一个用于发现API的中央集散地以及一个用于部署API的中央网关。
- en: Finally, operators are tasked with monitoring and measuring many polyglot APIs
    across different platforms.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，操作员还需要负责监控和衡量跨多个平台的许多多语言API。
- en: With the tools that you’ve now become familiar with in this chapter, I hope
    you can take a big bite out of that API waste, making your team, your development
    org, and your company wildly successful, efficient, and API-driven.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 使用你在本章中已经熟悉的工具，我希望你能大幅减少API的浪费，使你的团队、你的开发组织和你的公司变得极其成功、高效，并且以API为驱动。
- en: With our next chapter, we will move our focus from *building* software to *running*
    it. We’ll kick off our new area of focus with a deep dive into hosting and maintaining
    OCI container images and Helm Charts with the **VMware** **Harbor Registry**.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将把重点从*构建*软件转移到*运行*软件。我们将通过深入探讨使用**VMware** **Harbor Registry**托管和维护OCI容器镜像及Helm
    Charts来开启我们的新重点领域。
- en: Part 2 – Running Cloud-Native Applications on Tanzu
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二部分 – 在Tanzu上运行云原生应用
- en: This part of the book focuses on the tools and techniques that help run modern
    cloud-native applications on Kubernetes with multi-cloud and multi-cluster deployments.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分内容重点介绍了帮助在Kubernetes上运行现代云原生应用的工具和技术，涵盖了多云和多集群部署。
- en: 'This part of the book comprises the following chapters:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的这一部分包含以下章节：
- en: '[*Chapter 6*](B18145_06.xhtml#_idTextAnchor112), *Managing Container Images
    with Harbor*'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第六章*](B18145_06.xhtml#_idTextAnchor112)，*使用Harbor管理容器镜像*'
- en: '[*Chapter 7*](B18145_07.xhtml#_idTextAnchor131), *Orchestrating Containers
    across Clouds with Tanzu Kubernetes Grid*'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第七章*](B18145_07.xhtml#_idTextAnchor131)，*使用Tanzu Kubernetes Grid跨云编排容器*'
- en: '[*Chapter 8*](B18145_08.xhtml#_idTextAnchor150), *Enhancing Developer Productivity
    with Tanzu Application Platform*'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第八章*](B18145_08.xhtml#_idTextAnchor150)，*使用Tanzu应用平台提升开发者生产力*'

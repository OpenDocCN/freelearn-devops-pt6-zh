- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Understanding the Need to Move to a Cloud Platform
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解迁移到云平台的必要性
- en: Welcome! If you have any connection to delivering software at scale in the enterprise,
    we hope this book will be beneficial to you. In this first chapter, we’ll establish
    the context in which a product such as VMware Tanzu could emerge. We’ll do this
    with a walk-through of the evolution of enterprise software over the last 20 years
    covering the major milestones, inflection points, and problems that surfaced along
    the way.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎！如果您与在企业中大规模交付软件有任何关联，我们希望本书对您有所帮助。在本章中，我们将建立一个产品（如VMware Tanzu）出现的背景。我们将通过回顾过去20年企业软件的发展历程，涵盖主要的里程碑、转折点和沿途出现的问题来进行阐述。
- en: Then, once we have established the necessary context, we can give a 10,000-foot
    overview of Tanzu covering the tools, benefits, and features. And finally, we’ll
    set you up for success by covering some of the technical prerequisites you should
    have in place if you want to engage with any of the hands-on content in this book.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在建立了必要的背景后，我们可以对Tanzu进行一个10,000英尺的概览，涵盖工具、好处和特性。最后，我们将为您提供成功的基础，介绍一些技术前提，确保您在参与本书中的任何实践内容之前已做好准备。
- en: 'In this chapter, we will cover the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下内容：
- en: The challenges of running a software supply chain
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行软件供应链的挑战
- en: The emergence of the cloud and containers
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云计算和容器的出现
- en: Kubernetes
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes
- en: Outcome-driven approach
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以结果为导向的方法
- en: The need for VMware Tanzu
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VMware Tanzu的必要性
- en: The challenges of running a software supply chain
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行软件供应链的挑战
- en: VMware Tanzu is a modular software application platform that runs natively on
    multiple clouds and is geared toward important business outcomes such as developer
    productivity, operator efficiency, and security by default. If you are looking
    for a hands-on detailed treatment of VMware Tanzu, you won’t be disappointed.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: VMware Tanzu是一个模块化的软件应用平台，能够原生运行于多个云平台，并且专注于提高开发者生产力、运营效率，以及默认的安全性等重要业务成果。如果您期待对VMware
    Tanzu进行详细的动手实践，本书不会让您失望。
- en: However, before diving into the platform’s components, it may help to understand
    some history and background. If you’re reading this, there’s a good chance you
    participate in the coding, designing, architecting, operating, monitoring, or
    managing of software. However, you may not have considered that you are participating
    in a *supply chain*.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在深入了解平台的各个组件之前，了解一些历史和背景可能会有所帮助。如果您正在阅读这本书，那么很有可能您参与了软件的编码、设计、架构、运维、监控或管理。然而，您可能没有意识到，您正在参与一个*供应链*。
- en: 'According to Adam Hayes in his Investopedia article, *The Supply Chain: From
    Raw Materials to Order Fulfillment*, a supply chain “*refers to the network of
    organizations, people, activities, information and resources involved in delivering
    a product or service to* *a consumer*.”'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 根据亚当·海斯在他的Investopedia文章《供应链：从原材料到订单履行》中所述，供应链“*指的是一个网络，其中包括组织、人员、活动、信息和资源，这些都涉及到将产品或服务交付给消费者*”。
- en: When a piece of software makes the journey from a developer’s workstation to
    an end user, that’s as much of a supply chain as when Red Bull and ramen noodles
    make the trek from raw ingredients to a production facility to a warehouse to
    the neighborhood grocery store.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当一款软件从开发者的工作站到达最终用户时，这就像是红牛和方便面从原料到生产设施，再到仓库，再到邻里超市的供应链过程。
- en: Every supply chain has its own set of challenges, and software supply chains
    are no exception. Most software written today consists of libraries and frameworks
    containing millions of lines of open source software developed by people who are
    essentially anonymous and whose motivations are not entirely clear.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 每个供应链都有其独特的挑战，软件供应链也不例外。今天编写的大多数软件都由库和框架组成，包含数百万行开源软件，这些软件是由一些本质上匿名的人开发的，他们的动机并不完全明确。
- en: Much of that software changes hands many times as it moves from an open source
    repository to the developer, to source control, to building and packaging, to
    testing, to staging, and finally, to running in production. Furthermore, the infrastructure
    on which that software runs is often open source as well, with a worldwide community
    of hackers working to identify vulnerabilities in the operating systems, network
    protocol implementations, and utilities that make up the dial tone that your software
    runs on. This ecosystem presents an enormous surface area for bad things to happen.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 大部分软件在从开源代码库到开发人员，再到源代码管理、构建打包、测试、预发布，最后进入生产环境的过程中会经历多次交接。此外，运行这些软件的基础设施通常也是开源的，全球的黑客社区不断寻找操作系统、网络协议实现和组成软件运行的公共工具中的漏洞。这个生态系统呈现出巨大的表面区域，容易发生各种问题。
- en: For further reading on real-world examples of what can go wrong with software
    supply chains, I’d recommend a quick search of the web for the 2020 SolarWinds
    incident or the 2021 emergence of Log4Shell (CVE-2021-44228). The authors of this
    book, in their capacity as Tanzu solution engineers, have seen first-hand the
    impact software supply chain issues can have across the financial, government,
    telecom, retail, and entertainment sectors.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 关于软件供应链可能出现问题的实际案例，进一步阅读2020年SolarWinds事件或2021年Log4Shell（CVE-2021-44228）漏洞的出现会很有帮助。作为Tanzu解决方案工程师，本书的作者亲眼目睹了软件供应链问题对金融、政府、电信、零售和娱乐等行业的影响。
- en: The emergence of the cloud and containers
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云计算和容器的兴起
- en: Happily, the tech industry has begun to coalesce around some key technologies
    that have come a long way in addressing some of these concerns. The first is what
    is known colloquially as *The Cloud*. Enterprises with a big technology footprint
    began to realize that managing data centers and infrastructure was not the main
    focus of their business and could be done more efficiently by third parties for
    which those tasks were a core competency.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，科技行业已经开始围绕一些关键技术形成共识，这些技术在解决一些问题方面取得了长足的进展。第一个就是通常所说的*云计算*。拥有大量技术资源的企业开始意识到，管理数据中心和基础设施并非其业务的主要焦点，这些任务可以由第三方公司更高效地完成，而这些公司将此作为其核心竞争力。
- en: Rather than staff their own data centers and manage their own hardware, they
    could rent expertly managed and maintained technology infrastructure, and they
    could scale their capacity up and back down based on real-time business needs.
    This was a game-changer on many levels. One positive outcome of this shift was
    a universal raising of the bar with regard to vulnerable and out-of-date software
    on the internet. As vulnerabilities emerged, the cloud providers could make the
    *right* thing to do the *easiest* thing to do. Managed databases that handle their
    own operating system updates and object storage that is publicly inaccessible
    by default are two examples that come immediately to mind. Another outcome was
    a dramatic increase in deployment velocity as infrastructure management was taken
    off developers’ plates.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 企业不再需要自建数据中心和管理硬件，而是可以租赁由专业团队管理和维护的技术基础设施，并且能够根据实时的业务需求灵活地扩大或缩小容量。这在多个层面上都是一次变革。这一变化的一个积极成果是互联网中易受攻击和过时软件的普遍提高。当漏洞暴露时，云服务提供商能够让*正确*的做法成为*最简单*的做法。例如，能够自动处理操作系统更新的托管数据库，以及默认情况下无法公开访问的对象存储。另一个成果是，随着基础设施管理被从开发者的工作职责中剥离，部署速度大幅提升。
- en: As *The Cloud* became ubiquitous in the world of enterprise software and infrastructure
    capacity became a commodity, this allowed some issues that were previously obscured
    by infrastructure concerns to take center stage. Developers could have something
    running perfectly in their development environment only to have it fall over in
    production. This problem became so common that it earned its own subgenre of programmer
    humor called *It Works on* *My Machine*.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 随着*云计算*在企业软件世界中的普及，以及基础设施容量成为商品，这使得一些之前由于基础设施问题而被掩盖的隐患成为了焦点。开发人员可能在开发环境中运行得完美无缺，但一旦进入生产环境就会崩溃。这个问题变得如此普遍，以至于它诞生了一个编程幽默的子类别，叫做*它在*
    *我的机器上能运行*。
- en: Another of these issues was unused capacity. It had become so easy to stand
    up new server infrastructure, that app teams were standing up large (and expensive)
    fleets only to have them running nearly idle most of the time.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个问题是未使用的容量。搭建新的服务器基础设施变得如此简单，以至于应用团队仅为了将大规模（且昂贵）服务器集群搭建起来，结果这些服务器大部分时间几乎处于空闲状态。
- en: Containers
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 容器
- en: That brings us to the subject of *containers*. Many application teams would
    argue that they needed their own fleet of servers because they had a unique set
    of dependencies that needed to be installed on those servers, which conflicted
    with the libraries and utilities required by other apps that may want to share
    those servers. It was the happy confluence of two technical streams that solved
    this problem, allowing applications with vastly different sets of dependencies
    to run side by side on the same server without them even being aware of one another.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这就引出了*容器*的主题。许多应用团队会争辩说，他们需要自己的服务器集群，因为他们有一套独特的依赖关系需要在这些服务器上安装，而这些依赖关系与其他可能共享这些服务器的应用所需的库和工具发生冲突。最终，是两个技术流派的有幸交汇解决了这个问题，使得依赖关系差异极大的应用能够在同一台服务器上并排运行，彼此甚至不会察觉到对方的存在。
- en: Container runtimes
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 容器运行时
- en: The first stream was the concept of cgroups and kernel namespaces. These were
    abstractions that were built into the Linux kernel that gave a process some guarantee
    as to how much memory and processor capacity it would have available to it, as
    well as the illusion of its own process space, its own networking stack, and its
    own root filesystem, among other things.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个流派是 cgroups 和内核命名空间的概念。这些是内置于 Linux 内核中的抽象，为进程提供了保证，确保其可以获得一定的内存和处理器容量，并且提供了它自己的进程空间、网络栈和根文件系统等虚拟化环境。
- en: Container packaging and distribution
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 容器打包与分发
- en: The second was an API by which you could package up an entire Linux root filesystem,
    complete with its own unique dependencies, store it efficiently, unpack it on
    an arbitrary server, and run it in isolation from other processes that were running
    with their own root filesystems.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个问题是通过 API 打包整个 Linux 根文件系统，包括其独特的依赖关系，能够高效存储，解包到任意服务器上，并在与其他进程的根文件系统隔离的环境中运行。
- en: When combined, developers found that they could stand up a fleet of servers
    and run many heterogeneous applications safely on that single fleet, thereby using
    their cloud infrastructure much more efficiently.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当容器技术结合起来时，开发者发现他们能够搭建一组服务器，并在这组服务器上安全地运行多个异构应用，从而更加高效地使用云基础设施。
- en: Then, just as the move to the cloud exposed a new set of problems that would
    lead to the evolution of a container ecosystem, those containers created a new
    set of problems, which we’ll cover in the next section about Kubernetes.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，正如向云迁移暴露了一组新问题，这些问题最终导致了容器生态系统的演变一样，这些容器也带来了新的问题，我们将在接下来的关于 Kubernetes 的部分中讨论这些问题。
- en: Kubernetes
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes
- en: When containers caught on, they took off in a big way, but they were not the
    be-all-and-end-all solution developers had hoped for. A container runtime on a
    server often required big trade-offs between flexibility and security. Because
    the container runtime needed to work closely with the Linux kernel, users often
    required elevated permissions just to run their containers. Furthermore, there
    were multiple ways to run containers on a server, some of which were tightly coupled
    to specific cloud providers. Finally, while container runtimes let developers
    start up their applications, they varied widely in their support for things like
    persistent storage and networking, which often required manual configuration and
    customization.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当容器技术流行开来时，它们迅速得到了广泛应用，但它们并不是开发者们所希望的终极解决方案。服务器上的容器运行时通常需要在灵活性和安全性之间做出较大妥协。因为容器运行时需要与
    Linux 内核紧密配合，用户通常需要提升权限才能运行容器。此外，运行容器的方式有很多种，其中一些与特定的云服务提供商紧密耦合。最后，虽然容器运行时让开发者能够启动他们的应用，但它们在对持久存储和网络等方面的支持上差异很大，通常需要手动配置和定制。
- en: 'These were the problems that Joe Beda, Craig McLuckie, and Brendan Burns at
    Google were trying to solve when they built *Kubernetes*. Rather than just a means
    of running containerized applications on a server, Kubernetes evolved into what
    Google Distinguished Developer Advocate Kelsey Hightower called ”*a platform for
    building platforms*.” Kubernetes offered many benefits over running containers
    directly on a server:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这些正是 Google 的 Joe Beda、Craig McLuckie 和 Brendan Burns 在构建 *Kubernetes* 时试图解决的问题。Kubernetes
    不仅仅是一个在服务器上运行容器化应用程序的工具，它演变成了 Google 知名开发者倡导者 Kelsey Hightower 所称的“*构建平台的平台*”。与直接在服务器上运行容器相比，Kubernetes
    提供了许多优势：
- en: It provided a single flexible declarative API for describing the desired state
    of a running application – *9 instances, each using 1 gigabyte of RAM and 500
    millicores of CPU spread evenly over 3 availability zones*, for example
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它提供了一个灵活的声明式 API，用于描述正在运行的应用程序的期望状态——例如，*9 个实例，每个使用 1GB 的内存和 500 毫核的 CPU，均匀分布在
    3 个可用区*。
- en: It handled running the instances across an elastic fleet of servers complete
    with all the necessary networking and resource management
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它处理了跨弹性服务器群集运行实例的任务，并配备了所有必要的网络和资源管理。
- en: It provided a declarative way to expose cloud-provider-specific implementations
    of networking and persistent storage to container workloads
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它提供了一种声明式方式，将云服务商特定的网络和持久存储实现暴露给容器工作负载。
- en: It provided a framework for custom APIs such that any arbitrary object could
    be managed by Kubernetes
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它提供了一个框架，用于管理自定义 API，从而使 Kubernetes 可以管理任何任意对象。
- en: It shipped with developer-oriented abstractions such as Deployments, Stateful
    Sets, Config Maps, and Secrets, which handled many common use cases
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它配备了面向开发者的抽象工具，如 Deployments（部署）、Stateful Sets（有状态集）、Config Maps（配置映射）和 Secrets（密钥），这些工具处理了许多常见的用例。
- en: Many of us thought that perhaps Kubernetes was the technological advance that
    would finally solve all of our problems, but just as with each previous technology
    iteration, the solution to a particular set of problems simply exposes a new generation
    of problems.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们许多人曾认为，或许 Kubernetes 是能够最终解决所有问题的技术进步，但正如每次技术迭代一样，解决一组特定问题的方案往往会暴露出新一代的问题。
- en: 'As companies with large teams of developers began to onboard onto Kubernetes,
    these problems became increasingly pronounced. Here are some examples:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 随着拥有大规模开发团队的公司开始使用 Kubernetes，这些问题变得越来越突出。以下是一些例子：
- en: Technology sprawl took hold, with each team solving the same problem differently
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 技术蔓延逐渐成形，每个团队以不同的方式解决同样的问题。
- en: Teams had their own ops tooling and processes making it difficult to scale operations
    across applications
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各个团队拥有自己的运维工具和流程，导致很难在不同应用程序之间扩展操作。
- en: Enforcing best practices involved synchronous human-bound processes that slowed
    developer velocity
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强制执行最佳实践涉及同步的人工流程，导致开发人员的工作效率下降。
- en: Each cloud provider’s flavor of Kubernetes was slightly different, making multi-cloud
    and hybrid-cloud deployments difficult
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个云服务提供商的 Kubernetes 版本略有不同，这使得多云和混合云部署变得困难。
- en: Many of the core components of a Kubernetes Deployment – container images, for
    example – simply took existing problems and allowed developers to deploy vulnerable
    software much more quickly and widely than before, actually making the problem
    worse
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 部署的许多核心组件——比如容器镜像——只是将现有问题带到了新的层面，让开发人员比以前更快速、更广泛地部署容易受攻击的软件，实际上使问题变得更严重。
- en: Entire teams had to be spun up just to manage developer tooling and try to enforce
    some homogeneity across a wide portfolio of applications
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整个团队不得不专门成立，只为管理开发工具，并试图在众多应用程序中强制执行某种一致性。
- en: Running multiple different applications on a single Kubernetes cluster requires
    significant operator effort and investment
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在单一的 Kubernetes 集群上运行多个不同的应用程序需要大量的运维工作和投入。
- en: Alas, Kubernetes was not the panacea we had hoped it would be; rather, it was
    just another iteration of technology that moves the industry forward by solving
    one set of problems but inevitably surfacing a new set of problems. This is where
    the Tanzu team at VMware comes into the picture.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 可惜的是，Kubernetes 并不是我们希望的万灵药；它只是技术发展的又一次迭代，解决了一组问题，但不可避免地带来了新的一组问题。这就是 VMware
    Tanzu 团队登场的地方。
- en: Outcome-driven approach
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 面向结果的方法
- en: The Tanzu team at VMware came into existence just as Kubernetes was hitting
    its stride in the enterprise. VMware was poised for leadership in the space with
    the acquisition of Heptio, which brought deep Kubernetes knowledge and two of
    the original creators. It also acquired a well-honed philosophy of software delivery
    through the acquisition of Pivotal. The Tanzu team continues to deliver a thoughtful
    and nuanced Kubernetes-based application platform focused on meaningful business
    outcomes that were important to customers.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: VMware的Tanzu团队成立时，正值Kubernetes在企业中大展拳脚。凭借收购Heptio，VMware准备在该领域取得领导地位，Heptio带来了深厚的Kubernetes知识和两位原始创造者。通过收购Pivotal，VMware还获得了精细的软件交付理念。Tanzu团队继续交付一种深思熟虑且细致入微的基于Kubernetes的应用平台，专注于对客户来说重要的有意义的商业成果。
- en: 'There is no doubt that many mature Tanzu customers were facing some of the
    problems with Kubernetes mentioned in the last section, but they were also focused
    on some key outcomes, such as the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无疑问，许多成熟的Tanzu客户都面临着上一节提到的Kubernetes问题，但他们也关注一些关键成果，例如以下几点：
- en: Maximizing developer velocity, productivity, and impact
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最大化开发人员的速度、生产力和影响力
- en: Maximizing operator efficiency
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最大化运维效率
- en: Operating seamlessly across the data center and multiple cloud providers
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在数据中心和多个云提供商之间无缝操作
- en: Making software secure by default
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认情况下使软件更安全
- en: These were the outcomes Tanzu set out to achieve for customers, and in the process,
    they would take on many of the issues people were running into with Kubernetes.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是Tanzu为客户设定的成果，在这个过程中，他们也解决了许多人在使用Kubernetes时遇到的问题。
- en: The Tanzu portfolio would take an outcome-driven approach to deliver an opinionated
    Kubernetes-based cloud-native application platform that was optimized for operator
    efficiency, developer productivity, seamless multi-cloud operation, and application
    security. That is the platform that we’ll cover in this book.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Tanzu产品组合将采取以成果为驱动的方法，交付一个有明确意见的基于Kubernetes的云原生应用平台，优化运维效率、开发人员生产力、无缝的多云操作以及应用安全。这就是我们将在本书中讲解的平台。
- en: The need for VMware Tanzu
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VMware Tanzu的需求
- en: Companies with a large development footprint that were looking at or actively
    using Kubernetes faced two sources of resistance. First, they faced a myriad of
    problems running Kubernetes at scale across multiple teams. These are the problems
    listed at the end of the Kubernetes section of this chapter. Second, these teams
    were under pressure to use technology to deliver meaningful outcomes. This meant
    developers needed to be operating at their full potential with minimum friction,
    and operators needed to be able to scale across multiple teams with a unified
    set of tools. This is the outcome-driven approach described in the previous section.
    VMware Tanzu is a portfolio of tools geared specifically toward addressing both
    sets of needs for software teams.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些拥有大量开发足迹并正在考虑或积极使用Kubernetes的公司来说，面临着两种阻力。首先，他们在跨多个团队大规模运行Kubernetes时遇到了各种问题。这些问题在本章Kubernetes部分的结尾处有列出。其次，这些团队在面临着使用技术交付有意义成果的压力。这意味着开发人员需要以最小的摩擦发挥出全部潜力，而运维人员则需要能够通过一套统一的工具在多个团队中实现规模化。这就是前一节中提到的以成果为驱动的方法。VMware
    Tanzu是一个专门面向解决软件团队两方面需求的工具组合。
- en: 'This diagram highlights where VMware Tanzu fits both as the next iteration
    of software platforms on Kubernetes, as well as the integrated toolkit enabling
    world-class outcomes from software development, operations, and security engineers:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 该图展示了VMware Tanzu如何作为基于Kubernetes的软件平台的下一次迭代以及集成工具包，帮助软件开发、运维和安全工程师实现世界级成果：
- en: "![Figure 1.1 – VMware Tanzu in \uFEFFcontext](img/B18145_01_01.jpg)"
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.1 – VMware Tanzu的背景](img/B18145_01_01.jpg)'
- en: Figure 1.1 – VMware Tanzu in context
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1 – VMware Tanzu的背景
- en: Now that we’ve established the context that prompted the creation of VMware
    Tanzu, we’re ready to describe the product itself.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经确定了促使VMware Tanzu诞生的背景，接下来我们准备描述该产品本身。
- en: Features, tools, benefits, and applications of VMware Tanzu
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VMware Tanzu的功能、工具、益处和应用
- en: It is a combination of open source, proprietary, and **Software as a Service**
    (**SaaS**) offerings that work together to enable the outcomes that are important
    to software teams. These tools are tightly integrated and give developers a single
    toolset geared toward delivering important outcomes and running Kubernetes at
    scale. These tools and applications fall into three broad groups.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一组结合了开源、专有和 **软件即服务**（**SaaS**）的服务，它们协同工作，帮助软件团队实现重要的成果。这些工具紧密集成，提供一个统一的工具集，专注于交付关键成果并大规模运行
    Kubernetes。这些工具和应用程序可以分为三个大类。
- en: Build and develop
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建和开发
- en: Tools that enable developers to efficiently and reliably develop and build software
    go in this group. This includes *Application Accelerator for VMware Tanzu*, *VMware
    Tanzu Build Service*, *VMware Application Catalog*, and *API portal for* *VMware
    Tanzu*.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这组工具帮助开发人员高效、可靠地开发和构建软件。包括 *VMware Tanzu 应用加速器*、*VMware Tanzu 构建服务*、*VMware
    应用目录* 和 *VMware Tanzu API 门户*。
- en: Run
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行
- en: This group contains the tools and applications to efficiently deliver and run
    applications on an ongoing basis. It includes *Harbor*, *Tanzu Kubernetes Grid*,
    and *Tanzu* *Application Platform*.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这一组包含高效交付和持续运行应用程序的工具和应用程序。包括 *Harbor*、*Tanzu Kubernetes Grid* 和 *Tanzu* *应用平台*。
- en: Manage
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理
- en: The final group contains tools for the management of applications and the platform
    itself. It includes *Tanzu Mission Control*, *VMware Aria operations for Applications*,
    and *Tanzu* *Service Mesh*.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一组工具包含用于管理应用程序和平台本身的工具。包括 *Tanzu Mission Control*、*VMware Aria 应用操作* 和 *Tanzu*
    *服务网格*。
- en: Prerequisites
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前提条件
- en: Now that we’ve laid out the *why* and the *what* of VMware Tanzu, we’re ready
    to get our hands dirty solving some real-world problems. This book is geared toward
    software professionals, and there are some tools and concepts that this book assumes
    you know about. Don’t worry if you’re not strong across all of these areas as
    each chapter will walk you through step by step.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经阐明了 VMware Tanzu 的*原因*和*内容*，接下来我们准备深入实际解决一些真实世界的问题。本书面向软件专业人士，假设你对一些工具和概念有所了解。如果你在这些领域中某些方面不太擅长，也不用担心，因为每一章都会一步步指导你。
- en: The Linux console and tools
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linux 控制台和工具
- en: You can follow along with most chapters in this book using a Windows machine,
    but experience dictates that things work much more smoothly if you use a Mac or
    a Linux workstation. There are numerous options available for Windows users, including
    virtual machines, dual-booting into Linux, or working from a cloud-based virtual
    machine. This book assumes you are comfortable with navigating a filesystem, finding
    and viewing files, and editing them with an editor such as Vim or nano.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 Windows 机器跟随本书中的大部分章节，但经验表明，如果你使用 Mac 或 Linux 工作站，操作会更加顺畅。对于 Windows 用户，有很多选择，包括虚拟机、双系统启动
    Linux 或使用基于云的虚拟机。本书假设你能熟练操作文件系统、查找和查看文件，并使用 Vim 或 nano 等编辑器进行编辑。
- en: Docker
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker
- en: This book is heavily geared toward containers. The primary way to interact with
    APIs that build and run containers is with the Docker CLI. You will need both
    a Docker daemon and the Docker CLI to work through some of the chapters in this
    book. It assumes that you are comfortable listing container images as well as
    running containers.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 本书重点讲解容器。与构建和运行容器的 API 交互的主要方式是使用 Docker CLI。你需要同时拥有 Docker 守护进程和 Docker CLI
    来完成本书中的一些章节。假设你能熟练列出容器镜像并运行容器。
- en: Kubernetes
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubernetes
- en: Kubernetes is at the core of the Tanzu portfolio. This book assumes you can
    stand up a Kubernetes cluster locally or on a public cloud provider. It also assumes
    that you are comfortable with the kubectl CLI to interact with a Kubernetes cluster.
    Finally, you should be able to read YAML Kubernetes manifests.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 是 Tanzu 产品组合的核心。本书假设你能在本地或公共云服务商上搭建 Kubernetes 集群。还假设你熟悉 kubectl
    CLI 来与 Kubernetes 集群进行交互。最后，你应该能够阅读 YAML 格式的 Kubernetes 清单。
- en: Workstation requirements and public cloud resources
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作站要求和公共云资源
- en: Some of the tools discussed in this book can be run locally on your workstation,
    while others are better suited to the public cloud. Others require only a web
    browser and a pre-existing Kubernetes cluster.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中讨论的某些工具可以在你的工作站上本地运行，而其他一些则更适合在公共云上使用。还有一些工具只需要一个网页浏览器和一个已存在的 Kubernetes
    集群。
- en: If you want to run Tanzu Kubernetes Grid locally, a minimum of 32 gigabytes
    of RAM is strongly recommended. You may find that other tools, such as Tanzu Application
    Platform or Harbor, run best on a Kubernetes cluster provided by a public cloud
    provider. I highly recommend using the providers’ built-in budgeting tools to
    make sure that you don’t rack up an unexpected bill.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在本地运行 Tanzu Kubernetes Grid，强烈建议至少配置 32GB 的内存。你可能会发现其他工具，如 Tanzu 应用平台或 Harbor，在由公有云提供商提供的
    Kubernetes 集群上运行效果最好。我强烈建议使用这些提供商的内建预算工具，以确保你不会产生意外账单。
- en: Now that you know what you’ll need, I encourage you to find a topic of interest
    and dive in. All Packt books are organized with self-contained chapters so you
    can work through the book front-to-back or jump straight to the topics that interest
    you.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道了所需的条件，我鼓励你找到一个感兴趣的话题并深入研究。所有 Packt 出版的书籍都以独立的章节组织，你可以按顺序从头到尾阅读，也可以直接跳到你感兴趣的主题。
- en: Summary
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we gave a brief history of enterprise software and how its
    evolution set the stage for VMware Tanzu. Then, we gave a high-level overview
    of the Tanzu product itself. And finally, we covered some technical requirements
    to set you up for success in the hands-on exercises.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们简要介绍了企业软件的历史，以及其演变如何为 VMware Tanzu 的出现奠定基础。接着，我们对 Tanzu 产品本身进行了高层次的概述。最后，我们介绍了一些技术要求，帮助你在动手练习中取得成功。
- en: With all that in place, you’re free to jump to any chapter that piques your
    interest; they’re all self-contained and can be read on their own. Or, if you’re
    going in order, we’ll start at the beginning of the software development process.
    Application Accelerator for VMware Tanzu is a tool for bootstrapping a new application
    with all of the enterprise standards and approved libraries built in, giving you
    a more uniform portfolio of apps and preventing software teams from repeating
    past mistakes. Regardless of your approach to the book, we hope you enjoy the
    material, and we wish you great success putting it into practice.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在一切准备就绪后，你可以自由跳转到任何一个引起你兴趣的章节；它们都是独立的，可以单独阅读。或者，如果你按顺序进行，我们将从软件开发过程的开始讲起。VMware
    Tanzu 的应用加速器是一个用于快速构建新应用的工具，它内置了所有企业标准和已批准的库，为你提供了更统一的应用组合，防止软件团队重复过去的错误。无论你以何种方式阅读本书，我们希望你享受这些内容，并祝你在实践中取得巨大成功。

- en: '*Chapter 11*: Driving the Platform Adoption'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第11章*：推动平台采纳'
- en: By now, you might be thinking about adopting Crossplane in your organization.
    As we’ve discussed many times, we must set up a platform team to support every
    product team across the organization adopting Crossplane. But many organizations
    fail with their technology platform projects because these platforms impact the
    agility of the consuming teams in many ways. Setting up proper boundaries and
    an interaction model between the product and platform teams is key to the success
    of a platform. This chapter aims to help you understand the aspects required to
    build and adopt a successful infrastructure platform. We will also look at a few
    common pitfalls that can lead to weak platform adoption and low return on investment.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，你可能正在考虑在你的组织中采用 Crossplane。正如我们多次讨论的那样，我们必须建立一个平台团队来支持组织内每个产品团队采用 Crossplane。但许多组织在其技术平台项目上失败，因为这些平台以多种方式影响了消费团队的敏捷性。为产品团队与平台团队之间设立适当的边界和交互模型是平台成功的关键。本章旨在帮助你理解构建和采用成功基础设施平台所需的各个方面。我们还将看看一些常见的陷阱，这些陷阱可能导致平台采用不力以及投资回报低下。
- en: 'The following are the topics covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题如下：
- en: Why we need an infrastructure platform as a product
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么我们需要将基础设施平台视为产品
- en: Understanding customers’ needs
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解客户需求
- en: The platform prodcut life cycle and team interaction
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平台产品生命周期和团队互动
- en: The OAM personas
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OAM 角色
- en: In the following section, we will start with understanding why we need to approach
    infrastructure platforms as product development.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将开始理解为什么我们需要将基础设施平台视为产品开发的方式。
- en: Why we need an infrastructure platform as a product
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么我们需要将基础设施平台视为产品
- en: 'We touched on this topic a bit in [*Chapter 2*](B17830_02_ePub.xhtml#_idTextAnchor025).
    It is time to look back and see why we need a platform team to develop the Crossplane
    APIs. The following are the three key reasons:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[*第二章*](B17830_02_ePub.xhtml#_idTextAnchor025)中稍微提到了这个话题。现在是时候回顾一下，看看为什么我们需要一个平台团队来开发
    Crossplane API。以下是三个关键原因：
- en: '**Cognitive load**: Any organization will tend to use a vast amount of cloud
    resources and other external services. These resources and services consist of
    tens of thousands of attributes to configure them according to the organization’s
    requirements. Remembering the usage of each configuration attribute involves a
    significant cognitive load. Suppose we attempt to build this knowledge within
    the product team. In that case, the team will focus on technical complexity rather
    than product feature development, which is of direct business interest. If you
    look at the CNCF cloud-native landscape, it’s vast ([https://landscape.cncf.io/](https://landscape.cncf.io/)).
    Not every team can tame the terrain. It requires a specialized group to build
    this cognitive capability into the organization. Provided every product team faces
    the same situation, it makes sense to abstract this effort as a shared service
    managed by a platform team.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**认知负担**：任何组织都倾向于使用大量的云资源和其他外部服务。这些资源和服务由成千上万的配置属性组成，用以根据组织的需求进行配置。记住每个配置属性的使用涉及到巨大的认知负担。假设我们试图在产品团队内构建这些知识，那么团队将更多关注技术复杂性，而非直接与业务相关的产品功能开发。如果你看看
    CNCF 的云原生景观，它是如此庞大（[https://landscape.cncf.io/](https://landscape.cncf.io/)）。并不是每个团队都能驾驭这个领域。这需要一个专业团队将这种认知能力构建到组织中。既然每个产品团队都面临相同的情况，将这一努力抽象为由平台团队管理的共享服务是有意义的。'
- en: '**Policy management**: Infrastructure and other external services’ usage policies
    come from security, compliance, product, and architecture teams. It requires a
    centralized team to track, consolidate, and encode the policies when these resources
    are provisioned and used. It won’t be easy to keep the policies enforced and updated
    if we have these resources’ automation as part of individual product teams.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**政策管理**：基础设施和其他外部服务的使用政策来源于安全、合规、产品和架构团队。需要一个集中式团队来追踪、整合和编码这些政策，以便在这些资源被提供和使用时执行。如果我们将这些资源的自动化作为各个产品团队的一部分，保持政策的执行和更新将变得非常困难。'
- en: '**Return on investment on reuse**: Generally, many tools, architecture patterns,
    and infrastructure setup patterns look similar across the organization. This is
    because of centralized IT strategies, the cross-pollination of successful designs,
    the organization’s cognitive capability, and so on. These commonalities will translate
    into the reuse of infrastructure reference architecture. Provided we have the
    cognitive load and policy management advantages, the economics of return on investment
    with reuse is an added advantage.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**投资回报率与重用**：通常，许多工具、架构模式和基础设施设置模式在整个组织中看起来相似。这是因为集中式的IT战略、成功设计的交叉传播、组织的认知能力等因素。这些共同点将转化为基础设施参考架构的重用。只要我们拥有认知负载和政策管理的优势，重用的投资回报经济性就是一个额外的优势。'
- en: Now that we are convinced that an infrastructure platform team is required,
    the following section will explore the product teams’ expectations of the infrastructure
    platform team.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经相信需要一个基础设施平台团队，接下来的部分将探讨产品团队对基础设施平台团队的期望。
- en: Understanding customers’ needs
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解客户需求
- en: 'A platform team for infrastructure means external delivery dependency. This
    is something that is always avoided by agile product development teams. If you
    have worked in a large organization, you might have noticed that the product teams
    are often unhappy with what the platform team offers. They have issues with the
    delivery timeline, backlog coupling, and weak contracts. It is critical to set
    up a proper interaction model between the product and platform teams to mitigate
    these risks. The following are qualities that a platform team should possess to
    match the delivery expectations of product teams in the modern software engineering
    era:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对于基础设施而言，平台团队意味着外部交付依赖。这是敏捷产品开发团队始终避免的事情。如果你在大型组织中工作过，可能会注意到，产品团队常常对平台团队提供的内容不满意。他们在交付时间表、待办事项耦合以及合同弱化方面存在问题。为减轻这些风险，关键是要建立产品团队与平台团队之间的适当互动模型。以下是平台团队应具备的特质，以匹配现代软件工程时代中产品团队的交付预期：
- en: Product development practices
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品开发实践
- en: Self-service
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自助服务
- en: Collaborative backlog management
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 协同管理待办事项
- en: The following section will look at the product development engineering practices
    for the platform team.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的部分将探讨平台团队的产品开发工程实践。
- en: Product development practices
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 产品开发实践
- en: 'Adopting product development practices is a critical component that can make
    a platform team successful. The following are some of the product development
    practices for adoption:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 采用产品开发实践是使平台团队成功的关键组成部分。以下是一些可供采纳的产品开发实践：
- en: '**Quick start**: Platform usage must be made quick and straightforward. Crossplane
    being an API-based platform solves part of the problem. APIs have a clear contract,
    and they are easy to understand. But this is not enough. We must make additional
    efforts to make the platform easy to adopt. We should have a quick-start guide,
    code repositories with examples, a support system to help adopting teams, and
    extensive API documentation. More importantly, the ability to quickly start should
    be a critical metric measured and continuously improved. We can do this with continuous
    feedback cycles between the product and platform teams. The feedback should be
    from multiple sources, such as customer surveys, usage statistics of various quick-starter
    asserts, usage statistics of the platform itself, and time to adoption. There
    should be incentives for the platform team to improve these metrics continuously.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快速入门**：平台的使用必须迅速而简便。Crossplane作为一个基于API的平台，解决了部分问题。API具有明确的契约，且易于理解。但这还不够。我们必须付出额外的努力，使平台易于采用。我们应该提供快速入门指南、带有示例的代码库、支持系统以帮助采用团队，以及详细的API文档。更重要的是，快速入门能力应该是一个关键指标，并持续改进。我们可以通过产品团队与平台团队之间的持续反馈循环来实现这一目标。反馈应来自多个来源，例如客户调查、各种快速启动资源的使用统计数据、平台本身的使用统计数据以及采用时间。平台团队应不断改进这些指标，并获得激励。'
- en: '**Community of practice**: Building a community with participants from the
    platform and product teams is another essential aspect. Application operators
    could be natural participants of the community from the product team. Being close
    to the product team’s requirements, they will bring a reality check to what we
    build as APIs in the platform. Again, there should be metrics and incentives to
    run the community successfully. We can use the community in many ways, such as
    for co-creation, as knowledge carriers, for two-way feedback flow channels, and
    for accelerating adoption. We will look at some of these options in detail in
    the following sections of the chapter.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实践社区**：构建一个由平台和产品团队成员参与的社区是另一个重要方面。应用运维人员可能是产品团队的天然社区成员。由于他们与产品团队的需求紧密相连，他们能够对我们在平台上构建的API进行现实检查。同样，应该有指标和激励措施来确保社区的成功运作。我们可以通过多种方式利用社区，比如共创、作为知识载体、提供双向反馈渠道，以及加速采用。我们将在本章的后续部分详细探讨这些选项。'
- en: '**Composable APIs**: One of the critical challenges with technology platforms
    is that they enforce a particular way of development that hinders innovation.
    The platform should have a basic set of fine-grained XRs, above which we can quickly
    compose the claim recipes required by the product team. It is recommended to have
    two-layered APIs. The first layer should have fine-grained XRs composing organization-centralized
    policies, and the following layer should be the recipe layer, composing product-level
    policies and requirements. We could have a basic set of reused recipes used across
    the organization and leave space for the community to innovate new recipes. Some
    organization setups may require Goldilocks governance to avoid the community’s
    proliferation of too many new recipes.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可组合的API**：技术平台面临的一个关键挑战是，它们强制采用某种开发方式，限制了创新。平台应该有一套基本的精细化XRs，在此基础上，我们可以快速组合出产品团队所需的claim配方。建议使用两层API。第一层应该有精细化的XRs，组合组织集中管理的策略；第二层应该是配方层，组合产品级的策略和需求。我们可以有一套组织内通用的基础配方，并为社区留出空间，创新新的配方。一些组织架构可能需要金发女孩治理（Goldilocks
    governance），以避免社区中过多新配方的泛滥。'
- en: Information
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 信息
- en: Goldilocks architecture governance has gained traction in modern software engineering
    practices where a balanced approach is taken between governance and flexibility.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 金发女孩治理架构在现代软件工程实践中逐渐获得关注，它在治理与灵活性之间采取了平衡的方式。
- en: In the following section, we will cover the self-service aspect of platform
    engineering.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将讨论平台工程中的自助服务方面。
- en: Self-service
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自助服务
- en: Self-service is one of the critical aspects of building a platform. Think about
    how any cloud provider works. We have the console and the APIs to create/operate
    the resource required. It’s an entirely self-service model where users can manage
    resources according to their permissions. A refined resource granularity in a
    cloud provider environment will work for any organization and personas. We must
    have a similar experience for our platform as well. With Crossplane being an API-based
    resource composing platform, part of the problem is already solved. But we must
    put a lot of thought into defining the scope and granularity of the XR/claim APIs
    that the product teams will consume. What level of granularity will work for your
    organization is a crucial question to ask. It may depend on the organization’s
    size, the team boundaries, the technical maturity of the developers/platform team,
    and so on. Defining wrong boundaries will derail the self-service agenda.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 自助服务是构建平台的关键方面之一。想一想任何云服务提供商是如何运作的。我们有控制台和API来创建/操作所需的资源。这是一个完全自助的模型，用户可以根据自己的权限管理资源。在云服务提供商环境中，精细的资源粒度适用于任何组织和角色。我们必须为我们的平台也提供类似的体验。由于Crossplane是一个基于API的资源组合平台，部分问题已经得到解决。但我们必须深入思考，定义产品团队将要使用的XR/claim
    API的范围和粒度。确定适合你们组织的粒度级别是一个至关重要的问题。这可能取决于组织的规模、团队边界、开发者/平台团队的技术成熟度等等。定义错误的边界将会破坏自助服务的目标。
- en: Getting the boundary perfect at first is difficult. It keeps on improving in
    iterations by measuring the self-service metrics. In addition to API boundaries,
    we need to focus on the quick-start guide, technical support system, and building
    community, as discussed earlier, to enable self-service further. The whole experience
    should be like how a successful cloud provider platform works. The only difference
    is that we operate on a higher level of abstraction to tame the complexity.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一开始精准确定边界是很难的。通过衡量自助服务指标，它会在迭代中不断改进。除了 API 边界外，我们还需要关注快速入门指南、技术支持系统和构建社区，正如前面所讨论的，以进一步促进自助服务。整个体验应该类似于一个成功的云服务平台的运作。唯一的区别是我们在更高的抽象层次上操作，以应对复杂性。
- en: Collaborative backlog management
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 协同待办事项管理
- en: 'A single centralized platform team serving multiple internal teams within the
    organization is not a fun place to work. We must manage the backlog to satisfy
    everyone’s needs. There will be continuous requests from every direction to enhance
    an existing XR/claim or create a new one. We may end up in many unwanted situations,
    such as constant delivery pressure on the platform team, impact on the product
    team’s delivery throughput, or frustrated product teams developing the capability
    locally. The following are some of the ways to mitigate these risks:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一个服务于组织内部多个团队的单一集中平台团队并不是一个愉快的工作场所。我们必须管理待办事项，以满足每个人的需求。来自各方面的持续请求将要求增强现有的 XR/声明或创建新的功能。我们可能会陷入许多不希望出现的情况，例如平台团队的持续交付压力、对产品团队交付吞吐量的影响，或是产品团队在本地开发能力时的沮丧。以下是一些缓解这些风险的方法：
- en: '**Backlog prioritization**: Score each backlog item with metrics such as time
    criticality, missed opportunity, and short-/long-term business value, in a prioritization
    session. Document the reason for each score for visibility. All product teams
    with backlog items should be actively involved in the prioritization session.
    There could be a tendency that each product team tries to push their score up
    in the prioritization sessions. We can tackle that with a scoring slider where
    a total score is set on a metric, and the sum of the scores for each backlog should
    not exceed the set value.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**待办事项优先级排序**：在优先级排序会议中，根据时间紧急性、错失机会以及短期/长期业务价值等指标为每个待办事项评分。记录每个评分的理由，以便查看。所有拥有待办事项的产品团队应积极参与优先级排序会议。在优先级排序会议中，每个产品团队可能会试图提高自己的评分。我们可以通过评分滑块来解决这个问题，在该滑块上设置一个总分值，且每个待办事项的评分总和不得超过设定值。'
- en: '**Expectation management**: Product teams are waiting for their backlog to
    be delivered, and they should be treated like end customers. It’s essential to
    set expectations for the customers on when and what they can expect. Use Scrum
    of Scrums or any other scale agile framework to find a way to provide regular
    updates. Provide an update on the progress and the delivery date. Be open and
    transparent about any delayed delivery.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**期望管理**：产品团队在等待他们的待办事项交付，他们应当像最终客户一样对待。为客户设定期望非常重要，明确他们可以期待的交付时间和内容。使用 Scrum
    of Scrums 或任何其他大规模敏捷框架来找到提供定期更新的方法。提供进展和交付日期的更新，公开并透明地说明任何交付延迟。'
- en: '**Community and governance**: Look at how open source projects such as Kubernetes
    and Crossplane work. They also face the same situation where there is a lot of
    expectation from many users for new features, enhancements, and bug fixes. These
    projects were initially started with a few focused developers. When the product
    moves from the alpha-beta stage to general availability, many customers start
    adopting it. At this point, managing the backlog becomes critical. These open
    source projects scale up the delivery velocity by building a solid community around
    them. Development activities by the community are governed by technical steering
    groups filled with core contributors. We could adopt the same model in the internal
    product as well. As we have said already, application operators close to the product
    team can be naturally attracted to the community. Product teams with pressing
    needs can allocate their application operator to co-create the product.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**社区和治理**：看看像Kubernetes和Crossplane这样的开源项目是如何运作的。它们同样面临着许多用户对新特性、增强功能和修复漏洞的期待。这些项目最初由少数专注的开发者启动。当产品从α-β阶段转向正式发布时，许多客户开始采纳它。此时，管理待办事项变得至关重要。这些开源项目通过围绕它们建立一个强大的社区来加速交付速度。社区的开发活动由技术指导小组管理，技术指导小组由核心贡献者组成。我们也可以在内部产品中采纳相同的模型。正如我们已经提到的，靠近产品团队的应用运维人员会自然地被吸引到社区中。面临紧迫需求的产品团队可以分配他们的应用运维人员来共同创建产品。'
- en: In the following section, we will investigate various stages of platform API
    development and how they impact the interaction between the platform team and
    the product team.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将探讨平台API开发的各个阶段，以及它们如何影响平台团队与产品团队之间的互动。
- en: The platform product life cycle and team interaction
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 平台产品生命周期和团队互动
- en: 'We may start our Crossplane API development as a small proof of concept working
    with one of the product teams. Later, when we are comfortable with the proof of
    concept, we will release an alpha version asking a few teams to consume and test
    it. Again, when we are satisfied with the alpha version, we will ask a few more
    sections of the organization to adopt and go live with the API. If everything
    goes well, we can move the API to general availability to be consumed by anyone
    in the organization. It will not end there. Sometimes, we will have the requirement
    to deprecate the APIs and mark them for removal in the future. The following figure
    represents the API journey:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能会从一个小规模的概念验证开始，与其中一个产品团队合作。随后，当我们对概念验证感到满意时，我们将发布α版本，邀请一些团队来使用和测试它。同样，当我们对α版本满意时，我们将邀请更多组织部分采用并上线该API。如果一切顺利，我们可以将API发布到正式版本，供组织中的任何人使用。但事情不会就此结束。有时，我们会有需求将某些API弃用，并标记它们在未来移除。下图展示了API的生命周期：
- en: '![Figure 11.1 – Crossplane API life cycle'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.1 – Crossplane API生命周期'
- en: '](img/B17830_11_01.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17830_11_01.jpg)'
- en: Figure 11.1 – Crossplane API life cycle
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.1 – Crossplane API生命周期
- en: Every API may not go through all the phases mentioned. It may take its own path,
    moving from left to right and skipping some stages depending on the situation.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 每个API可能并不会经历所有提到的阶段。它可能根据情况走自己的路，从左到右移动并跳过某些阶段。
- en: Information
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: Sometimes, we may move directly to the deprecated state from alpha or beta if
    we find no business value or technical feasibility.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，如果我们发现没有业务价值或技术可行性，我们可能会直接从α或β阶段移动到弃用状态。
- en: 'Each step requires a different engagement model and developer capability. The
    following list describes each of the life cycle phases:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 每个步骤都需要不同的参与模型和开发者能力。以下列表描述了生命周期的各个阶段：
- en: '**Proof of concept and alpha stages**: Two things are essential to consider
    at these stages. First, the interaction model between the product and platform
    teams should be collaboration. This means both teams should work closely together
    as much as possible. The capability of the developers involved should be rapid
    innovators. We don’t need the API to be scalable or reliable at this point. Our
    only aim should be to experiment with the feasibility and value as quickly as
    possible.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**概念验证和α阶段**：在这些阶段，有两件事是至关重要的。首先，产品团队和平台团队之间的互动模型应是合作模式。这意味着两个团队应该尽可能紧密地合作。参与的开发者能力应是快速创新者。在这一阶段，我们不需要API具备可扩展性或可靠性。我们的唯一目标应该是尽快实验其可行性和价值。'
- en: '**Beta stage**: This stage should continue the collaborative work format, but
    we should slowly move toward self-service. The product teams should be able to
    request access to the new API using some self-service portal and start using it.
    Creating self-service artifacts should be performed at this stage. The platform
    team should perfect the self-service portal and API in close collaboration with
    the product team. The capability of the developers involved should be a mix of
    rapid innovators and people who can bring stability/reliability. Our aim should
    be to get ready for organization usage.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Beta 阶段**：这个阶段应当继续采用协作工作模式，但我们应该逐渐过渡到自助服务。产品团队应能够通过某个自助服务门户请求访问新的 API 并开始使用它。创建自助服务工件应当在此阶段进行。平台团队应与产品团队密切合作，完善自助服务门户和
    API。参与的开发人员应当具备快速创新的能力，同时能够带来稳定性和可靠性。我们的目标是为组织使用做好准备。'
- en: '**General availability**: This is the stage of organization-wide usage. Two
    key aspects are being entirely self-service and having a stable and reliable API.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**正式发布**：这是组织范围内使用的阶段。两个关键方面是完全自助服务和拥有稳定可靠的 API。'
- en: '**Depreciation and removal stage**: Sometimes, we need to deprecate and remove
    support for an API. Pushing the product team to get rid of the API usage is not
    easy because they are stuck with their priority. The platform team should use
    the facilitating interaction model to execute the activity. The platform developers
    perform the actual work for the product team to get rid of an API. Again, the
    platform developers at this stage are required to be rapid innovators.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**弃用和移除阶段**：有时，我们需要弃用并移除对某个 API 的支持。推动产品团队摆脱 API 的使用并不容易，因为他们被优先事项所束缚。平台团队应当使用促进交互模型来执行这一活动。平台开发人员为产品团队实际执行移除
    API 的工作。在这个阶段，平台开发人员需要具备快速创新的能力。'
- en: Acknowledgment
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 致谢
- en: Many of the concepts we discussed in this chapter are influenced by the ideas
    found in [https://teamtopologies.com/](https://teamtopologies.com/), Evan Bottcher’s
    work on platform engineering ([https://martinfowler.com/articles/talk-about-platforms.html](https://martinfowler.com/articles/talk-about-platforms.html)),
    and finally, some experience in implementing these concepts at work.
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 本章讨论的许多概念受到以下来源的影响：[https://teamtopologies.com/](https://teamtopologies.com/)、Evan
    Bottcher 在平台工程方面的工作（[https://martinfowler.com/articles/talk-about-platforms.html](https://martinfowler.com/articles/talk-about-platforms.html)），以及一些在工作中实施这些概念的经验。
- en: 'The following diagram represents the preceding API stages and the team interaction
    model discussed:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表展示了前述的 API 阶段和团队交互模型：
- en: '![Figure 11.2 – API stages and team interaction model'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.2 – API 阶段和团队交互模型'
- en: '](img/B17830_11_02.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17830_11_02.jpg)'
- en: Figure 11.2 – API stages and team interaction model
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.2 – API 阶段和团队交互模型
- en: This takes us to the end of the platform life cycle discussion. In the following
    section, we will look at the **Open Application Model** (**OAM**) specification
    to take some inspiration for the organization-level team structure from the perspective
    of platform engineering.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这标志着平台生命周期讨论的结束。在接下来的部分，我们将探讨**开放应用模型**（**OAM**）规范，从平台工程的角度获取一些关于组织级团队结构的灵感。
- en: The OAM personas
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OAM 角色
- en: 'We’ve touched upon OAM specifications several times throughout this book. We
    will refresh the same topic from the perspective of organizational structure.
    We will take some inspiration from the OAM model to organize the platform and
    its ecosystem. OAM proposes the following three personas to deploy and manage
    cloud-native applications:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本书中多次提到 OAM 规范。我们将从组织结构的角度刷新这一话题。我们将从 OAM 模型中汲取灵感，组织平台及其生态系统。OAM 提出了以下三种角色来部署和管理云原生应用：
- en: '**Application developer**: Concentrates on application development, keeping
    the entire emphasis on developing features that add value to customers directly.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用开发人员**：专注于应用程序开发，始终将重点放在开发能够直接为客户带来价值的功能上。'
- en: '**Application operator**: Offloads the complexity of configuring the applications
    in the cloud-native ecosystem from application developers. Enables the application
    development team to move faster with feature development. Application operators
    contribute to the end consumer indirectly.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用操作员**：将配置云原生生态系统中的应用程序的复杂性从应用开发人员身上卸载下来。使应用开发团队能够在功能开发方面更快推进。应用操作员间接地为最终消费者做出贡献。'
- en: '**Infrastructure operator**: Offloads the complexity of configuring the cloud,
    other infrastructure, and services across the organization. It allows the application
    operator to focus on configuring and operating the application.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基础设施操作员**：将配置云、其他基础设施和服务的复杂性从组织中卸载出去。它使得应用程序操作员能够专注于配置和操作应用程序。'
- en: 'Overlapping the OAM personas and other concepts we learned in this chapter,
    we could structure the platform team and its ecosystem as illustrated in the following
    diagram:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 将OAM角色和我们在本章中学习的其他概念进行重叠，我们可以按照以下示意图来构建平台团队及其生态系统：
- en: '![Figure 11.3 – Platform ecosystem'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.3 – 平台生态系统'
- en: '](img/B17830_11_03.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17830_11_03.jpg)'
- en: Figure 11.3 – Platform ecosystem
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.3 – 平台生态系统
- en: 'The following aspects explain the team constructs represented in the preceding
    diagram:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 以下方面解释了前面示意图中表示的团队构成：
- en: The organization *x* is split into multiple products.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组织*x*被拆分成多个产品。
- en: Each product is divided into multiple Scrum teams handling different subdomains.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个产品被拆分为多个Scrum团队，处理不同的子领域。
- en: One or more application operators support configuring and operating all applications
    from a given product.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个或多个应用程序操作员支持配置和操作给定产品的所有应用程序。
- en: The platform team acts as a cross-cutting service to support all product teams
    for infrastructure, service, and application automation.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平台团队作为一个跨职能服务，支持所有产品团队进行基础设施、服务和应用程序的自动化。
- en: The platform team and application operator form the community to support activities
    such as co-creation and accelerating adoption.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平台团队和应用程序操作员共同形成社区，支持共创和加速采用等活动。
- en: We could explore more models to structure the platform and its ecosystem. But
    the core idea is to manage the platform development as a product engineering practice
    treating all internal consumers as customers.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以探索更多模型来构建平台及其生态系统。但核心思想是将平台开发作为一种产品工程实践，视所有内部用户为客户来进行管理。
- en: Summary
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We started the book with an idea to support cloud-native architects, platform
    engineers, infrastructure operators, and application operators interested in simplifying
    infrastructure, application, and service automation with the Kubernetes APIs.
    Throughout the book, we’ve covered different aspects of building a fully declarative
    self-service control plane to automate infrastructure, applications, and services
    using Crossplane and Kubernetes. I hope you learned about the required concepts
    while having fun. Let’s together take software engineering in to a new era.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 本书一开始的目的是支持云原生架构师、平台工程师、基础设施操作员和应用程序操作员，他们希望通过Kubernetes APIs简化基础设施、应用程序和服务的自动化。在整本书中，我们涵盖了构建完全声明式自服务控制平面以自动化基础设施、应用程序和服务的不同方面，使用的工具有Crossplane和Kubernetes。我希望你在学习这些必要的概念的同时，也能享受过程。让我们一起将软件工程带入新的时代。

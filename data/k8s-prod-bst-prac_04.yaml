- en: '*Chapter 4*: Managing Cluster Configuration with Ansible'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第4章*：使用Ansible管理集群配置'
- en: In [*Chapter 3*](B16192_03_Final_PG_ePub.xhtml#_idTextAnchor073), *Provisioning
    Kubernetes Clusters Using AWS and Terraform*, you learned how to create a Kubernetes
    infrastructure with Terraform and AWS, and you also learned how to develop infrastructure
    as code and provisioned your first production-like cluster.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第3章*](B16192_03_Final_PG_ePub.xhtml#_idTextAnchor073)，*使用AWS和Terraform部署Kubernetes集群*中，你学习了如何使用Terraform和AWS创建Kubernetes基础设施，并且学会了如何开发基础设施即代码，并为你的第一个生产类集群进行了部署。
- en: This was just the first step towards building operational and production-ready
    Kubernetes clusters. By now, you should have an up-and-running cluster with Terraform
    infrastructure modules to provision other similar clusters.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是构建可操作和生产就绪的Kubernetes集群的第一步。到目前为止，你应该已经有一个运行中的集群，并且通过Terraform基础设施模块来部署其他类似的集群。
- en: These clusters are still plain; they're not configured or optimized to run production
    workloads. To make these clusters fully operational, we simply need to deploy
    and configure the required Kubernetes services for them.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这些集群仍然是普通的，它们没有经过配置或优化以运行生产工作负载。为了让这些集群完全可用，我们只需要部署和配置所需的Kubernetes服务。
- en: In this chapter, you will design and develop a configuration management solution
    that you can use to manage the configuration of Kubernetes clusters and their
    supporting services. This solution is automated and scalable, and it requires
    a minimum effort to maintain and operate.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将设计并开发一个配置管理解决方案，用于管理Kubernetes集群及其支持服务的配置。该解决方案是自动化和可扩展的，且需要最小的维护和操作工作量。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Understanding Kubernetes configuration management challenges
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解Kubernetes配置管理的挑战
- en: Designing a configuration management solution for Kubernetes
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Kubernetes设计配置管理解决方案
- en: Developing a configuration management solution with Ansible
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Ansible开发配置管理解决方案
- en: Applying the solution to configure Kubernetes clusters
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用该解决方案配置Kubernetes集群
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In addition to the tools that you installed in [*Chapter 3*](B16192_03_Final_PG_ePub.xhtml#_idTextAnchor073),
    *Provisioning Kubernetes Clusters Using AWS and Terraform*, you will need to install
    the following tools:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 除了你在[*第3章*](B16192_03_Final_PG_ePub.xhtml#_idTextAnchor073)，*使用AWS和Terraform部署Kubernetes集群*中安装的工具外，你还需要安装以下工具：
- en: '`python3`'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`python3`'
- en: '`pip3`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pip3`'
- en: '`virtualenv`'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`virtualenv`'
- en: I will go into the specifics of these tools' installation and configuration
    in the next section. If you already know how to do this, you can go ahead and
    set them up now.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在下一节中详细讲解这些工具的安装和配置。如果你已经知道如何操作，可以直接开始安装它们。
- en: You need to have an up-and-running Kubernetes cluster as per the instructions
    in [*Chapter 3*](B16192_03_Final_PG_ePub.xhtml#_idTextAnchor073), *Provisioning
    Kubernetes Clusters Using AWS and Terraform*.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要根据[*第3章*](B16192_03_Final_PG_ePub.xhtml#_idTextAnchor073)，*使用AWS和Terraform部署Kubernetes集群*中的说明，拥有一个运行中的Kubernetes集群。
- en: The code for this chapter is located at [https://github.com/PacktPublishing/Kubernetes-in-Production-Best-Practices/tree/master/Chapter04](https://github.com/PacktPublishing/Kubernetes-in-Production-Best-Practices/tree/master/Chapter04).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码位于 [https://github.com/PacktPublishing/Kubernetes-in-Production-Best-Practices/tree/master/Chapter04](https://github.com/PacktPublishing/Kubernetes-in-Production-Best-Practices/tree/master/Chapter04)。
- en: 'Check out the following link to see the Code in Action video:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下链接，观看《代码实战》视频：
- en: '[https://bit.ly/3cGtqjx](https://bit.ly/3cGtqjx)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://bit.ly/3cGtqjx](https://bit.ly/3cGtqjx)'
- en: Installing the required tools
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装所需工具
- en: '`python3`, `pip3`, and `virtualenv` are the prerequisites to execute the Ansible
    configuration playbooks that we will develop in this chapter. If you do not have
    these tools installed on your system, you can follow these instructions:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`python3`、`pip3`和`virtualenv`是执行我们将在本章中开发的Ansible配置剧本的先决条件。如果你的系统上没有这些工具，你可以按照以下说明安装：'
- en: 'Execute the following commands to install `python3`, `pip3`, and `virtualenv`
    on Ubuntu Linux:'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行以下命令在Ubuntu Linux上安装`python3`、`pip3`和`virtualenv`：
- en: '[PRE0]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Execute the following commands to install `python3`, `pip3`, and `virtualenv`
    on Amazon Linux 2:'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行以下命令在Amazon Linux 2上安装`python3`、`pip3`和`virtualenv`：
- en: '[PRE1]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Execute the following commands to install `python3`, `pip3`, and `virtualenv`
    on macOS:'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行以下命令在macOS上安装`python3`、`pip3`和`virtualenv`：
- en: '[PRE2]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Execute the following commands to install `python3`, `pip3`, and `virtualenv`
    on Windows:'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行以下命令以在 Windows 上安装 `python3`、`pip3` 和 `virtualenv`：
- en: '[PRE3]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: By installing `python3`, `pip3`, and `virtualenv`, you will be able to execute
    Ansible playbooks against your Kubernetes clusters. You will learn how to do that
    later in this chapter, but first, we need to go through the design details of
    our Kubernetes configuration management solution.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 通过安装`python3`、`pip3`和`virtualenv`，你将能够在 Kubernetes 集群上执行 Ansible playbook。你将在本章后续部分学习如何操作，但首先，我们需要了解
    Kubernetes 配置管理解决方案的设计细节。
- en: Implementation principles
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现原则
- en: 'In [*Chapter 1*](B16192_01_Final_PG_ePub.xhtml#_idTextAnchor014), *Introduction
    to Kubernetes Infrastructure and Production-Readiness*, you learned about the
    infrastructure design principles that we will follow in this book. I would like
    to start this chapter by highlighting the notable principles that influenced the
    configuration management solution and the technical decisions in this chapter:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第一章*](B16192_01_Final_PG_ePub.xhtml#_idTextAnchor014)《Kubernetes 基础设施与生产就绪性介绍》中，你了解了本书中将遵循的基础设施设计原则。我想通过强调那些影响本章配置管理解决方案和技术决策的关键原则来开始这一章：
- en: '**Everything as code**: In this chapter, we will keep our commitment to having
    everything in the infrastructure as code – cluster configuration is not an exception.
    You will use Ansible to achieve this goal by creating a configuration management
    solution for your Kubernetes cluster.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一切皆代码**：在本章中，我们将坚持将基础设施的一切都作为代码——集群配置也不例外。你将通过使用 Ansible 创建一个 Kubernetes
    集群的配置管理解决方案来实现这一目标。'
- en: '**Automation**: In the previous chapter, we used Terraform tool to automate
    infrastructure provisioning. We designed a solution around Terraform that can
    scale to serve a growing number of clusters without the need to scale up your
    infrastructure teams. Here, you will create a similar solution to manage the Kubernetes
    configuration while keeping it automated, scalable, and easy to operate and maintain.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化**：在上一章中，我们使用了 Terraform 工具来自动化基础设施的配置。我们围绕 Terraform 设计了解决方案，可以在无需扩展基础设施团队的情况下，支持越来越多的集群。在这里，你将创建一个类似的解决方案来管理
    Kubernetes 配置，同时保持其自动化、可扩展性，并易于操作和维护。'
- en: '**Simplicity**: Ansible fulfills this principle in many aspects as it is easy
    to learn and to use. It has a simple syntax compared to other configuration management
    tools. It uses YAML, which you do not need to learn a programming language to
    write. Moreover, it is agentless, which means you do not need a server to run
    it, as you can run Ansible from your computer. Also, it is modular, which enables
    separation of concerns and code reusability, which is similar to Terraform. So,
    they can easily live together and simplify the automation of the infrastructure.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简洁性**：Ansible 在许多方面实现了这一原则，因为它容易学习和使用。与其他配置管理工具相比，它的语法简单。它使用 YAML，写它时不需要学习编程语言。此外，它是无代理的，这意味着你不需要服务器来运行它，可以直接从你的计算机运行
    Ansible。它还是模块化的，这使得关注点分离和代码重用成为可能，这与 Terraform 相似。因此，它们可以轻松地共存，简化基础设施的自动化。'
- en: Kubernetes configuration management
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes 配置管理
- en: The beauty of Kubernetes is that every part of it is abstracted as an object
    that can be managed and configured declaratively with YAML or JSON through its
    API server. This makes Kubernetes configuration easier to manage as code. However,
    it is still challenging to manage this configuration when you have groups of clusters
    that run hundreds of add-ons and services.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 的美在于它的每个部分都被抽象为一个对象，可以通过其 API 服务器使用 YAML 或 JSON 进行声明式管理和配置。这使得 Kubernetes
    配置更容易作为代码进行管理。然而，当你有多个集群，且这些集群运行着数百个附加组件和服务时，管理这些配置依然是一个挑战。
- en: 'Imagine a scenario where you manage a company''s infrastructure with Kubernetes,
    and you have multiple clusters for development, testing, and production. Add to
    them the cluster add-ons that run on the Kubernetes services layer as per the
    following diagram:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在管理一个公司使用 Kubernetes 的基础设施，并且你有多个集群用于开发、测试和生产。再加上 Kubernetes 服务层运行的集群附加组件，如下图所示：
- en: '![Figure 4.1 – Kubernetes infrastructure layers'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.1 – Kubernetes 基础设施层次'
- en: '](img/B16192_04_001.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16192_04_001.jpg)'
- en: Figure 4.1 – Kubernetes infrastructure layers
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.1 – Kubernetes 基础设施层次
- en: This means that you can have *N* clusters with a growing number of add-ons and
    different environment types, such as development, QA, and production. If we put
    these together, we end up with a complex and redundant configuration to manage.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你可以拥有*N*个集群，并且随着附加组件数量的增加以及不同环境类型（如开发、QA 和生产）的变化，配置也会越来越复杂。如果我们将这些因素结合起来，就会面临一个复杂且冗余的配置管理问题。
- en: The recommended way to manage clusters' configuration is through **Configuration
    as Code** (**CaC**). We will deploy these services and add-ons to the cluster
    and add their configuration manifests to the source code control. By adopting
    this pattern, you will be able to redeploy the same configuration in a seamless
    and automated fashion to your clusters. This solution appears to be easy when
    you start with a single cluster, but it will be difficult to maintain and scale
    when provisioning multiple clusters with different configuration values.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 管理集群配置的推荐方式是通过**配置即代码**（**CaC**）。我们将把这些服务和附加组件部署到集群中，并将它们的配置清单添加到源代码控制中。通过采用这种模式，你将能够以无缝和自动化的方式重新部署相同的配置到集群中。当你从单个集群开始时，这种解决方案看起来很简单，但当需要为多个集群提供不同配置值时，它将变得难以维护和扩展。
- en: This leads us to an enhanced solution, which is configuration templating. Let's
    assume you have a group of clusters that serve product X, and these clusters have
    different configurations, such as different users' authentication and authorization,
    namespaces, resource quotas, and so on.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这促使我们提出了一种增强的解决方案，即配置模板化。假设你有一组集群用于产品 X，这些集群有不同的配置，比如不同的用户认证与授权、命名空间、资源配额等。
- en: This solution uses Ansible templating and Jinja2\. You write the templates for
    the Kubernetes manifests once, and then Ansible substitutes the variables in these
    templates and generates the appropriate manifests for each target cluster. This
    solution is scalable and easy to maintain, and it fulfills the infrastructure
    design principles that we introduced in [*Chapter 1*](B16192_01_Final_PG_ePub.xhtml#_idTextAnchor014),
    *Introduction to Kubernetes Infrastructure and Production-Readiness*.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这个解决方案使用了 Ansible 模板和 Jinja2。你只需编写一次 Kubernetes 清单的模板，然后 Ansible 会在这些模板中替换变量，为每个目标集群生成相应的清单。这个解决方案具有可扩展性且易于维护，并且满足我们在[*第
    1 章*](B16192_01_Final_PG_ePub.xhtml#_idTextAnchor014)《Kubernetes 基础设施与生产就绪介绍》中提出的基础设施设计原则。
- en: Kubernetes configuration management workflow
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubernetes 配置管理工作流程
- en: 'After considering the preceding templating solution, our Kubernetes configuration
    management workflow looks like the following:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在考虑了前述的模板化解决方案后，我们的 Kubernetes 配置管理工作流程如下所示：
- en: Create Ansible Jinja2 templates for the Kubernetes cluster services that you
    want to configure and deploy.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为你想要配置和部署的 Kubernetes 集群服务创建 Ansible Jinja2 模板。
- en: Define the values of the variables and categorize them based on the environments
    and the cluster's group.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义变量的值，并根据环境和集群组对其进行分类。
- en: Provisioning the clusters with Terraform.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Terraform 进行集群的配置。
- en: Pass the Terraform outputs to Ansible.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 Terraform 输出传递给 Ansible。
- en: Substitute the variables in the Ansible template with the corresponding values.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 Ansible 模板中的变量替换为相应的值。
- en: Use Ansible to apply the Kubernetes manifests to the target clusters.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Ansible 将 Kubernetes 清单应用到目标集群。
- en: In the next sections, we will implement this workflow with Ansible and Jinja2
    templates, then learn how to use it with a basic example.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将使用 Ansible 和 Jinja2 模板来实现这个工作流程，然后通过一个基本示例来学习如何使用它。
- en: Configuration management with Ansible
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Ansible 进行配置管理
- en: 'In this chapter, we will use Ansible as the configuration management tool,
    and we will build around it our solution for Kubernetes configuration management.
    In this section, we are going to briefly discuss the reasoning behind this choice,
    and some Ansible key concepts. If you are willing to learn more about Ansible,
    you can use its official guide here: [https://www.ansible.com/resources/get-started](https://www.ansible.com/resources/get-started).'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用 Ansible 作为配置管理工具，并围绕它构建我们的 Kubernetes 配置管理解决方案。在本节中，我们将简要讨论选择 Ansible
    的理由以及一些 Ansible 的关键概念。如果你想深入了解 Ansible，可以访问其官方指南：[https://www.ansible.com/resources/get-started](https://www.ansible.com/resources/get-started)。
- en: Why Ansible?
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为什么选择 Ansible？
- en: When it comes to templating Kubernetes configuration, we have battle-tested
    tools. Most notable among them are Ansible and Helm, and both of them have pros
    and cons. But I am not here to run a full comparison between them. My decision
    is based on having used both tools in serving production environments, and also
    our specific use case here. When it comes to pure configuration management and
    templating, Ansible remains the strongest contender. While Helm supports templating,
    it remains more like a Kubernetes package manager than a full configuration management
    tool. This is why we decided to use Ansible to develop a configuration management
    solution for Kubernetes infrastructure.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到 Kubernetes 配置模板化时，我们有经过实践验证的工具。最著名的工具是 Ansible 和 Helm，它们各有优缺点。但我这里并不是要做它们的全面对比。我做出选择的依据是曾经在生产环境中使用过这两个工具，以及我们的具体用例。当涉及到纯粹的配置管理和模板化时，Ansible
    仍然是最强的竞争者。虽然 Helm 支持模板化，但它更像是一个 Kubernetes 包管理工具，而不是一个完整的配置管理工具。这就是我们决定使用 Ansible
    来开发 Kubernetes 基础设施配置管理解决方案的原因。
- en: What is Ansible?
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 什么是 Ansible？
- en: Ansible is an automation and **configuration management** (**CM**) tool. It
    can configure systems, deploy applications and containers, and provision cloud
    resources. It can orchestrate advanced tasks such as continuous deployments and
    rolling updates.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 是一款自动化和**配置管理（CM）**工具。它可以配置系统，部署应用和容器，及配置云资源。它能够协调高级任务，如持续部署和滚动更新。
- en: In this book, we are not going to dig deep into Ansible's features and use cases.
    We believe that there are a lot of good books dedicated to this purpose; our main
    focus is on how to use Ansible to solve Kubernetes' CM problem in a simple and
    efficient way.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们不会深入探讨 Ansible 的特性和使用案例。我们认为有很多优秀的书籍专门讨论这个主题；我们的主要关注点是如何以简单且高效的方式使用 Ansible
    来解决 Kubernetes 的配置管理（CM）问题。
- en: Ansible key concepts
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Ansible 关键概念
- en: 'The CM solution that we will implement and use in this book is built with key
    Ansible concepts. I will not dive deep into these concepts; rather, I will provide
    brief details about them, as well as highlight how we will utilize each one of
    them in our CM framework:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中我们将实施并使用的配置管理解决方案是基于 Ansible 的关键概念构建的。我不会深入讲解这些概念，而是简要说明它们，并突出我们将如何在配置管理框架中使用它们。
- en: '**Inventory**: This is used by Ansible to group similar hosts into groups.
    This is accomplished by defining the inventory files with the addresses of the
    hosts.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**清单（Inventory）**：Ansible 用来将相似的主机分组。通过定义包含主机地址的清单文件来实现这一点。'
- en: '**Modules**: This is how Ansible abstracts and groups a specific task to be
    reused against your host''s inventories; modules can even be made public and used
    by other Ansible users. In our solution, we will use one of the ready-made Kubernetes
    modules to execute configuration manifests against the clusters.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模块（Modules）**：这是 Ansible 如何抽象并将特定任务分组，以便在你的主机清单上重复使用；模块甚至可以公开，并被其他 Ansible
    用户使用。在我们的解决方案中，我们将使用一个现成的 Kubernetes 模块来对集群执行配置清单。'
- en: '**Tasks**: This is where we instruct Ansible about the steps that it should
    do; it could be installing a piece of software or provisioning a whole system.
    In our solution, we will create a separate task to configure each Kubernetes component
    and add-on on its own.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**任务（Tasks）**：这是我们指示 Ansible 执行步骤的地方；它可能是安装一款软件或配置一个完整的系统。在我们的解决方案中，我们将为每个
    Kubernetes 组件和插件创建一个单独的任务。'
- en: '**Playbooks**: These are the building blocks of Ansible. They are used to gather
    everything together and provide a sequence of instructions that involves other
    Ansible blocks, such as tasks, variables, and modules. They then instruct Ansible
    on how to configure the target system to reach the desired state. In our solution,
    we will use a playbook to hold the configuration tasks for all of the components
    and add-ons that are required by all clusters, and we will also have variables
    and selectors to enable cluster maintainers to switch specific add-ons on/off.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**剧本（Playbooks）**：这是 Ansible 的构建块。它们用来将所有内容集合在一起，并提供一系列指令，涉及到其他 Ansible 块，如任务、变量和模块。然后它们指示
    Ansible 如何配置目标系统，以达到期望的状态。在我们的解决方案中，我们将使用一个剧本来保存所有集群所需的组件和插件的配置任务，并且我们还会使用变量和选择器来允许集群管理员切换特定插件的启用/禁用。'
- en: '**Variables**: We will use variables to hold the values for the configuration
    that is used for each cluster add-on, and we will split these variables into groups
    that represent different clusters and environments.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**变量**：我们将使用变量来存储每个集群附加组件配置所需的值，并将这些变量分组，代表不同的集群和环境。'
- en: '**Templates**: Ansible uses Jinja2 templates to enable dynamic expressions
    using variables. This enables Ansible to generate new configuration files based
    on these templates during execution time. In our solution, we will define Kubernetes
    manifests as Ansible Jinja2 templates, and during configuration execution time,
    Ansible will be able to generate the correct Kubernetes manifests for each cluster
    based on the provided or predefined variables.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模板**：Ansible 使用 Jinja2 模板来启用动态表达式，并使用变量。这使得 Ansible 可以在执行时根据这些模板生成新的配置文件。在我们的解决方案中，我们将
    Kubernetes 清单定义为 Ansible Jinja2 模板，在配置执行时，Ansible 将能够根据提供的或预定义的变量为每个集群生成正确的 Kubernetes
    清单。'
- en: The previous Ansible concepts are essential to understanding how Ansible works.
    We will utilize each of them to develop the CM solution in the next section. You
    will learn about each concept and how to use it as you move forward in this chapter.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的 Ansible 概念对于理解 Ansible 的工作原理至关重要。在接下来的章节中，我们将利用它们开发 CM 解决方案。你将随着章节的推进，学习每个概念及其使用方法。
- en: Configuring the clusters
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置集群
- en: 'Now we put the solution we designed in the previous section into action. We
    will start by developing the Ansible framework skeleton, which will consist of
    the following parts:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将把前一节中设计的解决方案付诸实践。我们将从开发 Ansible 框架骨架开始，骨架将由以下部分组成：
- en: '`group_vars`: This directory contains the manifest configuration files with
    variables'' default unless a cluster defines its own private variables in its
    own inventory.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`group_vars`：该目录包含带有变量默认值的清单配置文件，除非集群在其自己的库存中定义了私有变量。'
- en: '`inventories`: This directory contains the configuration files with variables''
    values, which are specific to each cluster or cluster group, meaning that variables
    defined here override default variables defined under the `groups_vars` directory.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`inventories`：该目录包含带有变量值的配置文件，这些配置文件特定于每个集群或集群组，意味着此处定义的变量会覆盖 `groups_vars`
    目录下定义的默认变量。'
- en: '`tasks`: In this directory, we define a separate task for each cluster service
    and add-on that we need to deploy and configure; the task definition file is standard
    across tasks, as we will use Ansible''s k8s module and pass to it the YAML templates
    to deploy against the target cluster.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tasks`：在这个目录中，我们为每个集群服务和附加组件定义一个独立的任务，并且任务定义文件在各个任务之间是标准化的，因为我们将使用 Ansible
    的 k8s 模块并将 YAML 模板传递给它以在目标集群上进行部署。'
- en: '`templates`: This directory contains the Kubernetes manifest YAMLs and configuration
    files for each Kubernetes object we need to manage, and these template files will
    have the required variables written in Jinja2 expressions format.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`templates`：该目录包含我们需要管理的每个 Kubernetes 对象的 Kubernetes 清单 YAML 文件和配置文件，这些模板文件将采用
    Jinja2 表达式格式书写所需的变量。'
- en: '`cluster.yaml`: This is the main playbook that will be passed to Ansible to
    execute against the target cluster. It contains all the tasks that we need to
    invoke to configure the cluster objects and add-ons. The playbook also has tags
    for each task, and this enables the cluster maintainer to switch specific tasks
    on/off for each target cluster whenever needed.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cluster.yaml`：这是传递给 Ansible 以在目标集群上执行的主要 playbook。它包含我们需要调用的所有任务，以配置集群对象和附加组件。该
    playbook 还为每个任务添加了标签，这使得集群维护人员可以在需要时为每个目标集群开启/关闭特定任务。'
- en: 'After creating the Ansible skeleton for Kubernetes cluster configuration management,
    we will be able to grow it to handle more cluster services and deployments. The
    development workflow looks as the following:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在为 Kubernetes 集群配置管理创建 Ansible 框架骨架后，我们将能够扩展它以处理更多的集群服务和部署。开发工作流如下：
- en: Write Kubernetes manifests in YAML format for the cluster add-ons that you want
    to deploy, then deploy them to a test cluster to ensure correctness.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为你想要部署的集群附加组件编写 Kubernetes 清单 YAML 格式的文件，然后将它们部署到测试集群以确保正确性。
- en: Convert the Kubernetes manifests from YAML to Jinja2 templates.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 Kubernetes 清单从 YAML 转换为 Jinja2 模板。
- en: Create a task file to invoke these templates and add this file under the Ansible
    `tasks` directory.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个任务文件来调用这些模板，并将该文件添加到 Ansible `tasks` 目录下。
- en: 'Create the variable values:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建变量值：
- en: '- For default variable values, under the `group_vars` directory, add the values
    of the variables you created in the template in an appropriate YAML file.'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 对于默认的变量值，在 `group_vars` 目录下，添加你在模板中创建的变量值，并将其写入适当的 YAML 文件。'
- en: '- For cluster-specific variables, under the `inventories` directory, create
    a new directory with the name of the cluster or cluster group that you want to
    target, and then create its own `group_vars` directory, and create under that
    a YAML file to contain the variable values mapping.'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 对于集群特定的变量，在 `inventories` 目录下，创建一个新目录，命名为你要目标的集群或集群组的名称，然后创建它自己的 `group_vars`
    目录，并在该目录下创建一个 YAML 文件，用于包含变量值映射。'
- en: Update the playbook file and add a step to invoke the targeted task. Then, associate
    to this task the appropriate tags and properties.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 playbook 文件，并添加步骤以调用目标任务。然后，将适当的标签和属性关联到该任务。
- en: In the hands-on exercise, we will configure `aws-auth` and create a Kubernetes
    namespace to illustrate how this Ansible solution works. In the coming chapters,
    we will use this solution to deploy more services and add-ons on top of Kubernetes.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际操作中，我们将配置 `aws-auth` 并创建一个 Kubernetes 命名空间，演示该 Ansible 解决方案是如何工作的。在接下来的章节中，我们将使用这个解决方案在
    Kubernetes 上部署更多的服务和插件。
- en: The ansible directory's structure
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ansible 目录的结构
- en: 'The `ansible` directory is where all the Ansible source code resides in your
    infrastructure repository. As a best practice, I recommend having a dedicated
    infrastructure source code repository that contains all the infrastructure as
    code and configuration for your Kubernetes clusters and the rest of your infrastructure.
    The following is the proposed directory structure of the Ansible configuration
    that we will develop in this chapter:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`ansible` 目录是你的基础设施仓库中所有 Ansible 源代码所在的位置。作为最佳实践，我建议你拥有一个专门的基础设施源代码仓库，里面包含所有基础设施代码和你
    Kubernetes 集群及其他基础设施的配置。以下是我们将在本章开发的 Ansible 配置的提议目录结构：'
- en: '![Figure 4.2 – Ansible directory structure'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.2 – Ansible 目录结构]'
- en: '](img/B16192_04_002.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16192_04_002.jpg)'
- en: Figure 4.2 – Ansible directory structure
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.2 – Ansible 目录结构
- en: You will learn in detail and with hands-on practices how to develop this solution
    and all of the configuration code under the `ansible` directory.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你将通过详细的学习和实践，了解如何开发此解决方案，以及在 `ansible` 目录下的所有配置代码。
- en: Creating Ansible templates
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 Ansible 模板
- en: In this section, you will create two templates to learn how you can rewrite
    Kubernetes manifests into Ansible Jinja2 format.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将创建两个模板，学习如何将 Kubernetes 清单转换为 Ansible Jinja2 格式。
- en: The second template is for a Kubernetes namespace, which you will use to create
    new namespaces.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个模板是 Kubernetes 命名空间，你将使用它来创建新的命名空间。
- en: Creating the aws-auth template
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建 aws-auth 模板
- en: The first template is for `aws-auth` ConfigMap, which you will use to define
    AWS IAM users and roles and then authenticate them to the cluster. You will learn
    in detail about `aws-auth` and how to use it for cluster access in [*Chapter 6*](B16192_06_Final_PG_ePub.xhtml#_idTextAnchor131),
    *Securing Kubernetes Effectively*.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个模板是 `aws-auth` ConfigMap，你将使用它来定义 AWS IAM 用户和角色，并将它们认证到集群。你将在[*第 6 章*](B16192_06_Final_PG_ePub.xhtml#_idTextAnchor131)中详细了解
    `aws-auth` 以及如何在 *有效保护 Kubernetes* 中使用它进行集群访问。
- en: 'You will create a Jinja2 template for the `aws-auth` ConfigMap. However, let''s
    first have a look at the default `aws-auth` ConfigMap without templating:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 你将为 `aws-auth` ConfigMap 创建一个 Jinja2 模板。但是，在我们开始模板化之前，先看一下默认的 `aws-auth` ConfigMap：
- en: '[PRE4]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The previous code block creates an `aws-auth` ConfigMap with one role for the
    worker EC2\. But what if we need to add more roles and users? What if we need
    to use the same ConfigMap with different clusters and with different worker `aws-auth`
    ConfigMap for each cluster.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码块创建了一个`aws-auth` ConfigMap，并为工作节点 EC2 创建了一个角色。但是，如果我们需要添加更多角色和用户怎么办？如果我们需要将相同的
    ConfigMap 用于不同的集群，并且每个集群都需要不同的工作节点 `aws-auth` ConfigMap，该怎么办？
- en: 'The next code block for the `aws-auth` template defines a list of specific
    users and roles who can access the cluster. In the first part of the code, you
    define the Kubernetes `apiVersion`, the object type as `ConfigMap`, and the metadata:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个 `aws-auth` 模板的代码块定义了一组特定的用户和角色，这些用户和角色可以访问集群。在代码的第一部分，你需要定义 Kubernetes 的
    `apiVersion`，对象类型为 `ConfigMap`，以及元数据：
- en: '[PRE5]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the second part of the code, you define the ConfigMap `data` section that
    includes the `for` loop with Jinja2 variables that can be substituted by Ansible
    during the execution time. You notice that we use a `for` loop so we can add multiple
    users:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码的第二部分，你定义了ConfigMap `data`部分，其中包含了带有Jinja2变量的`for`循环，这些变量可以在执行时由Ansible替换。你会注意到，我们使用了`for`循环，以便可以添加多个用户：
- en: '[PRE6]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the second part of the code, you define another ConfigMap `data` section
    that includes the IAM roles. First, instead of adding each user''s data (name,
    ARN, and Kubernetes group), you define them inside a Jinja2 `for` loop with Jinja2
    variables that can be substituted by Ansible during execution. You notice that
    we use a `for` loop so we can add multiple roles:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码的第二部分，你定义了另一个ConfigMap `data`部分，其中包括IAM角色。首先，不是将每个用户的数据（姓名、ARN和Kubernetes组）逐个添加，而是将它们定义在一个Jinja2的`for`循环中，Jinja2变量可以在执行时由Ansible替换。你会注意到，我们使用了`for`循环，以便可以添加多个角色：
- en: '[PRE7]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The previous template authenticates IAM users and roles to any cluster, and
    you can even extend it more with different group types according to your needs.
    But the original concept remains the same, as you have a single template for the
    `aws-auth` ConfigMap that can work for any cluster and for any users and roles.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的模板可以验证IAM用户和角色对任何集群的身份，并且你甚至可以根据需要进一步扩展，添加不同的组类型。但原始概念保持不变，你有一个针对任何集群、任何用户和角色都能使用的`aws-auth`
    ConfigMap的单一模板。
- en: Creating a Kubernetes namespace template
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建Kubernetes命名空间模板
- en: The next code block is for a Jinja2 template that generates a YAML for a Kubernetes
    namespace manifest. This template defines the basic namespace configuration, such
    as names, labels, and annotations.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个代码块是一个Jinja2模板，用于生成Kubernetes命名空间清单的YAML文件。此模板定义了基本的命名空间配置，如名称、标签和注释。
- en: 'This template can create multiple namespaces as it reads a list of namespaces
    from the target cluster''s Ansible variables and generates the Kubernetes manifest
    YAMLs for each one of these namespaces:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 该模板可以创建多个命名空间，因为它从目标集群的Ansible变量中读取命名空间列表，并为每一个命名空间生成Kubernetes清单YAML文件。
- en: '[PRE8]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The previous template is an example of how you can create your own templates
    for Kubernetes objects. I recommend going to the Ansible Jinja2 official documentation
    when you write these templates to get more ideas about the code blocks and how
    to use them: [https://docs.ansible.com/ansible/latest/user_guide/playbooks_templating.html](https://docs.ansible.com/ansible/latest/user_guide/playbooks_templating.html).'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的模板是一个示例，展示了你如何为Kubernetes对象创建自己的模板。我建议在编写这些模板时，访问Ansible Jinja2的官方文档，以便获得更多关于代码块及其使用方法的灵感：[https://docs.ansible.com/ansible/latest/user_guide/playbooks_templating.html](https://docs.ansible.com/ansible/latest/user_guide/playbooks_templating.html)。
- en: Creating Ansible variables
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建Ansible变量
- en: As you learned earlier in this chapter, the Ansible `group_vars` will contain
    the global configuration variables that you want to apply to all clusters unless
    you want to specify a different value for a specific cluster. In this section,
    you will define default variables for the admin user in the `aws-auth` ConfigMap
    and define a new namespace.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在本章前面学到的，Ansible的`group_vars`将包含你想要应用于所有集群的全局配置变量，除非你希望为特定集群指定不同的值。在这一部分，你将为`aws-auth`
    ConfigMap中的管理员用户定义默认变量，并定义一个新的命名空间。
- en: Defining the aws-auth variables
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义aws-auth变量
- en: 'The following code snippet defines the default variables for a cluster''s configuration
    whenever the cluster does not have its own private variables. The first variable
    is `worker_iam_role_arn`. Ansible will get the value of `worker_iam_role_arn`
    from the Terraform outputs. The second variable is the clusters'' admin. You also
    add the ARN or the IAM user that is called `admin`:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段定义了集群配置的默认变量，当集群没有自己的私有变量时，将使用这些默认变量。第一个变量是`worker_iam_role_arn`。Ansible将从Terraform的输出中获取`worker_iam_role_arn`的值。第二个变量是集群的管理员。你还添加了被称为`admin`的ARN或IAM用户：
- en: '[PRE9]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You can extend the previous variables and add more roles and users to the cluster
    according to your needs. You will also learn in [*Chapter 6*](B16192_06_Final_PG_ePub.xhtml#_idTextAnchor131),
    *Securing Kubernetes Effectively*, about the Kubernetes **Role-Based Access Control**
    (**RBAC**) and access management best practices.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以扩展之前的变量，根据需要为集群添加更多角色和用户。你还将在[*第六章*](B16192_06_Final_PG_ePub.xhtml#_idTextAnchor131)《*有效保护Kubernetes*》中学习到Kubernetes的**基于角色的访问控制**（**RBAC**）和访问管理最佳实践。
- en: Important note
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: 'In Jinja2 templates, you define the variables between double braces, `{{ }}`.
    Please refer to Ansible templating documentation: [https://docs.ansible.com/ansible/latest/user_guide/playbooks_templating.html](https://docs.ansible.com/ansible/latest/user_guide/playbooks_templating.html).'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Jinja2 模板中，你需要在双括号 `{{ }}` 中定义变量。请参考 Ansible 模板文档：[https://docs.ansible.com/ansible/latest/user_guide/playbooks_templating.html](https://docs.ansible.com/ansible/latest/user_guide/playbooks_templating.html)。
- en: Configuring the default namespace
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置默认命名空间
- en: 'You will add a single namespace to the `namespaces_list` variable. However,
    you can add more namespaces according to your needs. This is an illustration to
    show you how namespace configuration should work with Ansible:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 你将把一个命名空间添加到 `namespaces_list` 变量中。不过，你可以根据需要添加更多的命名空间。这是一个展示如何与 Ansible 配合使用命名空间配置的示例：
- en: '[PRE10]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In this section, you should have learned how to create default configuration
    variables for your clusters. It is a simple configuration mechanism but is very
    powerful and efficient.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你应该已经学会了如何为你的集群创建默认配置变量。这是一个简单的配置机制，但非常强大和高效。
- en: Creating Ansible inventories
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 Ansible 清单
- en: Not all clusters are equal. In the previous section, you learned how to set
    default variables for your configuration. But what if you need to have different
    values for one of your clusters? Ansible inventories are the answer. In this section,
    you will create inventories to define local cluster variables that override the
    default variables.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 不是所有集群都是相同的。在上一节中，你学习了如何为你的配置设置默认变量。但是，如果你需要为某个集群设置不同的值呢？Ansible 清单就是答案。在这一节中，你将创建清单来定义本地集群变量，以覆盖默认变量。
- en: Create Ansible's inventory
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建 Ansible 清单
- en: The way that Ansible configures hosts (servers/VMs) is very simple. Usually,
    there is a host or group of hosts and you have configuration tasks that you want
    to apply against these hosts. But our solution is a different use case, as we
    will use the same concept but not against any remote hosts. This is because, in
    reality, we do not configure hosts – instead, we configure Kubernetes clusters.
    Ansible just needs to communicate with the Kubernetes API server.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 配置主机（服务器/虚拟机）的方法非常简单。通常，存在一个主机或一组主机，你有配置任务要应用于这些主机。但是我们的解决方案是一个不同的用例，因为我们将使用相同的概念，但不是针对任何远程主机。因为实际上，我们并不配置主机——我们配置的是
    Kubernetes 集群。Ansible 只需要与 Kubernetes API 服务器进行通信。
- en: 'All you need is to set the Ansible `hosts` to target the `localhost`. Then
    in turn, `localhost` will use the `kube-server` API endpoint defined in `kubeconfig`
    to apply the intended configurations:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要做的就是将 Ansible 的 `hosts` 设置为目标 `localhost`。然后，`localhost` 将使用 `kubeconfig`
    中定义的 `kube-server` API 端点来应用预定的配置：
- en: '[PRE11]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As you will notice in this previous code block, there is only the `localhost`
    value defined as the target host for Ansible. This `hosts` file should exist for
    each inventory that Ansible manages.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在前面的代码块中所看到的，Ansible 的目标主机只定义了 `localhost` 值。这个 `hosts` 文件应该为 Ansible 管理的每个清单都存在。
- en: Overriding the aws-auth variables
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 覆盖 aws-auth 变量
- en: 'To override the `aws-auth` default variables defined in `group_vars`, you need
    to recreate the `aws-auth` template file under the `packtclusters` inventory with
    the new variables'' values. The next code block shows you how to override `aws-auth`.
    There are two IAM roles defined: the first role for workers and the second for
    the cluster administrator role. The second part of the code defines a different
    user other than the default one:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 要覆盖在 `group_vars` 中定义的 `aws-auth` 默认变量，你需要在 `packtclusters` 清单下重新创建 `aws-auth`
    模板文件，并为新变量设置相应值。以下代码块展示了如何覆盖 `aws-auth`。定义了两个 IAM 角色：第一个角色为工作节点，第二个角色为集群管理员角色。代码的第二部分定义了一个不同于默认用户的用户：
- en: '[PRE12]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The previous configuration template will replace the default one for `packtclusters`.
    You can do the same for any other template.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的配置模板将替换 `packtclusters` 的默认模板。你可以对任何其他模板执行相同操作。
- en: Overriding the namespaces variables
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 覆盖命名空间变量
- en: 'To override the `namespaces` default variables defined in `group_vars`, you
    need to recreate the `namespaces` template file under the `packtclusters` inventory
    with the new variables'' values. In the next code block, there is a new variable
    that will override `default-namespace` with a new one called `packtclusters-namespace`.
    So, when you apply this configuration, `packtclusters` will have the new namespace
    instead of the default one:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 要覆盖 `group_vars` 中定义的 `namespaces` 默认变量，你需要在 `packtclusters` 库存中重新创建 `namespaces`
    模板文件，并填入新变量的值。在下面的代码块中，有一个新变量，它将用名为 `packtclusters-namespace` 的新值覆盖 `default-namespace`。因此，当你应用此配置时，`packtclusters`
    将使用新的命名空间，而不是默认的命名空间：
- en: '[PRE13]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In this section, you have learned how to override Ansible's default variables
    to use different configuration values based on the cluster.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分中，你已经学习了如何覆盖 Ansible 的默认变量，以便根据集群使用不同的配置值。
- en: Creating Ansible tasks
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 Ansible 任务
- en: The second step after creating the Ansible templates is creating Ansible tasks.
    In this section, you will learn how to create Ansible tasks to deploy your configuration
    templates.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 Ansible 模板后的第二步是创建 Ansible 任务。在这一部分中，你将学习如何创建 Ansible 任务来部署你的配置模板。
- en: The tasks will use the Ansible k8s module. This module accepts the templated
    Kubernetes YAMLs and then instructs Ansible to apply these tasks against the target
    cluster. Ansible can identify the target cluster from the current context in the
    `kubeconfig` file.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这些任务将使用 Ansible 的 k8s 模块。该模块接受模板化的 Kubernetes YAML 文件，然后指示 Ansible 将这些任务应用于目标集群。Ansible
    可以通过当前上下文中的 `kubeconfig` 文件识别目标集群。
- en: Important note
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: 'You can learn more about Ansible''s k8s module from the official documentation:
    [https://docs.ansible.com/ansible/latest/user_guide/modules_intro.html](https://docs.ansible.com/ansible/latest/user_guide/modules_intro.html).'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过官方文档了解更多关于 Ansible 的 k8s 模块：[https://docs.ansible.com/ansible/latest/user_guide/modules_intro.html](https://docs.ansible.com/ansible/latest/user_guide/modules_intro.html)。
- en: Creating the aws-auth task
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建 aws-auth 任务
- en: The following task instructs Ansible on how to generate and apply the `aws-auth`
    ConfigMap to the cluster. It takes the path to the template file as an input and
    applies it to the target cluster.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 以下任务指导 Ansible 如何生成并将 `aws-auth` ConfigMap 应用到集群中。它以模板文件的路径作为输入，并将其应用于目标集群。
- en: In the next code block, you define the task specs, with properties such as `name`,
    the `kubeconfig` path, `state`, and whether to force applying the configuration
    to the cluster or not. Then, the task defines which Jinja2 template to load and
    substitutes its variables with the values from the `group_vars` or `inventory`
    directories.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码块中，你定义了任务规格，包含 `name`、`kubeconfig` 路径、`state` 以及是否强制将配置应用到集群等属性。然后，任务定义了要加载哪个
    Jinja2 模板，并将其变量替换为来自 `group_vars` 或 `inventory` 目录的值。
- en: 'You will notice that there is a `loop` directive if there are multiple Jinja2
    templates to be applied by the `k8s` module. The other important parameters are
    `retries`, which tells Ansible the number of retries until the task succeeds,
    and `delay`, which tells Ansible the time in seconds between each of these retries:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有多个 Jinja2 模板需要通过 `k8s` 模块应用，你会注意到有一个 `loop` 指令。其他重要参数包括 `retries`，它告诉 Ansible
    任务成功之前需要重试的次数，以及 `delay`，它告诉 Ansible 每次重试之间的时间间隔（单位：秒）：
- en: '[PRE14]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The previous code for the `aws-auth` task will be invoked by an Ansible playbook
    that you will learn about later in this chapter.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 `aws-auth` 任务的代码将在稍后本章中学习到的 Ansible 剧本中调用。
- en: Creating the namespaces task
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建命名空间任务
- en: The following Ansible task file is for creating the cluster namespaces. It takes
    the path to the namespaces object template file and applies it to the target cluster.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 Ansible 任务文件用于创建集群的命名空间。它接收命名空间对象模板文件的路径，并将其应用到目标集群。
- en: 'The code structure for the `namespaces` task is very similar to the previous
    `aws-auth` task, except it has a different name, and it reads a different Jinja2
    template file for `namespaces.yaml`:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`namespaces` 任务的代码结构与之前的 `aws-auth` 任务非常相似，唯一不同的是它有一个不同的名称，并且它读取一个不同的 Jinja2
    模板文件 `namespaces.yaml`：'
- en: '[PRE15]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The previous code for the `namespaces` task will be invoked by an Ansible playbook
    that you will learn about later in this chapter.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 `namespaces` 任务的代码将在稍后本章中学习到的 Ansible 剧本中调用。
- en: Creating the cluster's playbook
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建集群的剧本
- en: 'An Ansible playbook is an Ansible file where you put all tasks in the order
    that you want Ansible to execute them in. The following cluster playbook is a
    simple and standard Ansible playbook, and it has three sections: the first section
    is to define the target hosts, the second section is to define any variables that
    you want the tasks to use the values of during execution, and the third section
    is the list of tasks that Ansible will execute.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible playbook是一个Ansible文件，你将在其中按顺序放置所有任务，指定Ansible执行它们的顺序。以下集群playbook是一个简单的标准Ansible
    playbook，包含三个部分：第一部分是定义目标主机，第二部分是定义在执行过程中任务使用的任何变量，第三部分是Ansible将要执行的任务列表。
- en: 'The following code block defines the hosts and the connection type. In our
    solution, we will use `localhost` as the target host, as explained before:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码块定义了主机和连接类型。在我们的解决方案中，正如之前所述，我们将使用`localhost`作为目标主机：
- en: '[PRE16]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The following code block defines the variables that are required during the
    execution of the tasks. The most notable ones are the physical path to the `kubeconfig`
    file and the base directory where the Kubernetes templates reside. These variables
    override any variables with similar names in the `group_vars` and `inventory`
    directories:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码块定义了执行任务过程中所需的变量。最值得注意的是指向`kubeconfig`文件的物理路径和存放Kubernetes模板的基础目录。这些变量会覆盖`group_vars`和`inventory`目录中任何具有相似名称的变量：
- en: '[PRE17]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The following code block defines the list of tasks that Ansible executes against
    the target cluster. You add new tasks to this list and assign meaningful tags
    to them:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码块定义了Ansible针对目标集群执行的任务列表。你可以将新任务添加到此列表，并为其分配有意义的标签：
- en: '[PRE18]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: By completing the development of the playbook, tasks, and all the configurations,
    you are ready to put all the Ansible pieces together apply the playbook and have
    Ansible configure your cluster. In the next section, you will use the `packtclusters-prod1`
    cluster, which you created in the previous chapter, to apply the Ansible playbook.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 通过完成playbook、任务及所有配置的开发，你就准备好将所有Ansible部分整合在一起，应用playbook并让Ansible配置你的集群。在下一部分中，你将使用前一章中创建的`packtclusters-prod1`集群来应用Ansible
    playbook。
- en: Applying the cluster's Ansible playbook
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用集群的Ansible playbook
- en: 'The next instructions will deploy the Ansible playbook, which will configure
    your cluster with the intended configuration:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的指令将部署Ansible playbook，配置你的集群以达到预期的配置：
- en: 'Initialize the Terraform state and select the workspace by running the following
    commands:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化Terraform状态并通过以下命令选择工作区：
- en: '[PRE19]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Retrieve and configure the localhost `kubeconfig` with the target cluster:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取并配置目标集群的localhost `kubeconfig`：
- en: '[PRE20]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Use Python `virtualenv` to install and execute Ansible:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Python的`virtualenv`安装并执行Ansible：
- en: '[PRE21]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Install Ansible and the prerequisite modules, `openshift`, `pyyaml`, and `requests`:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Ansible及其先决模块`openshift`、`pyyaml`和`requests`：
- en: '[PRE22]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Execute the Ansible playbook:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行Ansible playbook：
- en: '[PRE23]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You will get the following output after successful execution:'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行成功后，你将得到以下输出：
- en: '![Figure 4.3 – Ansible execution output'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图4.3 – Ansible执行输出'
- en: '](img/B16192_04_003.jpg)'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16192_04_003.jpg)'
- en: Figure 4.3 – Ansible execution output
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图4.3 – Ansible执行输出
- en: 'Execute the following `kubectl` command to ensure that the cluster configuration
    is applied successfully:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下`kubectl`命令，确保集群配置已成功应用：
- en: '[PRE24]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '![Figure 4.4 – List of cluster namespaces'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.4 – 集群命名空间列表'
- en: '](img/B16192_04_004.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16192_04_004.jpg)'
- en: Figure 4.4 – List of cluster namespaces
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.4 – 集群命名空间列表
- en: You applied the cluster playbook and tasks as per the previous instructions.
    In the following chapters, you will learn how to use the same configuration management
    solution to create other tasks to deploy and configure services on top of your
    clusters.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 你按照之前的指示应用了集群的playbook和任务。在接下来的章节中，你将学习如何使用相同的配置管理解决方案创建其他任务，以便在集群上部署和配置服务。
- en: Destroying the cluster's resources
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 销毁集群的资源
- en: 'You can follow the instructions in the *Destroying the network and cluster
    infrastructure* section of [*Chapter 3*](B16192_03_Final_PG_ePub.xhtml#_idTextAnchor073),
    *Provisioning Kubernetes Clusters Using AWS and Terraform*, to destroy the Kubernetes
    cluster and its related AWS resources. Please be sure to destroy the resources
    in the following order:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以按照[*第3章*](B16192_03_Final_PG_ePub.xhtml#_idTextAnchor073)《使用AWS和Terraform部署Kubernetes集群》中的*销毁网络和集群基础设施*部分的指示，销毁Kubernetes集群及其相关的AWS资源。请确保按以下顺序销毁资源：
- en: Cluster `packtclusters` resources
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 集群`packtclusters`资源
- en: Cluster VPC resources
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 集群 VPC 资源
- en: Terraform shared state resources
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Terraform 共享状态资源
- en: After executing the previous steps, all of the cluster AWS resources should
    be destroyed successfully. You can still log in to the AWS web console and double-check
    the destruction of the resources to avoid any unwanted AWS charges.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行完前面的步骤后，所有集群的 AWS 资源应已成功销毁。你仍然可以登录 AWS 网页控制台，仔细检查资源销毁情况，以避免任何不必要的 AWS 费用。
- en: Summary
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about Kubernetes configuration management challenges
    and how to scale your configuration management solution to manage multiple clusters
    and environments. We designed and developed a solution that is based on Ansible,
    and we went through practical hands-on examples to deploy this code.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了 Kubernetes 配置管理的挑战，以及如何扩展你的配置管理解决方案以管理多个集群和环境。我们设计并开发了一个基于 Ansible
    的解决方案，并通过实践操作示例部署了这段代码。
- en: We started by creating Ansible templates for Kubernetes objects and add-ons.
    Then, we developed the tasks and the playbook to execute the Ansible configuration
    in sequence against the targeted clusters.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从为 Kubernetes 对象和附加组件创建 Ansible 模板开始。接着，我们开发了任务和剧本，以顺序执行 Ansible 配置，针对目标集群进行操作。
- en: This chapter introduced you to Ansible basic concepts. It showed you how to
    use the best practices of infrastructure and configuration as code, automation,
    and Ansible development.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了 Ansible 的基本概念。它向你展示了如何使用基础设施和配置作为代码、自动化和 Ansible 开发的最佳实践。
- en: This sets up the base for the coming chapters, where you will use this configuration
    management solution to configure and deploy clusters' add-ons and services where
    these add-ons are essential to reach production-readiness.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 这为接下来的章节奠定了基础，在这些章节中，你将使用这个配置管理解决方案来配置和部署集群的附加组件和服务，这些附加组件对于实现生产就绪至关重要。
- en: In the next chapter, you will learn about Kubernetes networking and connectivity.
    The best practices of deploying and configuring Kubernetes network plugins, cluster
    DNS, ingresses, network policies, and service mesh will be covered.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习 Kubernetes 网络和连接性。将涵盖部署和配置 Kubernetes 网络插件、集群 DNS、入口控制器、网络策略和服务网格的最佳实践。
- en: Further reading
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'You can refer to the following links for more information on the topics covered
    in this chapter:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以参考以下链接，了解本章中涉及的更多信息：
- en: '*Ansible 2 for Configuration Management [Video]*: [https://www.packtpub.com/product/ansible-2-for-configuration-management-video/9781838826475](https://www.packtpub.com/product/ansible-2-for-configuration-management-video/9781838826475)'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ansible 2 配置管理 [视频]*：[https://www.packtpub.com/product/ansible-2-for-configuration-management-video/9781838826475](https://www.packtpub.com/product/ansible-2-for-configuration-management-video/9781838826475)'
- en: '*Practical Ansible 2*: [https://www.packtpub.com/product/practical-ansible-2/9781789807462](https://www.packtpub.com/product/practical-ansible-2/9781789807462)'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实用 Ansible 2*：[https://www.packtpub.com/product/practical-ansible-2/9781789807462](https://www.packtpub.com/product/practical-ansible-2/9781789807462)'
- en: '*Automation with Ansible Playbooks [Video]*:[https://www.packtpub.com/product/automation-with-ansible-playbooks-video/9781800206496](https://www.packtpub.com/product/automation-with-ansible-playbooks-video/9781800206496)'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 Ansible 剧本自动化 [视频]*：[https://www.packtpub.com/product/automation-with-ansible-playbooks-video/9781800206496](https://www.packtpub.com/product/automation-with-ansible-playbooks-video/9781800206496)'

- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Introducing MicroK8s
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 MicroK8s
- en: '**Kubernetes** is the world''s most popular orchestration technology for container-based
    applications, automating their deployment and scalability while also making maintenance
    easier. Kubernetes, on the other hand, has its own set of complications. So, how
    can an organization use containerization to address complexity while avoiding
    adding to Kubernetes'' complexity?'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**Kubernetes** 是全球最流行的容器应用编排技术，能够自动化它们的部署和扩展，同时简化维护工作。Kubernetes 自身也有一套复杂性。那么，组织如何利用容器化来应对复杂性，同时避免增加
    Kubernetes 的复杂性呢？'
- en: '**Canonical''s MicroK8s** is a powerful Cloud-Native Computing Foundation-certified
    Kubernetes distribution. Here are some of the key reasons why it has become a
    powerful enterprise computing platform:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**Canonical 的 MicroK8s** 是一个强大的云原生计算基金会认证的 Kubernetes 发行版。以下是它成为强大企业计算平台的一些关键原因：'
- en: '**Delivered as snap packages**: These are application packages for desktop,
    cloud, and even **Internet of Things** (**IoT**) devices that are simple to install
    and secured with auto-updates, and they can be deployed on any of the Linux distributions
    that support snaps.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**以 snap 包的形式交付**：这些是桌面、云甚至 **物联网** (**IoT**) 设备的应用包，易于安装并通过自动更新进行安全保护，支持安装在任何支持
    snap 的 Linux 发行版上。'
- en: '**Strict confinement**: This ensures complete isolation from the underlying
    operating system as well as a highly secure Kubernetes environment fit for production.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**严格的隔离**：确保与底层操作系统完全隔离，提供一个适合生产环境的高度安全的 Kubernetes 环境。'
- en: '**Production-grade add-ons**: Add-ons such as Istio, Knative, CoreDNS, Prometheus,
    Jaeger, Linkerd, Cilium, and Helm are available. They are straightforward to set
    up, requiring only a few lines of commands. For better **Artificial Intelligence**
    (**AI**) and **Machine Learning** (**ML**) capabilities, Kubeflow is also available
    as an add-on to MicroK8s.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生产级附加组件**：例如 Istio、Knative、CoreDNS、Prometheus、Jaeger、Linkerd、Cilium 和 Helm
    等附加组件可用。它们易于设置，只需要几行命令。为了更好的 **人工智能** (**AI**) 和 **机器学习** (**ML**) 能力，Kubeflow
    也作为 MicroK8s 的附加组件提供。'
- en: MicroK8s will speed up Kubernetes deployments due to its ability to decrease
    complexity. Treating devices like distributed containerized programs allows developers
    to concentrate on applications rather than infrastructure, making operations teams'
    lives easier.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: MicroK8s 通过降低复杂性来加速 Kubernetes 部署。将设备视为分布式容器化程序，使开发人员能够专注于应用而非基础设施，从而使运维团队的工作变得更加轻松。
- en: 'MicroK8s enables you to combine Kubernetes installations into a single cluster
    and distribute workloads over one or more of these nodes. In this chapter, we
    are going to cover the following main topics:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: MicroK8s 使你能够将多个 Kubernetes 安装合并为一个集群，并在一个或多个节点上分配工作负载。在本章中，我们将介绍以下主要内容：
- en: Introducing MicroK8s Kubernetes
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍 MicroK8s Kubernetes
- en: Quick installation
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速安装
- en: Deploying a sample application
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署示例应用
- en: Enabling add-ons
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用附加组件
- en: Starting/stopping MicroK8s
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动/停止 MicroK8s
- en: Configuring MicroK8s to use local images
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 MicroK8s 使用本地镜像
- en: Configuring MicroK8s to use built-in registries
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 MicroK8s 使用内置镜像仓库
- en: Configuring MicroK8s to use private/public registries
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 MicroK8s 使用私有/公共镜像仓库
- en: Configuring MicroK8s services
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 MicroK8s 服务
- en: Troubleshooting application and cluster issues
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 排查应用和集群问题
- en: Introducing MicroK8s Kubernetes
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 MicroK8s Kubernetes
- en: MicroK8s is a production-ready Kubernetes distribution that is powerful, lightweight,
    and reliable. It's a Kubernetes distribution for enterprises with a reduced memory
    and disk footprint, as well as pre-installed add-ons such as Istio, Knative, Grafana,
    Cilium, and others. MicroK8s meets your needs, whether you're running a production
    setup or just getting started with Kubernetes.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: MicroK8s 是一个生产级的 Kubernetes 发行版，既强大又轻量，且可靠。它是面向企业的 Kubernetes 发行版，具有较小的内存和磁盘占用，同时预安装了如
    Istio、Knative、Grafana、Cilium 等附加组件。无论你是在运行生产环境，还是刚刚开始使用 Kubernetes，MicroK8s 都能满足你的需求。
- en: Anyone who has attempted to work with Kubernetes understands how difficult it
    is to get up and running with the deployment. There are other minimalist solutions
    on the market that minimize deployment time and complexity, but they come at the
    cost of key extensibility and missing add-ons.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 任何曾尝试使用 Kubernetes 的人都知道，要使其部署起来非常困难。市场上有其他极简主义解决方案，它们减少了部署时间和复杂性，但代价是缺少关键的可扩展性和附加组件。
- en: MicroK8s gets you up and running in just 60 seconds, so you don't waste too
    much time jumping through hurdles to get Kubernetes up and running.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: MicroK8s 让你在 60 秒内就能开始使用 Kubernetes，所以你无需浪费太多时间来克服障碍。
- en: 'Some of the key features are as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一些关键功能如下：
- en: '**Minimal**: For laptop and workstation development, developers need the smallest
    Kubernetes solution possible. When running on Ubuntu, MicroK8s is a self-contained
    Kubernetes cluster that works with Azure AKS, Amazon EKS, and Google GKE.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最小**：对于笔记本电脑和工作站开发，开发者需要最小的 Kubernetes 解决方案。在 Ubuntu 上运行时，MicroK8s 是一个自包含的
    Kubernetes 集群，可以与 Azure AKS、Amazon EKS 和 Google GKE 一起使用。'
- en: '**Easy**: Lower administration and operations costs by using a single-package
    installation. All add-ons and dependencies are included.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简单**：通过使用单一安装包，降低管理和操作成本。所有附加组件和依赖项都已包括在内。'
- en: '**Secured**: Updates are available for all security breaches and can be applied
    immediately or scheduled according to your maintenance cycle.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全**：所有安全漏洞的更新都可用，可以立即应用或根据你的维护周期进行调度。'
- en: '**Up to date**: MicroK8s keeps up with upstream Kubernetes, releasing beta,
    RC, and final elements on the same day as upstream Kubernetes.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最新**：MicroK8s 跟进上游 Kubernetes，发布 Beta、RC 和最终版本时与上游 Kubernetes 同步发布。'
- en: '**Complete**: A handpicked set of manifests for common Kubernetes capabilities
    and services is already included in MicroK8s:'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**完整**：MicroK8s 已包含一组精选的清单，适用于常见的 Kubernetes 功能和服务：'
- en: a. Automatic updates to the latest Kubernetes version
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: a. 自动更新到最新的 Kubernetes 版本
- en: 'b. Service mesh: Istio and Linkerd'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: b. 服务网格：Istio 和 Linkerd
- en: 'c. Serverless: Knative and OpenFaaS'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: c. 无服务器：Knative 和 OpenFaaS
- en: 'd. Monitoring: Fluentd, Prometheus, and Grafana, Metrics'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: d. 监控：Fluentd、Prometheus 和 Grafana，度量
- en: e. Ingress, DNS, Dashboard, and clustering
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: e. 入口、DNS、仪表板和集群
- en: f. GPU bindings for AI/ML
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: f. 用于 AI/ML 的 GPU 绑定
- en: g. Cilium, Helm, and Kubeflow
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: g. Cilium、Helm 和 Kubeflow
- en: Now that we know what MicroK8s is, let's see how easy it is to get started in
    the next section.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了 MicroK8s 是什么，接下来我们来看看如何轻松开始使用它。
- en: Quick installation
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快速安装
- en: MicroK8s is deployed via **snaps**. Snaps are containerized (like Docker) software
    packages that are easy to create and install; they bundle their dependencies,
    and they work on all major Linux systems without modification. Snaps auto-update
    and are safe to run. Also, keep in mind that the MicroK8s snap will be updated
    frequently to keep up with Kubernetes releases.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: MicroK8s 通过 **snaps** 部署。Snaps 是容器化的软件包（类似于 Docker），易于创建和安装；它们捆绑了依赖项，并且可以在所有主要
    Linux 系统上无修改地运行。Snaps 会自动更新，且运行安全。同时，请记住，MicroK8s snap 会频繁更新，以跟上 Kubernetes 的发布。
- en: In the next section, we will guide you through a minimal installation that'll
    work while we walk through the introduction.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将指导你完成一个最小安装，并在介绍过程中逐步进行。
- en: Technical requirements
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For the minimal installation, you require the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 对于最小安装，您需要以下内容：
- en: You should have either a Linux distribution such as Ubuntu (20.04 LTS, 18.04
    LTS, or 16.04 LTS) environment to execute the commands or any other operating
    system that supports `snapd`.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你应该有一个 Linux 发行版，如 Ubuntu（20.04 LTS、18.04 LTS 或 16.04 LTS）环境来执行命令，或者任何支持 `snapd`
    的其他操作系统。
- en: 4 GB of memory and 20 GB of disk space are recommended.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 推荐 4 GB 内存和 20 GB 磁盘空间。
- en: Step 1 – Installation
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 1 – 安装
- en: In the following steps, we will be installing a MicroK8s cluster. We will install
    a limited set of components such as `api-server`, `controller-manager`, `scheduler`,
    `kubelet`, `cni`, and `kube-proxy`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的步骤中，我们将安装一个 MicroK8s 集群。我们将安装一组有限的组件，如 `api-server`、`controller-manager`、`scheduler`、`kubelet`、`cni`
    和 `kube-proxy`。
- en: 'A MicroK8s snap can be installed using the following command:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下命令安装 MicroK8s snap：
- en: '[PRE0]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following command execution output confirms that MicroK8s has been installed
    successfully:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令执行输出确认 MicroK8s 已成功安装：
- en: '![Figure 2.1 – MicroK8s installation ](img/B18115_Fig_2.1.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.1 – MicroK8s 安装](img/B18115_Fig_2.1.jpg)'
- en: Figure 2.1 – MicroK8s installation
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.1 – MicroK8s 安装
- en: 'Currently, I''m using an Ubuntu VM hosted on the cloud, but MicroK8s can also
    be installed on Windows, macOS, and Raspberry Pi on ARM hardware. For other platforms,
    please refer to the following link: [https//microk8s.io/docs/install-alternatives](http://https//microk8s.io/docs/install-alternatives).'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当前，我使用的是托管在云端的 Ubuntu 虚拟机，但 MicroK8s 也可以安装在 Windows、macOS 和 Raspberry Pi 的 ARM
    硬件上。对于其他平台，请参考以下链接：[https//microk8s.io/docs/install-alternatives](http://https//microk8s.io/docs/install-alternatives)。
- en: Important Note
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'You can also specify a channel when installing MicroK8s. The specified channel
    consists of two parts – the *track* and the *risk* level. For example, to install
    MicroK8s v1.20 with the risk level set to `stable`, do the following:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以在安装MicroK8s时指定一个频道。指定的频道由两部分组成——*track*和*风险*级别。例如，要安装带有`stable`风险级别的MicroK8s
    v1.20，执行以下操作：
- en: '**sudo snap install microk8s --classic --channel=1.20/stable**'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**sudo snap install microk8s --classic --channel=1.20/stable**'
- en: When the MicroK8s team determines that a release (*edge* and *candidate*) is
    ready, your cluster is updated to the *stable* risk level, indicating that no
    bugs have been discovered by users running the same revision on riskier branches.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当MicroK8s团队确定一个版本（*edge*和*candidate*）已准备就绪时，你的集群将更新为*stable*风险级别，表示没有用户在更危险的分支上运行相同版本时发现任何错误。
- en: 'For accessing Kubernetes, MicroK8s includes its own version of `kubectl`. It
    can be used to perform commands that will monitor and control your Kubernetes
    cluster. MicroK8s adds a `microk8s.kubectl` command to avoid conflicting with
    an existing *kubectl* and overwriting any existing Kubernetes configuration file.
    If you just use MicroK8s, consider creating an alias with this command:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了访问Kubernetes，MicroK8s包含它自己的`kubectl`版本。它可用于执行监控和控制Kubernetes集群的命令。MicroK8s添加了`microk8s.kubectl`命令，以避免与现有的*kubectl*发生冲突并覆盖任何现有的Kubernetes配置文件。如果你只使用MicroK8s，可以考虑使用以下命令创建一个别名：
- en: '[PRE1]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following command execution output confirms that an alias was added successfully:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令执行输出确认别名已成功添加：
- en: '![Figure 2.2 – kubectl – adding an alias ](img/B18115_Fig_2.2.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.2 – kubectl – 添加别名](img/B18115_Fig_2.2.jpg)'
- en: Figure 2.2 – kubectl – adding an alias
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.2 – kubectl – 添加别名
- en: At this point, you have installed MicroK8s. In the next steps, we will be verifying
    whether the installation has succeeded or not.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，你已经安装了MicroK8s。在接下来的步骤中，我们将验证安装是否成功。
- en: Step 2 – Verify the installation
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 2 – 验证安装
- en: 'Next, check whether the newly deployed node is in the `Ready` state using the
    following command:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用以下命令检查新部署的节点是否处于`Ready`状态：
- en: '[PRE2]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following is the command execution output:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是命令执行输出：
- en: '![Figure 2.3 – Verify the installation ](img/B18115_Fig_2.3.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.3 – 验证安装](img/B18115_Fig_2.3.jpg)'
- en: Figure 2.3 – Verify the installation
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.3 – 验证安装
- en: 'If you get the error shown in *Figure 2.3*, it means MicroK8s doesn''t have
    enough permissions. MicroK8s creates a group to make it easier to use commands
    that require administrative privileges. To acquire access to the `.kube` caching
    directory by adding the current user to the group, run the following two commands:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到*图 2.3*中显示的错误，说明MicroK8s没有足够的权限。MicroK8s会创建一个组，以便更容易使用需要管理员权限的命令。为了通过将当前用户添加到该组来获取对`.kube`缓存目录的访问权限，请运行以下两个命令：
- en: '[PRE3]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following is the output:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出内容：
- en: '![Figure 2.4 – Adding users to the group ](img/B18115_Fig_2.4.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.4 – 将用户添加到组中](img/B18115_Fig_2.4.jpg)'
- en: Figure 2.4 – Adding users to the group
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.4 – 将用户添加到组中
- en: 'If you receive still an error, it means that MicroK8s is still starting the
    nodes in the background. Wait for a few minutes and try again. If the installation
    is successful, then you should be seeing the following output:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仍然收到错误信息，说明MicroK8s仍在后台启动节点。等待几分钟后再试。如果安装成功，你应该看到以下输出：
- en: '![Figure 2.5 – Verify the installation ](img/B18115_Fig_2.5.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.5 – 验证安装](img/B18115_Fig_2.5.jpg)'
- en: Figure 2.5 – Verify the installation
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.5 – 验证安装
- en: 'You can also use the `kubectl describe` command to get the details of the node
    as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用`kubectl describe`命令来获取节点的详细信息，如下所示：
- en: '![Figure 2.6 – The describe command used on a node ](img/B18115_Fig_2.6.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.6 – 在节点上使用describe命令](img/B18115_Fig_2.6.jpg)'
- en: Figure 2.6 – The describe command used on a node
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.6 – 在节点上使用describe命令
- en: At this point, you have a fully functional Kubernetes cluster. To summarize,
    we have installed MicroK8s and verified whether the installation was successful
    or not. In the next section, we are going to deploy a sample application on the
    MicroK8s cluster.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，你已经拥有了一个完全功能的Kubernetes集群。总结一下，我们已经安装了MicroK8s并验证了安装是否成功。接下来，我们将部署一个示例应用程序到MicroK8s集群上。
- en: Deploying a sample application
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署示例应用程序
- en: 'We are going to deploy the `nginx` web server sample application. It is software
    that responds to client requests via `nginx` web application:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将部署`nginx` Web服务器示例应用程序。它是通过`nginx` Web应用程序响应客户端请求的软件：
- en: '[PRE4]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following command execution output indicates that there is no error in
    the deployment, and in the next steps, we can verify whether the Pods have been
    created:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令执行输出表明部署没有错误，在接下来的步骤中，我们可以验证Pods是否已创建：
- en: '![Figure 2.7 – Create the deployment ](img/B18115_Fig_2.7.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.7 – 创建部署](img/B18115_Fig_2.7.jpg)'
- en: Figure 2.7 – Create the deployment
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.7 – 创建部署
- en: 'Check the `pods` status to verify whether the application has been deployed
    and is running:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 检查`pods`状态，以验证应用是否已部署并正在运行：
- en: '[PRE5]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following command execution output indicates that Pods have been created
    and in the `Running` status:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令执行输出表明Pods已创建并处于`Running`状态：
- en: '![Figure 2.8 – Check the status of the deployment ](img/B18115_Fig_2.8.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.8 – 检查部署状态](img/B18115_Fig_2.8.jpg)'
- en: Figure 2.8 – Check the status of the deployment
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.8 – 检查部署状态
- en: 'The `nginx` application has been deployed successfully, so it can be exposed
    with the following command:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`nginx`应用已经成功部署，因此可以通过以下命令暴露它：'
- en: '[PRE6]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The following command execution output indicates that the `nginx` application
    is exposed successfully:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令执行输出表明`nginx`应用已成功暴露：
- en: '![Figure 2.9 – Expose the deployment ](img/B18115_Fig_2.9.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.9 – 暴露部署](img/B18115_Fig_2.9.jpg)'
- en: Figure 2.9 – Expose the deployment
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.9 – 暴露部署
- en: 'You should see a new service and the `ClusterIP` address assigned:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到一个新的服务和分配的`ClusterIP`地址：
- en: '![Figure 2.10 – get svc and the ClusterIP address ](img/B18115_Fig_2.10.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.10 – 获取svc和ClusterIP地址](img/B18115_Fig_2.10.jpg)'
- en: Figure 2.10 – get svc and the ClusterIP address
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.10 – 获取svc和ClusterIP地址
- en: 'Now that services are exposed externally, we can launch the web browser and
    point it to the external IP from our local machine to access the `nginx` application:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在服务已暴露到外部，我们可以启动浏览器，并通过从本地机器指向外部IP来访问`nginx`应用：
- en: '![Figure 2.11 – The nginx landing page ](img/B18115_Fig_2.11.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.11 – nginx登录页面](img/B18115_Fig_2.11.jpg)'
- en: Figure 2.11 – The nginx landing page
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.11 – nginx登录页面
- en: Congratulations! You have now deployed the `nginx` application to a fully functional
    Kubernetes cluster by using MicroK8s. This will help you to understand how MicroK8s
    gets you up and running in under 60 seconds. In the next section, we are going
    to learn about add-ons and how to enable them.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你现在已成功将`nginx`应用部署到一个完全功能的Kubernetes集群，并通过MicroK8s完成。这将帮助你理解MicroK8s如何在不到60秒的时间内让你快速启动。在下一节中，我们将学习附加组件以及如何启用它们。
- en: Enabling add-ons
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用附加组件
- en: To provide a pure, lightweight version of Kubernetes, MicroK8s uses the bare
    minimum of components. With only a few keystrokes, **add-ons**, which are pre-packaged
    components that provide additional capabilities for your Kubernetes cluster, from
    simple DNS control to ML with Kubeflow, are accessible.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供一个纯粹、轻量化的Kubernetes版本，MicroK8s使用了最基本的组件。只需几次敲击键盘，**附加组件**，即预打包的组件，可以为你的Kubernetes集群提供从简单DNS控制到使用Kubeflow进行机器学习的附加功能。
- en: To begin, the DNS add-on should be enabled to promote communication between
    services. The storage add-on provides directory space on the host for programs
    that require storage.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，应该启用DNS附加组件，以促进服务之间的通信。存储附加组件为需要存储的程序提供主机上的目录空间。
- en: 'These are easy to set up with the following command:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令可以轻松设置：
- en: '[PRE7]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The command execution output is as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 命令执行输出如下：
- en: '![Figure 2.12 – Enable DNS and storage add-ons ](img/B18115_Fig_2.12.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.12 – 启用DNS和存储附加组件](img/B18115_Fig_2.12.jpg)'
- en: Figure 2.12 – Enable DNS and storage add-ons
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.12 – 启用DNS和存储附加组件
- en: For the full list of available MicroK8s add-ons, please refer to the *Full list
    of add-ons* section.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 有关可用的MicroK8s附加组件的完整列表，请参考*附加组件完整列表*部分。
- en: 'Once the add-on is enabled, check whether all the components for the additional
    services can be started using the following command:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 启用附加组件后，使用以下命令检查是否可以启动所有附加服务的组件：
- en: '[PRE8]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following command execution output indicates (in the highlighted portions)
    that additional services have been started and are in `Running` status:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令执行输出（在高亮部分）表明附加服务已经启动并且处于`Running`状态：
- en: '![Figure 2.13 – Verify that additional components have been started ](img/B18115_Fig_2.13.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.13 – 验证附加组件是否已启动](img/B18115_Fig_2.13.jpg)'
- en: Figure 2.13 – Verify that additional components have been started
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.13 – 验证附加组件是否已启动
- en: 'Add-ons that have been enabled can be disabled at any time by utilizing the
    `disable` command:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 已启用的附加组件可以随时通过使用`disable`命令禁用：
- en: '[PRE9]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To check the list of available and installed addons, use the `status` command,
    as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查可用和已安装插件的列表，请使用 `status` 命令，如下所示：
- en: '![Figure 2.14 – Use the status command to check the list of available and installed
    add-ons ](img/B18115_Fig_2.14.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.14 – 使用状态命令检查可用和已安装的插件列表](img/B18115_Fig_2.14.jpg)'
- en: Figure 2.14 – Use the status command to check the list of available and installed
    add-ons
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.14 – 使用状态命令检查可用和已安装的插件列表
- en: In case of errors, MicroK8s gives you troubleshooting tools to check out what
    has gone wrong. In the following sections, we can check how to use troubleshooting
    tools.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出现错误，MicroK8s 会为你提供故障排除工具，以检查出现了什么问题。在接下来的章节中，我们将学习如何使用故障排除工具。
- en: Full list of add-ons
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插件完整列表
- en: 'The following table shows the current list of add-ons at the time of writing:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 下表显示了撰写本文时的插件当前列表：
- en: '![Table 2.1 – The complete list of MicroK8s add-ons ](img/B18115_02_Table_2.1a.jpg)![Table
    2.1 – The complete list of MicroK8s add-ons ](img/B18115_02_Table_2.1b.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![表 2.1 – MicroK8s 插件完整列表](img/B18115_02_Table_2.1a.jpg)![表 2.1 – MicroK8s
    插件完整列表](img/B18115_02_Table_2.1b.jpg)'
- en: Table 2.1 – The complete list of MicroK8s add-ons
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 表 2.1 – MicroK8s 插件完整列表
- en: We have now understood what an add-on is, and we have enabled a few add-ons,
    such as `dns` and `storage`. We've also seen the entire list of add-ons. In the
    next section, we will look at how to start/stop a MicroK8s cluster.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经了解了什么是插件，并且启用了几个插件，比如 `dns` 和 `storage`。我们也查看了插件的完整列表。在下一节中，我们将探讨如何启动/停止
    MicroK8s 集群。
- en: Starting/stopping MicroK8s
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动/停止 MicroK8s
- en: MicroK8s will run indefinitely unless you instruct it to **stop**. With these
    simple commands, you can *stop and start* MicroK8s.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: MicroK8s 将无限期运行，除非你指示它 **停止**。使用这些简单的命令，你可以 *停止并启动* MicroK8s。
- en: 'To stop a MicroK8s cluster, use the `microk8s stop` command:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 要停止 MicroK8s 集群，请使用 `microk8s stop` 命令：
- en: '![Figure 2.15 – Use the stop command to stop the MicroK8s cluster ](img/B18115_Fig_2.15.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.15 – 使用停止命令停止 MicroK8s 集群](img/B18115_Fig_2.15.jpg)'
- en: Figure 2.15 – Use the stop command to stop the MicroK8s cluster
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.15 – 使用停止命令停止 MicroK8s 集群
- en: 'To start the MicroK8s cluster, use the `microk8s start` command:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动 MicroK8s 集群，请使用 `microk8s start` 命令：
- en: '![Figure 2.16 – Use the start command to start the MicroK8s cluster ](img/B18115_Fig_2.16.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.16 – 使用启动命令启动 MicroK8s 集群](img/B18115_Fig_2.16.jpg)'
- en: Figure 2.16 – Use the start command to start the MicroK8s cluster
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.16 – 使用启动命令启动 MicroK8s 集群
- en: MicroK8s will automatically restart after a reboot if you keep it running. If
    you don't want this to happen, simply run `microk8s stop` before turning off the
    computer.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 MicroK8s 在运行中，它会在重启后自动重新启动。如果不希望发生这种情况，只需在关闭计算机之前运行`microk8s stop`命令。
- en: We've seen how to start and stop a MicroK8s cluster. In the following section,
    we'll look at how to configure MicroK8s to work with local images.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了如何启动和停止 MicroK8s 集群。在接下来的章节中，我们将探讨如何配置 MicroK8s 使用本地镜像。
- en: Configuring MicroK8s to use local images
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 MicroK8s 使用本地镜像
- en: 'The **Kubernetes orchestration framework** uses container images to manage
    containerized applications. These images can be in a local filesystem or can be
    downloaded from a remote registry. The most popular container tool is **Docker**.
    The following diagram is an introduction to what Docker does:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**Kubernetes 编排框架**使用容器镜像来管理容器化应用程序。这些镜像可以在本地文件系统中，也可以从远程仓库下载。最流行的容器工具是 **Docker**。下图介绍了
    Docker 的作用：'
- en: '![Figure 2.17 – What Docker does ](img/B18115_Fig_2.17.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.17 – Docker 的作用](img/B18115_Fig_2.17.jpg)'
- en: Figure 2.17 – What Docker does
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.17 – Docker 的作用
- en: 'Let''s suppose we have a container image built and available in the local Docker
    image repository. For example, here, I have the `nginx1.21` image in the local
    Docker image repository:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们已经在本地 Docker 镜像仓库中构建并提供了一个容器镜像。例如，在这里，我有一个 `nginx1.21` 镜像在本地 Docker 镜像仓库中：
- en: '![Figure 2.18 – Docker images from the local Docker repository ](img/B18115_Fig_2.18.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.18 – 来自本地 Docker 仓库的 Docker 镜像](img/B18115_Fig_2.18.jpg)'
- en: Figure 2.18 – Docker images from the local Docker repository
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.18 – 来自本地 Docker 仓库的 Docker 镜像
- en: 'The `nginx1.21` local image is only recognized by Docker, and MicroK8s Kubernetes
    will not be aware of the image. This is because the MicroK8s Kubernetes cluster
    does not include your local Docker *daemon*. We can push the Docker image into
    the MicroK8s image cache by exporting it from the local Docker daemon using the
    following command:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`nginx1.21`本地镜像仅被Docker识别，MicroK8s Kubernetes将不会意识到该镜像的存在。这是因为MicroK8s Kubernetes集群不包含您的本地Docker
    *守护程序*。我们可以通过以下命令将Docker镜像推送到MicroK8s镜像缓存中，从本地Docker守护程序导出它：'
- en: '![Figure 2.19 – Push the Docker image ](img/B18115_Fig_2.19.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.19 – 推送 Docker 镜像](img/B18115_Fig_2.19.jpg)'
- en: Figure 2.19 – Push the Docker image
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.19 – 推送 Docker 镜像
- en: 'Now that we have imported the image to the MicroK8s image cache, we can confirm
    whether the image is in there by using the following command:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已将镜像导入到MicroK8s镜像缓存中，可以使用以下命令确认镜像是否存在：
- en: '[PRE10]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following command execution output shows that our `nginx1.21` image is
    available in the MicroK8s image cache:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的命令执行输出显示我们的`nginx1.21`镜像在MicroK8s镜像缓存中可用：
- en: '![Figure 2.20 – The list of containerd images ](img/B18115_Fig_2.20.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.20 – containerd 镜像列表](img/B18115_Fig_2.20.jpg)'
- en: Figure 2.20 – The list of containerd images
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.20 – containerd 镜像列表
- en: Now that we have the image, we can use the `microk8s kubectl apply -f <file>`
    command to deploy it to the MicroK8s Kubernetes.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了镜像，可以使用`microk8s kubectl apply -f <file>`命令将其部署到MicroK8s Kubernetes。
- en: 'Here, I have created the `nginx.local` file with the deployment instructions:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我创建了带有部署说明的`nginx.local`文件：
- en: '![Figure 2.21 – The nginx.local file with the deployment instructions ](img/B18115_Fig_2.21.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.21 – 带有部署说明的 nginx.local 文件](img/B18115_Fig_2.21.jpg)'
- en: Figure 2.21 – The nginx.local file with the deployment instructions
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.21 – 带有部署说明的 nginx.local 文件
- en: 'At this point, we are ready to deploy using the `kubectl apply` command:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用`kubectl apply`命令部署：
- en: '![Figure 2.22 – Create the deployment using the apply command ](img/B18115_Fig_2.22.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.22 – 使用 apply 命令创建部署](img/B18115_Fig_2.22.jpg)'
- en: Figure 2.22 – Create the deployment using the apply command
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.22 – 使用 apply 命令创建部署
- en: 'When the deployment is created, use the `kubectl get deployment` command to
    check the status of the deployments:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 创建部署后，使用`kubectl get deployment`命令检查部署状态：
- en: '![Figure 2.23 – Check the status of the deployment ](img/B18115_Fig_2.23.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.23 – 检查部署状态](img/B18115_Fig_2.23.jpg)'
- en: Figure 2.23 – Check the status of the deployment
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.23 – 检查部署状态
- en: 'The following fields are displayed:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 显示以下字段：
- en: '`NAME` indicates the names of the deployments in the namespace.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NAME`表示命名空间中部署的名称。'
- en: '`READY` indicates how many replicas of the application are available to the
    users of the applications.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`READY`表示应用程序的副本已准备就绪供用户使用。'
- en: '`UP-TO-DATE` indicates the number of replicas that have been updated to achieve
    the desired state.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UP-TO-DATE`表示已更新以达到所需状态的副本数量。'
- en: '`AVAILABLE` indicates the number of replicas that are available to the users.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AVAILABLE`表示用户可用的副本数量。'
- en: '`AGE` indicates the amount of time that the application has been operating.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AGE`表示应用程序运行的时间。'
- en: Kubernetes will act as if there is an image in the Docker Hub registry at `docker.io`
    for which it already has a cached copy. This procedure can be repeated whenever
    the image is changed.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes将会假装在`docker.io`的Docker Hub注册表中有一张镜像，它已经有了一个缓存副本。每当镜像发生变化时，可以重复此过程。
- en: We have now seen how to work with locally built images without a registry. In
    the next section, we are going to look at how to use MicroK8s' built-in registry
    for the management of images.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学习了如何使用本地构建的镜像而无需注册表。接下来，我们将学习如何使用MicroK8s内置的注册表来管理镜像。
- en: Configuring MicroK8s to use its built-in registry
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置MicroK8s以使用其内置注册表
- en: By minimizing the time spent on uploading and downloading Docker images, having
    a private Docker registry can help you to be more productive. The registry that
    comes with MicroK8s is hosted inside a Kubernetes cluster and is accessible as
    a `NodePort` service on the localhost's port `32000`.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 通过减少上传和下载Docker镜像的时间，拥有私有Docker注册表可以帮助您提高生产效率。MicroK8s附带的注册表托管在Kubernetes集群内，并作为本地主机端口`32000`上的`NodePort`服务访问。
- en: Important Note
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: You should be aware that this registry is not secured and will need additional
    steps to limit access from outside (in the case of production scenarios).
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此注册表未经安全保护，需要额外步骤来限制外部访问（例如生产环境中）。
- en: 'The first step is to enable the built-in registry using the following command:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是使用以下命令启用内建注册中心：
- en: '![Figure 2.24 – Enable the registry ](img/B18115_Fig_2.24.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.24 – 启用注册中心](img/B18115_Fig_2.24.jpg)'
- en: Figure 2.24 – Enable the registry
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.24 – 启用注册中心
- en: As you can see, the registry add-on has been set up with a 40 Gi persistent
    volume claim for storing images. Please note that the storage add-on is also enabled
    along with the registry to enable storage claims.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，注册中心插件已设置了一个 40 Gi 持久化存储卷声明用于存储镜像。请注意，存储插件也已启用，并与注册中心一同启用存储声明。
- en: 'Now that we have the registry set up, our next step is to tag the image and
    push it into the built-in registry:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已设置好注册中心，下一步是标记镜像并将其推送到内建注册中心：
- en: '![Figure 2.25 – Tag the Docker image ](img/B18115_Fig_2.25.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.25 – 标记 Docker 镜像](img/B18115_Fig_2.25.jpg)'
- en: Figure 2.25 – Tag the Docker image
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.25 – 标记 Docker 镜像
- en: 'Push the tagged image into the built-in image, as shown here:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 将标记后的镜像推送到内建镜像，如下所示：
- en: '![Figure 2.26 – Push the tagged image ](img/B18115_Fig_2.26.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.26 – 推送标记后的镜像](img/B18115_Fig_2.26.jpg)'
- en: Figure 2.26 – Push the tagged image
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.26 – 推送标记后的镜像
- en: Important Note
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Pushing to this insecure registry may fail in some Docker versions unless the
    daemon is specifically set to trust it.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些 Docker 版本中，推送到此不安全的注册中心可能会失败，除非守护进程特别设置为信任它。
- en: '[PRE11]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`{`'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`{`'
- en: '`"insecure-registries" : ["localhost:32000"]`'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '`"insecure-registries" : ["localhost:32000"]`'
- en: '`}`'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: 'Let''s check whether the images are tagged by using the `docker images` command:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`docker images`命令检查镜像是否已标记：
- en: '![Figure 2.27 – Check whether the images are tagged ](img/B18115_Fig_2.27.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.27 – 检查图片是否被标记](img/B18115_Fig_2.27.jpg)'
- en: Figure 2.27 – Check whether the images are tagged
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.27 – 检查图片是否被标记
- en: Now that we have the image, we can use the `kubectl apply -f <file>` command
    to deploy it to the MicroK8s Kubernetes.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了镜像，可以使用`kubectl apply -f <file>`命令将其部署到 MicroK8s Kubernetes。
- en: 'Here, I have created the `nginx.builtin` file with the deployment instructions:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我已经创建了包含部署指令的`nginx.builtin`文件：
- en: '![Figure 2.28 – The nginx.builtin file with the deployment instructions ](img/B18115_Fig_2.28.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.28 – 带有部署指令的 nginx.builtin 文件](img/B18115_Fig_2.28.jpg)'
- en: Figure 2.28 – The nginx.builtin file with the deployment instructions
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.28 – 带有部署指令的 nginx.builtin 文件
- en: 'At this point, we are ready to deploy using the `kubectl apply` command:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们已准备好使用`kubectl apply`命令进行部署：
- en: '![Figure 2.29 – Create the deployment using the apply command ](img/B18115_Fig_2.29.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.29 – 使用 apply 命令创建部署](img/B18115_Fig_2.29.jpg)'
- en: Figure 2.29 – Create the deployment using the apply command
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.29 – 使用 apply 命令创建部署
- en: 'When the deployment is created, use the `kubectl get deployment` command to
    check the status of the deployments:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 创建部署时，使用`kubectl get deployment`命令检查部署状态：
- en: '![Figure 2.30 – Check the status of the deployments using the kubectl get deployment
    command ](img/B18115_Fig_2.30.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.30 – 使用 kubectl get deployment 命令检查部署状态](img/B18115_Fig_2.30.jpg)'
- en: Figure 2.30 – Check the status of the deployments using the kubectl get deployment
    command
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.30 – 使用 kubectl get deployment 命令检查部署状态
- en: Kubernetes will pull the image from the built-in registry. If there is a change
    to the image, *building* and *pushing* the images to the built-in registry can
    be repeated so that updates are propagated. If you've dedicated machines that
    host registries in a cluster, you'll need to alter the configuration files to
    point to the node's IP address.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 将从内建的注册中心拉取镜像。如果镜像有变更，*构建*并*推送*镜像到内建注册中心可以重复进行，从而传播更新。如果你有专门的机器托管注册中心节点，你需要修改配置文件以指向该节点的
    IP 地址。
- en: In the next section, we will go through the steps on how to configure MicroK8s
    to pull the images from any of the public or private registries.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将详细介绍如何配置 MicroK8s 从任何公共或私有注册中心拉取镜像的步骤。
- en: Configuring MicroK8s to use private/public registries
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 MicroK8s 使用私有/公共注册中心
- en: MicroK8s can pull the images from *private* or *public* registries as well,
    but before being able to pull container images, MicroK8s Kubernetes must be made
    aware of the registry endpoints.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: MicroK8s 也可以从*私有*或*公共*注册中心拉取镜像，但在能够拉取容器镜像之前，MicroK8s Kubernetes 必须知道注册中心的端点。
- en: 'Let''s assume that a `10.131.231.155`. The images we build need to be tagged
    with the `IP address:Port/image:tag` registry endpoint syntax, as follows:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 假设有一个`10.131.231.155`，我们构建的镜像需要使用`IP 地址:端口/镜像:标签`的注册中心端点语法进行标记，如下所示：
- en: '[PRE12]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Important Note
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: '[PRE13]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`{`'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '`{`'
- en: '`"insecure-registries" : ["10.131.231.155:32000"]`'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`"insecure-registries" : ["10.131.231.155:32000"]`'
- en: '`}`'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: 'To push it to one of the `hub.docker.com`, use the `docker login` command to
    log in and push the image tagged with `docker-hub-username/image-name:tag`:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 要将其推送到 `hub.docker.com`，使用 `docker login` 命令登录并推送标记为 `docker-hub-username/image-name:tag`
    的镜像：
- en: '[PRE14]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Once the image is tagged, push the tagged image into a private or public registry:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦镜像被标记，将带标记的镜像推送到私有或公共注册表：
- en: '[PRE15]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now that we have the image, we can use the `kubectl apply -f <file>` command
    to deploy like earlier. Here, I have created a file with the deployment instructions:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了镜像，可以像之前一样使用`kubectl apply -f <file>`命令来部署。在这里，我创建了一个包含部署指令的文件：
- en: '![Figure 2.31 – The deployment file with instructions ](img/B18115_Fig_2.31.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.31 – 包含指令的部署文件](img/B18115_Fig_2.31.jpg)'
- en: Figure 2.31 – The deployment file with instructions
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.31 – 包含指令的部署文件
- en: Once the deployment is created, use the `kubectl get deployment` command to
    check the status of the deployments.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 创建部署后，使用`kubectl get deployment`命令检查部署状态。
- en: Important Note
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: In the *production* scenarios, a **private secure registry** needs to be used,
    which is more secure and limits access to specific users/applications. The recommended
    way is to create a secret from the Docker login credentials and use this secret
    to access the secure registry.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在*生产*环境中，应该使用**私有安全注册表**，这种注册表更加安全，并限制特定用户/应用程序的访问。推荐的方法是通过 Docker 登录凭证创建一个密钥，并使用此密钥访问安全注册表。
- en: To recap, we looked at how to set up MicroK8s using either local images or ones
    fetched from public or private registries. In the next section, we will look at
    how to configure the various services or components of MicroK8s.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，我们看了如何使用本地镜像或从公共或私有注册表获取的镜像来设置 MicroK8s。在下一节中，我们将学习如何配置 MicroK8s 的各种服务或组件。
- en: Configuring MicroK8s services
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 MicroK8s 服务
- en: MicroK8s is made up of various services or components that are managed by a
    number of system daemons. Configuration of these services is read from files stored
    in the `$SNAP_DATA` directory, which normally points to `/var/snap/microk8s/current`.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: MicroK8s 由多个服务或组件构成，这些服务由多个系统守护进程管理。这些服务的配置文件存储在 `$SNAP_DATA` 目录下，通常指向 `/var/snap/microk8s/current`。
- en: 'To reconfigure the services, we will need to edit the respective file and then
    restart the respective daemon. The following table shows *system daemon services*
    that will be run by MicroK8s:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 要重新配置服务，我们需要编辑相应的文件，然后重新启动相应的守护进程。下表展示了 MicroK8s 将要运行的*系统守护进程服务*：
- en: '![Table 2.2 – A list of the MicroK8s system daemon services ](img/B18115_02_Table_2.2a.jpg)![Table
    2.2 – A list of the MicroK8s system daemon services ](img/B18115_02_Table_2.2b.jpg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![表 2.2 – MicroK8s 系统守护进程服务列表](img/B18115_02_Table_2.2a.jpg)![表 2.2 – MicroK8s
    系统守护进程服务列表](img/B18115_02_Table_2.2b.jpg)'
- en: Table 2.2 – A list of the MicroK8s system daemon services
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 表 2.2 – MicroK8s 系统守护进程服务列表
- en: In the next section, we will look at how to troubleshoot issues at the application
    and cluster levels.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨如何排查应用程序和集群层级的问题。
- en: Troubleshooting application and cluster issues
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 故障排除应用程序和集群问题
- en: It's critical to know that things can go wrong; there might be issues with the
    Kubernetes components themselves, or a problem with the MicroK8s component. In
    this section, we will cover some of the common issues and tools to assist you
    in determining what went wrong.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 需要特别注意，可能会出现问题；这可能是 Kubernetes 组件本身的问题，也可能是 MicroK8s 组件的问题。在本节中，我们将介绍一些常见问题以及帮助您诊断问题的工具。
- en: The application level
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用层
- en: This section assists users in debugging Kubernetes-deployed applications that
    aren't functioning as intended.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 本节帮助用户调试部署在 Kubernetes 上但未按预期运行的应用程序。
- en: 'Examining a **Pod** is the first step in troubleshooting it. With the following
    command, you can check the current state of the Pod and a historical list of the
    events:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 检查**Pod**是排查问题的第一步。通过以下命令，您可以查看 Pod 的当前状态及其历史事件列表：
- en: '[PRE16]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In the following command execution output, you can see that the `kubectl describe
    pod` command fetches the details of the container(s) and the Pod''s configuration
    information (labels, resource needs, and so on), as well as the container(s) and
    Pod''s status information (state, readiness, restart count, events, and so on):'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下命令执行输出中，您可以看到 `kubectl describe pod` 命令获取了容器的详细信息及 Pod 的配置信息（标签、资源需求等），以及容器和
    Pod 的状态信息（状态、就绪情况、重启次数、事件等）：
- en: '![Figure 2.32 – Troubleshooting with the kubectl describe pods command ](img/B18115_Fig_2.32.jpg)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.32 – 使用 kubectl describe pods 命令进行故障排除](img/B18115_Fig_2.32.jpg)'
- en: Figure 2.32 – Troubleshooting with the kubectl describe pods command
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.32 – 使用 kubectl describe pods 命令进行故障排除
- en: 'The following table summarizes all the possible issues and solutions based
    on the Pod state from the previously described command:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 下表总结了根据先前描述的命令中Pod状态可能出现的所有问题和解决方案：
- en: '![Table 2.3 – Examining the Pod status for possible issues ](img/B18115_02_Table_2.3.jpg)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![表 2.3 – 检查 Pod 状态以查找可能的问题](img/B18115_02_Table_2.3.jpg)'
- en: Table 2.3 – Examining the Pod status for possible issues
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 表 2.3 – 检查 Pod 状态以查找可能的问题
- en: We've looked at how to infer application issues from the Pod status information;
    in the following part, we'll look at it at the cluster level.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了如何从Pod状态信息推断应用程序问题；接下来，我们将在集群级别进行查看。
- en: The cluster level
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集群级别
- en: 'To get detailed information about the overall health of a MicroK8s cluster,
    you can run the following command:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取有关MicroK8s集群整体健康状况的详细信息，可以运行以下命令：
- en: '[PRE17]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: By default, this command dumps all the information about the cluster to the
    output for debugging and diagnosing cluster problems. It also dumps the logs of
    all the Pods in the cluster, which are split into directories by namespace and
    Pod name.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，此命令将所有集群信息输出，用于调试和诊断集群问题。它还会输出集群中所有Pod的日志，日志按命名空间和Pod名称分成不同的目录。
- en: Kubernetes also generates events whenever any of the resources it manages undergoes
    a change. The entity that initiated the event, the type of event (`Normal`, `Warning`,
    `Error`, and so on), and the cause are generally included in these events. This
    data is typically stored in `etcd` and made available when you run `kubectl events`
    commands.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes还会在它管理的任何资源发生变化时生成事件。事件通常包括触发事件的实体、事件类型（如`Normal`、`Warning`、`Error`等）以及原因。这些数据通常存储在`etcd`中，并在运行`kubectl
    events`命令时提供。
- en: 'These events provide insight into what occurred behind the scenes when a specific
    entity entered a particular state:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 这些事件提供了洞察力，帮助了解在特定实体进入某一状态时，幕后发生了什么：
- en: '[PRE18]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'MicroK8s also has a built-in inspection tool to generate a comprehensive report
    on the status of MicroK8s subsystems and the machine they run on. By running the
    tool, we can verify whether the system is working or not, and it also gathers
    all the important data for bug reporting:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: MicroK8s还内置了检查工具，可以生成关于MicroK8s子系统及其运行机器状态的综合报告。通过运行该工具，我们可以验证系统是否正常工作，并收集所有重要数据以供故障报告使用：
- en: '[PRE19]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Administrator privileges are required to run this tool and gather the data:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此工具并收集数据需要管理员权限：
- en: '![Figure 2.33 – The MicroK8s inspection tool ](img/B18115_Fig_2.33.jpg)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.33 – MicroK8s 检查工具](img/B18115_Fig_2.33.jpg)'
- en: Figure 2.33 – The MicroK8s inspection tool
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.33 – MicroK8s 检查工具
- en: We recognized that things may go wrong; there can be issues with the application,
    Kubernetes components, or the MicroK8s component. We've looked at how to diagnose
    problems and picked up a few tools to help us with our debugging.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 我们意识到问题可能会发生；应用程序、Kubernetes组件或MicroK8s组件可能会出现问题。我们已经学会了如何诊断问题，并掌握了一些调试工具来帮助我们解决问题。
- en: 'If you are unable to resolve your problem and feel it is due to a bug in MicroK8s,
    please submit an issue to the project repository at the following link: [https://github.com/ubuntu/microk8s/issues/](https://github.com/ubuntu/microk8s/issues/).'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您无法解决问题，并且认为是由于MicroK8s中的bug引起的，请通过以下链接向项目仓库提交问题：[https://github.com/ubuntu/microk8s/issues/](https://github.com/ubuntu/microk8s/issues/)。
- en: Summary
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: To summarize, we learned how to install MicroK8s, check the progress of the
    installation, and monitor and control a Kubernetes cluster in this chapter. We
    learned how to install a sample application and use some of the add-ons as well.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，本章我们学习了如何安装MicroK8s、检查安装进度，并且监控和控制Kubernetes集群。我们还学习了如何安装示例应用程序并使用一些附加组件。
- en: We also learned how to use MicroK8s with local container images as well as images
    retrieved from public and private registries. Furthermore, we investigated the
    inspection tool that creates a complete report on MicroK8s and the system it runs
    on, as well as walked through common issues to assist in fixing the most frequently
    encountered problems.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学习了如何使用MicroK8s与本地容器镜像以及从公共和私有注册中心获取的镜像。我们还研究了生成关于MicroK8s及其运行系统完整报告的检查工具，并了解了常见问题以帮助解决最常见的故障。
- en: The key concepts of *edge computing* will be introduced in the next chapter.
    We'll also look at some of the things to keep in mind when you develop your edge
    architecture.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '*边缘计算*的关键概念将在下一章介绍。我们还将探讨在开发边缘架构时需要注意的一些事项。'
- en: 'Part 2: Kubernetes as the Preferred Platform for IoT and Edge Computing'
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二部分：Kubernetes作为物联网和边缘计算的首选平台
- en: Data volumes continue to grow, particularly in industries such as manufacturing,
    oil and gas, energy, and transportation that are undergoing rapid digital transformation.
    There is a need to manage this data explosion at the edge and the many associated
    challenges, including the complexity of systems, data privacy, latency issues,
    low bandwidth connectivity, and increasing costs for storing and processing data,
    either in the cloud or data centers. In this part, we will look at how Kubernetes,
    the edge, and the cloud can collaborate to drive intelligent business decisions.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 数据量持续增长，尤其是在制造业、石油和天然气、能源和交通等正在经历快速数字化转型的行业中。需要在边缘管理这种数据爆炸以及许多相关挑战，包括系统的复杂性、数据隐私、延迟问题、低带宽连接性以及在云端或数据中心存储和处理数据的成本上升。在本部分中，我们将探讨Kubernetes、边缘和云如何协作，推动智能商业决策。
- en: 'This part of the book comprises the following chapters:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的这一部分包括以下章节：
- en: '[*Chapter 3*](B18115_03.xhtml#_idTextAnchor051), *Essentials of IoT and Edge
    Computing*'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第三章*](B18115_03.xhtml#_idTextAnchor051)，*物联网和边缘计算基础*'
- en: '[*Chapter 4*](B18115_04.xhtml#_idTextAnchor060), *Handling the Kubernetes Platform
    for IoT and Edge Computing*'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第四章*](B18115_04.xhtml#_idTextAnchor060)，*处理物联网和边缘计算中的Kubernetes平台*'

- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Automating Cloud Native Application Delivery
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化云原生应用交付
- en: In this chapter we will focus on Cloud Native application lifecycle. We’ll learn
    about best practices for development and delivery of Cloud Native apps and see
    how automation helps to *develop better* and *ship faster*.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将重点介绍云原生应用生命周期。我们将了解云原生应用的开发和交付最佳实践，并看看自动化如何帮助*更好地开发*和*更快地交付*。
- en: 'This chapter covers everything you need to know about *Cloud Native Application
    Delivery* domain of KCNA exam that makes up 8% of the total exam questions. The
    following topics we’re about to cover:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了KCNA考试中有关*云原生应用交付*领域的所有知识，该领域占总考试题目的8%。我们将要讨论的主题如下：
- en: Delivery of Cloud Native applications
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云原生应用交付
- en: CI/CD and GitOps
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CI/CD 和 GitOps
- en: Infrastructure as a Code (IaC)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基础设施即代码（IaC）
- en: This is the last technically packed chapter of the book. You’re almost ready
    to take the exam and become Kubernetes and Cloud Native associate. Carry on!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本书的最后一章技术内容。你几乎准备好参加考试并成为 Kubernetes 和 Cloud Native 助理了。继续加油！
- en: Delivery of Cloud Native applications
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云原生应用交付
- en: Modern applications are often developed at a high velocity which requires efficient
    and robust delivery processes. That is why Cloud Native applications delivery
    is a rather complex, but highly automated process consisting of multiple stages.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现代应用通常以较高的速度开发，这需要高效且强大的交付流程。这就是为什么云原生应用交付是一个相当复杂但高度自动化的过程，包含多个阶段。
- en: First, developers write code and commit it to a **Version Control System (VCS)**
    such as **Git**, **Mercurial** or **Subversion** with Git being de-facto standard
    today. The code is then *built*, *tested* and *released*. Automating those stages
    makes it possible to speed up the whole process of software delivery and make
    small, frequent, and well-tested software releases.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，开发人员编写代码并将其提交到**版本控制系统（VCS）**，如**Git**、**Mercurial** 或 **Subversion**，目前Git是事实上的标准。然后代码被*构建*、*测试*和*发布*。自动化这些阶段可以加速整个软件交付过程，并使得发布小而频繁且经过充分测试的软件版本成为可能。
- en: Release
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 发布
- en: Is a version of software including the changes (new features, enhancements,
    bugfixes, etc.) to be delivered to the users. Each release has **semantic versioning**
    where v1.0.0 commonly stands for the *first stable* release (More about semantic
    versioning can be found in *Further* *Reading* section).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 软件的一个版本，包括要交付给用户的变更（新功能、增强、修复等）。每个发布都有**语义版本控制**，其中v1.0.0通常代表*第一个稳定*版本（更多关于语义版本控制的信息，请参见*进一步阅读*部分）。
- en: '*To release* (as a verb) is also commonly used for describing the process of
    deploying to a production environment, e.g., making new software version available
    to the end users.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*发布*（作为动词）也常用于描述将软件部署到生产环境的过程，例如将新软件版本提供给最终用户。'
- en: 'Strictly speaking, the application delivered doesn’t have to be Cloud Native.
    However, with Cloud Native architectures that are often based on microservices,
    it is pretty much impossible to do all the *build-test-release* stages manually.
    Imagine for a moment you’d have to do it 30 times for 30 different microservices
    – slow, error prone, and tedious work. That is why automation became an essential
    part of modern application lifecycle and brought us many benefits including the
    following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 严格来说，交付的应用不一定非得是云原生应用。然而，由于云原生架构通常基于微服务，手动执行所有*构建-测试-发布*阶段几乎是不可能的。想象一下，如果你必须为30个不同的微服务做这些工作30次——这将是慢的、容易出错且繁琐的工作。这就是为什么自动化成为现代应用生命周期中不可或缺的一部分，并为我们带来了许多好处，包括以下几点：
- en: Faster delivery times and more frequent updates
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更快的交付时间和更频繁的更新
- en: More stable releases with automated processes
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过自动化流程获得更稳定的发布
- en: More productivity as manual work minimized
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减少人工工作提高生产力
- en: Fewer bugs with automated test runs
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过自动化测试减少缺陷
- en: Repeatable results
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可重复的结果
- en: 'Obviously, there is more to it than just *build-test-release* as every service
    should also be deployed, operated and monitored as suggested on *Figure* *11**.1*
    below:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，除了*构建-测试-发布*，每个服务还应部署、操作和监控，正如下面*图 11.1*所示：
- en: '![Figure 11.1 – modern application lifecycle.](img/B18970_11_01.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.1 – 现代应用生命周期。](img/B18970_11_01.jpg)'
- en: Figure 11.1 – modern application lifecycle.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.1 – 现代应用生命周期。
- en: This loop is infinite, and automation of the stages makes it possible to release
    the changes and updates even multiple times per day. In fact, it also saves a
    lot of developer’s time so that they could focus on developing new features and
    fixing bugs. It should also be possible to roll back the changes easily and fast
    in case of any issues (one example of how to do it with Kubernetes and Helm was
    discussed previously in [*Chapter 8*](B18970_08.xhtml#_idTextAnchor085)).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这个循环是无限的，阶段的自动化使得即使一天发布多次变更和更新也变得可能。事实上，这还节省了大量开发者的时间，使他们能够专注于开发新功能和修复bug。如果出现任何问题，应该能够轻松快速地回滚更改（之前在[*第8章*](B18970_08.xhtml#_idTextAnchor085)中讨论了如何使用Kubernetes和Helm来实现这一点）。
- en: Now that we know about the basics of Cloud Native application delivery, let’s
    dive into CI/CD and GitOps.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了Cloud Native应用交付的基本知识，让我们深入探讨CI/CD和GitOps。
- en: CI/CD and GitOps
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CI/CD和GitOps
- en: You might have heard it before, **CI** stands for **Continuous Integration**
    and **CD** for **Continuous Delivery** or sometimes **Continuous Deployment**.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能听说过，**CI**代表**持续集成**，**CD**代表**持续交付**，有时也代表**持续部署**。
- en: Continuous Integration
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 持续集成
- en: Is a practice and process automation targeting developers. With CI, code changes
    are regularly *built*, *tested* and *integrated* into a shared repository (branch/trunk/etc.)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 是一种面向开发者的实践和过程自动化。通过CI，代码更改会定期被*构建*、*测试*并*集成*到共享仓库中（分支/主干等）。
- en: CI is viewed as a solution to the problem of having too many changes in development
    at once that might conflict with each other and being hard *to merge*. The ultimate
    goal is to ensure that the software is always in the working state and in case
    automated tests fail, the team has to fix the problem first, before continuing
    with development.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: CI被视为解决开发中同时进行的过多更改可能相互冲突并且难以*合并*的问题。最终目标是确保软件始终处于可工作状态，如果自动化测试失败，团队必须先解决问题，然后才能继续开发。
- en: Continuous Delivery
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 持续交付
- en: Usually refers to an automation in the pipeline where the tested code changes
    mark a *release* that is uploaded to a package repository or container image.
    From there on, the image or a package can be *deployed* after approval.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 通常指的是Pipeline中的自动化，在这里经过测试的代码更改标志着一个*发布*，该发布被上传到软件包仓库或容器镜像。从那里起，镜像或软件包可以在批准后*部署*。
- en: Continuous Delivery can be seen as a way to align development and business teams
    and its purpose is to ensure that it would take minimum time and effort to deploy
    new code. In Continuous Delivery, there is normally an approval that should be
    done by a human before the release can be deployed to a production environment.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 持续交付可以看作是一种对齐开发和业务团队的方式，其目的是确保部署新代码所需的时间和精力最小化。在持续交付中，通常需要人工批准才能将发布版本部署到生产环境。
- en: Continuous Deployment
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 持续部署
- en: Is a further automation for deploying changes from the source repository to
    a development, testing or production environments. It is essentially Continuous
    Delivery except deployment happens automatically when all the tests and checks
    have passed.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 是将更改从源代码仓库自动部署到开发、测试或生产环境的进一步自动化。它本质上是持续交付，只不过当所有测试和检查通过后，部署会自动发生。
- en: 'Schematically, this can be seen as follows in *Figure 11**.2*:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 示意图如下所示，见*图11.2*：
- en: '![Figure 11.2 – the CI/CD/CD pipelines.](img/B18970_11_02.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图11.2 – CI/CD/CD管道](img/B18970_11_02.jpg)'
- en: Figure 11.2 – the CI/CD/CD pipelines.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.2 – CI/CD/CD管道
- en: Needless to say, there are many ways how to implement CI or CD automation in
    any organization, and there is no *single right way* of doing it. We can use different
    tools, introduce custom checks or deployment schedules, involve various stakeholders
    for approval, etc. However, one thing that will always be present is a **Pipeline**.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 毋庸置疑，任何组织中实现CI或CD自动化的方式有很多种，没有*单一的正确方式*。我们可以使用不同的工具，引入自定义检查或部署计划，涉及不同的利益相关者进行审批等。然而，有一件事总是存在的，那就是**Pipeline**。
- en: Ci/CD Pipeline
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: CI/CD Pipeline
- en: Is a top-level component which implements automation processes. Pipeline typically
    consists of multiple jobs and stages where output of one job or stage can be used
    as an input for the next job/stage. Pipeline might invoke multiple tools to compile
    the code, run unit tests, perform code analysis, create binaries, package code
    into container and so on.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 是实现自动化流程的顶级组件。Pipeline通常由多个任务和阶段组成，其中一个任务或阶段的输出可以作为下一个任务/阶段的输入。Pipeline可能会调用多个工具来编译代码、运行单元测试、执行代码分析、创建二进制文件、将代码打包成容器等。
- en: Why we often refer to pipelines when talking about CI/CD is because many processes
    in software delivery have sequential steps that are executed one after another.
    You can think of it as a pipe where the source code comes in on one side and built
    and tested package come out on another side. Or, possibly, the package is being
    deployed on the other end. And this process repeats all over again as previously
    shown on *Figure 11**.1*.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在谈论CI/CD时为什么常提到流水线，是因为软件交付中的许多过程都有顺序执行的步骤。你可以把它看作一个管道，源代码从一端进入，构建和测试后的包从另一端出来，或者包可能被部署到另一端。这个过程会像*图11.1*中展示的那样一遍遍重复。
- en: Speaking about the packages and change sets, it is considered best to release
    and deploy small changes often, rather than infrequently do big changes, especially
    when implementing *Continuous Deployment*. When the change set is small, there
    is much lower risk of things going wrong, so it is recommended to release and
    deploy small, tested changes regularly instead of deploying many changes together
    as *big bang* once in a while.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 说到包和变更集，通常认为最好的做法是频繁发布和部署小的更改，而不是偶尔做大的更改，特别是在实施*持续部署*时。当变更集较小时，出现问题的风险要低得多，因此建议定期发布和部署经过测试的小更改，而不是一次性部署许多更改作为*爆炸式更新*。
- en: Now that we’ve covered the concept, let’s mention few tools that can help us
    to implement CI/CD automation. There are many tools available today and despite
    different feature sets, they all can be used to build and run CI/CD pipelines.
    Some might be a better fit for your tech stack with better support for one or
    another VCS, some provide Kubernetes and various IaaS/PaaS integrations, and some
    are only available *as a service*. CI/CD system offered as a service means provider
    will take care of its maintenance, updates, scaling and so on for a monthly fee.
    Make sure to conduct some research before picking one for your team.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了这个概念，接下来提到一些可以帮助我们实现CI/CD自动化的工具。今天有许多工具可用，尽管功能集各不相同，但它们都可以用来构建和运行CI/CD流水线。某些工具可能更适合你的技术栈，提供更好的VCS支持，某些提供Kubernetes和各种IaaS/PaaS集成，某些则仅作为*服务*提供。作为服务提供的CI/CD系统意味着供应商将负责其维护、更新、扩展等，按月收费。在为团队选择一个工具之前，确保进行一些研究。
- en: 'Listed here are a few popular CI/CD systems that you might want to check out:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这里列出了一些你可能想了解的流行CI/CD系统：
- en: '**ArgoCD**'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ArgoCD**'
- en: '**Jenkins**'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Jenkins**'
- en: '**Gitlab CI**'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Gitlab CI**'
- en: '**Tekton**'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Tekton**'
- en: '**GitHub Actions**'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GitHub Actions**'
- en: '**Spinnaker**'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Spinnaker**'
- en: '**FluxCD**'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**FluxCD**'
- en: '**GoCD**'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GoCD**'
- en: '**CircleCI**'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CircleCI**'
- en: '**TravisCI**'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TravisCI**'
- en: Note
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The presence of *CI* or *CD* in the names does not mean you can only implement
    *CI* or *CD* with that tool. Some of the tools could be used for implementing
    both *CI* and *CD* and some not.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 名字中带有*CI*或*CD*并不意味着你只能用该工具来实现*CI*或*CD*。一些工具可以同时用于实现*CI*和*CD*，而一些则不行。
- en: GitOps
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GitOps
- en: Previously, we’ve learned about *DevOps*, *DevSecOps*, *FinOps,* and now there
    is one more *Ops* to go – **GitOps**. Introduced in 2017, it is a further evolution
    of industry best practices and CI/CD applied for modern infrastructure and Cloud
    Native application delivery.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们学习了*DevOps*、*DevSecOps*、*FinOps*，现在还有一个*Ops*要介绍——**GitOps**。它于2017年推出，是对现代基础设施和Cloud
    Native应用交付的行业最佳实践和CI/CD的进一步演进。
- en: GitOps
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: GitOps
- en: Is an operational framework combining DevOps practices such as Git version control,
    collaboration, compliance, declarative configuration, and CI/CD.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 是一个结合了DevOps实践的操作框架，如Git版本控制、协作、合规性、声明性配置和CI/CD。
- en: '![Figure 11.3 – overview of GitOps.](img/B18970_11_03.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图11.3 – GitOps概述。](img/B18970_11_03.jpg)'
- en: Figure 11.3 – overview of GitOps.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.3 – GitOps概述。
- en: 'GitOps based upon three core elements:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: GitOps基于三个核心元素：
- en: '**Merge Requests (MR) + Infrastructure as a Code (IaC) +** **CI/CD**'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**合并请求（MR）+基础设施即代码（IaC）+** **CI/CD**'
- en: '`master`) branch and commit messages along with comments serve as an audit
    log.'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`master`）分支和提交消息及评论作为审计日志。'
- en: '**IaC** is the topic of the upcoming section, but at a high-level, it is a
    practice of describing desired infrastructure configuration and setup as a code
    that is kept in Git repository. IaC is an example of *declarative configuration*
    that serves as the *source of truth* for your infrastructure.'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**IaC**是下一个章节的主题，但简单来说，它是一种将期望的基础设施配置和设置描述为代码，并存储在Git仓库中的实践。IaC是*声明性配置*的一个例子，作为你基础设施的*真实来源*。'
- en: '**CI/CD** is an essential part of GitOps and its purpose is not just to automate
    the delivery stages described in the previous section, but also to avoid manual
    changes and eliminate **infrastructure drift**. Manual changes are not tolerated
    with GitOps.'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**CI/CD**是GitOps的一个关键组成部分，它的目的是不仅自动化前一节中描述的交付阶段，还能避免手动更改并消除**基础设施漂移**。GitOps不容忍手动更改。'
- en: Infrastructure (configuration) drift
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 基础设施（配置）漂移
- en: Is when the real-time state of the infrastructure does not match what has been
    defined in your *IaC* configuration. Drift can be caused by manual human actions,
    applications making unintended changes, software bugs and other reasons.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是基础设施的实时状态与*IaC*配置中定义的内容不匹配的情况。漂移可能是由手动操作、应用程序进行意外更改、软件漏洞等原因引起的。
- en: Drift can cause uncertainty, application failures, and even introduce security
    holes. That is why eliminating infrastructure drift is very important and GitOps
    does this job well if implemented right. If someone did manual changes, then latest
    on the next MR being accepted and merged into the *source of truth* Git repository
    those manual changes will be overwritten and drift will be eliminated.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 漂移可能导致不确定性、应用程序故障，甚至引入安全漏洞。这就是为什么消除基础设施漂移非常重要，如果实现得当，GitOps能够很好地完成这项工作。如果有人做了手动更改，那么在下一个MR被接受并合并到*事实来源*Git仓库时，这些手动更改将被覆盖，漂移将被消除。
- en: Furthermore, some advanced GitOps tools such as *ArgoCD*, *FluxCD* and *Jenkins
    X* have the capability to constantly watch the changes in Git repository and propagate
    those to a connected live environment. The system will resync and bring environment
    to the desired state automatically – any manual change on the live environment
    will be overwritten in a matter of seconds. New changes coming from code merged
    in Git will be deployed automatically and fast.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，一些高级GitOps工具，如*ArgoCD*、*FluxCD*和*Jenkins X*，具备持续监控Git仓库中的变化并将其传播到连接的实时环境中的能力。系统会自动重新同步，并将环境恢复到期望状态——任何在实时环境中的手动更改都会在几秒钟内被覆盖。从Git合并的代码中的新变化会自动快速部署。
- en: One thing to keep in mind is that *ArgoCD*, *FluxCD* and *Jenkins X* require
    Kubernetes cluster to run on. That does not mean it is impossible to implement
    GitOps without Kubernetes, but implementing it with Kubernetes is much easier
    due to developed ecosystem and its ultimate *reconciliation loop* functionality
    that brings cluster resources to the desired state (see [*Chapter 5*](B18970_05.xhtml#_idTextAnchor059)
    in case you’ve forgotten).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 需要记住的一点是，*ArgoCD*、*FluxCD*和*Jenkins X*需要在Kubernetes集群上运行。这并不意味着没有Kubernetes就无法实现GitOps，但由于Kubernetes拥有开发完善的生态系统及其终极的*协调循环*功能，它能将集群资源带回到期望状态，使用Kubernetes实现GitOps要容易得多（如果你忘了的话，参考[*第5章*](B18970_05.xhtml#_idTextAnchor059)）。
- en: Let’s consider the following example to see how GitOps and K8s can complement
    each other. Imagine your team operates microservices on Kubernetes and specification
    definitions are stored in Git repository which acts as the source of truth. You
    use ArgoCD for GitOps that deploys K8s manifests to the target Kubernetes clusters.
    A new colleague has recently started in your team and got the task to decommission
    a microservice that is no longer needed.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下示例来看GitOps和K8s是如何互相补充的。假设你的团队在Kubernetes上运行微服务，规格定义存储在Git仓库中，Git仓库作为事实来源。你使用ArgoCD来进行GitOps，将K8s清单部署到目标Kubernetes集群。最近，你团队里有一位新同事，他的任务是停用一个不再需要的微服务。
- en: Unfortunately, the new colleague was not fully onboarded with the processes
    and started deleting Kubernetes resources manually with `kubectl` which is a GitOps
    anti-pattern. By mistake, he/she has deleted wrong K8 Deployment which belonged
    to another microservice in production environment. Kubernetes controller loop
    kicked in and started terminating Pods managed by that Deployment, bringing wrong
    microservice down. Luckily, ArgoCD had auto-sync turned on and detected that the
    state of both affected microservices has drifted away from the definition located
    in Git repository. ArgoCD kicked in and quickly created missing Deployment and
    other manually deleted resources. The service quickly came back online. A colleague
    has opened a MR to change the desired state in Git correctly which got approved
    by the teammates and merged. In an event of wrong changes been merged into Git,
    it is just as easy to roll them back by simply reverting the respective commit.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，这位新同事并没有完全了解流程，开始使用 `kubectl` 手动删除 Kubernetes 资源，这种做法是 GitOps 的反模式。由于错误，他/她删除了错误的
    K8 部署，该部署属于生产环境中的另一个微服务。Kubernetes 控制循环开始工作，终止了由该部署管理的 Pods，导致错误的微服务停机。幸运的是，ArgoCD
    开启了自动同步，并检测到两个受影响的微服务的状态已经偏离了位于 Git 仓库中的定义。ArgoCD 启动并迅速创建了缺失的部署以及其他手动删除的资源。服务很快恢复上线。一位同事提出了一个
    MR，正确地修改了 Git 中所需的状态，并且得到了队友的批准并合并。如果错误的更改被合并到 Git 中，恢复它们也同样简单，只需回滚相应的提交即可。
- en: '*Figure 11**.4* demonstrates an example GitOps process:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 11.4* 演示了一个 GitOps 流程的示例：'
- en: '![Figure 11.4 – CI/CD and GitOps example with ArgoCD and Kubernetes.](img/B18970_11_04.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.4 – 使用 ArgoCD 和 Kubernetes 的 CI/CD 和 GitOps 示例](img/B18970_11_04.jpg)'
- en: Figure 11.4 – CI/CD and GitOps example with ArgoCD and Kubernetes.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.4 – 使用 ArgoCD 和 Kubernetes 的 CI/CD 和 GitOps 示例。
- en: If you decide to implement similar process in your team or organization, consider
    the fact that ArgoCD is suitable for GitOps and CD, but for implementing CI, you’ll
    need an additional tool. That could be, for example, Argo Workflows or Gitlab
    CI or similar.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你决定在你的团队或组织中实施类似的流程，请考虑到 ArgoCD 适用于 GitOps 和 CD，但要实现 CI，你还需要一个额外的工具。比如说，Argo
    Workflows、Gitlab CI 或类似的工具。
- en: To wrap it up, GitOps is a very powerful framework that primarily focuses on
    CD and CI. It allows to deliver software at a very fast pace, maximize stability,
    increase productivity and free up productive time for the team as manual operations
    are automated. All configurations are transparent, auditable and reviewable. For
    best results and maximum efficiency, you also need to implement CI to automate
    testing and building of the applications.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，GitOps 是一个非常强大的框架，主要关注 CD 和 CI。它允许以非常快的速度交付软件，最大化稳定性，提高生产力，并且通过自动化手动操作为团队释放更多的生产时间。所有配置都是透明的、可审计的，并且可以复审。为了获得最佳结果和最大效率，你还需要实施
    CI 来自动化应用程序的测试和构建。
- en: Finally, let’s talk about IaC in more detail.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们更详细地讨论一下 IaC。
- en: Infrastructure as a Code (IaC)
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基础设施即代码（IaC）
- en: IaC is the practice of managing and provisioning infrastructure in a declarative
    way via definition files. You describe the desired state in definition files and
    let a tool apply the configuration to your environment.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: IaC 是通过定义文件以声明性方式管理和配置基础设施的实践。你在定义文件中描述所需的状态，并让工具将配置应用到你的环境中。
- en: Don’t worry, despite the presence of the word *Code* that does not mean you’ll
    need to learn how to code in **C++** or **Java** or other advanced programming
    language. Most IaC tools allow configuration to be defined in *YAML* or a similar
    human-readable markup language.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 不用担心，尽管出现了*Code*这个词，但这并不意味着你需要学习**C++**、**Java**或其他高级编程语言。大多数基础设施即代码（IaC）工具允许使用*YAML*或类似的可读性高的标记语言来定义配置。
- en: IaC automates and replaces manual operations for infrastructure configuration
    and provisioning. Essentially, all actions that can be done using your cloud provider
    UI or CLI manually can be done with an IaC tool. Instead of clicking through the
    dashboard to configure and provision VM every time you need one, you could describe
    the desired number and type of VMs you need in IaC and keep that configuration
    in Git or other version control. Invoking an IaC tool with desired configuration
    will establish communication with cloud provider API and create described resources.
    If resources were there before and configured correctly, IaC tool won’t do any
    further changes. Resources that IaC can provision include VMs, load balancers,
    network attached storage, firewall rules, object storage buckets and much-much
    more.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: IaC 自动化并替代了基础设施配置和供应的手动操作。从本质上讲，所有可以通过云提供商的 UI 或 CLI 手动完成的操作，都可以通过 IaC 工具来实现。你无需每次都通过控制面板点击来配置和供应虚拟机，而是可以在
    IaC 中描述你所需的虚拟机数量和类型，并将该配置保存在 Git 或其他版本控制中。通过调用带有所需配置的 IaC 工具，它将与云提供商的 API 建立通信，并创建所描述的资源。如果资源之前已经存在并且配置正确，IaC
    工具则不会进行进一步的更改。IaC 可以供应的资源包括虚拟机、负载均衡器、网络附加存储、防火墙规则、对象存储桶等更多资源。
- en: Today, **Terraform** is one of the most popular IaC tools on the market. It
    supports major public and private cloud providers and most of their IaaS/PaaS/SaaS/FaaS
    offerings.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，**Terraform** 是市场上最受欢迎的 IaC 工具之一。它支持主要的公有云和私有云提供商以及他们大多数的 IaaS/PaaS/SaaS/FaaS
    服务。
- en: 'Terraform accepts JSON as well as own `.tf` definition file format and here
    is a small example to give you an idea what it looks like:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 接受 JSON 格式以及它自己的 `.tf` 定义文件格式，下面是一个小示例，帮助你了解它的格式：
- en: '[PRE0]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If applied, this definition file will provision a `t3.medium` type VM tagged
    `KCNAExampleInstance` in AWS public cloud in `eu-central-1` region. This VM can
    also be referenced again in other definition files, for example, if you’d like
    to attach a storage block device to it.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用该定义文件，它将在 AWS 公共云的 `eu-central-1` 区域中供应一个 `t3.medium` 类型的虚拟机，并标记为 `KCNAExampleInstance`。该虚拟机也可以在其他定义文件中再次引用，例如，如果你想附加一个存储块设备到该虚拟机上。
- en: 'For the scope of KCNA, you don’t need to memorize the format or `.tf` specifics,
    but you need to remember the advantages of IaC which were already mentioned in
    the previous section since IaC is an essential part of GitOps:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 KCNA 的范围，你不需要记住 `.tf` 格式的具体细节，但你需要记住 IaC 的优势，这些已经在前面一节中提到过，因为 IaC 是 GitOps
    的关键部分：
- en: Faster setup and reproducible results.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更快的设置和可复现的结果。
- en: Human-readable and reviewable configuration that can be stored in VCS.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可读且可审查的配置，可以存储在 VCS 中。
- en: Elimination of infrastructure drift with desired state definition.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过定义期望状态来消除基础设施漂移。
- en: Worth mentioning that some cloud providers have their own, vendor specific IaC
    tools that might offer better support for their cloud services, but obviously
    won’t be compatible with any other providers. **CloudFormation** – an IaC made
    by AWS only for AWS would be such an example.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，一些云提供商有自己的、特定于厂商的 IaC 工具，这些工具可能会为其云服务提供更好的支持，但显然不会与其他云提供商兼容。**CloudFormation**——由
    AWS 专为 AWS 开发的 IaC 就是一个这样的例子。
- en: If you remember the exercises we did in *Chapters 5* and *6*, we basically used
    IaC with Kubernetes. Kubernetes uses declarative resource definitions to describe
    workloads but can also be used to provision load balancers (with `LoadBalancer`
    Service type) and persistent storage (as *PV* and *PVC*). When you run it in a
    public cloud environment and apply the specification, Kubernetes cloud controller
    manager will interact with provider APIs and ensure that resources are provisioned
    and in the desired state.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还记得我们在 *第 5 章* 和 *第 6 章* 中做的练习，我们基本上是用 IaC 配置了 Kubernetes。Kubernetes 使用声明式资源定义来描述工作负载，但也可以用于供应负载均衡器（使用
    `LoadBalancer` 服务类型）和持久存储（作为 *PV* 和 *PVC*）。当你在公共云环境中运行它并应用规范时，Kubernetes 云控制器管理器将与提供商
    API 进行交互，确保资源被供应并处于期望的状态。
- en: Summary
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter we’ve learned about the delivery of Cloud Native applications.
    Modern applications require CI/CD to automate all stages of software delivery.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了云原生应用程序的交付。现代应用程序需要 CI/CD 来自动化所有软件交付阶段。
- en: Where CI focuses on the first *build-test-release* stages, *Continuous Delivery*
    focuses on packaging software in container images or installable software packages
    and uploading them into container registry or package repositories respectively.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在CI集中于*构建-测试-发布*阶段时，*持续交付*则专注于将软件打包成容器镜像或可安装的软件包，并分别上传到容器注册表或软件包仓库中。
- en: Another CD – *Continuous Deployment* focuses on automatic deployment of the
    tested and packaged *releases* into various live environments.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个CD——*持续部署*专注于将经过测试和打包的*发布*自动部署到各个实时环境中。
- en: Next, we’ve seen how *GitOps* evolved on top of *CI/CD* by adding reviewable
    merge (or pull) requests together with IaC. This has led to an ultimate, highly
    automated, and powerful process that works especially well with Kubernetes. Some
    of the popular tools that help implementing GitOps are *ArgoCD*, *FluxCD* and
    *Jenkins X*.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们已经看到*GitOps*如何在*CI/CD*的基础上发展，添加了可审查的合并（或拉取）请求，并与IaC结合使用。这导致了一个最终的、高度自动化且强大的流程，尤其在Kubernetes环境中表现出色。帮助实现GitOps的一些流行工具包括*ArgoCD*、*FluxCD*和*Jenkins
    X*。
- en: IaC is the practice of managing and provisioning infrastructure in a declarative
    way with definition files. Using IaC allows to eliminate *Infrastructure Drift*
    and have reviewable and reproducible infrastructure configuration. *Terraform*
    is one of the most popular IaC tools today.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: IaC（基础设施即代码）是通过定义文件以声明式方式管理和配置基础设施的实践。使用IaC可以消除*基础设施漂移*，并使基础设施配置可审查且可重现。*Terraform*
    是当前最受欢迎的IaC工具之一。
- en: Going with IaC and GitOps means no manual changes, no manual deployments or
    live reconfiguration is allowed. The whole team should be aware and follow the
    process. Git repositories act as a source of truth and CI/CD systems ensure that
    this desired state is reached and maintained.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 采用IaC和GitOps意味着不允许手动更改、不允许手动部署或实时重新配置。整个团队应当了解并遵循该流程。Git仓库充当真实来源，CI/CD系统确保达到并维持这一预期状态。
- en: And with that we’ve finished the last technical chapter! Congratulations and
    well done! In the next two chapters you’ll find a mock exam to evaluate your readiness
    as well as tips on how to pass the exam and what to do after.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 至此，我们已经完成了最后一个技术章节！祝贺你，做得好！在接下来的两章中，你将找到一份模拟考试，以评估你的准备情况，以及如何通过考试的提示和考试后的步骤。
- en: Questions
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Correct answers can be found at __TBD__
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 正确答案可以在__待定__处找到
- en: What does CI mean?
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CI代表什么？
- en: Continuous Interaction
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 持续交互
- en: Continuous Improvement
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 持续改进
- en: Continuous Integration
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 持续集成
- en: Continuous Inspection
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 持续检查
- en: Which of the following stages are the focus of CI automation (pick multiple)?
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪些阶段是CI自动化的重点（可多选）？
- en: Release
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发布
- en: Build, Test
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建，测试
- en: Deploy
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署
- en: Package
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打包
- en: Which of the following definitions are correct for CD (pick multiple)?
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪些定义是正确的CD定义（可多选）？
- en: Continuous Debugging
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 持续调试
- en: Continuous Delivery
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 持续交付
- en: Continuous Destruction
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 持续销毁
- en: Continuous Deployment
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 持续部署
- en: Which of the following is considered a CI/CD practice?
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪些被视为CI/CD实践？
- en: Frequent, large releases done by the whole team together
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 整个团队一起进行频繁的大规模发布
- en: Frequent, small, and fully automated releases
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 频繁的小规模且完全自动化的发布
- en: Frequent, small, well tested, and automated releases
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 频繁的小规模、经过充分测试且自动化的发布
- en: Infrequent, large, and automated releases
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不频繁的大规模自动化发布
- en: Which of the following tools are suitable for GitOps (pick multiple)?
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪些工具适用于GitOps（可多选）？
- en: Jenkins X
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Jenkins X
- en: FluxCD
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: FluxCD
- en: TravisCI
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: TravisCI
- en: ArgoCD
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: ArgoCD
- en: Which of the following elements are a part of GitOps (pick multiple)?
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪些元素是GitOps的一部分（可多选）？
- en: Kubernetes
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Kubernetes
- en: CI/CD
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: CI/CD
- en: IaC
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: IaC
- en: Merge (or pull) Requests
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 合并（或拉取）请求
- en: Which VCS is used with GitOps?
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: GitOps使用的是哪个VCS？
- en: Bitbucket
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Bitbucket
- en: Subversion
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Subversion
- en: Git
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Git
- en: Mercurial
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Mercurial
- en: What is infrastructure drift?
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是基础设施漂移？
- en: When the infrastructure is fully automated and can drift on autopilot
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当基础设施完全自动化并可以自动驾驶时
- en: When the number of VMs in cloud has increased due to autoscaling events
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当由于自动扩展事件导致云中VM的数量增加时
- en: When the performance of VMs varies during the day depending on demand
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当VM的性能在一天中的不同时间根据需求变化时
- en: When the real infrastructure state is different from what is desired and defined
    by IaC
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当实际的基础设施状态与IaC定义的预期状态不符时
- en: What should NOT be done with established GitOps process in team?
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 团队中已建立的GitOps流程不应该做什么？
- en: Monitoring the system state
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 监控系统状态
- en: Opening (pull) merge requests
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开放（拉取）合并请求
- en: Manual changes in the live environment
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实时环境中的手动更改
- en: Reviewing teammate’s code as tests are automated
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为测试已经自动化，所以需要审查队友的代码
- en: What is normally defined with IaC (pick multiple)?
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通常在 IaC 中定义的内容是什么（请选择多个）？
- en: System architecture
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 系统架构
- en: VMs and load balancers
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 虚拟机和负载均衡器
- en: Database migrations
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据库迁移
- en: Firewall rules
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 防火墙规则
- en: What are the benefits of GitOps (pick multiple)?
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: GitOps 的好处是什么（请选择多个）？
- en: Faster and more stable software delivery
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更快、更稳定的软件交付
- en: No need to monitor live environments anymore
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不再需要监控实时环境
- en: More free time for the team due to high degree of automation
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于高度自动化，团队拥有更多自由时间
- en: All Kubernetes operations are handled by CI/CD
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有 Kubernetes 操作都由 CI/CD 处理
- en: What are the benefits of CI (pick multiple)?
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CI 的好处是什么（请选择多个）？
- en: Automatic deployment of tested code
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 自动部署已测试的代码
- en: Automatic packaging of tested code
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 自动打包已测试的代码
- en: No developer time spent for running builds or tests
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 没有开发人员的时间花费在运行构建或测试上
- en: Issue detection with automated tests
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用自动化测试进行问题检测
- en: What is a correct definition of a *release*?
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*Release* 的正确定义是什么？'
- en: A version of software to be delivered to the users
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要交付给用户的软件版本
- en: A current state of application in K8s cluster
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: K8s 集群中应用程序的当前状态
- en: A decision to stop further development
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止进一步开发的决定
- en: A complete CI/CD pipeline run
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完整的 CI/CD 流水线运行
- en: Which of the following is a CI/CD tool?
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪项是 CI/CD 工具？
- en: CloudFormation
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: CloudFormation
- en: Terraform
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Terraform
- en: GitlabCI
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: GitlabCI
- en: Subversion
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Subversion
- en: What normally triggers a deployment in GitOps?
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 GitOps 中，什么通常触发部署？
- en: Push into any Git branch
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 推送到任何 Git 分支
- en: An event of infrastructure drift
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 基础设施漂移事件
- en: Approved and merged MR (PR)
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 已批准并合并的 MR（PR）
- en: Manual rebase in Git
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Git 中的手动 rebase
- en: Which of the following is true about GitOps (pick multiple)?
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪些关于 GitOps 的说法是正确的（请选择多个）？
- en: Overwrite of manual changes
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 覆盖手动更改
- en: It is only possible with Kubernetes
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这仅在 Kubernetes 中可行
- en: Uses declarative configuration
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用声明式配置
- en: Can only be used with a few popular programming languages
  id: totrans-184
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只能与一些流行的编程语言一起使用
- en: Which of the following stages are NOT a part of CI/CD (pick multiple)?
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个阶段不是 CI/CD 的一部分（请选择多个）？
- en: Monitor
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 监控
- en: Build
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建
- en: Plan
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计划
- en: Code
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码
- en: Further reading
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Semantic versioning: [https://semver.org/](https://semver.org/)'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '语义化版本控制: [https://semver.org/](https://semver.org/)'
- en: 'What is GitOps: [https://www.weave.works/blog/what-is-gitops-really](https://www.weave.works/blog/what-is-gitops-really)'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '什么是 GitOps: [https://www.weave.works/blog/what-is-gitops-really](https://www.weave.works/blog/what-is-gitops-really)'
- en: 'ArgoCD: [https://argo-cd.readthedocs.io/](https://argo-cd.readthedocs.io/)'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'ArgoCD: [https://argo-cd.readthedocs.io/](https://argo-cd.readthedocs.io/)'
- en: 'ArgoCD examples: [https://github.com/argoproj/argocd-example-apps](https://github.com/argoproj/argocd-example-apps)'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'ArgoCD 示例: [https://github.com/argoproj/argocd-example-apps](https://github.com/argoproj/argocd-example-apps)'
- en: 'FluxCD: [https://fluxcd.io/](https://fluxcd.io/)'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'FluxCD: [https://fluxcd.io/](https://fluxcd.io/)'
- en: 'GitLab for CI/CD: [https://docs.gitlab.com/ee/ci/](https://docs.gitlab.com/ee/ci/)'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'GitLab 用于 CI/CD: [https://docs.gitlab.com/ee/ci/](https://docs.gitlab.com/ee/ci/)'
- en: 'Terraform: [https://www.terraform.io/](https://www.terraform.io/)'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Terraform: [https://www.terraform.io/](https://www.terraform.io/)'
- en: 'Part 5: KCNA Exam and Next Steps'
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五部分：KCNA 考试和后续步骤
- en: In this closing part, you’ll find tips for preparing for and passing the exam,
    along with two mock exams to verify your knowledge. Finally, we’ll discuss what
    your next steps could be after getting certified to start or advance your cloud
    native career.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一结束部分，您将找到考试准备和通过的技巧，以及两个模拟考试来验证您的知识。最后，我们将讨论获得认证后，如何启动或推进您的云原生职业生涯。
- en: 'This part contains the following chapters:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分包含以下章节：
- en: '[*Chapter 12*](B18970_12.xhtml#_idTextAnchor122), *Practicing for the KCNA
    Exam with Mock Papers*'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第12章*](B18970_12.xhtml#_idTextAnchor122), *通过模拟试卷为 KCNA 考试做准备*'
- en: '[*Chapter 13*](B18970_13.xhtml#_idTextAnchor128), *The Road Ahead*'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第13章*](B18970_13.xhtml#_idTextAnchor128), *前进的道路*'

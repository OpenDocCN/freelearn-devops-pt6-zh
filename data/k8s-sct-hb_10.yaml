- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Exploring Cloud Secret Store on GCP
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 GCP 上的 Cloud Secret Store
- en: Previously, we did a deep dive into Azure Key Vault. We managed to store Secrets
    securely on Key Vault and utilized it as a key management service for the Secrets
    that will reside on etcd. In this chapter, we will focus on the Google Cloud Platform
    and will utilize the Secret Manager of Google Cloud.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们深入研究了 Azure Key Vault。我们成功地将 Secrets 安全地存储在 Key Vault 中，并将其作为 Secrets 在
    etcd 中存储的密钥管理服务。在本章中，我们将专注于 Google Cloud 平台，并将使用 Google Cloud 的 Secret Manager。
- en: 'We will be covering the following topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Overview of GCP Secret Manager
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GCP Secret Manager 概述
- en: Workload Identity on GKS
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GKS 上的工作负载身份
- en: GKE and GCP Secret Manager integration
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GKE 和 GCP Secret Manager 集成
- en: Auditing and logging
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 审计和日志记录
- en: GKE and KMS integration
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GKE 和 KMS 集成
- en: By the end of this chapter, we should be able to store our Secrets to GCP Secret
    Manager securely, monitor secret access through auditing, and add an extra layer
    of security by encrypting the Secrets on etcd.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，我们应该能够将我们的 Secrets 安全地存储到 GCP Secret Manager 中，通过审计监控密钥访问，并通过在 etcd 上加密
    Secrets 来增加额外的安全层。
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To link concepts with hands-on examples, we are leveraging a series of tools
    and platforms commonly used to interact with the Google Cloud API and Kubernetes:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将概念与实际操作示例联系起来，我们使用了一系列常见的工具和平台，这些工具和平台通常用于与 Google Cloud API 和 Kubernetes
    进行交互：
- en: '**gcloud CLI** ([https://cloud.google.com/sdk/gcloud#download_and_install_the](https://cloud.google.com/sdk/gcloud#download_and_install_the))
    is a set of tools to create and manage Google Cloud resources'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**gcloud CLI** ([https://cloud.google.com/sdk/gcloud#download_and_install_the](https://cloud.google.com/sdk/gcloud#download_and_install_the))
    是一套工具，用于创建和管理 Google Cloud 资源。'
- en: '**Terraform** ([https://www.terraform.io/](https://www.terraform.io/)) is infrastructure-as-code
    software that can be used to provision and manage infrastructure on the cloud'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Terraform** ([https://www.terraform.io/](https://www.terraform.io/)) 是一种基础设施即代码的软件，可以用于在云端配置和管理基础设施。'
- en: '**kubectl** ([https://kubernetes.io/docs/reference/kubectl/](https://kubernetes.io/docs/reference/kubectl/))
    is the command-line tool used for communicating with a Kubernetes cluster through
    the Kubernetes API'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**kubectl** ([https://kubernetes.io/docs/reference/kubectl/](https://kubernetes.io/docs/reference/kubectl/))
    是一个命令行工具，用于通过 Kubernetes API 与 Kubernetes 集群进行通信。'
- en: Overview of GCP Secret Manager
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GCP Secret Manager 概述
- en: GCP Secret Manager is the secret manager solution provided by Google Cloud.
    Provided that we have an application that has the need to store Secrets, the Secret
    Manager can be utilized. The application can be deployed on Compute Engine, Kubernetes,
    Cloud Functions, or any other legitimate form of deployment on Google Cloud.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: GCP Secret Manager 是 Google Cloud 提供的秘密管理解决方案。只要我们有一个需要存储 Secrets 的应用，Secret
    Manager 就可以被利用。该应用可以部署在 Compute Engine、Kubernetes、Cloud Functions 或任何其他 Google
    Cloud 上的合法部署形式中。
- en: 'Since this service is managed by Google Cloud, there are some features offered
    by default. We can summarize them as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 由于此服务由 Google Cloud 管理，默认提供了一些功能。我们可以总结如下：
- en: IAM
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IAM
- en: High availability
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高可用性
- en: Logging and auditing
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志记录与审计
- en: Integration with other Google Cloud components
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与其他 Google Cloud 组件的集成
- en: Let’s have a deep dive into each one.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解每一个内容。
- en: IAM
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IAM
- en: Google Cloud comes with **identity access management** (**IAM**). Certain IAM
    permissions take effect on an organizational level, allowing us to manage an organization’s
    resources. Then we have IAM permissions that apply project-wide, thus they are
    permissions assigned to target specific resources throughout a GCP project. The
    most granular level is resource-based IAM permissions. When we create a resource,
    we can have permissions only for that specific resource. The identities can be
    either users, Google Groups, or service accounts. Permissions for a specific resource
    can be assigned to a specific identity.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Google Cloud 提供了 **身份访问管理**（**IAM**）。某些 IAM 权限在组织级别生效，使我们能够管理组织的资源。然后，我们还有适用于项目范围的
    IAM 权限，这些权限用于分配特定资源的访问权限。最细粒度的权限是基于资源的 IAM 权限。当我们创建一个资源时，可以为该特定资源分配权限。身份可以是用户、Google
    群组或服务帐户。可以将特定资源的权限分配给特定身份。
- en: High availability
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高可用性
- en: Secret Manager is a highly available solution and covers disaster recovery scenarios.
    By default, the Secrets can be accessed globally from different regions of Google
    Cloud. Behind the scenes, the Secrets are replicated in multiple regions unless
    specified otherwise. A reason to specify the regions is data residency limitations.
    If a secret cannot be stored in a certain region, we can define the regions we
    want the secret to be stored in and exclude any regions that should not contain
    any of our data.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 密钥管理器是一个高可用的解决方案，覆盖了灾难恢复场景。默认情况下，机密可以从Google Cloud的不同区域全球访问。在后台，机密会在多个区域进行复制，除非另有指定。指定区域的原因是数据驻留限制。如果某个机密不能存储在特定区域，我们可以定义要存储机密的区域，并排除任何不应包含我们数据的区域。
- en: Logging, auditing, and monitoring
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日志记录、审计和监控
- en: Google Cloud has, by default, a logging solution that is used for application
    logs but also for audit logs. There is a distinction between application logs
    and audit logs. To be able to access audit logs on a GCP project, you need to
    have the Private Logs Viewer permission.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Google Cloud默认提供一个日志记录解决方案，既用于应用日志，也用于审计日志。应用日志与审计日志之间是有区别的。要访问GCP项目上的审计日志，您需要具有“Private
    Logs Viewer”权限。
- en: Integration with other Google Cloud components
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与其他Google Cloud组件的集成
- en: As expected, Secret Manager is integrated with other Google Cloud components.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 正如预期的那样，密钥管理器与其他Google Cloud组件集成。
- en: We can use a **key management service** (**KMS**) to encrypt the Secrets on
    Secret Manager and we can integrate Secret Manager with Kubernetes. As we have
    seen in [*Chapter 8*](B20970_08.xhtml#_idTextAnchor157), *Exploring Cloud Secret
    Store on AWS*, the integration with Secret Manager on Kubernetes happens through
    the CSI plugin.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用**密钥管理服务**（**KMS**）对密钥管理器上的机密进行加密，并且可以将密钥管理器与Kubernetes集成。如我们在[*第8章*](B20970_08.xhtml#_idTextAnchor157)中所见，*在AWS上探索云端秘密存储*，与Kubernetes上密钥管理器的集成是通过CSI插件实现的。
- en: Introduction to Workload Identity
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作负载身份简介
- en: Workload Identity on Kubernetes Engine on GCP enables us to assign permissions
    to Kubernetes workloads that can interact with Google Cloud resources. Google
    Cloud has the concept of service accounts. Service accounts are used for machines
    to interact with resources. A compute engine, a lambda function, or even an App
    Engine on Google Cloud can be assigned with a service account that has permissions
    to interact with Google Cloud resources. With Workload Identity, we can map service
    accounts on GCP with service accounts on Kubernetes.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: GCP上的Kubernetes引擎中的工作负载身份（Workload Identity）使我们能够将权限分配给能够与Google Cloud资源交互的Kubernetes工作负载。Google
    Cloud有服务账户的概念。服务账户用于机器与资源进行交互。计算引擎、Lambda函数甚至Google Cloud上的App Engine都可以分配一个服务账户，该账户具有与Google
    Cloud资源交互的权限。通过工作负载身份，我们可以将GCP上的服务账户映射到Kubernetes上的服务账户。
- en: In Kubernetes, we might use several types of deployments for our applications.
    We can use `Deployment`, `StatefulSet`, `DaemonSet`, and more. Behind the scenes,
    a Pod will be created, which is the base component for running applications on
    Kubernetes. The Pod can be assigned a service account. By using Workload Identity
    on Kubernetes and binding a Kubernetes service account to a Google Cloud service
    account, the Pod with the Kubernetes service account attached shall be able to
    interact with Google Cloud resources based on the permissions we granted on the
    GCP service account.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kubernetes中，我们可能会使用几种类型的部署来部署我们的应用程序。我们可以使用`Deployment`、`StatefulSet`、`DaemonSet`等。幕后将会创建一个Pod，Pod是Kubernetes上运行应用程序的基本组件。Pod可以被分配一个服务账户。通过在Kubernetes上使用工作负载身份，并将Kubernetes服务账户绑定到Google
    Cloud服务账户，附加了Kubernetes服务账户的Pod将能够根据我们在GCP服务账户上授予的权限与Google Cloud资源进行交互。
- en: Therefore, this concept will help us with GCP Secret Manager. The access from
    our Kubernetes workload to Secret Manager will be authorized and feasible, thanks
    to the integration of Kubernetes CSI and the Workload Identity.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这一概念将帮助我们与GCP密钥管理器的集成。通过Kubernetes CSI和工作负载身份的集成，我们的Kubernetes工作负载访问密钥管理器将是授权且可行的。
- en: Now that we understand how Kubernetes and Secret Manager on Google Cloud work
    together, we will focus on implementing a Kubernetes cluster.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们理解了Kubernetes和Google Cloud上的密钥管理器如何协作，我们将重点实施一个Kubernetes集群。
- en: Integrating GKE and GCP Secret Manager
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成GKE和GCP密钥管理器
- en: Thanks to the CSI Secret Store plugins, we can integrate Secret Manager solutions
    with our Kubernetes cluster. The Kubernetes offering on Google Cloud is the Google
    Kubernetes engine. We will use this Kubernetes cluster offering to integrate with
    Secret Manager.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 借助 CSI Secret Store 插件，我们可以将 Secret Manager 解决方案与 Kubernetes 集群集成。Google Cloud
    上的 Kubernetes 提供方案是 Google Kubernetes Engine。我们将使用该 Kubernetes 集群方案与 Secret Manager
    集成。
- en: There are several options to create a cluster. We will provide the Terraform
    code for the scope of creating the cluster. Also, we will provide other commands
    needed.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 创建集群有几种选择。我们将提供用于创建集群的 Terraform 代码。此外，我们还将提供其他所需的命令。
- en: Configuring the Terraform project
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置 Terraform 项目
- en: We need to configure the Terraform provider. It will point to the GCP credentials
    file and also to the GCP project and the region.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要配置 Terraform 提供程序。它将指向 GCP 凭证文件，还将指向 GCP 项目和区域。
- en: 'The provider configuration should be like this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 提供程序配置应如下所示：
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To initialize, we need to run the `init` command:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要初始化，我们需要运行 `init` 命令：
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: When we run the `init` command when a credentials file is not specified, the
    credentials by default will be the credentials of the user who logged in when
    we used the `gcloud auth login` command. Alternatively, we can specify a service
    account file.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行 `init` 命令时，如果没有指定凭证文件，默认凭证将是我们使用 `gcloud auth login` 命令登录的用户凭证。或者，我们可以指定服务账户文件。
- en: Provisioning the network
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络配置
- en: We shall proceed with provisioning the network. On Google Cloud, a network is
    a global resource, whereas the subnets of a network are regional resources.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续进行网络的配置。在 Google Cloud 上，网络是全球资源，而网络的子网是区域资源。
- en: 'We will create the network, and as expected, no region will be specified since
    VPC is a global resource:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建网络，正如预期的那样，由于 VPC 是全球资源，因此不会指定任何区域：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The subnetwork will be created to host the nodes on Kubernetes. It will be
    mapped to the region specified:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 子网络将被创建以托管 Kubernetes 上的节点。它将映射到指定的区域：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We can now focus on creating Secrets on Secret Manager.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以专注于在 Secret Manager 上创建密钥。
- en: Provisioning a secret on Secret Manager
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Secret Manager 上配置密钥
- en: GCP Secret Manager is a service; to use Secret Manager on GCP, we do not need
    to create a resource. Instead, we create the Secrets that will be hosted on Secret
    Manager.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: GCP Secret Manager 是一种服务；在 GCP 上使用 Secret Manager 时，我们不需要创建资源。相反，我们创建将在 Secret
    Manager 上托管的密钥。
- en: 'We will get started by provisioning a secret:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从配置一个密钥开始：
- en: '[PRE4]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We purposefully specified the region where the replicas will reside. The secret
    will be hosted in two regions, making our secret usage resilient, even during
    a region outage.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们故意指定了副本所在的区域。该密钥将托管在两个区域，这使得我们的密钥使用在区域故障时也能保持弹性。
- en: 'We created the secret, but we did not assign a specific value. For a secret,
    we specify a version of that secret. Let us proceed with adding the version:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了密钥，但尚未指定具体的值。对于一个密钥，我们需要指定该密钥的版本。现在让我们继续添加版本：
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Also, we would like to provision a service account with permissions to retrieve
    the secret:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还希望配置一个具有权限的服务账户，以便检索密钥：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The secret is provisioned, and we have a service account to be used for retrieval.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 密钥已配置，我们也有一个服务账户可以用来进行检索。
- en: Now, let’s go ahead and create the GKE cluster.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续创建 GKE 集群。
- en: Provisioning the GKE cluster
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置 GKE 集群
- en: 'To create the GKE cluster we need to create the master, and we will also create
    a default node pool:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建 GKE 集群，我们需要创建主节点，并且还会创建一个默认的节点池：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: When creating a cluster, GKE forces us to create an initial node pool by default.
    We can create another node pool of our choice using the `google_container_node_pool`
    resource. This way, we can tune more parameters of a GKE node pool in Terraform
    and separate the cluster and the node pool definitions. Once the new node pool
    is created, provided we have the `remove_default_node_pool` setting set to `true`,
    Terraform will remove the initial node pool. This will keep the costs low since
    only one node pool will be operational.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建集群时，GKE 默认要求我们创建一个初始节点池。我们可以使用 `google_container_node_pool` 资源创建另一个自定义节点池。这样，我们可以在
    Terraform 中调整 GKE 节点池的更多参数，并将集群和节点池的定义分开。一旦创建了新的节点池，前提是我们将 `remove_default_node_pool`
    设置为 `true`，Terraform 会删除初始的节点池。这将保持低成本，因为只有一个节点池会处于工作状态。
- en: 'The primary node pool will be targeted toward keeping the costs low:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 主要的节点池将以保持成本低为目标：
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We have been successful in creating the cluster. We can also log in to the
    cluster and issue some `kubectl` commands:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功创建了集群。我们也可以登录集群并执行一些 `kubectl` 命令：
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Our GKE cluster is operational and ready to serve our workloads.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 GKE 集群已经投入使用，准备好为我们的工作负载提供服务。
- en: Adding the CSI plugin for Kubernetes Secrets
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为 Kubernetes Secrets 添加 CSI 插件
- en: We have an operational cluster; therefore, we will focus on setting up the CSI
    plugin. On a standard GKE cluster, the CSI plugin has to be installed. When it
    comes to GKE Autopilot, a GKE version that manages many aspects of Kubernetes
    out-of-the-box, the CSI plugin is installed by default.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经拥有一个可操作的集群，因此，我们将专注于设置 CSI 插件。在标准的 GKE 集群中，必须安装 CSI 插件。而在 GKE Autopilot（一个默认管理
    Kubernetes 许多方面的 GKE 版本）中，CSI 插件已默认安装。
- en: Take note that the CSI plugin is not officially supported by Google.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，CSI 插件并未被 Google 官方支持。
- en: 'First, we need to install the plugin to the cluster:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要将插件安装到集群中：
- en: '[PRE10]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then we should create a service account. The Kubernetes service account will
    be annotated with the ID of the GCP service account that we want our workloads
    to use:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们应该创建一个服务账户。Kubernetes 服务账户将被注释上我们希望工作负载使用的 GCP 服务账户的 ID：
- en: '[PRE11]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This way, the service account of Kubernetes will act on behalf of the service
    account we created previously. The service account is able to retrieve the Secrets
    from Secret Manager.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，Kubernetes 的服务账户将代表我们之前创建的服务账户执行操作。服务账户能够从 Secret Manager 中检索 Secrets。
- en: '`SecretProviderClass` is a custom resource type providing driver configurations
    and parameters to the CSI driver. We shall specify `SecretProviderClass`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`SecretProviderClass` 是一种自定义资源类型，提供 CSI 驱动程序的配置和参数。我们需要指定 `SecretProviderClass`：'
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The last step is to create a Pod. The Pod will use the Workload Identity and
    act on behalf of the `read-secrets-service-account` GCP account. Also, the Pod
    will use `SecretProviderClass` we created previously and mount the Secrets to
    the Pod as a file:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是创建一个 Pod。该 Pod 将使用工作负载身份并代表 `read-secrets-service-account` GCP 账户执行操作。同时，Pod
    将使用我们之前创建的 `SecretProviderClass`，并将 Secrets 挂载为文件：
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: What we have achieved is to mount the secret to the Pod using the CSI plugin.
    We can now focus on monitoring the usage of Secrets. Auditing and logging play
    a crucial role in identifying operations on a cloud resource or Kubernetes.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实现的目标是通过 CSI 插件将秘密挂载到 Pod。现在，我们可以专注于监控 Secrets 的使用情况。审计和日志记录在识别云资源或 Kubernetes
    上的操作中起着至关重要的作用。
- en: Auditing and logging
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 审计和日志记录
- en: Google Cloud comes with logging and auditing out-of-the-box. Once we provision
    a Kubernetes cluster, all the operations will be visible through the logging console.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Google Cloud 默认提供日志记录和审计功能。一旦我们配置了 Kubernetes 集群，所有操作都可以通过日志控制台查看。
- en: 'Suppose we create a secret on the cluster we provisioned previously:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们在之前配置的集群中创建了一个秘密：
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This action will be logged on the audit logs of GKE, and all we must do is
    search the logging console on GCP using the following query:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 该操作将记录在 GKE 的审计日志中，我们只需使用以下查询在 GCP 的日志控制台中搜索：
- en: '[PRE15]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'As a result, we should see all the operations upon accessing Secrets:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是，我们应该看到访问 Secrets 时的所有操作：
- en: '![Figure 10.1 – Kubernetes audit logs on GKE](img/B20970_10_01.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.1 – GKE 上的 Kubernetes 审计日志](img/B20970_10_01.jpg)'
- en: Figure 10.1 – Kubernetes audit logs on GKE
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.1 – GKE 上的 Kubernetes 审计日志
- en: 'Apart from audit logs on Kubernetes, we can also utilize the audit logs on
    Secret Manager. On the logging screen of GCP, we can search specifically for audit
    logs:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 Kubernetes 上的审计日志外，我们还可以利用 Secret Manager 上的审计日志。在 GCP 的日志页面上，我们可以专门搜索审计日志：
- en: '[PRE16]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This GCP log query filter will enable us to see the logs related to Secret Manager.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 GCP 日志查询过滤器将帮助我们查看与 Secret Manager 相关的日志。
- en: GKE security posture dashboard
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GKE 安全姿态仪表板
- en: Another notable tool provided by GCP to improve the security posture of a GKE
    cluster is the **GKE security posture** dashboard. The GKE security posture dashboard
    is a set of features in the Google Cloud console scanning GKE clusters and workloads,
    offering opinionated, actionable recommendations.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个由 GCP 提供的显著工具是 **GKE 安全姿态**仪表板，它能提升 GKE 集群的安全性。GKE 安全姿态仪表板是一组在 Google Cloud
    控制台中扫描 GKE 集群和工作负载的功能，提供有针对性、可操作的建议。
- en: 'GKE security posture focuses on two sections:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: GKE 安全姿态关注两个部分：
- en: Kubernetes security posture
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 安全姿态
- en: Workload vulnerability scanning
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作负载漏洞扫描
- en: 'Through the Kubernetes security posture dashboard, when a vulnerability is
    discovered, it is automatically displayed on the dashboard with the clusters and
    workloads affected in order to enable us to proceed with further actions:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 通过Kubernetes安全态势仪表板，当发现漏洞时，它会自动在仪表板上显示，展示受影响的集群和工作负载，帮助我们进行后续操作：
- en: '![Figure 10.2 – GKE security posture](img/B20970_10_02.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.2 – GKE 安全态势](img/B20970_10_02.jpg)'
- en: Figure 10.2 – GKE security posture
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.2 – GKE 安全态势
- en: Through workload vulnerability scanning, the container images running in the
    clusters are scanned for vulnerabilities. Also, there is support for scanning
    the actual programming language packages for vulnerabilities, making the workloads
    even more secure.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 通过工作负载漏洞扫描，集群中运行的容器镜像会被扫描出漏洞。此外，还支持扫描实际的编程语言包中的漏洞，从而使工作负载更加安全。
- en: As expected, the findings of the GKE security posture are integrated with other
    cloud components such as logging and monitoring, thus making it feasible to have
    alerts and enable automation when it comes to tackling any security incidents.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期所示，GKE安全态势的结果与其他云组件（如日志记录和监控）集成，从而使得在处理任何安全事件时能够启用警报并实现自动化。
- en: Now that auditing and logging are in place, we can proceed with the more advanced
    concept of encrypting Secrets by integrating GKE and KMS.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在审计和日志记录已经到位，我们可以继续进行更高级的加密Secrets的操作，通过将GKE与KMS集成。
- en: Integrating GKE and KMS
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成GKE与KMS
- en: 'It is feasible to use KMS to encrypt the Secrets on the Google Kubernetes Container
    Engine. By default, GKE will encrypt data at rest, and the encryption is managed
    by GCP. Apart from this secure handling of our data, we might want to have more
    control over the encryption of the data. In this case, we have the option to encrypt
    the data residing on Kubernetes by using a KMS key that we provision and maintain
    in our GCP project. We shall start by provisioning the KMS key:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 使用KMS来加密Google Kubernetes容器引擎上的Secrets是可行的。默认情况下，GKE会加密静态数据，且加密由GCP管理。除了对数据的安全处理外，我们可能希望对数据的加密过程有更多控制。在这种情况下，我们可以选择使用在GCP项目中我们自己配置和维护的KMS密钥来加密Kubernetes上的数据。我们将从配置KMS密钥开始：
- en: '[PRE17]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We should also assign permissions in order for the Kubernetes service account
    to be able to perform encryption and decryption. Take note that on GKE, the master
    is managed by GCP, and the service account that the master nodes use is not a
    service account residing on our Google Cloud project, thus we need to assign permission
    to a service account that is not part of our project:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要分配权限，以便Kubernetes服务账户能够执行加密和解密操作。请注意，在GKE上，主节点由GCP管理，主节点使用的服务账户并非我们Google
    Cloud项目中的服务账户，因此我们需要将权限分配给一个不属于我们项目的服务账户：
- en: '[PRE18]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We just created the KMS. In our cluster configuration, let’s enable the database
    encryption option:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚创建了KMS。在我们的集群配置中，让我们启用数据库加密选项：
- en: '[PRE19]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Instead of GCP using its own KMS key, we supply our own **customer-managed key**
    (**CMK**). Our Secrets on Kubernetes will be encrypted by using the KMS key we
    provided.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有使用GCP的KMS密钥，而是提供了我们自己的**客户管理密钥**（**CMK**）。我们的Secrets将使用我们提供的KMS密钥进行加密。
- en: Summary
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we had a deep dive into Secrets management on Google Cloud
    and GKE. We learned about Secret Manager, the GCP offering for Secrets management,
    and the features that come with it such as availability, auditing, and integration
    with other Google Cloud components. We then proceeded to provision a Kubernetes
    Engine on GCP using the GKE offering and integrated it with Secret Manager. Then
    we used KMS to encrypt the Secrets on Kubernetes at rest. Finally, by using Google
    Cloud monitoring, we managed to keep track of the secret operations on Kubernetes,
    Secret Manager, and the KMS. In the next chapter, we will focus on the non-cloud-based
    secret managers: HashiCorp Vault and CyberArk Conjur.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们深入探讨了Google Cloud和GKE上的Secrets管理。我们了解了Secret Manager，这是GCP提供的Secrets管理服务及其包含的功能，如可用性、审计和与其他Google
    Cloud组件的集成。然后，我们使用GKE服务在GCP上配置了Kubernetes引擎，并将其与Secret Manager集成。接着，我们使用KMS加密了Kubernetes上的静态Secrets。最后，通过使用Google
    Cloud监控，我们成功地跟踪了Kubernetes、Secret Manager和KMS上的秘密操作。在下一章中，我们将专注于非云基础的秘密管理工具：HashiCorp
    Vault和CyberArk Conjur。

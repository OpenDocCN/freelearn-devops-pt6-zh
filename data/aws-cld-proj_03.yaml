- en: <st c="0">3</st>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="0">3</st>
- en: <st c="2">Building a Recipe-Sharing Application</st>
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="2">构建一个食谱分享应用程序</st>
- en: <st c="39">A</st> **<st c="42">web application</st>** <st c="57">is a</st> <st
    c="62">software program that is accessible from a web browser, such as Google
    Chrome or Mozilla Firefox, through the internet and can be as simple and informative
    as the example in</st> [*<st c="237">Chapter 2</st>*](B22051_02.xhtml#_idTextAnchor032)<st
    c="246">, where you made your CV available to end users, up to including complex
    business logic and critical data</st> <st c="352">management capabilities.</st>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="39">一个**Web 应用程序** <st c="57">是一个通过互联网可以从 Web 浏览器（如 Google Chrome 或 Mozilla
    Firefox）访问的软件程序，它可以像</st> [*<st c="237">第 2 章</st>*](B22051_02.xhtml#_idTextAnchor032)<st
    c="246">中的示例一样简单并具有信息性，在该示例中，你将简历提供给最终用户，或者包含复杂的业务逻辑和关键数据</st> <st c="352">管理功能。</st>
- en: '<st c="376">A web application can be decomposed into two parts: the</st> **<st
    c="433">frontend</st>** <st c="441">and the</st> **<st c="450">backend</st>**<st
    c="457">. The frontend, visible to users, is commonly built using HTML, CSS, JavaScript,
    and modern frameworks such as React.js or Vue.js.</st> <st c="588">The backend
    will handle business logic, authentication, data processing, and communication
    with external services and databases, and is normally developed using programming
    languages such as Python, Java, or C#.</st> <st c="800">The communication between
    the frontend and the backend is done typically through an</st> **<st c="884">application
    programming interface</st>** <st c="917">(</st>**<st c="919">API</st>**<st c="922">),
    allowing developers to abstract the complexity and efficiently reuse functionality
    across</st> <st c="1016">different applications.</st>'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="376">Web 应用程序可以分解为两个部分：**前端** <st c="441">和**后端**</st><st c="457">。前端是用户可见的，通常使用
    HTML、CSS、JavaScript 和现代框架（如 React.js 或 Vue.js）构建。</st> <st c="588">后端将处理业务逻辑、身份验证、数据处理及与外部服务和数据库的通信，通常使用
    Python、Java 或 C# 等编程语言进行开发。</st> <st c="800">前端与后端之间的通信通常通过**应用程序编程接口** <st c="917">(**API**)</st><st
    c="922">进行，使开发人员能够抽象出复杂性，并高效地在不同应用程序之间重用功能。</st>
- en: <st c="1039">In this chapter, you will work on an application for sharing recipes,
    where a user can create, delete, or read their recipes.</st> <st c="1166">Moreover,
    you will implement both a backend and a frontend to develop a fully functional</st>
    <st c="1255">web application.</st>
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1039">在本章中，你将开发一个分享食谱的应用程序，用户可以创建、删除或查看他们的食谱。</st> <st c="1166">此外，你还将实现后端和前端，开发一个功能齐全的</st>
    <st c="1255">Web 应用程序。</st>
- en: <st c="1271">In summary, this chapter covers the following topics</st> <st c="1325">in
    order:</st>
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1271">总结来说，本章涵盖以下主题</st> <st c="1325">按顺序：</st>
- en: <st c="1334">What you are going to build – an application to</st> <st c="1383">share
    recipes</st>
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1334">你将要构建的——一个用于</st> <st c="1383">分享食谱</st>
- en: <st c="1396">How you are going to build it – using S3 and CloudFront for the
    frontend, EC2 to host your API and DynamoDB as the data store for</st> <st c="1527">your
    recipes</st>
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1396">你将如何构建它——使用 S3 和 CloudFront 构建前端，使用 EC2 托管 API，使用 DynamoDB 存储</st>
    <st c="1527">你的食谱</st>
- en: <st c="1539">Building it – through CloudFormation and using the</st> <st c="1591">AWS
    console</st>
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1539">构建它——通过 CloudFormation 和使用</st> <st c="1591">AWS 控制台</st>
- en: <st c="1602">How to improve the solution – improve the monitoring and application
    logging, enforce secure protocols to access your application, and</st> <st c="1738">implement
    authentication</st>
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1602">如何改进解决方案——改进监控和应用日志，强制执行安全协议以访问应用程序，并且</st> <st c="1738">实施身份验证</st>
- en: <st c="1762">By the end of this chapter, you will have hands-on experience in
    building a dynamic web application on AWS, leveraging different services for specific
    purposes, and understanding the basics of frontend and</st> <st c="1969">backend
    development.</st>
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1762">在本章结束时，你将拥有在 AWS 上构建动态 Web 应用程序的实际经验，利用不同的服务实现特定功能，并理解前端和</st>
    <st c="1969">后端开发的基础知识。</st>
- en: <st c="1989">Technical requirements</st>
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="1989">技术要求</st>
- en: <st c="2012">To build and deploy your own recipe-sharing application, you need
    to have access to an AWS account, and optionally a domain if you want to implement
    secure communication through HTTPS.</st> <st c="2198">It is important to recall
    that, as you will see from the chapter, we offer a second option configured with
    HTTP that does not require the ownership of</st> <st c="2349">a domain.</st>
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2012">要构建和部署你自己的食谱分享应用程序，你需要访问 AWS 账户，并可选地配置一个域名，如果你希望通过 HTTPS 实现安全通信。</st>
    <st c="2198">需要提醒的是，正如你在本章中所看到的，我们提供了一个第二种选择，配置为 HTTP，不需要拥有</st> <st c="2349">域名。</st>
- en: <st c="2358">Also, this book has a dedicated folder within its GitHub repository,
    where you can find the necessary code snippets to follow</st> <st c="2485">along:</st>
    [<st c="2492">https://github.com/PacktPublishing/AWS-Cloud-Projects/tree/main/chapter3/code</st>](https://github.com/PacktPublishing/AWS-Cloud-Projects/tree/main/chapter3/code)<st
    c="2569">.</st>
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2358">此外，本书在其 GitHub 仓库中有一个专门的文件夹，你可以在这里找到必要的代码片段以供跟随</st> <st c="2485">学习：</st>
    [<st c="2492">https://github.com/PacktPublishing/AWS-Cloud-Projects/tree/main/chapter3/code</st>](https://github.com/PacktPublishing/AWS-Cloud-Projects/tree/main/chapter3/code)<st
    c="2569">。</st>
- en: <st c="2570">Scenario</st>
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="2570">场景</st>
- en: <st c="2579">In the</st> <st c="2586">last chapter, you worked on a personal
    website to share your CV, which is already becoming popular among recruiters,
    and other peers are looking for similar ways to share their resumes.</st> <st
    c="2773">That is great for your professional life, and you start thinking about
    how cloud technologies could help you in your side projects and hobbies; one of
    those has to do with your</st> <st c="2950">cooking skills.</st>
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2579">在</st> <st c="2586">上一章中，你创建了一个个人网站来分享你的简历，这个网站已经在招聘人员中变得非常受欢迎，其他同行也在寻找类似的方式来分享他们的简历。</st>
    <st c="2773">这对你的职业生涯非常有帮助，你开始思考云技术如何在你的副业和兴趣项目中提供帮助；其中一个与</st> <st c="2950">你的烹饪技能</st>
    <st c="2965">有关。</st>
- en: <st c="2965">You spend a lot of your free time creating recipes and reinventing
    desserts, and you usually write them down in a notebook.</st> <st c="3090">In
    parallel, you have started your own profile on social media, and you already have
    800,000 followers that react to the photos of your dishes and ask you for the
    recipes.</st> <st c="3262">Because you are getting so popular, friends and family
    have started calling you “the chef,” and often ask you for some suggestions for
    specific recipes that they have tried in</st> <st c="3438">the past.</st>
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2965">你花费大量空闲时间创造食谱和重新发明甜点，通常把它们写在笔记本里。</st> <st c="3090">与此同时，你已经开始在社交媒体上建立自己的个人档案，并且已经有
    80 万粉丝，他们对你菜肴的照片作出反应，并向你索要食谱。</st> <st c="3262">由于你的名气越来越大，朋友和家人开始称你为“厨师”，并经常向你请教一些他们曾经尝试过的特定食谱的建议。</st>
    <st c="3438">过去。</st>
- en: <st c="3447">Up till now, you have had to go search in your recipe notebook,
    take a photo, and share it, but with time and the number of recipes you have authored,
    it is becoming unmanageable, and you need to think of</st> <st c="3653">an alternative.</st>
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3447">直到现在，你还需要去查找你的食谱笔记本，拍照并分享，但随着时间的推移以及你创作的食谱数量越来越多，这变得越来越难以管理，你需要考虑</st>
    <st c="3653">一个替代方案。</st>
- en: <st c="3668">While getting familiar with cloud technologies, you start looking
    for alternatives to your current method of sharing recipes for your second cloud
    project, a project called Recipe</st> <st c="3849">Sharing Application.</st>
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3668">在熟悉云技术的过程中，你开始寻找替代当前食谱分享方法的方案，用于你的第二个云项目——一个名为食谱</st> <st c="3849">分享应用程序</st>。
- en: <st c="3869">Requirements</st>
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="3869">需求</st>
- en: <st c="3882">Before we start</st> <st c="3899">answering</st> *<st c="3909">how</st>*
    <st c="3912">we are going to solve this problem, it is important to clarify</st>
    *<st c="3976">what</st>* <st c="3980">we are going to build and structure it in
    a clear and concise list of requirements, as we introduced in</st> [*<st c="4085">Chapter
    1</st>*](B22051_01.xhtml#_idTextAnchor014) <st c="4094">and exemplified in</st>
    [*<st c="4114">Chapter 2</st>*](B22051_02.xhtml#_idTextAnchor032)<st c="4123">.</st>
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3882">在我们开始</st> <st c="3899">解答</st> *<st c="3909">如何</st>* <st c="3912">解决这个问题之前，重要的是要澄清</st>
    *<st c="3976">我们</st>* <st c="3980">将要构建什么，并以清晰简洁的需求列表进行结构化，就像我们在</st> [*<st c="4085">第
    1 章</st>*](B22051_01.xhtml#_idTextAnchor014) <st c="4094">中介绍的那样，并在</st> [*<st
    c="4114">第 2 章</st>*](B22051_02.xhtml#_idTextAnchor032) <st c="4123">中举例说明。</st>
- en: <st c="4124">In this</st> <st c="4132">project, you want to develop a recipe-sharing
    application to provide a convenient platform for people to discover, share, and
    access different recipes.</st> <st c="4285">Unlike the previous chapter, this
    application will need to handle dynamic content inherent to recipe management.</st>
    <st c="4398">There are different key personas that will access</st> <st c="4448">your
    application:</st>
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4124">在这</st> <st c="4132">个项目中，您希望开发一个食谱分享应用程序，为人们提供一个方便的平台来发现、分享和访问不同的食谱。</st>
    <st c="4285">与前一章不同，这个应用程序需要处理与食谱管理相关的动态内容。</st> <st c="4398">有不同的关键人物将访问</st>
    <st c="4448">您的应用程序：</st>
- en: '**<st c="4465">Platform admin</st>**<st c="4480">: The platform owner, who
    may want to create a new recipe, maintain it, or even</st> <st c="4561">delete
    it.</st>'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="4465">平台管理员</st>**<st c="4480">：平台所有者，可能希望创建新配方、维护或</st> <st c="4561">删除配方。</st>'
- en: '**<st c="4571">End users/consumers</st>**<st c="4591">: The end user, who uses
    the platform for accessing a specific recipe, and should not be able to create,
    change, or delete</st> <st c="4715">any record.</st>'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="4571">终端用户/消费者</st>**<st c="4591">：使用平台访问特定配方的最终用户，不应具备创建、更改或删除</st>
    <st c="4715">任何记录的权限。</st>'
- en: <st c="4726">Actual implementation should be the last step of application development,
    and an accurate and detailed requirement-gathering exercise is key to defining
    a clear</st> <st c="4888">development plan.</st>
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4726">实际的实施应是应用开发的最后一步，精确和详细的需求收集是定义清晰的</st> <st c="4888">开发计划的关键。</st>
- en: <st c="4905">The technologies you use, the services you adopt, and the architecture
    you design should be the consequence of the requirements, technical and non-technical,
    that you list to achieve</st> <st c="5089">your objective.</st>
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4905">您使用的技术、采用的服务和设计的架构应是您列出以实现</st> <st c="5089">目标的技术和非技术要求的结果。</st>
- en: <st c="5104">Business requirements</st>
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="5104">业务需求</st>
- en: <st c="5126">After the</st> <st c="5137">market study you perform, and the amount
    of likes and comments you get during the week, you conclude that people tend to
    spend more time cooking on Fridays and Saturdays, especially for dinnertime.</st>
    <st c="5335">You also analyze the geo-distribution of your users, and 85% are
    located in the US, 12% in Europe, and the remaining 3% are spread across</st>
    <st c="5473">the globe.</st>
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5126">在</st> <st c="5137">您进行的市场研究后，以及在一周内获得的点赞和评论数量，您得出结论，人们倾向于在星期五和星期六花更多时间烹饪，特别是晚餐时间。</st>
    <st c="5335">您还分析了用户的地理分布，85%位于美国，12%位于欧洲，其余3%分布在</st> <st c="5473">全球其他地区。</st>
- en: <st c="5483">You are approached by a food delivery service that wants to sign
    an ads contract with you, but they only agree if you reach a total of 100,000
    active users in your application.</st> <st c="5661">Until then, you will have
    no revenue stream for</st> <st c="5709">your application.</st>
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5483">一家食品配送服务向您提出签署广告合同的要求，但他们只同意在您的应用程序中达到 100,000 活跃用户之后才会给出收入流。</st>
    <st c="5661">在那之前，您的应用程序将没有收入来源。</st>
- en: <st c="5726">Based on these findings and the potential revenue opportunity,
    you have identified the following key</st> <st c="5828">business requirements:</st>
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5726">根据这些发现和潜在的收入机会，您已经确定了以下关键</st> <st c="5828">业务需求：</st>
- en: <st c="5850">Reach 100,000 users globally before the end of</st> <st c="5898">the
    year</st>
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="5850">在年底之前全球达到 100,000 用户</st> <st c="5898">的目标</st>
- en: <st c="5906">Increase presence</st> <st c="5925">in Europe</st>
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="5906">增强</st> <st c="5925">在欧洲的存在</st>
- en: <st c="5934">Become cost-effectiveness to support growth without</st> <st c="5987">significant
    cost</st>
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="5934">在支持增长的同时保持成本效益</st> <st c="5987">且成本不显著</st>
- en: <st c="6003">Functional requirements</st>
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="6003">功能需求</st>
- en: <st c="6027">Your</st> <st c="6032">application should serve two different profiles:</st>
    *<st c="6082">admins</st>* <st c="6088">and</st> *<st c="6093">end users</st>*<st
    c="6102">. For the initial project, you will start with two different pages,</st>
    `<st c="6170">/user</st>` <st c="6175">for the end users and</st> `<st c="6198">/admin</st>`
    <st c="6204">for admins, to support the two</st> <st c="6236">different personas.</st>
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6027">您的</st> <st c="6032">应用程序应服务于两个不同的用户群体：</st> *<st c="6082">管理员</st>*
    <st c="6088">和</st> *<st c="6093">终端用户</st>*<st c="6102">。对于最初的项目，您将开始两个不同的页面，</st>
    `<st c="6170">/user</st>` <st c="6175">供终端用户使用，</st> `<st c="6198">/admin</st>`
    <st c="6204">供管理员使用，以支持这两个</st> <st c="6236">不同的角色。</st>
- en: <st c="6255">You also aim to create a seamless experience through a simple UI.</st>
    <st c="6322">Additionally, you want your application to be responsive and support
    different devices, such as tablets, mobile phones,</st> <st c="6442">and laptops.</st>
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6255">你还希望通过简洁的用户界面创造无缝体验。</st> <st c="6322">此外，你希望你的应用能够响应式，支持不同的设备，如平板、手机</st>，<st
    c="6442">和笔记本电脑。</st>
- en: <st c="6454">One crucial step for describing the functional requirements is
    creating a mockup of the interface, as shown in</st> *<st c="6566">Figures 3.1</st>*<st
    c="6577">,</st> *<st c="6579">3.2</st>*<st c="6582">,</st> <st c="6584">and</st>
    *<st c="6588">3.3</st>*<st c="6591">.</st>
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6454">描述功能需求的一个关键步骤是创建界面原型，如</st> *<st c="6566">图 3.1</st>*<st c="6577">，</st>
    *<st c="6579">3.2</st>*<st c="6582">，</st> <st c="6584">和</st> *<st c="6588">3.3</st>*<st
    c="6591">。</st>
- en: '![Figure 3.1 – UI mockup home page](img/B22051_03_1.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.1 – 用户界面首页原型](img/B22051_03_1.jpg)'
- en: <st c="6646">Figure 3.1 – UI mockup home page</st>
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6646">图 3.1 – 用户界面首页原型</st>
- en: <st c="6678">Let us break down the different functionalities</st> <st c="6727">and
    interfaces:</st>
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6678">让我们拆解不同的功能</st> <st c="6727">和接口：</st>
- en: '`<st c="6742">/</st>``<st c="6744">user</st>`<st c="6748">:</st>'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="6742">/</st>``<st c="6744">用户</st>`<st c="6748">：</st>'
- en: <st c="6750">Access the list of</st> <st c="6769">recipe titles</st>
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="6750">访问</st> <st c="6769">食谱标题列表</st>
- en: <st c="6782">Ability to choose a specific recipe and access all</st> <st c="6834">the
    details</st>
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="6782">能够选择特定食谱并访问所有</st> <st c="6834">详细信息</st>
- en: <st c="6845">Responsive</st>
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="6845">响应式</st>
- en: '![Figure 3.2 – The User Page UI mockup](img/B22051_03_2.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.2 – 用户页面 UI 原型](img/B22051_03_2.jpg)'
- en: <st c="7025">Figure 3.2 – The User Page UI mockup</st>
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7025">图 3.2 – 用户页面 UI 原型</st>
- en: '`<st c="7061">/</st>``<st c="7063">admin</st>`<st c="7068">:</st>'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="7061">/</st>``<st c="7063">管理员</st>`<st c="7068">：</st>'
- en: <st c="7070">Access the list of</st> <st c="7089">recipe titles</st>
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="7070">访问</st> <st c="7089">食谱标题列表</st>
- en: <st c="7102">Ability to</st> <st c="7114">delete recipes</st>
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="7102">能够</st> <st c="7114">删除食谱</st>
- en: <st c="7128">Support</st> <st c="7137">recipe creation</st>
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="7128">支持</st> <st c="7137">食谱创建</st>
- en: <st c="7152">Control</st> <st c="7161">the maximum amount of ingredients, steps,
    and</st> <st c="7207">recipes supported</st>
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="7152">控制</st> <st c="7161">最大支持的食材、步骤和</st> <st c="7207">食谱数量</st>
- en: <st c="7224">Responsive</st>
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="7224">响应式</st>
- en: '![Figure 3.3 – The Admin Page UI mockup](img/B22051_03_3.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.3 – 管理页面 UI 原型](img/B22051_03_3.jpg)'
- en: <st c="7414">Figure 3.3 – The Admin Page UI mockup</st>
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7414">图 3.3 – 管理页面 UI 原型</st>
- en: <st c="7451">Non-functional requirements</st>
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="7451">非功能性需求</st>
- en: <st c="7479">Your</st> <st c="7484">application needs to handle spiky access
    patterns since expected utilization should only increase close to meal times.</st>
    <st c="7604">Also, you plan to increase your user base in Europe in the upcoming
    months, so you need to prepare your application to serve users globally.</st>
    <st c="7745">Also, cost-effectiveness is crucial since you do not have an income
    stream from your application.</st> <st c="7843">To summarize, here is what</st>
    <st c="7870">you need:</st>
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7479">你的</st> <st c="7484">应用需要处理突发访问模式，因为预计的使用量应仅在就餐时间接近时增加。</st> <st
    c="7604">另外，你计划在未来几个月增加欧洲用户群，因此你需要为全球用户提供服务。</st> <st c="7745">此外，成本效益至关重要，因为你的应用没有收入来源。</st>
    <st c="7843">总结一下，以下是你需要的：</st> <st c="7870">需求：</st>
- en: <st c="7879">Global distribution to serve users spread across</st> <st c="7929">the
    globe</st>
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="7879">全球分发，服务全球用户</st> <st c="7929">分布在全球各地的用户</st>
- en: <st c="7938">Auto-scaling to handle the spiky</st> <st c="7972">usage pattern</st>
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="7938">自动扩展以处理突发</st> <st c="7972">使用模式</st>
- en: <st c="7985">Cost-effectiveness</st>
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="7985">成本效益</st>
- en: <st c="8004">Technical requirements</st>
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="8004">技术要求</st>
- en: <st c="8027">As stated</st> <st c="8037">in the</st> *<st c="8045">Functional
    requirements</st>* <st c="8068">section, you want to support multiple devices,
    so your application needs to be responsive to keep a consistent and good user
    experience.</st> <st c="8206">So, for the frontend, you want a framework that
    simplifies responsiveness and accelerates the development process.</st> <st c="8321">For
    the backend, you want to adopt Python as the programming language due to its simplicity,
    versatility, and large ecosystem of libraries and frameworks</st> <st c="8474">as
    well as the support for the AWS SDK.</st> <st c="8515">Besides all the interaction
    with AWS services, you will need to develop your API and for that, you choose
    FastAPI, a modern web framework built in Python and designed to be highly performant,
    user friendly, and lightweight.</st> <st c="8739">Here’s what we</st> <st c="8754">will
    use:</st>
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8027">如</st> <st c="8037">在</st> *<st c="8045">功能需求</st>* <st c="8068">部分中所述，您希望支持多设备，因此您的应用需要具备响应式设计，以保持一致且良好的用户体验。</st>
    <st c="8206">因此，前端您希望选择一个简化响应式设计并加速开发过程的框架。</st> <st c="8321">对于后端，您希望采用Python作为编程语言，因为它简单、灵活，并且拥有庞大的库和框架生态系统，</st>
    <st c="8474">同时支持AWS SDK。</st> <st c="8515">除了与AWS服务的所有交互外，您还需要开发自己的API，因此您选择了FastAPI，一个用Python构建的现代Web框架，旨在高效、用户友好且轻量级。</st>
    <st c="8739">我们将使用以下技术：</st>
- en: <st c="8763">Modern frontend framework –</st> <st c="8792">React.js</st>
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="8763">现代前端框架 –</st> <st c="8792">React.js</st>
- en: <st c="8800">Backend programming language –</st> <st c="8832">Python</st>
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="8800">后端编程语言 –</st> <st c="8832">Python</st>
- en: <st c="8838">FastAPI as the framework for</st> <st c="8868">API development</st>
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="8838">FastAPI作为</st> <st c="8868">API开发框架</st>
- en: <st c="8883">Data requirements</st>
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="8883">数据需求</st>
- en: <st c="8901">In your</st> <st c="8909">application, you are dealing with recipes,
    and there are several ways to store them.</st> <st c="8995">Recipes can be stored
    as single documents, and there is no relationship between records or items.</st>
    <st c="9093">You do not expect to run any complex queries over your data, and
    instead, you want to implement simple operations to do</st> <st c="9213">the following:</st>
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8901">在您的应用中，您处理食谱数据，有多种方式可以存储它们。</st> <st c="8909">食谱可以作为单独的文档存储，记录或条目之间没有关系。</st>
    <st c="8995">您不期望对数据进行任何复杂的查询，而是希望实现简单的操作来执行</st> <st c="9213">以下内容：</st>
- en: '**<st c="9227">List the recipes</st>**<st c="9244">: Present a list of the</st>
    <st c="9269">recipes created.</st>'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="9227">列出食谱</st>**<st c="9244">：展示已创建的食谱列表。</st>'
- en: '**<st c="9285">Delete a recipe</st>**<st c="9301">: If an admin no longer wants
    a specific recipe to be part of the portfolio, it should be possible to delete</st>
    <st c="9411">the item.</st>'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="9285">删除一个食谱</st>**<st c="9301">：如果管理员不再希望某个特定的食谱成为组合的一部分，应当能够删除该条目。</st>'
- en: '**<st c="9420">Create a recipe</st>**<st c="9436">: Create a new recipe to
    share with</st> <st c="9473">the users.</st>'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="9420">创建一个食谱</st>**<st c="9436">：创建一个新的食谱与</st> <st c="9473">用户分享。</st>'
- en: <st c="9483">Also, you are aiming for a highly scalable data store that requires
    minimum to no maintenance effort, ideally a management service.</st> <st c="9616">As
    the structure of your recipe document, you designed</st> `<st c="9671">recipe_example.json</st>`<st
    c="9690">:</st>
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9483">另外，您希望实现一个高度可扩展的数据存储，要求最低或无维护工作，理想情况下是一个管理服务。</st> <st c="9616">作为您食谱文档的结构，您设计了</st>
    `<st c="9671">recipe_example.json</st>`<st c="9690">：</st>
- en: '[PRE0]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: <st c="9764">Considering the average size of a recipe containing 10 steps and
    10 ingredients, you reach a value of 1 KB per recipe.</st> <st c="9884">In terms
    of read operations, assuming that for 20,000 concurrent users</st> <st c="9955">during
    peak time, you have 20,000 concurrent read operations, and you want to ensure
    performance consistency even during</st> <st c="10076">peak hours.</st>
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9764">考虑到每个食谱包含10个步骤和10个材料，您得出每个食谱大约为1 KB的结论。</st> <st c="9884">在读取操作方面，假设在高峰时段有20,000个并发用户</st>
    <st c="9955">，您将有20,000个并发读取操作，并且您希望确保即使在</st> <st c="10076">高峰时段也能保持性能的一致性。</st>
- en: <st c="10087">Architecture patterns</st>
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="10087">架构模式</st>
- en: <st c="10109">The</st> <st c="10114">AWS Architecture Center offers a comprehensive
    collection of resources crafted by cloud architecture experts from AWS Partners,
    with solutions that are tested and recommended and can be used as a starting point.</st>
    <st c="10326">For this project, AWS presents an architecture pattern that fully
    applies to your scenario:</st> *<st c="10418">Deploy a React-based single-page
    application to Amazon S3 and CloudFront</st>* <st c="10490">(</st>[<st c="10492">https://docs.aws.amazon.com/prescriptive-guidance/latest/patterns/deploy-a-react-based-single-page-application-to-amazon-s3-and-cloudfront.html</st>](https://docs.aws.amazon.com/prescriptive-guidance/latest/patterns/deploy-a-react-based-single-page-application-to-amazon-s3-and-cloudfront.html)<st
    c="10635">).</st> <st c="10639">Reading this prescriptive guidance will give you
    an overview of the process you</st> <st c="10719">will follow.</st>
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10109">AWS架构中心提供了一个由AWS合作伙伴的云架构专家精心编制的全面资源集合，包含经过测试和推荐的解决方案，可以作为起点。</st>
    <st c="10326">对于这个项目，AWS提供了一种完全适用于你的场景的架构模式：</st> *<st c="10418">将基于React的单页面应用部署到Amazon
    S3和CloudFront</st>* <st c="10490">(</st>[<st c="10492">https://docs.aws.amazon.com/prescriptive-guidance/latest/patterns/deploy-a-react-based-single-page-application-to-amazon-s3-and-cloudfront.html</st>](https://docs.aws.amazon.com/prescriptive-guidance/latest/patterns/deploy-a-react-based-single-page-application-to-amazon-s3-and-cloudfront.html)<st
    c="10635">).</st> <st c="10639">阅读这些推荐的指南将帮助你了解你将要遵循的过程。</st>
- en: <st c="10731">To dive deep into each AWS service, the AWS documentation is probably
    the best source of information.</st> <st c="10834">Each service has its own documentation,
    and it is highly recommended to have a look and go through it to grasp both basic
    to more advanced concepts.</st> <st c="10983">Moreover, it is important to understand
    the role of AWS in your projects.</st> <st c="11057">AWS will support, host, and
    help you with your requirements, but generic web development knowledge is essential.</st>
    <st c="11170">Before proceeding with the implementation, it’s crucial to understand
    some key concepts related to your application architecture.</st> <st c="11300">For
    example, you should be able to</st> <st c="11335">answer the</st> <st c="11346">following
    questions:</st>
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10731">要深入了解每个AWS服务，AWS文档可能是最好的信息来源。</st> <st c="10834">每个服务都有自己的文档，强烈建议你查看并通读它，以掌握从基础到更高级的概念。</st>
    <st c="10983">此外，理解AWS在你项目中的角色也很重要。</st> <st c="11057">AWS将为你提供支持、托管，并帮助你满足需求，但基本的网页开发知识是必不可少的。</st>
    <st c="11170">在进行实现之前，了解与你的应用架构相关的一些关键概念是至关重要的。</st> <st c="11300">例如，你应该能够</st>
    <st c="11335">回答以下问题：</st>
- en: <st c="11366">What is a</st> **<st c="11377">single-page application</st>**
    <st c="11400">(</st>**<st c="11402">SPA</st>**<st c="11405">) and how does it
    differ from traditional</st> <st c="11448">web applications?</st>
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="11366">什么是</st> **<st c="11377">单页面应用</st>** <st c="11400">(</st>**<st
    c="11402">SPA</st>**<st c="11405">)，它与传统的</st> <st c="11448">网页应用有何不同？</st>
- en: <st c="11465">What is the role of an API in your application?</st> <st c="11514">Why
    do you</st> <st c="11525">need one?</st>
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="11465">API在你的应用中扮演什么角色？</st> <st c="11514">为什么你</st> <st c="11525">需要一个API？</st>
- en: <st c="11534">For the first question, a</st> **<st c="11561">SPA</st>** <st
    c="11564">is a web application that loads a single HTML page and dynamically updates
    that page as the user interacts with the app.</st> <st c="11686">In contrast to
    traditional multi-page applications, where each user action requires loading a
    new page from the server, SPAs load all the necessary HTML, CSS, and JavaScript
    files initially, and subsequent interactions occur seamlessly through JavaScript
    and requests to</st> <st c="11957">the server.</st>
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11534">第一个问题，a</st> **<st c="11561">SPA</st>** <st c="11564">是一个加载单一HTML页面并在用户与应用互动时动态更新该页面的网页应用。</st>
    <st c="11686">与传统的多页面应用不同，后者每次用户操作都需要从服务器加载一个新页面，SPA初始时会加载所有必要的HTML、CSS和JavaScript文件，后续的交互通过JavaScript和对</st>
    <st c="11957">服务器的请求无缝进行。</st>
- en: <st c="11968">Ensure that you can answer the remaining ones to build solid knowledge
    before jumping</st> <st c="12055">into AWS.</st>
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11968">确保你能够回答剩下的问题，在跳入AWS之前建立扎实的知识基础。</st>
- en: <st c="12064">Architecture</st>
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="12055">架构</st>
- en: <st c="12077">By now, you</st> <st c="12089">should be familiar with the technologies
    you are going to use, and you may already have a small proof of concept working
    locally.</st> <st c="12220">The next step is to create your diagram with the architecture
    that will support your project.</st> *<st c="12314">Figure 3</st>**<st c="12322">.4</st>*
    <st c="12324">is an abstract diagram referencing the main layers that compose
    your full architecture and is a good starting point for</st> <st c="12445">architecture
    design.</st>
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12077">到目前为止，</st> <st c="12089">你应该已经熟悉了将要使用的技术，并且你可能已经在本地实现了一个小的概念验证。</st>
    <st c="12220">下一步是创建一个架构图，以支持你的项目。</st> *<st c="12314">图 3</st>**<st c="12322">.4</st>*
    <st c="12324">是一个抽象图，参考了组成完整架构的主要层次，是进行</st> <st c="12445">架构设计的一个良好起点。</st>
- en: '![Figure 3.4 – Abstract architecture](img/B22051_03_4.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.4 – 抽象架构](img/B22051_03_4.jpg)'
- en: <st c="12531">Figure 3.4 – Abstract architecture</st>
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12531">图 3.4 – 抽象架构</st>
- en: <st c="12565">End users interact with the presentation layer to get the frontend
    application, and perform requests to the compute layer, but never access the data
    layer directly.</st> <st c="12731">Instead, the compute layer is responsible for
    performing the data operations through</st> <st c="12816">an API.</st>
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12565">最终用户与展示层交互，以获取前端应用程序，并向计算层发出请求，但永远不会直接访问数据层。</st> <st c="12731">相反，计算层负责通过</st>
    <st c="12816">API 执行数据操作。</st>
- en: <st c="12823">Designing your API is crucial to ensure you use the right model
    to perform all the data operations you will need, and both data and functional
    requirements should be taken into consideration.</st> *<st c="13016">Figure 3</st>**<st
    c="13024">.5</st>* <st c="13026">represents your initial API structure based on
    the</st> <st c="13078">analysis performed.</st>
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12823">设计 API 非常关键，以确保你使用正确的模型来执行所有需要的数据操作，同时还应考虑数据和功能要求。</st> *<st c="13016">图
    3</st>**<st c="13024">.5</st>* <st c="13026">展示了基于</st> <st c="13078">所做分析的初步
    API 结构。</st>
- en: '![Figure 3.5 – API structure](img/B22051_03_5.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.5 – API 结构](img/B22051_03_5.jpg)'
- en: <st c="13167">Figure 3.5 – API structure</st>
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="13167">图 3.5 – API 结构</st>
- en: <st c="13193">Here’s</st> <st c="13201">the breakdown:</st>
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="13193">以下是</st> <st c="13201">详细说明：</st>
- en: '`<st c="13215">GET /recipes</st>`<st c="13228">: This gets the list</st> <st
    c="13250">of recipes.</st>'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="13215">GET /recipes</st>`<st c="13228">：此操作获取食谱列表。</st>'
- en: '`<st c="13261">GET /health</st>`<st c="13273">: This is a simple health</st>
    <st c="13300">check endpoint.</st>'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="13261">GET /health</st>`<st c="13273">：这是一个简单的健康</st> <st c="13300">检查端点。</st>'
- en: '`<st c="13315">DELETE /recipes/{recipe_id}</st>`<st c="13343">: This deletes
    a specific recipe with a</st> <st c="13384">defined ID.</st>'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="13315">DELETE /recipes/{recipe_id}</st>`<st c="13343">：此操作删除具有</st>
    <st c="13384">定义 ID 的特定食谱。</st>'
- en: '`<st c="13395">POST /recipes</st>`<st c="13409">: This creates a new</st> <st
    c="13431">recipe record.</st>'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="13395">POST /recipes</st>`<st c="13409">：此操作创建一个新的</st> <st c="13431">食谱记录。</st>'
- en: <st c="13445">With all this</st> <st c="13459">in mind, you should be able to
    proceed with the complete architecture with the respective AWS services.</st>
    <st c="13564">For your frontend, like the solution used in the previous chapter,
    you will use Amazon S3 and Amazon CloudFront to serve your application.</st> <st
    c="13703">The compute layer is implemented in Amazon EC2, and that’s where you
    plan to deploy your API.</st> <st c="13797">For the data layer, after considering
    all the requirements, you end up choosing Amazon DynamoDB as your data store.</st>
    <st c="13913">For simplicity, you will group both the compute and data layers
    in a single layer called the backend, and by the end, your architecture diagram
    should look like</st> *<st c="14074">Figure 3</st>**<st c="14082">.6</st>*<st
    c="14084">.</st>
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="13445">考虑到这一切，</st> <st c="13459">你应该能够继续进行完整架构的设计，并使用相应的 AWS 服务。</st>
    <st c="13564">对于前端，像上一章所用的解决方案，你将使用 Amazon S3 和 Amazon CloudFront 来提供应用程序。</st>
    <st c="13703">计算层通过 Amazon EC2 实现，计划将 API 部署在此处。</st> <st c="13797">对于数据层，在考虑所有要求之后，你最终选择了
    Amazon DynamoDB 作为数据存储。</st> <st c="13913">为了简化，你将把计算层和数据层合并成一个名为后台的单一层，最终，你的架构图应如下所示</st>
    *<st c="14074">图 3</st>**<st c="14082">.6</st>*<st c="14084">。</st>
- en: '![Figure 3.6 – AWS architecture for your recipe-sharing application](img/B22051_03_6.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.6 – 用于食谱共享应用程序的 AWS 架构](img/B22051_03_6.jpg)'
- en: <st c="14191">Figure 3.6 – AWS architecture for your recipe-sharing application</st>
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="14191">图 3.6 – 用于食谱共享应用程序的 AWS 架构</st>
- en: <st c="14256">With the</st> <st c="14266">high-level architecture in place,
    let’s dive deeper into the specific AWS services you’ve chosen to build this solution
    and understand how they align with the requirements</st> <st c="14438">defined
    earlier.</st>
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="14256">在</st> <st c="14266">建立高层架构后，让我们更深入地探讨你选择的具体 AWS 服务，了解它们如何与之前定义的需求对齐。</st>
    <st c="14438">。</st>
- en: <st c="14454">AWS services</st>
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="14454">AWS 服务</st>
- en: <st c="14467">AWS has</st> <st c="14476">available, at the time of this writing,
    more than 200 services to support different purposes and with different levels
    of management.</st> <st c="14610">Choosing AWS services is an important exercise,
    and the choices should be driven by the pre-defined requirements and not the opposite.</st>
    <st c="14745">In this section, you will explore the services adopted in your solution,
    and understand how they align with the requirements defined.</st> <st c="14879">Parts
    of the services have already been covered in the previous chapters.</st> <st c="14953">So,
    to avoid content duplication, we will briefly mention the advantages of the current
    use case and reference the chapter where you can find a</st> <st c="15097">detailed
    explanation.</st>
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="14467">截至本文撰写时，AWS 提供了</st> <st c="14476">200 多种服务，支持不同的用途，并且管理层级各异。</st>
    <st c="14610">选择 AWS 服务是一个重要的过程，选择应由预先定义的需求驱动，而不是相反。</st> <st c="14745">在这一章节中，你将探索你解决方案中采用的服务，并了解它们如何与已定义的需求对齐。</st>
    <st c="14879">部分服务内容已经在前几章中覆盖过。</st> <st c="14953">因此，为避免内容重复，我们将简要提及当前用例的优势，并引用可以找到详细解释的章节。</st>
    <st c="15097">。</st>
- en: <st c="15118">Amazon S3</st>
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="15118">Amazon S3</st>
- en: <st c="15128">Your</st> <st c="15133">frontend is a SPA built in React.js, and
    it translates into static files, such as HTML, CSS, and JavaScript, that should
    be treated as objects.</st> <st c="15278">As explained in</st> [*<st c="15294">Chapter
    2</st>*](B22051_02.xhtml#_idTextAnchor032)<st c="15303">, S3 is a scalable, highly
    available, and durable object storage service provided by AWS, and overall, a
    cost-effective solution for hosting static websites,</st> <st c="15461">including
    SPAs.</st>
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="15128">你的</st> <st c="15133">前端是一个使用 React.js 构建的 SPA，它会被转化为静态文件，如 HTML、CSS
    和 JavaScript，应当将这些文件视为对象。</st> <st c="15278">如</st> [*<st c="15294">第 2 章</st>*](B22051_02.xhtml#_idTextAnchor032)<st
    c="15303">所述，S3 是 AWS 提供的一个可扩展、高可用且持久的对象存储服务，是托管静态网站的成本效益高的解决方案，</st> <st c="15461">包括
    SPA。</st>
- en: <st c="15476">Important note</st>
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="15476">重要提示</st>
- en: <st c="15491">S3 is designed to guarantee the 11 9s of data durability.</st>
    <st c="15550">This means that, if you store 10,000 objects in S3, you could expect
    to lose at most one of those objects every 10 million years due to hardware failures
    or other potential causes of</st> <st c="15733">data loss.</st>
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="15491">S3 设计时保证了 11 个 9 的数据耐久性。</st> <st c="15550">这意味着，如果你在 S3 存储 10,000
    个对象，你可以预期每 1000 万年因硬件故障或其他潜在数据丢失原因，最多丢失一个对象。</st> <st c="15733">。</st>
- en: <st c="15743">If you want to dive deep into Amazon S3 architecture, we recommend
    watching the</st> *<st c="15824">AWS re:Invent 2023 - Dive deep on Amazon S3</st>*
    <st c="15867">session:</st> [<st c="15877">https://www.youtube.com/watch?v=sYDJYqvNeXU</st>](https://www.youtube.com/watch?v=sYDJYqvNeXU)<st
    c="15920">.</st>
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="15743">如果你想深入了解 Amazon S3 架构，推荐观看</st> *<st c="15824">AWS re:Invent 2023
    - 深入了解 Amazon S3</st>* <st c="15867">的会议：</st> [<st c="15877">https://www.youtube.com/watch?v=sYDJYqvNeXU</st>](https://www.youtube.com/watch?v=sYDJYqvNeXU)<st
    c="15920">。</st>
- en: <st c="15921">Amazon CloudFront</st>
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="15921">Amazon CloudFront</st>
- en: <st c="15939">You plan for</st> <st c="15953">your application to serve users
    globally and want to ensure a secure access protocol with HTTPS not supported
    in S3\.</st> <st c="16070">These are just two of many reasons to include CloudFront
    as part of your architecture, and for a more detailed explanation of the service
    and its advantages, we recommend checking the</st> *<st c="16254">AWS services</st>*
    <st c="16266">section in</st> [*<st c="16278">Chapter 2</st>*](B22051_02.xhtml#_idTextAnchor032)<st
    c="16287">.</st>
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="15939">如果你计划让</st> <st c="15953">你的应用程序全球服务用户，并希望确保使用 HTTPS 协议进行安全访问，而
    S3 不支持此协议。</st> <st c="16070">这只是将 CloudFront 纳入架构的众多原因之一，若要了解服务的详细解释及其优势，建议查看</st>
    *<st c="16254">AWS 服务</st>* <st c="16266">章节中的内容：</st> [*<st c="16278">第 2 章</st>*](B22051_02.xhtml#_idTextAnchor032)<st
    c="16287">。</st>
- en: <st c="16288">Amazon Virtual Private Cloud (VPC)</st>
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="16288">Amazon 虚拟私有云（VPC）</st>
- en: '**<st c="16323">Amazon VPC</st>** <st c="16334">allows</st> <st c="16342">you
    to create a logically isolated virtual network in the AWS cloud.</st> <st c="16411">It
    enables you to define a virtual networking environment where you can launch and</st>
    <st c="16494">manage AWS resources, such as</st> **<st c="16524">Amazon Elastic
    Compute Cloud (EC2)</st>** <st c="16558">instances, in a secure and controlled
    manner.</st> <st c="16605">As part of the VPC configuration, you can define your
    network topology with multiple subnets, which can be public or private, meaning
    with or without internet access, respectively, to segregate your traffic and increase
    the</st> <st c="16829">security posture.</st>'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**<st c="16323">Amazon VPC</st>** <st c="16334">允许</st> <st c="16342">你在 AWS
    云中创建一个逻辑隔离的虚拟网络。</st> <st c="16411">它使你能够定义一个虚拟网络环境，在其中启动和</st> <st c="16494">管理
    AWS 资源，如</st> **<st c="16524">Amazon 弹性计算云 (EC2)</st>** <st c="16558">实例，以安全和受控的方式。</st>
    <st c="16605">作为 VPC 配置的一部分，你可以定义带有多个子网的网络拓扑，这些子网可以是公共的或私有的，意味着分别具有或不具有互联网访问权限，以便隔离流量并增强</st>
    <st c="16829">安全性。</st>'
- en: <st c="16846">Amazon EC2</st>
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="16846">Amazon EC2</st>
- en: <st c="16857">From the</st> <st c="16866">technical requirements, you decide
    to develop your own API, and now you need a service to deploy and host it.</st>
    <st c="16977">Amazon EC2 allows you to provision virtual machines (instances)
    inside your VPC to run your applications, or, in this case, your API.</st> <st
    c="17111">EC2 offers a wide range of instance types with different configurations
    of CPU, memory, storage, and networking capacity, allowing you to choose the right
    instance type for your specific application requirements, ensuring optimal performance</st>
    <st c="17353">and cost-effectiveness.</st>
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="16857">从</st> <st c="16866">技术要求来看，你决定开发自己的 API，现在你需要一个服务来部署和托管它。</st>
    <st c="16977">Amazon EC2 允许你在 VPC 内配置虚拟机（实例）来运行你的应用程序，或者在此情况下，运行你的 API。</st> <st
    c="17111">EC2 提供了多种实例类型，具有不同的 CPU、内存、存储和网络容量配置，允许你选择适合特定应用程序需求的实例类型，确保最佳性能</st>
    <st c="17353">和成本效益。</st>
- en: <st c="17376">EC2 offers different pricing models that bring additional cost-effectiveness
    if you have a clear view of your requirements, as well as an on-demand option
    with a pure pay-as-you-go model, which is what you will choose for</st> <st c="17599">this
    project.</st>
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="17376">EC2 提供了不同的定价模型，如果你对需求有清晰的了解，可以带来额外的成本效益，同时还提供按需选项，采用纯粹的按量付费模式，这正是你为</st>
    <st c="17599">此项目选择的。</st>
- en: <st c="17612">If you want to learn</st> <st c="17634">more about EC2 pricing
    models and how they work, you can read about it in the AWS</st> <st c="17716">documentation:</st>
    [<st c="17731">https://docs.aws.amazon.com/whitepapers/latest/how-aws-pricing-works/amazon-ec2.html</st>](https://docs.aws.amazon.com/whitepapers/latest/how-aws-pricing-works/amazon-ec2.html)<st
    c="17815">.</st>
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="17612">如果你想了解</st> <st c="17634">更多关于 EC2 定价模型及其工作原理的信息，你可以在 AWS</st>
    <st c="17716">文档中阅读：</st> [<st c="17731">https://docs.aws.amazon.com/whitepapers/latest/how-aws-pricing-works/amazon-ec2.html</st>](https://docs.aws.amazon.com/whitepapers/latest/how-aws-pricing-works/amazon-ec2.html)<st
    c="17815">。</st>
- en: <st c="17816">Application Load Balancer (ALB)</st>
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="17816">应用程序负载均衡器 (ALB)</st>
- en: <st c="17848">An ALB is a</st> <st c="17861">fully managed load-balancing</st>
    <st c="17890">solution designed to distribute traffic across multiple targets,
    namely EC2 instances.</st> <st c="17977">Being a managed solution, it is highly
    scalable by design and automatically scales according to the traffic load.</st>
    <st c="18091">Moreover, and considering your requirements, ALB brings two</st>
    <st c="18151">main advantages:</st>
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="17848">ALB 是一个</st> <st c="17861">完全托管的负载均衡</st> <st c="17890">解决方案，旨在将流量分配到多个目标，具体来说就是
    EC2 实例。</st> <st c="17977">作为一个托管解决方案，它在设计上具有高度的可扩展性，并根据流量负载自动进行扩展。</st> <st c="18091">此外，根据你的需求，ALB
    带来了两个</st> <st c="18151">主要优势：</st>
- en: '**<st c="18167">Health checking</st>**<st c="18183">: Every</st> <st c="18191">load
    balancer needs to have at least one target group, and you can configure health
    checks to your targets to ensure traffic is only sent to healthy targets, avoiding
    a bad user experience and increasing the resilience and fault-tolerance levels
    of</st> <st c="18441">your application.</st>'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="18167">健康检查</st>**<st c="18183">：每个</st> <st c="18191">负载均衡器都需要至少一个目标组，你可以为目标配置健康检查，以确保流量只发送到健康的目标，避免不良的用户体验，并提高应用程序的弹性和容错能力。</st>
    <st c="18441">你的应用程序。</st>'
- en: '**<st c="18458">SSL termination</st>**<st c="18474">: ALBs</st> <st c="18481">support
    SSL termination, offloading the computational burden of encryption and decryption
    from your</st> <st c="18582">EC2 instances.</st>'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="18458">SSL 终止</st>**<st c="18474">：ALB 支持 SSL 终止，卸载加密和解密的计算负担，减轻你的</st>
    <st c="18582">EC2 实例的负担。</st>'
- en: <st c="18596">ALBs also</st> <st c="18607">integrate with AWS Web Application
    Firewall out of the box, and this would bring additional security against common
    attacks, such as</st> <st c="18740">SQL injection,</st> **<st c="18755">cross-site
    scripting</st>** <st c="18775">(</st>**<st c="18777">XSS</st>**<st c="18780">),
    and other web</st> <st c="18798">application vulnerabilities.</st>
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="18596">ALB 还</st> <st c="18607">与 AWS Web 应用防火墙无缝集成，这为防范常见攻击提供了额外的安全保护，例如</st>
    <st c="18740">SQL 注入，</st> **<st c="18755">跨站脚本攻击</st>** <st c="18775">(</st>**<st
    c="18777">XSS</st>**<st c="18780">)，以及其他网页</st> <st c="18798">应用漏洞。</st>
- en: <st c="18826">Amazon DynamoDB</st>
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="18826">亚马逊 DynamoDB</st>
- en: <st c="18842">Choosing your</st> <st c="18856">database solution should be driven
    by your data and requirements.</st> <st c="18923">For this project, you need to
    store recipes as single documents.</st> <st c="18988">Also, you have defined requirements
    around query consistency and high performance, even with many concurrent</st>
    <st c="19097">query operations.</st>
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 选择你的<st c="18842">数据库解决方案应根据你的数据和需求来决定。</st> <st c="18856">对于这个项目，你需要将食谱存储为单独的文档。</st>
    <st c="18923">此外，你已经定义了关于查询一致性和高性能的需求，即使在多个并发的</st> <st c="19097">查询操作下。</st>
- en: '**<st c="19114">Amazon DynamoDB</st>** <st c="19130">is a fully</st> <st c="19141">managed
    NoSQL database service, more specifically a key-value and document store that
    delivers single-digit millisecond performance at any scale.</st> <st c="19288">By
    choosing DynamoDB, you will leverage the native high availability due to data
    replication performed under the hood with a pay-as-you-go model and automatic
    scaling to handle spiky workloads, like the case of</st> <st c="19499">your application.</st>'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**<st c="19114">亚马逊 DynamoDB</st>** <st c="19130">是一种完全</st> <st c="19141">托管的
    NoSQL 数据库服务，更具体地说，是一种键值和文档存储，它在任何规模下都能提供单毫秒级的性能。</st> <st c="19288">通过选择 DynamoDB，你将利用其天生的高可用性，因为底层的数据复制采用按需付费模式并自动扩展，以处理突发的工作负载，就像</st>
    <st c="19499">你的应用程序的情况。</st>'
- en: <st c="19516">Important note</st>
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="19516">重要提示</st>
- en: '<st c="19531">DynamoDB is by nature a distributed service, but this should
    not be a blocker even if you need high consistency.</st> <st c="19645">DynamoDB
    offers two types of consistency models: eventually consistent (default) and strongly
    consistent.</st> <st c="19751">With the last option, you can ensure high consistency
    and data integrity by ensuring the data returned is always up</st> <st c="19867">to
    date.</st>'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="19531">DynamoDB 本质上是一个分布式服务，但即使你需要高一致性，这也不应成为障碍。</st> <st c="19645">DynamoDB
    提供两种一致性模型：最终一致性（默认）和强一致性。</st> <st c="19751">使用最后一种选项，你可以确保高一致性和数据完整性，确保返回的数据始终是最新的。</st>
    <st c="19867">。</st>
- en: <st c="19875">If you want to know more about the story of DynamoDB, the lessons
    learned after the 10th anniversary, and the future plans, check out this article
    from Amazon</st> <st c="20035">Science:</st> [<st c="20044">https://www.amazon.science/latest-news/amazons-dynamodb-10-years-later</st>](https://www.amazon.science/latest-news/amazons-dynamodb-10-years-later)<st
    c="20114">.</st>
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="19875">如果你想了解更多关于 DynamoDB 的故事、10周年后的经验教训以及未来计划，查看这篇来自 Amazon</st> <st
    c="20035">Science:</st> [<st c="20044">https://www.amazon.science/latest-news/amazons-dynamodb-10-years-later</st>](https://www.amazon.science/latest-news/amazons-dynamodb-10-years-later)<st
    c="20114">。</st>
- en: <st c="20115">AWS CloudFormation</st>
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="20115">AWS CloudFormation</st>
- en: <st c="20134">In</st> [*<st c="20138">Chapter 1</st>*](B22051_01.xhtml#_idTextAnchor014)<st
    c="20147">, we briefly</st> <st c="20160">touched on AWS CloudFormation as a tool
    to provision infrastructure, but considering this is the first chapter where it
    will be extensively used, we will dive a bit deeper into it and explain it in</st>
    <st c="20358">more detail.</st>
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*<st c="20138">第一章</st>*](B22051_01.xhtml#_idTextAnchor014)中，我们简要介绍了 AWS CloudFormation
    作为配置基础设施的工具，但考虑到这是它首次被广泛使用的章节，我们将进一步深入讲解并详细说明</st> <st c="20358">它。</st>
- en: '**<st c="20370">CloudFormation</st>** <st c="20385">is an</st> **<st c="20392">Infrastructure
    as Code</st>** <st c="20414">(</st>**<st c="20416">IaC</st>**<st c="20419">) service
    that allows you to define</st> <st c="20456">and provision</st> <st c="20469">AWS
    resources in a declarative way, described as template documents that can be written
    either in YAML or JSON.</st> <st c="20582">Like any IaC tool, CloudFormation enables
    infrastructure automation in its life cycle, from creation and update to deletion.</st>
    <st c="20707">It supports drift detection to identify any changes that may be
    performed outside the template, which can cause inconsistencies.</st> <st c="20836">Making
    manual changes to resources managed by CloudFormation is not recommended because
    it can result in configuration drift, where the actual state of the resources
    differs from what is defined in</st> <st c="21034">the template.</st>'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**<st c="20370">CloudFormation</st>** <st c="20385">是一个</st> **<st c="20392">基础设施即代码</st>**
    <st c="20414">(</st>**<st c="20416">IaC</st>**<st c="20419">) 服务，允许你以声明性方式定义并配置
    AWS 资源，这些资源通过模板文档来描述，模板可以用 YAML 或 JSON 编写。</st> <st c="20582">像所有 IaC 工具一样，CloudFormation
    支持基础设施生命周期自动化，从创建、更新到删除。</st> <st c="20707">它支持漂移检测，用于识别可能在模板外部进行的更改，这些更改可能导致不一致。</st>
    <st c="20836">不建议手动更改由 CloudFormation 管理的资源，因为这可能导致配置漂移，即资源的实际状态与</st> <st c="21034">模板中定义的状态不符。</st>'
- en: <st c="21047">One of the key benefits of CloudFormation is its ability to manage
    and provision resources as a single unit, known as a stack.</st> <st c="21175">This
    stack can include resources from various AWS services, such as EC2 instances,
    VPCs, S3 buckets, and more.</st> <st c="21286">CloudFormation takes care of creating
    and configuring these resources in the correct order, based on the dependencies
    defined in</st> <st c="21415">the template.</st>
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="21047">CloudFormation 的一个主要优势是它能够将资源管理和配置作为一个单一的单元，称为栈。</st> <st c="21175">该栈可以包含来自各种
    AWS 服务的资源，如 EC2 实例、VPC、S3 存储桶等。</st> <st c="21286">CloudFormation 会根据</st> <st
    c="21415">模板中定义的依赖关系，负责按正确的顺序创建和配置这些资源。</st>
- en: <st c="21428">Coding the solution</st>
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="21428">编码解决方案</st>
- en: <st c="21448">By now, you</st> <st c="21460">should have a solid understanding
    of the core services used, the reasons behind the services chosen, and most importantly,
    how everything aligns with your requirements.</st> <st c="21630">You are finally
    able to proceed with the</st> <st c="21671">actual implementation.</st>
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="21448">到目前为止，</st> <st c="21460">你应该已经牢固掌握了所使用的核心服务、选择这些服务的原因，最重要的是，如何使这些服务与你的需求相符合。</st>
    <st c="21630">你现在终于可以进行</st> <st c="21671">实际的实施了。</st>
- en: <st c="21693">Cloning the project</st>
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="21693">克隆项目</st>
- en: <st c="21713">If you are</st> <st c="21724">following along with the previous
    chapters, you should have already cloned the repository associated with this book,
    but if you just arrived, start by cloning the repo, or optionally download the
    repository as a</st> <st c="21936">ZIP file.</st> <st c="21947">The repository
    is structured with folders for each chapter, and all the code for this chapter
    is located</st> <st c="22052">in</st> `<st c="22055">chapter3/code</st>`<st c="22068">.</st>
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="21713">如果你正在</st> <st c="21724">跟随前几章的内容，你应该已经克隆了与本书相关的代码库，但如果你是刚刚开始，可以先克隆该仓库，或者选择将代码库作为一个</st>
    <st c="21936">ZIP 文件</st> <st c="21947">下载。</st> <st c="22052">该仓库的结构是以每章一个文件夹为单位的，本章的所有代码位于</st>
    `<st c="22055">chapter3/code</st>`<st c="22068">。</st>
- en: <st c="22069">Inside the</st> `<st c="22081">chapter3/code</st>` <st c="22094">folder,
    you will find three subfolders, as shown in</st> *<st c="22147">Figure 3</st>**<st
    c="22155">.7</st>*<st c="22157">:</st>
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="22069">在</st> `<st c="22081">chapter3/code</st>` <st c="22094">文件夹内，你将找到三个子文件夹，如</st>
    *<st c="22147">图 3</st>**<st c="22155">.7</st>*<st c="22157">所示：</st>
- en: '`<st c="22159">frontend</st>`<st c="22167">: This contains the code for</st>
    <st c="22197">your frontend</st>'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="22159">frontend</st>`<st c="22167">：此处包含</st> <st c="22197">你的前端代码</st>'
- en: '`<st c="22210">backend</st>`<st c="22218">: This contains the code for</st>
    <st c="22248">your API</st>'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="22210">backend</st>`<st c="22218">：此处包含</st> <st c="22248">你的 API 代码</st>'
- en: '`<st c="22256">platform</st>`<st c="22265">: This contains two different CloudFormation
    templates to deploy the main infrastructure for</st> <st c="22359">your application</st>'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="22256">platform</st>`<st c="22265">：此处包含两个不同的 CloudFormation 模板，用于部署</st>
    <st c="22359">你的应用程序</st>的主要基础设施。'
- en: '![Figure 3.7 – The Chapter 3 folder structure](img/B22051_03_7.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.7 – 第3章文件夹结构](img/B22051_03_7.jpg)'
- en: <st c="22415">Figure 3.7 – The</st> [<st c="22432">Chapter 3</st>](B22051_03.xhtml#_idTextAnchor054)
    <st c="22441">folder structure</st>
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="22415">图 3.7 – </st> [<st c="22432">第 3 章</st>](B22051_03.xhtml#_idTextAnchor054)
    <st c="22441">文件夹结构</st>
- en: <st c="22458">Why do you have two different</st> <st c="22489">templates available?</st>
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="22458">为什么有两个不同的</st> <st c="22489">模板可供选择？</st>
- en: '<st c="22509">A SPA has two types of connections: one to retrieve the frontend
    resources from CloudFront, and another to communicate with the backend through
    JavaScript API requests from the browser, as represented in</st> *<st c="22714">Figure
    3</st>**<st c="22722">.6</st>*<st c="22724">.</st>'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="22509">SPA 有两种连接方式：一种是通过 CloudFront 获取前端资源，另一种是通过浏览器中的 JavaScript API
    请求与后台进行通信，如下图所示：</st> *<st c="22714">图 3</st>**<st c="22722">.6</st>*<st c="22724">。</st>
- en: <st c="22725">While CloudFront automatically provides HTTPS for delivering your
    frontend resources, your API requires additional configuration.</st> <st c="22856">To
    secure the API with HTTPS, you’ll need to own a domain and issue a certificate
    to</st> <st c="22941">prove ownership.</st>
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="22725">虽然 CloudFront 会自动提供 HTTPS 来交付前端资源，但您的 API 需要额外的配置。</st> <st c="22856">为了使用
    HTTPS 保护 API，您需要拥有一个域名并申请证书以</st> <st c="22941">证明所有权。</st>
- en: <st c="22957">We understand that you may not own one domain right now nor want
    to purchase one, and that should not be a blocker to deploy your application,
    so we’ve got</st> <st c="23114">you covered!</st>
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="22957">我们理解您现在可能没有域名，或者不想购买域名，这不应该成为部署应用程序的障碍，因此我们已为您提供解决方案！</st>
- en: <st c="23126">We’ve worked on two different options for this section, and thus
    the two different templates in the</st> `<st c="23227">platform</st>` <st c="23235">folder.</st>
    <st c="23244">The following table maps the options with the templates, and will
    help you choose the</st> <st c="23330">right path:</st>
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="23126">我们为本节设计了两种不同的选项，因此在</st> `<st c="23227">平台</st>` <st c="23235">文件夹中有两个不同的模板。</st>
    <st c="23244">下表将选项与模板进行映射，帮助您选择</st> <st c="23330">正确的路径：</st>
- en: '|  | **<st c="23341">Description</st>** | **<st c="23353">CloudFormation Template</st>**
    | **<st c="23377">Recommended</st>** |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '|  | **<st c="23341">描述</st>** | **<st c="23353">CloudFormation 模板</st>** |
    **<st c="23377">推荐</st>** |'
- en: '| --- | --- | --- | --- |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| **<st c="23389">Option 1</st>** | <st c="23398">You either own a domain or
    are willing to purchase one to configure HTTPS communication to</st> <st c="23490">your
    API</st> | `<st c="23498">ch3-https-complete.yaml</st>` | <st c="23522">Yes</st>
    |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| **<st c="23389">选项 1</st>** | <st c="23398">您要么拥有一个域名，要么愿意购买一个域名来配置与</st>
    <st c="23490">您的 API</st> 的 HTTPS 通信 | `<st c="23498">ch3-https-complete.yaml</st>`
    | <st c="23522">是</st> |'
- en: '| **<st c="23526">Option 2</st>** | <st c="23535">You want to test the application
    without owning or purchasing</st> <st c="23598">a domain</st> | `<st c="23606">ch3-http.yaml</st>`
    | <st c="23620">No</st> |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| **<st c="23526">选项 2</st>** | <st c="23535">您希望在没有拥有或购买域名的情况下测试应用程序</st>
    <st c="23598">一个域名</st> | `<st c="23606">ch3-http.yaml</st>` | <st c="23620">否</st>
    |'
- en: <st c="23623">Table 3.1 – Mapping between the CloudFormation template and the
    option you want to follow</st>
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="23623">表 3.1 – CloudFormation 模板与您选择的选项之间的映射</st>
- en: <st c="23713">A detailed explanation</st> <st c="23737">of the differences between
    HTTP and HTTPS is beyond the scope of this book, but if you want to know more,
    you can read the following</st> <st c="23870">article:</st> [<st c="23879">https://aws.amazon.com/compare/the-difference-between-https-and-http/</st>](https://aws.amazon.com/compare/the-difference-between-https-and-http/)<st
    c="23948">.</st>
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="23713">关于 HTTP 和 HTTPS 之间差异的详细解释超出了本书的范围，但如果您想了解更多，您可以阅读以下</st> <st c="23870">文章：</st>
    [<st c="23879">https://aws.amazon.com/compare/the-difference-between-https-and-http/</st>](https://aws.amazon.com/compare/the-difference-between-https-and-http/)<st
    c="23948">。</st>
- en: <st c="23949">The steps you follow depend on the option you choose.</st> <st
    c="24004">To simplify the process, steps specific to option 1 will be marked as</st>
    *<st c="24074">(Option 1 Only)</st>*<st c="24089">, and steps for option 2 will
    be marked as</st> *<st c="24132">(Option 2 Only)</st>*<st c="24147">. Steps without
    any marking apply to both options.</st> <st c="24198">Consider that, even if you
    choose option 2, it’s recommended to read the HTTPS configuration steps for option
    1 to gain</st> <st c="24318">more knowledge.</st>
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="23949">您遵循的步骤取决于您选择的选项。</st> <st c="24004">为了简化过程，选项 1 的特定步骤将标记为</st>
    *<st c="24074">(仅适用于选项 1)</st>*<st c="24089">，选项 2 的步骤将标记为</st> *<st c="24132">(仅适用于选项
    2)</st>*<st c="24147">。没有任何标记的步骤适用于两种选项。</st> <st c="24198">请注意，即使选择了选项 2，建议阅读选项
    1 的 HTTPS 配置步骤，以获取</st> <st c="24318">更多知识。</st>
- en: <st c="24333">Important note</st>
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="24333">重要说明</st>
- en: <st c="24348">While this application and CloudFormation templates are designed
    to work in any AWS region, if you choose option 1, you must use the same region
    for creating the certificate and deploying the solution.</st> <st c="24551">This
    is because option 1 requires creating a certificate using AWS Certificate Manager,
    which is a</st> <st c="24650">regional service.</st>
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="24348">虽然此应用程序和 CloudFormation 模板旨在适用于任何 AWS 区域，但如果选择选项 1，则必须使用相同的区域来创建证书并部署解决方案。</st>
    <st c="24551">这是因为选项 1 需要使用 AWS 证书管理器创建证书，而这是一个</st> <st c="24650">区域性服务。</st>
- en: <st c="24667">Section 1 – DNS configuration and certificate issuing (option
    1 only)</st>
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="24667">第 1 节 – DNS 配置和证书签发（仅适用于选项 1）</st>
- en: <st c="24737">To</st> <st c="24741">configure HTTPS, you need to own a domain
    and prove ownership by obtaining a certificate, and this section covers configuring
    your DNS service and issuing a certificate for</st> <st c="24914">your domain.</st>
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="24737">要</st> <st c="24741">配置 HTTPS，您需要拥有一个域名，并通过获取证书来证明所有权，本节将介绍如何配置您的
    DNS 服务并为</st> <st c="24914">您的域名签发证书。</st>
- en: <st c="24926">Domains are purchased from domain registrars, which manage the
    reservation and registration of internet domain names.</st> <st c="25045">In AWS,
    Route 53 can serve as both your domain registrar for</st> <st c="25106">purchasing
    domains as well as a DNS service for managing them.</st> <st c="25169">Alternatively,
    you can choose popular third-party registrars, such as GoDaddy or Namecheap, among
    others, to purchase</st> <st c="25287">your domain.</st>
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="24926">域名是通过域名注册商购买的，注册商管理互联网域名的预定和注册。</st> <st c="25045">在 AWS 中，Route
    53 可以同时作为您的域名注册商，用于</st> <st c="25106">购买域名，以及作为 DNS 服务来管理它们。</st> <st c="25169">此外，您还可以选择流行的第三方注册商，如
    GoDaddy 或 Namecheap 等，来购买</st> <st c="25287">您的域名。</st>
- en: <st c="25299">DNS configuration in Route 53</st>
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="25299">Route 53 中的 DNS 配置</st>
- en: <st c="25329">For this</st> <st c="25339">example, we just bought a domain from
    a third-party provider, and we will demonstrate how to set up DNS management in
    Route 53 for a domain bought outside</st> <st c="25494">Route 53.</st>
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="25329">在本</st> <st c="25339">示例中，我们刚从第三方提供商那里购买了一个域名，并将演示如何在 Route 53
    中为外部购买的域名设置 DNS 管理</st> <st c="25494">。</st>
- en: <st c="25503">From the console, go to the Route 53 service by typing</st> `<st
    c="25559">route 53</st>` <st c="25567">in the search bar, as shown in</st> *<st
    c="25599">Figure 3</st>**<st c="25607">.8</st>*<st c="25609">, or you can access
    it directly through the following</st> <st c="25663">link:</st> [<st c="25669">https://console.aws.amazon.com/route53</st>](https://console.aws.amazon.com/route53)<st
    c="25707">.</st>
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="25503">在控制台中，通过在搜索栏输入</st> `<st c="25559">route 53</st>` <st c="25567">，如</st>
    *<st c="25599">图 3</st>**<st c="25607">.8</st>*<st c="25609">所示，或者你也可以通过以下</st>
    <st c="25663">链接直接访问：</st> [<st c="25669">https://console.aws.amazon.com/route53</st>](https://console.aws.amazon.com/route53)<st
    c="25707">。</st>
- en: '![Figure 3.8 – Console access to Route 53 service](img/B22051_03_8.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.8 – 控制台访问 Route 53 服务](img/B22051_03_8.jpg)'
- en: <st c="25733">Figure 3.8 – Console access to Route 53 service</st>
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="25733">图 3.8 – 控制台访问 Route 53 服务</st>
- en: <st c="25780">On the left pane of the Route 53 console, do</st> <st c="25826">the
    following:</st>
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="25780">在 Route 53 控制台的左侧面板中，执行以下操作：</st>
- en: <st c="25840">Click on</st> **<st c="25850">Hosted Zones</st>**<st c="25862">.</st>
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="25840">点击</st> **<st c="25850">托管区域</st>**<st c="25862">。</st>
- en: <st c="25863">Then, select</st> **<st c="25877">Create</st>** **<st c="25884">Hosted
    Zone</st>**<st c="25895">.</st>
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="25863">然后，点击</st> **<st c="25877">创建</st>** **<st c="25884">托管区域</st>**<st
    c="25895">。</st>
- en: <st c="25896">Fill the</st> `<st c="25967">awscloudprojects.site</st>`<st c="25988">).</st>
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="25896">填写</st> `<st c="25967">awscloudprojects.site</st>`<st c="25988">。</st>
- en: <st c="25991">Select</st> **<st c="25999">Public Hosted Zone</st>** <st c="26017">as</st>
    <st c="26021">the type.</st>
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="25991">选择</st> **<st c="25999">公共托管区域</st>** <st c="26017">作为</st> <st
    c="26021">类型。</st>
- en: <st c="26030">Press</st> **<st c="26037">Create</st>** **<st c="26044">Hosted
    Zone</st>**<st c="26055">.</st>
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="26030">点击</st> **<st c="26037">创建</st>** **<st c="26044">托管区域</st>**<st
    c="26055">。</st>
- en: <st c="26056">Your configuration window should look like</st> *<st c="26100">Figure
    3</st>**<st c="26108">.9</st>*<st c="26110">, except for the</st> **<st c="26127">Domain</st>**
    **<st c="26134">name</st>** <st c="26138">field.</st>
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="26056">您的配置窗口应该如下所示</st> *<st c="26100">图 3</st>**<st c="26108">.9</st>*<st
    c="26110">，除了</st> **<st c="26127">域名</st>** **<st c="26134">字段</st>** <st c="26138">。</st>
- en: '![Figure 3.9 – Route 53 hosted zone creation form](img/B22051_03_9.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.9 – Route 53 托管区域创建表单](img/B22051_03_9.jpg)'
- en: <st c="26955">Figure 3.9 – Route 53 hosted zone creation form</st>
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="26955">图 3.9 – Route 53 托管区域创建表单</st>
- en: <st c="27002">If you</st> <st c="27009">return to the</st> **<st c="27024">Hosted
    Zones</st>** <st c="27036">menu, you should be able to see your domain listed.</st>
    <st c="27089">To access the nameservers associated with your hosted zone, follow</st>
    <st c="27156">these steps:.</st>
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="27002">如果你</st> <st c="27009">返回到</st> **<st c="27024">托管区域</st>** <st
    c="27036">菜单，你应该能够看到你的域名列出。</st> <st c="27089">要访问与你的托管区域关联的名称服务器，请按照</st> <st
    c="27156">以下步骤操作：</st>
- en: <st c="27169">Click on the domain</st> <st c="27190">you created.</st>
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="27169">点击你创建的域名。</st>
- en: <st c="27202">Take note of the associated nameservers as you will need them
    to configure the</st> <st c="27282">DNS next.</st>
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="27202">请注意相关的名称服务器，因为你将需要它们来配置</st> <st c="27282">DNS。</st>
- en: <st c="27291">You should have four nameserver values as part of your hosted
    zone details as shown in</st> *<st c="27379">Figure 3</st>**<st c="27387">.10</st>*<st
    c="27390">:</st>
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="27291">你应该在你的托管区域详情中看到四个名称服务器值，如</st> *<st c="27379">图 3</st>**<st c="27387">.10</st>*<st
    c="27390">所示：</st>
- en: '![Figure 3.10 – Hosted zone details](img/B22051_03_10.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.10 – 托管区域详情](img/B22051_03_10.jpg)'
- en: <st c="27599">Figure 3.10 – Hosted zone details</st>
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="27599">图 3.10 – 托管区域详情</st>
- en: <st c="27632">The following steps involve updating the nameservers for your
    domain, which may vary depending on your domain registrar.</st> <st c="27754">Regardless
    of your registrar, AWS provides step-by-step guides for configuring nameservers
    with popular</st> <st c="27858">registrars:</st> [<st c="27870">https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/migrate-dns-domain-in-use.html</st>](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/migrate-dns-domain-in-use.html)<st
    c="27958">.</st>
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="27632">以下步骤涉及更新你域名的名称服务器，具体步骤可能会根据你的域名注册商而有所不同。</st> <st c="27754">无论你的注册商是谁，AWS
    都提供了与流行</st> <st c="27858">注册商配置名称服务器的逐步指南：</st> [<st c="27870">https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/migrate-dns-domain-in-use.html</st>](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/migrate-dns-domain-in-use.html)<st
    c="27958">。</st>
- en: <st c="27959">Important note</st>
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="27959">重要提示</st>
- en: <st c="27974">A</st> **<st c="27977">hosted zone</st>** <st c="27988">in Amazon
    Route 53 is a container that holds all the DNS records and routing configurations
    for a specific domain name and its subdomains.</st> <st c="28128">It allows you
    to manage and route traffic to your AWS resources or external resources based
    on your defined</st> <st c="28236">routing policies.</st>
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="27974">一个</st> **<st c="27977">托管区域</st>** <st c="27988">在 Amazon Route
    53 中是一个容器，保存特定域名及其子域的所有 DNS 记录和路由配置。</st> <st c="28128">它允许你根据定义的</st> <st c="28236">路由策略管理和路由流量到你的
    AWS 资源或外部资源。</st>
- en: <st c="28253">Certificate issuing</st>
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="28253">证书颁发</st>
- en: <st c="28273">You will now proceed</st> <st c="28295">with the certificate-issuing
    process with the</st> **<st c="28341">AWS Certificate Manager</st>** <st c="28364">(</st>**<st
    c="28366">ACM</st>**<st c="28369">) service.</st> <st c="28381">From the console,
    go to the ACM service</st> <st c="28421">at</st> [<st c="28424">https://console.aws.amazon.com/acm</st>](https://console.aws.amazon.com/acm)<st
    c="28458">.</st>
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="28273">你现在将继续</st> <st c="28295">使用</st> **<st c="28341">AWS 证书管理器</st>**
    <st c="28364">(</st>**<st c="28366">ACM</st>**<st c="28369">) 服务进行证书颁发过程。</st>
    <st c="28381">在控制台中，转到 ACM 服务</st> <st c="28421">，地址为</st> [<st c="28424">https://console.aws.amazon.com/acm</st>](https://console.aws.amazon.com/acm)<st
    c="28458">。</st>
- en: '![Figure 3.11 – Console access to the ACM service](img/B22051_03_11.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.11 – 控制台访问 ACM 服务](img/B22051_03_11.jpg)'
- en: <st c="28488">Figure 3.11 – Console access to the ACM service</st>
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="28488">图 3.11 – 控制台访问 ACM 服务</st>
- en: <st c="28535">To issue a certificate for your domain, you need to follow</st>
    <st c="28595">these steps:</st>
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="28535">要为你的域名颁发证书，你需要按照</st> <st c="28595">以下步骤操作：</st>
- en: <st c="28607">Click on the</st> **<st c="28621">Request a</st>** **<st c="28631">certificate</st>**
    <st c="28642">button.</st>
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="28607">点击</st> **<st c="28621">请求一个</st>** **<st c="28631">证书</st>**
    <st c="28642">按钮。</st>
- en: <st c="28650">On the</st> **<st c="28658">Certificate Type</st>** <st c="28674">screen,
    select the</st> **<st c="28694">Request a public certificate</st>** <st c="28722">option
    and</st> <st c="28734">click</st> **<st c="28740">Next</st>**<st c="28744">.</st>
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="28650">在</st> **<st c="28658">证书类型</st>** <st c="28674">屏幕上，选择</st> **<st
    c="28694">请求公共证书</st>** <st c="28722">选项，点击</st> **<st c="28740">下一步</st>**<st
    c="28744">。</st>
- en: <st c="28745">Fill out the required information on the form.</st> <st c="28793">Most
    fields can be left with their default values, but for the</st> `<st c="28981">app.example.com</st>`<st
    c="28996">,</st> `<st c="28998">api.example.com</st>`<st c="29013">).</st>
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在表单中填写必要的信息。大多数字段可以保留默认值，但对于`app.example.com`、`api.example.com`等，您可能需要进行调整。
- en: '`<st c="29101">*.example.com</st>`<st c="29114">).</st>'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`*.example.com`。'
- en: <st c="29117">Ensure that</st> **<st c="29130">Validation method</st>** <st
    c="29147">is set to</st> **<st c="29158">DNS validation</st>**<st c="29172">,
    as recommended</st> <st c="29189">by AWS.</st>
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保**验证方法**设置为**DNS 验证**，这是 AWS 推荐的方式。
- en: <st c="29196">Click</st> **<st c="29203">Request</st>**<st c="29210">.</st>
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**请求**。
- en: '*<st c="29211">Figure 3</st>**<st c="29220">.12</st>* <st c="29223">depicts
    the</st> <st c="29235">final state of the form, containing all the</st> <st c="29280">necessary
    fields.</st>'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3.12*展示了表单的最终状态，包含所有必要字段。'
- en: '![Figure 3.12 – Certificate request form](img/B22051_03_12.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.12 – 证书请求表单](img/B22051_03_12.jpg)'
- en: <st c="30092">Figure 3.12 – Certificate request form</st>
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.12 – 证书请求表单
- en: <st c="30130">After requesting the certificate, you will see it listed with
    the</st> **<st c="30197">pending validation</st>** <st c="30215">status.</st>
    <st c="30224">To validate the certificate and prove domain ownership, you need
    to create a DNS record in your</st> <st c="30320">hosted zone.</st>
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在请求证书后，您将看到它的状态为**待验证**。要验证证书并证明域名所有权，您需要在您的托管区域创建一个 DNS 记录。
- en: <st c="30332">If your domain is managed by Route 53, you can click</st> **<st
    c="30386">Create Records in Route 53</st>** <st c="30412">for an easier setup,
    as you can see in</st> *<st c="30452">Figure 3</st>**<st c="30460">.13</st>*<st
    c="30463">.</st>
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的域名由 Route 53 管理，您可以点击**创建 Route 53 记录**，如*图 3.13*所示，这样可以更轻松地进行设置。
- en: '![Figure 3.13 – Certificate validation with a DNS record](img/B22051_03_13.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.13 – 使用 DNS 记录验证证书](img/B22051_03_13.jpg)'
- en: <st c="30655">Figure 3.13 – Certificate validation with a DNS record</st>
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.13 – 使用 DNS 记录验证证书
- en: <st c="30709">Before proceeding, you need to wait until the status changes to</st>
    **<st c="30774">Issued</st>** <st c="30780">as in</st> *<st c="30787">Figure 3</st>**<st
    c="30795">.14</st>*<st c="30798">. If everything is well configured, it should
    not take more than 10 minutes, but it can take up to a couple of hours, as per
    the AWS</st> <st c="30931">documentation (</st>[<st c="30946">https://aws.amazon.com/certificate-manager/faqs/</st>](https://aws.amazon.com/certificate-manager/faqs/)<st
    c="30995">).</st>
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续操作之前，您需要等待状态变为**已颁发**，如*图 3.14*所示。如果一切配置正常，通常不需要超过 10 分钟，但根据 AWS 文档，可能需要长达几个小时，[查看详细信息](https://aws.amazon.com/certificate-manager/faqs/)。
- en: '![Figure 3.14 – ACM certificates list](img/B22051_03_14.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.14 – ACM 证书列表](img/B22051_03_14.jpg)'
- en: <st c="31272">Figure 3.14 – ACM certificates list</st>
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.14 – ACM 证书列表
- en: <st c="31307">The</st> <st c="31312">final step is to note down</st> `<st c="31339">certificateARN</st>`<st
    c="31353">, which you’ll need to input as a parameter in the</st> <st c="31404">CloudFormation
    template:</st>
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是记下`certificateARN`，您需要在 CloudFormation 模板中作为参数输入它：
- en: <st c="31428">Navigate to the ACM console in the region where you created</st>
    <st c="31489">the certificate.</st>
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您创建证书所在区域的 ACM 控制台。
- en: <st c="31505">Select</st> **<st c="31513">List Certificates</st>** <st c="31530">from
    the</st> <st c="31540">left pane.</st>
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧面板中选择**证书列表**。
- en: <st c="31550">Locate your “Issued” certificate, as shown in</st> *<st c="31597">Figure
    3</st>**<st c="31605">.14</st>*<st c="31608">.</st>
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位到您的“已颁发”证书，如*图 3.14*所示。
- en: <st c="31609">Click on the certificate, and under</st> **<st c="31646">Certificate
    status</st>**<st c="31664">, you’ll</st> <st c="31673">find</st> **<st c="31678">ARN</st>**<st
    c="31681">.</st>
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="31609">点击证书，在</st> **<st c="31646">证书状态</st>**<st c="31664">下，你将</st>
    <st c="31673">找到</st> **<st c="31678">ARN</st>**<st c="31681">。</st>
- en: '![Figure 3.15 – Certificate ARN access](img/B22051_03_15.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.15 – 证书 ARN 访问](img/B22051_03_15.jpg)'
- en: <st c="31848">Figure 3.15 – Certificate ARN access</st>
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="31848">图 3.15 – 证书 ARN 访问</st>
- en: <st c="31884">Important note</st>
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="31884">重要说明</st>
- en: <st c="31899">In AWS, an ARN is a unique identifier for an AWS service.</st>
    <st c="31958">It follows this</st> <st c="31974">format:</st> `<st c="31982">arn:partition:service:region:account-id:resource-type/resource-id</st>`<st
    c="32047">.</st>
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="31899">在 AWS 中，ARN 是 AWS 服务的唯一标识符。</st> <st c="31958">它遵循以下</st> <st
    c="31974">格式：</st> `<st c="31982">arn:partition:service:region:account-id:resource-type/resource-id</st>`<st
    c="32047">。</st>
- en: <st c="32048">Section 2 – Solution deployment</st>
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="32048">第 2 节 – 解决方案部署</st>
- en: <st c="32080">Now, you</st> <st c="32090">will deploy the infrastructure to
    support your application, both the frontend and backend, with the CloudFormation
    templates available in your</st> `<st c="32233">chapter3/code</st>` <st c="32246">folder.</st>
    <st c="32255">Depending on the option you choose, you pick a different template,
    and it will also create different components, as you can see in the</st> <st c="32390">next
    table.</st>
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="32080">现在，你将使用 CloudFormation 模板来部署支持你的应用程序的基础设施，包括前端和后端，模板文件位于</st>
    `<st c="32233">chapter3/code</st>` <st c="32246">文件夹中。</st> <st c="32255">根据你选择的选项，选择不同的模板，它将创建不同的组件，正如你在</st>
    <st c="32390">下表中看到的那样。</st>
- en: '|  | **<st c="32401">Option 1</st>****<st c="32410">(</st>****<st c="32412">HTTPS
    configured)</st>** | **<st c="32429">Option 2</st>****<st c="32438">(</st>****<st
    c="32440">HTTP configured)</st>** |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
  zh: '|  | **<st c="32401">选项 1</st>****<st c="32410">(</st>****<st c="32412">配置了
    HTTPS</st>** | **<st c="32429">选项 2</st>****<st c="32438">(</st>****<st c="32440">配置了
    HTTP</st>** |'
- en: '| --- | --- | --- |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| **<st c="32456">Template</st>** | `<st c="32465">ch3-https-complete.yaml</st>`
    | `<st c="32489">ch3-http.yaml</st>` |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| **<st c="32456">模板</st>** | `<st c="32465">ch3-https-complete.yaml</st>`
    | `<st c="32489">ch3-http.yaml</st>` |'
- en: '| **<st c="32503">Frontend</st>** | <st c="32512">CloudFront</st> <st c="32524">and
    S3</st> | <st c="32530">CloudFront</st> <st c="32542">and S3</st> |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| **<st c="32503">前端</st>** | <st c="32512">CloudFront</st> <st c="32524">和
    S3</st> | <st c="32530">CloudFront</st> <st c="32542">和 S3</st> |'
- en: '| **<st c="32548">Backend</st>** |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| **<st c="32548">后端</st>** |'
- en: <st c="32556">1 VPC</st>
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="32556">1 VPC</st>
- en: <st c="32562">2</st> <st c="32565">public subnets</st>
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="32562">2</st> <st c="32565">公共子网</st>
- en: <st c="32579">2</st> <st c="32582">private subnets</st>
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="32579">2</st> <st c="32582">私有子网</st>
- en: <st c="32597">1 private</st> <st c="32608">EC2 instance</st>
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="32597">1 私有</st> <st c="32608">EC2 实例</st>
- en: <st c="32620">1 ALB</st>
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="32620">1 ALB</st>
- en: <st c="32626">1</st> <st c="32629">NAT gateway</st>
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="32626">1</st> <st c="32629">NAT 网关</st>
- en: <st c="32640">EC2 instance role with minimum permissions to interact with DynamoDB</st>
    <st c="32710">recipes table</st>
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="32640">EC2 实例角色，具有与 DynamoDB 交互的最小权限</st> <st c="32710">食谱表</st>
- en: '|'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: <st c="32723">1 VPC</st>
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="32723">1 VPC</st>
- en: <st c="32729">1</st> <st c="32732">public subnets</st>
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="32729">1</st> <st c="32732">公共子网</st>
- en: <st c="32746">1 public</st> <st c="32756">EC2 instance</st>
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="32746">1 公共</st> <st c="32756">EC2 实例</st>
- en: <st c="32768">EC2 instance role with minimum permissions to interact with DynamoDB</st>
    <st c="32838">recipes table</st>
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="32768">EC2 实例角色，具有与 DynamoDB 交互的最小权限</st> <st c="32838">食谱表</st>
- en: '|'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| **<st c="32851">Data store</st>** | <st c="32862">DynamoDB</st> | <st c="32871">DynamoDB</st>
    |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| **<st c="32851">数据存储</st>** | <st c="32862">DynamoDB</st> | <st c="32871">DynamoDB</st>
    |'
- en: <st c="32880">Table 3.2 – Resource creation for each CloudFormation template</st>
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="32880">表 3.2 – 每个 CloudFormation 模板的资源创建</st>
- en: <st c="32943">From the console, go to the CloudFormation service at</st> [<st
    c="32998">https://console.aws.amazon.com/cloudformation/</st>](https://console.aws.amazon.com/cloudformation/)<st
    c="33044">. If you are following option 1, ensure you choose the same region you
    did for the certificate in the drop-down region list located in</st> <st c="33178">the
    upper-right corner of the console, as shown in</st> *<st c="33230">Figure 3</st>**<st
    c="33238">.16</st>*<st c="33241">.</st>
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="32943">从控制台，进入 CloudFormation 服务，网址为</st> [<st c="32998">https://console.aws.amazon.com/cloudformation/</st>](https://console.aws.amazon.com/cloudformation/)<st
    c="33044">。如果你选择了选项 1，请确保在控制台右上角的下拉区域列表中选择与你为证书选择的相同区域，如</st> *<st c="33230">图
    3</st>**<st c="33238">.16</st>*<st c="33241">所示。</st>
- en: '![Figure 3.16 – Console access to CloudFormation](img/B22051_03_16.jpg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.16 – 控制台访问 CloudFormation](img/B22051_03_16.jpg)'
- en: <st c="33275">Figure 3.16 – Console access to CloudFormation</st>
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.16 – 控制台访问 CloudFormation
- en: <st c="33321">To proceed with stack creation, follow</st> <st c="33361">these
    steps:</st>
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 要继续堆栈创建，请按照以下步骤操作：
- en: <st c="33373">Click on</st> **<st c="33383">Create Stack</st>**<st c="33395">.</st>
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建堆栈**。
- en: <st c="33396">In the</st> **<st c="33404">Prerequisite – Prepare Template</st>**
    <st c="33435">section, select</st> **<st c="33452">Choose an</st>** **<st c="33462">existing
    template</st>**<st c="33479">.</st>
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**先决条件 – 准备模板**部分，选择**选择一个现有模板**。
- en: <st c="33480">In the</st> **<st c="33488">Specify Template</st>** <st c="33504">section,
    choose</st> **<st c="33521">Upload a</st>** **<st c="33530">template file</st>**<st
    c="33543">.</st>
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**指定模板**部分，选择**上传模板文件**。
- en: <st c="33544">Click on</st> **<st c="33554">Choose file</st>**<st c="33565">.</st>
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**选择文件**。
- en: <st c="33566">Select the template from the</st> `<st c="33596">chapter3/code/platform</st>`
    <st c="33618">folder according to the option you</st> <st c="33654">are following.</st>
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据您所遵循的选项，从`chapter3/code/platform`文件夹中选择模板。
- en: <st c="33668">Click</st> **<st c="33675">Next</st>**<st c="33679">.</st>
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**。
- en: <st c="33680">Your</st> **<st c="33686">Create Stack</st>** <st c="33698">window
    should look like</st> *<st c="33723">Figure 3</st>**<st c="33731">.17</st>*<st
    c="33734">.</st>
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 您的**创建堆栈**窗口应如下所示*图 3.17*。
- en: '![Figure 3.17 – The CloudFormation Create stack form](img/B22051_03_17.jpg)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.17 – CloudFormation 创建堆栈表单](img/B22051_03_17.jpg)'
- en: <st c="34810">Figure 3.17 – The CloudFormation Create stack form</st>
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.17 – CloudFormation 创建堆栈表单
- en: <st c="34860">The next step is</st> <st c="34878">to configure the parameters
    in your CloudFormation stack.</st> <st c="34936">Parameters allow you to create
    dynamic and environment-specific resource configurations, promoting better security
    and maintainability of your infrastructure as code.</st> <st c="35103">In</st>
    *<st c="35106">Table 3.3</st>*<st c="35115">, we explain the purpose of each parameter
    and which ones apply to your</st> <st c="35187">chosen option.</st>
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是配置 CloudFormation 堆栈中的参数。参数允许您创建动态且特定于环境的资源配置，从而提高基础设施作为代码的安全性和可维护性。在*表
    3.3*中，我们解释了每个参数的目的以及哪些适用于您选择的选项。
- en: '| **<st c="35201">Parameter</st>** | **<st c="35211">Description</st>** | **<st
    c="35223">Option 1</st>****<st c="35232">(HTTPS</st>** **<st c="35240">configured)</st>**
    | **<st c="35251">Option 2</st>****<st c="35260">(HTTP</st>** **<st c="35267">configured)</st>**
    |'
  id: totrans-242
  prefs: []
  type: TYPE_TB
  zh: '| **参数** | **描述** | **选项 1**（HTTPS 配置） | **选项 2**（HTTP 配置） |'
- en: '| --- | --- | --- | --- |'
  id: totrans-243
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `<st c="35278">InstanceType</st>` | <st c="35291">Choose the EC2 instance
    type from the four available options; the default is the free</st> <st c="35378">tier,</st>
    `<st c="35384">t3.micro</st>`<st c="35392">.</st> | <st c="35393">Yes</st> | <st
    c="35397">Yes</st> |'
  id: totrans-244
  prefs: []
  type: TYPE_TB
  zh: '| `<st c="35278">InstanceType</st>` | 从四个可用选项中选择 EC2 实例类型；默认是免费层，`t3.micro`。
    | 是 | 是 |'
- en: '| `<st c="35401">LatestAmiId</st>` | <st c="35413">The</st> **<st c="35418">Amazon
    Machine Image</st>** <st c="35438">(</st>**<st c="35440">AMI</st>**<st c="35443">)
    to be used in your EC2 instance.</st> <st c="35479">By default, it will use the
    most</st> <st c="35512">recent AMI.</st> | <st c="35523">Yes</st> | <st c="35527">Yes</st>
    |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
  zh: '| `<st c="35401">LatestAmiId</st>` | **Amazon 机器镜像**（**AMI**）将在您的 EC2 实例中使用。默认情况下，它将使用最新的
    AMI。 | 是 | 是 |'
- en: '| `<st c="35531">GitRepoURL</st>` | <st c="35542">The code repo URL (</st><st
    c="35562">e.g.,</st> [<st c="35569">https://github.com/packtpublishing/aws-cloud-projects</st>](https://github.com/packtpublishing/aws-cloud-projects)<st
    c="35622">).</st> | <st c="35625">Yes</st> | <st c="35629">Yes</st> |'
  id: totrans-246
  prefs: []
  type: TYPE_TB
  zh: '| `<st c="35531">GitRepoURL</st>` | <st c="35542">代码仓库的 URL（</st><st c="35562">例如，</st>
    [<st c="35569">https://github.com/packtpublishing/aws-cloud-projects</st>](https://github.com/packtpublishing/aws-cloud-projects)<st
    c="35622">）。</st> | <st c="35625">是</st> | <st c="35629">是</st> |'
- en: '| `<st c="35633">ALBCertificateArn</st>` | <st c="35651">The ARN of your recently</st>
    <st c="35677">created certificate.</st> | <st c="35697">Yes</st> | <st c="35701">No</st>
    |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| `<st c="35633">ALBCertificateArn</st>` | <st c="35651">你刚刚创建的证书的 ARN。</st>
    | <st c="35697">是</st> | <st c="35701">否</st> |'
- en: <st c="35704">Table 3.3 – CloudFormation template parameters</st>
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="35704">表 3.3 – CloudFormation 模板参数</st>
- en: <st c="35751">In</st> *<st c="35755">Figure 3</st>**<st c="35763">.18</st>*<st
    c="35766">, you</st> <st c="35771">can see an example of the expected state of
    the</st> `<st c="35907">ALBCertificateArn</st>` <st c="35924">does</st> <st c="35930">not
    exist.</st>
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="35751">在</st> *<st c="35755">图 3</st>**<st c="35763">.18</st>*<st c="35766">中，你</st>
    <st c="35771">可以看到预期状态的示例，其中</st> `<st c="35907">ALBCertificateArn</st>` <st c="35924">不存在。</st>
- en: '![Figure 3.18 – Stack parameters in CloudFormation](img/B22051_03_18.jpg)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.18 – CloudFormation 中的堆栈参数](img/B22051_03_18.jpg)'
- en: <st c="36545">Figure 3.18 – Stack parameters in CloudFormation</st>
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="36545">图 3.18 – CloudFormation 中的堆栈参数</st>
- en: <st c="36593">Proceed</st> <st c="36601">further, acknowledge the creation of</st>
    `<st c="36639">IAMPolicy</st>` <st c="36648">for controlling API access to the
    DynamoDB table, and</st> <st c="36703">click</st> **<st c="36709">Submit</st>**<st
    c="36715">.</st>
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="36593">继续操作，确认已创建</st> `<st c="36639">IAMPolicy</st>` <st c="36648">用于控制
    API 访问 DynamoDB 表，并</st> <st c="36703">点击</st> **<st c="36709">提交</st>**<st c="36715">。</st>
- en: '![Figure 3.19 – CloudFormation stack submission](img/B22051_03_19.jpg)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.19 – CloudFormation 堆栈提交](img/B22051_03_19.jpg)'
- en: <st c="37159">Figure 3.19 – CloudFormation stack submission</st>
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="37159">图 3.19 – CloudFormation 堆栈提交</st>
- en: <st c="37204">The resources for your application are now being provisioned.</st>
    <st c="37267">You need to wait until the stack status changes to</st> **<st c="37318">CREATE_COMPLETE</st>**<st
    c="37333">. You should be able to see a status like</st> *<st c="37375">Figure
    3</st>**<st c="37383">.20</st>*<st c="37386">.</st>
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="37204">你的应用程序的资源现在正在被配置。</st> <st c="37267">你需要等待，直到堆栈状态更改为</st> **<st
    c="37318">CREATE_COMPLETE</st>**<st c="37333">。你应该能够看到类似于</st> *<st c="37375">图
    3</st>**<st c="37383">.20</st>*<st c="37386">的状态。</st>
- en: '![Figure 3.20 – CloudFormation stack created status](img/B22051_03_20.jpg)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.20 – CloudFormation 堆栈创建状态](img/B22051_03_20.jpg)'
- en: <st c="37452">Figure 3.20 – CloudFormation stack created status</st>
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="37452">图 3.20 – CloudFormation 堆栈创建状态</st>
- en: <st c="37501">In our case, it</st> <st c="37518">took around 10 minutes for
    the stack to be deployed, but take into consideration that this</st> <st c="37609">may
    vary.</st>
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="37501">在我们的例子中，</st> <st c="37518">堆栈部署大约花了 10 分钟，但请注意，这</st> <st c="37609">可能会有所不同。</st>
- en: <st c="37618">Section 3 – Additional configurations (option 1 only)</st>
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="37618">第 3 部分 – 附加配置（仅选项 1）</st>
- en: <st c="37672">You</st> <st c="37677">are almost there!</st> <st c="37695">You
    just need one additional configuration to have your application up and running,
    which is the creation of a subdomain record in your hosted zone pointing to the
    ALB.</st> <st c="37864">This will also enable a friendly API name such as</st>
    `<st c="37914">api.<your_domain></st>`<st c="37931">. Follow</st> <st c="37940">these
    steps:</st>
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="37672">你</st> <st c="37677">快完成了！</st> <st c="37695">你只需要进行一个附加配置，就能让你的应用运行起来，那就是在托管区中创建一个指向
    ALB 的子域记录。</st> <st c="37864">这还将启用一个友好的 API 名称，例如</st> `<st c="37914">api.<your_domain></st>`<st
    c="37931">。按照以下步骤操作：</st>
- en: <st c="37952">Go to the</st> **<st c="37963">Route</st>** **<st c="37969">53</st>**
    <st c="37971">console.</st>
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="37952">前往</st> **<st c="37963">Route</st>** **<st c="37969">53</st>**
    <st c="37971">控制台。</st>
- en: <st c="37980">Select your domain’s</st> <st c="38002">hosted zone.</st>
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="37980">选择你的域名的</st> <st c="38002">托管区。</st>
- en: <st c="38014">Click on</st> **<st c="38024">Create record</st>**<st c="38037">.</st>
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="38014">点击</st> **<st c="38024">创建记录</st>**<st c="38037">。</st>
- en: <st c="38038">In the</st> `<st c="38129">api</st>`<st c="38132">).</st>
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="38038">进入</st> `<st c="38129">api</st>`<st c="38132">).</st>
- en: <st c="38135">For</st> **<st c="38140">Record type</st>**<st c="38151">, select</st>
    **<st c="38160">A -</st>** **<st c="38164">IPv4 address</st>**<st c="38176">.</st>
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="38135">对于</st> **<st c="38140">记录类型</st>**<st c="38151">，选择</st> **<st
    c="38160">A -</st>** **<st c="38164">IPv4 地址</st>**<st c="38176">。</st>
- en: <st c="38177">Click on the toggle under</st> **<st c="38204">Record name</st>**
    <st c="38215">to</st> <st c="38219">enable</st> **<st c="38226">Alias</st>**<st
    c="38231">.</st>
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="38177">点击</st> **<st c="38204">记录名称</st>** <st c="38215">下的切换按钮</st>
    <st c="38219">启用</st> **<st c="38226">别名</st>**<st c="38231">。</st>
- en: <st c="38232">In the</st> **<st c="38240">Route traffic to</st>** <st c="38256">dropdown,
    select</st> **<st c="38274">Alias to Application and Classic</st>** **<st c="38307">Load
    Balancer</st>**<st c="38320">.</st>
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="38232">在</st> **<st c="38240">将流量路由到</st>** <st c="38256">下拉菜单中，选择</st>
    **<st c="38274">应用程序和经典的别名</st>** **<st c="38307">负载均衡器</st>**<st c="38320">。</st>
- en: <st c="38321">Choose the AWS region where your application</st> <st c="38367">is
    deployed.</st>
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="38321">选择你的应用程序</st> <st c="38367">部署的AWS区域。</st>
- en: <st c="38379">In the</st> **<st c="38387">Choose Load Balancer</st>** <st c="38407">section,
    select the ALB associated with your</st> <st c="38453">CloudFormation stack.</st>
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="38379">在</st> **<st c="38387">选择负载均衡器</st>** <st c="38407">部分，选择与你的</st>
    <st c="38453">CloudFormation堆栈关联的ALB。</st>
- en: <st c="38474">If</st> <st c="38478">you have multiple load balancers in the
    selected region, you can find the correct load balancer DNS name by checking the</st>
    **<st c="38599">Outputs</st>** <st c="38606">section of your CloudFormation stack
    in the</st> <st c="38651">CloudFormation console.</st>
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="38474">如果</st> <st c="38478">你在所选区域有多个负载均衡器，你可以通过检查</st> **<st c="38599">CloudFormation堆栈的输出</st>**
    <st c="38606">部分来找到正确的负载均衡器DNS名称，在</st> <st c="38651">CloudFormation控制台中查看。</st>
- en: <st c="38674">Click the</st> **<st c="38685">Create records</st>** <st c="38699">button
    to save the</st> <st c="38719">new record.</st>
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="38674">点击</st> **<st c="38685">创建记录</st>** <st c="38699">按钮保存</st> <st
    c="38719">新记录。</st>
- en: <st c="38730">Your record creation form should look like</st> *<st c="38774">Figure
    3</st>**<st c="38782">.21</st>*<st c="38785">.</st>
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="38730">你的记录创建表单应该像</st> *<st c="38774">图3</st>**<st c="38782">.21</st>*<st
    c="38785">。</st>
- en: '![Figure 3.21 – The Route 53 alias record for your ALB](img/B22051_03_21.jpg)'
  id: totrans-273
  prefs: []
  type: TYPE_IMG
  zh: '![图3.21 – 你的ALB的Route 53别名记录](img/B22051_03_21.jpg)'
- en: <st c="39316">Figure 3.21 – The Route 53 alias record for your ALB</st>
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="39316">图3.21 – 你的ALB的Route 53别名记录</st>
- en: <st c="39368">Before you move to the next section, take note of the DNS record
    you created, as you will need to use it in the</st> <st c="39481">next section.</st>
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="39368">在进入下一部分之前，记下你创建的DNS记录，因为你将在</st> <st c="39481">下一部分使用它。</st>
- en: <st c="39494">Section 4 – Frontend configuration and deployment</st>
  id: totrans-276
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="39494">第4节 – 前端配置与部署</st>
- en: <st c="39544">The</st> <st c="39549">CloudFormation stack has already deployed
    the required services for the frontend, and the only pending step is to copy the
    application files to S3\.</st> <st c="39697">But prior to that, you will need
    to modify some configurations in your application.</st> <st c="39781">Since React
    development is not the primary focus of this book, we’ve created the config file
    with parameters to customize</st> <st c="39903">your application.</st>
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="39544">CloudFormation堆栈已经部署了前端所需的服务，唯一剩下的步骤是将应用程序文件复制到S3\。</st> <st c="39697">但在此之前，你需要修改一些应用程序中的配置。</st>
    <st c="39781">由于React开发不是本书的主要内容，我们已经创建了包含参数的配置文件，以便定制</st> <st c="39903">你的应用程序。</st>
- en: <st c="39920">Navigate to the</st> `<st c="39937">…/frontend/src/configs/configs.tsx</st>`
    <st c="39971">file within the project folder, where the configuration file</st>
    <st c="40033">is located.</st>
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="39920">导航到项目文件夹中的</st> `<st c="39937">…/frontend/src/configs/configs.tsx</st>`
    <st c="39971">文件，配置文件</st> <st c="40033">位于此处。</st>
- en: <st c="40044">The config file is composed of seven</st> <st c="40082">configuration
    variables:</st>
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="40044">配置文件由七个</st> <st c="40082">配置变量组成：</st>
- en: '`<st c="40106">CONFIG_MAX_INGREDIENTS</st>`<st c="40129">: Max ingredients
    in</st> <st c="40151">a recipe</st>'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="40106">CONFIG_MAX_INGREDIENTS</st>`<st c="40129">: 一份食谱中最大</st> <st
    c="40151">配料数</st>'
- en: '`<st c="40159">CONFIG_MAX_STEPS</st>`<st c="40176">: Max steps in</st> <st
    c="40192">a recipe</st>'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="40159">CONFIG_MAX_STEPS</st>`<st c="40176">: 一份食谱中的最大</st> <st c="40192">步骤数</st>'
- en: '`<st c="40200">CONFIG_MAX_RECIPES</st>`<st c="40219">: Max</st> <st c="40226">recipes
    supported</st>'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="40200">CONFIG_MAX_RECIPES</st>`<st c="40219">: 支持的最大</st> <st c="40226">食谱数量</st>'
- en: '`<st c="40243">CONFIG_USER_PAGE_TITLE</st>`<st c="40266">: Title for</st> <st
    c="40279">user page</st>'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="40243">CONFIG_USER_PAGE_TITLE</st>`<st c="40266">: 用户页面的标题</st> <st
    c="40279">用户页面</st>'
- en: '`<st c="40288">CONFIG_ADMIN_PAGE_TITLE</st>`<st c="40312">: Title for</st>
    <st c="40325">admin page</st>'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="40288">CONFIG_ADMIN_PAGE_TITLE</st>`<st c="40312">: 管理员页面的标题</st> <st
    c="40325">管理员页面</st>'
- en: '`<st c="40335">CONFIG_appConfig</st>`<st c="40352">: Object with page title
    and icon (icons</st> <st c="40394">in</st> `<st c="40397">/frontend/public/</st>`<st
    c="40414">)</st>'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="40335">CONFIG_appConfig</st>`<st c="40352">：包含页面标题和图标的对象（图标位于</st>
    `<st c="40397">/frontend/public/</st>`<st c="40414">）</st>'
- en: '`<st c="40416">API_URL</st>`<st c="40423">:</st> <st c="40426">API endpoint</st>'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="40416">API_URL</st>`<st c="40423">:</st> <st c="40426">API 端点</st>'
- en: '![Figure 3.22 – Example of a configuration file (config.tsx)](img/B22051_03_22.jpg)'
  id: totrans-287
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.22 – 配置文件示例 (config.tsx)](img/B22051_03_22.jpg)'
- en: <st c="40872">Figure 3.22 – Example of a configuration file (config.tsx)</st>
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="40872">图 3.22 – 配置文件示例 (config.tsx)</st>
- en: <st c="40930">All the configs besides</st> `<st c="40955">API_URL</st>` <st
    c="40962">are optional and serve solely to apply small application customizations,
    so we will focus now on the API endpoint configuration.</st> `<st c="41092">API_URL</st>`<st
    c="41099">, as the name</st> <st c="41113">suggests, is the endpoint used to send
    requests, and depending on the option you are following, you need to get this
    value from</st> <st c="41241">different places.</st>
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="40930">除了</st> `<st c="40955">API_URL</st>` <st c="40962">之外，所有配置项都是可选的，仅用于应用程序的微小定制，因此我们现在将重点关注
    API 端点的配置。</st> `<st c="41092">API_URL</st>`<st c="41099">，顾名思义，是用于发送请求的端点，根据您选择的选项，您需要从</st>
    <st c="41241">不同的位置获取此值。</st>
- en: <st c="41258">Solution for option 1</st>
  id: totrans-290
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="41258">选项 1 的解决方案</st>
- en: <st c="41280">In this option, you should have by now created the Route 53 record
    with an alias record for your ALB, and that’s the value you should use for the</st>
    `<st c="41427">API_URL</st>` <st c="41434">parameter.</st>
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="41280">在此选项中，您现在应该已经为您的 ALB 创建了 Route 53 记录，并且这是您应该为</st> `<st c="41427">API_URL</st>`
    <st c="41434">参数使用的值。</st>
- en: <st c="41445">For example, in our case, as per</st> *<st c="41479">Figure 3</st>**<st
    c="41487">.22</st>*<st c="41490">, we created an</st> `<st c="41506">api.awscloudprojects.site</st>`
    <st c="41531">record, so</st> `<st c="41543">API_URL</st>` <st c="41550">should
    be set to</st> `<st c="41568">https://api.awscloudprojects.site</st>` <st c="41601">(don’t
    forget to include</st> <st c="41627">the protocol).</st>
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="41445">例如，在我们的案例中，按照</st> *<st c="41479">图 3</st>**<st c="41487">.22</st>*<st
    c="41490">，我们创建了一个</st> `<st c="41506">api.awscloudprojects.site</st>` <st c="41531">记录，因此</st>
    `<st c="41543">API_URL</st>` <st c="41550">应设置为</st> `<st c="41568">https://api.awscloudprojects.site</st>`
    <st c="41601">(不要忘记包含</st> <st c="41627">协议部分)</st>
- en: <st c="41641">Solution for option 2</st>
  id: totrans-293
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="41641">选项 2 的解决方案</st>
- en: <st c="41663">If you are following this option, it means you don’t have a DNS
    record created for your API, nor an ALB provisioned.</st> <st c="41781">Moreover,
    because you didn’t set up HTTPS, the protocol used to access your API is HTTP.</st>
    <st c="41870">So, in this case, you need to provide the EC2</st> <st c="41916">public
    DNS.</st>
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="41663">如果您选择这个选项，这意味着您没有为您的 API 创建 DNS 记录，也没有配置 ALB。</st> <st c="41781">此外，由于您没有设置
    HTTPS，访问 API 使用的协议是 HTTP。</st> <st c="41870">因此，在这种情况下，您需要提供 EC2</st> <st c="41916">公共
    DNS。</st>
- en: <st c="41927">You can access the EC2 running instances through</st> [<st c="41977">https://console.aws.amazon.com/ec2/home?-Instances:instanceState=running</st>](https://console.aws.amazon.com/ec2/home?-Instances:instanceState=running)<st
    c="42049">, but optionally, you can access the DNS of the newly deployed instance
    in the CloudFormation</st> `<st c="42180">APIDNSName</st>` <st c="42190">output.</st>
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="41927">您可以通过以下链接访问正在运行的 EC2 实例</st> [<st c="41977">https://console.aws.amazon.com/ec2/home?-Instances:instanceState=running</st>](https://console.aws.amazon.com/ec2/home?-Instances:instanceState=running)<st
    c="42049">，但您也可以选择通过 CloudFormation 输出中的</st> `<st c="42180">APIDNSName</st>`
    <st c="42190">访问新部署实例的 DNS。</st>
- en: <st c="42198">After setting the</st> `<st c="42217">API_URL</st>` <st c="42224">config,
    you can save the file and proceed to the build process, which involves several
    steps to convert the code into a production-ready bundle that can be served to
    web browsers.</st> <st c="42405">In our example, we used</st> `<st c="42429">npm</st>`
    <st c="42432">as the package manager, so you need to run the</st> <st c="42480">following
    command:</st>
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="42198">在设置了</st> `<st c="42217">API_URL</st>` <st c="42224">配置后，您可以保存文件并继续构建过程，这个过程包括几个步骤，将代码转换为可用于网页浏览器的生产就绪的打包文件。</st>
    <st c="42405">在我们的示例中，我们使用了</st> `<st c="42429">npm</st>` <st c="42432">作为包管理器，因此您需要运行以下命令：</st>
- en: '[PRE1]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: <st c="42529">The result is a folder with the files needed to be copied to our
    S3 buckets.</st> <st c="42607">The folder name may vary but it is typically</st>
    `<st c="42652">build/</st>` <st c="42658">or</st> `<st c="42662">dist/</st>` <st
    c="42667">and is created at the frontend root, as you can see in</st> *<st c="42723">Figure
    3</st>**<st c="42731">.23</st>*<st c="42734">.</st>
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="42529">结果是一个包含需要复制到 S3 存储桶中的文件的文件夹。</st> <st c="42607">文件夹名称可能会有所不同，但通常为</st>
    `<st c="42652">build/</st>` <st c="42658">或</st> `<st c="42662">dist/</st>` <st
    c="42667">，并且创建在前端根目录，如</st> *<st c="42723">图 3</st>**<st c="42731">.23</st>*<st
    c="42734">所示。</st>
- en: '![Figure 3.23 – Folder structure after build command](img/B22051_03_23.jpg)'
  id: totrans-299
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.23 – 构建命令后的文件夹结构](img/B22051_03_23.jpg)'
- en: <st c="42794">Figure 3.23 – Folder structure after build command</st>
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="42794">图 3.23 – 构建命令后的文件夹结构</st>
- en: <st c="42844">Now, the last</st> <st c="42859">step is to copy the build folder
    to S3, with the</st> <st c="42908">following instructions:</st>
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="42844">现在，最后一步是将构建文件夹复制到 S3，按照以下说明操作：</st>
- en: '`<st c="43093">frontend-chapter-3-</st>` <st c="43112">followed by a random
    string of characters (e.g.,</st> `<st c="43162">frontend-chapter-3-XXXXX</st>`<st
    c="43186">).</st> <st c="43190">Click on its name to</st> <st c="43211">open it.</st>'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<st c="43093">frontend-chapter-3-</st>` <st c="43112">后面跟着一串随机字符（例如，</st>
    `<st c="43162">frontend-chapter-3-XXXXX</st>`<st c="43186">）。</st> <st c="43190">点击其名称以</st>
    <st c="43211">打开它。</st>'
- en: <st c="43219">Add files from the</st> `<st c="43239">dist</st>` <st c="43243">folder.</st>
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="43219">从</st> `<st c="43239">dist</st>` <st c="43243">文件夹添加文件。</st>
- en: <st c="43251">Inside the S3 bucket, click on the</st> **<st c="43287">Upload</st>**
    <st c="43293">button.</st> <st c="43302">This will allow you to upload files from
    your local machine to the</st> <st c="43369">S3 bucket.</st>
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="43251">在 S3 存储桶中，点击</st> **<st c="43287">上传</st>** <st c="43293">按钮。</st>
    <st c="43302">这将允许您从本地机器上传文件到</st> <st c="43369">S3 存储桶。</st>
- en: '`<st c="43458">dist</st>` <st c="43462">folder on your local machine, select
    all the files inside the folder, and confirm.</st> <st c="43546">Next, on the
    S3 console, click on</st> `<st c="43603">dist</st>` <st c="43607">folder on your
    local machine, select the</st> `<st c="43649">assets</st>` <st c="43655">folder,</st>
    <st c="43664">and confirm.</st>'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="43458">dist</st>` <st c="43462">文件夹在您的本地机器上，选择该文件夹中的所有文件并确认。</st> <st
    c="43546">接下来，在 S3 控制台中，点击</st> `<st c="43603">dist</st>` <st c="43607">文件夹，选择</st>
    `<st c="43649">assets</st>` <st c="43655">文件夹，</st> <st c="43664">并确认。</st>'
- en: <st c="43676">Optionally, you can just drag the content to the S3 window, but
    despite the method you use, your S3 upload window should look like</st> *<st c="43808">Figure
    3</st>**<st c="43816">.24</st>*<st c="43819">.</st>
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="43676">可选择性地，您可以直接将内容拖放到 S3 窗口，但无论您使用哪种方法，您的 S3 上传窗口应该像</st> *<st c="43808">图
    3</st>**<st c="43816">.24</st>*<st c="43819">所示。</st>
- en: '![Figure 3.24 – Frontend files uploaded to S3](img/B22051_03_24.jpg)'
  id: totrans-307
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.24 – 上传到 S3 的前端文件](img/B22051_03_24.jpg)'
- en: <st c="44189">Figure 3.24 – Frontend files uploaded to S3</st>
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="44189">图 3.24 – 上传到 S3 的前端文件</st>
- en: <st c="44232">Note</st>
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="44232">注意</st>
- en: <st c="44237">The filenames are auto-generated by the build process, so probably,
    your names are different than the ones in the</st> <st c="44352">preceding figure.</st>
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="44237">文件名是由构建过程自动生成的，因此您的文件名可能与</st> <st c="44352">前面的图示不同。</st>
- en: <st c="44369">Just make</st> <st c="44379">sure that you have the</st> <st c="44403">following
    files:</st>
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="44369">请确保您有以下文件：</st>
- en: '`<st c="44419">i</st>``<st c="44421">ndex.html</st>`'
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="44419">i</st>``<st c="44421">ndex.html</st>`'
- en: '`<st c="44430">i</st>``<st c="44432">ndex-XXXXXX.css</st>`'
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="44430">i</st>``<st c="44432">ndex-XXXXXX.css</st>`'
- en: '`<st c="44447">i</st>``<st c="44449">ndex-XXXXXX.js</st>`'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="44447">i</st>``<st c="44449">ndex-XXXXXX.js</st>`'
- en: <st c="44463">Static files you may have included in your application, for</st>
    <st c="44524">example, images</st>
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="44463">您可能在应用程序中包含的静态文件，例如图像</st>
- en: <st c="44539">After that, at the bottom, click</st> <st c="44573">on</st> **<st
    c="44576">Upload</st>**<st c="44582">.</st>
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="44539">之后，在底部点击</st> <st c="44573">点击</st> **<st c="44576">上传</st>**<st
    c="44582">。</st>
- en: <st c="44583">You’ve just finalized all the deployment and configuration of
    your application, and now is the time to</st> <st c="44687">test it.</st>
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="44583">您刚刚完成了所有的部署和配置，现在是时候</st> <st c="44687">进行测试了。</st>
- en: <st c="44695">Section 5 – Testing and exploring your application</st>
  id: totrans-318
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="44695">第 5 部分 – 测试和探索您的应用程序</st>
- en: '<st c="44746">This last</st> <st c="44757">section is all about testing and
    exploring your application, and</st> <st c="44822">we divided it into two parts:
    the backend and the frontend.</st> <st c="44882">Let’s start with</st> <st c="44899">the
    backend!</st>'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="44746">这一最后</st> <st c="44757">部分专注于测试和探索你的应用程序，我们将其分为两部分：后端和前端。</st>
    <st c="44822">让我们从</st> <st c="44899">后端开始！</st>
- en: <st c="44911">Testing and exploring the backend</st>
  id: totrans-320
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="44911">测试和探索后端</st>
- en: <st c="44945">By now, you</st> <st c="44957">should have an API running in an
    EC2 instance, and once again, depending on the option you’ve chosen, you need
    to use different URLs for testing and the value you’ve used for the</st> `<st
    c="45137">API_URL</st>` <st c="45144">parameter in the</st> `<st c="45162">config.tsx</st>`
    <st c="45172">file you updated in the previous section.</st> <st c="45215">To
    test your API, you can send a request to one of the endpoints, and if everything
    is working properly, you should get a response and a success</st> <st c="45360">status
    code.</st>
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="44945">到现在为止，你</st> <st c="44957">应该已经在 EC2 实例中运行了一个 API，再次强调，根据你选择的选项，你需要使用不同的
    URL 进行测试，以及你在上一节更新的</st> `<st c="45137">API_URL</st>` <st c="45144">参数所使用的值，在</st>
    `<st c="45162">config.tsx</st>` <st c="45172">文件中。</st> <st c="45215">要测试你的 API，你可以向其中一个端点发送请求，如果一切正常，你应该会收到响应和一个成功的</st>
    <st c="45360">状态码。</st>
- en: <st c="45372">To perform the tests, you</st> <st c="45399">can define your endpoint
    as</st> `<st c="45427">{API_URL}/{ROUTE}</st>`<st c="45444">, where</st> `<st
    c="45452">API_URL</st>` <st c="45459">is the URL you used in the</st> `<st c="45487">config.tsx</st>`
    <st c="45497">file in the previous section.</st> <st c="45528">Here,</st> `<st
    c="45534">ROUTE</st>` <st c="45539">is the specific route you want</st> <st c="45571">to
    reach.</st>
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="45372">要执行测试，你</st> <st c="45399">可以将端点定义为</st> `<st c="45427">{API_URL}/{ROUTE}</st>`<st
    c="45444">，其中</st> `<st c="45452">API_URL</st>` <st c="45459">是你在上一节的</st> `<st
    c="45487">config.tsx</st>` <st c="45497">文件中使用的 URL。</st> <st c="45528">这里，</st>
    `<st c="45534">ROUTE</st>` <st c="45539">是你想要访问的特定路由。</st>
- en: <st c="45580">There are different tools to perform the requests, and it is up
    to you to choose the tool you want to use, but if you prefer a visual tool, you
    can use, for example, Postman, or instead go with a programmatic approach by running
    a</st> `<st c="45812">curl</st>` <st c="45816">command.</st>
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="45580">有许多不同的工具可以执行请求，你可以选择你喜欢的工具，但是如果你更喜欢视觉化工具，你可以使用，例如 Postman，或者选择通过运行一个</st>
    `<st c="45812">curl</st>` <st c="45816">命令来采用编程方法。</st>
- en: <st c="45825">In the following code, you can see an example of a</st> `<st c="45877">curl</st>`
    <st c="45881">command issued to our API endpoint at the</st> `<st c="45924">/recipes</st>`
    <st c="45932">route to get the list of</st> <st c="45958">recipes created:</st>
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="45825">在以下代码中，你可以看到一个向我们 API 端点发出的</st> `<st c="45877">curl</st>` <st
    c="45881">命令示例，发往</st> `<st c="45924">/recipes</st>` <st c="45932">路由，用于获取已创建的</st>
    <st c="45958">食谱列表：</st>
- en: '[PRE2]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: <st c="46160">Regardless of the method you use, if you try to do a</st> `<st
    c="46214">GET</st>` <st c="46217">request to the</st> `<st c="46233">/recipes</st>`
    <st c="46241">endpoint, you should get an empty object because you haven’t created
    any recipe yet, and a</st> `<st c="46333">200</st>` <st c="46336">status code
    of success, which proves the functioning of</st> <st c="46393">your API.</st>
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="46160">无论你使用哪种方法，如果你尝试对</st> `<st c="46214">GET</st>` <st c="46217">请求</st>
    `<st c="46233">/recipes</st>` <st c="46241">端点，你应该会收到一个空对象，因为你还没有创建任何食谱，并且会收到一个</st>
    `<st c="46333">200</st>` <st c="46336">成功状态码，这证明了</st> <st c="46393">你的 API 正常工作。</st>
- en: <st c="46402">Testing and exploring the frontend</st>
  id: totrans-327
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="46402">测试和探索前端</st>
- en: <st c="46437">For the</st> <st c="46446">final test, you will explore the frontend
    application and ensure all the functionalities you defined in the</st> `<st c="46554">requirements</st>`
    <st c="46566">section</st> <st c="46574">work</st> <st c="46580">as intended.</st>
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="46437">对于最终的测试，你将探索前端应用程序，并确保你在</st> `<st c="46554">需求</st>` <st c="46566">部分中定义的所有功能</st>
    <st c="46574">按预期工作。</st>
- en: <st c="46592">To access your frontend, you need to do</st> <st c="46633">the
    following:</st>
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="46592">要访问你的前端，你需要进行以下操作：</st>
- en: <st c="46647">Go to the</st> **<st c="46658">CloudFront</st>** <st c="46668">console.</st>
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="46647">进入</st> **<st c="46658">CloudFront</st>** <st c="46668">控制台。</st>
- en: <st c="46677">Select the distribution you created with the CloudFormation stack.</st>
    <st c="46745">(If you have more than one distribution and you are not sure which
    one is the one created by the</st> <st c="46842">stack, open the CloudFormation</st>
    <st c="46873">service, go to the stack you created earlier, and check the output
    value</st> <st c="46946">for</st> `<st c="46950">CloudFrontDistributionId</st>`<st
    c="46974">.)</st>
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="46677">选择您用CloudFormation堆栈创建的分发。</st> <st c="46745">（如果您有多个分发，并且不确定哪一个是由</st>
    <st c="46842">堆栈创建的，请打开CloudFormation</st> <st c="46873">服务，转到您之前创建的堆栈，并检查输出值</st>
    `<st c="46950">CloudFrontDistributionId</st>`<st c="46974">）。</st>
- en: <st c="46976">Copy the URL of the distribution (it should follow the</st> <st
    c="47032">structure</st> `<st c="47042">https://XXXXXX.cloudfront.net/</st>`<st
    c="47072">).</st>
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="46976">复制分发的URL（它应该遵循</st> <st c="47032">结构</st> `<st c="47042">https://XXXXXX.cloudfront.net/</st>`<st
    c="47072">）。</st>
- en: <st c="47075">If you prefer, you can also get this value from the</st> `<st
    c="47188">CloudFrontDistributionUrl</st>`<st c="47213">.</st>
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="47075">如果您愿意，您也可以从</st> `<st c="47188">CloudFrontDistributionUrl</st>`<st
    c="47213">中获取该值。</st>
- en: <st c="47214">If you copy and paste the URL into the browser, you should be
    able to access your newly created application and navigate between the</st> **<st
    c="47348">Users</st>** <st c="47353">and</st> **<st c="47358">Admin</st>** <st
    c="47363">pages.</st> <st c="47371">If you try to access the</st> **<st c="47396">Admin</st>**
    <st c="47401">page, you should get the same experience as</st> *<st c="47446">Figure
    3</st>**<st c="47454">.25</st>*<st c="47457">.</st>
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="47214">如果您复制并粘贴URL到浏览器中，您应该能够访问您新创建的应用程序并在</st> **<st c="47348">用户</st>**
    <st c="47353">和</st> **<st c="47358">管理员</st>** <st c="47363">页面之间导航。</st> <st
    c="47371">如果您尝试访问</st> **<st c="47396">管理员</st>** <st c="47401">页面，您应该获得与</st>
    *<st c="47446">图 3</st>**<st c="47454">.25</st>*<st c="47457">相同的体验。</st>
- en: '![Figure 3.25 – The Recipe Sharing Application Admin page](img/B22051_03_25.jpg)'
  id: totrans-335
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.25 – 食谱分享应用程序管理页面](img/B22051_03_25.jpg)'
- en: <st c="47616">Figure 3.25 – The Recipe Sharing Application Admin page</st>
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="47616">图 3.25 – 食谱分享应用程序管理页面</st>
- en: <st c="47671">Because you have not created any recipes yet, the list should
    be empty, so try creating some recipes, and try to see the difference experience
    between the</st> **<st c="47827">Admin</st>** <st c="47832">and</st> **<st c="47837">User</st>**
    <st c="47841">pages to ensure the right functional requirements</st> <st c="47892">were
    fulfilled.</st>
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="47671">因为您还没有创建任何食谱，所以列表应该是空的，请尝试创建一些食谱，并尝试查看</st> **<st c="47827">管理员</st>**
    <st c="47832">和</st> **<st c="47837">用户</st>** <st c="47841">页面之间的体验，以确保满足正确的功能需求。</st>
    <st c="47892">。</st>
- en: <st c="47907">If you followed option 1, you should be able to see the recipes
    being added, deleted, and listed as expected, but for option 2, there are some
    additional steps</st> <st c="48068">to perform.</st>
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="47907">如果您选择了选项1，您应该能够看到预期的添加、删除和列出的食谱，但对于选项2，还有一些额外的步骤</st> <st c="48068">需要执行。</st>
- en: <st c="48079">Enabling HTTP communication in your browser (option 2 only)</st>
  id: totrans-339
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="48079">在浏览器中启用HTTP通信（仅限选项2）</st>
- en: <st c="48139">Despite</st> <st c="48148">security being a constant concern,
    modern browsers already bring protections to make it easier to maintain a secure
    posture on the internet.</st> <st c="48289">In this example, we are using Google
    Chrome, but this also applies to other browsers, such as</st> <st c="48383">Mozilla
    Firefox.</st>
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="48139">尽管</st> <st c="48148">安全性始终是一个关注点，现代浏览器已经提供了保护措施，使在互联网上保持安全姿态更加容易。</st>
    <st c="48289">在本例中，我们使用的是Google Chrome，但其他浏览器如</st> <st c="48383">Mozilla Firefox</st>
    <st c="48390">也适用。</st>
- en: <st c="48399">If you look closer, on the left of our URL there is an alert saying</st>
    **<st c="48468">Not Secure</st>**<st c="48478">, as in</st> *<st c="48486">Figure
    3</st>**<st c="48494">.26</st>*<st c="48497">.</st>
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="48399">如果您仔细观察，在我们的URL左侧有一个警告显示为</st> **<st c="48468">不安全</st>**<st c="48478">，如</st>
    *<st c="48486">图 3</st>**<st c="48494">.26</st>*<st c="48497">。</st>
- en: '![Figure 3.26 – Recipe Sharing Application Not Secure warning](img/B22051_03_26.jpg)'
  id: totrans-342
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.26 – 食谱分享应用程序未安全警告](img/B22051_03_26.jpg)'
- en: <st c="48582">Figure 3.26 – Recipe Sharing Application Not Secure warning</st>
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="48582">图 3.26 – 食谱分享应用程序未安全警告</st>
- en: <st c="48641">This happens because HTTP is not a secure protocol, and your application
    is trying to make HTTP requests to your API.</st> <st c="48760">Moreover, your
    application running in a CloudFront domain is making requests to a different domain
    over HTTP (an EC2 instance domain), which commonly</st> <st c="48910">looks suspicious.</st>
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 之所以会发生这种情况，是因为 HTTP 不是一个安全协议，而你的应用正在尝试对你的 API 发出 HTTP 请求。</st> <st c="48760">此外，你的应用在
    CloudFront 域中运行，正在通过 HTTP 向不同的域发出请求（一个 EC2 实例域），这通常</st> <st c="48910">看起来很可疑。</st>
- en: <st c="48927">For deeper troubleshooting, you can open the console inside the
    developer tools, and see that we are getting the</st> <st c="49041">following
    error:</st>
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 如需深入故障排除，你可以在开发者工具中打开控制台，并查看我们收到的</st> <st c="49041">以下错误：</st>
- en: '![Figure 3.27 – Console error example](img/B22051_03_27.jpg)'
  id: totrans-346
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.27 – 控制台错误示例](img/B22051_03_27.jpg)'
- en: <st c="49384">Figure 3.27 – Console error example</st>
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.27 – 控制台错误示例
- en: <st c="49419">Only for demo purposes, you can instruct your bro</st><st c="49469">wser
    to overpass its default behaviors and accept HTTP connections, but it is very
    important to highlight that while it may serve for this exercise, it is not a
    best practice and should not be</st> <st c="49663">done regularly.</st>
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 仅限演示用途，你可以指示浏览器绕过其默认行为并接受 HTTP 连接，但需要强调的是，虽然这在本次练习中可以使用，但这并不是最佳实践，**不应** <st
    c="49663">常规执行此操作。</st>
- en: <st c="49678">If you want to skip this blocker, you can do</st> <st c="49724">the
    following:</st>
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想跳过这个阻塞，你可以进行如下操作：</st> <st c="49724">以下操作：</st>
- en: <st c="49738">Click on the red</st> **<st c="49756">Not Secure</st>** <st c="49766">notice/</st>**<st
    c="49774">View site information</st>** <st c="49796">button on the left of the</st>
    <st c="49823">URL bar.</st>
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击红色的**<st c="49756">不安全</st>** <st c="49766">通知/</st>**<st c="49774">查看网站信息</st>**
    <st c="49796">按钮，位于</st> <st c="49823">URL 地址栏的左侧。</st>
- en: <st c="49831">Go to the</st> <st c="49842">site’s</st> **<st c="49849">Settings</st>**<st
    c="49857">.</st>
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到网站的**<st c="49849">设置</st>**<st c="49857">。</st>
- en: <st c="49858">Scroll down to</st> **<st c="49874">Insecure content</st>**<st
    c="49890">.</st>
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动到**<st c="49874">不安全内容</st>**<st c="49890">。</st>
- en: <st c="49891">Change from</st> **<st c="49904">Block (Default)</st>** <st c="49919">to</st>
    **<st c="49923">Allow</st>**<st c="49928">.</st>
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**<st c="49904">阻止（默认）</st>** <st c="49919">更改为</st> **<st c="49923">允许</st>**<st
    c="49928">。</st>
- en: <st c="49929">These instructions</st> <st c="49948">apply to Google Chrome and
    may vary depending on the version or the browser used.</st> <st c="50031">After
    that, your application should work properly and requests will</st> <st c="50099">be
    authorized.</st>
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 这些指示适用于 Google Chrome，可能会根据版本或使用的浏览器有所不同。<st c="50031">完成后，你的应用程序应该能够正常工作，请求将</st>
    <st c="50099">被授权。</st>
- en: <st c="50113">Testing and exploring your DynamoDB table</st>
  id: totrans-355
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试并探索你的 DynamoDB 表
- en: <st c="50155">The last part to</st> <st c="50172">test is the integration between</st>
    <st c="50204">your API and your data layer in DynamoDB, where your recipe data
    is stored.</st> <st c="50281">If you want to explore resource creation and deletion,
    follow</st> <st c="50343">these steps:</st>
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是测试你 API 和 DynamoDB 中的数据层之间的集成，你的食谱数据存储在这里。</st> <st c="50281">如果你想探索资源的创建和删除，请按照</st>
    <st c="50343">以下步骤操作：</st>
- en: <st c="50355">Go to the</st> **<st c="50366">DynamoDB</st>** <st c="50374">page
    in your</st> <st c="50388">AWS account.</st>
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到你的**<st c="50366">DynamoDB</st>** <st c="50374">页面，位于你的</st> <st c="50388">AWS
    账户中。</st>
- en: <st c="50400">Click on</st> **<st c="50410">Explore items</st>** <st c="50423">on
    the</st> <st c="50431">left menu.</st>
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**<st c="50410">探索项目</st>** <st c="50423">在</st> <st c="50431">左侧菜单上。</st>
- en: <st c="50441">Select your</st> <st c="50454">recipes table.</st>
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择你的<st c="50454">食谱表。</st>
- en: <st c="50468">List the items in your table while you test the operations on
    your application for creating and deleting recipes.</st> <st c="50583">These operations
    should be reflected in your DynamoDB</st> **<st c="50637">Explore</st>** **<st
    c="50645">items</st>** <st c="50650">console.</st>
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你测试创建和删除食谱操作时，列出表中的项目。</st> <st c="50583">这些操作应该在你的 DynamoDB</st> **<st c="50637">探索</st>**
    **<st c="50645">项目</st>** <st c="50650">控制台中反映出来。</st>
- en: '*<st c="50659">Figure 3</st>**<st c="50668">.28</st>* <st c="50671">shows how
    recipes are stored in DynamoDB after recipe creation.</st> <st c="50736">As an
    exercise, compare the structure of your DynamoDB items with the requirements defined
    at the beginning of</st> <st c="50847">the chapter.</st>'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '*<st c="50659">图 3</st>**<st c="50668">.28</st>* <st c="50671">展示了食谱在创建后如何存储在
    DynamoDB 中。</st> <st c="50736">作为练习，比较你的 DynamoDB 项目的结构与本章开始时定义的要求。</st>'
- en: '![Figure 3.28 – Exploring DynamoDB recipes table](img/B22051_03_28.jpg)'
  id: totrans-362
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.28 – 探索 DynamoDB 食谱表](img/B22051_03_28.jpg)'
- en: <st c="51229">Figure 3.28 – Exploring DynamoDB recipes table</st>
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="51229">图 3.28 – 探索 DynamoDB 食谱表</st>
- en: <st c="51275">Section 6 – Cleaning up</st>
  id: totrans-364
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="51275">第六节 – 清理</st>
- en: <st c="51299">Although</st> <st c="51309">we tried to adopt services that are
    included in the AWS Free Tier, and the majority of the services adopted are serverless
    and auto-scale based on demand, if you leave your application running, you may
    incur costs in the future, so this section explains how to delete all the resources
    in your AWS account associated with</st> <st c="51631">this project.</st>
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="51299">虽然</st> <st c="51309">我们尝试使用 AWS 免费套餐中的服务，并且大多数采用的服务是无服务器的，并基于需求自动扩展，但如果你保持应用程序运行，未来可能会产生费用，因此本节解释了如何删除与你的
    AWS 账户中与</st> <st c="51631">本项目相关的所有资源。</st>
- en: <st c="51644">One of the main advantages of using IaC, especially in this CloudFormation
    example, is the streamlining of infrastructure provision</st> <st c="51777">and
    deletion.</st>
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="51644">使用 IaC 的主要优势之一，特别是在这个 CloudFormation 示例中，是简化了基础设施的提供</st> <st
    c="51777">和删除。</st>
- en: <st c="51790">To delete all the resources created, you just need to perform</st>
    <st c="51853">two steps:</st>
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="51790">要删除所有创建的资源，你只需要执行</st> <st c="51853">两个步骤：</st>
- en: '`<st c="51993">frontend-chapter-3-</st>` <st c="52012">followed by a random
    string of characters (</st><st c="52056">e.g.,</st> `<st c="52063">frontend-chapter-3-XXXXX</st>`<st
    c="52087">)).</st>'
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<st c="51993">frontend-chapter-3-</st>` <st c="52012">后面跟着一串随机字符（</st><st
    c="52056">例如，</st> `<st c="52063">frontend-chapter-3-XXXXX</st>`<st c="52087">）</st>。'
- en: <st c="52091">Click on</st> **<st c="52101">Empty</st>** <st c="52106">– this
    will delete all the content inside</st> <st c="52149">your bucket.</st>
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="52091">点击</st> **<st c="52101">清空</st>** <st c="52106">– 这将删除你桶内的所有内容。</st>
- en: '![Figure 3.29 – The process of emptying an S3 bucket](img/B22051_03_29.jpg)'
  id: totrans-370
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.29 – 清空 S3 桶的过程](img/B22051_03_29.jpg)'
- en: <st c="52474">Figure 3.29 – The process of emptying an S3 bucket</st>
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="52474">图 3.29 – 清空 S3 桶的过程</st>
- en: '**<st c="52524">Delete the</st>** **<st c="52536">CloudFormation stack</st>**<st
    c="52556">:</st>'
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**<st c="52524">删除</st>** **<st c="52536">CloudFormation 堆栈</st>**<st c="52556">：</st>'
- en: <st c="52558">Go to the CloudFormation console in your</st> <st c="52599">AWS
    account.</st>
  id: totrans-373
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="52558">前往你的 AWS 账户中的 CloudFormation 控制台。</st>
- en: <st c="52611">Select the stack</st> <st c="52629">you created.</st>
  id: totrans-374
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="52611">选择你创建的堆栈。</st>
- en: <st c="52641">Click</st> <st c="52648">on</st> **<st c="52651">Delete</st>**<st
    c="52657">.</st>
  id: totrans-375
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="52641">点击</st> <st c="52648">“删除”</st> **<st c="52651">删除</st>**<st c="52657">。</st>
- en: <st c="52658">Note</st>
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="52658">注意</st>
- en: <st c="52663">If you don’t see your CloudFormation stack on the list, try to
    change the region in the upper-right corner and select the region where you deployed
    your application.</st> <st c="52830">After that, you should proceed with the deletion
    process described and represented in</st> *<st c="52916">Figure 3</st>**<st c="52924">.30</st>*<st
    c="52927">.</st>
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="52663">如果你没有在列表中看到你的 CloudFormation 堆栈，请尝试更改右上角的区域，并选择你部署应用程序的区域。</st>
    <st c="52830">之后，你应该按照所描述并展示在</st> *<st c="52916">图 3</st>**<st c="52924">.30</st>*<st
    c="52927">中的删除过程进行操作。</st>
- en: '![Figure 3.30 – CloudFormation stack deletion](img/B22051_03_30.jpg)'
  id: totrans-378
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.30 – CloudFormation 堆栈删除](img/B22051_03_30.jpg)'
- en: <st c="53348">Figure 3.30 – CloudFormation stack deletion</st>
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="53348">图 3.30 – CloudFormation 堆栈删除</st>
- en: <st c="53391">Cleaning up the certificate and DNS management configuration (option
    1)</st>
  id: totrans-380
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="53391">清理证书和 DNS 管理配置（选项 1）</st>
- en: <st c="53463">If you followed</st> <st c="53479">the first option and created
    the</st> <st c="53513">certificate as well as configured the DNS, you need to
    perform these</st> <st c="53582">additional steps:</st>
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="53463">如果你选择了</st> <st c="53479">第一个选项并创建了</st> <st c="53513">证书并配置了
    DNS，那么你需要执行以下</st> <st c="53582">附加步骤：</st>
- en: '**<st c="53599">Delete</st>** **<st c="53607">the certificate</st>**<st c="53622">:</st>'
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**<st c="53599">删除</st>** **<st c="53607">证书</st>**<st c="53622">：</st>'
- en: <st c="53624">Go to the</st> **<st c="53634">Certificate Manager</st>** <st
    c="53653">console in your</st> <st c="53670">AWS account.</st>
  id: totrans-383
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="53624">进入你的</st> **<st c="53634">证书管理器</st>** <st c="53653">控制台。</st>
- en: <st c="53682">Select the certificate</st> <st c="53706">you created.</st>
  id: totrans-384
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="53682">选择你创建的证书。</st>
- en: <st c="53718">Click</st> <st c="53725">on</st> **<st c="53728">Delete</st>**<st
    c="53734">.</st>
  id: totrans-385
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="53718">点击</st> <st c="53725">在</st> **<st c="53728">删除</st>**<st c="53734">。</st>
- en: '![Figure 3.31 – Certificate deletion](img/B22051_03_31.jpg)'
  id: totrans-386
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.31 – 证书删除](img/B22051_03_31.jpg)'
- en: <st c="54046">Figure 3.31 – Certificate deletion</st>
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="54046">图 3.31 – 证书删除</st>
- en: <st c="54080">Note</st>
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="54080">注意</st>
- en: <st c="54085">If you don’t see your certificate on the list, try to change the
    region in the upper-right corner and select the region where you deployed your
    application.</st> <st c="54243">After that, you should proceed with the deletion
    process described and represented in</st> *<st c="54329">Figure 3</st>**<st c="54337">.31</st>*
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="54085">如果你没有在列表中看到你的证书，尝试更改右上角的区域，选择你部署应用程序的区域。</st> <st c="54243">然后，你应该按照删除过程继续操作，具体步骤如</st>
    *<st c="54329">图 3</st>**<st c="54337">.31</st>*
- en: '**<st c="54340">Clean up the DNS</st>**<st c="54357">: If you want to keep
    managing the DNS in Route 53, you can just</st> <st c="54423">delete</st> <st
    c="54430">the record you created for</st> <st c="54457">your API:</st>'
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**<st c="54340">清理 DNS</st>**<st c="54357">：如果你想继续在 Route 53 中管理 DNS，你可以直接</st>
    <st c="54423">删除</st> <st c="54430">为你的 API 创建的记录：</st>'
- en: <st c="54466">Go to the</st> **<st c="54477">Route 53</st>** <st c="54485">console
    in your</st> <st c="54502">AWS account.</st>
  id: totrans-391
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="54466">进入你的</st> **<st c="54477">Route 53</st>** <st c="54485">控制台。</st>
- en: <st c="54514">Select</st> **<st c="54522">Hosted Zones</st>** <st c="54534">on
    the</st> <st c="54542">left pane.</st>
  id: totrans-392
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="54514">在左侧面板中选择</st> **<st c="54522">托管区域</st>** <st c="54534">。</st>
- en: <st c="54552">Select the hosted zone you created for</st> <st c="54592">your
    domain.</st>
  id: totrans-393
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="54552">选择你为</st> <st c="54592">你的域名创建的托管区域。</st>
- en: <st c="54604">Select the record for</st> <st c="54627">the API.</st>
  id: totrans-394
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="54604">选择 API 的记录。</st>
- en: <st c="54635">Click on</st> **<st c="54645">Delete record</st>**<st c="54658">.</st>
  id: totrans-395
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="54635">点击</st> **<st c="54645">删除记录</st>**<st c="54658">。</st>
- en: '![Figure 3.32 – DNS record cleanup](img/B22051_03_32.jpg)'
  id: totrans-396
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.32 – DNS 记录清理](img/B22051_03_32.jpg)'
- en: <st c="55098">Figure 3.32 – DNS record cleanup</st>
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="55098">图 3.32 – DNS 记录清理</st>
- en: <st c="55130">Additionally, if you want to stop using Route 53 for your domain,
    delete the hosted zone in Route 53 and update the nameservers with your domain
    registrar to point to your new</st> <st c="55307">DNS service.</st>
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="55130">此外，如果你不想继续使用 Route 53 管理你的域名，删除 Route 53 中的托管区域，并更新域名注册商中的名称服务器，指向新的</st>
    <st c="55307">DNS 服务。</st>
- en: <st c="55319">Future work</st>
  id: totrans-399
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="55319">未来工作</st>
- en: <st c="55331">Congratulations, you</st> <st c="55353">have a fully functional
    web application to store and share recipes!</st> <st c="55421">But for all the
    projects you develop, it is crucial to keep in mind that there are always points
    of improvement for your architectures, and you should always conduct a regular
    review to understand the improvement points.</st> <st c="55642">That’s what you
    are going to</st> <st c="55671">do now.</st>
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="55331">恭喜你，你</st> <st c="55353">拥有一个完全功能的 Web 应用程序来存储和分享食谱！</st> <st
    c="55421">但是对于你开发的所有项目，必须时刻记住，你的架构总有改进的空间，并且你应该定期进行审查，以便理解哪些地方可以改进。</st> <st c="55642">这正是你接下来要</st>
    <st c="55671">做的事情。</st>
- en: <st c="55678">Using secure protocols</st>
  id: totrans-401
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="55678">使用安全协议</st>
- en: <st c="55701">It’s</st> <st c="55707">clear why HTTP is not a good option.</st>
    <st c="55744">So, if you followed option 2, the first improvement you could focus
    on is to migrate to option 1 and configure HTTPS for</st> <st c="55865">API communication.</st>
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="55701">很显然，HTTP 不是一个好的选择。</st> <st c="55707">因此，如果你遵循了选项 2，你可以专注的第一个改进是迁移到选项
    1 并为</st> <st c="55865">API 通信配置 HTTPS。</st>
- en: <st c="55883">Infrastructure auto-scaling</st>
  id: totrans-403
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="55883">基础设施自动扩展</st>
- en: <st c="55911">By</st> <st c="55915">now, regardless of the option you followed,
    you have one EC2 instance supporting your backend, but what happens if the load
    increas</st><st c="56046">es?</st> <st c="56051">A lack of compute resources brings
    a bad user experience and can lead to instance failure, so how can you cope with
    a</st> <st c="56169">failed instance?</st>
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="55911">到目前为止，无论你选择了哪种选项，你都有一个EC2实例支持你的后台，但如果负载增加会发生什么？</st> <st c="56046">计算资源不足会带来不好的用户体验，并可能导致实例故障，那么你该如何应对</st>
    <st c="56169">故障的实例呢？</st>
- en: <st c="56185">Architecting with failure in mind is the path for resilient applications.</st>
    <st c="56260">So, it is always a good practice to ask ourselves, what happens
    if this component fails?</st> <st c="56349">In our case, what happens if our EC2
    instance with the API fails, for example, due to extra load?</st> <st c="56447">To
    ensure resilience and scalability, you should</st> <st c="56496">automate API
    provisioning using, for example, AWS</st> **<st c="56546">Auto Scaling</st>**
    **<st c="56559">groups</st>** <st c="56565">(</st>**<st c="56567">ASGs</st>**<st
    c="56571">).</st>
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="56185">以故障为前提进行架构设计是实现弹性应用程序的路径。</st> <st c="56260">因此，始终是一个好习惯去问自己，假如这个组件失败会怎样？</st>
    <st c="56349">在我们的案例中，如果我们的API所在的EC2实例失败，比如由于负载过大，会发生什么？</st> <st c="56447">为了确保弹性和可扩展性，你应该</st>
    <st c="56496">使用自动化API配置，举个例子，可以使用AWS</st> **<st c="56546">自动扩展</st>** **<st c="56559">组</st>**
    <st c="56565">(</st>**<st c="56567">ASGs</st>**<st c="56571">)。</st>
- en: <st c="56574">An ASG automatically provisions and terminates EC2 instances based
    on defined metrics, such as average CPU usage.</st> <st c="56689">You can create
    an AMI, which is a pre-configured virtual machine image that includes all the
    necessary configurations and code to run your backend, and associate it with the
    ASG.</st> <st c="56868">To have some boundaries on the number of instances to
    provision, you could set a minimum and maximum instance count, say four instances
    as the upper limit, and be sure you will never pass that limit.</st> <st c="57068">By
    monitoring the instance state, the ASG will launch new instances from the AMI
    when the metric exceeds a threshold and terminate instances when the metric falls
    below</st> <st c="57237">another threshold.</st>
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="56574">ASG会根据定义的指标自动配置和终止EC2实例，比如平均CPU使用率。</st> <st c="56689">你可以创建一个AMI，它是一个预配置的虚拟机镜像，包含运行后台所需的所有配置和代码，并将其与ASG关联。</st>
    <st c="56868">为了限制需要配置的实例数量，你可以设置最小和最大实例数，比如四个实例作为上限，确保永远不会超过这个限制。</st> <st c="57068">通过监控实例状态，ASG将在指标超过阈值时从AMI启动新的实例，并在指标低于</st>
    <st c="57237">另一个阈值时终止实例。</st>
- en: <st c="57255">This approach provides auto-healing by replacing unhealthy instances
    and automatic scaling based on the defined metric, making the API resilient</st>
    <st c="57401">and scalable.</st>
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="57255">这种方法通过替换不健康的实例和根据定义的指标进行自动扩展，提供了自愈能力，使API具备弹性</st> <st c="57401">和可扩展性。</st>
- en: <st c="57414">Managed hosting and CI/CD</st>
  id: totrans-408
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="57414">托管服务和CI/CD</st>
- en: <st c="57440">During</st> <st c="57448">this chapter, you experienced the building
    process that involves changing the application locally, building it and copying
    the files to the S3 bucket, which is very error prone.</st> <st c="57626">Also,
    while, by now, you are the only developer working on the application, it is common
    to have a team of developers working together, and the current deployment method
    is challenging</st> <st c="57811">for col</st><st c="57818">laboration.</st>
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="57440">在</st> <st c="57448">本章中，你体验了一个构建过程，涉及到在本地更改应用程序，构建并将文件复制到S3桶，这个过程非常容易出错。</st>
    <st c="57626">此外，尽管到目前为止，你是唯一一个在应用程序上工作的开发者，但通常会有一个开发者团队共同协作，而当前的部署方式对于团队协作</st>
    <st c="57811">来说具有挑战性。</st>
- en: <st c="57830">AWS offers a</st> <st c="57843">service that already manages both
    hosting and</st> **<st c="57890">continuous integration and continuous deployment</st>**
    <st c="57938">(</st>**<st c="57940">CI/CD</st>**<st c="57945">) pipelines</st>
    <st c="57957">that simplifies the process of building, deploying, and hosting
    modern SPAs like your recipe-sharing application.</st> <st c="58072">With Amplify,
    you can connect your code repository (e.g., GitHub, AWS CodeCommit) and configure
    a CI/CD pipeline that builds, tests, and deploys your application whenever changes
    are pushed to the reposit</st><st c="58276">ory.</st> <st c="58282">For hosting,
    Amplify leverages S3 and CloudFront, similar to the setup you have now, so you
    would keep benefiting from all the advantages mentioned in the</st> *<st c="58437">AWS
    services</st>* <st c="58449">section earlier in</st> <st c="58469">this chapter.</st>
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="57830">AWS 提供了一个</st> <st c="57843">服务，已管理好托管和</st> **<st c="57890">持续集成与持续部署</st>**
    <st c="57938">（</st>**<st c="57940">CI/CD</st>**<st c="57945">）流水线</st> <st c="57957">，它简化了构建、部署和托管现代单页应用（如你的食谱共享应用）的过程。</st>
    <st c="58072">通过 Amplify，你可以连接代码仓库（例如 GitHub、AWS CodeCommit），并配置一个 CI/CD 流水线，能够在代码提交到仓库时自动构建、测试和部署应用。</st>
    <st c="58276">对于托管，Amplify 利用 S3 和 CloudFront，类似于你当前的设置，因此你仍将从前面提到的所有</st> *<st
    c="58437">AWS 服务</st>* <st c="58449">优势中受益。</st> <st c="58469">本章中会有更多相关内容。</st>
- en: <st c="58482">Authentication</st>
  id: totrans-411
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="58482">身份验证</st>
- en: <st c="58497">When you</st> <st c="58507">made the requests to your API, you
    did not need to use any authentication mechanism.</st> <st c="58592">It means
    that anyone in the world, just with the endpoint URL, could perform requests,
    create recipes, and delete them, which is not ideal.</st> <st c="58732">Implementing
    authentication into your application is crucial for ensuring the security and
    privacy of your data, especially when dealing with</st> <st c="58874">sensitive
    data.</st>
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="58497">当你</st> <st c="58507">向你的 API 发出请求时，你无需使用任何身份验证机制。</st> <st c="58592">这意味着世界上任何人，只要拥有端点
    URL，都可以发出请求、创建食谱并删除它们，这显然不理想。</st> <st c="58732">在应用程序中实现身份验证对于确保数据的安全性和隐私至关重要，尤其是当涉及到</st>
    <st c="58874">敏感数据时。</st>
- en: '**<st c="58889">Amazon Cognito</st>** <st c="58904">is an</st> <st c="58911">AWS
    service that simplifies the process of adding user authentication and authorization
    to your web and mobile applications.</st> <st c="59036">It acts as a user identity
    provider, allowing you to manage user sign-up, sign-in, and access control, among
    other features.</st> <st c="59161">There will be more on this in the</st> <st
    c="59195">next chapter.</st>'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: '**<st c="58889">Amazon Cognito</st>** <st c="58904">是一个</st> <st c="58911">AWS
    服务，简化了将用户身份验证和授权添加到你的 web 和移动应用程序中的过程。</st> <st c="59036">它充当用户身份提供者，允许你管理用户注册、登录和访问控制等功能。</st>
    <st c="59161">下一章将进一步介绍相关内容。</st> <st c="59195">敬请期待。</st>'
- en: <st c="59208">Logging and monitoring</st>
  id: totrans-414
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="59208">日志记录与监控</st>
- en: <st c="59231">You can only act on</st> <st c="59251">something that you measure,
    and with the current architecture, you do not have any visibility on what is happening
    in your application.</st> <st c="59388">How many accesses are you getting?</st>
    <st c="59423">Where are your users located?</st> <st c="59453">Were there any
    errors in the last</st> <st c="59487">24 hours?</st>
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="59231">你只能对</st> <st c="59251">你所衡量的内容采取行动，而在当前架构下，你无法看到应用程序中发生了什么。</st>
    <st c="59388">你获得了多少次访问？</st> <st c="59423">你的用户位于哪里？</st> <st c="59453">过去</st>
    <st c="59487">24小时内是否出现了错误？</st>
- en: <st c="59496">Although</st> <st c="59506">sometimes used interchangeably, monitoring
    and logging are two different, but complementary, concepts.</st> **<st c="59609">Logging</st>**
    <st c="59616">involves recording historical events, errors, and activities that
    occur within your application, while</st> **<st c="59720">monitoring</st>** <st
    c="59730">focuses on collecting and analyzing data about the performance, health,
    and</st> <st c="59807">operational state.</st>
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="59496">虽然</st> <st c="59506">有时监控与日志记录可以互换使用，但它们是两个不同的概念，尽管是互补的。</st>
    **<st c="59609">日志记录</st>** <st c="59616">涉及记录应用程序中的历史事件、错误和活动，而</st> **<st c="59720">监控</st>**
    <st c="59730">则侧重于收集和分析有关性能、健康状态和</st> <st c="59807">运行状态的数据。</st>
- en: '<st c="59825">As a part of the AWS services portfolio, you can find CloudWatch,
    a comprehensive monitoring and logging solution that breaks down into two services:
    CloudWatch Logs for logging and</st> <st c="60007">CloudWatch Metrics for monitoring.</st>
    <st c="60043">By</st> <st c="60045">leveraging these services, we could get insights
    into our application’s behavior, performance,</st> <st c="60141">and health.</st>'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="59825">作为 AWS 服务组合的一部分，你可以找到 CloudWatch，这是一个综合性的监控和日志解决方案，分为两个服务：CloudWatch
    Logs 用于日志记录和</st> <st c="60007">CloudWatch Metrics 用于监控。</st> <st c="60043">通过</st>
    <st c="60045">利用这些服务，我们可以深入了解应用的行为、性能</st> <st c="60141">和健康状况。</st>
- en: <st c="60152">So, as an improvement, you could ship your application logs to
    CloudWatch Logs, as well as create a monitoring dashboard with metrics from all
    your application components, including CloudFront, S3, EC2, and DynamoDB.</st>
    <st c="60370">This would provide you with a holistic view of your application
    and give you the tools to</st> <st c="60460">analyze it.</st>
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="60152">因此，作为改进，你可以将应用日志发送到 CloudWatch Logs，并且创建一个包含所有应用组件的监控仪表板，包括 CloudFront、S3、EC2
    和 DynamoDB。</st> <st c="60370">这将为你提供应用程序的整体视图，并为你提供分析的工具。</st>
- en: <st c="60471">Caching</st>
  id: totrans-419
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="60471">缓存</st>
- en: <st c="60479">Recipes</st> <st c="60487">are created once, accessed many times,
    and are not supposed to change often, being a great candidate for data caching.</st>
    <st c="60607">If you analyze your current setup, every time a user refreshes the
    page or selects a recipe, there is a request being sent and a read operation being
    performed in your database, and this could be improved both from a performance
    as well as a</st> <st c="60849">cost perspective.</st>
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="60479">食谱</st> <st c="60487">是一次创建，多次访问，并且不常变更，非常适合进行数据缓存。</st> <st c="60607">如果你分析当前的设置，每次用户刷新页面或选择一个食谱时，都会发送请求并在数据库中执行读取操作，这在性能和</st>
    <st c="60849">成本角度上都可以改进。</st>
- en: '**<st c="60866">DynamoDB Accelerator</st>** <st c="60887">(</st>**<st c="60889">DAX</st>**<st
    c="60892">) is a</st> <st c="60900">fully managed, clustered in-memory cache for
    DynamoDB.</st> <st c="60955">It is designed to improve the read performance of
    DynamoDB by caching frequent queries and responses.</st> <st c="61057">DAX is
    compatible with the DynamoDB API, which means you can integrate it with your existing
    applications without making significant code changes.</st> <st c="61204">But this
    is not the</st> <st c="61224">only option.</st>'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: '**<st c="60866">DynamoDB 加速器</st>** <st c="60887">(</st>**<st c="60889">DAX</st>**<st
    c="60892">)</st> 是一个</st> <st c="60900">完全托管的、集群化的内存缓存服务，用于 DynamoDB。</st> <st
    c="60955">它旨在通过缓存频繁的查询和响应来提高 DynamoDB 的读取性能。</st> <st c="61057">DAX 兼容 DynamoDB
    API，这意味着你可以将其与现有应用集成，而无需进行重大代码修改。</st> <st c="61204">但这并不是</st> <st c="61224">唯一的选择。</st>'
- en: <st c="61236">For the cache layer, you could use any caching technology, such
    as Redis or Memcached, which are available as a managed solution with</st> <st
    c="61371">Amazon ElastiCache.</st>
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="61236">对于缓存层，你可以使用任何缓存技术，比如 Redis 或 Memcached，它们作为托管解决方案可以在</st> <st
    c="61371">Amazon ElastiCache 中使用。</st>
- en: '<st c="61390">These are just six of many examples you could find for future
    work in your application, so our challenge to you is to try to find other options
    and always ask yourself: what can I improve in my</st> <st c="61585">current architecture?</st>'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="61390">这些只是你在应用中可能找到的许多未来工作示例中的六个，因此我们向你提出的挑战是，尝试寻找其他选项，并始终问自己：我能改进我当前的架构吗？</st>
- en: <st c="61606">We will leave with an example of an improved version of our application
    considering the future work mentioned before, depicted in</st> *<st c="61737">Figure
    3</st>**<st c="61745">.33</st>*<st c="61748">.</st>
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="61606">我们将以一个改进版本的应用为例，考虑之前提到的未来工作，如</st> *<st c="61737">图 3</st>**<st
    c="61745">.33</st>*<st c="61748"> 所示。</st>
- en: '![Figure 3.33 – Final architecture](img/B22051_03_33.jpg)'
  id: totrans-425
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.33 – 最终架构](img/B22051_03_33.jpg)'
- en: <st c="61891">Figure 3.33 – Final architecture</st>
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="61891">图 3.33 – 最终架构</st>
- en: <st c="61923">Compared to</st> <st c="61936">the initial architecture shown
    in</st> *<st c="61970">Figure 3</st>**<st c="61978">.6</st>*<st c="61980">, this
    new version already includes part of the future work proposed.</st> <st c="62050">On
    the top, CloudWatch will bring monitoring capabilities and give you more visibility
    of your application, help you understand the errors that occurred in the past,
    and, most importantly, act in a timely manner during an event.</st> <st c="62279">As
    explained in the chapter, this architecture follows the security best practices
    and allows only HTTPS as the access protocol for your application.</st> <st c="62429">For
    that, you configure your domain in Route 53 and issue a certificate to prove your
    ownership</st> <st c="62525">of it.</st>
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="61923">与</st> <st c="61936">第*<st c="61970">3</st>**<st c="61978">.6</st>*<st
    c="61980">图中展示的初始架构相比，这个新版本已经包含了部分未来计划的工作。</st> <st c="62050">在顶部，CloudWatch将提供监控功能，帮助你更好地了解应用程序的运行状况，了解过去发生的错误，最重要的是，在事件发生时能够及时采取行动。</st>
    <st c="62279">如本章所述，这个架构遵循了安全最佳实践，并且仅允许HTTPS作为应用程序的访问协议。</st> <st c="62429">为此，你在Route
    53中配置了你的域名，并颁发了证书来证明你对该域名的所有权。</st>
- en: <st c="62531">For your data layer, and taking into consideration that recipes
    are usually stable and do not get many changes after being published, you adopted
    DAX as the caching layer to improve the</st> <st c="62717">user experience by
    getting up to a 10 times performance improvement – from milliseconds to microseconds
    to get</st> <st c="62829">an item.</st>
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="62531">对于数据层，考虑到食谱通常是稳定的，发布后不会有太多更改，你选择了DAX作为缓存层，以提高</st> <st c="62717">用户体验，性能提升达到最多10倍——从毫秒级降低到微秒级。</st>
    <st c="62829">以便获取一个项目。</st>
- en: <st c="62837">Summary</st>
  id: totrans-429
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="62837">总结</st>
- en: <st c="62845">In this chapter, you practiced the framework introduced in</st>
    [*<st c="62905">Chapter 1</st>*](B22051_01.xhtml#_idTextAnchor014) <st c="62914">for
    architecture design.</st> <st c="62940">Compared to the previous chapter, you
    now have a more robust application that handles dynamic content, and you ended
    up with a fully functional recipe-sharing application, which can be used as a
    starting point and applied to any project you</st> <st c="63181">think of.</st>
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="62845">在这一章中，你实践了在</st> [*<st c="62905">第1章</st>*](B22051_01.xhtml#_idTextAnchor014)
    <st c="62914">中介绍的架构设计框架。</st> <st c="62940">与前一章相比，你现在拥有了一个更强大的应用程序，能够处理动态内容，最终你得到了一个功能齐全的食谱分享应用，可以作为任何项目的起点并应用于你</st>
    <st c="63181">想到的任何项目。</st>
- en: <st c="63190">You had the opportunity to experience the build and deployment
    process of a SPA to AWS using S3 and CloudFront, which can serve thousands</st>
    <st c="63329">of users.</st>
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="63190">你有机会体验了将单页面应用（SPA）构建并部署到AWS的过程，使用了S3和CloudFront，这使得应用能够服务数千个</st>
    <st c="63329">用户。</st>
- en: <st c="63338">You explored new AWS services, such as DynamoDB, EC2, and ALB.</st>
    <st c="63402">You also learned the power of IaC with CloudFormation.</st> <st
    c="63457">Additionally, you saw how to configure HTTPS with a custom domain associated
    with an ALB, and why HTTP is</st> <st c="63563">not recommended.</st>
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="63338">你探索了新的AWS服务，如DynamoDB、EC2和ALB。</st> <st c="63402">你还学习了使用CloudFormation进行基础设施即代码（IaC）的强大功能。</st>
    <st c="63457">此外，你还看到了如何配置带有自定义域名的HTTPS，并与ALB关联，以及为什么不推荐使用HTTP。</st>
- en: <st c="63579">Lastly, you explored possible improvements to your application
    to make it more scalable, cost-effective,</st> <st c="63685">and secure.</st>
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="63579">最后，你探讨了应用程序可能的改进方向，使其更具可扩展性、成本效益和安全性。</st>
- en: <st c="63696">In the next chapter, you will take your current recipe-sharing
    application to the next level and understand how to architect an application solely
    with</st> <st c="63849">serverless technologies.</st>
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="63696">在下一章中，你将把当前的食谱分享应用提升到一个新的水平，并了解如何仅使用</st> <st c="63849">无服务器技术来架构应用程序。</st>

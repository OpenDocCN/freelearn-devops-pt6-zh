- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Version Control and Integration with Git and GitHub
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 版本控制与 Git 和 GitHub 的集成
- en: So far, our exploration has shed light on the foundational concepts of GitOps
    and its critical role in managing cloud-native operations. This journey has involved
    unpacking the principles, benefits, and transformative nature of GitOps in infrastructure
    management, as well as its capacity to enhance and streamline cloud-native processes.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的探索已经揭示了 GitOps 的基础概念及其在管理云原生操作中的关键作用。这一过程涉及了解 GitOps 在基础设施管理中的原理、优势及其变革性特征，以及它如何提升和简化云原生流程。
- en: This chapter will further expand on these concepts. It will delve into the significance
    of Git in **version control**, an essential component of modern software development.
    The chapter will also explore GitHub’s contribution to collaborative development
    and how it can be maximized for team efficiency. Additionally, it will discuss
    the integration of GitOps practices with Git and GitHub, highlighting automated
    integration processes.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将进一步扩展这些概念。它将深入探讨 Git 在**版本控制**中的重要性，这一内容是现代软件开发的关键组成部分。本章还将探讨 GitHub 在协作开发中的贡献，以及如何最大化其在团队效率中的作用。此外，它还将讨论将
    GitOps 实践与 Git 和 GitHub 集成的方式，强调自动化集成流程。
- en: The chapter outlines the best practices for utilizing Git and GitHub within
    a GitOps framework, aiming to enhance workflow efficiency and promote a strong
    DevOps culture.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章概述了在 GitOps 框架内使用 Git 和 GitHub 的最佳实践，旨在提升工作流效率，并促进强大的 DevOps 文化。
- en: 'In this chapter, we’ll focus on these key areas:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将重点讨论以下几个关键领域：
- en: Version control systems
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本控制系统
- en: Why Git?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么选择 Git？
- en: Exploring GitHub
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索 GitHub
- en: Integrating GitOps and GitHub
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成 GitOps 和 GitHub
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To fully engage with the concepts and practices presented in this chapter, there
    are a few technical requirements. You should have a basic understanding of software
    development processes and a familiarity with command-line tools. Access to a computer
    with internet connectivity is necessary to follow along with examples involving
    Git and GitHub. This hands-on approach will enable you to apply the theories and
    practices of GitOps in real-world scenarios.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了充分理解本章中提出的概念和实践，需要满足一些技术要求。你应该具备基本的软件开发流程知识，并且熟悉命令行工具。为了跟随涉及 Git 和 GitHub
    的示例，你需要一台能连接互联网的计算机。通过这种实践方法，你将能够将 GitOps 的理论和实践应用到现实世界的场景中。
- en: The code for this chapter is available in the `Chapter03` folder of our GitHub
    repository at [https://github.com/PacktPublishing/Implementing-GitOps-with-Kubernetes](https://github.com/PacktPublishing/Implementing-GitOps-with-Kubernetes).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可以在我们的 GitHub 仓库的`Chapter03`文件夹中找到，网址：[https://github.com/PacktPublishing/Implementing-GitOps-with-Kubernetes](https://github.com/PacktPublishing/Implementing-GitOps-with-Kubernetes)。
- en: Exploring version control systems – local, centralized, and distributed
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索版本控制系统——本地、集中式和分布式
- en: '**Version control systems** (**VCSs**) are essential tools in modern software
    development, as they are responsible for enabling efficient management of changes
    to files, especially code. Git, a widely used VCS, exemplifies this by tracking
    modifications, allowing users to view and revert to specific versions of files
    as needed. This functionality is crucial for collaborative projects, where it
    provides a comprehensive record of who made changes, when, and why, enhancing
    accountability and clarity.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**版本控制系统**（**VCSs**）是现代软件开发中不可或缺的工具，它们负责高效管理文件变化，特别是代码。Git 作为一种广泛使用的版本控制系统，通过跟踪修改记录，允许用户根据需要查看和恢复特定版本的文件，展现了这一功能的优势。对于协作项目而言，这种功能尤为重要，它提供了一个完整的记录，能够明确谁在什么时候、出于什么原因做了更改，从而增强了责任感和透明度。'
- en: At its core, version control is about recording changes over time. This makes
    it easier to recover previous states of a project, whether for fixing bugs, testing,
    or undoing changes. It’s not limited to software code; version control can be
    applied to any file type, making it an asset for professionals such as graphic
    or web designers who might need to manage different versions of their work. The
    use of a VCS minimizes risks associated with file loss or errors, as it provides
    a safety net for easily reverting to earlier states and understanding the evolution
    of a project. This leads to increased efficiency and a more structured workflow
    with minimal overhead.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，版本控制是关于记录随时间变化的更改。这使得恢复项目的先前状态变得更加容易，无论是修复bug、测试还是撤销更改。它不仅限于软件代码；版本控制可以应用于任何类型的文件，因此它成为了像图形设计师或网页设计师这样的专业人士的宝贵工具，他们可能需要管理工作版本。使用VCS可以最小化与文件丢失或错误相关的风险，因为它提供了一个安全网，能够轻松回退到早期状态并理解项目的演变。这提高了效率并且使工作流程更加结构化，同时减少了额外负担。
- en: By integrating version control into their workflow, teams and individuals gain
    a powerful tool to navigate the complexities of project development, ensuring
    a smoother, more controlled process of continuous improvement and collaboration.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将版本控制集成到工作流程中，团队和个人获得了一个强大的工具，帮助他们应对项目开发中的复杂性，确保更顺畅、更可控的持续改进和协作过程。
- en: 'VCS can be categorized into three main types: local, centralized, and distributed:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 版本控制系统（VCS）可以分为三种主要类型：本地、集中式和分布式：
- en: '**Local VCSs** (**LVCSs**): These are the simplest forms. They involve keeping
    track of changes in files on a local computer, typically using a database that
    stores all the changes to files under revision control. This system is straightforward
    but has limitations, especially in the contexts of collaboration and data backup.
    *Figure 3**.1* shows an example of LVCS on the left side.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**本地VCS**（**LVCS**）：这是最简单的形式。它通过使用一个数据库来跟踪本地计算机中文件的更改，通常会将所有更改存储在版本控制下。这个系统直观易用，但有一些局限性，尤其是在协作和数据备份的环境中。*图
    3.1*展示了左侧是LVCS的示例。'
- en: '**Centralized VCSs** (**CVCSs**): These systems, such as **Subversion** (**SVN**),
    have a single server that contains all versioned files. Various clients check
    out files from this central place. This setup significantly enhances collaboration
    compared to LVCS, as everyone knows what everyone else is working on. However,
    the central server is also a single point of failure; if it goes down, no one
    can collaborate or save versioned changes.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集中式VCS**（**CVCS**）：这些系统，如**Subversion**（**SVN**），有一个包含所有版本文件的单一服务器。各种客户端从这个中心位置检出文件。这种设置比LVCS大大增强了协作性，因为每个人都知道别人正在做什么。然而，中央服务器也是单点故障；如果它出现故障，就没有人可以继续协作或保存版本更改。'
- en: '![Figure 3.1 – An example of LCVS and CVCS](img/B22100_03_01.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.1 – LCVS 和 CVCS 的示例](img/B22100_03_01.jpg)'
- en: Figure 3.1 – An example of LCVS and CVCS
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1 – LCVS 和 CVCS 的示例
- en: Concurrent version systems and SVN
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 并行版本控制系统与 SVN
- en: The **Concurrent Versions System** (**CVS**) was an early version control system
    that enabled collaborative software development by allowing teams to work simultaneously
    on a project using a centralized repository. However, it had limitations, especially
    in handling binary files. It also lacked advanced features. SVN was developed
    as a modern alternative to CVS, addressing these shortcomings. SVN, also a centralized
    system, improved collaboration by allowing multiple users to work efficiently
    on a project with a centralized source for file changes, enhancing the tracking
    and management of changes made by different team members.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**并行版本控制系统**（**CVS**）是早期的版本控制系统，它通过允许团队在集中式代码库中同时进行协作开发来促进软件开发。然而，它存在一些局限性，尤其是在处理二进制文件时。它还缺乏一些高级功能。SVN作为CVS的现代替代方案应运而生，解决了这些问题。SVN也是一个集中式系统，它通过允许多个用户高效地协作工作，提供了集中式的文件变更源，改善了协作，提高了不同团队成员所做变更的跟踪与管理。'
- en: '**Distributed VCSs** (**DVCSs**): Systems such as Git fall into this category.
    Instead of a single central repository, each user has a complete copy of the entire
    repository. This approach allows for more complex workflows, increases redundancy
    and backup options, and enables offline work. It also allows for various forms
    of **merging** and **branching**, offering a more flexible approach to version
    control, especially for large-scale projects with many contributors.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分布式版本控制系统**（**DVCSs**）：像 Git 这样的系统属于这一类别。与单一的中央仓库不同，每个用户都拥有整个仓库的完整副本。这种方式支持更复杂的工作流程，增加了冗余性和备份选项，还能实现离线工作。同时，它支持各种形式的**合并**和**分支**，为版本控制提供了更灵活的方式，尤其适用于有众多贡献者的大型项目。'
- en: '![Figure 3.2 – An example of DVCS](img/B22100_03_02.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.2 – 分布式版本控制系统示例](img/B22100_03_02.jpg)'
- en: Figure 3.2 – An example of DVCS
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.2 – 分布式版本控制系统示例
- en: Having explored the landscape of VCSs—including LVCSs, CVCSs, and DVCSs, each
    offering distinct benefits and suited to specific project needs—it’s clear why
    Git stands out among DVCSs. Let’s delve deeper into the unique advantages and
    capabilities that make Git an essential tool in modern software development in
    the next section.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在探索过包括 LVCS、CVCS 和 DVCS 在内的多种版本控制系统（VCS）后，我们可以清楚地看到 Git 在 DVCS 中为何如此突出。接下来，我们将深入探讨
    Git 的独特优势和功能，了解它为何成为现代软件开发中的必备工具。
- en: Why Git?
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择 Git？
- en: The story of Git begins with the developmental challenges of the Linux kernel
    project in the early 2000s. This period saw Linus Torvalds, the creator of Linux,
    facing a dilemma with the existing version control tools. The limitations and
    restrictions of the proprietary DVCS, BitKeeper, used by the Linux community at
    that time, led to the need for a new system. This spurred the creation of Git
    in 2005, marking a significant turn in the version control system landscape.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Git 的故事始于 2000 年代初期 Linux 内核项目的开发挑战。这一时期，Linux 的创始人 Linus Torvalds 遇到了现有版本控制工具的困境。当时
    Linux 社区使用的专有分布式版本控制系统（DVCS）BitKeeper 存在诸多限制和约束，迫切需要一个新系统。这促使了 2005 年 Git 的诞生，标志着版本控制系统领域的重大转变。
- en: Git was designed with specific goals in mind, drawing from the lessons learned
    during the use of BitKeeper. Key among these were speed, simple design, and robust
    support for non-linear development. The system was tailored to handle large projects
    such as the Linux kernel efficiently both in terms of speed and data size. This
    focus on efficiency and flexibility was crucial given the scale and complexity
    of such projects.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Git 的设计目标明确，汲取了使用 BitKeeper 时的经验教训。其中最关键的目标包括速度、简洁的设计以及对非线性开发的强大支持。该系统特别针对 Linux
    内核等大型项目进行优化，既提高了速度，也有效处理了数据量。这种对效率和灵活性的关注在面对如此规模和复杂性的项目时至关重要。
- en: The structure of Git is unique and effective. It is a distributed version control
    system, meaning that every user has the complete history of the project stored
    locally. This design not only enhances speed but also enables a more flexible
    and secure approach to version control. **Repositories** in Git are comprehensive,
    containing **commits**, which are essentially snapshots of the project at various
    stages, as well as references to these commits (known as **heads**). Over the
    years, Git has evolved and matured, retaining its initial qualities while becoming
    more user-friendly. Its integration with platforms such as GitHub (we will delve
    into more details about GitHub in the *Exploring GitHub* section of this chapter),
    **Bitbucket**, and **GitLab** has further amplified its capabilities, providing
    centralized hubs for collaboration, code sharing, and project management.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Git 的结构独特且高效。它是一个分布式版本控制系统，意味着每个用户都在本地存储项目的完整历史。这样的设计不仅提升了速度，还为版本控制提供了更加灵活和安全的方式。在
    Git 中，**仓库**包含**提交**，这些提交本质上是项目在不同阶段的快照，以及对这些提交的引用（称为**头**）。多年来，Git 逐渐发展和成熟，在保留最初特点的同时，也变得更加用户友好。它与
    GitHub 等平台的集成（我们将在本章的 *探索 GitHub* 部分深入探讨 GitHub）以及 **Bitbucket** 和 **GitLab**
    的结合进一步增强了其功能，提供了集中式的协作、代码共享和项目管理平台。
- en: 'To illustrate the widespread adoption of Git, it’s worth noting that the GitHub
    community announced having surpassed 100 million developers on their platform:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明 Git 的广泛应用，值得一提的是，GitHub 社区宣布其平台上的开发者数量已超过 1 亿人：
- en: '[https://github.blog/2023-01-25-100-million-developers-and-counting/](https://github.blog/2023-01-25-100-million-developers-and-counting/)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.blog/2023-01-25-100-million-developers-and-counting/](https://github.blog/2023-01-25-100-million-developers-and-counting/)'
- en: The adoption of Git in GitOps practices underscores its reliability and efficiency,
    making it a cornerstone in modern software development and version control.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GitOps 实践中使用 Git 强调了其可靠性和高效性，使其成为现代软件开发和版本控制的基石。
- en: Having understood the importance of Git from various perspectives, we will now
    shift our focus to a more practical approach. In the upcoming sections, we’ll
    begin with the basics of Git commands and examples to offer a hands-on experience.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在从多个角度理解了 Git 的重要性之后，我们现在将转向更实际的方式。在接下来的部分中，我们将从 Git 命令的基础和示例开始，提供一个实践经验。
- en: Git setup
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Git 设置
- en: This chapter doesn’t cover the details of Git installation in depth, but you
    can find a thorough, step-by-step guide in the official Git documentation (refer
    to [1] in the *Further reading* section at the end of this chapter). For the purposes
    of our discussions, we’ll assume that Git is already installed on a **Windows
    Subsystem for Linux** (**WSL**) Ubuntu 22.04 distribution. It is important to
    underline that Git can be natively installed on Windows (without WSL), macOS,
    and Linux.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 本章不深入介绍 Git 安装的细节，但你可以在官方 Git 文档中找到一份详细的逐步指南（请参见本章末的*进一步阅读*部分中的[1]）。在我们讨论的过程中，我们假设
    Git 已经安装在**Windows Subsystem for Linux**（**WSL**）Ubuntu 22.04 发行版上。需要强调的是，Git
    可以在 Windows（无需 WSL）、macOS 和 Linux 上本地安装。
- en: For additional information on setting up WSL, please refer to [*Chapter 2*](B22100_02.xhtml#_idTextAnchor027),
    particularly the *Setup of WSL* section, which provides relevant guidance and
    insights.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 有关设置 WSL 的更多信息，请参阅[*第 2 章*](B22100_02.xhtml#_idTextAnchor027)，特别是其中的*WSL 设置*部分，其中提供了相关的指导和见解。
- en: 'To verify your Git installation, you can enter a specific command in your command
    prompt. This command will help you confirm that Git is properly installed and
    functioning on your system:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证您的 Git 安装，您可以在命令提示符中输入一个特定的命令。此命令将帮助您确认 Git 是否已正确安装并正常运行：
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The expected response should resemble the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 预期的响应应类似于以下内容：
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Great job! In the following sections, we will delve into the basics of Git,
    explore its commands, and examine the most interesting features that are essential
    for GitOps.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 做得好！在接下来的部分中，我们将深入探讨 Git 的基础，学习其命令，并研究 GitOps 中必不可少的最有趣的功能。
- en: Creating and cloning a Git repository
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建和克隆 Git 仓库
- en: A Git repository is a cornerstone in the Git version control system, encompassing
    all project files and their revision histories. It’s marked by the `.git` directory
    containing necessary change-tracking data. Repositories exist either as local
    entities on a user’s computer or as remote versions on servers such as GitHub,
    enabling both individual work and collaborative efforts. They play a crucial role
    in project version management and evolution, storing files and histories as commits
    in a structured, linked-list format. This setup supports varied interactions such
    as **cloning** (creating a local copy of a repository from a remote server), **branching**
    (diverging from the main code base to create separate versions for development
    or testing without affecting the original code), and **code version comparisons**
    (examining the differences between various versions of code files to track changes
    or merge updates).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Git 仓库是 Git 版本控制系统的基石，包含所有项目文件及其修订历史。它通过包含必要变更跟踪数据的 `.git` 目录进行标识。仓库可以是用户计算机上的本地实体，也可以是
    GitHub 等服务器上的远程版本，支持个人工作和协作工作。它们在项目版本管理和演化中扮演着至关重要的角色，以提交的结构化链表格式存储文件和历史记录。该设置支持多种交互，如**克隆**（从远程服务器创建仓库的本地副本）、**分支**（从主代码库分支出独立版本进行开发或测试，且不影响原始代码）以及**代码版本比较**（检查不同版本代码文件之间的差异，以跟踪变更或合并更新）。
- en: 'A Git repository can be started using two commands:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过两条命令来启动一个 Git 仓库：
- en: '`git init`: This command is used to initialize a new Git repository in a directory
    that is not currently under version control. Executing this command creates a
    hidden subfolder named `.git` in the directory, setting up the necessary structure
    for repository management and version control.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git init`：此命令用于在尚未受版本控制的目录中初始化一个新的 Git 仓库。执行此命令会在目录中创建一个名为 `.git` 的隐藏子文件夹，设置仓库管理和版本控制所需的结构。'
- en: '`git clone`: This command is used to create a local copy of an existing Git
    repository, typically one that’s hosted remotely such as on GitHub. When you clone
    a repository, it downloads not only the project’s files but also its complete
    history and all branches into your local repository. This process ensures that
    you have the entire development history of the project at your disposal.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git clone`：此命令用于创建现有Git仓库的本地副本，通常是托管在远程服务器上的仓库，例如GitHub。当你克隆一个仓库时，它不仅下载项目文件，还将完整的历史记录和所有分支下载到你的本地仓库中。这个过程确保你可以访问项目的完整开发历史。'
- en: 'Open the command prompt and activate a WSL instance, as detailed in [*Chapter
    2*](B22100_02.xhtml#_idTextAnchor027), in the *Setup WSL* section, then follow
    the ensuing numbered steps to create and clone a Git repository:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 打开命令提示符并激活一个WSL实例，具体步骤详见[*第2章*](B22100_02.xhtml#_idTextAnchor027)中，*设置WSL*部分，然后按照随后的编号步骤创建并克隆一个Git仓库：
- en: 'Create a new directory named `Chapter_3`:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Chapter_3`的新目录：
- en: '[PRE2]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once in the `Chapter_3` directory, you are ready to initialize a new Git repository
    using the `git init` command. This step is crucial for starting version control
    in your new project directory:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦进入`Chapter_3`目录，你就可以使用`git init`命令初始化一个新的Git仓库。此步骤对于在新项目目录中启动版本控制至关重要：
- en: '[PRE3]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The output from the command should look something like this:'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 命令的输出应该如下所示：
- en: '[PRE4]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'By listing the contents of the working directory using the `ls -a` command,
    you should be able to see the newly created `.git` hidden directory. This directory
    is an indication that the Git repository has been successfully initialized:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`ls -a`命令列出工作目录的内容后，你应该能够看到新创建的`.git`隐藏目录。这个目录表明Git仓库已成功初始化：
- en: '[PRE5]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: $ ls -a ./git
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $ ls -a ./git
- en: '[PRE6]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: .  ..  HEAD  branches  config  description  hooks  info  objects  refs
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: .  ..  HEAD  branches  config  description  hooks  info  objects  refs
- en: '[PRE7]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To initialize a repository by cloning it, you should first navigate to a different
    directory. Once there, execute the clone command with the appropriate URL to create
    a copy of an existing Git repository in that new location. This process will replicate
    the repository, including its history and branches, into your specified directory:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要通过克隆初始化一个仓库，首先需要导航到另一个目录。然后，在该目录中执行克隆命令，并使用适当的URL在新位置创建一个现有Git仓库的副本。这个过程将复制仓库，包括其历史记录和分支，进入你指定的目录：
- en: '[PRE8]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output from the command should look something like this:'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 命令的输出应该如下所示：
- en: '[PRE9]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We have now learned how to create a new repository from scratch or by cloning
    an existing one. Next, we’ll focus on understanding and using basic Git commands
    to start recording changes in our repository. This step is crucial for managing
    and tracking the evolution of your project files.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经学会了如何从头开始创建一个新仓库，或通过克隆一个现有的仓库来创建一个新仓库。接下来，我们将重点了解和使用基本的Git命令来开始记录我们仓库中的更改。此步骤对于管理和跟踪项目文件的演变至关重要。
- en: The basics of Git
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Git基础知识
- en: 'Understanding the basics of Git involves familiarizing yourself with a set
    of fundamental commands that facilitate version control in software development.
    These commands enable you to track and manage changes to your project’s files,
    offering control over every aspect of its evolution. From staging and committing
    changes to managing branches and updating your project with the latest developments,
    mastering these commands is essential for the effective use of Git. This introductory
    overview will guide you through key commands such as `git status`, `git add`,
    `git commit`, `git branch`, `git merge`, `git pull`, and `git push`, each playing
    a critical role in the Git workflow:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 理解Git的基础知识包括熟悉一系列基本命令，这些命令有助于软件开发中的版本控制。通过这些命令，你可以跟踪并管理项目文件的更改，控制项目演变的每个方面。从暂存和提交更改到管理分支和更新项目以获取最新开发，掌握这些命令对于有效使用Git至关重要。本介绍将带你了解`git
    status`、`git add`、`git commit`、`git branch`、`git merge`、`git pull`和`git push`等关键命令，每个命令在Git工作流中都发挥着至关重要的作用：
- en: '`git status`: This command shows the status of changes, indicating whether
    they are untracked, modified, or staged.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git status`：此命令显示更改的状态，指示这些更改是未跟踪、已修改还是已暂存。'
- en: '`git add`: This command stages changes for inclusion in your project’s history.
    It prepares the changes for the next step, allowing you to control what becomes
    part of the project’s history.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git add`：此命令将更改暂存到你的项目历史中。它为下一步做准备，允许你控制哪些内容成为项目历史的一部分。'
- en: '`git commit`: This command saves the staged changes to the project’s history,
    functioning like capturing a snapshot. It finalizes what you have staged with
    `git add`.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git commit`：此命令将暂存的更改保存到项目的历史记录中，类似于捕捉快照。它完成了使用 `git add` 暂存的内容。'
- en: '`git branch`: Use this to view the branches being worked on locally, giving
    insight into the various lines of development.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git branch`：使用此命令查看本地正在工作的分支，从而了解不同的开发线路。'
- en: '`git merge`: This merges different lines of development and is commonly used
    to integrate changes from one branch into another (e.g., merging a `feature` branch
    into the `master` branch).'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git merge`：此命令将不同的开发线路合并，通常用于将一个分支的更改整合到另一个分支（例如，将 `feature` 分支合并到 `master`
    分支）。'
- en: '`git fetch`: This command updates your local database of changes from a remote
    repository, which is useful for reviewing updates before integrating them into
    your local branch.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git fetch`：此命令更新你本地的远程仓库变更数据库，在将这些变更整合到本地分支之前，用于查看更新内容。'
- en: '`git pull`: This updates your local development line with changes from its
    remote counterpart. It is useful when you need to reflect changes made by others
    in your local environment.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git pull`：此命令将远程仓库的更改更新到你的本地开发分支。当你需要在本地环境中同步他人做出的更改时，这非常有用。'
- en: '`git push`: This updates the remote repository with commits made locally, ensuring
    that the remote repository reflects your recent changes.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git push`：此命令将本地提交更新到远程仓库，确保远程仓库反映出你的最近更改。'
- en: A basic Git commit-status-push loop example
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基本的 Git 提交状态推送循环示例
- en: 'Let’s start with a practical example of how to use Git locally using the commands
    listed in the *The basics of Git* section. You are free to use the repository
    initialized in the *Creating and cloning a Git repository* section of this chapter
    or to start with a new one:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个实际的例子开始，展示如何在本地使用 Git，使用*Git 基础*部分列出的命令。你可以自由使用本章*创建和克隆 Git 仓库*部分初始化的仓库，也可以从一个新的仓库开始：
- en: 'Set up a GIT identity:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置 GIT 身份：
- en: '[PRE10]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: $ git status
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $ git status
- en: '[PRE11]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: On branch master
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在主分支上
- en: No commits yet
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尚未提交
- en: nothing to commit (create/copy files and use "git add" to track)
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 无需提交（创建/复制文件并使用“git add”进行跟踪）
- en: '[PRE12]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Create a new non-empty file in the working directory:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在工作目录中创建一个新的非空文件：
- en: '[PRE13]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Execute the `git status` command again:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次执行 `git status` 命令：
- en: '[PRE14]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To track modifications, to add the new file, use the `git` `add` command:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要跟踪修改，添加新文件，请使用 `git` `add` 命令：
- en: '[PRE15]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: On branch master
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在主分支上
- en: No commits yet
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尚未提交
- en: 'Changes to be committed:'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 待提交更改：
- en: (use "git rm --cached <file>..." to unstage)
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: （使用 "git rm --cached <file>..." 来取消暂存）
- en: README is now marked as staged because it appears under the Changes to be committed
    section, indicating that it’s ready for the next commit.
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: README 文件现在已被标记为暂存，因为它出现在“待提交更改”部分，表示它已准备好进行下一次提交。
- en: '[PRE16]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'With our staging area prepared as desired, it’s now time to record our changes
    in the repository’s history using `git commit -m "Add the README file"`, whereby
    we specify the modifications that we’ve implemented:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将暂存区准备好，如所需的，现在是时候使用 `git commit -m "添加 README 文件"` 将更改记录到仓库历史中了，这样我们就能指定我们已实现的修改：
- en: '[PRE17]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[master (root-commit) f933b54] Add the README file.'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[master (root-commit) f933b54] 添加 README 文件。'
- en: 1 file changed, 1 insertion(+)
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1 个文件已更改，1 个插入（+）
- en: create mode 100644 README
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建模式 100644 README
- en: '[PRE18]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Git workflows
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Git 工作流
- en: 'The basic Git workflow involves a strategic approach to branching that facilitates
    efficient development and release processes. This strategy includes different
    types of branches:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 基本的 Git 工作流涉及一种战略性分支方法，有助于高效的开发和发布过程。此策略包括不同类型的分支：
- en: '`Main (or Master)`: The foundational branch where production-ready code is
    maintained throughout the project’s life cycle'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Main (或 Master)`：项目生命周期中维护生产就绪代码的基础分支'
- en: '`Develop`: Initiated alongside the main branch, it houses pre-production code
    and features under testing'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Develop`：与主分支一起启动，包含预生产代码和正在测试的功能'
- en: '`Feature`: Employed for developing new features, these branches merge back
    into the `develop` branch upon completion'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Feature`：用于开发新功能，这些分支在完成后会合并回 `develop` 分支'
- en: '`Release`: Dedicated to preparing code for production release'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Release`：专门用于准备代码发布到生产环境'
- en: '`Hotfix`: Addresses urgent fixes directly in the main branch'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Hotfix`：直接在主分支上修复紧急问题'
- en: In this workflow, changes are tracked as commits. They document the history
    of file modifications, including what changed, who changed it, and when. This
    structure not only organizes work effectively but also accelerates the release
    cycle by clearly defining the purpose of each branch and streamlining the integration
    of new features, bug fixes, and releases. *Figure 3**.3* illustrates an example
    of a Git workflow.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在此工作流中，变更通过提交进行跟踪。提交记录了文件修改的历史，包括修改内容、修改者以及修改时间。这种结构不仅有效地组织了工作，还通过明确定义每个分支的目的并简化新特性、修复和发布的整合，加速了发布周期。*图
    3.3* 展示了一个 Git 工作流示例。
- en: '![Figure 3.3 – An example of a Git workflow](img/B22100_03_03.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.3 – Git 工作流示例](img/B22100_03_03.jpg)'
- en: Figure 3.3 – An example of a Git workflow
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.3 – Git 工作流示例
- en: Initially, the content of a repository resides in a default branch. For making
    modifications or additions, it’s recommended to create and work within your own
    branch. This practice ensures that the main code base remains stable while you
    develop features or fixes. Delving deeply into the intricacies of Git, including
    branching, merging, and remote strategies, exceeds the scope of this book. However,
    for those seeking an in-depth exploration, Mastering Git by PACKT, *[3]* in the
    *Further reading* section, offers comprehensive insights into advanced Git concepts.
    It’s an excellent resource for expanding your Git knowledge beyond the basics.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，仓库的内容位于默认分支中。为了进行修改或添加，建议创建并在自己的分支上进行工作。这种做法可以确保主代码库保持稳定，同时开发特性或修复。深入探讨 Git
    的复杂性，如分支、合并和远程策略，超出了本书的范围。然而，对于那些希望深入了解的人，可以参考 PACKT 出版的《Mastering Git》，*第[3]章*
    在*进一步阅读*部分中提供了关于高级 Git 概念的全面见解。这是扩展 Git 知识的极好资源，帮助你超越基础知识。
- en: This section concludes our brief exploration of Git, marking the beginning of
    our journey into GitHub. The upcoming section will introduce and delve into GitHub,
    presenting its significance and utility in the world of GitOps.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 本节结束了我们对 Git 的简要探讨，标志着我们进入 GitHub 之旅的开始。接下来的章节将介绍并深入探讨 GitHub，展示其在 GitOps 世界中的重要性和实用性。
- en: Exploring GitHub
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 GitHub
- en: GitHub is a vital platform in the world of software development, serving as
    a hub for collaborative projects using Git. It extends the functionality of Git
    by providing a web-based graphical interface. GitHub facilitates the hosting of
    both public and private repositories, making it easier for individuals and teams
    to collaborate on projects regardless of their geographical location. Its importance
    lies not just in code storage but also in fostering a community where developers
    can share, contribute to, and build upon each other’s work, enhancing the open
    source development culture.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 是软件开发领域的一个重要平台，作为使用 Git 的协作项目的中心。它通过提供基于 Web 的图形界面，扩展了 Git 的功能。GitHub
    使得托管公共和私有仓库变得更加便捷，便于个人和团队无论地理位置如何都能共同协作。它的重要性不仅仅体现在代码存储上，还在于促进了一个社区，在这个社区中，开发者可以分享、贡献并在彼此的工作基础上进行建设，推动开源开发文化的发展。
- en: Note
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Creating a GitHub account is essential for storing source code on this widely
    used platform. This book will guide you through using GitHub to manage code in
    public and private repositories. Detailed instructions for account creation are
    available on GitHub’s website, where you can find all the information needed to
    get started ([https://github.com/](https://github.com/)).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 GitHub 账户对于在这个广泛使用的平台上存储源代码至关重要。本书将引导你通过使用 GitHub 来管理公共和私有仓库中的代码。有关账户创建的详细说明可以在
    GitHub 网站上找到，你可以在其中找到所有开始使用所需的信息（[https://github.com/](https://github.com/)）。
- en: SSH access offers a secure way to interact with Git repositories, bypassing
    the need for entering a username and password with each command. It’s particularly
    useful for cloning public projects without an account. For forking or pushing
    changes, however, an account is necessary. For detailed setup instructions, refer
    to GitHub’s official SSH access guide ([https://docs.github.com/en/authentication/connecting-to-github-with-ssh](https://docs.github.com/en/authentication/connecting-to-github-with-ssh)).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: SSH 访问提供了一种安全的方式与 Git 仓库进行交互，免去了每次命令输入用户名和密码的需求。它对于无需账户即可克隆公共项目特别有用。然而，对于分叉或推送更改，仍然需要一个账户。有关详细的设置说明，请参阅
    GitHub 官方的 SSH 访问指南（[https://docs.github.com/en/authentication/connecting-to-github-with-ssh](https://docs.github.com/en/authentication/connecting-to-github-with-ssh)）。
- en: GitHub significantly enhances collaborative software development by enabling
    remote teamwork and streamlining processes such as bug tracking and continuous
    integration. Its pull request system bolsters collaboration, facilitating code
    review and merging. Moreover, GitHub serves as a comprehensive code hosting platform,
    supporting both public and private repositories, thus bolstering both open source
    and private projects. This accessibility and integration with development tools
    makes GitHub indispensable for developers worldwide.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub显著提升了协作软件开发，通过支持远程团队合作并简化诸如错误跟踪和持续集成等流程。其拉取请求系统促进了协作，便于代码审查和合并。此外，GitHub作为一个综合的代码托管平台，支持公共和私人仓库，从而增强了开源和私人项目的支持。这种可访问性和与开发工具的集成使得GitHub对全球开发者来说是不可或缺的。
- en: GitHub’s ecosystem
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GitHub的生态系统
- en: 'The GitHub ecosystem is a comprehensive and dynamic environment that extends
    beyond simple code hosting. It encompasses a wide range of tools, integrations,
    community features, and services that support the entire software development
    life cycle. This includes project management tools, issue tracking, continuous
    integration and deployment services, and code review facilities. Additionally,
    GitHub offers a vast community and network of developers contributing to open
    source projects, sharing insights, and collaborating on various initiatives. This
    ecosystem has become an integral part of the software development world, fostering
    innovation and collaboration among developers globally:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub的生态系统是一个全面而动态的环境，超越了简单的代码托管。它涵盖了一系列支持整个软件开发生命周期的工具、集成、社区功能和服务。这些包括项目管理工具、问题跟踪、持续集成和部署服务以及代码审查设施。此外，GitHub还提供了一个庞大的社区和开发者网络，贡献开源项目、分享见解，并在各种项目上进行合作。这个生态系统已经成为软件开发世界的一个重要组成部分，促进了全球开发者之间的创新与合作：
- en: '**Version control**: At its core, GitHub offers Git-based version control for
    managing and tracking code changes'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本控制**：GitHub的核心功能是提供基于Git的版本控制，用于管理和跟踪代码更改'
- en: '**Issue tracking**: It includes tools for reporting and tracking bugs, feature
    requests, and tasks within projects'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**问题跟踪**：包括报告和跟踪项目中的错误、功能请求和任务的工具'
- en: '**Collaboration features**: Features such as pull requests and code reviews
    facilitate collaborative coding and team interaction'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**协作功能**：诸如拉取请求和代码审查等功能促进了协同编程和团队互动'
- en: '**GitHub actions**: For automation of workflows, such as **Continuous Integration
    and Continuous** **Deployment** (**CI/CD**)'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GitHub Actions**：用于自动化工作流，例如**持续集成**和**持续部署**（**CI/CD**）'
- en: '**Project management**: Tools for organizing and prioritizing work, such as
    Projects and Kanban boards'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目管理**：用于组织和优先排序工作的工具，例如项目和看板'
- en: '**Community and networking**: A platform for developers to contribute to open
    source projects, network, and collaborate'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**社区与网络**：为开发者提供一个平台，贡献开源项目、建立网络并进行合作'
- en: '**Marketplace**: Offers third-party apps and integrations to extend GitHub
    functionality'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Marketplace**：提供第三方应用和集成，以扩展GitHub功能'
- en: '**GitHub Pages**: Provides hosting for static websites and documentation directly
    from a GitHub repository'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GitHub Pages**：提供直接从GitHub仓库托管静态网站和文档的服务'
- en: '**Security Features**: Includes features for vulnerability scanning and managing
    access controls'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全功能**：包括漏洞扫描和管理访问控制的功能'
- en: Having gained an understanding of what GitHub is and how to access it, it’s
    time to shift our focus toward practical applications.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解了GitHub是什么以及如何访问之后，现在是时候将我们的注意力转向实际应用了。
- en: GitHub enhances the software development process by integrating tools for better
    code quality, such as command line operations, issue discussions, pull requests,
    and code reviews, alongside a vast array of apps available in the GitHub Marketplace.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub通过集成更好的代码质量工具来增强软件开发流程，例如命令行操作、问题讨论、拉取请求和代码审查，以及GitHub Marketplace中可用的大量应用。
- en: It fosters collaboration through the GitHub flow, enabling developers to efficiently
    manage work within repositories, outline project directions, and seamlessly merge
    updates after thorough discussion and agreement. It thereby transforms the conventional
    methodologies of software construction.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 它通过GitHub flow促进了协作，使开发者能够高效地管理仓库中的工作，概述项目方向，并在彻底讨论和达成一致后无缝合并更新。它从而改变了传统的软件构建方法。
- en: GitHub flow
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GitHub flow
- en: 'The GitHub flow is a branch-based workflow integrating Git commands for global
    teams. It involves creating branches for parallel development, adding commits
    for reversible project points, and using pull requests to foster transparency
    (see the *Git workflow* section in this chapter). Code review is central, thereby
    promoting an open culture. Merging incorporates changes seamlessly, while deployment
    ensures robust code. This workflow adapts to various collaboration scales, from
    small teams to global contributions, emphasizing pull requests for discussion
    and integration. GitHub’s tools replace traditional email reviews, streamlining
    the development process. We can summarize the GitHub Flow in the following steps:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub流程是一种基于分支的工作流程，集成了Git命令，适用于全球团队。它包括为并行开发创建分支，为可逆的项目点添加提交，并使用拉取请求促进透明度（见本章中的*Git工作流*部分）。代码审查是核心，促进了开放文化。合并操作无缝地整合了变更，而部署确保了代码的稳健性。这种工作流程适应了各种协作规模，从小团队到全球贡献，强调拉取请求的讨论和整合。GitHub的工具取代了传统的邮件审查，简化了开发过程。我们可以将GitHub流程总结为以下步骤：
- en: Create a repository. The first thing to do is to create a repository in our
    GitHub space. In the upper corner of any page of each GitHub space, click on **+**
    and then on **New Repository**, as shown in *Figure 3**.4*.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建仓库。首先需要在我们的GitHub空间中创建一个仓库。在GitHub空间的每个页面的右上角，点击**+**，然后点击**新建仓库**，如*图3.4*所示。
- en: '![Figure 3.4 – Creating a new GitHub repository](img/B22100_03_04.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图3.4 – 创建一个新的GitHub仓库](img/B22100_03_04.jpg)'
- en: Figure 3.4 – Creating a new GitHub repository
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.4 – 创建一个新的GitHub仓库
- en: For the repository name, you could choose something such as `gitops-for-k8s-gitops-integration`.
    **Description** is optional. Decide between a private or public repository based
    on your preference for open access or restricted visibility. Ensure that you check
    the **Add a README file** checkbox and then proceed by clicking the **Create repository**
    button, as illustrated in *Figure 3**.5*.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 对于仓库名称，你可以选择像`gitops-for-k8s-gitops-integration`这样的名称。**描述**是可选的。根据你对开放访问或限制可见性的偏好，决定是选择私有仓库还是公共仓库。确保勾选**添加README文件**复选框，然后点击**创建仓库**按钮，如*图3.5*所示。
- en: '![Figure 3.5 – The form for creating a new repository on GitHub](img/B22100_03_05.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![图3.5 – 创建一个新GitHub仓库的表单](img/B22100_03_05.jpg)'
- en: Figure 3.5 – The form for creating a new repository on GitHub
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.5 – 创建一个新GitHub仓库的表单
- en: Create a branch. By default, the created repository has one branch named `main`
    that is considered the one containing production-ready code. Best practices suggest
    using a different `feature` branch for each feature that we want to implement.
    To create a new branch in GitHub, click the `main` item, as shown in *Figure 3**.6*.
    To create the new branch, click on **Create branch features/docker-file-and-ci**,
    as highlighted in *Figure 3**.6*.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建分支。默认情况下，创建的仓库有一个名为`main`的分支，认为它包含生产就绪的代码。最佳实践建议为我们要实现的每个功能使用不同的`feature`分支。要在GitHub中创建新分支，点击`main`项目，如*图3.6*所示。要创建新分支，点击**创建分支
    features/docker-file-and-ci**，如*图3.6*所强调的那样。
- en: '![Figure 3.6 – Creating a new features/docker-file-and-ci feature branch](img/B22100_03_06.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![图3.6 – 创建一个新的features/docker-file-and-ci功能分支](img/B22100_03_06.jpg)'
- en: Figure 3.6 – Creating a new features/docker-file-and-ci feature branch
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.6 – 创建一个新的features/docker-file-and-ci功能分支
- en: Add commits. It’s time to add some useful files to our repository. For this
    exercise, we will use the same Docker file seen in the *Dockerfile* section of
    [*Chapter 2*](B22100_02.xhtml#_idTextAnchor027) of this book. To add a Docker
    file, click the **Add file** button (see *Figure 3**.7*). If you opt for **Create
    new file**, an editor will open where you can paste the Docker file contents and
    commit. Alternatively, selecting **Upload files** allows you to directly upload
    the Docker file from your computer.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加提交。现在是时候向我们的仓库中添加一些有用的文件了。在本练习中，我们将使用本书中[*第2章*](B22100_02.xhtml#_idTextAnchor027)的*Dockerfile*部分中看到的相同Docker文件。要添加Docker文件，请点击**添加文件**按钮（见*图3.7*）。如果选择**创建新文件**，将会打开一个编辑器，在其中粘贴Docker文件内容并提交。另一种选择是选择**上传文件**，直接从你的计算机上传Docker文件。
- en: '![Figure 3.7 – Menu for adding a new file or uploading an existing one](img/B22100_03_07.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![图3.7 – 添加新文件或上传现有文件的菜单](img/B22100_03_07.jpg)'
- en: Figure 3.7 – Menu for adding a new file or uploading an existing one
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.7 – 添加新文件或上传现有文件的菜单
- en: Copy the content of the Docker file and call the file `dockerfile`, as illustrated
    in *Figure 3**.8*. Click on `requirements.txt` file used in the *Dockerfile* section
    of [*Chapter 2*](B22100_02.xhtml#_idTextAnchor027).
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制 Docker 文件的内容并将文件命名为`dockerfile`，如*图 3.8*所示。点击在[*第二章*](B22100_02.xhtml#_idTextAnchor027)的*Dockerfile*部分中使用的`requirements.txt`文件。
- en: '![Figure 3.8 – The GitHub editor interface for editing a repository file](img/B22100_03_08.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.8 – GitHub 编辑器界面用于编辑仓库文件](img/B22100_03_08.jpg)'
- en: Figure 3.8 – The GitHub editor interface for editing a repository file
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.8 – GitHub 编辑器界面用于编辑仓库文件
- en: 'Adopt best practices for commit messages by specifying the action taken, such
    as `Create dockerfile` as a suggested description and commit your changes. On
    the main page, select the `README` file and add the following line at the beginning,
    then commit the changes with the default description:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过指定所采取的操作来采用最佳的提交信息实践，例如`Create dockerfile`作为建议的描述，并提交你的更改。在主页中，选择`README`文件并在文件开头添加以下行，然后使用默认描述提交更改：
- en: '[PRE19]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: See *[2]* in the *Further reading* section for a useful list of commit best
    practices.
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参见* [2]*中的*进一步阅读*部分，了解有关提交最佳实践的有用列表。
- en: Open a pull request. After making changes in a branch off the `main` branch,
    you can initiate a pull request, which is a core element for collaboration in
    GitHub. This feature allows you to suggest changes, seek a review to merge your
    contributions into another branch, and highlight differences in color. You can
    start a discussion with a pull request immediately after committing, even if the
    code isn’t final. Practicing this with a pull request in your repository by merging
    it yourself is an excellent way to familiarize yourself with GitHub’s collaborative
    flow before moving on to bigger projects.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个拉取请求。在`main`分支派生的分支中进行更改后，你可以启动一个拉取请求，这是 GitHub 协作的核心元素。此功能允许你建议更改，寻求审查以将你的贡献合并到另一个分支，并通过颜色突出显示差异。即使代码尚未最终确定，你也可以在提交后立即使用拉取请求开始讨论。在自己的仓库中练习这一操作，通过自己合并来熟悉
    GitHub 的协作流程，是在进行更大项目之前的一个极好的方法。
- en: From the repository’s tab, click on the **Pull requests** tab of our repository
    and click on **New Pull request**. In the **Example Comparison** box, select the
    **features/dockerfile-and-ci** branch to compare with the **main** branch as illustrated
    in *Figure 3**.9*, then click on the **Create pull** **request** button.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在仓库的标签页中，点击仓库的**Pull requests**标签，然后点击**New Pull request**。在**Example Comparison**框中，选择**features/dockerfile-and-ci**分支与**main**分支进行比较，如*图
    3.9*所示，然后点击**Create pull request**按钮。
- en: '![Figure 3.9 – Creating a pull request and select which branches to compare](img/B22100_03_09.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.9 – 创建拉取请求并选择比较的分支](img/B22100_03_09.jpg)'
- en: Figure 3.9 – Creating a pull request and select which branches to compare
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.9 – 创建拉取请求并选择比较的分支
- en: Review the changes in the comparison view at the bottom of the page. If they
    accurately reflect your intended modifications, proceed to create a pull request.
    Assign a title to your pull request and include a concise description of your
    changes, such as detailing the addition of a Docker file and the automation of
    Docker image builds with GitHub Actions. Feel free to enhance your description
    with emojis, images, or GIFs, and then finalize it by creating the pull request.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在页面底部的比较视图中查看更改。如果它们准确反映了你想要的修改，继续创建拉取请求。为你的拉取请求指定一个标题，并简要描述你的更改，比如详细说明添加了一个
    Docker 文件以及使用 GitHub Actions 自动化 Docker 镜像构建。你可以在描述中添加表情符号、图片或 GIF，并通过创建拉取请求来完成。
- en: Discuss and review the code. Starting collaboration involves seeking reviews
    from your peers on pull requests. This step enables collaborators to offer feedback
    or suggest edits before finalizing changes to the `main` branch, ensuring a consensus-driven
    approach to code integration.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 讨论和审查代码。开始协作时，需要从同事那里寻求对拉取请求的审查。此步骤允许协作者在最终合并到`main`分支之前提供反馈或建议修改，从而确保代码集成是以达成共识为基础的。
- en: In the final step, merge your `features/dockerfile-and-ci` branch into the `main`
    branch to add your updates. Should any conflicts between your pull request and
    the `main` branch emerge, GitHub will prompt you to resolve them prior to merging.
    Assuming that there are no conflicts, the merge should be straightforward. To
    complete the process, select `main` branch.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在最后一步，将你的`features/dockerfile-and-ci`分支合并到`main`分支以添加更新。如果你的拉取请求与`main`分支之间出现任何冲突，GitHub
    会提示你在合并之前解决这些冲突。如果没有冲突，合并应该是顺利的。完成此过程后，选择`main`分支。
- en: We’ve introduced the fundamentals of GitHub and GitFlow alongside a hands-on
    example. We encourage you to practice using Git command line tools for cloning
    repositories, as outlined in the *Git repository* section of this chapter. Armed
    with this essential knowledge, we’re poised to delve into integrating GitOps with
    GitHub, specifically for automating Docker deployments with commits.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经介绍了 GitHub 和 GitFlow 的基本概念，并提供了一个动手示例。我们鼓励你按照本章中 *Git 仓库* 部分的指导，使用 Git 命令行工具来克隆仓库。掌握了这些基础知识后，我们准备深入了解将
    GitOps 与 GitHub 集成，特别是通过提交自动化 Docker 部署。
- en: Integrating GitOps and GitHub
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成 GitOps 和 GitHub
- en: GitHub Actions offers a powerful automation tool within the GitHub ecosystem,
    enabling developers to streamline their software development workflows. Specifically,
    a GitHub Action can significantly enhance a GitOps workflow by automating the
    building and pushing of Docker images for services, followed by the deployment
    of new versions to Kubernetes clusters. This capability simplifies the CI/CD processes,
    making it easier for teams to maintain and update their applications efficiently
    in a cloud-native environment.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Actions 提供了一个强大的自动化工具，能够在 GitHub 生态系统内帮助开发人员简化软件开发工作流。具体而言，GitHub Action
    可以显著增强 GitOps 工作流，通过自动构建和推送 Docker 镜像到服务，并随后将新版本部署到 Kubernetes 集群。这一功能简化了 CI/CD
    过程，使团队能够更轻松地在云原生环境中高效维护和更新他们的应用程序。
- en: Best practices suggest that when you want to use this GitHub Action, your GitHub
    repository should have a `dev` and a `master` or `main` branch, and that it should
    use tags for releases. In the following example, for brevity, we will work directly
    in the `main` branch. Best practices suggest working in separate branches.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳实践建议，当你想使用这个 GitHub Action 时，你的 GitHub 仓库应该有一个 `dev` 分支和一个 `master` 或 `main`
    分支，并且应该使用标签进行发布。在以下示例中，为了简便起见，我们将直接在 `main` 分支上工作。最佳实践建议在不同的分支中进行操作。
- en: 'Here are the steps to automate Docker image creation with GitHub Actions:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用 GitHub Actions 自动化 Docker 镜像创建的步骤：
- en: 'Click on **Actions** in the repository’s tab, as shown in *Figure 3**.10*:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击仓库选项卡中的 **Actions**，如 *图 3.10* 所示：
- en: '![Figure 3.10 – The tab menu with the Actions button circled](img/B22100_03_10.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.10 – 以圆圈标出的 Actions 按钮所在的选项卡菜单](img/B22100_03_10.jpg)'
- en: Figure 3.10 – The tab menu with the Actions button circled
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.10 – 以圆圈标出的 Actions 按钮所在的选项卡菜单
- en: 'On the new page, click on **set up a workflow yourself**, as shown in *Figure
    3**.11*:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新页面上，点击 **set up a workflow yourself**，如 *图 3.11* 所示：
- en: '![Figure 3.11 – Manually defining a workflow in GitHub](img/B22100_03_11.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.11 – 在 GitHub 中手动定义工作流](img/B22100_03_11.jpg)'
- en: Figure 3.11 – Manually defining a workflow in GitHub
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.11 – 在 GitHub 中手动定义工作流
- en: 'In the editor, add the following content:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑器中，添加以下内容：
- en: '[PRE20]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The `name` field serves as the identifier for our action. In the `on` section,
    we specify the events that will trigger this action, primarily focusing on specific
    branches. This is usually set to `main`. If you happen to create a new branch
    and want to trigger this action, you’ll need to modify this section accordingly.
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`name` 字段作为我们操作的标识符。在 `on` 部分，我们指定触发该操作的事件，主要关注特定分支。通常设置为 `main`。如果你创建了一个新分支并想触发该操作，你需要相应地修改此部分。'
- en: Within the `jobs` | `build` section, you’ll find the `runs-on` field, which
    specifies the type of GitHub servers that our job will run on. This is distinct
    from the version of our Docker image, which is determined by `Dockerfile`. In
    this case, our Docker image will be based on Ubuntu 20.04\. The Docker image build
    will take place on GitHub servers running `uses` field instructs the workflow
    to perform a checkout of our repository. The `name` field provides a label for
    the step. Finally, the `run` field specifies the command to execute. With this
    configuration, we are prepared for our first build on the Ubuntu 20.04-based Docker
    image.
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 `jobs` | `build` 部分，你会找到 `runs-on` 字段，它指定了我们的任务将在哪种类型的 GitHub 服务器上运行。这与我们的
    Docker 镜像版本不同，后者由 `Dockerfile` 确定。在这个例子中，我们的 Docker 镜像将基于 Ubuntu 20.04。Docker
    镜像的构建将在运行 `uses` 字段指令的 GitHub 服务器上进行，该字段指示工作流执行仓库的检出操作。`name` 字段为该步骤提供一个标签。最后，`run`
    字段指定要执行的命令。通过这种配置，我们准备好在基于 Ubuntu 20.04 的 Docker 镜像上进行第一次构建。
- en: To initiate a new build, we need to introduce a modification to our `main` branch.
    You can easily accomplish this by making a simple comment change to the Docker
    file within the integrated editor on GitHub or editing the `README` file. In *Figure
    3**.12*, the build is triggered from an update to `README`.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了启动新的构建，我们需要对 `main` 分支进行修改。你可以通过在 GitHub 的集成编辑器中对 Docker 文件进行简单的注释更改，或者编辑
    `README` 文件来轻松完成这一操作。在*图 3.12*中，构建是通过更新 `README` 文件触发的。
- en: '![Figure 3.12 – A list of workflows triggered by commits on the Actions page](img/B22100_03_12.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.12 – 提交触发的工作流列表，位于 Actions 页面](img/B22100_03_12.jpg)'
- en: Figure 3.12 – A list of workflows triggered by commits on the Actions page
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.12 – 提交触发的工作流列表，位于 Actions 页面
- en: Once you’ve made the change in your repository, GitHub will automatically detect
    it and initiate a new build. You’ll notice an indicator signaling that the build
    has been triggered.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你在仓库中进行了更改，GitHub 将自动检测到这一变化并启动新的构建。你会看到一个指示符，表示构建已被触发。
- en: To access the build logs, simply click on **build**, as illustrated in *Figure
    3**.13*. This will lead you to the dedicated page for that build. Once on this
    page, you can delve into the individual steps of the build process and review
    the logs associated with each step, as illustrated in *Figure 3**.14*. GitHub
    also provides email notifications in case of build failures, and you can conveniently
    configure your alerting preferences within the GitHub platform.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要访问构建日志，只需点击 **构建**，如*图 3.13*所示。这将引导你到该构建的专用页面。一旦进入该页面，你可以深入了解构建过程的各个步骤，并查看与每个步骤相关的日志，如*图
    3.14*所示。GitHub 还会在构建失败时提供电子邮件通知，你可以方便地在 GitHub 平台中配置你的警报偏好设置。
- en: '![Figure 3.13 – A summary of a successful build](img/B22100_03_13.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.13 – 成功构建的总结](img/B22100_03_13.jpg)'
- en: Figure 3.13 – A summary of a successful build
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.13 – 成功构建的总结
- en: '![Figure 3.14 – Detailed steps of the build process with logs for each step](img/B22100_03_14.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.14 – 构建过程的详细步骤，包含每个步骤的日志](img/B22100_03_14.jpg)'
- en: Figure 3.14 – Detailed steps of the build process with logs for each step
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.14 – 构建过程的详细步骤，包含每个步骤的日志
- en: At this stage, you should have a comprehensive understanding of Git, GitFlow,
    GitHub, and how to develop a CI process that builds a Docker image for each commit.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在此阶段，你应该对 Git、GitFlow、GitHub 以及如何开发 CI 流程以便为每次提交构建 Docker 镜像有一个全面的理解。
- en: Summary
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter delved into the essential role of Git for version control and GitHub
    for collaborative software development within the GitOps framework. It outlined
    the significance of these tools in enhancing team efficiency, automating deployment
    processes, and fostering a robust DevOps culture. Key areas covered include the
    technical requirements for engaging with Git and GitHub, the benefits of VCSs,
    the functionalities of Git and GitHub, and the integration of GitOps practices.
    The chapter concluded with some best practices for utilizing Git and GitHub to
    streamline workflow efficiency.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 本章深入探讨了 Git 在版本控制中的关键作用，以及 GitHub 在 GitOps 框架中对协作软件开发的支持。本文概述了这些工具在提升团队效率、自动化部署流程和促进稳健
    DevOps 文化中的重要性。涉及的关键内容包括使用 Git 和 GitHub 的技术要求、VCS 的好处、Git 和 GitHub 的功能以及 GitOps
    实践的整合。最后，本章总结了一些利用 Git 和 GitHub 精简工作流程效率的最佳实践。
- en: In the upcoming chapters, we will explore additional tools such as Argo CD and
    Flux CD, along with their integration into GitOps, enabling us to complete our
    pipeline with the deployment segment.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将探讨额外的工具，如 Argo CD 和 Flux CD，并将它们与 GitOps 集成，从而使我们能够通过部署环节完善我们的流水线。
- en: Further reading
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入阅读
- en: '[1] [https://git-scm.com/book/en/v2/Getting-Started-Installing-Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[1] [https://git-scm.com/book/en/v2/Getting-Started-Installing-Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)'
- en: '[2] [https://gist.github.com/luismts/495d982e8c5b1a0ced4a57cf3d93cf60](https://gist.github.com/luismts/495d982e8c5b1a0ced4a57cf3d93cf60)'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[2] [https://gist.github.com/luismts/495d982e8c5b1a0ced4a57cf3d93cf60](https://gist.github.com/luismts/495d982e8c5b1a0ced4a57cf3d93cf60)'
- en: '[3] [https://www.packtpub.com/product/mastering-git/9781783553754](https://www.packtpub.com/product/mastering-git/9781783553754)'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[3] [https://www.packtpub.com/product/mastering-git/9781783553754](https://www.packtpub.com/product/mastering-git/9781783553754)'

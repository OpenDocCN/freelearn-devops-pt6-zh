- en: Kubernetes on AWS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS 上的 Kubernetes
- en: 'Using Kubernetes on the public cloud is flexible and scalable for your application.
    AWS is one of the most popular services in the public cloud industry. In this
    chapter, you''ll learn what AWS is and how to set up Kubernetes on AWS along with
    the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在公共云上使用 Kubernetes 对你的应用来说是灵活且可扩展的。AWS 是公共云行业中最受欢迎的服务之一。在本章中，你将学习什么是 AWS 以及如何在
    AWS 上设置 Kubernetes，内容包括以下主题：
- en: Understanding the public cloud
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解公共云
- en: Using and understanding AWS components
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用和理解 AWS 组件
- en: Using Amazon EKS to set up a Kubernetes cluster on AWS
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Amazon EKS 在 AWS 上设置 Kubernetes 集群
- en: Using EKS to manage Kubernetes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 EKS 管理 Kubernetes
- en: Introduction to AWS
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS 简介
- en: When you run your application on the public network, you need an infrastructure
    such as networks, Virtual Machines (VMs), and storage. Obviously, companies borrow
    or build their own data center to prepare those infrastructures, and then hire
    data center engineers and operators to monitor and manage those resources.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在公共网络上运行应用时，你需要基础设施，例如网络、虚拟机（VM）和存储。显然，公司会借用或自建数据中心来准备这些基础设施，然后聘请数据中心工程师和操作员来监控和管理这些资源。
- en: However, purchasing and maintaining those assets requires a large capital expense
    as well as an operational expense for data center engineers/operators. You also
    need a lead time to fully set up those infrastructures, such as buying a server,
    mounting to a data center rack, cabling a network, and then the initial configuration/installation
    of the OS and so on.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，购买和维护这些资产需要巨大的资本支出，以及数据中心工程师/操作员的运营开销。你还需要一定的时间来完全搭建这些基础设施，例如购买服务器、安装到数据中心机架、布设网络电缆，然后进行操作系统的初步配置/安装等。
- en: Consequently, rapidly allocating an infrastructure with appropriate resource
    capacity is one of the important factors that dictates the success of your business.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，迅速分配具有适当资源容量的基础设施是决定企业成功的关键因素之一。
- en: To make infrastructure management easier and quicker, there's a lot that technology
    can do to help data centers, for example, for virtualization, **Software Defined
    Network** (**SDN**) and **Storage Area Network** (**SAN**). But combining this
    technology has some sensitive compatibility issues and is difficult to stabilize;
    therefore it's necessary to hire experts in this industry, which makes operation
    costs higher eventually.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使基础设施管理更加简便和高效，技术能够为数据中心提供很多帮助，例如虚拟化、**软件定义网络**（**SDN**）和**存储区域网络**（**SAN**）。但是，将这些技术结合起来会出现一些敏感的兼容性问题，且难以稳定，因此需要聘请行业专家，这最终会增加运营成本。
- en: Public cloud
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 公共云
- en: There are some companies that have provided an online infrastructure service.
    AWS is a well known service that provides online infrastructure, which is called
    cloud or **public cloud**. Back in the year 2006, AWS officially launched the
    virtual machine service, which was called **Elastic Computing Cloud** (**EC2**);
    an online object store service, which was called **Simple Storage Service** (**S3**);
    and an online messaging queue service, which was called **Simple Queue Service**
    (**SQS**).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些公司已经提供了在线基础设施服务。AWS 是提供在线基础设施的知名服务，称为云或**公共云**。早在 2006 年，AWS 正式推出了虚拟机服务，称为**弹性计算云**（**EC2**）；在线对象存储服务，称为**简单存储服务**（**S3**）；以及在线消息队列服务，称为**简单队列服务**（**SQS**）。
- en: These services are simple enough, but from a data center management point of
    view, they relieve infrastructure pre-allocation and reduce read time, because
    of pay-as-you-go pricing models (paying hourly or yearly for usage to AWS). Consequently,
    AWS is getting so popular that many companies have switched from their own data
    centers to the public cloud.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这些服务足够简单，但从数据中心管理的角度来看，它们减轻了基础设施预分配的压力并缩短了读取时间，因为采用了按需计费模式（按小时或按年向 AWS 付费）。因此，AWS
    越来越受欢迎，许多公司已经从自建数据中心转向了公共云。
- en: An antonym of the public cloud, your own data center is referred to as **on-premises**.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 与公共云相对的，你自己的数据中心被称为**本地部署**。
- en: API and infrastructure as code
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API 和基础设施即代码
- en: 'One of the unique benefits of using a public cloud instead of on-premises data
    centers is that public cloud provides an API to control infrastructure. AWS provides
    command-line tools (**AWS CLI**) to control AWS infrastructure. For example, after
    signing up to AWS ([https://aws.amazon.com/free/](https://aws.amazon.com/free/)),
    install AWS CLI ([http://docs.aws.amazon.com/cli/latest/userguide/installing.html](http://docs.aws.amazon.com/cli/latest/userguide/installing.html));
    then, if you want to launch one virtual machine (EC2 instance), use the AWS CLI
    as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用公共云而非本地数据中心的一个独特优势是，公共云提供了控制基础设施的API。AWS提供命令行工具（**AWS CLI**）来控制AWS基础设施。例如，在注册AWS后（[https://aws.amazon.com/free/](https://aws.amazon.com/free/)），安装AWS
    CLI（[http://docs.aws.amazon.com/cli/latest/userguide/installing.html](http://docs.aws.amazon.com/cli/latest/userguide/installing.html)）；然后，如果你想启动一个虚拟机（EC2实例），可以使用AWS
    CLI，如下所示：
- en: '![](img/851f14a5-046d-4fc1-b37c-930e58b471f9.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/851f14a5-046d-4fc1-b37c-930e58b471f9.png)'
- en: 'As you can see, it only takes a few minutes to access your virtual machine
    after signing up to AWS. On the other hand, what if you set up your own on-premises
    data center from scratch? The following diagram shows a comparison of what happens
    if you use on-premises data centers or if you use the public cloud:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，注册AWS后，只需几分钟即可访问你的虚拟机。另一方面，如果你从头开始建立自己的本地数据中心会怎样呢？以下图表展示了使用本地数据中心和使用公共云的对比：
- en: '![](img/8d22cf5f-a01a-4c42-8608-23e445209f95.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8d22cf5f-a01a-4c42-8608-23e445209f95.png)'
- en: As you can see, the public cloud is very simple and quick; this is why it's
    flexible and convenient, not only for emerging, but also for permanent usage.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，公共云非常简单快捷；这就是它灵活且方便的原因，不仅适合新兴使用，也适合长期使用。
- en: AWS components
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS组件
- en: AWS has some components to configure network and storage. These are important
    for understanding how the public cloud works as well as how to configure Kubernetes.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: AWS有一些组件用于配置网络和存储。这些对于理解公共云的工作原理以及如何配置Kubernetes非常重要。
- en: VPC and subnet
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VPC和子网
- en: On AWS, first of all you need to create your own network. This is called a **Virtual
    Private Cloud** (**VPC**), which uses SDN technology. AWS allows you to create
    one or more VPC on AWS. Each VPC may connect with each other as required. When
    you create a VPC, just define one network CIDR block and AWS region, for example,
    the `10.0.0.0/16` CIDR on `us-east-1`. No matter whether you have access to a
    public network or not, you can define any network address range (between `/16`
    to `/28` netmask range). VPC creation is very quick; once done creating a VPC,
    you need to create one or more subnets within the VPC.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在AWS上，首先你需要创建自己的网络。这被称为**虚拟私有云**（**VPC**），它使用SDN技术。AWS允许你在AWS上创建一个或多个VPC。每个VPC可以根据需要互相连接。当你创建VPC时，只需定义一个网络CIDR块和AWS区域，例如，`10.0.0.0/16`
    CIDR在`us-east-1`上。无论你是否可以访问公共网络，你都可以定义任何网络地址范围（从`/16`到`/28`的子网掩码范围）。VPC创建非常快速；一旦创建完成VPC，你需要在VPC内创建一个或多个子网。
- en: 'In the following example, one VPC is created via the AWS command line:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，通过AWS命令行创建一个VPC：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: A subnet is a logical network block. This must belong to one VPC as well as
    one availability zone, for example, the `vpc-0ca37d4650963adbb` VPC and `us-east-1b`.
    Then, the network CIDR must be within the VPC's CIDR. For example, if the VPC
    CIDR is `10.0.0.0/16` (`10.0.0.0`–`10.0.255.255`), then one subnet CIDR could
    be `10.0.1.0/24` (`10.0.1.0`–`10.0.1.255`).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 子网是一个逻辑网络块。它必须属于一个VPC以及一个可用区，例如，`vpc-0ca37d4650963adbb` VPC 和 `us-east-1b`。然后，网络CIDR必须在VPC的CIDR范围内。例如，如果VPC的CIDR是`10.0.0.0/16`（`10.0.0.0`–`10.0.255.255`），那么一个子网的CIDR可以是`10.0.1.0/24`（`10.0.1.0`–`10.0.1.255`）。
- en: 'In the following example, we''ll create two subnets on the `us-east-1a` availability
    zone and another two subnets on the `us-east-1b` availability zone. Therefore,
    a total of four subnets will be created on `vpc-0ca37d4650963adbb` according to
    the following steps:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，我们将在`us-east-1a`可用区创建两个子网，并在`us-east-1b`可用区创建另外两个子网。因此，按照以下步骤，总共会在`vpc-0ca37d4650963adbb`中创建四个子网：
- en: 'Create the first subnet, `10.0.1.0/24`, on the `us-east-1a` availability zone:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`us-east-1a`可用区创建第一个子网，`10.0.1.0/24`：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create a second subnet, `10.0.2.0/24`, on the `us-east-1b` availability zone:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`us-east-1b`可用区创建第二个子网，`10.0.2.0/24`：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create a third subnet, `10.0."3".0/24`, on `us-east-1b` again:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`us-east-1b`上再次创建第三个子网，`10.0."3".0/24`：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Create a fourth subnet, `10.0.4.0/24`, on `us-east-1a` again:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`us-east-1a`上再次创建第四个子网，`10.0.4.0/24`：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Let's make the first two subnets public-facing ones and the last two subnets
    private ones. This means the public-facing subnet can be accessible from the internet,
    which allows it to have a public IP address. On the other hand, the private subnet
    doesn't have a reachability from the internet. To do that, you need to set up
    gateways and routing tables.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将前两个子网设置为公共子网，将最后两个子网设置为私有子网。这意味着公共子网可以从互联网访问，因此它将具有公共 IP 地址。另一方面，私有子网没有互联网访问能力。为此，你需要设置网关和路由表。
- en: Internet gateways and NAT-GW
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 互联网网关和 NAT-GW
- en: In most cases, your VPC needs to have a connection with the public internet.
    In this case, you need to create an **Internet Gateway** (**IGW**) to attach to
    your VPC.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，你的 VPC 需要与公共互联网连接。在这种情况下，你需要创建一个 **互联网网关** (**IGW**) 并将其附加到你的 VPC。
- en: 'In the following example, an IGW is created and attached to `vpc-0ca37d4650963adbb`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，创建了一个 IGW 并将其附加到 `vpc-0ca37d4650963adbb`：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Once the IGW is attached, set a routing table (default gateway) for a subnet
    that points to the IGW. If a default gateway points to an IGW, this subnet is
    able to have a public IP address and access from/to the internet. Therefore, if
    the default gateway doesn't point to IGW, it's determined as a private subnet,
    which means no public access.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 IGW 被附加，设置指向 IGW 的路由表（默认网关）为子网。如果默认网关指向 IGW，则该子网能够拥有公共 IP 地址并能够访问互联网。因此，如果默认网关不指向
    IGW，则该子网被视为私有子网，意味着没有公共访问。
- en: 'In the following example, a routing table is created that points to IGW and
    is set to the public subnet:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，创建了一个路由表，指向 IGW，并设置为公共子网：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: On the other hand, the private subnet doesn't need a public IP address. However,
    a private subnet sometimes needs to access the internet, for example, to download
    some packages and access the AWS service. In this case, we still have an option
    to connect to the internet. This is called a **Network Address Translation Gateway**
    (**NAT-GW**).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，私有子网不需要公共 IP 地址。然而，私有子网有时需要访问互联网，例如，下载一些软件包和访问 AWS 服务。在这种情况下，我们仍然可以选择连接到互联网。这被称为
    **网络地址转换网关** (**NAT-GW**)。
- en: A NAT-GW allows private subnets to access the public internet through the NAT-GW.
    Consequently, the NAT-GW must be located at a public subnet, and the private subnet
    routing table points to the NAT-GW as a default gateway. Note that in order to
    access a NAT-GW on the public network, it needs an **Elastic IP** (**EIP**) attached
    to the NAT-GW.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: NAT-GW 允许私有子网通过 NAT-GW 访问公共互联网。因此，NAT-GW 必须位于公共子网，并且私有子网的路由表会将 NAT-GW 作为默认网关。请注意，为了能够访问公共网络上的
    NAT-GW，它需要附加一个 **弹性 IP** (**EIP**) 到 NAT-GW。
- en: 'In the following example, a NAT-GW is created:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，创建了一个 NAT-GW：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Unlike an IGW, you can deploy a NAT-GW on single **Availability Zone** (**AZ**).
    If you need a high availability NAT-GW, you need to deploy a NAT-GW on each AZ. However,
    AWS charges you an additional hourly cost for an Elastic IP and NAT-GW. Therefore,
    if you wish to save costs, launch a single NAT-GW on a single AZ, as in the preceding
    example.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 与 IGW 不同，你可以在单个 **可用区** (**AZ**) 部署 NAT-GW。如果你需要高可用性的 NAT-GW，你需要在每个可用区部署 NAT-GW。然而，AWS
    会额外收取弹性 IP 和 NAT-GW 的每小时费用。因此，如果你想节省成本，可以像前面的示例一样在单个可用区部署单个 NAT-GW。
- en: Creating a NAT-GW takes a few minutes. Once it's created, update a private subnet
    routing table that points to the NAT-GW, and then any EC2 instances are able to
    access the internet; again, however, due to no public IP address on the private
    subnet, there's no chance of access from the public internet to the private subnet
    EC2 instances.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 NAT-GW 只需几分钟。创建完成后，更新指向 NAT-GW 的私有子网路由表，然后任何 EC2 实例就可以访问互联网；然而，由于私有子网没有公共
    IP 地址，因此没有机会从公共互联网访问私有子网的 EC2 实例。
- en: 'In the following example, an update routing table for the private subnet points
    to a NAT-GW as the default gateway:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，更新了指向 NAT-GW 的私有子网路由表作为默认网关：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Overall, there are four subnets that have been configured as two public subnets
    and two private subnets. Each subnet has a default route to use IGW and NAT-GW
    as follows. Note that the ID varies because AWS assigns a unique identifier:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，配置了四个子网，其中两个是公共子网，两个是私有子网。每个子网都有一个默认路由，指向 IGW 和 NAT-GW，具体如下。请注意，ID 会有所不同，因为
    AWS 会分配唯一标识符：
- en: '| **Types of subnet** | **CIDR block** | **Availability zone** | **Subnet ID**
    | **Route table ID** | **Default gateway** | **Assign Public IP while EC2 launches**
    |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| **子网类型** | **CIDR块** | **可用区** | **子网ID** | **路由表ID** | **默认网关** | **在EC2启动时分配公共IP**
    |'
- en: '| Public | 10.0.1.0/24 | us-east-1a | `subnet-``09f8f7f06c27cb0a0` | `rtb-``0f45fc46edec61d8f`
    | `igw-``01769bff334dcc035` (IGW) | Yes |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 公有 | 10.0.1.0/24 | us-east-1a | `subnet-``09f8f7f06c27cb0a0` | `rtb-``0f45fc46edec61d8f`
    | `igw-``01769bff334dcc035` (IGW) | 是 |'
- en: '| Private | 10.0.2.0/24 | us-east-1b | `subnet-``04b78ed9b5f96d76e` | `rtb-``08572c332e7e4f14e`
    | `nat-``05e34091f53f10172` (NAT-GW) | No (default) |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 私有 | 10.0.2.0/24 | us-east-1b | `subnet-``04b78ed9b5f96d76e` | `rtb-``08572c332e7e4f14e`
    | `nat-``05e34091f53f10172` (NAT-GW) | 否（默认） |'
- en: '| Public | 10.0.3.0/24 | us-east-1b | `subnet-``026058e32f09c28af` | `rtb-``0f45fc46edec61d8f`
    | `igw-``01769bff334dcc035` (IGW) | Yes |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 公有 | 10.0.3.0/24 | us-east-1b | `subnet-``026058e32f09c28af` | `rtb-``0f45fc46edec61d8f`
    | `igw-``01769bff334dcc035` (IGW) | 是 |'
- en: '| Private | 10.0.4.0/24 | us-east-1a | `subnet-``08e16157c15cefcbc` | `rtb-``08572c332e7e4f14e`
    | `nat-``05e34091f53f10172` (NAT-GW) | No (default) |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 私有 | 10.0.4.0/24 | us-east-1a | `subnet-``08e16157c15cefcbc` | `rtb-``08572c332e7e4f14e`
    | `nat-``05e34091f53f10172` (NAT-GW) | 否（默认） |'
- en: Technically, you can still assign a public IP to a private subnet EC2 instance,
    but there's no default gateway to the internet (IGW). Therefore, a public IP will
    just be wasted and it won't have connectivity from the internet.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术上讲，你仍然可以为私有子网中的EC2实例分配公共IP，但没有默认的互联网网关（IGW）。因此，公共IP将被浪费，并且无法从互联网访问。
- en: Now if you launch an EC2 instance on the public subnet, it becomes public facing,
    so you can serve your application from this subnet.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你在公有子网启动EC2实例，它就会变为公有-facing，所以你可以从这个子网提供你的应用程序。
- en: On the other hand, if you launch an EC2 instance on the private subnet, it can
    still access the internet through the NAT-GW, but there will be no access from
    the internet. However, it can still access it from the EC2 host on the public
    subnet. So, ideally, you can deploy internal services such as databases, middleware,
    and monitoring tools on the private subnet.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果你在私有子网启动EC2实例，它仍然可以通过NAT-GW访问互联网，但无法从互联网访问。不过，它仍然可以从公有子网的EC2主机进行访问。因此，理想情况下，你可以在私有子网上部署内部服务，如数据库、中间件和监控工具。
- en: Security group
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全组
- en: Once VPC and subnets with related gateways/routes are ready, you can create
    EC2 instances. However, at least one access control needs to be created beforehand;
    this is called a **security group**. It can define ingress (incoming network access)
    and egress (outgoing network access) firewall rules.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦VPC和带有相关网关/路由的子网准备好，你就可以创建EC2实例了。然而，至少需要事先创建一个访问控制，这就是所谓的**安全组**。它可以定义入站（传入网络访问）和出站（传出网络访问）防火墙规则。
- en: 'In the following example, a security group and a rule for `public` subnet hosts
    are created that allows SSH from your machine''s IP address, as well as open HTTP
    (`80/tcp`) world-wide:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，创建了一个安全组和一个规则，允许`公有`子网主机从你的机器IP地址进行SSH访问，并且允许开放HTTP（`80/tcp`）全球访问：
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, create a security group for a `private` subnet host that allows SSH from
    the `public` subnet host. In this case, specifying a public subnet security group
    ID (`sg-03973d9109a19e592`) instead of a CIDR block is convenient:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个`私有`子网主机的安全组，允许从`公有`子网主机进行SSH访问。在这种情况下，指定公有子网的安全组ID（`sg-03973d9109a19e592`）而不是CIDR块是方便的：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: When you define a security group for a public subnet, it's highly recommended
    that it's reviewed by a security expert. This is because, once you deploy an EC2
    instance onto the public subnet, it has a public IP address and then everyone
    including crackers and bots are able to access your instances directly.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当你为一个公有子网定义安全组时，强烈建议由安全专家进行审查。这是因为，一旦你将EC2实例部署到公有子网，它就会有一个公共IP地址，届时包括黑客和机器人在内的所有人都能够直接访问你的实例。
- en: 'Overall, there are two security groups that have been created, as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，已经创建了两个安全组，如下所示：
- en: '| **Name** | **Security group ID** | **Allow ssh (22/TCP)** | **Allow HTTP
    (80/TCP)** |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| **名称** | **安全组ID** | **允许SSH（22/TCP）** | **允许HTTP（80/TCP）** |'
- en: '| Public | `sg-03973d9109a19e592` | Your machine `(98.234.106.21)` | `0.0.0.0/0`
    |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| 公有 | `sg-03973d9109a19e592` | 你的机器 `(98.234.106.21)` | `0.0.0.0/0` |'
- en: '| Private | `sg-0f4058a729e2c207e` | `public sg (sg-03973d9109a19e592)` | `public
    sg (sg-03973d9109a19e592)` |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| 私有 | `sg-0f4058a729e2c207e` | `公共sg (sg-03973d9109a19e592)` | `公共sg (sg-03973d9109a19e592)`
    |'
- en: EC2 and EBS
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: EC2和EBS
- en: EC2 is one important service in AWS that you can use to launch a VM on your
    VPC. Based on hardware spec (CPU, memory, and network), there are several types
    of EC2 instances that are available on AWS. When you launch an EC2 instance, you
    need to specify VPC, subnet, security group, and SSH keypair. Consequently, all
    of these must be created beforehand.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: EC2 是 AWS 中一项重要服务，您可以使用它在您的 VPC 上启动虚拟机（VM）。根据硬件规格（CPU、内存和网络），AWS 提供了几种类型的 EC2
    实例。在启动 EC2 实例时，您需要指定 VPC、子网、安全组和 SSH 密钥对。因此，所有这些必须事先创建。
- en: 'Because of previous examples, the only last step is `ssh-keypair`. Let''s make
    `ssh-keypair`:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 根据之前的示例，最后一步是 `ssh-keypair`。让我们创建 `ssh-keypair`：
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'After a few minutes, check the EC2 instance''s status on the AWS web console;
    this shows a `public` subnet host that has a public IP address. On the other hand,
    a private subnet host doesn''t have a public IP address:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 几分钟后，在 AWS Web 控制台上检查 EC2 实例的状态；这将显示一个具有公共 IP 地址的 `public` 子网主机。另一方面，私有子网主机没有公共
    IP 地址：
- en: '![](img/2fe63571-abd1-42bd-bc2e-a14fe5cf10cd.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2fe63571-abd1-42bd-bc2e-a14fe5cf10cd.png)'
- en: 'Let''s use your SSH private key to log in to the EC2 instance using the IPv4
    public IP address, as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用您的 SSH 私钥通过 IPv4 公共 IP 地址登录到 EC2 实例，具体步骤如下：
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now you''re in the public subnet host (`54.208.77.168`), but this host also
    has an internal (private) IP address because it''s deployed in the `10.0.1.0/24`
    subnet, therefore the private address range must be `10.0.1.1`—`10.0.1.254`:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您在公共子网主机（`54.208.77.168`）上，但该主机也有一个内部（私有）IP 地址，因为它部署在 `10.0.1.0/24` 子网中，因此私有地址范围必须是
    `10.0.1.1`—`10.0.1.254`：
- en: '[PRE13]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Let''s install the `nginx` web server on the public host as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在公共主机上安装 `nginx` Web 服务器，具体步骤如下：
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then, go back to your machine and check the website for `54.208.77.168`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，返回您的机器并检查 `54.208.77.168` 网站：
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In addition, within the same VPC, there''s reachability for other availability
    zones; therefore, you can SSH from the EC2 host on the public subnet to the private
    subnet host (`10.0.2.116`). Note that we''re using the `ssh -A` option that forwards
    `ssh-agent`, so there''s no need to create a `~/.ssh/id_rsa` file on the EC2 host:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在同一 VPC 内，其他可用区之间是可以互相访问的；因此，您可以从公共子网中的 EC2 主机通过 SSH 访问私有子网主机（`10.0.2.116`）。请注意，我们使用了
    `ssh -A` 选项来转发 `ssh-agent`，因此无需在 EC2 主机上创建 `~/.ssh/id_rsa` 文件：
- en: '[PRE16]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In addition to EC2, there's another important functionality named disk management.
    AWS provides a flexible disk management service called **Elastic Block Store**
    (**EBS**). You may create one or more persistent data storage that can attach
    to an EC2 instance. From an EC2 point of view, EBS is one of HDD/SSD. Once you
    terminate (delete) an EC2 instance, EBS and its contents may remain and then reattach
    to another EC2 instance.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 EC2，AWS 还有另一项重要功能，名为磁盘管理。AWS 提供了一个灵活的磁盘管理服务，称为 **弹性块存储**（**EBS**）。您可以创建一个或多个持久数据存储，并将其附加到
    EC2 实例。从 EC2 的角度来看，EBS 是一种硬盘（HDD/SSD）。一旦您终止（删除）EC2 实例，EBS 及其内容可能会保留，并可以重新附加到另一个
    EC2 实例。
- en: 'In the following example, one volume that has 40 GB capacity is created and
    then attached to a public subnet host (instance ID, `i-0f2750f65dd857e54`):'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，创建了一个容量为 40 GB 的卷，并将其附加到公共子网主机（实例 ID 为 `i-0f2750f65dd857e54`）：
- en: '[PRE17]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'After attaching the EBS volume to the EC2 instance, the Linux kernel recognizes
    `/dev/xvdh` as specified, and then you need to do partitioning in order to use
    this device, as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在将 EBS 卷附加到 EC2 实例后，Linux 内核会识别 `/dev/xvdh`，然后您需要进行分区才能使用该设备，具体步骤如下：
- en: '![](img/455be1b3-53f8-42c3-ac89-885db824cd05.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/455be1b3-53f8-42c3-ac89-885db824cd05.png)'
- en: 'In this example, we made one partition as `/dev/xvdh1`, so you can create a
    filesystem in `ext4` format on `/dev/xvdh1` and then you can mount to use this
    device on an EC2 instance:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们将一个分区命名为 `/dev/xvdh1`，因此您可以在 `/dev/xvdh1` 上创建一个 ext4 格式的文件系统，然后可以将其挂载以在
    EC2 实例上使用该设备：
- en: '![](img/99c77560-f363-4c26-b0ec-f5ff734a8252.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/99c77560-f363-4c26-b0ec-f5ff734a8252.png)'
- en: 'After unmounting the volume, you are free to detach this volume and then re-attach
    it whenever needed:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 卸载卷后，您可以自由地分离此卷，并在需要时重新附加它：
- en: '[PRE18]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: ELB
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ELB
- en: AWS provides a powerful software-based load balancer called **classic load balancer**.
    This was known as **Elastic Load Balancer** (**ELB**), which allows you to load
    balance network traffic to one or multiple EC2 instances. In addition, ELB can
    offload SSL/TLS encryption/decryption and it supports multi-availability zone.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 提供了一个强大的基于软件的负载均衡器，称为 **经典负载均衡器**。这个负载均衡器之前被称为 **弹性负载均衡器**（**ELB**），它可以将网络流量负载均衡到一个或多个
    EC2 实例。此外，ELB 还可以卸载 SSL/TLS 加密/解密，并支持多可用区。
- en: 'So, why is it a classic load balancer in particular? This is because AWS introduced
    new types of load balancers: network load balancer (for L4) and application load
    balancer (for L7). Therefore, ELB became classic. However, while ELB is stable
    and robust, Amazon EKS will use load balancer by default, so we keep using ELB.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，为什么特别是经典负载均衡器（ELB）呢？这是因为AWS引入了新的负载均衡器类型：网络负载均衡器（用于L4）和应用负载均衡器（用于L7）。因此，ELB成为了经典负载均衡器。然而，虽然ELB稳定且可靠，Amazon
    EKS默认使用负载均衡器，所以我们继续使用ELB。
- en: 'In the following example, an ELB is created and associated with a public subnet
    host, `nginx` (`80/TCP`). Because ELB also needs a security group, create a new
    one for this, first:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，创建了一个ELB并与公共子网主机`nginx`（`80/TCP`）关联。因为ELB也需要一个安全组，所以首先为此创建一个新的安全组：
- en: '[PRE19]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Overall, we''ve discussed how to configure AWS components. The following is
    a summary and diagram about major components and relationships:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 总体来说，我们讨论了如何配置AWS组件。以下是关于主要组件及其关系的总结和图示：
- en: One VPC that has an **Internet Gateway** (**IGW**)
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个具有**Internet Gateway**（**IGW**）的VPC
- en: Two subnets (public and private) on `us-east-1a`
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`us-east-1a`上的两个子网（公共和私有）
- en: Two subnets (public and private) on `us-east-1b`
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`us-east-1b`上的两个子网（公共和私有）
- en: One NAT-GW
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个NAT-GW
- en: One public EC2 instance on public subnet with EBS
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个在公共子网中，带有EBS的公共EC2实例
- en: One private EC2 instance on private subnet
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个私有子网中的私有EC2实例
- en: ELB that forwards the traffic to a public EC2 instance
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ELB将流量转发到公共EC2实例
- en: '![](img/842d8b03-f45c-405b-a3ac-e006629cce9d.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/842d8b03-f45c-405b-a3ac-e006629cce9d.png)'
- en: Amazon EKS
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Amazon EKS
- en: We've discussed some AWS components that are quite easy for setting up networks,
    virtual machines, storage, and load balancers. Consequently, there are a variety
    of ways to set up Kubernetes on AWS such as kubeadm ([https://github.com/kubernetes/kubeadm](https://github.com/kubernetes/kubeadm)),
    kops ([https://github.com/kubernetes/kops](https://github.com/kubernetes/kops)),
    and kubespray ([https://github.com/kubernetes-sigs/kubespray](https://github.com/kubernetes-sigs/kubespray)).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了一些AWS组件，这些组件非常容易用于设置网络、虚拟机、存储和负载均衡器。因此，有多种方式可以在AWS上设置Kubernetes，例如kubeadm
    ([https://github.com/kubernetes/kubeadm](https://github.com/kubernetes/kubeadm))，kops
    ([https://github.com/kubernetes/kops](https://github.com/kubernetes/kops))和kubespray
    ([https://github.com/kubernetes-sigs/kubespray](https://github.com/kubernetes-sigs/kubespray))。
- en: In addition, since June 2018, AWS starts to provide a new Service, which is
    called Amazon Elastic Container Service for Kubernetes ([https://aws.amazon.com/eks/](https://aws.amazon.com/eks/)),
    in short **EKS**. This is similar to Google Kubernetes Engine ([https://cloud.google.com/kubernetes-engine/](https://cloud.google.com/kubernetes-engine/))
    and Azure Kubernetes Service ([https://docs.microsoft.com/en-us/azure/aks/](https://docs.microsoft.com/en-us/azure/aks/)),
    the managed Kubernetes service.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，自2018年6月起，AWS开始提供一个新服务，称为Amazon Elastic Container Service for Kubernetes（[https://aws.amazon.com/eks/](https://aws.amazon.com/eks/)），简称**EKS**。这类似于Google
    Kubernetes Engine（[https://cloud.google.com/kubernetes-engine/](https://cloud.google.com/kubernetes-engine/)）和Azure
    Kubernetes Service（[https://docs.microsoft.com/en-us/azure/aks/](https://docs.microsoft.com/en-us/azure/aks/)），这是一个托管的Kubernetes服务。
- en: AWS also provides another container orchestration service that's called Amazon
    **Elastic Container Service** (**ECS**) [https://aws.amazon.com/ecs/](https://aws.amazon.com/ecs/).
    AWS ECS isn't a Kubernetes service, but it's fully integrated into AWS components
    to launch your container application.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: AWS还提供了另一个容器编排服务，叫做Amazon **Elastic Container Service**（**ECS**）[https://aws.amazon.com/ecs/](https://aws.amazon.com/ecs/)。AWS
    ECS不是Kubernetes服务，但它完全与AWS组件集成，用于启动你的容器应用程序。
- en: AWS EKS uses AWS components such as VPC, security groups, EC2 instance, EBS,
    ELB, IAM, and so on, to set up a Kubernetes cluster. This also manages the Kubernetes
    cluster that patches and replaces the problematic component 24/7\. As a result
    of the constant management, the user will offload the efforts of installation,
    configuration and monitoring to the Kubenetes cluster, while only needing to pay
    AWS on an hourly basis.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: AWS EKS使用AWS组件，如VPC、安全组、EC2实例、EBS、ELB、IAM等，来设置Kubernetes集群。这还会管理Kubernetes集群，自动修补并替换有问题的组件，全天候运行。由于持续管理，用户将把安装、配置和监控的工作交给Kubernetes集群，而只需要按小时付费给AWS。
- en: It's beneficial for the user that AWS provides a fully tested combination of
    AWS components and Kubernetes versions. This means that the user can start to
    use the production grade of Kubernetes on AWS within minutes.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 对用户来说，AWS提供了一组经过充分测试的AWS组件和Kubernetes版本的组合，这非常有益。这意味着用户可以在几分钟内开始在AWS上使用生产级的Kubernetes。
- en: Let's explore AWS EKS to learn how AWS integrates Kubernetes into AWS components.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索 AWS EKS，了解 AWS 如何将 Kubernetes 集成到 AWS 组件中。
- en: Deep dive into AWS EKS
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入了解 AWS EKS
- en: 'AWS EKS has two main components. These components are as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: AWS EKS 有两个主要组件。它们如下所示：
- en: Control plane
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制平面
- en: Worker nodes
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作节点
- en: Control Plane is the managed Kubernetes master by AWS, which includes an `etcd`
    database. AWS helps to deploy the Kubernetes master on multiple availability zones.
    A user can monitor and access the control plane via the AWS Web Console or AWS
    CLI. As well as this, a user can gain access to Kubernetes API server via Kubernetes
    clients such as the `kubectl` command.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 控制平面是由 AWS 管理的 Kubernetes 主节点，其中包括一个 `etcd` 数据库。AWS 帮助在多个可用区上部署 Kubernetes 主节点。用户可以通过
    AWS Web 控制台或 AWS CLI 监控和访问控制平面。此外，用户还可以通过 Kubernetes 客户端（如 `kubectl` 命令）访问 Kubernetes
    API 服务器。
- en: As of December 2018, AWS only provides a custom **Amazon Machine Images** (**AMI**)
    for worker nodes. AWS provides neither Web Console nor AWS CLI to create and configure
    the worker nodes yet. Therefore, the user needs to use that AMI to launch EC2
    instance(s) to configure worker nodes manually.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 截至 2018 年 12 月，AWS 仅为工作节点提供了自定义 **Amazon 机器映像** (**AMI**)。AWS 目前不提供 Web 控制台或
    AWS CLI 来创建和配置工作节点。因此，用户需要使用该 AMI 启动 EC2 实例并手动配置工作节点。
- en: Amazon and Weaveworks made an open source project named `eksctl` ([https://eksctl.io/](https://eksctl.io/)).
    It's easier to deploy an EKS cluster than AWS CLI and some manual steps.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊和 Weaveworks 合作开发了一个名为 `eksctl` 的开源项目（[https://eksctl.io/](https://eksctl.io/)）。使用它比使用
    AWS CLI 和一些手动步骤部署 EKS 集群更容易。
- en: If you have difficulty understanding AWS basics and EKS provisioning, it's recommended
    to use `eksctl` instead.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在理解 AWS 基础知识和 EKS 配置方面有困难，建议使用 `eksctl`。
- en: 'Fortunately, AWS provides a CloudFormation template that''s easy to use to
    launch and configure worker nodes, so let''s extend the previous example of VPC
    to set up Amazon EKS. To do that, you need to prepare the following settings beforehand:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，AWS 提供了一个易于使用的 CloudFormation 模板来启动和配置工作节点，因此让我们扩展先前的 VPC 示例来设置 Amazon
    EKS。为此，你需要提前准备以下设置：
- en: 'Set up the IAM Service Role (defines which AWS user can create EKS resources)
    as follows:'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按如下方式设置 IAM 服务角色（定义哪个 AWS 用户可以创建 EKS 资源）：
- en: '[PRE20]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Set up the security group (assign to `Control Plane`, then worker nodes use
    this security group to allow access from `Control Plane`):'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置安全组（分配给 `控制平面`，然后工作节点使用此安全组来允许来自 `控制平面` 的访问）：
- en: '[PRE21]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Tag this to a private subnet (to tell Internal ELB that this is a private subnet):'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将此标签添加到私有子网（以告知内部 ELB 这是一个私有子网）：
- en: '[PRE22]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Launching the EKS control plane
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动 EKS 控制平面
- en: 'The EKS control plane is a managed Kubernetes master; you just need to use
    the AWS CLI to specify your IAM, subnets, and security group. This example also
    specifies the Kubernetes version as 1.10:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: EKS 控制平面是一个托管的 Kubernetes 主节点；你只需使用 AWS CLI 指定你的 IAM、子网和安全组。此示例还指定了 Kubernetes
    版本为 1.10：
- en: '[PRE23]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This takes around 10 minutes to complete. You can check the status by typing
    `aws eks describe-cluster --name chap10`. Once your control plane status is `ACTIVE`,
    you can start to set up `kubeconfig` to access your Kubernetes API server.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此过程大约需要 10 分钟。你可以通过输入 `aws eks describe-cluster --name chap10` 检查状态。一旦控制平面状态为
    `ACTIVE`，就可以开始设置 `kubeconfig` 来访问 Kubernetes API 服务器。
- en: However, AWS integrates Kubernetes API access control with AWS IAM credentials.
    So, you need to use `aws-iam-authenticator` ([https://github.com/kubernetes-sigs/aws-iam-authenticator](https://github.com/kubernetes-sigs/aws-iam-authenticator))
    to generate a token when you run the `kubectl` command.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，AWS 将 Kubernetes API 访问控制与 AWS IAM 凭证集成。因此，你需要使用 `aws-iam-authenticator`
    ([https://github.com/kubernetes-sigs/aws-iam-authenticator](https://github.com/kubernetes-sigs/aws-iam-authenticator))
    在运行 `kubectl` 命令时生成令牌。
- en: 'This simply downloads an `aws-iam-authenticator` binary and installs it to
    the default command search path (for example, `/usr/local/bin`), then verifies
    whether `aws-iam-authenticator` works or not, using the following command:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这仅仅是下载一个 `aws-iam-authenticator` 二进制文件，并将其安装到默认命令搜索路径（例如 `/usr/local/bin`），然后通过以下命令验证
    `aws-iam-authenticator` 是否有效：
- en: '[PRE24]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'If you see the `authenticator` token, run the AWS CLI to generate `kubeconfig`,
    as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果看到 `authenticator` 令牌，请运行 AWS CLI 来生成 `kubeconfig`，如下所示：
- en: '[PRE25]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If you succeed in creating `kubeconfig`, you can check whether you can access
    the Kubernetes master using the `kubectl` command, as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果成功创建 `kubeconfig`，可以使用 `kubectl` 命令检查是否可以访问 Kubernetes 主节点，方法如下：
- en: '[PRE26]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: At this moment, you don't see any Kubernetes nodes (`kubectl get nodes` returns
    empty). So, you need one more step to add worker nodes (Kubernetes nodes).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你不会看到任何 Kubernetes 节点（`kubectl get nodes` 返回空结果）。所以，你需要进一步添加工作节点（Kubernetes
    节点）。
- en: You must use the same IAM user that creates a control plane and access the API
    server with `aws-iam-authenticator`. For example, it won't work if you create
    an EKS control plane by the AWS root account and then access the API server through
    one of the IAM users. You can see an error such as You must be logged in to the
    server (Unauthorized) when using kubectl.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须使用与创建控制平面相同的 IAM 用户，并通过 `aws-iam-authenticator` 访问 API 服务器。例如，如果你通过 AWS 根账户创建了
    EKS 控制平面，然后再通过某个 IAM 用户访问 API 服务器，是无法正常工作的。使用 kubectl 时，你可能会看到类似 “必须登录到服务器（未经授权）”
    的错误。
- en: Adding worker nodes
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加工作节点
- en: As discussed, AWS doesn't allow the AWS CLI to set up EKS worker nodes. Instead,
    use CloudFormation. This creates the necessary AWS component for worker nodes,
    such as security groups, AutoScaling groups, and IAM Instance Roles. Furthermore,
    the Kubernetes master needs an IAM Instance Role when a worker node joins the
    Kubernetes cluster. It's highly recommended to use the CloudFormation template
    to launch worker nodes.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如讨论所述，AWS 不允许 AWS CLI 设置 EKS 工作节点。相反，请使用 CloudFormation。这将为工作节点创建必要的 AWS 组件，如安全组、自动伸缩组和
    IAM 实例角色。此外，当工作节点加入 Kubernetes 集群时，Kubernetes 主节点需要一个 IAM 实例角色。强烈推荐使用 CloudFormation
    模板启动工作节点。
- en: 'CloudFormation execution steps are simple and follow the AWS EKS documentation, [https://docs.aws.amazon.com/eks/latest/userguide/launch-workers.html](https://docs.aws.amazon.com/eks/latest/userguide/launch-workers.html).
    Use the S3 template URL, [https://amazon-eks.s3-us-west-2.amazonaws.com/cloudformation/2018-12-10/amazon-eks-nodegroup.yaml](https://amazon-eks.s3-us-west-2.amazonaws.com/cloudformation/2018-12-10/amazon-eks-nodegroup.yaml),
    and then specify the parameters as in the following example:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: CloudFormation 执行步骤简单，并遵循 AWS EKS 文档，[https://docs.aws.amazon.com/eks/latest/userguide/launch-workers.html](https://docs.aws.amazon.com/eks/latest/userguide/launch-workers.html)。使用
    S3 模板 URL，[https://amazon-eks.s3-us-west-2.amazonaws.com/cloudformation/2018-12-10/amazon-eks-nodegroup.yaml](https://amazon-eks.s3-us-west-2.amazonaws.com/cloudformation/2018-12-10/amazon-eks-nodegroup.yaml)，然后根据以下示例指定参数：
- en: '| **Parameter** | **Value** |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| **参数** | **值** |'
- en: '| `Stack name` | `chap10-worker` |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| `Stack name` | `chap10-worker` |'
- en: '| `ClusterName` | `chap10 (must be match to EKS control plane name)` |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| `ClusterName` | `chap10 (必须与 EKS 控制平面名称匹配)` |'
- en: '| `ClusterControlPlaneSecurityGroup` | `sg-0fbac0a39bf64ba10 (eks-control-plane)`
    |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| `ClusterControlPlaneSecurityGroup` | `sg-0fbac0a39bf64ba10 (eks-control-plane)`
    |'
- en: '| `NodeGroupName` | `chap10 EKS worker node (any name)` |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| `NodeGroupName` | `chap10 EKS 工作节点（任何名称）` |'
- en: '| `NodeImageId` | `ami-027792c3cc6de7b5b (version 1.10.x)` |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| `NodeImageId` | `ami-027792c3cc6de7b5b (版本 1.10.x)` |'
- en: '| `KeyName` | `my-key` |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| `KeyName` | `my-key` |'
- en: '| `VpcId` | `vpc-0ca37d4650963adbb` |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| `VpcId` | `vpc-0ca37d4650963adbb` |'
- en: '| `Subnets` |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| `Subnets` |'
- en: '`subnet-04b78ed9b5f96d76e (10.0.2.0/24)`'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`subnet-04b78ed9b5f96d76e (10.0.2.0/24)`'
- en: '`subnet-08e16157c15cefcbc (10.0.4.0/24)`'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`subnet-08e16157c15cefcbc (10.0.4.0/24)`'
- en: '**Note**: only private subnets |'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：仅限私有子网 |'
- en: 'CloudFormation execution takes around five minutes to complete, and then you
    need to get the `NodeInstanceRole` value from Outputs, as follows:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: CloudFormation 执行大约需要五分钟，完成后，你需要从输出中获取 `NodeInstanceRole` 的值，如下所示：
- en: '![](img/c444c84d-3fe8-4ff8-8db2-ca05f93e4419.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c444c84d-3fe8-4ff8-8db2-ca05f93e4419.png)'
- en: 'Finally, you can add these nodes to your Kubernetes cluster by adding `ConfigMap`.
    You can download a `ConfigMap` template from [https://amazon-eks.s3-us-west-2.amazonaws.com/cloudformation/2018-12-10/aws-auth-cm.yaml](https://amazon-eks.s3-us-west-2.amazonaws.com/cloudformation/2018-12-10/aws-auth-cm.yaml)
    and then fill out the Instance Role ARN, as in this example:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可以通过添加 `ConfigMap` 将这些节点添加到 Kubernetes 集群中。你可以从 [https://amazon-eks.s3-us-west-2.amazonaws.com/cloudformation/2018-12-10/aws-auth-cm.yaml](https://amazon-eks.s3-us-west-2.amazonaws.com/cloudformation/2018-12-10/aws-auth-cm.yaml)
    下载 `ConfigMap` 模板，然后填写实例角色 ARN，示例如下：
- en: '[PRE27]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'After a few minutes, the worker nodes will be registered to your Kubernetes
    master, as follows:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 几分钟后，工作节点将注册到你的 Kubernetes 主节点，如下所示：
- en: '[PRE28]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Now you can start to use your own Kubernetes cluster on AWS. Deploy your application
    to take a look at this. Note that, based on the preceding instruction, we deployed
    the worker nodes on a private subnet, so if you want to deploy an internet-facing
    Kubernetes Service, you need to use `type:LoadBalancer`. We'll explore this in
    the next section.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以开始在 AWS 上使用自己的 Kubernetes 集群。将你的应用程序部署到集群中查看效果。请注意，基于之前的指示，我们将工作节点部署在私有子网中，因此如果你想部署一个面向互联网的
    Kubernetes 服务，你需要使用 `type:LoadBalancer`。我们将在下一节中探讨这个问题。
- en: Cloud provider on EKS
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: EKS 上的云提供商
- en: AWS EKS integrates Kubernetes cloud provider into AWS components, for instance,
    elastic load balancer and Elastic Block Store. This section explores how EKS integrates
    into AWS components.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: AWS EKS 将 Kubernetes 云提供商集成到 AWS 组件中，例如弹性负载均衡器和弹性块存储。本节将探讨 EKS 如何集成到 AWS 组件中。
- en: Storage class
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存储类
- en: 'As of December 2018, if you deploy Kubernetes version 1.10, EKS doesn''t create
    storage classes by default. On the other hand, in version 1.11 or above, EKS creates
    default storage classes automatically. Using the following command, you can check
    whether a storage class exists or not:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 自 2018 年 12 月起，如果你部署的是 Kubernetes 1.10 版本，EKS 默认不创建存储类。而在 1.11 版本或以上，EKS 会自动创建默认存储类。你可以使用以下命令检查存储类是否存在：
- en: '[PRE29]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In this case, you need to create a storage class to make a storage class. Note
    that AWS EBS and EC2 are zone sensitive. Therefore, EBS and EC2 must be located
    on the same availability zone. Therefore, it''s recommended to create `StorageClass`
    for each availability zone as follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，你需要创建一个存储类以生成存储类。请注意，AWS EBS 和 EC2 是区域敏感的。因此，EBS 和 EC2 必须位于相同的可用区。因此，建议为每个可用区创建如下的
    `StorageClass`：
- en: '[PRE30]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '`PersistentVolumeClaim` can then specify either `gp2-us-east-1a` or `gp2-us-east-1b`
    storage class to provision the persistent volume:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`PersistentVolumeClaim` 然后可以指定 `gp2-us-east-1a` 或 `gp2-us-east-1b` 存储类来配置持久卷：'
- en: '[PRE31]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Note that worker nodes have a label of `failure-domain.beta.kubernetes.io/zone`,
    so you can specify a `nodeSelector` to deploy the pod to the desired availability
    zone:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，工作节点有一个 `failure-domain.beta.kubernetes.io/zone` 标签，因此你可以指定 `nodeSelector`
    将 Pod 部署到所需的可用区：
- en: '[PRE32]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Load balancer
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 负载均衡器
- en: EKS also integrates Kubernetes Service into classic load balancer (also known
    as ELB). When you create a Kubernetes Service by specifying `type:LoadBalancer`,
    EKS creates the Classic ELB instance and security group, and then associates between
    ELB and worker nodes automatically.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: EKS 还将 Kubernetes 服务集成到经典负载均衡器（也称为 ELB）中。当你通过指定 `type:LoadBalancer` 创建 Kubernetes
    服务时，EKS 会创建经典 ELB 实例和安全组，然后自动将 ELB 与工作节点关联。
- en: In addition, you can either create an internet-facing (on the public subnet)
    or internal (on the private subnet) load balancer. If you don't need to serve
    traffic to the external internet, you should use an internal load balancer for
    security reasons.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你可以创建一个面向互联网的负载均衡器（位于公共子网）或内部负载均衡器（位于私有子网）。如果不需要为外部互联网提供流量服务，出于安全考虑，你应该使用内部负载均衡器。
- en: Internal load balancer
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内部负载均衡器
- en: 'Let''s create an internal load balancer for the previous `nginx` pod. In order
    to use an internal load balancer, you need to add an annotation (`service.beta.kubernetes.io/aws-load-balancer-internal:
    0.0.0.0/0`), as follows:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们为之前的 `nginx` Pod 创建一个内部负载均衡器。为了使用内部负载均衡器，你需要添加注释 (`service.beta.kubernetes.io/aws-load-balancer-internal:
    0.0.0.0/0`)，如下所示：'
- en: '[PRE34]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Then, the EKS Cloud provider will create and configure a classic ELB as in
    the following screenshot:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，EKS 云提供商将创建并配置一个经典 ELB，如下图所示：
- en: '![](img/ee2077b8-085d-41de-a5c0-dd8f91cb9ff0.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ee2077b8-085d-41de-a5c0-dd8f91cb9ff0.png)'
- en: Since it's an internal ELB, you can't gain access to the ELB from outside of
    the AWS network, for example, from your laptop. However, it's useful to expose
    your application to the outside of the Kubernetes cluster within VPC.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一个内部 ELB，你无法从 AWS 网络外部访问 ELB，例如，从你的笔记本电脑访问。然而，它对于在 VPC 内部将应用程序暴露到 Kubernetes
    集群外部是有用的。
- en: The AWS charges ELB per hour. If your Kubernetes Service serves within Kubernetes
    cluster pods, you may consider using `type:ClusterIP`.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 按小时收费 ELB。如果你的 Kubernetes 服务只在 Kubernetes 集群中的 Pods 内部提供服务，你可以考虑使用 `type:ClusterIP`。
- en: Internet-facing load balancer
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 面向互联网的负载均衡器
- en: 'Creating an internet-facing load balancer consists of the same steps as an
    internal load balancer, but there''s no need for an annotation (`service.beta.kubernetes.io/aws-load-balancer-internal:
    0.0.0.0/0`):'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '创建面向互联网的负载均衡器与创建内部负载均衡器的步骤相同，但不需要注释 (`service.beta.kubernetes.io/aws-load-balancer-internal:
    0.0.0.0/0`)：'
- en: '[PRE35]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'When you check the AWS Web Console, you can see that Scheme is internet-facing
    as follows:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 当你检查 AWS Web 控制台时，你可以看到 Scheme 是面向互联网的，如下所示：
- en: '![](img/b03609b5-46cc-4e08-abae-f62750bd4384.png)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b03609b5-46cc-4e08-abae-f62750bd4384.png)'
- en: 'You can access the ELB from your laptop as well:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以从你的笔记本电脑访问 ELB：
- en: '![](img/9f790dfd-bfdb-4ffe-86f4-f937f3e872a1.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9f790dfd-bfdb-4ffe-86f4-f937f3e872a1.png)'
- en: As you can see from the preceding screenshots, the EKS cloud provider is integrated
    into Kubernetes Service, which launches a classic ELB. This feature is very powerful
    for scaling out the traffic volume that dispatches to multiple pods.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的截图所示，EKS 云提供商已经集成到 Kubernetes 服务中，后者启动了经典的 ELB。此功能非常强大，可以扩展分发到多个 Pods 的流量量。
- en: EKS has also already begun to support the use of **Network Load Balancer** (**NLB**),
    the new version of L4 load balancer in AWS.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: EKS 已经开始支持使用 **Network Load Balancer** (**NLB**)，这是 AWS 中新的 L4 负载均衡器版本。
- en: 'In order to use NLB, you need an additional annotation. This annotation is
    as follows:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用 NLB，你需要一个额外的注解。该注解如下：
- en: '[PRE36]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Updating the Kubernetes version on EKS
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新 EKS 上的 Kubernetes 版本
- en: When Kubernetes releases a new version, EKS will follow and provide the latest
    version of Kubernetes for the user in a timely manner. In previous examples, we've
    used Kubernetes version 1.10\. As of December 2018, EKS also supports version
    1.11\. Let's perform the upgrade to see how EKS handles cluster updates.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Kubernetes 发布新版本时，EKS 会跟进并及时为用户提供最新版本的 Kubernetes。在之前的示例中，我们使用了 Kubernetes
    版本 1.10。自 2018 年 12 月以来，EKS 还支持版本 1.11。让我们执行升级，看看 EKS 如何处理集群更新。
- en: 'The typical upgrade steps are as follows:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的升级步骤如下：
- en: Upgrade the Kubernetes master via the AWS CLI
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过 AWS CLI 升级 Kubernetes 主节点
- en: Create a new version of worker nodes via CloudFormation
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过 CloudFormation 创建新的工作节点版本
- en: Add new worker nodes to the Kubernetes cluster (both old and new worker nodes
    co-exist at this time)
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向 Kubernetes 集群中添加新的工作节点（此时旧的和新的工作节点共存）
- en: Migrate pods from the old worker node to the new one
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 Pods 从旧的工作节点迁移到新的工作节点
- en: Mostly, the worker nodes upgrade requires some manual steps. We'll explore this
    step by step.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，工作节点的升级需要一些手动步骤。我们将逐步探讨这些步骤。
- en: Upgrading the Kubernetes master
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 升级 Kubernetes 主节点
- en: 'Upgrading the Kubernetes master involves the simple step of specifying your
    EKS name and desired new version, as shown in the following. This takes around
    30 minutes to complete, based on the condition. Meanwhile, accessing Kubernetes
    API server (via `kubectl`) might fail. Although pods and Services won''t be affected,
    you need to leave enough time to perform this operation:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 升级 Kubernetes 主节点涉及简单的步骤，即指定你的 EKS 名称和所需的新版本，如下所示。根据情况，这大约需要 30 分钟来完成。同时，访问
    Kubernetes API 服务器（通过 `kubectl`）可能会失败。尽管 Pods 和服务不会受到影响，但你需要留出足够的时间来执行此操作：
- en: '[PRE37]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'As you can see in the preceding code, the `aws eks update-cluster-version`
    command returns update `id`. You can use this ID to check the upgrade status,
    as follows:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在前面的代码中看到的，`aws eks update-cluster-version` 命令返回更新 `id`。你可以使用这个 ID 来检查升级状态，如下所示：
- en: '[PRE38]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Once the status changes from `InProgress` to `Successful`, you can see the
    newer version of the API server as follows:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦状态从 `InProgress` 更改为 `Successful`，你就可以看到更新后的 API 服务器版本，如下所示：
- en: '[PRE39]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Based on differences between older and newer versions of Kubernetes, there are
    some additional migration steps that we might need to follow. For example, change
    the DNS service from `kube-dns` to `core-dns`. You need to follow these steps
    if AWS EKS provides some instructions.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 基于旧版和新版 Kubernetes 之间的差异，我们可能需要遵循一些额外的迁移步骤。例如，将 DNS 服务从 `kube-dns` 更改为 `core-dns`。如果
    AWS EKS 提供了相关说明，你需要按照这些步骤操作。
- en: Upgrading worker nodes
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 升级工作节点
- en: 'After upgrading the Kubernetes master, you can start to upgrade the worker
    nodes. However, again, there''s no AWS CLI support yet, so you need some manual
    steps to upgrade worker nodes:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 升级 Kubernetes 主节点后，你可以开始升级工作节点。然而，AWS CLI 目前还不支持，因此你需要一些手动步骤来升级工作节点：
- en: Create new worker nodes using the same steps as earlier using CloudFormation.
    However, here, you'll specify the new version of AMI, such as `ami-0b4eb1d8782fc3aea`.
    You can get an AMI ID list from the AWS documentation via [https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html](https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html).
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用与之前相同的步骤通过 CloudFormation 创建新的工作节点。但是，在这里，你需要指定新的 AMI 版本，例如 `ami-0b4eb1d8782fc3aea`。你可以通过
    [https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html](https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html)
    从 AWS 文档中获取 AMI ID 列表。
- en: 'Update a security group for both old and new worker nodes to allow network
    traffic between them. You can find a security group ID via the AWS CLI or AWS
    Web Console. For more details on this, please visit the AWS documentation: [https://docs.aws.amazon.com/eks/latest/userguide/migrate-stack.html](https://docs.aws.amazon.com/eks/latest/userguide/migrate-stack.html).'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新旧节点和新节点的安全组，以允许它们之间的网络流量。您可以通过 AWS CLI 或 AWS Web 控制台找到安全组 ID。有关更多详细信息，请访问
    AWS 文档：[https://docs.aws.amazon.com/eks/latest/userguide/migrate-stack.html](https://docs.aws.amazon.com/eks/latest/userguide/migrate-stack.html)。
- en: 'Update `ConfigMap` to add (not replace) new worker nodes Instance ARNs, as
    in the following example:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 `ConfigMap` 以添加（而不是替换）新工作节点实例 ARNs，如以下示例所示：
- en: '[PRE40]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Taint and drain the old nodes to move the pod to the new node:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 标记并排空旧节点，将 pod 移动到新节点：
- en: '[PRE41]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Remove old nodes from the cluster and update `ConfigMap` again:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从集群中移除旧节点，并再次更新 `ConfigMap`：
- en: '[PRE42]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Upgrading a Kubernetes version is an annoying topic for Kubernetes administrators.
    This is because of Kubernetes' release cycle (which usually occurs every three
    months) and the need to carry out enough compatibility testing.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 升级 Kubernetes 版本是 Kubernetes 管理员的一项令人头疼的话题。这是由于 Kubernetes 的发布周期（通常每三个月一次）以及需要进行足够的兼容性测试。
- en: The EKS upgrade procedure requires AWS knowledge and understanding. This consists
    of many steps and involves some technical difficulty, but it should not be too
    difficult. Because EKS is still a newer service in AWS, it'll keep improving and
    providing easier options to the user in the future.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: EKS 升级过程需要 AWS 的知识和理解。这包含许多步骤，并涉及一定的技术难度，但不应太难。由于 EKS 仍然是 AWS 中较新的服务，它将在未来继续改进，并为用户提供更简便的选项。
- en: Summary
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discussed the public cloud. AWS is the most popular public
    cloud service and it gives APIs the ability to control AWS infrastructure programmatically.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论了公共云。AWS 是最受欢迎的公共云服务，它通过 API 提供了程序化控制 AWS 基础设施的能力。
- en: In addition, AWS EKS makes it easy to deploy Kubernetes on AWS. Furthermore,
    the control plane manages the master and `etcd` with high availability design
    that offloads huge management efforts.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，AWS EKS 使在 AWS 上部署 Kubernetes 变得简单。此外，控制平面采用高可用性设计管理主节点和 `etcd`，从而减轻了巨大的管理工作量。
- en: On the other hand, you need to be aware of AWS basics such as availability zone
    awareness between pod (EC2) and persistent volume (EBS). In addition, you need
    intermediate AWS knowledge such as IAM credentials to gain access to an API server
    and use a worker node Instance Role ARN to register the cluster.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，您需要了解 AWS 的基础知识，例如 pod（EC2）和持久卷（EBS）之间的可用区意识。此外，您还需要具备中级 AWS 知识，如 IAM 凭证，以便访问
    API 服务器，并使用工作节点实例角色 ARN 注册集群。
- en: In addition, using ALB as ingress controller is available as of December 2018
    ([https://aws.amazon.com/blogs/opensource/kubernetes-ingress-aws-alb-ingress-controller/](https://aws.amazon.com/blogs/opensource/kubernetes-ingress-aws-alb-ingress-controller/)),
    but it also requires additional effort to configure this.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，自 2018 年 12 月起，使用 ALB 作为入口控制器是可行的（[https://aws.amazon.com/blogs/opensource/kubernetes-ingress-aws-alb-ingress-controller/](https://aws.amazon.com/blogs/opensource/kubernetes-ingress-aws-alb-ingress-controller/)），但这也需要额外的配置工作。
- en: Although AWS keeps improving functionality, open source tools such as `eksctl` indicate EKS
    still requires more improvement for easier use of Kubernetes.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 AWS 不断改进功能，开源工具如 `eksctl` 表明 EKS 仍然需要更多改进，以便更容易地使用 Kubernetes。
- en: In [Chapter 11](d4de05e3-eb24-4e8e-bfd3-e68819b5e66c.xhtml), *Kubernetes on
    GCP*, we'll introduce Google Cloud Platform and Kubernetes Engine, which is a
    pioneer for making a hosted Kubernetes service on Cloud. This is more mature than
    AWS EKS.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 11 章](d4de05e3-eb24-4e8e-bfd3-e68819b5e66c.xhtml)《*Kubernetes 在 GCP 上*》中，我们将介绍
    Google Cloud Platform 和 Kubernetes 引擎，这是一个为云上托管 Kubernetes 服务而开创的先驱。它比 AWS EKS
    更成熟。

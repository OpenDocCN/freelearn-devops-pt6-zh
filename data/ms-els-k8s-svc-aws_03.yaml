- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Building Your First EKS Cluster
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建您的第一个 EKS 集群
- en: In the previous chapters, we talked about Kubernetes and EKS in detail. In this
    chapter, we will begin to explore how to configure and build a basic cluster.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们详细讨论了 Kubernetes 和 EKS。本章将开始探索如何配置和构建一个基本集群。
- en: 'Although EKS is a managed service from AWS, there are a number of ways you
    can create the cluster, using the console, **Command-Line Interface** (**CLI**),
    and **Infrastructure as Code** (**IaC**). There are also different configurations
    that can be applied to a cluster, including networking, storage, and application
    configurations. This chapter will focus on the prerequisites for building a cluster
    along with the basic configuration you need to build a cluster. Specifically,
    we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 EKS 是 AWS 提供的托管服务，但您可以使用多种方式创建集群，包括控制台、**命令行界面**（**CLI**）和**基础设施即代码**（**IaC**）。集群还可以应用不同的配置，包括网络、存储和应用程序配置。本章将重点介绍构建集群的先决条件以及构建集群所需的基本配置。具体来说，我们将涵盖以下主题：
- en: Understanding the prerequisites for building an EKS cluster
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解构建 EKS 集群的先决条件
- en: Understanding the different configuration options for an EKS cluster
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 EKS 集群的不同配置选项
- en: Enumerating the automation options
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列举自动化选项
- en: Creating your first EKS cluster
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建您的第一个 EKS 集群
- en: Let’s begin by looking at what needs to be done before creating your first cluster.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建第一个集群前需要做的工作开始。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You should have a familiarity with cloud automation, ideally CloudFormation,
    and some experience with programming languages or software development.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该对云自动化有所了解，最好熟悉 CloudFormation，并且具备一定的编程语言或软件开发经验。
- en: 'In order to follow along, you will also need an AWS account to be able to launch
    EKS resources. If you don’t have an account, please go to AWS and create one:
    [https://aws.amazon.com/](https://aws.amazon.com/).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了跟上进度，您还需要一个 AWS 账户来启动 EKS 资源。如果您没有账户，请前往 AWS 并创建一个：[https://aws.amazon.com/](https://aws.amazon.com/)。
- en: Important note
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: These activities will result in AWS charges, so please make sure to delete all
    resources after you have built them.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这些活动将导致 AWS 费用，因此在构建完资源后，请确保删除所有资源。
- en: Understanding the prerequisites for building an EKS cluster
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解构建 EKS 集群的先决条件
- en: By default, the email address and password used to create the AWS account are
    the root user’s, and they have privileges to do everything in the AWS Account.
    AWS best practice is to enable **Multi-Factor Authentication** (**MFA**) on this
    account and *never* use this account other than in an emergency.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，用于创建 AWS 账户的电子邮件地址和密码属于根用户，并且它们拥有在 AWS 账户中执行任何操作的权限。AWS 的最佳实践是为此账户启用**多因素身份验证**（**MFA**），并且*仅在紧急情况下*使用此账户。
- en: 'The following list of activities need to be performed once you have an AWS
    account and the root user access credentials prior to creating an EKS cluster:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建 EKS 集群之前，您需要在拥有 AWS 账户和根用户访问凭证后执行以下活动：
- en: Configure your AWS CLI environment with temporary root credentials.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用临时根凭证配置您的 AWS CLI 环境。
- en: 'As the root user, you should:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为根用户，您应该：
- en: Create an EKS admin policy, using the least privileges that can be used to deploy
    and manage EKS clusters
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 EKS 管理员策略，使用最小权限来部署和管理 EKS 集群
- en: Create an EKS cluster Admin group and assign the EKS Admin role to that group
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 EKS 集群管理员组并将 EKS 管理员角色分配给该组
- en: Create a new user and add them to the EKS cluster Admin group
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新用户并将其添加到 EKS 集群管理员组
- en: Create the access credentials and add them to your AWS CLI configuration
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建访问凭证并将其添加到您的 AWS CLI 配置中
- en: 'Install kubectl on your workstation using the following guide: [https://docs.aws.amazon.com/eks/latest/userguide/install-kubectl.html](https://docs.aws.amazon.com/eks/latest/userguide/install-kubectl.html).'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下指南在您的工作站上安装 kubectl：[https://docs.aws.amazon.com/eks/latest/userguide/install-kubectl.html](https://docs.aws.amazon.com/eks/latest/userguide/install-kubectl.html)。
- en: Configure your AWS CLI environment with temporary root credentials
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用临时根凭证配置您的 AWS CLI 环境
- en: 'Normally you would simply run the `$ aws configure` command, which will ask
    you for the default access credentials, region, and output format, but we don’t
    want to persist the root credentials, so we will use environment variables to
    hold them temporarily:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，您只需运行 `$ aws configure` 命令，它会要求您输入默认的访问凭证、区域和输出格式，但我们不希望永久保存根凭证，因此我们将使用环境变量暂时保存它们：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Create the EKS Admin policy
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 EKS 管理员策略
- en: 'The easiest way to provide the right permissions to the EKS administrator is
    to grant them access to the AWS-managed `AdministratorAccess` managed role. You
    can get the unique identity for the role **AWS Resource Name** (**ARN**) using
    the following command:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为 EKS 管理员提供正确权限的最简单方法是授予他们访问 AWS 管理的 `AdministratorAccess` 管理角色的权限。你可以使用以下命令获取角色的唯一身份
    **AWS 资源名称** (**ARN**)：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `AdministratorAccess` role is very broad and allows the resource assigned
    the permission, the principal, with a lot of privileges that are not needed. Ideally,
    the EKS admin role that is created has reduced permissions, defined in the least-privilege
    security model. Creating this role is quite complex as it requires multiple resource
    permissions. The following table lists the minimum permissions you need for EC2,
    EKS, KMS, and IAM. However, you may need to add permissions to this role if you
    need to create a VPC/subnets, for example.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`AdministratorAccess` 角色非常宽泛，允许资源获得分配的权限和大量不必要的权限。理想情况下，创建的 EKS 管理员角色应该按照最小权限安全模型定义，减少权限。创建此角色相当复杂，因为它需要多个资源权限。以下表格列出了
    EC2、EKS、KMS 和 IAM 所需的最小权限。然而，如果你需要创建 VPC/子网等，可能需要向此角色添加权限。'
- en: '| **AWS** **Resource** | **Minimal** **Permission Set** |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| **AWS** **资源** | **最小** **权限集** |'
- en: '| --- | --- |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| EC2 API | `"ec2:RunInstances"`, `"ec2:RevokeSecurityGroupIngress"`, `"ec2:RevokeSecurityGroupEgress"`,
    `"ec2:DescribeRegions"`, `"ec2:DescribeVpcs"`, `"ec2:DescribeTags"`, `"ec2:DescribeSubnets"`,
    `"ec2:DescribeSecurityGroups"`, `"ec2:DescribeRouteTables"`,`"ec2:DescribeLaunchTemplateVersions"`,
    `"ec2:DescribeLaunchTemplates"`, `"ec2:DescribeKeyPairs"`, `"ec2:DescribeInternetGateways"`,
    `"ec2:DescribeImages"`, `"ec2:DescribeAvailabilityZones"`, `"ec2:DescribeAccountAttributes"`,
    `"ec2:DeleteTags","ec2:DeleteSecurityGroup"`, `"ec2:DeleteKeyPair"`, `"ec2:CreateTags"`,
    `"ec2:CreateSecurityGroup"`, `"ec2:CreateLaunchTemplateVersion"`, `"ec2:CreateLaunchTemplate"`,
    `"ec2:CreateKeyPair"`, `"``ec2:AuthorizeSecurityGroupIngress"`, `"ec2:AuthorizeSecurity``GroupEgress"`
    |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| EC2 API | `"ec2:RunInstances"`, `"ec2:RevokeSecurityGroupIngress"`, `"ec2:RevokeSecurityGroupEgress"`,
    `"ec2:DescribeRegions"`, `"ec2:DescribeVpcs"`, `"ec2:DescribeTags"`, `"ec2:DescribeSubnets"`,
    `"ec2:DescribeSecurityGroups"`, `"ec2:DescribeRouteTables"`,`"ec2:DescribeLaunchTemplateVersions"`,
    `"ec2:DescribeLaunchTemplates"`, `"ec2:DescribeKeyPairs"`, `"ec2:DescribeInternetGateways"`,
    `"ec2:DescribeImages"`, `"ec2:DescribeAvailabilityZones"`, `"ec2:DescribeAccountAttributes"`,
    `"ec2:DeleteTags"`, `"ec2:DeleteSecurityGroup"`, `"ec2:DeleteKeyPair"`, `"ec2:CreateTags"`,
    `"ec2:CreateSecurityGroup"`, `"ec2:CreateLaunchTemplateVersion"`, `"ec2:CreateLaunchTemplate"`,
    `"ec2:CreateKeyPair"`, `"ec2:AuthorizeSecurityGroupIngress"`, `"ec2:AuthorizeSecurityGroupEgress"`
    |'
- en: '| EKS API | `"eks:UpdateNodegroupVersion"`, `"eks:UpdateNodegroupConfig"`,
    `"eks:UpdateClusterVersion"`, `"eks:UpdateClusterConfig"`, `"eks:UntagResource"`,
    `"eks:TagResource"`, `"eks:ListUpdates"`, `"eks:ListTagsForResource"`, `"eks:ListNodegroups"`,
    `"eks:ListFargateProfiles"`, `"eks:ListClusters"`, `"eks:DescribeUpdate"`, `"eks:DescribeNodegroup"`,
    `"eks:DescribeFargateProfile"`, `"eks:DescribeCluster"`, `"eks:DeleteNodegroup"`,
    `"eks:DeleteFargateProfile"`, `"eks:DeleteCluster"`, `"eks:CreateNodegroup"`,
    `"``eks:CreateFargateProfile"`, `"eks:CreateCluster"` |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| EKS API | `"eks:UpdateNodegroupVersion"`, `"eks:UpdateNodegroupConfig"`,
    `"eks:UpdateClusterVersion"`, `"eks:UpdateClusterConfig"`, `"eks:UntagResource"`,
    `"eks:TagResource"`, `"eks:ListUpdates"`, `"eks:ListTagsForResource"`, `"eks:ListNodegroups"`,
    `"eks:ListFargateProfiles"`, `"eks:ListClusters"`, `"eks:DescribeUpdate"`, `"eks:DescribeNodegroup"`,
    `"eks:DescribeFargateProfile"`, `"eks:DescribeCluster"`, `"eks:DeleteNodegroup"`,
    `"eks:DeleteFargateProfile"`, `"eks:DeleteCluster"`, `"eks:CreateNodegroup"`,
    `"eks:CreateFargateProfile"`, `"eks:CreateCluster"` |'
- en: '| KMS API | `"``kms:ListKeys"` |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| KMS API | `"kms:ListKeys"` |'
- en: '| IAM API | `"iam:PassRole"`, `"iam:ListRoles"`, `"iam:ListRoleTags"`, `"iam:ListInstanceProfilesForRole"`,
    `"iam:ListInstanceProfiles"`, `"iam:ListAttachedRolePolicies"`, `"iam:GetRole"`,
    `"iam:GetInstanceProfile"`, `"iam:DetachRolePolicy"`, `"iam:DeleteRole"`, `"``iam:CreateRole"`,
    `"iam:AttachRolePolicy"` |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| IAM API | `"iam:PassRole"`, `"iam:ListRoles"`, `"iam:ListRoleTags"`, `"iam:ListInstanceProfilesForRole"`,
    `"iam:ListInstanceProfiles"`, `"iam:ListAttachedRolePolicies"`, `"iam:GetRole"`,
    `"iam:GetInstanceProfile"`, `"iam:DetachRolePolicy"`, `"iam:DeleteRole"`, `"iam:CreateRole"`,
    `"iam:AttachRolePolicy"` |'
- en: Table 3.1 – EKS Admin example privileges
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 表 3.1 – EKS 管理员示例权限
- en: 'Once you have the desired permissions set, you can create a policy document.
    A JSON example is shown in the following snippet with just the KMS permission
    included for simplicity:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你设置了所需的权限集，你就可以创建一个策略文档。下面的 JSON 示例只包含了 KMS 权限，便于简化展示：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Using the `aws iam create-policy --policy-name bespoke-eks-policy --policy-document
    file://<mypolicyfile.json>` command to create the IAM policy based on the JSON
    file you have created, you can then retrieve the ARN using the following command:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `aws iam create-policy --policy-name bespoke-eks-policy --policy-document
    file://<mypolicyfile.json>` 命令根据你创建的 JSON 文件创建 IAM 策略，然后你可以使用以下命令检索 ARN：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Create the EKS Admin group
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 EKS 管理组
- en: 'Creating the group using the CLI is pretty straightforward, using this:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 CLI 创建组是非常简单的，使用以下命令：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You then need to attach the policy created in the previous step using this:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你需要使用以下命令附加在前一步中创建的策略：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Create a new user
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个新用户
- en: 'Now we have the permissions, and the group has been created, we can create
    a new user and assign it to the group using the following command:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经拥有了权限，并且组已经创建，我们可以使用以下命令创建一个新用户并将其分配到该组：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can then add the user you just created to the group using this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以使用以下命令将刚创建的用户添加到组中：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You will also need to create a password using this:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要使用以下方法创建密码：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You now need to create access credentials and store them using the following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你需要创建访问凭证并使用以下方法存储它们：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You should copy the credentials (`SecretAccessKey` and `AccessKeyId`) output
    from this command, add them to your CLI configuration using the `$aws configure`
    command, and use this account/credentials for the remainder of the examples.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该复制此命令输出的凭证（`SecretAccessKey` 和 `AccessKeyId`），使用 `$aws configure` 命令将它们添加到你的
    CLI 配置中，并在接下来的示例中使用此账户/凭证。
- en: Important note
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'You still need to grant console access. Please refer to this link: [https://docs.aws.amazon.com/IAM/latest/UserGuide/console_controlling-access.html](https://docs.aws.amazon.com/IAM/latest/UserGuide/console_controlling-access.html).'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你仍然需要授予控制台访问权限。请参阅此链接：[https://docs.aws.amazon.com/IAM/latest/UserGuide/console_controlling-access.html](https://docs.aws.amazon.com/IAM/latest/UserGuide/console_controlling-access.html)。
- en: 'You should also enable MFA. Please refer to this link: [https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa.html](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa.html).'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应该启用 MFA。请参阅此链接：[https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa.html](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa.html)。
- en: Now that we have all the prerequisites in place, we need to consider how we
    configure the EKS cluster.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经具备了所有前提条件，我们需要考虑如何配置 EKS 集群。
- en: Understanding the different configuration options for an EKS cluster
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解 EKS 集群的不同配置选项
- en: 'Kubernetes is extensible by default, which is one of the reasons it has become
    so popular. As well as the standard API objects we’ve already discussed such as
    **Pods** and **Services**, you can extend the API to support custom resources,
    controllers, operators, and standard plugins for networking and storage. All of
    these elements can be added to an EKS cluster as part of the cluster creation
    process; however, in this chapter, we will cover the basic configuration to get
    a simple cluster up and running. The following table defines what will be configured
    as well as providing a map to other chapters that show additional configuration
    steps:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 默认是可扩展的，这是它如此受欢迎的原因之一。除了我们已经讨论过的标准 API 对象，如 **Pods** 和 **Services**，你还可以扩展
    API 来支持自定义资源、控制器、操作器以及用于网络和存储的标准插件。所有这些元素都可以作为集群创建过程的一部分添加到 EKS 集群中；然而，在本章中，我们将介绍如何配置基本的设置，以便启动并运行一个简单的集群。下表定义了将要配置的内容，并提供了指向其他章节的链接，后者展示了更多的配置步骤：
- en: '| **EKS** **Configuration Domain** | **Description** |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| **EKS** **配置域** | **描述** |'
- en: '| --- | --- |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Control plane | As we have mentioned, EKS is really a managed control plane,
    so this must always be done, and the next sections will focus on creating this.
    |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 控制 plane | 正如我们所提到的，EKS 实际上是一个托管的控制 plane，所以这必须始终完成，接下来的部分将重点讲解如何创建它。 |'
- en: '| Basic networking | We will cover this briefly in this section using the default
    AWS EKS VPC plugin (CNI), but it’s covered in more detail in [*Chapter 7*](B18129_07.xhtml#_idTextAnchor107).
    |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| 基本网络配置 | 我们将在本节中简要介绍使用默认 AWS EKS VPC 插件（CNI）的配置，但在 [*第 7 章*](B18129_07.xhtml#_idTextAnchor107)中会有更详细的讲解。
    |'
- en: '| Base node group | In the next section, we will create a small node group
    on EC2 resources to host key cluster resources such as the VPC network plugin.
    |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| 基础节点组 | 在下一部分，我们将使用 EC2 资源创建一个小的节点组，用于托管关键的集群资源，如 VPC 网络插件。 |'
- en: '| Pod storage services | We won’t cover this in this section but will go into
    more detail in [*Chapter 12*](B18129_12.xhtml#_idTextAnchor175). |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| Pod 存储服务 | 我们不会在本节中讨论这一点，但将在[*第12章*](B18129_12.xhtml#_idTextAnchor175)中详细介绍。
    |'
- en: '| Additional node groups | We won’t cover this in this section but will go
    into more detail in [*Chapter 8*](B18129_08.xhtml#_idTextAnchor123). |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| 额外节点组 | 我们不会在本节中讨论这一点，但将在[*第8章*](B18129_08.xhtml#_idTextAnchor123)中详细介绍。
    |'
- en: '| Fargate profiles | We won’t cover this in this section but will go into more
    detail in [*Chapter 15*](B18129_15.xhtml#_idTextAnchor220). |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| Fargate 配置文件 | 我们不会在本节中讨论这一点，但将在[*第15章*](B18129_15.xhtml#_idTextAnchor220)中详细介绍。
    |'
- en: '| Kubernetes applications | We won’t cover this in this section but will go
    into more detail in *Chapters 11*, *13*, and *14*. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| Kubernetes 应用程序 | 我们不会在本节中讨论这一点，但将在*第11章*、*第13章*和*第14章*中详细介绍。 |'
- en: '| Advanced networking concepts | We won’t cover this in this section but will
    go into more detail in [*Chapter 8*](B18129_08.xhtml#_idTextAnchor123). |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| 高级网络概念 | 我们不会在本节中讨论这一点，但将在[*第8章*](B18129_08.xhtml#_idTextAnchor123)中详细介绍。
    |'
- en: '| Service mesh | We won’t cover this in this section but will go into more
    detail in [*Chapter 16*](B18129_16.xhtml#_idTextAnchor232). |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| 服务网格 | 我们不会在本节中讨论这一点，但将在[*第16章*](B18129_16.xhtml#_idTextAnchor232)中详细介绍。
    |'
- en: Table 3.2 – EKS configuration areas
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 表 3.2 – EKS 配置区域
- en: Before we actually create a cluster that is composed of a managed control plane,
    basic networking, and a base node group, let’s review the different ways we can
    approach deploying and automating it and why you would choose one over the others.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们实际创建一个由托管控制平面、基本网络和基础节点组组成的集群之前，先回顾一下我们可以选择的不同方式来部署和自动化它，以及为什么会选择某种方式而不是其他方式。
- en: Enumerating the automation options
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 枚举自动化选项
- en: The following diagram (*Figure 3**.1*) illustrates the evolution of infrastructure
    automation in AWS. Most users start off with manual configuration using playbooks
    or wikis and the AWS console. The challenge with this is it’s difficult to repeat,
    and if you need to change or add something, you need to do it manually.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示（*图 3.1*）展示了 AWS 中基础设施自动化的发展历程。大多数用户最初是通过使用 playbooks 或维基和 AWS 控制台进行手动配置。这样做的挑战是很难重复，如果需要更改或添加某些内容，则需要手动操作。
- en: The next step is to then use shell scripts to automate the deployment of AWS
    resources using, for example, the AWS CLI. This is not perfect because if you
    run the same command twice you can get different results. Thus, the AWS CLI is
    not (necessarily) idempotent. So, in 2011, AWS released CloudFormation, an IaC
    framework that can safely create infrastructure resources.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是使用 Shell 脚本来自动化 AWS 资源的部署，例如，使用 AWS CLI。这样并不完美，因为如果你运行相同的命令两次，可能会得到不同的结果。因此，AWS
    CLI 并不是（必然）幂等的。所以，在 2011 年，AWS 发布了 CloudFormation，这是一个 IaC 框架，可以安全地创建基础设施资源。
- en: "![Figure 3.1 \uFEFF– Automation options](img/B18129_03_01.jpg)"
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.1 – 自动化选项](img/B18129_03_01.jpg)'
- en: Figure 3.1 – Automation options
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1 – 自动化选项
- en: IaC has become best practice for deploying AWS resources, and in 2014 HashiCorp
    released Terraform, which has become very popular and again allows you to automate
    and deploy AWS resources safely. The challenge with both CloudFormation and Terraform
    is they have their own markup language that must be learned and can be complex.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: IaC 已成为部署 AWS 资源的最佳实践，2014 年 HashiCorp 发布了 Terraform，它变得非常流行，再次允许你安全地自动化和部署
    AWS 资源。CloudFormation 和 Terraform 的挑战在于，它们各自有自己的标记语言，需要学习，并且可能比较复杂。
- en: Over the years, various generators have been produced that allow you to create
    CloudFormation and Terraform scripts without needing to understand how to write
    them. This concept has further been extended with abstractions such as AWS **Cloud
    Development Kit** (**CDK**), which allows you to generate and deploy CloudFormation
    using regular programming languages such as Python, Typeset, and so on.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，已经开发出各种生成器，允许你无需理解如何编写脚本就能创建 CloudFormation 和 Terraform 脚本。这个概念进一步扩展为抽象，如
    AWS **Cloud Development Kit**（**CDK**），它允许你使用常规编程语言（如 Python、TypeScript 等）生成和部署
    CloudFormation。
- en: In Kubernetes, this additional layer abstraction is part of the cluster with
    manifest, Helm charts, and Kustomize being used to abstract Kubernetes resources,
    and tools such as eksctl providing a simple interface for provisioning EKS clusters.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 中，这种额外的抽象层是集群的一部分，清单、Helm 图表和 Kustomize 被用来抽象 Kubernetes 资源，工具如
    eksctl 提供了一个简单的接口来配置 EKS 集群。
- en: Which automation tool/framework should I use?
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我应该使用哪种自动化工具/框架？
- en: A general rule of thumb for any automation is **Don’t Repeat Yourself** (**DRY**),
    so if you are going to create or delete clusters on a regular basis, use automation
    and use the highest level of abstraction you can. Tools such as the CDK and eksctl
    mean you don’t have to learn CloudFormation but can still rely on *safe* deployment
    practices such as declarative configurations and idempotent operations.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何自动化操作，一条常规的经验法则是 **不要重复自己** (**DRY**)，所以如果你打算定期创建或删除集群，使用自动化，并尽可能使用最高级别的抽象。像
    CDK 和 eksctl 这样的工具意味着你不需要学习 CloudFormation，但仍然可以依赖 *安全* 的部署实践，如声明式配置和幂等操作。
- en: Terraform supports these *safe* operations, which in addition means you can
    support other clouds such as Microsoft Azure and Google Cloud Platform, as well
    as other on-premises resources.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 支持这些 *安全* 操作，这意味着你还可以支持其他云服务，如 Microsoft Azure 和 Google Cloud Platform，以及其他本地资源。
- en: 'In the next section, we will show you how you can create a basic cluster using
    the console and AWS CLI and then simplify the operation using the following IaC
    Tools: Terraform, eksctl, and the AWS CDK.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将向你展示如何使用控制台和 AWS CLI 创建一个基本的集群，然后通过以下 IaC 工具简化操作：Terraform、eksctl
    和 AWS CDK。
- en: Creating your first EKS cluster
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建你的第一个 EKS 集群
- en: 'Please verify you are using the credentials for the username you created as
    part of the prerequisites using the following command:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 请使用以下命令验证你是否使用了在前提条件中创建的用户名的凭证：
- en: '[PRE10]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Option 1: Creating your EKS cluster with the AWS console'
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选项 1：使用 AWS 控制台创建 EKS 集群
- en: To start this exercise, open a browser, go to the URL [https://aws.amazon.com/](https://aws.amazon.com/),
    and sign in to your account using the username/credentials you created as part
    of the prerequisites.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始此练习，请打开浏览器，访问 [https://aws.amazon.com/](https://aws.amazon.com/)，并使用你在前提条件中创建的用户名/凭证登录到你的帐户。
- en: 'Once you have logged in, complete the following steps:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 登录后，完成以下步骤：
- en: Type `IAM` in the search bar and select **IAM** | **Roles** from the resulting
    search results.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索框中输入 `IAM`，然后从搜索结果中选择 **IAM** | **角色**。
- en: You should now create a cluster Service role by clicking on the **Create Role**
    button, which will allow the cluster to make calls to other AWS Services. It’s
    a simple policy, is defined at [https://docs.aws.amazon.com/eks/latest/userguide/service_IAM_role.html](https://docs.aws.amazon.com/eks/latest/userguide/service_IAM_role.html),
    and should be linked to the AmazonEKSClusterPolicy managed policy.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你应该通过点击 **创建角色** 按钮来创建一个集群服务角色，这将允许集群调用其他 AWS 服务。这是一个简单的策略，定义在 [https://docs.aws.amazon.com/eks/latest/userguide/service_IAM_role.html](https://docs.aws.amazon.com/eks/latest/userguide/service_IAM_role.html)
    中，应该与 AmazonEKSClusterPolicy 管理策略关联。
- en: Once the Service role has been created, select the region that you would like
    to launch the Amazon EKS cluster in, type `EKS` in the search bar, and select
    **Elastic** **Kubernetes Service**.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建服务角色后，选择你希望启动 Amazon EKS 集群的区域，在搜索框中输入 `EKS`，并选择 **弹性** **Kubernetes 服务**。
- en: "![Figure 3.2 \uFEFF– Select EKS](img/B18129_03_02.jpg)"
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.2 – 选择 EKS](img/B18129_03_02.jpg)'
- en: Figure 3.2 – Select EKS
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.2 – 选择 EKS
- en: On the EKS launch screen, click on the **Add cluster** | **Create** button.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 EKS 启动屏幕上，点击 **添加集群** | **创建** 按钮。
- en: "![Figure 3.3 \uFEFF– Add cluster](img/B18129_03_03.jpg)"
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.3 – 添加集群](img/B18129_03_03.jpg)'
- en: Figure 3.3 – Add cluster
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.3 – 添加集群
- en: On the resulting screen, enter the cluster name in the **Name** field, select
    the version of Kubernetes you want to deploy from the **Kubernetes version** field,
    select the Service role created in *step 2*, and click **Next**.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在弹出的屏幕上，在 **名称** 字段中输入集群名称，从 **Kubernetes 版本** 字段中选择你要部署的 Kubernetes 版本，选择在
    *第 2 步* 中创建的服务角色，然后点击 **下一步**。
- en: "![Figure 3.3 \uFEFF– Configure cluster](img/B18129_03_04.jpg)"
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.3 – 配置集群](img/B18129_03_04.jpg)'
- en: Figure 3.3 – Configure cluster
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.3 – 配置集群
- en: In the first panel of the EKS networking screen, you need to select the VPC
    and subnets that the control plane will use as well as the security group used
    by any worker nodes. If these resources don’t exist, you can add them using the
    VPC console link (make sure you open the link in a browser tab or window).
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 EKS 网络屏幕的第一个面板中，你需要选择控制平面将使用的 VPC 和子网，以及任何工作节点使用的安全组。如果这些资源不存在，你可以使用 VPC 控制台链接添加它们（确保在浏览器标签页或窗口中打开该链接）。
- en: "![Figure 3.4 \uFEFF– Enter VPC and security group details](img/B18129_03_05.jpg)"
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.4 – 输入 VPC 和安全组详细信息](img/B18129_03_05.jpg)'
- en: Figure 3.4 – Enter VPC and security group details
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.4 – 输入 VPC 和安全组详细信息
- en: In the next panel, select the type of cluster endpoint. In this example, we
    will keep the **Public** default, which means the cluster API is accessible from
    the internet.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个面板中，选择集群端点的类型。在本示例中，我们将保持默认的**公共**选项，这意味着集群 API 可以通过互联网访问。
- en: "![Figure 3.5 \uFEFF– Cluster endpoints](img/B18129_03_06.jpg)"
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: "![图 3.5 \uFEFF– 集群端点](img/B18129_03_06.jpg)"
- en: Figure 3.5 – Cluster endpoints
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.5 – 集群端点
- en: In the final networking panel, you can leave the defaults, which relate to the
    Kubernetes version chosen in *step 5* and click **Next**.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在最后一个网络配置面板中，您可以保留默认值，这些值与*步骤 5*中选择的 Kubernetes 版本相关，然后点击**下一步**。
- en: "![Figure 3.6 \uFEFF– Complete networking section](img/B18129_03_07.jpg)"
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: "![图 3.6 \uFEFF– 完整的网络配置部分](img/B18129_03_07.jpg)"
- en: Figure 3.6 – Complete networking section
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.6 – 完整的网络配置部分
- en: Enable **Audit** logging to CloudWatch logs by selecting the button and clicking
    **Next**.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择按钮并点击**下一步**，启用将**审计**日志记录到 CloudWatch 日志。
- en: "![Figure 3.7 \uFEFF– Control plane logging](img/B18129_03_08.jpg)"
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: "![图 3.7 \uFEFF– 控制平面日志记录](img/B18129_03_08.jpg)"
- en: Figure 3.7 – Control plane logging
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.7 – 控制平面日志记录
- en: 'Review your cluster settings and click the **Create** button. This will now
    take 20-30 minutes to complete and involves setting up the control plane (API
    and etcd servers) in an AWS-owned VPC and connecting it through **Elastic Network
    Interfaces** (**ENIs**) to your VPC. When it completes, you will see a new cluster
    with a status of **Active**, as shown in the following screenshot:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 审查您的集群设置并点击**创建**按钮。此过程需要 20-30 分钟才能完成，涉及在 AWS 所有的 VPC 中设置控制平面（API 和 etcd 服务器），并通过**弹性网络接口**（**ENIs**）将其连接到您的
    VPC。完成后，您将看到一个状态为**活动**的新集群，如下图所示：
- en: "![Figure 3.8 \uFEFF– An active cluster](img/B18129_03_09.jpg)"
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: "![图 3.8 \uFEFF– 活动集群](img/B18129_03_09.jpg)"
- en: Figure 3.8 – An active cluster
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.8 – 活动集群
- en: As this is a public cluster, you can run the `aws eks update-kubeconfig --cluster
    <CLUSTERNAME> --region <YOURREGION>` command to update your `kubeconfig` file.
    We have created an EKS control plane and set up networking but currently, we don’t
    have any nodes attached to it. We can validate this by using the `kubectl get
    nodes` command. You should get a **No resources** **found** message.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于这是一个公共集群，您可以运行`aws eks update-kubeconfig --cluster <CLUSTERNAME> --region
    <YOURREGION>`命令来更新您的`kubeconfig`文件。我们已经创建了 EKS 控制平面并设置了网络，但目前我们没有任何节点连接到它。我们可以使用`kubectl
    get nodes`命令来验证这一点。您应该会收到**未找到资源**的消息。
- en: If you click on the name link of your cluster (this is **mycluster** in *step
    10*), you will be taken to the cluster configuration screen shown in the following
    screenshot. Click the **Compute** tab, and then click on the **Add node** **group**
    button.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果点击集群名称链接（在*步骤 10*中为**mycluster**），您将进入下图所示的集群配置页面。点击**计算**选项卡，然后点击**添加节点**
    **组**按钮。
- en: "![Figure 3.9 \uFEFF– Compute](img/B18129_03_10.jpg)"
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: "![图 3.9 \uFEFF– 计算](img/B18129_03_10.jpg)"
- en: Figure 3.9 – Compute
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.9 – 计算
- en: 'In the first **Node group configuration** panel, enter a name for the node
    group and an EC2 worker IAM role. If this role doesn’t exist, you can add it using
    the VPC console link (make sure you open the link in a browser tab or window).
    The role should be created in line with this link: [https://docs.aws.amazon.com/eks/latest/userguide/create-node-role.html](https://docs.aws.amazon.com/eks/latest/userguide/create-node-role.html).'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第一个**节点组配置**面板中，为节点组输入名称和 EC2 工作节点 IAM 角色。如果该角色不存在，您可以通过 VPC 控制台链接添加它（确保在浏览器标签页或窗口中打开该链接）。角色应根据以下链接创建：[https://docs.aws.amazon.com/eks/latest/userguide/create-node-role.html](https://docs.aws.amazon.com/eks/latest/userguide/create-node-role.html)。
- en: "![Figure 3.10 \uFEFF– Node group configuration](img/B18129_03_11.jpg)"
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: "![图 3.10 \uFEFF– 节点组配置](img/B18129_03_11.jpg)"
- en: Figure 3.10 – Node group configuration
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.10 – 节点组配置
- en: You can accept all the defaults in the `t3.medium` EC2 instances in an autoscaling
    group using an EKS-optimized Amazon Linux **operating system** (**OS**) image.
    Click on **Next**.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以接受使用 EKS 优化的 Amazon Linux **操作系统**（**OS**）镜像在自动扩展组中启动` t3.medium` EC2 实例的所有默认设置。点击**下一步**。
- en: Select the subnets you will use for the EC2 worker nodes in your VPC; you should
    select at least two subnets/availability zones. Click **Next**.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您将在 VPC 中用于 EC2 工作节点的子网；您应该选择至少两个子网/可用区。点击**下一步**。
- en: "![Figure 3.11 \uFEFF– Node group networking](img/B18129_03_12.jpg)"
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: "![图 3.11 \uFEFF– 节点组网络配置](img/B18129_03_12.jpg)"
- en: Figure 3.11 – Node group networking
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.11 – 节点组网络配置
- en: Review your node group settings and click the `kubelet` and `kubeproxy`) and
    connect back to the control plane. Once the job completes, the node group should
    be **Active** and the two EC2 instances should be **Ready**.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 审查您的节点组设置，然后点击`kubelet`和`kubeproxy`，并重新连接到控制平面。一旦作业完成，节点组应为**活跃**，并且两个 EC2 实例应为**准备就绪**。
- en: '![Figure 3.12 — Active node group](img/B18129_03_13.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.12 — 活跃节点组](img/B18129_03_13.jpg)'
- en: Figure 3.12 — Active node group
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.12 — 活跃节点组
- en: We can validate this by using the `kubectl get nodes` command. The output should
    now show the two nodes you have just created.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用`kubectl get nodes`命令来验证这一点。输出现在应该显示您刚刚创建的两个节点。
- en: Once you have finished with the cluster, delete the node group, and then you
    can delete the cluster.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成集群设置后，请删除节点组，然后您可以删除集群。
- en: Important note
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: As the AWS console interface may be changed, if you have questions, you can
    always check the AWS documentation for creating the EKS cluster ([https://docs.aws.amazon.com/eks/latest/userguide/create-cluster.html](https://docs.aws.amazon.com/eks/latest/userguide/create-cluster.html))
    and for creating managed node groups ([https://docs.aws.amazon.com/eks/latest/userguide/create-managed-node-group.html](https://docs.aws.amazon.com/eks/latest/userguide/create-managed-node-group.html))
    to get the latest updated steps.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 AWS 控制台界面可能发生更改，如果您有任何问题，您可以随时查阅 AWS 文档，以获取有关创建 EKS 集群（[https://docs.aws.amazon.com/eks/latest/userguide/create-cluster.html](https://docs.aws.amazon.com/eks/latest/userguide/create-cluster.html)）和创建托管节点组（[https://docs.aws.amazon.com/eks/latest/userguide/create-managed-node-group.html](https://docs.aws.amazon.com/eks/latest/userguide/create-managed-node-group.html)）的最新步骤。
- en: In this subsection, we have created a basic cluster with a managed control plane,
    an AWS VPC network, and a basic node group with two EC2 workers. In the next subsection,
    we will see how we can create the same cluster using the AWS CLI.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在本小节中，我们已经创建了一个带有托管控制平面的基础集群、一个 AWS VPC 网络和一个包含两个 EC2 工作节点的基础节点组。在下一小节中，我们将看到如何使用
    AWS CLI 创建相同的集群。
- en: 'Option 2: Creating your EKS cluster with the AWS CLI'
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选项 2：使用 AWS CLI 创建 EKS 集群
- en: 'The AWS CLI is a tool for managing your AWS resources. It can be installed
    using this link: [https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html](https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html).'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: AWS CLI 是一个用于管理 AWS 资源的工具。您可以通过此链接安装它：[https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html](https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html)。
- en: 'To create an EKS cluster using the AWS CLI, you should follow the steps detailed
    here:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 AWS CLI 创建 EKS 集群，请按照此处详细说明的步骤操作：
- en: We will reuse the cluster Service role and the same subnets used in *Option
    1*. If they don’t exist, create them using the steps in *Option 1*.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将重用集群服务角色和*选项 1*中使用的相同子网。如果它们不存在，请按照*选项 1*中的步骤创建它们。
- en: 'You can then create the managed control plane in your account using the following
    commands with the username/credentials you created as part of the prerequisites.
    The subnets and security group can be the same ones used in *Option 1*:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，您可以使用您在先决条件中创建的用户名/凭证，使用以下命令在您的账户中创建托管控制平面。子网和安全组可以与*选项 1*中使用的相同：
- en: '[PRE11]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This will now take 20-30 minutes to complete and involves setting up the control
    plane (API and etcd servers) in an AWS-owned VPC and connecting it through ENIs
    to your VPC. When it completes, you will see a new cluster with a status of **Active,
    as** shown in the following screenshot.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，这将需要 20 到 30 分钟完成，并涉及在 AWS 拥有的 VPC 中设置控制平面（API 和 etcd 服务器），并通过 ENI 将其连接到您的
    VPC。当它完成时，您将看到一个状态为**活跃**的新集群，如以下截图所示。
- en: "![Figure 3.13 \uFEFF– Active cluster](img/B18129_03_14.jpg)"
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: "![图 3.13 \uFEFF– 活跃集群](img/B18129_03_14.jpg)"
- en: Figure 3.13 – Active cluster
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.13 – 活跃集群
- en: Again, we have created an EKS control plane and set up networking but currently,
    we don’t have any nodes attached to it. We can validate this by using the `kubectl
    get nodes` command, after updating the `kubeconfig` file. You should get a **No
    resources** **found** message.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样，我们已经创建了 EKS 控制平面并设置了网络，但目前我们没有任何节点连接到它。我们可以通过更新`kubeconfig`文件后使用`kubectl
    get nodes`命令来验证此情况。您应该会看到**未找到资源**消息。
- en: You can create the basic node group using the following command, which will
    create two t3.medium EC2 instances in an autoscaling group using an EKS-optimized
    Amazon Linux OS image using the EC2 role created in *Option 1*.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用以下命令创建基础节点组，该命令将使用 EKS 优化的 Amazon Linux 操作系统镜像并使用在*选项 1*中创建的 EC2 角色，在自动扩展组中创建两个
    t3.medium EC2 实例。
- en: '[PRE12]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This will now take 10-20 minutes and will create two EC2 instances and configure
    the Kubernetes agents (`kubelet` and `kubeproxy`) and connect back to the control
    plane. Once the job completes, the node group should be **Active** and the two
    EC2 instances should be **Ready**.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将需要 10 到 20 分钟，并将创建两个 EC2 实例，配置 Kubernetes 代理（`kubelet` 和 `kubeproxy`），并与控制平面连接。任务完成后，节点组应显示为
    **Active**，两个 EC2 实例应显示为 **Ready**。
- en: "![Figure 3.14 \uFEFF– A CLI node group](img/B18129_03_15.jpg)"
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.14 – 一个 CLI 节点组](img/B18129_03_15.jpg)'
- en: Figure 3.14 – A CLI node group
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.14 – 一个 CLI 节点组
- en: We can validate this by using the `kubectl get nodes` command. The output should
    now show the two nodes you have just created.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过使用 `kubectl get nodes` 命令来验证这一点。输出现在应该显示你刚刚创建的两个节点。
- en: 'Once you have finished with the cluster, delete the node group, and then you
    can delete the cluster using the following commands:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你完成了集群的操作，删除节点组后，你可以使用以下命令删除集群：
- en: '[PRE13]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As you can see, this process is much simpler than clicking through the AWS console.
    These commands can be placed in a shell script, and you can use environment variables
    to parameterize the input, changing the cluster name, for example. However, it’s
    not guaranteed that every command is *safe* to run repeatedly, and script execution
    can be problematic if there are any failures. A better way is to use IaC and we
    will explore that over the next subsections.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这个过程比通过 AWS 控制台点击操作要简单得多。这些命令可以放入一个 shell 脚本中，并且你可以使用环境变量来参数化输入，例如更改集群名称。然而，并不能保证每个命令都能*安全*地重复执行，如果出现失败，脚本执行可能会出现问题。一种更好的方法是使用
    IaC，我们将在接下来的子节中探讨这一点。
- en: 'Option 3: Creating your EKS cluster with Terraform'
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选项 3：使用 Terraform 创建 EKS 集群
- en: Terraform is an open source project created by HashiCorp and is composed of
    a single binary that can be used to validate, deploy, and delete (destroy) AWS
    infrastructure resources. You can install Terraform by following the instructions
    shown at [https://learn.hashicorp.com/tutorials/terraform/install-cli](https://learn.hashicorp.com/tutorials/terraform/install-cli).
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 是由 HashiCorp 创建的一个开源项目，它由一个单一的二进制文件组成，可以用来验证、部署和删除（销毁）AWS 基础设施资源。你可以按照[https://learn.hashicorp.com/tutorials/terraform/install-cli](https://learn.hashicorp.com/tutorials/terraform/install-cli)
    上的说明来安装 Terraform。
- en: 'To create your first EKS cluster using Terraform, we will clone the official
    example containing the configuration file for creating an EKS cluster provided
    by HashiCorp. This is a very complete solution (creating 53 resources) and will
    create a new VPC, two managed worker node groups, and all the associated roles
    and permissions. Use the following commands to clone and change into the cloned
    directory:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用 Terraform 创建你的第一个 EKS 集群，我们将克隆 HashiCorp 提供的官方示例，包含用于创建 EKS 集群的配置文件。这是一个非常完整的解决方案（创建
    53 个资源），将创建一个新的 VPC、两个托管工作节点组，以及所有相关的角色和权限。使用以下命令克隆并进入克隆目录：
- en: '[PRE14]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Terraform works by aggregating all `.tf` files into a single configuration
    and then deploying it to AWS using your local credentials. You will need to modify
    certain `.tf` files for your AWS account; the following table explains which ones:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 通过将所有 `.tf` 文件汇总为一个单一的配置文件，然后使用你的本地凭证将其部署到 AWS。你需要修改某些 `.tf` 文件以适应你的
    AWS 账户；下表解释了哪些文件需要修改：
- en: '| **Terraform (.****tf) file** | **Changes** |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| **Terraform (.****tf) 文件** | **更改** |'
- en: '| --- | --- |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `./``vpc.tf` | Change the region variable to the region you want to use,
    for example:`variable "``region" {`  `default`     `= "``eu-central-1"`  `description
    = "``AWS region"``}` |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| `./``vpc.tf` | 将区域变量更改为你想使用的区域，例如：`variable "``region" {`  `default`     `=
    "``eu-central-1"`  `description = "``AWS 区域"``}` |'
- en: '| `./``eks-cluster.tf` | Change the EKS version to the desired version, for
    example:`module "``eks" {`        `cluster_version = "``1.22" }` |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| `./``eks-cluster.tf` | 将 EKS 版本更改为所需版本，例如：`module "``eks" {`        `cluster_version
    = "``1.22" }` |'
- en: Table 3.3 – Terraform changes
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 表 3.3 – Terraform 更改
- en: 'Now that you have made the changes to the Terraform files, you can create an
    EKS cluster and environment using Terraform. You should follow the steps detailed
    here:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经对 Terraform 文件进行了更改，可以使用 Terraform 创建 EKS 集群和环境。你应该按照这里详细描述的步骤进行操作：
- en: Run the `$ terraform init` command to create the local state and download all
    the remote module files such as the VPC module used to create the new VPC. It
    can take some time to download all the module files. If this command is successful,
    you will see the **Terraform has been successfully** **initialized!** message.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`$ terraform init`命令以创建本地状态并下载所有远程模块文件，例如用于创建新VPC的VPC模块。下载所有模块文件可能需要一些时间。如果此命令成功，您将看到**Terraform已经成功**
    **初始化！**消息。
- en: Run the `$ terraform plan` command to see what resources will be created before
    actually deploying them. This is a major advantage over the console and CLI methods,
    as you can also use this to see what will change when you make a change to the
    `.``tf` files.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`$ terraform plan`命令查看在实际部署资源之前将要创建的资源。这是与控制台和CLI方法相比的一个主要优势，因为您还可以使用此命令查看当您更改`.tf`文件时会发生什么变化。
- en: Run the `$ terraform apply -auto-approve` command to create/deploy the resources.
    This will take 20-30 minutes to complete (so take a seat). At the end of it, you
    will have a new IAM role, an EKS cluster in a new VPC, new internet and NAT gateways,
    and two managed node groups with three EC2 instances.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`$ terraform apply -auto-approve`命令来创建/部署资源。这将需要20到30分钟完成（所以请坐好）。完成后，您将拥有一个新的IAM角色，一个位于新VPC中的EKS集群，新的互联网和NAT网关，以及两个托管节点组和三个EC2实例。
- en: In this option, we have actually created managed node groups, which we can validate
    by using the `$ kubectl get nodes` command. After updating the `kubeconfig` file,
    you will see three worker nodes.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个选项中，我们实际上创建了托管节点组，我们可以通过使用`$ kubectl get nodes`命令来验证它们。在更新`kubeconfig`文件后，您将看到三个工作节点。
- en: Once you have finished with the cluster, use the `$ terraform destroy -auto-approve`
    command to delete all resources. Terraform will automatically figure out the order
    of deletion.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成集群后，使用`$ terraform destroy -auto-approve`命令删除所有资源。Terraform将自动确定删除的顺序。
- en: As you can see, Terraform is a very powerful tool and simplifies the way you
    configure and deploy resources. You still have to configure or create the Terraform
    modules, which in turn requires you to learn the Terraform syntax and markup language.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，Terraform是一个非常强大的工具，简化了您配置和部署资源的方式。您仍然需要配置或创建Terraform模块，这需要您学习Terraform语法和标记语言。
- en: In the next subsection, we will see how you can use eksctl to create an EKS
    cluster using CloudFormation under the covers without learning any CloudFormation
    syntax.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个子章节中，我们将看到如何使用eksctl创建EKS集群，在幕后使用CloudFormation，而无需学习任何CloudFormation语法。
- en: 'Option 4: Creating your EKS cluster with eksctl'
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选项4：使用eksctl创建EKS集群
- en: eksctl is an open source project on GitHub ([https://github.com/weaveworks/eksctl](https://github.com/weaveworks/eksctl))
    co-developed between Weaveworks and AWS. It’s similar to Terraform in that it
    runs as a single binary and creates AWS resources; however, it can only be used
    to create, update, and manage EKS clusters (and any associated resources).
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: eksctl是一个开源项目，托管在GitHub上（[https://github.com/weaveworks/eksctl](https://github.com/weaveworks/eksctl)），由Weaveworks和AWS共同开发。它类似于Terraform，以单个二进制文件运行并创建AWS资源；但是，它只能用于创建、更新和管理EKS集群（以及任何相关的资源）。
- en: 'You can install eksctl by following the instructions shown at [https://docs.aws.amazon.com/eks/latest/userguide/eksctl.html](https://docs.aws.amazon.com/eks/latest/userguide/eksctl.html).
    After you install the binary on your workstation, you can test the install using
    the `eksctl info` command. The easiest way to create a cluster is to run the following
    command:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以按照[https://docs.aws.amazon.com/eks/latest/userguide/eksctl.html](https://docs.aws.amazon.com/eks/latest/userguide/eksctl.html)上的说明安装eksctl。安装二进制文件到您的工作站后，您可以使用`eksctl
    info`命令测试安装。创建集群的最简单方法是运行以下命令：
- en: '[PRE15]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This works in a similar way to Terraform in that it will create the VPC, EKS
    cluster, a node group, and all the associated resources, such as IAM roles. In
    the background, eksctl uses CloudFormation and will create two CloudFormation
    stacks that will create (29+) AWS resources. If you run the `$ aws cloudformation
    list-stacks` command, you will see stacks called *eksctl-xx*, which deploy all
    the EKS resources: one for the main resources, including the VPC, and one specifically
    for the node group. The CloudFormation stacks manage the state of the resources
    and can also be used to detect drift and make changes.'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方式与Terraform类似，它将创建VPC、EKS集群、一个节点组以及所有相关的资源，例如IAM角色。在后台，eksctl使用CloudFormation，并将创建两个CloudFormation堆栈，来创建（29+）个AWS资源。如果您运行`$
    aws cloudformation list-stacks`命令，您将看到名为*eksctl-xx*的堆栈，它们部署所有EKS资源：一个用于主资源（包括VPC），另一个专门用于节点组。CloudFormation堆栈管理资源的状态，还可以用来检测漂移并进行更改。
- en: Again, using this option, we have created managed node groups, which we can
    validate by using the `kubectl get nodes` command. After updating the `kubeconfig`
    file, you will see two worker nodes.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 再次使用此选项，我们已创建了托管节点组，可以通过使用`kubectl get nodes`命令验证它们。更新`kubeconfig`文件后，您将看到两个工作节点。
- en: 'You can also modify the default configuration by adding command-line options.
    The following command will change the type and number of instances that are being
    deployed as part of the default node group:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过添加命令行选项来修改默认配置。以下命令将更改作为默认节点组一部分正在部署的实例类型和数量：
- en: '[PRE16]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: eksctl supports different options for your cluster creation. You can list other
    supported options by using the flag `--help` to get more details.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: eksctl支持多种集群创建选项。您可以使用`--help`标志列出其他支持的选项，以获取更多详细信息。
- en: Once you have finished with the cluster, you can use the `$ eksctl delete cluster
    --name mycluster --region eu-central-1` command to remove all the resources. As
    eksctl is a specific EKS provisioning tool, it does have some built-in features,
    such as node draining.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 完成集群配置后，您可以使用`$ eksctl delete cluster --name mycluster --region eu-central-1`命令删除所有资源。由于eksctl是一个特定的EKS配置工具，因此它具有一些内置功能，例如节点排空。
- en: As you can see, eksctl provides a higher level of abstraction to Terraform,
    but it is not as versatile as it is an EKS tool. In the next subsection, we will
    briefly look at the AWS CDK, which uses programming languages such as Python to
    move completely away from any IaC markup languages.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，eksctl为Terraform提供了更高层次的抽象，但由于它是一个EKS工具，因此不如Terraform灵活。在下一小节中，我们将简要介绍AWS
    CDK，它使用像Python这样的编程语言，完全摆脱了任何IaC标记语言。
- en: 'Option 5: Creating your EKS cluster with the CDK'
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选项 5：使用CDK创建您的EKS集群
- en: 'The AWS CDK is similar to Terraform and eksctl in that you end up with a set
    of binaries that can deploy AWS infrastructures. It uses CloudFormation under
    the cover, but it has four main advantages over eksctl:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: AWS CDK类似于Terraform和eksctl，它通过一组二进制文件来部署AWS基础设施。它在后台使用CloudFormation，但与eksctl相比，它有四个主要优势：
- en: The IaC code is written in standard programming languages such as Python, TypeScript,
    Golang, and so on, so developers can build code without learning Terraform or
    CloudFormation markup.
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IaC代码使用标准编程语言编写，如Python、TypeScript、Golang等，因此开发人员可以在不学习Terraform或CloudFormation标记语言的情况下编写代码。
- en: You can leverage existing language control constructs, `IF-THEN-ELSE`, `FOR`
    loops, and so on, as well as existing libraries to build complex logic into your
    IaC scripts.
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以利用现有的语言控制结构，如`IF-THEN-ELSE`、`FOR`循环等，以及现有的库，将复杂逻辑构建到您的IaC脚本中。
- en: You can create non-EKS-related resources such as DynamoDB.
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您还可以创建与EKS无关的资源，如DynamoDB。
- en: Templates can be tested and linted using standard language tools such as pylint
    or pytest.
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用标准语言工具，如pylint或pytest，测试和校验模板。
- en: 'A detailed exploration of the CDK is out of the scope of this book (in fact,
    it could be a whole new book). If you want to really get to grips with the CDK,
    [https://cdkworkshop.com/](https://cdkworkshop.com/) is a great resource. Instead,
    the following table shows the basic commands needed to create an EKS cluster:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: CDK的详细探索超出了本书的范围（事实上，它可以成为一本全新的书）。如果您想深入了解CDK，[https://cdkworkshop.com/](https://cdkworkshop.com/)是一个很好的资源。相反，以下表格显示了创建EKS集群所需的基本命令：
- en: '| **Python Line** | **Description** |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| **Python 行** | **描述** |'
- en: '| --- | --- |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `my_vpc =` `ec2.Vpc.from_lookup(self,"clusterVPC",vpc_id=params[''VPC''])`
    | This line uses the CDK `ec2.Vpc` object to retrieve VPC details from your AWS
    account using the `params[''VPC'']` dictionary. |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| `my_vpc =` `ec2.Vpc.from_lookup(self,"clusterVPC",vpc_id=params[''VPC''])`
    | 这行代码使用 CDK 中的 `ec2.Vpc` 对象，通过 `params[''VPC'']` 字典从 AWS 账户中检索 VPC 详情。 |'
- en: '| `eks_master_role =` `iam.Role.from_role_arn(self,"iderole",params[''IDEROLE''])`
    | This line uses the CDK `iam.Role` object to retrieve role details from your
    AWS account using the `params[''IDEROLE'']` dictionary, used as the main admin
    role for the cluster. |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| `eks_master_role =` `iam.Role.from_role_arn(self,"iderole",params[''IDEROLE''])`
    | 这行代码使用 CDK 中的 `iam.Role` 对象，通过 `params[''IDEROLE'']` 字典从 AWS 账户中检索角色详情，作为集群的主要管理员角色。
    |'
- en: '| `security_group =` `ec2.SecurityGroup.from_lookup_by_id(self,"idesg",params[''IDESG''])`
    | This line uses the CDK `iam.SecurityGroup` object to retrieve an existing security
    group from your AWS account using the `params[''IDESG'']` dictionary, used as
    an additional security group for the cluster. |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| `security_group =` `ec2.SecurityGroup.from_lookup_by_id(self,"idesg",params[''IDESG''])`
    | 这行代码使用 CDK 中的 `iam.SecurityGroup` 对象，通过 `params[''IDESG'']` 字典从 AWS 账户中检索现有的安全组，作为集群的附加安全组。
    |'
- en: '| `my_subnets=[]``for subnet` `in params[''SUBID'']:``my_subnets.append(ec2.Subnet.from_subnet_id(self,f"1{subnet.split(''-'')[1]}",subnet_id=subnet))`
    | These lines create a blank subnet list, then use a standard `FOR` loop to iterate
    over a list or subnet IDs stored in `params[''SUBID'']`, create a subnet object
    using the CDK `ec2.Subnet` object, and append it to the subnet list. |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| `my_subnets=[]``for subnet` `in params[''SUBID'']:``my_subnets.append(ec2.Subnet.from_subnet_id(self,f"1{subnet.split(''-'')[1]}",subnet_id=subnet))`
    | 这些代码行创建了一个空的子网列表，然后使用标准的 `FOR` 循环遍历存储在 `params[''SUBID'']` 中的子网 ID 列表，通过 CDK
    中的 `ec2.Subnet` 对象创建子网对象，并将其添加到子网列表中。 |'
- en: '| `eks.Cluster(self,params[''CLUSTERNAME''],``masters_role=eks_master_role,``security_group=security_group,``version=eval(f"eks.KubernetesVersion.{params[''VERSION'']}"),vpc=my_vpc,``vpc_subnets=my_subnets,``endpoint_access=
    eval(f"eks.EndpointAccess.{params[''CLUSTERTYPE'']}"))` | This line will create
    a cluster using the role, VPC, and subnets retrieved in the previous lines and
    also set the endpoint type and version from the params Python dictionary, which
    has all the configuration information. |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| `eks.Cluster(self,params[''CLUSTERNAME''],``masters_role=eks_master_role,``security_group=security_group,``version=eval(f"eks.KubernetesVersion.{params[''VERSION'']}"),vpc=my_vpc,``vpc_subnets=my_subnets,``endpoint_access=
    eval(f"eks.EndpointAccess.{params[''CLUSTERTYPE'']}"))` | 这行代码将使用前面几行中获取的角色、VPC
    和子网来创建一个集群，并从 `params` Python 字典中设置端点类型和版本，该字典包含了所有的配置信息。 |'
- en: Table 3.4 – Python EKS CDK example
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 表 3.4 – Python EKS CDK 示例
- en: 'Once the code has been written, the CDK binary can be used to do the following:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦代码编写完成，CDK 二进制文件可以用于执行以下操作：
- en: Initialize the AWS region for CDK deployments using the `cdk` `bootstrap` command
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `cdk` `bootstrap` 命令初始化 AWS 区域进行 CDK 部署
- en: Create CloudFormation templates using the `cdk` `synth` command
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `cdk` `synth` 命令创建 CloudFormation 模板
- en: Understand what will be deployed or changed using the `cdk` `diff` command
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `cdk` `diff` 命令了解将要部署或更改的内容
- en: Create and deploy CloudFormation templates using the `cdk` `deploy` command
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `cdk` `deploy` 命令创建并部署 CloudFormation 模板
- en: The CDK provides the highest level of abstraction of all the deployment tools
    and, as such, should be considered a good starting point for EKS automation and
    deployment, but tools such as eksctl and Terraform (Terraform also has a CDK variant)
    provide good options as well. This section has given an overview of the different
    ways a basic EKS cluster can be deployed.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: CDK 提供了所有部署工具中最高级别的抽象，因此应当作为 EKS 自动化和部署的一个良好起点，但像 eksctl 和 Terraform（Terraform
    也有 CDK 变体）这样的工具也提供了很好的选项。本节概述了部署基本 EKS 集群的不同方式。
- en: Summary
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we examined the prerequisites needed before the configuration
    and deployment of a basic Amazon EKS cluster, such as setting up a deployment
    user . We reviewed the different EKS configuration and automation options that
    need configuring in EKS and what frameworks and tools are available to you.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了配置和部署一个基本的 Amazon EKS 集群之前需要的前提条件，如设置部署用户。我们回顾了在 EKS 中需要配置的不同 EKS
    配置和自动化选项，以及可用的框架和工具。
- en: We then stepped through five options, from using the AWS console and CLI to
    different IaC frameworks to create a basic EKS cluster.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们逐步介绍了五种选项，从使用 AWS 控制台和 CLI 到不同的 IaC 框架，来创建一个基本的 EKS 集群。
- en: After completing this lesson, you learned how to provision your EKS cluster
    and have a running cluster under your AWS account, as well as have kubectl and
    the AWS CLI installed to enable interaction with your EKS cluster.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本课程后，你已经学会了如何配置你的 EKS 集群，并且在 AWS 账户下拥有一个正在运行的集群，同时也安装了 kubectl 和 AWS CLI，以便与
    EKS 集群进行交互。
- en: In the next chapter, we are going to move on to the topic of learning how to
    deploy and run your containerized application on Amazon EKS.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始学习如何在 Amazon EKS 上部署和运行容器化应用程序。
- en: Further reading
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Making AWS API calls safely: [https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html)'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全地进行 AWS API 调用：[https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html)
- en: 'CDK deep dive: [https://cdkworkshop.com/](https://cdkworkshop.com/)'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CDK 深入讲解：[https://cdkworkshop.com/](https://cdkworkshop.com/)
- en: 'CloudFormation overview: [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/Welcome.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/Welcome.html)'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CloudFormation 概述：[https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/Welcome.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/Welcome.html)
- en: 'Terraform overview: [https://www.terraform.io/intro](https://www.terraform.io/intro)'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Terraform 概述：[https://www.terraform.io/intro](https://www.terraform.io/intro)
- en: 'Getting started with eksctl: [https://eksctl.io/](https://eksctl.io/)'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用 eksctl：[https://eksctl.io/](https://eksctl.io/)

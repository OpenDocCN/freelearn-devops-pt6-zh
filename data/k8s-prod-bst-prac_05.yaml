- en: '*Chapter 5*: Configuring and Enhancing Kubernetes Networking Services'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第5章*：配置和增强 Kubernetes 网络服务'
- en: In the previous chapter, you learned how to develop a configuration management
    solution for Kubernetes with Ansible. After completing that solution, you are
    now ready to build the upper layer of the Kubernetes cluster, and deploy the networking
    services and add-ons on top of it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你学习了如何使用 Ansible 为 Kubernetes 开发配置管理解决方案。完成该解决方案后，你现在可以着手构建 Kubernetes
    集群的上层，并在其上部署网络服务和附加组件。
- en: In this chapter, we will learn about enhancing and fine-tuning the essential
    networking services and add-ons, such as CoreDNS, ExternalDNS, and Ingress Controller.
    We will not dig into the basic concepts of Kubernetes networking. Topics such
    as Kubernetes networking models, inter-pod communication, intra-pod communication,
    cluster services, and basic load balancing will not be covered, as in this book
    we are more concerned with bringing the cluster to a state of production readiness
    rather than digging into the basics, which you can learn about in introductory
    Kubernetes books.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们将学习如何增强和微调核心的网络服务和附加组件，如 CoreDNS、ExternalDNS 和 Ingress Controller。我们不会深入讲解
    Kubernetes 网络的基本概念。诸如 Kubernetes 网络模型、Pod 间通信、Pod 内部通信、集群服务以及基本负载均衡等主题将不在本章覆盖范围内，因为本书更关注如何将集群带到生产就绪状态，而不是深入基础知识，这些内容可以在
    Kubernetes 入门书籍中学习。
- en: In this chapter, we will focus on bringing the cluster networking closer to
    the production readiness by reconfiguring the pre-deployed services, and also
    deploying additional network services that are essential to Kubernetes clusters.
    You will learn the characteristics of Kubernetes networking best practices, as
    well as how to create deployment templates for the Kubernetes networking services
    and fine tune them.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们将重点讲解如何通过重新配置已部署的服务，使集群的网络更加接近生产环境的准备状态，并且部署 Kubernetes 集群中必不可少的其他网络服务。你将学习
    Kubernetes 网络最佳实践的特点，并了解如何为 Kubernetes 网络服务创建部署模板，并对其进行微调。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们将涵盖以下主题：
- en: Introducing networking production readiness
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引入网络生产环境准备性
- en: Configuring Kube Proxy
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 Kube Proxy
- en: Configuring Amazon CNI plugin
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 Amazon CNI 插件
- en: Configuring CoreDNS
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 CoreDNS
- en: Configuring ExternalDNS
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 ExternalDNS
- en: Configuring NGINX Ingress Controller
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 NGINX Ingress Controller
- en: Deploying the cluster's network services
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署集群的网络服务
- en: Destroying the cluster's resources
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 销毁集群的资源
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The code for this chapter is located at [https://github.com/PacktPublishing/Kubernetes-in-Production-Best-Practices/tree/master/Chapter05](https://github.com/PacktPublishing/Kubernetes-in-Production-Best-Practices/tree/master/Chapter05).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码位于 [https://github.com/PacktPublishing/Kubernetes-in-Production-Best-Practices/tree/master/Chapter05](https://github.com/PacktPublishing/Kubernetes-in-Production-Best-Practices/tree/master/Chapter05)。
- en: 'Check out the following link to see the Code in Action video:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下链接，观看代码演示视频：
- en: '[https://bit.ly/3rmhLdX](https://bit.ly/3rmhLdX)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://bit.ly/3rmhLdX](https://bit.ly/3rmhLdX)'
- en: Introducing networking production readiness
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入网络生产环境准备性
- en: Since the beginning of Docker and the containerization era, there have been
    different challenges and complexities associated with handling and managing containers
    networking. Over the past few years, industry leaders and community contributors
    have worked on solutions to tackle and solve these challenges, and the efforts
    are still in progress.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 自从 Docker 和容器化时代开始以来，处理和管理容器网络一直面临着不同的挑战和复杂性。在过去的几年里，行业领导者和社区贡献者一直在努力寻找解决方案以应对这些挑战，这些努力仍在进行中。
- en: There are multiple container networking models, network plugins, and tools in
    the Kubernetes ecosystem that support either mainstream use cases or specific
    corner cases. You can learn more about these projects and tools at the CNCF cloud
    native network landscape at [https://landscape.cncf.io/category=cloud-native-network&format=card-mode](https://landscape.cncf.io/category=cloud-native-network&format=card-mode).
    In this chapter, we will stick to the services that are essential to the general
    Kubernetes use cases, and their production readiness, such as CoreDNS, NGINX Ingress
    Controller, and ExternalDNS.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 生态系统中，有多种容器网络模型、网络插件和工具，支持主流的用例或特定的边缘用例。你可以在 CNCF 的云原生网络地图中了解更多关于这些项目和工具的信息，链接为
    [https://landscape.cncf.io/category=cloud-native-network&format=card-mode](https://landscape.cncf.io/category=cloud-native-network&format=card-mode)。在本章中，我们将专注于那些对一般
    Kubernetes 用例至关重要并且具备生产就绪性的服务，例如 CoreDNS、NGINX Ingress Controller 和 ExternalDNS。
- en: In the following sections, you will learn how to enhance and configure the pre-deployed
    network components that are usually shipped with AWS **Elastic Kubernetes Service**
    (**EKS**) and how to improve them. This is aside from deploying networking services
    and add-ons that are essential to networking functionality, operations, and reliability.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，您将学习如何增强和配置预先部署的网络组件，这些组件通常是与 AWS **弹性 Kubernetes 服务** (**EKS**) 一起提供的，并且如何改进它们。这是在部署对网络功能、操作和可靠性至关重要的网络服务和附加组件之外的内容。
- en: 'These are the network services and add-ons that we will cover:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们将覆盖的网络服务和附加组件：
- en: '`kube-proxy`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kube-proxy`'
- en: Amazon VPC K8s CNI
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亚马逊 VPC K8s CNI
- en: CoreDNS
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CoreDNS
- en: ExternalDNS
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ExternalDNS
- en: NGINX Ingress Controller
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NGINX Ingress Controller
- en: 'For each of these components, we will use the Ansible configuration management
    solution to deploy and configure them by doing the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些组件，我们将使用 Ansible 配置管理方案进行部署和配置，具体步骤如下：
- en: Defining configuration variables under the cluster's Ansible `group_vars` directory,
    available at [https://github.com/PacktPublishing/Kubernetes-in-Production-Best-Practices/tree/master/Chapter05/ansible/group_vars/all](https://github.com/PacktPublishing/Kubernetes-in-Production-Best-Practices/tree/master/Chapter05/ansible/group_vars/all),
    and the `inventories` directory, available at [https://github.com/PacktPublishing/Kubernetes-in-Production-Best-Practices/tree/master/Chapter05/ansible/inventories/packtclusters/group_vars/override](https://github.com/PacktPublishing/Kubernetes-in-Production-Best-Practices/tree/master/Chapter05/ansible/inventories/packtclusters/group_vars/override)
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在集群的 Ansible `group_vars` 目录下定义配置变量，目录可在 [https://github.com/PacktPublishing/Kubernetes-in-Production-Best-Practices/tree/master/Chapter05/ansible/group_vars/all](https://github.com/PacktPublishing/Kubernetes-in-Production-Best-Practices/tree/master/Chapter05/ansible/group_vars/all)
    找到，以及在 `inventories` 目录下，目录可在 [https://github.com/PacktPublishing/Kubernetes-in-Production-Best-Practices/tree/master/Chapter05/ansible/inventories/packtclusters/group_vars/override](https://github.com/PacktPublishing/Kubernetes-in-Production-Best-Practices/tree/master/Chapter05/ansible/inventories/packtclusters/group_vars/override)
    找到
- en: Developing a deployment template
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开发部署模板
- en: Creating an Ansible task
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 Ansible 任务
- en: Adding an entry to the cluster playbook
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向集群剧本添加条目
- en: If there are parts of the code and templates that do not introduce new concepts
    or change the configuration, we will not include their source code in the chapter
    text. Instead, you can view them in the book's GitHub source code repository at
    [https://github.com/PacktPublishing/Kubernetes-in-Production-Best-Practices/tree/master/Chapter05](https://github.com/PacktPublishing/Kubernetes-in-Production-Best-Practices/tree/master/Chapter05).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有些代码和模板的内容没有引入新概念或改变配置，我们不会在本章中包含它们的源代码。相反，您可以在书籍的 GitHub 源代码库中查看它们，链接为 [https://github.com/PacktPublishing/Kubernetes-in-Production-Best-Practices/tree/master/Chapter05](https://github.com/PacktPublishing/Kubernetes-in-Production-Best-Practices/tree/master/Chapter05)。
- en: Configuring Kube Proxy
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 Kube Proxy
- en: '`kube-proxy` is an agent service that runs on each node in the cluster to create,
    update, and delete network rules on the nodes, usually through the use of Linux
    iptables. These network rules allow inter-pod and intra-pod communication inside
    and outside the Kubernetes cluster.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`kube-proxy` 是一种代理服务，在集群中的每个节点上运行，负责在节点上创建、更新和删除网络规则，通常通过使用 Linux iptables。这些网络规则允许
    Kubernetes 集群内部和外部的 Pod 之间进行通信。'
- en: Irrespective of whether you use a self-managed Kubernetes cluster or a hosted
    one, you need to control the configuration options that you pass to `kube-proxy`.
    As we are using EKS, `kube-proxy` comes pre-deployed with the cluster, which leaves
    us without a full control over its configuration, and we need to change this.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是使用自管Kubernetes集群还是托管集群，您都需要控制传递给`kube-proxy`的配置选项。由于我们使用的是EKS，`kube-proxy`已经随集群预部署，这使我们无法完全控制其配置，因此需要对此进行更改。
- en: During the cluster's lifetime, you need to control the periodic updates of `kube-proxy`
    and include them within the cluster's updates' pipeline. Also, you need to optimize
    its performance by controlling the runtime parameters, including `--iptables-sync-period`,
    `--iptables-min-sync-period`, and `--proxy-mode`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在集群生命周期中，您需要控制`kube-proxy`的周期性更新，并将它们包含在集群更新的管道中。此外，您还需要通过控制运行时参数来优化其性能，包括`--iptables-sync-period`、`--iptables-min-sync-period`和`--proxy-mode`。
- en: 'To learn about the remainder of the configuration options, please check the
    following link: [https://kubernetes.io/docs/reference/command-line-tools-reference/kube-proxy/#options](https://kubernetes.io/docs/reference/command-line-tools-reference/kube-proxy/#options).'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解其余的配置选项，请查看以下链接：[https://kubernetes.io/docs/reference/command-line-tools-reference/kube-proxy/#options](https://kubernetes.io/docs/reference/command-line-tools-reference/kube-proxy/#options)。
- en: Important note
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: You can find the complete source code at [https://github.com/PacktPublishing/Kubernetes-in-Production-Best-Practices/blob/master/Chapter05/ansible/templates/kube-proxy/kube-proxy.yaml](https://github.com/PacktPublishing/Kubernetes-in-Production-Best-Practices/blob/master/Chapter05/ansible/templates/kube-proxy/kube-proxy.yaml).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接找到完整的源代码：[https://github.com/PacktPublishing/Kubernetes-in-Production-Best-Practices/blob/master/Chapter05/ansible/templates/kube-proxy/kube-proxy.yaml](https://github.com/PacktPublishing/Kubernetes-in-Production-Best-Practices/blob/master/Chapter05/ansible/templates/kube-proxy/kube-proxy.yaml)。
- en: 'Now, let''s create the Ansible template and configuration for `kube-proxy`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们为`kube-proxy`创建Ansible模板和配置：
- en: 'Define the configuration variables and add them to the `group_vars` directory
    in this path: `ansible/group_vars/all/kube-proxy.yaml`. The basic configuration
    contains the image and its tag, which are useful for keeping track of the `kube-proxy`
    version that is deployed to your cluster, and for controlling its upgrades:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义配置变量并将它们添加到此路径下的`group_vars`目录中：`ansible/group_vars/all/kube-proxy.yaml`。基本配置包含镜像及其标签，这对于跟踪部署到集群中的`kube-proxy`版本以及控制其升级非常有用：
- en: '[PRE0]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create the deployment template for the `kube-proxy` DaemonSet in the following
    path: `ansible/templates/kube-proxy/kube-proxy.yaml`.'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以下路径下创建`kube-proxy` DaemonSet的部署模板：`ansible/templates/kube-proxy/kube-proxy.yaml`。
- en: 'The following code snippet is part of this template, and the only code lines
    that you need to modify are where the `image` and `command` specs are defined:'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下代码片段是该模板的一部分，您需要修改的代码行仅是定义`image`和`command`规格的地方：
- en: '[PRE1]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the following part of the template, you can define and fine-tune the `kube-proxy`
    runtime options and pass them to the container entry point command:'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在模板的以下部分中，您可以定义并微调`kube-proxy`的运行时选项，并将它们传递给容器的入口命令：
- en: '[PRE2]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following are notable configuration options that you need to consider for
    `kube-proxy`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是您需要考虑的`kube-proxy`配置选项：
- en: '`--proxy-mode`: by default, `kube-proxy` uses the `iptables` mode, as it is
    hardened on production and is faster for small-sized clusters. On the other hand,
    the `ipvs` mode is recommended if you have a scaling cluster with services numbering
    above 5,000, as the `ipvs` implementation ensures superior performance.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--proxy-mode`：默认情况下，`kube-proxy`使用`iptables`模式，因为它在生产环境中经过加固，且对于小型集群更快。另一方面，如果您有一个扩展集群，服务数量超过5000，则建议使用`ipvs`模式，因为`ipvs`实现确保了更高的性能。'
- en: '`--kube-api-qps`: this configuration option limits the `kube-proxy` and hit
    `kube-apiserver`. The default value of this option is `5`, but it is recommended
    to increase it to `10` if you expect your cluster to run above 5,000 services.
    However, the more QPS that `kube-proxy` sends to `kube-apiserver`, the busier
    it will become, and this could affect the performance of `kube-apiserver`. You
    should select the QPS limit based on the cluster size (number of running services)
    and your control plane capacity, so your cluster can serve all `kube-proxy` requests
    in a timely manner.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--kube-api-qps`：此配置选项限制了`kube-proxy`对`kube-apiserver`的请求次数。该选项的默认值为`5`，但如果你预期你的集群会运行超过
    5000 个服务，建议将其增加到`10`。然而，`kube-proxy`向`kube-apiserver`发送的QPS越高，`kube-apiserver`就会越繁忙，这可能会影响其性能。你应该根据集群的规模（运行的服务数量）和控制平面容量选择合适的QPS限制，以确保集群能够及时处理所有`kube-proxy`请求。'
- en: '`--iptables-sync-period`: This option defines the maximum time interval when
    `iptables` rules are refreshed. By default, it is set to `30s`, although it is
    recommended to decrease this to `20s` for small clusters. The cluster admin needs
    to decide the appropriate time interval and weigh between the conflicting priorities.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--iptables-sync-period`：此选项定义了`iptables`规则刷新的最大时间间隔。默认情况下，设置为`30s`，但对于小型集群，建议将其减少到`20s`。集群管理员需要根据实际情况决定合适的时间间隔，并在不同优先级之间权衡。'
- en: Let's assume you decrease the interval to `1s`. This means that `kube-proxy`
    needs to run the sync process every `1s`, which means an increased load on the
    worker nodes where `kube-proxy` is running, while also rendering `iptables` busy
    and blocking other operations on them. On the other hand, if you increase the
    sync period and run the sync process less frequently, this could result in pods
    being out of iptables sync for a fraction of time, which may lead to loss of transactions.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 假设你将同步间隔减少到`1s`。这意味着`kube-proxy`需要每`1s`执行一次同步操作，这将增加运行`kube-proxy`的工作节点的负载，同时使得`iptables`处于繁忙状态，并阻塞其他操作。另一方面，如果你增加同步周期并减少同步频率，可能会导致一小段时间内Pods与`iptables`不同步，这可能会导致事务丢失。
- en: There are other options available that handle configurations for `ipvs`, `conntrack`,
    `config`, and `metrics`. However, you should be careful whenever you modify any
    of these, and if you do decide to modify them, you have to deploy the changes
    to a non-production cluster to examine the performance prior to promotion to production.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他选项可以处理`ipvs`、`conntrack`、`config`和`metrics`的配置。然而，修改这些配置时需要小心，如果你决定修改它们，必须先将更改部署到非生产集群中，检查性能，然后再将其推广到生产环境。
- en: For a complete list of `kube-proxy` configuration options, please refer to the
    Kubernetes official documentation at [https://kubernetes.io/docs/reference/command-line-tools-reference/kube-proxy/](https://kubernetes.io/docs/reference/command-line-tools-reference/kube-proxy/).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看完整的`kube-proxy`配置选项，请参阅Kubernetes官方文档：[https://kubernetes.io/docs/reference/command-line-tools-reference/kube-proxy/](https://kubernetes.io/docs/reference/command-line-tools-reference/kube-proxy/)。
- en: Configuring the Amazon CNI plugin
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Amazon CNI插件
- en: In Kubernetes, the **Container Network Interface** (**CNI**) provides a specification
    and framework for writing container network plugins to manage container networking,
    including pod communication and **IP Address Management** (**IPAM**). In the context
    of this book, we will not go into the details of the CNI plugins and how they
    work. What does concern us is how to make the best use of the CNI plugin, and
    how to configure it properly.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kubernetes中，**容器网络接口**（**CNI**）提供了编写容器网络插件的规范和框架，以管理容器网络，包括Pod通信和**IP地址管理**（**IPAM**）。在本书的上下文中，我们不会深入讨论CNI插件及其工作原理。我们关注的是如何充分利用CNI插件，以及如何正确配置它。
- en: There are multiple CNI plugins that have been battle-tested over the years.
    Some of these satisfy the needs of general use cases, such as Calico, which is
    a highly recommended CNI plugin, while there are other CNI plugins that lean toward
    solving specific use cases.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种CNI插件经过多年的实践考验。一些插件满足一般用例的需求，例如Calico，这是一款高度推荐的CNI插件，而其他CNI插件则倾向于解决特定的用例。
- en: The list of production tested CNI plugins includes Calico, Cilium, Azure CNI,
    Contiv, Flannel, Weave Net, and AWS CNI. The list goes on. You can get a comprehensive
    list of the supported CNI plugins and their features from the Kubernetes official
    documentation at [https://kubernetes.io/docs/concepts/cluster-administration/networking/](https://kubernetes.io/docs/concepts/cluster-administration/networking/).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 经生产测试的 CNI 插件列表包括 Calico、Cilium、Azure CNI、Contiv、Flannel、Weave Net 和 AWS CNI
    等。你可以从 Kubernetes 官方文档中获取支持的 CNI 插件及其特性的完整列表：[https://kubernetes.io/docs/concepts/cluster-administration/networking/](https://kubernetes.io/docs/concepts/cluster-administration/networking/)。
- en: For the clusters that we provision in this book, we will use the AWS CNI plugin
    (**amazon-vpc-cni-k8s**) because it is the default for EKS, and it is developed
    to cover the general networking uses cases to ensure that Kubernetes works smoothly
    with AWS.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本书中我们配置的集群，我们将使用 AWS CNI 插件（**amazon-vpc-cni-k8s**），因为它是 EKS 的默认插件，并且它的开发旨在覆盖通用的网络使用场景，确保
    Kubernetes 与 AWS 配合顺畅运行。
- en: The AWS CNI plugin comes pre-deployed to the cluster with a default configuration
    in place. This could be sufficient for simple clusters; however, we need to take
    full control over the configuration, so we decided to overwrite its DaemonSet
    and add it to the cluster's Ansible configuration for easier control.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: AWS CNI 插件已预先部署到集群中，并设置了默认配置。对于简单集群来说，这可能足够了；然而，我们需要对配置进行完全控制，因此我们决定覆盖其 DaemonSet
    并将其添加到集群的 Ansible 配置中，以便更方便地管理。
- en: During the lifetime of the cluster, you need to control the periodic updates
    to `amazon-vpc-cni-k8s` and include them within the cluster's updates' pipeline.
    Also, you will need to optimize its performance by adjusting the configuration
    variables that are passed to it, such as `MINIMUM_IP_TARGET`, `WARM_IP_TARGET`,
    and `AWS_VPC_ENI_MTU`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在集群生命周期中，你需要控制对 `amazon-vpc-cni-k8s` 的定期更新，并将其包含在集群更新的管道中。此外，你还需要通过调整传递给它的配置变量来优化其性能，如
    `MINIMUM_IP_TARGET`、`WARM_IP_TARGET` 和 `AWS_VPC_ENI_MTU`。
- en: 'To learn more about the other CNI configuration options, please check this
    link: [https://docs.aws.amazon.com/eks/latest/userguide/cni-env-vars.html](https://docs.aws.amazon.com/eks/latest/userguide/cni-env-vars.html).'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 若要了解其他 CNI 配置选项，请查看此链接：[https://docs.aws.amazon.com/eks/latest/userguide/cni-env-vars.html](https://docs.aws.amazon.com/eks/latest/userguide/cni-env-vars.html)。
- en: Important note
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: When you redeploy the updated `amazon-vpc-cni-k8s` DaemonSet into your cluster,
    the CNI pods will get restarted. The updated pods are rolled out one after the
    other, but this still causes short periods of CNI plugin unavailability, which
    may be noticeable in the case of a busy cluster.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将更新后的 `amazon-vpc-cni-k8s` DaemonSet 重新部署到集群时，CNI Pods 会被重启。更新后的 Pods 会依次推出，但这仍然会导致短暂的
    CNI 插件不可用，这在集群繁忙时可能会显得明显。
- en: You can find the complete source code at [https://github.com/PacktPublishing/Kubernetes-in-Production-Best-Practices/blob/master/Chapter05/ansible/templates/cni/amazon-k8s-cni.yaml](https://github.com/PacktPublishing/Kubernetes-in-Production-Best-Practices/blob/master/Chapter05/ansible/templates/cni/amazon-k8s-cni.yaml).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [https://github.com/PacktPublishing/Kubernetes-in-Production-Best-Practices/blob/master/Chapter05/ansible/templates/cni/amazon-k8s-cni.yaml](https://github.com/PacktPublishing/Kubernetes-in-Production-Best-Practices/blob/master/Chapter05/ansible/templates/cni/amazon-k8s-cni.yaml)
    找到完整的源代码。
- en: 'Now, let''s create the Ansible template and configuration for `amazon-vpc-cni-k8s`:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们为 `amazon-vpc-cni-k8s` 创建 Ansible 模板和配置：
- en: 'Define the configuration variables and add them to the `group_vars` directory
    in this path: `ansible/group_vars/all/cni.yaml`. The basic configuration contains
    the image and its tag, which are useful for keeping track of the `amazon-vpc-cni-k8s`
    version that is deployed to your cluster, and for controlling its upgrades.'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义配置变量并将其添加到以下路径的 `group_vars` 目录中：`ansible/group_vars/all/cni.yaml`。基本配置包含镜像及其标签，这对于跟踪已部署到集群中的
    `amazon-vpc-cni-k8s` 版本并控制其升级非常有用。
- en: 'There are two important configuration values for cluster performance:'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 集群性能有两个重要的配置值：
- en: '- `MINIMUM_IP_TARGET`, which is important for pre-scaling as it specifies the
    number of minimum IP addresses to allocate for pod assignment on the node'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- `MINIMUM_IP_TARGET`，它对预扩展非常重要，因为它指定了在节点上为 Pod 分配的最小 IP 地址数量'
- en: '- `WARM_IP_TARGET`, which is important for dynamic scaling as it specifies
    the number of free IP addresses that the `ipamD` daemon should attempt to keep
    available for pod assignment on the node.'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- `WARM_IP_TARGET`，它对动态扩展非常重要，因为它指定了 `ipamD` 守护进程应尝试保持可用的空闲 IP 地址数量，以供节点上 Pod
    分配。'
- en: 'Both of these variables together ensure that sufficient IP addresses are available
    for new pods, which improves the start-up time of pods and enhances cluster uptime
    and recovery time. You can specify the values of these variables based on the
    estimated number of pods running in the cluster, and the number during spikes:'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这两个变量一起确保为新 Pods 提供足够的 IP 地址，从而改善 Pods 的启动时间，并提高集群的正常运行时间和恢复时间。您可以根据集群中运行的 Pods
    预估数量以及高峰时段的数量来指定这些变量的值：
- en: '[PRE3]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Create the deployment template for the `amazon-vpc-cni-k8s` DaemonSet in this
    path: `ansible/templates/cni/amazon-k8s-cni.yaml`.'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此路径下创建 `amazon-vpc-cni-k8s` DaemonSet 的部署模板：`ansible/templates/cni/amazon-k8s-cni.yaml`。
- en: 'The following code snippet is part of this template, and the only code lines
    that you need to modify are where the `image` and `env` specs are defined:'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下代码片段是此模板的一部分，您需要修改的唯一代码行是定义 `image` 和 `env` 规格的地方：
- en: '[PRE4]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can configure other options for `amazon-vpc-cni-k8s` by adding them to the
    container environment variables, as in the previous code snippet for the container
    section in the DaemonSet template.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过将其他选项添加到容器环境变量中来配置 `amazon-vpc-cni-k8s`，就像在 DaemonSet 模板中为容器部分编写的代码片段一样。
- en: Configuring CoreDNS
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 CoreDNS
- en: Kubernetes used to have `kube-dns` as its default cluster DNS service, but starting
    from version 1.11, it uses CoreDNS. Also, it gets pre-deployed by most of the
    managed Kubernetes offerings, including EKS, that we use in this book.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 曾使用 `kube-dns` 作为默认的集群 DNS 服务，但从版本 1.11 开始，它改用了 CoreDNS。此外，大多数托管的
    Kubernetes 服务，包括我们在本书中使用的 EKS，都会预先部署 CoreDNS。
- en: For the other Kubernetes managed services that still use `kube-dns`, such as
    GKE, we recommend referring to the official documentation of `kube-dns`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他仍然使用 `kube-dns` 的 Kubernetes 托管服务，例如 GKE，我们建议参考 `kube-dns` 的官方文档。
- en: 'CoreDNS is very flexible as it is modular and pluggable. It has a rich set
    of plugins that can be enabled to enhance DNS functionalities. This is why it
    is powerful and generally preferred over `kube-dns` and other Kubernetes DNS solutions.
    To learn more about the supported plugins, please refer to the following list:
    [https://coredns.io/plugins/](https://coredns.io/plugins/).'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: CoreDNS 非常灵活，因为它是模块化和可插拔的。它拥有丰富的插件集，可以启用以增强 DNS 功能。这也是它强大且通常优于 `kube-dns` 和其他
    Kubernetes DNS 解决方案的原因。要了解更多支持的插件，请参阅以下列表：[https://coredns.io/plugins/](https://coredns.io/plugins/)。
- en: During the cluster's lifetime, you need to control CoreDNS configuration as
    code, its periodic updates, and include all of this within the cluster's deployment
    pipeline. Also, you will need to optimize your cluster DNS performance and add
    extra DNS functionalities by enabling CoreDNS plugins.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在集群生命周期中，您需要将 CoreDNS 配置作为代码进行管理，并定期更新，并将所有这些内容包含在集群的部署流水线中。同时，您还需要优化集群的 DNS
    性能，并通过启用 CoreDNS 插件来添加额外的 DNS 功能。
- en: 'It is recommended to tune the CoreDNS resource quota for CPU and memory to
    improve cluster DNS performance, especially in the case of a heavily scaling cluster.
    For detailed resource configuration and scaling, please check this link: [https://github.com/coredns/deployment/blob/master/kubernetes/Scaling_CoreDNS.md#](https://github.com/coredns/deployment/blob/master/kubernetes/Scaling_CoreDNS.md#).'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐调整 CoreDNS 的资源配额（如 CPU 和内存）以提高集群 DNS 的性能，尤其是在集群大规模扩展的情况下。有关详细的资源配置和扩展，请查看此链接：[https://github.com/coredns/deployment/blob/master/kubernetes/Scaling_CoreDNS.md#](https://github.com/coredns/deployment/blob/master/kubernetes/Scaling_CoreDNS.md#)。
- en: Important note
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: You can find this section's complete source code at [https://github.com/PacktPublishing/Kubernetes-in-Production-Best-Practices/blob/master/Chapter05/ansible/templates/core-dns/core-dns.yaml](https://github.com/PacktPublishing/Kubernetes-in-Production-Best-Practices/blob/master/Chapter05/ansible/templates/core-dns/core-dns.yaml).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 [https://github.com/PacktPublishing/Kubernetes-in-Production-Best-Practices/blob/master/Chapter05/ansible/templates/core-dns/core-dns.yaml](https://github.com/PacktPublishing/Kubernetes-in-Production-Best-Practices/blob/master/Chapter05/ansible/templates/core-dns/core-dns.yaml)
    查找本节的完整源代码。
- en: 'Now, let''s create the Ansible template and configuration for `coredns`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们为 `coredns` 创建 Ansible 模板和配置：
- en: 'Define the configuration variables and add them to the `group_vars` directory
    in this path: `ansible/group_vars/all/core-dns.yaml`. The basic configuration
    contains the image and its tag, which are useful for keeping track of the CoreDNS
    version that is deployed to your cluster, and for controlling its upgrades.'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义配置变量并将其添加到此路径中的`group_vars`目录：`ansible/group_vars/all/core-dns.yaml`。基础配置包含镜像及其标签，这对于跟踪部署到集群的CoreDNS版本并控制其升级非常有用。
- en: 'The default IP of the cluster DNS is usually `172.20.0.10` unless you decide
    to change it. You can specify the number of CoreDNS pods across the cluster by
    setting the number of replicas:'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 集群DNS的默认IP通常是`172.20.0.10`，除非你决定更改它。你可以通过设置副本数来指定整个集群中的CoreDNS Pod数量：
- en: '[PRE5]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Create the deployment template for the CoreDNS pods in this path: `ansible/templates/core-dns
    /core-dns.yaml`.'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此路径中创建CoreDNS Pods的部署模板：`ansible/templates/core-dns/core-dns.yaml`。
- en: 'The following code snippet is part of this template, and the notable configuration
    here in this deployment template is the number of CoreDNS replicas and the Docker
    image:'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下代码片段是此模板的一部分，模板中值得注意的配置是CoreDNS副本的数量和Docker镜像：
- en: '[PRE6]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the following code snippet, you configure the CoreDNS image and tag:'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在以下代码片段中，你配置了CoreDNS镜像和标签：
- en: '[PRE7]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the following code snippet, you specify the `ConfigMap` CoreDNS, where you
    can modify `Corefile` to enable additional plugins and fine-tune their configurations:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以下代码片段中，你指定了`ConfigMap` CoreDNS，在其中你可以修改`Corefile`以启用额外的插件并微调其配置：
- en: '[PRE8]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the previous code for the `ConfigMap`, we added extra plugins that help
    to improve the cluster''s DNS performance as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的`ConfigMap`代码中，我们添加了额外的插件，这些插件有助于提高集群的DNS性能，如下所示：
- en: '`ready`: An HTTP endpoint on port `8181` will return `200 OK`, when all plugins
    that are able to signal readiness have done so.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ready`：当所有能够信号就绪的插件完成时，端口`8181`上的HTTP端点将返回`200 OK`。'
- en: '`loop`: This plugin halts the CoreDNS process if a forwarding loop is detected.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`loop`：此插件会在检测到转发循环时停止CoreDNS进程。'
- en: '`reload`: This plugin automatically reloads `Corefile` whenever it gets changed.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reload`：此插件会在`Corefile`发生变化时自动重新加载。'
- en: '`loadbalance`: This plugin randomizes the order of DNS records in the answers
    and is a round-robin DNS load balancer.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`loadbalance`：此插件会随机排列DNS记录的顺序，并作为一个轮询DNS负载均衡器。'
- en: '`autopath @kubernetes`: This plugin follows the chain of search path elements
    and return the first reply that is not `NXDOMAIN`.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autopath @kubernetes`：此插件会跟随搜索路径元素链，并返回第一个不是`NXDOMAIN`的回复。'
- en: '`cache`: This plugin enables a frontend cache. It is enabled by default; however,
    it has `30` seconds as a default caching duration, but we recommend increasing
    this value to `300` seconds to achieve better performance in the case of large
    clusters.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cache`：此插件启用前端缓存。默认情况下启用；然而，默认的缓存持续时间为`30`秒，我们建议将此值增加到`300`秒，以便在大规模集群中获得更好的性能。'
- en: 'I encourage you to use the preceding CoreDNS plugins, and also check the `plugins`
    directory, which could have other interesting and useful plugins that solve specific
    problems or provide options for your applications, here: [https://coredns.io/manual/plugins/](https://coredns.io/manual/plugins/).'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我鼓励你使用前面提到的CoreDNS插件，还可以查看`plugins`目录，里面可能有其他有趣且有用的插件，能解决特定问题或为你的应用提供更多选项，链接：[https://coredns.io/manual/plugins/](https://coredns.io/manual/plugins/)。
- en: Configuring ExternalDNS
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置ExternalDNS
- en: While CoreDNS serves as the internal DNS server for Kubernetes clusters, ExternalDNS
    is a Kubernetes add-on that is used to manage your cluster external DNS providers,
    including Route 53, AzureDNS, and Google Cloud DNS.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然CoreDNS充当Kubernetes集群的内部DNS服务器，但ExternalDNS是一个Kubernetes附加组件，用于管理集群的外部DNS提供商，包括Route
    53、AzureDNS和Google Cloud DNS。
- en: It makes Kubernetes deployments and services discoverable through public DNS
    services, such as Route 53\. It queries the Kubernetes API to retrieve a list
    of services and ingresses, and then it communicates with the public DNS and registers
    these records.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 它使Kubernetes部署和服务能够通过公共DNS服务（如Route 53）进行发现。它查询Kubernetes API以检索服务和入口的列表，然后与公共DNS通信并注册这些记录。
- en: ExternalDNS allows you to control DNS records (via cloud DNS services such as
    AWS Route 53 or Google Cloud DNS) dynamically via Kubernetes services and ingresses.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: ExternalDNS允许你通过Kubernetes服务和入口动态地控制DNS记录（通过云DNS服务，如AWS Route 53或Google Cloud
    DNS）。
- en: ExternalDNS does not come pre-installed with the cluster, so you need to deploy
    it and specify its configuration, which includes its Docker image, the number
    of replicas to run, DNS record syncing and interval updates, the cloud provider
    type (that is, AWS, Azure, and so on), and the hosted zone ID (in the case of
    AWS Route 53).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: ExternalDNS 并没有预安装在集群中，因此你需要部署它并指定其配置，包括其 Docker 镜像、要运行的副本数量、DNS 记录同步和间隔更新、云提供商类型（例如
    AWS、Azure 等）以及托管区域 ID（以 AWS Route 53 为例）。
- en: Important note
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: You can find the complete source code at [https://github.com/PacktPublishing/Kubernetes-in-Production-Best-Practices/blob/master/Chapter05/ansible/templates/external-dns/external-dns.yaml](https://github.com/PacktPublishing/Kubernetes-in-Production-Best-Practices/blob/master/Chapter05/ansible/templates/external-dns/external-dns.yaml).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [https://github.com/PacktPublishing/Kubernetes-in-Production-Best-Practices/blob/master/Chapter05/ansible/templates/external-dns/external-dns.yaml](https://github.com/PacktPublishing/Kubernetes-in-Production-Best-Practices/blob/master/Chapter05/ansible/templates/external-dns/external-dns.yaml)
    找到完整的源代码。
- en: 'Now, let''s create the Ansible template and configuration for ExternalDNS:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们为 ExternalDNS 创建 Ansible 模板和配置：
- en: 'Define the configuration variables and add them to the `group_vars` directory
    in this path: `ansible/group_vars/all/external-dns.yaml`. The basic configuration
    contains the image and its tag, which are useful for keeping track of the ExternalDNS
    version that is deployed to your cluster, and for controlling its upgrades.'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义配置变量，并将其添加到此路径中的 `group_vars` 目录：`ansible/group_vars/all/external-dns.yaml`。基本配置包含镜像及其标签，便于跟踪已部署到集群的
    ExternalDNS 版本，并控制其升级。
- en: 'Also, you specify the values for other configuration variables, including `log_level`,
    `provider`, `aws_zone_type`, `interval`, `route53_zone_type`, and `external_dns_replicas`:'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，你还需要为其他配置变量指定值，包括 `log_level`、`provider`、`aws_zone_type`、`interval`、`route53_zone_type`
    和 `external_dns_replicas`：
- en: '[PRE9]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Create the deployment template for the ExternalDNS pods in this path: `ansible/templates/external-dns
    /external-dns.yaml`.'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以下路径创建 ExternalDNS Pod 的部署模板：`ansible/templates/external-dns/external-dns.yaml`。
- en: 'In the following code snippet of the template, you configure the number of
    ExternalDNS replicas:'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在以下模板的代码片段中，你可以配置 ExternalDNS 的副本数量：
- en: '[PRE10]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then you configure the ExternalDNS image and tag, in addition to the ExternalDNS
    runtime configuration variables, including `log-level`, `source`, `provider`,
    `aws-zone-id`, `interval`, `registry`, and `txt-owner-id`:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，你配置 ExternalDNS 镜像和标签，除了 ExternalDNS 的运行时配置变量，包括 `log-level`、`source`、`provider`、`aws-zone-id`、`interval`、`registry`
    和 `txt-owner-id`：
- en: '[PRE11]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'For ExternalDNS to operate properly, it needs to access the Route 53 DNS resources.
    This is why you need to create the following IAM policy to allow ExternalDNS to
    list the hosted zones, list the DNS record sets, and change the DNS records:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使 ExternalDNS 正常运行，它需要访问 Route 53 的 DNS 资源。这就是为什么你需要创建以下 IAM 策略，以允许 ExternalDNS
    列出托管的区域、列出 DNS 记录集并修改 DNS 记录：
- en: '[PRE12]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If you do not create the preceding IAM policy and attach it to the worker nodes
    or to the pod, then ExternalDNS will fail to operate.
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你没有创建上述 IAM 策略并将其附加到工作节点或 Pod 上，则 ExternalDNS 将无法正常运行。
- en: ExternalDNS can be configured to use the majority of DNS providers, including
    AzureDNS, Google Cloud DNS, CloudFlare, and DNSimple.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: ExternalDNS 可以配置为使用大多数 DNS 提供商，包括 AzureDNS、Google Cloud DNS、CloudFlare 和 DNSimple。
- en: To get more details and detailed code samples on how to use ExternalDNS with
    your DNS provider and your Kubernetes deployments, please check the official documentation
    at [https://github.com/kubernetes-sigs/external-dns](https://github.com/kubernetes-sigs/external-dns).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取更多关于如何将 ExternalDNS 与你的 DNS 提供商以及 Kubernetes 部署一起使用的详细信息和代码示例，请查看官方文档：[https://github.com/kubernetes-sigs/external-dns](https://github.com/kubernetes-sigs/external-dns)。
- en: Configuring NGINX Ingress Controller
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 NGINX Ingress Controller
- en: 'There are three main ways in which to expose Kubernetes services externally:
    NodePort, load balancers, and Ingress. In this section, we will focus on ingresses,
    as they fulfill the needs of the majority of the workloads and deployments on
    Kubernetes clusters.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种主要方式可以将 Kubernetes 服务暴露到外部：NodePort、负载均衡器和 Ingress。本节将重点讨论 Ingress，因为它满足了大多数工作负载和
    Kubernetes 集群中部署的需求。
- en: Ingress exposes TCP/IP L7 services (such as HTTP/HTTPS) and it routes traffic
    from outside the cluster to services within the cluster. Ingress controls traffic
    routing through a defined set of rules for each ingress resource and/or a global
    configuration for all ingress resources.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Ingress暴露TCP/IP L7服务（如HTTP/HTTPS），并将来自集群外部的流量路由到集群内的服务。Ingress通过为每个Ingress资源定义的一组规则和/或所有Ingress资源的全局配置来控制流量路由。
- en: There are many configurations that an ingress can control, including giving
    services an external URL, SSL/TLS termination, session validity, and name-based
    virtual hosting. An ingress controller is the Kubernetes resource that is responsible
    for fulfilling the ingress.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Ingress可以控制许多配置，包括为服务提供外部URL、SSL/TLS终止、会话有效性和基于名称的虚拟主机。Ingress控制器是负责履行Ingress的Kubernetes资源。
- en: The most popular and battle-tested ingress is NGINX Ingress Controller. This
    is an ingress controller for Kubernetes that uses NGINX as a reverse proxy and
    load balancer.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 最受欢迎且经过充分测试的Ingress是NGINX Ingress Controller。它是一个Kubernetes的Ingress控制器，使用NGINX作为反向代理和负载均衡器。
- en: NGINX Ingress Controller does not come pre-installed with the cluster, so you
    need to deploy and configure it on your cluster, which includes its Docker image,
    the number of replicas to run, runtime arguments, and service and cloud load balancer
    specs.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: NGINX Ingress Controller并未预装在集群中，因此您需要在集群上部署并配置它，包括其Docker镜像、运行的副本数量、运行时参数以及服务和云负载均衡器规格。
- en: Important note
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: You can find the complete source code at [https://github.com/PacktPublishing/Kubernetes-in-Production-Best-Practices/blob/master/Chapter05/ansible/templates/ingress-nginx/ingress-nginx.yaml](https://github.com/PacktPublishing/Kubernetes-in-Production-Best-Practices/blob/master/Chapter05/ansible/templates/ingress-nginx/ingress-nginx.yaml).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://github.com/PacktPublishing/Kubernetes-in-Production-Best-Practices/blob/master/Chapter05/ansible/templates/ingress-nginx/ingress-nginx.yaml](https://github.com/PacktPublishing/Kubernetes-in-Production-Best-Practices/blob/master/Chapter05/ansible/templates/ingress-nginx/ingress-nginx.yaml)找到完整的源代码。
- en: 'Now, let''s create the Ansible templates and configuration for `ingress-nginx`:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建`ingress-nginx`的Ansible模板和配置：
- en: 'Create the configuration variables and add them to the `group_vars` directory
    in this path: `ansible/group_vars/all/ingress-nginx.yaml`. The basic configuration
    contains the images for `nginx-ingress-controller` and its webhook. This is useful
    for keeping track of the `ingress-nginx` version that is deployed to your cluster
    and for controlling its upgrades:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建配置变量并将其添加到此路径中的`group_vars`目录：`ansible/group_vars/all/ingress-nginx.yaml`。基本配置包含`nginx-ingress-controller`及其webhook的镜像。这对于跟踪部署到集群中的`ingress-nginx`版本以及控制其升级非常有用：
- en: '[PRE13]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create the template for the `ingress-nginx` deployment in this path: `ansible/templates/ingress-nginx/ingress-nginx.yaml`:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此路径下创建`ingress-nginx`部署的模板：`ansible/templates/ingress-nginx/ingress-nginx.yaml`：
- en: '[PRE14]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In the following code snippet, the deployment gets the value of the container''s
    image from the `ingress-nginx` `group_vars` directory:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下面的代码片段中，部署从`ingress-nginx` `group_vars`目录获取容器镜像的值：
- en: '[PRE15]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In the following code snippet, you create a `ConfigMap` to configure `nginx-ingress`:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下面的代码片段中，您创建一个`ConfigMap`来配置`nginx-ingress`：
- en: '[PRE16]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In the following code snippet, you create the service that is used to expose
    the `nginx-ingress` controller to the public internet. This is achieved by provisioning
    AWS `nginx-ingress` service:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下面的代码片段中，您创建了用于将`nginx-ingress`控制器暴露给公网的服务。这是通过配置AWS `nginx-ingress`服务来实现的：
- en: '[PRE17]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: After completing the creation of the networking services and add-ons with Ansible
    templates, you are ready to deploy them and apply the Ansible playbook to your
    cluster. In the next section, you will use the `packtclusters-prod1` cluster,
    which you created in the previous chapter, to apply all of these changes.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 完成使用Ansible模板创建网络服务和附加组件后，您准备好部署它们并将Ansible剧本应用到您的集群。在接下来的部分中，您将使用在上一章中创建的`packtclusters-prod1`集群来应用所有这些更改。
- en: Deploying the cluster's network services
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署集群的网络服务
- en: 'The following instructions will deploy the Ansible playbook and configure your
    cluster with the networking services and add-ons configuration:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 以下指令将部署Ansible剧本并使用网络服务和附加组件配置来配置您的集群：
- en: 'Initialize the Terraform state and select the workspace by running the following
    commands:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令初始化Terraform状态并选择工作区：
- en: '[PRE18]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Execute Terraform to apply the infrastructure we added in this chapter – the
    IAM policy and the policy attachment for ExternalDNS:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行 Terraform 以应用本章中添加的基础设施——IAM 策略和 ExternalDNS 的策略附加：
- en: '[PRE19]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Then you should get the following output:'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后你应该会看到以下输出：
- en: '[PRE20]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Retrieve and configure `kubeconfig` for the target cluster:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取并配置目标集群的 `kubeconfig`：
- en: '[PRE21]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Create `virtualenv` to install and execute Ansible:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `virtualenv` 来安装和执行 Ansible：
- en: '[PRE22]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Install Ansible, along with the prerequisite modules, `openshift`, `pyyaml`,
    and `requests`:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 Ansible 以及所需的模块 `openshift`、`pyyaml` 和 `requests`：
- en: '[PRE23]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Execute the Ansible playbook:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行 Ansible playbook：
- en: '[PRE24]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: You will get the following output following the successful execution of Ansible:![Figure
    5.1 – Ansible execution output
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行 Ansible 成功后，你将看到以下输出：![图 5.1 – Ansible 执行输出
- en: '](img/B16192_05_001.jpg)'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16192_05_001.jpg)'
- en: Figure 5.1 – Ansible execution output
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.1 – Ansible 执行输出
- en: 'Execute the following `kubectl` command to get all the pods running in the
    cluster. This allows you to verify that the cluster configuration has been applied
    successfully:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下 `kubectl` 命令以获取集群中运行的所有 Pod。这允许你验证集群配置是否已成功应用：
- en: '[PRE25]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You should get the following output, which lists all the pods running in the
    cluster, including the new pods for the networking add-ons:'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该会看到以下输出，列出了集群中运行的所有 Pod，包括网络附加组件的新 Pod：
- en: '![Figure 5.2 – List of all pods'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.2 – 所有 Pod 的列表'
- en: '](img/B16192_05_002.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16192_05_002.jpg)'
- en: Figure 5.2 – List of all pods
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.2 – 所有 Pod 的列表
- en: Now you have completed the application of the cluster configuration as per the
    previous instructions and your cluster has all of the networking services and
    add-ons deployed and configured, ready for production workloads.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经完成了按照前述指示应用集群配置的工作，并且集群已经部署并配置了所有网络服务和附加组件，准备好承担生产工作负载。
- en: Destroying the cluster's resources
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 销毁集群资源
- en: 'First, you should delete the `ingress-nginx` service to instruct AWS to destroy
    the NLB associated with the ingress controller. This step is required because
    terraform will fail to destroy this NLB because it has been created by Kubernetes:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你应该删除 `ingress-nginx` 服务，指示 AWS 销毁与入口控制器相关联的 NLB。此步骤是必需的，因为 terraform 将无法销毁此
    NLB，因为它是由 Kubernetes 创建的：
- en: '[PRE26]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Then, you can follow the rest of the instructions in the *Destroying the network
    and cluster infrastructure* section in [*Chapter 3*](B16192_03_Final_PG_ePub.xhtml#_idTextAnchor073),
    *Building and Provisioning Kubernetes Clusters*, to destroy the Kubernetes cluster
    and all related AWS resources. Please ensure that the resources are destroyed
    in the following order:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以按照[*第 3 章*](B16192_03_Final_PG_ePub.xhtml#_idTextAnchor073)《构建和配置 Kubernetes
    集群》一节中的剩余说明，销毁 Kubernetes 集群和所有相关的 AWS 资源。请确保资源按照以下顺序被销毁：
- en: Kubernetes cluster `packtclusters` resources
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Kubernetes 集群 `packtclusters` 资源
- en: Cluster VPC resources
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 集群 VPC 资源
- en: Terraform shared state resources
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Terraform 共享状态资源
- en: By executing the previous steps, all Kubernetes and AWS infrastructure resources
    should be destroyed and cleaned up ahead of the hands-on practice in the next
    chapter.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 执行前述步骤后，所有 Kubernetes 和 AWS 基础设施资源应该已被销毁并清理干净，为下一章的实操练习做准备。
- en: Summary
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you have learned about Kubernetes networking components and
    services that make a cluster ready for production. You developed the templates
    and configuration as code for these services with Ansible.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解了 Kubernetes 网络组件和服务，这些组件和服务使集群能够投入生产环境。你使用 Ansible 开发了这些服务的模板和配置代码。
- en: Despite the fact that some of these components come pre-deployed with AWS EKS,
    you still need to fine-tune their configurations to fulfill your cluster requirements
    for scaling, availability, security, and performance. You also deployed additional
    add-ons and services, including ExternalDNS and NGINX Ingress Controller, that
    proved to be essential for Kubernetes' networking needs.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这些组件中的一些是随 AWS EKS 一起预部署的，但你仍然需要对它们的配置进行微调，以满足集群在扩展性、可用性、安全性和性能方面的要求。你还部署了额外的附加组件和服务，包括
    ExternalDNS 和 NGINX Ingress Controller，它们对于 Kubernetes 的网络需求至关重要。
- en: By using the Ansible configuration management solution that we introduced in
    the previous chapter, writing the Kubernetes manifests of these services becomes
    simple, scalable, and maintainable. We follow the same framework and steps to
    configure each service, and this is repeated for all services and add-on configurations
    that you will develop during this book.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用我们在前一章中介绍的 Ansible 配置管理解决方案，编写这些服务的 Kubernetes 清单变得简单、可扩展且易于维护。我们遵循相同的框架和步骤来配置每个服务，这一过程会重复应用于本书中您将开发的所有服务和附加配置。
- en: This chapter covered the network production readiness for Kubernetes clusters,
    but there are relevant topics that we will cover in the forthcoming chapters,
    including network security, network policies, service mesh, and network service
    observability.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了 Kubernetes 集群的网络生产就绪性，但还有相关主题将在后续章节中涉及，包括网络安全、网络策略、服务网格和网络服务可观察性。
- en: In the next chapter, you will learn in detail about Kubernetes security; the
    security best practices, tools, add-ons, and configuration that you need to deploy
    and optimize for production-grade clusters.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，您将详细了解 Kubernetes 安全；包括安全最佳实践、工具、附加组件和配置，这些是您在生产级集群中部署和优化所必需的。
- en: Further reading
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'You can refer to the following links for more information on the topics covered
    in this chapter:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以参考以下链接，了解本章涵盖的更多信息：
- en: '*Getting Started with Kubernetes – Third Edition* ([*Chapter 3*](B16192_03_Final_PG_ePub.xhtml#_idTextAnchor073),
    *Working with Networking, Load Balancers, and Ingress*): [https://www.packtpub.com/virtualization-and-cloud/getting-started-kubernetes-third-edition](https://www.packtpub.com/virtualization-and-cloud/getting-started-kubernetes-third-edition)'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Kubernetes 入门 – 第三版* （[*第 3 章*](B16192_03_Final_PG_ePub.xhtml#_idTextAnchor073)，*与网络、负载均衡器和
    Ingress 的工作*）：[https://www.packtpub.com/virtualization-and-cloud/getting-started-kubernetes-third-edition](https://www.packtpub.com/virtualization-and-cloud/getting-started-kubernetes-third-edition)'
- en: '*Mastering Kubernetes – Second Edition* ([*Chapter 10*](B16192_10_Final_PG_ePub.xhtml#_idTextAnchor215),
    *Advanced Kubernetes Networking*): [https://www.packtpub.com/application-development/mastering-kubernetes-second-edition](https://www.packtpub.com/application-development/mastering-kubernetes-second-edition)'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Kubernetes 精通 – 第二版* （[*第 10 章*](B16192_10_Final_PG_ePub.xhtml#_idTextAnchor215)，*高级
    Kubernetes 网络*）：[https://www.packtpub.com/application-development/mastering-kubernetes-second-edition](https://www.packtpub.com/application-development/mastering-kubernetes-second-edition)'
- en: 'Hands-On Kubernetes Networking [Video]: [https://www.packtpub.com/virtualization-and-cloud/hands-kubernetes-networking-video](https://www.packtpub.com/virtualization-and-cloud/hands-kubernetes-networking-video)'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hands-On Kubernetes 网络 [视频]：[https://www.packtpub.com/virtualization-and-cloud/hands-kubernetes-networking-video](https://www.packtpub.com/virtualization-and-cloud/hands-kubernetes-networking-video)

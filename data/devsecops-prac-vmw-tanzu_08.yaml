- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Enhancing Developer Productivity with Tanzu Application Platform
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Tanzu 应用平台提升开发者生产力
- en: In the world of enterprise software, we have the concept of *Big A* applications
    and *Little A* applications. *Big A* might be a giant corporate billing system
    with hundreds of components, whereas a *Little A* application might be a single
    job that pulls records from a mainframe and writes them to MongoDB.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在企业软件的世界中，我们有*大A*应用和*小A*应用的概念。*大A*可能是一个拥有数百个组件的巨大企业账单系统，而*小A*应用可能是一个简单的任务，拉取记录并将它们写入
    MongoDB。
- en: 'Similarly, there are *Big P* and *Little P* problems that need to be solved
    when delivering software in the enterprise. An example of a *Little P* problem
    I faced today was moving some container images from the VMware corporate container
    registry to a customer’s private registry so they could use them internally without
    having to allow egress to the internet. On the other hand, some *Big P* problems
    you might face in the enterprise space might be the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，在企业交付软件时，存在*大P*和*小P*问题需要解决。我今天遇到的一个*小P*问题是将一些容器镜像从 VMware 公司容器注册表移动到客户的私有注册表，以便他们可以在不允许外部网络访问的情况下在内部使用它们。另一方面，在企业领域，你可能面临的一些*大P*问题如下：
- en: Making a company’s developers measurably more productive
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使公司开发人员的生产力显著提高
- en: Getting applications into production quickly, safely, and consistently – minimizing
    toil and blockers
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速、安全、一致地将应用程序投入生产 – 最小化繁琐操作和障碍
- en: Getting developers, operators, and security specialists all pointed in the same
    direction and focused on the same problems
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使开发人员、运维人员和安全专家朝着相同的方向努力，专注于相同的问题
- en: Delivering applications to modern container platforms such as Kubernetes when
    developers have limited exposure and experience
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当开发人员的经验有限时，将应用程序交付到现代容器平台（如 Kubernetes）
- en: Coincidentally, those are exactly the four problems we talk about when we discuss
    **Tanzu** **Application Platform**.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 恰巧，这正是我们在讨论**Tanzu** **应用平台**时提到的四个问题。
- en: 'In this chapter, we will cover these topics:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Why should I use Tanzu Application Platform?
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么我要使用 Tanzu 应用平台？
- en: The building blocks of Tanzu Application Platform
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tanzu 应用平台的构建模块
- en: Day 1 – installing and configuring Tanzu Application Platform
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一天 – 安装和配置 Tanzu 应用平台
- en: Day 2 – deploying applications to Tanzu Application Platform
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二天 – 将应用程序部署到 Tanzu 应用平台
- en: Day 3 – common operational activities on Tanzu Application Platform
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三天 – Tanzu 应用平台上的常见操作活动
- en: Next steps
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下一步
- en: Now that we know what we’re going to accomplish in this chapter, let’s jump
    in and talk about the reasons you and your team might need to use Tanzu Application
    Platform.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道本章要完成的目标，让我们开始讨论你和你的团队可能需要使用 Tanzu 应用平台的原因。
- en: Why should I use Tanzu Application Platform?
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么我要使用 Tanzu 应用平台？
- en: 'As I mentioned in the chapter introduction, there are small problems that can
    be encountered when writing software, such as efficiently sorting a list in place
    or moving streaming data from a legacy database to the latest NoSQL offering,
    and there are big problems, such as the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我在章节介绍中提到的，编写软件时可能会遇到一些小问题，例如高效地对列表进行就地排序，或将流数据从传统数据库迁移到最新的 NoSQL 数据库，而也有一些大问题，如以下几项：
- en: '**Developer productivity**: Enterprise software only exists because big companies
    hire software developers to write the software that they use to bring in revenue
    and differentiate the company from their competition. Companies with good platforms
    can focus their developers’ time and effort on meaningful tasks that directly
    affect the company’s bottom line. This makes the developers feel valued. Those
    without a good platform grow to view their developers as an expensive cost center,
    sparking a painful downward spiral into low morale and low productivity.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发者生产力**：企业软件的存在仅仅因为大公司雇佣软件开发人员编写他们用来带来收入并使公司在竞争中脱颖而出的软件。有良好平台的公司可以将开发人员的时间和精力集中在直接影响公司盈利的有意义任务上。这使得开发人员感到被重视。没有好平台的公司将开发人员视为昂贵的成本中心，进而引发一种痛苦的恶性循环，导致士气低落和生产力低下。'
- en: '**Getting software into production**: If you haven’t written software for a
    large company, you may be surprised at how difficult it is to get a piece of software
    into production. There are often dozens of manual, tedious tasks to check all
    the boxes for security, compliance, and downstream risk. The enlightened players
    in this space have figured out how to automate away the tedium, building these
    steps into an automated process, abstracted away from developers.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将软件推向生产环境**：如果你从未为大型公司编写过软件，可能会对将软件推向生产环境的困难感到惊讶。通常，有许多手动且繁琐的任务需要完成，以确保安全、合规性和下游风险的各项要求。这些领域中的先行者已经找到了自动化去除这些繁琐任务的方法，将这些步骤构建成一个自动化流程，并且将其抽象化，以便开发人员无需亲自处理。'
- en: '**Align developers, operators, and security toward the same goal**: By building
    compliance, governance, best practices, and security into a streamlined automated
    process, you eliminate the friction often found between developers, operators,
    and security specialists. While the operators push back against any sort of change,
    security specialists want releases scrutinized down to the last bit. This can
    swallow up weeks of time and effort on a development team while crushing morale.
    By building checks and controls into the software supply chain, operators and
    security specialists can rest easy that their guidance is being followed, while
    developers are freed up to deliver software at a consistently high velocity.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使开发人员、运维人员和安全人员朝着同一个目标努力**：通过将合规性、治理、最佳实践和安全性内建到一个流线化的自动化流程中，你消除了开发人员、运维人员和安全专家之间常见的摩擦。尽管运维人员反对任何形式的变更，安全专家却希望对发布版本进行严格审查。这可能会消耗开发团队数周的时间和精力，并且严重打击士气。通过在软件供应链中构建检查和控制，运维人员和安全专家可以放心地知道他们的指导意见得到了遵循，而开发人员则能专注于以高效的速度持续交付软件。'
- en: '**On-ramp to Kubernetes**: Enterprise adoption of Kubernetes is on an upswing
    and shows few signs of slowing down. Kubernetes is a very powerful platform that
    enables some big outcomes. However, it comes with considerable complexity and
    a steep learning curve. Tanzu Application Platform abstracts away some of this
    complexity, allowing software teams to leverage Kubernetes while benefitting from
    some abstractions that simplify the path to production.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通向 Kubernetes 的快速通道**：企业采用 Kubernetes 的趋势正在上升，且几乎没有放缓的迹象。Kubernetes 是一个非常强大的平台，能够实现一些重要的成果。然而，它也伴随着相当复杂性和陡峭的学习曲线。Tanzu
    应用平台抽象掉了部分复杂性，使得软件团队能够利用 Kubernetes，同时受益于一些简化生产路径的抽象。'
- en: To summarize, Tanzu Application Platform is an end-to-end supply chain for delivering
    software to production safely, securely, and reliably at scale. Now that we know
    at a high level what it is, let’s proceed to break it down and look at the individual
    components.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，Tanzu 应用平台是一个端到端的软件供应链，旨在以安全、可靠的方式大规模地将软件交付到生产环境。现在我们已经大致了解它的概念，接下来我们将逐步拆解并查看各个组成部分。
- en: The building blocks of Tanzu Application Platform
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Tanzu 应用平台的构建模块
- en: Tanzu Application Platform is an opinionated set of technologies working together
    to deliver significant outcomes for platform operators, developers, and security
    professionals. Covering each component in depth would require more space than
    this chapter allows, so I encourage you to visit the official documentation for
    more detail on any of these components.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Tanzu 应用平台是一组具有明确目标的技术，协同工作以为平台运维人员、开发人员和安全专家带来显著的成果。深入讲解每个组件将需要超出本章篇幅的空间，因此我建议你访问官方文档，获取关于这些组件的更多细节。
- en: 'The diagram that follows offers a high-level view of Tanzu Application Platform:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图展示了 Tanzu 应用平台的高层次视图：
- en: "![Figure \uFEFF8.1 – Tanzu Application Platform components](img/B18145_08_01.jpg)"
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.1 – Tanzu 应用平台组件](img/B18145_08_01.jpg)'
- en: Figure 8.1 – Tanzu Application Platform components
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.1 – Tanzu 应用平台组件
- en: 'This diagram attempts to group and categorize the various components. Here’s
    a breakdown of the products that follow the hierarchy from the diagram:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 此图试图将各个组件进行分组和分类。以下是根据该图的层次结构对产品的拆解：
- en: '`tanzu` CLI command or a `workload.yaml` file. Developers can deploy workloads
    directly to a Kubernetes cluster from their IDEs.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tanzu` CLI 命令或 `workload.yaml` 文件。开发人员可以直接从他们的 IDE 将工作负载部署到 Kubernetes 集群中。'
- en: '**Live Update**: Developers can make a local change on their workstations and
    see it running live on a Kubernetes cluster in seconds. This uses *Tilt* under
    the covers to sync the local code base with the workload running remotely on Kubernetes.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实时更新**：开发者可以在本地工作站上进行更改，并在几秒钟内看到这些更改在Kubernetes集群上实时运行。这背后使用了*Tilt*来同步本地代码库与远程Kubernetes上运行的工作负载。'
- en: '**Remote Debug**: Sometimes log messages just aren’t sufficient and you need
    to step through your code, examining local and wider-scoped variables in the process.
    As we just mentioned, this is straightforward on a local workstation, but in a
    modern environment, this often isn’t sufficient to debug an issue occurring in
    Kubernetes. Directly debugging a workload on Kubernetes often entails a messy
    array of startup parameters and port forwards. This plugin automates the whole
    process, giving developers a one-click solution to remote debugging.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**远程调试**：有时日志消息并不足够，你需要逐步调试代码，检查本地变量和更大范围的变量。如前所述，在本地工作站上调试是直接的，但在现代环境中，这通常不足以调试Kubernetes中出现的问题。在Kubernetes上直接调试工作负载通常涉及一堆混乱的启动参数和端口转发。这个插件自动化了整个过程，为开发者提供了一键远程调试的解决方案。'
- en: '**Running Workloads**: With this VS Code-only feature, developers get a panel
    inside their IDE to visualize all workloads running in their current Kubernetes
    context.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行中的工作负载**：通过这个仅限VS Code的功能，开发者可以在其IDE内获得一个面板，来可视化当前Kubernetes上下文中运行的所有工作负载。'
- en: "**Tanzu Application Platform GUI**: The Tanzu Application GUI, based on the\
    \ *Backstage* open source project, is a central dashboard for Tanzu Application\
    \ Platform. It provides some out-of-the-box functionality that it gets from Backstage,\
    \ as well as a number of very useful custom plugins that are only available to\
    \ Tanzu Application Platform users. Here’s a quick peek at what you can expect\
    \ to see in the Tanzu Application Platform GUI, starting with a visual overview\
    \ of the UI and its layout:![Figure \uFEFF8.2 – Tanzu Application Platform GUI](img/B18145_08_02.jpg)"
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Tanzu应用平台GUI**：基于*Backstage*开源项目的Tanzu应用GUI是Tanzu应用平台的中央仪表盘。它提供了来自Backstage的一些开箱即用的功能，并且有许多非常有用的自定义插件，这些插件仅供Tanzu应用平台用户使用。这里是你可以在Tanzu应用平台GUI中看到的内容的快速预览，首先是UI的视觉概览及其布局：![图
    8.2 – Tanzu应用平台GUI](img/B18145_08_02.jpg)'
- en: Figure 8.2 – Tanzu Application Platform GUI
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.2 – Tanzu应用平台GUI
- en: 'This is the screen you’ll see when first accessing the Tanzu Application GUI.
    The following is a breakdown of the GUI’s components:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你首次访问Tanzu应用GUI时看到的屏幕。以下是GUI组件的详细介绍：
- en: '**Organization Catalog**: Tanzu Application Platform GUI provides a central
    repository for an entire organization to publish and catalog their software. If
    we dig into **tanzu-java-web-app** in the preceding screenshot, we’ll see the
    following screen:'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组织目录**：Tanzu应用平台GUI为整个组织提供了一个中央仓库，用于发布和管理其软件。如果我们深入查看前面截图中的**tanzu-java-web-app**，我们将看到以下屏幕：'
- en: "![Figure \uFEFF8.3 – Tanzu Application Platform GUI catalog entry](img/B18145_08_03.jpg)"
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.3 – Tanzu应用平台GUI目录条目](img/B18145_08_03.jpg)'
- en: Figure 8.3 – Tanzu Application Platform GUI catalog entry
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.3 – Tanzu应用平台GUI目录条目
- en: 'The catalog entry allows teams to provide a “one-stop shop” for their application’s
    source code, tech docs, API definition, and any relevant links:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 目录条目允许团队为其应用程序的源代码、技术文档、API定义以及任何相关链接提供一个“全方位服务”：
- en: '**TechDocs**: This is a backstage plugin that allows development teams to create
    documentation in Markdown format, and will present that documentation as part
    of the application’s entry in the organization catalog.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TechDocs**：这是一个Backstage插件，允许开发团队以Markdown格式创建文档，并将这些文档作为应用程序条目的一部分呈现在组织目录中。'
- en: '**Runtime Resources Visibility**: Users of other Tanzu products, such as *Tanzu
    Application Service* ([https://tanzu.vmware.com/application-service](https://tanzu.vmware.com/application-service)),
    have benefitted from being able to see all their runtime resources in one place.
    The Tanzu team brought this to Tanzu Application Platform GUI as well. Anything
    associated with a registered catalog entity will be visible here.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行时资源可见性**：其他Tanzu产品的用户，例如*Tanzu应用服务*（[https://tanzu.vmware.com/application-service](https://tanzu.vmware.com/application-service)），通过能够在一个地方查看所有运行时资源，受益匪浅。Tanzu团队也将这一功能带到了Tanzu应用平台GUI中。与注册目录实体相关的任何内容将在这里可见。'
- en: '**Application Live View**: This feature works with other components, such as
    *Convention Service*, to provide deep insight into the runtime state of a running
    application.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用实时视图**：该功能与其他组件（如*约定服务*）协同工作，提供对正在运行的应用程序的运行时状态的深入洞察。'
- en: '**Application Accelerator**: This feature, which we covered in depth in [*Chapter
    2*](B18145_02.xhtml#_idTextAnchor033)*, Developing Cloud-Native Applications*,
    is part of Tanzu Application Platform GUI.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用加速器**：这个功能，我们在[*第二章*](B18145_02.xhtml#_idTextAnchor033)*，开发云原生应用*中进行了深入讨论，是
    Tanzu 应用平台 GUI 的一部分。'
- en: '**API Documentation**: This feature, which we covered in depth in [*Chapter
    5*](B18145_05.xhtml#_idTextAnchor093)*, Defining and Managing Business APIs*,
    is also part of Tanzu Application Platform GUI.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**API 文档**：这个功能，我们在[*第五章*](B18145_05.xhtml#_idTextAnchor093)*，定义和管理业务 API*中进行了深入讨论，也是
    Tanzu 应用平台 GUI 的一部分。'
- en: '**Supply Chain Choreographer Visualization**: Supply Chain Choreographer, which
    lies at the heart of Tanzu Application Platform, is just what it sounds like,
    a chained set of inputs and outputs that guide an application from its source
    to a running application in a production environment. This plugin provides a compelling
    visualization of those supply chains.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**供应链编排器可视化**：供应链编排器位于 Tanzu 应用平台的核心，它正如名字所示，是一组输入和输出的链条，指导应用程序从源代码到在生产环境中运行的应用程序。这个插件提供了一个引人注目的供应链可视化。'
- en: '**Supply Chain Choreographer**: If you think of Tanzu Application Platform
    GUI as the “eyes and ears” of the platform, then Supply Chain Choreographer would
    be its beating heart. Supply Chain Choreographer is based on the open source *Cartographer*
    project ([https://github.com/vmware-tanzu/cartographer](https://github.com/vmware-tanzu/cartographer)),
    and it allows platform operators and software architects to preconfigure and pre-approve
    multiple paths to production. There might be a path to production for Spring Boot
    APIs that fall under PCI controls and another path to production for event-driven
    data processing applications. Just as was the case with Tanzu Application Platform
    GUI, Supply Chain Choreographer is a feature of the platform that bundles and
    contains other features. Here’s a list of some of the platform features that fall
    within the realm of Supply Chain Choreographer:'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**供应链编排器**：如果你把 Tanzu 应用平台 GUI 看作平台的“眼睛和耳朵”，那么供应链编排器就是它的跳动的心脏。供应链编排器基于开源的*Cartographer*项目（[https://github.com/vmware-tanzu/cartographer](https://github.com/vmware-tanzu/cartographer)），它允许平台操作员和软件架构师预配置并预批准多个生产路径。可能有一个适用于
    PCI 控制下的 Spring Boot API 的生产路径，也可能有另一个适用于事件驱动数据处理应用程序的生产路径。正如 Tanzu 应用平台 GUI 所做的那样，供应链编排器是平台的一项功能，它将其他功能捆绑在一起。以下是一些属于供应链编排器范畴的功能：'
- en: '**Live View Convention Service**: One of the features mentioned in our discussion
    of Tanzu Application Platform GUI was the *Application Live View* GUI plugin.
    For this plugin to work, an application needs to expose its inner workings via
    an opinionated, well-known API. A naïve approach to this might be to require all
    application teams to implement this themselves, by bringing in a particular version
    of Spring Boot Actuator with its own web listener running on a specific port with
    specific endpoint naming conventions. This would result in added burden on the
    development teams as well as the potential for misconfiguration. A better approach
    would be to modify every workload as it passes through the supply chain to expose
    the inner workings in a consistent, opinionated way. That’s exactly what this
    service does. It sits in the supply chain and adds consistent Java or .NET Core
    configuration parameters to every eligible application that uses the supply chain.'
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实时视图约定服务**：在我们讨论 Tanzu 应用平台 GUI 时提到了*应用实时视图*GUI 插件。为了使该插件工作，应用程序需要通过一个有见解的、众所周知的
    API 来公开其内部工作。一个简单的方法可能是要求所有应用程序团队自己实现这一点，通过引入一个特定版本的 Spring Boot Actuator，并让它在一个特定端口上运行，并遵循特定的端点命名约定。这将给开发团队带来额外负担，并可能导致配置错误。更好的方法是，在工作负载通过供应链时修改它，以一致且有见解的方式公开其内部工作。正是这个服务实现了这一目标。它位于供应链中，并向所有符合条件的应用程序添加一致的
    Java 或 .NET Core 配置参数。'
- en: '**Cartographer Conventions**: Application Live View isn’t the only feature
    for which supply chain conventions are a good fit. Any features that a platform
    operator or a DevOps lead wants to apply across the entire portfolio are a good
    fit here. One example is labeling all application artifacts with the owner of
    the project. Another might be to configure sane upper and lower limits to an app
    that auto-scales with *Cloud Native Runtimes*. The possibilities are endless,
    and Cartographer Conventions is a convenient way to apply conventions across a
    wide range of applications running on the platform.'
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Cartographer 约定**：应用程序实时视图并不是唯一一个适合应用供应链约定的功能。任何平台操作员或 DevOps 负责人希望在整个产品组合中应用的功能都非常适合在这里实现。一个例子是为所有应用程序工件标记项目的拥有者。另一个例子可能是为与
    *云原生运行时* 一起自动扩展的应用程序配置合理的上下限。可能性是无穷无尽的，而 Cartographer 约定是一个方便的方式，能够在平台上运行的各种应用程序中应用约定。'
- en: '**Cloud Native Runtimes**: This is the component that runs your deployable
    application artifacts on Kubernetes. It is based on the open source *Knative*
    project ([https://github.com/knative](https://github.com/knative)), which, while
    it is often thought of as a serverless runtime, is also an excellent way to run
    regular web-facing workloads. It has a unique approach to load balancing that
    allows for auto-scaling based on configurable metrics while minimizing lost or
    dropped requests.'
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**云原生运行时**：这是在 Kubernetes 上运行您可部署应用程序工件的组件。它基于开源 *Knative* 项目（[https://github.com/knative](https://github.com/knative)），尽管它通常被认为是一个无服务器运行时，但也是运行常规
    Web 面向工作负载的绝佳方式。它采用独特的负载均衡方法，允许基于可配置的度量进行自动扩展，同时最小化丢失或掉线的请求。'
- en: '**Services Toolkit**: This is another feature that evolved from the much-loved
    *Tanzu Application Service*. That product allowed users to request a service to
    be provisioned, perhaps a database or a message queue, and bind the credentials
    of that service to an application at runtime. *Services Toolkit* brings that same
    functionality to Kubernetes. You can think of it as data services for developers
    who, first, don’t want to think about managing data services, and second, don’t
    want to manually wire up their application to those data services.'
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务工具包**：这是另一个由备受喜爱的 *Tanzu Application Service* 演变而来的功能。该产品允许用户请求配置一个服务，可能是一个数据库或消息队列，并将该服务的凭证在运行时绑定到应用程序上。*服务工具包*
    将相同的功能带入 Kubernetes。您可以将其视为面向开发者的数据服务，首先，他们不希望思考如何管理数据服务，其次，他们不希望手动将应用程序与这些数据服务连接起来。'
- en: '**Tanzu Build Service**: In a previous bullet, we talked about running deployable
    artifacts. Tanzu Build Service is the component that takes an application’s source
    code as input and outputs a deployable artifact in the form of an OCI container
    image. We did a thorough deep-dive into this feature in [*Chapter 3*](B18145_03.xhtml#_idTextAnchor048)*,
    Building Secure Container Images with* *Build Service*.'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Tanzu 构建服务**：在前面的条目中，我们讨论了运行可部署工件的内容。Tanzu 构建服务是一个组件，它将应用程序的源代码作为输入，并输出一个以
    OCI 容器镜像形式存在的可部署工件。我们在 [*第 3 章*](B18145_03.xhtml#_idTextAnchor048)中深入探讨了这个功能，内容是构建安全的容器镜像与
    *Build Service*。'
- en: '**Workload Types**: You can think of this as a set of preconfigured, pre-curated
    supply chains that you can use to get started quickly with several different kinds
    of workloads:'
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工作负载类型**：您可以将其视为一组预配置、预整理的供应链，您可以用它来快速启动不同种类的工作负载：'
- en: '**Web**: This is a standard web-facing application that you want to be able
    to scale up and down'
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Web**：这是一个标准的面向 Web 的应用程序，您希望能够根据需求进行扩展和缩减。'
- en: '**TCP**: This is a good fit for running a legacy application that handles its
    own web interactions and you want to pass network traffic directly to it'
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TCP**：这非常适合运行一个处理其自身 Web 交互的传统应用程序，并且您希望直接将网络流量传递给它。'
- en: '**Queues**: These are applications that run in the background and process events
    as they arrive on a queue'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**队列**：这些是后台运行的应用程序，处理按队列到达的事件。'
- en: '**Functions**: These are a hybrid of web and queue applications that allow
    developers to implement a single piece of functionality that only gets instantiated
    and called when a request comes in'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**函数**：这些是 Web 和队列应用程序的混合体，允许开发人员实现一个仅在有请求时才会实例化和调用的功能。'
- en: '**App and Platform Security**: Here are some of the components that make security
    a first-class citizen on Tanzu Application Platform:'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用和平台安全**：以下是使安全性在 Tanzu 应用平台中成为一等公民的一些组件：'
- en: '**Tanzu Application Platform Authentication and RBAC Authorization**: Tanzu
    Application Platform GUI uses the single sign-on functionality that comes with
    Backstage. This allows platform operators to configure providers such as Okta,
    Google, Azure, and GitHub. Furthermore, the GUI can be configured such that it
    can monitor running resources across multiple Kubernetes clusters, not just the
    cluster it is running on.'
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Tanzu 应用平台身份验证和 RBAC 授权**：Tanzu 应用平台的 GUI 使用与 Backstage 一起提供的单点登录功能。这使得平台运维人员能够配置
    Okta、Google、Azure 和 GitHub 等提供商。此外，GUI 可以配置为监控多个 Kubernetes 集群中的运行资源，而不仅仅是其运行所在的集群。'
- en: '**App single sign-on**: This is a very common request among application developers.
    They don’t want to manage their own login, user **authentication** (**authN**),
    or **authorization** (**authZ**). Rather, they want to delegate those functions
    to the platform and have it taken care of for them. That’s exactly what this feature
    does. It allows platform operators to stand up preconfigured, opinionated deployments
    of Spring Authorization Server, and make that server available to applications
    via integrations into the platform’s software supply chains. The idea of this
    service is to integrate single sign-on into the application from the very beginning
    rather than as a last-minute bolt-on solution.'
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用单点登录**：这是应用开发者常见的需求。他们不想管理自己的登录、用户**身份验证**（**authN**）或**授权**（**authZ**）。相反，他们希望将这些功能委托给平台，由平台为他们处理。这正是此功能所做的。它允许平台运维人员搭建预配置的、具有明确偏好的Spring
    Authorization Server部署，并通过集成到平台的软件供应链中使该服务器可供应用使用。此服务的目的是将单点登录从一开始就集成到应用中，而不是作为最后时刻的附加解决方案。'
- en: '**Supply Chain Security Tools**: Software supply chain attacks are top-of-mind
    for many in the enterprise software space, and for good reason. Supply Chain Security
    Tools is a suite of tools that plug directly into a software supply chain such
    that whenever any part of that supply chain changes, the source code, bundled
    dependencies, and generated container images get scanned for all known vulnerabilities
    using a constantly updated database. These tools handle scanning the artifacts,
    storing the scan results, reporting on the stored results, and cryptographically
    signing the generated artifacts so they can’t be changed after they’ve been scanned.
    This allows platform operators to enable best-of-breed security for all their
    running workloads simply by incorporating them into a supply chain.'
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**供应链安全工具**：软件供应链攻击是许多企业软件领域的关注重点，原因也很充分。供应链安全工具是一套直接插入软件供应链的工具，当供应链的任何部分发生变化时，这些工具会使用持续更新的数据库扫描源代码、捆绑的依赖项和生成的容器镜像，查找所有已知的漏洞。这些工具负责扫描工件、存储扫描结果、报告存储的结果，并对生成的工件进行加密签名，以确保它们在扫描后无法更改。这样，平台运维人员只需将这些工具集成到供应链中，就能为其所有运行的工作负载启用最先进的安全性。'
- en: '**Enablement**: Any product of the size and scope of Tanzu Application Platform
    needs a way for users and operators of the product to get up to speed. Tanzu Application
    Platform bundles its own learning platform for enabling those users. This allows
    platform operators to quickly and easily set up hands-on workshops that walk the
    various personas through the product. It also includes a brief built-in workshop
    on how to build your own workshops. Here’s a quick look at **Learning Center for
    Tanzu Application Platform** showing my favorite feature, the browser-embedded
    VS Code editor:'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启用功能**：像 Tanzu 应用平台这样规模和范围的产品需要一种方式，使产品的用户和运维人员能够快速上手。Tanzu 应用平台为用户提供了自己的学习平台。它使平台运维人员能够快速轻松地设置实践工作坊，引导不同角色了解产品。它还包括一个简短的内置工作坊，教授如何构建自己的工作坊。下面是
    **Tanzu 应用平台学习中心**，展示了我最喜欢的功能——浏览器嵌入式 VS Code 编辑器：'
- en: "![Figure \uFEFF8.4 – Learning Center with the Embedded VS Code editor](img/B18145_08_04.jpg)"
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.4 – 带有嵌入式 VS Code 编辑器的学习中心](img/B18145_08_04.jpg)'
- en: Figure 8.4 – Learning Center with the Embedded VS Code editor
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.4 – 带有嵌入式 VS Code 编辑器的学习中心
- en: 'This allows architects and operators to build hands-on real-world workshops
    that automatically provision and run completely self-contained in the browser.
    Here’s a quick list of some of the available features:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得架构师和运维人员能够构建实际的、可操作的工作坊，这些工作坊可以在浏览器中自动配置并独立运行。以下是一些可用功能的简要列表：
- en: '`kubectl` pointing to a live Kubernetes cluster and embedded *Docker*, so anything
    requiring the Docker CLI, builds, runs, pushes, and so on, are also possible.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubectl` 指向一个实时的 Kubernetes 集群和嵌入式 *Docker*，因此任何需要 Docker CLI、构建、运行、推送等的操作也是可能的。'
- en: '**Embedded comprehension questions**: Workshop builders can embed questions
    right into the workshop to make sure users are properly understanding the concepts.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**嵌入式理解问题**：工作坊构建者可以将问题嵌入到工作坊中，以确保用户正确理解概念。'
- en: '**Embedded VS Code editor**: Not only can workshop builders embed VS Code right
    into their workshop, but they can provide links that will open files, select code
    blocks in the editor window, and even paste additional fragments in just the right
    location.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**嵌入式 VS Code 编辑器**：工作坊构建者不仅可以将 VS Code 嵌入到工作坊中，还可以提供链接，打开文件、选择编辑器窗口中的代码块，甚至在正确的位置粘贴附加代码片段。'
- en: '**Embedded web pages**: This allows users to deploy something to their dedicated
    workshop Kubernetes instance and immediately see it running right in the same
    window. It also enables tools like the Kubernetes web console to be exposed.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**嵌入式网页**：这允许用户将某些内容部署到其专用的工作坊 Kubernetes 实例，并立即在同一窗口中看到其运行情况。它还允许像 Kubernetes
    Web 控制台这样的工具被暴露出来。'
- en: '**Verify Workshop State**: Users can click a link that will trigger Kubernetes
    commands that don’t appear in a console. This allows workshop developers to ensure
    that the workshop state is as desired before moving on.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**验证工作坊状态**：用户可以点击一个链接，这会触发在控制台中看不到的 Kubernetes 命令。这允许工作坊开发者在继续之前确保工作坊状态如预期。'
- en: '**Docker builds**: The embedded console uses **Docker in Docker** (**DIND**)
    to allow for the full range of Docker commands.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker 构建**：嵌入式控制台使用 **Docker in Docker**（**DIND**）来支持所有 Docker 命令的使用。'
- en: '**Download files**: Workshop developers can enable users to download a local
    copy of any or all workshop files for future reference.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**下载文件**：工作坊开发者可以使用户能够下载任何或所有工作坊文件的本地副本，供以后参考。'
- en: Now that we’ve covered whom Tanzu Application Platform is targeted to and what
    it consists of, it’s time to get our hands dirty and install it, which is exactly
    what we’ll do in the next section.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了 Tanzu 应用平台的目标用户和组成内容，是时候开始动手安装它了，正如我们将在下一部分中所做的那样。
- en: Day 1 – installing and configuring Tanzu Application Platform
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一天 – 安装和配置 Tanzu 应用平台
- en: To install Tanzu Application Platform, we’ll need a few things in place first.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 Tanzu 应用平台，首先我们需要一些准备工作。
- en: Prerequisites and technical requirements
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 前提条件和技术要求
- en: 'In order to install and run Tanzu Application Platform, there are some technical
    prerequisites that must be in place. Here’s a list of what is required:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为了安装和运行 Tanzu 应用平台，必须满足一些技术前提条件。以下是所需的条件列表：
- en: '**A (large)** **Kubernetes cluster**'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一个（大型）** **Kubernetes 集群**'
- en: 'The Tanzu Application Platform documentation lists several supported Kubernetes
    clusters, including Tanzu Kubernetes Grid and Minikube. However, to keep these
    instructions manageable, I’m going to recommend three public cloud Kubernetes
    clusters. These clusters are as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Tanzu 应用平台文档列出了几个受支持的 Kubernetes 集群，包括 Tanzu Kubernetes Grid 和 Minikube。然而，为了使这些说明更易于管理，我将推荐三种公共云
    Kubernetes 集群。这些集群如下：
- en: '**Amazon Elastic Kubernetes** **Service** (**EKS**)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Amazon 弹性 Kubernetes** **服务**（**EKS**）'
- en: '**Azure Kubernetes** **Service** (**AKS**)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure Kubernetes** **服务**（**AKS**）'
- en: '**Google Kubernetes** **Engine** (**GKE**)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Google Kubernetes** **引擎**（**GKE**）'
- en: 'There are a number of reasons for this. Here are a few:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这有很多原因。以下是其中一些：
- en: Easy out-of-the-box load balancer services. While we can make Tanzu Application
    Platform work with node ports, load balancer services make things much easier.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开箱即用的负载均衡服务。虽然我们可以通过节点端口使 Tanzu 应用平台工作，但负载均衡服务使得这一过程变得更加简单。
- en: Easy out-of-the-box persistent volume claims. The same reasoning behind easy
    load balancers also applies to dynamic storage, which is also required for Tanzu
    Application Platform.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开箱即用的持久化存储声明。与负载均衡器的简单性相同，动态存储的需求对于 Tanzu 应用平台也是必须的。
- en: Easy (albeit pricey) access to sufficient resources. While you can install Tanzu
    Application Platform on Minikube on a laptop, you’ll come up against RAM and CPU
    limitations. The public cloud options make it easy to stand up a cluster that
    can scale up to a size that runs Tanzu Application Platform without issue.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轻松（尽管昂贵）访问足够的资源。虽然你可以在 Minikube 上的笔记本电脑上安装 Tanzu 应用平台，但会面临内存和 CPU 限制。公共云选项使得构建一个能够扩展到足够规模、无问题运行
    Tanzu 应用平台的集群变得更加简单。
- en: 'The Tanzu Application Platform documentation has some recommendations for RAM
    and CPU, but here’s what has worked for me:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Tanzu Application Platform 的文档有一些关于 RAM 和 CPU 的推荐配置，但以下是我个人使用过并且有效的配置：
- en: One or more control plane nodes. If your Kubernetes cluster gives you access
    to the control plane, the node should have at least two vCPUs and 8 GB of RAM.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个或多个控制平面节点。如果你的 Kubernetes 集群可以访问控制平面节点，那么该节点应该至少有两个 vCPU 和 8 GB 的内存。
- en: Five or more worker nodes. Each node should have at least two vCPUs and 8 GB
    of RAM.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 五个或更多的工作节点。每个节点应该至少有两个 vCPU 和 8 GB 的内存。
- en: '**A Tanzu** **Network account**'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一个 Tanzu** **Network 账户**'
- en: 'The software installation is via container images hosted on the container registry
    associated with the Tanzu Network. You can sign up here: [https://network.tanzu.vmware.com/.](https://network.tanzu.vmware.com/.
    )'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 软件安装是通过容器镜像来完成的，这些镜像托管在与 Tanzu Network 相关联的容器注册表中。你可以在这里注册： [https://network.tanzu.vmware.com/.](https://network.tanzu.vmware.com/.
    )
- en: '**A production** **container registry**'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一个生产级** **容器注册表**'
- en: 'Once again, there are multiple options here, but I’ll recommend two that will
    help things go more smoothly. These require paid accounts, but they greatly simplify
    the installation. I’ll point out that Amazon Elastic Container Registry isn’t
    yet supported. Here are the currently supported options for a container registry:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，这里有多个选项可以选择，但我推荐两个可以让过程更加顺利的选项。它们需要付费账户，但大大简化了安装。我需要指出的是，Amazon Elastic
    Container Registry 目前还不受支持。以下是当前支持的容器注册表选项：
- en: '**A paid Docker** **Hub account**'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一个付费 Docker** **Hub 账户**'
- en: Docker Hub does offer a free tier, but the Tanzu Application Platform install
    requires a significant amount of space (at least 1 GB) and significant repeated
    image pushes and pulls. Docker limits both on their free tier and this will hinder
    smooth operation.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Hub 确实提供了免费层，但 Tanzu Application Platform 的安装需要大量空间（至少 1 GB）和频繁的镜像推送和拉取操作。Docker
    对免费层有限制，这将影响平稳运行。
- en: '**Google Container** **Registry (gcr.io)**'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Google 容器** **注册表 (gcr.io)**'
- en: This is my preferred solution as you can quickly set up a registry for your
    GCP project and push to multiple repositories.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我推荐的解决方案，因为你可以快速为你的 GCP 项目设置一个注册表，并将镜像推送到多个仓库。
- en: '**Azure Container** **Registry (azurecr.io)**'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure 容器** **注册表 (azurecr.io)**'
- en: This is another good option, especially if you have an Azure account already
    set up.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个不错的选择，尤其是如果你已经有了 Azure 账户。
- en: '**Harbor (DIY)**'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Harbor (自建)**'
- en: I’d urge caution in using bring-your-own Harbor unless you’re comfortable standing
    up trusted TLS with a public **certificate authority** (**CA**) or *Let’s Encrypt*.
    If your Harbor presents a self-signed certificate, the Tanzu Application Platform
    installation gets more complicated. Harbor works great as a container registry,
    but if you don’t already have it up and running, you’ll need to spend some time
    getting it properly set up.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 除非你能够建立受信任的 TLS 并使用公认的**证书颁发机构**（**CA**）或 *Let’s Encrypt*，否则我建议在使用自建 Harbor
    时要小心。如果你的 Harbor 使用的是自签名证书，那么 Tanzu Application Platform 的安装将变得更加复杂。Harbor 作为一个容器注册表非常好用，但如果你还没有配置好，它将需要你花时间进行正确的设置。
- en: '**A custom domain with a** **DNS server**'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一个带 DNS 服务器的** **自定义域名**'
- en: All the public cloud providers will register a domain for you and provide DNS
    lookup for that domain. You can also do this with dedicated registrars such as
    GoDaddy. The only requirement here is that you’re able to create wildcard *A*
    and *CNAME* records that resolve publicly.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 所有公有云提供商都会为你注册一个域名并提供该域名的 DNS 查找服务。你也可以通过像 GoDaddy 这样的专门域名注册商来做这件事。唯一的要求是你能够创建可以公开解析的通配符
    *A* 记录和 *CNAME* 记录。
- en: '**(Optional but recommended) A production** **Git server**'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**（可选但推荐）一个生产级** **Git 服务器**'
- en: You can get through the demos without your own Git server or an account on a
    public service, but any significant real-world work with Tanzu Application Platform
    requires one. There are free options on GitLab ([gitlab.com](http://gitlab.com))
    and GitHub ([github.com](http://github.com)) that work great for our purposes.
    You simply need to create an account and get a set of SSH or user/password credentials
    that the platform can use to push to and pull from a remote Git repo.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在没有自己 Git 服务器或公共服务账户的情况下完成演示，但任何实际使用 Tanzu Application Platform 的工作都需要一个。GitLab（[gitlab.com](http://gitlab.com)）和
    GitHub（[github.com](http://github.com)）上都有免费的选项，适合我们的需求。你只需要创建一个账户，并获取一组 SSH 或用户名/密码凭证，平台可以使用这些凭证推送和拉取远程
    Git 仓库。
- en: The `kubcectl` CLI as well as the *Carvel* tools. You can find them at [https://kubernetes.io/docs/tasks/tools/](https://kubernetes.io/docs/tasks/tools/)
    and [https://carvel.dev/#install](https://carvel.dev/#install), respectively.
    `Kubectl` should be version 1.22 or 1.23\. It should also be authorized with cluster-admin
    privileges on the Kubernetes cluster you’ll be installing to. All the Carvel tools
    are useful, but for this install, you only need `imgpkg`. You’ll also need the
    Docker CLI installed such that you don’t need to be root to run it.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubectl` CLI以及*Carvel*工具。你可以分别在[https://kubernetes.io/docs/tasks/tools/](https://kubernetes.io/docs/tasks/tools/)和[https://carvel.dev/#install](https://carvel.dev/#install)找到它们。`Kubectl`的版本应为1.22或1.23，且应具有在你要安装的Kubernetes集群上的集群管理员权限。所有Carvel工具都很有用，但本次安装中只需要`imgpkg`。你还需要安装Docker
    CLI，并确保不需要root权限即可运行它。'
- en: 'Let’s do some quick spot-checks that we have all our prerequisites in place:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进行一些快速检查，确保所有前提条件都已满足：
- en: 'Let’s double-check our *Docker* for the dreaded **permission denied** error.
    This is what you can expect to see if your Docker daemon doesn’t allow non-root
    access:'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让我们再次检查一下我们的*Docker*，看是否会出现令人头疼的**权限拒绝**错误。如果你的Docker守护进程不允许非root用户访问，通常会看到如下信息：
- en: '[PRE0]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This is what a successful installation looks like:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这是成功安装后的样子：
- en: '[PRE8]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Finally, let’s verify `kubectl` and our Carvel `imgpkg` tool:'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，让我们验证一下`kubectl`和我们的Carvel `imgpkg`工具：
- en: '[PRE9]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Once your command-line tools are in order, you’re ready to proceed with installation
    in the next section.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的命令行工具配置妥当，你就可以继续进行下一部分的安装了。
- en: Accepting end user license agreements
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 接受最终用户许可协议
- en: 'Before we can commence with moving packages to our custom registry and installing
    them, we need to accept the **End User License Agreements** (**EULAs**). After
    logging into the Tanzu Network, navigate to the two products listed here and select
    the latest version of each. If you need to accept the EULA, you will see a yellow
    box right below the version dropdown. You can click the link in the yellow box
    to be prompted to accept the EULA:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始将软件包迁移到自定义注册中心并安装之前，我们需要接受**最终用户许可协议**（**EULAs**）。登录到Tanzu网络后，导航到这里列出的两个产品，并选择每个产品的最新版本。如果需要接受EULA，你会在版本下拉菜单下看到一个黄色框，点击黄色框中的链接即可跳转到接受EULA的页面：
- en: '[https://network.tanzu.vmware.com/products/tanzu-application-platform/](https://network.tanzu.vmware.com/products/tanzu-application-platform/)'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://network.tanzu.vmware.com/products/tanzu-application-platform/](https://network.tanzu.vmware.com/products/tanzu-application-platform/)'
- en: '[https://network.tanzu.vmware.com/products/tanzu-cluster-essentials/](https://network.tanzu.vmware.com/products/tanzu-cluster-essentials/)'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://network.tanzu.vmware.com/products/tanzu-cluster-essentials/](https://network.tanzu.vmware.com/products/tanzu-cluster-essentials/)'
- en: Relocating Tanzu Application Platform packages
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新部署Tanzu应用平台软件包
- en: While this step isn’t absolutely necessary, it’s highly recommended to move
    all of the container images from the Tanzu repository to your own. If you think
    about how Kubernetes works, when any of the dozens (or hundreds!) of pods that
    constitute Tanzu Application Platform needs to start or restart, the `kubelet`
    process on a worker node will need to pull down that pod’s container images. If
    you don’t relocate those container images to your own registry, they’ll have to
    come directly from the Tanzu Network container registry, meaning you’ll have `registry.tanzu.vmware.com`
    in your runtime critical path. That means anytime you need to restart a pod on
    a Kubernetes worker that doesn’t already contain that pod’s container images,
    the Tanzu registry must be up and responsive. Now, the Tanzu team has very good
    SREs who do an excellent job of keeping the Tanzu registry up and responsive,
    but their **Service Level Objectives** (**SLOs**) may not line up with your apps’
    SLOs, so it’s a good idea to manage your own destiny and maintain your own container
    registry. Furthermore, the Tanzu registry is shared with every other Tanzu customer,
    so you can’t rule out spikes in demand making container images temporarily unresponsive.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这一步并非绝对必要，但强烈建议将所有容器镜像从Tanzu仓库迁移到你自己的仓库。如果你考虑Kubernetes的工作原理，当任何构成Tanzu应用平台的几十个（或数百个！）Pod需要启动或重启时，工作节点上的`kubelet`过程将需要拉取该Pod的容器镜像。如果你不将这些容器镜像迁移到你自己的注册表，它们将必须直接从Tanzu网络容器注册表中获取，这意味着你的运行时关键路径中将包含`registry.tanzu.vmware.com`。这意味着每次你需要重启一个Kubernetes工作节点上没有该Pod镜像的Pod时，Tanzu注册表必须保持正常运行并响应。现在，Tanzu团队拥有非常优秀的SRE团队，他们在保持Tanzu注册表正常运行方面做得非常出色，但他们的**服务水平目标**（**SLOs**）可能与你应用的SLOs不完全一致，因此，管理自己的命运并维护自己的容器注册表是一个好主意。此外，Tanzu注册表是与其他Tanzu客户共享的，因此你不能排除需求激增导致容器镜像暂时无法访问的情况。
- en: We’ll use the `imgpkg` tool to copy all the Tanzu Application Platform images
    from the Tanzu registry into our custom registry. The examples here will use `gcr.io`,
    but the steps are very similar for Azure Container Registry, Harbor, or Docker
    Hub.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`imgpkg`工具将所有Tanzu应用平台镜像从Tanzu注册表复制到我们的自定义注册表。这里的示例将使用`gcr.io`，但对于Azure容器注册表、Harbor或Docker
    Hub，步骤非常相似。
- en: 'First, let’s use the Docker CLI to log in to the Tanzu registry:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们使用Docker CLI登录到Tanzu注册表：
- en: '[PRE14]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then, log in once again to your personal registry. Here’s how you do it for
    `gcr.io`:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，再次登录到你的个人注册表。以下是`gcr.io`的登录方式：
- en: '[PRE15]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: For Docker Hub, Harbor, or Azure, you can issue `docker login <registry-host>`
    and type a username and password in at the prompts. At this point, we are authenticated
    to both the Tanzu registry and our custom registry (`gcr.io`). The `imgpkg` tool
    requires the local Docker daemon to be authenticated before it can copy over the
    images.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Docker Hub、Harbor或Azure，你可以发出`docker login <registry-host>`命令，并在提示符下输入用户名和密码。此时，我们已经通过身份验证，能够访问Tanzu注册表和我们的自定义注册表（`gcr.io`）。`imgpkg`工具要求本地Docker守护进程完成身份验证后，才能复制镜像。
- en: 'Now, we can use `imgpkg` to pull images from the Tanzu registry and push them
    to our custom registry. We’ll set some environment variables for readability:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用`imgpkg`从Tanzu注册表拉取镜像，并将它们推送到我们的自定义注册表。为了提高可读性，我们将设置一些环境变量：
- en: '[PRE16]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'At this point, all the container images needed to install and run Tanzu Application
    Platform are available at `gcr.io/my-gcr-project/tap-packages`. Specific instructions
    for logging in to and relocating images into Dockerub, Harbor, and Azure are available
    in the Tanzu Application Platform install documentation here: [https://docs.vmware.com/en/VMware-Tanzu-Application-Platform/1.3/tap/GUID-install.html#relocate-images-to-a-registry-0](https://docs.vmware.com/en/VMware-Tanzu-Application-Platform/1.3/tap/GUID-install.html#relocate-images-to-a-registry-0).'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，安装和运行Tanzu应用平台所需的所有容器镜像都可以在`gcr.io/my-gcr-project/tap-packages`中找到。有关登录并将镜像迁移到Docker
    Hub、Harbor和Azure的具体说明，请参见Tanzu应用平台安装文档：[https://docs.vmware.com/en/VMware-Tanzu-Application-Platform/1.3/tap/GUID-install.html#relocate-images-to-a-registry-0](https://docs.vmware.com/en/VMware-Tanzu-Application-Platform/1.3/tap/GUID-install.html#relocate-images-to-a-registry-0)。
- en: Installing the Tanzu CLI and Tanzu Application Platform plugins
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Tanzu CLI和Tanzu应用平台插件
- en: If you don’t already have the Tanzu CLI installed from other chapters, you can
    do that now. Furthermore, even if you have the Tanzu CLI, we’ll install some plugins
    to help us work more efficiently with Tanzu Application Platform.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尚未在其他章节中安装Tanzu CLI，可以现在进行安装。此外，即使你已经安装了Tanzu CLI，我们还将安装一些插件，帮助我们更高效地与Tanzu应用平台进行工作。
- en: 'First, we’ll visit the Tanzu Application Platform page on Tanzu Network and
    download the CLI. The link is here: [https://network.tanzu.vmware.com/products/tanzu-application-platform/#/releases/1222090/file_groups/10484](https://network.tanzu.vmware.com/products/tanzu-application-platform/#/releases/1222090/file_groups/10484).'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将访问 Tanzu 网络上的 Tanzu 应用平台页面并下载 CLI。链接如下：[https://network.tanzu.vmware.com/products/tanzu-application-platform/#/releases/1222090/file_groups/10484](https://network.tanzu.vmware.com/products/tanzu-application-platform/#/releases/1222090/file_groups/10484)。
- en: Once you’ve downloaded the `tanzu-framework-bundle` tarfile for your platform,
    copy it to your home directory. Then, on Mac and Linux, you can follow these steps.
    On Windows, you may have to adapt them a bit, or, as I would recommend, use *VirtualBox*
    to stand up a Linux VM and follow the Linux instructions.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 下载适合你平台的 `tanzu-framework-bundle` tarfile 后，将其复制到你的主目录。然后，在 Mac 和 Linux 上，你可以按照以下步骤操作。对于
    Windows，你可能需要稍作调整，或者我推荐使用 *VirtualBox* 来创建一个 Linux 虚拟机并按照 Linux 的操作步骤进行。
- en: 'Here’s the whole process. I’ll add some comments inline to describe what’s
    going on:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是整个过程。我会在过程中加入一些注释，描述每一步的操作：
- en: '[PRE17]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Congratulations! If you made it this far, you have a working Tanzu CLI with
    all the plugins you’ll need to install and run Tanzu Application Platform.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你！如果你已经走到这一步，你就拥有了一个可以正常工作的 Tanzu CLI，配备了安装和运行 Tanzu 应用平台所需的所有插件。
- en: Installing Cluster Essentials
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Cluster Essentials
- en: 'The Cluster Essentials toolset is how we land Tanzu packages on our Kubernetes
    cluster. Perhaps you’re familiar with tools such as Helm. The Cluster Essentials
    tools do something similar, but in addition to what Helm does, they do the following:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: Cluster Essentials 工具集是我们将 Tanzu 包部署到 Kubernetes 集群中的方式。也许你熟悉像 Helm 这样的工具。Cluster
    Essentials 工具也做类似的事情，但除了 Helm 的功能外，它们还具备以下功能：
- en: Store a desired application state in etcd as a CR so the application can be
    continuously reconciled
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将所需的应用状态存储为 CR 在 etcd 中，以便该应用能够持续进行协调
- en: Manage a complex hierarchy of dependencies
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理复杂的依赖层次结构
- en: Store and maintain templatized app configuration in such a way as to avoid configuration
    drift
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以避免配置漂移的方式存储和维护模板化的应用配置
- en: Allow selective sharing of secrets across namespaces
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许跨命名空间选择性地共享密钥
- en: I won’t sugarcoat the fact that Tanzu Application Platform is a complex piece
    of software, and it needs a fully realized enterprise-ready toolset to install
    it onto Kubernetes and keep it running smoothly. Cluster Essentials is that toolset.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会粉饰 Tanzu 应用平台是一个复杂的软件系统，安装它到 Kubernetes 并保持其顺畅运行，需要一个功能完备、适合企业级使用的工具集。Cluster
    Essentials 就是这个工具集。
- en: 'To install Cluster Essentials, we follow a similar script to what we did for
    the CLI. In this case, we need to make sure that `kubectl` is pointing to the
    Kubernetes cluster we plan on deploying to as the install script will initiate
    the deployment. Once again, I’ll narrate the process with comments:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 Cluster Essentials，我们需要遵循与安装 CLI 时类似的脚本。在这种情况下，我们需要确保 `kubectl` 指向我们计划部署的
    Kubernetes 集群，因为安装脚本将启动部署过程。我将再次通过注释描述这个过程：
- en: '[PRE18]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As the *kapp* CLI waits for the install to complete successfully, you’ll see
    quite a lot of output to the console describing the progress of the install. If
    you get the `Succeeded` message at the end, you know that the installation did
    in fact succeed. Now that you have Cluster Essentials installed and the installation
    packages relocated, we’re almost ready to install Tanzu Application Platform.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 当 *kapp* CLI 等待安装成功完成时，你会看到大量的控制台输出，描述安装的进展。如果你在最后看到 `Succeeded` 消息，就说明安装确实成功了。现在，你已经安装了
    Cluster Essentials 并且安装包已迁移，我们就快准备好安装 Tanzu 应用平台了。
- en: Setting up a developer namespace
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置开发者命名空间
- en: The Tanzu Application Platform official documentation puts this step after the
    install, but I find that the install goes more smoothly if we do it first. This
    step involves creating a secret in a namespace where developers will deploy a
    workload as well as some Kubernetes RBAC artifacts so that the namespace’s default
    service account can interact with the CRs that make up Tanzu Application Platform.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: Tanzu 应用平台的官方文档将此步骤放在安装之后，但我发现如果先执行这个步骤，安装过程会更加顺利。此步骤涉及在开发人员将工作负载部署到命名空间时创建一个密钥，并生成一些
    Kubernetes RBAC 工件，以便该命名空间的默认服务帐户能够与构成 Tanzu 应用平台的 CR 进行交互。
- en: 'First, let’s create the namespace and add a secret to it that will allow us
    to read from and write to our container registry. This example works for `gcr.io`,
    as we need to pass the password as a file. To create a secret for Azure, Docker
    Hub, or Harbor, you would use the `--username` and `--password` flags. My namespace-naming
    preference is `workload1`, `workload2`, and so on. This makes it clear to anyone
    perusing the cluster where the workloads are running:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们创建命名空间，并向其中添加一个密钥，以便我们能够读取和写入容器注册表。此示例适用于 `gcr.io`，因为我们需要将密码作为文件传递。要为
    Azure、Docker Hub 或 Harbor 创建密钥，你需要使用 `--username` 和 `--password` 标志。我的命名空间命名偏好为
    `workload1`、`workload2`，以此类推。这可以清楚地让任何查看集群的人了解工作负载的运行位置：
- en: '[PRE19]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Next, we need to give the default service account in our namespace some roles
    and secrets that will enable Tanzu Application Platform workloads to run in this
    namespace with the default service account:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要为命名空间中的默认服务账户分配一些角色和密钥，以使 Tanzu 应用平台工作负载能够使用默认服务账户在该命名空间中运行：
- en: '[PRE20]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Next, we’ll proceed to install some tools that run on our Kubernetes cluster
    that will manage the installation for us.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将安装一些工具，这些工具将在我们的 Kubernetes 集群上运行，帮助我们管理安装过程。
- en: Installing a package repository
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装软件包仓库
- en: 'Now we have all the client- and server-side tools ready to go, we can finally
    kick off our install. First, we need to set up a package repository. This is like
    a Docker or Apt repository. It’s simply a service on the network that stores and
    serves software packages. In this case, we’re installing a *Kapp* package repository
    on our Kubernetes cluster from which the Kapp controller can install packages.
    Previously, we relocated packages from the Tanzu registry to our own container
    registry. One of those packages is called `tap`. That `tap` package functions
    as our repository. It knows about all the other packages in the container registry.
    This will make more sense shortly. This repository and all its packages will live
    in their own namespace on our Kubernetes cluster. We’ll assume that you still
    have your environment variables set from when we relocated the images. If they’re
    not set, you’ll need to go back and set them again:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好所有客户端和服务器端的工具，可以开始安装了。首先，我们需要设置一个软件包仓库。这类似于 Docker 或 Apt 仓库。它仅仅是一个网络上的服务，用于存储和提供软件包。在本例中，我们将安装一个*Kapp*软件包仓库到我们的
    Kubernetes 集群中，Kapp 控制器可以从该仓库安装软件包。之前，我们已经将软件包从 Tanzu 注册表迁移到我们自己的容器注册表。其中一个软件包叫做
    `tap`。这个 `tap` 软件包充当我们的仓库，知道容器注册表中所有其他软件包的信息。稍后会更清楚明了。这个仓库及其所有软件包将位于 Kubernetes
    集群中的专用命名空间内。我们假设你在迁移镜像时已设置了环境变量。如果没有设置，你需要重新设置它们：
- en: '[PRE21]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Now, we’ll install these packages to stand up a running instance of Tanzu Application
    Platform.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将安装这些软件包以启动 Tanzu 应用平台的运行实例。
- en: Pulling down and formatting tap-values.yaml
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拉取并格式化 tap-values.yaml
- en: 'Next, we need a config file to install Tanzu Application Platform. You can
    pull down this file as a starting point: [https://github.com/PacktPublishing/DevSecOps-in-Practice-with-VMware-Tanzu/blob/main/chapter-09/tap-values.yaml](https://github.com/PacktPublishing/DevSecOps-in-Practice-with-VMware-Tanzu/blob/main/chapter-09/tap-values.yaml).'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要一个配置文件来安装 Tanzu 应用平台。你可以拉取这个文件作为起点：[https://github.com/PacktPublishing/DevSecOps-in-Practice-with-VMware-Tanzu/blob/main/chapter-09/tap-values.yaml](https://github.com/PacktPublishing/DevSecOps-in-Practice-with-VMware-Tanzu/blob/main/chapter-09/tap-values.yaml)。
- en: 'Once you have that file locally, follow the inline instructions to plug in
    registry credentials and domain information. Once that file is filled out, we
    can install the `tap` package from our package repository, referencing that file:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你将该文件下载到本地，按照内联指令插入注册表凭证和域信息。填写完该文件后，我们可以从我们的软件包仓库安装`tap`包，参考该文件：
- en: '[PRE22]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This installation can take several minutes. Furthermore, it will sometimes
    tell you that it failed when in truth, a component was taking a little too long.
    One thing you can do to get a little more feedback on the install is to monitor
    the **PackageInstall** (**pkgi**) objects in Kubernetes:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 此安装可能需要几分钟时间。此外，有时它会告诉你安装失败，实际上是因为某个组件稍微拖延了一些时间。为了获得更多关于安装的反馈，你可以通过监控 Kubernetes
    中的**PackageInstall**（**pkgi**）对象来查看安装情况：
- en: '[PRE23]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Congratulations! You have a running instance of Tanzu Application Platform.
    Now let’s configure the remaining components necessary for you to interact with
    it.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经拥有了一个运行中的 Tanzu 应用平台实例。接下来，让我们配置与之交互所需的其余组件。
- en: Creating DNS records
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 DNS 记录
- en: 'Once you’ve installed Tanzu Application Platform, you’ll want to be able to
    reach the tools and deployed applications from a web browser. This is where you
    go to your domain’s DNS service and point it at your Tanzu Application Platform
    installation. First, let’s find out the endpoint of our load balancer service
    and point a wildcard DNS entry at it:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你安装了 Tanzu 应用平台，你会希望能够通过网页浏览器访问工具和已部署的应用程序。这时，你需要去域名的 DNS 服务，并将其指向你的 Tanzu
    应用平台安装。首先，让我们找出负载均衡器服务的端点，并将通配符 DNS 记录指向它：
- en: '[PRE24]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In this case, the envoy service in `tanzu-system-ingress` has a hostname as
    it’s `EXTERNAL-IP`. If I controlled `mydomain.com`, I would go into the DNS configuration
    settings for my domain and create a CNAME record, `*.mydomain.com`, and point
    it to the `LoadBalancer` host from the `kubectl` command. In you’re using Azure
    or GCP, you might get an IPv4 address rather than a hostname. In that case, you’ll
    need to create an `A` record rather than a CNAME.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`tanzu-system-ingress` 中的 envoy 服务将主机名作为其 `EXTERNAL-IP`。如果我控制 `mydomain.com`，我将进入我的域名的
    DNS 配置设置，创建一个 CNAME 记录 `*.mydomain.com`，并将其指向通过 `kubectl` 命令获得的 `LoadBalancer`
    主机。如果你使用的是 Azure 或 GCP，你可能会获得一个 IPv4 地址而不是主机名。在这种情况下，你需要创建一个 `A` 记录，而不是 CNAME。
- en: 'Here’s a real-world example. I did my Tanzu Application Platform install with
    the `*.packtinstall.k10s.io` domain. After configuring my DNS records properly,
    I can use the dig command to verify that any subdomain of `packtinstall.k10s.io`
    will return a CNAME pointing to the AWS load balancer associated with the `tanzu-system-ingress/envoy`
    Kubernetes LoadBalancer service:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个实际的例子。我使用 `*.packtinstall.k10s.io` 域名安装了 Tanzu 应用平台。配置好 DNS 记录后，我可以使用 dig
    命令验证 `packtinstall.k10s.io` 的任何子域名是否会返回指向与 `tanzu-system-ingress/envoy` Kubernetes
    负载均衡器服务相关联的 AWS 负载均衡器的 CNAME：
- en: '[PRE25]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Now, if everything worked perfectly the first time, you should be able to access
    the Tanzu Application Platform GUI with a browser pointed to `tap-gui.<your-domain>.com`.
    Success!
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果一切顺利，你应该能够通过浏览器访问指向 `tap-gui.<your-domain>.com` 的 Tanzu 应用平台 GUI。成功！
- en: "![Figure \uFEFF8.5 – Tanzu Application Platform GUI](img/B18145_08_05.jpg)"
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.5 – Tanzu 应用平台 GUI](img/B18145_08_05.jpg)'
- en: Figure 8.5 – Tanzu Application Platform GUI
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.5 – Tanzu 应用平台 GUI
- en: I’d encourage you to explore the *TAP GUI*. *Chapters 2* and *5* of this book
    cover the Application Accelerator and API Portal components in detail. Next, let’s
    install some local developer tools to enhance our experience interacting with
    Tanzu Application Platform.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我鼓励你探索 *TAP GUI*。本书的 *第二章* 和 *第五章* 详细介绍了应用加速器和 API 门户组件。接下来，让我们安装一些本地开发工具，以增强我们与
    Tanzu 应用平台交互的体验。
- en: Installing the VS Code developer tools
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 VS Code 开发者工具
- en: To really see Tanzu Application Platform in action, it’s helpful to set up a
    true-to-life developer toolchain. At this point, you have a Kubernetes cluster
    running Tanzu Application Platform and you have `kubectl` and the Tanzu CLI with
    the necessary plugins. With just a few more additions, we’ll have that toolchain.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 为了真正看到 Tanzu 应用平台的运行效果，设置一个真实的开发工具链是非常有帮助的。此时，你已经有一个运行 Tanzu 应用平台的 Kubernetes
    集群，并且已经配置了 `kubectl` 和带有必要插件的 Tanzu CLI。只需再添加几个工具，我们就能建立这个工具链。
- en: 'First, if you don’t already have it, download and install VS Code from here:
    [https://code.visualstudio.com/download](https://code.visualstudio.com/download).
    Then, download and install Tilt from here: [https://docs.tilt.dev/install.html](https://docs.tilt.dev/install.html).
    Finally, download the developer tools for VS Code from Tanzu Network here: [https://network.tanzu.vmware.com/products/tanzu-application-platform](https://network.tanzu.vmware.com/products/tanzu-application-platform).
    You install the developer tools from the VS Code Command Palette. You can open
    the Command Palette from the `Extensions: Install from VSIX`. Once the auto-complete
    comes up, select that option, and navigate to the VSIX file you just downloaded
    to install it.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '首先，如果你还没有，请从这里下载并安装 VS Code：[https://code.visualstudio.com/download](https://code.visualstudio.com/download)。然后，从这里下载并安装
    Tilt：[https://docs.tilt.dev/install.html](https://docs.tilt.dev/install.html)。最后，从
    Tanzu 网络下载 VS Code 的开发者工具：[https://network.tanzu.vmware.com/products/tanzu-application-platform](https://network.tanzu.vmware.com/products/tanzu-application-platform)。你可以通过
    VS Code 的命令面板来安装这些开发工具。你可以通过 `Extensions: Install from VSIX` 打开命令面板。当自动完成显示时，选择该选项，并导航到你刚刚下载的
    VSIX 文件进行安装。'
- en: Congratulations! You’ve completed the installation and configuration of a very
    complex piece of software. Our day-1 tasks are complete. Now, let’s move on to
    day 2 and put our powerful new toolkit to use!
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你！你已经完成了一个非常复杂软件的安装和配置。我们的第1天任务已完成。现在，让我们进入第2天，开始使用我们强大的新工具包！
- en: Day 2 – deploying applications to Tanzu Application Platform
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2天 – 部署应用到Tanzu应用平台
- en: 'In [*Chapter 2*](B18145_02.xhtml#_idTextAnchor033)*, Developing Cloud-Native
    Applications*, we went in depth into Application Accelerator. To deploy an application
    to Tanzu Application Platform, we’ll revisit that product. Navigate to the *TAP
    GUI* that you just finished installing. It should be at `tap-gui.<your-domain>`.
    Then, in the menu down the left-hand side, click on `gcr.io`, it might be something
    such as `gcr.io/<your-project-id>/tanzu-java-web-app`. The value you provide will
    be used in the Tiltfile to tell the Tilt tool where to push your app’s source
    code so it can be picked up by a Tanzu Application Platform supply chain. This
    will make more sense shortly. Here’s a reminder of what the accelerator screen
    should look like:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第二章*](B18145_02.xhtml#_idTextAnchor033)《开发云原生应用》中，我们深入探讨了应用加速器。为了将应用部署到Tanzu应用平台，我们将再次使用该产品。前往你刚安装完成的*TAP
    GUI*，它应该位于`tap-gui.<your-domain>`。然后，在左侧菜单中点击`gcr.io`，它可能是类似`gcr.io/<your-project-id>/tanzu-java-web-app`的内容。你提供的值将用于Tiltfile中，告诉Tilt工具在哪里推送应用的源代码，以便被Tanzu应用平台的供应链接收。稍后你会明白这个步骤的意义。以下是加速器界面的样子，提醒一下：
- en: "![Figure \uFEFF8.6 – Filling out the Accelerator form](img/B18145_08_06.jpg)"
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.6 – 填写加速器表单](img/B18145_08_06.jpg)'
- en: Figure 8.6 – Filling out the Accelerator form
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.6 – 填写加速器表单
- en: Once you click **NEXT**, you’ll shortly be presented with a button to download
    the ZIP file. Download the ZIP, unzip it, and open VS Code to the application
    directory you just unzipped. Then, we’ll need to update a couple of settings in
    VS Code. Go into the VS Code Settings window and navigate to **Extensions** |
    **Tanzu**.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦点击**NEXT**，你将很快看到一个按钮用于下载ZIP文件。下载ZIP文件，解压并打开VS Code，进入你刚刚解压的应用目录。接下来，我们需要在VS
    Code中更新几个设置。进入VS Code设置窗口，导航到**扩展** | **Tanzu**。
- en: 'Set `workload1` or whichever namespace you set up for developer use in the
    previous steps. Finally, double-check that `gcr.io`, it might be `gcr.io/<your-project-id>/tanzu-java-web-app-remote-src`,
    depending on what you supplied to the Application Accelerator UI in the previous
    steps. Here’s what my settings look like:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 设置`workload1`或你在之前步骤中为开发者使用设置的任何命名空间。最后，再次确认`gcr.io`，它可能是`gcr.io/<your-project-id>/tanzu-java-web-app-remote-src`，具体取决于你在之前步骤中提供给应用加速器UI的内容。以下是我的设置样子：
- en: "![Figure \uFEFF8.7 – VS Code developer settings](img/B18145_08_07.jpg)"
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.7 – VS Code 开发者设置](img/B18145_08_07.jpg)'
- en: Figure 8.7 – VS Code developer settings
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.7 – VS Code 开发者设置
- en: 'Now, you can close the `Tiltfile`. When you right-click on the Tiltfile, you
    should see the **Tanzu: Live Update Start** option. The following screenshot gives
    you a good idea of what to look for:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '现在，你可以关闭`Tiltfile`。当你右击`Tiltfile`时，应该会看到**Tanzu: Live Update Start**选项。以下截图能让你更清楚地了解应该寻找什么：'
- en: "![Figure \uFEFF8.8 – Tanzu Java web app in VS Code](img/B18145_08_08.jpg)"
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.8 – VS Code 中的Tanzu Java Web应用](img/B18145_08_08.jpg)'
- en: Figure 8.8 – Tanzu Java web app in VS Code
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.8 – VS Code 中的Tanzu Java Web应用
- en: 'Let’s try to start the live update by clicking on the **Tanzu: Live Update
    Start** context menu item. It’s likely that you’ll be met with a message like
    this:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们尝试通过点击**Tanzu: Live Update Start**上下文菜单项来启动实时更新。很可能你会看到类似这样的消息：'
- en: '[PRE26]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: No worries. The Tilt tool is being extra cautious that you don’t accidentally
    start a live update session in a production environment. Follow the instructions
    and add the `allow_k8s_contexts('<your-k8s-context>')` command to the bottom of
    the Tiltfile, then try again.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 不用担心。Tilt工具非常小心，避免你在生产环境中意外启动实时更新会话。按照指示，向Tiltfile的底部添加`allow_k8s_contexts('<your-k8s-context>')`命令，然后再试一次。
- en: 'The first deployment may take a while, but eventually, you can open a terminal
    and look at all the pods in the `workload1` namespace (`kubectl get pods -n workload1`),
    and see something like this:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次部署可能需要一段时间，但最终，你可以打开终端，查看`workload1`命名空间中的所有Pod（`kubectl get pods -n workload1`），并看到类似这样的内容：
- en: "![Figure \uFEFF8.9 – Pod listing of \uFEFFthe running app](img/B18145_08_09.jpg)"
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.9 – 正在运行的应用的Pod列表](img/B18145_08_09.jpg)'
- en: Figure 8.9 – Pod listing of the running app
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.9 – 正在运行的应用的Pod列表
- en: The pods containing the word `build` are those that take your source code and
    turn it into a container image. The pods containing `config-writer` are those
    that take the source for a deployable Kubernetes artifact and write it to Git
    or a container registry where it can be picked up and deployed. Finally, the pod
    containing `deployment` is your application’s running pod.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 包含 `build` 字样的 pod 是那些将源代码转换为容器镜像的 pod。包含 `config-writer` 字样的 pod 是那些将可部署的 Kubernetes
    工件的源代码写入 Git 或容器注册表，以便可以被提取并部署的 pod。最后，包含 `deployment` 字样的 pod 是你的应用程序正在运行的 pod。
- en: 'Next, let’s view our app in a browser. Execute this command to get the URL
    of the running Knative Service that belongs to your app:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们在浏览器中查看我们的应用。执行此命令以获取属于你应用的正在运行的 Knative 服务的 URL：
- en: '[PRE27]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now, plug the URL into your browser. This is what you should see:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将 URL 插入浏览器中。这是你应该看到的内容：
- en: "![Figure \uFEFF8.10 – Running the Tanzu application](img/B18145_08_10.jpg)"
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.10 – 运行 Tanzu 应用](img/B18145_08_10.jpg)'
- en: Figure 8.10 – Running the Tanzu application
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.10 – 运行 Tanzu 应用
- en: Congratulations! You have a Spring Boot application up and running on Tanzu
    Application Platform. Furthermore, there was no need to install a local Java runtime
    or any tools beyond the Tanzu toolchain. The plugin transported your raw source
    code onto the platform where it was built and deployed. Next, let’s put the *Live
    Update* function to the test.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经成功在 Tanzu 应用平台上启动了一个 Spring Boot 应用。而且，完全不需要安装本地 Java 运行时或除了 Tanzu 工具链以外的任何工具。插件将你的原始源代码传送到平台上，并在平台上完成构建和部署。接下来，让我们测试一下*实时更新*功能。
- en: In VS Code, navigate to `/src/main/java/com/example/springboot/HelloController.java`,
    then change the greeting. Perhaps add `and Packt!!!` to the end.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在 VS Code 中，导航到 `/src/main/java/com/example/springboot/HelloController.java`，然后修改问候语。也许在结尾添加
    `and Packt!!!`。
- en: 'Notice that when you save your change, the VS Code plugin automatically detects
    the change and deploys it. Here’s a timeline of what happens when you make a change
    to a file in VS Code:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当你保存更改时，VS Code 插件会自动检测到更改并部署它。以下是你在 VS Code 中对文件进行更改时发生的时间线：
- en: The Tilt plugin notices that a file has changed.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Tilt 插件检测到文件发生变化。
- en: The plugin bundles up your source code and stores it in your container registry.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插件将你的源代码打包并存储在容器注册表中。
- en: The plugin updates the workload object on your Kubernetes cluster such that
    the `.spec.source.image` field points to the updated source code image in the
    container registry.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插件更新 Kubernetes 集群中的工作负载对象，使 `.spec.source.image` 字段指向容器注册表中更新后的源代码镜像。
- en: The cartographer controller on Kubernetes notices the change in the workload
    and triggers a new iteration of the supply chain.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Kubernetes 上的制图控制器检测到工作负载的变化，并触发供应链的新迭代。
- en: The supply chain pulls the source code, builds it, pushes the container image
    of the built artifact, and runs that artifact, applying multiple conventions in
    the process.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 供应链拉取源代码、构建它、推送已构建工件的容器镜像并运行该工件，在此过程中应用多个约定。
- en: After a minute or two, you can refresh your browser and see your local changes
    reflected live in the app running in Kubernetes.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 一两分钟后，你可以刷新浏览器，看到本地更改实时反映在 Kubernetes 中运行的应用中。
- en: Deploying workloads directly
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 直接部署工作负载
- en: We’ve now seen the developer workflow where local source code is packaged up
    and stored in a container repository and workloads are created from that source.
    In a real-world scenario, though, local source code doesn’t go straight from the
    IDE onto a platform. Rather, that code goes into source control, which then drives
    some sort of continuous integration onto the platform. Let’s briefly explore that
    use case now.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经看到了开发者的工作流程，即本地源代码被打包并存储在容器仓库中，工作负载是从这些源代码创建的。然而，在现实世界的场景中，本地源代码并不会直接从
    IDE 推送到平台。相反，代码会进入源代码控制系统，这之后驱动某种持续集成流程到平台上。让我们简要地探讨一下这个使用案例。
- en: 'In the `/config` directory of the app that we downloaded and unzipped, you
    should see a file called `workload.yaml`. This instructs the platform to pull
    the source code from this URL: [https://github.com/sample-accelerators/tanzu-java-web-app](https://github.com/sample-accelerators/tanzu-java-web-app).
    Tanzu Application Platform will watch that Git repository and whenever it detects
    a change, it will pull the latest source code and update the running workload.
    Let’s try this out now.'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们下载并解压的应用程序的 `/config` 目录中，应该会看到一个名为 `workload.yaml` 的文件。该文件指示平台从以下 URL 拉取源代码：[https://github.com/sample-accelerators/tanzu-java-web-app](https://github.com/sample-accelerators/tanzu-java-web-app)。Tanzu
    应用平台将监视该 Git 仓库，并在检测到更改时，拉取最新的源代码并更新运行中的工作负载。现在，让我们试试看。
- en: 'First, to avoid namespace collisions, let’s delete the existing workload. Let’s
    stop Tilt by right-clicking on the Tiltfile and selecting **Tanzu Live Update
    Stop**. Then, let’s delete our workload with this command:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，为了避免命名空间冲突，让我们删除现有的工作负载。通过右键点击 Tiltfile 并选择 **Tanzu Live Update Stop** 来停止
    Tilt。然后，使用以下命令删除我们的工作负载：
- en: '[PRE28]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Next, there’s a small bug in some versions of Tanzu Application Platform that
    we need to work around. Although the Git repo we’re referencing is public, the
    platform still wants a secret to exist for authN. Let’s create an empty secret
    as a workaround:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，Tanzu 应用平台的某些版本中存在一个小 bug，我们需要进行绕过。尽管我们引用的 Git 仓库是公共的，但平台仍然希望存在一个用于认证的 secret。让我们创建一个空的
    secret 作为解决方法：
- en: '[PRE29]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now, let’s deploy the workload directly, taking special care to specify the
    correct namespace:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们直接部署工作负载，特别注意指定正确的命名空间：
- en: '[PRE30]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Then, we can watch the pods progress as the workload deploys:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以观看工作负载部署时 Pods 的进度：
- en: '[PRE31]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Finally, you can verify that your workload is visible in the browser at `tanzu-java-web-app.workload1.yourdomain.com`.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您可以通过浏览器访问 `tanzu-java-web-app.workload1.yourdomain.com` 来验证您的工作负载是否可见。
- en: Now that we’re practically experts at using the platform, let’s have a look
    at what we might want to do next as platform operators.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们几乎已经成为使用该平台的专家，让我们看看作为平台操作员接下来可能需要做什么。
- en: Day 3 – common operational activities on Tanzu Application Platform
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 3 天 – 在 Tanzu 应用平台上的常见操作任务
- en: Thus far, we’ve installed a fully functional application platform, but in some
    ways, it still may feel like a toy. For instance, no enterprise is going to allow
    workloads to be deployed without TLS. Also, the platform is a bit of a black box
    that takes our source code and turns it into a running application. How can we
    know that what’s running on the platform is the exact code we checked in? Going
    in depth into these topics is a bit beyond the scope of this book, but what I
    will do is describe some additional operational tasks and the problems they solve,
    and point you to some useful in-depth resources for more information.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经安装了一个功能完全的应用平台，但在某些方面，它仍然可能感觉像一个玩具。例如，没有企业会允许在没有 TLS 的情况下部署工作负载。此外，该平台有点像一个黑盒，它将我们的源代码转化为运行中的应用程序。我们如何知道平台上运行的是否正是我们提交的代码呢？深入探讨这些话题有点超出本书的范围，但我会描述一些额外的操作任务及其解决的问题，并引导您查看一些有用的深入资源，了解更多信息。
- en: Securing running workloads with TAP GUI with TLS
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 TAP GUI 通过 TLS 保护运行中的工作负载
- en: 'For an application platform in the enterprise, securing all web endpoints with
    TLS is non-negotiable. There are a few options that I’ll list here. Some involve
    procuring the certificate outside of Kubernetes and supplying it directly, and
    others involve using an open source project called *cert-manager* ([https://www.jetstack.io/open-source/cert-manager/](https://www.jetstack.io/open-source/cert-manager/)),
    which gets installed automatically with Tanzu Application Platform. Here are some
    ways you might procure and deploy a TLS certificate into Tanzu Application Platform:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 对于企业级应用平台，使用 TLS 来保护所有 Web 端点是不可谈判的。有几种方法我将在这里列出。某些方法涉及在 Kubernetes 外部获取证书并直接提供，其他方法则涉及使用名为
    *cert-manager* 的开源项目（[https://www.jetstack.io/open-source/cert-manager/](https://www.jetstack.io/open-source/cert-manager/)），该项目会随着
    Tanzu 应用平台一起自动安装。以下是您可能采购并将 TLS 证书部署到 Tanzu 应用平台的几种方式：
- en: Directly supplied with a third-party certificate (*DigiCert*, *Verisign*, etc.)
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接使用第三方证书（*DigiCert*、*Verisign* 等）提供
- en: Directly supplied with a self-managed CA (OpenSSL)
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接使用自管 CA（OpenSSL）提供
- en: Directly supplied with a corporate CA-signed certificate (e.g., *Nokia NetGuard*)
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接使用企业 CA 签发的证书（例如，*Nokia NetGuard*）
- en: Directly supplied with *Let’s Encrypt*
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接使用 *Let’s Encrypt* 提供
- en: Via *cert-manager* with a self-managed CA
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 *cert-manager* 使用自管 CA
- en: Via *cert-manager* with *Let’s Encrypt* (my preference)
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 *cert-manager* 与 *Let’s Encrypt*（这是我的偏好）
- en: As you can see, there are many options, which could easily double the length
    of this chapter. If you don’t have a strong preference, I’d recommend *Let’s Encrypt*
    + *cert-manager*. If you’re managing your domain’s DNS via a major cloud provider
    such as AWS Route 53, the process can be simple and painless.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，有许多选项，这些选项可能会轻松地将本章的篇幅加倍。如果你没有特别的偏好，我建议使用 *Let’s Encrypt* + *cert-manager*。如果你通过
    AWS Route 53 等主要云提供商管理你的域名 DNS，过程会简单且无痛苦。
- en: 'Once you’ve decided how you’ll obtain a certificate, you’ll need to decide
    what `mydomain.com`; then, the SANs you’d configure would be as follows:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你决定了如何获取证书，你还需要决定 `mydomain.com`；然后，你将配置以下的 SAN：
- en: '`*.``mydomain.com`'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*.``mydomain.com`'
- en: '`*.``workload1.mydomain.com`'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*.``workload1.mydomain.com`'
- en: '`*.``workload2.mydomain.com`'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*.``workload2.mydomain.com`'
- en: '`*.``workload3.mydomain.com`'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*.``workload3.mydomain.com`'
- en: This will give you TLS that will work for workloads deployed to the `workload1`,
    `workload2`, and `workload3` namespaces. There are ways to work around the limitation
    so you can deploy to any arbitrary namespace, but I’ll refer you to the documentation
    for how to do that as well.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为你提供适用于 `workload1`、`workload2` 和 `workload3` 命名空间的 TLS。虽然有方法绕过限制，使你可以部署到任何任意的命名空间，但我会建议你参考文档了解如何操作。
- en: 'Now that we’ve decided on how we’ll obtain a certificate and identified our
    SANs, I’ll send you to this excellent blog post, which goes into detail on how
    to install Tanzu Application Platform with TLS support: [https://tanzu.vmware.com/content/blog/tanzu-application-platform-install-with-tls-and-azure-ad](https://tanzu.vmware.com/content/blog/tanzu-application-platform-install-with-tls-and-azure-ad).'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经决定了如何获取证书并确定了我们的 SAN，我将引导你阅读这篇出色的博客文章，文章详细介绍了如何安装支持 TLS 的 Tanzu 应用平台：[https://tanzu.vmware.com/content/blog/tanzu-application-platform-install-with-tls-and-azure-ad](https://tanzu.vmware.com/content/blog/tanzu-application-platform-install-with-tls-and-azure-ad)。
- en: Enabling testing and scanning
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用测试和扫描
- en: Another non-negotiable for running enterprise software on a platform is that
    it needs to deploy with a guarantee that it has passed all its unit tests and
    that it has been scanned for known vulnerabilities. Tanzu Application Platform
    can provide both these guarantees with a bit of extra configuration.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 运行企业软件的另一个不可妥协的要求是，必须保证它通过了所有单元测试，并且已扫描已知的漏洞。Tanzu 应用平台可以通过一些额外的配置提供这两项保证。
- en: First, regarding testing, there’s no way that any platform could account for
    every testing framework across every programming language, so rather than moving
    forward with a half-baked attempt, the architects of Tanzu Application Platform
    decided to put automated testing in the hands of the app’s developer via Tekton
    Pipelines.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，关于测试，任何平台都无法涵盖每种编程语言中的所有测试框架，因此，Tanzu 应用平台的架构师决定通过 Tekton Pipelines 将自动化测试交给应用开发人员，而不是进行不成熟的尝试。
- en: Tekton ([https://cloud.google.com/tekton/](https://cloud.google.com/tekton/))
    provides Kubernetes-native continuous integration and delivery. Tanzu Application
    Platform, then, will look for a Tekton pipeline that knows how to run an application’s
    tests and run it. The documentation also gives some sample pipelines for languages
    such as Java and Maven.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: Tekton ([https://cloud.google.com/tekton/](https://cloud.google.com/tekton/))
    提供 Kubernetes 原生的持续集成和交付。因此，Tanzu 应用平台将寻找一个 Tekton 流水线，该流水线能够运行应用程序的测试并执行它。文档中还提供了一些用于
    Java 和 Maven 等语言的示例流水线。
- en: 'Scanning for vulnerabilities is a bit simpler. Tanzu Application Platform will
    scan an app’s source code and generated container images using two well-known
    scanning tools: *Grype* or *Snyk*.'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 漏洞扫描稍微简单一些。Tanzu 应用平台将使用两个知名的扫描工具：*Grype* 或 *Snyk*，扫描应用程序的源代码和生成的容器镜像。
- en: 'You can learn how to enable testing and scanning for your application supply
    chains here: [https://docs.vmware.com/en/VMware-Tanzu-Application-Platform/1.2/tap/GUID-getting-started-add-test-and-security.html](https://docs.vmware.com/en/VMware-Tanzu-Application-Platform/1.2/tap/GUID-getting-started-add-test-and-security.html).'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里学习如何为你的应用供应链启用测试和扫描：[https://docs.vmware.com/en/VMware-Tanzu-Application-Platform/1.2/tap/GUID-getting-started-add-test-and-security.html](https://docs.vmware.com/en/VMware-Tanzu-Application-Platform/1.2/tap/GUID-getting-started-add-test-and-security.html)。
- en: Once you’ve tackled these topics, you should have a thorough knowledge of Tanzu
    Application Platform and have a good intuition for what *good* looks like in the
    enterprise. What comes next? Let’s brainstorm some next steps in the next section.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你掌握了这些主题，你应该对Tanzu应用平台有透彻的了解，并且对企业中*优秀*的表现有良好的直觉。那么接下来是什么呢？让我们在下一节中集思广益，探索一些下一步的计划。
- en: Next steps
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下一步
- en: 'Now that you’re a veritable Tanzu Application Platform expert, where can you
    go next? Here are some thoughts:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经是一个真正的Tanzu应用平台专家，接下来可以做些什么呢？以下是一些想法：
- en: Deploy Tanzu Application Platform across multiple Kubernetes clusters with dedicated
    clusters for viewing, building, and running workloads
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在多个Kubernetes集群中部署Tanzu应用平台，为查看、构建和运行工作负载提供专用集群
- en: Enable managed services (databases, message queues, etc.) that can automatically
    bind their credentials to workloads
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用可以自动将凭证绑定到工作负载的托管服务（如数据库、消息队列等）
- en: Enable custom GitOps workflows that require an approved pull request before
    deploying to production
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用需要批准的拉取请求才能部署到生产环境的自定义GitOps工作流
- en: Build your own custom supply chains using the Cartographer tools ([https://cartographer.sh/](https://cartographer.sh/))
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Cartographer工具（[https://cartographer.sh/](https://cartographer.sh/)）构建你自己的定制供应链
- en: Summary
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Tanzu Application Platform is likely the most complex piece of software we cover
    in this book and could benefit from a dedicated book of its own. Mastering this
    technology will make you indispensable to any enterprise looking to run software
    in the cloud at scale. With Tanzu Application Platform done, we’re going to wrap
    up the second part of the book where we covered *running* applications on Tanzu,
    and transition to the next section, where we talk about *managing* them with tools
    such as Tanzu Mission Control, VMware Aria operations for Applications, and Tanzu
    Service Mesh. This wraps up our treatment of running applications on Tanzu. I
    encourage you to continue on to the next section where we cover managing those
    applications. We’ll start with **Tanzu Mission Control**, a single point of control
    for all of your enterprise Kubernetes assets across multiple clouds.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: Tanzu应用平台可能是本书中最复杂的软件之一，值得单独出一本书来详细讨论。掌握这项技术将使你在任何希望大规模运行云上软件的企业中变得不可或缺。随着Tanzu应用平台的学习完成，我们将总结本书的第二部分，回顾在Tanzu上*运行*应用程序的内容，并过渡到下一部分，讨论如何使用工具（如Tanzu
    Mission Control、VMware Aria Operations for Applications和Tanzu Service Mesh）来*管理*它们。这也意味着我们对Tanzu上运行应用程序的讨论结束了。建议你继续阅读下一部分，了解如何管理这些应用程序。我们将从**Tanzu
    Mission Control**开始，它是一个集中的控制点，用于跨多个云管理你所有的企业Kubernetes资产。
- en: Part 3 – Managing Modern Applications on the Tanzu Platform
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三部分 – 在Tanzu平台上管理现代应用程序
- en: This part will cover some important Tanzu tools that help to manage, secure,
    and proactively observe the container applications and the underlying Kubernetes
    platform for important day-2 activities of multi-cloud-based deployments.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分将涵盖一些重要的Tanzu工具，这些工具有助于管理、保护并主动监控容器应用程序和底层Kubernetes平台，支持多云部署的日常运营（day-2活动）。
- en: 'This part of the book comprises the following chapters:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的这一部分包括以下章节：
- en: '*Chapter 9*, *Managing and Controlling Kubernetes Clusters with Tanzu Mission
    Control*'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第9章*，*使用Tanzu Mission Control管理和控制Kubernetes集群*'
- en: '[*Chapter 10*](B18145_10.xhtml#_idTextAnchor193), *Realizing Full-Stack Visibility
    with VMware Aria Operations for Applications*'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第10章*](B18145_10.xhtml#_idTextAnchor193)，*使用VMware Aria Operations for Applications实现全栈可视化*'
- en: '[*Chapter 11*](B18145_11.xhtml#_idTextAnchor220), *Enabling Secure Inter-Service
    Communication with Tanzu Service Mesh*'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第11章*](B18145_11.xhtml#_idTextAnchor220)，*使用Tanzu Service Mesh实现安全的服务间通信*'
- en: '[*Chapter 12*](B18145_12.xhtml#_idTextAnchor239), *Bringing It All Together*'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第12章*](B18145_12.xhtml#_idTextAnchor239)，*汇总与整合*'
- en: '[*Chapter 13*](B18145_13.xhtml#_idTextAnchor259), *Appendix*'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第13章*](B18145_13.xhtml#_idTextAnchor259)，*附录*'

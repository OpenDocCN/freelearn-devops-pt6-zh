- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Handling the Kubernetes Platform for IoT and Edge Computing
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理物联网和边缘计算的Kubernetes平台
- en: Kubernetes has achieved significant adoption in data center and cloud environments
    since its launch in 2014\. Kubernetes has progressed from orchestrating lightweight
    application containers to managing and scheduling a diverse set of IT workloads,
    ranging from virtualized network operations to AI/ML and GPU hardware resources.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 自2014年推出以来，Kubernetes在数据中心和云环境中取得了显著的采纳。Kubernetes从编排轻量级应用容器发展到管理和调度多样化的IT工作负载，涵盖从虚拟化网络操作到AI/ML和GPU硬件资源的各种工作负载。
- en: Kubernetes is quickly gaining popularity as the most popular control plane for
    scheduling and managing work in distributed systems. These activities could involve
    deploying virtual machines on real hosts, pushing containers to edge nodes, and
    even expanding the control plane to incorporate additional schedulers, such as
    serverless environments. Its extensibility makes it a universal scheduler and
    the most preferred management platform. In this chapter, we are going to explore
    various deployment approaches to how Kubernetes, the edge, and the cloud can collaborate
    to drive intelligent business decisions.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes正迅速成为分布式系统中调度和管理工作的最受欢迎的控制平面。这些活动可能涉及在实际主机上部署虚拟机、将容器推送到边缘节点，甚至扩展控制平面以整合额外的调度器，例如无服务器环境。其可扩展性使其成为通用调度器和最受欢迎的管理平台。在本章中，我们将探讨各种部署方法，以探索Kubernetes、边缘和云如何协作推动智能业务决策。
- en: 'Reiterating the points we discussed in the last chapter, the following considerations
    must be noted while building the edge architecture:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 重申我们在上一章讨论的观点，建立边缘架构时必须注意以下考虑因素：
- en: '**Autonomy and resiliency**: Because the solution necessitates autonomy, connection
    interruptions cannot be permitted.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自主性和弹性**：由于解决方案需要自主性，不能允许连接中断。'
- en: '**Resource constraints**: Low compute capability and small device footprints.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源限制**：低计算能力和小设备占地面积。'
- en: '**Security challenges**: Data privacy, physical device security, and the network
    security of the connected devices.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全挑战**：数据隐私、物理设备安全以及连接设备的网络安全。'
- en: '**Manageability**: Manage application software across thousands of devices
    from many different suppliers.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可管理性**：管理来自许多不同供应商的成千上万设备的应用软件。'
- en: '**Reliability**: Consistency in the building, deployment, and maintenance of
    applications.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可靠性**：在应用程序的构建、部署和维护中保持一致性。'
- en: '**Automation**: With high levels of automation, provision for automated mechanisms
    to deploy and maintain multiple distributed applications over any number of physical
    or virtual computers.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化**：通过高度自动化，提供自动化机制来部署和维护多个分布式应用程序，涵盖任意数量的物理或虚拟计算机。'
- en: 'Let''s look at four architectural approaches that meet these criteria. In this
    chapter, we''re going to cover the following main topics:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看满足这些标准的四种架构方法。在本章中，我们将涵盖以下主要主题：
- en: Deployment approaches for edge computing
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 边缘计算的部署方法
- en: Propositions that Kubernetes offers
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes提供的主张
- en: Deployment approaches for edge computing
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 边缘计算的部署方法
- en: The following approaches demonstrate how Kubernetes can be used for edge workloads,
    as well as support for the architecture that meets enterprise applications' requirements
    – low latency, resource constraints, data privacy, bandwidth scalability, and
    others.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下方法展示了如何使用Kubernetes处理边缘工作负载，并支持满足企业应用需求的架构——低延迟、资源限制、数据隐私、带宽可伸缩性等。
- en: Deployment of the entire Kubernetes cluster at the edge
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在边缘完全部署整个Kubernetes集群
- en: The complete Kubernetes cluster is deployed among edge nodes in this approach.
    This solution is better suited to situations where the edge node has limited capacity
    and does not want to consume additional resources for control planes and nodes.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种方法中，在边缘节点之间部署完整的Kubernetes集群。这种解决方案更适合边缘节点容量有限且不希望为控制平面和节点消耗额外资源的情况。
- en: The simplest production-grade upstream **K8s** is **MicroK8s**, a **Cloud Native
    Computing Foundation**-certified Kubernetes distribution that is lightweight and
    focused, with options to install on Linux, Windows, and macOS.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的生产级上游**K8s**是**MicroK8s**，这是一个轻量级且专注的Cloud Native Computing Foundation认证的Kubernetes分发版，可选择在Linux、Windows和macOS上安装。
- en: Another example is K3s from Rancher, which is a Cloud Native Computing Foundation-certified
    Kubernetes distribution and is designed for production workloads running in resource-constrained
    environments such as IoT and edge computing deployments.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个示例是 Rancher 的 K3s，它是云原生计算基金会认证的 Kubernetes 发行版，专为在资源受限环境（如物联网和边缘计算部署）中运行的生产工作负载设计。
- en: 'The minimal K3s Kubernetes cluster running on edge nodes is depicted in the
    following diagram:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了在边缘节点上运行的最小 K3s Kubernetes 集群：
- en: '![Figure 4.1 – K3s architecture ](img/Figure_4.1_B18115.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.1 – K3s 架构](img/Figure_4.1_B18115.jpg)'
- en: Figure 4.1 – K3s architecture
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.1 – K3s 架构
- en: MicroK8s and K3s can be installed on public cloud virtual machines or even on
    a Raspberry Pi device. The architecture is highly optimized for unattended, remote
    installations on resource-constrained devices while preserving complete compatibility
    and compliance with Cloud Native Computing Foundation Kubernetes conformance tests.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: MicroK8s 和 K3s 可以安装在公有云虚拟机上，甚至可以安装在 Raspberry Pi 设备上。该架构高度优化，适用于在资源受限设备上进行无人值守的远程安装，同时保持与云原生计算基金会
    Kubernetes 合规性测试的完全兼容性。
- en: By making it accessible and lightweight, MicroK8s and K3s are bringing Kubernetes
    to the edge computing layer.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使 Kubernetes 易于访问且轻量化，MicroK8s 和 K3s 将 Kubernetes 引入到边缘计算层。
- en: 'A quick comparison of MicroK8s and K3s is shown in the following table:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格展示了 MicroK8s 和 K3s 的快速比较：
- en: '![Table 4.1 – Comparison of MicroK8s and K3s ](img/B18115_04_Table_4.1.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![表格 4.1 – MicroK8s 与 K3s 的比较](img/B18115_04_Table_4.1.jpg)'
- en: Table 4.1 – Comparison of MicroK8s and K3s
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 表格 4.1 – MicroK8s 与 K3s 的比较
- en: 'Optionally, you can also use platforms such as Google Anthos or AKS to manage
    and orchestrate container workloads on multiple clusters like the one shown here:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 可选地，你还可以使用 Google Anthos 或 AKS 等平台，在多个集群上管理和编排容器工作负载，示例如下：
- en: '![Figure 4.2 – Google Anthos on the cloud and MicroK8s at the edge ](img/Figure_4.2_B18115.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.2 – 云上的 Google Anthos 和边缘的 MicroK8s](img/Figure_4.2_B18115.jpg)'
- en: Figure 4.2 – Google Anthos on the cloud and MicroK8s at the edge
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.2 – 云上的 Google Anthos 和边缘的 MicroK8s
- en: In the following chapters, we'll look at implementation aspects of common edge
    computing applications using MicroK8s.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将探讨如何使用 MicroK8s 实现常见的边缘计算应用。
- en: Deployment of Kubernetes nodes at the edge
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 边缘节点上的 Kubernetes 节点部署
- en: The core Kubernetes cluster is installed at a cloud provider or in your data
    center in this approach, with Kubernetes nodes deployed at the edge nodes. This
    is more appropriate for use cases where the infrastructure at the edge is constrained.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种方法中，核心 Kubernetes 集群安装在云服务提供商或数据中心，而 Kubernetes 节点部署在边缘节点上。这种方式更适合边缘基础设施受限的应用场景。
- en: '**KubeEdge**, an open source application that extends native containerized
    application orchestration and device management to hosts at the edge, is an example
    of this approach. KubeEdge is made up of two parts: the cloud and the edge.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**KubeEdge** 是一个开源应用程序，它将原生容器化应用编排和设备管理扩展到边缘主机上，便是这种方法的一个示例。KubeEdge 由两部分组成：云端和边缘。'
- en: It is based on Kubernetes and enables networking, application deployment, and
    metadata synchronization between the cloud and edge infrastructures. Developers
    can also use MQTT to write custom logic and enable resource-constrained device
    communication at the edge. KubeEdge is reliable and supports the most common IoT
    and edge use cases. It can be run on a compatible Linux distribution or an ARM
    device such as a Raspberry Pi.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 它基于 Kubernetes，能够在云端和边缘基础设施之间实现网络、应用部署和元数据同步。开发人员还可以使用 MQTT 编写自定义逻辑，实现边缘设备间的资源受限通信。KubeEdge
    可靠，并支持最常见的物联网和边缘计算应用场景。它可以在兼容的 Linux 发行版或 ARM 设备（如 Raspberry Pi）上运行。
- en: 'The architecture of KubeEdge is shown here:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这里展示了 KubeEdge 的架构：
- en: '![Figure 4.3 – KubeEdge architecture ](img/Figure_4.3_B18115.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.3 – KubeEdge 架构](img/Figure_4.3_B18115.jpg)'
- en: Figure 4.3 – KubeEdge architecture
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.3 – KubeEdge 架构
- en: 'Here''s a quick rundown of KubeEdge''s different components:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 KubeEdge 不同组件的快速概览：
- en: '![Table 4.2 – KubeEdge components ](img/B18115_04_Table_4.2.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![表格 4.2 – KubeEdge 组件](img/B18115_04_Table_4.2.jpg)'
- en: Table 4.2 – KubeEdge components
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 表格 4.2 – KubeEdge 组件
- en: 'The following are some of KubeEdge''s primary features:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 KubeEdge 的一些主要功能：
- en: Users can orchestrate apps, manage devices, and monitor app and device status
    on edge nodes using KubeEdge, just like they can with a regular Kubernetes cluster
    in the cloud.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户可以像在云中使用常规 Kubernetes 集群一样，使用 KubeEdge 在边缘节点上编排应用、管理设备，并监控应用和设备状态。
- en: Bidirectional communication, able to talk to edge nodes located in private subnets.
    Supports both metadata and data.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 双向通信，能够与位于私有子网中的边缘节点进行通信。支持元数据和数据。
- en: Even when the edge is disconnected from the cloud, it can operate autonomously.
    Metadata is persistent per node; thus, no list-watching is required during node
    recovery. This allows you to get ready faster.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即使边缘与云断开连接，它也能独立运行。每个节点的元数据是持久的，因此在节点恢复期间不需要监视列表。这使得你能够更快准备好。
- en: At the edge, resource use is optimized. The memory footprint has been reduced
    to around 70 MB.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在边缘，资源使用得到优化。内存占用已减少到约70MB。
- en: For IoT and Industrial IoT, connectivity between applications and devices is
    simplified.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于物联网和工业物联网，应用程序与设备之间的连接变得更加简化。
- en: Native support for x86, ARMv7, and ARMv8 architectures.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原生支持x86、ARMv7和ARMv8架构。
- en: Support for running third-party plugins and apps that rely on Kubernetes APIs
    on edge nodes with an autonomous Kube-API endpoint at the edge.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持在边缘节点上运行依赖Kubernetes API的第三方插件和应用程序，边缘上有一个独立的Kube-API端点。
- en: Deployment of virtual Kubernetes nodes at the edge
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在边缘部署虚拟Kubernetes节点
- en: Virtual node agents reside in the cloud in this approach, but the abstract of
    nodes and Pods is deployed at the edge. Edge nodes carrying containers are given
    command control via virtual node agents.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种方式中，虚拟节点代理驻留在云端，但节点和Pod的抽象部署在边缘。携带容器的边缘节点通过虚拟节点代理获得指令控制。
- en: 'Although there are others, Microsoft''s Virtual Kubelet project is a nice example
    of a kubelet agent with a Kubernetes API extension. Virtual Kubelet is a Kubernetes
    agent that runs in a remote environment and registers itself as a cluster node.
    To build a node resource on the cluster, the agent uses the Kubernetes API. It
    uses the notions of taints and tolerations to schedule Pods in an external environment
    by calling its native API:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管还有其他项目，微软的虚拟Kubelet项目是一个很好的示例，它是一个具有Kubernetes API扩展的kubelet代理。虚拟Kubelet是一个在远程环境中运行的Kubernetes代理，并将自己注册为集群节点。为了在集群上构建节点资源，代理使用Kubernetes
    API。它使用污点和容忍度的概念，通过调用其本地API在外部环境中调度Pods：
- en: '![Figure 4.4 – Microsoft Virtual Kubelet ](img/Figure_4.4_B18115.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.4 – 微软虚拟Kubelet](img/Figure_4.4_B18115.jpg)'
- en: Figure 4.4 – Microsoft Virtual Kubelet
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.4 – 微软虚拟Kubelet
- en: Virtual Kubelet works with providers such as AWS Fargate control plane, Azure
    Container Instances, and Azure IoT Edge. Following is a list of current providers
    (as of this writing).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟Kubelet与AWS Fargate控制平面、Azure容器实例和Azure IoT Edge等提供商兼容。以下是当前提供商的列表（截至本文写作时）。
- en: Current list of Virtual Kubelet providers
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 当前虚拟Kubelet提供商列表
- en: 'In this section, we''ll take a look at some of the Virtual Kubelet providers:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍一些虚拟Kubelet提供商：
- en: '**AWS Fargate**: Your Kubernetes cluster is connected to an AWS Fargate cluster
    using the AWS Fargate virtual-kubelet provider. The Fargate cluster appears as
    a virtual node with the CPU and memory resources you choose'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS Fargate**：你的Kubernetes集群通过AWS Fargate虚拟Kubelet提供商连接到AWS Fargate集群。Fargate集群作为一个虚拟节点，提供你选择的CPU和内存资源。'
- en: Pods scheduled on the virtual node execute on Fargate in the same way as they
    would on a regular Kubernetes node.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在虚拟节点上调度的Pods与在常规Kubernetes节点上的运行方式相同，都会在Fargate上执行。
- en: '**Admiralty Multi-Cluster Scheduler**: Admiralty is a Kubernetes controller
    system that schedules workloads intelligently among clusters. It''s easy to use
    and integrates with other applications.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**海军多集群调度器**：海军是一个Kubernetes控制器系统，能够智能地在集群之间调度工作负载。它易于使用，并能与其他应用程序集成。'
- en: '**Alibaba Cloud Elastic Container Instance** (**ECI**): The Alibaba ECI provider
    is an adaptor that connects your Kubernetes cluster to the ECI service, allowing
    Pods from a K8s cluster to be implemented on Alibaba''s cloud platform.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**阿里云弹性容器实例**（**ECI**）：阿里云ECI提供商是一个适配器，它将Kubernetes集群连接到ECI服务，使K8s集群中的Pod能够在阿里云平台上运行。'
- en: '**Azure Batch**: Azure Batch provides a distributed HPC computing environment
    on Azure. Azure Batch is a service that manages the scheduling of discrete processes
    and tasks across pools of virtual machines. It''s frequently used for batch processing
    jobs such as rendering.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure Batch**：Azure Batch在Azure上提供分布式HPC计算环境。Azure Batch是一项服务，负责管理跨虚拟机池调度离散进程和任务。它通常用于批量处理作业，如渲染。'
- en: '**Azure Container Instances** (**ACI**): ACI in Azure provides a hosted environment
    for running containers. When you use ACI, you don''t have to worry about managing
    the underlying compute infrastructure because Azure does it for you. When using
    ACI to run containers, you are charged per second for each container that is running'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure容器实例** (**ACI**)：Azure中的ACI提供了一个用于运行容器的托管环境。当使用ACI时，你无需担心管理底层计算基础设施，因为Azure会为你处理。当使用ACI运行容器时，你将按每秒钟收费，每个正在运行的容器都需要收费。'
- en: The Virtual Kubelet's ACI provider configures an ACI instance as a node in any
    Kubernetes cluster. Pods can be scheduled on an ACI instance as if it were a conventional
    Kubernetes node when utilizing the Virtual Kubelet ACI provider
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟Kubelet的ACI提供程序将ACI实例配置为任何Kubernetes集群中的一个节点。当使用虚拟Kubelet ACI提供程序时，Pod可以像调度到传统的Kubernetes节点一样调度到ACI实例上。
- en: This setup enables you to benefit from both Kubernetes' capabilities and ACI's
    management value and cost savings.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 该设置使你能够同时受益于Kubernetes的功能和ACI的管理价值与成本节约。
- en: '**Elotl Kip**: Kip is a Virtual Kubelet provider that enables a Kubernetes
    cluster to launch Pods on their own cloud instances in a transparent manner. The
    kip Pod runs on a cluster and creates a virtual Kubernetes node within it'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Elotl Kip**：Kip是一个虚拟Kubelet提供程序，使得Kubernetes集群可以透明地在其云实例上启动Pod。Kip Pod在集群中运行，并在其中创建一个虚拟Kubernetes节点。'
- en: Kip starts a right-sized cloud instance for the Pod's workload and sends the
    Pod to the instance when a Pod is scheduled on the Virtual Kubelet. The cloud
    instance is terminated once the Pod has finished operating. These cloud instances
    are referred to as *cells*
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当Pod在虚拟Kubelet上调度时，Kip为Pod的工作负载启动一个适当大小的云实例，并将Pod发送到该实例。一旦Pod操作完成，云实例会被终止。这些云实例被称为*单元*。
- en: When workloads run on Kip, your cluster size naturally scales with the cluster
    workload, Pods are strongly isolated from each other, and the user is freed from
    managing worker nodes and strategically packing Pods onto nodes. This results
    in lower cloud costs, improved security, and simpler operational overhead.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当工作负载在Kip上运行时，集群规模会根据集群工作负载自然扩展，Pod之间相互隔离，用户无需管理工作节点或将Pod战略性地打包到节点上。这将带来更低的云成本、提高的安全性以及更简单的操作开销。
- en: '**Kubernetes Container Runtime Interface** (**CRI**): The CRI provider implementation
    should be regarded as a bare-bones minimal implementation for testing the Virtual
    Kubelet project''s core against real Pods and containers; in other words, it is
    more extensive than MockProvider'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kubernetes容器运行时接口** (**CRI**)：CRI提供程序的实现应视为一个最简化的实现，旨在测试虚拟Kubelet项目的核心与真实的Pod和容器之间的兼容性；换句话说，它比MockProvider更为广泛。'
- en: This provider implementation is also built in such a way that it may be used
    to prototype new architectural features on local Linux infrastructure. If the
    CRI provider can be demonstrated to run effectively within a Linux guest, it may
    be assumed that the abstraction will work for other providers as well.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 该提供程序的实现方式还可以用于在本地Linux基础设施上原型化新的架构特性。如果能够证明CRI提供程序能够在Linux客体中有效运行，那么可以假设该抽象也将适用于其他提供程序。
- en: '**Huawei Cloud Container Instance** (**CCI**): The Huawei CCI virtual kubelet
    provider sets up a CCI project as a node in any Kubernetes cluster, including
    **Huawei Cloud Container Engine** (**CCE**). As a private cluster, CCE provides
    native Kubernetes applications and tools, allowing you to quickly build up a container
    runtime environment. The virtual kubelet provider''s scheduled Pod will run in
    CCI, taking advantage of CCI''s high performance.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**华为云容器实例** (**CCI**)：华为CCI虚拟Kubelet提供程序将CCI项目作为节点设置在任何Kubernetes集群中，包括**华为云容器引擎**
    (**CCE**)。作为私有集群，CCE提供原生Kubernetes应用和工具，使你能够快速构建容器运行时环境。虚拟Kubelet提供程序调度的Pod将在CCI中运行，充分利用CCI的高性能。'
- en: '**HashiCorp Nomad**: By exposing the Nomad cluster as a node in Kubernetes,
    the HashiCorp Nomad provider for Virtual Kubelet connects your Kubernetes cluster
    with the Nomad cluster. Pods scheduled on the virtual Nomad node registered on
    Kubernetes will run as jobs on Nomad clients, just like they would on a Kubernetes
    node, if you use the provider.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HashiCorp Nomad**：通过将Nomad集群作为Kubernetes中的一个节点暴露，HashiCorp Nomad为虚拟Kubelet提供程序连接了Kubernetes集群和Nomad集群。在Kubernetes中注册的虚拟Nomad节点上调度的Pod将作为任务在Nomad客户端上运行，就像它们在Kubernetes节点上一样，前提是你使用该提供程序。'
- en: '**Liqo**: Liqo is an on-prem or managed platform that enables dynamic and decentralized
    resource sharing among Kubernetes clusters. Liqo makes it possible to launch Pods
    on a distant cluster without modifying Kubernetes or the apps'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Liqo**：Liqo 是一个本地或托管平台，能够实现 Kubernetes 集群之间的动态和去中心化资源共享。Liqo 使得可以在远程集群上启动
    Pods，而无需修改 Kubernetes 或应用程序。'
- en: 'With Liqo, you can extend a Kubernetes cluster''s control plane across cluster
    boundaries, making multi-clusters native and transparent: collapse a complete
    remote cluster to a virtual local node, allowing task offloading and resource
    management in accordance with standard Kubernetes practices.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Liqo，您可以将 Kubernetes 集群的控制平面扩展到集群边界之外，使多集群变得原生且透明：将完整的远程集群折叠为一个虚拟本地节点，允许任务卸载和资源管理符合标准的
    Kubernetes 实践。
- en: '**OpenStack Zun**: Your Kubernetes cluster is connected to an OpenStack cloud
    through the OpenStack Zun virtual kubelet provider. Because each Pod is provided
    with dedicated Neutron ports in your tenant subnets, your OpenStack Pods have
    access to OpenStack tenant networks.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OpenStack Zun**：您的 Kubernetes 集群通过 OpenStack Zun 虚拟 kubelet 提供者连接到 OpenStack
    云。由于每个 Pod 都在您的租户子网中分配了专用的 Neutron 端口，您的 OpenStack Pods 可以访问 OpenStack 租户网络。'
- en: '**Tencent Games tensile-kube**: This allows Kubernetes clusters to collaborate.
    Tensile-kube is based on Virtual Kubelet and offers the following features:'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**腾讯游戏 tensile-kube**：这允许 Kubernetes 集群协作。Tensile-kube 基于 Virtual Kubelet，提供以下功能：'
- en: Cluster resources are discovered automatically.
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集群资源会自动发现。
- en: Pods are notified of changes in real time, reducing the expense of frequent
    lists.
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pods 会实时收到变更通知，减少频繁列出操作的开销。
- en: All kubectl logs and kubectl exec operations are supported.
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有 kubectl logs 和 kubectl exec 操作都受到支持。
- en: When utilizing a multi-scheduler, schedule Pods globally to avoid unscheduled
    Pods owing to resource fragmentation.
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用多调度器时，全球调度 Pods，以避免因资源碎片化导致的未调度 Pods。
- en: If Pods can't be scheduled in lower clusters, use a descheduler to reschedule
    them.
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 Pods 无法在低级集群中调度，可以使用反调度器将其重新调度。
- en: Supports PV/PVC and service abstractions.
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持 PV/PVC 和服务抽象。
- en: Deployment of Kubernetes devices at the edge
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 边缘 Kubernetes 设备的部署
- en: The Kubernetes device plugin framework is used to expose leaf devices as resources
    in a Kubernetes cluster in this approach.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种方法中，Kubernetes 设备插件框架用于将叶设备作为资源暴露在 Kubernetes 集群中。
- en: 'This technique is demonstrated by **Microsoft Akri**, which exposes a variety
    of sensors, controllers, and MCU class leaf devices as resources in a Kubernetes
    cluster. The Akri project brings the Kubernetes device plugin concept to the edge,
    where a variety of leaf devices use different communication protocols and have
    sporadic availability:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 该技术由 **微软 Akri** 演示，它将多种传感器、控制器和 MCU 类叶设备作为资源暴露在 Kubernetes 集群中。Akri 项目将 Kubernetes
    设备插件概念引入到边缘，那里有各种叶设备使用不同的通信协议并且可用性不稳定：
- en: '![Figure 4.5 – Akri architecture ](img/Figure_4.5_B18115.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.5 – Akri 架构](img/Figure_4.5_B18115.jpg)'
- en: Figure 4.5 – Akri architecture
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.5 – Akri 架构
- en: ONVIF, Udev, and OPC UA discovery handlers are now supported by Akri. More protocol
    support is being developed.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Akri 现在支持 ONVIF、Udev 和 OPC UA 发现处理程序。更多协议支持正在开发中。
- en: As seen previously, a variety of deployment approaches indicate how Kubernetes
    may be utilized for edge workloads, as well as support for the architecture that
    fulfills enterprise application needs such as low latency, resource constraints,
    data privacy, and bandwidth scalability, among others.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，各种部署方法展示了 Kubernetes 如何用于边缘工作负载，以及支持满足企业应用需求的架构，如低延迟、资源限制、数据隐私和带宽可扩展性等。
- en: In the next section, we will look at how Kubernetes is suitable for running
    edge workloads.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一部分中，我们将探讨 Kubernetes 如何适用于运行边缘工作负载。
- en: Propositions that Kubernetes offers
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes 提供的方案
- en: 'In terms of resource and workload control, edge-based infrastructure poses
    various challenges. There would be thousands of edge nodes and distant edge nodes
    to control in a short amount of time. Organizations'' edge architecture is designed
    to provide more centralized autonomy from the cloud, security standards, and relatively
    low latency. Take a peek at what Kubernetes for edge has to offer:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 就资源和工作负载控制而言，基于边缘的基础设施面临各种挑战。在短时间内，将有成千上万个边缘节点和远程边缘节点需要控制。组织的边缘架构旨在提供更多的云端自主性、安全标准和相对较低的延迟。让我们来看看
    Kubernetes 在边缘领域的应用：
- en: '![Table 4.3 – Propositions that Kubernetes offers ](img/B18115_04_Table_4.3.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![表4.3 – Kubernetes提供的建议](img/B18115_04_Table_4.3.jpg)'
- en: Table 4.3 – Propositions that Kubernetes offers
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 表4.3 – Kubernetes提供的建议
- en: Kubernetes is a critical component of businesses that are evolving into digital-first
    enterprises. Kubernetes is currently being deployed in 59% of data centers to
    increase resource efficiency and offer agility to the software development cycle,
    according to reports. In a distributed cloud environment, Kubernetes can manage
    and orchestrate containerized applications as well as legacy virtual machines.
    Kubernetes can also be used to execute AI/ML and GPU workloads, in addition to
    pure applications.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes是那些正在向数字优先企业转型的公司中的关键组成部分。根据报告，Kubernetes目前已在59%的数据中心部署，以提高资源效率并为软件开发周期提供灵活性。在分布式云环境中，Kubernetes可以管理和协调容器化应用程序以及传统虚拟机。除了纯应用程序，Kubernetes还可用于执行AI/ML和GPU工作负载。
- en: Kubernetes is certainly the go-to platform for edge computing, at least for
    those edge contexts that require dynamic orchestration for apps and centralized
    administration of workloads, according to the Linux Foundation's *The State of
    the Edge Report*. Kubernetes extends the benefits of cloud-native computing software
    development to the edge, allowing for flexible and automated management of applications
    that span a disaggregated cloud environment.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Linux基金会的*《边缘状态报告》*，Kubernetes无疑是边缘计算的首选平台，至少对于那些需要动态协调应用程序和集中管理工作负载的边缘场景而言。Kubernetes将云原生计算软件开发的优势扩展到边缘，允许对跨分布式云环境的应用程序进行灵活和自动化的管理。
- en: By deploying and testing Kubernetes at the edge, enterprises and telecom operators
    can achieve a high level of flexibility, observability, and dynamic orchestration.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在边缘部署和测试Kubernetes，企业和通信运营商可以实现高度的灵活性、可观察性和动态编排。
- en: Summary
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: As companies embrace digital transformation, Industry 4.0, industrial automation,
    smart manufacturing, and all the advanced use cases that these initiatives provide,
    the relevance of Kubernetes, edge, and cloud collaborating to drive intelligent
    business decisions is becoming clear. We've looked at a different approach that
    shows how Kubernetes may be used for running edge workloads. In the next chapters,
    we'll go over the deployment of a whole Kubernetes cluster at the edge approach
    in depth. Other approaches are beyond the scope of this book.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 随着企业拥抱数字化转型、工业4.0、工业自动化、智能制造及这些举措所带来的各种先进应用场景，Kubernetes、边缘计算和云计算协作推动智能业务决策的相关性日益显现。我们探讨了一种不同的方法，展示了Kubernetes如何用于运行边缘工作负载。在接下来的章节中，我们将深入讨论在边缘部署整个Kubernetes集群的方法。其他方法超出了本书的范围。
- en: In the following chapters, we'll go over implementation aspects of common edge
    computing applications using MicroK8s in detail, such as running your applications
    on a multi-node Raspberry Pi cluster; configuring load balancing; installing/configuring
    different CNI plugins for network connectivity; configuring logging, monitoring,
    and alerting options; and building/deploying ML models and serverless applications.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将详细介绍使用MicroK8s实现常见边缘计算应用的各个方面，如在多节点Raspberry Pi集群上运行应用程序；配置负载均衡；安装/配置不同的CNI插件以实现网络连接；配置日志记录、监控和告警选项；以及构建/部署ML模型和无服务器应用程序。
- en: Also, we will look into setting up storage replication for your stateful applications,
    implementing a service mesh for cross-cutting concerns, high-availability clusters
    to withstand a component failure and continue to serve workloads without interruption,
    the configuration of containers with workload isolation, and running secured containers
    with isolation from the host system.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，我们还将探讨为有状态应用设置存储复制，实现跨领域关注点的服务网格，建立高可用集群以应对组件故障并持续提供工作负载，配置带有工作负载隔离的容器，并运行与主机系统隔离的安全容器。
- en: 'Part 3: Running Applications on MicroK8s'
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三部分：在MicroK8s上运行应用程序
- en: This part focuses on the implementation aspects that are common for any IoT/edge
    computing applications, such as running your applications on a multi-node Raspberry
    Pi cluster, installing/configuring different CNI plugins for network connectivity,
    configuring load balancing, configuring logging, monitoring, alerting options,
    building, and deploying machine learning models, and serverless applications.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分重点介绍适用于任何物联网/边缘计算应用的实现方面，如在多节点树莓派集群上运行应用程序、为网络连接安装/配置不同的 CNI 插件、配置负载均衡、配置日志记录、监控、报警选项、构建和部署机器学习模型以及无服务器应用程序。
- en: 'This part of the book comprises the following chapters:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的这一部分包含以下章节：
- en: '[*Chapter 5*](B18115_05.xhtml#_idTextAnchor070), *Creating and Implementing
    Updates on Multi-Node Raspberry Pi Kubernetes Clusters*'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第5章*](B18115_05.xhtml#_idTextAnchor070)，*在多节点树莓派 Kubernetes 集群上创建和实施更新*'
- en: '[*Chapter 6*](B18115_06.xhtml#_idTextAnchor085), *Configuring Connectivity
    for Containers*'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第6章*](B18115_06.xhtml#_idTextAnchor085)，*为容器配置连接*'
- en: '[*Chapter 7*](B18115_07.xhtml#_idTextAnchor107), *Setting Up MetalLB and Ingress
    for Load Balancing*'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第7章*](B18115_07.xhtml#_idTextAnchor107)，*为负载均衡设置 MetalLB 和 Ingress*'
- en: '[*Chapter 8*](B18115_08.xhtml#_idTextAnchor121), *Monitoring the Health of
    Infrastructure and Applications*'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第8章*](B18115_08.xhtml#_idTextAnchor121)，*监控基础设施和应用程序的健康状况*'
- en: '[*Chapter 9*](B18115_09.xhtml#_idTextAnchor136), *Using Kubeflow to Run AI/MLOps
    Workloads*'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第9章*](B18115_09.xhtml#_idTextAnchor136)，*使用 Kubeflow 运行 AI/MLOps 工作负载*'
- en: '[*Chapter 10*](B18115_10.xhtml#_idTextAnchor157), *Going Serverless with Knative
    and OpenFaaS Frameworks*'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第10章*](B18115_10.xhtml#_idTextAnchor157)，*使用 Knative 和 OpenFaaS 框架实现无服务器架构*'

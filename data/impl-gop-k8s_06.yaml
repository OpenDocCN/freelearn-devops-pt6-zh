- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: GitOps Architectural Designs and Operational Control
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitOps 架构设计与操作控制
- en: In the rapidly evolving landscape of cloud-native technologies, understanding
    and effectively implementing various architectural frameworks becomes crucial
    for organizations seeking to harness the full potential of Kubernetes. As we dive
    deeper into this topic in this chapter, we will explore diverse architectures
    that not only enable multi-cluster management – a theme partially introduced in
    the previous chapter – but also facilitate effective **GitOps** implementations
    for service and product deployments utilized by various companies.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在快速发展的云原生技术领域，理解并有效实施多种架构框架，对于那些希望充分利用 Kubernetes 潜力的组织来说至关重要。随着我们在本章深入探讨这一主题，我们将探索多种架构，这些架构不仅支持多集群管理——这是上一章部分介绍的主题——还促进了
    **GitOps** 在服务和产品部署中的有效实施，这些部署被许多公司所使用。
- en: Our journey will take us through real-world scenarios and practical insights
    from projects that have employed different architectural approaches. By examining
    how various companies have successfully integrated GitOps methodologies to deploy
    and manage their services and products, we gain valuable perspectives on what
    works in different contexts. This chapter will particularly benefit **platform
    engineers**, **SREs**, and **internal developer platform** builders as it focuses
    on deploying various operational models used by teams to provide their workloads
    or the platform context.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的旅程将带领我们通过实际场景和从采用不同架构方法的项目中获得的实践见解。通过分析不同公司如何成功地将 GitOps 方法论整合到服务和产品的部署与管理中，我们能够获得在不同背景下有效的方法的宝贵视角。本章特别适合
    **平台工程师**、**SRE** 和 **内部开发平台** 构建者，因为它专注于部署团队使用的各种运营模型，来提供他们的工作负载或平台环境。
- en: We will delve into the nuances of managing Kubernetes clusters and workloads
    using tools such as **Argo CD**, **Flux CD**, and **Cluster API**. These tools
    are at the forefront of enabling efficient and scalable management of Kubernetes
    environments.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将深入研究使用 **Argo CD**、**Flux CD** 和 **Cluster API** 等工具来管理 Kubernetes 集群和工作负载的细微差别。这些工具在实现
    Kubernetes 环境高效和可扩展管理方面处于前沿。
- en: By the end of this chapter, you will have a comprehensive understanding of how
    different architectural choices impact the effectiveness and efficiency of Kubernetes
    deployments, particularly in the context of GitOps. Whether you’re a platform
    engineer crafting the infrastructure, an SRE ensuring its reliability, or a developer
    building internal platforms, the insights shared here will be invaluable in your
    pursuit of operational excellence in cloud-native environments.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将全面理解不同架构选择如何影响 Kubernetes 部署的效果和效率，特别是在 GitOps 背景下。无论你是构建基础设施的平台工程师，确保可靠性的
    SRE，还是构建内部平台的开发者，这里分享的见解都将在你追求云原生环境中卓越运营的过程中发挥重要作用。
- en: 'As such, the following topics will be covered in this chapter:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，本章将涉及以下主题：
- en: Exploring diverse GitOps architectural frameworks for Kubernetes environments
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索适用于 Kubernetes 环境的多种 GitOps 架构框架
- en: Examining the impact of architectural choices on GitOps’ effectiveness
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探讨架构选择对 GitOps 效率的影响
- en: Tailoring designs for scalability, resilience, and efficiency in cloud-native
    deployments
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为云原生部署量身定制可扩展性、弹性和效率的设计
- en: Centralized control – managing clusters with a solo Argo instance
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集中控制 – 使用单个 Argo 实例管理集群
- en: Dedicated instances – instance per cluster with Argo CD
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 专用实例 – 每个集群一个实例，使用 Argo CD
- en: Dedicated instances – instance per cluster with Flux CD
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 专用实例 – 每个集群一个实例，使用 Flux CD
- en: The middle way – instance per logical group with Argo CD
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中间路径 – 每个逻辑组一个实例，使用 Argo CD
- en: The cockpit and fleet approach with Argo CD
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Argo CD 的驾驶舱和舰队方法
- en: Centralized Kubernetes cluster creation – leveraging Cluster API and Argo CD
    for streamlined cluster deployment
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集中式 Kubernetes 集群创建 – 利用 Cluster API 和 Argo CD 简化集群部署
- en: A deep dive into Cluster API and GitOps – hands-on
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深入探讨 Cluster API 和 GitOps – 实践操作
- en: Exploring diverse GitOps architectural frameworks for Kubernetes environments
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索适用于 Kubernetes 环境的多种 GitOps 架构框架
- en: Exploring diverse GitOps architectural frameworks for Kubernetes environments
    is crucial for organizations looking to streamline their deployment pipelines
    and operational workflows. GitOps, a term coined by **Weaveworks**, emphasizes
    the use of Git as the single source of truth for declarative infrastructure and
    applications. In Kubernetes environments, this translates to a series of best
    practices and patterns that guide the management and automation of container orchestration.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 探索适用于 Kubernetes 环境的多种 GitOps 架构框架，对于希望简化部署管道和操作工作流的组织至关重要。GitOps 由 **Weaveworks**
    提出，强调将 Git 作为声明性基础设施和应用程序的唯一可信来源。在 Kubernetes 环境中，这转化为一系列最佳实践和模式，指导容器编排的管理与自动化。
- en: Several architectural frameworks within GitOps cater to different organizational
    needs and technical contexts. The choice of framework often depends on the complexity
    of the environment, the scale of the operations, and the governance requirements.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: GitOps 中的多个架构框架针对不同的组织需求和技术环境。框架的选择通常取决于环境的复杂性、操作的规模和治理需求。
- en: 'The adoption of GitOps influences architectural decisions in Kubernetes in
    several ways:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: GitOps 的采用在 Kubernetes 架构决策中有多方面的影响：
- en: '**Infrastructure as Code (IaC)**: With GitOps, the entire Kubernetes architecture
    is defined as code – typically YAML files that describe the desired state of the
    system. This approach enables developers and operations teams to collaborate on
    infrastructure changes, which can be versioned, reviewed, and audited just like
    application code.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基础设施即代码（IaC）**：通过 GitOps，整个 Kubernetes 架构都定义为代码——通常是 YAML 文件，描述系统的期望状态。这种方法使开发人员和运维团队能够协作处理基础设施变更，且这些变更可以像应用程序代码一样进行版本控制、审查和审计。'
- en: '**Immutable infrastructure**: The architectural frameworks that embrace GitOps
    often prioritize immutability. Once a resource is deployed, it should not be changed
    manually in the running environment. Instead, any modifications are made in the
    Git repository, which triggers a deployment process to update the infrastructure.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不可变基础设施**：采用 GitOps 的架构框架通常优先考虑不可变性。一旦资源被部署，就不应该在运行环境中手动更改。相反，任何修改都会在 Git
    仓库中进行，这会触发部署流程以更新基础设施。'
- en: '**Modular design**: GitOps encourages a modular approach to infrastructure.
    Each module, or set of Kubernetes resources, can be managed as a separate project
    within Git. This modularization aligns with Kubernetes’ architectural philosophy
    of microservices, where each service can be deployed, scaled, and managed independently.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模块化设计**：GitOps 鼓励对基础设施采取模块化方法。每个模块，或一组 Kubernetes 资源，都可以作为 Git 中的一个独立项目进行管理。这种模块化与
    Kubernetes 的微服务架构哲学相契合，其中每个服务都可以独立部署、扩展和管理。'
- en: '**Automated deployment strategies**: Architectural frameworks under GitOps
    often incorporate advanced deployment strategies such as canary releases, blue-green
    deployments, and A/B testing. GitOps tooling automates the rollout and monitoring
    of these strategies, making it easier to implement them in a controlled manner.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化部署策略**：GitOps 下的架构框架通常包含先进的部署策略，如金丝雀发布、蓝绿部署和 A/B 测试。GitOps 工具自动化了这些策略的发布和监控，使得它们能够以受控的方式更容易地实施。'
- en: '**Environment parity**: GitOps ensures that each environment – from development
    to staging to production – can be replicated with a high degree of fidelity. This
    is achieved by using the same declarative configurations across environments,
    reducing the “works on my machine” syndrome.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**环境一致性**：GitOps 确保每个环境——从开发到预生产到生产——都能以高度一致性进行复制。这是通过在不同环境中使用相同的声明性配置来实现的，从而减少了“在我机器上能工作”的现象。'
- en: '**Security and compliance**: By defining architectural elements as code in
    a Git repository, GitOps enables the application of security policies and compliance
    checks as part of the **continuous integration/continuous deployment** (**CI/CD**)
    pipeline. This means that security becomes a part of the architecture by design,
    not an afterthought.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全性和合规性**：通过将架构元素作为代码定义在 Git 仓库中，GitOps 使得安全策略和合规检查能够成为 **持续集成/持续部署** (**CI/CD**)
    流水线的一部分。这意味着安全性作为架构的一部分被设计，而不是事后的考虑。'
- en: '**Single repository versus multiple repositories**: Some organizations opt
    for a single repository containing all configurations and applications, which
    simplifies management but may not scale well with large teams or complex applications.
    Others prefer multiple repositories and separating configurations and applications
    to provide finer-grained access control and clearer separation of concerns.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单一仓库与多个仓库**：一些组织选择使用一个包含所有配置和应用的仓库，这简化了管理，但在大团队或复杂应用中可能难以扩展。另一些组织则偏好多个仓库，将配置和应用分开，以提供更精细的访问控制和更清晰的关注点分离。'
- en: '**Push versus pull deployment models**: In a push-based model, changes are
    pushed from the repository to the Kubernetes clusters, often through a CI/CD pipeline.
    The pull-based model, conversely, involves a Kubernetes operator within the cluster
    monitoring the repository and pulling in changes when they’re detected. While
    the push model offers immediacy, the pull model is praised for its alignment with
    the Kubernetes declarative philosophy and enhanced security posture.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**推送与拉取部署模型**：在基于推送的模型中，变更从仓库推送到 Kubernetes 集群，通常通过 CI/CD 流水线进行。相反，基于拉取的模型涉及
    Kubernetes 集群内的一个操作员监视仓库，并在检测到变更时拉取更新。虽然推送模型提供即时性，但拉取模型因其与 Kubernetes 声明式哲学的契合及增强的安全性而受到赞扬。'
- en: '**Monolithic versus microservices architectures**: When it comes to application
    architectures within Kubernetes, GitOps can be applied to both monolithic and
    microservices patterns. Monolithic architectures may be easier to manage through
    GitOps due to their singular nature, but microservices architectures benefit from
    GitOps through the ability to independently deploy and scale services.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单体架构与微服务架构**：在 Kubernetes 中的应用架构方面，GitOps 可以应用于单体架构和微服务架构。由于单体架构的单一特性，GitOps
    可能更易于管理，但微服务架构通过 GitOps 能够独立部署和扩展服务，从中受益。'
- en: The architectural frameworks for Kubernetes, empowered by GitOps, are evolving
    to facilitate more robust, scalable, and secure application deployments. Embracing
    GitOps not only streamlines the operational workflow but also enforces best practices
    in software architecture. As organizations adopt these frameworks, they must remain
    flexible and willing to adapt to the rapidly changing landscape of cloud-native
    technologies.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: GitOps 赋能的 Kubernetes 架构框架正在不断发展，以促进更强大、可扩展和安全的应用部署。拥抱 GitOps 不仅简化了操作工作流程，还加强了软件架构的最佳实践。随着组织采用这些框架，它们必须保持灵活，并愿意适应云原生技术快速变化的格局。
- en: In the next section, we will look at the effects the choice of architecture
    has on working with GitOps.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一部分，我们将探讨架构选择对使用 GitOps 的影响。
- en: Examining the impact of architectural choices on GitOps’ effectiveness
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查架构选择对 GitOps 效果的影响
- en: 'GitOps is inherently aligned with Kubernetes’ declarative approach to managing
    infrastructure, where the desired state of the system is described in code. This
    state is checked into a Git repository, which then serves as the single source
    of truth. The effectiveness of GitOps is contingent on how well the architectural
    choices support a declarative model that enables the following aspects:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: GitOps 本质上与 Kubernetes 的声明式基础设施管理方法一致，其中系统的期望状态通过代码描述。此状态被提交到 Git 仓库，并作为唯一的“真相来源”。GitOps
    的有效性取决于架构选择如何支持声明式模型，从而实现以下几个方面：
- en: '**Version control**: Tracking changes over time, providing a historical context,
    and enabling rollback to previous states'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本控制**：跟踪变化历史，提供历史背景，并支持回滚到先前状态'
- en: '**Change management**: Facilitating peer reviews and approvals for changes
    to infrastructure code, enhancing the quality and security of deployments'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**变更管理**：促进基础设施代码变更的同行评审和批准，提高部署的质量和安全性'
- en: '**Automated synchronization**: Ensuring that the actual state of the system
    automatically converges to the desired state defined in the repository'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化同步**：确保系统的实际状态自动 converges 到在仓库中定义的期望状态'
- en: Architectural choices impacting GitOps
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 影响 GitOps 的架构选择
- en: 'When considering the impact of architectural choices on GitOps, several key
    factors come into play:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在考虑架构选择对 GitOps 影响时，有几个关键因素需要考虑：
- en: '**Repository structure**: Choosing between a monolithic (single repository)
    versus a multi-repository (one per service or team) approach can significantly
    affect the manageability and scalability of applications. A monolithic repository
    might simplify dependency tracking and versioning but could become unwieldy with
    scale. Multi-repository strategies enhance modularity and separation of concerns
    but require more sophisticated synchronization mechanisms.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仓库结构**：在单一仓库（单体仓库）和多仓库（每个服务或团队一个仓库）之间的选择，可能会显著影响应用程序的可管理性和可扩展性。单体仓库可能简化依赖追踪和版本管理，但随着规模扩大可能变得难以处理。多仓库策略提高了模块化和关注点分离，但需要更复杂的同步机制。'
- en: '**Deployment strategies**: The architecture must support a variety of deployment
    strategies, such as canary, blue-green, or rolling updates. GitOps tools automate
    the execution of these strategies, and the choice of strategy can impact resource
    utilization, downtime during deployments, and the ability to test changes in production-like
    environments.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署策略**：架构必须支持多种部署策略，例如金丝雀发布、蓝绿部署或滚动更新。GitOps 工具自动化这些策略的执行，策略选择会影响资源利用、部署期间的停机时间以及在类似生产环境中测试变更的能力。'
- en: '**Environment isolation**: Architectural decisions on how to isolate and manage
    environments (development, staging, and production) will affect the GitOps workflow.
    Environment-specific configurations can be handled via separate branches, directories,
    or even separate repositories, each with implications for access control, traceability,
    and complexity.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**环境隔离**：关于如何隔离和管理环境（开发、预发布和生产）的架构决策将影响 GitOps 工作流。可以通过独立的分支、目录甚至独立的仓库来处理环境特定的配置，每种方法都会影响访问控制、可追溯性和复杂性。'
- en: '**Scalability**: As organizations scale, the architecture should facilitate
    a GitOps approach that can handle increased workloads, more complex deployments,
    and a growing number of services. This may involve partitioning clusters, adopting
    multi-cluster strategies, or leveraging cloud-native tools that specifically address
    scalability.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性**：随着组织的规模扩大，架构应能够支持处理更大的工作负载、更复杂的部署以及更多服务的 GitOps 方法。这可能涉及到集群分区、采用多集群策略或利用专门针对可扩展性设计的云原生工具。'
- en: '**Security considerations**: Architectural choices must ensure that security
    is embedded in the GitOps workflow. This includes everything from securing access
    to Git repositories to encrypting sensitive data and automatically enforcing policies
    throughout the CI/CD pipeline.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全考虑**：架构决策必须确保安全性融入 GitOps 工作流中。这包括从保护 Git 仓库访问权限到加密敏感数据，以及在整个 CI/CD 流水线中自动执行策略。'
- en: Making informed architectural decisions
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 做出有根据的架构决策
- en: 'To ensure GitOps effectiveness, organizations must make informed architectural
    decisions:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为确保 GitOps 的有效性，组织必须做出有根据的架构决策：
- en: '**Assess organizational needs**: Understand the organization’s requirements
    in terms of scale, complexity, compliance, and team workflows'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**评估组织需求**：了解组织在规模、复杂性、合规性和团队工作流程方面的需求。'
- en: '**Evaluate tooling compatibility**: Select GitOps tooling that is compatible
    with the chosen architecture and can support the required deployment strategies'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**评估工具兼容性**：选择与所选架构兼容并能支持所需部署策略的 GitOps 工具。'
- en: '**Promote collaboration**: Architectures should encourage collaboration between
    development, operations, and security teams to leverage the collective expertise
    in support of GitOps workflows'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**促进协作**：架构应鼓励开发、运维和安全团队之间的协作，以便利用集体的专业知识支持 GitOps 工作流。'
- en: '**Continuously refine**: Architectural choices should be revisited and refined
    based on feedback from ongoing operations so that they can adapt to new challenges
    and opportunities'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续优化**：架构决策应根据持续运营中的反馈进行重新评估和优化，以适应新的挑战和机会。'
- en: In conclusion, the architectural choices that are made when setting up Kubernetes
    environments have far-reaching implications for the success of a GitOps approach.
    By fostering an architecture that embraces version control, change management,
    and automated synchronization, organizations can leverage GitOps to enhance the
    agility and stability of their infrastructure. Making informed decisions about
    repository structures, deployment strategies, environment isolation, scalability,
    and security will position teams to harness the full potential of GitOps, leading
    to a more resilient and responsive infrastructure.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，在设置 Kubernetes 环境时所做的架构选择对 GitOps 方法的成功具有深远的影响。通过构建一个拥抱版本控制、变更管理和自动同步的架构，组织可以利用
    GitOps 提升基础设施的灵活性和稳定性。对仓库结构、部署策略、环境隔离、可扩展性和安全性做出明智决策，将使团队能够充分利用 GitOps 的潜力，从而打造一个更加弹性和响应迅速的基础设施。
- en: Tailoring designs for scalability, resilience, and efficiency in cloud-native
    deployments
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为云原生部署量身定制可扩展性、韧性和效率的设计
- en: Tailoring architectural designs to achieve scalability, resilience, and efficiency
    is fundamental for cloud-native deployments, where the dynamic nature of the cloud
    environment can present both opportunities and challenges. Cloud-native architectures
    enable systems to be resilient to failures, adaptable to changing loads, and efficient
    in resource utilization. When incorporating GitOps practices, these designs can
    be systematically enforced and continuously improved.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 为实现可扩展性、韧性和效率而量身定制架构设计是云原生部署的基础，因为云环境的动态特性可能带来机遇与挑战。云原生架构使系统能够对故障具有韧性，适应不断变化的负载，并高效利用资源。在融入
    GitOps 实践时，这些设计可以系统地实施并持续改进。
- en: Scalability in cloud-native architectures
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 云原生架构中的可扩展性
- en: 'Cloud-native deployments are expected to handle varying loads gracefully. This
    flexibility is crucial for maintaining performance during demand spikes and optimizing
    costs during quieter periods. Here are a few ways you can achieve high scalability:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 云原生部署预计能够优雅地处理不同的负载。这种灵活性对在需求高峰期间维持性能并在较为平静的时期优化成本至关重要。以下是实现高可扩展性的一些方法：
- en: '**Horizontal scaling**: Architectures should be designed to allow for horizontal
    scaling, which involves adding more instances of an application to handle increased
    load'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**水平扩展**：架构应设计为支持水平扩展，这意味着通过增加应用程序实例来处理增加的负载。'
- en: '**Microservices**: Breaking down applications into microservices enables individual
    components to scale independently, providing granular control over resource allocation'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**微服务**：将应用程序拆分成微服务可以使各个组件独立扩展，从而对资源分配进行精细控制。'
- en: '**Stateless applications**: Stateless applications are inherently more scalable
    since any instance can handle any request, allowing for straightforward horizontal
    scaling'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无状态应用**：无状态应用本质上具有更好的可扩展性，因为任何实例都可以处理任何请求，从而实现简便的水平扩展。'
- en: GitOps can manage the deployment and scaling of these services by automatically
    adjusting the number of instances based on the load, as defined in the Git repository.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: GitOps 可以通过根据 Git 仓库中定义的负载自动调整实例数量来管理这些服务的部署和扩展。
- en: Resilience through redundancy and isolation
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过冗余和隔离增强韧性
- en: 'A resilient system can withstand and recover from failures without significant
    downtime or data loss. Here are a few ways you can achieve stronger resilience:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一个具有韧性的系统能够在不产生重大停机或数据丢失的情况下承受并从故障中恢复。以下是实现更强韧性的一些方法：
- en: '**High availability**: Architectures must be designed for high availability,
    with redundant components that can take over in case of failure.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高可用性**：架构必须设计为具有高可用性，并具备冗余组件，在发生故障时可以接管。'
- en: '**Fault isolation**: Microservices architectures naturally lend themselves
    to fault isolation. A problem in one service should not cascade and cause system-wide
    failures.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**故障隔离**：微服务架构天然支持故障隔离。一个服务中的问题不应蔓延并导致系统级的故障。'
- en: '**Disaster recovery**: A robust backup and recovery strategy, along with multi-region
    deployments, can ensure that applications survive even catastrophic events.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灾难恢复**：一个强大的备份与恢复策略以及多区域部署可以确保应用程序在发生灾难性事件时仍然能够存活。'
- en: In GitOps workflows, the desired state in the repository reflects these high-availability
    configurations, enabling the system to self-heal by automatically re-deploying
    failed components.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在GitOps工作流中，仓库中的期望状态反映了这些高可用性配置，允许系统通过自动重新部署失败的组件来实现自我修复。
- en: Efficiency with proactive optimization
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主动优化以提高效率。
- en: 'Efficiency in cloud-native deployments is about doing more with less – less
    time, less resources, and less manual intervention. You can achieve early efficiency
    if the following aspects are optimized in advance:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 云原生部署的效率是指用更少的时间、更少的资源和更少的人工干预实现更多的目标。如果事先优化以下方面，你可以在早期就实现高效：
- en: '**Auto-scaling**: Implement auto-scaling policies to adjust resources in response
    to real-time metrics, ensuring efficient use of infrastructure'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动扩展**：实施自动扩展策略，根据实时指标调整资源，确保高效使用基础设施。'
- en: '**Load balancing**: Effective load balancing distributes traffic across instances
    to optimize resource utilization and ensure consistent performance'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**负载均衡**：有效的负载均衡将流量分配到各个实例，以优化资源利用并确保一致的性能。'
- en: '**Resource limits**: Setting appropriate resource limits and requests in Kubernetes
    helps prevent any single service from consuming more than its fair share of resources,
    leading to a more efficient system'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源限制**：在Kubernetes中设置适当的资源限制和请求有助于防止任何单一服务消耗过多资源，从而实现更高效的系统。'
- en: GitOps automates the process of enforcing these policies by triggering actions
    based on the configurations defined in the Git repository.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: GitOps通过基于Git仓库中定义的配置触发操作，自动化执行这些策略的过程。
- en: Tailoring designs with GitOps
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 利用GitOps量身定制设计。
- en: 'Designing architectures with scalability, resilience, and efficiency in mind
    requires careful planning and the right set of tools to manage the deployment
    and operation of cloud-native applications. Consider the following aspects when
    tailoring the design:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 设计具有可扩展性、韧性和高效性的架构需要精心规划，并使用合适的工具来管理云原生应用的部署和运行。在定制设计时，考虑以下方面：
- en: '**IaC**: Define your infrastructure and policies as code to maintain a clear
    and auditable trail of how resources are allocated and managed'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基础设施即代码（IaC）**：将你的基础设施和策略定义为代码，以保持清晰且可审计的资源分配和管理过程。'
- en: '**Observability**: Implement comprehensive logging, monitoring, and alerting
    to gain insights into the system’s performance and health, informing decisions
    about design adjustments'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可观测性**：实施全面的日志记录、监控和告警，以深入了解系统的性能和健康状态，指导设计调整的决策。'
- en: '**Continuous improvement**: Use GitOps to continuously deploy updates and improvements
    to the architecture, ensuring it evolves to meet changing needs and challenges'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续改进**：利用GitOps持续部署更新和改进架构，确保其不断发展以应对不断变化的需求和挑战。'
- en: Tailoring designs for scalability, resilience, and efficiency is vital for cloud-native
    deployments to thrive in the elastic and often unpredictable cloud environment.
    By leveraging GitOps, teams can ensure that these design principles are consistently
    applied across all environments, enabling them to respond quickly to changes and
    maintain robust, efficient systems. As cloud technologies continue to evolve,
    so too must the architectures and practices that support them, with GitOps providing
    a framework for that ongoing evolution.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让云原生部署在弹性且常常不可预测的云环境中茁壮成长，量身定制具备可扩展性、韧性和高效性的设计至关重要。通过利用GitOps，团队可以确保这些设计原则在所有环境中得到一致应用，从而快速响应变化并维持强大高效的系统。随着云技术的不断演进，支持这些技术的架构和实践也必须与时俱进，GitOps为这一持续演化提供了框架。
- en: In [*Chapter 11*](B22100_11.xhtml#_idTextAnchor209), we’ll explore the practical
    use of different GitOps approaches to deploy real-world applications. The next
    section delves into the significance of application design in GitOps, emphasizing
    the importance of the operational setup. A team’s focus shouldn’t just be on deploying
    applications, but also on choosing the right GitOps instance strategy for effective
    deployment. Before implementing GitOps with tools such as Argo CD, you must carefully
    consider the required number of clusters. We briefly introduced single instance
    approaches in the previous chapter while focusing on scalability. The next section
    will examine various approaches, their real-world application by organizations,
    and the advantages and disadvantages that are experienced in these scenarios,
    with a particular emphasis on the operational control of GitOps instances.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第11章*](B22100_11.xhtml#_idTextAnchor209) 中，我们将探讨不同 GitOps 方法在实际应用中部署真实世界应用程序的实际用法。下一部分深入探讨应用程序设计在
    GitOps 中的重要性，强调操作设置的重要性。团队的关注点不仅仅应该是部署应用程序，还应该是选择合适的 GitOps 实例策略以实现有效部署。在使用 Argo
    CD 等工具实施 GitOps 之前，必须仔细考虑所需的集群数量。我们在前一章简要介绍了单实例方法，同时重点讨论了可扩展性。下一部分将考察各种方法、组织在实际应用中的经验，以及在这些场景中经历的优缺点，特别强调
    GitOps 实例的操作控制。
- en: Centralized control – managing clusters with a solo Argo instance
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集中控制 - 使用单一 Argo 实例管理集群
- en: 'As organizations grow and evolve, the demand for scalable, secure, and efficient
    deployment strategies becomes increasingly critical. **Argo CD**, a key player
    in the GitOps field [*1*, *2*], stands out for its comprehensive capabilities
    in scaling across various aspects, such as performance, security, usability, and
    failover processes. In this section, we’ll delve into the nuances of different
    architectural models and the intricacies of operational management. However, before
    we dive into these topics, it’s essential to address a few preliminary points
    that significantly influence decision-making in this realm:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 随着组织的发展和演变，对可扩展、安全和高效部署策略的需求变得越来越重要。**Argo CD** 作为 GitOps 领域的关键角色之一 [*1*, *2*]，凭借其在多个方面的全面能力脱颖而出，例如性能、安全性、可用性和故障转移过程。在这一部分，我们将深入探讨不同架构模型的细微差别以及操作管理的复杂性。然而，在我们深入讨论这些话题之前，必须首先解决一些在这一领域显著影响决策的前提问题：
- en: '**Security considerations**: Security in scaling with Argo CD involves a robust
    combination of **role-based access control** (**RBAC**) and **single sign-on**
    (**SSO**) mechanisms. A key security feature is the client-side rendering of manifests,
    which reduces the threat landscape. However, the power of tools such as **Helm**,
    **Kustomize**, and **Jsonnet** in manifest generation introduces potential risks
    as they allow arbitrary code to be executed. This necessitates careful consideration,
    especially in larger instances, to prevent abuse in manifest generation.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全性考虑**：在使用 Argo CD 扩展时，安全性涉及 **基于角色的访问控制** (**RBAC**) 和 **单点登录** (**SSO**)
    机制的强大组合。一个关键的安全特性是清单的客户端渲染，这可以减少威胁面。然而，像 **Helm**、**Kustomize** 和 **Jsonnet**
    等工具在生成清单时的强大功能带来了潜在风险，因为它们允许执行任意代码。这就需要谨慎考虑，特别是在较大的实例中，以防止在清单生成中被滥用。'
- en: '**Usability at scale**: Argo CD’s reputation for ease of use and extensibility
    remains intact even as it scales. However, managing applications across numerous
    Kubernetes instances can lead to complexities, such as the need for unique application
    naming conventions and the challenge of managing a large number of applications
    within a single UI instance. The tool’s UI filters, while powerful, are not savable,
    leading teams to find creative solutions such as using bookmarks for saved filters.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性的可用性**：即使在 Argo CD 扩展时，它的易用性和可扩展性的声誉依然保持不变。然而，在多个 Kubernetes 实例中管理应用程序可能会导致复杂性，例如需要独特的应用程序命名约定，以及在单个
    UI 实例中管理大量应用程序的挑战。尽管该工具的 UI 过滤器功能强大，但无法保存，迫使团队寻找创造性的解决方案，比如使用书签保存过滤器。'
- en: '**Failover strategies**: The GitOps approach, embodied by Argo CD, facilitates
    rapid changes and recovery through simple git commits. However, this ease of setup
    and teardown also brings to light the potential for significant impact due to
    misconfigurations. For instance, a minor error in updating a config management
    plugin could lead to widespread application failures. This raises the question
    of the “blast radius” – the extent of impact that a single misconfiguration could
    have.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**故障转移策略**：GitOps 方法，由 Argo CD 体现，通过简单的 git 提交促进快速变更和恢复。然而，这种设置和拆卸的简便性也暴露了由于配置错误可能带来的重大影响。例如，更新配置管理插件时出现的一个小错误，可能导致大规模的应用程序故障。这引发了“爆炸半径”（blast
    radius）的疑问——一个配置错误可能带来的影响范围。'
- en: '**Performance scaling**: Argo CD is available in two versions: the standard
    and the **high-availability** (**HA**) version. The latter is specifically designed
    for scalability, deploying multiple replicas of key components such as the repo-server.
    Argo CD’s scalability is evident in its capacity to support, without major adjustments,
    up to 1,500 applications, 14,000 objects, 50 clusters, and 200 developers. This
    benchmark, though conservative, accounts for variations in applications, such
    as their object count, manifest complexity, and update frequency. These figures,
    sourced from a KubeCon talk by *Joseph Sandoval* and from *Adobe and Dan Garfield
    from Codefresh* [*3*], provide a foundational guideline for planning scaling needs.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能扩展**：Argo CD 有两个版本：标准版和 **高可用性** (**HA**) 版。后者专为可扩展性设计，部署多个关键组件的副本，例如 repo-server。Argo
    CD 的可扩展性体现在它支持最多 1,500 个应用程序、14,000 个对象、50 个集群和 200 个开发人员，而无需进行重大调整。这个基准虽然保守，但考虑到了应用程序的差异，例如它们的对象数量、清单复杂性和更新频率。这些数据来自
    *Joseph Sandoval* 在 KubeCon 上的演讲以及 *Adobe 和 Dan Garfield from Codefresh* [*3*]
    的分享，提供了规划扩展需求的基础指导。'
- en: In summary, while Argo CD is a robust tool that’s capable of handling the complexities
    of scaling in modern software environments, it requires careful consideration
    in terms of its performance capabilities, security risks, usability challenges,
    and failover strategies. The correct architectural choices, tailored to an organization’s
    specific needs, can leverage Argo CD’s strengths while mitigating potential risks
    associated with scaling.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，虽然 Argo CD 是一个强大的工具，能够处理现代软件环境中的复杂扩展问题，但它在性能能力、安全风险、可用性挑战和故障转移策略方面需要仔细考虑。根据组织的具体需求做出正确的架构选择，可以充分发挥
    Argo CD 的优势，同时降低与扩展相关的潜在风险。
- en: The approach – centralized control
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这种方法——集中控制
- en: This approach may be familiar to you. In the managed cluster approach, a single
    Argo CD instance is utilized by various teams for different purposes. The platform
    team employs this shared instance to deploy the necessary platform context for
    other teams.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法对你来说可能很熟悉。在托管集群方法中，多个团队使用单个 Argo CD 实例来完成不同的任务。平台团队使用这个共享实例来为其他团队部署必要的平台上下文。
- en: Important note
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The term platform context, tailored to individual company needs, includes essential
    tools such as Ingress Controllers and Cert-Managers for effective Kubernetes platform
    operations.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 平台上下文，根据各个公司的需求量身定制，包括有效的 Kubernetes 平台操作所需的关键工具，如 Ingress Controllers 和 Cert-Managers。
- en: 'Developers use the same Argo CD instance to deploy their applications. Similarly,
    **SRE teams** leverage it to deploy tools that help in identifying bottlenecks,
    analyzing performance issues, and more. The security team also makes use of this
    shared Argo CD instance to deploy its policies and enforce them through a policy
    engine. Additionally, they deploy security tools such as **kubeclarity** [*4*]
    or the **trivy operator** [*5*] to monitor vulnerabilities in images running in
    the cluster, track used packages, and check licenses. However, the significant
    change now is that instead of one Argo CD instance managing the platform and applications
    on a shared control and workload cluster, there is one Argo CD instance managing
    multiple clusters (*Figure 6**.1*):'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员使用相同的 Argo CD 实例来部署他们的应用程序。类似地，**SRE 团队**利用它部署帮助识别瓶颈、分析性能问题等的工具。安全团队也利用这个共享的
    Argo CD 实例来部署其策略，并通过策略引擎强制执行。此外，他们还部署像 **kubeclarity** [*4*] 或 **trivy operator**
    [*5*] 这样的安全工具，以监控集群中运行的镜像中的漏洞，跟踪使用的包并检查许可证。然而，现在的重大变化是，取而代之的是一个 Argo CD 实例管理多个集群（*图
    6**.1*）：
- en: '![Figure 6.1 – Difference between centralized control and one cockpit to rule
    them all](img/B22100_06_01.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.1 – 集中控制与单一驾驶舱控制所有集群的区别](img/B22100_06_01.jpg)'
- en: Figure 6.1 – Difference between centralized control and one cockpit to rule
    them all
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.1 – 集中控制与单一驾驶舱控制所有集群的区别
- en: 'The following table outlines the advantages and disadvantages:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 下表概述了优缺点：
- en: '| **Advantages** | **Disadvantages** |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| **优点** | **缺点** |'
- en: '| --- | --- |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| **Centralized view and control**: Unified view for deployment activities
    across all clusters | **Scaling and performance**: Scaling necessitates tuning
    individual components |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| **集中视图和控制**：跨所有集群的统一视图，用于部署活动 | **扩展性和性能**：扩展需要对单个组件进行调优 |'
- en: '| **Simplified management**: Managing a single Argo CD instance for multiple
    Kubernetes clusters eases administrative tasks | **Single point of failure**:
    Potential single point of failure for deployments |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| **简化管理**：管理单个 Argo CD 实例以管理多个 Kubernetes 集群简化了行政任务 | **单点故障**：部署可能存在单点故障的风险
    |'
- en: '| **API/CLI integration**: With only one server URL, API and CLI integration
    becomes more straightforward | **Security implications**: Centralization of admin
    credentials for all clusters |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| **API/CLI 集成**：只需一个服务器 URL，API 和 CLI 集成变得更加简单 | **安全影响**：所有集群的管理员凭据集中化 |'
- en: '|  | **Network traffic and cost implications**: The application controller,
    responsible for Kubernetes watches, can incur significant network costs, especially
    if clusters are located in different regions |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '|  | **网络流量和成本影响**：负责 Kubernetes 监控的应用控制器可能会产生显著的网络成本，特别是当集群位于不同区域时 |'
- en: Table 6.1 – Advantages and disadvantages of the centralized control approach
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 表格 6.1 – 集中控制方法的优缺点
- en: The single control plane approach involves one Argo CD instance managing all
    clusters, a popular approach for offering a unified application view and enhancing
    developer experience.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 单一控制平面方法涉及一个 Argo CD 实例管理所有集群，这是一种常见的做法，旨在提供统一的应用视图并提升开发者体验。
- en: For organizations that delegate access based on environment and are concerned
    about managing all applications under one instance, **RBAC** policies and **AppProjects**
    can establish necessary boundaries, defining deployment locations and access controls.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些根据环境分配访问权限并担心在一个实例下管理所有应用程序的组织，**RBAC** 策略和 **AppProjects** 可以建立必要的边界，定义部署位置和访问控制。
- en: This architecture also mandates establishing and maintaining a dedicated management
    cluster to host the Argo CD control plane, with direct access to all other clusters.
    The location of this management cluster could lead to security concerns, especially
    if it involves public exposure.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 该架构还要求建立和维护一个专门的管理集群，用于托管 Argo CD 控制平面，并直接访问所有其他集群。该管理集群的位置可能引发安全问题，特别是如果它涉及到公共暴露。
- en: The key question here is how to ensure tenant separation while maintaining collaboration.
    In the GitOps approach with Argo CD, built-in **custom resources** such as **projects**,
    **roles**, and **groups** are utilized to implement a multitenancy framework.
    However, determining who is responsible for implementing, maintaining, and extending
    this approach to optimize the shared Argo CD instance is crucial.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的关键问题是如何在保持协作的同时确保租户分离。在使用 Argo CD 的 GitOps 方法中，内置的 **自定义资源** 如 **项目**、**角色**
    和 **组** 被用来实现多租户框架。然而，确定谁负责实施、维护和扩展这种方法，以优化共享的 Argo CD 实例，是至关重要的。
- en: If the platform team is in charge, they must also manage the security, governance,
    and compliance aspects, especially if they have admin rights over the cluster.
    The feasibility of this depends on the team’s resources and expertise. For instance,
    a well-resourced platform team with core knowledge of the platform and specialized
    skills in areas such as security and **FinOps** can manage this effectively. However,
    smaller teams may find it challenging to maintain security.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果平台团队负责管理，他们还必须处理安全性、治理和合规性等方面，特别是如果他们拥有集群的管理员权限。这一可行性取决于团队的资源和专业知识。例如，一个资源充足、对平台有核心知识并在安全性和**FinOps**等领域具有专业技能的平台团队，能够有效地管理这一任务。然而，较小的团队可能会发现维护安全性是一个挑战。
- en: 'A solution some companies adopt involves collaboration between different teams:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 一些公司采纳的解决方案是不同团队之间的协作：
- en: Platform team ↔ security team
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平台团队 ↔ 安全团队
- en: Platform team ↔ developers
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平台团队 ↔ 开发者
- en: Platform team ↔ FinOps team
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平台团队 ↔ FinOps 团队
- en: Platform team ↔ SRE teams
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平台团队 ↔ SRE 团队
- en: The platform team is responsible for liaising with these teams and implementing
    commitments. They must also justify necessary changes enforced by the security
    team. This model works well for smaller companies with up to 30-50 mixed IT employees.
    Beyond 50 employees, the increased interaction between the platform team and developer/SRE
    teams can slow down development.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 平台团队负责与这些团队沟通并实施承诺。他们还必须为安全团队强制执行的必要更改提供合理解释。这个模型适用于员工不超过 30-50 名的较小公司。超过 50
    名员工后，平台团队与开发者/SRE 团队之间增加的互动可能会拖慢开发进度。
- en: When to use the centralized control approach
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 何时使用集中控制方法
- en: The centralized control approach is often the initial choice for teams operationalizing
    Argo CD across many clusters. It’s particularly effective for managing dev, staging,
    and production environments within a small team framework. The model supports
    high availability, scalable components, RBAC, and SSO, making it suitable for
    smaller-scale operations and straightforward network configurations.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 集中控制方法通常是团队在多个集群中实现 Argo CD 时的初步选择。它特别适用于在小型团队框架内管理开发、暂存和生产环境。该模型支持高可用性、可扩展组件、RBAC
    和 SSO，适合小规模操作和简洁的网络配置。
- en: When to avoid the centralized control approach
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 何时避免集中控制方法
- en: Larger organizations with multiple independent teams, extensive networks, or
    a need for high flexibility should be cautious. The model’s potential for a large
    “blast radius” during critical failures and its limited flexibility with large
    numbers of users can be detrimental. For networks hosting Kubernetes in virtual
    private clouds or behind firewalls, while possible, the addition of network tunnels
    can add complexity.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有多个独立团队、广泛网络或需要高灵活性的较大组织应谨慎采用此方法。该模型在关键故障时可能导致较大的“爆炸半径”，且对于大量用户的灵活性有限，可能会带来负面影响。对于托管在虚拟专用云或防火墙后面的
    Kubernetes 网络，尽管可以实现，但网络隧道的增加会增加复杂性。
- en: In summary, the single control plane approach of the centralized control approach,
    while offering numerous advantages in terms of simplicity and ease of management,
    carries risks related to security, scalability, and performance. Organizations
    must weigh these factors carefully while considering their specific needs, team
    size, and network architecture before adopting this model.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，集中控制方法的单一控制平面方法，尽管在简化和管理方便性方面提供了诸多优势，但在安全性、可扩展性和性能方面存在风险。组织在采纳这种模型之前，必须仔细权衡这些因素，同时考虑其具体需求、团队规模和网络架构。
- en: The next section deals with dedicated Argo CD instances per Kubernetes cluster
    and the associated challenges.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节讨论每个 Kubernetes 集群的独立 Argo CD 实例及其相关挑战。
- en: Dedicated instances – instance per cluster with Argo CD
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 独立实例 - 每个集群一个 Argo CD 实例
- en: An Argo CD instance is installed and co-located with the cluster it manages,
    meaning each cluster has its own dedicated Argo CD instance. This approach provides
    several advantages and challenges. This section aims to help you understand and
    implement standalone Argo CD instances in your Kubernetes environment. Each Argo
    CD instance will be installed and co-located with the cluster it manages, providing
    a dedicated instance per cluster, as shown in *Figure 6**.2*.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 Argo CD 实例被安装并与其管理的集群共存，这意味着每个集群都有自己的独立 Argo CD 实例。这种方法有多个优点和挑战。本节旨在帮助你理解并实现
    Kubernetes 环境中的独立 Argo CD 实例。每个 Argo CD 实例都将安装并与其管理的集群共存，如*图 6.2*所示。
- en: 'Each cluster and each team benefits from having a dedicated Argo CD instance.
    This means that every cluster can be configured, managed, and monitored independently,
    allowing for tailored management strategies that align with the specific needs
    of each cluster. But this approach also means that each Argo CD instance necessitates
    its own set of resources. Ensuring that each cluster has the necessary resources
    to support its Argo CD instance is crucial. This requirement calls for detailed
    planning and assessment to allocate resources efficiently and avoid potential
    shortages or imbalances:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 每个集群和每个团队都从拥有独立的 Argo CD 实例中受益。这意味着每个集群可以独立配置、管理和监控，从而允许根据每个集群的具体需求制定量身定制的管理策略。但这种方法也意味着每个
    Argo CD 实例都需要其自己的资源。确保每个集群拥有足够的资源来支持其 Argo CD 实例至关重要。这一要求需要详细的规划和评估，以高效分配资源并避免潜在的资源短缺或不平衡：
- en: '![Figure 6.2 – Example of dedicated Argo CD instances per cluster](img/B22100_06_02.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.2 – 每个集群独立的 Argo CD 实例示例](img/B22100_06_02.jpg)'
- en: Figure 6.2 – Example of dedicated Argo CD instances per cluster
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.2 – 每个集群的专用 Argo CD 实例示例
- en: 'Let’s take a look at some pros and cons to better understand this approach:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看一些优缺点，以更好地理解这种方法：
- en: '| **Advantages** | **Disadvantages** |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| **优点** | **缺点** |'
- en: '| --- | --- |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| **Reliability improvement**: Each cluster operates independently, enhancing
    overall reliability | **Management complexity**: Each instance requires individual
    management and updates, increasing the overall complexity |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| **可靠性提升**：每个集群独立运行，提高了整体的可靠性 | **管理复杂性**：每个实例都需要单独管理和更新，增加了整体复杂性 |'
- en: '| **Isolation of concerns**: This setup offers better security as each cluster
    is self-contained | **Access complexity**: Providing access to users across multiple
    instances can be challenging |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| **关注点隔离**：这种设置提供更好的安全性，因为每个集群是自包含的 | **访问复杂性**：为跨多个实例的用户提供访问权限可能会带来挑战 |'
- en: '| **No external networking access required**: Standalone Argo CD instances
    operate independently of external network access, which is crucial for edge deployments
    and even air-gapped environments where updates might occur via a USB drive | **Disaster
    recovery considerations**: Special planning is needed for disaster recovery due
    to the decentralized nature of the setup |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| **无需外部网络访问**：独立的 Argo CD 实例不依赖于外部网络访问，这对边缘部署甚至是通过 USB 驱动器进行更新的隔离环境至关重要 |
    **灾难恢复考虑**：由于设置的去中心化特性，灾难恢复需要特别的规划 |'
- en: '| **Suitability for Edge deployments**: Its standalone nature is ideal for
    clusters at the Edge, ensuring each operates completely independently |  |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| **适用于边缘部署**：其独立性质非常适合边缘的集群，确保每个集群完全独立地运行 |  |'
- en: Table 6.2 – Advantages and disadvantages of the dedicated instances approach
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 表 6.2 – 专用实例方法的优缺点
- en: At first glance, it appears that the advantages would outweigh the disadvantages.
    Two significant benefits have been proven in practice over the years.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 一开始看，这种方式似乎优点大于缺点。经过多年的实践，两个显著的好处已经得到证明。
- en: Heightened security is perhaps the most standout benefit. By employing individual
    Argo CD instances, security measures can be precisely tailored to meet the unique
    requirements and vulnerabilities of each cluster. This level of customization
    ensures that the security protocols are not only robust but also intricately designed
    to address specific threats, providing a fortified defense for each unique environment.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 提高的安全性可能是最突出的好处。通过使用独立的 Argo CD 实例，安全措施可以精确地根据每个集群的独特需求和脆弱性进行定制。这种定制化确保安全协议不仅坚固，而且精心设计，以应对特定威胁，为每个独特的环境提供坚固的防御。
- en: Another critical advantage is **isolated risk management**. In conventional
    setups, a single failure or breach could potentially escalate into a system-wide
    crisis. However, with dedicated Argo CD instances, such risks are contained within
    the affected cluster, significantly reducing the likelihood of widespread issues.
    This isolation of risk is vital in a landscape where a single vulnerability can
    lead to significant operational disruptions.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个关键优势是 **隔离风险管理**。在传统设置中，单一的故障或漏洞可能会导致系统范围的危机。然而，通过使用专用的 Argo CD 实例，这类风险被限制在受影响的集群内，显著减少了发生广泛问题的可能性。风险隔离在一个单一漏洞可能导致重大操作中断的环境中至关重要。
- en: However, from practical experience, there is a disadvantage that outweighs many
    advantages, especially as the number of clusters and Argo CD instances increases
    and maintenance effort escalates significantly.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，根据实际经验，有一个缺点超过了许多优点，特别是当集群和 Argo CD 实例数量增加，维护工作量大幅上升时。
- en: The maintenance overhead is another significant factor. Managing multiple Argo
    CD instances means that each one demands individual attention – from updates and
    configuration tweaks to regular monitoring. This increased workload can place
    a strain on IT teams, necessitating more robust and efficient management strategies
    to handle the additional administrative tasks.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 维护负担是另一个重要因素。管理多个 Argo CD 实例意味着每个实例都需要单独的关注——从更新和配置调整到常规监控。增加的工作量可能会给 IT 团队带来压力，要求采用更强大和高效的管理策略，以应对额外的管理任务。
- en: When to use dedicated Argo CD instances
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 何时使用专用的 Argo CD 实例
- en: '**Standalone Argo CD** instances are most beneficial in scenarios where the
    greatest reliability and accessibility are required, especially in situations
    where external networking is limited or non-existent. These instances are the
    default choice for deploying to clusters at the edge, given their complete operational
    independence. To scale these deployments, integration with infrastructure management
    tools such as Crossplane or Terraform is often employed to streamline setup and
    teardown. Another variation involves using a hub-and-spoke model to manage multiple
    standalone Argo CD instances across numerous clusters.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '**独立 Argo CD** 实例在需要最大可靠性和可访问性的场景中最为有利，尤其是在外部网络受限或不存在的情况下。这些实例是部署到边缘集群的默认选择，因为它们具有完全的操作独立性。为了扩展这些部署，通常会与基础设施管理工具，如
    Crossplane 或 Terraform 进行集成，以简化设置和拆卸。另一种变体是使用中心辐射模型来管理跨多个集群的多个独立 Argo CD 实例。'
- en: When to avoid dedicated Argo CD instances
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 何时避免使用专用的 Argo CD 实例
- en: However, standalone instances come with significant management overhead. In
    scenarios where a single team manages a simple staging-to-production workflow,
    it might not be efficient to separate Argo CD for each cluster. Testing and implementing
    changes across multiple instances also present challenges. Adopting a canary release
    approach to update a fleet of instances, while effective, adds another layer of
    complexity to the process.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，独立实例带来了显著的管理开销。在单个团队管理简单的从预发布到生产的工作流的场景下，为每个集群分开使用 Argo CD 可能效率不高。在多个实例之间进行测试和实施变更也会带来挑战。采用金丝雀发布策略来更新一批实例虽然有效，但也为过程增添了另一个复杂层次。
- en: In conclusion, the decision to use standalone Argo CD instances should be based
    on the specific needs and capabilities of the organization. While they offer improved
    reliability and security, the complexities in management, updates, and disaster
    recovery planning must be carefully considered. For certain environments, especially
    those at the Edge, the standalone approach is ideal, but for simpler setups or
    smaller teams, this approach might introduce unnecessary complexity.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，是否使用独立的 Argo CD 实例应该根据组织的具体需求和能力来决定。虽然它们提供了更高的可靠性和安全性，但在管理、更新和灾难恢复规划方面的复杂性必须谨慎考虑。对于某些环境，特别是边缘环境，独立的方式是理想选择，但对于较简单的设置或较小的团队来说，这种方式可能会引入不必要的复杂性。
- en: Deciding to use an Argo CD instance per cluster depends on your organization’s
    specific needs and capabilities. While they offer greater reliability and security,
    this approach requires careful consideration in terms of the complexities in management,
    updates, and disaster recovery. This strategy is highly effective for Edge deployments
    and environments with limited external networking but may be too complex for simpler
    setups or smaller teams.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 是否决定为每个集群使用一个 Argo CD 实例，取决于你们组织的具体需求和能力。虽然这种方法能提供更高的可靠性和安全性，但在管理、更新和灾难恢复的复杂性方面需要仔细考虑。这一策略对于边缘部署和外部网络受限的环境非常有效，但对于简单的设置或较小的团队来说，可能过于复杂。
- en: The next section deals with dedicated Flux CD instances per Kubernetes cluster
    and the associated challenges.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将讨论每个 Kubernetes 集群使用专用 Flux CD 实例及其相关挑战。
- en: Dedicated instances – instance per cluster with Flux CD
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 专用实例 – 每个集群使用 Flux CD 实例
- en: In the realm of GitOps tools, the distinction between Argo CD and **Flux CD**
    is crucial, particularly when considering their application in dedicated instances
    per cluster. While Argo CD is a well-known entity in the GitOps conversation,
    Flux CD holds a significant place, with a robust community and a substantial user
    base. This diversity of tools is essential to understanding the range of options
    available for Kubernetes cluster management.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GitOps 工具领域，Argo CD 和 **Flux CD** 之间的区别至关重要，特别是在考虑它们在每个集群使用专用实例时。虽然 Argo CD
    在 GitOps 领域是一个知名工具，但 Flux CD 也占据了重要地位，拥有强大的社区和大量的用户基础。理解这些工具的多样性对掌握 Kubernetes
    集群管理的多种选择至关重要。
- en: My journey in GitOps began with Flux CD, a tool that served effectively over
    a long period, especially in projects where scaling and managing multiple clusters
    wasn’t a requirement. This context-specific suitability of Flux CD stems from
    its distinct approach and capabilities compared to Argo CD.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我的 GitOps 之旅始于 Flux CD，这是一款在长期使用中表现出色的工具，特别是在不需要扩展和管理多个集群的项目中。Flux CD 的这一特定适用性源于其与
    Argo CD 不同的方式和功能。
- en: 'At first glance, the use of Flux CD might appear like that of Argo CD, almost
    as if it’s a simple icon swap, as visually represented in *Figure 6**.3*, where
    there’s a dedicated Flux CD instance per cluster. However, practical experience
    with Flux CD reveals a deeper layer of complexity. Unlike Argo CD, Flux CD requires
    a higher level of expertise in Kubernetes and Helm, demanding proficiency from
    teams in tools such as *Helm*, *Kustomize*, and *Kubernetes*:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，Flux CD 的使用可能看起来与 Argo CD 类似，几乎就像是一个简单的图标替换，如 *图 6.3* 所示，每个集群都有一个专用的 Flux
    CD 实例。然而，实际使用 Flux CD 的经验揭示了更深层次的复杂性。与 Argo CD 不同，Flux CD 需要在 Kubernetes 和 Helm
    上具有更高水平的专业知识，要求团队精通如 *Helm*、*Kustomize* 和 *Kubernetes* 等工具：
- en: '![Figure 6.3: Example of dedicated Flux CD instances per cluster](img/B22100_06_03.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.3: 每个集群的专用 Flux CD 实例示例](img/B22100_06_03.jpg)'
- en: 'Figure 6.3: Example of dedicated Flux CD instances per cluster'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '图 6.3: 每个集群的专用 Flux CD 实例示例'
- en: Flux CD’s approach to managing deployments revolves around Helm releases and
    the Helm controller. These elements are crucial for handling package deployments
    and life cycle management in Kubernetes. The Helm controller in Flux CD offers
    a declarative way to install, upgrade, and manage Helm charts in a Kubernetes
    environment, aligning with the GitOps principles. This requires teams to have
    a solid understanding of Helm charts and their management.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: Flux CD 管理部署的方法围绕 Helm 发布和 Helm 控制器。这些元素对于处理 Kubernetes 中的包部署和生命周期管理至关重要。Flux
    CD 中的 Helm 控制器提供了一种声明式的方法来安装、升级和管理 Kubernetes 环境中的 Helm 图表，符合 GitOps 原则。这要求团队对
    Helm 图表及其管理有扎实的理解。
- en: Additionally, Flux CD utilizes **Kustomizations** for applying Kubernetes manifests.
    This feature allows resources to be customized before they are applied to the
    cluster, providing a powerful tool for managing complex deployments. Understanding
    and effectively using Flux Kustomization requires a deep knowledge of how Kubernetes
    manifests work and how they can be customized for specific deployment needs.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Flux CD 使用 **Kustomizations** 来应用 Kubernetes 清单。此功能允许在将资源应用到集群之前进行定制，为管理复杂部署提供了强大的工具。理解并有效使用
    Flux Kustomization 需要对 Kubernetes 清单的工作原理以及如何根据特定部署需求进行定制有深刻的了解。
- en: In terms of organizational structure, adopting Flux CD effectively usually involves
    small, autonomous teams, typically consisting of 5-7 members. These teams handle
    projects as independent units within a larger organization, delivering specific
    products or services. This structure, while beneficial for focused and efficient
    delivery, poses challenges in onboarding due to the complexity of Flux CD and
    the advanced skills it demands.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在组织结构方面，有效采用 Flux CD 通常涉及小型、自治的团队，通常由 5-7 名成员组成。这些团队作为更大组织中的独立单元，处理项目并交付特定的产品或服务。这种结构虽然有利于聚焦和高效交付，但由于
    Flux CD 的复杂性和所需的高级技能，带来了入职培训的挑战。
- en: The key advantages of using Flux CD for individual cluster management per team
    lie in its flexibility and adaptability, making it an ideal choice for complex
    deployment scenarios. Flux CD’s support for advanced customization options is
    particularly beneficial for teams with comprehensive knowledge of Kubernetes and
    Helm.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Flux CD 进行团队每个集群管理的主要优势在于其灵活性和适应性，使其成为复杂部署场景的理想选择。Flux CD 支持高级定制选项，尤其对具有全面
    Kubernetes 和 Helm 知识的团队特别有利。
- en: However, this sophistication comes with a steep learning curve. The advanced
    functionalities and customization options of Flux CD add to the complexity of
    its setup and operation. As a result, integrating teams into a Flux CD workflow
    can be time-consuming, demanding a higher level of technical proficiency.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种复杂性伴随着陡峭的学习曲线。Flux CD 的高级功能和定制选项增加了其设置和操作的复杂性。因此，将团队融入 Flux CD 工作流可能是耗时的，并且需要更高水平的技术能力。
- en: This discussion isn’t centered around comparing Flux CD and Argo CD, but rather
    on the fact that the “instance per cluster” approach works effectively with both.
    The previously mentioned pros and cons apply to Flux CD as well since both tools
    operate on Kubernetes and employ native Kubernetes methods to facilitate deployments
    into clusters. However, it’s important to note that while Flux CD demands a higher
    skill level and prior experience with Helm charts or Kustomization, Argo CD can
    also be utilized directly with plain Kubernetes manifests.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这次讨论并不集中在比较 Flux CD 和 Argo CD，而是关注“每个集群实例化”方法在两者上的有效性。前面提到的优缺点同样适用于 Flux CD，因为这两个工具都在
    Kubernetes 上运行，并采用原生 Kubernetes 方法来促进部署到集群中。然而，需要注意的是，虽然 Flux CD 需要更高的技能水平和对 Helm
    图表或自定义化的先验经验，但 Argo CD 也可以直接与普通的 Kubernetes 清单一起使用。
- en: This distinction highlights that both Argo CD and Flux CD, despite their different
    complexities and requirements, can be effectively integrated into the instance
    per cluster model. While Argo CD offers a more user-friendly approach suitable
    for less complex scenarios, Flux CD’s adaptability and technical demands make
    it ideal for more intricate deployments, especially for teams well-versed in Kubernetes
    and Helm.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 此区分突显了尽管 Argo CD 和 Flux CD 在复杂性和要求上有所不同，但它们都可以有效地集成到每个集群实例化模型中。虽然 Argo CD 提供了更适合较简单场景的用户友好方法，但
    Flux CD 的适应性和技术要求使其非常适合更复杂的部署，特别是对于精通 Kubernetes 和 Helm 的团队而言。
- en: Understanding the operational nuances, strengths, and requirements of each tool
    is crucial for organizations looking to optimize their Kubernetes management strategies.
    The choice between Argo CD and Flux CD in the instance per cluster approach should
    be informed by the specific needs of the deployment scenario and the skill level
    of the managing team. By aligning the tool’s capabilities with the team’s expertise
    and the project’s requirements, organizations can achieve efficient and effective
    management of their Kubernetes clusters.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 理解每个工具的操作细节、优势和需求对于希望优化其 Kubernetes 管理策略的组织至关重要。在集群实例化方法中，选择 Argo CD 和 Flux
    CD 应基于部署场景的特定需求以及管理团队的技能水平。通过将工具的能力与团队的专业知识和项目需求对齐，组织可以实现其 Kubernetes 集群的高效管理和有效管理。
- en: The next section will be an exciting one as various concepts that have already
    been presented will be combined to help you find a middle way.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将会很有趣，因为将结合已经提出的各种概念来帮助您找到一种中间路径。
- en: The middle way – instance per logical group with Argo CD
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: The middle way – instance per logical group with Argo CD
- en: '**The middle way – instance per logical group with Argo CD** is an approach
    that centers around using a control cluster with Argo CD to manage a group of
    clusters. This approach presents a refined architecture that seeks to balance
    scalability, manageability, and efficiency in Kubernetes cluster management. It
    involves running one Argo CD instance per logical group of clusters, such as per
    team, region, or environment, depending on the organizational structure and requirements.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '**The middle way – instance per logical group with Argo CD** 是一种以使用带有 Argo
    CD 的控制集群来管理一组集群为中心的方法。这种方法提出了一个精炼的架构，旨在在 Kubernetes 集群管理中平衡可扩展性、可管理性和效率。它涉及每个逻辑集群组（如团队、地区或环境）运行一个
    Argo CD 实例，具体取决于组织结构和需求。'
- en: 'In this model, Argo CD is deployed on a control cluster that belongs to a specific
    group. From this central point, Argo CD manages all clusters within that group.
    This arrangement aims to streamline the management process by consolidating control,
    yet it still maintains a level of separation between different groups of clusters
    (*Figure 6**.4*):'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种模型中，Argo CD 部署在属于特定组的控制集群上。从这个中心点出发，Argo CD 管理该组内的所有集群。这种安排旨在通过整合控制来简化管理流程，但仍保持了不同集群组之间的分离（*图
    6**.4*）：
- en: '![Figure 6.4 – Example of an instance per logical group in Argo CD-based projects](img/B22100_06_04.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.4 – 基于 Argo CD 项目中逻辑组实例的示例](img/B22100_06_04.jpg)'
- en: Figure 6.4 – Example of an instance per logical group in Argo CD-based projects
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.4 – 基于 Argo CD 项目中逻辑组实例的示例
- en: This architecture balances the demands of managing multiple clusters by effectively
    partitioning them into logical groups. It offers a solution that alleviates the
    challenges of maintaining too many individual instances while providing a more
    manageable and scalable approach. This grouping not only improves operational
    efficiency but also enhances the security and reliability of the system. The developer
    experience is also improved compared to an instance-per-cluster architecture as
    following a clear and understood convention for grouping reduces the cognitive
    load and simplifies integration processes.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这种架构通过将多个集群有效地划分为逻辑组来平衡管理的需求。它提供了一种解决方案，缓解了维护过多独立实例的挑战，同时提供了一种更易于管理和可扩展的方法。此分组不仅提高了操作效率，还增强了系统的安全性和可靠性。与每个集群一个实例的架构相比，开发人员的体验得到了改善，因为按照明确和易懂的分组约定减少了认知负担，简化了集成过程。
- en: 'Let’s look at the possible and most sensible groupings. For example, groups
    can be logically sorted by departments:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下可能的和最合理的分组方式。例如，组可以根据部门进行逻辑排序：
- en: '**Department-based**: Different departments such as development, operations,
    or QA each have their own Argo CD instance for managing their specific clusters.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于部门**：不同的部门，如开发、运营或 QA，每个部门都有自己的 Argo CD 实例来管理他们的特定集群。'
- en: '**Development**: An instance for developers working on new product features'
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发**：为开发人员提供一个实例，用于开发新产品特性'
- en: '**Operations**: A separate instance for the operations team to manage deployment
    and infrastructure'
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运营**：为运营团队提供一个独立的实例来管理部署和基础设施'
- en: '**QA**: An instance for the QA team to test and validate products'
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**QA**：为 QA 团队提供一个实例，用于测试和验证产品'
- en: At this point, developers have a development environment with different workload
    clusters that they can use autonomously. The operations department also has cluster
    groups and can operate infrastructure components that are important for the organization,
    such as LDAP servers, DNS servers, ACME servers, databases, and more. The QA department
    can test delivered software features on different clusters, in different versions,
    and conduct load tests with their tools.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，开发人员已经拥有一个具有不同工作负载集群的开发环境，可以自主使用。运营部门也有集群组，可以操作对组织至关重要的基础设施组件，例如 LDAP 服务器、DNS
    服务器、ACME 服务器、数据库等。QA 部门可以在不同的集群上测试交付的软件特性，进行不同版本的测试，并使用他们的工具进行负载测试。
- en: 'Now, let’s look at projects and geographical location:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一下项目和地理位置：
- en: '**Project-based**: For companies handling multiple projects, each project can
    be assigned a separate instance, facilitating focused management and autonomy:'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于项目**：对于处理多个项目的公司，可以为每个项目分配一个独立的实例，从而促进集中管理和自主性：'
- en: '**E-commerce platform**: An instance dedicated to the e-commerce project team'
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电子商务平台**：为电子商务项目团队提供一个专用实例'
- en: '**Mobile application development**: A separate instance for teams working on
    mobile apps'
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**移动应用开发**：为从事移动应用的团队提供一个独立的实例'
- en: '**Internal tools**: For teams developing and maintaining internal company tools'
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内部工具**：用于开发和维护公司内部工具的团队'
- en: In this scenario, each project is assigned its own Argo CD instance. For instance,
    the team working on the e-commerce platform can fully control their deployment
    pipelines and feature rollouts, tailoring their workflows to the specific needs
    of the project. Similarly, teams dedicated to mobile application development can
    manage their deployments with a focus on mobile-specific requirements and testing
    environments. For internal tools, a dedicated instance allows the team to rapidly
    iterate and deploy updates, ensuring that internal operations run smoothly and
    efficiently.
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种情况下，每个项目都会分配到一个独立的 Argo CD 实例。例如，负责电子商务平台的团队可以完全控制他们的部署管道和功能发布，将工作流程定制为项目的具体需求。同样，专注于移动应用开发的团队可以集中管理他们的部署，重点关注移动特定的需求和测试环境。对于内部工具，专用的实例允许团队快速迭代并部署更新，确保内部操作的顺利和高效运行。
- en: '**Geographical location**: Companies with global operations can group clusters
    based on geographical regions for better localization and compliance management:'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**地理位置**：拥有全球运营的公司可以根据地理区域对集群进行分组，以便更好的本地化和合规性管理：'
- en: '**North American operations**: An instance for clusters in North American regions'
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**北美运营**：用于北美地区集群的实例'
- en: '**Europe**: A dedicated instance for managing clusters in European countries'
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**欧洲**：为管理欧洲国家集群提供一个专用实例'
- en: '**Asia-Pacific** (**APAC**): An instance focused on the APAC region’s specific
    needs and compliance'
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**亚太地区**（**APAC**）：一个专注于亚太地区特定需求和合规性的实例'
- en: For example, a dedicated Argo CD instance for North American operations allows
    teams to manage clusters as per local compliance and operational standards. In
    Europe, teams can address specific regional requirements, such as **GDPR compliance**,
    through a Europe-focused instance. Similarly, for the APAC region, an instance
    can cater to the unique operational and regulatory landscape, ensuring that deployments
    are optimized for local preferences and legal requirements. This geographical
    grouping not only enhances efficiency but also ensures adherence to regional regulations
    and cultural nuances, making it an essential strategy for global operations.
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，专门为北美运营设立的 Argo CD 实例使团队能够根据当地的合规性和运营标准管理集群。在欧洲，团队可以通过专注于欧洲的实例解决特定地区的要求，如**GDPR
    合规性**。同样，对于亚太地区，可以通过实例满足独特的运营和监管环境，确保部署优化以符合当地的偏好和法律要求。这样的地域性分组不仅提高了效率，还确保了遵守地区性法规和文化细微差别，成为全球运营中的重要策略。
- en: These groupings are valid, and I have personally seen this setup in various
    companies. However, it’s more related to the organizational structure and how
    projects are managed. I have not yet seen the Argo CD setup in productive use
    in practice; I only know it from concepts or proof of concepts.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这些分组是有效的，我个人在多个公司中见过这种设置。然而，这与组织结构和项目管理方式更为相关。我还没有看到 Argo CD 在生产环境中的实际使用；我只了解它的概念或概念验证。
- en: Although the centralized controller reduces certain disadvantages, such as the
    potential for a single point of failure in deployments, the centralization of
    admin credentials for all clusters, and the need for tuning individual components
    for scaling, these issues are shifted to the group level.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管集中式控制器减少了某些缺点，例如部署中的潜在单点故障、所有集群的管理员凭证集中化、以及需要为扩展调优单个组件等问题，但这些问题被转移到群组层面。
- en: 'Through this setup, the following advantages and disadvantages arise:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种设置，出现以下优缺点：
- en: '| **Advantages** | **Disadvantages** |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| **优点** | **缺点** |'
- en: '| --- | --- |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| **Load distribution**: By grouping clusters, this approach distributes the
    workload more evenly across groups, easing the burden on application controllers,
    repo servers, and API servers. | **Multiple instance maintenance**: The approach
    requires maintaining multiple Argo CD instances, one for each group, which can
    add to the administrative workload. |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| **负载分配**：通过将集群分组，这种方法使得工作负载在各组间分配更加均衡，减轻了应用控制器、仓库服务器和 API 服务器的负担。 | **多个实例维护**：这种方法需要维护多个
    Argo CD 实例，每个群组一个，这可能会增加管理工作量。 |'
- en: '| **Group-specific credentials**: Credentials are scoped per group, which simplifies
    access management while maintaining security. | **Reducing single points of failure**:
    While having a control cluster as the central management point per group reduces
    single points of failure, it also introduces a new vulnerability. If the control
    cluster encounters issues, it could potentially disrupt the management of all
    grouped deployments. |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| **群组特定凭证**：凭证是按群组范围划定的，这简化了访问管理，同时保持了安全性。 | **减少单点故障**：虽然每个群组拥有一个控制集群作为中央管理点能减少单点故障，但它也引入了一种新的脆弱性。如果控制集群出现问题，可能会中断所有群组部署的管理。
    |'
- en: '| **Unified view for deployment activities**: Each group has a single view
    for all deployment activities, streamlining the monitoring and management process.
    | **Centralized administration credentials**: Admin credentials for all clusters
    in a group are stored in the control cluster, streamlining access management.
    This centralized approach can enhance security measures as it reduces the number
    of access points that need to be secured. |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| **统一部署活动视图**：每个群组都有一个统一的视图来展示所有部署活动，从而简化了监控和管理流程。 | **集中的管理员凭证**：所有群组集群的管理员凭证都存储在控制集群中，简化了访问管理。这种集中方式可以增强安全措施，因为它减少了需要保护的访问点数量。
    |'
- en: '| **Reduced configuration duplication**: As clusters in a group are likely
    to have similar RBAC, *AppProject*, and other configurations, this model significantly
    reduces the need for duplicate configurations. | **Management cluster requirements**:
    The requirement for a separate management cluster to host Argo CD instances adds
    a layer of infrastructure that needs to be set up and maintained, potentially
    complicating the overall system architecture. |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| **减少配置重复**：由于一个组中的集群可能具有相似的 RBAC、*AppProject* 和其他配置，这种模型大大减少了重复配置的需求。 | **管理集群要求**：需要一个单独的管理集群来托管
    Argo CD 实例，这为基础设施增加了一层，需要设置和维护，可能使整体系统架构更加复杂。 |'
- en: Table 6.3 – Advantages and disadvantages of the middle-way approach
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 表 6.3 – 中庸方法的优缺点
- en: When to use the middle-way approach
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 何时使用中庸方法
- en: The middle-way approach is particularly suited to organizations that manage
    a diverse range of clusters per logical group. It excels in scenarios where different
    departments, such as development, operations, or QA, require independent control
    over their respective clusters. This method is ideal for businesses handling multiple
    projects, each with unique requirements, allowing for focused and autonomous management.
    Additionally, for multinational companies, this approach facilitates effective
    management of clusters based on geographical locations, ensuring compliance with
    regional standards and operational efficiency.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 中庸方法特别适用于管理每个逻辑组中不同类型集群的组织。它在以下场景中表现尤为出色：不同部门（如开发、运维或质量保证）需要独立控制各自的集群。此方法非常适合处理多个项目的企业，每个项目都有独特的需求，从而实现专注和自主管理。此外，对于跨国公司来说，这种方法有助于根据地理位置有效管理集群，确保符合地区标准并提高运营效率。
- en: When not to use the middle-way approach
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 何时不使用中庸方法
- en: Despite its benefits, this approach may not suit every scenario. For smaller
    organizations with limited resources, the task of maintaining multiple Argo CD
    instances can be daunting and resource-intensive. The need to tune each instance
    at scale, coupled with the necessity of a separate management cluster, adds layers
    of complexity that smaller or less complex environments might not warrant. In
    cases where centralized control is more practical and efficient, particularly
    in smaller setups, this approach might introduce unnecessary complications.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管中庸方法有其优点，但并不适用于每个场景。对于资源有限的小型组织来说，维护多个 Argo CD 实例可能是一个艰巨且资源密集的任务。需要在规模上调整每个实例，再加上需要一个单独的管理集群，这增加了复杂性，而小型或较简单的环境可能并不需要这种复杂性。在集中式控制更为实用和高效，尤其是对于小型设置时，这种方法可能会带来不必要的复杂性。
- en: This approach presents a compromise between individual and centralized management
    models, distributing workloads across groups and reducing configuration duplication.
    It enhances the security and reliability of the system by limiting the impact
    of potential failures on specific groups. However, it requires careful planning
    and consideration of the organizational structure, resource availability, and
    the scale of operations to ensure it aligns with the specific needs of the organization.
    This approach, while not universally applicable, offers a flexible and efficient
    solution for medium to large-scale Kubernetes environments.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法在个人管理和集中管理模型之间提供了一个折衷方案，将工作负载分配到各个组，并减少了配置的重复性。它通过限制潜在故障对特定组的影响，增强了系统的安全性和可靠性。然而，它需要仔细规划和考虑组织结构、资源可用性以及运营规模，以确保其与组织的具体需求相匹配。尽管这种方法并不适用于所有情况，但它为中型到大型
    Kubernetes 环境提供了灵活高效的解决方案。
- en: The next section deals with how to use a central Argo CD instance to provide
    the clusters with the necessary tools and how to ensure developer autonomy with
    dedicated Argo CD instances on the clusters.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将介绍如何使用中央 Argo CD 实例为集群提供所需的工具，并确保开发人员通过集群上的专用 Argo CD 实例保持自主性。
- en: The cockpit and fleet approach with Argo CD
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与 Argo CD 配合使用的驾驶舱和舰队方法
- en: 'In the dynamic world of Kubernetes and GitOps, The **cockpit and fleet** approach
    offers an innovative solution that combines centralized management with individual
    autonomy. This approach involves a platform team utilizing a central Argo CD instance
    for overarching control while also providing individual Argo CD instances for
    each developer’s cluster (*Figure 6**.5*). This approach is specifically designed
    for organizations that aim to streamline their Kubernetes operations and concurrently
    empower individual teams or departments with autonomy in their cluster management.
    Since July 2023, Flux has had an implementation that allows a similar approach
    and is called Hub and Spoke [*6*]:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 和 GitOps 的动态世界中，**驾驶舱与舰队**方法提供了一种创新的解决方案，结合了集中管理和个体自主性。这种方法涉及平台团队使用一个中央
    Argo CD 实例进行总体控制，同时为每个开发者的集群提供各自的 Argo CD 实例（*图 6.5*）。这种方法专为那些旨在简化 Kubernetes
    操作的组织设计，同时也赋予各个团队或部门在集群管理中的自主权。自 2023 年 7 月以来，Flux 已经实现了一个类似的方法，称为 Hub 和 Spoke
    [*6*]：
- en: '![Figure 6.5 – Example of the cockpit and fleet approach](img/B22100_06_05.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.5 – 驾驶舱与舰队方法的示例](img/B22100_06_05.jpg)'
- en: Figure 6.5 – Example of the cockpit and fleet approach
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.5 – 驾驶舱与舰队方法的示例
- en: 'The central principle of this approach is anchored in two pivotal components
    – the cockpit and the fleet:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法的核心原则依托于两个关键组件——驾驶舱和舰队：
- en: '**The cockpit**: Managed by the platform team, the cockpit involves operating
    a centralized Argo CD instance. This central instance functions as a command-and-control
    center that’s responsible for deploying and managing essential infrastructure
    components across all the Kubernetes clusters within the organization. The primary
    role of the cockpit is to ensure that there’s a uniform application of critical
    infrastructure elements across all clusters. This includes enforcing compliance
    with organizational standards and policies, thereby establishing a consistent
    and secure infrastructure framework.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**驾驶舱**：由平台团队管理，驾驶舱涉及操作一个集中式的 Argo CD 实例。这个中央实例作为指挥与控制中心，负责在组织的所有 Kubernetes
    集群中部署和管理关键基础设施组件。驾驶舱的主要角色是确保所有集群之间的关键基础设施元素应用一致。这包括强制执行组织的标准和政策，从而建立一个一致且安全的基础设施框架。'
- en: '**The fleet**: In contrast to the centralized nature of the cockpit, the fleet
    provides individual developers or specific teams with dedicated Argo CD instances
    for each of their clusters. This decentralization empowers teams to manage their
    applications’ life cycle independently, from configuration to deployment and updates.
    Such autonomy is vital in fostering innovation and agility, particularly in fast-paced
    development environments where rapid deployment and iterative updates are the
    norm.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**舰队**：与驾驶舱的集中式特性不同，舰队为每个开发者或特定团队提供各自的 Argo CD 实例，专门管理其集群。通过这种去中心化，团队能够独立管理应用程序的生命周期，从配置到部署和更新。这样的自主性在促进创新和敏捷性方面至关重要，尤其是在快速发展的开发环境中，快速部署和迭代更新已成为常态。'
- en: Delving deeper into the approach
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 深入探讨该方法
- en: 'The dual-layered nature of the cockpit and fleet approach is crafted to address
    the diverse needs of large organizations with multiple clusters:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 驾驶舱与舰队方法的双层结构旨在解决大型组织中多个集群的多样化需求：
- en: The centralized cockpit offers a streamlined, holistic view of the organization’s
    Kubernetes infrastructure. This centralization is crucial for large-scale operations
    where consistency in infrastructure management and policy enforcement is necessary.
    By having a unified control point, the platform team can efficiently manage shared
    resources, apply global security policies, and ensure compliance across all clusters.
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集中的驾驶舱提供了一个简洁、全面的视图，展示组织的 Kubernetes 基础设施。这种集中化对于大规模操作至关重要，因为在基础设施管理和政策执行中一致性是必要的。通过拥有统一的控制点，平台团队可以高效地管理共享资源、应用全球安全政策，并确保各集群之间的合规性。
- en: The decentralized fleet, on the other hand, caters to the specific needs of
    individual development teams or departments. Each team has the flexibility to
    tailor its cluster according to its project requirements. This setup is particularly
    beneficial in environments where different teams work on varied projects, each
    with its unique set of requirements and deployment strategies.
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 而去中心化的舰队则满足了各个开发团队或部门的具体需求。每个团队都可以根据项目需求灵活地调整其集群配置。这种设置在不同团队从事各种项目，每个项目有自己独特的要求和部署策略的环境中尤其有益。
- en: Operational dynamics
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作动态
- en: 'Implementing the cockpit and fleet approach necessitates a well-orchestrated
    operational model that balances centralized governance with decentralized autonomy:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 实施控制台与舰队方法需要一个精心协调的操作模型，平衡集中治理与去中心化自主性：
- en: On one side, the platform team must ensure that the centralized cockpit is effectively
    managing the shared components and maintaining the required standards across all
    clusters. This involves regular updates, security patching, and monitoring of
    the centralized infrastructure.
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一方面，平台团队必须确保集中式控制台有效地管理共享组件，并维护所有集群中所需的标准。这涉及到定期更新、安全补丁和对集中式基础设施的监控。
- en: On the other side, individual teams managing their clusters via the fleet model
    need to align their development and deployment strategies with the broader organizational
    goals. They must also ensure their practices comply with the security and policy
    guidelines set by the platform team.
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一方面，通过舰队模型管理集群的各个团队需要将他们的开发和部署策略与更广泛的组织目标对齐。他们还必须确保自己的实践符合平台团队设定的安全性和政策指南。
- en: 'The following table compares some of the advantages and disadvantages of this
    approach:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格比较了这种方法的一些优缺点：
- en: '| **Advantages** | **Disadvantages** |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| **优点** | **缺点** |'
- en: '| --- | --- |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| **Centralized view and control**: Offers a unified view for *platform context*
    deployment activities across all clusters. | **Security implications**: Centralizing
    admin credentials for all fleet clusters could pose security risks. |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| **集中式视图和控制**：为所有集群提供*平台上下文*部署活动的统一视图。 | **安全性隐患**：集中管理所有舰队集群的管理员凭证可能带来安全风险。
    |'
- en: '| **Simplified management**: Managing a single Argo CD instance for multiple
    Kubernetes clusters simplifies administrative tasks, easing the process of provisioning
    and maintaining the *platform context* for the fleet clusters. | **Resource consumption**:
    Additional resources are consumed, both for the management cluster and the fleet
    clusters, including hardware and engineering resources. |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '| **简化的管理**：为多个 Kubernetes 集群管理单个 Argo CD 实例简化了管理任务，简化了为舰队集群提供和维护*平台上下文*的过程。
    | **资源消耗**：管理集群和舰队集群都需要消耗额外资源，包括硬件和工程资源。 |'
- en: '| **Reliability improvement**: Each fleet cluster operates independently, which
    enhances overall reliability and allows for strict separation between teams. |
    **Single point of failure**: There’s a potential risk of a single point of failure
    for fleet cluster deployments to provide the platform context. |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| **可靠性提升**：每个舰队集群独立运行，这增强了整体的可靠性，并且允许团队之间严格分离。 | **单点故障**：对于舰队集群部署提供平台上下文来说，存在单点故障的潜在风险。
    |'
- en: '| **Maintenance and expansion of fleet clusters**: For platform teams, it’s
    easier to roll out new tools or policies simultaneously across all clusters. This
    also impacts the process of maintaining or upgrading tools within the platform
    context. | **Scaling and performance**: Scaling requires tuning individual components
    within the platform context. |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| **舰队集群的维护和扩展**：对于平台团队来说，更容易同时在所有集群中推出新的工具或政策。这也影响着在平台上下文中维护或升级工具的过程。 | **扩展性和性能**：扩展要求对平台上下文中的各个组件进行调优。
    |'
- en: Table 6.4 – Advantages and disadvantages of the cockpit and fleet approach
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 表 6.4 – 控制台与舰队方法的优缺点
- en: When to use the cockpit and fleet approach
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 何时使用控制台与舰队方法
- en: The cockpit and fleet approach is particularly well-suited for large-scale organizations
    managing a diverse range of projects across numerous clusters. This strategy is
    ideal for environments that require a combination of centralized control for shared
    resources and decentralized autonomy for individual teams or departments. It’s
    especially beneficial in complex multi-cluster environments where a streamlined
    operation is needed to manage common infrastructure elements and policies efficiently.
    Moreover, organizations with different teams or departments, each having unique
    operational requirements, can leverage this approach to provide each unit with
    the necessary tools and autonomy for their specific projects. Global companies
    with operations across multiple regions also find this approach advantageous as
    it allows for centralized management of global standards while enabling local
    teams to manage clusters as per regional requirements.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 座舱和舰队方法特别适用于管理跨多个集群的多种项目的大型组织。这种策略非常适合那些既需要集中控制共享资源，又需要分散自治权供个别团队或部门使用的环境。它在复杂的多集群环境中尤其有益，在这些环境中需要简化的操作来高效地管理公共基础设施元素和策略。此外，拥有多个团队或部门的组织，每个团队或部门都有独特的操作需求，可以利用这种方法为每个单位提供所需的工具和自主权，以适应其特定项目。跨多个地区运营的全球公司也发现这种方法很有优势，因为它允许集中管理全球标准，同时使地方团队能够根据地区需求管理集群。
- en: When not to use the cockpit and fleet approach
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 何时不使用座舱和舰队方法
- en: Conversely, the cockpit and fleet approach may not be the most suitable for
    small to medium-sized businesses with a limited number of clusters and less complexity.
    In such cases, the overhead of creating a setup of maintaining both centralized
    and decentralized systems might outweigh the benefits. Organizations with uniform
    cluster needs across the board might find a simpler, more centralized approach
    more efficient and practical. Additionally, companies with limited resources in
    terms of personnel or infrastructure might face challenges in maintaining the
    dual management system effectively. Environments with simplified workflows, where
    development and deployment processes are straightforward and uniform across the
    organization, may not derive significant value from the added complexity of a
    hybrid approach.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，座舱和舰队方法可能不适合小型到中型企业，这些企业的集群数量有限且复杂性较低。在这种情况下，创建并维护集中式和分散式系统的设置所带来的开销可能会超过其带来的好处。那些集群需求一致的组织可能会发现更简化、更加集中的方法更高效且实用。此外，资源有限的公司（无论是人力还是基础设施方面）可能会在有效维护双重管理系统方面面临挑战。对于工作流程简化的环境来说，其中开发和部署过程简单且在整个组织中一致，可能无法从混合方法带来的额外复杂性中获得显著的价值。
- en: The cockpit and fleet approach stands as a testament to the evolving landscape
    of Kubernetes management, offering a solution that is both comprehensive and flexible.
    It adeptly addresses the challenges of managing a vast Kubernetes infrastructure
    in large organizations, balancing the need for centralized control with the agility
    of decentralized management. The approach fosters a collaborative and efficient
    environment where the platform team and individual development teams work in harmony,
    each with their distinct yet interconnected roles. As organizations continue to
    grow and evolve in their Kubernetes journey, approaches such as cockpit and fleet
    become increasingly vital in navigating the complexities of cluster management
    at scale.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 座舱和舰队方法见证了 Kubernetes 管理不断发展的趋势，提供了一个既全面又灵活的解决方案。它巧妙地解决了大规模组织管理庞大 Kubernetes
    基础设施的挑战，在集中控制和分散管理的灵活性之间找到了平衡。这种方法促进了一个协作高效的环境，在这个环境中，平台团队和各个开发团队和谐合作，各自有着独特但相互关联的角色。随着组织在
    Kubernetes 之旅中的不断成长和发展，像座舱和舰队这样的方案变得越来越重要，帮助在大规模集群管理的复杂性中找到方向。
- en: Choosing the right approach for your GitOps needs
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为您的 GitOps 需求选择合适的方法
- en: 'Deciding on the right approach for GitOps can be challenging as there is no
    one-size-fits-all solution. In my experience across various industries and companies,
    two primary approaches have emerged: the cockpit and fleet approach in larger
    organizations, which scales with project needs, and the dedicated instance per
    cluster approach for smaller, independent teams. However, each approach has its
    drawbacks, particularly concerning security, especially in public cloud operations.
    To address these challenges and mitigate disadvantages, take a look at [*Chapter
    13*](B22100_13.xhtml#_idTextAnchor257), *Security with GitOps*. Companies such
    as **Akuity** have begun offering SaaS and self-hosted solutions, which build
    upon GitOps with Argo CD but invert the principle.'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 决定采用哪种GitOps方法可能具有挑战性，因为没有一种方法适用于所有情况。在我在各行业和公司中的经验中，主要出现了两种方法：大型组织中的驾驶舱和集群方法，随着项目需求进行扩展；以及小型独立团队的每个集群实例方法。然而，每种方法都有其缺点，尤其是在安全性方面，特别是在公共云操作中。为了应对这些挑战并缓解不足之处，请参阅[*第13章*](B22100_13.xhtml#_idTextAnchor257)，*使用GitOps的安全性*。像**Akuity**这样的公司已经开始提供SaaS和自托管解决方案，这些方案建立在Argo
    CD的GitOps基础上，但颠覆了这一原则。
- en: 'This is illustrated in the following figure:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 这一点在下图中得到了说明：
- en: '![Figure 6.6 – Example of Akuity Platform’s Argo CD SaaS and self-hosted offerings
    [6]](img/B22100_06_06.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![图6.6 – Akuity平台的Argo CD SaaS和自托管服务示例 [6]](img/B22100_06_06.jpg)'
- en: Figure 6.6 – Example of Akuity Platform’s Argo CD SaaS and self-hosted offerings
    *[6]*
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.6 – Akuity平台的Argo CD SaaS和自托管服务示例 *[6]*
- en: The Akuity Platform ingeniously integrates the cockpit and fleet approach of
    Argo CD management, where the Argo CD instances on fleet clusters register themselves
    with the central Argo CD “cockpit” in the Akuity Platform. This model blends the
    benefits of both instance-per-cluster and single-instance architectures, effectively
    addressing most of their limitations.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: Akuity平台巧妙地整合了Argo CD管理的驾驶舱和集群方法，其中在集群上的Argo CD实例会向Akuity平台中的中央Argo CD“驾驶舱”注册。该模型融合了每个集群实例和单一实例架构的优点，有效解决了它们大多数的局限性。
- en: In this hybrid agent architecture, an agent runs inside each fleet cluster and
    establishes outbound communication back to the control plane in the cockpit. This
    setup significantly reduces the network traffic between the control plane and
    the cluster, addressing common security concerns as it does not require direct
    cluster access or admin credentials. This architecture is particularly advantageous
    for connecting external Argo CD instances to clusters in restricted environments,
    such as a local development cluster on a laptop.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个混合代理架构中，代理运行在每个集群内，并建立与控制平面的出站通信，回到驾驶舱中。这种设置显著减少了控制平面和集群之间的网络流量，并且因为不需要直接访问集群或管理员凭证，从而解决了常见的安全问题。这种架构尤其适用于将外部Argo
    CD实例连接到受限环境中的集群，比如本地开发集群。
- en: The Akuity Platform simplifies the operational aspects of Argo CD. Unlike traditional
    models, which require a dedicated management cluster to host Argo CD, the Akuity
    Platform hosts the Argo CD instance and the custom resources. This innovation
    not only streamlines the management process but also introduces automatic snapshotting
    and disaster recovery features, effectively eliminating concerns around single
    points of failure.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: Akuity平台简化了Argo CD的操作方面。与传统模型不同，传统模型需要一个专用的管理集群来托管Argo CD，而Akuity平台则托管Argo CD实例和自定义资源。这一创新不仅简化了管理流程，还引入了自动快照和灾难恢复功能，有效消除了关于单点故障的担忧。
- en: From a visibility standpoint, the Akuity Platform offers a centralized view
    of all organizational Argo CD instances, akin to the single-instance architecture.
    The platform enhances open source capabilities by providing a dashboard for each
    instance, showcasing application health metrics and synchronization histories.
    It facilitates the management of settings, allowing configurations, typically
    complex YAML files, to be crafted easily using user-friendly wizards. Additionally,
    the inclusion of an audit log feature for all activity across the Argo CD instances
    greatly simplifies compliance reporting and monitoring.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 从可见性的角度来看，Akuity平台提供了所有组织中Argo CD实例的集中视图，类似于单一实例架构。该平台通过为每个实例提供仪表盘，展示应用程序健康指标和同步历史，增强了开源功能。它还简化了设置管理，允许通过用户友好的向导轻松编写通常复杂的YAML配置文件。此外，所有Argo
    CD实例的活动审核日志功能的加入，极大地简化了合规报告和监控。
- en: If you look at the disadvantages of the cockpit and fleet approach, you can
    see why Akuity provides an innovative solution.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看驾驶舱和舰队方法的缺点，你就能明白为什么Akuity提供了创新的解决方案。
- en: 'The following table shows how the Akuity Platform has minimized or eliminated
    most of the disadvantages mentioned in *Table 6.4*:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 下表展示了Akuity平台如何最小化或消除*表6.4*中提到的大多数缺点：
- en: '| **Disadvantages** | **Explanation** |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
  zh: '| **缺点** | **解释** |'
- en: '| --- | --- |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| **Security implications**: Centralizing admin credentials for all fleet clusters
    could pose security risks. | The agent within the fleet cluster eliminates central
    credentials in the cockpit. It operates with outbound access back to the cockpit,
    removing the need for direct cluster access or admin credentials, thereby mitigating
    security concerns. |'
  id: totrans-237
  prefs: []
  type: TYPE_TB
  zh: '| **安全性隐患**：集中管理所有舰队集群的管理员凭证可能会带来安全风险。 | 舰队集群中的代理消除了驾驶舱中的中央凭证。它通过回到驾驶舱的出站访问操作，消除了对集群的直接访问或管理员凭证的需求，从而降低了安全隐患。
    |'
- en: '| **Resource consumption**: Additional resources are consumed, both for the
    management cluster and the fleet clusters, including hardware and engineering
    resources. | Network traffic between the control plane and fleet clusters is reduced.
    Argo CD no longer needs to establish connections to fleet clusters at specific
    intervals. The syncing of applications is reduced as they now reside on the fleet
    clusters, lessening the load. |'
  id: totrans-238
  prefs: []
  type: TYPE_TB
  zh: '| **资源消耗**：管理集群和舰队集群都需要消耗额外的资源，包括硬件和工程资源。 | 控制平面与舰队集群之间的网络流量得到了减少。Argo CD不再需要在特定时间间隔内建立与舰队集群的连接。应用程序同步被减少，因为它们现在驻留在舰队集群中，从而减轻了负担。
    |'
- en: '| **Single point of failure**: There’s a potential risk of a single point of
    failure for fleet cluster deployments to provide the platform context. | Fleet
    clusters autonomously retrieve and store the platform context through custom resources
    within the fleet cluster itself. This ensures continuity even in case of connection
    loss. |'
  id: totrans-239
  prefs: []
  type: TYPE_TB
  zh: '| **单点故障**：舰队集群部署存在单点故障的潜在风险，以提供平台上下文。 | 舰队集群通过自定义资源在集群内部自主获取和存储平台上下文，确保即使在连接丢失的情况下也能保持持续性。
    |'
- en: '| **Scaling and performance**: Scaling requires tuning individual components
    within the platform context. | No elimination. Tuning requirements shift to different
    aspects, such as setting specific domain filters for External-DNS per fleet cluster,
    which is essential for scaling. This necessitates tuning values so that they can
    be adapted to each cluster’s needs. |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '| **扩展性和性能**：扩展需要在平台上下文中调优各个组件。 | 无消除。调优要求转移到不同的方面，如为每个舰队集群设置特定的External-DNS域过滤器，这是扩展的关键。这需要调节值，以便适应每个集群的需求。
    |'
- en: Table 6.5 – How the Akuity Platform minimizes or eliminates most of the disadvantages
    mentioned in Table 6.4
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 表6.5 - Akuity平台如何最小化或消除*表6.4*中提到的大多数缺点
- en: In essence, the Akuity Platform adopts and enhances the cockpit and fleet approach,
    allowing fleet clusters’ Argo CD instances to connect back to a central “cockpit,”
    thereby providing a seamless, secure, and efficient method of managing large-scale
    Kubernetes environments. Akuity’s approach stands out as an innovative solution,
    particularly for organizations grappling with the complexities and security concerns
    inherent in managing Kubernetes clusters.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，Akuity平台采用并增强了驾驶舱和舰队方法，允许舰队集群中的Argo CD实例连接回中央的“驾驶舱”，从而提供了一种无缝、安全且高效的方式来管理大规模Kubernetes环境。Akuity的方法作为一种创新解决方案，尤其适用于那些应对Kubernetes集群管理中的复杂性和安全问题的组织。
- en: So far, we have looked at approaches where Kubernetes clusters already exist.
    Next, we’ll take a step back and create the Kubernetes clusters ourselves using
    the GitOps approach.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经讨论了Kubernetes集群已经存在的情况。接下来，我们将退后一步，使用GitOps方法自己创建Kubernetes集群。
- en: Centralized Kubernetes cluster creation – leveraging Cluster API and Argo CD
    for streamlined cluster deployment
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集中式Kubernetes集群创建——利用Cluster API和Argo CD简化集群部署
- en: In the world of modern software deployment, the synergy between Cluster API
    and Argo CD stands as a testament to the power and efficiency of GitOps practices.
    This approach not only facilitates the operation of Argo CD within clusters but
    also harnesses GitOps methodologies for deploying clusters themselves. These clusters
    form the foundational infrastructure for Argo CD and the workloads it manages,
    including various applications deployed through it.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代软件部署的世界里，集群 API 与 Argo CD 的协同作用展示了 GitOps 实践的强大和高效。这种方法不仅使 Argo CD 在集群内的操作变得更加容易，还利用
    GitOps 方法学来部署集群本身。这些集群构成了 Argo CD 和它所管理的工作负载（包括通过 Argo CD 部署的各种应用程序）的基础设施。
- en: This section delves into how Argo CD can be utilized, or how a self-service
    portal for teams can be provided, to streamline the deployment of Kubernetes clusters.
    The effectiveness of this approach is evidenced by companies such as **Kubermatic**,
    **CLASTIX**, and **Giant Swarm**, which have leveraged it to offer diverse managed
    Kubernetes solutions. These solutions range from standalone products to comprehensive
    managed services, aiming to simplify Kubernetes deployment for their clients.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 本节深入探讨了如何利用 Argo CD，或者如何为团队提供自服务门户，以简化 Kubernetes 集群的部署。这一方法的有效性得到了 **Kubermatic**、**CLASTIX**
    和 **Giant Swarm** 等公司验证，它们利用这一方法为客户提供了多样化的托管 Kubernetes 解决方案。这些解决方案从独立产品到全面的托管服务不等，旨在简化
    Kubernetes 部署。
- en: This strategy allows organizations to centralize and automate the creation and
    management of Kubernetes clusters, ensuring a consistent and reliable infrastructure
    for deploying and managing applications using Argo CD. The use of GitOps in this
    context not only enhances the efficiency of these processes but also offers the
    scalability and flexibility needed to manage complex, multi-cluster environments
    effectively. By integrating Cluster API with Argo CD, organizations can create
    a powerful pipeline for deploying and managing Kubernetes clusters, which, in
    turn, can be used to deploy a wide range of workloads, including the Argo CD toolset
    itself and the application stacks for developers.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 这一策略使得组织能够集中化并自动化 Kubernetes 集群的创建和管理，确保使用 Argo CD 部署和管理应用程序时，基础设施的一致性和可靠性。在此背景下使用
    GitOps，不仅提升了这些流程的效率，还提供了管理复杂多集群环境所需的可扩展性和灵活性。通过将集群 API 与 Argo CD 集成，组织可以创建一个强大的管道，用于部署和管理
    Kubernetes 集群，进而用于部署各种工作负载，包括 Argo CD 工具集本身以及为开发人员提供的应用栈。
- en: This approach represents a significant shift in how Kubernetes clusters are
    provisioned and managed, moving toward a more automated, scalable, and developer-friendly
    environment. It exemplifies the potential of GitOps to streamline not just application
    deployment but also the underlying infrastructure management, thereby enabling
    organizations to focus on innovation and development.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法标志着 Kubernetes 集群配置和管理方式的重大转变，向着更加自动化、可扩展且开发人员友好的环境迈进。它展示了 GitOps 的潜力，不仅可以简化应用部署，还能优化底层基础设施管理，从而使组织能够专注于创新和开发。
- en: Introduction to Cluster API
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集群 API 介绍
- en: The **Cluster API** [*7*] project represents a key initiative within the Kubernetes
    ecosystem that focuses on making the setup, update, and oversight of Kubernetes
    clusters more streamlined. Launched by the **Kubernetes Special Interest Group**
    (**SIG**) Cluster Lifecycle, this project utilizes Kubernetes-conformant APIs
    and design principles to automate the process of managing cluster life cycles
    for those responsible for platform operations. It facilitates defining and managing
    underlying infrastructure components – such as virtual machines, network resources,
    load balancers, and **virtual private clouds** (**VPCs**) – in a manner akin to
    how application developers handle application deployments. This approach ensures
    uniform and reliable deployment of clusters across diverse infrastructure settings.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '**集群 API** [*7*] 项目是 Kubernetes 生态系统中的一项关键计划，旨在简化 Kubernetes 集群的设置、更新和管理。该项目由
    **Kubernetes 特殊兴趣小组**（**SIG**）集群生命周期组发起，利用符合 Kubernetes 标准的 API 和设计原则，自动化管理平台运维人员所负责的集群生命周期的过程。它有助于定义和管理底层基础设施组件——如虚拟机、网络资源、负载均衡器以及
    **虚拟私有云**（**VPC**）——类似于应用开发人员处理应用部署的方式。这种方法确保了在不同基础设施环境中，集群的部署具有一致性和可靠性。'
- en: A key aspect of Cluster API is its ability to provision Kubernetes-native, declarative
    infrastructure that applies to AWS. This incorporates principles and experiences
    from previous cluster managers, such as *kops* and *kubicorn*. Its features include
    being able to manage VPCs, gateways, security groups, and instances, support for
    **Elastic Kubernetes Service** (**EKS**), and the ability to deploy Kubernetes
    control planes in private subnets with a separate bastion server. SSH is not used
    for bootstrapping nodes, and only the minimal components are installed to bootstrap
    a control plane and worker nodes.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: Cluster API 的一个关键特点是它能够为 AWS 提供 Kubernetes 本地的声明式基础设施。这吸收了之前集群管理工具（如 *kops*
    和 *kubicorn*）的经验和原则。它的功能包括能够管理 VPC、网关、安全组和实例，支持 **弹性 Kubernetes 服务**（**EKS**），并能够在私有子网中部署
    Kubernetes 控制平面，同时使用单独的堡垒服务器。SSH 不用于节点引导，且只安装最小组件来引导控制平面和工作节点。
- en: Cluster API is licensed under the Apache-2.0 license and offers an active community
    for developers and enthusiasts who wish to contribute to further development.
    There are regular office hours with maintainers where developers can participate
    in discussions and get support.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: Cluster API 采用 Apache-2.0 许可证，并为开发者和希望贡献进一步开发的爱好者提供了一个活跃的社区。开发者可以在与维护者的定期办公时间内参与讨论并获得支持。
- en: 'Cluster API offers a range of use cases in the realm of Kubernetes cluster
    management that cater to different needs within cloud-native ecosystems. Here
    are some common scenarios where Cluster API proves to be particularly useful:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: Cluster API 在 Kubernetes 集群管理领域提供了多种应用场景，满足云原生生态系统中不同需求。以下是一些 Cluster API 特别有用的常见场景：
- en: '**Multi-cluster management**: Cluster API simplifies the management of multiple
    Kubernetes clusters across various environments. It allows for consistent and
    automated provisioning, upgrading, and operational tasks for many clusters, making
    it ideal for organizations managing a vast fleet of Kubernetes clusters.'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多集群管理**：Cluster API 简化了跨各种环境的多个 Kubernetes 集群的管理。它允许对多个集群进行一致的自动化配置、升级和操作任务，使其成为管理大量
    Kubernetes 集群的组织的理想选择。'
- en: '**Automated cluster life cycle management**: It automates the entire life cycle
    of Kubernetes clusters, including creation, scaling, upgrading, and deletion.
    This automation is particularly beneficial in scenarios where clusters need to
    be frequently scaled up or down based on demand or updated with the latest Kubernetes
    versions.'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化集群生命周期管理**：它自动化了 Kubernetes 集群的整个生命周期，包括创建、扩展、升级和删除。在集群需要根据需求频繁扩展或缩减，或者需要更新到最新的
    Kubernetes 版本时，这种自动化尤其有用。'
- en: '**Hybrid cloud and multi-cloud deployments**: For organizations that operate
    in a hybrid or multi-cloud environment, Cluster API enables consistent deployment
    and management of Kubernetes clusters across different cloud providers. This uniformity
    is crucial for businesses looking to avoid vendor lock-in and maintain flexibility
    in their cloud strategy.'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**混合云和多云部署**：对于在混合云或多云环境中运营的组织，Cluster API 使得 Kubernetes 集群能够在不同的云提供商之间进行一致的部署和管理。这种一致性对于那些希望避免厂商锁定并保持云策略灵活性的企业至关重要。'
- en: '**IaC**: Cluster API aligns with the IaC paradigm, allowing teams to define
    and manage clusters declaratively. This approach is beneficial for DevOps teams
    aiming to maintain infrastructure and configuration consistency through code.'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基础设施即代码（IaC）**：Cluster API 与 IaC 模式兼容，允许团队通过声明性方式定义和管理集群。这种方法对于 DevOps 团队通过代码保持基础设施和配置的一致性非常有益。'
- en: '**Self-service clusters**: In larger organizations, different teams may require
    their own Kubernetes clusters. Cluster API enables a self-service model where
    teams can provision and manage their clusters autonomously while adhering to centralized
    policies and standards.'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自助服务集群**：在大型组织中，不同的团队可能需要自己的 Kubernetes 集群。Cluster API 提供了一个自助服务模型，使团队可以在遵守集中式政策和标准的同时，自主地配置和管理自己的集群。'
- en: '**CI/CD pipelines**: Integrating Cluster API with CI/CD pipelines can streamline
    the process of testing and rolling out new applications or updates. It allows
    for dynamic creation and disposal of clusters as part of the CI/CD process, enabling
    more efficient testing and deployment workflows.'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CI/CD 管道**：将 Cluster API 与 CI/CD 管道集成，可以简化测试和推出新应用或更新的过程。它允许在 CI/CD 流程中动态创建和销毁集群，从而实现更高效的测试和部署工作流。'
- en: '**Disaster recovery**: Cluster API can be instrumental in disaster recovery
    strategies. Automating the creation of backup clusters and enabling quick replication
    of cluster states helps reduce downtime and ensures high availability.'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灾难恢复**：Cluster API 在灾难恢复策略中可以发挥重要作用。自动创建备份集群并快速复制集群状态有助于减少停机时间，确保高可用性。'
- en: '**Edge computing**: For Edge computing scenarios where Kubernetes clusters
    need to be deployed at multiple Edge locations, Cluster API provides a unified
    way to manage these clusters from a central point.'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**边缘计算**：对于需要在多个边缘位置部署 Kubernetes 集群的边缘计算场景，Cluster API 提供了一种统一的方式，从一个中心点管理这些集群。'
- en: '**Learning and experimentation**: For educational purposes or experimentation,
    Cluster API allows users to quickly spin up and tear down Kubernetes clusters.
    This is useful for learning Kubernetes, testing new features, or experimenting
    with different configurations.'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**学习与实验**：对于教育目的或实验，Cluster API 允许用户快速创建和销毁 Kubernetes 集群。这对于学习 Kubernetes、测试新功能或尝试不同配置非常有用。'
- en: Each of these use cases demonstrates the versatility and utility of Cluster
    API in managing Kubernetes clusters efficiently and at scale, catering to the
    diverse needs of modern cloud-native applications and infrastructures.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 每一个使用案例都展示了 Cluster API 在高效管理 Kubernetes 集群和大规模应用中的多样性和实用性，满足现代云原生应用和基础设施的不同需求。
- en: How Cluster API is leveraged by different companies
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Cluster API 如何被不同公司利用
- en: In exploring the diverse landscape of Kubernetes management, it becomes evident
    that different organizations have unique requirements and strategies. These vary
    based on their specific operational needs, infrastructure preferences, and long-term
    technological goals. As a result, various implementations of Cluster API have
    emerged, each tailored to meet these differing demands. Some organizations opt
    for fully managed Kubernetes services, while others lean toward self-managed solutions
    to avoid vendor lock-in and maintain greater control over their infrastructure.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在探索 Kubernetes 管理的多样化领域时，可以明显看到不同组织有各自独特的需求和策略。这些需求根据其具体的运营需求、基础设施偏好和长期技术目标而有所不同。因此，出现了各种不同的
    Cluster API 实现，每种实现都经过量身定制，以满足这些不同的需求。有些组织选择完全托管的 Kubernetes 服务，而其他组织则倾向于自管理解决方案，以避免供应商锁定并保持对基础设施的更大控制。
- en: 'The following are only a fraction of the companies that use Cluster API in
    their substructure:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 以下仅是部分使用 Cluster API 的公司：
- en: '**VMware Kubernetes solution (vSphere with Tanzu)**: VMware’s integration of
    Kubernetes directly into the vSphere platform demonstrates a deep use of Cluster
    API, particularly with the vSphere provider. This allows developers to deploy
    and manage Kubernetes clusters directly from vSphere.'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**VMware Kubernetes 解决方案 (vSphere with Tanzu)**：VMware 将 Kubernetes 直接集成到 vSphere
    平台中，充分利用了 Cluster API，特别是在 vSphere 提供者方面。这使得开发者可以直接从 vSphere 部署和管理 Kubernetes
    集群。'
- en: '**Cluster API Provider Azure (CAPZ)**: This is Microsoft’s implementation of
    Cluster API for Azure and replaces AKS Engine for self-managed Kubernetes clusters.
    CAPZ leverages Azure’s robust, scalable infrastructure to provide a seamless and
    efficient way to operate Kubernetes, simplifying cluster management tasks and
    enhancing the automation capabilities inherent in Azure’s cloud services. This
    implementation ensures that users can maintain full control over their Kubernetes
    environments while benefiting from the native integrations and services offered
    by Azure.'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Cluster API 提供者 Azure (CAPZ)**：这是微软为 Azure 实现的 Cluster API，并取代了 AKS Engine
    用于自管理 Kubernetes 集群。CAPZ 利用 Azure 强大的可扩展基础设施，提供了一种无缝且高效的方式来操作 Kubernetes，简化集群管理任务，并增强
    Azure 云服务固有的自动化功能。这一实现确保用户可以完全控制自己的 Kubernetes 环境，同时享受 Azure 提供的本地集成和服务。'
- en: '**Giant Swarm (Kubernetes platform)**: Giant Swarm uses Cluster API to create
    a unified application point for multiple self-managed Kubernetes clusters across
    different cloud provider endpoints. It offers a managed Kubernetes solution with
    the flexibility to deploy to various target cloud providers, emphasizing low vendor
    lock-in and subscription-based pricing.'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Giant Swarm (Kubernetes 平台)**：Giant Swarm 使用 Cluster API 创建一个统一的应用入口，支持跨多个云服务提供商端点的自管理
    Kubernetes 集群。它提供一个托管的 Kubernetes 解决方案，具备灵活性，可以部署到多个目标云服务提供商，强调低供应商锁定和基于订阅的定价模式。'
- en: '**CLASTIX (Kamaji)**: An entirely open source implementation of Cluster API,
    Kamaji is noted for its efficiency in scaling control planes on a management cluster,
    thereby reducing costs. The approach involves creating worker nodes and enabling
    them to join the respective tenants.'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CLASTIX（Kamaji）**：Kamaji 是 Cluster API 的一个完全开源实现，以其在管理集群上高效扩展控制平面而著称，从而降低了成本。该方法涉及创建工作节点，并使它们能够加入相应的租户。'
- en: '**Kubermatic Kubernetes Platform (KKP)**: This platform, which started early
    with the first version of Cluster API, focuses on creating and managing instances
    for worker nodes and joining them to a cluster. The architecture includes a Master
    Cluster and Seed Clusters with a special machine controller for precise management.'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kubermatic Kubernetes Platform (KKP)**：该平台自 Cluster API 的第一个版本起就开始了，专注于创建和管理工作节点实例，并将它们加入集群。架构包括一个主集群和种子集群，并配备了一个特殊的机器控制器进行精确管理。'
- en: Each of these implementations reflects different strategies and priorities,
    such as vendor lock-in considerations, customization capabilities, resource conservation,
    and integration with existing infrastructure. The choice of a specific implementation
    depends on the organization’s requirements, including governance, compliance,
    and operational needs.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 这些实现反映了不同的策略和优先事项，例如供应商锁定考虑、定制能力、资源节约和与现有基础设施的集成。选择特定的实现取决于组织的需求，包括治理、合规性和操作需求。
- en: In this context, examining how different companies utilize Cluster API provides
    valuable insights into the practical applications and benefits of this tool. For
    instance, the Azure Provider for Cluster API (**CAPZ**) bridges the gap between
    Microsoft Azure’s managed Kubernetes service, AKS, and Kubernetes-native management,
    aligning with Cluster API’s standardized, declarative approach. Meanwhile, open
    source solutions such as **CLASTIX’s Kamaji** emphasize flexibility and control,
    catering to organizations keen on avoiding vendor lock-in. In contrast, **VMware’s
    vSphere with Tanzu** integrates Kubernetes into its platform, streamlining workflows
    and offering a seamless Kubernetes-native environment. Similarly, **Giant Swarm**
    and **Kubermatic Kubernetes Platform** target specific operational needs such
    as compatibility with Cluster API versions and resource conservation. Each of
    these implementations showcases the adaptability of Cluster API, underlining its
    importance in providing flexible, cloud-agnostic Kubernetes solutions in the modern
    technological landscape.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种背景下，考察不同公司如何使用 Cluster API 提供了有价值的洞察，帮助理解这个工具的实际应用和好处。例如，Cluster API 的 Azure
    提供者（**CAPZ**）架起了微软 Azure 管理的 Kubernetes 服务 AKS 和 Kubernetes 本地管理之间的桥梁，与 Cluster
    API 的标准化声明式方法相契合。同时，像 **CLASTIX 的 Kamaji** 等开源解决方案强调灵活性和控制，适用于那些希望避免供应商锁定的组织。相比之下，**VMware
    的 vSphere with Tanzu** 将 Kubernetes 集成到其平台中，简化了工作流，提供无缝的 Kubernetes 本地环境。同样，**Giant
    Swarm** 和 **Kubermatic Kubernetes Platform** 针对特定的操作需求，如与 Cluster API 版本的兼容性和资源节约进行优化。这些实现展示了
    Cluster API 的适应性，突出了它在提供灵活的、与云无关的 Kubernetes 解决方案方面的重要性。
- en: Cluster API, like any technology, comes with its own set of advantages and disadvantages.
    Understanding these can help in determining whether it’s the right tool for a
    specific Kubernetes management scenario.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: Cluster API 和任何技术一样，既有优点也有缺点。了解这些优缺点有助于判断它是否适用于特定的 Kubernetes 管理场景。
- en: 'Here are a few advantages of Cluster API:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 Cluster API 的一些优点：
- en: '**Consistency and standardization**: Cluster API provides a standardized way
    to manage Kubernetes clusters. This consistency is crucial for large-scale and
    multi-cloud environments.'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一致性和标准化**：Cluster API 提供了一种标准化的方式来管理 Kubernetes 集群。这种一致性对于大规模和多云环境至关重要。'
- en: '**Automation and scalability**: It automates the process of creating, configuring,
    and managing Kubernetes clusters, which is beneficial for organizations that need
    to scale their operations efficiently.'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化和可扩展性**：它自动化了 Kubernetes 集群的创建、配置和管理过程，对那些需要高效扩展运营的组织来说非常有利。'
- en: '**Declarative API**: Aligning with the Kubernetes principle of declarative
    configuration, Cluster API allows users to define their desired state for clusters,
    which the system then works to achieve.'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**声明式 API**：与 Kubernetes 的声明式配置原则相一致，Cluster API 允许用户定义其期望的集群状态，系统随后会努力实现这一状态。'
- en: '**Integration with the cloud-native ecosystem**: It integrates well with other
    tools in the Kubernetes ecosystem, offering a seamless experience for managing
    clusters as part of the broader cloud-native infrastructure.'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与云原生生态系统的集成**：它与 Kubernetes 生态系统中的其他工具集成良好，提供了无缝的体验，将集群管理作为更广泛的云原生基础设施的一部分。'
- en: '**Multi-cloud and hybrid cloud support**: Cluster API supports multiple cloud
    providers, making it easier to manage clusters in a hybrid or multi-cloud environment.'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多云与混合云支持**：Cluster API 支持多个云服务提供商，使得在混合云或多云环境中管理集群变得更加容易。'
- en: '**Community support**: Being a part of the Kubernetes project, it benefits
    from strong community support and ongoing development efforts.'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**社区支持**：作为 Kubernetes 项目的一部分，它受益于强大的社区支持和持续的开发工作。'
- en: 'Here are a few disadvantages of Cluster API:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 Cluster API 的一些缺点：
- en: '**Complexity**: Cluster API can be complex to understand and implement, especially
    for users new to Kubernetes or cloud-native technologies'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**复杂性**：Cluster API 可能较难理解和实现，特别是对于那些刚接触 Kubernetes 或云原生技术的用户。'
- en: '**Limited customization in some areas**: While it offers a standardized approach,
    this can sometimes limit customization options for specific use cases or environments'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**某些领域的定制化有限**：尽管它提供了标准化的方案，但有时这会限制特定使用场景或环境的定制化选项。'
- en: '**Dependency on Kubernetes expertise**: Effective use of Cluster API requires
    a good understanding of Kubernetes concepts and architecture'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**依赖于 Kubernetes 专业知识**：有效使用 Cluster API 需要对 Kubernetes 概念和架构有很好的理解。'
- en: '**Resource overhead**: Running additional controllers and resources for managing
    clusters could lead to increased resource consumption in your Kubernetes environment'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源开销**：运行额外的控制器和资源来管理集群可能会导致 Kubernetes 环境中资源消耗增加。'
- en: '**Learning curve**: For teams not familiar with Kubernetes’ declarative model
    and API-centric management, there can be a significant learning curve'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**学习曲线**：对于不熟悉 Kubernetes 声明式模型和基于 API 的管理的团队来说，可能会面临显著的学习曲线。'
- en: In summary, Cluster API is a powerful tool for organizations looking to automate
    and standardize their Kubernetes cluster management, especially across large-scale
    and multi-cloud environments. However, its complexity and the need for Kubernetes
    expertise might pose challenges for some teams. As with any technological decision,
    it’s important to evaluate these factors in the context of specific organizational
    needs and capabilities.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，Cluster API 是一个强大的工具，适用于那些希望自动化和标准化 Kubernetes 集群管理的组织，尤其是在大规模和多云环境下。然而，它的复杂性和对
    Kubernetes 专业知识的需求可能会给某些团队带来挑战。和任何技术决策一样，重要的是在特定组织需求和能力的背景下评估这些因素。
- en: In the next section, we will go hands-on and use Cluster API and GitOps to deploy
    Kubernetes clusters on Azure.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一部分中，我们将进行实践操作，使用 Cluster API 和 GitOps 在 Azure 上部署 Kubernetes 集群。
- en: A deep dive into Cluster API and GitOps – hands-on
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入探讨 Cluster API 和 GitOps – 实践操作
- en: In this section, we’ll use Cluster API to provision a Kubernetes cluster in
    Azure by using the declarative approach with Argo CD on VMs.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分中，我们将使用 Cluster API，通过在虚拟机上使用 Argo CD 的声明式方法，在 Azure 中预置 Kubernetes 集群。
- en: 'First, let’s see what our environment looks like:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看我们的环境长什么样：
- en: 'Azure:'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure：
- en: Azure tenant ID
  id: totrans-294
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 租户 ID
- en: Azure subscription
  id: totrans-295
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 订阅
- en: Azure app registration with Contributor access to the subscription
  id: totrans-296
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 应用注册，具有对订阅的贡献者访问权限
- en: '**Azure Kubernetes** **Service** (**AKS**)'
  id: totrans-297
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure Kubernetes** **服务**（**AKS**）'
- en: The necessary Azure infrastructure, including **Virtual Machines Scale Sets**
    (**VMSS**), virtual networks, and more
  id: totrans-298
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所需的 Azure 基础设施，包括 **虚拟机规模集**（**VMSS**）、虚拟网络等
- en: 'Managed cluster – AKS:'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 托管集群 – AKS：
- en: Argo CD running on a managed cluster
  id: totrans-300
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Argo CD 运行在托管集群上
- en: 'Workload cluster – VMSS:'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作负载集群 – VMSS：
- en: Control plane
  id: totrans-302
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制平面
- en: Nodes
  id: totrans-303
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节点
- en: 'Tools:'
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具：
- en: '`kubectl`'
  id: totrans-305
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubectl`'
- en: '`clusterctl`'
  id: totrans-306
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clusterctl`'
- en: '`az cli`'
  id: totrans-307
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`az cli`'
- en: '`helm`'
  id: totrans-308
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`helm`'
- en: Initializing the management cluster
  id: totrans-309
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始化管理集群
- en: 'The `clusterctl` command takes a list of providers to install as input. When
    executed for the first time, `clusterctl init` automatically includes the `cluster-api`
    core provider in the list. If not specified, it also adds the `kubeadm` bootstrap
    and `kubeadm` control plane providers:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '`clusterctl` 命令接收一个提供商列表作为输入。当首次执行时，`clusterctl init` 会自动将 `cluster-api` 核心提供商包括在列表中。如果未指定，它还会添加
    `kubeadm` 启动引导和 `kubeadm` 控制平面提供商：'
- en: '[PRE0]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You should get an output similar to the following:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到类似以下的输出：
- en: '[PRE1]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The output also mentions that the installation of `cert-manager` is skipped
    because it is already installed. This step is important because `cert-manager`
    plays a critical role in managing certificates within Kubernetes environments,
    ensuring secure communication between cluster components by automating the issuance
    and renewal of TLS certificates.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 输出还提到，由于`cert-manager`已经安装，所以跳过了安装该组件。此步骤很重要，因为`cert-manager`在 Kubernetes 环境中管理证书，确保集群组件之间的安全通信，通过自动化颁发和续订
    TLS 证书来发挥关键作用。
- en: Moreover, the output reflects the successful setup of a management cluster with
    essential providers for Kubernetes cluster management, including Cluster API,
    Kubeadm, and Azure infrastructure, each installed in specific namespaces. This
    step is crucial for streamlining Kubernetes operations as workload clusters can
    be created with a simple command, thereby facilitating efficient cluster deployment
    and management.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，输出显示成功设置了一个管理集群，并为 Kubernetes 集群管理安装了必要的提供商，包括 Cluster API、Kubeadm 和 Azure
    基础设施，这些都安装在特定的命名空间中。此步骤对于简化 Kubernetes 操作至关重要，因为工作负载集群可以通过一个简单的命令创建，从而促进集群的高效部署和管理。
- en: Creating your first workload cluster
  id: totrans-316
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建你的第一个工作负载集群
- en: Once the management cluster is ready, you can create your first workload cluster.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦管理集群准备好，你就可以创建你的第一个工作负载集群。
- en: Important note
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Make sure you select a VM size that is available in your desired location for
    your subscription. To see the available SKUs, use the `az vm list-skus -l <your_location>
    -r virtualMachines -o` `table` command.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 确保选择一个在你所选区域内可用的虚拟机规格。要查看可用的 SKUs，请使用命令`az vm list-skus -l <your_location> -r
    virtualMachines -o table`。
- en: 'Please replace the following variables with your specific values:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 请将以下变量替换为你的具体值：
- en: '[PRE2]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The following command prepares a YAML manifest for deploying a Kubernetes cluster
    named `capi-quickstart` and specifies Kubernetes version `1.29.0`, one control
    plane machine, and three worker machines. By saving this configuration to `capi-quickstart.yaml`,
    it enables automated and consistent cluster deployment, encapsulating the desired
    state and structure of the cluster in a single file.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令为部署名为`capi-quickstart`的 Kubernetes 集群准备了一个 YAML 清单，并指定了 Kubernetes 版本`1.29.0`、一个控制平面节点和三个工作节点。通过将此配置保存为`capi-quickstart.yaml`，它可以实现自动化和一致的集群部署，将集群的期望状态和结构封装在一个文件中。
- en: 'Now, you are ready to generate the cluster YAML manifest:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经准备好生成集群 YAML 清单：
- en: '[PRE3]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'At this point, you should have a file that contains the following custom resources
    in the `capi-quickstart.yaml` file:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你应该在`capi-quickstart.yaml`文件中拥有包含以下自定义资源的内容：
- en: '`KubeadmConfigTemplate`: This is the schema for the `kubeadmconfigtemplates`
    API.'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`KubeadmConfigTemplate`：这是`kubeadmconfigtemplates` API的架构。'
- en: '`AzureClusterIdentity`: This is the schema for the `azureclustersidentities`
    API.'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AzureClusterIdentity`：这是`azureclustersidentities` API的架构。'
- en: '`AzureMachineTemplate`: These templates define the specifications for creating
    Azure VMs within the cluster. This is the schema for the `azuremachinetemplates`
    API.'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AzureMachineTemplate`：这些模板定义了在集群中创建 Azure 虚拟机的规格。它是`azuremachinetemplates`
    API的架构。'
- en: '`MachineDeployment`: This custom resource specifies the desired number of worker
    nodes and their properties. It helps in scaling the cluster by automatically managing
    the creation and scaling of worker nodes.'
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MachineDeployment`：这个自定义资源指定了所需的工作节点数量及其属性。它有助于通过自动管理工作节点的创建和扩展来扩展集群。'
- en: '`KubeadmControlPlane`: This defines the control plane for the Kubernetes cluster,
    including settings such as the number of control plane nodes and their configurations.'
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`KubeadmControlPlane`：这定义了 Kubernetes 集群的控制平面，包括控制平面节点的数量及其配置等设置。'
- en: '`AzureCluster`: This custom resource represents the Azure-specific details
    of the cluster, such as the network configuration and virtual network details.'
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AzureCluster`：这个自定义资源表示集群的 Azure 特定详细信息，例如网络配置和虚拟网络的详细信息。'
- en: '`Cluster`: This defines the high-level cluster configuration, including control
    plane settings, worker node references, and provider-specific details. This is
    the top-level resource that represents the entire Kubernetes cluster.'
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Cluster`：这定义了高层次的集群配置，包括控制平面设置、工作节点引用和特定于提供商的详细信息。它是表示整个 Kubernetes 集群的顶级资源。'
- en: 'Now, you can apply the file using `kubectl`. However, we’ll leverage GitOps
    with Argo CD to maximize the benefits of the declarative approach. So, create
    an *application*, like this:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以使用 `kubectl` 应用文件。但是，我们将利用 Argo CD 和 GitOps 最大化声明式方法的好处。所以，创建一个 *应用程序*，如下所示：
- en: '[PRE4]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'At this point, you can view the provisioning of the cluster:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 在此时，你可以查看集群的配置状态：
- en: '[PRE5]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, view the provisioning state of the cluster:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，查看集群的配置状态：
- en: '[PRE6]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: From the preceding output, it’s evident that the cluster is partially operational.
    Having `READY True` across various components in the output indicates the operational
    status of the cluster. Specifically, the readiness of the cluster (`Cluster/capi-quickstart`),
    its Azure infrastructure (`AzureCluster/capi-quickstart`), and `KubeadmControlPlane/capi-quickstart-control-plane`
    being marked as `True` shows that these critical parts of the cluster are fully
    operational. The control plane nodes are running, but the worker nodes haven’t
    started yet.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的输出可以看出，集群部分投入使用。输出中各个组件显示 `READY True` 表明集群的操作状态。具体来说，集群 (`Cluster/capi-quickstart`)、其
    Azure 基础设施 (`AzureCluster/capi-quickstart`) 和 `KubeadmControlPlane/capi-quickstart-control-plane`
    被标记为 `True`，这表明这些集群的关键部分已完全投入使用。控制平面节点正在运行，但工作节点尚未启动。
- en: Important note
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The control plane won’t be ready until we install a **container network** **interface**
    (**CNI**).
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 控制平面在我们安装 **容器网络** **接口** (**CNI**) 之前无法就绪。
- en: The worker nodes are not yet operational because we need to deploy the CNI components.
    It’s important to note that Azure does not currently support Calico networking.
    CAPZ clusters that use the default Calico configuration will experience issues
    with DNS functionality. To address this, we will deploy a Calico spec that utilizes
    VXLAN encapsulation for Pod traffic. You can deploy the Azure **Calico CNI** using
    the template provided here.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 工作节点尚未投入使用，因为我们需要部署 CNI 组件。需要注意的是，Azure 目前不支持 Calico 网络。使用默认 Calico 配置的 CAPZ
    集群将会遇到 DNS 功能的问题。为了解决这个问题，我们将部署一个使用 VXLAN 封装的 Calico 配置来处理 Pod 流量。你可以使用此处提供的模板来部署
    Azure **Calico CNI**。
- en: 'To obtain `kubeconfig` so that you can interact with the cluster, follow these
    steps:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 若要获取 `kubeconfig`，以便与集群交互，请按照以下步骤操作：
- en: 'The following command retrieves the `kubeconfig` details for the `capi-quickstart`
    Kubernetes cluster and saves it to a file:'
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下命令会获取 `capi-quickstart` Kubernetes 集群的 `kubeconfig` 详情，并保存到文件中：
- en: '[PRE7]'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, we need to install the CNI plugin on the workload cluster using the following
    command:'
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要使用以下命令在工作负载集群中安装 CNI 插件：
- en: '[PRE8]'
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: kubectl --kubeconfig=./capi-quickstart.kubeconfig get nodes
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: kubectl --kubeconfig=./capi-quickstart.kubeconfig get nodes
- en: '#Output like:'
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '# 输出类似于：'
- en: NAME                                  STATUS   ROLES           AGE
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 名称                                  状态   角色           年龄
- en: capi-quickstart-control-plane-kcqmm   Ready    control-plane   8m26s
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: capi-quickstart-control-plane-kcqmm   Ready    control-plane   8m26s
- en: capi-quickstart-md-0-2kj9c            Ready    <none>          6m58s
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: capi-quickstart-md-0-2kj9c            Ready    <none>          6m58s
- en: capi-quickstart-md-0-7krx6            Ready    <none>          6m56s
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: capi-quickstart-md-0-7krx6            Ready    <none>          6m56s
- en: capi-quickstart-md-0-b8m7r            Ready    <none>          7m2s
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: capi-quickstart-md-0-b8m7r            Ready    <none>          7m2s
- en: '[PRE9]'
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now you can add the cluster to your Argo CD cockpit as a fleet ship and continue
    working.
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你可以将集群添加到你的 Argo CD 操控台中，作为一个舰队船只并继续工作。
- en: 'In Azure, due to the peculiarities of CNI, doing this requires some additional
    work, such as setting up a webhook that deploys the CNI plugin as soon as `status
    control-plane=true` is achieved. This slightly restricts the self-service aspect
    and requires extension in the form of **CI/CD and webhooks**, for example. However,
    Cluster API offers various other providers where this may not be necessary:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Azure 中，由于 CNI 的特殊性，执行此操作需要一些额外的工作，例如设置一个 webhook，在 `status control-plane=true`
    达成时立即部署 CNI 插件。这稍微限制了自服务的能力，并且需要通过 **CI/CD 和 webhooks** 等方式进行扩展。然而，Cluster API
    提供了其他多个提供程序，在这些情况下可能不需要这样做：
- en: '![Figure 6.7 – Workflow visualized](img/B22100_06_07.jpg)'
  id: totrans-358
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.7 – 流程可视化](img/B22100_06_07.jpg)'
- en: Figure 6.7 – Workflow visualized
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.7 – 流程可视化
- en: In this example, we demonstrated how to utilize Cluster API to create a declarative
    setup that can be deployed by Argo CD to provision the infrastructure or workload
    clusters. *Figure 6**.7* illustrates this process. Subsequently, Argo CD can be
    layered on top of it using `argocd cluster add`. This allows you to utilize tools
    such as **Kubernetes Service Catalog** (**KSC**) to deploy services based on labels.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们演示了如何利用 Cluster API 创建一个声明式设置，该设置可以通过 Argo CD 部署，以提供基础设施或工作负载集群。*图
    6.7* 说明了这一过程。随后，Argo CD 可以通过 `argocd cluster add` 层叠到其上。这使得你能够使用 **Kubernetes
    服务目录** (**KSC**) 等工具，根据标签部署服务。
- en: Summary
  id: totrans-361
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we embarked on a comprehensive exploration of GitOps within
    Kubernetes environments, uncovering pivotal insights and strategies that are crucial
    for modern cloud-native deployments. We began by examining the criticality of
    tailoring architectural designs for scalability, resilience, and efficiency, all
    of which are foundational principles in today’s dynamic cloud landscapes. This
    journey through architectural frameworks underscored the indispensability of IaC,
    not only for its collaborative and version control benefits but also for establishing
    immutable infrastructure that resists manual alterations in live environments.
    Emphasizing modular design, we highlighted how efficient microservices management
    can transform operational workflows.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们全面探索了 Kubernetes 环境中的 GitOps，揭示了现代云原生部署中至关重要的见解和策略。我们首先探讨了根据可扩展性、韧性和高效性量身定制架构设计的关键性，这些都是当今动态云环境中的基础原则。这一架构框架的探索强调了基础设施即代码（IaC）的不可或缺性，它不仅为协作和版本控制提供了益处，还通过建立不可更改的基础设施，防止了在生产环境中的手动修改。强调模块化设计，我们突出了高效的微服务管理如何转变操作工作流。
- en: Then, our exploration delved into the depths of architectural choices and their
    significant impact on the effectiveness of GitOps. We learned the importance of
    adopting a declarative model, an approach that seamlessly integrates version control,
    change management, and automated synchronization. This section illuminated the
    considerations necessary when selecting repository structures, weighing the merits
    of monolithic against multi-repository strategies. It also discussed the vital
    role of deployment strategies, environment isolation, scalability, and security,
    each a cornerstone in realizing a robust GitOps implementation.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们的探索深入了架构选择及其对 GitOps 效能的重大影响。我们学习了采用声明性模型的重要性，这种方法无缝集成了版本控制、变更管理和自动同步。本节阐明了在选择仓库结构时所需的考虑因素，权衡了单体仓库与多仓库策略的优缺点。它还讨论了部署策略、环境隔离、可扩展性和安全性在实现强大
    GitOps 实施过程中的重要作用。
- en: We then transitioned to understanding the role of GitOps in enforcing systematic
    improvements in cloud-native architectures. Key aspects such as horizontal scaling,
    microservices, stateless applications, high availability, fault isolation, and
    disaster recovery were dissected. We explored how GitOps can manage deployments,
    ensuring resilience and efficiency through tactics such as auto-scaling, load
    balancing, and setting resource limits.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 随后，我们转向理解 GitOps 在推动云原生架构系统化改进中的作用。我们详细分析了横向扩展、微服务、无状态应用程序、高可用性、故障隔离和灾难恢复等关键方面。我们探讨了
    GitOps 如何通过自动扩展、负载均衡和设置资源限制等策略管理部署，确保系统的韧性和高效性。
- en: The second part of this chapter shifted our focus to various architectural approaches
    tailored for GitOps in Kubernetes environments. As organizations evolve, the need
    for scalable, secure, and efficient deployment strategies becomes paramount. We
    delved into the world of Argo CD, examining its capabilities in scaling performance,
    security, usability, and failover processes. We compared and contrasted the nuances
    between managing clusters with a centralized Argo CD instance and dedicated instances
    per cluster. The differences between Argo CD and Flux CD were also highlighted,
    providing a balanced view of their respective strengths and weaknesses.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的第二部分将我们的重点转向了适用于 Kubernetes 环境中 GitOps 的各种架构方法。随着组织的发展，规模化、安全性和高效部署策略的需求变得至关重要。我们深入探讨了
    Argo CD，分析了它在性能扩展、安全性、可用性和故障转移过程中的能力。我们对比了使用集中式 Argo CD 实例与为每个集群设置专用实例之间的细微差别。同时，我们也突出了
    Argo CD 与 Flux CD 之间的差异，提供了对它们各自优缺点的平衡视角。
- en: Moreover, we explored the innovative cockpit and fleet approach with Argo CD,
    a strategy that goes beyond mere Kubernetes cluster management and includes provisioning
    clusters declaratively using Cluster API.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还探索了 Argo CD 的创新驾驶舱和舰队方法，这一策略不仅仅局限于 Kubernetes 集群管理，还包括使用 Cluster API 声明式地配置集群。
- en: As we pave the way for the next chapter, we will delve into the necessary cultural
    shifts for successfully implementing and operating GitOps. We’ll explore the transformation
    of treating infrastructure as an application and the principles of immutable infrastructure
    before delving into various **DevOps Research and Assessment** (**DORA**) metrics.
    We’ll also discuss the critical need for continual improvement in GitOps and overcoming
    cultural barriers that may hinder its adoption. This sets the stage for a profound
    understanding that successful GitOps is not just about the right tools and technologies
    but also about cultural adaptation and evolution within the IT landscape.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们为下一个章节铺路，我们将深入探讨成功实施和操作 GitOps 所需的文化转变。我们将探讨将基础设施视为应用程序的转型，以及不可变基础设施的原则，然后再深入探讨各种
    **DevOps 研究与评估** (**DORA**) 指标。我们还将讨论 GitOps 持续改进的关键需求，以及克服可能妨碍其采用的文化障碍。这为我们对成功
    GitOps 的深刻理解奠定了基础——成功的 GitOps 不仅仅依赖于正确的工具和技术，还依赖于 IT 领域内的文化适应和演变。
- en: References
  id: totrans-368
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[*1*] [https://akuity.io/blog/argo-cd-architectures-explained](https://akuity.io/blog/argo-cd-architectures-explained)'
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*1*] [https://akuity.io/blog/argo-cd-architectures-explained](https://akuity.io/blog/argo-cd-architectures-explained)'
- en: '[*2*] [https://codefresh.io/blog/a-comprehensive-overview-of-argo-cd-architectures-2023/](https://codefresh.io/blog/a-comprehensive-overview-of-argo-cd-architectures-2023/)'
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*2*] [https://codefresh.io/blog/a-comprehensive-overview-of-argo-cd-architectures-2023/](https://codefresh.io/blog/a-comprehensive-overview-of-argo-cd-architectures-2023/)'
- en: '[*3*] [https://www.youtube.com/watch?v=p8BluR5WT5w](https://www.youtube.com/watch?v=p8BluR5WT5w)'
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*3*] [https://www.youtube.com/watch?v=p8BluR5WT5w](https://www.youtube.com/watch?v=p8BluR5WT5w)'
- en: '[*4*] [https://github.com/openclarity/kubeclarity](https://github.com/openclarity/kubeclarity)'
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*4*] [https://github.com/openclarity/kubeclarity](https://github.com/openclarity/kubeclarity)'
- en: '[*5*] [https://github.com/aquasecurity/trivy-operator](https://github.com/aquasecurity/trivy-operator)'
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*5*] [https://github.com/aquasecurity/trivy-operator](https://github.com/aquasecurity/trivy-operator)'
- en: '[*6*] [https://github.com/fluxcd/flux2/releases/tag/v2.0.0](https://github.com/fluxcd/flux2/releases/tag/v2.0.0)'
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*6*] [https://github.com/fluxcd/flux2/releases/tag/v2.0.0](https://github.com/fluxcd/flux2/releases/tag/v2.0.0)'
- en: '[*7*] [https://cluster-api.sigs.k8s.io](https://cluster-api.sigs.k8s.io)'
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*7*] [https://cluster-api.sigs.k8s.io](https://cluster-api.sigs.k8s.io)'

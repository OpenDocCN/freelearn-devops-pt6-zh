- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Preparing a Kubernetes and Helm Environment
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备 Kubernetes 和 Helm 环境
- en: '**Helm** is a tool that provides a variety of benefits that help users deploy
    and manage **Kubernetes** applications easier. Before users can start experiencing
    these benefits, however, they must satisfy several prerequisites. First, a user
    must have access to a Kubernetes cluster. Next, a user should have the command-line
    tools for both Kubernetes and Helm. Finally, a user should be aware of Helm’s
    basic configuration options to be productive with as little friction as possible.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**Helm** 是一个工具，提供了多种帮助用户更轻松部署和管理 **Kubernetes** 应用程序的好处。在用户开始体验这些好处之前，必须满足几个前提条件。首先，用户必须能够访问
    Kubernetes 集群。接下来，用户应该拥有 Kubernetes 和 Helm 的命令行工具。最后，用户应了解 Helm 的基本配置选项，以便尽可能减少摩擦，提高生产力。'
- en: 'In this chapter, we will outline the tools and concepts that are required to
    begin working with Helm. The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将概述开始使用 Helm 所需的工具和概念。本章将涉及以下主题：
- en: Preparing a local Kubernetes environment with minikube
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 minikube 准备本地 Kubernetes 环境
- en: Setting up kubectl
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 kubectl
- en: Setting up Helm
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 Helm
- en: Configuring Helm
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 Helm
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In this chapter, you must install the following technologies on your local
    workstation:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您需要在本地工作站上安装以下技术：
- en: minikube
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: minikube
- en: VirtualBox
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VirtualBox
- en: Helm
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Helm
- en: kubectl
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: kubectl
- en: These tools can be installed with a package manager or by downloading them directly
    from the source. We will provide instructions for using the `Chocolatey` package
    manager on Windows, the `Homebrew` package manager on macOS, the `apt-get` package
    manager for Debian-based Linux distributions, and the `dnf` package manager for
    RPM-based Linux distributions.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工具可以通过包管理器安装，也可以直接从源代码下载。我们将提供在 Windows 上使用 `Chocolatey` 包管理器、在 macOS 上使用
    `Homebrew` 包管理器、在基于 Debian 的 Linux 发行版上使用 `apt-get` 包管理器、在基于 RPM 的 Linux 发行版上使用
    `dnf` 包管理器的安装说明。
- en: Preparing a local Kubernetes environment with minikube
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 minikube 准备本地 Kubernetes 环境
- en: Helm won’t be able to deploy applications without access to a Kubernetes cluster.
    For this reason, let’s discuss one option where users can run a local cluster
    on their machine – **minikube**.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有访问 Kubernetes 集群的权限，Helm 将无法部署应用程序。因此，我们讨论了一个选项，用户可以在自己的机器上运行本地集群——**minikube**。
- en: minikube is a community-driven tool that allows users to easily deploy a small,
    single-node Kubernetes cluster to their local machine. A cluster created with
    minikube is run inside either a container or a **virtual machine** (**VM**) so
    that it can easily be created and later discarded. minikube presents us with an
    excellent way to experiment with Kubernetes, and it can also be used to learn
    Helm alongside the examples provided throughout this book.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: minikube 是一个社区驱动的工具，使用户能够轻松地将一个小型单节点的 Kubernetes 集群部署到本地机器上。使用 minikube 创建的集群运行在容器或
    **虚拟机** (**VM**) 中，方便创建和后续丢弃。minikube 为我们提供了一个绝佳的方式来实验 Kubernetes，它也可以与本书中提供的示例一起用来学习
    Helm。
- en: In the next few sections, we’ll cover how minikube can be installed and configured
    so that you have a Kubernetes cluster available while learning how to use Helm.
    For more comprehensive instructions, please refer to the *Getting Started!* page
    of the official minikube website at https://minikube.sigs.k8s.io/docs/start/.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几节中，我们将介绍如何安装和配置 minikube，以便在学习如何使用 Helm 时，您可以拥有一个可用的 Kubernetes 集群。有关更全面的说明，请参阅官方
    minikube 网站上的 *入门！* 页面，网址：https://minikube.sigs.k8s.io/docs/start/
- en: Installing minikube
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 minikube
- en: minikube, like the other tools that will be installed within this chapter, has
    binaries compiled for the Windows, macOS, and Linux operating systems. The easiest
    way to install the latest version of minikube on Windows and macOS is via a package
    manager, such as `Chocolatey` for Windows and `Homebrew` for macOS. Linux users
    will find it easier to install the latest `minikube` binary by downloading it
    from minikube’s GitHub releases page, though this method can also be used on Windows
    and macOS as well.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 与本章中将安装的其他工具一样，minikube 为 Windows、macOS 和 Linux 操作系统编译了二进制文件。安装 minikube 最新版本在
    Windows 和 macOS 上最简单的方式是通过包管理器，如 Windows 上的 `Chocolatey` 和 macOS 上的 `Homebrew`。Linux
    用户可以通过从 minikube 的 GitHub 发布页面下载最新的 `minikube` 二进制文件来轻松安装，虽然这种方法也可以在 Windows 和
    macOS 上使用。
- en: The following steps describe how to install minikube based on your machine and
    installation preference. Please note that minikube version v1.22.0 was used at
    the time of writing and for developing the examples that have been used throughout
    this book.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤描述了如何根据您的机器和安装偏好安装 minikube。请注意，本书编写时使用的是 minikube 版本 v1.22.0，并且用于开发本书中的示例。
- en: 'To install it via a package manager (on Windows and macOS), run one of the
    following commands based on your operating system:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过包管理器安装（适用于 Windows 和 macOS），请根据您的操作系统运行以下命令之一：
- en: 'For Windows, run the following command:'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 Windows，运行以下命令：
- en: '[PRE0]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For macOS, run the following command:'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 macOS，运行以下命令：
- en: '[PRE1]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following steps show you how to install minikube using a direct download
    link (on Windows, macOS, and Linux):'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤展示了如何使用直接下载链接安装 minikube（适用于 Windows、macOS 和 Linux）：
- en: Navigate to minikube’s *releases* page on GitHub at [https://github.com/kubernetes/minikube/releases/](B17979_02.xhtml#_idTextAnchor038).
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 GitHub 上 minikube 的 *releases* 页面：[https://github.com/kubernetes/minikube/releases/](B17979_02.xhtml#_idTextAnchor038)。
- en: 'Find the **Assets** section, which contains the minikube binaries for a given
    release:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到 **Assets** 部分，其中包含给定版本的 minikube 二进制文件：
- en: '![Figure 2.1 – A snippet of the minikube binaries from the GitHub releases
    page'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.1 – 来自 GitHub 发布页面的 minikube 二进制文件片段'
- en: '](img/Figure_2.1_B17979.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.1_B17979.jpg)'
- en: Figure 2.1 – A snippet of the minikube binaries from the GitHub releases page
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.1 – 来自 GitHub 发布页面的 minikube 二进制文件片段
- en: 'Under the `minikube`. If you are downloading the Linux binary, for example,
    you would run the following command:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `minikube` 下。如果您正在下载 Linux 二进制文件，例如，您将运行以下命令：
- en: '[PRE2]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To execute minikube, Linux and macOS users may need to add the executable bit
    by running the `chmod` command:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要执行 minikube，Linux 和 macOS 用户可能需要通过运行 `chmod` 命令添加可执行权限：
- en: '[PRE3]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`minikube` should then be moved to a location that’s managed by the `PATH`
    variable so that it can be executed from any location in your command line. The
    locations that the `PATH` variable contains vary, depending on your operating
    system. For macOS and Linux users, these locations can be determined by running
    the following command in the Terminal:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，`minikube` 应该被移动到由 `PATH` 变量管理的位置，以便可以在命令行的任何位置执行。`PATH` 变量包含的位置会有所不同，具体取决于您的操作系统。对于
    macOS 和 Linux 用户，可以通过在终端运行以下命令来确定这些位置：
- en: '[PRE4]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Windows users can determine the `PATH` variable’s locations by running the
    following command in PowerShell:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 用户可以通过在 PowerShell 中运行以下命令来确定 `PATH` 变量的位置：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Move the `minikube` binary to a `PATH` location using the `mv` command. The
    following example moves `minikube` to a common `PATH` location on Linux:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `mv` 命令将 `minikube` 二进制文件移动到 `PATH` 位置。以下示例将 `minikube` 移动到 Linux 上的常见 `PATH`
    位置：
- en: '[PRE6]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can verify your minikube installation by running `minikube version` and
    ensuring that the displayed version corresponds with the version that was downloaded:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过运行 `minikube version` 来验证 minikube 是否已正确安装，并确保显示的版本与下载的版本相符：
- en: '[PRE7]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The next step involves installing a container or virtual machine manager to
    run your local Kubernetes cluster. In this book, we will choose to run Kubernetes
    in a VM using VirtualBox since it is flexible and available on the Windows, macOS,
    and Linux operating systems. We will explain how to install VirtualBox next.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是安装容器或虚拟机管理器，以便运行本地 Kubernetes 集群。本书中，我们将选择通过 VirtualBox 在虚拟机中运行 Kubernetes，因为它灵活且可在
    Windows、macOS 和 Linux 操作系统上使用。接下来我们将解释如何安装 VirtualBox。
- en: Installing VirtualBox
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 VirtualBox
- en: 'Like minikube, VirtualBox can easily be installed via Chocolatey or Homebrew:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 像 minikube 一样，VirtualBox 也可以通过 Chocolatey 或 Homebrew 轻松安装：
- en: 'Use the following command to install VirtualBox on Windows:'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下命令在 Windows 上安装 VirtualBox：
- en: '[PRE8]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Use the following command to install VirtualBox on macOS:'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下命令在 macOS 上安装 VirtualBox：
- en: '[PRE9]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'VirtualBox can also be installed by Linux package managers, but you need to
    download a package first from VirtualBox’s website (https://www.virtualbox.org/wiki/Linux_Downloads):'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: VirtualBox 也可以通过 Linux 包管理器安装，但您需要先从 VirtualBox 的官方网站（https://www.virtualbox.org/wiki/Linux_Downloads）下载一个包：
- en: '![Figure 2.2 – VirtualBox package download links'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.2 – VirtualBox 包下载链接'
- en: '](img/Figure_2.2_B17979.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.2_B17979.jpg)'
- en: Figure 2.2 – VirtualBox package download links
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.2 – VirtualBox 包下载链接
- en: 'Once you have downloaded your distribution’s package, you can install VirtualBox
    via `apt-get` or `dnf`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 下载完分发包后，您可以通过 `apt-get` 或 `dnf` 安装 VirtualBox：
- en: 'Use the following command to install VirtualBox on Debian-based Linux:'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下命令在基于 Debian 的 Linux 系统上安装 VirtualBox：
- en: '[PRE10]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Use the following command to install VirtualBox on RPM-based Linux:'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下命令在基于 RPM 的 Linux 上安装 VirtualBox：
- en: '[PRE11]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Alternative methods of installing VirtualBox can be found at its official download
    page at https://www.virtualbox.org/wiki/Downloads.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在其官方下载页面 https://www.virtualbox.org/wiki/Downloads 上找到安装 VirtualBox 的替代方法。
- en: With VirtualBox installed, minikube must be configured to leverage VirtualBox
    as its default hypervisor. We will configure this in the next section.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了 VirtualBox 后，minikube 必须配置为使用 VirtualBox 作为默认的虚拟化程序。我们将在下一部分进行配置。
- en: Configuring VirtualBox as the default driver
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置 VirtualBox 为默认驱动程序
- en: 'VirtualBox can be made the default driver in minikube by specifying the `driver`
    option as `virtualbox`:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过将 `driver` 选项指定为 `virtualbox` 来将 VirtualBox 设置为 minikube 的默认驱动程序：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Note that this command may produce the following warning:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此命令可能会产生以下警告：
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This message can be safely ignored if there are no active minikube clusters
    on your machine.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的机器上没有活动的 minikube 集群，可以安全忽略此消息。
- en: 'The change to VirtualBox can be confirmed by checking the value of the `driver`
    configuration option:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过检查 `driver` 配置选项的值来确认是否已更改为 VirtualBox：
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If the configuration change was successful, the following output will be displayed:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果配置更改成功，将显示以下输出：
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In addition to configuring the default driver, you can also configure the resources
    that are allocated to a minikube instance, which we will discuss in the next section.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 除了配置默认驱动程序外，你还可以配置分配给 minikube 实例的资源，我们将在下一部分进行讨论。
- en: Configuring minikube resource allocation
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置 minikube 资源分配
- en: By default, minikube will allocate 2 CPUs and 2 GB of RAM to the VM, but we
    recommend increasing the memory allocation to 4 GB if your machine has the resources
    to spare. This is to prevent bumping into memory constraints as you run through
    the exercises.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，minikube 会为虚拟机分配 2 个 CPU 和 2 GB 内存，但如果你的机器资源允许，我们建议将内存分配增加到 4 GB。这样可以避免在执行练习时遇到内存限制。
- en: 'Run the following command to increase the VM memory allocation to 4 GB:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令将虚拟机内存分配增加到 4 GB：
- en: '[PRE16]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This change can be verified by running the following command:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过运行以下命令来验证此更改：
- en: '[PRE17]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Let’s continue exploring minikube by discussing its basic usage.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续通过讨论 minikube 的基本用法来深入了解它。
- en: Exploring the basic usage of minikube
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索 minikube 的基本用法
- en: Throughout this book, it will be handy to understand the key commands that are
    used in a typical minikube operation. They will also be essential to understand
    while executing the examples provided throughout this book. Fortunately, minikube
    is an easy tool to get started with.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中，我们将介绍一些典型的 minikube 操作中常用的关键命令。理解这些命令非常重要，尤其是在执行本书提供的示例时。幸运的是，minikube 是一个非常容易上手的工具。
- en: 'minikube has three key subcommands:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: minikube 有三个主要的子命令：
- en: '`start`'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`start`'
- en: '`stop`'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stop`'
- en: '`delete`'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`delete`'
- en: 'The `start` subcommand is used to create a single-node Kubernetes cluster.
    It creates a VM and bootstraps a cluster within it. The command will terminate
    once the cluster is ready:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`start` 子命令用于创建一个单节点 Kubernetes 集群。它会创建一个虚拟机并在其中初始化集群。集群准备好后，命令会结束：'
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The `stop` subcommand is used to shut down the cluster and the VM. The state
    of the cluster and VM are saved to the disk, allowing users to run the `start`
    subcommand again to quickly begin resuming their work, rather than having to build
    a new VM from scratch. You should try to get into the habit of running `minikube
    stop` when you have finished working with a cluster that you would like to return
    to later:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`stop` 子命令用于关闭集群和虚拟机。集群和虚拟机的状态会保存到磁盘中，允许用户再次运行 `start` 子命令快速恢复工作，而不必从头开始构建新的虚拟机。你应该养成在完成集群工作并希望稍后继续时运行
    `minikube stop` 的习惯：'
- en: '[PRE19]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The `delete` subcommand is used to delete a cluster and the VM. This command
    erases the state of the cluster and VM, freeing up the space on the disk that
    was previously allocated. The next time `minikube start` is executed, a fresh
    cluster and VM will be created:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`delete` 子命令用于删除集群和虚拟机。此命令会清除集群和虚拟机的状态，释放先前分配的磁盘空间。下次执行 `minikube start` 时，将创建一个全新的集群和虚拟机：'
- en: '[PRE20]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: There are more minikube subcommands available, but these are the subcommands
    that you should be aware of.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更多的 minikube 子命令可用，但这些是你需要了解的主要子命令。
- en: With minikube installed and configured on a local machine, you can now install
    **kubectl**, the Kubernetes command-line tool, and satisfy the remaining prerequisite
    for working with Helm.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地机器上安装并配置了 minikube 后，你现在可以安装 **kubectl**，即 Kubernetes 命令行工具，并满足使用 Helm 所需的其余前提条件。
- en: Setting up kubectl
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 kubectl
- en: As we mentioned in [*Chapter 1*](B17979_01.xhtml#_idTextAnchor015), *Understanding
    Kubernetes and Helm*, Kubernetes is a system that exposes different API endpoints.
    These API endpoints are used to perform various actions on a cluster, such as
    creating, viewing, or deleting resources. To provide a simpler user experience,
    developers need a way of interacting with Kubernetes without having to manage
    the underlying API layer.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在 [*第 1 章*](B17979_01.xhtml#_idTextAnchor015) 中提到的，*理解 Kubernetes 和 Helm*，Kubernetes
    是一个暴露不同 API 端点的系统。这些 API 端点用于对集群执行各种操作，例如创建、查看或删除资源。为了提供更简便的用户体验，开发人员需要一种与 Kubernetes
    交互的方式，而无需管理底层的 API 层。
- en: While you will predominantly use the Helm command-line tool throughout this
    book to install and manage applications, kubectl is an essential tool for common
    tasks.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你将在本书中主要使用 Helm 命令行工具来安装和管理应用程序，但 kubectl 是执行常见任务的必备工具。
- en: Read on to learn how to install kubectl on a local workstation. Note that the
    kubectl version that was used at the time of writing was v1.21.2.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 继续阅读以了解如何在本地工作站上安装 kubectl。请注意，撰写本文时使用的 kubectl 版本是 v1.21.2。
- en: Installing kubectl
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 kubectl
- en: kubectl can be installed using minikube, or it can be obtained via a package
    manager or through direct download. First, let’s describe how to obtain kubectl
    using minikube.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: kubectl 可以通过 minikube 安装，也可以通过包管理器获取或通过直接下载获取。首先，让我们描述一下如何通过 minikube 获取 kubectl。
- en: Installing kubectl via minikube
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过 minikube 安装 kubectl
- en: 'Installing kubectl is straightforward with minikube. minikube provides a subcommand
    called `kubectl`, which downloads the kubectl binary for you. Begin by running
    a `kubectl` command using `minikube kubectl`:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 minikube 安装 kubectl 非常简单。minikube 提供了一个名为 `kubectl` 的子命令，它会为你下载 kubectl 二进制文件。首先，使用
    `minikube kubectl` 运行一个 `kubectl` 命令：
- en: '[PRE21]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This command installs kubectl to the `$HOME/.minikube/cache/linux/v1.21.2`
    directory. Note that the version of kubectl that’s included in the path will depend
    on the version of minikube that is being used. To access kubectl once it has been
    installed, use the following syntax:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将 kubectl 安装到 `$HOME/.minikube/cache/linux/v1.21.2` 目录中。请注意，路径中包含的 kubectl
    版本将取决于所使用的 minikube 版本。安装完 kubectl 后，使用以下语法访问 kubectl：
- en: '[PRE22]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Here’s an example command:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例命令：
- en: '[PRE23]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'While invoking kubectl with `minikube kubectl` works, the syntax is more unwieldy
    than that of invoking kubectl directly. This can be overcome by copying the `kubectl`
    executable from the local minikube cache into a location that’s managed by the
    `PATH` variable. Performing this action is similar on each operating system, but
    the following is an example of how it can be achieved on a Linux machine:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然使用 `minikube kubectl` 调用 kubectl 可行，但语法比直接调用 kubectl 更繁琐。可以通过将 `kubectl` 可执行文件从本地
    minikube 缓存复制到由 `PATH` 变量管理的位置来克服这一问题。在每个操作系统中执行此操作的方式相似，下面是如何在 Linux 机器上实现这一点的示例：
- en: '[PRE24]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Once complete, `kubectl` can be invoked as a standalone binary, as illustrated
    here:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，`kubectl` 可以作为独立的二进制文件调用，如下所示：
- en: '[PRE25]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '`kubectl` can also be installed without `minikube`, as we’ll see in the following
    sections.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`kubectl` 也可以在没有 `minikube` 的情况下安装，正如我们在接下来的章节中将看到的那样。'
- en: Installing kubectl without minikube
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在没有 minikube 的情况下安装 kubectl
- en: The Kubernetes upstream documentation provides several different mechanisms
    to do so for a variety of target operating systems, as described in https://kubernetes.io/docs/tasks/tools/install-kubectl/.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 上游文档提供了多种不同的机制来实现这一目标，适用于各种目标操作系统，具体内容请参见 https://kubernetes.io/docs/tasks/tools/install-kubectl/。
- en: Using a package manager
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用包管理器
- en: 'Another way that kubectl can be installed without minikube is with a native
    package manager. The following list demonstrates how this can be accomplished
    on different operating systems:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种不通过 minikube 安装 kubectl 的方式是使用本地包管理器。以下列表演示了在不同操作系统上如何实现：
- en: 'Use the following command to install kubectl on Windows:'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下命令在 Windows 上安装 kubectl：
- en: '[PRE26]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Use the following command to install kubectl on macOS:'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下命令在 macOS 上安装 kubectl：
- en: '[PRE27]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Use the following command to install kubectl on Debian-based Linux:'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下命令在基于 Debian 的 Linux 上安装 kubectl：
- en: '[PRE28]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Use the following command to install kubectl on RPM-based Linux:'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下命令在基于 RPM 的 Linux 上安装 kubectl：
- en: '[PRE29]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: We will discuss the final kubectl installation method next.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们将讨论最终的 kubectl 安装方法。
- en: Downloading directly from a link
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 直接从链接下载
- en: 'kubectl can also be downloaded directly from a download link. The following
    list explains how version v1.21.2 can be downloaded, which is the version of kubectl
    that will be used throughout this book:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以通过直接从下载链接下载 kubectl。以下列表解释了如何下载版本 v1.21.2，这是本书中将使用的 kubectl 版本：
- en: Download kubectl for Windows from [https://storage.googleapis.com/kubernetes-release/release/v1.21.2/bin/windows/amd64/kubectl.exe](B17979_02.xhtml#_idTextAnchor082).
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 [https://storage.googleapis.com/kubernetes-release/release/v1.21.2/bin/windows/amd64/kubectl.exe](B17979_02.xhtml#_idTextAnchor082)
    下载适用于 Windows 的 kubectl。
- en: Download kubectl for macOS from [https://storage.googleapis.com/kubernetes-release/release/v1.21.2/bin/darwin/amd64/kubectl](B17979_02.xhtml#_idTextAnchor081).
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 [https://storage.googleapis.com/kubernetes-release/release/v1.21.2/bin/darwin/amd64/kubectl](B17979_02.xhtml#_idTextAnchor081)
    下载适用于 macOS 的 kubectl。
- en: Download kubectl for Linux from [https://storage.googleapis.com/kubernetes-release/release/v1.21.2/bin/linux/amd64/kubectl](B17979_02.xhtml#_idTextAnchor080).
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 [https://storage.googleapis.com/kubernetes-release/release/v1.21.2/bin/linux/amd64/kubectl](B17979_02.xhtml#_idTextAnchor080)
    下载适用于 Linux 的 kubectl。
- en: 'The kubectl binary can then be moved to a location that’s managed by the `PATH`
    variable. On the macOS and Linux operating systems, be sure to grant the file
    executable permission:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，kubectl 二进制文件可以移动到 `PATH` 变量管理的路径中。在 macOS 和 Linux 操作系统上，确保授予文件可执行权限：
- en: '[PRE30]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The installation can be verified by running the following command.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过运行以下命令来验证安装是否成功。
- en: '[PRE31]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Now that we’ve covered how to set up kubectl, we’re ready to get into the key
    technology of this book – Helm.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了如何设置 kubectl，接下来可以深入本书的核心技术——Helm。
- en: Setting up Helm
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Helm
- en: Once minikube and kubectl have been installed, the next logical tool to configure
    is Helm. Note that the version of Helm that was used at the time of writing this
    book was v3.6.3.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 minikube 和 kubectl 安装完成，下一个需要配置的工具就是 Helm。请注意，本书写作时使用的 Helm 版本为 v3.6.3。
- en: Installing Helm
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Helm
- en: 'Packages for Helm exist for both `Chocolatey` and `Homebrew` to allow you to
    easily install it on Windows or macOS. On these systems, the following commands
    can be run to install Helm with the applicable package manager:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: Helm 的安装包可以通过 `Chocolatey` 和 `Homebrew` 获取，从而让您在 Windows 或 macOS 上轻松安装它。在这些系统上，可以运行以下命令使用适当的软件包管理器安装
    Helm：
- en: 'Install Helm on Windows using the following command:'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下命令在 Windows 上安装 Helm：
- en: '[PRE32]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Install Helm on macOS using the following command:'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下命令在 macOS 上安装 Helm：
- en: '[PRE33]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Linux users, or users who would rather install Helm from a direct downloadable
    link, can download an archive from Helm’s GitHub releases page by following these
    steps:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 用户，或希望从直接下载链接安装 Helm 的用户，可以通过以下步骤从 Helm 的 GitHub 发布页面下载归档文件：
- en: 'Find the **Installation and Upgrading** section on Helm’s GitHub releases page
    at https://github.com/helm/helm/releases:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Helm 的 GitHub 发布页面上找到 **安装与升级** 部分，网址为 https://github.com/helm/helm/releases：
- en: '![Figure 2.3 – The Installation and Upgrading section on the Helm GitHub releases
    page'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.3 – Helm GitHub 发布页面上的安装与升级部分'
- en: '](img/Figure_2.3_B17979.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.3_B17979.jpg)'
- en: Figure 2.3 – The Installation and Upgrading section on the Helm GitHub releases
    page
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.3 – Helm GitHub 发布页面上的安装与升级部分
- en: Download the archive file associated with your operating system.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载与您的操作系统相关的归档文件。
- en: 'Once downloaded, the file will need to be unarchived. One way that this can
    be achieved is by using the `Expand-Archive` cmdlet on PowerShell or by using
    the `tar` utility on Bash:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载完成后，文件需要解压。可以通过在 PowerShell 中使用 `Expand-Archive` cmdlet 或在 Bash 中使用 `tar`
    工具来实现：
- en: 'For Windows/PowerShell, use the following example code:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Windows/PowerShell，请使用以下示例代码：
- en: '[PRE34]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'For Linux, use the following example code:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Linux，请使用以下示例代码：
- en: '[PRE35]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'For Mac, use the following example code:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Mac，请使用以下示例代码：
- en: '[PRE36]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The `helm` binary can be found in the unarchived folder. It should be moved
    to a location that’s managed by the `PATH` variable.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`helm` 二进制文件可以在解压后的文件夹中找到，应该将其移动到 `PATH` 变量管理的路径中。'
- en: 'The following example illustrates how to move the `helm` binary to the `/usr/local/bin`
    folder on a Linux system:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了如何将 `helm` 二进制文件移动到 Linux 系统中的 `/usr/local/bin` 文件夹：
- en: '[PRE37]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Regardless of the method that Helm was installed with, verification can be
    performed by running the `helm version` command. If the resulting output is similar
    to that of the following code, then Helm has been successfully installed:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 无论 Helm 是通过何种方式安装的，都可以通过运行`helm version`命令进行验证。如果结果输出类似于以下代码，则表示 Helm 已成功安装：
- en: '[PRE38]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: With Helm installed on your machine, let’s learn about the basic Helm configuration
    topics.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的机器上安装了 Helm 后，让我们学习基本的 Helm 配置主题。
- en: Configuring Helm
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 Helm
- en: Helm is a tool with sensible defaults that allow users to be productive without
    needing to perform a large number of tasks post-installation. With that being
    said, there are several different options users can change or enable to modify
    Helm’s behavior. We will cover these options in the following sections, beginning
    with configuring upstream repositories.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Helm 是一个具有合理默认设置的工具，允许用户在安装后无需执行大量操作即可提高生产力。话虽如此，用户可以更改或启用几种不同的选项，以修改 Helm 的行为。我们将在以下各节中介绍这些选项，首先从配置上游仓库开始。
- en: Adding upstream repositories
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加上游仓库
- en: One way that users can begin to configure their Helm installation is by adding
    upstream chart repositories. In [*Chapter 1*](B17979_01.xhtml#_idTextAnchor015),
    *Understanding Kubernetes and Helm*, we described how chart repositories contain
    Helm charts that are more broadly available for consumption. Helm, being the Kubernetes
    package manager, can connect to various chart repositories to install Kubernetes
    applications.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以开始配置他们的 Helm 安装的一种方法是通过添加上游图表仓库。在 [*第1章*](B17979_01.xhtml#_idTextAnchor015)，*理解
    Kubernetes 和 Helm* 中，我们描述了图表仓库包含 Helm 图表，这些图表可以更广泛地供使用。作为 Kubernetes 包管理器，Helm
    可以连接到各种图表仓库以安装 Kubernetes 应用程序。
- en: Helm provides the `repo` subcommand to allow users to manage configured chart
    repositories. This subcommand contains additional subcommands that can be used
    to perform actions against specified repositories.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Helm 提供了`repo`子命令，允许用户管理已配置的图表仓库。此子命令包含其他子命令，可用于对指定的仓库执行操作。
- en: 'Here are the five `repo` subcommands:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是五个`repo`子命令：
- en: '`add`: To add a chart repository'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`add`：添加一个图表仓库'
- en: '`list`: To list chart repositories'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list`：列出图表仓库'
- en: '`remove`: To remove a chart repository'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`remove`：删除一个图表仓库'
- en: '`update`: To update information on available charts locally from chart repositories'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`update`：从图表仓库本地更新可用图表的信息'
- en: '`index`: To generate an index file, given a directory containing packaged charts'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index`：根据包含打包图表的目录生成索引文件'
- en: 'Using the preceding list as a guide, adding a chart repository can be accomplished
    using the `add repo` subcommand, as follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前面的列表作为指南，可以通过使用`add repo`子命令来添加一个图表仓库，如下所示：
- en: '[PRE39]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Adding chart repositories is required before installing the charts contained
    within them. The specific steps to install charts from repositories will be discussed
    in detail throughout this book.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装包含的图表之前，需要添加图表仓库。本书将在后续章节中详细讨论从仓库安装图表的具体步骤。
- en: 'You can confirm whether a repository has been successfully added by leveraging
    the `list repo` subcommand:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用`list repo`子命令来确认仓库是否已成功添加：
- en: '[PRE40]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Repositories that have been added to the Helm client will appear in this output.
    The preceding example shows that a chart repository called `bitnami` was previously
    added, so it appears in the list of repositories known by the Helm client. If
    additional repositories are added, they will also appear in this output.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 已添加到 Helm 客户端的仓库将在此输出中显示。前面的示例显示名为`bitnami`的图表仓库已被添加，因此它出现在 Helm 客户端已知仓库的列表中。如果添加了其他仓库，它们也会出现在此输出中。
- en: 'Over time, updates to charts will be published and released to these repositories.
    Repository metadata is cached locally. As a result, Helm is not automatically
    aware of when a chart is updated. You can instruct Helm to check for updates from
    each configured repository by running the `update repo` subcommand. Once this
    command has been executed, you will be able to install the latest charts from
    each repository:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，图表的更新将发布并发布到这些仓库中。仓库的元数据会被本地缓存。因此，Helm 不会自动意识到图表何时更新。你可以通过运行`update
    repo`子命令来指示 Helm 检查每个配置仓库的更新。一旦执行了此命令，你将能够从每个仓库安装最新的图表：
- en: '[PRE41]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'You may also need to remove repositories that have been configured previously.
    This can be accomplished by using the `repo remove` subcommand:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还需要删除先前配置的仓库。可以通过使用`repo remove`子命令来完成：
- en: '[PRE42]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The last remaining `repo` subcommand form is `index`. This subcommand is used
    by repository and chart maintainers to publish new or updated charts. This task
    will be covered more extensively in [*Chapter 8*](B17979_08.xhtml#_idTextAnchor210),
    *Publishing to a Helm Chart Repository*.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个剩余的 `repo` 子命令形式是 `index`。该子命令由仓库和图表维护者用于发布新的或更新的图表。此任务将在 [*第 8 章*](B17979_08.xhtml#_idTextAnchor210)，*发布到
    Helm 图表仓库* 中进行更详细的讲解。
- en: Next, we will discuss Helm plugin configurations.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将讨论 Helm 插件的配置。
- en: Adding plugins
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加插件
- en: Plugins are add-on capabilities that can be used to provide additional features
    to Helm. Most users will not need to worry about plugins and plugin management
    with Helm. Helm is a powerful tool on its own and is complete with a full set
    of included features. With that being said, the Helm community maintains a variety
    of different plugins that can be used to enhance Helm’s capabilities outside of
    the core code base. Some of the more popular Helm plugins are listed within the
    Helm documentation at https://helm.sh/docs/community/related/.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 插件是可供 Helm 使用的附加功能，提供额外的特性。大多数用户不需要担心 Helm 插件及其管理。Helm 本身就是一个强大的工具，具备了完整的功能集。尽管如此，Helm
    社区仍然维护着多种插件，可以在核心代码之外扩展 Helm 的能力。部分流行的 Helm 插件在 Helm 文档中列出，网址为 https://helm.sh/docs/community/related/。
- en: 'Helm provides a `plugin` subcommand for managing plugins, which contain further
    subcommands, as described in the following table:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: Helm 提供了一个 `plugin` 子命令用于管理插件，插件包含进一步的子命令，具体内容如下表所示：
- en: '| **Plugin Subcommand** | **Description** | **Usage** |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| **插件子命令** | **描述** | **用法** |'
- en: '| `install` | Installs one or more Helm plugins | `helm plugin install $URL`
    |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| `install` | 安装一个或多个 Helm 插件 | `helm plugin install $URL` |'
- en: '| `list` | Lists installed Helm plugins | `helm plugin list` |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| `list` | 列出已安装的 Helm 插件 | `helm plugin list` |'
- en: '| `uninstall` | Uninstalls one or more Helm plugins | `helm plugin uninstall
    $PLUGIN` |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| `uninstall` | 卸载一个或多个 Helm 插件 | `helm plugin uninstall $PLUGIN` |'
- en: '| `update` | Updates one or more Helm plugins | `helm plugin update $PLUGIN`
    |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| `update` | 更新一个或多个 Helm 插件 | `helm plugin update $PLUGIN` |'
- en: Table 2.1 – Helm plugin subcommands
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 表 2.1 – Helm 插件子命令
- en: Plugins can provide a variety of different productivity enhancements.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 插件可以提供多种不同的生产力增强功能。
- en: 'The following are several examples of upstream plugins:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些上游插件的示例：
- en: '**Helm Diff**: Performs a diff between a deployed release and proposed Helm
    upgrade'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Helm Diff**：执行已部署发布与提议的 Helm 升级之间的差异比较'
- en: '**Helm Secrets**: Used to help conceal secrets from Helm charts'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Helm Secrets**：用于帮助隐藏 Helm 图表中的密钥'
- en: '**Helm Monitor**: Used to monitor a release and perform a rollback if certain
    events occur'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Helm Monitor**：用于监控发布并在发生某些事件时执行回滚'
- en: '**Helm Unittest**: Used to perform unit testing on a Helm chart'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Helm Unittest**：用于对 Helm 图表执行单元测试'
- en: We will continue discussing Helm configuration options by reviewing the different
    environment variables that can be set to change various aspects of Helm’s behavior.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续讨论 Helm 配置选项，通过回顾可以设置的不同环境变量来改变 Helm 行为的各个方面。
- en: Environment variables
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 环境变量
- en: Helm relies on the existence of environment variables to configure some of the
    low-level options. There are many variables you can configure, each of which can
    be seen in the `helm help` output.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: Helm 依赖环境变量的存在来配置一些底层选项。你可以配置许多变量，每个变量都可以在 `helm help` 输出中查看。
- en: 'A few environment variables are used for storing Helm metadata:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个环境变量用于存储 Helm 元数据：
- en: '`HELM_CACHE_HOME``XDG_CACHE_HOME`: Sets an alternative location for storing
    cached files'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HELM_CACHE_HOME``XDG_CACHE_HOME`：设置 Helm 缓存文件的替代存储位置'
- en: '`HELM_CONFIG_HOME``XDG_CONFIG_HOME`: Sets an alternative location for storing
    Helm configuration'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HELM_CONFIG_HOME``XDG_CONFIG_HOME`：设置 Helm 配置的替代存储位置'
- en: '`HELM_DATA_HOME``XDG_DATA_HOME`: Sets an alternative location for storing Helm
    data'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HELM_DATA_HOME``XDG_DATA_HOME`：设置 Helm 数据的替代存储位置'
- en: 'Helm adheres to the **XDG Base Directory Specification**, which is designed
    to provide a standardized way of defining where different files are located on
    an operating system’s filesystem. Based on the XDG specification, Helm automatically
    creates three different default directories on each operating system as required:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: Helm 遵循 **XDG 基本目录规范**，该规范旨在提供一种标准化方式来定义操作系统文件系统中不同文件的位置。基于 XDG 规范，Helm 会根据需要在每个操作系统上自动创建三个不同的默认目录：
- en: '| **Operating System** | **Cache Path** | **Configuration Path** | **Data Path**
    |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| **操作系统** | **缓存路径** | **配置路径** | **数据路径** |'
- en: '| Windows | `%TEMP%\helm` | `%APPDATA%\helm` | `%APPDATA%\helm` |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| Windows | `%TEMP%\helm` | `%APPDATA%\helm` | `%APPDATA%\helm` |'
- en: '| macOS | `$HOME/Library/Caches/helm` | `$HOME/Library/Preferences/helm` |
    `$HOME/Library/helm` |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| macOS | `$HOME/Library/Caches/helm` | `$HOME/Library/Preferences/helm` |
    `$HOME/Library/helm` |'
- en: '| Linux | `$HOME/.cache/helm` | `$HOME/.config/helm` | `$HOME/.local/share/helm`
    |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| Linux | `$HOME/.cache/helm` | `$HOME/.config/helm` | `$HOME/.local/share/helm`
    |'
- en: Table 2.2 – Default locations for Helm metadata
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 表 2.2 – Helm 元数据的默认位置
- en: Helm uses the `helm repo update` command.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: Helm 使用 `helm repo update` 命令。
- en: The **configuration path** is used to save repository information, such as the
    URL and credentials for authentication, if required. When a chart is installed
    but is not located in the local cache yet, Helm uses the configuration path to
    look up the URL of the chart repository. The chart is then downloaded from this
    URL.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '**配置路径** 用于保存存储库信息，如 URL 和身份验证所需的凭据。当安装一个 chart 但该 chart 尚未位于本地缓存中时，Helm 使用配置路径查找
    chart 存储库的 URL，然后从该 URL 下载 chart。'
- en: The `helm plugin install` command, the plugin itself is stored in this location.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '`helm plugin install` 命令，该插件本身存储在此位置。'
- en: 'Besides the Helm metadata paths, other environment variables are used for configuring
    regular Helm usage:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 Helm 元数据路径之外，还有其他环境变量用于配置常规的 Helm 使用：
- en: '`secret`, which Base64-encodes the state of a release in a Kubernetes `secret`.
    Other options include `configmap`, which stores state in a plaintext Kubernetes
    ConfigMap, `memory`, which stores the state in the local process’s memory, and
    `sql`, which stores state in a relational database.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`secret`，它以 Base64 编码 Kubernetes `secret` 中发布的状态。其他选项包括 `configmap`，它将状态存储在明文的
    Kubernetes 配置映射中，`memory`，它将状态存储在本地进程的内存中，以及 `sql`，它将状态存储在关系型数据库中。'
- en: '`HELM_NAMESPACE` environment variable is used to set the namespace in which
    Helm operations take place. This is a convenient environment variable to use as
    it prevents you from needing to pass the `--namespace` or `-n` flag on each Helm
    invocation.'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HELM_NAMESPACE` 环境变量用于设置 Helm 操作所发生的命名空间。这个环境变量非常方便，因为它避免了在每次调用 Helm 时都需要传递
    `--namespace` 或 `-n` 标志。'
- en: '`KUBECONFIG` environment variable is used to set the file that’s used for authentication
    to the Kubernetes cluster. If unset, the default value will be `~/.kube/config`.
    In most cases, users won’t need to modify this value.'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`KUBECONFIG` 环境变量用于设置用于 Kubernetes 集群身份验证的文件。如果未设置，该值默认为 `~/.kube/config`。在大多数情况下，用户无需修改该值。'
- en: Another component of Helm that can be configured is tab completion, as discussed
    next.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: Helm 的另一个可以配置的组件是 Tab 补全，如下所述。
- en: Tab completion
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Tab 补全
- en: Bash, Zsh, and Fish users can enable tab completion to simplify Helm usage.
    Tab completion allows Helm commands to be auto-completed when the *Tab* key is
    pressed, enabling users to perform tasks faster and helping prevent input mistakes.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: Bash、Zsh 和 Fish 用户可以启用 Tab 补全功能，从而简化 Helm 使用。Tab 补全允许在按下 *Tab* 键时自动完成 Helm 命令，使用户可以更快地执行任务，并帮助防止输入错误。
- en: This process is similar to how most modern terminal emulators behave by default.
    When the *Tab* key is pressed, terminals try to guess what arguments are needed
    next by observing the state of the command and the environment. For example, the
    `cd /usr/local/b` input can be tab-completed to `cd /usr/local/bin` in a Bash
    shell. Similarly, an input such as `helm upgrade hello-` can be tab-completed
    to read `helm upgrade hello-world`.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程类似于大多数现代终端仿真器默认的行为。当按下 *Tab* 键时，终端会通过观察命令和环境的状态来猜测接下来需要的参数。例如，`cd /usr/local/b`
    输入可以在 Bash shell 中通过自动补全变为 `cd /usr/local/bin`。类似地，像 `helm upgrade hello-` 这样的输入可以通过自动补全变为
    `helm upgrade hello-world`。
- en: 'Tab completion can be enabled by running one of the following commands, based
    on your shell of choice:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行以下命令，可以根据所选的 shell 启用 Tab 补全：
- en: 'For Bash users, run the following command:'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 Bash 用户，运行以下命令：
- en: '[PRE43]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'For Zsh users, run the following command:'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 Zsh 用户，运行以下命令：
- en: '[PRE44]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'For Fish users, run the following command:'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 Fish 用户，运行以下命令：
- en: '[PRE45]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Note that auto-completion will only exist in terminal windows that execute one
    of the preceding commands, so other open windows will need to run this command
    as well to experience the auto-completion feature.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，自动补全功能只会在执行了前述命令的终端窗口中生效，因此其他打开的窗口也需要运行该命令才能体验到自动补全功能。
- en: Authentication
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 身份验证
- en: Helm needs to be able to authenticate with a Kubernetes cluster to deploy and
    manage applications. It authenticates by referencing a `kubeconfig` file, which
    specifies different Kubernetes clusters and how to interact with them.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: Helm 需要能够与 Kubernetes 集群进行身份验证，以便部署和管理应用程序。它通过引用一个 `kubeconfig` 文件进行身份验证，该文件指定了不同的
    Kubernetes 集群及如何与它们进行交互。
- en: 'If you are using minikube, you will not need to configure authentication as
    minikube automatically configures a `kubeconfig` file each time a new cluster
    is created. If you are not running minikube, you will likely need to create a
    `kubeconfig` file or have one provided, depending on the Kubernetes distribution
    you are using. A `kubeconfig` file is comprised of three primary components:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 minikube，则无需配置身份验证，因为 minikube 每次创建新集群时都会自动配置 `kubeconfig` 文件。如果你没有使用
    minikube，则可能需要创建一个 `kubeconfig` 文件，或者根据你使用的 Kubernetes 发行版提供一个。`kubeconfig` 文件由三个主要组件组成：
- en: '**clusters**: Hostnames or IP addresses, along with a certificate authority'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**clusters**: 主机名或 IP 地址，以及证书颁发机构'
- en: '**users**: Authentication details'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**users**: 身份验证详细信息'
- en: '**contexts**: Binding between a cluster, users, and an active namespace'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**contexts**: 集群、用户与活动命名空间之间的绑定'
- en: 'A `kubeconfig` file, along with these three primary components, can be created
    by leveraging three different `kubectl` commands:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '`kubeconfig` 文件及其三个主要组件可以通过三个不同的 `kubectl` 命令创建：'
- en: 'The first command is `set-cluster`:'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个命令是 `set-cluster`：
- en: '[PRE46]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: The `set-cluster` command will define a `cluster` entry in the `kubeconfig`
    file. `set-context` is used to associate a credential with a cluster. Once an
    association between a credential and a cluster has been established, you will
    be able to authenticate to the specified cluster using the credential’s authentication
    method.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '`set-cluster` 命令将在 `kubeconfig` 文件中定义一个 `cluster` 条目。`set-context` 用于将凭证与集群关联。一旦凭证与集群之间建立了关联，你就可以使用凭证的身份验证方法进行集群身份验证。'
- en: 'The next command is `set-credentials`:'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下一个命令是 `set-credentials`：
- en: '[PRE47]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The `set-credentials` command will define the name of a user, along with its
    authentication method and details. This command can configure a username and password
    pair, client certificate, bearer token, or authentication provider to allow users
    and administrators to specify varying different methods of authentication.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '`set-credentials` 命令将定义用户的名称以及其身份验证方法和详细信息。此命令可以配置用户名和密码对、客户端证书、承载令牌或身份验证提供程序，以允许用户和管理员指定不同的身份验证方法。'
- en: 'Then, we have the `set-context` command:'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们有 `set-context` 命令：
- en: '[PRE48]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: The `set-context` command, as mentioned previously, specifies a name mapping
    between a `cluster`, `credential`, (user), and an active namespace. All invocations
    referencing a `kubeconfig` file target a specific context.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`set-context` 命令指定了 `cluster`、`credential`（用户）和活动命名空间之间的名称映射。所有引用 `kubeconfig`
    文件的调用都指向特定的上下文。
- en: 'The `kubectl config view` command can be used to view the `kubeconfig` file.
    Notice how the `clusters`, `contexts`, and `user` stanzas of `kubeconfig` correspond
    to the previously described commands, as shown in the following example:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '`kubectl config view` 命令可用于查看 `kubeconfig` 文件。请注意，`kubeconfig` 文件的 `clusters`、`contexts`
    和 `user` 部分如何与之前描述的命令对应，如下例所示：'
- en: '[PRE49]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Starting the minikube instance will automatically populate the contents of the
    `kubeconfig` file. Once this file is present, kubectl and Helm will be able to
    interact with a Kubernetes cluster.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 启动 minikube 实例将自动填充 `kubeconfig` 文件的内容。一旦此文件存在，kubectl 和 Helm 就能够与 Kubernetes
    集群进行交互。
- en: In the next section, we will discuss how authorization is handled against a
    Kubernetes cluster.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论如何处理对 Kubernetes 集群的授权。
- en: Authorization/RBAC
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 授权/RBAC
- en: While authentication is a means of confirming identity, authorization defines
    the actions that an authenticated user is allowed to perform. Kubernetes uses
    **role-based access control** (**RBAC**) to perform authorization on Kubernetes.
    RBAC is a system for designing roles and privileges that can be assigned to a
    given user or group of users. The actions a user is permitted to perform on Kubernetes
    depends on the roles that the user has been assigned.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 身份验证是确认身份的手段，而授权定义了身份验证用户可以执行的操作。Kubernetes 使用 **基于角色的访问控制** (**RBAC**) 来执行
    Kubernetes 的授权。RBAC 是一个设计角色和权限的系统，可以分配给特定的用户或用户组。用户在 Kubernetes 上被允许执行的操作取决于其被分配的角色。
- en: 'Kubernetes provides many different roles on the platform. Three common roles
    are listed here:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 提供了多种不同的角色。这里列出了三个常见的角色：
- en: '`cluster-admin`: This allows a user to perform any action against any resource
    throughout the cluster.'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cluster-admin`：允许用户对集群中的任何资源执行任何操作。'
- en: '`edit`: This allows a user to read and write to most resources within a namespace
    or a logical grouping of Kubernetes resources.'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`edit`：允许用户对命名空间或 Kubernetes 资源的逻辑分组内的大多数资源进行读写操作。'
- en: '`view`: This prevents a user from modifying existing resources. It only allows
    users to read resources within a namespace.'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`view`：这会阻止用户修改现有资源。它仅允许用户读取命名空间内的资源。'
- en: Since Helm authenticates to Kubernetes using the credentials defined in the
    `kubeconfig` file, Helm is given the same level of access. If `edit` access is
    allowed, Helm can be assumed to have sufficient permission to install applications,
    in most cases. With view access, Helm will not be able to install applications,
    as this level of access is read-only. It may also be unable to list details related
    to installed releases since `secrets` are used as the default storage driver.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Helm 使用 `kubeconfig` 文件中定义的凭证进行 Kubernetes 身份验证，因此 Helm 拥有相同级别的访问权限。如果允许
    `edit` 访问权限，通常可以认为 Helm 拥有足够的权限来安装应用程序。对于 `view` 访问权限，Helm 将无法安装应用程序，因为这种访问级别是只读的。它可能也无法列出已安装版本的详细信息，因为
    `secrets` 被用作默认存储驱动程序。
- en: 'Users that run minikube are given `cluster-admin` by default after instance
    creation. While this level of access would not be a best practice in a production
    environment, it is acceptable for learning and experimenting. If you are running
    Minikube, you will not have to worry about configuring authorization to follow
    along with both the concepts and examples provided in this book. If you are working
    with Kubernetes users that aren’t using minikube, you will need to make sure they
    are given at least the `edit` role to be able to deploy applications with Helm.
    This can be accomplished by asking an administrator to run the following command
    (where `$USER` is your Kubernetes user):'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 minikube 的用户在实例创建后默认被赋予 `cluster-admin` 角色。虽然在生产环境中这种访问级别不是最佳实践，但对于学习和实验来说是可以接受的。如果您在使用
    Minikube，您不需要担心配置授权即可跟随本书中的概念和示例。如果您与没有使用 minikube 的 Kubernetes 用户一起工作，您需要确保他们至少被授予
    `edit` 角色，以便能够使用 Helm 部署应用程序。可以通过请求管理员运行以下命令来实现此目的（其中 `$USER` 是您的 Kubernetes 用户）：
- en: '[PRE50]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Best practices around RBAC will be discussed in [*Chapter 12*](B17979_12.xhtml#_idTextAnchor270),
    *Helm Security Considerations*, when we discuss, in greater detail, the concepts
    related to security, including how to appropriately apply roles to prevent mistakes
    and actions of malicious intent in the cluster.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 RBAC 的最佳实践将在[*第12章*](B17979_12.xhtml#_idTextAnchor270)，*Helm 安全性注意事项*中进行讨论，我们将在该章节详细讨论与安全性相关的概念，包括如何正确地应用角色，以防止集群中的错误和恶意行为。
- en: Summary
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: There are a variety of different components you need to have available to start
    using Helm. In this chapter, you learned how to install minikube to provide a
    local Kubernetes cluster that can be used throughout this book. You also learned
    how to install kubectl, which is the official tool for interacting with the Kubernetes
    API. Finally, you learned how to install the Helm client and explored the various
    ways that Helm can be configured, including adding repositories and plugins, modifying
    environment variables, enabling tab completion, and configuring authentication
    and authorization against a Kubernetes cluster.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 开始使用 Helm 需要具备多种不同的组件。在本章中，您学习了如何安装 minikube 以提供一个本地的 Kubernetes 集群，这个集群可以在本书中使用。您还学习了如何安装
    kubectl，这是与 Kubernetes API 交互的官方工具。最后，您学习了如何安装 Helm 客户端，并探索了 Helm 可以配置的各种方式，包括添加仓库和插件、修改环境变量、启用标签补全以及配置与
    Kubernetes 集群的身份验证和授权。
- en: Now that you have the prerequisite tooling installed, you can begin learning
    how to deploy your first application with Helm. In the next chapter, you will
    install a Helm chart from an upstream chart repository, as well as learn about
    life cycle management and application configuration. After finishing that chapter,
    you will have an understanding of how Helm acts as the package manager for Kubernetes.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经安装了所需的工具，可以开始学习如何使用 Helm 部署第一个应用程序。在下一章中，您将从上游图表仓库安装 Helm 图表，并学习生命周期管理和应用程序配置。在完成该章节后，您将了解
    Helm 如何作为 Kubernetes 的包管理器。
- en: Further reading
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Check out the following links to learn more about the installation options
    that are available for minikube, kubectl, and Helm:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下链接，了解有关minikube、kubectl和Helm的安装选项：
- en: 'Minikube: https://kubernetes.io/docs/tasks/tools/install-minikube/'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Minikube：[https://kubernetes.io/docs/tasks/tools/install-minikube/](https://kubernetes.io/docs/tasks/tools/install-minikube/)
- en: 'kubectl: https://kubernetes.io/docs/tasks/tools/install-kubectl/'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: kubectl：[https://kubernetes.io/docs/tasks/tools/install-kubectl/](https://kubernetes.io/docs/tasks/tools/install-kubectl/)
- en: 'Helm: [https://helm.sh/docs/intro/install/](B17979_02.xhtml#_idTextAnchor076)'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Helm：[https://helm.sh/docs/intro/install/](B17979_02.xhtml#_idTextAnchor076)
- en: 'We covered various ways of configuring Helm post-installation. Check out the
    following links to learn more about these topics:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经介绍了多种安装后配置Helm的方法。查看以下链接，了解更多关于这些主题的信息：
- en: 'Repository management: [https://helm.sh/docs/intro/quickstart/#initialize-a-helm-chart-repository](B17979_02.xhtml#_idTextAnchor074)'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仓库管理：[https://helm.sh/docs/intro/quickstart/#initialize-a-helm-chart-repository](B17979_02.xhtml#_idTextAnchor074)
- en: 'Plugin management: https://helm.sh/docs/topics/plugins/'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插件管理：[https://helm.sh/docs/topics/plugins/](https://helm.sh/docs/topics/plugins/)
- en: 'Environment variables and the `helm help` output: [https://helm.sh/docs/helm/helm/](B17979_02.xhtml#_idTextAnchor072)'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 环境变量和`helm help`输出：[https://helm.sh/docs/helm/helm/](B17979_02.xhtml#_idTextAnchor072)
- en: 'Tab completion: [https://helm.sh/docs/helm/helm_completion/](B17979_02.xhtml#_idTextAnchor070)'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标签补全：[https://helm.sh/docs/helm/helm_completion/](B17979_02.xhtml#_idTextAnchor070)
- en: 'Authentication and authorization via the `kubeconfig` file: https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`kubeconfig`文件进行身份验证和授权：[https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/](https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/)
- en: Questions
  id: totrans-277
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Answer the following questions to test your knowledge of this chapter:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 回答以下问题，以测试你对本章内容的理解：
- en: How does Helm authenticate to a Kubernetes cluster?
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Helm如何进行Kubernetes集群身份验证？
- en: What mechanism is in place to provide authorization to the Helm client? How
    can an administrator manage these privileges?
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为Helm客户端提供授权的机制是什么？管理员如何管理这些权限？
- en: What is the purpose of the `helm repo add` command?
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`helm repo add`命令的作用是什么？'
- en: What are the three file paths that are used for storing Helm metadata? What
    does each path contain?
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用于存储Helm元数据的三个文件路径是什么？每个路径包含什么内容？
- en: How does Helm manage the state? What options are available to change how the
    state is stored?
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Helm如何管理状态？有哪些选项可以更改状态存储方式？

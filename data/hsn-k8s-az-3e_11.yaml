- en: 7\. Monitoring the AKS cluster and the application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7\. 监控AKS集群和应用程序
- en: Now that you know how to deploy applications on an AKS cluster, let's focus
    on how you can ensure that your cluster and applications remain available. In
    this chapter, you will learn how to monitor your cluster and the applications
    running on it. You'll explore how Kubernetes makes sure that your applications
    are running reliably using readiness and liveness probes.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道如何在AKS集群上部署应用程序，让我们集中讨论如何确保你的集群和应用程序保持可用。在本章中，你将学习如何监控集群和运行在其上的应用程序。你将探索Kubernetes如何通过就绪探针和存活探针确保你的应用程序可靠运行。
- en: You will also learn how **AKS Diagnostics** and **Azure Monitor** are used,
    and how they are integrated within the Azure portal. You will see how you can
    use AKS Diagnostics to monitor the status of the cluster itself, and how Azure
    Monitor helps monitor the pods on the cluster and allows you to get access to
    the logs of the pods at scale.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你还将学习**AKS诊断**和**Azure监视器**的使用方法，以及它们如何在Azure门户中集成。你将看到如何使用AKS诊断来监控集群本身的状态，以及Azure监视器如何帮助监控集群中的Pods，并允许你在大规模上访问Pods的日志。
- en: 'In brief, the following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，本章将涵盖以下主题：
- en: Monitoring and debugging applications using `kubectl`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`kubectl`监控和调试应用程序
- en: Reviewing metrics reported by Kubernetes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 审查Kubernetes报告的指标
- en: Reviewing metrics from Azure Monitor
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 审查来自Azure监视器的指标
- en: Let's start the chapter by reviewing some of the commands in `kubectl` that
    you can use to monitor your applications.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过回顾一些`kubectl`命令来开始本章内容，这些命令可以帮助你监控应用程序。
- en: Commands for monitoring applications
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用于监控应用程序的命令
- en: 'Monitoring the health of applications deployed on Kubernetes as well as the
    Kubernetes infrastructure itself is essential for providing a reliable service
    to your customers. There are two primary use cases for monitoring:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 监控部署在Kubernetes上的应用程序及其Kubernetes基础设施的健康状况，对于向客户提供可靠的服务至关重要。监控有两个主要的使用场景：
- en: Ongoing monitoring to get alerts if something is not behaving as expected
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续监控，获取异常警报
- en: Troubleshooting and debugging application errors
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 故障排除和调试应用程序错误
- en: 'When observing an application running on top of a Kubernetes cluster, you''ll
    need to examine multiple things in parallel, including containers, pods, services,
    and the nodes in the cluster. For ongoing monitoring, you''ll need a monitoring
    system such as Azure Monitor or Prometheus. Azure Monitor will be introduced later
    in this chapter. Prometheus ([https://prometheus.io/](https://prometheus.io/))
    is a popular open-source solution within the Kubernetes ecosystem to monitor Kubernetes
    environments. For troubleshooting, you''ll need to interact with the live cluster.
    The most common commands used for troubleshooting are as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在观察运行在Kubernetes集群上的应用程序时，你需要并行检查多个方面，包括容器、Pods、服务以及集群中的节点。对于持续监控，你需要使用像Azure监视器或Prometheus这样的监控系统。Azure监视器将在本章后续介绍。Prometheus（[https://prometheus.io/](https://prometheus.io/)）是Kubernetes生态系统中流行的开源解决方案，用于监控Kubernetes环境。对于故障排除，你需要与实时集群进行交互。最常用的故障排除命令如下：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Each of these commands will be described in detail later in this chapter.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章稍后将详细描述每个命令。
- en: 'To begin with the practical examples, recreate the guestbook example again
    using the following command:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始实际示例，使用以下命令重新创建guestbook示例：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: While the `create` command is running, you will watch its progress in the following
    sections. Let's start by exploring the `get` command.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在`create`命令运行时，你将观察其在以下部分的进度。让我们先来探索`get`命令。
- en: The kubectl get command
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`kubectl get`命令'
- en: To see the overall picture of deployed applications, `kubectl` provides the
    `get` command. The `get` command lists the resources that you specify. Resources
    can be pods, ReplicaSets, ingresses, nodes, deployments, secrets, and so on. You
    have already run this command in the previous chapters to verify that an application
    was ready for use.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看部署应用程序的整体情况，`kubectl`提供了`get`命令。`get`命令列出你指定的资源。资源可以是Pods、ReplicaSets、ingresses、节点、部署、机密等。你已经在前几章中运行过此命令，以验证应用程序是否已准备好使用。
- en: 'Perform the following steps:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: 'Run the following `get` command, which will get us the resources and their
    statuses:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下`get`命令，获取资源及其状态：
- en: '[PRE2]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This will show you all the deployments, ReplicaSets, pods, and services in
    your namespace:'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将显示你命名空间中的所有部署、ReplicaSets、Pods和服务：
- en: '![Output displaying all the resources running in the default namespace](img/B17338_07_01.jpg)'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![显示默认命名空间中所有资源的输出](img/B17338_07_01.jpg)'
- en: 'Figure 7.1: All the resources running in the default namespace'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.1：默认命名空间中运行的所有资源
- en: 'Focus your attention on the pods in your deployment. You can get the status
    of the pods with the following command:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 集中注意力查看你部署中的 pods。你可以使用以下命令获取 pods 的状态：
- en: '[PRE3]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You will see that only the pods are shown, as seen in *Figure 7.2*. Let''s
    investigate this in detail:'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将只看到 pods，如 *图 7.2* 所示。让我们详细查看：
- en: '![Checking the status of all the pods in the namespace](img/B17338_07_02.jpg)'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![检查命名空间中所有 pods 的状态](img/B17338_07_02.jpg)'
- en: 'Figure 7.2: All the pods in your namespace'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.2：你命名空间中的所有 pods
- en: The first column indicates the pod name, for example, `frontend-766d4f77cb-ds6gb`.
    The second column indicates how many containers in the pod are ready against the
    total number of containers in the pod. Readiness is defined via a readiness probe
    in Kubernetes. There is a dedicated section called *Readiness and liveness probes*
    later in this chapter.
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第一列显示 pod 名称，例如 `frontend-766d4f77cb-ds6gb`。第二列显示 pod 中有多少容器已经准备好，相对于 pod 中容器的总数。就绪状态通过
    Kubernetes 中的就绪探针定义。本章稍后会有一个专门的章节介绍 *就绪性和存活性探针*。
- en: The third column indicates the status, for example, `Pending`, `ContainerCreating`,
    `Running`, and so on. The fourth column indicates the number of restarts, while
    the fifth column indicates the age when the pod was asked to be created.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第三列显示状态，例如 `Pending`、`ContainerCreating`、`Running` 等。第四列显示重启次数，第五列显示创建 pod 时的年龄。
- en: 'If you need more information about your pod, you can add extra columns to the
    output of a `get` command by adding `-o wide` to the command like this:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你需要更多关于 pod 的信息，可以通过在命令中添加 `-o wide` 来扩展 `get` 命令的输出，像这样：
- en: '[PRE4]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This will show you additional information, as shown in *Figure 7.3*:'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将显示更多信息，如 *图 7.3* 所示：
- en: '![Getting additional details of all the pods in the namespace](img/B17338_07_03.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![获取命名空间中所有 pod 的额外详情](img/B17338_07_03.jpg)'
- en: 'Figure 7.3: Adding -o wide shows more details on the pods'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.3：添加 -o wide 显示 pods 的更多细节
- en: The extra columns include the IP address of the pod, the node it is running
    on, the nominated node, and readiness gates. A nominated node is only set when
    a higher-priority pod preempts a lower-priority pod. The nominated node field
    would then be set on the higher-priority pod. It signifies the node that the higher-priority
    pod will be scheduled once the lower-priority pod has terminated gracefully. A
    readiness gate is a way to introduce external system components as the readiness
    for a pod.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 额外的列包括 pod 的 IP 地址、它所运行的节点、提名节点和就绪门控。提名节点仅在高优先级 pod 抢占低优先级 pod 时设置。提名节点字段随后会设置在高优先级
    pod 上。这表示在低优先级 pod 平稳终止后，高优先级 pod 将会调度到此节点。就绪门控是一种将外部系统组件引入为 pod 就绪状态的方法。
- en: Executing a `get pods` command only shows the state of the current pod. As we
    will see next, things can fail at any of the states, and we need to use the `kubectl
    describe` command to dig deeper.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 执行 `get pods` 命令仅显示当前 pod 的状态。正如我们接下来将看到的，任何状态下都有可能发生失败，我们需要使用 `kubectl describe`
    命令来深入探讨。
- en: The kubectl describe command
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: kubectl describe 命令
- en: 'The `kubectl describe` command gives you a detailed view of the object you
    are describing. It contains the details of the object itself, as well as any recent
    events related to that object. While the `kubectl get events` command lists all
    the events for the entire namespace, with the `kubectl describe` command, you
    would get only the events for that specific object. If you are interested in just
    pods, you can use the following command:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`kubectl describe` 命令会提供你正在描述的对象的详细视图。它包含了该对象本身的细节，以及与该对象相关的任何最新事件。而 `kubectl
    get events` 命令列出了整个命名空间的所有事件，使用 `kubectl describe` 命令时，你只会看到与特定对象相关的事件。如果你只对 pods
    感兴趣，可以使用以下命令：'
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The preceding command lists all the information pertaining to all pods. This
    is typically too much information to contain in a typical shell.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令列出了与所有 pods 相关的所有信息。通常这些信息过于繁杂，无法在普通的 shell 中显示。
- en: 'If you want information on a particular pod, you can type the following:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只想查看特定 pod 的信息，可以输入以下命令：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-46
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can either use a slash or a space in between `pod` and `<pod-name>`. The
    following two commands will have the same output:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 `pod` 和 `<pod-name>` 之间使用斜杠或空格。以下两个命令将产生相同的输出：
- en: '`kubectl describe pod/<pod-name>`'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`kubectl describe pod/<pod-name>`'
- en: '`kubectl describe pod <pod-name>`'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`kubectl describe pod <pod-name>`'
- en: 'You will get an output similar to *Figure 7.4*, which will be explained in
    detail later:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你将得到一个类似于 *图 7.4* 的输出，稍后将详细解释：
- en: '![Describing an individual pod to show a detailed output of that object](img/B17338_07_04.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![描述单个 Pod，以显示该对象的详细输出](img/B17338_07_04.jpg)'
- en: 'Figure 7.4: Describing an object shows the detailed output of that object'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.4：描述一个对象，显示该对象的详细输出
- en: From the description, you can get the node on which the pod is running, how
    long it has been running, its internal IP address, the Docker image name, the
    ports exposed, the `env` variables, and the events (from within the past hour).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 从描述中，你可以获取 Pod 运行的节点、运行了多久、其内部 IP 地址、Docker 镜像名称、暴露的端口、`env` 变量以及事件（来自过去一小时内的事件）。
- en: 'In the preceding example, the pod name is `frontend-766d4f77cb-ds6gb`. As mentioned
    in *Chapter 1, Introduction to containers and Kubernetes*, it has the `<ReplicaSet
    name>-<random 5 chars>` format. The `replicaset` name itself is randomly generated
    from the deployment name front end: `<deployment name>-<random-string>`.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，Pod 的名称是 `frontend-766d4f77cb-ds6gb`。正如 *第 1 章，容器和 Kubernetes 入门* 中提到的，它采用
    `<ReplicaSet 名称>-<随机 5 个字符>` 格式。`replicaset` 名称本身是从前端的部署名称随机生成的：`<deployment 名称>-<随机字符串>`。
- en: '*Figure 7.5* shows the relationship between a deployment, a ReplicaSet, and
    pods:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7.5* 显示了部署、ReplicaSet 和 Pod 之间的关系：'
- en: '![A flowchart describing the relationship between a deployment, a ReplicaSet,
    and pods](img/B17338_07_05.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![描述部署、ReplicaSet 和 Pod 之间关系的流程图](img/B17338_07_05.jpg)'
- en: 'Figure 7.5: Relationship between a deployment, a ReplicaSet, and pods'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.5：部署、ReplicaSet 和 Pod 之间的关系
- en: The namespace under which this pod runs is `default`. So far, you have just
    been using the `default` namespace, appropriately named `default`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 该 Pod 运行的命名空间是 `default`。到目前为止，你一直在使用名为 `default` 的命名空间。
- en: 'Another section that is important from the preceding output is the `node` section:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 来自前面输出的另一个重要部分是 `node` 部分：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `node` section lets you know which physical node/VM the pod is running on.
    If the pod is repeatedly restarting or having issues running and everything else
    seems OK, there might be an issue with the node itself. Having this information
    is essential to perform advanced debugging.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`node` 部分让你知道 Pod 正在运行的物理节点/虚拟机。如果 Pod 一直在重启或出现运行问题，而其他一切看起来正常，那可能是节点本身的问题。获得这些信息对于进行高级调试至关重要。'
- en: 'The following is the time the pod was initially scheduled:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 Pod 最初预定的时间：
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This doesn't mean that the pod has been running since that time, so the time
    can be misleading in that sense. If a health event occurs (for example, a container
    crashes), the pod will reset automatically.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不意味着 Pod 从那个时间点开始就一直在运行，所以从这个意义上来说，时间可能具有误导性。如果发生健康事件（例如，容器崩溃），Pod 会自动重置。
- en: 'You can add more information about a workload in Kubernetes using `Labels`,
    as shown here:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用 `Labels` 在 Kubernetes 中添加更多关于工作负载的信息，如下所示：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Labels are a commonly used functionality in Kubernetes. For example, this is
    how links between objects, such as `service` to `pod` and `deployment` to `ReplicaSet`
    to `pod` (*Figure 7.5*), are made. If you see that traffic is not being routed
    to a pod from a service, this is the first thing you should check. Also, you'll
    notice that the `pod-template-hash` label also occurs in the pod name. This is
    how the link between the ReplicaSet and the pod is made. If the labels don't match,
    the resources won't attach.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 标签是 Kubernetes 中常用的功能。例如，这就是如何在对象之间建立链接的方式，如 `service` 到 `pod` 和 `deployment`
    到 `ReplicaSet` 再到 `pod`（*图 7.5*）。如果你发现流量没有从服务路由到 Pod，这是你首先需要检查的地方。同时，你还会注意到 `pod-template-hash`
    标签也出现在 Pod 名称中。这就是 ReplicaSet 和 Pod 之间链接的方式。如果标签不匹配，资源将无法连接。
- en: 'The following shows the internal IP of the pod and its status:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以下显示的是 Pod 的内部 IP 和其状态：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As mentioned in previous chapters, when building out your application, the pods
    can be moved to different nodes and get a different IP, so you should avoid using
    these IP addresses. However, when debugging application issues, having a direct
    IP for a pod can help with troubleshooting. Instead of connecting to your application
    through a service object, you can connect directly from one pod to another using
    the other pod's IP address to test connectivity.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如前章所述，在构建应用程序时，Pod可能会迁移到不同的节点并获取不同的IP，因此应避免使用这些IP地址。然而，在调试应用程序问题时，获取Pod的直接IP有助于排查问题。你可以不通过服务对象连接到应用程序，而是通过直接连接到其他Pod的IP地址来测试连接性。
- en: 'The containers running in the pod and the ports that are exposed are listed
    in the following block:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在Pod中运行的容器以及暴露的端口列在以下代码块中：
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In this case, you are getting the `gb-frontend` container with the `v4` tag
    from the `gcr.io` container registry, and the repository name is `google-samples`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，你正在从`gcr.io`容器注册表获取`v4`标签的`gb-frontend`容器，仓库名称是`google-samples`。
- en: Port `80` is exposed to outside traffic. Since each pod has its own IP, the
    same port can be exposed for multiple instances of the same pod even when running
    on the same host. For instance, if you had two pods running a web server on the
    same node, both could use port `80`, since each pod has its own IP address. This
    is a huge management advantage as you don't have to worry about port collisions
    on the same node.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 端口`80`暴露给外部流量。由于每个Pod都有自己的IP地址，即使在同一主机上运行多个相同Pod的实例，仍然可以暴露相同的端口。例如，如果你有两个Pod在同一节点上运行Web服务器，它们都可以使用端口`80`，因为每个Pod都有自己的IP地址。这是一个巨大的管理优势，因为你不需要担心在同一节点上的端口冲突。
- en: 'Any events that occurred in the previous hour show up here:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 过去一小时内发生的任何事件都会显示在这里：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Using `kubectl describe` is very useful to get more context about the resources
    you are running. The final section contains events related to the object you were
    describing. You can get all events in your cluster using the `kubectl get events`
    command.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`kubectl describe`非常有助于获取有关你正在运行的资源的更多上下文。最后一部分包含与你描述的对象相关的事件。你可以使用`kubectl
    get events`命令获取集群中的所有事件。
- en: 'To see the events for all resources in the system, run the following command:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看系统中所有资源的事件，请运行以下命令：
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note
  id: totrans-80
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: Kubernetes maintains events for only 1 hour by default.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes默认只保留1小时的事件记录。
- en: 'If everything goes well, you should have an output similar to *Figure 7.6*:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，你应该会看到类似*图7.6*的输出：
- en: '![Running the kubectl get events command to display all events from the past
    hour](img/B17338_07_06.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![运行kubectl get events命令显示过去一小时的所有事件](img/B17338_07_06.jpg)'
- en: 'Figure 7.6: Getting the events shows all events from the past hour'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.6：获取事件显示过去一小时内的所有事件
- en: '*Figure 7.6* only shows the event for one pod, but as you can see in your output,
    the output for this command contains the events for all resources that were recently
    created, updated, or deleted.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '*图7.6*只显示了一个Pod的事件，但正如你在输出中看到的，这个命令的输出包含了最近创建、更新或删除的所有资源的事件。'
- en: In this section, you have learned about the commands you can use to inspect
    a Kubernetes application. In the next section, you'll focus on debugging application
    failures.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，你已经了解了可以用来检查Kubernetes应用程序的命令。在下一部分，你将专注于调试应用程序故障。
- en: Debugging applications
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调试应用程序
- en: Now that you have a basic understanding of how to inspect applications, you
    can start seeing how you can debug issues with deployments.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经基本了解了如何检查应用程序，你可以开始了解如何调试部署中的问题。
- en: In this section, common errors will be introduced, and you'll determine how
    to debug and fix them.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，将介绍常见错误，并帮助你确定如何调试和修复它们。
- en: 'If you haven''t implemented the Guestbook application already, run the following
    command:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有实现Guestbook应用程序，请运行以下命令：
- en: '[PRE14]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: After a couple of seconds, the application should be up and running.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 几秒钟后，应用程序应该能够正常运行。
- en: Image pull errors
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 镜像拉取错误
- en: In this section, you are going to introduce image pull errors by setting the
    image tag value to a non-existent one. An image pull error occurs when Kubernetes
    cannot download the image for the container it needs to run.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，你将通过将镜像标签值设置为一个不存在的标签来引入镜像拉取错误。当Kubernetes无法下载所需容器的镜像时，就会发生镜像拉取错误。
- en: 'Run the following command on Azure Cloud Shell:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Azure Cloud Shell中运行以下命令：
- en: '[PRE15]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Next, change the image tag from `v4` to `v_non_existent` by executing the following
    steps.
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来，执行以下步骤，将镜像标签从`v4`更改为`v_non_existent`。
- en: Type `/gb-frontend` and hit the *Enter* key to have your cursor brought to the
    image definition.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`/gb-frontend`并按下*Enter*键，将光标带到镜像定义位置。
- en: 'Hit the *I* key to go into insert mode. Delete `v4` and type `v_non_existent`
    as shown in *Figure 7.7*:'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 按下*I*键进入插入模式。删除 `v4` 并输入 `v_non_existent`，如*图 7.7*所示：
- en: '![Using Azure Cloud Shell to change the image tag from v4 to v_non_existent](img/B17338_07_07.jpg)'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![使用 Azure Cloud Shell 将镜像标签从 v4 更改为 v_non_existent](img/B17338_07_07.jpg)'
- en: 'Figure 7.7: Changing the image tag from v4 to v_non_existent'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.7：将镜像标签从 v4 更改为 v_non_existent
- en: Now, close the editor by first hitting the *Esc* key, then type `:wq!` and hit
    *Enter*.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，首先按下*Esc*键关闭编辑器，然后输入`:wq!`并按*Enter*键。
- en: 'Run the following command to list all the pods in the current namespace:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令以列出当前命名空间中的所有 pod：
- en: '[PRE16]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The preceding command should indicate errors, as shown in *Figure 7.8*:'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述命令应该会显示错误，如*图 7.8*所示：
- en: '![Displaying all the pods in the current namespace to indicate status errors](img/B17338_07_08.jpg)'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![显示当前命名空间中所有 pod 的状态错误](img/B17338_07_08.jpg)'
- en: 'Figure 7.8: One of the pods has the status of either ErrImagePull or ImagePullBackOff'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.8：其中一个 pod 的状态为 ErrImagePull 或 ImagePullBackOff
- en: You might see either a status called `ErrImagePull` or `ImagePullBackOff`. Both
    errors refer to the fact that Kubernetes cannot pull the image from the registry.
    The `ErrImagePull` error describes just this; `ImagePullBackOff` describes that
    Kubernetes will back off (wait) before retrying to download the image. This back-off
    has an exponential delay, going from 10 to 20 to 40 seconds and beyond, up to
    5 minutes.
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可能会看到 `ErrImagePull` 或 `ImagePullBackOff` 状态。这两种错误都表示 Kubernetes 无法从注册表中拉取镜像。`ErrImagePull`
    错误正是描述这一点；`ImagePullBackOff` 则表示 Kubernetes 会在重试下载镜像之前等待，这种回退有一个指数级的延迟，从 10 秒到
    20 秒到 40 秒，以此类推，最多可达 5 分钟。
- en: 'Run the following command to get the full error details:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令获取完整的错误细节：
- en: '[PRE17]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'A sample error output is shown in *Figure 7.9*. The key error message is highlighted
    in red:'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个示例错误输出显示在*图 7.9*中，关键的错误信息用红色标出：
- en: '![Describing an individual pod to display more details on the error](img/B17338_07_09.jpg)'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![描述单个 pod 显示更多的错误细节](img/B17338_07_09.jpg)'
- en: 'Figure 7.9: Using describe shows more details on the error'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.9：使用 describe 显示更多的错误细节
- en: The events clearly show that the image does not exist. Errors such as passing
    invalid credentials to private Docker repositories will also show up here.
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 事件清楚地显示镜像不存在。将无效凭证传递给私有 Docker 仓库等错误也会在此显示。
- en: 'Let''s fix the error by setting the image tag back to `v4`. First, type the
    following command in Cloud Shell to edit the deployment:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将镜像标签设置回`v4`来修复错误。首先，在 Cloud Shell 中输入以下命令以编辑部署：
- en: '[PRE18]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Type `/gb-frontend` and hit *Enter* to have your cursor brought to the image
    definition.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`/gb-frontend`并按下*Enter*键，将光标带到镜像定义位置。
- en: Hit the *I* key to go into insert mode. Delete `v_non_existent`, and type `v4`.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下*I*键进入插入模式。删除 `v_non_existent`，并输入 `v4`。
- en: Now, close the editor by first hitting the *Esc* key, then type `:wq!` and hit
    *Enter*.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，首先按下*Esc*键关闭编辑器，然后输入`:wq!`并按*Enter*键。
- en: This should automatically fix the deployment. You can verify it by getting the
    events for the pods again.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这应该会自动修复部署。你可以通过再次获取 pod 的事件来验证它。
- en: Note
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: Because Kubernetes did a rolling update, the front end was continuously available
    with zero downtime. Kubernetes recognized a problem with the new specification
    and stopped rolling out additional changes automatically.
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于 Kubernetes 进行了滚动更新，前端服务保持持续可用，且没有停机时间。Kubernetes 识别到新规范中的问题，并停止自动推送额外的更改。
- en: Image pull errors can occur when images aren't available or when you don't have
    access to the container registry. In the next section, you'll explore an error
    within the application itself.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 镜像拉取错误可能会发生在镜像不可用或无法访问容器注册表时。在接下来的章节中，你将探索应用程序本身的错误。
- en: Application errors
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用程序错误
- en: You will now see how to debug an application error. The errors in this section
    will be self- induced, similar to the last section. The method for debugging the
    issue is the same as the one we used to debug errors on running applications.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你将看到如何调试应用程序错误。本节中的错误将是自我引发的，类似于上一节。调试该问题的方法与我们用来调试正在运行的应用程序的错误相同。
- en: 'To start, get the public IP of the front-end service:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，获取前端服务的公共 IP：
- en: '[PRE19]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Connect to the service by pasting its public IP in a browser. Create a couple
    of entries:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将公共 IP 粘贴到浏览器中来连接到服务。创建几个条目：
- en: '![Creating entries in the guestbook application](img/B17338_07_10.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![在访客留言应用中创建条目](img/B17338_07_10.jpg)'
- en: 'Figure 7.10: Make a couple of entries in the guestbook application'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.10：在访客留言应用中添加几个条目
- en: You now have an instance of the guestbook application running. To improve the
    experience with the example, it's best to scale down the front end so there is
    only a single replica running.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经有一个运行中的访客留言应用实例。为了改善示例体验，最好缩减前端，使其只运行一个副本。
- en: Scaling down the front end
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缩减前端
- en: In *Chapter 3*, *Application deployment on AKS*, you learned how the deployment
    of the front end has a configuration of `replicas=3`. This means that the requests
    the application receives can be handled by any of the pods. To introduce the application
    error and note the errors, you'll need to make changes in all three of them.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第 3 章*，*在 AKS 上部署应用*中，你学到了前端部署的配置是`replicas=3`。这意味着应用接收到的请求可以由任何 pod 处理。为了引入应用错误并记录这些错误，你需要在所有三个
    pod 中进行更改。
- en: 'But to make this example easier, set `replicas` to `1`, so that you have to
    make changes to only one pod:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 但为了简化这个示例，将`replicas`设置为`1`，这样你只需要对一个 pod 进行更改：
- en: '[PRE20]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Having only one replica running will make introducing the error easier. Let's
    now introduce this error.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 只运行一个副本将使引入错误变得更加容易。现在我们来引入这个错误。
- en: Introducing an app error
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引入应用错误
- en: 'In this case, you are going to make the **Submit** button fail to work. You
    will need to modify the application code for this:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，你将使**提交**按钮无法工作。你需要修改应用代码来实现这一点：
- en: 'Note:'
  id: totrans-139
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意：
- en: It is not advised to make production changes to your application by using `kubectl
    exec` to execute commands in your pods. If you need to make changes to your application,
    the preferred way is to create a new container image and update your deployment.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 不建议通过使用`kubectl exec`在 pod 中执行命令来对应用进行生产环境中的更改。如果你需要更改应用，推荐的方式是创建一个新的容器镜像并更新你的部署。
- en: 'You will use the `kubectl exec` command. This command lets you run commands
    on the command line of that pod. With the `-it` option, it attaches an interactive
    terminal to the pod and gives you a shell that you can run commands on. The following
    command launches a Bash terminal on the pod:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将使用`kubectl exec`命令。此命令允许你在该 pod 的命令行上运行命令。使用`-it`选项，它将一个交互式终端附加到 pod 上，并为你提供一个可以运行命令的
    shell。以下命令将在 pod 上启动一个 Bash 终端：
- en: '[PRE21]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This will enter a Bash shell environment as shown in *Figure 7.11*:'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将进入一个 Bash shell 环境，如*图 7.11*所示：
- en: '![Executing a command to launch and enter a Bash terminal on the pod](img/B17338_07_11.jpg)'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![在 pod 中执行命令以启动并进入 Bash 终端](img/B17338_07_11.jpg)'
- en: 'Figure 7.11: Getting a pod''s name and getting access to a shell inside the
    pod'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.11：获取 pod 名称并访问 pod 内的 shell
- en: 'Once you are in the container shell, run the following command:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦进入容器 shell，运行以下命令：
- en: '[PRE22]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The preceding code installs the `vim` editor so that we can edit the file to
    introduce an error.
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上面的代码安装了`vim`编辑器，以便我们可以编辑文件并引入错误。
- en: 'Now, use `vim` to open the `guestbook.php` file:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用`vim`打开`guestbook.php`文件：
- en: '[PRE23]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Add the following code at line 17, below the line `if ($_GET[''cmd''] == ''set'')
    {`. Remember, to edit a line in `vim`, you hit the *I* key. After you are done
    editing, you can exit by hitting *Esc*, and then type `:wq!` and press *Enter*:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第 17 行，在`if ($_GET['cmd'] == 'set') {`下添加以下代码。记住，在`vim`中编辑一行时，按下*I*键。编辑完成后，按*Esc*键退出，然后输入`:wq!`并按*Enter*：
- en: '[PRE24]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The file will look like *Figure 7.12*:'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 文件将如下所示，如*图 7.12*所示：
- en: '![Output displaying the updated code that introduced an error and additional
    logging](img/B17338_07_12.jpg)'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![显示引入错误和附加日志记录的更新代码的输出](img/B17338_07_12.jpg)'
- en: 'Figure 7.12: The updated code that introduced an error and additional logging'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.12：引入错误和附加日志记录的更新代码
- en: You have now introduced an error where reading messages will work, but not writing
    them. You have done this by asking the front end to connect to the Redis master
    at the non-existent localhost server. The writes should fail. At the same time,
    to make this demo more visual, we added some additional logging to this section
    of the code.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你已经引入了一个错误，阅读消息会正常工作，但无法写入消息。你通过让前端连接到不存在的本地主机 Redis 主服务器来实现这一点。写入操作应该会失败。同时，为了让这个演示更加直观，我们在这段代码中添加了一些额外的日志记录。
- en: 'Open your guestbook application by browsing to its public IP, and you should
    see the entries from earlier:'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 打开你的访客留言应用，通过浏览其公共 IP 地址，你应该能看到之前的条目：
- en: '![Guestbook application displaying entries from earlier](img/B17338_07_10.jpg)'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![留言板应用程序显示先前的条目](img/B17338_07_10.jpg)'
- en: 'Figure 7.13: The entries from earlier are still present'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.13：先前的条目仍然存在
- en: Now, create a new message by typing a message and hitting the **Submit** button:![Creating
    a new message in the guestbook application](img/B17338_07_14.jpg)
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，通过输入一条消息并点击**提交**按钮来创建一条新消息：![在留言板应用程序中创建新消息](img/B17338_07_14.jpg)
- en: 'Figure 7.14: A new message was created'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.14：创建了新消息
- en: Submitting a new message makes it appear in the application. If you did not
    know any better, you would have thought the entry was written successfully to
    the database. However, if you refresh your browser, you will see that the message
    is no longer there.
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 提交新消息后，它会出现在应用程序中。如果你不了解，可能会认为条目已经成功写入数据库。然而，如果你刷新浏览器，你会看到消息已经不在了。
- en: 'To verify that the message has not been written to the database, hit the **Refresh**
    button in your browser; you will see just the initial entries, and the new entry
    has disappeared:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了验证消息没有写入数据库，请在浏览器中点击**刷新**按钮；你将只看到最初的条目，而新条目已经消失：
- en: '![Refreshing the webpage to confirm there the new message wasn’t persisted](img/B17338_07_15.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![刷新网页以确认新消息没有保存](img/B17338_07_15.jpg)'
- en: 'Figure 7.15: The new message has disappeared'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.15：新消息已消失
- en: 'As an app developer or operator, you''ll probably get a ticket like this: `After
    the new deployment, new entries are not persisted. Fix it`.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 作为应用程序开发人员或运维人员，你可能会收到这样的工单：`新部署后，新条目未保存。请修复此问题。`
- en: Using logs to identify the root cause
  id: totrans-167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用日志识别根本原因
- en: The first step toward resolution is to get the logs.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 解决的第一步是获取日志。
- en: 'Exit out of the front-end pod for now and get the logs for this pod:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在退出前端Pod并获取此Pod的日志：
- en: '[PRE25]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Note:'
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意：
- en: 'You can add the `-f` flag after `kubectl logs` to get a live log stream, as
    follows: `kubectl logs <pod-name> -f`. This is useful during live debugging sessions.'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以在`kubectl logs`后添加`-f`标志以获得实时日志流，命令如下：`kubectl logs <pod-name> -f`。在实时调试会话中非常有用。
- en: You will see entries such as those seen in *Figure 7.16*:![Output displaying
    the new message as part of the application logs](img/B17338_07_16.jpg)
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将看到像*图 7.16*中显示的条目：![显示新消息作为应用程序日志一部分的输出](img/B17338_07_16.jpg)
- en: 'Figure 7.16: The new message shows up as part of the application logs'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.16：新消息作为应用程序日志的一部分显示出来
- en: Hence, you know that the error is somewhere when writing to the database in
    the `set` section of the code. When you see the entry `hostname at the beginning
    of 'set' command localhost`, you know that the error is between this line and
    the start of the client, so the setting of `$host = 'localhost'` must be the offending
    error. This error is not as uncommon as you would think and, as you just saw,
    could have easily gone through QA unless there had been a specific instruction
    to refresh the browser. It could have worked perfectly well for the developer,
    as they could have a running Redis server on the local machine.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，你知道错误发生在写入数据库的代码的`set`部分。当你看到条目`hostname at the beginning of 'set' command
    localhost`时，你就知道错误发生在这一行和客户端开始之间，所以`$host = 'localhost'`的设置一定是引发错误的地方。这个错误并不像你想象的那样不常见，正如你刚才看到的，除非有特别的指示要求刷新浏览器，否则很容易通过QA。这对开发者来说可能是完全没问题的，因为他们可能在本地机器上运行了Redis服务器。
- en: Now that you have used logs in Kubernetes to root cause the issue, let's get
    to resolving the error and getting our application back to a healthy state.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经通过Kubernetes日志定位了问题的根本原因，让我们开始解决这个错误，并让应用程序恢复到健康状态。
- en: Solving the issue
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解决问题
- en: 'There are two options to fix this bug you introduced: you can either navigate
    into the pod and make the code changes, or you can ask Kubernetes to give us a
    healthy new pod. It is not recommended to make manual changes to pods, so in the
    next step, you will use the second approach. Let''s fix this bug by deleting the
    faulty pod:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以修复你引入的这个错误：你可以进入Pod并修改代码，或者你可以请求Kubernetes给我们一个健康的新Pod。我们不建议对Pod进行手动修改，因此在下一步中，你将使用第二种方法。让我们通过删除故障Pod来修复这个错误：
- en: '[PRE26]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: As there is a ReplicaSet that controls the pods, you should immediately get
    a new pod that has started from the correct image. Try to connect to the guestbook
    again and verify that messages persist across browser refreshes.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 由于有一个ReplicaSet控制着这些Pod，你应该立即获得一个新的Pod，该Pod从正确的镜像启动。尝试再次连接到留言板并验证消息是否能在浏览器刷新后仍然存在。
- en: 'The following points summarize what was covered in this section on how to identify
    an error and how to fix it:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 以下几点总结了本节内容，讲解了如何识别错误以及如何修复它：
- en: Errors can come in many shapes and forms.
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误可能以多种形式出现。
- en: Most of the errors encountered by the deployment team are configuration issues.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署团队遇到的大多数错误都是配置问题。
- en: Use logs to identify the root cause.
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用日志来识别根本原因。
- en: Using `kubectl exec` on a container is a useful debugging strategy.
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在容器上使用 `kubectl exec` 是一个有用的调试策略。
- en: Note that broadly allowing `kubectl exec` is a serious security risk, as it
    lets the Kubernetes operator execute commands directly in the pods they have access
    to. Make sure that only a subset of operators has the ability to use the `kubectl
    exec` command. You can use role-based access control to manage this access restriction,
    as you'll learn in *Chapter 8, Role-based access control in AKS*.
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请注意，广泛允许 `kubectl exec` 是一个严重的安全风险，因为它允许 Kubernetes 操作员直接在他们有权限访问的 pod 中执行命令。确保只有一部分操作员能够使用
    `kubectl exec` 命令。你可以使用基于角色的访问控制来管理这种访问限制，正如你将在*第8章、AKS中的基于角色的访问控制*中学到的那样。
- en: Anything printed to `stdout` and `stderr` shows up in the logs (independent
    of the application/language/logging framework).
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何打印到 `stdout` 和 `stderr` 的内容都会出现在日志中（与应用程序/语言/日志框架无关）。
- en: In this section, you introduced an application error to the guestbook application
    and leveraged Kubernetes logs to pinpoint the issue in the code. In the next section,
    you will learn about a powerful mechanism in Kubernetes called **readiness** and
    **liveness probes**.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你向留言本应用程序引入了一个应用程序错误，并利用 Kubernetes 日志来定位代码中的问题。在下一节中，你将学习 Kubernetes 中一个强大的机制，称为**就绪探针**和**存活探针**。
- en: Readiness and liveness probes
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 就绪探针和存活探针
- en: Readiness and liveness probes were briefly touched upon in the previous section.
    In this section, you'll explore them in more depth.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 就绪探针和存活探针在上一节中曾简要提到过。在本节中，你将更深入地探讨它们。
- en: 'Kubernetes uses liveness and readiness probes to monitor the availability of
    your applications. Each probe serves a different purpose:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 使用存活探针和就绪探针来监控应用程序的可用性。每个探针有不同的用途：
- en: A **liveness probe** monitors the availability of an application while it is
    running. If a liveness probe fails, Kubernetes will restart your pod. This could
    be useful to catch deadlocks, infinite loops, or just a "stuck" application.
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存活探针**监控应用程序在运行时的可用性。如果存活探针失败，Kubernetes 将重新启动你的 pod。这对于捕获死锁、无限循环或“卡住”的应用程序很有用。'
- en: A **readiness probe** monitors when your application becomes available. If a
    readiness probe fails, Kubernetes will not send any traffic to the unready pods.
    This is useful if your application has to go through some configuration before
    it becomes available, or if your application has become overloaded but is recovering
    from the additional load. By having a readiness probe fail, your application will
    temporarily not get any more traffic, giving it the ability to recover from the
    increased load.
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**就绪探针**监控应用程序何时变得可用。如果就绪探针失败，Kubernetes 将不会向未就绪的 pod 发送流量。这在应用程序需要通过某些配置才能变得可用，或者应用程序已超载但正在从额外负载中恢复时非常有用。通过让就绪探针失败，应用程序将暂时不会接收更多流量，从而给予其从负载增加中恢复的能力。'
- en: Liveness and readiness probes don't need to be served from the same endpoint
    in your application. If you have a smart application, that application could take
    itself out of rotation (meaning no more traffic is sent to the application) while
    still being healthy. To achieve this, it would have the readiness probe fail but
    have the liveness probe remain active.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 存活探针和就绪探针不需要从应用程序中的同一端点提供服务。如果你有一个智能应用程序，该应用程序可以在仍然健康的情况下将自己从轮换中移除（意味着不再向该应用程序发送流量）。为此，它会让就绪探针失败，但存活探针保持活动。
- en: Let's build this out in an example. You will create two nginx deployments, each
    with an index page and a health page. The index page will serve as the liveness
    probe.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个示例来构建这个过程。你将创建两个 nginx 部署，每个部署都有一个索引页面和一个健康检查页面。索引页面将用作存活探针。
- en: Building two web containers
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建两个 Web 容器
- en: 'For this example, you''ll use a couple of web pages that will be used to connect
    to a readiness and a liveness probe. The files are present in the code files for
    this chapter. Let''s first create `index1.html`:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，你将使用几个网页，这些网页将用来连接到就绪探针和存活探针。文件已包含在本章的代码文件中。让我们首先创建 `index1.html`：
- en: '[PRE27]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'After that, create `index2.html`:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，创建 `index2.html`：
- en: '[PRE28]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Let''s also create a health page, `healthy.html`:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以创建一个健康页面，`healthy.html`：
- en: '[PRE29]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In the next step, you''ll mount these files to your Kubernetes deployments.
    To do this, you''ll turn each of these into a `configmap` that you will connect
    to your pods. You''ve already learned about configmaps in *Chapter 3, Application
    deployment on AKS*. Use the following commands to create the `configmap`:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的步骤中，您将把这些文件挂载到 Kubernetes 部署中。为此，您将把这些文件转化为 `configmap`，并将其连接到您的 Pod。您已经在
    *第3章 AKS 上的应用程序部署* 中学习了 configmap。使用以下命令创建 `configmap`：
- en: '[PRE30]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'With that out of the way, you can go ahead and create your two web deployments.
    Both will be very similar, with just the `configmap` changing. The first deployment
    file (`webdeploy1.yaml`) looks like this:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 这样一来，您可以继续创建两个 Web 部署。两个部署非常相似，唯一的区别是 `configmap` 的不同。第一个部署文件（`webdeploy1.yaml`）如下所示：
- en: '[PRE31]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'There are a few things to highlight in this deployment:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在此部署中，有几个需要注意的地方：
- en: '**Lines 23-28**: This is the liveness probe. The liveness probe points to the
    health page. Remember, if the health page fails, the container will restart.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第23-28行**：这是存活探针。存活探针指向健康页面。记住，如果健康页面失败，容器将会重启。'
- en: '**Lines 29-32**: This is the readiness probe. The readiness probe in our case
    points to the index page. If this page fails, the pod will temporarily not be
    sent any traffic but will remain running.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第29-32行**：这是就绪探针。在我们的例子中，就绪探针指向索引页面。如果此页面失败，Pod 将暂时不接收任何流量，但会继续运行。'
- en: '`sleep` command (so the container keeps running).'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sleep` 命令（这样容器会继续运行）。'
- en: 'You can create this deployment using the following command. You can also deploy
    the second version for `server 2`, which is similar to `server 1`:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下命令创建该部署。您还可以部署第二个版本的 `server 2`，它与 `server 1` 类似：
- en: '[PRE32]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Finally, you can also create a service (`webservice.yaml`) that routes traffic
    to both deployments:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您还可以创建一个服务（`webservice.yaml`），该服务将流量路由到两个部署中：
- en: '[PRE33]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'You can create that service using the following:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下命令来创建该服务：
- en: '[PRE34]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: You now have the application up and running. In the next section, you'll introduce
    some failures to verify the behavior of the liveness and readiness probes.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您的应用程序已启动并运行。在下一部分中，您将引入一些故障，以验证存活探针和就绪探针的行为。
- en: Experimenting with liveness and readiness probes
  id: totrans-218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实验存活探针和就绪探针
- en: In the previous section, the functionality of the liveness and readiness probes
    was explained, and you created a sample application. In this section, you will
    introduce errors in this application and verify the behavior of the liveness and
    readiness probes. You will see how a failure of the readiness probe will cause
    the pod to remain running but no longer accept traffic. After that, you will see
    how a failure of the liveness probe will cause the pod to be restarted.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一部分中，我们解释了存活探针和就绪探针的功能，并创建了一个示例应用程序。在这一部分中，您将故意在应用程序中引入错误，并验证存活探针和就绪探针的行为。您将看到，就绪探针失败会导致
    Pod 继续运行，但不再接受流量。之后，您将看到存活探针失败会导致 Pod 被重启。
- en: Let's start by failing the readiness probe.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先使就绪探针失败。
- en: Failing the readiness probe causes traffic to temporarily stop
  id: totrans-221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 失败就绪探针会导致流量暂时停止
- en: 'Now that you have a simple application up and running, you can experiment with
    the behavior of the liveness and readiness probes. To start, let''s get the service''s
    external IP to connect to our web server using the browser:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经启动了一个简单的应用程序，您可以尝试存活探针和就绪探针的行为。首先，让我们获取服务的外部 IP，以便通过浏览器连接到我们的 Web 服务器：
- en: '[PRE35]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'If you hit the external IP in the browser, you should see a single line that
    either says **Server 1** or **Server 2**:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在浏览器中访问外部 IP，您应该会看到一行文本，显示为 **服务器 1** 或 **服务器 2**：
- en: '![Browsing to the external IP in the browser shows the application returning
    traffic from server 1 ](img/B17338_07_17.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![在浏览器中浏览到外部 IP 显示应用程序返回来自服务器 1 的流量](img/B17338_07_17.jpg)'
- en: 'Figure 7.17: Our application is returning traffic from server 1'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.17：我们的应用程序正在从服务器 1 返回流量
- en: 'During the upcoming tests, you''ll use a small script called `testWeb.sh` that
    has been provided in the code samples for this chapter to connect to your web
    page 50 times, so you can monitor a good distribution of results between servers
    1 and 2\. You''ll first need to make that script executable, and then you can
    run that script while your deployment is fully healthy:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的测试中，你将使用一个名为 `testWeb.sh` 的小脚本，它已包含在本章的代码示例中，用于连接到你的网页 50 次，这样你可以监控服务器
    1 和服务器 2 之间的流量分配。你需要先将该脚本设置为可执行，然后在部署完全健康时运行该脚本：
- en: '[PRE36]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'During healthy operations, we can see that server 1 and server 2 are hit almost
    equally, with `24` hits for server 1 and `26` for server 2:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在健康运行期间，我们可以看到服务器 1 和服务器 2 几乎均匀地被访问，服务器 1 被访问了 `24` 次，服务器 2 被访问了 `26` 次：
- en: '![Output displaying a healthy application with its traffic load-balanced between
    server 1 and server 2](img/B17338_07_18.jpg)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![显示应用健康，流量在服务器 1 和服务器 2 之间进行负载均衡的输出](img/B17338_07_18.jpg)'
- en: 'Figure 7.18: While the application is healthy, traffic is load-balanced between
    server 1 and server 2'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.18：当应用健康时，流量在服务器 1 和服务器 2 之间进行负载均衡
- en: 'Let''s now move ahead and fail the readiness probe in server 1\. To do this,
    you will use the `kubectl exec` command to move the index file to a different
    location:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们继续进行操作，使服务器 1 的就绪探针失败。为此，你将使用 `kubectl exec` 命令将索引文件移动到不同的位置：
- en: '[PRE37]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Once this is executed, we can view the change in the pod status with the following
    command:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此操作后，我们可以使用以下命令查看 pod 状态的变化：
- en: '[PRE38]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'You should see the readiness state of the server 1 pod change to `0/1`, as
    shown in *Figure 7.19*:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到服务器 1 pod 的就绪状态变化为 `0/1`，如 *图 7.19* 所示：
- en: '![First, a command is executed to stop directing traffic to server 1\. Then,
    using kubectl get pods -w, the ready attribute of the server 1 pod changes from
    1/1 to 0/1](img/B17338_07_19.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![首先执行一个命令停止将流量导向服务器 1。然后，通过 kubectl get pods -w，服务器 1 pod 的就绪属性从 1/1 变为 0/1](img/B17338_07_19.jpg)'
- en: 'Figure 7.19: The failing readiness probes causes server 1 to not have any READY
    containers'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.19：失败的就绪探针导致服务器 1 没有任何 READY 容器
- en: 'This should direct no more traffic to the server 1 pod. Let''s verify that:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 这将不再将流量导向服务器 1 pod。让我们验证这一点：
- en: '[PRE39]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Traffic should be redirected to server 2:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 流量应该被重定向到服务器 2：
- en: '![Output displaying all traffic is directed to server 2](img/B17338_07_20.jpg)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![显示所有流量都被导向服务器 2 的输出](img/B17338_07_20.jpg)'
- en: 'Figure 7.20: All traffic is now served by server 2'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.20：现在所有流量都由服务器 2 提供
- en: 'You can now restore the state of server 1 by moving the file back to its rightful
    place:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以通过将文件移回正确的位置来恢复服务器 1 的状态：
- en: '[PRE40]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'This will return the pod to a **Ready** state and should again split traffic
    equally:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使 pod 恢复为 **就绪** 状态，并应该再次平等分配流量：
- en: '[PRE41]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'This will show an output similar to *Figure 7.21*:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示类似 *图 7.21* 的输出：
- en: '![After restoring the readiness probe, traffic is load-balanced again](img/B17338_07_21.jpg)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![恢复就绪探针后，流量重新进行负载均衡](img/B17338_07_21.jpg)'
- en: 'Figure 7.21: Restoring the readiness probe causes traffic to be load-balanced
    again'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.21：恢复就绪探针后，流量再次进行负载均衡
- en: A failing readiness probe will cause Kubernetes to no longer send traffic to
    the failing pod. You have verified this by causing a readiness probe in your example
    application to fail. In the next section, you'll explore the impact of a failing
    liveness probe.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 失败的就绪探针会导致 Kubernetes 不再将流量发送到失败的 pod。你已经通过使示例应用中的就绪探针失败来验证了这一点。在下一节中，你将探索失败的存活探针的影响。
- en: A failing liveness probe restarts the pod
  id: totrans-252
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 失败的存活探针会重启 pod
- en: 'You can repeat the previous process with the liveness probe as well. When the
    liveness probe fails, Kubernetes is expected to restart that pod. Let''s try this
    by deleting the health file:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用存活探针重复之前的过程。当存活探针失败时，Kubernetes 会重启该 pod。让我们尝试通过删除健康文件来做到这一点：
- en: '[PRE42]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Let''s see what this does to the pod:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这对 pod 产生了什么影响：
- en: '[PRE43]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'You should see that the pod restarts within a couple of seconds:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到 pod 在几秒钟内重启：
- en: '![Output displaying a failing liveness probe that causes the pod to restart](img/B17338_07_22.jpg)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![显示失败的存活探针导致 pod 重启的输出](img/B17338_07_22.jpg)'
- en: 'Figure 7.22: A failing liveness probe will cause the pod to be restarted'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.22：失败的存活探针将导致 pod 被重启
- en: 'As you can see in *Figure 7.22*, the pod was successfully restarted, with limited
    impact. You can inspect what was going on in the pod by running a `describe` command:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 如 *图 7.22* 所示，pod 已成功重启，影响有限。你可以通过运行 `describe` 命令来检查 pod 中发生的情况：
- en: '[PRE44]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The preceding command will give you an output similar to *Figure 7.23*:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将给出类似*图 7.23*的输出：
- en: '![More details on the pod showing the failing liveness probe caused the pod
    to be restarted](img/B17338_07_23.jpg)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
  zh: '![更多关于 Pod 的详细信息，显示因存活性探针失败导致 Pod 被重启](img/B17338_07_23.jpg)'
- en: 'Figure 7.23: More details on the pod showing how the liveness probe failed'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.23：更多关于 Pod 的详细信息，显示存活性探针如何失败
- en: In the `describe` command, you can clearly see that the pod failed the liveness
    probe. After three failures, the container was killed and restarted.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `describe` 命令中，你可以清楚地看到 Pod 未通过存活性探针测试。在三次失败后，容器被终止并重启。
- en: 'This concludes the experiment with liveness and readiness probes. Remember
    that both are useful for your application: a readiness probe can be used to temporarily
    stop traffic to your pod, so it has to deal with less load. A liveness probe is
    used to restart your pod if there is an actual failure in the pod.'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 这就结束了存活性探针和就绪性探针的实验。请记住，这两者对你的应用程序都很有用：就绪性探针可以用来临时停止流量进入 Pod，从而减少负载；而存活性探针则用于在
    Pod 出现实际故障时重启 Pod。
- en: 'Let''s also make sure to clean up the deployments you just created:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们确保清理刚刚创建的部署：
- en: '[PRE45]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Liveness and readiness probes are useful to ensure that only healthy pods will
    receive traffic in your cluster. In the next section, you will explore different
    metrics reported by Kubernetes that you can use to verify the state of your application.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 存活性探针和就绪性探针对于确保只有健康的 Pod 接收流量非常有用。在下一节中，你将探索 Kubernetes 报告的不同指标，这些指标可以帮助你验证应用程序的状态。
- en: Metrics reported by Kubernetes
  id: totrans-270
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubernetes 报告的指标
- en: Kubernetes reports multiple metrics. In this section, you'll first use a number
    of `kubectl` commands to get these metrics. Afterward, you'll look into Azure
    Monitor for containers to see how Azure helps with container monitoring.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 报告多个指标。在本节中，你将首先使用一些 `kubectl` 命令来获取这些指标。之后，你将查看 Azure 容器监控，看看 Azure
    如何帮助进行容器监控。
- en: Node status and consumption
  id: totrans-272
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 节点状态和消耗
- en: The nodes in your Kubernetes are the servers running your application. Kubernetes
    will schedule pods to different nodes in the cluster. You need to monitor the
    status of your nodes to ensure that the nodes themselves are healthy and that
    the nodes have enough resources to run new applications.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 你 Kubernetes 中的节点是运行你应用程序的服务器。Kubernetes 会将 Pods 调度到集群中的不同节点。你需要监控节点的状态，以确保节点本身健康，并且节点有足够的资源来运行新的应用程序。
- en: 'Run the following command to get information about the nodes on the cluster:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令以获取集群中节点的信息：
- en: '[PRE46]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The preceding command lists their name, status, and age:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令列出了它们的名称、状态和年龄：
- en: '![Running the kubectl get nodes command to get information about the nodes
    on the cluster](img/B17338_07_24.jpg)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
  zh: '![运行 kubectl get nodes 命令以获取集群中节点的信息](img/B17338_07_24.jpg)'
- en: 'Figure 7.24: There are two nodes in this cluster'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.24：该集群中有两个节点
- en: 'You can get more information by passing the `-o wide` option:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过传递 `-o wide` 选项获得更多信息：
- en: '[PRE47]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The output lists the underlying `OS-IMAGE` and `INTERNAL-IP`, and other useful
    information, which can be viewed in *Figure 7.25*:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 输出列出了底层的 `OS-IMAGE` 和 `INTERNAL-IP` 以及其他有用信息，可以在*图 7.25*中查看：
- en: '![Adding the -o wide option to the command to display more details about the
    nodes](img/B17338_07_25.jpg)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
  zh: '![将 -o wide 选项添加到命令中，以显示更多关于节点的详细信息](img/B17338_07_25.jpg)'
- en: 'Figure 7.25: Using -o wide adds more details about the nodes'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.25：使用 -o wide 添加更多关于节点的详细信息
- en: 'You can find out which nodes are consuming the most resources by using the
    following command:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下命令找出哪些节点消耗的资源最多：
- en: '[PRE48]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'It shows the CPU and memory usage of the nodes:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 它显示了节点的 CPU 和内存使用情况：
- en: '![Output displaying CPU and memory utilization of the nodes](img/B17338_07_26.jpg)'
  id: totrans-287
  prefs: []
  type: TYPE_IMG
  zh: '![输出显示节点的 CPU 和内存利用率](img/B17338_07_26.jpg)'
- en: 'Figure 7.26: CPU and memory utilization of the nodes'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.26：节点的 CPU 和内存利用率
- en: 'Note that this is the actual consumption at that point in time, not the number
    of requests a certain node has. To get the requests, you can execute the following:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这是当时的实际消耗，而不是某个节点的请求数。要获取请求数，可以执行以下命令：
- en: '[PRE49]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'This will show you the requests and limits per pod, as well as the cumulative
    amount for the whole node:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示每个 Pod 的请求和限制，以及整个节点的累计值：
- en: '![Output displaying requests and limits per pod, as well as the total of allocated
    resources](img/B17338_07_27.jpg)'
  id: totrans-292
  prefs: []
  type: TYPE_IMG
  zh: '![输出显示每个 Pod 的请求和限制，以及分配的资源总量](img/B17338_07_27.jpg)'
- en: 'Figure 7.27: Describing the nodes shows details on requests and limits'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.27：描述节点显示了请求和限制的详细信息
- en: As you can see in *Figure 7.27*, the `describe node` command outputs the requests
    and limits per pod, across namespaces. This is a good way for cluster operators
    to verify how much load is being put on the cluster, across all namespaces.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在 *图 7.27* 中所见，`describe node` 命令输出了每个 pod 跨命名空间的请求和限制。这是集群运营商验证集群负载的好方法，适用于所有命名空间。
- en: You now know where you can find information about the utilization of your nodes.
    In the next section, you will look into how you can get the same metrics for individual
    pods.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在知道可以在哪里找到有关节点利用率的信息。在下一节中，您将深入了解如何获取单个 pod 的相同指标。
- en: Pod consumption
  id: totrans-296
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Pod 消耗
- en: Pods consume CPU and memory resources from an AKS cluster. Requests and limits
    are used to configure how much CPU and memory a pod can consume. Requests are
    used to reserve a minimum amount of CPU and memory, while limits are used to set
    a maximum amount of CPU and memory per pod.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: Pod 从 AKS 集群消耗 CPU 和内存资源。请求和限制用于配置 pod 可以消耗的 CPU 和内存量。请求用于保留最小数量的 CPU 和内存，而限制则用于设置每个
    pod 的最大 CPU 和内存量。
- en: In this section, you will learn how you can use `kubectl` to get information
    about the CPU and memory utilization of pods.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将学习如何使用 `kubectl` 获取有关 pod 的 CPU 和内存利用率的信息。
- en: 'Let''s start by exploring how you can see the requests and limits for a pod
    that you currently have running:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从探索如何查看当前正在运行的 pod 的请求和限制开始：
- en: 'For this example, you will use the pods running in the `kube-system` namespace.
    Get all the pods in this namespace:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于此示例，您将使用在 `kube-system` 命名空间中运行的 pods。获取此命名空间中的所有 pods：
- en: '[PRE50]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'This should show something similar to *Figure 7.28*:'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这应该显示类似于 *图 7.28*：
- en: '![Output displaying pods running in the kube-system namespace](img/B17338_07_28.jpg)'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![显示在 kube-system 命名空间中运行的 pods](img/B17338_07_28.jpg)'
- en: 'Figure 7.28: The pods running in the kube-system namespace'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.28：运行在 kube-system 命名空间中的 pods
- en: 'Let''s get the requests and limits for one of the `coredns` pods. This can
    be done using the `describe` command:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们获取一个 `coredns` pod 的请求和限制。这可以通过使用 `describe` 命令完成：
- en: '[PRE51]'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'In the `describe` command, there should be a section similar to *Figure 7.29*:'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 `describe` 命令中，应该有一个类似于 *图 7.29* 的部分：
- en: '![Displaying the limits and requests for the CoreDNS pod](img/B17338_07_29.jpg)'
  id: totrans-308
  prefs: []
  type: TYPE_IMG
  zh: '![显示 CoreDNS Pod 的限制和请求](img/B17338_07_29.jpg)'
- en: 'Figure 7.29: Limits and requests for the CoreDNS pod'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.29：CoreDNS pod 的限制和请求
- en: This shows you that this pod has a memory limit of `170Mi`, no CPU limit, and
    has a request for 100 m CPU (which means 0.1 CPU) and `70Mi` of memory. This means
    that if this pod were to consume more than 170 MiB of memory, Kubernetes would
    restart that pod. Kubernetes has also reserved 0.1 CPU core and 70 MiB of memory
    for this pod.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了这个 pod 的内存限制为 `170Mi`，没有 CPU 限制，并且请求了 100 m CPU（即 0.1 CPU）和 `70Mi` 内存。这意味着如果该
    pod 消耗超过 170 MiB 的内存，Kubernetes 将重新启动该 pod。Kubernetes 还为该 pod 保留了 0.1 CPU 核心和
    70 MiB 内存。
- en: 'Requests and limits are used to perform capacity management in a cluster. You
    can also get the actual CPU and memory consumption of a pod. Run the following
    command and you''ll get the actual pod consumption in all namespaces:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 请求和限制用于在集群中执行容量管理。您还可以获取 pod 的实际 CPU 和内存消耗。运行以下命令，您将得到所有命名空间中实际的 pod 消耗：
- en: '[PRE52]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'This should show you anoutput similar to *Figure 7.30*:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该显示类似于 *图 7.30* 的输出：
- en: '![Running a command to get the actual pod consumption in all namespaces](img/B17338_07_30.jpg)'
  id: totrans-314
  prefs: []
  type: TYPE_IMG
  zh: '![运行命令以获取所有命名空间中实际 pod 的消耗](img/B17338_07_30.jpg)'
- en: 'Figure 7.30: Seeing the CPU and memory consumption of pods'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.30：查看 pod 的 CPU 和内存消耗
- en: Using the `kubectl top` command shows the CPU and memory consumption at the
    point in time when the command was run. In this case, you can see that the `coredns`
    pods are using `3m` CPU and `10Mi` of memory.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `kubectl top` 命令显示了在运行命令时的 CPU 和内存消耗。在这种情况下，您可以看到 `coredns` pods 使用了 `3m`
    CPU 和 `10Mi` 内存。
- en: In this section, you have used the `kubectl` command to get an insight into
    the resource utilization of the nodes and pods in your cluster. This is useful
    information, but it is limited to that specific point in time. In the next section,
    you'll use the Azure portal to get more detailed information on the cluster and
    the applications on top of the cluster. You'll start by exploring the **AKS Diagnostics**
    pane.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你使用了 `kubectl` 命令来获取集群中节点和 pod 的资源使用情况。这是有用的信息，但仅限于特定时刻。下一节，你将使用 Azure
    门户来获取有关集群和集群上应用程序的更详细信息。你将从探索**AKS Diagnostics**面板开始。
- en: Using AKS Diagnostics
  id: totrans-318
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 AKS Diagnostics
- en: When you are experiencing issues in AKS, a good place to start your exploration
    is the **AKS Diagnostics** pane. It provides you with tools that help investigate
    any issues related to underlying infrastructure or system cluster components.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在 AKS 中遇到问题时，开始探索的好地方是**AKS Diagnostics**面板。它为你提供了有助于调查与基础设施或系统集群组件相关的任何问题的工具。
- en: 'Note:'
  id: totrans-320
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注：
- en: AKS Diagnostics is in preview at the time of writing this book. This means functionality
    might be added or removed.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: AKS Diagnostics 在本书编写时处于预览状态。这意味着功能可能会添加或删除。
- en: 'To access AKS Diagnostics, hit the **Diagnose and solve problems** option in
    the AKS menu. This will open up Diagnostics, as shown in *Figure 7.31*:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问 AKS Diagnostics，请在 AKS 菜单中点击**诊断并解决问题**选项。这将打开 Diagnostics，如*图 7.31*所示：
- en: '![An overview of the AKS Diagnostics pane in the Azure portal](img/B17338_07_31.jpg)'
  id: totrans-323
  prefs: []
  type: TYPE_IMG
  zh: '![在 Azure 门户中查看 AKS Diagnostics 面板概览](img/B17338_07_31.jpg)'
- en: 'Figure 7.31: Accessing AKS Diagnostics'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.31：访问 AKS Diagnostics
- en: 'AKS Diagnostics gives you two tools to diagnose and explore issues. One is
    **Cluster Insights**, and the other is **Networking**. Cluster Insights uses cluster
    logs and configuration on your cluster to perform a health check and compare your
    cluster against best practices. It contains useful information and relevant health
    indicators in case anything is misconfigured in your cluster. An example output
    of Cluster Insights is shown in *Figure 7.32*:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: AKS Diagnostics 提供了两个工具来诊断和探索问题，一个是**Cluster Insights**，另一个是**Networking**。Cluster
    Insights 利用集群日志和配置执行健康检查，并将集群与最佳实践进行对比。如果集群中有任何配置错误，它将包含有用的信息和相关的健康指标。Cluster
    Insights 的示例输出如*图 7.32*所示：
- en: '![Example output of Cluster Insights as seen in the Azure portal](img/B17338_07_32.jpg)'
  id: totrans-326
  prefs: []
  type: TYPE_IMG
  zh: '![在 Azure 门户中看到的 Cluster Insights 示例输出](img/B17338_07_32.jpg)'
- en: 'Figure 7.32: Example output from Cluster Insights'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.32：Cluster Insights 的示例输出
- en: 'The Networking section of AKS Diagnostics allows you to interactively troubleshoot
    networking issues in your cluster. As you open the Networking view, you are presented
    with several questions that will then trigger network health checks and configuration
    reviews. Once you select one of those options, the interactive tool will give
    you the output from those checks, as shown in *Figure 7.33*:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: AKS Diagnostics 的 Networking 部分允许你交互式地排查集群中的网络问题。当你打开 Networking 视图时，会显示几个问题选项，选择其中一个选项后，将触发网络健康检查和配置审查。一旦选择了其中一个选项，交互式工具将给出这些检查的输出，如*图
    7.33*所示：
- en: '![Diagnosing networking issues using AKS Diagnostics](img/B17338_07_33.jpg)'
  id: totrans-329
  prefs: []
  type: TYPE_IMG
  zh: '![使用 AKS Diagnostics 诊断网络问题](img/B17338_07_33.jpg)'
- en: 'Figure 7.33: Diagnosing networking issues using AKS Diagnostics'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.33：使用 AKS Diagnostics 诊断网络问题
- en: Using AKS Diagnostics is very useful when you are facing infrastructure issues
    on your cluster. The tool does a scan of your environment and verifies whether
    everything is running and configured well. However, it does not scan your applications.
    That is where Azure Monitor comes in; it allows you to monitor your application
    and access your application logs.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在集群中遇到基础设施问题时，使用 AKS Diagnostics 非常有用。该工具会扫描你的环境，验证所有内容是否正常运行和配置良好。然而，它不会扫描你的应用程序。这时，Azure
    Monitor 就派上用场了；它允许你监控你的应用程序并访问应用程序日志。
- en: Azure Monitor metrics and logs
  id: totrans-332
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Azure Monitor 指标和日志
- en: Previously in this chapter, you explored the status and metrics of nodes and
    pods in your cluster using the `kubectl` command-line tool. In Azure, you can
    get more metrics from nodes and pods and explore the logs from pods in your cluster.
    Let's start by exploring AKS Insights in the Azure portal.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章之前，你已经使用 `kubectl` 命令行工具查看了集群中节点和 pod 的状态及指标。在 Azure 中，你可以获取更多来自节点和 pod 的指标，并探索集群中
    pod 的日志。现在，让我们从 Azure 门户开始探索 AKS Insights。
- en: AKS Insights
  id: totrans-334
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: AKS Insights
- en: The **Insights** section of the AKS pane provides most of the metrics you need
    to know about your cluster. It also has the ability to drill down to the container
    level. You can also see the logs of the container.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: AKS 面板的 **Insights** 部分提供了你需要了解的大部分集群指标。它还具有深入到容器级别的能力。你还可以查看容器的日志。
- en: 'Note:'
  id: totrans-336
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意：
- en: The Insights section of the AKS pane relies on Azure Monitor for containers.
    If you created the cluster using the portal defaults, this is enabled by default.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: AKS 面板的 Insights 部分依赖于 Azure Monitor for containers。如果你使用门户默认
- en: Kubernetes makes metrics available but doesn't store them. Azure Monitor can
    be used to store these metrics and make them available to query over time. To
    collect the relevant metrics and logs into Insights, Azure connects to the Kubernetes
    API to collect the metrics and logs to then store them in Azure Monitor.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 提供了指标，但不会存储它们。Azure Monitor 可以用于存储这些指标，并使其可以随时间查询。为了收集相关的指标和日志并将其存储到
    Insights 中，Azure 连接到 Kubernetes API 收集这些指标和日志，然后将其存储到 Azure Monitor。
- en: 'Note:'
  id: totrans-339
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意：
- en: Logs of a container could contain sensitive information. Therefore, the rights
    to review logs should be controlled and audited.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 容器的日志可能包含敏感信息。因此，查看日志的权限应当受到控制和审计。
- en: Let's explore the **Insights** tab of the AKS pane, starting with the cluster
    metrics.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从 AKS 面板的 **Insights** 选项卡开始，首先查看集群指标。
- en: Cluster metrics
  id: totrans-342
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 集群指标
- en: '**Insights** shows the cluster metrics. *Figure 7.34* shows the CPU utilization
    and the memory utilization of all the nodes in the cluster. You can optionally
    add additional filters to filter to a particular namespace, node, or node pool.
    There also is a live option, which gives you more real-time information on your
    cluster status:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '**Insights** 显示集群指标。*图 7.34* 显示了集群中所有节点的 CPU 和内存利用率。你还可以选择添加额外的过滤器来筛选特定的命名空间、节点或节点池。还有一个实时选项，可以让你获得集群状态的更多实时信息：'
- en: '![Viewing CPU and memory utilization for the cluster in the Cluster tab](img/B17338_07_34.jpg)'
  id: totrans-344
  prefs: []
  type: TYPE_IMG
  zh: '![在 Cluster 选项卡中查看集群的 CPU 和内存利用率](img/B17338_07_34.jpg)'
- en: 'Figure 7.34: The Cluster tab shows CPU and memory utilization for the cluster'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.34：Cluster 选项卡显示集群的 CPU 和内存利用率
- en: 'The cluster metrics also show the node count and the number of active pods.
    The node count is important, as you can track whether you have any nodes that
    are in a **Not Ready** state:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 集群指标还显示节点数量和活动 Pod 数量。节点数量很重要，因为你可以追踪是否有任何节点处于 **Not Ready** 状态：
- en: '![Checking the node count and the number of active pods in the Cluster tab](img/B17338_07_35.jpg)'
  id: totrans-347
  prefs: []
  type: TYPE_IMG
  zh: '![检查 Cluster 选项卡中的节点数量和活动 Pod 数量](img/B17338_07_35.jpg)'
- en: 'Figure 7.35: The Cluster tab shows the node count and the number of active
    pods'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.35：Cluster 选项卡显示节点数量和活动 Pod 数量
- en: The **Cluster** tab can be used to monitor the status of the nodes in the cluster.
    Next, you'll explore the **Reports** tab.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '**Cluster** 选项卡可用于监控集群中节点的状态。接下来，你将探索 **Reports** 选项卡。'
- en: Reports
  id: totrans-350
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 报告
- en: 'The **Reports** tab in AKS Insights gives you access to a number of preconfigured
    monitoring workbooks. These workbooks combine text, log queries, metrics, and
    parameters together and give you rich interactive reports. You can drill down
    into each individual report to get more information and prebuilt log queries.
    The available reports are shown in *Figure 7.36*:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: AKS Insights 中的 **Reports** 选项卡让你访问多个预配置的监控工作簿。这些工作簿将文本、日志查询、指标和参数结合在一起，提供丰富的互动报告。你可以深入每个单独的报告以获取更多信息和预建的日志查询。可用的报告显示在
    *图 7.36* 中：
- en: Note
  id: totrans-352
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: The Reports functionality is in preview at the time of writing this book.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 报告功能在本书写作时仍处于预览阶段。
- en: '![An overview of the Reports tab that allows access to preconfigured monitoring
    workbooks](img/B17338_07_36.jpg)'
  id: totrans-354
  prefs: []
  type: TYPE_IMG
  zh: '![Reports 选项卡概览，允许访问预配置的监控工作簿](img/B17338_07_36.jpg)'
- en: 'Figure 7.36: The Reports tab gives you access to preconfigured monitoring workbooks'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.36：Reports 选项卡让你访问预配置的监控工作簿
- en: 'As an example, you can explore the **Deployments** workbook. This is shown
    in *Figure 7.37*:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 作为示例，你可以探索 **Deployments** 工作簿。它在 *图 7.37* 中显示：
- en: '![An overview of the Deployments workbook, which shows the status of all the
    deployments](img/B17338_07_37.jpg)'
  id: totrans-357
  prefs: []
  type: TYPE_IMG
  zh: '![Deployments 工作簿概览，显示所有部署的状态](img/B17338_07_37.jpg)'
- en: 'Figure 7.37: The Deployments workbook shows you the status of your deployments'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.37：Deployments 工作簿显示你的部署状态
- en: This shows you all the deployments by default, their health, and up-to-date
    status. As you can see, it shows you that **server1** was temporarily unavailable
    when you were doing the exploration with liveness and readiness probes earlier
    in this chapter.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，这会显示所有部署的健康状况和最新状态。正如您所看到的，它显示了**server1**在您使用存活性和就绪性探针进行探索时曾暂时不可用。
- en: You can drill down further into the status of the individual deployments. If
    you click on the **Log** button highlighted in *Figure 7.37*, you get redirected
    to Log Analytics with a prebuilt query. You can then modify this query and get
    deeper insights into your workload, as shown in *Figure 7.38*.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以进一步深入查看单个部署的状态。如果您点击*图 7.37*中突出的**日志**按钮，将重定向到 Log Analytics，并展示一个预构建的查询。然后，您可以修改此查询并深入分析您的工作负载，如*图
    7.38*所示。
- en: '![Drilling down in Log Analytics to get more details on the deployments](img/B17338_07_38.jpg)'
  id: totrans-361
  prefs: []
  type: TYPE_IMG
  zh: '![在 Log Analytics 中深入查看以获取有关部署的更多详细信息](img/B17338_07_38.jpg)'
- en: 'Figure 7.38: Drilling down in Log Analytics to get more details on your deployments'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.38：在 Log Analytics 中深入查看，获取更多关于部署的详细信息
- en: 'Note:'
  id: totrans-363
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意：
- en: 'The queries used in Log Analytics make use of the **Kusto Query Language**
    (**KQL**). To learn more about KQL, please refer to the documentation: [https://docs.microsoft.com/azure/data-explorer/kusto/concepts/](https://docs.microsoft.com/azure/data-explorer/kusto/concepts/)'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Log Analytics 中使用的查询利用了**Kusto 查询语言**（**KQL**）。要了解更多关于 KQL 的信息，请参考文档：[https://docs.microsoft.com/azure/data-explorer/kusto/concepts/](https://docs.microsoft.com/azure/data-explorer/kusto/concepts/)
- en: The **Reports** tab in AKS Insights gives you a number of prebuilt monitoring
    workbooks. The next tab is the **Nodes** tab.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: AKS Insights 中的**Reports**标签页为您提供了多个预构建的监控工作簿。下一个标签页是**节点**标签页。
- en: Nodes
  id: totrans-366
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 节点
- en: 'The **Nodes** view shows you detailed metrics for your nodes. It also shows
    you which pods are running on each node, as you can see in *Figure 7.39*:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '**节点**视图为您展示了节点的详细指标。它还显示了每个节点上运行的 Pod，您可以在*图 7.39*中看到：'
- en: '![Detailed metrics of the nodes as seen in the Nodes pane](img/B17338_07_39.jpg)'
  id: totrans-368
  prefs: []
  type: TYPE_IMG
  zh: '![在节点面板中看到的节点详细指标](img/B17338_07_39.jpg)'
- en: 'Figure 7.39: Detailed metrics of the nodes in the Nodes pane'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.39：节点面板中的节点详细指标
- en: 'Note that different metrics can be viewed from the dropdown menu right next
    to the search bar. If you need even more details, you can click through and get
    Kubernetes event logs from your nodes as well:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您可以从搜索栏旁边的下拉菜单中查看不同的指标。如果需要更多详细信息，您还可以点击查看 Kubernetes 事件日志：
- en: '![Clicking on the View Kubernetes event logs option to get the logs from a
    cluster](img/B17338_07_40.jpg)'
  id: totrans-371
  prefs: []
  type: TYPE_IMG
  zh: '![点击“查看 Kubernetes 事件日志”选项以获取集群日志](img/B17338_07_40.jpg)'
- en: 'Figure 7.40: Click on View Kubernetes event logs to get the logs from a cluster'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.40：点击“查看 Kubernetes 事件日志”以获取集群日志
- en: 'This will open Azure Log Analytics and will have pre-created a query for you
    that shows the logs for your node. In the example in *Figure 7.41*, you can see
    that the node was rebooted a couple of times and hit an `InvalidDiskCapacity`
    warning as well:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开 Azure Log Analytics，并为您预先创建一个查询，显示您的节点日志。在*图 7.41*中，您可以看到该节点重启了几次，并且触发了`InvalidDiskCapacity`警告：
- en: '![An overview of Log Analytics displaying a pre-created query to show the logs
    for your node](img/B17338_07_41.jpg)'
  id: totrans-374
  prefs: []
  type: TYPE_IMG
  zh: '![显示为节点预先创建查询并显示节点日志的 Log Analytics 概览](img/B17338_07_41.jpg)'
- en: 'Figure 7.41: Log Analytics showing the logs for the nodes'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.41：Log Analytics 显示节点日志
- en: This gives you information about the status of your nodes. Next, you'll explore
    the **Controllers** tab.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为您提供节点状态的信息。接下来，您将探索**Controllers**标签页。
- en: Controllers
  id: totrans-377
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 控制器
- en: 'The **Controllers** tab shows you details on all the controllers (that is,
    ReplicaSets, DaemonSets, and so on) on your cluster and the pods running in them.
    This shows you a controller-centric view of running pods. For instance, you can
    find the **server1** ReplicaSet and see all the pods and containers running in
    it, as shown in *Figure 7.42*:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '**Controllers**标签页为您展示集群中所有控制器（即 ReplicaSets、DaemonSets 等）及其运行的 Pod。这为您提供了一个以控制器为中心的运行中的
    Pod 视图。例如，您可以找到**server1** ReplicaSet，并查看其中运行的所有 Pod 和容器，如*图 7.42*所示：'
- en: '![An overview of the Controllers tab displaying all the pods running in a ReplicaSet](img/B17338_07_42.jpg)'
  id: totrans-379
  prefs: []
  type: TYPE_IMG
  zh: '![显示在 ReplicaSet 中运行的所有 Pod 的 Controllers 标签页概览](img/B17338_07_42.jpg)'
- en: 'Figure 7.42: The Controllers tab shows you all the pods running in a ReplicaSet'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.42：Controllers 标签页显示 ReplicaSet 中运行的所有 Pod
- en: The next tab is the **Containers** tab, which will show you the metrics, logs,
    and environment variables for a container.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个标签页是**容器**标签页，它将显示容器的指标、日志和环境变量。
- en: Container metrics, logs, and environment variables
  id: totrans-382
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 容器指标、日志和环境变量
- en: 'Clicking on the **Containers** tab lists the container metrics, environment
    variables, and access to its logs, as shown in *Figure 7.43*:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**容器**标签页可以列出容器的指标、环境变量，并访问其日志，如*图 7.43*所示：
- en: '![An overview of the Containers tab displaying all the individual containers](img/B17338_07_43.jpg)'
  id: totrans-384
  prefs: []
  type: TYPE_IMG
  zh: '![显示所有单独容器的容器标签页概览](img/B17338_07_43.jpg)'
- en: 'Figure 7.43: The Containers tab shows us all the individual containers'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.43：容器标签页显示所有单独的容器
- en: 'Note:'
  id: totrans-386
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意：
- en: You might notice a couple of containers with an `Unknown` state. If a container
    in the `unknown` status, that is because Azure Monitor has logs and information
    about that container, but the container is no longer running on the cluster.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到一些容器处于`Unknown`状态。如果容器处于`unknown`状态，那是因为 Azure Monitor 已有该容器的日志和信息，但该容器已不再集群中运行。
- en: 'You can get access to the container''s logs from this view as well:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过此视图访问容器的日志：
- en: '![Clicking the View container logs option to access the logs from the containers
    tab itself](img/B17338_07_44.jpg)'
  id: totrans-389
  prefs: []
  type: TYPE_IMG
  zh: '![点击“查看容器日志”选项，以访问容器标签页中的日志](img/B17338_07_44.jpg)'
- en: 'Figure 7.44: Access the container''s logs'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.44：访问容器的日志
- en: 'This will show you all the logs that Kubernetes logged from your application.
    Earlier in the chapter, you used `kubectl` to get access to container logs. Using
    this approach can be a lot more productive, as you can edit the log queries and
    correlate logs from different pods and applications in a single view:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示 Kubernetes 从你的应用程序记录的所有日志。在本章早些时候，你使用了`kubectl`来访问容器日志。使用这种方法可能更高效，因为你可以编辑日志查询，并在一个视图中关联来自不同
    Pod 和应用程序的日志：
- en: '![Displaying logs that Kubernetes logged from the application in a single view](img/B17338_07_45.jpg)'
  id: totrans-392
  prefs: []
  type: TYPE_IMG
  zh: '![显示 Kubernetes 从应用程序记录的日志的单一视图](img/B17338_07_45.jpg)'
- en: 'Figure 7.45: Logs are collected and can be queried'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.45：日志被收集并可以查询
- en: 'Apart from the logs, this view also shows the environment variables that are
    set for the container. To see the environment variables, scroll down in the right
    cell of the **Containers** view:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 除了日志外，此视图还显示为容器设置的环境变量。要查看环境变量，请在**容器**视图的右侧单元格中向下滚动：
- en: '![Viewing the environment variables set for the container](img/B17338_07_46.jpg)'
  id: totrans-395
  prefs: []
  type: TYPE_IMG
  zh: '![查看为容器设置的环境变量](img/B17338_07_46.jpg)'
- en: 'Figure 7.46: The environment variables set for the container'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.46：为容器设置的环境变量
- en: The final tab in AKS Insights is the **Deployments** tab, which you'll explore
    next.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: AKS Insights 中的最后一个标签页是**部署**标签页，接下来你将探索该标签页。
- en: Deployments
  id: totrans-398
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署
- en: 'The final tab is the **Deployments** tab. This tab gives you an overview of
    all deployments in the cluster and allows you to get the definition of the deployment
    by selecting it. As you can see in *Figure 7.47*, you can get this view either
    in **Describe** (in text format) or in **RAW** (YAML format):'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个标签页是**部署**标签页。此标签页提供集群中所有部署的概览，并允许你通过选择部署获取其定义。如*图 7.47*所示，你可以以**描述**（文本格式）或**RAW**（YAML格式）查看此视图：
- en: '![An overview of the Deployments tab in the AKS Insights pane](img/B17338_07_47.jpg)'
  id: totrans-400
  prefs: []
  type: TYPE_IMG
  zh: '![在 AKS Insights 面板中查看“部署”标签页概览](img/B17338_07_47.jpg)'
- en: 'Figure 7.47: The Deployments tab in AKS Insights'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.47：AKS Insights 中的“部署”标签页
- en: By using the **Insights** pane in AKS, you can get detailed information about
    your cluster. You explored the different tabs in this section and learned how
    you can drill down and get access to customizable log queries to get even more
    information.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 AKS 中的**Insights**面板，你可以获取有关集群的详细信息。在本节中，你探索了不同的标签页，并学习了如何深入挖掘并访问可定制的日志查询，以获取更多信息。
- en: 'And that concludes this section. Let''s make sure to clean up all the resources
    created in this chapter by using the following command:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 这部分内容到此结束。让我们确保通过以下命令清理本章中创建的所有资源：
- en: '[PRE53]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: In this section, you explored monitoring applications running on top of Kubernetes.
    You used the AKS **Insights** tab in the Azure portal to get a detailed view of
    your cluster and the containers running on the cluster.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你探讨了如何监控在 Kubernetes 上运行的应用程序。你使用了 Azure 门户中的 AKS **Insights** 标签页，以详细查看集群及其上运行的容器。
- en: Summary
  id: totrans-406
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 小结
- en: You started this chapter by learning how to use different `kubectl` commands
    to monitor an application. Then, you explored how logs created in Kubernetes can
    be used to debug that application. The logs contain all the information that is
    written to `stdout` and `stderr`.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 你从学习如何使用不同的`kubectl`命令来监控一个应用程序开始。然后，你探索了如何利用 Kubernetes 中创建的日志来调试该应用程序。这些日志包含了所有写入
    `stdout` 和 `stderr` 的信息。
- en: After that, you switched to the Azure portal and started using AKS Diagnostics
    to explore infrastructure issues. Lastly, you explored the use of Azure Monitor
    and AKS Insights to show the AKS metrics and environment variables, as well as
    logs with log filtering.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你切换到 Azure 门户并开始使用 AKS 诊断工具来探索基础设施问题。最后，你探索了使用 Azure Monitor 和 AKS Insights
    来显示 AKS 的指标和环境变量，以及带有日志过滤的日志。
- en: In the next chapter, you will learn how to connect an AKS cluster to Azure PaaS
    services. You will specifically focus on how you can connect an AKS cluster to
    a MySQL database managed by Azure.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个章节中，你将学习如何将 AKS 集群连接到 Azure PaaS 服务。你将特别关注如何将 AKS 集群连接到 Azure 管理的 MySQL
    数据库。

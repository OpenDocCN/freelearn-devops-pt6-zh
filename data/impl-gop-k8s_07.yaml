- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Cultural Transformation in IT for Embracing GitOps
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IT部门文化转型，迎接GitOps的到来
- en: In the rapidly evolving landscape of information technology, the adoption of
    **GitOps** marks a significant paradigm shift, heralding not just a technological
    transformation but also a profound **cultural** metamorphosis within IT departments.
    This chapter delves into the multifaceted layers of this change, highlighting
    how GitOps fundamentally redefines operational processes and methodologies.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在信息技术快速发展的环境中，采用**GitOps**标志着一个重大的范式转变，它不仅带来技术变革，同时也在IT部门内部引发了一场深刻的**文化**变革。本章将深入探讨这一变化的多层面，重点阐述GitOps如何从根本上重新定义运维流程和方法论。
- en: At its core, GitOps represents a fusion of software development and IT operations,
    driven by the principles of version control and collaboration, which are intrinsic
    to Git. It’s a methodology where infrastructure and application deployment are
    treated as code, enabling a high degree of **automation** and precision in IT
    operations. This approach ensures that the same rigor that’s applied to application
    development is now extended to the management of infrastructure, particularly
    within Kubernetes environments.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 从本质上讲，GitOps代表了软件开发与IT运维的融合，基于版本控制和协作的原则，这些原则是Git所固有的。它是一种将基础设施和应用部署视为代码的方法，能够实现高度的**自动化**和精确的IT运维。该方法确保了应用开发过程中所应用的严格标准同样被扩展到基础设施的管理，尤其是在Kubernetes环境中。
- en: One of the most transformative aspects of GitOps is the establishment of an
    **immutable infrastructure**. Using reconciling and synchronization loops, GitOps
    automates the process of aligning the actual state of the infrastructure with
    the desired state defined in a Git repository. This alignment minimizes the need
    for manual interventions, reducing the potential for human error and improving
    the overall reliability and security of the IT systems.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: GitOps最具变革性的一面是建立**不可变基础设施**。通过对比和同步循环，GitOps自动化地将基础设施的实际状态与在Git仓库中定义的目标状态对齐。这种对齐减少了人工干预的需求，降低了人为错误的潜力，并提高了IT系统的整体可靠性和安全性。
- en: A significant part of this chapter is dedicated to understanding the impact
    of GitOps on IT performance. We’ll explore this through the lens of the **DevOps
    Research and Assessment** (**DORA**) metrics, a widely recognized set of indicators
    used to measure the effectiveness of DevOps practices. By applying these metrics
    to GitOps, organizations can quantitatively assess improvements in areas such
    as deployment frequency, change lead time, change failure rate, and mean time
    to recovery.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的重要部分是理解GitOps对IT性能的影响。我们将通过**DevOps研究与评估**（**DORA**）指标的视角来探讨这一点，DORA指标是一组广泛认可的指标，用于衡量DevOps实践的有效性。通过将这些指标应用于GitOps，组织可以定量评估在部署频率、变更交付时间、变更失败率和平均恢复时间等领域的改进。
- en: However, the journey of adopting GitOps extends beyond the implementation of
    tools such as Argo CD. It necessitates a continuous engagement with evolving GitOps
    trends and practices. As with any emerging technology, GitOps comes with its own
    set of challenges. These include the need for upskilling teams, adapting existing
    workflows, and **continuously optimizing** processes to align with best practices
    in GitOps.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，采用GitOps的过程不仅仅是实现像Argo CD这样的工具。它需要不断参与到GitOps趋势和实践的演变中。像任何新兴技术一样，GitOps也面临着一系列挑战。这些挑战包括需要提升团队技能、调整现有工作流程，以及**持续优化**流程，以符合GitOps的最佳实践。
- en: The final section of this chapter addresses the broader organizational impact
    of implementing GitOps. Adopting GitOps is not just a technical upgrade; it’s
    a catalyst for a cultural shift that permeates various departments within an organization.
    We’ll share insights and experiences from multiple projects across diverse companies,
    illustrating how GitOps can drive a more collaborative, transparent, and efficient
    IT culture. These real-world examples provide valuable lessons on the challenges,
    strategies, and successes of integrating GitOps into the fabric of an organization.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的最后部分讨论了实施GitOps对组织的更广泛影响。采纳GitOps不仅仅是一个技术升级，它是推动组织内部文化转型的催化剂。我们将分享来自不同公司多个项目的见解和经验，展示GitOps如何推动一个更加协作、透明和高效的IT文化。这些真实的案例提供了关于将GitOps融入组织结构中的挑战、策略和成功的宝贵经验。
- en: This comprehensive examination of GitOps, from its technical foundations to
    its cultural implications, aims to provide you with a clear understanding of the
    transformative power of this methodology. It’s a journey that transcends mere
    technology adoption, charting a path toward a more agile, responsive, and innovative
    IT culture.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇关于 GitOps 的全面探讨，从其技术基础到文化影响，旨在让你清晰地理解这一方法论的变革力量。这是一场超越技术采纳的旅程，描绘了通向更加敏捷、响应迅速和创新的
    IT 文化之路。
- en: 'We will cover the following main topics in the chapter:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '我们将在本章讨论以下主要主题:'
- en: Treating infrastructure as an application
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将基础设施视为应用程序
- en: The principles of immutable infrastructure
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不可变基础设施的原则
- en: An introduction to DORA metrics
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DORA 指标简介
- en: Understanding the need for continual improvement in GitOps
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解在 GitOps 中持续改进的必要性
- en: Overcoming cultural barriers to adopt GitOps
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 克服文化障碍以采用 GitOps
- en: Treating infrastructure as an application
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将基础设施视为应用程序
- en: In the evolving landscape of **DevOps**, the concept of treating infrastructure
    as applications – commonly known as **infra-as-apps** – is gaining momentum, especially
    in the context of GitOps. To understand this, we need to get a quick overview
    of **Infrastructure as Code** (**IaC**). IaC will be covered in detail in [*Chapter
    10*](B22100_10.xhtml#_idTextAnchor190). This is a crucial component that’s laid
    out, for example, by Terraform with its declarative approach, allowing infrastructure
    to be treated like an application.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在不断发展的 **DevOps** 景观中，将基础设施视为应用程序的概念 —— 通常称为 **infra-as-apps** —— 在 GitOps 的背景下尤为流行。为了理解这一点，我们需要快速了解
    **基础设施即代码** (**IaC**)。IaC 将在 [*第10章*](B22100_10.xhtml#_idTextAnchor190) 中详细讨论。这是一个关键组成部分，例如
    Terraform 采用其声明式方法，使基础设施可以像应用程序一样处理。
- en: Understanding IaC
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 IaC
- en: IaC is a modern approach for managing and provisioning IT infrastructure using
    code instead of traditional manual processes. This method allows you to automate
    the setup, management, and configuration of computing resources such as servers,
    storage, networks, and applications. Treating your infrastructure as if it were
    software, IaC applies software development practices such as version control and
    testing to infrastructure management.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: IaC 是一种现代方法，用于通过代码而非传统手动流程管理和配置 IT 基础设施。这种方法允许你自动化设置、管理和配置服务器、存储、网络和应用程序等计算资源。将基础设施视为软件，IaC
    应用软件开发实践，如版本控制和测试，来管理基础设施。
- en: The main aim of IaC is to enhance efficiency, reliability, and consistency in
    infrastructure deployment and management. By using code to define infrastructure,
    manual intervention is reduced, decreasing human error, and speeding up deployment.
    IaC enables a more consistent and repeatable process for provisioning and configuring
    resources, simplifying the scaling and management of infrastructure over time.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: IaC 的主要目标是增强基础设施部署和管理的效率、可靠性和一致性。通过使用代码定义基础设施，减少了人为错误，加快了部署速度。IaC 实现了更为一致和可重复的资源配置和部署过程，简化了基础设施随时间的扩展和管理。
- en: Important note
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: '**Imperative**: Directly use kubectl commands to create, update, or delete
    Kubernetes resources, offering quick, on-the-fly adjustments suitable for development
    and experimentation.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**命令式**：直接使用 kubectl 命令创建、更新或删除 Kubernetes 资源，适合开发和实验中的快速调整。'
- en: '**Declarative**: Define the desired state in YAML manifests and apply them,
    letting Kubernetes ensure the actual state aligns with the declared one. This
    is ideal for production with benefits such as version control and reproducibility.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**声明式**：在 YAML 文件中定义所需状态并应用它们，让 Kubernetes 确保实际状态与声明状态一致。这在生产环境中非常理想，带来诸如版本控制和可重复性等好处。'
- en: IaC typically employs a **declarative** or **imperative** approach to define
    the infrastructure’s desired state. This specification allows the IaC tool to
    make necessary changes automatically, leading to a more agile, efficient, and
    reliable IT environment that better supports modern business demands.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: IaC 通常采用**声明式**或**命令式**方法定义基础设施的期望状态。这种规范使得 IaC 工具可以自动进行必要的更改，从而实现更加敏捷、高效和可靠的
    IT 环境，更好地支持现代业务需求。
- en: The importance of IaC
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IaC 的重要性
- en: The rise of cloud computing has been a significant driver behind IaC’s growing
    adoption. Organizations face the challenge of managing and deploying resources
    across multiple environments, such as public, private, and hybrid clouds. IaC
    automates the deployment and management of these resources, easing the management
    of complex environments.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 云计算的兴起是推动 IaC 日益普及的重要因素。组织面临着在多个环境中（如公共云、私有云和混合云）管理和部署资源的挑战。IaC 自动化了这些资源的部署和管理，简化了复杂环境的管理。
- en: Additionally, the need for businesses to deliver applications and services swiftly
    and efficiently has made IaC increasingly important. In today’s fast-paced digital
    world, organizations must rapidly adapt to market and customer demands. IaC streamlines
    IT operations, enabling quicker and more adaptable scaling.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，企业快速高效地交付应用程序和服务的需求，使得 IaC 变得越来越重要。在当今快速变化的数字世界中，组织必须迅速适应市场和客户的需求。IaC 简化了
    IT 操作，实现了更快速、更灵活的扩展。
- en: Furthermore, IaC supports **DevOps principles**, bridging the gap between software
    development and IT operations. Treating infrastructure as code allows organizations
    to apply software development methodologies to infrastructure, enhancing collaboration
    and communication between development and operations teams.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，IaC 支持**DevOps 原则**，弥合了软件开发和 IT 运维之间的差距。将基础设施视为代码使得组织能够将软件开发方法应用于基础设施，增强了开发和运维团队之间的协作与沟通。
- en: How IaC works
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IaC 如何工作
- en: The fundamental concept of IaC is treating infrastructure like software. This
    includes employing rigorous software development practices such as version control,
    infrastructure code testing, and continuous integration and deployment. This approach
    ensures infrastructure consistency, reducing downtime and maintenance time.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: IaC 的基本概念是将基础设施视为软件。这包括采用严格的软件开发实践，如版本控制、基础设施代码测试以及持续集成和部署。这种方法确保了基础设施的一致性，减少了停机时间和维护时间。
- en: The IaC process starts with writing scripts that describe the infrastructure’s
    desired state using declarative language. These scripts, stored in a version control
    system like any software, allow for versioning, auditing, and rollbacks. An IaC
    tool then applies these scripts to the actual infrastructure, ensuring it matches
    the desired state. This repeatability ensures consistency and reduces manual errors.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: IaC 过程从编写脚本开始，这些脚本使用声明性语言描述基础设施的期望状态。这些脚本像任何软件一样存储在版本控制系统中，允许进行版本管理、审计和回滚。然后，IaC
    工具将这些脚本应用于实际的基础设施，确保其与期望状态一致。这个可重复性确保了一致性，减少了人为错误。
- en: Understanding infrastructure as applications in Argo CD’s GitOps framework
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Argo CD 的 GitOps 框架中理解基础设施即应用
- en: In the realm of Argo CD, the concept of an application extends beyond its traditional
    definition [*1*]. Here, an application encompasses not just the software but also
    its desired state configuration, the targeted deployment environment, and the
    policies governing how these resources are synced and managed. This approach marks
    a significant shift from the conventional understanding of applications.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Argo CD 的领域中，应用程序的概念超越了传统的定义 [*1*]。在这里，应用程序不仅仅包括软件，还涵盖了其期望的状态配置、目标部署环境以及管理这些资源如何同步和管理的策略。这种方法标志着与传统应用程序理解方式的显著转变。
- en: Typically, engineering teams have viewed applications as software layers that
    run on a separate infrastructure. The standard process involves setting up the
    infrastructure first, often manually or using tools such as **Terraform** or **Cloud
    Formation** templates. Once this groundwork is laid, another team deploys their
    applications onto this prepared infrastructure. However, Argo CD introduces a
    more integrated perspective. In this GitOps-driven environment, an application’s
    deployment is continuously monitored. Argo CD vigilantly compares the real-time
    state of the application against its predefined desired state. This constant comparison
    is crucial for maintaining consistency and reliability. The divergence between
    the actual state and the desired state can occur due to two primary reasons. First,
    there could be a drift in the actual state, which refers to unanticipated changes
    or modifications in the environment. Secondly, the desired state itself might
    be updated, necessitating a change in the deployment.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，工程团队将应用程序视为在独立基础设施上运行的软件层。标准流程首先涉及手动或使用像**Terraform**或**Cloud Formation**模板这样的工具来设置基础设施。一旦这项基础工作完成，另一个团队会将他们的应用程序部署到已准备好的基础设施上。然而，Argo
    CD提供了一种更为集成的视角。在这个以GitOps驱动的环境中，应用程序的部署会被持续监控。Argo CD会不断地将应用程序的实时状态与其预定义的期望状态进行比较。这种持续的比较对于保持一致性和可靠性至关重要。实际状态与期望状态之间的偏差可能由两个主要原因造成。首先，实际状态可能会发生漂移，这指的是环境中未预见的变化或修改。其次，期望状态本身可能会更新，从而需要对部署进行更改。
- en: Whenever such divergences occur, Argo CD steps in to reconcile these differences.
    This act of reconciliation is at the heart of the GitOps style of deployment,
    which Argo CD upholds. This method aligns with the principles set by the **OpenGitOps
    standards**, ensuring a systematic and standardized approach to deployment and
    infrastructure management.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 每当这种偏差发生时，Argo CD就会介入来调和这些差异。调和这一差异的行为是GitOps部署方式的核心，Argo CD正是这种方式的践行者。这一方法与**OpenGitOps标准**所设立的原则相符，确保了系统化和标准化的部署及基础设施管理方法。
- en: This paradigm shift, where infrastructure is treated akin to applications, brings
    about a more seamless and integrated workflow. It emphasizes the importance of
    treating infrastructure management with the same level of detail and care as application
    development, underscoring a holistic approach to system deployment and management.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这一范式的转变，把基础设施视为类似应用程序的存在，带来了更加无缝和集成的工作流。它强调了以与应用程序开发同等的细致和关怀来对待基础设施管理，突出了一种系统性的方法来进行系统部署和管理。
- en: Embracing infra-as-apps – bridging GitOps and infrastructure management
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拥抱基础设施即应用——连接GitOps与基础设施管理
- en: 'Traditionally, creating and managing infrastructure through declarative configurations
    has been a challenge, despite the popularity of tools such as **Terraform**, **Cloud
    Formation** templates, **Pulumi**, **Cloud Development Kit for Terraform** (**CDKTF**),
    and others. These tools offer a one-time or change-triggered application of the
    desired state, typically via **CI/CD pipelines**. However, this method falls short
    in one critical aspect of GitOps: ongoing state monitoring.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，通过声明性配置创建和管理基础设施一直是一个挑战，尽管像**Terraform**、**Cloud Formation**模板、**Pulumi**、**Cloud
    Development Kit for Terraform**（**CDKTF**）等工具的流行使得这一过程变得更加便捷。这些工具通常通过**CI/CD管道**一次性或通过触发更改来应用期望状态。然而，这种方法在GitOps的一个关键方面存在不足：持续的状态监控。
- en: The gap lies in the fact that CI/CD pipelines, while efficient in deploying
    new plans or updates, do not continuously monitor for state drift. For instance,
    if a Terraform plan is executed and the actual state is altered externally later,
    the CI/CD system remains oblivious to these changes. This is where a GitOps operator
    such as Argo CD becomes indispensable. Argo CD’s role is to relentlessly monitor
    the actual state of the infrastructure and ensure it aligns with the desired state,
    thereby preventing drift.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于，虽然CI/CD管道在部署新计划或更新时效率很高，但它们并不会持续监控状态漂移。例如，如果执行了一个Terraform计划，而实际状态后来被外部改变，CI/CD系统对此变化毫无察觉。这就是像Argo
    CD这样的GitOps操作员不可或缺的地方。Argo CD的作用是不断监控基础设施的实际状态，并确保它与期望状态一致，从而防止漂移。
- en: Adopting this *no-drift-allowed approach* has proven beneficial for teams, not
    only in managing their applications more efficiently but also in enhancing their
    ability to recover from failures rapidly. In this model, rolling back to a previous
    state is as simple as performing `git revert`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 采用这种*不允许漂移的方法*已被证明对团队有益，不仅能够更高效地管理应用程序，还能提升他们快速恢复故障的能力。在这种模型中，回滚到之前的状态就像执行`git
    revert`一样简单。
- en: The benefits that teams have experienced in managing applications can now be
    extended to infrastructure management, thanks to this paradigm shift. Our focus,
    however, will be on Crossplane. As an open source CNCF project, Crossplane enables
    users to provision and manage diverse cloud resources through the Kubernetes API.
    When integrated with a GitOps operator such as Argo CD, Crossplane allows for
    the deployment of applications representing a variety of cloud resources such
    as **Azure Key Vault**, **databases**, **Kubernetes clusters**, and load balancers
    across **Azure**, **AWS**, and other cloud platforms. This integration heralds
    a new era in infrastructure management, blending the robustness of GitOps with
    the versatility of modern cloud resources.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 团队在管理应用程序时所获得的好处，现在已经可以扩展到基础设施管理中，这得益于这一范式的转变。然而，我们的重点将放在 Crossplane 上。作为一个开源的
    CNCF 项目，Crossplane 使用户能够通过 Kubernetes API 配置和管理各种云资源。当与像 Argo CD 这样的 GitOps 操作符结合时，Crossplane
    允许部署表示各种云资源的应用程序，如 **Azure Key Vault**、**数据库**、**Kubernetes 集群**和负载均衡器，跨 **Azure**、**AWS**
    及其他云平台进行管理。这一集成标志着基础设施管理的新时代，结合了 GitOps 的强大功能和现代云资源的多样性。
- en: How IaC can be used to deploy infrastructure
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何使用 IaC 部署基础设施
- en: Now that we have all the necessary background information and hopefully a sufficient
    understanding of the difference between the GitOps approach and using Terraform
    in terms of treating your infrastructure as an application, let’s clarify this
    in practice by examining three use cases.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经掌握了所有必要的背景信息，并希望对 GitOps 方法和使用 Terraform 将基础设施视为应用程序之间的差异有了充分的理解，让我们通过检查三个用例来实际阐明这一点。
- en: 'Before we begin, let’s briefly explain the selected tools for this setup and
    why they were chosen. Starting with Azure:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，我们简要介绍一下用于此设置的工具及其选择原因。从 Azure 开始：
- en: '**Azure Kubernetes Service (AKS)**: This service offers a managed Kubernetes
    environment that simplifies how containerized applications are deployed, managed,
    and scaled with the robustness of Azure’s infrastructure.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure Kubernetes Service (AKS)**：该服务提供一个托管的 Kubernetes 环境，简化了容器化应用程序的部署、管理和扩展，同时具备
    Azure 基础设施的强大可靠性。'
- en: '**Container Registries**: This service provides a secure, scalable, and private
    registry for Docker container images, enhancing the management and deployment
    of containerized applications.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器注册表**：该服务提供一个安全、可扩展的私有 Docker 容器镜像注册表，提升了容器化应用程序的管理和部署能力。'
- en: '**PostgreSQL Server on Azure**: This service offers a reliable and scalable
    cloud database service, ensuring efficient management and storage of application
    data.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure 上的 PostgreSQL 服务器**：该服务提供可靠且可扩展的云数据库服务，确保高效管理和存储应用数据。'
- en: '**Azure Key Vault**: This is a tool for securely storing and accessing secrets,
    keys, and certificates. It’s crucial for managing sensitive information and enhancing
    overall security.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure Key Vault**：这是一个用于安全存储和访问密钥、证书及机密信息的工具。它对于管理敏感信息和增强整体安全性至关重要。'
- en: 'For Kubernetes, we have the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Kubernetes，我们有以下内容：
- en: '**Argo CD**: A declarative, GitOps continuous delivery tool for Kubernetes,
    enabling automated deployment and management of applications'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Argo CD**：一个声明式的 GitOps 持续交付工具，用于 Kubernetes，支持自动化部署和管理应用程序。'
- en: '**External-DNS**: This tool automates the management of DNS records, streamlining
    the process of connecting Kubernetes services with external DNS names'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**External-DNS**：该工具自动化管理 DNS 记录，简化了将 Kubernetes 服务与外部 DNS 名称连接的过程。'
- en: '**Cert-Manager**: This tool manages SSL/TLS certificates for Kubernetes, automating
    certificate issuance and renewal processes'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Cert-Manager**：该工具管理 Kubernetes 的 SSL/TLS 证书，自动化证书的签发和更新过程。'
- en: '**External-Secrets Operator**: This tool integrates with systems such as Azure
    Key Vault to securely inject secrets into Kubernetes, enhancing secure access
    to sensitive data'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**External-Secrets Operator**：该工具与 Azure Key Vault 等系统集成，安全地将机密信息注入 Kubernetes，提升对敏感数据的安全访问。'
- en: 'For deployments for the IaC part, we have the following:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 IaC 部分的部署，我们有以下内容：
- en: '**Terraform modules**: These are components within Terraform, an IaC tool,
    that are designed to enable modular and reusable infrastructure definitions. They
    facilitate a declarative approach by allowing users to define the desired state
    of their infrastructure in code, which Terraform then executes to create and manage
    the actual infrastructure, ensuring it matches the specified state.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Terraform 模块**：这些是 Terraform 中的组件，Terraform 是一个 IaC 工具，旨在实现模块化和可重用的基础设施定义。它们通过允许用户以代码方式定义所需的基础设施状态，从而促进声明式方法，Terraform
    会执行这些定义，创建并管理实际的基础设施，确保它与指定的状态匹配。'
- en: '**Crossplane**: This is an IaC tool that integrates with the Kubernetes ecosystem,
    allowing for external resources, such as cloud services, to be managed through
    Kubernetes **custom resource definitions** (**CRDs**). It adopts a declarative
    model where users define their infrastructure requirements in a Kubernetes-native
    way, enabling consistent and unified management of both Kubernetes internal resources
    and external cloud infrastructure.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Crossplane**：这是一个与 Kubernetes 生态系统集成的 IaC 工具，允许通过 Kubernetes **自定义资源定义**（**CRDs**）管理外部资源，如云服务。它采用声明式模型，用户以
    Kubernetes 本地方式定义基础设施需求，实现对 Kubernetes 内部资源和外部云基础设施的一致性和统一管理。'
- en: In combination, these tools form a comprehensive ecosystem. Azure’s services
    provide a secure and scalable cloud platform, while Kubernetes tools such as Argo
    CD and Cert-Manager ensure efficient and secure application deployment and management.
    The integration between Azure Key Vault and the External-Secrets Operator in Kubernetes
    exemplifies how cloud infrastructure and Kubernetes can work seamlessly together
    for enhanced security and operational efficiency. Now, let’s look at the use cases.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工具的结合形成了一个完整的生态系统。Azure 的服务提供了一个安全且可扩展的云平台，而 Kubernetes 工具如 Argo CD 和 Cert-Manager
    确保了高效且安全的应用部署和管理。Azure Key Vault 与 Kubernetes 中的 External-Secrets Operator 的集成，展示了云基础设施与
    Kubernetes 如何无缝协作，以提高安全性和运营效率。现在，让我们来看一下用例。
- en: Use case 1 – deploy everything over Terraform
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用例 1 – 通过 Terraform 部署所有内容
- en: 'In the first use case, as illustrated in *Figure 7**.1*, everything is deployed
    via Terraform. This means that initially, the required cloud infrastructure is
    deployed using Terraform:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个用例中，如*图 7.1*所示，所有内容都是通过 Terraform 部署的。这意味着最初，所需的云基础设施是通过 Terraform 部署的：
- en: '![Figure 7.1 – Use case 1 – deploy everything over Terraform](img/B22100_07_01.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.1 – 用例 1 – 通过 Terraform 部署所有内容](img/B22100_07_01.jpg)'
- en: Figure 7.1 – Use case 1 – deploy everything over Terraform
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.1 – 用例 1 – 通过 Terraform 部署所有内容
- en: To simplify this example, we’ve removed any unnecessary complexity, such as
    CI/CD pipelines. In a production setup, you would hopefully not execute this manually
    as a user, unless it’s for initial bootstrapping or solving the chicken-and-egg
    problem. Once the infrastructure is deployed, additional Terraform modules are
    used to deploy further infrastructure in a Kubernetes context.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化这个示例，我们移除了任何不必要的复杂性，比如 CI/CD 流水线。在生产环境中，你应该避免手动执行此操作，除非是用于初步启动或解决鸡与蛋的问题。一旦基础设施部署完成，后续的
    Terraform 模块将用于在 Kubernetes 环境中部署更多的基础设施。
- en: Important note
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: It’s worth noting that there are native approaches available for integrating
    Terraform with GitOps, such as the **Terraform Controller**. This tool enables
    a variety of GitOps models tailored for Terraform resources, including full automation,
    hybrid automation for partial infrastructure management, state enforcement, and
    drift detection, all within a native framework. However, this chapter focuses
    more on the native use of tools.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，已有原生的方法可将 Terraform 与 GitOps 集成，例如 **Terraform 控制器**。该工具支持多种针对 Terraform
    资源的 GitOps 模型，包括全自动、部分基础设施管理的混合自动化、状态强制和漂移检测，所有这些都在一个原生框架中进行。然而，本章更多聚焦于工具的原生使用。
- en: This approach is sound and was even standard a few years ago. Here, the infrastructure
    is treated and deployed as an application through the declarative module approach.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法是合理的，几年前甚至是标准做法。在这里，基础设施通过声明式模块方法作为一个应用进行处理和部署。
- en: 'However, there are some drawbacks to this method:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种方法也有一些缺点：
- en: '**Lack of continuous monitoring**: This approach does not continuously monitor
    the infrastructure state for any drift, which is a key component in GitOps'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缺乏持续监控**：这种方法无法持续监控基础设施状态的漂移，而这是 GitOps 中的关键组成部分。'
- en: '**Complexity in scalability**: As the infrastructure grows, managing it through
    Terraform alone can become increasingly complex, especially in terms of state
    management, multiple stages, and module dependencies'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性的复杂性**：随着基础设施的增长，仅通过 Terraform 进行管理可能会变得越来越复杂，尤其是在状态管理、多阶段和模块依赖关系方面。'
- en: '**Limited dynamic response**: The approach lacks the dynamic response to changes
    that a GitOps workflow offers, where real-time adjustments to the infrastructure
    can be managed more seamlessly'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有限的动态响应**：这种方法缺乏 GitOps 工作流所提供的动态响应能力，在 GitOps 工作流中，基础设施可以更无缝地进行实时调整。'
- en: '**Overhead in managing modules**: Relying heavily on Terraform modules for
    every aspect of deployment can lead to overhead in module management and version
    control'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理模块的开销**：在每个部署环节中都依赖 Terraform 模块可能会导致模块管理和版本控制的开销。'
- en: '**Potential for configuration drift**: Without continuous reconciliation, there’s
    a higher risk of configuration drift over time as manual updates may not be tracked
    or recorded consistently'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置漂移的潜在风险**：如果没有持续的协调，随着时间的推移，配置漂移的风险会更高，因为手动更新可能无法持续跟踪或记录。'
- en: Use case 2 – integrating Terraform and Argo CD for deployment processes
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用例 2 – 将 Terraform 和 Argo CD 集成用于部署流程
- en: 'The next approach, illustrated in *Figure 7**.2,* combines the first method
    and then delegates the task to Argo CD. This approach is common in practice and
    often encountered in various projects with different clients. In this method,
    the Azure infrastructure is initially rolled out using Terraform modules. Subsequently,
    Argo CD is deployed as the initial instance using Terraform modules. Afterward,
    Argo CD takes over the GitOps part and deploys the Kubernetes context-related
    infrastructure. In this approach, a declarative method is best. Terraform modules
    are laid out declaratively, and the infrastructure, such as **Cert-Manager**,
    is also presented declaratively as *Applications* or *ApplicationSets*, as described
    in previous chapters:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 下一种方法，如*图 7.2*所示，结合了第一种方法，然后将任务委托给 Argo CD。这种方法在实践中非常常见，并且经常出现在不同客户的各种项目中。在这种方法中，首先使用
    Terraform 模块进行 Azure 基础设施的部署。随后，Argo CD 被作为初始实例通过 Terraform 模块进行部署。然后，Argo CD
    接管 GitOps 部分并部署与 Kubernetes 上下文相关的基础设施。在这种方法中，声明性方法最为合适。Terraform 模块以声明方式呈现，基础设施，如
    **Cert-Manager**，也作为*应用程序*或*应用程序集*以声明性方式呈现，如前几章所述：
- en: '![Figure 7.2 – Use case 2 – integrating Terraform and Argo CD for deployment
    processes](img/B22100_07_02.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.2 – 用例 2 – 将 Terraform 和 Argo CD 集成用于部署流程](img/B22100_07_02.jpg)'
- en: Figure 7.2 – Use case 2 – integrating Terraform and Argo CD for deployment processes
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.2 – 用例 2 – 将 Terraform 和 Argo CD 集成用于部署流程
- en: 'While this approach has its advantages, there are potential drawbacks to consider:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这种方法有其优势，但也有需要考虑的潜在缺点：
- en: '**Complexity of integration**: Combining Terraform with Argo CD can add complexity,
    requiring a solid understanding of both tools'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成的复杂性**：将 Terraform 与 Argo CD 结合使用可能会增加复杂性，要求对这两种工具都有扎实的理解。'
- en: '**Initial learning curve**: For teams new to either Terraform or Argo CD, the
    learning curve might be steep due to the integration of these two different paradigms'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**初期学习曲线**：对于那些对 Terraform 或 Argo CD 不熟悉的团队，由于这两种不同范式的结合，学习曲线可能较为陡峭。'
- en: '**Overhead in maintenance**: The combined approach might require more maintenance
    effort as it involves managing two systems rather than one'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**维护的开销**：这种组合方法可能需要更多的维护工作，因为它涉及管理两个系统而不是一个。'
- en: '**Risk of misconfiguration**: With two powerful tools at play, there’s an increased
    risk of misconfiguration, which can lead to deployment issues or security vulnerabilities'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置错误的风险**：随着两种强大工具的并行使用，配置错误的风险增加，这可能导致部署问题或安全漏洞。'
- en: '**Update coordination**: Coordinating updates between the infrastructure managed
    by Terraform and applications managed by Argo CD requires careful planning to
    avoid conflicts and ensure smooth operations'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更新协调**：在 Terraform 管理的基础设施和 Argo CD 管理的应用程序之间协调更新，需要仔细规划以避免冲突并确保顺利运行。'
- en: Use case 3 – unified management on Kubernetes – full-scale orchestration with
    CRs and Crossplane
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用例 3 – 在 Kubernetes 上的统一管理 – 使用 CR 和 Crossplane 进行全面编排
- en: 'The next approach, depicted in *Figure 7**.3*, fully utilizes the Kubernetes
    API while focusing on **CRDs** and **custom resources** (**CRs**), which allows
    users to define their resource types and instantiate these types for custom configurations
    and functionality. This approach uses Crossplane for provisioning cloud infrastructure
    and deploying third-party tools necessary for Kubernetes infrastructure, such
    as Cert-Manager. It treats infrastructure as applications through the declarative
    nature of CRs, providing a fully trackable solution that leverages the Kubernetes
    ecosystem as an orchestration platform to keep resources in sync. This concept
    can be expanded so that virtually all cloud infrastructure is provisioned through
    Argo CD in combination with Crossplane. Everything is maintained within the cluster,
    requiring only an understanding of Kubernetes manifests – in this case, CRDs and
    CRs:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的方法，如 *图 7.3* 所示，充分利用 Kubernetes API，同时聚焦于 **CRD** 和 **自定义资源**（**CR**），允许用户定义自己的资源类型，并实例化这些类型以进行自定义配置和功能扩展。该方法使用
    Crossplane 来配置云基础设施，并部署 Kubernetes 基础设施所需的第三方工具，如 Cert-Manager。通过 CR 的声明性特性，它将基础设施视为应用程序，提供一个完全可追踪的解决方案，利用
    Kubernetes 生态系统作为编排平台以保持资源同步。这个概念可以扩展，使几乎所有的云基础设施都通过 Argo CD 与 Crossplane 结合进行配置。所有内容都在集群内进行维护，只需了解
    Kubernetes 清单——在这种情况下，是 CRD 和 CR：
- en: '![Figure 7.3 – Use case 3 – unified management on Kubernetes – full-scale orchestration
    with CRs and Crossplane](img/B22100_07_03.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.3 – 用例 3 – 在 Kubernetes 上的统一管理 – 使用 CR 和 Crossplane 的全规模编排](img/B22100_07_03.jpg)'
- en: Figure 7.3 – Use case 3 – unified management on Kubernetes – full-scale orchestration
    with CRs and Crossplane
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.3 – 用例 3 – 在 Kubernetes 上的统一管理 – 使用 CR 和 Crossplane 的全规模编排
- en: For a better understanding of how to create a resource in Azure with Crosslplane,
    CR, and Argo CD, here is a small example using the CR `VirtualNetwork` type. The
    requirement for this is that Kubernetes is installed and that the Azure provider
    is installed and configured [*3*].
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解如何使用 Crossplane、CR 和 Argo CD 在 Azure 上创建资源，下面是一个使用 CR `VirtualNetwork`
    类型的小示例。此操作的要求是安装 Kubernetes，并且安装和配置了 Azure 提供者 [*3*]。
- en: Once the preparation is complete and the network provider is installed, we can
    create a managed resource of the `VirtualNetwork` type that can be used for AKS,
    for example.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦准备工作完成，并且网络提供者已安装，我们可以创建一个 `VirtualNetwork` 类型的已管理资源，举例来说，这可以用于 AKS。
- en: 'First, create a CR, like so:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个 CR，像这样：
- en: '[PRE0]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Then, push the CR to your Git repository that will be managed by Argo CD. The
    CD part should now happen over GitOps with Argo CD and you should see the created
    managed Azure network resource in the portal.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将 CR 推送到由 Argo CD 管理的 Git 仓库中。现在，CD 部分应通过 GitOps 与 Argo CD 完成，您应该能够在门户中看到已创建的
    Azure 网络资源。
- en: 'However, this setup assumes the existence of a managed cluster where the necessary
    tools are deployed and configured. It comes with the following potential weaknesses:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种设置假设存在一个已管理的集群，其中部署和配置了必要的工具。它有以下潜在的弱点：
- en: '**The complexity of a Kubernetes ecosystem**: It requires a thorough understanding
    of Kubernetes, including CRDs and CRs, which might be challenging for teams less
    familiar with these concepts'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kubernetes 生态系统的复杂性**：它需要对 Kubernetes 有深入的理解，包括 CRD 和 CR，这对于不太熟悉这些概念的团队可能具有挑战性'
- en: '**Dependency on a managed cluster**: The approach is contingent on a managed
    Kubernetes cluster, limiting its applicability in environments where such a setup
    is not available'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**依赖于已管理的集群**：这种方法依赖于已管理的 Kubernetes 集群，因此在没有这种设置的环境中，其适用性受到限制'
- en: '**Resource intensiveness**: The approach might be resource-intensive, requiring
    more compute power and memory within the cluster'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源密集型**：这种方法可能资源密集，要求集群内有更多的计算能力和内存'
- en: '**Configuration and maintenance**: Managing and maintaining the configurations
    of CRDs and CRs can be cumbersome and error-prone, especially in large-scale deployments
    and version upgrades'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置和维护**：管理和维护 CRD 和 CR 的配置可能会繁琐且容易出错，特别是在大规模部署和版本升级时'
- en: As you can see, there is no one-size-fits-all approach that meets all requirements.
    The right approach for a team depends greatly on the company’s specific needs,
    the size of the teams, the team’s skill set in various areas, and more. However,
    we should still take a moment to revisit why treating infra-as-apps is a game-changer.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，没有一种“通用”方法能够满足所有需求。团队的正确方法在很大程度上取决于公司的具体需求、团队规模、团队在各个领域的技能等因素。然而，我们仍然应该花些时间重新思考为什么将infra-as-apps视为颠覆性创新。
- en: Why infra-as-apps is a game-changer?
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么infra-as-apps是一个颠覆性创新？
- en: 'To summarize, here’s a list of the benefits of infra-as-apps that makes it
    a game-changer:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，以下是infra-as-apps作为一个颠覆性创新的优势列表：
- en: '**Security**: By centralizing key management and shifting from direct cloud
    access to change management via Git, infra-as-apps enhances security. This approach
    minimizes risks associated with direct cloud access and improves audit trails
    by tracking changes through version control.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全性**：通过集中密钥管理并将直接的云访问转变为通过Git进行的变更管理，infra-as-apps增强了安全性。这种方法减少了直接云访问带来的风险，并通过版本控制追踪变更，改进了审计日志。'
- en: '**Efficient resource management**: This model streamlines the provisioning
    of new resources and the upgrading of existing ones. It allows for more agile
    and responsive infrastructure management, reducing the time and effort required
    for resource allocation and updates.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高效的资源管理**：该模型简化了新资源的配置和现有资源的升级。它允许更灵活和响应更快的基础设施管理，减少了资源分配和更新所需的时间和精力。'
- en: '**Improved CI/CD for pull requests**: Infra-as-apps focuses on enhancing pull
    requests within CI/CD pipelines, offering automated rollbacks and more thorough
    testing. This leads to more robust and reliable deployment processes, ensuring
    higher quality and stability in production environments.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**改进的CI/CD拉取请求**：infra-as-apps专注于提升CI/CD管道中的拉取请求，提供自动回滚和更彻底的测试。这使得部署过程更为稳健和可靠，确保生产环境中的更高质量和稳定性。'
- en: '**Easier multi-cloud provisioning**: With tools such as Crossplane, infra-as-apps
    facilitates provisioning across various cloud environments. This capability simplifies
    the implementation of multi-cloud strategies, making it easier to manage and deploy
    resources across different cloud platforms efficiently.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更简便的多云资源配置**：借助Crossplane等工具，infra-as-apps使得在多个云环境中配置资源变得更加简便。此功能简化了多云战略的实施，使得跨不同云平台管理和部署资源变得更加高效。'
- en: '**Simplified infrastructure management**: This approach significantly streamlines
    the process of managing infrastructure, making it more efficient and less prone
    to human error.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简化的基础设施管理**：这种方法显著简化了管理基础设施的过程，使其更加高效，减少人为错误的发生。'
- en: '**Ease of onboarding and resource provisioning for developers**: It simplifies
    the process for developers to get started and manage resources, reducing the time
    and complexity involved in setting up and deploying applications.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发者的入门和资源配置简易性**：它简化了开发者入门和管理资源的过程，减少了设置和部署应用时所需的时间和复杂性。'
- en: '**Faster mean time to recover (MTTR)**: It improves the speed of recovery from
    failures.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更快的平均恢复时间（MTTR）**：它提高了从故障中恢复的速度。'
- en: '**Solid auditability**: It provides comprehensive audit trails and clear accountability,
    making it easier to track changes and maintain compliance with regulatory standards.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**稳固的可审计性**：它提供了全面的审计日志和清晰的责任追踪，使得跟踪变更和保持合规性变得更加容易。'
- en: There are numerous companies, such as CERN, Splash, Grafana Labs, IBM, and SAP,
    that have already adopted Crossplane for a variety of use cases. A prime example
    of infra-as-apps in action can be seen at CERN, as presented by Ricardo Rocha
    at GitOpsCon US 2021, *A Multi-Cluster, Multi-Cloud Infrastructure with GitOps
    at CERN* [*2*]. CERN, renowned for operating the Large Hadron Collider, leverages
    infra-as-apps to manage an extensive infrastructure, including over 600 clusters,
    3,000 nodes, 13,000 cores, 30 TBs of RAM, and 160 TBs of raw storage, to process
    vast amounts of data from experiments. They manage a massive array of clusters
    and computing resources using Kubernetes. CERN’s implementation involves Helm
    charts with Crossplane configurations for cluster and resource management, allowing
    rapid scaling and multi-cloud resource allocation.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 许多公司，如CERN、Splash、Grafana Labs、IBM和SAP，已经采用了Crossplane用于各种用例。CERN在GitOpsCon
    US 2021上由Ricardo Rocha展示的《*A Multi-Cluster, Multi-Cloud Infrastructure with GitOps
    at CERN*》[*2*]是一个实践中应用infra-as-apps的典范。CERN以运营大型强子对撞机而闻名，利用infra-as-apps管理广泛的基础设施，包括超过600个集群、3000个节点、13000个核心、30
    TB的内存和160 TB的原始存储，以处理来自实验的大量数据。他们使用Kubernetes管理大规模的集群和计算资源。CERN的实施涉及使用带有Crossplane配置的Helm图表进行集群和资源管理，支持快速扩展和多云资源分配。
- en: 'As a second example, IBM’s use of Crossplane and GitOps to manage the infrastructure
    life cycle and application deployments is noteworthy. In *GitOpsify Everything:
    When Crossplane Meets Argo CD* [*4*], presented by Ken Murray, a CI/CD engineer
    at IBM, and Ying Mo, a software engineer, they explore the integration of Crossplane
    with Argo CD in various IT environments. IBM’s approach involves using Crossplane
    as an abstraction layer for infrastructure provisioning and cluster management,
    enabling them to maintain a pool of Kubernetes clusters efficiently. This method
    leverages Helm templates for defining resource configurations and simplifies cluster
    management by allowing users to interact with simple resource types while Crossplane
    handles communication with cloud providers.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '作为第二个例子，IBM使用Crossplane和GitOps管理基础设施生命周期和应用程序部署的做法也值得注意。在*GitOpsify Everything:
    When Crossplane Meets Argo CD* [*4*]中，IBM的CI/CD工程师Ken Murray和软件工程师Ying Mo探讨了Crossplane与Argo
    CD在不同IT环境中的集成。IBM的方法是将Crossplane作为基础设施提供和集群管理的抽象层，使他们能够高效地维护Kubernetes集群池。该方法利用Helm模板来定义资源配置，并通过允许用户与简单的资源类型进行交互，从而简化了集群管理，而Crossplane则处理与云服务提供商的通信。'
- en: Infra-as-apps distinguishes itself from traditional **infra-as-code** by fully
    embracing GitOps at all levels. This approach treats manual changes to infrastructure
    as deviations from the Git-defined desired state, enhancing security and predictability
    in infrastructure management. It represents a significant shift in how infrastructure
    is managed, aligning it more closely with the dynamic and automated nature of
    application development and deployment.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Infra-as-apps与传统的**infra-as-code**不同，它在各个层面上完全拥抱GitOps。这种方法将基础设施的手动更改视为偏离Git定义的期望状态，从而增强了基础设施管理的安全性和可预测性。它代表了基础设施管理方式的重大转变，使其与应用程序开发和部署的动态和自动化特性更加契合。
- en: GitOps has changed a lot, creating an immutable infrastructure that also has
    an impact on a company’s culture. In the next section, we will look at immutable
    infrastructure.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: GitOps发生了很大的变化，创建了不可变基础设施，同时也影响了公司的文化。在接下来的部分，我们将探讨不可变基础设施。
- en: Understanding the principles of immutable infrastructure
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解不可变基础设施的原理
- en: The **principles of immutable infrastructure**, combined with the GitOps approach,
    offer a transformative way of managing infrastructure and deployments in modern
    software development environments. Immutable infrastructure refers to a model
    where servers, once deployed, are never directly modified. Instead, changes require
    the server to be replaced with a new instance. This model drastically reduces
    issues caused by configuration drift and enhances the reliability of systems by
    treating servers as disposable units that can be replaced quickly, offering greater
    scalability and efficiency in deployment processes.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**不可变基础设施的原理**结合GitOps方法，为现代软件开发环境中的基础设施和部署管理提供了一种变革性的方式。不可变基础设施指的是一种模型，其中服务器一旦部署，就永远不再直接修改。相反，更改需要通过用新实例替换服务器来实现。这种模型大大减少了由配置漂移引发的问题，并通过将服务器视为可快速替换的可丢弃单元，提高了系统的可靠性，从而在部署过程中提供了更大的可扩展性和效率。'
- en: Incorporating GitOps into this model amplifies these benefits. GitOps leverages
    Git as the central source of truth for managing both software applications and
    infrastructure. It applies cloud-native patterns to deployments, often associated
    with Kubernetes but also applicable to various platforms. The core principles
    of GitOps include treating infrastructure as code, ensuring versioned and immutable
    deployments, automatic pulling of the desired state, and continuous reconciliation
    between the desired and actual states.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 将 GitOps 融入这一模型能够放大这些好处。GitOps 利用 Git 作为管理软件应用程序和基础设施的中央真实来源。它将云原生模式应用于部署，这种模式通常与
    Kubernetes 相关，但也适用于各种平台。GitOps 的核心原则包括将基础设施视为代码，确保版本化和不可变的部署，自动拉取所需状态，并持续协调期望状态与实际状态之间的差异。
- en: The essence of immutable infrastructure
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不可变基础设施的本质
- en: Immutable infrastructure is a concept where servers, once deployed, are never
    modified; if a change is needed, a new instance is created and replaced. This
    approach is fundamentally different from traditional mutable infrastructure, where
    servers are continually updated and modified. The immutable model brings several
    key advantages.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 不可变基础设施是一种概念，一旦服务器部署完成，便不再修改；如果需要更改，则会创建新的实例并替换旧的实例。这种方法与传统的可变基础设施截然不同，后者的服务器会不断更新和修改。不可变模型带来了几个关键优势。
- en: 'The advantages of immutable infrastructure are as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 不可变基础设施的优势如下：
- en: '**Consistency and reliability**: Immutable servers remain in a known, stable
    state, significantly reducing the risk of unexpected issues due to environmental
    drift or inconsistencies'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一致性和可靠性**：不可变服务器保持在已知的稳定状态，显著减少了由于环境漂移或不一致性引发的意外问题的风险。'
- en: '**Enhanced security**: With servers not being modified post-deployment, the
    attack surface remains constant, simplifying security management and anomaly detection'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**增强的安全性**：由于服务器在部署后不再修改，攻击面保持不变，简化了安全管理和异常检测。'
- en: '**Simplified management and debugging**: Troubleshooting becomes more straightforward
    as the infrastructure stays in a predictable state'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简化的管理和调试**：故障排除变得更加简单，因为基础设施保持在可预测的状态。'
- en: '**Scalability and performance**: New instances can be spun up and down efficiently
    to meet demand, maintaining a consistent performance level'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性与性能**：可以高效地启动和关闭新的实例以满足需求，保持一致的性能水平。'
- en: 'However, this approach isn’t without its challenges:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种方法并非没有挑战：
- en: '**Increased storage and resource needs**: Immutable infrastructure can require
    more storage since each change involves creating a new instance'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**增加的存储和资源需求**：不可变基础设施可能需要更多的存储，因为每次更改都涉及创建一个新实例。'
- en: '**Potential deployment overhead**: Setting up an entirely new instance for
    every change can be more resource-intensive than updating an existing one'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**潜在的部署开销**：每次更改都需要设置一个全新的实例，这可能比更新现有实例更耗费资源。'
- en: '**Complexity in configuration management**: Managing numerous server instances
    can become complex, particularly in large-scale environments'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置管理的复杂性**：管理大量的服务器实例可能变得非常复杂，尤其是在大规模环境中。'
- en: Integrating immutable infrastructure with GitOps
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将不可变基础设施与 GitOps 集成
- en: Incorporating GitOps into immutable infrastructure leverages Git’s core principles
    – version control, collaboration, and automation – to operational management,
    enabling a system where infrastructure is treated as code, with all configurations
    and states meticulously maintained in Git repositories for enhanced consistency
    and traceability.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 将 GitOps 融入不可变基础设施利用了 Git 的核心原则——版本控制、协作和自动化——来进行运营管理，使得基础设施被视为代码，所有配置和状态都被精心维护在
    Git 仓库中，从而增强了一致性和可追溯性。
- en: 'The advantages of GitOps are as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: GitOps 的优势如下：
- en: '**Single source of truth**: Having a single repository for both application
    and infrastructure code ensures consistency and traceability'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**唯一真实来源**：为应用程序和基础设施代码提供单一的代码库，确保一致性和可追溯性。'
- en: '**Automated, reliable deployments**: Continuous deployment via GitOps operators
    automates and simplifies the deployment process'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化、可靠的部署**：通过 GitOps 操作员进行持续部署，自动化并简化了部署过程。'
- en: '**Enhanced collaboration and transparency**: Pull request workflows enhance
    collaboration, providing clear audit trails and ensuring accountability in changes'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**增强的协作与透明度**：拉取请求工作流增强了协作，提供清晰的审计跟踪，确保变更的可追责性。'
- en: '**Improved security and compliance**: Git’s inherent features facilitate robust
    access control, encryption, and compliance adherence'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**增强的安全性和合规性**：Git固有的特性有助于强大的访问控制、加密和合规性遵循。'
- en: 'Despite these benefits, GitOps is not without its drawbacks:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有这些优势，GitOps也有其缺点：
- en: '**Complexity in scaling**: Managing multiple repositories and dealing with
    the complexity of large-scale deployments can be challenging.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**扩展性复杂性**：管理多个仓库并处理大规模部署的复杂性可能具有挑战性。'
- en: '**Git limitations for operational tasks**: Git, primarily designed for code
    version control, may not be the best fit for operational updates, leading to potential
    conflicts.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Git在操作任务中的局限性**：Git主要设计用于代码版本控制，可能并不适合用于操作性更新，可能导致潜在冲突。'
- en: '**Learning curve and adoption resistance**: Teams may face a steep learning
    curve or resistance to adopting new workflows, tools, and mindsets. I will cover
    this part later.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**学习曲线和采纳阻力**：团队可能面临陡峭的学习曲线，或者对采用新工作流、工具和思维方式的抵触情绪。我将在后面讨论这一部分。'
- en: Synergy and challenges
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 协同效应与挑战
- en: 'When immutable infrastructure and GitOps are combined, they create a powerful
    synergy:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 当不可变基础设施与GitOps结合时，它们创造了强大的协同效应：
- en: '**Infrastructure as a dynamic, version-controlled entity**: Infrastructure
    is treated similarly to application code, with changes tracked, reviewed, and
    deployed using GitOps methodologies'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将基础设施视为动态的、版本控制的实体**：基础设施被视为类似于应用程序代码的对象，所有变更都通过GitOps方法进行追踪、审查和部署。'
- en: '**Rapid recovery and rollback capabilities**: The combination allows for quick
    recovery from failures and easy rollbacks to previous stable states'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快速恢复和回滚能力**：这种组合能够快速从故障中恢复，并轻松回滚到之前的稳定状态。'
- en: '**Streamlined operations**: This approach reduces the need for manual intervention,
    minimizing human error and streamlining operations'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简化的操作**：这种方法减少了手动干预的需求，最小化了人为错误并简化了操作流程。'
- en: 'However, this integration also presents unique challenges:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种集成也带来了独特的挑战：
- en: '**Complex workflow management**: Balancing the immutable aspects of infrastructure
    with the dynamic nature of GitOps workflows requires careful planning and execution'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**复杂的工作流管理**：平衡基础设施的不可变性与GitOps工作流的动态特性需要仔细的规划和执行。'
- en: '**Dependency on tooling and processes**: The effectiveness of this approach
    is heavily reliant on the right tooling and well-defined processes'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**依赖于工具和流程**：这一方法的有效性在很大程度上依赖于正确的工具和明确定义的流程。'
- en: '**Balancing security and agility**: Ensuring security in a rapidly changing
    environment necessitates a fine balance between rigid controls and operational
    flexibility'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平衡安全性和敏捷性**：在快速变化的环境中确保安全性需要在严格控制与操作灵活性之间找到微妙的平衡。'
- en: Achieving an effective production environment using immutable infrastructure
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用不可变基础设施实现有效的生产环境
- en: 'The optimal immutable infrastructure for production environments can be conceptualized
    by integrating several key practices, refined through experience. Here’s how an
    effective production environment might look and why:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳的生产环境不可变基础设施可以通过整合若干关键实践来构建，这些实践通过经验不断优化。以下是有效的生产环境可能呈现的样子及其原因：
- en: '**Read-only access to a Kubernetes prod cluster**: In a productive environment,
    a Kubernetes cluster should be treated like a managed service or a *black box*
    from a developer’s perspective. This means that access to the cluster should be
    primarily read-only. Developers should not be permitted to make manual changes
    to the cluster, ensuring a controlled and stable environment.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kubernetes生产集群的只读访问**：在生产环境中，Kubernetes集群应从开发人员的角度看待为一个受管服务或*黑箱*。这意味着对集群的访问应主要为只读，开发人员不应被允许手动更改集群，从而确保环境的可控性和稳定性。'
- en: '**Only create and delete resources through GitOps**: This principle dictates
    that all resources entering the cluster should be managed exclusively through
    GitOps. This includes the entire creation process, covering elements such as namespaces,
    deployments, services, ingress, service accounts, and more. This approach ensures
    that changes are **traceable**, **reversible**, and **consistent** with the source
    of truth in the Git repository.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仅通过GitOps创建和删除资源**：这一原则规定，所有进入集群的资源应仅通过GitOps进行管理。这包括整个创建过程，涵盖命名空间、部署、服务、入口、服务帐户等元素。此方法确保所有变更**可追溯**、**可逆**，并与Git仓库中的真相源保持**一致**。'
- en: '**Do not create namespaces over applications**: In the context of Argo CD and
    its concept of application, an application mustn’t be able to create namespaces.
    This is because Argo CD does not support the deletion of namespaces created by
    an application *[5]*. This restriction is in place to prevent uncontrolled namespace
    creation, which could lead to conflicts and management issues in shared environments.
    In the following example, I will clarify the situation for you by illustrating
    the practical implications and potential risks associated with managing namespaces
    in a shared environment using Argo CD.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不要创建命名空间覆盖应用程序**：在Argo CD及其应用程序概念的背景下，一个应用程序不应该能够创建命名空间。这是因为Argo CD不支持删除由应用程序创建的命名空间*[5]*。此限制是为了防止命名空间的
    uncontrolled 创建，避免在共享环境中引发冲突和管理问题。接下来的示例将通过具体实例来阐明在使用Argo CD的共享环境中管理命名空间的实际影响和潜在风险。'
- en: Consider a scenario where five teams share a single Kubernetes namespace. Each
    team creates its own Argo CD application to deploy its service components, contributing
    to the overall microservices architecture. Suppose Team A decides to decommission
    its service. They proceed to delete their application and the associated deployed
    service, and they also attempt to delete the shared namespace through their application.
    However, Argo CD applications do not inherently have knowledge of or connections
    to other applications or unlinked resources within the same namespace. Consequently,
    if such a deletion were permitted, it would inadvertently result in the removal
    of the namespace and all other services deployed by the different teams within
    it. Fortunately, this scenario is not feasible in practice, as the Argo project
    team does not implement such a feature to avoid these kinds of disruptive and
    unintended consequences.
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 假设五个团队共享一个Kubernetes命名空间。每个团队创建自己的Argo CD应用程序来部署其服务组件，贡献于整体微服务架构。假设A团队决定停用其服务。它们会删除自己的应用程序和相关的已部署服务，并尝试通过应用程序删除共享的命名空间。然而，Argo
    CD应用程序本身并不了解或连接到同一命名空间内的其他应用程序或未链接的资源。因此，如果允许这种删除操作，它将无意中导致命名空间及其中其他团队部署的所有服务被删除。幸运的是，这种情况在实践中是不可行的，因为Argo项目团队并未实现此类功能，以避免这些破坏性和意外的后果。
- en: '**Use the right tools, such as PR-Generator**: Integrating tools such as PR-Generator
    in a GitOps workflow with Argo CD can greatly enhance the testing and deployment
    processes. PR-Generator can create resources with a specific prefix as soon as
    a PR is initiated, ensuring that resources are correctly created and cleaned up,
    respecting the *do not create namespaces over* *application* principle.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用合适的工具，如PR-Generator**：将PR-Generator等工具集成到与Argo CD的GitOps工作流中，可以极大地提升测试和部署过程。PR-Generator可以在PR启动时立即创建带有特定前缀的资源，确保资源正确创建并被清理，同时遵守*不要创建命名空间覆盖*
    *应用程序*原则。'
- en: 'By adhering to these practices, several benefits can be realized:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循这些实践可以实现以下几个好处：
- en: Every change is made through Git, ensuring a centralized and version-controlled
    change management process
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每次更改都通过Git进行，确保了集中化和版本控制的变更管理过程。
- en: Changes are recorded in the Git history, providing a transparent and traceable
    record of all modifications
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有更改都记录在Git历史中，提供了透明且可追溯的所有修改记录。
- en: Resources are cleanly managed, with no residual “orphaned” resources left in
    the cluster
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源得到清晰的管理，集群中不会留下任何残余的“孤立”资源。
- en: Clean and efficient workflow management using PRs and Git, facilitated by tools
    such as PR-Generator
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用PR和Git进行干净高效的工作流管理，借助如PR-Generator等工具。
- en: It establishes a standard and commitment within the organization, allowing these
    practices to be replicated across different projects
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它在组织内建立了标准和承诺，使这些实践可以在不同项目之间复制。
- en: Implementing these principles in a production environment creates a robust,
    secure, and manageable infrastructure that leverages the benefits of both immutable
    infrastructure and GitOps methodologies.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产环境中实施这些原则，创建了一个强大、安全、可管理的基础设施，充分利用了不可变基础设施和GitOps方法的优点。
- en: 'A potential folder structure for an application that utilizes both **Kustomize**
    and Argo CD might be structured as follows:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 一个同时使用**Kustomize**和Argo CD的应用程序的潜在文件夹结构可能如下所示：
- en: '[PRE1]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This structure ensures that all resources can be deployed and cleaned up through
    Argo CD and the GitOps approach, eliminating the need to set the `AUTO-CREATE
    NAMESPACE` option in the Application Sync Options for namespace creation.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这种结构确保所有资源都可以通过 Argo CD 和 GitOps 方法进行部署和清理，从而消除了在应用同步选项中设置 `自动创建命名空间` 选项以创建命名空间的需求。
- en: Application configuration for immutable infrastructure
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 不可变基础设施的应用配置
- en: 'Next, we will examine a potential application configuration that contributes
    to an immutable infrastructure setup:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将检查一个可能有助于不可变基础设施设置的应用配置：
- en: '![Figure 7.4 – Example of an application sync policy configuration](img/B22100_07_04.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![图7.4 – 应用同步策略配置示例](img/B22100_07_04.jpg)'
- en: Figure 7.4 – Example of an application sync policy configuration
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.4 – 应用同步策略配置示例
- en: 'The following flags should be set if you want to get the most immutable infrastructure
    setup:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望获得最具不可变性的基础设施设置，请设置以下标志：
- en: '**PRUNE RESOURCES**: Enable this option to allow Argo CD to automatically delete
    resources that are present in the cluster but no longer defined in the Git repository.
    This ensures that all resources in the cluster are managed through the GitOps
    approach.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**修剪资源**：启用此选项，允许 Argo CD 自动删除集群中存在但在 Git 仓库中不再定义的资源。这样可以确保集群中的所有资源都通过 GitOps
    方法进行管理。'
- en: '**SELF HEAL**: Enable this option. It ensures that any changes made directly
    in the cluster that deviate from the Git repository are automatically corrected
    by Argo CD, maintaining the desired state as defined in Git.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自我修复**：启用此选项。它确保直接在集群中进行的任何偏离 Git 仓库的更改都会被 Argo CD 自动修正，从而保持 Git 中定义的期望状态。'
- en: '**SET DELETION FINALIZER**: Enable this option to ensure that resources are
    only deleted from the cluster when they are removed from the Git repository. This
    prevents premature deletion and ensures resources are cleaned up only after their
    removal from Git.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设置删除最终器**：启用此选项，以确保资源仅在从 Git 仓库中移除后才会从集群中删除。这可以防止过早删除，并确保只有在资源从 Git 中移除后才进行清理。'
- en: '**RESPECT IGNORE DIFFERENCES**: Enable this to instruct Argo CD to ignore specific
    differences it doesn’t recognize. You can define in the Argo CD configuration
    what specific differences to ignore.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**忽略差异**：启用此选项以指示 Argo CD 忽略其无法识别的特定差异。您可以在 Argo CD 配置中定义要忽略的具体差异。'
- en: '**AUTO-CREATE NAMESPACE**: Ensure this option is disabled to prevent Argo CD
    from automatically creating namespaces. Namespaces should be explicitly defined
    as resources in your Git repository.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动创建命名空间**：确保禁用此选项，以防止 Argo CD 自动创建命名空间。命名空间应在您的 Git 仓库中作为资源显式定义。'
- en: By setting these policies, you ensure that resource creation, deletion, and
    synchronization are all managed through changes in your Git repository while adhering
    to the principles of GitOps. This approach ensures a tight coupling between the
    declared state in Git and the actual state in the cluster.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 通过设置这些策略，您可以确保资源的创建、删除和同步都通过 Git 仓库中的更改进行管理，同时遵循 GitOps 原则。这种方法确保了 Git 中声明的状态与集群中的实际状态之间的紧密耦合。
- en: The combination of immutable infrastructure and GitOps represents a modern approach
    to IT operations and development. It brings together the best of stability, security,
    and dynamic, automated workflows. While it offers significant advantages in terms
    of reliability, security, and efficiency, it also poses challenges in terms of
    complexity, resource demands, and dependency on specific tools and practices.
    As with any IT methodology, success in implementing these concepts depends on
    a clear understanding of their benefits and limitations, careful planning, and
    an adaptive approach to evolving IT landscapes.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 不可变基础设施与 GitOps 的结合代表了 IT 运维和开发的现代方法。它将稳定性、安全性和动态自动化工作流的最佳特性结合在一起。虽然在可靠性、安全性和效率方面提供了显著的优势，但也在复杂性、资源需求以及对特定工具和实践的依赖方面带来了挑战。与任何
    IT 方法论一样，成功实施这些概念依赖于对其优缺点的清晰理解、精心的规划以及应对不断变化的 IT 环境的适应性。
- en: So far, we’ve looked at various aspects of transformation that come with GitOps.
    But what’s the point of all this if you can’t get or measure any added value from
    it? That’s why, in the next section, we’ll look at specific metrics that make
    product quality measurable.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经探讨了与 GitOps 相关的各种转型方面。但是，如果无法从中获得或衡量任何附加值，那这一切又有什么意义呢？因此，在下一节中，我们将探讨使产品质量可衡量的具体指标。
- en: Introducing DORA metrics
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入 DORA 指标
- en: 'In this section, we’ll introduce you to DORA metrics and delve into a set of
    key performance indicators developed by the DORA team. These metrics are pivotal
    in evaluating and improving software delivery and operational performance within
    IT teams. The four principal DORA metrics are **Deployment Frequency**, **Lead
    Time for Changes**, **Change Failure Rate**, and **MTTR**:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将向您介绍DORA指标，并深入探讨DORA团队开发的一组关键绩效指标。这些指标对于评估和提升IT团队的软件交付和运营绩效至关重要。四个主要的DORA指标是**部署频率**、**变更领先时间**、**变更失败率**和**MTTR**：
- en: '**Deployment Frequency**: This assesses how often a team successfully deploys
    code to production. Frequent deployments are indicative of an efficient and responsive
    development process, allowing for quicker feedback and **continuous improvement**.
    To increase the frequency of deployments, adopt CI/CD practices. Automate your
    build and deployment pipelines using tools such as **Jenkins**, **GitHub Actions**,
    or **GitLab CI**. Regular, smaller deployments reduce risks and facilitate quicker
    feedback. Additionally, feature flags can be used to manage deployments and gradually
    roll out new features.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署频率**：这是评估团队成功将代码部署到生产环境的频率。频繁的部署表明开发过程高效且响应迅速，能够更快地获得反馈并实现**持续改进**。为了提高部署频率，可以采用CI/CD实践。使用如**Jenkins**、**GitHub
    Actions**或**GitLab CI**等工具自动化构建和部署流水线。定期的小规模部署可以降低风险并加速反馈。此外，特性标志可以用于管理部署并逐步推出新特性。'
- en: '**Lead Time for Changes**: This measures the duration from code commit to code
    deployment in production. This metric indicates the speed and agility of the development
    process. Shorter lead times often result in faster feedback from users and the
    ability to adapt and improve the software swiftly. Improve lead time by optimizing
    your development processes. This includes adopting Agile methodologies, increasing
    collaboration between teams, and integrating code review and testing into the
    development process. Utilize automated testing and **continuous integration**
    tools to ensure that code changes are tested and integrated quickly. Tracking
    tools can be used to monitor the time from code commit to deployment, helping
    identify bottlenecks.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**变更领先时间**：这是指从代码提交到生产环境部署的时间长度。这个指标反映了开发过程的速度和敏捷性。较短的领先时间通常意味着能更快速地获得用户反馈，并且能够迅速适应和改进软件。通过优化开发过程可以缩短领先时间。这包括采用敏捷方法论、增强团队之间的协作，并将代码审查和测试整合到开发流程中。利用自动化测试和**持续集成**工具，确保代码更改能够快速进行测试和集成。可以使用跟踪工具来监控从代码提交到部署的时间，帮助识别瓶颈。'
- en: '**Change Failure Rate**: This focuses on the percentage of deployments that
    result in a production failure. This metric is essential for understanding the
    reliability and stability of the software development process. A lower change
    failure rate signifies higher quality and reliability in software deployments.
    To reduce the change failure rate, focus on enhancing the **quality of code**
    and the reliability of deployments. Implement automated testing, including unit
    tests, integration tests, and end-to-end tests, to catch issues early. Employ
    static code analysis tools and conduct thorough code reviews. Practice continuous
    deployment with automated rollbacks, and use **canary releases** or **blue-green
    deployments** to minimize the impact of failed deployments.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**变更失败率**：这个指标关注导致生产环境失败的部署比例。该指标对于理解软件开发过程的可靠性和稳定性至关重要。较低的变更失败率意味着软件部署的质量和可靠性较高。为了降低变更失败率，可以专注于提升**代码质量**和部署的可靠性。实施自动化测试，包括单元测试、集成测试和端到端测试，及早发现问题。使用静态代码分析工具并进行全面的代码审查。实践持续部署并进行自动回滚，采用**金丝雀发布**或**蓝绿部署**等方式以最小化失败部署的影响。'
- en: '**MTTR**: This is the average time taken to recover from a failure in the production
    environment. This metric is crucial as it reflects the team’s ability to quickly
    rectify issues, thereby minimizing downtime and maintaining service quality. Reducing
    MTTR involves improving incident response and recovery processes. Implement monitoring
    and alerting tools such as Prometheus, Grafana, or New Relic to quickly detect
    issues. Establish clear incident management protocols and on-call rotations. Use
    IaC tools such as Terraform to enable fast and consistent environment recovery.
    Regularly practice incident response drills to ensure the team is prepared for
    quick recovery.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MTTR**：这是从生产环境故障中恢复所需的平均时间。这个指标非常关键，因为它反映了团队快速修复问题的能力，从而最小化停机时间并保持服务质量。减少
    MTTR 需要改善事件响应和恢复流程。实施监控和警报工具，如 Prometheus、Grafana 或 New Relic，以便快速检测问题。建立清晰的事件管理协议和值班轮换。使用基础设施即代码（IaC）工具如
    Terraform，实现快速且一致的环境恢复。定期进行事件响应演练，确保团队能够快速恢复。'
- en: These metrics align well with the GitOps approach, which emphasizes automation,
    monitoring, and quick feedback. GitOps can enhance Deployment Frequency and Lead
    Time for Changes through automated pipelines. It also helps in reducing the Change
    Failure Rate and MTTR by enabling quicker rollbacks and promoting more reliable
    deployments through practices like continuous integration and delivery.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这些指标与 GitOps 方法非常契合，该方法强调自动化、监控和快速反馈。GitOps 通过自动化管道可以提高部署频率和变更交付时间。它还通过启用更快速的回滚和通过持续集成与交付等实践促进更可靠的部署，从而有助于减少变更失败率和平均恢复时间（MTTR）。
- en: However, while DORA metrics provide valuable insights, they come with challenges.
    Implementing these metrics requires a mature DevOps team and established CI/CD
    processes. Data collection and tagging need to be precise and actionable. The
    metrics must be adapted to the unique cadences and processes of different teams
    and products.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，尽管 DORA 指标提供了宝贵的见解，但它们也带来了一些挑战。实施这些指标需要一个成熟的 DevOps 团队和完善的 CI/CD 流程。数据收集和标记需要精确且具有可操作性。指标必须根据不同团队和产品的独特节奏和流程进行调整。
- en: In terms of measuring these metrics independently from specific Git **Source
    Version Controls** (**SVCs**) such as DevOps, GitHub, or GitLab, organizations
    can look toward integrating various tools that provide necessary data visualizations
    and dashboards. Teams can leverage APIs from different tools to gather relevant
    data points for calculating these metrics. For example, Deployment Frequency can
    be monitored using tools that track code deployments, while Lead Time for Changes
    can be calculated by extracting timestamps for code commits and deployments from
    version control systems.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在独立于特定的 Git **源版本控制**（**SVCs**）如 DevOps、GitHub 或 GitLab 测量这些指标时，组织可以通过集成提供必要数据可视化和仪表盘的各种工具来进行。团队可以利用不同工具的
    API 收集相关数据点，以计算这些指标。例如，可以使用跟踪代码部署的工具来监控部署频率，而变更交付时间则可以通过从版本控制系统中提取代码提交和部署的时间戳来计算。
- en: Organizations can choose to implement DORA metrics either by developing logic
    tailored to their environments or by utilizing established tools such as **GitLab’s
    Value Stream Analytics Dashboard**. GitLab’s dashboard [*6*] effectively visualizes
    the software development life cycle and computes DORA metrics. It provides an
    interactive interface for tracing essential phases of the software delivery process
    and enables teams to customize the dashboard to align with their specific workflow,
    enhancing the understanding of lead time, cycle time, and other vital metrics.
    This feature aids in identifying bottlenecks and areas needing improvement, thus
    boosting deployment frequency and overall DevOps performance.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 组织可以选择通过开发适合其环境的逻辑来实施 DORA 指标，或者使用像 **GitLab 的价值流分析仪表盘** 等成熟工具。GitLab 的仪表盘 [*6*]
    能有效可视化软件开发生命周期并计算 DORA 指标。它提供了一个互动界面，用于追踪软件交付过程中的关键阶段，并使团队能够自定义仪表盘，以适应其特定的工作流程，从而提高对交付时间、周期时间和其他重要指标的理解。这个功能有助于识别瓶颈和需要改进的领域，从而提高部署频率和整体
    DevOps 性能。
- en: Similarly, **SquaredUp** specializes in Azure DevOps integration [*7*] and offers
    a DORA metrics dashboard designed specifically for DevOps teams. This dashboard
    presents a comprehensive view of crucial performance indicators, including Deployment
    Frequency, Lead Time for Changes, Change Failure Rate, and MTTR. It supports teams
    in monitoring and analyzing their software delivery process, facilitating the
    identification of areas for enhancement. SquaredUp’s solution emphasizes data-driven
    decision-making in software development, showcasing the importance of metrics
    in optimizing DevOps workflows.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，**SquaredUp** 专注于 Azure DevOps 集成 [*7*] 并提供专为 DevOps 团队设计的 DORA 指标仪表盘。该仪表盘提供了关键性能指标的全面视图，包括部署频率、变更的交付时间、变更失败率和
    MTTR。它帮助团队监控和分析他们的软件交付过程，便于识别需要改进的领域。SquaredUp 的解决方案强调了数据驱动的决策在软件开发中的重要性，展示了指标在优化
    DevOps 工作流中的关键作用。
- en: The key to successfully utilizing DORA metrics lies in understanding the context
    of these measurements, interpreting them collectively rather than in isolation,
    and adapting them to suit the unique requirements of individual teams and projects.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 成功利用 DORA 指标的关键在于理解这些测量的背景，将它们作为一个整体而非单独分析，并根据不同团队和项目的独特需求进行调整。
- en: In conclusion, DORA metrics provide a structured and quantifiable approach to
    assessing and improving DevOps performance. They offer a comprehensive view of
    the software delivery process, highlighting areas for improvement and fostering
    a **culture of continuous development** and operational efficiency.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，DORA 指标提供了一种结构化和可量化的评估与改进 DevOps 性能的方法。它们为软件交付过程提供了全面的视角，突出需要改进的领域，并促进了**持续开发**和运营效率的文化。
- en: Understanding the need for continual improvement in GitOps
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 GitOps 中持续改进的必要性
- en: 'In the ever-evolving landscape of software development, the adoption of GitOps
    marks a significant transition in collaborative approaches and operational efficiencies.
    GitOps, a methodology that combines Git with Kubernetes’ operational workflows,
    is more than just a set of practices – it represents a continuous journey of improvement
    and adaptation. This section explores how GitOps necessitates and facilitates
    **continual improvement** across various domains such as security, development,
    platform engineering, and financial operations:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在快速发展的软件开发领域，GitOps 的采用标志着协作方法和运营效率的显著转变。GitOps 是一种将 Git 与 Kubernetes 操作流程相结合的方法论，它不仅仅是一套实践，它代表了一个持续改进和适应的过程。本节探讨了
    GitOps 如何促使和促进在安全性、开发、平台工程和财务运营等多个领域的**持续改进**：
- en: '**Evolving security practices with GitOps**: Security in the GitOps realm is
    dynamic and **continuously evolving**. Teams deploy policies using tools such
    as **Kyverno**, adjusting to the rapidly changing landscape of security threats.
    The emergence of new vulnerabilities and attack vectors demands a proactive and
    adaptive approach. GitOps supports this by allowing for quick iteration and deployment
    of **security policies**. However, the approach to managing secrets has seen shifts
    – from using tools such as Sealed Secrets to adopting External-Secrets Operators.
    This transition underscores the need for teams to constantly evolve their tools
    and practices, staying ahead in a domain where stagnation equates to vulnerability.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与 GitOps 一起演变的安全实践**：GitOps 领域的安全性是动态的，且在**持续演变**。团队使用诸如 **Kyverno** 等工具部署策略，以适应快速变化的安全威胁环境。新漏洞和攻击途径的出现要求采取主动和适应性的策略。GitOps
    通过支持快速迭代和部署**安全策略**来应对这一需求。然而，管理机密的方式发生了变化——从使用 Sealed Secrets 等工具，到采用 External-Secrets
    Operators。这一转变强调了团队需要不断发展其工具和实践，在一个停滞就意味着脆弱的领域中保持领先。'
- en: '**Developers’ continuous innovation through GitOps**: For developers, GitOps
    is not just a method of deployment but a catalyst for **continuous innovation**.
    Techniques such as **blue-green** and **canary deployments** become more streamlined,
    while new tools such as PR-Generators enhance the deployment processes. These
    innovations are vital in a landscape where deployment strategies and tools are
    in a constant state of change. GitOps empowers developers to rapidly deploy, experiment,
    and iterate, thereby fostering a culture of continual improvement and agile responsiveness
    to market and technological changes.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发者通过GitOps的持续创新**：对于开发者而言，GitOps不仅仅是一种部署方法，更是**持续创新**的催化剂。像**蓝绿部署**和**金丝雀部署**等技术变得更加流畅，同时像PR-Generators这样的新工具提升了部署流程。这些创新在一个部署策略和工具不断变化的环境中至关重要。GitOps赋能开发者快速部署、实验和迭代，从而促进了持续改进的文化，并能够灵活应对市场和技术的变化。'
- en: '**Platform engineering and scalable infrastructure**: Platform engineering
    teams find GitOps an ally for managing infrastructure with efficiency and scalability.
    Patterns such as *App of Apps* and *ApplicationSets with Cluster Generator* in
    Argo CD demonstrate the evolving nature of infrastructure management. Tools such
    as Crossplane and Cluster API extend the capabilities of GitOps from mere application
    deployment to managing and provisioning diverse cloud resources. This evolution
    highlights the necessity for teams to continually adapt and enhance their skills
    and tools to manage increasingly complex and distributed systems effectively.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平台工程和可扩展基础设施**：平台工程团队认为GitOps是管理基础设施的高效和可扩展的得力助手。像Argo CD中的*App of Apps*和*ApplicationSets
    with Cluster Generator*等模式展示了基础设施管理的发展趋势。像Crossplane和Cluster API这样的工具，扩展了GitOps的能力，从仅仅应用部署，拓展到管理和配置多样化的云资源。这一发展凸显了团队必须不断适应并提升技能和工具，以有效管理日益复杂和分布式的系统。'
- en: '**FinOps – financial optimization in the age of GitOps**: In the FinOps domain,
    GitOps introduces tools such as **OpenCost**, enabling detailed cost tracking
    and allocation down to the namespace level. Such granularity in cost allocation
    and the ability to adjust resource availability based on usage patterns represent
    a significant shift in managing cloud costs. It also illustrates the ongoing need
    for financial operations teams to integrate new tools and strategies to optimize
    costs continually. The use of tools such as **Kubegreen**, which adjusts resources
    based on demand, is a testament to the evolving nature of financial operations
    in cloud environments.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**FinOps – GitOps时代的财务优化**：在FinOps领域，GitOps引入了如**OpenCost**等工具，使得能够在命名空间级别进行详细的成本跟踪和分配。如此细化的成本分配以及根据使用模式调整资源可用性的能力，标志着云成本管理方式的重大转变。这也表明，财务运营团队需要不断整合新工具和策略，以持续优化成本。像**Kubegreen**这样的工具，通过根据需求调整资源，证明了云环境中财务运营的不断发展。'
- en: The journey with GitOps is ongoing and multifaceted. Teams across different
    domains – from security to development and platform engineering to FinOps – must
    not only adopt GitOps but also embrace its ethos of continual improvement. This
    involves regular evaluations, a willingness to adopt new tools and practices,
    and a commitment to learning and adaptation.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: GitOps的旅程是持续且多面的。来自不同领域的团队——从安全、开发到平台工程，再到FinOps——不仅要采纳GitOps，还要拥抱其持续改进的理念。这包括定期评估、愿意采纳新工具和实践，以及对学习和适应的承诺。
- en: In the final section of this chapter, we will explore overcoming **cultural
    barriers**, adopting GitOps, and how different teams are currently working with
    varying approaches.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后部分，我们将探讨如何克服**文化障碍**，采纳GitOps，并了解不同团队如何采用不同的方式进行工作。
- en: Overcoming cultural barriers to adopt GitOps
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 克服文化障碍以采纳GitOps
- en: Adopting GitOps goes beyond just tool implementation; it involves a cultural
    shift within organizations. This transition involves breaking down traditional
    departmental barriers, nurturing collaboration, and uniting teams toward shared
    goals. GitOps acts as a unifying force, streamlining operations and development
    toward a more efficient IT environment. Continual improvement in GitOps is essential
    in the dynamic world of software development. This journey focuses on learning,
    adapting, and evolving practices.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 采用 GitOps 不仅仅是工具实施；它还意味着组织内部的文化转变。这一转变涉及到打破传统的部门壁垒，培养协作，并将团队统一到共同目标上。GitOps
    作为一个统一的力量，简化了操作和开发，朝着更高效的 IT 环境迈进。在软件开发的动态世界中，GitOps 的持续改进至关重要。这段旅程注重学习、适应和不断发展实践。
- en: When examining different definitions or contrasting GitOps with DevOps, the
    technical aspects can be summarized via the Weaveworks blog on GitOps culture,
    which elaborates on how GitOps extends beyond a set of tools or practices to encompass
    a broader cultural shift within organizations. This approach integrates Git at
    the heart of both operational and developmental processes, emphasizing transparency,
    accountability, and collaboration. GitOps culture is characterized by the centralization
    of Git in managing infrastructure, applications, and CI/CD processes, enhancing
    automation, stability, and consistency. It fosters an environment where team members
    are engaged in a continuous cycle of improvement, enabled by the visibility and
    control offered by Git-based workflows.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在检视不同定义或将 GitOps 与 DevOps 对比时，技术方面可以通过 Weaveworks 博客上关于 GitOps 文化的内容进行总结，博客详细阐述了
    GitOps 如何不仅仅是工具或实践的集合，而是代表着组织内部更广泛的文化转变。这一方法将 Git 集成到运营和开发过程的核心，强调透明性、问责制和协作。GitOps
    文化的特点是将 Git 集中用于管理基础设施、应用程序和 CI/CD 流程，从而增强自动化、稳定性和一致性。它培养了一个团队成员不断改进的环境，这一切得益于
    Git 基础的工作流所提供的可见性和控制力。
- en: It might be right about the GitOps approach and the associated technical challenges,
    as well as the responsibility, collaboration, and more. I’m not saying it’s wrong,
    because it isn’t. However, I want to shift the focus to a perspective that also
    considers the daily work in various industries. Not every company is a software
    company like Weaveworks.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 GitOps 方法及其相关的技术挑战、责任、协作等内容可能是正确的。我并不是说它错了，因为它并没有错。然而，我想将焦点转移到一个视角，考虑到不同行业的日常工作。并不是每个公司都像
    Weaveworks 那样是软件公司。
- en: A project’s story – exchange, experiences, and learnings
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个项目的故事——交流、经验与学习
- en: From my experience and discussions with **DevOps professionals**, **CTOs**,
    and **platform engineers**, it’s clear that tool and approach changes are more
    straightforward than altering a team or company mindset, which requires time for
    transformation.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我与**DevOps 专业人员**、**CTO**和**平台工程师**的经验和讨论，显然工具和方法的变化比改变团队或公司心态更为直接，因为后者需要时间进行转变。
- en: 'Some companies handle this like so:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 一些公司是这样处理的：
- en: In our use of GitOps with Argo CD for infrastructure and application services,
    we’ve noticed significant improvements. For instance, we can easily identify drifts
    in our staging and production environments, which are monitored closely. For development
    and ephemeral environments, we use Helm and CD pipelines without tracking changes.
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们使用 Argo CD 进行 GitOps 管理基础设施和应用服务的过程中，我们注意到显著的改进。例如，我们可以轻松识别我们在预生产和生产环境中的偏差，这些环境会被密切监控。对于开发和临时环境，我们使用
    Helm 和 CD 流水线，不跟踪变更。
- en: Weaveworks on GitOps culture highlights how GitOps, particularly through Weave
    GitOps, fosters a strong team culture characterized by **excellent communication**,
    **coordination**, and **collaboration**. The clarity in **roles** and **responsibilities**
    provided by GitOps allows teams to **maintain autonomy**, supported by Kubernetes
    namespaces for organizing and isolating workloads. Additionally, Weave’s acquisition
    of Magalix emphasizes security policies in GitOps, enabling admins to set and
    enforce policies throughout the GitOps process. This approach underscores the
    operational nature of GitOps culture, distinct from the aspirational culture of
    DevOps, focusing on precision and accountability.
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Weaveworks在GitOps文化中的强调表明，GitOps，特别是通过Weave GitOps，促进了一个强大的团队文化，特点是**优秀的沟通**、**协调**和**合作**。GitOps提供的**角色**和**职责**的清晰度使团队能够**保持自治**，同时借助Kubernetes命名空间来组织和隔离工作负载。此外，Weave收购Magalix进一步强调了GitOps中的安全策略，使管理员能够在整个GitOps过程中设定并执行策略。这种方法突显了GitOps文化的运营性质，有别于DevOps的理想文化，专注于精准和责任。
- en: And I believe Weaveworks hits the nail on the head when you look beyond the
    technical aspects and read closely. The dialog suggests that the GitOps approach
    fosters a new culture among different teams, who should master the same tool but
    for different use cases. The teams can work autonomously, but this requires excellent
    communication, coordination, and collaboration. Additionally, it involves defining
    roles and responsibilities. Every change or initiative should be clearly and transparently
    communicated to the other teams. This all sounds great, but how does it look in
    real projects with different teams? I will try to illustrate this with an example
    from one of my projects.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信当你超越技术层面并仔细阅读时，Weaveworks确实抓住了问题的关键。对话暗示，GitOps方法促进了不同团队之间的文化变革，这些团队应掌握相同的工具，但使用场景各不相同。各团队可以独立工作，但这需要出色的沟通、协调和合作。此外，还需要定义角色和职责。每一次变更或倡议都应清晰且透明地传达给其他团队。这一切听起来都很棒，但在涉及不同团队的实际项目中，情况如何呢？我将尝试通过一个我项目中的例子来说明。
- en: In the project, there’s a platform team, several developer teams, and a security
    team. The security team’s role is to ensure not only that security guidelines
    are adhered to within the organization, but also IT governance and compliance.
    Therefore, it feels responsible for using all possible means to protect the company
    and enforce policies throughout the GitOps process.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在该项目中，存在一个平台团队、若干开发团队和一个安全团队。安全团队的职责不仅是确保组织内遵守安全指南，还包括IT治理和合规性。因此，它感到有责任通过一切可行的手段保护公司，并在GitOps过程中执行政策。
- en: 'The platform team provides the necessary Kubernetes clusters and context for
    the developers, so they only need to focus on their applications and, at most,
    third-party tools. They see their role as enablers for the developers, who purchase
    and use the platform as customers, with maximum emphasis on **self-service**,
    **availability**, and **performance**. The developer teams consume Kubernetes
    as a product and develop their applications. Let’s see how one team’s reasonable
    decision can unintentionally harm another team:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 平台团队为开发人员提供了必要的Kubernetes集群和上下文环境，因此他们只需要专注于自己的应用程序，最多关注第三方工具。他们将自己的角色视为开发者的支持者，开发者作为客户购买并使用平台，平台的核心价值最大程度地强调**自助服务**、**可用性**和**性能**。开发团队将Kubernetes视为产品并进行应用程序开发。让我们看看一个团队的合理决策如何无意中对另一个团队造成伤害：
- en: The security team enforces a policy that no application can run with elevated
    privileges, and some applications, both in the platform context and those self-developed,
    stop working. This results in application downtime and software failure.
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全团队执行了一项策略，禁止任何应用程序以提升的权限运行，结果，一些平台上下文中的应用程序以及自研应用停止工作。这导致了应用程序的停机和软件故障。
- en: The *rationale* for this action is to ensure that the company is protected.
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 采取这一行动的*理由*是确保公司受到保护。
- en: The platform team carried out a Kubernetes upgrade from 1.24 to 1.25 as support
    for the previous version ended. As a result, the third-party tools used by the
    security team no longer work. Some of the developers’applications also stop functioning.
    The change did not consider that the upgrade replaced *PodSecurityPolicies* with
    *PodSecurityStandards*.
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平台团队进行了从Kubernetes 1.24到1.25的升级，因为前一版本已结束支持。结果，安全团队使用的第三方工具不再工作，一些开发者的应用程序也停止了运行。此次变更未考虑到升级过程中将*PodSecurityPolicies*替换为*PodSecurityStandards*。
- en: The *rationale* for this action is to ensure that a supported version is available
    and that the platform remains up to date as required by the security team. This
    responsibility includes ensuring that performance is optimized and reliable while
    maintaining adherence to the latest security protocols and compliance standards
    associated with the Kubernetes ecosystem.
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该行动的*理由*是确保提供支持的版本，并确保平台按照安全团队的要求保持最新。这项责任包括确保性能得到优化和可靠，同时遵守与Kubernetes生态系统相关的最新安全协议和合规标准。
- en: The developers use their autonomy and open a *NodePort* on a node with an external
    IP address for testing purposes. The application becomes externally accessible.
    The debugging works, but testing takes longer. Fortunately, the application uses
    **Log4j** version 2.10 for logging, simplifying the debugging process.
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者使用他们的自主权，在具有外部IP地址的节点上打开一个*NodePort*进行测试。应用程序变得可以外部访问。调试功能正常，但测试所需时间更长。幸运的是，应用程序使用**Log4j**版本2.10进行日志记录，简化了调试过程。
- en: The *rationale* for this action is to increase the performance of testing and
    debugging. The developers were under pressure to meet deadlines and chose a quick
    solution to test their applications, prioritizing immediate functionality over
    long-term security and compliance considerations.
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该行动的*理由*是提高测试和调试的性能。开发者面临着完成任务的压力，选择了一种快速解决方案来测试他们的应用程序，将即时功能优先于长期的安全性和合规性考虑。
- en: Possible causes that arise from the different actions are that customers are
    frustrated, the company loses money per minute, and the reputation of the company
    declines. These are modified use cases and fortunately, my projects were not affected
    by the Log4J incident. But the point here is not what happened but that these
    cases occur and are justifiable from the team’s point of view.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 不同措施所导致的可能后果包括：客户感到沮丧，公司每分钟都在亏损，公司的声誉下降。这些是修改后的使用案例，幸运的是，我的项目没有受到Log4J事件的影响。但这里的重点不是发生了什么，而是这些情况的出现是可以理解的，从团队的角度来看是有道理的。
- en: Reflecting on the causes of recent challenges, it seems that the varying explanations
    provided by the different teams are all valid. For example, when examining the
    changes made by the security and platform teams, they took accountability from
    their perspective, ensuring that the company was adequately protected and represented.
    However, they did not consider themselves responsible for application outages
    or customer loss, believing their actions were justified. This situation could
    have been potentially avoided with simple communication and transparency about
    the impending changes between teams.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 反思最近挑战的原因，似乎不同团队提供的各种解释都是合理的。例如，当检查安全团队和平台团队所做的变更时，他们从自己的角度承担了责任，确保公司得到了充分的保护和代表。然而，他们并未认为自己对应用程序的停机或客户的损失负有责任，认为他们的行动是正当的。如果团队之间能够提前进行简单的沟通和透明化，关于即将发生的变更，这种情况本可以避免。
- en: From the developers’ viewpoint, they were under pressure to meet a deadline
    to prevent further delays for a feature, which is already behind schedule, causing
    frustration among customers. Debugging was activated only in the development environment,
    and they assumed it was unnecessary to inform the security or platform teams,
    believing that these teams wouldn’t understand the change and would impede it
    without reason. The developers felt they were acting in the company’s best interest
    and aiming to satisfy their customers.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 从开发者的角度来看，他们面临着完成任务的压力，以防止已有进度延误的功能进一步拖延，这已经导致客户感到沮丧。调试仅在开发环境中启用，并且他们认为没有必要通知安全团队或平台团队，认为这些团队无法理解变更，并且没有理由阻碍变更。开发者认为他们是在为公司的最大利益行事，旨在满足客户需求。
- en: From the developers’ viewpoint, they felt a strong sense of accountability to
    meet a deadline. However, they overlooked the importance of simple communication
    and transparency with the security or platform teams, assuming these teams wouldn’t
    comprehend the change and might unnecessarily impede it. In their pursuit to act
    in the company’s best interest and satisfy customers, they missed an opportunity
    for collaboration that could have harmonized their efforts with the broader organizational
    goals.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 从开发者的角度来看，他们感受到强烈的责任感，需要按时完成任务。然而，他们忽视了与安全团队或平台团队之间简单沟通和透明度的重要性，认为这些团队可能无法理解变更，并可能不必要地阻碍这一变更。在追求为公司争取最大利益和满足客户需求的过程中，他们错失了与这些团队合作的机会，这本可以使他们的工作与更广泛的组织目标相协调。
- en: The learnings
  id: totrans-217
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 这些经验
- en: The learnings from these incidents led to the creation of a guild, with representatives
    from each team attending meetings. This allowed for changes and their impacts
    to be discussed and made visible, fostering clear communication and collaboration
    between teams. Additionally, it helped different teams understand each other’s
    perspectives, needs, and reasons, enhancing transparency. While not all decisions
    were discussed, and changes were sometimes made rapidly due to time constraints
    or urgency, such as in the case of critical security vulnerabilities, the overall
    situation improved. The increased transparency helped in better understanding
    the impact of changes, reducing the blast radius of these changes. Empathy among
    team members increased, and the culture of blaming significantly decreased.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 从这些事件中汲取的教训促成了一个公会的成立，各团队的代表定期参加会议。这使得变更及其影响能够被讨论和公开，促进了团队间的清晰沟通和合作。此外，它帮助不同团队理解彼此的观点、需求和原因，从而提高了透明度。虽然并非所有决策都经过讨论，而且有时由于时间限制或紧迫性（例如关键的安全漏洞问题），决策是迅速做出的，但总体情况已有所改善。提高的透明度有助于更好地理解变更的影响，减少了这些变更的爆炸半径。团队成员间的同理心增加了，指责文化大大减少了。
- en: Did things overall improve? *Yes*!
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 整体情况有所改善吗？*是的*！
- en: Were all decisions discussed and changes made only after consultation? *No*,
    as time constraints and urgency often lead to decisions being made quickly.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 所有决策都是在讨论后作出的吗？*不是*，因为时间压力和紧迫性通常会导致决策迅速做出。
- en: Essential Q&A from another recent project
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 来自另一个近期项目的关键问答
- en: 'In this section, we’ll focus on specific questions and answers from a company,
    and various projects, that are still in the process of transformation, having
    started with the DevOps approach and now shifted to platform engineering, including
    their honest reasoning for this change:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将聚焦于某个公司和多个项目中的具体问题和答案，这些项目仍在转型过程中，从DevOps方法开始，现已转向平台工程，同时也会分享他们进行这种转型的真实原因：
- en: 'Q1: How did GitOps restructure your team organization?'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Q1：GitOps是如何重构你们的团队组织结构的？
- en: 'A1: Initially, we had separate DevOps teams per project. GitOps led to the
    creation of a central platform team to manage Kubernetes clusters efficiently.'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: A1：最初，我们每个项目都有单独的DevOps团队。GitOps促成了一个中央平台团队的创建，以高效管理Kubernetes集群。
- en: 'Q2: What were the challenges in transitioning to GitOps?'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Q2：转型到GitOps时遇到了哪些挑战？
- en: 'A2: Our main challenge was adapting to the **immutable infrastructure** GitOps
    offers, especially understanding that all changes need to flow through Git commits.'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: A2：我们的主要挑战是适应GitOps提供的**不可变基础设施**，特别是理解所有的变更都需要通过Git提交来流转。
- en: 'Q3: What benefits have you realized with GitOps?'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Q3：你们从GitOps中获得了哪些好处？
- en: 'A3: GitOps has brought us a clear, traceable workflow. Every change, big or
    small, is now meticulously tracked via Git.'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: A3：GitOps为我们带来了一个清晰且可追溯的工作流程。每一个变更，无论大小，现在都通过Git进行精确跟踪。
- en: 'Q4: How has GitOps affected team communication?'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Q4：GitOps如何影响了团队沟通？
- en: 'A4: Communication has significantly improved. Our platform team has developed
    a **deeper understanding** of the developers’ needs, leading to more **empathetic
    collaboration**.'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: A4：沟通有了显著改善。我们的平台团队对开发者的需求有了**更深入的理解**，这促进了**更有同理心的合作**。
- en: 'Q5: Can you share any successful cultural transformations?'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Q5：你能分享一些成功的文化转型案例吗？
- en: 'A5: Definitely. We’ve developed a **proactive error culture**, focusing on
    automation and **continuous learning**, which has fundamentally changed our problem-solving
    approach.'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: A5：绝对如此。我们发展了**主动错误文化**，专注于自动化和**持续学习**，这从根本上改变了我们的解决问题的方法。
- en: 'Q6: How has daily work evolved for your teams with GitOps?'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Q6：GitOps如何改变了你们团队的日常工作？
- en: 'A6: There’s a noticeable increase in **motivation** and **responsibility**
    among team members, with a greater sense of **autonomy** in their roles.'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: A6：团队成员的**动力**和**责任感**显著提升，他们在自己的角色中有了更大的**自主性**。
- en: 'Q7: How did your team adapt to GitOps?'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Q7：你的团队是如何适应GitOps的？
- en: 'A7: Surprisingly, there was a little resistance. The team understood the necessity
    of this transformation and was quite receptive to it.'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: A7：出乎意料的是，团队的抵触情绪很小。团队理解这次转型的必要性，并且对此非常接受。
- en: 'Q8: How do you measure the success of this transition?'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Q8：你们如何衡量这次转型的成功？
- en: 'A8: While we don’t have precise metrics yet, the reduction in **manual interventions**
    and the increase in **Git activities** are strong indicators of success.'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: A8：虽然我们还没有精确的衡量指标，但**手动干预**的减少和**Git 活动**的增加是成功的重要指标。
- en: 'Q9: What is your team size?'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Q9: 你的团队规模是多少？'
- en: 'A9: Our team consists of around 20 developers and three platform engineers.'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'A9: 我们的团队由大约20名开发人员和三名平台工程师组成。'
- en: This conversation format allows for a clear understanding of how GitOps has
    transformed team dynamics, challenges, and workflow efficiency.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 这种对话格式使得人们能够清晰理解GitOps如何改变团队动态、面临的挑战以及工作流效率。
- en: Adopting GitOps is more than implementing a set of tools; it involves cultural
    shifts within organizations. Overcoming traditional silos between departments,
    fostering a culture of collaboration and continuous learning, and aligning diverse
    teams toward common operational goals are essential steps in this journey. Thus,
    the adoption of GitOps becomes a unifying force, aligning varied operational and
    developmental efforts toward a more efficient, transparent, and responsive IT
    environment.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 采用GitOps不仅仅是实施一套工具；它涉及组织内的文化变革。克服传统部门之间的壁垒，培养协作和持续学习的文化，并将不同的团队对齐到共同的运维目标上，是这条旅程中的重要步骤。因此，GitOps的采用成为了一个统一的力量，将各类运维和开发工作对齐，推动形成一个更高效、透明和响应迅速的IT环境。
- en: In conclusion, the necessity for continual improvement in GitOps is not just
    a recommendation; it is a requirement in the fast-paced and ever-changing world
    of software development and IT operations. As teams navigate this journey, the
    focus should remain on learning, adapting, and evolving practices to stay ahead
    in an environment where change is the only constant. So, GitOps is less of a destination
    and more of a path toward operational excellence and continual improvement.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，GitOps的持续改进不仅仅是一个建议；它是快速变化、节奏快速的软件开发和IT运维世界中的必需品。在团队进行这项旅程时，重点应始终放在学习、适应和发展实践上，以保持在变化是唯一常态的环境中的领先地位。因此，GitOps更像是一条通向卓越运维和持续改进的道路，而非一个最终目标。
- en: Summary
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter provided a compelling view of the cultural revolution in IT, brought
    about by the adoption of GitOps. It started by establishing GitOps as not just
    a technological shift but a profound cultural metamorphosis within IT departments.
    This approach, merging software development with IT operations through Git, transforms
    operational processes and methodologies, treating infrastructure as an application.
    It enables automation and precision and extends rigorous development practices
    to infrastructure management.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 本章提供了GitOps推动的IT文化革命的有力视角。它首先确立了GitOps不仅仅是技术上的转变，而是IT部门内部深刻的文化变革。这种方法通过Git将软件开发与IT运维结合，改变了运维流程和方法论，将基础设施视为应用程序。它实现了自动化和精准，并将严格的软件开发实践延伸到基础设施管理中。
- en: A key transformation brought about by GitOps is the establishment of immutable
    infrastructure, automating the alignment of the infrastructure’s actual state
    with its desired state, and reducing manual interventions and errors. This chapter
    also explored the impact of GitOps on IT performance through DORA metrics, offering
    a quantitative assessment of improvements in deployment frequency, change lead
    time, failure rate, and recovery time. This chapter also addressed the broader
    organizational implications of GitOps adoption. This goes beyond mere tool implementation;
    it’s a catalyst for a far-reaching cultural shift, fostering a collaborative,
    transparent, and efficient IT culture. Real-world examples from various organizations
    illustrated how GitOps drives these changes.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: GitOps带来的一个关键变化是建立了不可变的基础设施，自动化地将基础设施的实际状态与期望状态对齐，减少了人工干预和错误。本章还通过DORA指标探讨了GitOps对IT性能的影响，提供了部署频率、变更前置时间、失败率和恢复时间的定量评估。本章还讨论了GitOps采用对整个组织的影响。这不仅仅是工具的实现；它是推动深远文化转变的催化剂，促进了一个协作、透明和高效的IT文化。来自不同组织的实际案例展示了GitOps如何推动这些变化。
- en: All in all, this chapter revealed the transformative power of GitOps, transcending
    technology to chart a path toward a more agile and innovative IT culture.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，本章揭示了GitOps的变革力量，它超越了技术层面，为走向更敏捷、更具创新力的IT文化指引了方向。
- en: In the next chapter, we’ll explore the application of GitOps in conjunction
    with OpenShift, a Kubernetes downstream distribution from Red Hat, and examine
    how its management differs.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨GitOps与OpenShift的结合应用，OpenShift是来自Red Hat的Kubernetes下游发行版，并分析它的管理方式有何不同。
- en: References
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[*1*] [https://codefresh.io/blog/infrastructure-as-apps-the-gitops-future-of-infra-as-code/](https://codefresh.io/blog/infrastructure-as-apps-the-gitops-future-of-infra-as-code/)'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*1*] [https://codefresh.io/blog/infrastructure-as-apps-the-gitops-future-of-infra-as-code/](https://codefresh.io/blog/infrastructure-as-apps-the-gitops-future-of-infra-as-code/)'
- en: '[*2*] [https://www.youtube.com/watch?v=h6xDWc6fXao](https://www.youtube.com/watch?v=h6xDWc6fXao)'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*2*] [https://www.youtube.com/watch?v=h6xDWc6fXao](https://www.youtube.com/watch?v=h6xDWc6fXao)'
- en: '[*3*] [https://docs.crossplane.io/latest/getting-started/provider-azure/](https://docs.crossplane.io/latest/getting-started/provider-azure/)'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*3*] [https://docs.crossplane.io/latest/getting-started/provider-azure/](https://docs.crossplane.io/latest/getting-started/provider-azure/)'
- en: '[*4*] [https://www.youtube.com/watch?v=9odjdVqJkws](https://www.youtube.com/watch?v=9odjdVqJkws)'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*4*] [https://www.youtube.com/watch?v=9odjdVqJkws](https://www.youtube.com/watch?v=9odjdVqJkws)'
- en: '[*5*] [https://github.com/argoproj/argo-cd/issues/7875](https://github.com/argoproj/argo-cd/issues/7875)'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*5*] [https://github.com/argoproj/argo-cd/issues/7875](https://github.com/argoproj/argo-cd/issues/7875)'
- en: '[*6*] [https://docs.gitlab.com/ee/user/analytics/value_streams_dashboard.html](https://docs.gitlab.com/ee/user/analytics/value_streams_dashboard.html)'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*6*] [https://docs.gitlab.com/ee/user/analytics/value_streams_dashboard.html](https://docs.gitlab.com/ee/user/analytics/value_streams_dashboard.html)'
- en: '[*7*] [https://squaredup.com/dashboard-gallery/dora-metrics-dashboard-devops-team/](https://squaredup.com/dashboard-gallery/dora-metrics-dashboard-devops-team/)'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*7*] [https://squaredup.com/dashboard-gallery/dora-metrics-dashboard-devops-team/](https://squaredup.com/dashboard-gallery/dora-metrics-dashboard-devops-team/)'
- en: 'Part 3: Hands-on Automating Infrastructure and CI/CD with GitOps'
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三部分：动手实践 GitOps 自动化基础设施和 CI/CD
- en: In this part, you will get hands-on experience with automating infrastructure
    and CI/CD processes using GitOps. You will explore specific implementations on
    platforms such as OpenShift, Azure, and AWS, and integrate tools such as Terraform
    and Flux CD for enhanced automation. This practical section is designed to equip
    you with the necessary skills to apply GitOps in diverse environments, ensuring
    you can manage infrastructure and CI/CD pipelines effectively and efficiently.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，你将亲身体验使用 GitOps 自动化基础设施和 CI/CD 流程。你将探索在 OpenShift、Azure 和 AWS 等平台上的具体实施，并集成
    Terraform 和 Flux CD 等工具以增强自动化。本实操部分旨在为你提供在不同环境中应用 GitOps 所需的技能，确保你能够高效且有效地管理基础设施和
    CI/CD 流水线。
- en: 'This part includes the following chapters:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包括以下章节：
- en: '[*Chapter 8*](B22100_08.xhtml#_idTextAnchor165), GitOps for OpenShift'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第8章*](B22100_08.xhtml#_idTextAnchor165)，OpenShift 上的 GitOps'
- en: '[*Chapter 9*](B22100_09.xhtml#_idTextAnchor176), GitOps for Azure and AWS Deployments'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第9章*](B22100_09.xhtml#_idTextAnchor176)，GitOps 在 Azure 和 AWS 部署中的应用'
- en: '[*Chapter 10*](B22100_10.xhtml#_idTextAnchor190), GitOps for Infrastructure
    Automation – Terraform and Flux CD'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第10章*](B22100_10.xhtml#_idTextAnchor190)，GitOps 在基础设施自动化中的应用——Terraform 和
    Flux CD'
- en: '[*Chapter 11*](B22100_11.xhtml#_idTextAnchor209), Deploying Real-World Projects
    with GitOps on Kubernetes'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第11章*](B22100_11.xhtml#_idTextAnchor209)，在 Kubernetes 上使用 GitOps 部署实际项目'

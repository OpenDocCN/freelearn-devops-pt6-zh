- en: '*Chapter 1*: Introducing the New Operating Model'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 1 章*：介绍新操作模型'
- en: Many think that Kubernetes won the container orchestration war because of its
    outstanding ability to manage containers. But Kubernetes is much more than that.
    In addition to handling container orchestration at scale, Kubernetes introduced
    a new IT operating model. There is always a trap with anything new. We tend to
    use a new tool the old way because of our tendencies. Understanding how Kubernetes
    disrupted IT operations is critical for not falling into these traps and achieving
    successful adoption. This chapter will dive deep into the significant aspects
    of the new operating model.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 许多人认为 Kubernetes 赢得了容器编排战，因为它出色的容器管理能力。但 Kubernetes 不仅仅如此。除了在大规模下处理容器编排外，Kubernetes
    还引入了全新的 IT 操作模型。任何新事物都有陷阱。由于我们的惯性，我们往往以旧有的方式使用新工具。理解 Kubernetes 如何打破 IT 操作的传统模式，对于避免这些陷阱并实现成功的采纳至关重要。本章将深入探讨新操作模型的关键方面。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: The Kubernetes journey
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 的历程
- en: Characteristics of the new operating model
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新操作模型的特点
- en: The next Kubernetes use case
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下一个 Kubernetes 用例
- en: The Kubernetes journey
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes 的历程
- en: The Kubernetes journey to become the leading container orchestration platform
    has seen many fascinating moments. Kubernetes was an open source initiative by
    a few Google engineers based on an internal project called Borg. From day one,
    Kubernetes had the advantage of heavy production usage at Google and more than
    a decade of active development as Borg. Soon, it became more than a small set
    of Google engineers, with overwhelming community support. The container orchestration
    war was a tough fight between Docker, Mesosphere DC/OS, Kubernetes, Cloud Foundry,
    and AWS **Elastic Container Service** (**ECS**) from 2015\. Kubernetes was outperforming
    its peers slowly and steadily.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 成为领先容器编排平台的历程充满了许多引人入胜的时刻。Kubernetes 是由几位 Google 工程师基于一个名为 Borg 的内部项目发起的开源项目。从一开始，Kubernetes
    就拥有 Google 重度生产使用的优势，以及 Borg 超过十年的活跃开发历史。很快，它不再是一个小规模的 Google 工程师团队，而是得到了强大的社区支持。容器编排战争是
    Docker、Mesosphere DC/OS、Kubernetes、Cloud Foundry 和 AWS **弹性容器服务**（**ECS**）之间的激烈竞争，始于
    2015 年。Kubernetes 逐渐并稳步超越了其他竞争者。
- en: 'Initially, Docker, Mesosphere, and Cloud Foundry announced native support for
    Kubernetes. Finally, in 2017, AWS announced ECS for Kubernetes. Eventually, all
    the cloud providers came up with a managed Kubernetes offering. The rivals had
    no choice other than to provide native support for Kubernetes because of its efficacy
    and adoption. These were the winning moments for Kubernetes in the container orchestration
    war. Furthermore, it continued to grow to become the core of the cloud-native
    ecosystem, with many tools and patterns evolving around it. The following diagram
    illustrates the container orchestration war:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，Docker、Mesosphere 和 Cloud Foundry 宣布原生支持 Kubernetes。最终，在 2017 年，AWS 宣布推出针对
    Kubernetes 的 ECS。最终，所有云服务提供商都推出了托管的 Kubernetes 服务。由于 Kubernetes 的高效性和广泛采用，竞争对手别无选择，只能提供原生支持。这些是
    Kubernetes 在容器编排战中的胜利时刻。此外，它继续成长，成为云原生生态系统的核心，围绕它发展出了许多工具和模式。以下图表展示了容器编排战：
- en: '![Figure 1.1 – The container orchestration war'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.1 – 容器编排战争'
- en: '](img/B17830_01_01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17830_01_01.jpg)'
- en: Figure 1.1 – The container orchestration war
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1 – 容器编排战争
- en: Next, let's learn about the characteristics of the new operating model.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们了解新操作模型的特点。
- en: Characteristics of the new operating model
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新操作模型的特点
- en: 'Understanding how Kubernetes can positively impact IT operations will provide
    a solid base for the efficient adoption of DevOps in application and infrastructure
    automation. The following are some of the significant characteristics of the Kubernetes
    operating model:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 理解 Kubernetes 如何积极影响 IT 操作，将为应用程序和基础设施自动化中 DevOps 的高效采纳提供坚实基础。以下是 Kubernetes
    操作模型的一些重要特点：
- en: Team collaboration and workflows
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 团队协作和工作流程
- en: Control theory
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制理论
- en: Interoperability
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 互操作性
- en: Extensibility
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可扩展性
- en: New architecture focus
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新架构的焦点
- en: Open source, community, and governance
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开源、社区和治理
- en: Let's look at these characteristics in detail in the following sections.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在接下来的章节中详细了解这些特点。
- en: Important Note
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Before we dive deep, it's critical to understand that you are expected to have
    a basic prior understanding of Kubernetes architecture and its building block
    resources, such as Pods, Deployments, Services, and namespaces. New to Kubernetes?
    Looking for a guide to understand the basic concepts? Please go through the documentation
    at [https://kubernetes.io/docs/concepts/overview/](https://kubernetes.io/docs/concepts/overview/).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入探讨之前，首先需要了解的是，你应该对 Kubernetes 的架构和其构建块资源（如 Pods、Deployments、Services 和 namespaces）有基本的先前理解。如果你是
    Kubernetes 新手，或者需要理解基础概念的指南，请查阅 [https://kubernetes.io/docs/concepts/overview/](https://kubernetes.io/docs/concepts/overview/)
    文档。
- en: Team collaboration and workflows
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 团队协作和工作流
- en: 'All Kubernetes resources, such as Pods, volumes, Services, Deployments, and
    Secrets are persistent entities stored in `etcd`. Kubernetes has well-modeled
    RESTful APIs to perform `CRUD` operations over these resources. The Create, Update,
    and Deletion operations to the `etcd` persistence store is a state change request.
    The state change is realized asynchronously with the Kubernetes control plane.
    There are a couple of characteristics of these Kubernetes APIs that are very useful
    for efficient team collaboration and workflows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 Kubernetes 资源（如 Pods、卷、Services、Deployments 和 Secrets）都是持久化实体，存储在 `etcd`
    中。Kubernetes 有良好建模的 RESTful API 用于执行这些资源的 `CRUD` 操作。对 `etcd` 持久化存储的创建、更新和删除操作是状态变化请求。状态变化是与
    Kubernetes 控制平面异步实现的。这些 Kubernetes API 有几个特性，非常有利于高效的团队协作和工作流：
- en: Declarative configuration management
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声明式配置管理
- en: Multi-persona collaboration
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多角色协作
- en: Declarative configuration management
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 声明式配置管理
- en: 'We express our automation intent to the Kubernetes API as data points, known
    as the `Git` than code. Also, expressing the automation intension as data is less
    prone to bugs, and easy to read and maintain. Provided we have a clear Git history,
    a simple intent expression, and release management, collaboration over the configuration
    is easy. The following is a simple record of intent for an `NGINX` Pod deployment:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将自动化意图作为数据点传递给 Kubernetes API，这些数据点被称为 `Git`，而非代码。同时，作为数据表达自动化意图比代码更少出错，且更易于阅读和维护。只要我们有清晰的
    Git 历史记录、简洁的意图表达和发布管理，配置的协作就会变得轻松。以下是一个简单的 `NGINX` Pod 部署意图记录：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Even though many new-age automation tools are primarily declarative, they are
    weak in collaboration because of missing well-modeled RESTful APIs. The following
    multi-persona collaboration section will discuss this aspect more. The combination
    of declarative configuration and multi-persona collaboration makes Kubernetes
    a unique proposition.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管许多现代自动化工具本质上是声明式的，但由于缺乏良好建模的 RESTful API，它们在协作方面较弱。以下的多角色协作部分将进一步讨论这一点。声明式配置与多角色协作的结合使得
    Kubernetes 成为一个独特的方案。
- en: Multi-persona collaboration
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多角色协作
- en: 'With Kubernetes or other automation tools, we abstract the data center fully
    into a single window. Kubernetes has a separate API mapping to each infrastructure
    concern, unlike other automation tools. Kubernetes groups these concerns under
    the construct called API groups, of which there are around 20\. API groups break
    the monolith infrastructure resources into minor responsibilities, providing segregation
    for different personas to operate an infrastructure based on responsibility. To
    simplify, we can logically divide the APIs into five sections:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 Kubernetes 或其他自动化工具，我们将数据中心完全抽象为一个单一窗口。与其他自动化工具不同，Kubernetes 为每个基础设施问题提供了单独的
    API 映射。Kubernetes 将这些问题归纳为一个称为 API 组的构造，约有 20 个 API 组。API 组将单一基础设施资源拆分为多个小的责任区块，为不同角色的人员提供了操作基础设施的权限分离。为了简化，我们可以将这些
    API 逻辑性地划分为五个部分：
- en: '`workload` category. These resources mainly come under the `apps` and `core`
    API groups.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`workload` 类别。这些资源主要属于 `apps` 和 `core` API 组。'
- en: '`core` and `networking.k8s.io` API groups.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`core` 和 `networking.k8s.io` API 组。'
- en: '`core` and `storage.k8s.io API` groups. The application operators can have
    access to these APIs.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`core` 和 `storage.k8s.io API` 组。应用操作员可以访问这些 API。'
- en: '`RoleBinding`, `CertificateSigningCertificate`, `ServiceAccount`, and namespaces
    fall under this category, and cluster operators should access these APIs. These
    resources come under many API groups, such as `core`, `rbac`, `rbac.authorization.k8s.io`,
    and `certificates.k8s.io`.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RoleBinding`、`CertificateSigningCertificate`、`ServiceAccount` 和 namespaces
    属于此类别，集群操作员应访问这些 API。这些资源分属于多个 API 组，如 `core`、`rbac`、`rbac.authorization.k8s.io`
    和 `certificates.k8s.io`。'
- en: '`core`, `autoscaling`, and `policy` API groups. People responsible for application
    policies or automating architecture characteristics can access these APIs.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`core`、`autoscaling` 和 `policy` API 组。负责应用程序策略或自动化架构特性的人员可以访问这些 API。'
- en: 'Note that the core API group holds resources from all the preceding categories.
    Explore all the Kubernetes resources yourself with the help of the `kubectl` comments.
    A few comment examples are as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，core API 组包含前述所有类别的资源。可以通过 `kubectl` 命令来探索所有 Kubernetes 资源。以下是一些命令示例：
- en: '[PRE12]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The following screenshots give you a quick glimpse of resources under the `apps`
    and `networking.k8s.io` API groups, but I would highly recommend playing around
    to look at all resources and their API groups:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图让你快速浏览 `apps` 和 `networking.k8s.io` API 组下的资源，但我强烈建议你自己动手探索所有资源及其 API 组：
- en: '![Figure 1.2 – Resources under the apps API group'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.2 – 应用 API 组下的资源'
- en: '](img/B17830_01_02.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17830_01_02.jpg)'
- en: Figure 1.2 – Resources under the apps API group
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2 – 应用 API 组下的资源
- en: 'The following are the resources under the `network.k8s.io` API group:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 `network.k8s.io` API 组下的资源：
- en: '![Figure 1.3 – Resources under the network.k8s.io API group'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.3 – 网络下的资源.k8s.io API 组'
- en: '](img/B17830_01_03.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17830_01_03.jpg)'
- en: Figure 1.3 – Resources under the network.k8s.io API group
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3 – 网络.k8s.io API 组下的资源
- en: 'We can assign RBAC for teams based on individual resources or API groups. The
    following diagram represents the developers, application operators, and cluster
    operators collaborating over different concerns:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以根据单独的资源或 API 组为团队分配 RBAC。以下图表展示了开发人员、应用程序操作员和集群操作员在不同关注点上进行协作：
- en: '![Figure 1.4 – Team collaboration'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.4 – 团队协作'
- en: '](img/B17830_01_04.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17830_01_04.jpg)'
- en: Figure 1.4 – Team collaboration
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4 – 团队协作
- en: This representation may vary for you, based on an organization's structure,
    roles, and responsibilities. Traditional automation tools are template-based,
    and it's difficult for teams to collaborate. It leads to situations where policies
    are determined and implemented by two different teams. Kubernetes changed this
    operating model by enabling different personas to collaborate directly by bringing
    down the friction in collaboration.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这种表示可能因组织结构、角色和职责的不同而有所变化。传统的自动化工具基于模板，团队之间的协作较为困难。这导致了由两个不同团队分别决定和实施政策的情况。Kubernetes
    改变了这一操作模式，通过减少协作中的摩擦，使得不同角色能够直接协作。
- en: Control theory
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制理论
- en: 'Control theory is a concept from engineering and mathematics, where we maintain
    the desired state in a dynamic system. The state of a dynamic system changes over
    time with the environmental changes. Control theory executes a continuous feedback
    loop to observe the output state, calculate the divergence, and then control input
    to maintain the system''s desired state. Many engineering systems around us work
    using control theory. An air conditioning system with a continuous feedback loop
    to maintain temperature is a typical example. The following illustration provides
    a simplistic view of control theory flow:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 控制理论是来自工程学和数学的一个概念，它通过维持动态系统中的期望状态来工作。动态系统的状态随着环境变化而不断变化。控制理论通过执行持续的反馈循环来观察输出状态，计算偏差，然后控制输入以保持系统的期望状态。我们周围的许多工程系统都使用控制理论。例如，空调系统通过持续的反馈循环来维持温度，就是一个典型的例子。下图简化地展示了控制理论的流程：
- en: '![Figure 1.5 – Control theory flow'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.5 – 控制理论流程'
- en: '](img/B17830_01_05.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17830_01_05.jpg)'
- en: Figure 1.5 – Control theory flow
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5 – 控制理论流程
- en: 'Kubernetes has a state-of-the-art implementation of control theory. We submit
    our intention of the application''s desired state to the API. The rest of the
    automation flow is handled by Kubernetes, marking an end to the human workflow
    once the API is submitted. Kubernetes controllers run a continuous reconciliation
    loop asynchronously to ensure that the desired state is maintained across all
    Kubernetes resources, such as Pods, Nodes, Services, Deployments, and Jobs. The
    controllers are the central brain of Kubernetes, with a collection of controllers
    responsible for managing different Kubernetes resources. Observe, analyze, and
    react are the three main functions of an individual controller:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 实现了最先进的控制理论。我们将应用程序的期望状态意图提交给 API。剩下的自动化流程由 Kubernetes 处理，一旦 API
    被提交，标志着人类工作流程的结束。Kubernetes 控制器异步运行持续的协调循环，以确保期望的状态在所有 Kubernetes 资源中得以保持，如 Pods、Nodes、Services、Deployments
    和 Jobs。控制器是 Kubernetes 的核心大脑，负责管理不同 Kubernetes 资源的控制器集合。观察、分析和反应是单个控制器的三大主要功能：
- en: '`create`, `delete`, and `update` events.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`create`、`delete` 和 `update` 事件。'
- en: '**Analyze**: Once the observer receives the event, the analyzer jumps in to
    compare the current and desired state to find the delta.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分析**：一旦观察者接收到事件，分析器会介入，比较当前状态和期望状态，以找到差异。'
- en: '**React**: Performs the needed action to bring the resources back into the
    desired state.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**反应**：执行所需的操作，以使资源恢复到期望状态。'
- en: 'The control theory implementation in Kubernetes changed the way IT performs
    in day one and day two operations. Once we express our intention as data points,
    the human workflow is over. The machine takes over the operations in asynchronous
    mode. Drift management is no longer part of the human workflow. In addition to
    the existing controllers, we can extend Kubernetes with new controllers. We can
    easily encode any operational knowledge required to manage our workload into a
    custom controller (operators) and hand over the custom day two operations to machines:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 中的控制理论实现改变了 IT 在第一天和第二天操作中的方式。一旦我们将意图表示为数据点，人类的工作流程就结束了。机器接管了异步模式下的操作。漂移管理不再是人类工作流程的一部分。除了现有的控制器外，我们还可以通过新的控制器扩展
    Kubernetes。我们可以轻松地将管理工作负载所需的任何操作知识编码到自定义控制器（操作器）中，并将自定义的第二天操作交给机器：
- en: '![Figure 1.6 – The Kubernetes controller flow'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.6 – Kubernetes 控制器流程'
- en: '](img/B17830_01_06.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17830_01_06.jpg)'
- en: Figure 1.6 – The Kubernetes controller flow
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.6 – Kubernetes 控制器流程
- en: Interoperability
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 互操作性
- en: The Kubernetes API is more than just an interface for our interaction with the
    cluster. It is the glue holding all the pieces together. `kubectl`, the schedulers,
    `kubelet`, and the controllers create and maintain resources with the help of
    `kube-apiserver`. `kube-apiserver` is the only component that talks to the `etcd`
    state store. `kube-apiserver` implements a well-defined API interface, providing
    state observability from any Kubernetes component and outside the cluster. This
    architecture of `kube-apiserver` makes it interoperable with the ecosystem. Other
    infrastructure automation tools such as Terraform, Ansible, and Puppet do not
    have a well-defined API to observe the state.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes API 不仅仅是我们与集群交互的接口。它是将所有组件粘合在一起的纽带。`kubectl`、调度器、`kubelet` 和控制器通过
    `kube-apiserver` 来创建和维护资源。`kube-apiserver` 是唯一一个与 `etcd` 状态存储进行交互的组件。`kube-apiserver`
    实现了一个明确的 API 接口，提供从任何 Kubernetes 组件以及集群外部的状态可观测性。`kube-apiserver` 的这一架构使其能够与生态系统互操作。其他基础设施自动化工具，如
    Terraform、Ansible 和 Puppet，并没有明确的 API 来观察状态。
- en: 'Take observability as an example. Many observability tools evolved around Kubernetes
    because of the interoperable characteristic of `kube-apiserver`. For contemporary
    digital organizations, continuous observability of state and a feedback loop based
    on it is critical. End-to-end visibility in the infrastructure and applications
    from the perspective of different stakeholders provides a way to realize operational
    excellence. Another example of interoperability is using various configuration
    management tools, such as Helm as an alternative to `kubectl`. As the *record
    of intent* is pure YAML or JSON data points, we can easily interchange one tool
    with another. The following diagram provides a view of `kube-apiserver` interactions
    with other Kubernetes components:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 以可观察性为例。许多可观察性工具围绕Kubernetes演变，因为`kube-apiserver`具有互操作性特征。对于现代数字化组织来说，基于状态的持续可观察性和反馈循环至关重要。从不同利益相关者的角度，基础设施和应用的端到端可视性为实现卓越运营提供了一种方式。另一个互操作性的例子是使用各种配置管理工具，如Helm作为`kubectl`的替代品。由于*意图记录*是纯粹的YAML或JSON数据点，我们可以轻松地将一个工具替换为另一个工具。下图展示了`kube-apiserver`与其他Kubernetes组件的交互：
- en: '![Figure 1.7 – Kubernetes API interactions'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.7 – Kubernetes API交互'
- en: '](img/B17830_01_07.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17830_01_07.jpg)'
- en: Figure 1.7 – Kubernetes API interactions
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.7 – Kubernetes API交互
- en: 'Interoperability means many things to IT operations. Some of the benefits are
    as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 互操作性对IT运维有很多意义。其一些好处如下：
- en: Easy co-existence with the organization ecosystem.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与组织生态系统的轻松共存。
- en: Kubernetes itself will evolve and be around for longer.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes本身将不断发展，并且会持续存在更长时间。
- en: Leveraging an existing skill set by choosing known ecosystem tools. For example,
    we can use Terraform for Kubernetes configuration management to take advantage
    of a team's knowledge in Terraform.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过选择已知的生态系统工具来利用现有的技能集。例如，我们可以使用Terraform进行Kubernetes配置管理，以便利用团队在Terraform方面的知识。
- en: Hypothetically keeping the option open for migrating away from Kubernetes in
    the future. (Kubernetes APIs are highly modular, and we can interchange the underlying
    components easily. Also, a pure declarative config is easy to migrate away from
    Kubernetes if required.)
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 假设未来保持从Kubernetes迁移的选项开放。（Kubernetes API高度模块化，我们可以轻松替换底层组件。此外，纯声明性配置如果需要可以轻松从Kubernetes迁移。）
- en: Extensibility
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可扩展性
- en: 'Kubernetes'' ability to add new functionalities is remarkable. We can look
    at the extensibility in three different ways:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes添加新功能的能力令人印象深刻。我们可以从三个不同的角度来看Kubernetes的可扩展性：
- en: Augmenting Kubernetes core components
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展Kubernetes核心组件
- en: Interchangeability of components
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件的可互换性
- en: Adding new resource types
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加新的资源类型
- en: Augmented Kubernetes core components
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 扩展的Kubernetes核心组件
- en: 'This extending model will either add additional functionality to the core components
    or alter core component functionality. We will look at a few examples of these
    extensions:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这种扩展模型将为核心组件添加额外的功能，或改变核心组件的功能。我们将看几个扩展的例子：
- en: '`kubectl` CLI. They are executables added to an operator''s computer in a specific
    format without changing the `kubectl` source in any form. These extensions can
    combine a process that takes several steps into a single sub-command to increase
    productivity.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubectl` CLI。它们是以特定格式添加到操作员计算机上的可执行文件，不改变`kubectl`源代码的任何形式。这些扩展可以将需要几个步骤的过程合并成一个子命令，以提高生产力。'
- en: '**Custom schedulers** are a concept that allows us to modify Kubernetes'' resource
    scheduling behavior. We can even register multiple schedulers to run parallel
    to each other and configure them for different workloads. The default scheduler
    can cover most of the general use cases. Custom schedulers are needed if we have
    a workload with a unique scheduling behavior not available in the default scheduler.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自定义调度器**是一个概念，允许我们修改Kubernetes的资源调度行为。我们甚至可以注册多个调度器并行运行，并为不同的工作负载配置它们。默认调度器可以覆盖大多数常见用例。如果我们的工作负载具有默认调度器无法提供的独特调度行为，那么就需要自定义调度器。'
- en: '**Infrastructure plugins** are concepts that help to extend underlying hardware.
    The device, storage, and network are the three different infrastructure plugins.
    Let''s say a device supports GPU processing – we require a mechanism to advertise
    the GPU usage details to schedule workload based on GPU.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基础设施插件**是有助于扩展底层硬件的概念。设备、存储和网络是三种不同的基础设施插件。假设一个设备支持GPU处理——我们需要一种机制来宣传GPU使用详情，以便基于GPU调度工作负载。'
- en: Interchangeability of components
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 组件的可互换性
- en: The interoperability characteristics of Kubernetes provide the ability to interchange
    one core component with another. These types of extensions bring new capabilities
    to Kubernetes. For example, let's pick up the virtual `kubelet` project ([https://github.com/virtual-kubelet/virtual-kubelet](https://github.com/virtual-kubelet/virtual-kubelet)).
    `Kubelet` is the interface between the Kubernetes control plane and the virtual
    machine nodes where the workloads are scheduled. `Virtual kubelet` mimics a node
    in the Kubernetes cluster to enable resource management with infrastructure other
    than a virtual machine node such as Azure Container Instances or AWS Fargate.
    Replacing the Docker runtime with another container runtime environment such as
    Rocket is another example of interchangeability.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes的互操作性特性提供了将一个核心组件与另一个组件互换的能力。这些类型的扩展为Kubernetes带来了新的功能。例如，我们来看看虚拟`kubelet`项目（[https://github.com/virtual-kubelet/virtual-kubelet](https://github.com/virtual-kubelet/virtual-kubelet)）。`Kubelet`是Kubernetes控制平面与虚拟机节点之间的接口，工作负载会在这些节点上调度。`Virtual
    kubelet`模拟Kubernetes集群中的一个节点，以便在除虚拟机节点外的基础设施（如Azure容器实例或AWS Fargate）上进行资源管理。将Docker运行时替换为其他容器运行时环境（如Rocket）是另一个互换性的例子。
- en: Adding new resource types
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加新的资源类型
- en: We can expand the scope of the Kubernetes API and controller to create a new
    custom resource, also known as **CustomResourceDefinition** (**CRD**). It is one
    of the powerful constructs used for extending Kubernetes to manage resources other
    than containers. Crossplane, a platform for cloud resource management, falls under
    this category, which we will dive deep into in the upcoming chapters. Another
    use case is to automate our custom IT day one and day two processes, also known
    as the operator pattern. For example, tasks such as deploying, upgrading, and
    responding to failure can be encoded into a new Kubernetes operator.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以扩展Kubernetes API和控制器的范围，创建一个新的自定义资源，也称为**CustomResourceDefinition**（**CRD**）。它是用于扩展Kubernetes以管理容器以外资源的强大构造之一。Crossplane，一个云资源管理平台，属于这一类别，我们将在接下来的章节中深入探讨。另一个用例是自动化我们的自定义IT日常流程，也称为操作员模式。例如，像部署、升级和响应故障等任务可以被编码到一个新的Kubernetes操作员中。
- en: People call Kubernetes a platform to build platforms because of its extensive
    extendibility. They generally support new use cases or make Kubernetes fit into
    a specific ecosystem. Kubernetes presents itself to IT operations as a universal
    abstraction by extending and supporting every complex deployment environment.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 人们称Kubernetes为构建平台的平台，因为它具有广泛的扩展性。它们通常支持新的用例或使Kubernetes适配到特定的生态系统中。Kubernetes通过扩展和支持每种复杂的部署环境，向IT运营提供了一个通用的抽象。
- en: Architecture focus
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 架构重点
- en: One of the focuses of architecture work is to make the application deployment
    architecture robust to various conditions such as virtual machine failures, data
    center failures, and diverse traffic conditions. Also, resource utilization should
    be optimum without any wastage of cost in over-provisioned infrastructure. Kubernetes
    makes it simple and unifies how to achieve architecture characteristics such as
    reliability, scalability, availability, efficiency, and elasticity. It relieves
    architects from focusing on infrastructure. Architects can now focus on building
    the required characters into the application, as achieving them at the infrastructure
    level is not complex anymore. It is a significant shift in the way traditional
    IT operates. Designing for failure, observability, and chaos engineering practices
    are becoming more popular as areas for architects to concentrate onin the world
    of containers.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 架构工作重点之一是使应用程序部署架构具备应对虚拟机故障、数据中心故障和多样化流量条件等各种情况的鲁棒性。同时，资源利用率应当做到最佳，避免在过度配置的基础设施中浪费成本。Kubernetes使这一切变得简单，并统一了如何实现可靠性、可扩展性、可用性、效率和弹性等架构特性。它让架构师不再需要专注于基础设施。架构师们现在可以专注于将所需的特性融入到应用程序中，因为在基础设施层面实现这些特性已经不再复杂。这是传统IT操作方式的一个重大转变。在容器世界中，设计容错性、可观察性和混沌工程实践正变得越来越受欢迎，成为架构师们关注的重点领域。
- en: Portability is another architecture characteristic Kubernetes provides to workloads.
    Container workloads are generally portable, but dependencies are not. We tend
    to introduce dependencies with other cloud components. Building portability into
    application dependencies is another architecture trend in recent times. It's visible
    with the 2021 InfoQ architecture trends ([https://www.infoq.com/articles/architecture-trends-2021/](https://www.infoq.com/articles/architecture-trends-2021/)).
    In the trend chart, design for portability, Dapar, the Open Application Model,
    and design for sustainability are some of the trends relevant to workload portability.
    We are slowly moving in the direction of portable cloud providers.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 可移植性是 Kubernetes 为工作负载提供的另一个架构特性。容器工作负载通常是可移植的，但依赖项则不是。我们倾向于引入其他云组件的依赖。近年来，将可移植性融入应用程序依赖成为一种架构趋势。这一点在
    2021 年 InfoQ 的架构趋势中有所体现（[https://www.infoq.com/articles/architecture-trends-2021/](https://www.infoq.com/articles/architecture-trends-2021/)）。在趋势图中，设计可移植性、Dapar、开放应用程序模型以及可持续性设计是与工作负载可移植性相关的趋势。我们正慢慢朝着可移植的云服务提供商方向发展。
- en: With the deployment of workloads into Kubernetes, our focus on architecture
    in the new IT organization has changed forever.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 随着工作负载部署到 Kubernetes 中，我们对新 IT 组织架构的关注发生了根本性的变化。
- en: Open source, community, and governance
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开源、社区和治理
- en: Kubernetes almost relieves people from working with machines. Investing in such
    a high-level abstraction requires caution, and we will see whether the change
    will be long-lasting. Any high-level abstraction becoming a meaningful and long-lasting
    change requires a few characteristics. Being backed by almost all major cloud
    providers, Kubernetes has those characteristics. The following are the characteristics
    that make Kubernetes widely accepted and adopted.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 几乎让人们不再需要直接与机器打交道。投资这种高层次的抽象需要谨慎，我们将看看这一变化是否能够持久。任何高层次的抽象要成为一种有意义且持久的变化，都需要具备一些特征。由于几乎所有主要的云服务提供商都在背后支持，Kubernetes
    具备了这些特征。以下是使 Kubernetes 被广泛接受和采纳的几个特征。
- en: Project ownership
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 项目所有权
- en: Project ownership is critical for an open source project to succeed and drive
    universal adoption. A widely accepted foundation should manage open source projects
    rather than being dominated by an individual company, and the working group driving
    the future direction should have representations from a wide range of companies.
    It will reflect the neutrality of the project, where every stakeholder can participate
    and benefit from the initiative. Kubernetes fits very well into this definition.
    Even though Kubernetes originated from a project by a few Google engineers, it
    soon became part of the **Cloud Native Computing Foundation** (**CNCF**). If we
    look at the governing board and members of the CNCF, we can see that there is
    representation from all top technology firms ([https://www.cncf.io/people/governing-board/](https://www.cncf.io/people/governing-board/)
    & [https://www.cncf.io/about/members/](https://www.cncf.io/about/members/)). Kubernetes
    also has special interest groups and working groups and is also represented by
    many technology companies, including all cloud providers.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 项目所有权对于开源项目的成功和推动普遍采纳至关重要。开源项目应该由一个广泛接受的基金会来管理，而不是被单一公司主导，推动未来方向的工作组应由来自多个公司的代表组成。这样能够反映项目的中立性，每个利益相关者都能参与并从中受益。Kubernetes
    非常符合这一定义。尽管 Kubernetes 起源于几位 Google 工程师的项目，但它很快成为了**云原生计算基金会**（**CNCF**）的一部分。如果我们查看
    CNCF 的管理委员会和成员，可以看到所有顶尖技术公司都有代表（[https://www.cncf.io/people/governing-board/](https://www.cncf.io/people/governing-board/)
    和 [https://www.cncf.io/about/members/](https://www.cncf.io/about/members/)）。Kubernetes
    还拥有特殊兴趣小组和工作小组，并且得到了许多技术公司的支持，包括所有云服务提供商。
- en: Contribution
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 贡献
- en: Kubernetes is one of the high-velocity projects in GitHub, with more than 3,000
    contributors. With a high velocity of commits from the community, Kubernetes looks
    sustainable. Also, there is a high volume of documentation, books, and tutorials
    available. Above all, we have too many ecosystem tools and platforms evolving
    around Kubernetes. It makes developing and deploying workloads on Kubernetes easier.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 是 GitHub 上发展速度最快的项目之一，拥有超过 3000 名贡献者。由于社区提交的速度很快，Kubernetes 看起来非常可持续。此外，相关文档、书籍和教程也非常丰富。最重要的是，我们围绕
    Kubernetes 发展了太多生态系统工具和平台，这使得在 Kubernetes 上开发和部署工作负载变得更加容易。
- en: Open standards
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开放标准
- en: As the scope of Kubernetes abstraction is not tiny, it did not attempt to solve
    all the problems by itself. Instead, it depended on a few open standards to integrate
    existing widely accepted tools. It also encouraged the ecosystem to develop new
    tools aligning to open standards. For example, Kubernetes can work with any container
    runtimes such as Docker and Rocker, which comply with the standard **Container
    Runtime Interface** (**CRI**). Similarly, any networking solution that complies
    with the **Container Networking Interface** (**CNI**) can be a networking solution
    for Kubernetes.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Kubernetes 抽象的范围并不小，它并没有试图单独解决所有问题。相反，它依赖于几个开放标准来整合现有的广泛接受的工具。它还鼓励生态系统开发符合开放标准的新工具。例如，Kubernetes
    可以与符合标准的任何容器运行时（如 Docker 和 Rocker）一起工作，这就是**容器运行时接口**（**CRI**）。同样，符合**容器网络接口**（**CNI**）的任何网络解决方案都可以作为
    Kubernetes 的网络解决方案。
- en: 'Kubernetes'' method of open source governance provides a few advantages to
    IT operations:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 的开源治理方法为 IT 运营提供了几个优势：
- en: Kubernetes is sustainable and organizations can invest confidently.
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 是可持续的，组织可以放心投资。
- en: Wider adoption will maintain a strong talent pool.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更广泛的采用将维持一个强大的人才库。
- en: Strong community support.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强大的社区支持。
- en: The preceding section concludes the critical aspects of the new Kubernetes IT
    operating model. While we have looked at the benefits of every individual characteristic,
    we also have advantages when we combine them. For example, platforms such as Crossplane
    are evolving by taking advantage of the multiple aspects discussed previously.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 前一节总结了新的 Kubernetes IT 运营模式的关键方面。虽然我们已经看到了每个特性的好处，但当我们将它们结合起来时，也有了优势。例如，像 Crossplane
    这样的平台正在通过利用之前讨论的多个方面的优势而发展。
- en: The next Kubernetes use case
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下一个 Kubernetes 使用案例
- en: In the last few years, many organizations have taken advantage of the disruptive
    application deployment operating model provided by Kubernetes. The pattern of
    segregating the intent expression with data points and then a control plane taking
    over the rest of the automation is known as **Infrastructure as Data** (**IaD**),
    a term coined by Kelsey Hightower. Many from the Kubernetes community believe
    that containers are only the first use case for this pattern, and many more will
    follow in the coming years. A new use case is evolving, with the launch of Crossplane
    in late 2018 seen as the next big use case for Kubernetes. Crossplane brings the
    goodness of the Kubernetes operating model to the world of cloud infrastructure
    provisioning and management. This trend will see people move away from traditional
    **Infrastructure as Code** (**IaC**), using tools such as Terraform and Ansible,
    to IaD with Crossplane and Kubernetes. This move addresses the current limitations
    with the IaC model and unifies the approach of automating applications and infrastructure.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去几年中，许多组织已经利用 Kubernetes 提供的颠覆性应用部署运营模式。通过将意图表达与数据点分离，然后控制平面接管其余的自动化过程的模式被称为**基础设施即数据**（**IaD**），这个术语是由
    Kelsey Hightower 创造的。许多 Kubernetes 社区的人士认为容器只是这种模式的第一个用例，未来还会有更多用例出现。随着 2018 年底
    Crossplane 的推出，一个新的用例正在发展，被视为 Kubernetes 的下一个重大用例。Crossplane 将 Kubernetes 运营模式的优势带入云基础设施的供应和管理领域。这一趋势将使人们摆脱传统的**基础设施即代码**（**IaC**），转而使用
    Crossplane 和 Kubernetes 的 IaD。这一转变解决了当前 IaC 模型的局限性，并统一了自动化应用和基础设施的方法。
- en: Summary
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Kubernetes offers many new aspects to the IT operating model, aligned with modern
    digital organization expectations. Understanding how Kubernetes disrupts the day
    one and day two IT operations is key to its successful adoption. This chapter
    covered the details of the new operating model provided by Kubernetes. In the
    next chapter, we will look at the limitations of IaC for cloud infrastructure
    management and introduce Kubernetes control plane-based infrastructure management
    as the new-age alternative.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 提供了许多与现代数字化组织期望一致的 IT 运营模式方面的新特性。了解 Kubernetes 如何颠覆日常的 IT 运维操作对其成功采用至关重要。本章节详细介绍了
    Kubernetes 提供的新运营模式的细节。在下一章中，我们将探讨 IaC 在云基础设施管理中的局限性，并介绍基于 Kubernetes 控制平面的基础设施管理作为新时代的替代方案。

- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Helm Dependency Management
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Helm 依赖管理
- en: As you may recall from [*Chapter 4*](B17979_04.xhtml#_idTextAnchor139), *Scaffolding
    a New Helm Chart*, the Helm chart we are developing, `guestbook`, will deploy
    two primary components. The first is a Redis backend, which is used to persist
    a list of messages. The second component is the frontend, where the user enters
    the messages in a text box. In this chapter, we will focus on updating our Helm
    chart to deploy the first major component – Redis.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能记得的，[*第 4 章*](B17979_04.xhtml#_idTextAnchor139)，《搭建一个新的 Helm 图表》中，我们正在开发的
    Helm 图表 `guestbook` 将部署两个主要组件。第一个是 Redis 后端，用于持久化消息列表。第二个组件是前端，用户在其中输入消息。在本章中，我们将重点更新
    Helm 图表，部署第一个主要组件——Redis。
- en: To deploy Redis, you may assume that we will need to make vast modifications
    to our existing `guestbook` chart. However, this is not necessarily the case.
    There are many Redis Helm charts available in Artifact Hub, and as a result, we
    can use the dependency management features of Helm and declare one of those charts
    as a dependency. Then, when the `guestbook` chart has been installed in a Kubernetes
    cluster, the dependency is also installed. By declaring Redis as a dependency,
    we can reduce the amount of effort required to create the backend for our application.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 要部署 Redis，您可能会认为我们需要对现有的 `guestbook` 图表进行大量修改。然而，事实并非如此。Artifact Hub 上有许多 Redis
    Helm 图表，因此我们可以利用 Helm 的依赖管理功能，将其中一个图表声明为依赖项。然后，当 `guestbook` 图表安装到 Kubernetes
    集群中时，依赖项也会被安装。通过将 Redis 声明为依赖项，我们可以减少为应用程序创建后端所需的工作量。
- en: In this chapter, we will explore how Helm manages dependencies. Then, we will
    use what we have learned to incorporate a Redis dependency in our Helm chart.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨 Helm 如何管理依赖项。然后，我们将利用所学的内容将 Redis 依赖项加入到我们的 Helm 图表中。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Declaring chart dependencies
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声明图表依赖项
- en: The dependencies map
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖项映射
- en: Downloading chart dependencies
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载图表依赖项
- en: Conditional dependencies
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 条件依赖项
- en: Altering dependency names and values
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改依赖项名称和值
- en: Updating the guestbook Helm chart
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新 guestbook Helm 图表
- en: Cleaning up
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清理工作
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For this chapter, you will require the following tools:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章需要以下工具：
- en: '`minikube`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`minikube`'
- en: '`kubectl`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubectl`'
- en: '`helm`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`helm`'
- en: '`git`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git`'
- en: 'We will use minikube to explore several examples throughout this chapter, so
    now is a good time to start your minikube environment:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中使用 minikube 来探索几个示例，现在是启动您的 minikube 环境的好时机：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once minikube has started, create a new namespace for this chapter:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 minikube 启动，请为本章创建一个新的命名空间：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Throughout this chapter, we will follow several examples to gain a better understanding
    of how chart dependencies work in practice. Ensure that you clone the sample repository
    to follow along with the examples. To clone the repository, run the following
    command:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将跟随几个示例，以更好地理解图表依赖项在实践中的工作原理。确保您克隆了示例仓库，以便跟随示例进行操作。克隆仓库时，请运行以下命令：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: With the repository cloned, let’s continue to the next section to begin learning
    about Helm chart dependencies.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 仓库克隆完成后，让我们继续到下一部分，开始学习 Helm 图表依赖项。
- en: Declaring chart dependencies
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 声明图表依赖项
- en: 'Chart dependencies are used to install another chart’s resources that a Helm
    chart (referred to as the `wordpress` chart to install both the WordPress application
    instance and a MariaDB backend. You may be surprised to learn that the MariaDB
    database that was installed was not a native WordPress chart resource – it was
    a dependency! We can confirm this fact by running the `helm show chart` command
    to view the dependencies declared in the `wordpress Chart.yaml` file:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图表依赖项用于安装另一个图表的资源，例如 Helm 图表（称为 `wordpress` 图表，用于安装 WordPress 应用实例和 MariaDB
    后端）。您可能会惊讶地发现，安装的 MariaDB 数据库并不是一个本地的 WordPress 图表资源——它是一个依赖项！我们可以通过运行 `helm show
    chart` 命令来确认这一点，查看 `wordpress Chart.yaml` 文件中声明的依赖项：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the output, you’ll see the `dependencies` map, as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在输出中，您将看到如下的 `dependencies` 映射：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here, you can see that `mariadb` is the first dependency to be listed. The second
    dependency, `memcached`, is an in-memory key/value pair database and was not installed
    when we deployed WordPress in [*Chapter 3*](B17979_03.xhtml#_idTextAnchor083),
    *Installing Your First App With Helm*, as it depends on the `memcached.enabled`
    value being set to `true` (this value is `false` by default). The third dependency,
    `common`, is a library chart. We will explore library charts in greater detail
    in [*Chapter 6*](B17979_06.xhtml#_idTextAnchor167), *Understanding Helm Templates*.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到`mariadb`是第一个列出的依赖项。第二个依赖项，`memcached`，是一个内存中的键/值对数据库，在我们部署WordPress时没有安装[
    *第3章* ](B17979_03.xhtml#_idTextAnchor083)，*使用Helm安装你的第一个应用*，因为它依赖于将`memcached.enabled`值设置为`true`（默认情况下该值为`false`）。第三个依赖项，`common`，是一个库图表。我们将在[
    *第6章* ](B17979_06.xhtml#_idTextAnchor167)，*理解Helm模板*中更详细地探讨库图表。
- en: The WordPress dependencies listed previously are examples of what you may see
    in other `Chart.yaml` files. Let’s look at all possible dependency-related `Chart.yaml`
    fields to understand how to declare chart dependencies.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 之前列出的WordPress依赖项是你可能在其他`Chart.yaml`文件中看到的例子。让我们来看一下所有可能的与依赖项相关的`Chart.yaml`字段，以理解如何声明图表依赖项。
- en: The dependencies map
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 依赖项映射
- en: 'The `dependencies` map within `Chart.yaml` supports many different fields for
    declaring dependencies and altering their behavior. Let’s look at the fields that
    are included in this map:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`Chart.yaml`中的`dependencies`映射支持许多不同的字段来声明依赖项并改变它们的行为。让我们来看一下这个映射中包含的字段：'
- en: '| **Field** | **Description** | **Required?** |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| **字段** | **描述** | **是否必需** |'
- en: '| Name | The name of the dependency chart | Yes |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 依赖项图表的名称 | 是 |'
- en: '| Repository | The location where the dependency chart resides | Yes |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 仓库 | 依赖项图表所在的位置 | 是 |'
- en: '| Version | The chart dependency version | Yes |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 版本 | 图表依赖项的版本 | 是 |'
- en: '| Condition | A Boolean value that determines whether the dependency should
    be included or not | No |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 条件 | 一个布尔值，决定是否包含该依赖项 | 否 |'
- en: '| Tags | A list of Boolean values that determine whether the chart should be
    included or not | No |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 标签 | 一个布尔值列表，用来决定图表是否应当被包含 | 否 |'
- en: '| import-values | A mapping of source values to parent values | No |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| import-values | 源值到父级值的映射 | 否 |'
- en: '| Alias | An alternative name to give the dependency | No |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 别名 | 给依赖项指定的替代名称 | 否 |'
- en: Table 5.1 – The dependencies fields in Chart.yaml
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 表5.1 – Chart.yaml中的依赖项字段
- en: The minimum required fields in the `dependencies` map are `name`, `repository`,
    and `version`. We can see each of these being used in the WordPress `Chart.yaml`
    file, where the first dependency was called `mariadb`, the repository was [https://protect-eu.mimecast.com/s/ax_4C5lrwTkYXJhOWg2e?domain=raw.githubusercontent.com](https://protect-eu.mimecast.com/s/ax_4C5lrwTkYXJhOWg2e?domain=raw.githubusercontent.com),
    and the version was `9.x.x`. We will learn more about these three fields in the
    *Downloading chart dependencies* section.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`dependencies`映射中必需的最小字段是`name`、`repository`和`version`。我们可以看到这些字段在WordPress的`Chart.yaml`文件中被使用，其中第一个依赖项叫做`mariadb`，仓库是[https://protect-eu.mimecast.com/s/ax_4C5lrwTkYXJhOWg2e?domain=raw.githubusercontent.com](https://protect-eu.mimecast.com/s/ax_4C5lrwTkYXJhOWg2e?domain=raw.githubusercontent.com)，版本是`9.x.x`。我们将在*下载图表依赖项*一节中进一步了解这三个字段。'
- en: The `condition` and `tags` fields are used to conditionally include dependencies
    based on the settings of specific values. `mariadb`, the first dependency of the
    WordPress chart, sets the condition field to `mariadb.enabled`, and its third
    dependency (`common`) uses a tag called `bitnami-common`. We will explore conditional
    dependencies with these settings in the *Conditional dependencies* section.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`condition`和`tags`字段用于根据特定值的设置有条件地包含依赖项。WordPress图表的第一个依赖项`mariadb`将`condition`字段设置为`mariadb.enabled`，而其第三个依赖项（`common`）使用了一个名为`bitnami-common`的标签。我们将在*条件依赖项*一节中使用这些设置来探讨条件依赖项。'
- en: The remaining fields, `alias` and `import-values`, provide methods for manipulating
    the values of a dependency chart. We will learn more about these fields in the
    *Altering dependency names and values* section.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 剩余的字段，`alias`和`import-values`，提供了操控依赖项图表值的方法。我们将在*更改依赖项名称和值*一节中进一步了解这些字段。
- en: Now that we’ve provided a high-level overview of each of the dependency-related
    fields, let’s learn how to download dependencies declared in `Chart.yaml`. Then,
    we will dive into using each field while covering several example scenarios.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经概述了与依赖项相关的每个字段，让我们学习如何下载在`Chart.yaml`中声明的依赖项。然后，我们将深入探讨如何使用每个字段，并涵盖多个示例场景。
- en: Downloading chart dependencies
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 正在下载图表依赖
- en: 'Chart dependencies can be viewed and downloaded using the `helm dependency`
    subcommands listed in the following table:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下表格中列出的`helm dependency`子命令查看并下载图表依赖：
- en: '| **Command** | **Description** |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| **命令** | **描述** |'
- en: '| `helm dependency list` | Lists the dependencies for the given chart. |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `helm dependency list` | 列出给定图表的依赖项。 |'
- en: '| `helm dependency update` | Downloads the dependencies listed in `Chart.yaml`
    and generates a `Chart.lock` file. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `helm dependency update` | 下载`Chart.yaml`中列出的依赖并生成`Chart.lock`文件。 |'
- en: '| `helm dependency build` | Downloads the dependencies listed in `Chart.lock`.
    If the `Chart.lock` file is not found, then this command will mirror the behavior
    of the `helm dependency update` command. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `helm dependency build` | 下载`Chart.lock`中列出的依赖。如果找不到`Chart.lock`文件，则此命令将模拟`helm
    dependency update`命令的行为。 |'
- en: 'Let’s explore these commands by using the example Helm charts located in the
    `chapter5/examples` folder of this book’s GitHub repository; we cloned these at
    the beginning of this chapter. We’ll start by using the `basic-fields` chart:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过使用本书GitHub仓库中`chapter5/examples`文件夹中的示例 Helm 图表来探索这些命令；我们在本章开始时克隆了这些图表。我们将从使用`basic-fields`图表开始：
- en: 'Using the `basic-fields` chart located in `chapter5/examples/basic-fields`,
    list the chart’s declared dependencies:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用位于`chapter5/examples/basic-fields`中的`basic-fields`图表，列出图表声明的依赖：
- en: '[PRE5]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You’ll see an output similar to the following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到类似于以下的输出：
- en: '![Figure 5.1 – An example helm dependency list output'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.1 – 示例 helm 依赖列表输出'
- en: '](img/Figure_5.1_B17979.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.1_B17979.jpg)'
- en: Figure 5.1 – An example helm dependency list output
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.1 – 示例 helm 依赖列表输出
- en: The `helm dependency list` command is used to give us a quick look at a chart’s
    declared dependencies, as well as their download status. From the preceding output,
    you can see that the `basic-fields` chart declares one dependency, `mariadb`,
    and that its status is currently `missing`. When the status is labeled `missing`,
    it means that you have not downloaded that dependency yet, so the chart cannot
    be installed yet. Now, let’s download the dependency.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`helm dependency list`命令用于快速查看图表声明的依赖及其下载状态。从前面的输出中，你可以看到`basic-fields`图表声明了一个依赖`mariadb`，并且其状态当前为`missing`。当状态标记为`missing`时，表示你还没有下载该依赖，因此图表无法安装。现在，让我们下载这个依赖。'
- en: 'Download the `basic-fields` chart’s dependencies by using the `helm dependency
    update` command:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`helm dependency update`命令下载`basic-fields`图表的依赖：
- en: '[PRE6]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You’ll see the following output:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到以下输出：
- en: '![Figure 5.2 – The output of helm dependency update'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.2 – helm dependency update 的输出'
- en: '](img/Figure_5.2_B17979.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.2_B17979.jpg)'
- en: Figure 5.2 – The output of helm dependency update
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.2 – helm dependency update 的输出
- en: Run the `helm dependency list` command to confirm that the dependency has been
    downloaded. For brevity, you may want to run this command as `helm dep list` since
    `helm dep` is a shorthand spelling of `helm dependency`. We will continue to use
    `helm dependency` throughout this book for clarity, but feel free to use the shorthand
    spelling to reduce typing effort.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`helm dependency list`命令确认依赖已下载。为了简洁，你可以使用`helm dep list`来运行此命令，因为`helm dep`是`helm
    dependency`的简写。为了清晰起见，本书将继续使用`helm dependency`，但你可以自由使用简写来减少输入工作。
- en: 'Back to the task at hand, let’s confirm that the download was successful by
    running the following command:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 回到手头的任务，让我们通过运行以下命令来确认下载是否成功：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You will see an output similar to what we saw previously, except that the status
    has been updated to `ok`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到与我们之前看到的输出类似，只不过状态已更新为`ok`：
- en: '![Figure 5.3 – The updated helm dependency list status'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.3 – 更新后的 helm 依赖列表状态'
- en: '](img/Figure_5.3_B17979.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.3_B17979.jpg)'
- en: Figure 5.3 – The updated helm dependency list status
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.3 – 更新后的 helm 依赖列表状态
- en: When `helm dependency update` is successful, you will see the dependency’s status
    turn to `ok`, but you will also see a couple of new files appear in your chart’s
    directory. First, you will see that the dependency chart has been downloaded under
    a newly created `charts/` folder, and you will also see a `Chart.lock` file.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当`helm dependency update`成功时，你将看到依赖的状态变为`ok`，并且你还会看到几个新文件出现在图表目录中。首先，你会看到依赖图表已下载到新创建的`charts/`文件夹下，并且你还会看到一个`Chart.lock`文件。
- en: Let’s look at these new files.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下这些新文件。
- en: 'Use the `ls` command to view the downloaded dependency:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`ls`命令查看已下载的依赖：
- en: '[PRE8]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As you can see, dependencies are downloaded in the form of gzip archives with
    `.tgz` file extensions. The filename contains the dependency name as well as its
    version.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，依赖项以 `.tgz` 文件扩展名的 gzip 压缩包形式下载。文件名包含了依赖名称和其版本。
- en: 'Use the `cat` command to view the generated `Chart.lock` file:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `cat` 命令查看生成的 `Chart.lock` 文件：
- en: '[PRE9]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You will see the following output:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到如下输出：
- en: '![Figure 5.4 – The generated Chart.lock file'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.4 – 生成的 `Chart.lock` 文件'
- en: '](img/Figure_5.4_B17979.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.4_B17979.jpg)'
- en: Figure 5.4 – The generated Chart.lock file
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.4 – 生成的 `Chart.lock` 文件
- en: The `Chart.lock` file is generated upon running `helm dependency update`, and
    it contains a list of dependencies, such as the `Chart.yaml` file. However, unlike
    `Chart.yaml`, the `Chart.lock` file is used to lock in the dependency versions
    so that the same versions can be downloaded on other machines.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`Chart.lock` 文件是在运行 `helm dependency update` 时生成的，包含了一个依赖列表，类似于 `Chart.yaml`
    文件。然而，与 `Chart.yaml` 不同，`Chart.lock` 文件用于锁定依赖版本，以确保在其他机器上可以下载到相同版本的依赖。'
- en: 'The impact that `Chart.lock` has is not profound in the `basic-fields` chart
    because the MariaDB version is already statically, set at `9.5.0`. However, take
    a look at the `wildcard-version` chart located under `chapter5/examples/wildcard-version`.
    Within this directory, the version of MariaDB is set to `9.x.x`, as shown in the
    following snippet:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `basic-fields` chart 中，`Chart.lock` 的影响不大，因为 MariaDB 版本已经静态设置为 `9.5.0`。然而，看看位于
    `chapter5/examples/wildcard-version` 下的 `wildcard-version` chart。在这个目录中，MariaDB
    的版本被设置为 `9.x.x`，如下所示的代码片段：
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The version, `9.x.x`, is a wildcard, and it tells Helm to download the latest
    minor and patch versions under major release 9 while assuming a SemVer format
    of `major.minor.patch`. If the version was specified as 9.5.x, Helm would download
    the latest patch release under major version 9 and minor version 5.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 `9.x.x` 是一个通配符，它告诉 Helm 下载 9 主版本下的最新次版本和修补版本，假设采用 `major.minor.patch` 的语义化版本格式。如果版本指定为
    9.5.x，Helm 将下载 9 主版本和 5 次版本下的最新修补版本。
- en: Let’s use the `wildcard-version` chart to understand how wildcards play a more
    important role in the `Chart.lock` file.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 `wildcard-version` chart 来理解通配符在 `Chart.lock` 文件中的重要作用。
- en: 'Use the `helm dependency update` command to download the `wildcard-version`
    chart’s dependencies:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `helm dependency update` 命令下载 `wildcard-version` chart 的依赖：
- en: '[PRE11]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'View the generated `Chart.lock` file:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看生成的 `Chart.lock` 文件：
- en: '[PRE12]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Notice that the MariaDB version in `Chart.lock`, `9.8.1`, is different than
    the version in `Chart.yaml`, which was 9.x.x:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`Chart.lock` 中的 MariaDB 版本 `9.8.1` 与 `Chart.yaml` 中的版本 `9.x.x` 不同：
- en: '![Figure 5.5 – The Chart.lock file when using a wildcard dependency version'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.5 – 使用通配符依赖版本时的 `Chart.lock` 文件'
- en: '](img/Figure_5.5_B17979.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_5.5_B17979.jpg)'
- en: Figure 5.5 – The Chart.lock file when using a wildcard dependency version
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.5 – 使用通配符依赖版本时的 `Chart.lock` 文件
- en: 'Here, you can see the impact that `Chart.lock` has more clearly. Since version
    9.x.x was specified in the `Chart.yaml` file, Helm downloads the latest 9.x.x
    release, and the resulting `Chart.lock` was generated to lock in version 9.8.1,
    which was the latest at the time `helm dependency update` was run. However, what
    happens if dependencies need to be redownloaded or if the `charts/` folder needs
    to be regenerated? If you run `helm dependency update` again, you run the risk
    that the latest 9.x.x release is different than 9.8.2, which may cause incompatibility
    issues. To address this risk, you can use the `helm dependency build` command.
    Let’s see this command in action:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以更清楚地看到 `Chart.lock` 的影响。由于在 `Chart.yaml` 文件中指定了 9.x.x 版本，Helm 下载了最新的
    9.x.x 版本，并生成了 `Chart.lock` 来锁定版本 9.8.1，这是在运行 `helm dependency update` 时的最新版本。然而，如果需要重新下载依赖项，或者需要重新生成
    `charts/` 文件夹会发生什么呢？如果再次运行 `helm dependency update`，就有可能出现最新的 9.x.x 版本与 9.8.2
    不同的情况，这可能导致兼容性问题。为了解决这一风险，你可以使用 `helm dependency build` 命令。让我们看看这个命令的实际效果：
- en: 'Delete the `charts/` directory under `wildcard-version`:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除 `wildcard-version` 下的 `charts/` 目录：
- en: '[PRE13]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Run `helm dependency build` to redownload the MariaDB version specified in
    `Chart.lock`:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `helm dependency build` 重新下载 `Chart.lock` 中指定的 MariaDB 版本：
- en: '[PRE14]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Verify that version 9.8.1 was redownloaded to the charts`/` directory:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证版本 9.8.1 是否已重新下载到 `charts/` 目录：
- en: '[PRE15]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In this section, we walked through downloading dependencies using the `helm
    dependency` subcommands. However, the examples we have seen so far have always
    resulted in dependencies being downloaded. Sometimes, you will want to conditionally
    include or exclude dependencies based on user input. We will explore this concept
    in the next section.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们介绍了使用`helm dependency`子命令下载依赖项。然而，到目前为止，我们看到的例子总是导致依赖项被下载。有时，你可能需要根据用户输入有条件地包含或排除依赖项。我们将在下一节探讨这一概念。
- en: Creating conditionals
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建条件
- en: 'Conditional dependencies can be created by using the `condition` and `tags`
    fields of the `dependencies` map. The `condition` field is used to list `Boolean`
    values that, if present, toggle the inclusion of the dependency. Let’s explore
    this field first by looking at the `condition-example` chart located under `chapter5/examples/condition-example`:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过使用`dependencies`映射中的`condition`和`tags`字段来创建条件依赖项。`condition`字段用于列出`Boolean`值，如果这些值存在，将切换依赖项的包含。我们首先通过查看位于`chapter5/examples/condition-example`的`condition-example`
    chart来探索这个字段：
- en: 'Observe the `Chart.yaml` file located at `chapter5/examples/condition-example/Chart.yaml`:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看位于`chapter5/examples/condition-example/Chart.yaml`的`Chart.yaml`文件：
- en: '[PRE16]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Notice that the last line of `Chart.yaml` in the preceding snippet uses the
    `condition: mariadb.enabled` setting. This setting allows users to set a value
    called `mariadb.enabled` to either `true` or `false`. If the value evaluates to
    `true`, the MariaDB dependency will be included. If `false`, MariaDB will not
    be included. By default, if `mariadb.enabled` does not exist, then this condition
    will have no effect, and MariaDB will be included.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '请注意，前面代码段中的`Chart.yaml`的最后一行使用了`condition: mariadb.enabled`设置。这个设置允许用户将一个名为`mariadb.enabled`的值设置为`true`或`false`。如果该值为`true`，MariaDB依赖项将被包含。如果为`false`，则MariaDB将不会被包含。默认情况下，如果`mariadb.enabled`不存在，那么此条件将不起作用，MariaDB将被包含。'
- en: 'The best practice for setting a condition is to follow a `chartname.enabled`
    value format, where each dependency has a unique condition, depending on the dependency’s
    name. This allows for a more intuitive values schema. However, if necessary, you
    can specify multiple values for a condition by using a comma-separated expression,
    like so:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 设置条件的最佳实践是遵循`chartname.enabled`值格式，其中每个依赖项都有一个独特的条件，具体取决于依赖项的名称。这种方式可以实现更直观的值架构。然而，如果有必要，你可以通过使用逗号分隔的表达式来为一个条件指定多个值，如下所示：
- en: '[PRE17]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: When a condition is a comma-delimited list, the first value is used if it exists,
    and the rest are ignored. Otherwise, if the first value does not exist, then subsequent
    values in the list are used to fall back on.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 当条件是一个以逗号分隔的列表时，如果第一个值存在，则使用第一个值，其余值将被忽略。否则，如果第一个值不存在，则会使用列表中的后续值作为后备。
- en: Let’s continue with this example to see the use of the `condition` property
    in action.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续这个例子，看看`condition`属性的实际应用。
- en: 'Observe the `condition-example` chart’s `values.yaml` file, which includes
    the `mariadb.enabled` value by default:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看`condition-example` chart的`values.yaml`文件，该文件默认包含`mariadb.enabled`值：
- en: '[PRE18]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As you can see, `mariadb.enabled` defaults to `true`, so we can expect to see
    MariaDB resources created in Helm’s output. Let’s verify that this is the case.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，`mariadb.enabled`默认设置为`true`，因此我们可以预期在Helm的输出中看到MariaDB资源。让我们来验证这一点。
- en: 'Download the `condition-example` chart’s dependencies using the `helm dependency
    update` command:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`helm dependency update`命令下载`condition-example` chart的依赖项：
- en: '[PRE19]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Install the `condition-example` chart in your minikube cluster:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的minikube集群中安装`condition-example` chart：
- en: '[PRE20]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Verify that the MariaDB-related resources were created during the installation:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证安装过程中是否创建了MariaDB相关资源：
- en: '[PRE21]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: You should see a lengthy output of strings containing `mariadb`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到一长串包含`mariadb`的字符串输出。
- en: As expected, MariaDB was installed because the `mariadb.enabled` value was set
    to `true`. Let’s set this value to `false` next and verify that MariaDB has been
    excluded.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 正如预期的那样，MariaDB被安装了，因为`mariadb.enabled`值被设置为`true`。接下来，我们将这个值设置为`false`，并验证MariaDB是否已被排除。
- en: 'Upgrade the `conditional-example` release by setting `mariadb.enabled` to `false`:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将`mariadb.enabled`设置为`false`来升级`conditional-example`发布：
- en: '[PRE22]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Verify that the MariaDB-related resources were excluded after the upgrade:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 升级后验证MariaDB相关资源是否已被排除：
- en: '[PRE23]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: You should not see any output.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 你不应该看到任何输出。
- en: The `condition` setting is the most common way to conditionally include dependencies
    within your Helm charts. However, there is a second setting you can use as well
    that we will showcase called `tags`. Whereas `condition` is best used for enabling
    individual dependencies using the `chartname.enabled` format, `tags` is used to
    enable or disable one or more dependencies by associating each dependency with
    descriptive labels.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`condition` 设置是最常用的在 Helm 图表中有条件地包含依赖项的方式。然而，还有另一种设置可以使用，我们将在此展示，称为 `tags`。`condition`
    最适用于使用 `chartname.enabled` 格式启用单个依赖项，而 `tags` 用于通过将每个依赖项与描述性标签关联，来启用或禁用一个或多个依赖项。'
- en: Let’s use the `tags-example` chart located in `chapter5/examples/tags-example`
    to understand how tags can define conditional dependencies.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用位于 `chapter5/examples/tags-example` 的 `tags-example` 图表来了解标签如何定义条件依赖。
- en: 'Observe the `Chart.yaml` file for the `tags-example` chart located in `chapter5/examples/tags-example/Chart.yaml`:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看位于 `chapter5/examples/tags-example/Chart.yaml` 的 `tags-example` 图表的 `Chart.yaml`
    文件：
- en: '[PRE24]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'As you can see, the `tags-example` chart defines two different dependencies:
    `mariadb` and `memcached`. Both `mariadb` and `memcached` share the `backend`
    tag, while `mariadb` also has the `database` tag; `memcached` has the `cache`
    tag separately. Let’s explore how these tags are used by checking the chart’s
    `values.yaml` file.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`tags-example` 图表定义了两个不同的依赖项：`mariadb` 和 `memcached`。`mariadb` 和 `memcached`
    都共享 `backend` 标签，而 `mariadb` 还具有 `database` 标签；`memcached` 则单独具有 `cache` 标签。让我们通过查看图表的
    `values.yaml` 文件来探索这些标签的使用。
- en: 'Observe the `tags-example` chart’s `values.yaml` file. Notice the usage of
    the `tags` map at the end of the file:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看 `tags-example` 图表的 `values.yaml` 文件。注意文件末尾使用的 `tags` 映射：
- en: '[PRE25]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Given the values file for the `tags-example` chart, you can see that the backend
    tag has been enabled. Since both `mariadb` and `memcached` share the same `backend`
    tag, both dependencies are enabled by default (similarly, if the `tags` map was
    omitted, both dependencies would also be included). To verify this ascertain,
    we can upgrade our previous `conditional-example` release using the `tags-example`
    chart.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 `tags-example` 图表的值文件，您可以看到已启用后端标签。由于 `mariadb` 和 `memcached` 都共享相同的 `backend`
    标签，因此这两个依赖项默认都启用（类似地，如果省略了 `tags` 映射，这两个依赖项也会被包含）。为了验证这一点，我们可以使用 `tags-example`
    图表升级之前的 `conditional-example` 发布。
- en: 'Use the `helm upgrade` command to upgrade `conditional-example` using the contents
    from the `tags-example` chart:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `helm upgrade` 命令通过 `tags-example` 图表中的内容升级 `conditional-example`：
- en: '[PRE26]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Verify that both `mariadb` and `memcached` were installed:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证 `mariadb` 和 `memcached` 是否都已安装：
- en: '[PRE27]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: While both commands should show large amounts of output, the presence of a match
    confirms that both dependencies were installed.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这两个命令应该显示大量输出，但匹配项的存在表明这两个依赖项都已安装。
- en: By using the same tag across multiple dependencies, you can conveniently include
    or exclude dependencies within your chart. Imagine, however, that you only wanted
    to include `mariadb` within the `tags-example` chart. While it would be intuitive
    to believe you could simply set `tags.database` to `true` and `tags.cache` to
    `false`, this would not have any effect because `tags.backend` already defaults
    to `true`. If one tag is true, then the dependency is included, even if the other
    tags are set to false.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在多个依赖项中使用相同的标签，您可以方便地在图表中包含或排除依赖项。然而，假设您只想在 `tags-example` 图表中包含 `mariadb`。虽然直觉上可能认为只需将
    `tags.database` 设置为 `true`，将 `tags.cache` 设置为 `false`，但这不会产生任何效果，因为 `tags.backend`
    默认已设置为 `true`。如果某个标签为 `true`，即使其他标签设置为 `false`，该依赖项也会被包含。
- en: To address this issue, you can override `tags.backend` to `false`.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决此问题，您可以将 `tags.backend` 重写为 `false`。
- en: 'Upgrade the `conditional-example` release so that it includes `mariadb` and
    excludes `memcached`:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 升级 `conditional-example` 发布，以便它包含 `mariadb` 并排除 `memcached`：
- en: '[PRE28]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Notice that we have passed `--set tags.backend=false` first to ensure that none
    of the `memcached` conditions evaluate to true.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们首先传递了 `--set tags.backend=false`，以确保 `memcached` 的条件不会被评估为 `true`。
- en: 'Verify that `mariadb` was included during the upgrade:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证升级过程中是否包含了 `mariadb`：
- en: '[PRE29]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This command should return a large amount of output.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令应返回大量输出。
- en: 'Verify that `memcached` was excluded during the upgrade:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证升级过程中是否排除了 `memcached`：
- en: '[PRE30]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This command should not return any output.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令不应返回任何输出。
- en: The `condition` and `tags` fields both provide a robust set of options for conditionally
    including dependencies within your Helm charts. Keep in mind that you can also
    use both of these options together, but `condition` always overrides `tags`. This
    means that if all tags evaluate to true, and if any condition evaluates to false,
    then the condition will override the tags, and the dependency will not be included.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`condition`和`tags`字段都提供了强大的选项集，用于在你的Helm图表中有条件地包含依赖项。请记住，你也可以将这两个选项一起使用，但`condition`始终会覆盖`tags`。这意味着，如果所有标签的评估结果为真，而任何条件评估结果为假，则条件将覆盖标签，依赖项将不会被包含。'
- en: 'As a final step before advancing to the next topic, uninstall the `conditional-example`
    release:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在进入下一个话题之前，卸载`conditional-example`发布：
- en: '[PRE31]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Next, let’s discuss the options available for altering how dependencies and
    their values are referenced.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们讨论如何更改引用依赖项及其值的选项。
- en: Altering dependency names and values
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改依赖项的名称和值
- en: When you include a dependency within a chart, you will most likely need to alter
    some of its values. One way to alter a dependency’s values is to override them
    under a map whose root has the same name as the dependency.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在图表中包含依赖项时，你很可能需要更改其一些值。更改依赖项值的一种方式是通过一个映射来覆盖这些值，映射的根名称与依赖项的名称相同。
- en: 'For example, consider the `basic-fields` chart located under `chapter5/examples/basic-fields`.
    This chart contains one dependency in the `Chart.yaml` file:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑位于`chapter5/examples/basic-fields`下的`basic-fields`图表。这个图表在`Chart.yaml`文件中包含一个依赖项：
- en: '[PRE32]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'To override the values from the `mariadb` chart, you could incorporate a values
    structure, similar to the following:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 要覆盖`mariadb`图表中的值，你可以采用类似以下的值结构：
- en: '[PRE33]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This will override the `image.registry`, `image.repository`, and `image.tag`
    values from the `mariadb` chart.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这将覆盖`mariadb`图表中的`image.registry`、`image.repository`和`image.tag`值。
- en: 'Let’s experiment with overriding dependency values by completing a hands-on
    example:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过完成一个实际示例来尝试覆盖依赖项值：
- en: 'Install the `basic-fields` chart located in `chapter5/examples/basic-fields`.
    Override MariaDB’s `image.tag` value to deploy a different tag for the `mariadb`
    image than the default:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装位于`chapter5/examples/basic-fields`的`basic-fields`图表。覆盖MariaDB的`image.tag`值，以便为`mariadb`镜像部署不同于默认的标签：
- en: '[PRE34]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Verify that the `latest` tag was applied:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证是否应用了`latest`标签：
- en: '[PRE35]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Uninstall the Helm release:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 卸载Helm发布：
- en: '[PRE36]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Nesting values in this fashion is the simplest and most common way to override
    the values of dependencies. However, the `dependencies` map provides a configuration
    for altering the root’s name – `alias`.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式嵌套值是覆盖依赖项值最简单和最常见的方法。然而，`dependencies`映射提供了一个配置，用于更改根名称——`alias`。
- en: Let’s run through an example to understand how `alias` can be used.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个示例来了解如何使用`alias`。
- en: 'Observe the `Chart.yaml` file of the `alias-example` chart located in `chapter5/examples/alias-example/Chart.yaml`:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 查看位于`chapter5/examples/alias-example/Chart.yaml`的`alias-example`图表的`Chart.yaml`文件：
- en: '[PRE37]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'From the preceding `Chart.yaml` snippet, you can see that `alias-example` has
    two nearly identical MariaDB dependencies. This is the best use case for using
    `alias`. Since there are multiple MariaDB dependencies, Helm needs to be able
    to distinguish between the two. By using `alias`, you can give each identical
    dependency a unique name. Then, you can override values from each specific dependency.
    Let’s explore `alias`:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的`Chart.yaml`片段中，你可以看到`alias-example`有两个几乎相同的MariaDB依赖项。这是使用`alias`的最佳场景。由于有多个MariaDB依赖项，Helm需要能够区分它们。通过使用`alias`，你可以为每个相同的依赖项赋予一个唯一的名称。然后，你可以覆盖每个特定依赖项的值。让我们探索`alias`：
- en: 'Install the Helm chart by overriding the `image.tag` value for each MariaDB
    instance:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过覆盖每个MariaDB实例的`image.tag`值来安装Helm图表：
- en: '[PRE38]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Verify that each database’s tag was applied:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证每个数据库的标签是否已应用：
- en: '[PRE39]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Uninstall the Helm release:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 卸载Helm发布：
- en: '[PRE40]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: In general, when you are working with unique dependencies, you will not need
    to use `alias`. However, when you are working with multiple invocations of the
    same dependency, `alias` is an excellent way to manage and override values from
    each invocation.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，当你处理唯一的依赖项时，不需要使用`alias`。但是，当你处理同一依赖项的多个调用时，`alias`是管理和覆盖每次调用的值的绝佳方法。
- en: 'Besides `alias`, the `dependencies` map in the `Chart.yaml` file provides one
    additional property for altering how values are managed for dependencies – `import-values`.
    The `import-values` setting is used to alter how dependency values are propagated
    to a parent chart. It comes in two different formats: `exports` and `child-parent`.
    The `exports` format is only applicable when dependency charts contain the `exports`
    map within its values file. Imagine that a dependency chart contains the following
    values:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `alias` 外，`Chart.yaml` 文件中的 `dependencies` 映射还提供了一个额外的属性来改变依赖项值的管理方式——`import-values`。`import-values`
    设置用于改变依赖值如何传播到父图表。它有两种不同的格式：`exports` 和 `child-parent`。`exports` 格式仅在依赖图表的值文件中包含
    `exports` 映射时适用。假设一个依赖图表包含以下值：
- en: '[PRE41]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Using the `import-values` setting on the parent chart, you could import each
    of the image-related values underneath `exports`:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 使用父图表上的 `import-values` 设置，你可以导入每个位于 `exports` 下的图像相关值：
- en: '[PRE42]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Using `import-values` in `exports` format would result in the image-related
    values being propagated, as follows:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `import-values` 以 `exports` 格式时，图像相关的值将被传播，如下所示：
- en: '[PRE43]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Compare this with the way these dependency values would be propagated by default,
    without `import-values`:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 将此与默认情况下这些依赖值的传播方式进行比较，`import-values` 未使用时的情况：
- en: '[PRE44]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: As you can see, using `import-values` resulted in a less complex propagation
    with fewer deeply nested values.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，使用 `import-values` 使得传播变得更加简洁，减少了深层嵌套的值。
- en: 'The other format of `import-values` is the `child-parent` format. This format
    does not require dependency charts (referred to as `exports`, and it is especially
    useful for importing deeply nested values. Consider the following dependency chart,
    which contains the following values:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`import-values` 的另一种格式是 `child-parent` 格式。此格式不需要依赖图表（称为 `exports`），并且对于导入深层嵌套的值特别有用。考虑以下依赖图表，其中包含以下值：'
- en: '[PRE45]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'In the parent chart, you can import the image-related values using the `child-parent`
    format of `import-values`:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在父图表中，你可以使用 `import-values` 的 `child-parent` 格式导入图像相关的值：
- en: '[PRE46]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'This will propagate the dependency values so that each value under `common.deployment.image`
    is mapped directly under `image` in the parent chart:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 这将传播依赖值，使得 `common.deployment.image` 下的每个值都直接映射到父图表中的 `image` 下：
- en: '[PRE47]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Once again, by using the `import-values` setting, you can simplify how dependency
    values are propagated into the parent chart.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 再次通过使用 `import-values` 设置，你可以简化依赖值如何传播到父图表中的过程。
- en: One important detail to note is that, when using `import-values`, you cannot
    override the values that you are importing. If you need to override values from
    the dependency, those values should not be imported using `import-values`.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 一个需要注意的重要细节是，当使用 `import-values` 时，你无法覆盖正在导入的值。如果需要覆盖来自依赖项的值，那么这些值不应该使用 `import-values`
    导入。
- en: Now that we have explored each of the different settings involved in Helm dependency
    management, let’s finish this chapter by updating our `guestbook` chart with a
    Redis dependency to create the backend.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经探讨了涉及 Helm 依赖管理的不同设置，让我们通过将 Redis 依赖项更新到 `guestbook` 图表中，以创建后端来结束本章内容。
- en: Updating the guestbook Helm chart
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新 guestbook Helm 图表
- en: 'Similar to how we searched Artifact Hub to locate a WordPress chart in [*Chapter
    3*](B17979_03.xhtml#_idTextAnchor083), *Installing Your First App with Helm*,
    we need to search for a Redis chart so that it can be used as a dependency. Let’s
    search for a Redis chart:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于我们在[*第 3 章*](B17979_03.xhtml#_idTextAnchor083)《使用 Helm 安装你的第一个应用》中如何搜索 Artifact
    Hub 以定位 WordPress 图表，我们需要搜索一个 Redis 图表，以便将其作为依赖项使用。让我们来搜索 Redis 图表：
- en: 'Execute the following command to search for Redis charts from Artifact Hub:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下命令从 Artifact Hub 搜索 Redis 图表：
- en: '[PRE48]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'The first chart that’s displayed is Bitnami’s Redis chart. We’ll use this chart
    as our dependency. If you didn’t add the `bitnami` chart repository in [*Chapter
    3*](B17979_03.xhtml#_idTextAnchor083), *Installing Your First App with Helm*,
    add this chart repository now by using the `helm repo add` command:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示的第一个图表是 Bitnami 的 Redis 图表。我们将使用这个图表作为我们的依赖项。如果你在[*第 3 章*](B17979_03.xhtml#_idTextAnchor083)《使用
    Helm 安装你的第一个应用》中没有添加 `bitnami` 图表库，现在可以通过使用 `helm repo add` 命令添加该图表库：
- en: '[PRE49]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Next, determine the Redis chart version you would like to use. A list of version
    numbers can be found by running the following command:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，确定你希望使用的 Redis 图表版本。可以通过运行以下命令找到版本号列表：
- en: '[PRE50]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'You will see an output similar to the following:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到类似以下的输出：
- en: '![Figure 5.6 – Redis chart versions'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.6 – Redis 图表版本](image_path)'
- en: '](img/Figure_5.6_B17979.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '![图像](img/Figure_5.6_B17979.jpg)'
- en: Figure 5.6 – Redis chart versions
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.6 – Redis 图表版本
- en: For our dependency, let’s use the wildcard version `15.5.x` so that we can lock
    in the latest patch that is currently available, `15.5.1`, but also so that we
    can easily download newer patch releases as they become available in the future.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的依赖项，我们使用通配符版本 `15.5.x`，这样我们可以锁定当前可用的最新补丁 `15.5.1`，同时也能方便地在未来下载更新的补丁版本。
- en: Let’s also use the `condition` property so that Redis can be toggled to enabled
    or disabled. While our `guestbook` chart does require Redis, `condition` will
    allow a user to disable the built-in Redis option so that they can use their own
    if they desire.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们还使用 `condition` 属性，这样 Redis 就可以根据需要启用或禁用。虽然我们的 `guestbook` 图表确实需要 Redis，但
    `condition` 会让用户禁用内置的 Redis 选项，以便在需要时使用自己的 Redis。
- en: 'Update your `guestbook` chart’s `Chart.yaml` file to declare the Redis dependency.
    An updated `Chart.yaml` file is located in this book’s GitHub repository in `chapter5/guestbook/Chart.yaml`
    for reference:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新你的 `guestbook` 图表的 `Chart.yaml` 文件以声明 Redis 依赖项。更新后的 `Chart.yaml` 文件可以在本书的
    GitHub 仓库中的 `chapter5/guestbook/Chart.yaml` 找到，供参考：
- en: '[PRE51]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Your full `Chart.yaml` file should look as follows:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 你的完整 `Chart.yaml` 文件应如下所示：
- en: '[PRE52]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Now that the `Chart.yaml` file has been updated, download the Redis dependency
    by using `helm dependency update`. Now, we can deploy the `guestbook` chart to
    ensure that the dependency has been installed properly.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 更新了 `Chart.yaml` 文件后，使用 `helm dependency update` 下载 Redis 依赖项。现在，我们可以部署 `guestbook`
    图表，以确保依赖项已正确安装。
- en: 'Download the latest Redis `15.5.x` release by running `helm dependency update`:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `helm dependency update` 下载最新的 Redis `15.5.x` 版本：
- en: '[PRE53]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Install the `guestbook` chart in your minikube environment:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的 minikube 环境中安装 `guestbook` 图表：
- en: '[PRE54]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Verify that the Redis StatefulSets have been created:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证 Redis StatefulSets 是否已创建：
- en: '[PRE55]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: If you see a similar output for the StatefulSets shown here, then you have successfully
    created the Redis dependency! As you can see, by using Helm’s dependency management,
    the effort required to deploy the backend was relatively low. In the next chapter,
    we’ll continue developing the `guestbook` chart by writing templates for creating
    the frontend resources.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到类似于此处显示的 StatefulSets 输出，那么你已经成功创建了 Redis 依赖项！正如你所看到的，通过使用 Helm 的依赖管理，部署后端所需的工作量相对较低。在下一章中，我们将继续开发
    `guestbook` 图表，编写用于创建前端资源的模板。
- en: Before we wrap up, let’s clean up the minikube environment.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们结束之前，让我们清理 minikube 环境。
- en: Cleaning up
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 清理环境
- en: 'First, delete the `chapter5` namespace:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除 `chapter5` 命名空间：
- en: '[PRE56]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Now, you can shut down your minikube environment.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以关闭你的 minikube 环境。
- en: '[PRE57]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Now, let’s summarize this chapter.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们总结一下这一章。
- en: Summary
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 小结
- en: Dependencies can greatly reduce the effort required to deploy complex applications
    in Kubernetes. As we saw with our `guestbook` chart, to deploy a Redis backend,
    we only needed to add five lines of YAML to our `Chart.yaml` file. Compare this
    to the effort required to write an entirely separate Redis chart from scratch,
    which would have required both a high level of Kubernetes and Redis expertise.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖项可以大大减少在 Kubernetes 中部署复杂应用所需的工作量。正如我们在 `guestbook` 图表中所看到的，要部署一个 Redis 后端，我们只需要在
    `Chart.yaml` 文件中添加五行 YAML。相比之下，从头开始编写一个完全独立的 Redis 图表，将需要较高的 Kubernetes 和 Redis
    专业知识。
- en: Helm dependency management supports several different configurations to declare,
    as well as configure dependencies. To declare a dependency, you can specify the
    chart’s `name`, `version`, and `repository` under the `dependencies` map in the
    `Chart.yaml` file. You can allow users to toggle whether to enable or disable
    each dependency using the `condition` and `tags` properties. When incorporating
    multiple instances of the same dependency, you can use `alias` to provide each
    with a unique identifier, and when working with dependencies with complex values,
    you can use `import-values` to simplify how values are propagated from a dependency
    to a parent chart. To list and download dependencies, Helm provides a set of `helm
    dependency` subcommands that are used regularly when managing chart dependencies.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: Helm 依赖管理支持多种不同的配置来声明和配置依赖项。要声明依赖项，可以在 `Chart.yaml` 文件中的 `dependencies` 映射下指定图表的
    `name`、`version` 和 `repository`。你可以使用 `condition` 和 `tags` 属性允许用户切换启用或禁用每个依赖项。在引入相同依赖项的多个实例时，可以使用
    `alias` 为每个实例提供唯一标识符，处理具有复杂值的依赖项时，可以使用 `import-values` 简化值从依赖项传递到父图表的方式。要列出并下载依赖项，Helm
    提供了一组 `helm dependency` 子命令，这些子命令在管理图表依赖项时会经常使用。
- en: In the next chapter, we will dive deep into the next crucial topic in the world
    of Helm chart development – templates.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨Helm图表开发领域中的下一个关键主题——模板。
- en: Further reading
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: To learn more about Helm dependency management, visit the Helm documentation’s
    *Chart Dependencies* section at [https://helm.sh/docs/topics/charts/#chart-dependencies](https://helm.sh/docs/topics/charts/#chart-dependencies).
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于Helm依赖管理的信息，请访问Helm文档中的*Chart Dependencies*部分，网址为[https://helm.sh/docs/topics/charts/#chart-dependencies](https://helm.sh/docs/topics/charts/#chart-dependencies)。
- en: Questions
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'Answer the following questions to test your knowledge of this chapter:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 回答以下问题，测试您对本章的知识掌握情况：
- en: What file is used to declare chart dependencies?
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明图表依赖关系所用的文件是什么？
- en: What is the difference between the `helm dependency update` and `helm dependency
    build` commands?
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`helm dependency update`和`helm dependency build`命令之间有什么区别？'
- en: What is the difference between the `Chart.yaml` and `Chart.lock` files?
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Chart.yaml`和`Chart.lock`文件之间有什么区别？'
- en: Imagine that you want to allow users to enable or disable dependencies within
    your chart. What `dependencies` properties can you use?
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设您希望允许用户在您的图表中启用或禁用依赖项，可以使用什么`dependencies`属性？
- en: What `dependencies` properties should you use if you need to declare multiple
    invocations of the same dependency?
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您需要声明同一依赖项的多个调用，应该使用什么`dependencies`属性？
- en: If you have a dependency with complex values, which `dependencies` property
    can you use to simplify the propagated values?
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您的依赖项具有复杂值，可以使用哪个`dependencies`属性来简化传播的值？
- en: How do you override the values of a dependency?
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何覆盖依赖项的值？
- en: As a chart developer, what is the value of using a chart dependency?
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为图表开发者，使用图表依赖项有什么价值？

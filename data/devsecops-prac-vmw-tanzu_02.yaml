- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Developing Cloud-Native Applications
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发云原生应用
- en: A common problem across large enterprises is technology sprawl. When starting
    a new development endeavor, considerable day-0 cycles are wasted choosing the
    right technology and bad decisions can lead to ongoing operational headaches for
    many years.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 大型企业中常见的问题是技术的扩散。当开始一个新的开发项目时，通常会浪费大量的day-0时间来选择合适的技术，错误的决策可能会导致多年的运营问题。
- en: This chapter will first focus on **Application Accelerator for VMware Tanzu**,
    or *App Accelerator* for short, a tool that addresses the day-0 problem of standing
    up a new project. It allows developers to pull down preconfigured application
    templates that already pass muster with enterprise architecture, have all the
    corporate security opinions and safeguards built in, include all the corporate
    standard libraries, use a corporate-standard format and layout, and allow for
    the configuration of common properties (Git repos, databases, API schemas, etc.)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将首先关注**VMware Tanzu的应用加速器**，简称*App Accelerator*，这是一种解决新项目启动时day-0问题的工具。它允许开发者拉取已经预配置的应用模板，这些模板已经通过企业架构的审核，内置了所有企业的安全意见和保护措施，包含所有企业标准库，使用企业标准格式和布局，并允许配置常见属性（如Git仓库、数据库、API模式等）。
- en: 'Then, we’ll touch on a couple of development frameworks that currently make
    up a significant portion of software running in the enterprise: **Spring Boot**
    and **.NET Core** **with Steeltoe**.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，我们将介绍当前在企业中占据重要份额的几个开发框架：**Spring Boot** 和 **.NET Core** **with Steeltoe**。
- en: 'In this chapter, we’re going to cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将覆盖以下主题：
- en: The business needs addressed by *App Accelerator*
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*App Accelerator*所解决的业务需求'
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 技术要求
- en: Overview of *App Accelerator*
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*App Accelerator*概述'
- en: Getting started with *App Accelerator*
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用 *App Accelerator*
- en: Advanced topics on *App Accelerator*
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*App Accelerator*的高级主题'
- en: Day-2 operations with *App Accelerator*
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用*App Accelerator*进行day-2操作
- en: Cloud-native development frameworks under the *Tanzu* umbrella
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Tanzu*旗下的云原生开发框架'
- en: The business needs addressed by App Accelerator
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*App Accelerator*所解决的业务需求'
- en: Before we jump into the actual product installation, let’s take a moment to
    think about the life of an enterprise application developer. Let’s assume *Cody*
    is a developer in our organization.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们正式开始产品安装之前，让我们花点时间思考一下企业应用程序开发者的工作生活。假设*Cody*是我们组织中的一名开发者。
- en: 'Today, Cody has been tasked with kicking off a new service that is expected
    to generate significant revenue for the company. If we were to ask him to list
    a few of the things that could hamper his ability to deliver that service, we
    might get a list such as this:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，Cody被指派启动一项新服务，预计将为公司带来可观的收入。如果我们让他列出一些可能妨碍他交付该服务的因素，可能会得到如下列表：
- en: Finding the right application framework for the task at hand
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为当前任务找到合适的应用框架
- en: Importing the necessary libraries into that framework
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将必要的库导入到该框架中
- en: Importing all the corporate-mandated libraries
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入所有企业要求的库
- en: Resolving any version incompatibilities introduced in the previous two points
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决前两点中引入的任何版本不兼容问题
- en: Attesting that all of the corporate security standards are being adhered to
    in this project
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确认证所有企业安全标准在此项目中得到了遵守
- en: Making all the imported libraries work together
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使所有导入的库协同工作
- en: Researching and importing all the corporate coding conventions, project structure,
    documentation layout, and so on
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 研究并导入所有企业编码规范、项目结构、文档布局等
- en: Waiting for review to ensure that all the standards have been interpreted and
    implemented correctly
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等待审查，确保所有标准都已被正确理解和实施
- en: 'As a software developer, maybe you relate to some of Cody’s concerns:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名软件开发者，也许你会理解Cody的一些担忧：
- en: '![Figure 2.1 – Cody the developer](img/B18145_02_01.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.1 – 开发者Cody](img/B18145_02_01.jpg)'
- en: Figure 2.1 – Cody the developer
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.1 – 开发者Cody
- en: This is an enormous burden on Cody and even more so for a new developer onboarding
    onto a project. Much of this work must be repeated every time a new project gets
    created, it will inevitably result in configuration drift as different developers
    interpret standards differently, and it constitutes a considerable expenditure
    of time and effort before a single line of value-delivering code gets written.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这对 Cody 来说是一个巨大的负担，对新加入项目的开发者来说更是如此。大部分工作每次创建新项目时都必须重复，这必然导致配置漂移，因为不同的开发者对标准的理解不同，并且在写下第一行有价值的代码之前，这需要大量的时间和精力投入。
- en: 'Now, let’s shift our perspective to that of an enterprise architect. Let’s
    call her *Alana*. She’s tasked with optimizing the time to value for developers,
    setting the technical direction, and creating and enforcing a set of standards
    that balances consistency and security with developer productivity and satisfaction.
    She has a very similar list of hindrances that prevent her from maximizing her
    developers’ performance:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们把视角转向企业架构师的角色。我们叫她 *Alana*。她的任务是优化开发者的价值实现时间，确定技术方向，创建并执行一套平衡一致性和安全性与开发者生产力和满意度的标准。她面临着一份与
    Cody 类似的障碍清单，这些障碍阻止她最大化开发者的表现：
- en: New developers must learn about the quirks of each project before they can become
    productive
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新开发者必须了解每个项目的独特性，才能开始提高生产力
- en: The process of manually reviewing each component to ensure that all the corporate
    standards are being adhered to becomes a bottleneck
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手动检查每个组件，以确保遵守所有公司标准的过程会成为瓶颈
- en: Developers gloss over or ignore standards that they don’t understand or choose
    not to implement
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者忽略或无视他们不理解或选择不实施的标准
- en: Developers use outdated and unpatched libraries
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者使用过时且未打补丁的库
- en: Developers use unvetted and unapproved technologies and frameworks
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者使用未经审查和批准的技术和框架
- en: Job satisfaction for developers suffers due to repetitive, tedious, and error-prone
    steps in the **Software Development** **Lifecycle** (**SDLC**)
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于 **软件开发生命周期** (**SDLC**) 中的重复性、繁琐且容易出错的步骤，开发者的工作满意度下降
- en: There are few, if any, assumptions she can make about the entire portfolio such
    that it can be centrally managed
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 她几乎无法对整个组合做出任何假设，以便能够进行集中管理
- en: Attempts at cross-project concerns such as automated scanning, deployment, or
    backups are hindered by the heterogeneity of the portfolio
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨项目的问题，如自动扫描、部署或备份，因组合的异质性而受到阻碍
- en: 'If you’re focused more on the *Ops* in *DevOps*, perhaps some of Alana’s concerns
    in this visualization resonate with you:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你更关注 *Ops*（运维）方面，也许 Alana 在这个可视化中提出的一些问题会引起你的共鸣：
- en: '![Figure 2.2 – Alana, our enterprise architect](img/B18145_02_02.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.2 – 我们的企业架构师 Alana](img/B18145_02_02.jpg)'
- en: Figure 2.2 – Alana, our enterprise architect
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.2 – 我们的企业架构师 Alana
- en: Now that we know why we’re here, let’s dig into the details of App Accelerator
    and start addressing Cody’s and Alana’s pain points.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了为什么我们在这里，让我们深入探讨应用加速器的细节，并开始解决 Cody 和 Alana 的痛点。
- en: Technical requirements
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: App Accelerator is a subcomponent of **Tanzu Application Platform** (**TAP**),
    which is covered in [*Chapter 8*](B18145_08.xhtml#_idTextAnchor150), *Enhancing
    Developer Productivity with Tanzu Application Platform*. To get started with App
    Accelerator, we’ll first need to install a Kubernetes cluster and then layer TAP
    over that. You’re free to use whichever Kubernetes distribution you prefer. If
    you’d like some guidance around standing up a cluster, the appendix at the end
    of the book gives several options for getting Kubernetes up and running.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 应用加速器是 **Tanzu 应用平台** (**TAP**) 的一个子组件，详见 [*第 8 章*](B18145_08.xhtml#_idTextAnchor150)，*通过
    Tanzu 应用平台提升开发者生产力*。要开始使用应用加速器，我们首先需要安装一个 Kubernetes 集群，然后在其上安装 TAP。你可以自由选择任何你喜欢的
    Kubernetes 发行版。如果你需要关于搭建集群的指导，本书附录提供了多个启动 Kubernetes 的选项。
- en: Once you have a running Kubernetes cluster, you’ll need to jump briefly to [*Chapter
    8*](B18145_08.xhtml#_idTextAnchor150), *Enhancing Developer Productivity with
    Tanzu Application Platform*, where we walk through the installation of TAP. That
    chapter walks through a more complex end-to-end use case, while this chapter focuses
    solely on the Application Accelerator component.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你有了一个运行中的 Kubernetes 集群，你需要稍微跳转到 [*第 8 章*](B18145_08.xhtml#_idTextAnchor150)，*通过
    Tanzu 应用平台提升开发者生产力*，在那里我们会介绍 TAP 的安装。那一章讲解了一个更复杂的端到端用例，而本章仅关注应用加速器组件。
- en: Depending on your Kubernetes cluster, your TAP GUI may be at a local address
    such as `http://localhost:8081`, or possibly at an ingress domain you set up such
    as `http://tap-gui.example.com`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的 Kubernetes 集群，TAP GUI 可能位于本地地址，如 `http://localhost:8081`，或者可能是你设置的入口域名，如
    `http://tap-gui.example.com`。
- en: 'When you open a browser to the TAP GUI, you should see something similar to
    this screenshot:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当你打开浏览器访问 TAP GUI 时，你应该会看到类似于以下截图的界面：
- en: '![Figure 2.3 – Screenshot of the Tanzu Application Platform GUI](img/B18145_02_03.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.3 – Tanzu 应用平台 GUI 截图](img/B18145_02_03.jpg)'
- en: Figure 2.3 – Screenshot of the Tanzu Application Platform GUI
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.3 – Tanzu 应用平台 GUI 截图
- en: 'When you click on the **Create** link in the left-hand menu bar, you’ll see
    the default application accelerators that ship with the TAP GUI:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击左侧菜单栏中的 **Create** 链接时，你将看到默认的应用加速器，这些加速器随 TAP GUI 一起提供：
- en: '![Figure 2.4 – Screenshot of the empty Create section](img/B18145_02_04.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.4 – 空的创建部分截图](img/B18145_02_04.jpg)'
- en: Figure 2.4 – Screenshot of the empty Create section
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.4 – 空的创建部分截图
- en: Congratulations! If you’ve made it this far, you are ready to start using App
    Accelerator!
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！如果你已经看到这里，你已经准备好开始使用 App Accelerator 了！
- en: Overview of App Accelerator
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: App Accelerator 概述
- en: App Accelerator is a tool that Alana uses to provide Cody and his peers with
    a vetted, approved, preconfigured jumping-off point in their language or framework
    of choice. With App Accelerator, Alana can handle repetitive, low-value tasks
    such as choosing a technology and ensuring its interoperability and compatibility
    with other apps and enterprise standards. This frees up Cody and his developer
    peers to deliver business value with great software.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: App Accelerator 是 Alana 用来为 Cody 和他的同事们提供经过验证、批准、预配置的起点工具，支持他们选择自己喜欢的语言或框架。通过
    App Accelerator，Alana 可以处理一些重复性、低价值的任务，如选择技术并确保其与其他应用程序和企业标准的互操作性和兼容性。这让 Cody
    和他的开发同事可以将精力集中在交付具有业务价值的软件上。
- en: 'App Accelerator consists of several APIs and interfaces geared specifically
    to either Alana the architect’s or Cody the coder’s persona:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: App Accelerator 由多个 API 和接口组成，特别针对 Alana（架构师）或 Cody（开发者）这两种角色：
- en: '![Figure 2.5 – App Accelerator architecture](img/B18145_02_05.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.5 – App Accelerator 架构](img/B18145_02_05.jpg)'
- en: Figure 2.5 – App Accelerator architecture
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.5 – App Accelerator 架构
- en: 'Alana starts with a Git repo containing the skeleton of a project. In addition
    to boilerplate code, pre-approved libraries, and standardized documentation and
    testing structure, this project contains a special YAML file called, by convention,
    `accelerator.yaml`. This file contains the details of how consumers of the template
    application (called an *accelerator*) can customize the app template. Running
    inside Alana and Cody’s Kubernetes cluster is a controller for a `accelerator.apps.tanzu.vmware.com/v1alpha1`.
    Alana deploys an instance of the `accelerator` custom resource, and the controller
    becomes aware of Alana’s Git repo, making it available to Cody:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Alana 从一个包含项目骨架的 Git 仓库开始。除了模板代码、预批准的库、以及标准化的文档和测试结构外，项目中还包含一个特别的 YAML 文件，按约定命名为
    `accelerator.yaml`。这个文件包含了如何让模板应用的消费者（即 *accelerator*）自定义应用模板的细节。Alana 和 Cody
    的 Kubernetes 集群中运行着一个 `accelerator.apps.tanzu.vmware.com/v1alpha1` 的控制器。Alana
    部署了一个 `accelerator` 自定义资源的实例，控制器便知道了 Alana 的 Git 仓库，并使其对 Cody 可用：
- en: '![Figure 2.6 – Accelerator CRDs](img/B18145_02_06.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.6 – Accelerator CRDs](img/B18145_02_06.jpg)'
- en: Figure 2.6 – Accelerator CRDs
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.6 – Accelerator CRDs
- en: App Accelerator presents a different view to Cody. He opens up a UI containing
    details of all of the accelerators available to him. Alana has provided a wide
    array of languages and frameworks to give developers the flexibility to use the
    right tool for the job without having to reinvent the wheel with regard to choosing
    libraries, ensuring compatibility, and navigating the maze of corporate governance.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: App Accelerator 向 Cody 展示了不同的视图。他打开了一个 UI，显示了所有可用的 accelerator 详情。Alana 提供了多种语言和框架，给开发者提供灵活性，可以根据需要使用合适的工具，而无需在选择库、确保兼容性和应对公司治理方面重新发明轮子。
- en: Cody can search by tags and preview the contents of the various accelerators.
    Many accelerators will prompt Cody for certain inputs and customize the project
    accordingly. This is done via the **Template Engine** component in the preceding
    architectural diagram. App Accelerator provides a rich set of transformations
    so that a small piece of input from Cody, *what sort of database do you want to
    use?*, for example, can result in complex configuration options and libraries
    being preconfigured. The idea is to abstract as much complexity as possible away
    from the developer to maximize reuse and developer productivity.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Cody 可以通过标签搜索并预览各种加速器的内容。许多加速器会提示 Cody 输入某些信息，并根据输入定制项目。这是通过前述架构图中的**模板引擎**组件完成的。应用加速器提供了一套丰富的转换机制，使得像*你想使用哪种数据库？*这样的简单输入，能够生成复杂的配置选项和预先配置的库。其理念是尽可能将复杂性抽象化，以最大化重用性和开发者生产力。
- en: Now that we understand how App Accelerator works, let’s get started with our
    own installation.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经理解了应用加速器的工作原理，接下来让我们开始安装自己的应用加速器。
- en: Getting started with App Accelerator
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用应用加速器
- en: If you worked through the Technical Requirements section at the beginning of
    this chapter, you should have a running instance of Tanzu Application Platform
    and you're ready to begin exploring App Accelerator.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在本章开始时完成了技术要求部分的工作，你应该已经有了一个运行中的 Tanzu 应用平台实例，并准备开始探索应用加速器。
- en: Exploring App Accelerator
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索应用加速器
- en: 'When we installed App Accelerator, we got a set of out-of-the-box accelerators
    that enable developers to hit the ground running with enterprise-ready application
    templates, like the ones shown as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们安装应用加速器时，我们得到了一个开箱即用的加速器集合，帮助开发者快速启动企业级应用模板，如下所示：
- en: "![Figure 2.7 – Application \uFEFFaccelerators installed](img/B18145_02_07.jpg)"
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.7 – 已安装的应用加速器](img/B18145_02_07.jpg)'
- en: Figure 2.7 – Application accelerators installed
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.7 – 已安装的应用加速器
- en: You can click on the **CHOOSE** button for any of these accelerators and you’ll
    navigate to a page where you can supply any of the required parameters, as well
    as explore the project template and preview its files. Once you’ve chosen the
    accelerator that meets your needs, you can fill in the required parameters and
    click on **Next Step** and **Create**. At that point, you’ll be able to download
    a ZIP file containing the beginnings of your next great app with all your company’s
    conventions and best practices baked in!
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以点击这些加速器中的**选择**按钮，跳转到一个页面，在那里你可以提供所需的任何参数，并探索项目模板和预览其文件。一旦选择了符合需求的加速器，你可以填写所需的参数，点击**下一步**和**创建**。此时，你将能够下载一个包含你下一个伟大应用初步框架的
    ZIP 文件，其中集成了你公司的一切规范和最佳实践！
- en: Downloading, configuring, and running App Accelerator
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载、配置和运行应用加速器
- en: From the TAP GUI’s `hello-fun-tanzu-devsecops` and make sure **Kubernetes deployment
    and service** is selected under **deploymentType**. Then, we click **Next Step**
    | **Create** | **Download Zip File**. This will download a ZIP file that you can
    unzip, run locally, and deploy to your Kubernetes cluster.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 从 TAP GUI 中的 `hello-fun-tanzu-devsecops` 开始，并确保在 **deploymentType** 下选择了**Kubernetes
    部署和服务**。然后，我们点击**下一步** | **创建** | **下载 ZIP 文件**。这将下载一个 ZIP 文件，你可以解压、在本地运行并部署到你的
    Kubernetes 集群中。
- en: Use your favorite zip tool to unzip the archive and then open the project in
    your favorite IDE. From there, you can follow the instructions in `README.md`
    to run the app locally and deploy it to Kubernetes.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 使用你喜欢的压缩工具解压缩档案，然后在你喜欢的 IDE 中打开项目。从这里，你可以按照 `README.md` 中的说明在本地运行应用并将其部署到 Kubernetes。
- en: Once you are comfortable downloading, configuring, and running the accelerator,
    you’re ready to move to some more advanced tasks and topics.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你熟悉了下载、配置和运行加速器，你就可以开始更高级的任务和话题了。
- en: Advanced topics on App Accelerator
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用加速器的高级话题
- en: Let’s say you’re one of the aforementioned enterprise architects or security
    engineers who wants to delight your developer colleagues with a panoply of choices
    from the latest and greatest technologies while baking in all your hard-learned
    lessons around tech longevity, best practices, and security. How would you go
    about creating your own app accelerator? Let’s do that next. Let’s implement a
    custom app accelerator.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你是前面提到的企业架构师或安全工程师，想要通过最新最优秀的技术为开发者同事们提供多种选择，同时在其中融入你所有关于技术持久性、最佳实践和安全性方面的辛勤经验。你将如何创建自己的应用加速器？接下来我们就来实现一个自定义的应用加速器。
- en: Let’s start by logging into GitHub and forking this book’s GitHub project. Visit
    [https://github.com/PacktPublishing/DevSecOps-in-Practice-with-VMware-Tanzu](https://github.com/PacktPublishing/DevSecOps-in-Practice-with-VMware-Tanzu)
    and click `https://github.com/<your-username>/DevSecOps-in-Practice-with-VMware-Tanzu/tree/main/chapter-02/openapi-accelerator`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先登录GitHub并fork这本书的GitHub项目。访问[https://github.com/PacktPublishing/DevSecOps-in-Practice-with-VMware-Tanzu](https://github.com/PacktPublishing/DevSecOps-in-Practice-with-VMware-Tanzu)，然后点击`https://github.com/<your-username>/DevSecOps-in-Practice-with-VMware-Tanzu/tree/main/chapter-02/openapi-accelerator`。
- en: This accelerator takes as input an OpenAPI 3.0 specification. It then outputs
    a project capable of building an entire API skeleton around that specification
    and a SwaggerUI frontend to test it out with. How’s that for best practices?
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这个加速器接受一个OpenAPI 3.0规范作为输入。然后它会输出一个能够围绕该规范构建整个API框架的项目，并且有一个SwaggerUI前端供你测试。这样的做法算不算最佳实践？
- en: 'Once you’ve forked the accelerator project, let’s tell the controller running
    in Kubernetes that we have another app accelerator that we’d like to make available.
    Let’s clone the accelerator locally:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你fork了加速器项目，我们需要告诉在Kubernetes中运行的控制器，我们有另一个应用加速器，希望使其可用。让我们将加速器克隆到本地：
- en: '[PRE0]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, navigate to the project and open the `chapter-02/openapi-accelerator/accelerator-k8s-resource.yaml`
    file in a text editor. Modify the `spec.git.url` (highlighted) property to point
    to your fork of the project, as shown in the following screenshot:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，导航到项目并在文本编辑器中打开`chapter-02/openapi-accelerator/accelerator-k8s-resource.yaml`文件。修改`spec.git.url`（高亮部分）属性，使其指向你fork的项目，如下截图所示：
- en: '![Figure 2.8 – accelerator-k8s-resource.yaml (point it to your fork of the
    Git repo)](img/B18145_02_08.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图2.8 – accelerator-k8s-resource.yaml（将其指向你fork的Git仓库）](img/B18145_02_08.jpg)'
- en: Figure 2.8 – accelerator-k8s-resource.yaml (point it to your fork of the Git
    repo)
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.8 – accelerator-k8s-resource.yaml（将其指向你fork的Git仓库）
- en: 'Then, you can tell the App Accelerator controller about your new accelerator
    by applying `accelerator-k8s-resource.yaml`:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以通过应用`accelerator-k8s-resource.yaml`，告诉App Accelerator控制器你新增的加速器：
- en: '[PRE1]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, you should be able to return to the TAP GUI’s **Create** page, refresh
    it, and see your OpenAPI 3.0 Spring Boot accelerator ready to go:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该能够返回到TAP GUI的**创建**页面，刷新页面，看到你的OpenAPI 3.0 Spring Boot加速器已经准备就绪：
- en: '![Figure 2.9 – Custom OpenAPI 3.0 Spring Boot accelerator in the TAP GUI](img/B18145_02_09.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图2.9 – 自定义OpenAPI 3.0 Spring Boot加速器在TAP GUI中](img/B18145_02_09.jpg)'
- en: Figure 2.9 – Custom OpenAPI 3.0 Spring Boot accelerator in the TAP GUI
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.9 – 自定义OpenAPI 3.0 Spring Boot加速器在TAP GUI中
- en: 'From here, you could use the accelerator to generate a Spring Boot project
    customized with your own OpenApi 3.0 specification:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，你可以使用加速器生成一个Spring Boot项目，定制化你的OpenApi 3.0规范：
- en: Click on the accelerator’s **CHOOSE** button.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击加速器的**选择**按钮。
- en: Give it a clever name.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给它起个聪明的名字。
- en: 'Use the default (provided) *OpenApi spec* or paste in one of your own. There’s
    a good one here: [https://raw.githubusercontent.com/PacktPublishing/DevSecOps-in-Practice-with-VMware-Tanzu/main/chapter-02/petstore.yaml](https://raw.githubusercontent.com/PacktPublishing/DevSecOps-in-Practice-with-VMware-Tanzu/main/chapter-02/petstore.yaml):'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用默认的（提供的）*OpenApi规范*，或者粘贴你自己的一个。这里有一个不错的：[https://raw.githubusercontent.com/PacktPublishing/DevSecOps-in-Practice-with-VMware-Tanzu/main/chapter-02/petstore.yaml](https://raw.githubusercontent.com/PacktPublishing/DevSecOps-in-Practice-with-VMware-Tanzu/main/chapter-02/petstore.yaml)：
- en: '![Figure 2.10 – Exploring our accelerator after plugging in a custom API spec](img/B18145_02_10.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图2.10 – 插入自定义API规范后探索我们的加速器](img/B18145_02_10.jpg)'
- en: Figure 2.10 – Exploring our accelerator after plugging in a custom API spec
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.10 – 插入自定义API规范后探索我们的加速器
- en: Click **Next Step**, **Create**, and **Download** **Zip File**.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**、**创建**，然后**下载** **Zip文件**。
- en: Unzip the project and navigate to that directory.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解压项目并进入该目录。
- en: 'Build the Spring Boot project and run the app:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建Spring Boot项目并运行应用程序：
- en: '[PRE2]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Point your browser to `http://localhost:8080`:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中访问`http://localhost:8080`：
- en: '![Figure 2.11 – Our custom OpenAPI 3.0 API in Swagger UI](img/B18145_02_11.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图2.11 – 我们的自定义OpenAPI 3.0 API在Swagger UI中](img/B18145_02_11.jpg)'
- en: Figure 2.11 – Our custom OpenAPI 3.0 API in Swagger UI
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.11 – 我们的自定义OpenAPI 3.0 API在Swagger UI中
- en: And voila! With a simple download, we have a fully functional REST API and Swagger
    UI ready for us to start implementing business logic. We can start delivering
    value immediately because all our corporate governance, libraries, and opinions
    are conveniently baked into the project from its inception.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！通过简单的下载，我们已经拥有了一个功能完备的 REST API 和 Swagger UI，准备好开始实现业务逻辑。我们可以立即开始交付价值，因为所有的企业治理、库和约定都从项目一开始就已经方便地集成进来了。
- en: Congratulations! If you’ve made it this far, you’ve put pre-vetted, pre-audited,
    secure software frameworks in front of your developers, allowing them to skip
    over the tedious administrative work and get right down to delivering real value
    with their software.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！如果你已经完成了这些步骤，你已经为你的开发人员提供了经过预审核、预验证的安全软件框架，允许他们跳过繁琐的行政工作，直接开始用软件交付真正的价值。
- en: However, the software is always changing and a software framework that was last
    week’s up-to-date, rock-solid building block is this week’s **Critical Vulnerability
    and** **Exposure** (**CVE**).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，软件始终在变化，一个上周最新、稳固的软件框架，本周可能已经变成了**关键漏洞**和**暴露**（**CVE**）。
- en: Let’s move on to some day-2 operations now and look at how we keep our app accelerators
    patched and up to date.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们继续进行 Day-2 操作，看看如何保持我们的应用加速器更新和修补。
- en: Day-2 operations with App Accelerator
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Day-2 操作与应用加速器
- en: In software development, getting something deployed into production is often
    the easy part. Keeping that software up to date and patched with minimal user
    disruption is where most of your time will be spent. App Accelerator was designed
    with day 2 in mind.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件开发中，将某个东西部署到生产环境通常是简单的部分。保持软件更新并进行修补，且尽量减少对用户的干扰，才是你大部分时间的工作内容。应用加速器是专为 Day
    2 操作而设计的。
- en: As it turns out, the component versions in our OpenAPI application accelerator
    have already gone out of date. Let’s quickly update and patch our accelerator.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 结果表明，我们的 OpenAPI 应用加速器中的组件版本已经过时了。让我们快速更新并修补我们的加速器。
- en: 'First, let’s find our local copy of the `openapi-accelerator` project. Open
    `build.gradle` in your favorite editor. Notice the `org.springframework.boot`
    and `org.openapi.generator` dependencies are not the most recent and could therefore
    contain bugs or even known vulnerabilities. Notice that `org.springframework.boot`
    is at `2.5.6` and `org.openapi.generator` is at `5.2.1`:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们找到本地的 `openapi-accelerator` 项目副本。在你喜欢的编辑器中打开 `build.gradle`。注意到 `org.springframework.boot`
    和 `org.openapi.generator` 的依赖版本不是最新的，因此可能包含 bug 或者已知漏洞。注意 `org.springframework.boot`
    的版本为 `2.5.6`，而 `org.openapi.generator` 的版本为 `5.2.1`：
- en: '![Figure 2.12 – Our build.gradle file with out-of-date versions of Spring Boot
    and OpenAPI Generator](img/B18145_02_12.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.12 – 我们的 build.gradle 文件，其中的 Spring Boot 和 OpenAPI Generator 版本过时](img/B18145_02_12.jpg)'
- en: Figure 2.12 – Our build.gradle file with out-of-date versions of Spring Boot
    and OpenAPI Generator
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.12 – 我们的 build.gradle 文件，其中的 Spring Boot 和 OpenAPI Generator 版本过时
- en: 'First, let’s visit [https://start.spring.io](https://start.spring.io) to find
    out what the latest release version of Spring Boot is. At the time of writing,
    it’s 2.6.2:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们访问 [https://start.spring.io](https://start.spring.io) 以查看最新的 Spring Boot
    版本。在撰写时，它是 2.6.2：
- en: '![Figure 2.13 – Latest Spring Boot version from start.spring.io](img/B18145_02_13.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.13 – 从 start.spring.io 获取的最新 Spring Boot 版本](img/B18145_02_13.jpg)'
- en: Figure 2.13 – Latest Spring Boot version from start.spring.io
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.13 – 从 start.spring.io 获取的最新 Spring Boot 版本
- en: 'We can also grab the latest version of the `openapi` plugin from [https://plugins.gradle.org/plugin/org.openapi.generator](https://plugins.gradle.org/plugin/org.openapi.generator).
    As you can see in the following screenshot, it’s **5.3.1** at the time of writing:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以从 [https://plugins.gradle.org/plugin/org.openapi.generator](https://plugins.gradle.org/plugin/org.openapi.generator)
    获取最新版本的 `openapi` 插件。如下面的截图所示，撰写时其版本为 **5.3.1**：
- en: '![Figure 2.14 – The latest release version of the org.openapi.generator plugin
    (5.3.1)](img/B18145_02_14.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.14 – org.openapi.generator 插件的最新发布版本（5.3.1）](img/B18145_02_14.jpg)'
- en: Figure 2.14 – The latest release version of the org.openapi.generator plugin
    (5.3.1)
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.14 – org.openapi.generator 插件的最新发布版本（5.3.1）
- en: 'Now that we have our up-to-date version numbers, let’s update our `build.grade`
    file:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经获得了最新的版本号，让我们更新 `build.gradle` 文件：
- en: '![Figure 2.15 – Updating the plugins block in build.gradle with the latest
    versions](img/B18145_02_15.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.15 – 在 build.gradle 中更新插件块以使用最新版本](img/B18145_02_15.jpg)'
- en: Figure 2.15 – Updating the plugins block in build.gradle with the latest versions
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.15 – 在 build.gradle 中更新插件块以使用最新版本
- en: Then, we simply *git-push* our updated accelerator and after a few minutes,
    we can explore it in the UI and see our updated dependencies. Anyone who uses
    this accelerator in the future will get the latest versions of the `openapi` plugin
    and Spring Boot.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们只需*git-push*更新后的加速器，几分钟后，我们可以在UI中查看并看到更新后的依赖关系。未来任何使用该加速器的人都将获得最新版本的`openapi`插件和Spring
    Boot。
- en: Now, it’s time to switch gears. App Accelerator can help you get off to a great
    start in any number of popular development frameworks, but what are those frameworks?
    Are some better suited than others for the enterprise? The next section will cover
    two development frameworks especially well-suited to enterprise applications.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候换个方向了。App Accelerator可以帮助你在许多流行的开发框架中获得一个良好的开端，那么这些框架是什么呢？哪些框架更适合企业应用呢？下一节将介绍两种特别适合企业应用的开发框架。
- en: Cloud-native development frameworks under the Tanzu umbrella
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Tanzu旗下的云原生开发框架
- en: As mentioned in previous sections and chapters, the Tanzu portfolio didn’t materialize
    out of thin air. Rather, it is the thoughtful natural expression of many years
    of work and has helped some of the world’s largest and most notable companies
    cultivate their software competency. One outcome of that experience is learning
    which development frameworks maximize developer productivity while minimizing
    toil, tedium, and bad practice.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如前几节和章节所提到的，Tanzu产品组合并不是凭空出现的。它是多年来工作中深思熟虑的自然表达，帮助了世界上一些最大、最著名的公司培养其软件能力。这段经验的一个成果是学会了哪些开发框架能够最大化开发者的生产力，同时减少繁琐、单调和不良实践。
- en: At this point, we’ve successfully deployed, updated, downloaded, and implemented
    a simple API based on an application accelerator. Our example used Spring Boot.
    How did we arrive at Spring Boot as the underlying application framework for our
    API?
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经成功地部署、更新、下载并实现了一个基于应用程序加速器的简单API。我们的示例使用了Spring Boot。我们是如何选择Spring
    Boot作为API底层应用框架的呢？
- en: The Spring Framework and Spring Boot
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Spring框架和Spring Boot
- en: The framework of choice for many of the most successful Tanzu customers has
    been the Spring Framework. This is proven by the millions of applications started
    with Spring Initializr at [https://start.spring.io](https://start.spring.io),
    and enterprise surveys such as the Snyk JVM Ecosystem Report 2020 showing fully
    60% of the enterprise running Spring Boot ([https://snyk.io/blog/spring-dominates-the-java-ecosystem-with-60-using-it-for-their-main-applications/](https://snyk.io/blog/spring-dominates-the-java-ecosystem-with-60-using-it-for-their-main-applications/)).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 许多成功的Tanzu客户选择的框架是Spring框架。这一点得到了Spring Initializr在[https://start.spring.io](https://start.spring.io)启动的数百万个应用程序的验证，以及像Snyk
    JVM Ecosystem Report 2020这样的企业调查，报告显示60%的企业正在使用Spring Boot（[https://snyk.io/blog/spring-dominates-the-java-ecosystem-with-60-using-it-for-their-main-applications/](https://snyk.io/blog/spring-dominates-the-java-ecosystem-with-60-using-it-for-their-main-applications/)）。
- en: 'Here’s a screenshot showing some of the things Spring gives you right out of
    the box:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一张截图，展示了Spring直接提供的一些功能：
- en: '![Figure 2.16 – What Spring can do (spring.io)](img/B18145_02_16.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图2.16 – Spring能做什么（spring.io）](img/B18145_02_16.jpg)'
- en: Figure 2.16 – What Spring can do (spring.io)
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.16 – Spring能做什么（spring.io）
- en: 'The Spring Framework is very flexible in how it can be deployed. Spring Boot
    is an opinionated way to run Spring Framework applications so that they are self-contained
    and *just run*. Spring Boot gives a Spring Framework developer some very useful
    tools to run self-contained applications so that they’re ideal for microservices.
    It also builds in sensible defaults and opinions that work for the most common
    scenarios. Spring Boot gives you the following:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: Spring框架在部署方式上非常灵活。Spring Boot是一种运行Spring框架应用程序的有偏见的方式，使得它们能够自包含并*直接运行*。Spring
    Boot为Spring框架开发者提供了一些非常有用的工具，以便运行自包含的应用程序，使其非常适合微服务。它还内置了合理的默认设置和适用于最常见场景的建议。Spring
    Boot为你提供了以下功能：
- en: Several best-of-breed web frameworks to choose from
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可供选择的几个最佳Web框架
- en: Standalone runnable applications, perfect for containers and Kubernetes
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 独立可运行的应用程序，完美适合容器和Kubernetes
- en: Opinionated *starters* for common use cases
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于常见用例的有偏见的*起步器*
- en: Autoconfiguration of all libraries wherever it’s possible
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在可能的情况下，自动配置所有库
- en: Real-world production features such as metrics and Kubernetes health checks
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现实生产中的功能，如度量和Kubernetes健康检查
- en: 'There are entire books written about the Spring Framework and Spring Boot,
    so we can’t do it justice in this chapter. Instead, I’ll give you some links for
    further exploration:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Spring框架和Spring Boot有整本书籍，所以我们无法在这一章中详尽讨论。相反，我会提供一些链接，供你进一步探索：
- en: 'Mark Heckler’s *Spring Boot: Up and* *Running*: [https://www.oreilly.com/library/view/spring-boot-up/9781492076971/](https://www.oreilly.com/library/view/spring-boot-up/9781492076971/)'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Mark Heckler的*Spring Boot: Up and* *Running*：[https://www.oreilly.com/library/view/spring-boot-up/9781492076971/](https://www.oreilly.com/library/view/spring-boot-up/9781492076971/)'
- en: 'Spring developer quickstarts: [https://spring.io/quickstart](https://spring.io/quickstart)'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring开发者快速入门：[https://spring.io/quickstart](https://spring.io/quickstart)
- en: 'Spring guides and tutorials: [https://spring.io/guides](https://spring.io/guides)'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring指南和教程：[https://spring.io/guides](https://spring.io/guides)
- en: 'Josh Long’s *A Bootiful* *Podcast*: [https://soundcloud.com/a-bootiful-podcast](https://soundcloud.com/a-bootiful-podcast)'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Josh Long的*一场美丽的* *播客*：[https://soundcloud.com/a-bootiful-podcast](https://soundcloud.com/a-bootiful-podcast)
- en: 'SpringDeveloper YouTube channel: [https://www.youtube.com/user/SpringSourceDev](https://www.youtube.com/user/SpringSourceDev)'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SpringDeveloper YouTube频道：[https://www.youtube.com/user/SpringSourceDev](https://www.youtube.com/user/SpringSourceDev)
- en: 'Perhaps you’re asking yourself, *what does the open source Spring Framework
    have to do with Tanzu?* Excellent question! Among other things, many products
    in the Tanzu portfolio are enterprise versions of open source Spring projects.
    They include the following:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 或许你在想，*开源的Spring框架与Tanzu有什么关系？* 很好的问题！其中，Tanzu产品组合中的许多产品是开源Spring项目的企业版。它们包括以下内容：
- en: Spring Cloud Gateway ([https://spring.io/projects/spring-cloud-gateway](https://spring.io/projects/spring-cloud-gateway))
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Cloud Gateway ([https://spring.io/projects/spring-cloud-gateway](https://spring.io/projects/spring-cloud-gateway))
- en: Spring Cloud Data Flow ([https://spring.io/projects/spring-cloud-dataflow](https://spring.io/projects/spring-cloud-dataflow))
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Cloud Data Flow ([https://spring.io/projects/spring-cloud-dataflow](https://spring.io/projects/spring-cloud-dataflow))
- en: Spring Cloud ([https://spring.io/projects/spring-cloud](https://spring.io/projects/spring-cloud))
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Cloud ([https://spring.io/projects/spring-cloud](https://spring.io/projects/spring-cloud))
- en: There are also partnerships with cloud providers to bring an end-to-end, vertically
    integrated Spring platform such as Azure Spring Cloud ([https://tanzu.vmware.com/azure-spring-cloud](https://tanzu.vmware.com/azure-spring-cloud)).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 还与云服务提供商合作，推出了端到端、垂直集成的Spring平台，例如Azure Spring Cloud ([https://tanzu.vmware.com/azure-spring-cloud](https://tanzu.vmware.com/azure-spring-cloud))。
- en: As amazing and rich as the Spring Framework is, it is geared toward Java developers.
    What if you’re a developer with a background in the Microsoft technology stack?
    We’ll discuss that next.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Spring框架极为强大且内容丰富，但它主要面向Java开发者。如果你是一个拥有Microsoft技术栈背景的开发者呢？我们接下来会讨论这个问题。
- en: Steeltoe framework
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Steeltoe框架
- en: 'Of course, not every enterprise software shop has career Java developers. Many
    millions of lines of code currently running the modern world are written on the
    Microsoft .NET stack. *Steeltoe* is a set of libraries, very much in the spirit
    of Spring Boot, that allow .NET developers to deliver cloud-native microservice
    applications reliably and efficiently. If you have an interest in maximizing the
    productivity of developers delivering enterprise software on .NET, I’d highly
    recommend you try it out:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，并不是每个企业软件公司都有职业Java开发者。目前支撑现代世界运行的数百万行代码是用Microsoft .NET技术栈编写的。*Steeltoe*是一套非常符合Spring
    Boot精神的库，它允许.NET开发者可靠且高效地交付云原生微服务应用。如果你有兴趣最大化在.NET上交付企业软件的开发者的生产力，我强烈建议你试试它：
- en: '[https://old.dotnetfoundation.org/projects/steeltoe](https://old.dotnetfoundation.org/projects/steeltoe)'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://old.dotnetfoundation.org/projects/steeltoe](https://old.dotnetfoundation.org/projects/steeltoe)'
- en: And there you have it! With Spring and Project Steeltoe, we’ve covered application
    frameworks and toolsets that will appeal to the vast majority of enterprise developers,
    making them more productive, less prone to technical debt and bad decision-making,
    and most importantly, happier with their job, delivering economic value with software.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！通过Spring和Steeltoe项目，我们涵盖了将吸引绝大多数企业开发者的应用框架和工具集，使他们更高效、更少受到技术债务和错误决策的影响，最重要的是，他们对工作更有满足感，能够通过软件交付经济价值。
- en: Summary
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In the ongoing quest to maximize our productivity as developers or to maximize
    our teams’ productivity as tech leaders or architects, we need to get *day 0*
    exactly right. Bad decisions or development mistakes made on day 0 will continue
    to bear their bitter, rotten fruit year after year.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在持续追求最大化开发者生产力，或者作为技术领导者或架构师最大化团队生产力的过程中，我们需要确保第 0 天做对每一件事。在第 0 天做出的错误决策或开发失误，将会在多年后继续带来痛苦的后果。
- en: The best way to avoid these costly day-0 mistakes is to begin from a starting
    point that we know has been successful in the past and use it as a jumping-off
    point for future development. Application Accelerator for VMware Tanzu, Spring
    Boot, and the Steeltoe framework provide a simple, repeatable baseline for codifying
    these starting points and making teams successful from the outset.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 避免这些代价高昂的第 0 天错误的最佳方法是从我们知道过去已经成功的起点开始，并以此作为未来开发的跳板。VMware Tanzu 的应用加速器、Spring
    Boot 和 Steeltoe 框架为这些起点提供了简单、可重复的基准，使团队从一开始就能够取得成功。
- en: Furthermore, production-grade, enterprise-ready development frameworks don’t
    appear overnight. Frameworks such as Spring and .NET + Steeltoe are battle-hardened
    based on decades of lessons learned. The best app accelerators use the best underlying
    frameworks and they’re all part of the Tanzu portfolio.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，生产级的企业级开发框架并不是一夜之间就能出现的。像 Spring 和 .NET + Steeltoe 这样的框架，经过数十年的经验积累，已经变得成熟稳健。最好的应用加速器使用最优秀的基础框架，而它们都是
    Tanzu 产品组合的一部分。
- en: Having worked through this chapter, you now have the skills to deploy and consume
    application accelerators that allow you to get day 0 exactly right – and furthermore,
    you’re off to a great start with industry-standard application frameworks.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章的学习，你现在已经掌握了部署和使用应用加速器的技能，这些加速器可以帮助你确保第 0 天做对每一件事——而且，你已经借助行业标准的应用框架迈出了成功的第一步。
- en: Now that you’ve solved the problem of getting out of the gate with a great application,
    let’s learn about getting that application into a format that will run on a container
    platform such as Kubernetes next. Just as day-0 project inception is fraught with
    hazards, creating lean, secure, and repeatable container images presents another
    class of problems. Those problems are exactly what we’ll cover in the next chapter
    when we discuss *Tanzu* *Build Service.*
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经解决了通过一个出色的应用程序顺利启动的问题，那么接下来让我们来了解如何将这个应用程序转化为能够在像 Kubernetes 这样的容器平台上运行的格式。就像项目初期的第
    0 天充满了风险一样，创建精简、安全和可重复的容器镜像也会带来一系列问题。这些问题正是我们将在下一章讨论的内容，主题是 *Tanzu* *Build Service*。

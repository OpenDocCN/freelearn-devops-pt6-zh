- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Service Mesh Observability
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务网格可观测性
- en: Distributed systems built using microservice architecture are complex and unpredictable.
    Irrespective of how diligent you have been in writing code, failures, meltdowns,
    memory leaks, and so on are highly likely to happen. The best strategy to handle
    such an incident is to proactively observe systems to identify any failures or
    situations that might lead to failures or any other adverse behavior.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 使用微服务架构构建的分布式系统复杂且不可预测。无论你在编写代码时多么细心，失败、崩溃、内存泄漏等问题都是很可能发生的。应对此类事件的最佳策略是主动观察系统，以识别任何故障或可能导致故障的情况，或其他任何不利的行为。
- en: 'Observing systems help you understand system behavior and the underlying causes
    behind faults so that you can confidently troubleshoot issues and analyze the
    effects of potential fixes. In this chapter, you will read about why observability
    is important, how to collect telemetry information from Istio, the different types
    of metrics available and how to fetch them via APIs, and how to enable distributed
    tracing. We will do so by discussing the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 观察系统可以帮助你了解系统行为以及故障背后的根本原因，从而使你能够自信地排除问题并分析潜在修复的效果。在本章中，你将阅读为什么可观测性很重要，如何从 Istio
    收集遥测信息，不同类型的指标以及如何通过 API 获取它们，以及如何启用分布式追踪。我们将通过讨论以下主题来进行：
- en: Understanding observability
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解可观测性
- en: Metric scraping using Prometheus
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Prometheus 抓取指标
- en: Customizing Istio metrics
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义 Istio 指标
- en: Visualizing telemetry using Grafana
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Grafana 可视化遥测数据
- en: Implementing distributed tracing
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现分布式追踪
- en: Without further delay, let’s start with understanding observability.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 不再耽搁，让我们从理解可观测性开始。
- en: Important note
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The technical prerequisites for this chapter are the same as the previous chapters.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的技术前提与前几章相同。
- en: Understanding observability
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解可观测性
- en: The concept of **observability** was originally introduced as part of **control
    theory**, which deals with the control of self-regulated dynamic systems. Control
    theory is an abstract concept and has interdisciplinary applications; it basically
    provides a model governing the application of system inputs to drive a system
    to a desired state while maximizing its stability and performance.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**可观测性**的概念最初作为**控制理论**的一部分提出，控制理论处理的是自我调节动态系统的控制。控制理论是一个抽象的概念，具有跨学科的应用；它基本上提供了一个模型，指导系统输入的应用，以将系统驱动到所需状态，同时最大化其稳定性和性能。'
- en: '![Figure 7.1 – Observability in control theory](img/B17989_07_01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.1 – 控制理论中的可观测性](img/B17989_07_01.jpg)'
- en: Figure 7.1 – Observability in control theory
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.1 – 控制理论中的可观测性
- en: The observability of a system is a measure of how well we can understand the
    internal state of that system, based on the signals and observation of its external
    outputs. It is then used by controllers to apply compensating control to the system
    to drive it to the desired state. A system is considered observable if it emits
    signals, which the controller can use to determine the system’s status.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 系统的可观测性是衡量我们如何根据外部输出的信号和观察来理解系统内部状态的能力。然后，控制器利用这些信息对系统进行补偿控制，以将其驱动到所需状态。如果一个系统发出信号，控制器可以使用这些信号来确定系统的状态，那么该系统就被视为可观测的。
- en: In the world of IT, *systems* are software systems, and *controllers* are operators
    who are other software systems or sometimes human operators, such as **site reliability
    engineers** (**SREs**), who rely on measurements provided by observable systems.
    If you want your software systems to be resilient and self-regulated, then it
    is important that all parts of your software systems are also observable.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在 IT 世界中，*系统*是软件系统，*控制器*是其他软件系统或有时是人工操作员（例如**站点可靠性工程师**（**SREs**）），他们依赖可观测系统提供的测量数据。如果你希望你的软件系统具备韧性并自我调节，那么确保软件系统的各个部分都是可观测的非常重要。
- en: 'Another concept to remember is **telemetry data**, which is the data transmitted
    by systems used for the observability of the systems. Usually, they are logs,
    event traces, and metrics:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个需要记住的概念是**遥测数据**，它是系统用于观察系统可观测性的传输数据。通常，这些数据是日志、事件追踪和指标：
- en: '**Logs**: These are information emitted by software systems in verbose format.
    Logs are usually the data emitted by an application and are premeditated at the
    time an application is designed. Logs are used heavily by developers to troubleshoot
    code by correlating logs with the code blocks emitting them. Logs can be structured,
    meaning that all log entries follow a specific pattern that makes it easier for
    observability systems to ingest and comprehend them. Logs can also be unstructured,
    which unfortunately is the case for the majority of the logs. Istio generates
    a full record of each request, including source and destination metadata.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志**：这些是由软件系统以详细格式输出的信息。日志通常是应用程序发出的数据，并且在设计应用程序时就已经预先设定。开发人员常常通过将日志与生成它们的代码块关联，来使用日志进行代码故障排除。日志可以是结构化的，这意味着所有日志条目都遵循特定的模式，使得观察系统更容易获取和理解它们。日志也可以是非结构化的，这不幸的是，大多数日志都是这种情况。Istio
    会生成每个请求的完整记录，包括源和目标的元数据。'
- en: '**Traces**: In distributed systems or applications, tracing is the means of
    finding how a request or an activity was processed and executed across multiple
    components. Traces are made up of spans that describe execution/software processing
    within a system. Multiple spans are then put together to provide a trace of a
    request being executed. Traces describe the relationship between various systems
    and how they partnered together to complete a task. For tracing to work in distributed
    systems, it is important to share a context between all systems, and those contexts
    are usually in the form of correlation IDs or something similar, which all participating
    systems can understand and honor. Istio generates distributed trace spans for
    each service, providing details of request flows and interdependency between various
    services.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**追踪**：在分布式系统或应用程序中，追踪是查找请求或活动如何跨多个组件处理和执行的手段。追踪由描述系统内执行/软件处理的跨度组成。多个跨度被组合在一起，形成一个请求执行的追踪。追踪描述了不同系统之间的关系，以及它们如何合作完成一个任务。为了使分布式系统中的追踪工作，所有系统之间共享上下文非常重要，这些上下文通常以关联
    ID 或类似的形式存在，所有参与的系统都可以理解并遵守。Istio 为每个服务生成分布式追踪跨度，提供请求流和各个服务之间的相互依赖关系的详细信息。'
- en: '`500` response code. **Saturation** shows how many system resources, such as
    memory, CPU, network, and storage, are utilized by your system. Istio generates
    the metric data for both data and control planes.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`500` 响应码。**饱和度**显示了系统资源（如内存、CPU、网络和存储）被系统使用的程度。Istio 会生成数据平面和控制平面的度量数据。'
- en: All this telemetry data is used in conjunction to provide the observability
    of systems. There are various types of open source and commercial software available
    for observing software systems; Istio includes various tools out of the box, which
    we briefly discussed in *Chapter 2*. Prometheus and Grafana are shipped out of
    the box with Istio; in the next section, we will install Prometheus and Grafana
    and configure them to collect Istio’s metrics data.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些遥测数据结合使用，以提供系统的可观察性。有各种类型的开源和商业软件可用于观察软件系统；Istio 提供了多种现成的工具，我们在*第2章*中简要讨论过。Prometheus
    和 Grafana 是 Istio 默认提供的；在下一节中，我们将安装 Prometheus 和 Grafana，并配置它们以收集 Istio 的度量数据。
- en: Metric scraping using Prometheus
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Prometheus 进行度量抓取
- en: '**Prometheus** is open source system monitoring software, which stores all
    metric information along with the timestamps of when they were recorded. What
    differentiates Prometheus from other monitoring software is its powerful multidimensional
    data model and a powerful query language called **PromQL**. It works by collecting
    data from various targets and then analyzing and crunching it to produce metrics.
    Systems can also implement HTTP endpoints that provide metrics data; these endpoints
    are then called by Prometheus to collect metrics data from the applications. The
    process of gathering metrics data from various HTTP endpoints is also called **scraping**.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**Prometheus** 是一个开源的系统监控软件，它存储所有度量信息及其记录的时间戳。Prometheus 与其他监控软件的区别在于其强大的多维数据模型和一个强大的查询语言
    **PromQL**。它通过从各个目标收集数据，然后分析和处理这些数据以生成度量。系统还可以实现提供度量数据的 HTTP 端点；这些端点随后被 Prometheus
    调用，以收集来自应用程序的度量数据。收集来自不同 HTTP 端点的度量数据的过程也称为 **抓取**。'
- en: 'As illustrated in the following figure, the Istio control plane and data plane
    components expose endpoints that emit metrics, and Prometheus is configured to
    scrape these endpoints to collect metrics data and store it in a time series database:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如下图所示，Istio 控制平面和数据平面组件暴露了发出指标的端点，Prometheus 被配置为抓取这些端点以收集指标数据并将其存储在时间序列数据库中：
- en: '![Figure 7.2 – Metric scraping using Prometheus](img/B17989_07_02.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.2 – 使用 Prometheus 进行指标抓取](img/B17989_07_02.jpg)'
- en: Figure 7.2 – Metric scraping using Prometheus
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.2 – 使用 Prometheus 进行指标抓取
- en: We will describe the process in detail in the following sections.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的章节中详细描述这个过程。
- en: Installing Prometheus
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Prometheus
- en: 'Istio already provides a sample installation file available in `/sample/addons/
    prometheus.yaml`, which is good enough as a starting point. We have modified the
    file slightly to cater to applications that support strict mTLS mode only:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Istio 已经提供了一个示例安装文件，位于 `/sample/addons/prometheus.yaml`，这个文件足够作为起点。我们对文件进行了少量修改，以适应仅支持严格
    mTLS 模式的应用程序：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The changes in our file, `01-prometheus.yaml`, in comparison to the out-of-the-box
    file, are that we have provisioned Istio certificates for Prometheus by injecting
    a sidecar and configuring it to write the certificate to a shared volume, which
    is then mounted onto the Prometheus container. The sidecar is just for mounting
    and managing the certificates and doesn’t intercept any inbound and outbound requests.
    You will find the changes in `Chapter7/01-prometheus.yaml` .
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们文件 `01-prometheus.yaml` 中的更改与原始文件相比，主要是我们通过注入一个 sidecar 为 Prometheus 配置了 Istio
    证书，并配置其将证书写入共享卷，再将其挂载到 Prometheus 容器中。这个 sidecar 只是用于挂载和管理证书，不会拦截任何进出请求。您可以在 `Chapter7/01-prometheus.yaml`
    中找到更改内容。
- en: 'You can check what has been installed in the `istio-system` namespace:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以检查在 `istio-system` 命名空间中安装了哪些内容：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now, we will look at how we can deploy the sample application.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看看如何部署示例应用程序。
- en: Deploying a sample application
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署示例应用程序
- en: Let’s deploy the `sockshop` application with `istio-injection` enabled.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们部署启用了 `istio-injection` 的 `sockshop` 应用程序。
- en: 'Modify `sockshop/devops/deploy/kubernetes/manifests/00-sock-shop-ns.yaml` with
    the following code:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码修改 `sockshop/devops/deploy/kubernetes/manifests/00-sock-shop-ns.yaml`：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, deploy the `sockshop` application:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，部署 `sockshop` 应用程序：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Finally, we will configure an Ingress gateway:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将配置一个 Ingress 网关：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, make some calls from the browser to send traffic to the frontend service
    as you’ve been doing in the previous chapters. We will then check some metrics
    scraped by Prometheus to access the dashboard, using the following commands:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，从浏览器进行一些调用，向前端服务发送流量，正如您在前几章中所做的那样。然后，我们将检查 Prometheus 抓取的一些指标，以访问仪表盘，使用以下命令：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'From the dashboard, we will first check that Prometheus is scraping the metrics.
    We can do so by clicking on **Status** | **Targets** on the Prometheus dashboard:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 从仪表盘中，我们首先检查 Prometheus 是否正在抓取指标。可以通过点击 Prometheus 仪表盘中的 **Status** | **Targets**
    来查看：
- en: '![Figure 7.3 – The Prometheus configuration](img/B17989_07_03.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.3 – Prometheus 配置](img/B17989_07_03.jpg)'
- en: Figure 7.3 – The Prometheus configuration
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.3 – Prometheus 配置
- en: You will see all targets from which Prometheus is scraping the metrics.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到 Prometheus 正在抓取指标的所有目标。
- en: 'On the dashboard, we will fire up a query to get a total request between the
    `istio-` Ingress gateway and the frontend service, using the following code:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在仪表盘中，我们将发起一个查询，以获取 `istio-` Ingress 网关和前端服务之间的总请求数，使用以下代码：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![Figure 7.4 – PromQL](img/B17989_07_04.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.4 – PromQL](img/B17989_07_04.jpg)'
- en: Figure 7.4 – PromQL
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.4 – PromQL
- en: In the preceding screenshot, the name of the metric is `istio_requests_total`,
    and the fields in curly brackets are known as `istio_requests_total` metric whose
    dimensions are `destination_service`, `response_code`, `source_app`, and `namespace`
    to match the `front-end.sock-shop.svc.cluster.local`, `200`, `istio-ingressgateway`,
    and `sock-shop` values respectively.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，指标的名称是 `istio_requests_total`，大括号中的字段被称为 `istio_requests_total` 指标，其维度分别是
    `destination_service`、`response_code`、`source_app` 和 `namespace`，用于匹配 `front-end.sock-shop.svc.cluster.local`、`200`、`istio-ingressgateway`
    和 `sock-shop` 的值。
- en: In response, we receive a metric count of `51` and other dimensions as part
    of the metric.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 作为响应，我们收到一个指标计数 `51` 和其他作为指标的一部分的维度。
- en: 'Let’s make another query to check how many requests to the catalog service
    have been generated from the frontend service, using the following code:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再执行一个查询，检查从前端服务到目录服务的请求数量，使用以下代码：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note in the query how we have provided `reporter` = `"source"`, which means
    we want metrics reported by the frontend Pod.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在查询中注意到，我们提供了 `reporter` = `"source"`，这意味着我们希望由前端 Pod 上报的指标。
- en: '![Figure 7.5 – PromQL istio_request_total from the frontend to the catalog](img/B17989_07_05.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.5 – 从前端到目录的 PromQL istio_request_total](img/B17989_07_05.jpg)'
- en: Figure 7.5 – PromQL istio_request_total from the frontend to the catalog
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.5 – 从前端到目录的 PromQL istio_request_total
- en: If you change `reporter = "destination"`, you will see similar metrics but reported
    by the catalog Pod.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你更改 `reporter = "destination"`，你将看到类似的指标，但由目录 Pod 上报。
- en: "![Figure 7.6 – PromQL istio_request_total from the frontend to the catalo\uFEFF\
    gue, reported by the catalog sidecar](img/B17989_07_06.jpg)"
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.6 – 从前端到目录的 PromQL istio_request_total，由目录 sidecar 上报](img/B17989_07_06.jpg)'
- en: Figure 7.6 – PromQL istio_request_total from the frontend to the catalogue,
    reported by the catalog sidecar
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.6 – 从前端到目录的 PromQL istio_request_total，由目录 sidecar 上报
- en: 'Let’s also check the database connection between the catalog service and the
    MySQL catalog database, using the following query:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们还检查一下目录服务与 MySQL 目录数据库之间的数据库连接，使用以下查询：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![Figure 7.7 – PromQL TCP connections between catalogue and catalogue-db](img/B17989_07_07.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.7 – 目录与目录-db 之间的 PromQL TCP 连接](img/B17989_07_07.jpg)'
- en: Figure 7.7 – PromQL TCP connections between catalogue and catalogue-db
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.7 – 目录与目录-db 之间的 PromQL TCP 连接
- en: The metric data shows that the catalog service made seven TCP connections.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 指标数据显示，目录服务建立了七个 TCP 连接。
- en: So far, we have used default metric configuration. In the next section, we will
    read about how these metrics are configured and how to customize them by adding
    new metrics.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们使用的是默认的指标配置。在下一节中，我们将介绍这些指标是如何配置的，以及如何通过添加新的指标来定制它们。
- en: Customizing Istio metrics
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定制 Istio 指标
- en: 'Istio provides flexibility to observe metrics other than what comes out of
    the box. This provides flexibility to observe application-specific metrics. With
    that in mind, let’s begin by looking at the `/stats/prometheus` endpoint exposed
    by the sidecar:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Istio 提供了灵活性，可以观察到除了开箱即用的指标之外的其他指标。这为观察特定应用程序的指标提供了灵活性。考虑到这一点，让我们首先来看一下由 sidecar
    暴露的 `/stats/prometheus` 端点：
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following screenshot shows sample data returned by this endpoint, which
    is also scraped by Prometheus and is the same data you saw using the dashboard
    in the previous section:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了该端点返回的示例数据，这些数据也被 Prometheus 抓取，与你在上一节中使用仪表板看到的数据相同：
- en: "![Figure 7.8 – Istio metric\uFEFF, dimension\uFEFFs, and value](img/B17989_07_08.jpg)"
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.8 – Istio 指标、维度和数值](img/B17989_07_08.jpg)'
- en: Figure 7.8 – Istio metric, dimensions, and value
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.8 – Istio 指标、维度和数值
- en: 'The metric is organized in the following structure:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 该指标按以下结构组织：
- en: '**Metric name**: This is the name of the metric exported by Istio. Out-of-the-box
    Istio generates many metric details, which can be found at [https://istio.io/latest/docs/reference/config/metrics/#metrics](https://istio.io/latest/docs/reference/config/metrics/#metrics).'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**指标名称**：这是由 Istio 导出的指标名称。开箱即用的 Istio 生成了许多指标详情，可以在 [https://istio.io/latest/docs/reference/config/metrics/#metrics](https://istio.io/latest/docs/reference/config/metrics/#metrics)
    中找到。'
- en: '**Metric dimensions**: These are the various fields that are part of a metric.
    These fields are called dimensions in the context of Prometheus and labels in
    the context of an Istio metric. Details about standard label parts of Istio metrics
    are available at [https://istio.io/latest/docs/reference/config/metrics/#labels](https://istio.io/latest/docs/reference/config/metrics/#labels).'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**指标维度**：这些是指标的一部分的各个字段。在 Prometheus 上下文中，这些字段称为维度，在 Istio 指标上下文中称为标签。有关 Istio
    指标标准标签部分的详细信息，请访问 [https://istio.io/latest/docs/reference/config/metrics/#labels](https://istio.io/latest/docs/reference/config/metrics/#labels)。'
- en: '**Metric value**: This is the value of the metric and can be a counter, gauge,
    or histogram.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**指标值**：这是指标的值，可以是计数器、仪表或直方图。'
- en: A **counter** is used to track the occurrence of an event. Counters are continuously
    increasing values exposed as time series. Some examples of metrics with counter-type
    values are request counts, bytes received, and TCP connections.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**计数器**用于跟踪事件的发生。计数器是持续增加的值，并以时间序列的形式呈现。计数器类型值的指标示例包括请求计数、接收字节和 TCP 连接。'
- en: A **gauge** is a snapshot of a measurement at a single point in time. It is
    used to measure metrics such as CPU consumption and memory consumption.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仪表**是单个时间点上测量的快照。它用于衡量如 CPU 消耗和内存消耗等指标。'
- en: As the name suggests, **histograms** are used for measuring observations spread
    over a period. They are also the most complex metric to measure.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顾名思义，**直方图**用于衡量一段时间内的观测数据。它们也是最复杂的度量类型。
- en: 'The telemetry component of Istio is implemented by the `proxy-wasm` plugin.
    We will read more about this in *Chapter 9*, but for now, just understand it as
    a means to build extensions for **Envoy**. You can find these filters using the
    following command:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Istio 的遥测组件由 `proxy-wasm` 插件实现。我们将在*第九章*中深入了解这个插件，但目前只需理解它是用来为 **Envoy** 构建扩展的工具。你可以使用以下命令查找这些过滤器：
- en: '[PRE10]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The filters run WebAssembly at different points of request execution and collect
    various metrics. Using the same technique, you can easily customize Istio metrics
    by adding/removing new dimensions. You can also add new metrics or override any
    existing metrics. We will discuss how to achieve this in the following sections.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这些过滤器在请求执行的不同阶段运行 WebAssembly，并收集各种指标。使用相同的技术，你可以通过添加/删除新的维度轻松自定义 Istio 指标。你还可以添加新的指标或覆盖任何现有的指标。我们将在接下来的章节中讨论如何实现这一点。
- en: Adding dimensions to the Istio metric
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为 Istio 指标添加维度
- en: The `istio_request_total` metric doesn’t have any dimensions for a request path
    – that is, we cannot count how many requests we are receiving for individual request
    paths. We will configure an EnvoyFilter to include `request.url_path` in the `request_total`
    metric. Please note that `istio_` is a prefix added by Prometheus; the actual
    metric name in the context of Istio is `request_total`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`istio_request_total` 指标没有请求路径的维度——也就是说，我们无法统计各个请求路径的请求数量。我们将配置一个 EnvoyFilter，将
    `request.url_path` 包含到 `request_total` 指标中。请注意，`istio_` 是 Prometheus 添加的前缀；在 Istio
    的上下文中，实际的指标名称是 `request_total`。'
- en: We will discuss EnvoyFilter in *Chapter 9*, so if you want to jump to that chapter
    to understand the various ways of extending Istio, please do so; alternatively,
    you can also read about this filter at https://istio.io/latest/docs/reference/config/networking/envoy-filter/#EnvoyFilter-PatchContext.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在*第九章*中讨论 EnvoyFilter，因此如果你想跳转到该章节了解扩展 Istio 的各种方式，请随时去阅读；或者，你也可以在 [EnvoyFilter
    参考](https://istio.io/latest/docs/reference/config/networking/envoy-filter/#EnvoyFilter-PatchContext)
    中了解此过滤器。
- en: 'In the following configuration, we have created an EnvoyFilter that is applied
    to frontend Pods, using the condition in `workloadSelector`, in the following
    code block:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下配置中，我们创建了一个 EnvoyFilter，应用于前端 Pods，并使用 `workloadSelector` 中的条件，代码如下：
- en: '[PRE11]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next, we apply `configPatch` to `HTTP_FILTER` for inbound traffic flow to the
    sidecar. Other options are `SIDECAR_OUTBOUND` and `GATEWAY`. The patch is applied
    to HTTP connection manager filters and, in particular, the `istio.stats` subfilter;
    this is the filter we discussed in the previous section and is responsible for
    Istio telemetry:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将 `configPatch` 应用到 `HTTP_FILTER`，以便为侧车的入站流量进行配置。其他选项包括 `SIDECAR_OUTBOUND`
    和 `GATEWAY`。此补丁应用于 HTTP 连接管理器过滤器，特别是 `istio.stats` 子过滤器；这是我们在前一部分讨论的过滤器，负责 Istio
    的遥测功能：
- en: '[PRE12]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note that the proxy version, which is 1.16, must match the Istio version you
    have installed.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，代理版本（1.16）必须与你安装的 Istio 版本匹配。
- en: 'Next, we will replace the configuration of the `istio.stats` filter with the
    following:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将用以下内容替换 `istio.stats` 过滤器的配置：
- en: '[PRE13]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In this configuration, we are modifying the `metrics` field by adding a new
    dimension called `request.url.path` with the same value as the `request.url.path`
    attribute of Envoy. To remove any existing dimension – for example, `response_flag`
    – please use the following configuration:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在此配置中，我们通过添加一个名为 `request.url.path` 的新维度来修改 `metrics` 字段，其值与 Envoy 的 `request.url.path`
    属性相同。要删除任何现有维度——例如 `response_flag`——请使用以下配置：
- en: '[PRE14]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then, apply the configuration:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，应用配置：
- en: '[PRE15]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'By default, Istio will not include the newly added `request.url.path` dimension
    for Prometheus; the following annotations need to be applied to include `request.url_path`:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Istio 不会将新添加的 `request.url.path` 维度包含到 Prometheus 中；需要应用以下注解以包含 `request.url_path`：
- en: '[PRE16]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Apply the changes to the frontend deployment:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 将更改应用到前端部署：
- en: '[PRE17]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You will now be able to see the new dimension added to the `istio_requests_total`
    metrics:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在将能够看到新维度已添加到 `istio_requests_total` 指标中：
- en: '![Figure 7.9 – The new metric dimension](img/B17989_07_09.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.9 – 新的指标维度](img/B17989_07_09.jpg)'
- en: Figure 7.9 – The new metric dimension
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.9 – 新的指标维度
- en: You can add any Envoy attributes as a dimension to the metric, and you can find
    the full list of available attributes at [https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/advanced/attributes](https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/advanced/attributes).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将任何 Envoy 属性作为指标的维度，并且可以在 [https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/advanced/attributes](https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/advanced/attributes)
    找到所有可用属性的完整列表。
- en: Creating a new Istio metric
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建新的 Istio 指标
- en: You can also create a new Istio metric using EnvoyFilter, similar to what you
    used to create custom metrics.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用 EnvoyFilter 创建一个新的 Istio 指标，类似于您用于创建自定义指标的方式。
- en: 'In the following example, we have created new metrics using `definitions` and
    also added another dimension:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们使用 `definitions` 创建了新的指标，并且添加了另一个维度：
- en: '[PRE18]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Next, apply the changes:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，应用更改：
- en: '[PRE19]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We must also annotate the frontend Pod with `sidecar.istio.io/statsInclusionPrefixes`
    so that the `request_total_bymethod` metric is included for Prometheus:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还必须为前端 Pod 添加 `sidecar.istio.io/statsInclusionPrefixes` 注释，以便将 `request_total_bymethod`
    指标包含在 Prometheus 中：
- en: '[PRE20]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'It would be a good idea to restart the frontend Pod to make sure that the annotation
    is applied. After applying the changes, you can scrape the Prometheus endpoint
    using the following code:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 最好重新启动前端 Pod 以确保注释已应用。应用更改后，您可以使用以下代码抓取 Prometheus 端点：
- en: '[PRE21]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Also, using the Prometheus dashboard, check that the new metric is available:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，使用 Prometheus 仪表盘，检查新指标是否可用：
- en: '![Figure 7.10 – New metrics](img/B17989_07_10.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.10 – 新指标](img/B17989_07_10.jpg)'
- en: Figure 7.10 – New metrics
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.10 – 新指标
- en: With this, you should now be able to create a new Istio metric with dimensions,
    as well as updating dimensions for any existing metrics. In the next section,
    we will look at Grafana, which is yet another powerful observability utility.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 通过此步骤，您现在应该能够创建一个带有维度的新 Istio 指标，并且更新任何现有指标的维度。在下一节中，我们将了解 Grafana，这是另一个强大的可观察性工具。
- en: Visualizing telemetry using Grafana
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Grafana 可视化遥测数据
- en: '**Grafana** is open source software used for the visualization of telemetry
    data. It provides an easy-to-use and interactive option for visualizing observability
    metrics. Grafana also helps to unify telemetry data from various systems in a
    centralized place, providing a unified view of observability across all your systems.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '**Grafana** 是一种开源软件，用于可视化遥测数据。它提供了一个易于使用和交互的选项，用于可视化可观察性指标。Grafana 还帮助将来自各种系统的遥测数据集中统一显示，提供跨所有系统的统一可观察性视图。'
- en: 'Istio installation provides sample manifests for Grafana, located in `samples/addons`.
    Install Grafana using the following commands:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Istio 安装提供了 Grafana 的示例清单，位于 `samples/addons` 中。使用以下命令安装 Grafana：
- en: '[PRE22]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Once you have installed Grafana, you can open the Grafana dashboard using the
    following commands:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Grafana 后，您可以使用以下命令打开 Grafana 仪表盘：
- en: '[PRE23]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This should open the Grafana dashboard, as shown in the following screenshot:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会打开 Grafana 仪表盘，如下图所示：
- en: "![Figure 7.11 – Grafana \uFEFFdashboard](img/B17989_07_11.jpg)"
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.11 – Grafana 仪表盘](img/B17989_07_11.jpg)'
- en: Figure 7.11 – Grafana dashboard
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.11 – Grafana 仪表盘
- en: 'Grafana already includes the following dashboards for Istio:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Grafana 已经为 Istio 包含了以下仪表盘：
- en: '**Istio Control Plane Dashboard**: This provides charts showing resource consumption
    by Istio’s control plane components. It also provides metrics on the interaction
    between the control plane and the data plane, including xDS push, errors during
    configuration sync, and conflicts in the configuration between the data plane
    and the control plane.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Istio 控制平面仪表盘**：此仪表盘提供显示 Istio 控制平面组件资源消耗的图表。它还提供关于控制平面与数据平面之间交互的指标，包括 xDS
    推送、配置同步中的错误以及数据平面和控制平面之间的配置冲突。'
- en: '**Istio Mesh Dashboard**: This provides a summary view of the mesh. The dashboard
    provides a summary view of requests, errors, gateways, and policies, as well as
    details about services and their associated latency during request processing.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Istio 网格仪表盘**：此仪表盘提供网格的汇总视图。仪表盘提供请求、错误、网关和策略的汇总视图，并详细说明服务及其在请求处理期间的相关延迟。'
- en: '**Istio Performance Dashboard**: This provides charts that show the resource
    utilization of Istio components.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Istio 性能仪表盘**：此仪表盘提供显示 Istio 组件资源利用率的图表。'
- en: '**Istio Service and Workload Dashboards**: This provides metrics about the
    request-response for each service and workload. Using this dashboard, you can
    find more granular details about how services and workloads are behaving. You
    can search for a metric based on various dimensions, as discussed in the *Metric
    scraping using* *Prometheus* section.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Istio 服务和工作负载仪表板**：提供每个服务和工作负载的请求-响应指标。使用此仪表板，您可以找到有关服务和工作负载行为的更详细信息。您可以根据不同维度搜索指标，如在*使用
    Prometheus 抓取指标*一节中讨论的那样。'
- en: '![Figure 7.12 – Istio Service Dashboard](img/B17989_07_12.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.12 – Istio 服务仪表板](img/B17989_07_12.jpg)'
- en: Figure 7.12 – Istio Service Dashboard
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.12 – Istio 服务仪表板
- en: 'Another powerful feature of Grafana is **alerting**, where you can create alerts
    based on certain kinds of events. In the following example, we will create one
    such alert:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Grafana 的另一个强大功能是**告警**，您可以基于某些事件创建告警。在接下来的示例中，我们将创建一个这样的告警：
- en: Create an alert when `response_code` is not equal to `200`, based on the `istio_request_total`
    metric in the last 10 minutes.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个告警，当 `response_code` 不等于 `200` 时，基于过去 10 分钟内的 `istio_request_total` 指标。
- en: '![Figure 7.13 – Creating alerts in Grafana](img/B17989_07_13.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.13 – 在 Grafana 中创建告警](img/B17989_07_13.jpg)'
- en: Figure 7.13 – Creating alerts in Grafana
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.13 – 在 Grafana 中创建告警
- en: Configure an alert to be raised when the count of a request with a `~=200` response
    code is more than 3 in the past 10 minutes; this is also called the **threshold**.
    We will also configure the frequency of evaluation for this alert and the threshold
    for firing the alert. In the following example, we have set the alert to be evaluated
    every minute but fired after 5 minutes. By adjusting these parameters, we can
    prevent the alert from being fired too soon or too late.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置一个告警，当过去 10 分钟内响应码为 `~=200` 的请求数量超过 3 时触发，这也叫做**阈值**。我们还将配置该告警的评估频率以及触发告警的阈值。在以下示例中，我们将告警设置为每分钟评估一次，但在
    5 分钟后触发。通过调整这些参数，我们可以避免告警过早或过晚触发。
- en: '![Figure 7.14 – Configuring the threshold to raise an alert](img/B17989_07_14.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.14 – 配置触发告警的阈值](img/B17989_07_14.jpg)'
- en: Figure 7.14 – Configuring the threshold to raise an alert
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.14 – 配置触发告警的阈值
- en: 'Next, you configure the name of the alert rule and where the alert should be
    stored in Grafana:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您配置告警规则的名称以及告警应存储的位置：
- en: '![Figure 7.15 – Adding details about the alert](img/B17989_07_15.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.15 – 添加告警详情](img/B17989_07_15.jpg)'
- en: Figure 7.15 – Adding details about the alert
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.15 – 添加告警详情
- en: 'After configuring the name of the rule, you configure labels, which are a way
    to associate alerts with notification policies:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置完规则名称后，接下来配置标签，标签是用来将告警与通知策略关联的方式：
- en: '![Figure 7.16 – Alert notifications](img/B17989_07_16.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.16 – 告警通知](img/B17989_07_16.jpg)'
- en: Figure 7.16 – Alert notifications
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.16 – 告警通知
- en: 'Next, you configure contact points that need to be notified when an alert is
    raised:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您配置需要在告警触发时通知的联系人：
- en: '![Figure 7.17 – Configure contact points](img/B17989_07_17.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.17 – 配置联系人](img/B17989_07_17.jpg)'
- en: Figure 7.17 – Configure contact points
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.17 – 配置联系人
- en: And finally, you create a notification policy, which specifies the contact points
    that will be notified about the alert.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，您创建一个通知策略，指定将在告警触发时通知的联系人。
- en: '![Figure 7.18 – Configuring a notification policy](img/B17989_07_18.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.18 – 配置通知策略](img/B17989_07_18.jpg)'
- en: Figure 7.18 – Configuring a notification policy
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.18 – 配置通知策略
- en: 'You finally have your alert configured. Now, go ahead and disable the catalog
    service in `sockshop.com`, make a few requests from the website, and you will
    see the following alert fired in Grafana:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，您的告警已配置完成。现在，您可以禁用 `sockshop.com` 上的目录服务，进行几次请求，您将看到以下告警在 Grafana 中被触发：
- en: '![Figure 7.19 – Alerts raised due to a failure caused by catalog service outage](img/B17989_07_19.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.19 – 因目录服务中断引起的故障触发的告警](img/B17989_07_19.jpg)'
- en: Figure 7.19 – Alerts raised due to a failure caused by catalog service outage
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.19 – 因目录服务中断引起的故障触发的告警
- en: In this section, we saw an example of how we can use Grafana to visualize various
    metrics produced by Istio. Grafana provides comprehensive tooling to visualize
    data, which helps in uncovering new opportunities as well as unearthing any issues
    occurring within your system.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们展示了如何使用 Grafana 来可视化 Istio 产生的各种指标。Grafana 提供了全面的工具来可视化数据，帮助发现新的机会以及揭示系统中可能出现的问题。
- en: Implementing distributed tracing
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现分布式追踪
- en: '**Distributed tracing** helps you understand the journey of a request through
    various IT systems. In the context of microservices, distributed tracing helps
    you understand the flow of requests through various microservices, helps you to
    diagnose any issues a request might be encountering, and helps you quickly diagnose
    any failure or performance issues.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '**分布式追踪**帮助你理解请求在各种 IT 系统中的流转过程。在微服务的背景下，分布式追踪帮助你理解请求在不同微服务之间的流动，帮助你诊断请求可能遇到的任何问题，并帮助你快速诊断任何故障或性能问题。'
- en: In Istio, you can enable distributed tracing without needing to make any changes
    in application code, provided your application forwards all tracing headers to
    upstream services. Istio supports integrations with various distributed tracing
    systems; Jaeger is one such supported system, which is also provided as an add-on
    with Istio. Istio distributed tracing is built upon Envoy, where tracing information
    is sent directly to the tracing backend from Envoy. The tracing information comprises
    `x-request-id`, `x-b3-trace-id`, `x-b3-span-id`, `x-b3-parent-spanid`, `x-b3-sampled`,
    `x-b3-flags`, and `b3`. These custom headers are created by Envoy for every request
    that flows through Envoy. Envoy forwards these headers to the associated application
    container in the Pod. The application container then needs to ensure that these
    headers are not truncated and, rather, forwarded to any upstream services in the
    mesh. The proxied application then needs to propagate these headers in all outbound
    requests from the application.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Istio 中，你可以启用分布式追踪，而无需在应用程序代码中做任何更改，只要你的应用程序将所有追踪头部转发给上游服务即可。Istio 支持与多种分布式追踪系统的集成；Jaeger
    就是其中一个支持的系统，并且作为 Istio 的附加组件提供。Istio 的分布式追踪基于 Envoy，在这里，追踪信息直接从 Envoy 发送到追踪后端。追踪信息包括`x-request-id`、`x-b3-trace-id`、`x-b3-span-id`、`x-b3-parent-spanid`、`x-b3-sampled`、`x-b3-flags`和`b3`。这些自定义头部由
    Envoy 为每个经过 Envoy 的请求创建。Envoy 将这些头部转发到 Pod 中相关的应用容器。应用容器然后需要确保这些头部不会被截断，而是转发给网格中的任何上游服务。代理的应用程序随后需要在所有从应用程序发出的外部请求中传播这些头部。
- en: You can read more about headers at [https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/observability/tracing](https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/observability/tracing).
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/observability/tracing](https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/observability/tracing)
    阅读更多关于头部的信息。
- en: In the following section, we will learn how to install Jaeger and enable distributed
    tracing for the `sockshop` example.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将学习如何安装 Jaeger 并为`sockshop`示例启用分布式追踪。
- en: Enabling distributed tracing with Jaeger
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Jaeger 启用分布式追踪
- en: 'Jaeger is open source distributed tracing software, originally developed by
    Uber Technologies and later donated to CNCF. Jaeger is used to monitor and troubleshoot
    microservices-based systems. It is used primarily for the following:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Jaeger 是一个开源的分布式追踪软件，最初由 Uber Technologies 开发，后来捐赠给 CNCF。Jaeger 用于监控和故障排除基于微服务的系统，主要用于以下几个方面：
- en: Distributed context propagation and transaction monitoring
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分布式上下文传播和事务监控
- en: Microservice dependency analysis and troubleshooting
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微服务依赖分析与故障排除
- en: Understanding bottlenecks in distributed architectures
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解分布式架构中的瓶颈
- en: Yuri Shkuro, the creator of Jaeger, published a book called *Mastering Distributor
    Tracing* ([https://www.shkuro.com/books/2019-mastering-distributed-tracing](https://www.shkuro.com/books/2019-mastering-distributed-tracing))
    that explains many aspects of Jaeger design and operations. You can read more
    about Jaeger at [https://www.jaegertracing.io/](https://www.jaegertracing.io/).
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: Jaeger 的创建者 Yuri Shkuro 出版了一本名为 *Mastering Distributor Tracing* 的书（[https://www.shkuro.com/books/2019-mastering-distributed-tracing](https://www.shkuro.com/books/2019-mastering-distributed-tracing)），书中解释了
    Jaeger 设计和操作的许多方面。你可以在 [https://www.jaegertracing.io/](https://www.jaegertracing.io/)
    阅读更多关于 Jaeger 的信息。
- en: Next, we will install and configure Jaeger in Istio.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在 Istio 中安装和配置 Jaeger。
- en: 'The Kubernetes manifest file for deploying Jaeger is already available in `samples/addons/jaeger.yaml`:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 用于部署 Jaeger 的 Kubernetes 清单文件已经可以在` samples/addons/jaeger.yaml`中找到：
- en: '[PRE24]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This code block installs Jaeger in the `istio-system` namespace. You can open
    the dashboard using the following command:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这个代码块将在`istio-system`命名空间中安装 Jaeger。你可以使用以下命令打开仪表盘：
- en: '[PRE25]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Unfortunately, the `sockshop` application wasn’t designed to propagate the
    headers, so for this scenario, we will make use of the `bookinfo` application
    as an example with Istio. But before that, we will deploy the `httpbin` application
    to understand the Zipkin tracing headers injected by Istio:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，`sockshop` 应用没有设计成传播头部，因此在此场景中，我们将使用 Istio 示例中的 `bookinfo` 应用。但在此之前，我们将部署
    `httpbin` 应用以理解 Istio 注入的 Zipkin 追踪头部：
- en: '[PRE26]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Let’s make a request to `httpbin` and check the response headers:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们向 `httpbin` 发送请求并检查响应头部：
- en: '[PRE27]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In the response, note the headers injected by Istio – `x-b3-parentspanid`,
    `x-b3-sampled`, `x-b3-spanid`, and `x-b3-traceid`. These headers are also called
    B3 headers, which are used for trace context propagation across a service boundary:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在响应中，请注意 Istio 注入的头部 – `x-b3-parentspanid`、`x-b3-sampled`、`x-b3-spanid` 和 `x-b3-traceid`。这些头部也称为
    B3 头部，用于跨服务边界传播追踪上下文：
- en: '`1` means yes and `0` means prohibited.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`1` 表示允许，`0` 表示禁止。'
- en: '**x-b3-traceid**: This is 8 or 16 bytes in length, indicating the overall ID
    of the trace.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**x-b3-traceid**：这是 8 字节或 16 字节长，表示追踪的整体 ID。'
- en: '**x-b3-parentspanid**: This is 8 bytes in length and represents the position
    of the parent operation in the trace tree. Every span will have a parent span
    unless it is the root itself.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**x-b3-parentspanid**：这是 8 字节长，表示父操作在追踪树中的位置。每个 span 都会有一个父 span，除非它本身就是根 span。'
- en: '**x-b3-spanid**: This is 8 bytes in length and represents the position of the
    current operation in the trace tree.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**x-b3-spanid**：这是 8 字节长，表示当前操作在追踪树中的位置。'
- en: In the response from `httpbin`, the request is traversed to the Ingress gateway
    and then to `httpbin`. The B3 headers were injected by Istio as soon as the request
    arrived at the Ingress gateway. The span ID generated by the Ingress gateway is
    `5c0572d9e4ed5415`, which is a parent of the `httpbin` span that has a span ID
    of `743b39197aaca61f`. Both the Ingress gateway and `httpbin` spans will have
    the same trace ID because they are part of the same trace. As the Ingress gateway
    is the root span, it will have no `parentspanid`. In this example, there are only
    two hops and, thus, two spans. If there were more, they all would have generated
    the B3 headers because the value of `x-b3-sampled` is `1`.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `httpbin` 的响应中，请求会经过 Ingress 网关，然后到达 `httpbin`。B3 头部在请求到达 Ingress 网关时就被 Istio
    注入。Ingress 网关生成的 span ID 是 `5c0572d9e4ed5415`，它是 `httpbin` span 的父 span，后者的 span
    ID 是 `743b39197aaca61f`。Ingress 网关和 `httpbin` 的 span 会有相同的 trace ID，因为它们属于同一个追踪。由于
    Ingress 网关是根 span，它不会有 `parentspanid`。在这个示例中，只有两个跳数，因此只有两个 span。如果有更多跳数，它们也都会生成
    B3 头部，因为 `x-b3-sampled` 的值是 `1`。
- en: You can find out more about these headers at [https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_conn_man/headers.html](https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_conn_man/headers.html).
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_conn_man/headers.html](https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_conn_man/headers.html)了解更多关于这些头部的信息。
- en: 'Now that you are familiar with `x-b3` headers injected by Istio, let’s deploy
    the sample `bookinfo` application and configure the Ingress. If you have not created
    a `Chapter7` namespace, then please do so with Istio injection enabled:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经熟悉了 Istio 注入的 `x-b3` 头部，让我们部署示例应用 `bookinfo` 并配置 Ingress。如果您还没有创建 `Chapter7`
    命名空间，请在启用 Istio 注入的情况下创建它：
- en: '[PRE28]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Note that `Chapter7/bookinfo-gateway.yaml` configures `bookshop.com` as the
    host; we did it so that it can run along with `sock-shop.com`. Once the Ingress
    configuration is deployed, you can access `bookinfo` using the external IP of
    the `istio-ingress` gateway service. Please use `/productpage` as the URI. Go
    ahead and make some requests to the `bookinfo` app, after which you can check
    the Jaeger dashboard and select **productpage.Chapter7** as the service. Once
    you have selected the service, you can click on **Find Traces**, which will then
    show a detailed view of the latest traces for the service:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`Chapter7/bookinfo-gateway.yaml` 将 `bookshop.com` 配置为主机；我们这样做是为了使其能够与 `sock-shop.com`
    一起运行。部署 Ingress 配置后，您可以通过 `istio-ingress` 网关服务的外部 IP 访问 `bookinfo`。请使用 `/productpage`
    作为 URI。接下来，您可以向 `bookinfo` 应用发送一些请求，然后查看 Jaeger 仪表盘，并选择 **productpage.Chapter7**
    作为服务。选择服务后，点击 **Find Traces**，然后将显示该服务的最新追踪的详细视图：
- en: '![Figure 7.20 – The Jaeger dashboard](img/B17989_07_20.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.20 – Jaeger 仪表盘](img/B17989_07_20.jpg)'
- en: Figure 7.20 – The Jaeger dashboard
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.20 – Jaeger 仪表盘
- en: A **trace** in Jaeger is a representation of a request execution and is composed
    of multiple **spans**; the trace records the path taken and traversed by a request.
    A trace is made up of multiple spans; a span represents a unit of work and is
    used to track specific operations made by a request. The first span represents
    the **root span**, which is a request from start to finish; each subsequent span
    provides a more in-depth context of what has happened in that part of the request
    execution.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Jaeger 中，**跟踪（trace）**是一个请求执行的表示，由多个 **span** 组成；跟踪记录了请求所经过的路径。一个跟踪由多个 span
    组成；每个 span 表示一个工作单元，用于跟踪请求所做的特定操作。第一个 span 表示 **根 span**，即请求的开始到结束；每个后续的 span
    提供了请求执行过程中该部分发生情况的更深入上下文。
- en: 'You can click on any of the traces on the dashboard. The following is an example
    of a trace with eight spans:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以点击仪表盘上的任何一个跟踪。以下是一个包含八个 spans 的跟踪示例：
- en: '![Figure 7.21 – Trace and spans in Jaeger](img/B17989_07_21.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.21 – Jaeger 中的跟踪和 spans](img/B17989_07_21.jpg)'
- en: Figure 7.21 – Trace and spans in Jaeger
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.21 – Jaeger 中的跟踪和 spans
- en: 'In the following screenshots, you can observe the following:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下截图中，你可以观察到以下内容：
- en: The request took 78.69 milliseconds in `istio-ingressgateway`, which is also
    the root span. The request was then forwarded to the `productpage` upstream service
    at port `9080`. If you look at the next child span, you will see that the time
    taken in `istio-ingressgateway` is 78.69 – 76.73 milliseconds = 1.96 milliseconds.
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求在 `istio-ingressgateway` 中花费了 78.69 毫秒，这也是根 span。请求随后被转发到位于端口 `9080` 的 `productpage`
    上游服务。如果你查看下一个子 span，你会发现 `istio-ingressgateway` 中花费的时间是 78.69 – 76.73 毫秒 = 1.96
    毫秒。
- en: '![Figure 7.22 – The root span of BookInfo](img/B17989_07_22.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.22 – BookInfo 的根 span](img/B17989_07_22.jpg)'
- en: Figure 7.22 – The root span of BookInfo
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.22 – BookInfo 的根 span
- en: The request was then received by the `productpage` service at 867 microseconds
    in the overall processing timeline. It took 76.73 milliseconds to process the
    request.
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求随后在整体处理时间轴的 867 微秒时被 `productpage` 服务接收。处理该请求花费了 76.73 毫秒。
- en: '![Figure 7.23 – The request arriving on the product page](img/B17989_07_23.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.23 – 请求到达产品页](img/B17989_07_23.jpg)'
- en: Figure 7.23 – The request arriving on the product page
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.23 – 请求到达产品页
- en: The `productpage` service did some processing between 867 microseconds and 5.84
    milliseconds, and after that, it invoked the `details` service at port `9080`.
    It took 12.27 milliseconds to make the round trip to the `details` service.
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`productpage` 服务在 867 微秒到 5.84 毫秒之间进行了处理，之后，它调用了位于端口 `9080` 的 `details` 服务。来回往返到
    `details` 服务花费了 12.27 毫秒。'
- en: '![Figure 7.24 – The request from the product page to the details service](img/B17989_07_24.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.24 – 从产品页到详情服务的请求](img/B17989_07_24.jpg)'
- en: Figure 7.24 – The request from the product page to the details service
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.24 – 从产品页到详情服务的请求
- en: The request was then received by the `details` service after 7.14 milliseconds,
    and it took 1.61 milliseconds to process the request.
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求在 7.14 毫秒后被 `details` 服务接收，并花费了 1.61 毫秒来处理该请求。
- en: '![Figure 7.25 – The request arriving at the details service](img/B17989_07_25.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.25 – 请求到达详情服务](img/B17989_07_25.jpg)'
- en: Figure 7.25 – The request arriving at the details service
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.25 – 请求到达详情服务
- en: 'I have not illustrated the rest of the spans, but I hope you get an idea of
    the benefits of doing this exercise. The example we just went through raises some
    intriguing observations:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我没有展示其余的 spans，但我希望你能了解进行此练习的好处。我们刚才讲解的示例引出了几个有趣的观察结果：
- en: By comparing the start time of the third and fourth spans, it is clear that
    it took 1.3 milliseconds for the request to depart from the product page and arrive
    on the details page
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过比较第三个和第四个 spans 的开始时间，可以清楚地看到，请求从产品页离开并到达详情页花费了 1.3 毫秒。
- en: The details page took only 1.6 milliseconds to process the request, but it took
    12.27 milliseconds for the product page to receive the request and send it to
    the details page, which highlights some inefficiencies in the product page implementation
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 详情页只用了 1.6 毫秒来处理请求，但产品页接收到请求并将其发送到详情页却花费了 12.27 毫秒，这突显了产品页实现中的一些低效。
- en: You can explore further by clicking on the dropdown in the top-right corner
    of the dashboard.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过点击仪表盘右上角的下拉菜单来进一步探索。
- en: '![Figure 7.26 – Other options to see the tracing details](img/B17989_07_26.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.26 – 查看跟踪详情的其他选项](img/B17989_07_26.jpg)'
- en: Figure 7.26 – Other options to see the tracing details
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.26 – 查看追踪详情的其他选项
- en: 'The **Trace Spans Table** option is very useful in presenting a summarized
    view of the time taken by multiple spans to process requests:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '**Trace Spans Table** 选项在呈现多个跨度处理请求所花时间的摘要视图时非常有用：'
- en: '![Figure 7.27 – The trace span table in Jaeger](img/B17989_07_27.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.27 – Jaeger 中的追踪跨度表](img/B17989_07_27.jpg)'
- en: Figure 7.27 – The trace span table in Jaeger
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.27 – Jaeger 中的追踪跨度表
- en: 'Tracing comes at the cost of performance, and it is not ideal to trace all
    requests because they will cause performance degradation. We installed Istio in
    a demo profile, which by default samples all requests. This can be controlled
    by the following configuration map:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 追踪会带来性能损耗，因此不适合追踪所有请求，因为它们会导致性能下降。我们以 demo 配置文件安装了 Istio，默认情况下会采样所有请求。这可以通过以下配置映射来控制：
- en: '[PRE29]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'You can control the sampling rate by providing the correct value for `sampling`
    in `tracing`:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过为 `tracing` 中的 `sampling` 提供正确的值来控制采样率：
- en: '[PRE30]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This can also be controlled at the deployment level – for example, we can configure
    the product page to sample only 1% of the requests by adding the following to
    `bookinfo.yaml`:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 这也可以在部署级别进行控制——例如，我们可以通过在 `bookinfo.yaml` 中添加以下内容来配置产品页面仅对 1% 的请求进行采样：
- en: '[PRE31]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The entire configuration is available in `Chapter7/bookinfo-samplingdemo.yaml`.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 整个配置文件可以在 `Chapter7/bookinfo-samplingdemo.yaml` 中找到。
- en: In this section, we learned about how distributed tracing can be performed using
    Jaeger without making any changes in the application code, provided your application
    can forward `x-b3` headers.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们了解了如何使用 Jaeger 执行分布式追踪，而无需在应用程序代码中进行任何更改，前提是你的应用程序能够转发 `x-b3` 头信息。
- en: Summary
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we read about how Istio makes systems observable by generating
    various telemetry data. Istio provides various metrics that can then be used by
    Istio operators to fine-tune and optimize a system. This is all achieved by Envoy,
    which generates various metrics that are then scraped by Prometheus.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了 Istio 如何通过生成各种遥测数据使系统可观察。Istio 提供了各种度量指标，这些指标可以被 Istio 操作员用来对系统进行微调和优化。这一切都是通过
    Envoy 实现的，Envoy 生成的各种度量数据随后被 Prometheus 抓取。
- en: Istio allows you to configure new metrics as well as add new dimensions to existing
    metrics. You learned how to use Prometheus to query various metrics using PromQL
    and build queries that can provide insight into your system, as well as business
    operations. We later installed Grafana to visualize the metrics collected by Prometheus,
    even though there are a number of out-of-the-box dashboards provided for Istio,
    and you can easily add new dashboards, configure alerts, and create policies on
    how these alerts should be distributed.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: Istio 允许你配置新的度量指标，以及为现有的度量指标添加新的维度。你已经学习了如何使用 Prometheus 通过 PromQL 查询各种度量指标，并构建可以提供系统以及业务运营洞察的查询。随后，我们安装了
    Grafana 来可视化 Prometheus 收集的度量指标，尽管 Istio 提供了多个开箱即用的仪表盘，你也可以轻松添加新的仪表盘，配置告警，并创建如何分发这些告警的策略。
- en: Finally, we installed Jaeger to perform distributed tracing to understand how
    a request is processed in a distributed system, and we did all this without needing
    to modify the application code. This chapter provides the foundational understanding
    of how Istio makes systems observable, resulting in systems that are not only
    healthy but also optimal.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们安装了 Jaeger 来执行分布式追踪，以了解请求在分布式系统中的处理过程，并且我们做这一切时不需要修改应用程序代码。本章提供了对 Istio
    如何使系统可观察的基础理解，从而实现不仅健康而且最优的系统。
- en: In the next chapter, we will learn about the various issues you may face when
    operating Istio and how to troubleshoot them.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习在操作 Istio 时可能遇到的各种问题以及如何进行故障排除。
- en: 'Part 3: Scaling, Extending,and Optimizing'
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 3 部分：扩展、扩展与优化
- en: This part takes you into advanced topics of Istio. You will read about various
    architectures for deploying Istio to production environments. You will also explore
    various options to extend the Istio data plane and learn why it is a very useful
    and powerful feature of Istio. Istio provides great flexibility for virtual machine-based
    workloads so, in this part, you will read about how to extend Istio to virtual
    machines. Toward the end of this part, you will read various tips for troubleshooting
    Istio and best practices to operate and configure Istio in production. We will
    finish the book by summarizing what we have learned and applying this to another
    sample application, along with discussing eBPF and how you can learn more about
    Istio. The appendix provides you with valuable details about other Service Mesh
    technologies and will help you get comparable knowledge of Istio in regard to
    other options.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分带你深入学习Istio的高级主题。你将了解部署Istio到生产环境的各种架构。你还将探索扩展Istio数据平面的不同选项，并学习为什么这是Istio非常有用和强大的功能。Istio为基于虚拟机的工作负载提供了极大的灵活性，因此，在本部分中，你将阅读如何将Istio扩展到虚拟机。接近本部分结尾时，你将学习如何排除Istio故障以及在生产环境中操作和配置Istio的最佳实践。最后，我们将总结所学内容，并将其应用到另一个示例应用中，同时讨论eBPF以及如何进一步了解Istio。附录将提供有关其他服务网格技术的宝贵信息，并帮助你获得与其他选项相比的Istio相关知识。
- en: 'This part contains the following chapters:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包含以下章节：
- en: '*Chapter 8*, *Scaling Istio to Multiple Clusters Deployments A Kubernetes*'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第8章*，*将Istio扩展到多个集群的部署——一个Kubernetes的案例*'
- en: '*Chapter 9*, *Extending Istio Data Plane*'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第9章*，*扩展Istio数据平面*'
- en: '*Chapter 10*, *Deploying Istio Service Mesh for Non-Kubernetes Workloads*'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第10章*，*为非Kubernetes工作负载部署Istio服务网格*'
- en: '*Chapter 11*, *Troubleshooting and Operating Istio*'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第11章*，*排除故障与操作Istio*'
- en: '*Chapter 12*, *Summarizing What We Have Learned and Next Steps*'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第12章*，*总结我们所学的内容与下一步计划*'

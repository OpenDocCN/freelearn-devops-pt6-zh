- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Deploying Istio Service Mesh for Non-Kubernetes Workloads
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为非Kubernetes工作负载部署Istio服务网格
- en: Istio and Kubernetes are technologies that complement each other. Kubernetes
    solves the problem of managing distributed applications packaged as containers
    isolated from each other and deployed in a consistent environment with dedicated
    resources. Although Kubernetes solves container deployment, scheduling, and management,
    it doesn’t solve traffic management between containers. Istio complements Kubernetes
    by providing traffic management capabilities, adding observability, and enforcing
    a zero-trust security model.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Istio和Kubernetes是互补的技术。Kubernetes解决了将分布式应用程序以容器形式打包、相互隔离并在具有专用资源的统一环境中部署的问题。尽管Kubernetes解决了容器的部署、调度和管理问题，但它并没有解决容器之间的流量管理问题。Istio通过提供流量管理能力、增加可观察性并执行零信任安全模型，补充了Kubernetes。
- en: Istio is like a sidecar to Kubernetes; having said that, Kubernetes is a fairly
    new technology that got mainstream adoption approximately around 2017\. From 2017
    onward, most enterprises have used Kubernetes when building microservices and
    other cloud-native applications, but there are still many applications that are
    not built on Kubernetes and/or not migrated to Kubernetes; such applications are
    traditionally deployed on **virtual machines** (**VMs**). VMs are not just limited
    to traditional data centers but are also a mainstream offering from cloud providers.
    Organizations end up having this parallel universe of Kubernetes-based applications
    and VM-based applications deployed across the cloud and on-premises.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Istio像是Kubernetes的边车；话虽如此，Kubernetes是一项相对较新的技术，大约在2017年左右开始广泛应用。从2017年开始，大多数企业在构建微服务和其他云原生应用程序时使用Kubernetes，但仍有许多应用程序没有基于Kubernetes构建或迁移到Kubernetes；这些应用程序通常部署在**虚拟机**（**VM**）上。虚拟机不仅限于传统数据中心，而且也是云服务提供商的主流产品。组织最终会有一个基于Kubernetes的应用程序和基于虚拟机的应用程序并行部署在云端和本地的数据中心。
- en: 'In this chapter, we will read about how Istio helps to marry these two worlds
    of legacy and modern technologies and how can you extend Service Mesh beyond Kubernetes.
    In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习Istio如何帮助将传统技术与现代技术结合起来，以及如何将服务网格扩展到Kubernetes之外。在本章中，我们将涵盖以下主题：
- en: Examining hybrid architecture
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查混合架构
- en: Setting up a Service Mesh for hybrid architecture
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为混合架构设置服务网格
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Using the following commands, we will set up the infrastructure in Google Cloud
    that will be used for hands-on exercises:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令，我们将在Google Cloud中设置基础设施，以供动手练习使用：
- en: 'Create a Kubernetes cluster:'
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个Kubernetes集群：
- en: '[PRE0]'
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create a VM:'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建虚拟机：
- en: '[PRE1]'
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Check your `kubectl` file to find the cluster name and set `context` appropriately:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查你的`kubectl`文件以找到集群名称，并适当设置`context`：
- en: '[PRE2]'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Access the created server using **SSH** from the Google Cloud dashboard – you
    will find the **SSH** option in the bottom-right corner, as shown in the following
    screenshot:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Google Cloud仪表盘中的**SSH**访问已创建的服务器——你可以在右下角找到**SSH**选项，如下图所示：
- en: '![Figure 10.1 – Google Cloud dashboard](img/B17989_10_01.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![图10.1 – Google Cloud仪表盘](img/B17989_10_01.jpg)'
- en: Figure 10.1 – Google Cloud dashboard
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.1 – Google Cloud仪表盘
- en: 'Click on **SSH**, which will open **SSH-in-browser**, as shown in the following
    figure:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**SSH**，这将打开**SSH浏览器**，如下图所示：
- en: '![Figure 10.2 – SSH-in-browser](img/B17989_10_02.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图10.2 – SSH浏览器](img/B17989_10_02.jpg)'
- en: Figure 10.2 – SSH-in-browser
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.2 – SSH浏览器
- en: 'Find the username and then SSH from your terminal:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找用户名，然后从终端使用SSH：
- en: '[PRE3]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Set up the firewall to allow traffic between the Kubernetes cluster and VM
    using the following steps:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置防火墙以允许Kubernetes集群和虚拟机之间的流量，具体步骤如下：
- en: 'Find the **Classless Inter-Domain Routing** (**CIDR**) of the cluster:'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找集群的**无类域间路由**（**CIDR**）：
- en: '[PRE4]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create firewall rules:'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建防火墙规则：
- en: '[PRE5]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: That’s all you need for the upcoming sections. We will first explore some fundamentals
    and then go through the actual setup.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是接下来部分所需的所有内容。我们将首先探索一些基础知识，然后进行实际设置。
- en: Examining hybrid architecture
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查混合架构
- en: 'As mentioned in the introduction of this chapter, organizations have adopted
    Kubernetes and they run microservices and various other workloads as containers,
    but not all workloads are suitable for containers. So, organizations have to live
    with following a hybrid architecture:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如本章介绍所述，组织已经采用Kubernetes并运行微服务及其他各种工作负载作为容器，但并非所有工作负载都适合容器。因此，组织必须遵循混合架构：
- en: '![Figure 10.3 – Hybrid architecture](img/B17989_10_03.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.3 – 混合架构](img/B17989_10_03.jpg)'
- en: Figure 10.3 – Hybrid architecture
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.3 – 混合架构
- en: 'Appliances and legacy applications are usually deployed on bare metal servers.
    Monolithic applications, as well as several **commercial off-the-shelf** (**COTS**)
    applications, are deployed on VMs. Modern applications, as well as self-developed
    applications based on microservices architecture, are deployed as containers that
    are managed and orchestrated by platforms such as Kubernetes. All three deployment
    models – that is, bare metal, VMs, and containers – are spread across traditional
    data centers and various cloud providers. This intermingling of various application
    architectures and deployment patterns causes various problems:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 设备和传统应用通常部署在裸机服务器上。单体应用程序以及一些**商业现成软件**（**COTS**）应用程序部署在虚拟机上。现代应用程序以及基于微服务架构的自研应用程序则作为容器部署，这些容器由Kubernetes等平台进行管理和编排。所有三种部署模式——即裸机、虚拟机和容器——分布在传统数据中心和各种云提供商之间。这些不同的应用架构和部署模式的交织引发了各种问题：
- en: Management of traffic flows between the Service Mesh and VM is challenging because
    neither of them has any idea of the other’s existence
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务网格与虚拟机（VM）之间的流量管理具有挑战性，因为它们彼此之间完全没有概念。
- en: No operational visibility of application traffic between VM applications and
    applications within the Service Mesh
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无法查看虚拟机应用和服务网格内应用之间的流量操作。
- en: Inconsistent governance of VMs and applications within the Service Mesh because
    there is no consistent way of defining and applying security policies for VM apps
    and apps within the mesh
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务网格内虚拟机和应用程序的治理不一致，因为没有统一的方式来定义和应用虚拟机应用和网格内应用的安全策略。
- en: 'The following is an example of how traffic flows in an environment with a VM
    and Service Mesh:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是虚拟机和服务网格环境中流量流动的示例：
- en: '![Figure 10.4 – Traffic across Service Mesh and VM is managed separately](img/B17989_10_04.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.4 – 服务网格和虚拟机之间的流量管理是分开的](img/B17989_10_04.jpg)'
- en: Figure 10.4 – Traffic across Service Mesh and VM is managed separately
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.4 – 服务网格和虚拟机之间的流量管理是分开的
- en: A VM is treated as a separate universe. Developers have to choose one of the
    deployment patterns because they can’t have system components spread across VMs
    and containers. This is okay for legacy systems but when building applications
    based on microservice architecture, it is constraining to choose between VMs and
    containers. For example, your system may need a database that might be best suited
    for VM-based deployment, whereas the rest of the application might be well suited
    for container-based deployment. Although there are many traditional solutions
    to route traffic between the Service Mesh and VM, doing so results in disparate
    networking solutions. Luckily, Istio provides options to establish a Service Mesh
    for VMs. The solution is to abstract VMs under Istio constructs so that the Service
    Mesh operator can operate the network between containers and VMs consistently.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟机被视为一个独立的宇宙。开发者必须选择其中一种部署模式，因为他们不能将系统组件分布在虚拟机和容器之间。这对于传统系统来说是可以接受的，但在基于微服务架构构建应用程序时，选择虚拟机和容器之间的限制性决策会成为约束。例如，你的系统可能需要一个数据库，虚拟机部署可能更适合，而应用程序的其他部分可能更适合容器部署。尽管有很多传统的解决方案可以在服务网格和虚拟机之间路由流量，但这样做会导致不同的网络解决方案。幸运的是，Istio提供了为虚拟机建立服务网格的选项。解决方案是将虚拟机抽象为Istio构造，使得服务网格运维人员能够在容器和虚拟机之间一致地操作网络。
- en: In the next section, we will learn how to configure a Service Mesh for VMs.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何为虚拟机配置服务网格。
- en: Setting up a Service Mesh for hybrid architecture
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为混合架构设置服务网格
- en: In this section, we will set up the Service Mesh. But first, let’s look at the
    steps at a high level in the *Overview of the setup* section and then perform
    implementation in the *Setting up a demo app on a virtual* *machine* section.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将设置服务网格。但首先，让我们先从*设置概览*部分高层次地看一下步骤，然后在*在虚拟* *机上设置演示应用程序*部分进行实现。
- en: Overview of the setup
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置概览
- en: '**Envoy** is a great networking software and an excellent reverse proxy; it
    is also widely adopted as a standalone reverse proxy. **Solo.io** and a few others
    have built API gateway solutions using Envoy, and **Kong Inc.** has both Kong
    Mesh and Kuma Service Mesh technologies, which make use of Envoy as sidecars for
    the data plane.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**Envoy**是一款出色的网络软件，也是一个优秀的反向代理；它也被广泛采用作为独立的反向代理。**Solo.io**和一些其他公司使用Envoy构建了API网关解决方案，**Kong
    Inc.**拥有Kong Mesh和Kuma Service Mesh技术，利用Envoy作为数据平面的边车。'
- en: Envoy, when deployed as a sidecar, has no idea about being a sidecar; it communicates
    to `istiod` via the xDS protocols. Istio `init` bootstraps Envoy with the right
    configuration and details about `istiod`, and sidecar injection mounts the right
    certificates, which are then used by Envoy to authenticate itself with `istiod`;
    once bootstrapped, it keeps fetching correct configurations via xDS APIs.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当Envoy作为边车部署时，它并不知道自己是一个边车；它通过xDS协议与`istiod`通信。Istio `init`用正确的配置和有关`istiod`的详细信息启动Envoy，并且边车注入将正确的证书挂载，这些证书随后由Envoy用于与`istiod`进行身份验证；一旦启动，它会通过xDS
    API持续获取正确的配置。
- en: 'Based on the same concepts, Istio packages Envoy as a sidecar for VMs. An Istio
    operator will need to perform the steps shown in the following figure to include
    a VM into the Service Mesh:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 基于相同的概念，Istio将Envoy打包为虚拟机的边车。Istio操作员需要执行以下图示的步骤，将虚拟机包含到服务网格中：
- en: '![Figure 10.5 – Steps to include VM into the mesh](img/B17989_10_05.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图10.5 – 将虚拟机加入网格的步骤](img/B17989_10_05.jpg)'
- en: Figure 10.5 – Steps to include VM into the mesh
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.5 – 将虚拟机加入网格的步骤
- en: 'The following is a brief overview of the steps we will be implementing in the
    next section:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们将在下一节中实施的步骤的简要概述：
- en: For the VM sidecar to access the Istio control plane, we need to expose `istiod`
    via the east-west gateway. So, we install another Ingress gateway for east-west
    traffic purposes.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使虚拟机边车能够访问Istio控制平面，我们需要通过东西向网关暴露`istiod`。因此，我们安装另一个Ingress网关，用于东西向流量。
- en: We expose `istiod` services via the east-west gateway. This and the previous
    step are similar to the steps required for a multi-cluster Service Mesh setup,
    as discussed in *Chapter 8*.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们通过东西向网关暴露`istiod`服务。这一步和前一步类似于多集群服务网格设置中所需的步骤，正如*第8章*中所讨论的那样。
- en: The sidecar in the VM needs to access the Kubernetes API server but because
    the VM isn’t part of the cluster, it does not have access to **Kubernetes credentials**.
    To solve that problem, we will manually create a service account in Kubernetes
    for the VM sidecar to access the API server. We are doing it manually here, but
    it can be automated using an external credential management service such as **HashiCorp
    Vault**.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 虚拟机中的边车需要访问Kubernetes API服务器，但由于虚拟机不属于集群，因此无法访问**Kubernetes凭证**。为了解决这个问题，我们将手动在Kubernetes中为虚拟机边车创建一个服务账户，以便它能够访问API服务器。我们在这里手动执行，但可以通过使用像**HashiCorp
    Vault**这样的外部凭证管理服务来自动化此过程。
- en: The next step is the creation of the Istio `WorkloadGroup` provides specifications
    that are used by sidecars to bootstrap themselves. It can be shared by collections
    of VMs that are running similar types of workloads. In `WorkloadGroup`, you define
    labels through which the workload will be identified in Kubernetes as well as
    other nuances, such as what ports are exposed, the service account to be used,
    and various health check probes. To some extent, `WorkloadGroup` is similar to
    deployment descriptors in Kubernetes. We will look at it in more detail in the
    next section during the setup.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是创建Istio `WorkloadGroup`，它提供了由边车（sidecar）使用的启动配置。它可以被运行相似工作负载的虚拟机集合共享。在`WorkloadGroup`中，您定义通过标签来标识工作负载在Kubernetes中的信息，以及其他细节，如暴露的端口、使用的服务账户以及各种健康检查探针。在某种程度上，`WorkloadGroup`类似于Kubernetes中的部署描述符。我们将在下一节的设置中更详细地了解它。
- en: The operator needs to manually generate the configuration that will be used
    to configure the VM and the sidecar. This step has some challenges when it comes
    to generating configuration for auto-scalable VMs.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 操作员需要手动生成用于配置虚拟机和边车的配置文件。对于自动扩展虚拟机来说，生成配置文件时会面临一些挑战。
- en: In this step, we need to copy the configuration from previous step to the VM
    at set locations.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这一步中，我们需要将上一步骤中的配置复制到虚拟机的指定位置。
- en: The Istio sidecar needs to be installed.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 需要安装Istio边车。
- en: Finally, the Istio sidecar needs to be started and some checks performed to
    ensure that it has picked up the configuration created in *step 5*.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，需要启动Istio侧车，并进行一些检查以确保它已经采纳了在*步骤5*中创建的配置。
- en: 'Once the Istio sidecar is started, it will intercept the outgoing traffic and
    route it according to the Service Mesh rules as long as the target service endpoints,
    which can be VMs or Kubernetes Pods, are on the same network. The Ingress gateway
    is fully aware of the VM workload and can route traffic, and the same applies
    to any traffic inside the mesh, as shown in the following figure:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Istio侧车启动，它将拦截出去的流量并根据服务网格规则进行路由，只要目标服务端点（可以是虚拟机或Kubernetes Pod）在同一网络中，Ingress网关就能完全识别虚拟机工作负载并进行路由，网格内的任何流量也适用，具体如下图所示：
- en: '![Figure 10.6 – VM workload treated similarly to other workloads in the mesh](img/B17989_10_06.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.6 – 虚拟机工作负载与网格中其他工作负载的处理方式相同](img/B17989_10_06.jpg)'
- en: Figure 10.6 – VM workload treated similarly to other workloads in the mesh
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.6 – 虚拟机工作负载与网格中其他工作负载的处理方式相同
- en: '**Pod connectivity** assumes that the cluster network uses the same address
    space as standalone machines. For cloud-managed Kubernetes (Google GKE and Amazon
    EKS), it is the default networking mode, but for self-managed clusters, you need
    a networking subsystem such as Calico to implement a flat routable network address
    space. In the next section, we will perform the setup of Istio on VMs, so roll
    up your sleeves and make sure that you have completed the tasks described in the
    *Technical* *requirements* section.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**Pod连接性**假定集群网络使用与独立机器相同的地址空间。对于云托管的Kubernetes（Google GKE和Amazon EKS），这是默认的网络模式，但对于自托管的集群，需要使用Calico等网络子系统来实现一个平面可路由的网络地址空间。在下一节中，我们将执行Istio在虚拟机上的设置，因此请卷起袖子，并确保完成*技术要求*部分中描述的任务。'
- en: Setting up a demo app on a VM
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在虚拟机上设置一个演示应用程序
- en: 'We will first install an application on the VM to mimic a VM workload/application
    that we can use for testing the overall setup. To do this, we need to perform
    the following steps:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先在虚拟机上安装一个应用程序，模拟一个虚拟机工作负载/应用程序，用于测试整体设置。为此，我们需要执行以下步骤：
- en: 'Set up Envoy on the VM. Follow the instructions as provided by Envoy at [https://www.envoyproxy.io/docs/envoy/latest/start/install](https://www.envoyproxy.io/docs/envoy/latest/start/install)
    for the operating system you selected for creating the VM. This can be done as
    follows:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在虚拟机上设置Envoy。按照Envoy提供的[https://www.envoyproxy.io/docs/envoy/latest/start/install](https://www.envoyproxy.io/docs/envoy/latest/start/install)中的操作系统安装说明进行设置，选择用于创建虚拟机的操作系统。可以按如下方式进行：
- en: 'Install `envoy`, as shown in the following code block:'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装`envoy`，如以下代码块所示：
- en: '[PRE6]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Configure Envoy to run a dummy application:'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置Envoy以运行虚拟应用程序：
- en: Using `envoy-demo.yaml` and copy the contents of `Chapter4/envoy-config-2.yaml`.
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`envoy-demo.yaml`并复制`Chapter4/envoy-config-2.yaml`的内容。
- en: 'Check that the contents of `envoy-demo.yaml` match what you have copied or
    created.*   Run `envoy` with the config provided in `envoy-demo.yaml`:'
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查`envoy-demo.yaml`的内容是否与您复制或创建的内容一致。*   使用在`envoy-demo.yaml`中提供的配置运行`envoy`：
- en: '[PRE8]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Test that the application is running on the VM:'
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试应用程序是否在虚拟机（VM）上运行：
- en: '[PRE9]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: With an application running on the VM, we can now proceed with the rest of the
    setup. Please note that it is not mandatory to set up the application before installing
    Istio on the VM. You can install the demo application on the VM at any time before
    or after setting up the Istio sidecar on the VM.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在虚拟机上运行应用程序后，我们可以继续进行其余设置。请注意，在虚拟机上安装Istio之前，设置应用程序并非强制性的。您可以在安装Istio侧车前或后随时在虚拟机上安装演示应用程序。
- en: Setting up Istio in the cluster
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在集群中设置Istio
- en: 'We are assuming that you don’t have Istio running in the cluster, but if you
    have, then you can skip this section. Use the following steps to set it up:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 假设集群中没有运行Istio，但如果有的话，可以跳过本节。使用以下步骤进行设置：
- en: 'Configure the `IstioOperator` config file for installation, providing the cluster
    and network names. The file is also available at `Chapter10/01-Cluster1.yaml`:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置`IstioOperator`配置文件进行安装，提供集群和网络名称。该文件也可以在`Chapter10/01-Cluster1.yaml`中找到：
- en: '[PRE10]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Install Istio, as shown in the following code block:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Istio，如以下代码块所示：
- en: '[PRE11]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This concludes the basic installation of Istio in the cluster. Next, we will
    configure Istio to make it ready for integration with Istio on the VM.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这标志着Istio在集群中的基础安装完成。接下来，我们将配置Istio，使其为与虚拟机上的Istio集成做好准备。
- en: Configuring the Kubernetes cluster
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置Kubernetes集群
- en: 'In this section, we will prepare the mesh for integration with Istio on VMs:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将为与虚拟机上的Istio集成准备网格：
- en: 'Install the east-west gateway to expose the `istiod` validation webhook and
    services:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装东西向网关以暴露`istiod`验证Webhook和服务：
- en: '[PRE12]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Expose the `istiod` services:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 暴露`istiod`服务：
- en: '[PRE13]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create a service account by following these steps:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下步骤创建服务帐户：
- en: 'Create a namespace to host `WorkloadGroup` and `ServiceAccount`:'
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个命名空间来托管`WorkloadGroup`和`ServiceAccount`：
- en: '[PRE14]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Set up `WorkloadGroup` as follows:'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按如下方式设置`WorkloadGroup`：
- en: 'Use the following configuration to create a workload template; the file is
    also available at `Chapter10/01-WorkloadGroup.yaml`:'
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下配置创建工作负载模板；该文件也可在`Chapter10/01-WorkloadGroup.yaml`中找到：
- en: '[PRE16]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Apply the configuration. This template will be used by Istio to create workload
    entries representing the workload running on the VM:'
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用配置。此模板将被Istio用于创建表示虚拟机上运行工作负载的工作负载条目：
- en: '[PRE17]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Before moving to the next section, let’s inspect the contents of `WorkloadGroup.yaml`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在进入下一部分之前，让我们检查一下`WorkloadGroup.yaml`的内容。
- en: '`WorkloadGroup` is a way to define the characteristics of the workload hosted
    in the VM and is similar to deployments in Kubernetes. `WorkloadGroup` has the
    following configuration:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`WorkloadGroup`是一种定义托管在虚拟机上工作负载特征的方式，类似于Kubernetes中的部署。`WorkloadGroup`具有以下配置：'
- en: '`metadata`: This is primarily used for defining Kubernetes labels to identify
    the workloads. We have set up an `app` label with the value of `envoydummy`, which
    we can use in the Kubernetes service description to identify the endpoints to
    be abstracted by service definitions.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`metadata`：这主要用于定义Kubernetes标签以标识工作负载。我们设置了一个值为`envoydummy`的`app`标签，您可以在Kubernetes服务描述中使用该标签来标识将被服务定义抽象化的端点。'
- en: '`template`: This defines the values that will be copied over to the `WorkloadEntry`
    configuration generated by the Istio agent. The two most important values are
    the service account name and network name. `ServiceAccount` specifies the account
    name whose token will be used to generate workload identities. The network name
    is used to group endpoints based on their network location and to understand which
    endpoints are directly reachable from each other and which ones need to be connected
    via the east-west gateway, like the ones we set up for a multi-cluster environment
    in *Chapter 8*. In this instance, we have allocated the value of `network1`, which
    is the same as what we configure in `01-cluster1.yaml` (that is `cluster1`) and
    the VM are on the same network and directly reachable to each other, so we don’t
    need any special provisions for connecting them.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`template`：这定义了将被复制到由Istio代理生成的`WorkloadEntry`配置中的值。最重要的两个值是服务帐户名称和网络名称。`ServiceAccount`指定将用于生成工作负载身份的帐户名称。网络名称用于根据其网络位置对端点进行分组，并了解哪些端点可以直接相互访问，哪些端点需要通过东西向网关连接，就像我们在*第8章*中为多集群环境设置的那样。在这个实例中，我们已分配了`network1`的值，这与我们在`01-cluster1.yaml`中配置的（即`cluster1`）相同，而且虚拟机在同一网络上，彼此可以直接访问，因此我们不需要为它们连接做任何特别的安排。'
- en: '`probe`: This is the configuration to be used to understand the health and
    readiness of the VM workload. Traffic is not routed to unhealthy workloads, providing
    a resilient architecture. In this instance, we are configuring to perform an HTTP
    `Get` probe with a delay of 1 second after the creation of `WorkloadEntry` and
    then at regular intervals of 5 seconds. You can also define success and failure
    thresholds, for which the default values are `1` and `3` seconds, respectively.
    We have configured that the endpoint on the VM is exposed on port `10000` on the
    `root` path and it should be used to determine the health of the application.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`probe`：这是用来了解虚拟机工作负载的健康状况和准备情况的配置。流量不会路由到不健康的工作负载，从而提供了一个有韧性的架构。在这个实例中，我们配置了在创建`WorkloadEntry`后进行一次HTTP
    `Get`探测，延迟1秒，然后每5秒进行一次定期探测。你还可以定义成功和失败的阈值，默认值分别为`1`秒和`3`秒。我们已配置虚拟机上的端点暴露在`10000`端口，路径为`root`，并且应该用于确定应用程序的健康状况。'
- en: Next, let’s get started with setting up Istio on a VM.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们开始在虚拟机上设置Istio。
- en: Setting up Istio on a VM
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在虚拟机上设置Istio
- en: 'To configure and set up Istio on a VM, we will need to perform the following
    steps:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在虚拟机上配置和设置Istio，我们需要执行以下步骤：
- en: 'Generate a configuration for the Istio sidecar:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为Istio边车生成配置：
- en: '[PRE18]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This will generate the following five files in the current directory:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在当前目录下生成以下五个文件：
- en: '[PRE19]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Copy all files to the VM home directory first, and then copy them to various
    folders, as shown in the following code block:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先将所有文件复制到虚拟机的主目录，然后将它们复制到各个文件夹，如以下代码块所示：
- en: '[PRE20]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Install the Istio VM integration runtime. Download and install the package
    from [https://storage.googleapis.com/istio-release/releases/](https://storage.googleapis.com/istio-release/releases/):'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Istio VM集成运行时。从[https://storage.googleapis.com/istio-release/releases/](https://storage.googleapis.com/istio-release/releases/)下载并安装该软件包：
- en: '[PRE21]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Start the Istio agent on the VM and then check the status:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在虚拟机上启动Istio代理，然后检查其状态：
- en: '[PRE22]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This completes the installation and configuration of the Istio sidecar on the
    VM.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了Istio侧车代理在虚拟机上的安装和配置。
- en: 'Next, verify that `WorkloadEntry` is created in the `chapter10vm` namespace:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，验证`WorkloadEntry`是否已在`chapter10vm`命名空间中创建：
- en: '[PRE23]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '`WorkloadEntry` is automatically created and is a sign that the VM has onboarded
    itself successfully into the mesh. It describes the properties of the application
    running on the VM and inherits the template from the `WorkloadGroup` configuration.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`WorkloadEntry`会自动创建，表示虚拟机已成功加入网格。它描述了虚拟机上运行的应用程序的属性，并继承了`WorkloadGroup`配置中的模板。'
- en: 'Inspect the contents of `WorkloadEntry` using the following code block:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码块检查`WorkloadEntry`的内容：
- en: '[PRE24]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '`WorkloadEntry` contains the following values:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`WorkloadEntry`包含以下值：'
- en: '`address`: This is the network address at which the application is running
    on the VM. This can also be DNS names. In this instance, the VM’s private IP is
    `10.152.0.21`.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`address`：这是应用在虚拟机上运行的网络地址，也可以是DNS名称。在这个例子中，虚拟机的私有IP是`10.152.0.21`。'
- en: '`labels`: These are inherited from the `WorkloadGroup` definition and are used
    to identify endpoints selected by service definitions.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`labels`：这些标签继承自`WorkloadGroup`定义，用于标识由服务定义选择的端点。'
- en: '`locality`: In a multi-data center, this field is used to identify the location
    of the workload at the rack level. This field is used for locality/proximity-based
    load balancing.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`locality`：在多数据中心中，此字段用于标识工作负载在机架层级的位置。该字段用于基于位置/邻近性的负载均衡。'
- en: '`network`: This value is inherited from the `WorkloadGroup` entry.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`network`：该值继承自`WorkloadGroup`条目。'
- en: '`serviceAccount`: This value is inherited from the `WorkloadGroup` entry.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`serviceAccount`：该值继承自`WorkloadGroup`条目。'
- en: '`status`: This value specifies the health of the application.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`status`：该值指定应用程序的健康状况。'
- en: By now, we have configured the Istio agent on a VM and have verified that the
    agent can communicate with Istiod. In the next section, we will integrate the
    workload on the VM with the mesh.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经在虚拟机上配置了Istio代理，并验证了代理可以与Istiod通信。在下一节中，我们将把虚拟机上的工作负载与网格集成。
- en: Integrating the VM workload with the mesh
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将虚拟机工作负载与网格集成
- en: 'Let’s get started with performing configurations so that the mesh can route
    traffic to workloads running on the VM:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始进行配置，以便网格能够将流量路由到在虚拟机上运行的工作负载：
- en: 'Expose the `envoydummy` app on the VM as a Kubernetes service using the following
    code block:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码块，将`envoydummy`应用暴露为虚拟机上的Kubernetes服务：
- en: '[PRE25]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The configuration is standard, and it treats the VM as a Pod that needs to
    be exposed by a service. Notice the labels, which match the metadata values in
    `WorkloadGroup` definitions. When defining the service, just assume that the VM
    is nothing other than a Kubernetes Pod as defined in the `WorkloadGroup` configuration
    file. The service description file is available at `Chapter10/01-istio-gateway.yaml`.
    Apply the configuration using the following command:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 配置是标准的，它将虚拟机视为需要通过服务暴露的Pod。请注意标签，它们与`WorkloadGroup`定义中的元数据值匹配。在定义服务时，只需假设虚拟机不过是如`WorkloadGroup`配置文件中定义的Kubernetes
    Pod。服务描述文件位于`Chapter10/01-istio-gateway.yaml`。使用以下命令应用配置：
- en: '[PRE26]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Next, we will deploy version v1 of the `envoydummy` application in the Kubernetes
    cluster:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将在Kubernetes集群中部署`envoydummy`应用的v1版本：
- en: '[PRE27]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Notice the `route` configuration in `01-istio-gateway.yaml`:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`01-istio-gateway.yaml`中的`route`配置：
- en: '[PRE28]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: We are routing half of the traffic to `envoydummy.chapter10vm.svc.cluster.local`,
    which represents the application running in the VM, and the other half to `envoydummy.chapter10.svc.cluster.local`,
    which represents the application running in the Kubernetes cluster.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将一半的流量路由到`envoydummy.chapter10vm.svc.cluster.local`，它代表在虚拟机上运行的应用，另一半路由到`envoydummy.chapter10.svc.cluster.local`，它代表在Kubernetes集群中运行的应用。
- en: 'We have configured all the steps for the integration of the VM workload with
    the mesh. To test the connectivity and DNS resolution of the VM, run the following
    command from the VM:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经配置好了将虚拟机工作负载与网格集成的所有步骤。要测试虚拟机的连接性和 DNS 解析，请从虚拟机中运行以下命令：
- en: '[PRE29]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This shows that the VM is cognizant of endpoints exposed in the Service Mesh.
    You can do it the other way round, from the Kubernetes cluster of the `curl` Pod
    described in the `utilities` folders in the GitHub repository of this book, please
    make sure that it is part of the mesh and not just a Pod running on Kubernetes.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明虚拟机已经识别出服务网格中暴露的端点。你也可以反向操作，从本书 GitHub 仓库中`utilities`文件夹描述的 `curl` Pod 所在的
    Kubernetes 集群进行测试，请确保它是网格的一部分，而不仅仅是一个在 Kubernetes 上运行的 Pod。
- en: 'Now, test it from the Istio Ingress gateway:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，从 Istio Ingress 网关进行测试：
- en: '[PRE30]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Now, let’s also take a peek into the Kiali dashboard and see what the graph
    looks like. Please install Kiali using the instructions in *Chapter 7*.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们也来看一下 Kiali 仪表盘，看看图表是什么样的。请根据*第七章*中的说明安装 Kiali。
- en: '![Figure 10.7 – Kiali dashboard showing the traffic distribution to VM workload](img/B17989_10_07.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.7 – Kiali 仪表盘显示流量分配给 VM 工作负载](img/B17989_10_07.jpg)'
- en: Figure 10.7 – Kiali dashboard showing the traffic distribution to VM workload
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.7 – Kiali 仪表盘显示流量分配给 VM 工作负载
- en: From the preceding figure, you can see `WorkloadEntry` in the `chapter10vm`
    namespace represented like another Pod, just like `envoydummyv1` in the `chapter10`
    namespace.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的图中，你可以看到 `chapter10vm` 命名空间中的 `WorkloadEntry` 被表示为另一个 Pod，就像 `chapter10`
    命名空间中的 `envoydummyv1` 一样。
- en: Now that the setup is complete, let’s summarize what we’ve learned in this chapter.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在设置已经完成，让我们总结一下本章所学内容。
- en: Summary
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: VMs are an important piece of the puzzle in modern architecture and are here
    to stay for the foreseeable future along with containers. With Istio, you can
    integrate traditional workloads running on VMs into Istio Service Mesh and leverage
    all the benefits of traffic management and security provided by Istio. Istio support
    for VMs enables the inclusion of legacy applications, as well as those applications
    that cannot run on a container due to certain constraints in the mesh.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟机（VM）是现代架构中的重要组成部分，并且与容器一起，预计会在可预见的未来继续存在。借助 Istio，你可以将运行在虚拟机上的传统工作负载集成到 Istio
    服务网格中，并利用 Istio 提供的流量管理和安全性等所有优势。Istio 对虚拟机的支持使得可以纳入遗留应用程序以及那些由于某些约束无法在容器上运行的应用程序。
- en: After reading this chapter, you should be able to create a mesh for hybrid architectures.
    You can now install Istio on a VM and integrate workloads with the mesh along
    with Kubernetes-based workloads. To get yourself hardened with concepts in this
    chapter, practice creating multiple VMs with different versions of the `envoydummy`
    application and then implement traffic management via virtual services and destination
    rules.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完本章后，你应该能够为混合架构创建网格。你现在可以在虚拟机上安装 Istio，并将工作负载与网格以及基于 Kubernetes 的工作负载集成。为了巩固本章中的概念，练习创建多个虚拟机，并在不同版本的
    `envoydummy` 应用程序上实现流量管理，通过虚拟服务和目标规则进行流量控制。
- en: In the next chapter, we will read about various troubleshooting strategies and
    techniques to manage Istio.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将学习各种故障排除策略和技术来管理 Istio。

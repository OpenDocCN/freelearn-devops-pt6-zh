- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: GitOps with OpenShift
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用OpenShift进行GitOps
- en: In this chapter, we delve into the world of **GitOps** within the context of
    **Red Hat OpenShift**, an approach that revolutionizes the way we deploy, manage,
    and operate containerized applications.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将深入探讨**GitOps**在**Red Hat OpenShift**中的应用，这是一种彻底改变我们部署、管理和运营容器化应用程序的方式。
- en: As we journey through this chapter, we will explore the foundational principles
    of GitOps, highlighting how they seamlessly integrate with the robust features
    of Red Hat OpenShift. This combination not only enhances the efficiency and reliability
    of deployments but also aligns with modern DevOps practices, fostering collaboration
    between development and operations teams.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探索GitOps的基本原则，重点介绍它们如何与Red Hat OpenShift的强大功能无缝集成。这种结合不仅提升了部署的效率和可靠性，还与现代DevOps实践保持一致，促进了开发与运维团队之间的协作。
- en: We will start by setting up a local OpenShift environment using **CodeReady
    Containers** (**CRC**), providing a hands-on approach to understanding how OpenShift
    operates and how it can be managed using GitOps principles. From there, we will
    dive into practical examples and best practices, including configuring automated
    deployments, managing application configurations, and ensuring high availability
    and security within your OpenShift cluster.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从使用**CodeReady Containers**（**CRC**）设置本地OpenShift环境开始，通过实践的方法来理解OpenShift如何运作以及如何使用GitOps原则进行管理。接下来，我们将深入实际示例和最佳实践，包括配置自动化部署、管理应用程序配置，并确保OpenShift集群中的高可用性和安全性。
- en: Whether you are new to OpenShift or looking to enhance your existing workflows,
    this exploration into GitOps will provide valuable insights and techniques for
    optimizing your cloud-native development processes.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你是OpenShift的新手，还是希望增强现有工作流，本章对GitOps的探索将为优化你的云原生开发过程提供有价值的见解和技巧。
- en: 'In this chapter, we’ll focus on these key areas:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将重点关注以下几个关键领域：
- en: Introduction to Red Hat OpenShift
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Red Hat OpenShift简介
- en: Setting up GitOps in Red Hat OpenShift
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Red Hat OpenShift中设置GitOps
- en: Leveraging Red Hat OpenShift’s CI/CD for GitOps
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用Red Hat OpenShift的CI/CD实现GitOps
- en: Automation and configuration best practices
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化和配置最佳实践
- en: A Kubernetes-Red Hat OpenShift comparison
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes与Red Hat OpenShift的比较
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: For this chapter, ensure you have access to a Red Hat OpenShift cluster or a
    local setup via Red Hat OpenShift Local. Familiarity with GitOps practices and
    tools such as Argo CD, as well as basic development tools such as Git and a code
    editor, is necessary. A foundational understanding of container technology, Kubernetes
    architecture, and YAML syntax will aid in following the practical exercises. Ensure
    a stable internet connection for tool downloads and cluster access. If running
    OpenShift locally, your machine should ideally have at least 16 GB of RAM and
    sufficient storage.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，确保你有Red Hat OpenShift集群的访问权限，或者通过Red Hat OpenShift Local进行本地设置。熟悉GitOps实践和工具，如Argo
    CD，以及基本的开发工具如Git和代码编辑器，是必要的。对于容器技术、Kubernetes架构和YAML语法的基础理解将有助于跟随实践练习。确保有稳定的互联网连接以便下载工具和访问集群。如果在本地运行OpenShift，您的机器最好至少有16GB的RAM和足够的存储空间。
- en: 'The relevant code and resource files for this chapter can be found in the `Chapter08`
    folder of our dedicated GitHub repository: [https://github.com/PacktPublishing/Implementing-GitOps-with-Kubernetes](https://github.com/PacktPublishing/Implementing-GitOps-with-Kubernetes).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章相关的代码和资源文件可以在我们的专用GitHub仓库中的`Chapter08`文件夹找到：[https://github.com/PacktPublishing/Implementing-GitOps-with-Kubernetes](https://github.com/PacktPublishing/Implementing-GitOps-with-Kubernetes)。
- en: Introduction to Red Hat OpenShift
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Red Hat OpenShift简介
- en: OpenShift ([https://www.redhat.com/en/technologies/cloud-computing/openshift](https://www.redhat.com/en/technologies/cloud-computing/openshift)),
    developed by Red Hat, is a leading enterprise Kubernetes platform that offers
    a comprehensive suite of features designed to streamline the deployment, scaling,
    and operations of containerized applications. It extends Kubernetes by simplifying
    many of the complex tasks associated with deploying and managing a containerized
    infrastructure, making it an ideal choice for enterprises looking to implement
    modern DevOps and GitOps practices.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift（[https://www.redhat.com/en/technologies/cloud-computing/openshift](https://www.redhat.com/en/technologies/cloud-computing/openshift)），由Red
    Hat开发，是一个领先的企业级Kubernetes平台，提供了一整套功能，旨在简化容器化应用的部署、扩展和操作。它通过简化许多与部署和管理容器化基础设施相关的复杂任务，扩展了Kubernetes，使其成为希望实施现代DevOps和GitOps实践的企业的理想选择。
- en: One of the core strengths of OpenShift is its focus on **developer productivity**
    and **operational efficiency**. It provides a rich set of developer tools and
    a user-friendly console that makes it easier for developers to build, deploy,
    and manage their applications. OpenShift’s **integrated development environment**
    (**IDE**) and built-in CI/CD capabilities enable developers to automate much of
    the software delivery process, from code build through to testing, deployment,
    and monitoring.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift的核心优势之一是它对**开发者生产力**和**操作效率**的关注。它提供了一整套丰富的开发者工具和一个用户友好的控制台，使开发者可以更轻松地构建、部署和管理他们的应用。OpenShift的**集成开发环境**（**IDE**）和内建的CI/CD功能使开发者能够自动化软件交付过程的许多环节，从代码构建到测试、部署和监控。
- en: '**Security** is another area where OpenShift shines. It incorporates built-in
    security features at every level of the application stack, from the **operating
    system** (**OS**) to the network, and up to the application services. This integrated
    approach ensures that security is not an afterthought but is woven into the very
    fabric of the application life cycle. Features such as **Security-Enhanced Linux**
    (**SELinux**) enforced isolation, automated vulnerability scanning, and default
    secure configurations help to protect applications and data from external threats
    and internal misconfigurations.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**安全性**是OpenShift的另一个亮点。它在应用栈的每个层级都集成了内建的安全特性，从**操作系统**（**OS**）到网络，再到应用服务。这种集成方法确保了安全性不是事后的补充，而是深深融入应用生命周期的每一个环节。诸如**增强型安全Linux**（**SELinux**）强制隔离、自动化漏洞扫描和默认安全配置等功能有助于保护应用和数据免受外部威胁和内部配置错误的影响。'
- en: SELinux
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: SELinux
- en: SELinux is a kernel-integrated security feature that enforces **mandatory access
    control** (**MAC**) policies to enhance system security. It operates on the principle
    of least privilege, restricting system processes and users to the minimal permissions
    needed for their functions. SELinux helps prevent unauthorized access and can
    operate in enforcing mode, where it blocks and logs unauthorized actions, or in
    permissive mode, where it only logs violations without blocking them. This adds
    an important layer of security to Linux-based systems, including OpenShift, by
    controlling access with greater granularity than traditional access controls.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: SELinux是一项内核集成的安全功能，强制执行**强制访问控制**（**MAC**）策略，以增强系统安全性。它遵循最小权限原则，将系统进程和用户的权限限制在完成其功能所需的最低权限内。SELinux有助于防止未经授权的访问，并可以在强制模式下运行，阻止并记录未经授权的操作，或者在宽松模式下运行，只记录违规操作而不加以阻止。这为基于Linux的系统，包括OpenShift，增加了一个重要的安全层，通过比传统访问控制更精细的方式来控制访问。
- en: Furthermore, OpenShift is designed to support a wide range of workloads, from
    traditional monolithic applications to microservices and serverless functions.
    Its flexible architecture supports a variety of programming languages, frameworks,
    and databases, allowing teams to use the tools and technologies that best fit
    their needs. Additionally, OpenShift’s container-native storage and networking
    solutions provide the scalability and performance required for high-demand applications.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，OpenShift旨在支持各种工作负载，从传统的单体应用到微服务和无服务器功能。它的灵活架构支持多种编程语言、框架和数据库，允许团队使用最适合其需求的工具和技术。此外，OpenShift的容器原生存储和网络解决方案提供了高需求应用所需的可扩展性和性能。
- en: In the context of GitOps, OpenShift provides a powerful platform for implementing
    declarative, version-controlled workflows for infrastructure and application deployment.
    By leveraging OpenShift’s capabilities, teams can achieve higher levels of **automation**,
    **repeatability**, and **consistency**, which are central to the GitOps philosophy.
    With its robust ecosystem, OpenShift enables organizations to streamline their
    deployment pipelines, enhance security, and improve operational efficiency, making
    it an excellent choice for adopting GitOps methodologies.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GitOps 的背景下，OpenShift 提供了一个强大的平台，用于实现声明式的、版本控制的基础设施和应用部署工作流。通过利用 OpenShift
    的能力，团队可以实现更高水平的**自动化**、**可重复性**和**一致性**，这些都是 GitOps 哲学的核心。凭借其强大的生态系统，OpenShift
    使组织能够简化部署管道，增强安全性并提高操作效率，是采用 GitOps 方法论的理想选择。
- en: Red Hat OpenShift environment setup
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Red Hat OpenShift 环境设置
- en: 'When setting up an OpenShift cluster for learning, testing, or development
    purposes, you have several options to consider, each with its own set of advantages.
    Understanding these alternatives will help you choose the best fit based on your
    objectives, available resources, and technical comfort level:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置 OpenShift 集群用于学习、测试或开发时，您有多个选项可供考虑，每个选项都有其独特的优点。了解这些替代方案将帮助您根据目标、可用资源和技术舒适度选择最合适的方案。
- en: '**Developer Sandbox for OpenShift**: This is an excellent starting point for
    beginners or for those looking to test out OpenShift features without any setup.
    The Developer Sandbox ([https://developers.redhat.com/developer-sandbox](https://developers.redhat.com/developer-sandbox))
    provides a free, pre-configured OpenShift environment. All you need to do is register
    to gain 30 days of free access to a shared OpenShift and Kubernetes cluster. This
    option is ideal for users who prefer to avoid the complexities of manual setup
    and are looking for a quick way to start experimenting with OpenShift capabilities.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OpenShift 开发者沙箱**：这是一个很好的起点，适合初学者或希望在没有任何设置的情况下测试 OpenShift 功能的人。开发者沙箱（[https://developers.redhat.com/developer-sandbox](https://developers.redhat.com/developer-sandbox)）提供了一个免费的预配置
    OpenShift 环境。您只需要注册，即可获得 30 天的免费访问权限，使用共享的 OpenShift 和 Kubernetes 集群。这个选项非常适合那些希望避免手动设置复杂性并寻找快速开始实验
    OpenShift 功能的用户。'
- en: '**Cloud-based OpenShift cluster**: Setting up an OpenShift cluster in the cloud
    (Azure, AWS, or GCP) is a robust solution that offers scalability and real-world
    applicability. This approach is suitable for users looking to simulate a production
    environment or to work on larger, more complex projects. However, it’s important
    to note that running a cluster in the cloud can incur costs, depending on the
    cloud provider and the resources consumed.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**云端 OpenShift 集群**：在云端（如 Azure、AWS 或 GCP）设置 OpenShift 集群是一种强大的解决方案，提供了可扩展性和现实世界的适用性。这种方法适合那些希望模拟生产环境或从事更大、更复杂项目的用户。然而，需要注意的是，在云端运行集群可能会产生费用，具体费用取决于云服务提供商和所消耗的资源。'
- en: '**Bare metal setup**: Setting up OpenShift Local on bare metal is a challenging
    and resource-intensive task. Unlike in cloud environments, you must manually manage
    networking, storage, and hardware compatibility, requiring a high level of technical
    expertise. The system demands significant memory, multiple CPU cores, and substantial
    storage, which can be daunting for environments not initially designed for such
    loads. While a bare metal installation offers greater control and potential performance
    benefits, it comes with complexities and potential hurdles that need careful planning
    and understanding.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**裸金属设置**：在裸金属上设置 OpenShift Local 是一项具有挑战性且资源密集的任务。与云环境不同，您必须手动管理网络、存储和硬件兼容性，这需要较高的技术水平。系统要求大量的内存、多个
    CPU 核心以及可观的存储，这对于最初没有为这种负载设计的环境来说可能会显得令人生畏。尽管裸金属安装提供了更大的控制权和潜在的性能优势，但它也带来了复杂性和潜在的障碍，需要仔细规划和理解。'
- en: '**Red Hat OpenShift Local**: For those who prefer a local solution, setting
    up an OpenShift cluster on your machine using Red Hat CRC, can be an effective
    approach. This method allows for a more hands-on experience and works well for
    individual learning and development scenarios.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Red Hat OpenShift Local**：对于那些偏好本地解决方案的用户，通过使用 Red Hat CRC 在本地机器上设置 OpenShift
    集群是一种有效的方法。这种方法允许更深入的操作体验，适合个人学习和开发场景。'
- en: Red Hat OpenShift Local provides a fast and straightforward method for initiating
    OpenShift cluster construction. Tailored for local machine operation, it streamlines
    the setup and testing process, offering a cloud-like development environment right
    on your desktop. This tool supports various programming languages and simplifies
    the development of container-based applications by providing a minimal, pre-configured
    OpenShift cluster that requires no server-based infrastructure.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Red Hat OpenShift Local提供了一种快速简便的方式来启动OpenShift集群的构建。它针对本地机器操作进行了优化，简化了设置和测试过程，提供了一个类似云环境的开发环境，直接在桌面上运行。此工具支持多种编程语言，通过提供一个最小化的预配置OpenShift集群，简化了基于容器应用的开发，无需依赖服务器基础设施。
- en: OpenShift Local enables the creation, building, and deployment of microservices
    directly into Kubernetes-hosted containers, supporting a range of OSs including
    Linux, macOS, and Windows 10\. This makes it an ideal platform for local development
    and testing, mirroring a real OpenShift cluster’s environment.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift Local使得可以直接将微服务创建、构建并部署到Kubernetes托管的容器中，支持包括Linux、macOS和Windows 10等多种操作系统。这使得它成为本地开发和测试的理想平台，模拟了真实OpenShift集群的环境。
- en: For the remainder of this chapter, we have chosen to utilize OpenShift Local
    due to its convenience and relevance to local development scenarios. It’s crucial
    to note that running the examples effectively requires a minimum hardware allocation
    of 6 virtual CPUs and 12 GB of memory for the local cluster to operate correctly.
    This requirement ensures that users can experience the full capabilities of OpenShift
    Local in a GitOps context without significant performance issues.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章剩余部分，我们选择使用OpenShift Local，因其便捷性和与本地开发场景的相关性。需要特别注意的是，要有效运行示例，最低硬件配置要求是为本地集群分配6个虚拟CPU和12GB内存。这个要求确保用户能够在GitOps上下文中充分体验OpenShift
    Local的全部功能，而不会出现显著的性能问题。
- en: To begin, navigate to [https://developers.redhat.com/products/openshift-local/overview](https://developers.redhat.com/products/openshift-local/overview)
    and click on **Install OpenShift on your laptop**, as shown in *Figure 8**.1*.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，导航到[https://developers.redhat.com/products/openshift-local/overview](https://developers.redhat.com/products/openshift-local/overview)，然后点击**在您的笔记本电脑上安装OpenShift**，如*图8.1*所示。
- en: '![Figure 8.1 – The Red Hat OpenShift Local (CRC) homepage](img/B22100_08_01.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图8.1 – Red Hat OpenShift Local (CRC)首页](img/B22100_08_01.jpg)'
- en: Figure 8.1 – The Red Hat OpenShift Local (CRC) homepage
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.1 – Red Hat OpenShift Local (CRC)首页
- en: To proceed with the setup of the cluster, it is necessary to download the installer
    by creating a Red Hat account if you do not already have one. From the displayed
    page (*Figure 8**.2*), choose the installer corresponding to your OS (Linux, Windows,
    or macOS) where you plan to install the cluster. Additionally, make sure to select
    the **Download pull secret** or **Copy pull secret** option, as the pull secret
    will be required during the installation process. Remember, you can always return
    to this page if needed.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要继续设置集群，必须通过创建一个Red Hat账户来下载安装程序（如果您还没有账户的话）。在显示的页面（*图8.2*）中，选择与您的操作系统（Linux、Windows或macOS）对应的安装程序，并确保选择**下载拉取密钥**或**复制拉取密钥**选项，因为安装过程中需要拉取密钥。记住，如果需要，您可以随时返回此页面。
- en: '![Figure 8.2 – Starting web page for downloading the CRC installer based on
    the target OS](img/B22100_08_02.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图8.2 – 根据目标操作系统下载CRC安装程序的起始网页](img/B22100_08_02.jpg)'
- en: Figure 8.2 – Starting web page for downloading the CRC installer based on the
    target OS
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.2 – 根据目标操作系统下载CRC安装程序的起始网页
- en: At this point, it’s important to note that a detailed step-by-step guide for
    installation is beyond the scope of this text. However, you can find comprehensive
    instructions in the official documentation provided by Red Hat.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，需要注意的是，详细的安装步骤超出了本文的范围。然而，您可以在Red Hat提供的官方文档中找到全面的指南。
- en: 'For a complete walkthrough, please visit the following link: https://access.redhat.com/documentation/en-us/red_hat_codeready_containers/1.0/html/getting_started_guide/getting-started-with-codeready-containers_gsg#doc-wrapper.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看完整的操作流程，请访问以下链接：[https://access.redhat.com/documentation/en-us/red_hat_codeready_containers/1.0/html/getting_started_guide/getting-started-with-codeready-containers_gsg#doc-wrapper](https://access.redhat.com/documentation/en-us/red_hat_codeready_containers/1.0/html/getting_started_guide/getting-started-with-codeready-containers_gsg#doc-wrapper)。
- en: 'This resource outlines all necessary steps to establish your local OpenShift
    cluster. As a standard procedure to verify the correctness of the installation,
    execute the following command:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 该资源概述了建立本地OpenShift集群所需的所有步骤。作为验证安装正确性的标准步骤，请执行以下命令：
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This should produce output like the following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这应生成如下所示的输出：
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Troubleshooting OpenShift CRC setup issues
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OpenShift CRC设置问题排查
- en: 'Setting up your environment can be an elaborate process with potential difficulties.
    It requires careful attention to detail and an understanding of system configurations
    and dependencies. While following the provided guidelines and documentation can
    streamline the process, you may still encounter unexpected challenges. It’s important
    to approach this setup with patience and be prepared to engage in some troubleshooting
    to address any issues that arise. Remember to properly start the cluster by using
    the following command:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 设置环境可能是一个复杂的过程，且可能会遇到一些困难。它需要对系统配置和依赖项的细致了解和谨慎处理。虽然遵循提供的指南和文档可以简化过程，但您仍然可能遇到意想不到的挑战。重要的是以耐心的态度进行设置，并准备好进行一些故障排除，以解决出现的问题。请记住，使用以下命令正确启动集群：
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This command ensures that your CRC instance starts with the specified amount
    of computational resources: 6 CPUs and 12288 MB (approximately 12 GB) of memory.
    These settings are important for the optimal performance of your OpenShift cluster.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令确保您的CRC实例以指定的计算资源启动：6个CPU和12288 MB（大约12 GB）内存。这些设置对您的OpenShift集群的最佳性能至关重要。
- en: 'If you experience any issues during the setup process, try executing the following
    sequence of commands to troubleshoot and reset your environment:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在设置过程中遇到任何问题，请尝试执行以下命令序列来进行故障排除并重置您的环境：
- en: '`crc delete -f`: This forcefully *deletes* the existing CRC instance, clearing
    any current configurations.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`crc delete -f`：强制*删除*现有的CRC实例，清除任何当前的配置。'
- en: '`crc cleanup`: This command helps *clean up* any residual files or configurations
    left from previous instances, ensuring a clean slate.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`crc cleanup`：此命令有助于*清理*之前实例留下的任何残留文件或配置，确保一个干净的环境。'
- en: '`crc setup`: Re-run the setup command to configure your system again for CRC.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`crc setup`：重新运行设置命令，以再次为CRC配置您的系统。'
- en: '`crc config unset proxy-ca-file`: This removes any proxy configuration settings
    that might be causing issues.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`crc config unset proxy-ca-file`：这将移除可能导致问题的任何代理配置设置。'
- en: '`crc start --log-level debug`: Start the CRC instance again, this time with
    debug logging enabled. This will provide more detailed output, which can be helpful
    in identifying where the setup process is encountering problems.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`crc start --log-level debug`：再次启动CRC实例，这次启用调试日志记录。这将提供更详细的输出，有助于识别设置过程中的问题所在。'
- en: 'To finalize the setup of our cluster, an additional crucial step is required:
    the installation of the OpenShift `oc`. This tool is essential for interacting
    with OpenShift clusters, allowing users to perform various tasks via the command
    line, such as deploying applications, inspecting cluster resources, and managing
    administrative activities. The `oc` CLI is specifically designed for developers
    and system administrators, offering advanced functionalities that surpass the
    basic features found in Kubernetes. This makes the `oc` CLI a vital component
    for those looking to automate processes via scripts or manage their clusters more
    directly, ensuring efficient operation within the OpenShift ecosystem.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成集群的设置，还需要一个关键步骤：安装OpenShift `oc`。该工具对于与OpenShift集群交互至关重要，允许用户通过命令行执行各种任务，例如部署应用程序、检查集群资源和管理管理活动。`oc`
    CLI专为开发人员和系统管理员设计，提供了超越Kubernetes基本功能的高级功能。因此，`oc` CLI是希望通过脚本自动化流程或更直接地管理集群的用户必不可少的组件，确保在OpenShift生态系统内高效运作。
- en: Detailed steps for installing the `oc` CLI can be found in the official documentation.
    Please visit `oc` CLI for managing your OpenShift clusters.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 安装`oc` CLI的详细步骤可以在官方文档中找到。请访问`oc` CLI以管理您的OpenShift集群。
- en: 'Check that `oc` is correctly installed by typing the following command:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 输入以下命令检查`oc`是否已正确安装：
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The expected output of the preceding command should be like:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 前述命令的预期输出应如下所示：
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now that our cluster setup is complete, we are ready to progress to the next
    section, where we will focus on setting up GitOps in our Red Hat OpenShift cluster.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在集群设置完成，我们准备进入下一部分，重点将是设置GitOps在我们的Red Hat OpenShift集群中。
- en: By applying GitOps, we can leverage the full potential of our newly configured
    OpenShift environment, ensuring a more efficient and automated operational framework.
    Let’s move forward and explore the exciting capabilities of GitOps within OpenShift.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 通过应用 GitOps，我们可以充分发挥新配置的 OpenShift 环境的潜力，确保更高效和自动化的操作框架。让我们继续前进，探索 GitOps 在
    OpenShift 中的令人兴奋的功能。
- en: Setting Up GitOps in Red Hat OpenShift
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Red Hat OpenShift 中设置 GitOps
- en: 'Begin by installing the necessary GitOps tools. Argo CD (see the *Argo CD*
    section in [*Chapter 4*](B22100_04.xhtml#_idTextAnchor065)) is a popular choice
    for OpenShift, as it integrates seamlessly with the Kubernetes environment. You
    can install Argo CD directly into your OpenShift cluster using **OperatorHub**,
    which offers an easy installation process and automatic management of the application
    life cycle:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 首先安装必要的 GitOps 工具。Argo CD（请参见 [*第 4 章*](B22100_04.xhtml#_idTextAnchor065) 中的
    *Argo CD* 部分）是 OpenShift 的流行选择，因为它可以无缝集成到 Kubernetes 环境中。您可以通过 **OperatorHub**
    将 Argo CD 直接安装到 OpenShift 集群中，OperatorHub 提供了一个简单的安装过程并自动管理应用程序生命周期：
- en: 'To obtain the address of your local OpenShift cluster running on CRC, use the
    following command in your terminal:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要获取在 CRC 上运行的本地 OpenShift 集群的地址，请在终端中使用以下命令：
- en: '[PRE5]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'INFO Loading bundle: crc_vfkit_4.14.12_arm64...'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: INFO 正在加载捆绑包：crc_vfkit_4.14.12_arm64...
- en: INFO A CRC VM for OpenShift 4.14.12 is already running
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: INFO 已经启动了 OpenShift 4.14.12 的 CRC 虚拟机
- en: Started the OpenShift cluster.
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 启动了 OpenShift 集群。
- en: 'The server is accessible via web console at:'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该服务器可以通过 Web 控制台访问：
- en: https://console-openshift-console.apps-crc.testing
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: https://console-openshift-console.apps-crc.testing
- en: 'Log in as administrator:'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以管理员身份登录：
- en: 'Username: kubeadmin'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用户名：kubeadmin
- en: 'Password: C57Yw-465gL-NXcpv-nri5w'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 密码：C57Yw-465gL-NXcpv-nri5w
- en: 'Log in as user:'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以用户身份登录：
- en: 'Username: developer'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用户名：developer
- en: 'Password: developer'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 密码：developer
- en: 'Use the ''oc'' command line interface:'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 'oc' 命令行接口：
- en: $ eval $(crc oc-env)
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $ eval $(crc oc-env)
- en: $ oc login -u developer https://api.crc.testing:6443
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: $ oc login -u developer https://api.crc.testing:6443
- en: '[PRE6]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Navigate to [https://console-openshift-console.apps-crc.testing](https://console-openshift-console.apps-crc.testing)
    and log in as `crc start` command, as illustrated in *Figure 8**.3*. This will
    give you full access to the OpenShift cluster’s administrative functionalities.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航至 [https://console-openshift-console.apps-crc.testing](https://console-openshift-console.apps-crc.testing)，并根据
    *图 8.3* 中的说明使用 `crc start` 命令登录。这将使您可以完全访问 OpenShift 集群的管理功能。
- en: '![Figure 8.3 – The Cluster page in the Administrator mode](img/B22100_08_03.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.3 – 管理员模式下的集群页面](img/B22100_08_03.jpg)'
- en: Figure 8.3 – The Cluster page in the Administrator mode
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.3 – 管理员模式下的集群页面
- en: In the OpenShift web console, navigate to the left-hand panel and expand the
    **Operators** section.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 OpenShift Web 控制台中，导航至左侧面板并展开 **Operators** 部分。
- en: Click on `OpenShift GitOps` to locate the relevant operator for installation.
    This action will bring up the OpenShift GitOps operator, which you can then proceed
    to install on your cluster (refer to *Figure 8**.4* for guidance).
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 `OpenShift GitOps` 定位并安装相关的 Operator。此操作将显示 OpenShift GitOps operator，您可以继续将其安装到您的集群中（有关指导，请参见
    *图 8.4*）。
- en: OpenShift Operators
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift Operators
- en: An **OpenShift Operator** is a method of packaging, deploying, and managing
    a Kubernetes application. OpenShift Operators extend the Kubernetes API to create,
    configure, and manage instances of complex stateful applications on behalf of
    a Kubernetes user. They automate the entire life cycle of the software they manage,
    from initial deployment to upgrade to everyday operations, following best practices.
    This approach simplifies the management of complex applications and services,
    allowing developers and operators to focus on the specifics of their applications
    while leveraging the scalability and reliability of Kubernetes systems. Essentially,
    Operators encapsulate the human operational knowledge required to run services
    and provide a more efficient and reliable way to manage applications in a cloud-native
    environment.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**OpenShift Operator** 是一种打包、部署和管理 Kubernetes 应用程序的方法。OpenShift Operators 扩展了
    Kubernetes API，用于代表 Kubernetes 用户创建、配置和管理复杂的有状态应用实例。它们自动化管理的软件生命周期，包括从初始部署到升级，再到日常操作，遵循最佳实践。这种方法简化了复杂应用程序和服务的管理，使开发人员和运维人员可以专注于应用程序的细节，同时利用
    Kubernetes 系统的可扩展性和可靠性。从本质上讲，Operators 封装了运行服务所需的人工操作知识，提供了一种更高效、更可靠的方式来管理云原生环境中的应用程序。'
- en: '![Figure 8.4 – Navigating to OperatorHub and searching for OpenShift GitOps
    Operator](img/B22100_08_04.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.4 – 导航到 OperatorHub 并搜索 OpenShift GitOps Operator](img/B22100_08_04.jpg)'
- en: Figure 8.4 – Navigating to OperatorHub and searching for OpenShift GitOps Operator
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.4 – 导航至OperatorHub并搜索OpenShift GitOps操作员
- en: Once you have located the Red Hat OpenShift GitOps operator, click on it to
    view more details. Then, proceed to click on the **Install** button. When prompted,
    leave the default values as they are and continue with the installation process
    (see *Figure 8**.5*). This will initiate the setup of the OpenShift GitOps operator
    on your cluster, equipping your environment with the necessary tools for GitOps
    workflows.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到Red Hat OpenShift GitOps操作员后，点击它以查看更多详细信息。然后，继续点击**安装**按钮。当系统提示时，保留默认值并继续安装过程（参见*图
    8.5*）。这将启动在集群中设置OpenShift GitOps操作员，为您的环境提供GitOps工作流所需的工具。
- en: '![Figure 8.5 – A panel displaying details prior to operator installation](img/B22100_08_05.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.5 – 安装操作员前显示详细信息的面板](img/B22100_08_05.jpg)'
- en: Figure 8.5 – A panel displaying details prior to operator installation
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.5 – 安装操作员前显示详细信息的面板
- en: For **Installation mode**, select **All namespaces on the cluster (default)**
    to allow the operator to operate across all namespaces.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**安装模式**，选择**集群中的所有命名空间（默认）**，以允许操作员跨所有命名空间进行操作。
- en: For **Installed Namespace**, choose **Operator recommended Namespace openshift-gitops-operator**,
    which is specifically suggested for the GitOps operator.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**安装命名空间**，选择**操作员推荐的命名空间 openshift-gitops-operator**，这是专门为GitOps操作员推荐的。
- en: Click on **Install** and wait for the installation operations to be completed.
    This might take a few moments. After the installation is finished, click on **View
    Operator** to verify the installation’s success, and ensure everything is set
    up correctly.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**安装**并等待安装操作完成。这可能需要几分钟时间。安装完成后，点击**查看操作员**以验证安装是否成功，并确保一切设置正确。
- en: While remaining in the **Administrator** mode within the web console, navigate
    to **Create Project** to start a new project. Fill in the project creation form
    with the necessary information, following the guidelines or specifics you have
    for your project (*Figure 8**.6*). This will establish a dedicated namespace for
    your GitOps deployments and related resources.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Web控制台中保持在**管理员**模式，导航到**创建项目**以启动一个新项目。填写项目创建表单，按照项目要求或具体指南进行填写（参见*图 8.6*）。这将为您的GitOps部署和相关资源创建一个专用命名空间。
- en: '![Figure 8.6 – Red Hat OpenShift – Create Project](img/B22100_08_06.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.6 – Red Hat OpenShift – 创建项目](img/B22100_08_06.jpg)'
- en: Figure 8.6 – Red Hat OpenShift – Create Project
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.6 – Red Hat OpenShift – 创建项目
- en: Be aware!
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 注意！
- en: The display name of your project can be adjusted according to your preferences,
    but it’s important to remember this name as you will need to use it consistently
    in subsequent steps. Ensure that the name you choose is memorable and relevant
    to your project to avoid confusion later.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 您项目的显示名称可以根据您的偏好进行调整，但重要的是要记住这个名称，因为您将在后续步骤中始终使用它。确保您选择的名称易于记忆且与项目相关，以避免日后混淆。
- en: Once the project is created, the dashboard for your newly established project
    should appear in the OpenShift web console, as illustrated in *Figure 8**.7*.
    It will provide an overview of your project’s resources, activities, and status.
    Make sure the details align with your expectations and configurations, as this
    dashboard will be central to managing and monitoring your project’s components
    in the upcoming steps.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦项目创建完成，您新建立的项目的仪表板应该会在OpenShift Web控制台中出现，如*图 8.7*所示。它将提供有关项目资源、活动和状态的概览。确保详细信息与您的期望和配置一致，因为这个仪表板将是您在接下来的步骤中管理和监控项目组件的核心。
- en: '![Figure 8.7 – Dashboard for the newly created project](img/B22100_08_07.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.7 – 新创建项目的仪表板](img/B22100_08_07.jpg)'
- en: Figure 8.7 – Dashboard for the newly created project
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.7 – 新创建项目的仪表板
- en: In the OpenShift web console, go to **Operators** | **Installed Operators**.
    Find and click on **Red Hat OpenShift GitOps**, then select **All Instances**
    to view and manage your GitOps operator instances (refer to *Figure 8**.8* for
    guidance).
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在OpenShift Web控制台中，转到**操作员** | **已安装的操作员**。找到并点击**Red Hat OpenShift GitOps**，然后选择**所有实例**以查看并管理您的GitOps操作员实例（参见*图
    8.8*获取指导）。
- en: '![Figure 8.8 – List of instances where the operator has been installed and
    its status](img/B22100_08_08.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.8 – 操作员已安装的实例列表及其状态](img/B22100_08_08.jpg)'
- en: Figure 8.8 – List of instances where the operator has been installed and its
    status
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.8 – 操作员已安装的实例列表及其状态
- en: Ensure that the project selected on the top-left is `gitopsk8sdeployments` before
    proceeding. Then, navigate to **Create new** and select **Argo CD** to set up
    a new instance.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在继续之前，请确保左上角选择的项目是 `gitopsk8sdeployments`。然后，点击 **创建新项** 并选择 **Argo CD** 来设置一个新的实例。
- en: In the form that appears, enter `argocd-for-gitops-deployments` into the name
    input box.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在出现的表单中，输入 `argocd-for-gitops-deployments` 作为名称。
- en: To create an external route for accessing the Argo CD server, click on **Server**
    | **Route** and ensure that **Enabled** is checked. This will allow you to access
    the Argo CD interface externally from your OpenShift cluster.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要为 Argo CD 服务器创建外部路由，点击 **服务器** | **路由** 并确保勾选 **已启用**。这将允许您从 OpenShift 集群外部访问
    Argo CD 界面。
- en: Wait for the **Status** value to change to **Available** as in *Figure 8**.9*.
    This indicates that your Argo CD instance is fully deployed and ready for use
    within your OpenShift cluster. The status change might take a few minutes as the
    system finalizes the setup and deployment processes.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待 **状态** 值变为 **可用**，如 *图 8.9* 所示。这表明您的 Argo CD 实例已经完全部署，并可以在 OpenShift 集群中使用。状态更改可能需要几分钟时间，因为系统正在完成设置和部署过程。
- en: '![Figure 8.9 – New item displaying the created Argo CD instance for the specific
    namespace](img/B22100_08_09.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.9 – 显示为特定命名空间创建的 Argo CD 实例的新项](img/B22100_08_09.jpg)'
- en: Figure 8.9 – New item displaying the created Argo CD instance for the specific
    namespace
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.9 – 显示为特定命名空间创建的 Argo CD 实例的新项
- en: Switch to the **Developer** mode in the OpenShift web console and click on **Topology**.
    This view will give you a graphical representation of the resources deployed so
    far, allowing you to visually understand the structure and relationships of your
    applications and services within the selected project.Top of Form
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到 OpenShift Web 控制台中的 **开发者** 模式，点击 **拓扑**。此视图将为您提供一个已部署资源的图形表示，帮助您直观地理解所选项目中应用程序和服务的结构及其关系。
- en: '![Figure 8.10 – A graphical representation of the resources deployed](img/B22100_08_10.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.10 – 部署资源的图形表示](img/B22100_08_10.jpg)'
- en: Figure 8.10 – A graphical representation of the resources deployed
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.10 – 部署资源的图形表示
- en: 'To further test that Argo CD has been correctly set up, you can use `oc` and
    run the following command:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了进一步测试 Argo CD 是否正确设置，您可以使用 `oc` 并运行以下命令：
- en: '[PRE7]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: NAME                                                     READY   STATUS    RESTARTS   AGE
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 名称                                                   就绪     状态     重启次数   存在时间
- en: argocd-for-gitops-deployments-application-controller-0       1/1      Running   0          6m1s
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: argocd-for-gitops-deployments-application-controller-0       1/1      运行中    0          6m1s
- en: argocd-for-gitops-deployments-redis-6c9476c7dc-76c6n         1/1      Running   0          6m1s
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: argocd-for-gitops-deployments-redis-6c9476c7dc-76c6n         1/1      运行中    0          6m1s
- en: argocd-for-gitops-deployments-repo-server-65cdc966d4-qzpvt   1/1      Running   0          6m1s
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: argocd-for-gitops-deployments-repo-server-65cdc966d4-qzpvt   1/1      运行中    0          6m1s
- en: '[PRE8]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now that we have successfully set up Argo CD and verified its correct installation,
    we are ready to proceed with the deployment. Let’s move forward to the next steps
    where we will utilize our GitOps workflow within the OpenShift environment to
    manage and deploy our applications efficiently.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经成功设置了 Argo CD 并验证了其正确安装，我们可以继续进行部署。接下来，让我们进入下一步，在 OpenShift 环境中利用我们的 GitOps
    工作流高效地管理和部署应用程序。
- en: Leveraging Red Hat OpenShift’s CI/CD for GitOps
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用 Red Hat OpenShift 的 CI/CD 进行 GitOps
- en: In this section, we delve into leveraging Red Hat OpenShift’s CI/CD capabilities
    for GitOps. Specifically, we will apply these principles to deploy the weather
    application, which was introduced previously in the *My city weather app* section
    in [*Chapter 4*](B22100_04.xhtml#_idTextAnchor065). Utilizing a deployment YAML
    file, we will orchestrate the application’s rollout on the OpenShift cluster through
    our Argo CD instance, targeting the `gitopsk8sdeployments` namespace. This practical
    example will demonstrate how OpenShift’s CI/CD tools, combined with GitOps methodologies,
    streamline and automate the deployment processes, ensuring a consistent, traceable,
    and efficient application delivery pipeline.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将深入探讨如何利用 Red Hat OpenShift 的 CI/CD 能力进行 GitOps。具体来说，我们将应用这些原则来部署天气应用程序，该应用程序在
    [*第 4 章*](B22100_04.xhtml#_idTextAnchor065)的 *我的城市天气应用程序* 部分中已经介绍过。通过使用部署 YAML
    文件，我们将在 OpenShift 集群中通过我们的 Argo CD 实例来编排应用程序的发布，目标命名空间为 `gitopsk8sdeployments`。这个实际示例将展示
    OpenShift 的 CI/CD 工具与 GitOps 方法相结合，如何简化和自动化部署过程，确保一致、可追踪且高效的应用程序交付流水线。
- en: 'Let’s explore how to integrate these powerful technologies to deploy our weather
    application seamlessly:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探讨如何整合这些强大的技术，以无缝部署我们的天气应用：
- en: In the OpenShift web console, ensure you are in the **Administrator** mode.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在OpenShift web控制台中，确保你处于**管理员**模式。
- en: Then, navigate to `argocd-for-gitops-deployments-server` in the list.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在列表中导航到`argocd-for-gitops-deployments-server`。
- en: '![Figure 8.11 – Routes section of the Administrator mode](img/B22100_08_11.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.11 – 管理员模式下的路由部分](img/B22100_08_11.jpg)'
- en: Figure 8.11 – Routes section of the Administrator mode
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.11 – 管理员模式下的路由部分
- en: Click on the URL provided in the `gitopsk8sdeployments` namespace.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`gitopsk8sdeployments`命名空间中提供的URL。
- en: '![Figure 8.12 – The login page for the created Argo CD instance for our demo
    project](img/B22100_08_12.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.12 – 我们演示项目创建的Argo CD实例的登录页面](img/B22100_08_12.jpg)'
- en: Figure 8.12 – The login page for the created Argo CD instance for our demo project
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.12 – 我们演示项目创建的Argo CD实例的登录页面
- en: To retrieve the admin credentials, switch to the **Developer** mode in the OpenShift
    web console.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要获取管理员凭证，请切换到OpenShift web控制台中的**开发者**模式。
- en: Then, click on `argocd-for-gitops-deployments-cluster`. Within this secret’s
    details, find and copy the value of the `admin.password` entry.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击`argocd-for-gitops-deployments-cluster`。在该秘密的详细信息中，找到并复制`admin.password`条目的值。
- en: '![Figure 8.13 – Secrets section of the gitopsk8sdeployments project](img/B22100_08_13.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.13 – gitopsk8sdeployments项目的Secrets部分](img/B22100_08_13.jpg)'
- en: Figure 8.13 – Secrets section of the gitopsk8sdeployments project
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.13 – gitopsk8sdeployments项目的Secrets部分
- en: Once you access the Argo CD interface, the application list should initially
    be empty, as illustrated in *Figure 8**.14*, since no applications have been deployed
    yet using Argo CD. At this point, you’re ready to create a new application. This
    step will involve defining the source repository, the path within the repository
    where your Kubernetes manifests are located, and the destination where your application
    should be deployed, in this case, the OpenShift local cluster.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你访问Argo CD界面，应用列表最初应该是空的，正如*图 8.14*所示，因为还没有使用Argo CD部署任何应用。在这一点上，你已经准备好创建一个新的应用。这一步将涉及定义源代码库、代码库中存放Kubernetes清单的路径以及应用应部署的目标位置，在此案例中是OpenShift本地集群。
- en: '![Figure 8.14 – Initial empty application list of the Argo CD instance](img/B22100_08_14.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.14 – Argo CD实例的初始空应用列表](img/B22100_08_14.jpg)'
- en: Figure 8.14 – Initial empty application list of the Argo CD instance
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.14 – Argo CD实例的初始空应用列表
- en: To create a new Argo CD application, you have the option to either use the Argo
    CD web UI or the `oc` CLI. If opting for the CLI, as demonstrated in an earlier
    section, you can apply a deployment file (e.g., `argocd-deployment.yaml`) that
    specifies the application’s configuration.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建新的Argo CD应用，你可以选择使用Argo CD的Web UI或`oc` CLI。如果选择CLI，正如前面章节所示，你可以应用一个部署文件（例如`argocd-deployment.yaml`），该文件指定了应用的配置。
- en: 'Utilizing the code provided in the repository accompanying this chapter, you
    can create the new application by executing the following command:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 利用本章附带的代码仓库中的代码，你可以通过执行以下命令创建新的应用：
- en: '[PRE9]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'apiVersion: argoproj.io/v1alpha1'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'apiVersion: argoproj.io/v1alpha1'
- en: 'kind: Application'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'kind: Application'
- en: 'metadata:'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'metadata:'
- en: 'name: my-weather-app'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'name: my-weather-app'
- en: 'spec:'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'spec:'
- en: 'destination:'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 目标：
- en: 'name: '''''
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'name: '''''
- en: 'namespace: gitopsk8sdeployments'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'namespace: gitopsk8sdeployments'
- en: 'server: ''https://kubernetes.default.svc'''
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'server: ''https://kubernetes.default.svc'''
- en: 'source:'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 来源：
- en: 'path: deployment/base'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'path: deployment/base'
- en: 'repoURL: ''https://github.com/pietrolibro/gitops-k8s-deployments-book-weather-app.git'''
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'repoURL: ''https://github.com/pietrolibro/gitops-k8s-deployments-book-weather-app.git'''
- en: 'targetRevision: main'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'targetRevision: main'
- en: 'sources: []'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'sources: []'
- en: 'project: default'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'project: default'
- en: 'syncPolicy:'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'syncPolicy:'
- en: 'automated: null'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'automated: null'
- en: 'CreateNamespace: true'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'CreateNamespace: true'
- en: '[PRE10]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![Figure 8.15 – Argo CD instance populated with the newly created application](img/B22100_08_15.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.15 – 已填充新创建应用的Argo CD实例](img/B22100_08_15.jpg)'
- en: Figure 8.15 – Argo CD instance populated with the newly created application
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.15 – 已填充新创建应用的Argo CD实例
- en: The app will initially appear in an **OutofSync** status, indicating that the
    actual state of the cluster does not match the desired state defined in the Git
    repository. To resolve this, click on **Sync** to synchronize the app with the
    desired state outlined in your repository. This action will start the deployment
    process according to the configurations defined in your Git repository.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序最初会显示为**OutofSync**状态，表示集群的实际状态与 Git 仓库中定义的期望状态不匹配。为了解决此问题，点击**Sync**以将应用同步到仓库中定义的期望状态。此操作将根据
    Git 仓库中定义的配置开始部署过程。
- en: Once the application is synchronized, *Figures 8.16-17*, it will align with
    the configurations defined in the manifest. This includes the deployment of two
    replicas, as specified in the manifest settings. The application’s status should
    reflect that it is now in sync with the desired state, with the two replicas running
    as intended within your OpenShift cluster.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦应用程序完成同步，如*图 8.16-17*所示，它将与清单中定义的配置保持一致。这包括根据清单设置部署的两个副本。应用程序的状态应反映它现在与期望状态同步，且两个副本在
    OpenShift 集群中按预期运行。
- en: '![Figure 8.16 – Application panel after successful synchronization](img/B22100_08_16.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.16 – 同步成功后的应用面板](img/B22100_08_16.jpg)'
- en: Figure 8.16 – Application panel after successful synchronization
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.16 – 同步成功后的应用面板
- en: '![Figure 8.17 – Detailed status of deployed resources after synchronization](img/B22100_08_17.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.17 – 同步后已部署资源的详细状态](img/B22100_08_17.jpg)'
- en: Figure 8.17 – Detailed status of deployed resources after synchronization
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.17 – 同步后已部署资源的详细状态
- en: To test the GitOps CI/CD method of deployment, you can pull the repository locally
    using Git and then modify the number of replicas specified in the deployment file.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试 GitOps CI/CD 部署方法，你可以使用 Git 将仓库拉取到本地，然后修改部署文件中指定的副本数。
- en: Changes to the application code alone will not cause the sync status to be marked
    as out of sync. The sync status is only affected by changes related to the deployment
    (e.g., YAML configuration files). GitOps tools such as Argo CD monitor the state
    of the configuration files in the repository. If there is a discrepancy between
    the desired state defined in the configuration files and the actual state in the
    Kubernetes cluster, it will be marked as out of sync. Therefore, only modifications
    to deployment files (such as YAML files) will impact the sync status, not changes
    to the application code itself.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 仅对应用代码的更改不会导致同步状态被标记为不同步。同步状态只会受到与部署相关的更改的影响（例如，YAML 配置文件）。GitOps 工具（如 Argo
    CD）会监控仓库中配置文件的状态。如果配置文件中定义的期望状态与 Kubernetes 集群中的实际状态之间存在差异，它将被标记为不同步。因此，只有对部署文件（如
    YAML 文件）的修改才会影响同步状态，而不会影响应用代码本身的更改。
- en: This action embodies the iterative and controlled changes typical in GitOps
    workflows. If using Git directly is not your preference, you have the alternative
    to edit the file directly on GitHub, which simplifies the process while achieving
    the same result.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 此操作体现了 GitOps 工作流中典型的迭代和受控更改。如果你不喜欢直接使用 Git，你可以选择直接在 GitHub 上编辑文件，这样可以简化过程，同时实现相同的结果。
- en: Once you have made and committed your changes, the application status in Argo
    CD will shift to **Out of Sync**. This indicates that the actual deployment no
    longer matches the desired state as defined in your Git repository. In our demonstration,
    we are operating under a manual sync approach, meaning that after any changes,
    you will need to manually trigger a sync in Argo CD. This step is essential to
    apply the new configurations, highlighting the GitOps principle where updates
    are made through version-controlled files, with manual intervention kept to a
    minimum to ensure deliberate and recorded changes.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你进行了更改并提交，这时 Argo CD 中的应用状态将转为**Out of Sync**（不同步）。这表示实际部署的状态与 Git 仓库中定义的期望状态不匹配。在我们的演示中，我们采用手动同步方法，这意味着在任何更改后，你需要手动触发
    Argo CD 中的同步操作。这一步是应用新配置的关键，突显了 GitOps 原则，即通过版本控制的文件进行更新，最小化人工干预，以确保更改是有意为之并且有记录的。
- en: '![Figure 8.18 – Application in the OutOfSync status after changes to the manifest
    files](img/B22100_08_18.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.18 – 在更改清单文件后，应用处于 OutOfSync 状态](img/B22100_08_18.jpg)'
- en: Figure 8.18 – Application in the OutOfSync status after changes to the manifest
    files
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.18 – 在更改清单文件后，应用处于 OutOfSync 状态
- en: To resynchronize the application and apply the updated configurations, simply
    click the **Sync** button in the Argo CD dashboard. After initiating the sync,
    monitor the process to ensure it completes successfully. Once the synchronization
    is successful, the application’s status will update to reflect that it is now
    in sync with the desired state as defined in your Git repository, incorporating
    the changes you made, such as the updated number of replicas.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要重新同步应用程序并应用更新的配置，只需在 Argo CD 仪表盘中点击 **同步** 按钮。启动同步后，监控过程以确保其成功完成。一旦同步成功，应用程序的状态将更新，以反映它现在与
    Git 仓库中定义的目标状态同步，包括您所做的更改，如更新后的副本数。
- en: As we transition from understanding the foundational aspects of Red Hat OpenShift
    and Kubernetes, we now shift our focus toward applying automation and configuration
    best Practices within these environments.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们从理解 Red Hat OpenShift 和 Kubernetes 的基础概念过渡，现在我们将焦点转向在这些环境中应用自动化和配置最佳实践。
- en: Automation and configuration best practices
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化和配置最佳实践
- en: OpenShift is widely adopted for hosting critical applications globally. As such,
    applications are expected to meet high availability standards, often aiming for
    five nines (99.999%) to ensure continuous service delivery. OpenShift assists
    in deploying applications in a highly available manner to mitigate outages, even
    when instances or infrastructure are compromised.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift 被广泛用于全球托管关键应用程序。因此，应用程序必须满足高可用性标准，通常目标是五个 9（99.999%），以确保持续的服务交付。OpenShift
    有助于以高可用的方式部署应用程序，减少故障，即使实例或基础设施出现问题也能保证服务不中断。
- en: 'This summary outlines some key practices for deploying highly available applications
    on OpenShift:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 本总结概述了在 OpenShift 上部署高可用应用程序的一些关键实践：
- en: '**Multiple replicas**: Deploying multiple pod instances ensures that the deletion
    or failure of a single pod doesn’t lead to downtime. A recommended practice is
    to have at least two replicas for each application to ensure continuity.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多个副本**：部署多个 Pod 实例可以确保单个 Pod 的删除或故障不会导致停机。推荐的做法是为每个应用至少配置两个副本，以确保持续性。'
- en: '`RollingUpdate` is recommended.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 推荐使用 `RollingUpdate`。
- en: '`terminationGracePeriodSeconds` as needed to give your applications sufficient
    time to close out tasks.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据需要设置 `terminationGracePeriodSeconds`，以便为应用程序提供足够的时间完成任务。
- en: '**Probes**: Use **liveness**, **readiness**, and **startup** probes to monitor
    application health. Liveness probes help restart applications in a failed state,
    readiness probes manage traffic flow to the application, and startup probes allow
    time for initial app startup before other probes start monitoring.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**探针**：使用 **存活探针**、**就绪探针** 和 **启动探针** 来监控应用程序的健康状态。存活探针帮助在应用失败时重启应用，就绪探针管理应用的流量，启动探针在其他探针开始监控之前为应用启动提供时间。'
- en: '`initContainers` or `startupProbes` to ensure dependencies are ready before
    starting your main application and employ readiness probes to maintain health
    checks.'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `initContainers` 或 `startupProbes` 来确保在启动主应用程序之前，依赖项已经准备好，并使用就绪探针来维持健康检查。
- en: '**PodDisruptionBudgets (PDBs)**: Implement PDBs to limit the number of pods
    that can be simultaneously unavailable during maintenance, thus preserving application
    availability.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Pod 中断预算（PDB）**：实施 PDBs 限制在维护过程中可以同时不可用的 Pod 数量，从而保护应用程序的可用性。'
- en: '**Autoscaling**: Utilize **HorizontalPodAutoscaler** (**HPA**) and **VerticalPodAutoscaler**
    (**VPA**) to dynamically adjust the number of pod replicas or resources per pod
    based on the current load, ensuring that your application can handle varying levels
    of traffic.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动扩展**：利用 **水平 Pod 自动扩展器**（**HPA**）和 **垂直 Pod 自动扩展器**（**VPA**）根据当前负载动态调整
    Pod 副本数或每个 Pod 的资源，以确保应用程序能够应对不同水平的流量。'
- en: '**Pod topology spread constraints**: Spread your pod replicas across different
    failure domains (e.g., nodes, racks, or zones) to avoid simultaneous downtime
    and ensure better availability and resilience.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Pod 拓扑扩展约束**：将 Pod 副本分布在不同的故障域（例如节点、机架或区域）中，以避免同时停机并确保更好的可用性和弹性。'
- en: '**Deployment strategies**: Use blue/green or canary deployment strategies to
    minimize disruptions during application updates. These strategies enable safer
    rollouts and easier rollback in case of issues.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署策略**：使用蓝绿部署或金丝雀部署策略，以最小化应用程序更新过程中的中断。这些策略能够实现更安全的发布，并且在出现问题时可以轻松回滚。'
- en: For critical applications hosted on OpenShift, adopting these best practices
    will significantly boost availability, resilience, and continuous service delivery,
    meeting and even exceeding enterprise-level expectations and **service-level**
    **agreements** (**SLAs**).
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 对于托管在 OpenShift 上的关键应用，采用这些最佳实践将显著提高可用性、韧性和持续的服务交付，满足甚至超越企业级的期望和**服务级别** **协议**（**SLA**）。
- en: 'Moreover, factors such as node sizing, resource allocation, and scheduling
    strategies play a vital role in enhancing the performance and dependability of
    your OpenShift framework. Regarding application security, we strongly recommend
    adhering to the following best practices to fortify the security posture of your
    applications:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，节点大小、资源分配和调度策略等因素在提升 OpenShift 框架的性能和可靠性方面起着至关重要的作用。关于应用安全，我们强烈建议遵循以下最佳实践，以增强应用的安全防护：
- en: '**Utilize trusted base container images**: Prioritize the use of official or
    vendor-provided container images, as they are rigorously tested, secured, and
    maintained. If you opt for community-supported images, ensure they are from reputable
    sources. Avoid images from unknown origins found in public registries such as
    Docker Hub, as they may pose security risks.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用可信的基础容器镜像**：优先使用官方或供应商提供的容器镜像，因为这些镜像经过严格的测试、加固和维护。如果选择社区支持的镜像，确保它们来自可靠的来源。避免使用来自未知来源的镜像，尤其是在公共注册表（如
    Docker Hub）中找到的镜像，因为这些镜像可能存在安全风险。'
- en: '**Regularly update base container images**: Staying updated with the latest
    versions of container images is crucial, as they include the most recent security
    patches and fixes. Implement automated processes in your CI pipeline to pull the
    latest base images during the build process and to trigger rebuilds of your application
    images when new base image updates are released.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定期更新基础容器镜像**：保持容器镜像的最新版本非常重要，因为它们包含了最新的安全补丁和修复。在你的 CI 管道中实现自动化流程，以便在构建过程中拉取最新的基础镜像，并在新的基础镜像更新发布时触发应用镜像的重建。'
- en: '**Differentiate between build and runtime images**: Separate your build and
    runtime environments by using distinct images for each phase. The build image
    should contain only what is necessary for compiling and building the application,
    while the runtime image should be slimmed down to include only the essentials
    needed for running the application. This approach minimizes the attack surface
    by reducing unnecessary dependencies and vulnerabilities.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**区分构建镜像和运行时镜像**：通过使用不同的镜像来分离构建环境和运行时环境。构建镜像应仅包含编译和构建应用所需的内容，而运行时镜像则应精简，仅包括运行应用所需的基本组件。这种方法通过减少不必要的依赖和漏洞来最小化攻击面。'
- en: '**Adhere to restricted security context constraints (SCCs)**: Whenever feasible,
    configure your container images to comply with OpenShift’s restricted SCC. This
    constraint enforces stringent security policies, limiting the potential for security
    breaches. Adapting your applications to operate under the restricted SCC maximizes
    the security level, safeguarding the cluster in the event of an application compromise.
    Refer to OpenShift’s documentation on supporting arbitrary user IDs for additional
    guidance.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**遵循限制性的安全上下文约束（SCC）**：在可能的情况下，配置容器镜像以遵守 OpenShift 的限制性 SCC。此约束执行严格的安全策略，限制潜在的安全漏洞。将应用程序调整为在限制性
    SCC 下运行，可以最大化安全级别，在应用程序遭到入侵时保护集群。有关更多指导，请参考 OpenShift 关于支持任意用户 ID 的文档。'
- en: '**Secure inter-component communications**: Ensure that communication between
    application components is secured, particularly if sensitive data is being transmitted.
    While OpenShift’s network is designed to be secure, using **Transport Layer Security**
    (**TLS**) adds an extra layer of protection. For a more streamlined approach,
    consider utilizing **OpenShift Service Mesh**, which can manage TLS, taking the
    burden off individual applications and providing centralized control over security
    policies.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**确保组件间通信安全**：确保应用组件间的通信是安全的，特别是当传输敏感数据时。虽然 OpenShift 的网络设计本身就是安全的，但使用**传输层安全性**（**TLS**）可以增加额外的保护层。为了更简化的方案，可以考虑利用**OpenShift
    服务网格**，它可以管理 TLS，从而减轻单个应用的负担，并提供对安全策略的集中控制。'
- en: Having explored key practices to enhance application availability, resilience,
    and security within OpenShift, we conclude this section. These guidelines provide
    a foundation for maintaining robust, secure applications that meet enterprise
    standards. As we transition, the forthcoming section will delve into a comparative
    analysis between Kubernetes and Red Hat OpenShift. This comparison will illuminate
    the distinct features and benefits of each platform, helping you understand their
    unique advantages in various operational environments. Let’s proceed to uncover
    the differences and similarities that define Kubernetes and Red Hat OpenShift,
    setting the stage for informed decision making in your container orchestration
    strategies.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 探讨了在 OpenShift 中提升应用可用性、韧性和安全性的关键实践后，我们结束了本节内容。这些指南为保持符合企业标准的强大、安全的应用程序提供了基础。接下来的部分将深入对比分析
    Kubernetes 和 Red Hat OpenShift。这一比较将揭示每个平台的独特功能和优势，帮助你理解它们在各种操作环境中的独特优势。让我们继续揭示
    Kubernetes 和 Red Hat OpenShift 的异同，为容器编排策略中的明智决策奠定基础。
- en: A comparison of Kubernetes Red Hat OpenShift
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes 和 Red Hat OpenShift 的比较
- en: '*Table 8.1* provides a high-level comparison between Kubernetes and OpenShift.
    While Kubernetes offers a flexible and widely adopted container orchestration
    platform, OpenShift provides a more integrated and security-focused enterprise
    solution with extensive support and built-in features for developer productivity
    and operational efficiency.'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '*表 8.1* 提供了 Kubernetes 和 OpenShift 之间的高级对比。Kubernetes 提供了一个灵活且广泛采用的容器编排平台，而
    OpenShift 提供了一个更集成、更注重安全性的企业解决方案，具有广泛的支持和内建的功能，以提高开发者生产力和操作效率。'
- en: '| **Feature/Aspect** | **Kubernetes** | **OpenShift** |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| **功能/方面** | **Kubernetes** | **OpenShift** |'
- en: '| --- | --- | --- |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| **Origin** | Open-source project by Google | Red Hat’s enterprise Kubernetes
    distribution |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| **来源** | Google 的开源项目 | Red Hat 的企业版 Kubernetes 发行版 |'
- en: '| **Installation** | Manual, requires setup of networking, storage, etc. |
    Streamlined with automated setups and configurations |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| **安装** | 手动，需要设置网络、存储等 | 通过自动化设置和配置简化 |'
- en: '| **Web UI** | Basic dashboard available | Comprehensive and user-friendly
    console with advanced features |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| **Web UI** | 提供基础的仪表板 | 提供功能全面且用户友好的控制台，具有高级功能 |'
- en: '| **Security** | Basic security features: additional tools are often needed
    | Enhanced security with built-in authentication and authorization, SELinux integration
    |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
  zh: '| **安全性** | 基本的安全功能：通常需要额外的工具 | 提供增强的安全性，内置身份验证和授权，SELinux 集成 |'
- en: '| **CI/CD integration** | Plugins and third-party tools required | Built-in
    CI/CD tools such as OpenShift Pipelines and **Source-to-Image** (**S2I**) |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
  zh: '| **CI/CD 集成** | 需要插件和第三方工具 | 内置 CI/CD 工具，如 OpenShift Pipelines 和 **Source-to-Image**
    (**S2I**) |'
- en: '| **Networking** | Pluggable **Container Network** **Interface** (**CNI**)
    | Default SDN with additional networking features |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
  zh: '| **网络** | 可插拔的 **容器网络** **接口** (**CNI**) | 默认 SDN，附加网络功能 |'
- en: '| **Storage** | Supports PersistentVolumes with manual configuration | Simplified
    storage integration with automatic provisioning |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| **存储** | 支持 PersistentVolumes，需手动配置 | 简化的存储集成，自动化供应 |'
- en: '| **Developer tools** | Limited in-built tools | Extensive tools including
    OpenShift Do (`odo`), S2I, and DevSpaces |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| **开发者工具** | 内置工具有限 | 包括 OpenShift Do (`odo`)、S2I 和 DevSpaces 在内的广泛工具 |'
- en: '| **Monitoring** **and logging** | Basic with third-party integration (e.g.,
    Prometheus) | Integrated monitoring and logging stack |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| **监控** **和日志记录** | 基本的第三方集成（例如，Prometheus） | 集成的监控和日志记录堆栈 |'
- en: '| **Registry** | Requires external or third-party registry | Integrated container
    image registry |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| **注册表** | 需要外部或第三方注册表 | 集成的容器镜像注册表 |'
- en: '| **Enterprise support** | Available through third-party providers | Direct
    support from Red Hat |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| **企业支持** | 通过第三方提供商提供 | 来自 Red Hat 的直接支持 |'
- en: '| **Community** **and support** | Large open-source community | Strong open-source
    community with enterprise support |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| **社区** **和支持** | 大型开源社区 | 拥有强大的开源社区和企业支持 |'
- en: '| **Pricing** | Free, costs associated with cloud providers or infrastructure
    | Subscription-based with various plans for enterprise use |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '| **定价** | 免费，但与云服务商或基础设施相关的成本 | 基于订阅的定价，提供多种企业使用计划 |'
- en: Table 8.1 – A Kubernetes and Red Hat OpenShift feature/aspect comparison
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 表 8.1 – Kubernetes 和 Red Hat OpenShift 功能/方面对比
- en: In concluding our comparison between Kubernetes and Red Hat OpenShift, we’ve
    uncovered the distinct features, advantages, and considerations of each platform.
    This analysis equips you with the knowledge to make informed decisions based on
    your specific operational needs and goals. As we move forward, let’s apply this
    understanding to further enhance our deployment strategies and operational efficiencies
    within the context of container orchestration and cloud-native development.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在结束我们对 Kubernetes 和 Red Hat OpenShift 的对比时，我们揭示了每个平台的独特特性、优势和考虑因素。这一分析使您能够根据具体的操作需求和目标做出明智的决策。接下来，让我们将这些理解应用于进一步增强我们的部署策略和操作效率，尤其是在容器编排和云原生开发的背景下。
- en: Summary
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we embarked on an in-depth exploration of leveraging GitOps
    within the Red Hat OpenShift environment, highlighting the integration of automation
    and configuration best practices to enhance operational efficiency and security.
    We began by setting up a local OpenShift cluster using CRC, providing a sandbox
    for readers to apply real-world applications of GitOps principles. This practical
    approach demystified the process of deploying and managing containerized applications
    using declarative configurations and automated workflows.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们深入探索了如何在 Red Hat OpenShift 环境中利用 GitOps，强调了自动化和配置最佳实践的整合，以提升操作效率和安全性。我们首先通过使用
    CRC 设置了一个本地 OpenShift 集群，为读者提供了一个沙盒环境，可以应用 GitOps 原则的实际应用。这个实践方法让容器化应用使用声明性配置和自动化工作流的部署与管理过程变得更加清晰。
- en: We delved into various best practices, from using trusted base images and setting
    appropriate resource limits to implementing robust security measures such as TLS
    for inter-component communication. Each practice was designed to fortify the deployment
    process, reduce vulnerabilities, and ensure applications remain resilient and
    available. By comparing Kubernetes with Red Hat OpenShift, we provided insights
    into how OpenShift extends Kubernetes capabilities, offering enhanced features
    that cater to enterprise needs.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 我们深入探讨了各种最佳实践，从使用受信任的基础镜像、设置适当的资源限制，到实施强大的安全措施，如用于组件间通信的 TLS。每项实践都旨在加强部署过程，减少漏洞，并确保应用保持弹性和可用性。通过将
    Kubernetes 与 Red Hat OpenShift 进行对比，我们提供了 OpenShift 如何扩展 Kubernetes 能力的见解，展示了为满足企业需求而增强的特性。
- en: Throughout the chapter, the emphasis was placed on hands-on examples, ensuring
    that readers not only understand theoretical concepts but also how to apply them
    effectively in their own OpenShift environments. As we conclude, the knowledge
    and strategies discussed here pave the way for more secure, efficient, and reliable
    application deployments, reflecting the evolving landscape of cloud-native development
    and the increasing importance of GitOps methodologies.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，重点放在了实际操作示例上，确保读者不仅理解理论概念，还能有效地将其应用于自己的 OpenShift 环境中。随着我们结束讨论，这里提到的知识和策略为更安全、高效、可靠的应用部署铺平了道路，反映了云原生开发的不断变化的格局以及
    GitOps 方法论日益重要的趋势。
- en: In the next chapter, we will explore the integration of GitOps practices within
    Azure and AWS, unveiling advanced strategies for cloud-native deployments.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探索 GitOps 实践在 Azure 和 AWS 中的整合，揭示云原生部署的先进策略。
